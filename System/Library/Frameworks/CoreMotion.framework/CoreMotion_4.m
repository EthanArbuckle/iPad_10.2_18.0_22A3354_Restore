void sub_18F35FC54(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D438 != -1)
    dispatch_once(&qword_1EE16D438, &unk_1E2955128);
  v3 = off_1EE16D428;
  if (os_log_type_enabled((os_log_t)off_1EE16D428, OS_LOG_TYPE_DEBUG))
  {
    v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0)
      v5 = v4;
    else
      v5 = *(_QWORD *)v4;
    *(_DWORD *)buf = 136446210;
    v8 = v5;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEBUG, "Default handler received message %{public}s", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D438 != -1)
      dispatch_once(&qword_1EE16D438, &unk_1E2955128);
    CLConnectionMessage::name(*a2);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMProxPDPAndALSPhoneManagerInternal _startALSPhoneUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
}

void sub_18F35FE30(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ExecutablePathFromPid;
  uint64_t v7;
  NSObject *v8;
  pid_t v9;
  uint64_t v10;
  char *v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  pid_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = getpid();
  ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2, v4, v5);
  if (ExecutablePathFromPid)
  {
    v7 = ExecutablePathFromPid;
    if (qword_1EE16D438 != -1)
      dispatch_once(&qword_1EE16D438, &unk_1E2955128);
    v8 = off_1EE16D428;
    if (os_log_type_enabled((os_log_t)off_1EE16D428, OS_LOG_TYPE_DEFAULT))
    {
      v9 = getpid();
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138478339;
      v13 = v7;
      v14 = 1025;
      v15 = v9;
      v16 = 2049;
      v17 = v10;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_DEFAULT, "Client connection interrupt, %{private}@, %{private}d, %{private}p", buf, 0x1Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D438 != -1)
        dispatch_once(&qword_1EE16D438, &unk_1E2955128);
      getpid();
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMProxPDPAndALSPhoneManagerInternal _startALSPhoneUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
}

os_log_t sub_18F360200()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Eclipse");
  off_1EE16D428 = result;
  return result;
}

_QWORD *sub_18F36022C@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F36028C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F360278(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F36028C(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F3602EC((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F3602D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F3602EC(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F360340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F36056C(const char *a1)
{
  passwd *v2;
  uid_t pw_uid;
  gid_t pw_gid;

  v2 = getpwnam("mobile");
  if (v2)
  {
    pw_uid = v2->pw_uid;
    pw_gid = v2->pw_gid;
  }
  else
  {
    pw_uid = 501;
    pw_gid = 501;
  }
  return lchown(a1, pw_uid, pw_gid);
}

uint64_t sub_18F3605AC(_BYTE *a1, uid_t a2, gid_t a3)
{
  int v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t result;
  stat v10;
  char v11[1024];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  bzero(v11, 0x400uLL);
  v6 = *a1;
  if (!*a1)
    return 1;
  v7 = 0;
  v8 = a1 + 1;
  while (1)
  {
    v11[v7] = v6;
    if (v6 != 47 || !stat(v11, &v10))
      goto LABEL_7;
    if (mkdir(v11, 0x1FFu))
      return 0;
    lchown(v11, a2, a3);
    lchmod(v11, 0x1C0u);
LABEL_7:
    result = 1;
    if (v7 <= 0x3FD)
    {
      v6 = v8[v7++];
      if (v6)
        continue;
    }
    return result;
  }
}

uint64_t sub_18F3606A4(const char *a1, const char *a2)
{
  void *v4;
  FILE *v5;
  FILE *v6;
  FILE *v7;
  FILE *v8;
  size_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  char *v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  char *v19;
  char *v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = malloc_type_malloc(0x400uLL, 0x93D02233uLL);
  if (!v4)
    goto LABEL_30;
  v5 = fopen(a1, "rb");
  if (!v5)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
    v12 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v13 = *__error();
      *(_DWORD *)buf = 136446466;
      v22 = a1;
      v23 = 1026;
      v24 = v13;
      _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_FAULT, "cannot open source file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    v11 = 0;
    if (!sub_18F1FCA08(115, 0))
      goto LABEL_38;
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
    __error();
    v14 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "int CLCommonCopyFile(const char *, const char *)", "CoreLocation: %s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
LABEL_30:
    v11 = 0;
    goto LABEL_38;
  }
  v6 = v5;
  v7 = fopen(a2, "wb");
  if (!v7)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
    v15 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v16 = *__error();
      *(_DWORD *)buf = 136446466;
      v22 = a2;
      v23 = 1026;
      v24 = v16;
      _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_FAULT, "cannot open target file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
      __error();
      v19 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "int CLCommonCopyFile(const char *, const char *)", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
    fclose(v6);
    goto LABEL_30;
  }
  v8 = v7;
  while (1)
  {
    if (feof(v6))
    {
      v11 = 1;
      goto LABEL_37;
    }
    v9 = fread(v4, 1uLL, 0x400uLL, v6);
    if (v9 == -1)
      break;
    if (v9 != fwrite(v4, 1uLL, v9, v8))
    {
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
      v10 = off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        v22 = a2;
        _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_FAULT, "error writing target file: %{public}s", buf, 0xCu);
      }
      v11 = 0;
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE88 == -1)
          goto LABEL_44;
LABEL_47:
        dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
LABEL_44:
        v20 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "int CLCommonCopyFile(const char *, const char *)", "CoreLocation: %s\n", v20);
        if (v20 != (char *)buf)
          free(v20);
        v11 = 0;
        goto LABEL_37;
      }
      goto LABEL_37;
    }
  }
  if (qword_1ECEDEE88 != -1)
    dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
  v17 = off_1ECEDEE80;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136446210;
    v22 = a1;
    _os_log_impl(&dword_18F1DC000, v17, OS_LOG_TYPE_FAULT, "error reading source file: %{public}s", buf, 0xCu);
  }
  v11 = 0;
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      goto LABEL_47;
    goto LABEL_44;
  }
LABEL_37:
  fclose(v6);
  fclose(v8);
LABEL_38:
  free(v4);
  return v11;
}

uint64_t sub_18F360D08(const char *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t PathComponent;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  FILE *v24;
  FILE *v25;
  BZFILE *v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  size_t v30;
  NSObject *v31;
  int v32;
  int v33;
  uint8_t *v34;
  NSObject *v35;
  int v36;
  NSObject *v38;
  uint8_t *v39;
  NSObject *v40;
  int v41;
  uint8_t *v42;
  uint8_t *v43;
  id v44[2];
  int bzerror;
  int v46;
  const char *v47;
  __int16 v48;
  int v49;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v7 = (void *)MEMORY[0x1E0CB3940];
  v8 = (void *)objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], a2, (uint64_t)a2, a4, a5);
  PathComponent = objc_msgSend_lastPathComponent(v8, v9, v10, v11, v12);
  v17 = (void *)objc_msgSend_stringWithFormat_(v7, v14, (uint64_t)CFSTR("compress:%@"), v15, v16, PathComponent);
  v22 = objc_msgSend_UTF8String(v17, v18, v19, v20, v21);
  sub_18F361CC4((uint64_t *)v44, v22, 0);
  bzerror = 0;
  v23 = malloc_type_malloc(0x400uLL, 0x72AACFCCuLL);
  if (!v23)
  {
LABEL_38:
    v28 = 0;
    goto LABEL_39;
  }
  v24 = fopen(a1, "rb");
  if (!v24)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
    v31 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v32 = *__error();
      *(_DWORD *)buf = 136446466;
      v51 = a1;
      v52 = 1026;
      v53 = v32;
      _os_log_impl(&dword_18F1DC000, v31, OS_LOG_TYPE_FAULT, "cannot open source file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
      v33 = *__error();
      v46 = 136446466;
      v47 = a1;
      v48 = 1026;
      v49 = v33;
      v34 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_18F419700((int)"Generic", 1, 0, 0, (int)"int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n");
      if (v34 != buf)
        free(v34);
    }
    goto LABEL_38;
  }
  v25 = fopen(a2, "wb");
  if (!v25)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
    v35 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v36 = *__error();
      *(_DWORD *)buf = 136446466;
      v51 = a1;
      v52 = 1026;
      v53 = v36;
      _os_log_impl(&dword_18F1DC000, v35, OS_LOG_TYPE_FAULT, "cannot open target file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
      v41 = *__error();
      v46 = 136446466;
      v47 = a1;
      v48 = 1026;
      v49 = v41;
      v42 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_18F419700((int)"Generic", 1, 0, 0, (int)"int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n");
      if (v42 != buf)
        free(v42);
    }
    fclose(v24);
    goto LABEL_38;
  }
  v26 = BZ2_bzWriteOpen(&bzerror, v25, 1, 0, 0);
  if (bzerror)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
    v27 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446466;
      v51 = a2;
      v52 = 1026;
      v53 = bzerror;
      _os_log_impl(&dword_18F1DC000, v27, OS_LOG_TYPE_FAULT, "cannot open compression stream: %{public}s, bzerror %{public}d", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
LABEL_67:
        dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
LABEL_56:
      v46 = 136446466;
      v47 = a2;
      v48 = 1026;
      v49 = bzerror;
      v39 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_18F419700((int)"Generic", 1, 0, 0, (int)"int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n");
LABEL_57:
      if (v39 != buf)
        free(v39);
    }
  }
  else
  {
    while (1)
    {
      if (feof(v24))
      {
        v28 = 1;
        goto LABEL_11;
      }
      v30 = fread(v23, 1uLL, 0x400uLL, v24);
      if (v30 == -1)
        break;
      BZ2_bzWrite(&bzerror, v26, v23, v30);
      if (bzerror)
      {
        if (qword_1ECEDEE88 != -1)
          dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
        v40 = off_1ECEDEE80;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136446466;
          v51 = a2;
          v52 = 1026;
          v53 = bzerror;
          _os_log_impl(&dword_18F1DC000, v40, OS_LOG_TYPE_FAULT, "error writing target file: %{public}s, bzerror: %{public}d", buf, 0x12u);
        }
        if (!sub_18F1FCA08(115, 0))
          goto LABEL_10;
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE88 != -1)
          goto LABEL_67;
        goto LABEL_56;
      }
    }
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
    v38 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v51 = a1;
      _os_log_impl(&dword_18F1DC000, v38, OS_LOG_TYPE_FAULT, "error reading source file: %{public}s", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
      v46 = 136446210;
      v47 = a1;
      v39 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_18F419700((int)"Generic", 1, 0, 0, (int)"int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n");
      goto LABEL_57;
    }
  }
LABEL_10:
  v28 = 0;
LABEL_11:
  fclose(v24);
  if (v26)
  {
    BZ2_bzWriteClose(&bzerror, v26, 0, 0, 0);
    if (bzerror)
    {
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
      v29 = off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446466;
        v51 = a2;
        v52 = 1026;
        v53 = bzerror;
        _os_log_impl(&dword_18F1DC000, v29, OS_LOG_TYPE_FAULT, "error closing target file: %{public}s, bzerror: %{public}d", buf, 0x12u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE88 != -1)
          dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
        v46 = 136446466;
        v47 = a2;
        v48 = 1026;
        v49 = bzerror;
        v43 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_18F419700((int)"Generic", 1, 0, 0, (int)"int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n");
        if (v43 != buf)
          free(v43);
      }
    }
  }
  fclose(v25);
LABEL_39:
  free(v23);
  sub_18F361EEC(v44);
  return v28;
}

void sub_18F361704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_18F361EEC((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F361724(const __CFString *a1, const __CFString *a2, Boolean *a3)
{
  Boolean *v5;
  const void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AppBooleanValue;
  void *v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const __CFAllocator *v31;
  const __CFArray *v32;
  const __CFString *v33;
  CFPropertyListRef v34;
  const void *v35;
  CFTypeID v36;
  void *v38[2];
  char v39;
  char v40;
  void *__p[2];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v40 = 0;
  if (a3)
    v5 = a3;
  else
    v5 = (Boolean *)&v40;
  *v5 = 0;
  v6 = (const void *)CFCopyUserName();
  if (CFEqual(v6, CFSTR("mobile")))
  {
    AppBooleanValue = CFPreferencesGetAppBooleanValue(a1, a2, v5);
    if (!*v5)
    {
      v12 = (void *)MEMORY[0x1E0CB3940];
      v13 = (char *)objc_msgSend_UTF8String(CFSTR("mobile"), v7, v8, v9, v10);
      sub_18F270374(v38, v13);
      sub_18F1E9118((uint64_t)v38, __p);
      if (v42 >= 0)
        v17 = objc_msgSend_stringWithUTF8String_(v12, v14, (uint64_t)__p, v15, v16);
      else
        v17 = objc_msgSend_stringWithUTF8String_(v12, v14, (uint64_t)__p[0], v15, v16);
      v21 = (void *)v17;
      v22 = objc_msgSend_componentsJoinedByString_(&unk_1E298BFC0, v18, (uint64_t)CFSTR("/"), v19, v20);
      v26 = (void *)objc_msgSend_stringByAppendingPathComponent_(v21, v23, v22, v24, v25);
      v30 = (void *)objc_msgSend_stringByAppendingString_(v26, v27, (uint64_t)CFSTR("/"), v28, v29);
      if (v42 < 0)
        operator delete(__p[0]);
      if (v39 < 0)
        operator delete(v38[0]);
      __p[0] = v30;
      __p[1] = (void *)a2;
      v31 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v32 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)__p, 2, MEMORY[0x1E0C9B378]);
      if (v32)
      {
        v33 = CFStringCreateByCombiningStrings(v31, v32, &stru_1E295ADC8);
        if (v33)
        {
          AppBooleanValue = CFPreferencesGetAppBooleanValue(a1, v33, v5);
          CFRelease(v33);
        }
        CFRelease(v32);
      }
    }
  }
  else
  {
    v34 = CFPreferencesCopyValue(a1, a2, CFSTR("mobile"), (CFStringRef)*MEMORY[0x1E0C9B230]);
    if (v34)
    {
      v35 = v34;
      v36 = CFGetTypeID(v34);
      if (v36 == CFBooleanGetTypeID())
      {
        *v5 = 1;
        AppBooleanValue = CFEqual(v35, (CFTypeRef)*MEMORY[0x1E0C9AE50]);
      }
      else if (v36 == CFNumberGetTypeID() && !CFNumberIsFloatType((CFNumberRef)v35))
      {
        *v5 = 1;
        LODWORD(__p[0]) = 0;
        CFNumberGetValue((CFNumberRef)v35, kCFNumberIntType, __p);
        AppBooleanValue = LODWORD(__p[0]) != 0;
      }
      else
      {
        AppBooleanValue = 0;
      }
      CFRelease(v35);
    }
    else
    {
      return 0;
    }
  }
  return AppBooleanValue;
}

void sub_18F361998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F3619D4(FILE *a1)
{
  uint32_t v2;
  uint64_t v3;
  uint32_t v4;
  const char *image_name;
  size_t v6;
  int v7;
  const mach_header *image_header;
  const mach_header *v9;
  const mach_header *v10;
  uint32_t ncmds;
  const mach_header *v12;
  int32_t *p_cputype;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int v19;
  const mach_header **v20;
  uint64_t i;
  char *v22;
  __int128 v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t j;
  const char *v28;
  unint64_t *v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = _dyld_image_count();
  v3 = v2;
  v29 = (unint64_t *)malloc_type_calloc(v2, 0x38uLL, 0x105004076241286uLL);
  if (v2 && v29)
  {
    v4 = 0;
    do
    {
      image_name = _dyld_get_image_name(v4);
      v6 = (size_t)&image_name[strlen(image_name) + 1];
      do
      {
        v7 = *(unsigned __int8 *)(v6 - 2);
        --v6;
      }
      while (v7 != 47);
      image_header = _dyld_get_image_header(v4);
      v9 = image_header;
      v10 = *(const mach_header **)&image_header->cputype;
      ncmds = image_header->ncmds;
      if (ncmds)
      {
        v12 = 0;
        p_cputype = &image_header[1].cputype;
        do
        {
          if (*p_cputype == 1)
          {
            if (!strncmp((const char *)p_cputype + 8, "__TEXT", 6uLL))
              v12 = (const mach_header *)((char *)v12 + p_cputype[7]);
          }
          else if (*p_cputype == 27)
          {
            v30[0] = *(_OWORD *)(p_cputype + 2);
          }
          p_cputype = (int32_t *)((char *)p_cputype + p_cputype[1]);
          --ncmds;
        }
        while (ncmds);
      }
      else
      {
        v12 = 0;
      }
      v14 = 0;
      v15 = v29;
      while (1)
      {
        v17 = *v15;
        v15 += 7;
        v16 = v17;
        if (v17 >= (unint64_t)v9 || v16 == 0)
          break;
        if (v3 == ++v14)
        {
          v14 = v3;
          v19 = v3;
          goto LABEL_24;
        }
      }
      v19 = v14;
LABEL_24:
      v20 = (const mach_header **)&v29[7 * v14];
      memmove(v20 + 7, v20, 56 * (v3 + ~v19));
      *v20 = v9;
      v20[1] = v12;
      *((_OWORD *)v20 + 1) = v30[0];
      v20[4] = (const mach_header *)image_name;
      v20[5] = (const mach_header *)v6;
      v20[6] = v10;
      ++v4;
    }
    while (v4 != (_DWORD)v3);
  }
  fwrite("Binary Images:\n", 0xFuLL, 1uLL, a1);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v22 = (char *)&v29[7 * i];
      v23 = *((_OWORD *)v22 + 1);
      v30[0] = *(_OWORD *)v22;
      v30[1] = v23;
      v31 = *((_OWORD *)v22 + 2);
      v32 = *((_QWORD *)v22 + 6);
      v24 = "other";
      if ((_DWORD)v32 != 16777228)
      {
        v25 = "unknown";
        if (HIDWORD(v32) == 9)
          v25 = "armv7";
        v24 = "armv6";
        if (HIDWORD(v32) != 6)
          v24 = v25;
      }
      v28 = v24;
      if (i)
        v26 = 32;
      else
        v26 = 43;
      fprintf(a1, "%16p - %lld %c%s %s <", *(const void **)&v30[0], (_QWORD)((v30[0] + __PAIR128__(-1, 0)) >> 64), v26, *((const char **)&v31 + 1), v28);
      for (j = 16; j != 32; ++j)
        fprintf(a1, "%02X", *((unsigned __int8 *)v30 + j));
      fprintf(a1, "> %s\n", (const char *)v31);
    }
  }
  free(v29);
}

uint64_t *sub_18F361CC4(uint64_t *a1, uint64_t a2, int a3)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint8_t *v12;
  uint8_t buf[4];
  uint64_t *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *a1 = os_transaction_create();
  a1[1] = 0;
  if (!a3)
  {
    a1[1] = (uint64_t)(id)objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, a2, v7, v8);
    if (qword_1EE16D998 != -1)
      dispatch_once(&qword_1EE16D998, &unk_1E2955EA0);
    v9 = qword_1EE16D9A0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D9A0, OS_LOG_TYPE_DEFAULT))
    {
      v10 = a1[1];
      *(_DWORD *)buf = 134349314;
      v14 = a1;
      v15 = 2114;
      v16 = v10;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_DEFAULT, "os_transaction created: (%{public}p) %{public}@", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D998 != -1)
        dispatch_once(&qword_1EE16D998, &unk_1E2955EA0);
      v12 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_18F419700((int)"Generic", 1, 0, 2, (int)"CLAutoOSTransaction::CLAutoOSTransaction(const char *, LoggingPolicy)", "CoreLocation: %s\n");
      if (v12 != buf)
        free(v12);
    }
  }
  return a1;
}

os_log_t sub_18F361EC0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Utility", "QA");
  qword_1EE16D9A0 = (uint64_t)result;
  return result;
}

id *sub_18F361EEC(id *a1)
{
  NSObject *v2;
  id v3;
  uint8_t *v5;
  uint8_t buf[4];
  id *v7;
  __int16 v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1[1])
  {
    if (qword_1EE16D998 != -1)
      dispatch_once(&qword_1EE16D998, &unk_1E2955EA0);
    v2 = qword_1EE16D9A0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D9A0, OS_LOG_TYPE_DEFAULT))
    {
      v3 = a1[1];
      *(_DWORD *)buf = 134349314;
      v7 = a1;
      v8 = 2114;
      v9 = v3;
      _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "os_transaction releasing: (%{public}p) %{public}@", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D998 != -1)
        dispatch_once(&qword_1EE16D998, &unk_1E2955EA0);
      v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_18F419700((int)"Generic", 1, 0, 2, (int)"CLAutoOSTransaction::~CLAutoOSTransaction()", "CoreLocation: %s\n");
      if (v5 != buf)
        free(v5);
    }

    a1[1] = 0;
  }

  *a1 = 0;
  return a1;
}

void sub_18F3620D8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_18F213574(a1);
}

uint64_t sub_18F3620E4(uint64_t a1, char *a2, char *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char *v13;
  _BYTE v14[8];
  uint64_t v15;
  void *v16[2];
  char v17;
  _BYTE v18[8];
  __int128 __p;
  uint64_t v20;
  void *v21[2];
  char v22;
  BOOL v23[8];
  __int128 v24;
  uint64_t v25;
  void *v26[2];
  char v27;
  _BYTE v28[4];
  int v29;
  _BYTE v30[4];
  int v31;
  _BYTE v32[8];
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint8_t buf[8];
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  sub_18F1E8C74(a1 + 8, "SpatialLoggerMutex", 0, 1);
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2952E68);
  v6 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEFAULT, "[CMSpatialLogger] Starting up.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952E68);
    LOWORD(v34) = 0;
    v13 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CMSpatialLogger::CMSpatialLogger(const char *, const char *)", "CoreLocation: %s\n", v13);
    if (v13 != (char *)buf)
      free(v13);
  }
  sub_18F366050((uint64_t)v32, (uint64_t)"MslLogger.FileSize", 1048576000);
  *(_QWORD *)&v34 = v33;
  sub_18F36620C((uint64_t)v30, (uint64_t)"MslLogger.FileTimeInterval", 86400);
  DWORD2(v34) = v31;
  sub_18F36620C((uint64_t)v28, (uint64_t)"MslLogger.FilesToKeep", 50);
  HIDWORD(v34) = v29;
  sub_18F270374(v26, a3);
  sub_18F3663C8((uint64_t)buf, (uint64_t)"MslLogger.Directory", (__int128 *)v26);
  if (SHIBYTE(v45) < 0)
  {
    sub_18F26F9A4(&v35, (void *)v44, *((unint64_t *)&v44 + 1));
  }
  else
  {
    v35 = v44;
    v36 = v45;
  }
  sub_18F270374(v21, a2);
  sub_18F3663C8((uint64_t)v23, (uint64_t)"MslLogger.Prefix", (__int128 *)v21);
  if (SHIBYTE(v25) < 0)
  {
    sub_18F26F9A4(&v37, (void *)v24, *((unint64_t *)&v24 + 1));
  }
  else
  {
    v37 = v24;
    v38 = v25;
  }
  sub_18F270374(v16, "msl");
  sub_18F3663C8((uint64_t)v18, (uint64_t)"MslLogger.Ext", (__int128 *)v16);
  if (SHIBYTE(v20) < 0)
  {
    sub_18F26F9A4(&v39, (void *)__p, *((unint64_t *)&__p + 1));
  }
  else
  {
    v39 = __p;
    v40 = v20;
  }
  v41 = 4;
  sub_18F366050((uint64_t)v14, (uint64_t)"MslLogger.FlushTimeout", -1);
  v42 = v15;
  if (SHIBYTE(v20) < 0)
    operator delete((void *)__p);
  if (v17 < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
  if (v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (v27 < 0)
    operator delete(v26[0]);
  sub_18F34724C(&v34, (uint64_t *)buf);
  v7 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  sub_18F2701F0((uint64_t *)a1, v7);
  v8 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v8)
  {
    v9 = sub_18F2A9374();
    MEMORY[0x194001438](v9, 0x1032C4044EE41C5);
  }
  sub_18F20CC1C((char *)buf, CFSTR("com.apple.CoreMotion"), 1);
  v23[0] = 0;
  v10 = sub_18F1EE9B4((uint64_t)buf, (uint64_t)CFSTR("TempestEnableAudioFeedback"), v23);
  if (v23[0])
    v11 = v10;
  else
    v11 = 0;
  *(_BYTE *)(a1 + 24) = v11;
  sub_18F387C84((uint64_t)buf);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (SHIBYTE(v38) < 0)
    operator delete((void *)v37);
  if (SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  return a1;
}

void sub_18F36253C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_18F37143C(v2);
  sub_18F2701F0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_18F36266C()
{
  JUMPOUT(0x18F362658);
}

uint64_t *sub_18F362674(uint64_t *a1)
{
  uint64_t v2;

  v2 = (uint64_t)(a1 + 1);
  (*(void (**)(uint64_t *))(a1[1] + 16))(a1 + 1);
  if (*a1)
    sub_18F2AA0C4(*a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  sub_18F37143C(v2);
  sub_18F2701F0(a1, 0);
  return a1;
}

uint64_t sub_18F3626E0(uint64_t *a1, int *a2)
{
  uint64_t v4;
  uint64_t *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  char *v18;
  unint64_t v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  _QWORD *v30;
  int v31;
  char *v32;
  unint64_t v33;
  _DWORD *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  int v43;
  _QWORD *v44;
  int v45;
  char *v46;
  unint64_t v47;
  _DWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  int v57;
  _QWORD *v58;
  int v59;
  char *v60;
  unint64_t v61;
  _DWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  int v71;
  _QWORD *v72;
  int v73;
  char *v74;
  unint64_t v75;
  _DWORD *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  int v85;
  _QWORD *v86;
  int v87;
  char *v88;
  unint64_t v89;
  _DWORD *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  int v99;
  _QWORD *v100;
  int v101;
  char *v102;
  unint64_t v103;
  _DWORD *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  int v113;
  _QWORD *v114;
  int v115;
  char *v116;
  unint64_t v117;
  _DWORD *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  int v127;
  _QWORD *v128;
  int v129;
  char *v130;
  unint64_t v131;
  _DWORD *v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  int v141;
  _QWORD *v142;
  int v143;
  char *v144;
  unint64_t v145;
  _DWORD *v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  char *v154;
  int v155;
  _QWORD *v156;
  int v157;
  char *v158;
  unint64_t v159;
  _DWORD *v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  int v169;
  _QWORD *v170;
  int v171;
  char *v172;
  unint64_t v173;
  _DWORD *v174;
  char *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  int v183;
  _QWORD *v184;
  int v185;
  char *v186;
  unint64_t v187;
  _DWORD *v188;
  char *v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  int v197;
  uint64_t v198;
  int v199;
  _QWORD *v200;
  int v201;
  char *v202;
  unint64_t v203;
  _DWORD *v204;
  char *v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  char *v210;
  char *v211;
  char *v212;
  int v213;
  _QWORD *v214;
  int v215;
  char *v216;
  unint64_t v217;
  _DWORD *v218;
  char *v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  char *v224;
  char *v225;
  char *v226;
  int v227;
  _QWORD *v228;
  int v229;
  char *v230;
  unint64_t v231;
  _DWORD *v232;
  char *v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  char *v238;
  char *v239;
  char *v240;
  int v241;
  _QWORD *v242;
  int v243;
  _QWORD *v244;
  int v245;
  _QWORD *v246;
  int v247;
  _QWORD *v248;
  int v249;
  _QWORD *v250;
  _QWORD *v251;
  char *v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  char **v257;
  char *v258;
  char *v259;
  int64_t v260;
  char *v261;
  size_t v262;
  uint64_t v263;
  _QWORD *v264;
  int v265;
  uint64_t result;
  _QWORD v267[46];
  _QWORD *v268;
  CFAbsoluteTime v269;
  char v270;
  uint64_t *v271;
  pthread_mutex_t *v272;
  __int16 v273;
  uint64_t __src;
  int v275;
  uint64_t v276;

  v276 = *MEMORY[0x1E0C80C00];
  v5 = a1 + 1;
  v4 = a1[1];
  v271 = a1 + 1;
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 1);
  v273 = 256;
  if (!*a1)
    return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
  sub_18F2B6BD0(v267);
  sub_18F2C6740(v267);
  Current = CFAbsoluteTimeGetCurrent();
  v270 |= 1u;
  v269 = Current;
  sub_18F28379C(v268);
  v7 = v268[9];
  v8 = *((_QWORD *)a2 + 8);
  *(_BYTE *)(v7 + 152) |= 2u;
  *(_QWORD *)(v7 + 136) = v8;
  v9 = v268[9];
  v10 = *((_QWORD *)a2 + 7);
  *(_BYTE *)(v9 + 152) |= 1u;
  *(_QWORD *)(v9 + 128) = v10;
  v11 = v268;
  LODWORD(v10) = a2[27];
  *((_WORD *)v268 + 58) |= 0x200u;
  *((_DWORD *)v11 + 27) = v10;
  v12 = v268;
  v13 = *((_QWORD *)a2 + 14);
  *((_WORD *)v268 + 58) |= 1u;
  v12[7] = v13;
  v14 = v268;
  *(float *)&v8 = *((double *)a2 + 9);
  *((_WORD *)v268 + 58) |= 8u;
  *((_DWORD *)v14 + 21) = v8;
  v15 = v268;
  *(float *)&v8 = *((double *)a2 + 15);
  *((_WORD *)v268 + 58) |= 0x80u;
  *((_DWORD *)v15 + 25) = v8;
  v16 = (_QWORD *)v268[9];
  v17 = *a2;
  v18 = (char *)v16[8];
  v19 = v16[9];
  if ((unint64_t)v18 >= v19)
  {
    v21 = (char *)v16[7];
    v22 = (v18 - v21) >> 2;
    if ((unint64_t)(v22 + 1) >> 62)
      sub_18F26F8C0();
    v23 = v19 - (_QWORD)v21;
    v24 = (uint64_t)(v19 - (_QWORD)v21) >> 1;
    if (v24 <= v22 + 1)
      v24 = v22 + 1;
    if (v23 >= 0x7FFFFFFFFFFFFFFCLL)
      v25 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v25 = v24;
    if (v25)
    {
      v26 = (char *)sub_18F26FB8C((uint64_t)(v16 + 9), v25);
      v21 = (char *)v16[7];
      v18 = (char *)v16[8];
    }
    else
    {
      v26 = 0;
    }
    v27 = &v26[4 * v22];
    v28 = &v26[4 * v25];
    *(_DWORD *)v27 = v17;
    v20 = v27 + 4;
    while (v18 != v21)
    {
      v29 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    v16[7] = v27;
    v16[8] = v20;
    v16[9] = v28;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *(_DWORD *)v18 = v17;
    v20 = v18 + 4;
  }
  v16[8] = v20;
  v30 = (_QWORD *)v268[9];
  v31 = a2[1];
  v32 = (char *)v30[8];
  v33 = v30[9];
  if ((unint64_t)v32 >= v33)
  {
    v35 = (char *)v30[7];
    v36 = (v32 - v35) >> 2;
    if ((unint64_t)(v36 + 1) >> 62)
      sub_18F26F8C0();
    v37 = v33 - (_QWORD)v35;
    v38 = (uint64_t)(v33 - (_QWORD)v35) >> 1;
    if (v38 <= v36 + 1)
      v38 = v36 + 1;
    if (v37 >= 0x7FFFFFFFFFFFFFFCLL)
      v39 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v39 = v38;
    if (v39)
    {
      v40 = (char *)sub_18F26FB8C((uint64_t)(v30 + 9), v39);
      v35 = (char *)v30[7];
      v32 = (char *)v30[8];
    }
    else
    {
      v40 = 0;
    }
    v41 = &v40[4 * v36];
    v42 = &v40[4 * v39];
    *(_DWORD *)v41 = v31;
    v34 = v41 + 4;
    while (v32 != v35)
    {
      v43 = *((_DWORD *)v32 - 1);
      v32 -= 4;
      *((_DWORD *)v41 - 1) = v43;
      v41 -= 4;
    }
    v30[7] = v41;
    v30[8] = v34;
    v30[9] = v42;
    if (v35)
      operator delete(v35);
  }
  else
  {
    *(_DWORD *)v32 = v31;
    v34 = v32 + 4;
  }
  v30[8] = v34;
  v44 = (_QWORD *)v268[9];
  v45 = a2[2];
  v46 = (char *)v44[8];
  v47 = v44[9];
  if ((unint64_t)v46 >= v47)
  {
    v49 = (char *)v44[7];
    v50 = (v46 - v49) >> 2;
    if ((unint64_t)(v50 + 1) >> 62)
      sub_18F26F8C0();
    v51 = v47 - (_QWORD)v49;
    v52 = (uint64_t)(v47 - (_QWORD)v49) >> 1;
    if (v52 <= v50 + 1)
      v52 = v50 + 1;
    if (v51 >= 0x7FFFFFFFFFFFFFFCLL)
      v53 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v53 = v52;
    if (v53)
    {
      v54 = (char *)sub_18F26FB8C((uint64_t)(v44 + 9), v53);
      v49 = (char *)v44[7];
      v46 = (char *)v44[8];
    }
    else
    {
      v54 = 0;
    }
    v55 = &v54[4 * v50];
    v56 = &v54[4 * v53];
    *(_DWORD *)v55 = v45;
    v48 = v55 + 4;
    while (v46 != v49)
    {
      v57 = *((_DWORD *)v46 - 1);
      v46 -= 4;
      *((_DWORD *)v55 - 1) = v57;
      v55 -= 4;
    }
    v44[7] = v55;
    v44[8] = v48;
    v44[9] = v56;
    if (v49)
      operator delete(v49);
  }
  else
  {
    *(_DWORD *)v46 = v45;
    v48 = v46 + 4;
  }
  v44[8] = v48;
  v58 = (_QWORD *)v268[9];
  v59 = a2[3];
  v60 = (char *)v58[8];
  v61 = v58[9];
  if ((unint64_t)v60 >= v61)
  {
    v63 = (char *)v58[7];
    v64 = (v60 - v63) >> 2;
    if ((unint64_t)(v64 + 1) >> 62)
      sub_18F26F8C0();
    v65 = v61 - (_QWORD)v63;
    v66 = (uint64_t)(v61 - (_QWORD)v63) >> 1;
    if (v66 <= v64 + 1)
      v66 = v64 + 1;
    if (v65 >= 0x7FFFFFFFFFFFFFFCLL)
      v67 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v67 = v66;
    if (v67)
    {
      v68 = (char *)sub_18F26FB8C((uint64_t)(v58 + 9), v67);
      v63 = (char *)v58[7];
      v60 = (char *)v58[8];
    }
    else
    {
      v68 = 0;
    }
    v69 = &v68[4 * v64];
    v70 = &v68[4 * v67];
    *(_DWORD *)v69 = v59;
    v62 = v69 + 4;
    while (v60 != v63)
    {
      v71 = *((_DWORD *)v60 - 1);
      v60 -= 4;
      *((_DWORD *)v69 - 1) = v71;
      v69 -= 4;
    }
    v58[7] = v69;
    v58[8] = v62;
    v58[9] = v70;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *(_DWORD *)v60 = v59;
    v62 = v60 + 4;
  }
  v58[8] = v62;
  v72 = (_QWORD *)v268[9];
  v73 = a2[4];
  v74 = (char *)v72[11];
  v75 = v72[12];
  if ((unint64_t)v74 >= v75)
  {
    v77 = (char *)v72[10];
    v78 = (v74 - v77) >> 2;
    if ((unint64_t)(v78 + 1) >> 62)
      sub_18F26F8C0();
    v79 = v75 - (_QWORD)v77;
    v80 = (uint64_t)(v75 - (_QWORD)v77) >> 1;
    if (v80 <= v78 + 1)
      v80 = v78 + 1;
    if (v79 >= 0x7FFFFFFFFFFFFFFCLL)
      v81 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v81 = v80;
    if (v81)
    {
      v82 = (char *)sub_18F26FB8C((uint64_t)(v72 + 12), v81);
      v77 = (char *)v72[10];
      v74 = (char *)v72[11];
    }
    else
    {
      v82 = 0;
    }
    v83 = &v82[4 * v78];
    v84 = &v82[4 * v81];
    *(_DWORD *)v83 = v73;
    v76 = v83 + 4;
    while (v74 != v77)
    {
      v85 = *((_DWORD *)v74 - 1);
      v74 -= 4;
      *((_DWORD *)v83 - 1) = v85;
      v83 -= 4;
    }
    v72[10] = v83;
    v72[11] = v76;
    v72[12] = v84;
    if (v77)
      operator delete(v77);
  }
  else
  {
    *(_DWORD *)v74 = v73;
    v76 = v74 + 4;
  }
  v72[11] = v76;
  v86 = (_QWORD *)v268[9];
  v87 = a2[5];
  v88 = (char *)v86[11];
  v89 = v86[12];
  if ((unint64_t)v88 >= v89)
  {
    v91 = (char *)v86[10];
    v92 = (v88 - v91) >> 2;
    if ((unint64_t)(v92 + 1) >> 62)
      sub_18F26F8C0();
    v93 = v89 - (_QWORD)v91;
    v94 = (uint64_t)(v89 - (_QWORD)v91) >> 1;
    if (v94 <= v92 + 1)
      v94 = v92 + 1;
    if (v93 >= 0x7FFFFFFFFFFFFFFCLL)
      v95 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v95 = v94;
    if (v95)
    {
      v96 = (char *)sub_18F26FB8C((uint64_t)(v86 + 12), v95);
      v91 = (char *)v86[10];
      v88 = (char *)v86[11];
    }
    else
    {
      v96 = 0;
    }
    v97 = &v96[4 * v92];
    v98 = &v96[4 * v95];
    *(_DWORD *)v97 = v87;
    v90 = v97 + 4;
    while (v88 != v91)
    {
      v99 = *((_DWORD *)v88 - 1);
      v88 -= 4;
      *((_DWORD *)v97 - 1) = v99;
      v97 -= 4;
    }
    v86[10] = v97;
    v86[11] = v90;
    v86[12] = v98;
    if (v91)
      operator delete(v91);
  }
  else
  {
    *(_DWORD *)v88 = v87;
    v90 = v88 + 4;
  }
  v86[11] = v90;
  v100 = (_QWORD *)v268[9];
  v101 = a2[6];
  v102 = (char *)v100[11];
  v103 = v100[12];
  if ((unint64_t)v102 >= v103)
  {
    v105 = (char *)v100[10];
    v106 = (v102 - v105) >> 2;
    if ((unint64_t)(v106 + 1) >> 62)
      sub_18F26F8C0();
    v107 = v103 - (_QWORD)v105;
    v108 = (uint64_t)(v103 - (_QWORD)v105) >> 1;
    if (v108 <= v106 + 1)
      v108 = v106 + 1;
    if (v107 >= 0x7FFFFFFFFFFFFFFCLL)
      v109 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v109 = v108;
    if (v109)
    {
      v110 = (char *)sub_18F26FB8C((uint64_t)(v100 + 12), v109);
      v105 = (char *)v100[10];
      v102 = (char *)v100[11];
    }
    else
    {
      v110 = 0;
    }
    v111 = &v110[4 * v106];
    v112 = &v110[4 * v109];
    *(_DWORD *)v111 = v101;
    v104 = v111 + 4;
    while (v102 != v105)
    {
      v113 = *((_DWORD *)v102 - 1);
      v102 -= 4;
      *((_DWORD *)v111 - 1) = v113;
      v111 -= 4;
    }
    v100[10] = v111;
    v100[11] = v104;
    v100[12] = v112;
    if (v105)
      operator delete(v105);
  }
  else
  {
    *(_DWORD *)v102 = v101;
    v104 = v102 + 4;
  }
  v100[11] = v104;
  v114 = (_QWORD *)v268[9];
  v115 = a2[7];
  v116 = (char *)v114[5];
  v117 = v114[6];
  if ((unint64_t)v116 >= v117)
  {
    v119 = (char *)v114[4];
    v120 = (v116 - v119) >> 2;
    if ((unint64_t)(v120 + 1) >> 62)
      sub_18F26F8C0();
    v121 = v117 - (_QWORD)v119;
    v122 = (uint64_t)(v117 - (_QWORD)v119) >> 1;
    if (v122 <= v120 + 1)
      v122 = v120 + 1;
    if (v121 >= 0x7FFFFFFFFFFFFFFCLL)
      v123 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v123 = v122;
    if (v123)
    {
      v124 = (char *)sub_18F26FB8C((uint64_t)(v114 + 6), v123);
      v119 = (char *)v114[4];
      v116 = (char *)v114[5];
    }
    else
    {
      v124 = 0;
    }
    v125 = &v124[4 * v120];
    v126 = &v124[4 * v123];
    *(_DWORD *)v125 = v115;
    v118 = v125 + 4;
    while (v116 != v119)
    {
      v127 = *((_DWORD *)v116 - 1);
      v116 -= 4;
      *((_DWORD *)v125 - 1) = v127;
      v125 -= 4;
    }
    v114[4] = v125;
    v114[5] = v118;
    v114[6] = v126;
    if (v119)
      operator delete(v119);
  }
  else
  {
    *(_DWORD *)v116 = v115;
    v118 = v116 + 4;
  }
  v114[5] = v118;
  v128 = (_QWORD *)v268[9];
  v129 = a2[8];
  v130 = (char *)v128[5];
  v131 = v128[6];
  if ((unint64_t)v130 >= v131)
  {
    v133 = (char *)v128[4];
    v134 = (v130 - v133) >> 2;
    if ((unint64_t)(v134 + 1) >> 62)
      sub_18F26F8C0();
    v135 = v131 - (_QWORD)v133;
    v136 = (uint64_t)(v131 - (_QWORD)v133) >> 1;
    if (v136 <= v134 + 1)
      v136 = v134 + 1;
    if (v135 >= 0x7FFFFFFFFFFFFFFCLL)
      v137 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v137 = v136;
    if (v137)
    {
      v138 = (char *)sub_18F26FB8C((uint64_t)(v128 + 6), v137);
      v133 = (char *)v128[4];
      v130 = (char *)v128[5];
    }
    else
    {
      v138 = 0;
    }
    v139 = &v138[4 * v134];
    v140 = &v138[4 * v137];
    *(_DWORD *)v139 = v129;
    v132 = v139 + 4;
    while (v130 != v133)
    {
      v141 = *((_DWORD *)v130 - 1);
      v130 -= 4;
      *((_DWORD *)v139 - 1) = v141;
      v139 -= 4;
    }
    v128[4] = v139;
    v128[5] = v132;
    v128[6] = v140;
    if (v133)
      operator delete(v133);
  }
  else
  {
    *(_DWORD *)v130 = v129;
    v132 = v130 + 4;
  }
  v128[5] = v132;
  v142 = (_QWORD *)v268[9];
  v143 = a2[9];
  v144 = (char *)v142[5];
  v145 = v142[6];
  if ((unint64_t)v144 >= v145)
  {
    v147 = (char *)v142[4];
    v148 = (v144 - v147) >> 2;
    if ((unint64_t)(v148 + 1) >> 62)
      sub_18F26F8C0();
    v149 = v145 - (_QWORD)v147;
    v150 = (uint64_t)(v145 - (_QWORD)v147) >> 1;
    if (v150 <= v148 + 1)
      v150 = v148 + 1;
    if (v149 >= 0x7FFFFFFFFFFFFFFCLL)
      v151 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v151 = v150;
    if (v151)
    {
      v152 = (char *)sub_18F26FB8C((uint64_t)(v142 + 6), v151);
      v147 = (char *)v142[4];
      v144 = (char *)v142[5];
    }
    else
    {
      v152 = 0;
    }
    v153 = &v152[4 * v148];
    v154 = &v152[4 * v151];
    *(_DWORD *)v153 = v143;
    v146 = v153 + 4;
    while (v144 != v147)
    {
      v155 = *((_DWORD *)v144 - 1);
      v144 -= 4;
      *((_DWORD *)v153 - 1) = v155;
      v153 -= 4;
    }
    v142[4] = v153;
    v142[5] = v146;
    v142[6] = v154;
    if (v147)
      operator delete(v147);
  }
  else
  {
    *(_DWORD *)v144 = v143;
    v146 = v144 + 4;
  }
  v142[5] = v146;
  v156 = (_QWORD *)v268[9];
  v157 = a2[10];
  v158 = (char *)v156[14];
  v159 = v156[15];
  if ((unint64_t)v158 >= v159)
  {
    v161 = (char *)v156[13];
    v162 = (v158 - v161) >> 2;
    if ((unint64_t)(v162 + 1) >> 62)
      sub_18F26F8C0();
    v163 = v159 - (_QWORD)v161;
    v164 = (uint64_t)(v159 - (_QWORD)v161) >> 1;
    if (v164 <= v162 + 1)
      v164 = v162 + 1;
    if (v163 >= 0x7FFFFFFFFFFFFFFCLL)
      v165 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v165 = v164;
    if (v165)
    {
      v166 = (char *)sub_18F26FB8C((uint64_t)(v156 + 15), v165);
      v161 = (char *)v156[13];
      v158 = (char *)v156[14];
    }
    else
    {
      v166 = 0;
    }
    v167 = &v166[4 * v162];
    v168 = &v166[4 * v165];
    *(_DWORD *)v167 = v157;
    v160 = v167 + 4;
    while (v158 != v161)
    {
      v169 = *((_DWORD *)v158 - 1);
      v158 -= 4;
      *((_DWORD *)v167 - 1) = v169;
      v167 -= 4;
    }
    v156[13] = v167;
    v156[14] = v160;
    v156[15] = v168;
    if (v161)
      operator delete(v161);
  }
  else
  {
    *(_DWORD *)v158 = v157;
    v160 = v158 + 4;
  }
  v156[14] = v160;
  v170 = (_QWORD *)v268[9];
  v171 = a2[11];
  v172 = (char *)v170[14];
  v173 = v170[15];
  if ((unint64_t)v172 >= v173)
  {
    v175 = (char *)v170[13];
    v176 = (v172 - v175) >> 2;
    if ((unint64_t)(v176 + 1) >> 62)
      sub_18F26F8C0();
    v177 = v173 - (_QWORD)v175;
    v178 = (uint64_t)(v173 - (_QWORD)v175) >> 1;
    if (v178 <= v176 + 1)
      v178 = v176 + 1;
    if (v177 >= 0x7FFFFFFFFFFFFFFCLL)
      v179 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v179 = v178;
    if (v179)
    {
      v180 = (char *)sub_18F26FB8C((uint64_t)(v170 + 15), v179);
      v175 = (char *)v170[13];
      v172 = (char *)v170[14];
    }
    else
    {
      v180 = 0;
    }
    v181 = &v180[4 * v176];
    v182 = &v180[4 * v179];
    *(_DWORD *)v181 = v171;
    v174 = v181 + 4;
    while (v172 != v175)
    {
      v183 = *((_DWORD *)v172 - 1);
      v172 -= 4;
      *((_DWORD *)v181 - 1) = v183;
      v181 -= 4;
    }
    v170[13] = v181;
    v170[14] = v174;
    v170[15] = v182;
    if (v175)
      operator delete(v175);
  }
  else
  {
    *(_DWORD *)v172 = v171;
    v174 = v172 + 4;
  }
  v170[14] = v174;
  v184 = (_QWORD *)v268[9];
  v185 = a2[12];
  v186 = (char *)v184[14];
  v187 = v184[15];
  if ((unint64_t)v186 >= v187)
  {
    v189 = (char *)v184[13];
    v190 = (v186 - v189) >> 2;
    if ((unint64_t)(v190 + 1) >> 62)
      sub_18F26F8C0();
    v191 = v187 - (_QWORD)v189;
    v192 = (uint64_t)(v187 - (_QWORD)v189) >> 1;
    if (v192 <= v190 + 1)
      v192 = v190 + 1;
    if (v191 >= 0x7FFFFFFFFFFFFFFCLL)
      v193 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v193 = v192;
    if (v193)
    {
      v194 = (char *)sub_18F26FB8C((uint64_t)(v184 + 15), v193);
      v189 = (char *)v184[13];
      v186 = (char *)v184[14];
    }
    else
    {
      v194 = 0;
    }
    v195 = &v194[4 * v190];
    v196 = &v194[4 * v193];
    *(_DWORD *)v195 = v185;
    v188 = v195 + 4;
    while (v186 != v189)
    {
      v197 = *((_DWORD *)v186 - 1);
      v186 -= 4;
      *((_DWORD *)v195 - 1) = v197;
      v195 -= 4;
    }
    v184[13] = v195;
    v184[14] = v188;
    v184[15] = v196;
    if (v189)
      operator delete(v189);
  }
  else
  {
    *(_DWORD *)v186 = v185;
    v188 = v186 + 4;
  }
  v184[14] = v188;
  v198 = v268[9];
  v199 = *((unsigned __int16 *)a2 + 26);
  *(_BYTE *)(v198 + 152) |= 4u;
  *(_DWORD *)(v198 + 144) = v199;
  v200 = v268;
  v201 = a2[20];
  v202 = (char *)v268[2];
  v203 = v268[3];
  if ((unint64_t)v202 >= v203)
  {
    v205 = (char *)v268[1];
    v206 = (v202 - v205) >> 2;
    if ((unint64_t)(v206 + 1) >> 62)
      sub_18F26F8C0();
    v207 = v203 - (_QWORD)v205;
    v208 = (uint64_t)(v203 - (_QWORD)v205) >> 1;
    if (v208 <= v206 + 1)
      v208 = v206 + 1;
    if (v207 >= 0x7FFFFFFFFFFFFFFCLL)
      v209 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v209 = v208;
    if (v209)
    {
      v210 = (char *)sub_18F26FB8C((uint64_t)(v268 + 3), v209);
      v205 = (char *)v200[1];
      v202 = (char *)v200[2];
    }
    else
    {
      v210 = 0;
    }
    v211 = &v210[4 * v206];
    v212 = &v210[4 * v209];
    *(_DWORD *)v211 = v201;
    v204 = v211 + 4;
    while (v202 != v205)
    {
      v213 = *((_DWORD *)v202 - 1);
      v202 -= 4;
      *((_DWORD *)v211 - 1) = v213;
      v211 -= 4;
    }
    v200[1] = v211;
    v200[2] = v204;
    v200[3] = v212;
    if (v205)
      operator delete(v205);
  }
  else
  {
    *(_DWORD *)v202 = v201;
    v204 = v202 + 4;
  }
  v200[2] = v204;
  v214 = v268;
  v215 = a2[21];
  v216 = (char *)v268[2];
  v217 = v268[3];
  if ((unint64_t)v216 >= v217)
  {
    v219 = (char *)v268[1];
    v220 = (v216 - v219) >> 2;
    if ((unint64_t)(v220 + 1) >> 62)
      sub_18F26F8C0();
    v221 = v217 - (_QWORD)v219;
    v222 = (uint64_t)(v217 - (_QWORD)v219) >> 1;
    if (v222 <= v220 + 1)
      v222 = v220 + 1;
    if (v221 >= 0x7FFFFFFFFFFFFFFCLL)
      v223 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v223 = v222;
    if (v223)
    {
      v224 = (char *)sub_18F26FB8C((uint64_t)(v268 + 3), v223);
      v219 = (char *)v214[1];
      v216 = (char *)v214[2];
    }
    else
    {
      v224 = 0;
    }
    v225 = &v224[4 * v220];
    v226 = &v224[4 * v223];
    *(_DWORD *)v225 = v215;
    v218 = v225 + 4;
    while (v216 != v219)
    {
      v227 = *((_DWORD *)v216 - 1);
      v216 -= 4;
      *((_DWORD *)v225 - 1) = v227;
      v225 -= 4;
    }
    v214[1] = v225;
    v214[2] = v218;
    v214[3] = v226;
    if (v219)
      operator delete(v219);
  }
  else
  {
    *(_DWORD *)v216 = v215;
    v218 = v216 + 4;
  }
  v214[2] = v218;
  v228 = v268;
  v229 = a2[22];
  v230 = (char *)v268[2];
  v231 = v268[3];
  if ((unint64_t)v230 >= v231)
  {
    v233 = (char *)v268[1];
    v234 = (v230 - v233) >> 2;
    if ((unint64_t)(v234 + 1) >> 62)
      sub_18F26F8C0();
    v235 = v231 - (_QWORD)v233;
    v236 = (uint64_t)(v231 - (_QWORD)v233) >> 1;
    if (v236 <= v234 + 1)
      v236 = v234 + 1;
    if (v235 >= 0x7FFFFFFFFFFFFFFCLL)
      v237 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v237 = v236;
    if (v237)
    {
      v238 = (char *)sub_18F26FB8C((uint64_t)(v268 + 3), v237);
      v233 = (char *)v228[1];
      v230 = (char *)v228[2];
    }
    else
    {
      v238 = 0;
    }
    v239 = &v238[4 * v234];
    v240 = &v238[4 * v237];
    *(_DWORD *)v239 = v229;
    v232 = v239 + 4;
    while (v230 != v233)
    {
      v241 = *((_DWORD *)v230 - 1);
      v230 -= 4;
      *((_DWORD *)v239 - 1) = v241;
      v239 -= 4;
    }
    v228[1] = v239;
    v228[2] = v232;
    v228[3] = v240;
    if (v233)
      operator delete(v233);
  }
  else
  {
    *(_DWORD *)v230 = v229;
    v232 = v230 + 4;
  }
  v228[2] = v232;
  v242 = v268;
  v243 = a2[23];
  *((_WORD *)v268 + 58) |= 0x40u;
  *((_DWORD *)v242 + 24) = v243;
  v244 = v268;
  v245 = a2[24];
  *((_WORD *)v268 + 58) |= 0x20u;
  *((_DWORD *)v244 + 23) = v245;
  v246 = v268;
  if (a2[26] == 2)
    v247 = 1;
  else
    v247 = 2;
  *((_WORD *)v268 + 58) |= 0x10u;
  *((_DWORD *)v246 + 22) = v247;
  v248 = v268;
  v249 = a2[25];
  *((_WORD *)v268 + 58) |= 0x100u;
  *((_DWORD *)v248 + 26) = v249;
  v250 = v268;
  LOBYTE(v249) = *((_BYTE *)a2 + 143);
  *((_WORD *)v268 + 58) |= 0x400u;
  *((_BYTE *)v250 + 112) = v249;
  if (*((_BYTE *)a2 + 140))
  {
    __src = *((_QWORD *)a2 + 16);
    v275 = a2[34];
    v251 = v268;
    v253 = v268 + 4;
    v252 = (char *)v268[4];
    v254 = v268[6];
    if ((unint64_t)(v254 - (_QWORD)v252) >= 0xC)
    {
      v257 = (char **)(v268 + 5);
      v259 = (char *)v268[5];
      v260 = v259 - v252;
      if ((unint64_t)(v259 - v252) <= 0xB)
      {
        v261 = (char *)&__src + v260;
        if (v259 != v252)
        {
          memcpy((void *)v268[4], &__src, v259 - v252);
          v252 = *v257;
        }
        v262 = 12 - v260;
        memcpy(v252, v261, v262);
        v263 = v262 >> 2;
        goto LABEL_276;
      }
    }
    else
    {
      if (v252)
      {
        v268[5] = v252;
        operator delete(v252);
        v254 = 0;
        *v253 = 0;
        v253[1] = 0;
        v253[2] = 0;
      }
      v255 = v254 >> 1;
      if ((unint64_t)(v254 >> 1) <= 3)
        v255 = 3;
      if ((unint64_t)v254 >= 0x7FFFFFFFFFFFFFFCLL)
        v256 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v256 = v255;
      sub_18F26FB4C(v253, v256);
      v258 = (char *)v251[5];
      v257 = (char **)(v251 + 5);
      v252 = v258;
    }
    *(_QWORD *)v252 = __src;
    *((_DWORD *)v252 + 2) = v275;
    v263 = 3;
LABEL_276:
    *v257 = &v252[4 * v263];
  }
  if (*((_BYTE *)a2 + 142))
  {
    v264 = v268;
    v265 = *((unsigned __int8 *)a2 + 141);
    *((_WORD *)v268 + 58) |= 4u;
    *((_DWORD *)v264 + 20) = v265;
  }
  sub_18F2A9EF0(*a1, (uint64_t)v267);
  result = sub_18F2B9670((PB::Base *)v267);
  if (HIBYTE(v273))
  {
    if ((_BYTE)v273)
      return pthread_mutex_unlock(v272);
    v5 = v271;
    return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
  }
  return result;
}

void sub_18F3636B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_18F2B9670((PB::Base *)va);
  sub_18F346934(v2 - 128);
  _Unwind_Resume(a1);
}

uint64_t sub_18F363720(uint64_t *a1, double *a2)
{
  uint64_t v4;
  uint64_t *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  _QWORD v36[93];
  uint64_t v37;
  char v38;
  uint64_t *v39;
  pthread_mutex_t *v40;
  __int16 v41;

  v5 = a1 + 1;
  v4 = a1[1];
  v39 = a1 + 1;
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 1);
  v41 = 256;
  if (*a1)
  {
    sub_18F2B6BD0(v36);
    sub_18F2C72F8(v36);
    Current = CFAbsoluteTimeGetCurrent();
    v38 |= 1u;
    *(CFAbsoluteTime *)&v36[77] = Current;
    v7 = v37;
    v8 = *a2;
    *(_DWORD *)(v37 + 124) |= 0x10u;
    *(double *)(v7 + 40) = v8;
    v9 = v37;
    *(float *)&v8 = a2[2];
    *(_DWORD *)(v37 + 124) |= 2u;
    *(double *)(v9 + 16) = *(float *)&v8;
    v10 = v37;
    *(float *)&v8 = a2[3];
    *(_DWORD *)(v37 + 124) |= 4u;
    *(double *)(v10 + 24) = *(float *)&v8;
    v11 = v37;
    *(float *)&v8 = a2[4];
    *(_DWORD *)(v37 + 124) |= 8u;
    *(double *)(v11 + 32) = *(float *)&v8;
    v12 = v37;
    *(float *)&v8 = a2[1];
    *(_DWORD *)(v37 + 124) |= 1u;
    *(double *)(v12 + 8) = *(float *)&v8;
    v13 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 10);
    *(_DWORD *)(v37 + 124) |= 0x40000u;
    *(_DWORD *)(v13 + 100) = LODWORD(v8);
    v14 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 11);
    *(_DWORD *)(v37 + 124) |= 0x80000u;
    *(_DWORD *)(v14 + 104) = LODWORD(v8);
    v15 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 12);
    *(_DWORD *)(v37 + 124) |= 0x100000u;
    *(_DWORD *)(v15 + 108) = LODWORD(v8);
    v16 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 13);
    *(_DWORD *)(v37 + 124) |= 0x2000u;
    *(_DWORD *)(v16 + 80) = LODWORD(v8);
    v17 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 14);
    *(_DWORD *)(v37 + 124) |= 0x4000u;
    *(_DWORD *)(v17 + 84) = LODWORD(v8);
    v18 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 15);
    *(_DWORD *)(v37 + 124) |= 0x8000u;
    *(_DWORD *)(v18 + 88) = LODWORD(v8);
    v19 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 16);
    *(_DWORD *)(v37 + 124) |= 0x100u;
    *(_DWORD *)(v19 + 60) = LODWORD(v8);
    v20 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 17);
    *(_DWORD *)(v37 + 124) |= 0x200u;
    *(_DWORD *)(v20 + 64) = LODWORD(v8);
    v21 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 18);
    *(_DWORD *)(v37 + 124) |= 0x400u;
    *(_DWORD *)(v21 + 68) = LODWORD(v8);
    v22 = v37;
    v23 = *((_DWORD *)a2 + 19);
    *(_DWORD *)(v37 + 124) |= 0x80u;
    *(_DWORD *)(v22 + 56) = v23;
    v24 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 21);
    *(_DWORD *)(v37 + 124) |= 0x800u;
    *(_DWORD *)(v24 + 72) = LODWORD(v8);
    v25 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 24);
    *(_DWORD *)(v37 + 124) |= 0x20u;
    *(_DWORD *)(v25 + 48) = LODWORD(v8);
    v26 = v37;
    *(_DWORD *)(v37 + 124) |= 0x20000u;
    *(_DWORD *)(v26 + 96) = -1082130432;
    v27 = v37;
    v28 = *((unsigned __int8 *)a2 + 108);
    *(_DWORD *)(v37 + 124) |= 0x1000u;
    *(_DWORD *)(v27 + 76) = v28;
    v29 = v37;
    v30 = *((_DWORD *)a2 + 26);
    *(_DWORD *)(v37 + 124) |= 0x40u;
    *(_DWORD *)(v29 + 52) = v30;
    v31 = v37;
    v32 = *((unsigned __int16 *)a2 + 55);
    *(_DWORD *)(v37 + 124) |= 0x10000u;
    *(_DWORD *)(v31 + 92) = v32;
    v33 = v37;
    *(_DWORD *)(v37 + 124) |= 0x800000u;
    *(_BYTE *)(v33 + 120) = 1;
    v34 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 28);
    *(_DWORD *)(v37 + 124) |= 0x400000u;
    *(_DWORD *)(v34 + 116) = LODWORD(v8);
    sub_18F2A9EF0(*a1, (uint64_t)v36);
    result = sub_18F2B9670((PB::Base *)v36);
    if (!HIBYTE(v41))
      return result;
    if ((_BYTE)v41)
      return pthread_mutex_unlock(v40);
    v5 = v39;
  }
  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}

void sub_18F363A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_18F363A48(uint64_t *a1, uint64_t a2, int *a3, double a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  uint64_t result;
  _QWORD v51[114];
  uint64_t v52;
  char v53;
  uint64_t *v54;
  pthread_mutex_t *v55;
  __int16 v56;

  v9 = a1 + 1;
  v8 = a1[1];
  v54 = a1 + 1;
  (*(void (**)(uint64_t *))(v8 + 16))(a1 + 1);
  v56 = 256;
  if (!*a1)
    return (*(uint64_t (**)(uint64_t *))(*v9 + 24))(v9);
  sub_18F2B6BD0(v51);
  sub_18F2C6678(v51);
  v10 = *(_QWORD *)(a2 + 8);
  v51[77] = *(_QWORD *)a2;
  v53 |= 1u;
  v11 = v52;
  *(_DWORD *)(v52 + 136) |= 2u;
  *(_QWORD *)(v11 + 16) = v10;
  v12 = v52;
  v13 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v52 + 136) |= 0x2000000u;
  *(_DWORD *)(v12 + 116) = v13;
  v14 = v52;
  v15 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(v52 + 136) |= 0x10000u;
  *(_DWORD *)(v14 + 80) = v15;
  v16 = v52;
  v17 = *(double *)(a2 + 32);
  *(_DWORD *)(v52 + 136) |= 0x80000u;
  *(float *)(v16 + 92) = v17;
  v18 = v52;
  v19 = *(double *)(a2 + 40);
  *(_DWORD *)(v52 + 136) |= 0x100000u;
  *(float *)(v18 + 96) = v19;
  v20 = v52;
  v21 = *(double *)(a2 + 48);
  *(_DWORD *)(v52 + 136) |= 0x200000u;
  *(float *)(v20 + 100) = v21;
  v22 = v52;
  v23 = *(double *)(a2 + 24);
  *(_DWORD *)(v52 + 136) |= 0x40000u;
  *(float *)(v22 + 88) = v23;
  v24 = v52;
  v25 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(v52 + 136) |= 0x4000000u;
  *(_DWORD *)(v24 + 120) = v25;
  v26 = v52;
  v27 = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(v52 + 136) |= 0x8000000u;
  *(_DWORD *)(v26 + 124) = v27;
  v28 = v52;
  v29 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(v52 + 136) |= 0x10000000u;
  *(_DWORD *)(v28 + 128) = v29;
  v30 = v52;
  v31 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(v52 + 136) |= 0x8000u;
  *(_DWORD *)(v30 + 76) = v31;
  v32 = v52;
  v33 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(v52 + 136) |= 0x20u;
  *(_DWORD *)(v32 + 36) = v33;
  v34 = v52;
  v35 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(v52 + 136) |= 0x400u;
  *(_DWORD *)(v34 + 56) = v35;
  v36 = v52;
  v37 = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(v52 + 136) |= 4u;
  *(_DWORD *)(v36 + 24) = v37;
  v38 = v52;
  v39 = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(v52 + 136) |= 0x10u;
  *(_DWORD *)(v38 + 32) = v39;
  v40 = v52;
  LOBYTE(v15) = *((_BYTE *)a3 + 5);
  *(_DWORD *)(v52 + 136) |= 0x20000000u;
  *(_BYTE *)(v40 + 132) = v15;
  v41 = v52;
  v42 = a3[2];
  *(_DWORD *)(v52 + 136) |= 0x40u;
  *(_DWORD *)(v41 + 40) = v42;
  v43 = v52;
  LOBYTE(v42) = *((_BYTE *)a3 + 4);
  *(_DWORD *)(v52 + 136) |= 0x40000000u;
  *(_BYTE *)(v43 + 133) = v42;
  v44 = v52;
  v45 = *a3;
  *(_DWORD *)(v52 + 136) |= 8u;
  *(_DWORD *)(v44 + 28) = v45;
  v46 = v52;
  v47 = *((_QWORD *)a3 + 2);
  *(_DWORD *)(v52 + 136) |= 1u;
  *(_QWORD *)(v46 + 8) = v47;
  if (a4 >= 0.0)
  {
    v48 = v52;
    v49 = a4;
    *(_DWORD *)(v52 + 136) |= 0x4000u;
    *(float *)(v48 + 72) = v49;
  }
  sub_18F2A9EF0(*a1, (uint64_t)v51);
  result = sub_18F2B9670((PB::Base *)v51);
  if (HIBYTE(v56))
  {
    if ((_BYTE)v56)
      return pthread_mutex_unlock(v55);
    v9 = v54;
    return (*(uint64_t (**)(uint64_t *))(*v9 + 24))(v9);
  }
  return result;
}

void sub_18F363D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_18F363D4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t result;
  _QWORD v45[336];
  uint64_t v46;
  char v47;
  uint64_t *v48;
  pthread_mutex_t *v49;
  __int16 v50;

  v5 = a1 + 1;
  v4 = a1[1];
  v48 = a1 + 1;
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 1);
  v50 = 256;
  if (*a1)
  {
    sub_18F2B6BD0(v45);
    sub_18F2C7488(v45);
    Current = CFAbsoluteTimeGetCurrent();
    v47 |= 1u;
    *(CFAbsoluteTime *)&v45[77] = Current;
    v7 = v46;
    v8 = (double)*(unint64_t *)a2 * 0.000001;
    *(_DWORD *)(v46 + 164) |= 2u;
    *(double *)(v7 + 64) = v8;
    v9 = v46;
    v10 = (double)*(unint64_t *)(a2 + 8) * 0.000001;
    *(_DWORD *)(v46 + 164) |= 1u;
    *(double *)(v9 + 56) = v10;
    v11 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(v46 + 164) |= 0x800u;
    *(_DWORD *)(v11 + 108) = LODWORD(v10);
    v12 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(v46 + 164) |= 0x1000u;
    *(_DWORD *)(v12 + 112) = LODWORD(v10);
    v13 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(v46 + 164) |= 0x2000u;
    *(_DWORD *)(v13 + 116) = LODWORD(v10);
    v14 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(v46 + 164) |= 0x4000u;
    *(_DWORD *)(v14 + 120) = LODWORD(v10);
    v15 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(v46 + 164) |= 0x8000u;
    *(_DWORD *)(v15 + 124) = LODWORD(v10);
    v16 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(v46 + 164) |= 0x10000u;
    *(_DWORD *)(v16 + 128) = LODWORD(v10);
    v17 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(v46 + 164) |= 0x80000u;
    *(_DWORD *)(v17 + 140) = LODWORD(v10);
    v18 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(v46 + 164) |= 0x100000u;
    *(_DWORD *)(v18 + 144) = LODWORD(v10);
    v19 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(v46 + 164) |= 0x200000u;
    *(_DWORD *)(v19 + 148) = LODWORD(v10);
    v20 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(v46 + 164) |= 0x100u;
    *(_DWORD *)(v20 + 96) = LODWORD(v10);
    v21 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(v46 + 164) |= 0x200u;
    *(_DWORD *)(v21 + 100) = LODWORD(v10);
    v22 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(v46 + 164) |= 0x400u;
    *(_DWORD *)(v22 + 104) = LODWORD(v10);
    v23 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(v46 + 164) |= 0x80u;
    *(_DWORD *)(v23 + 92) = LODWORD(v10);
    v24 = v46;
    v25 = *(_BYTE *)(a2 + 68);
    *(_DWORD *)(v46 + 164) |= 0x400000u;
    *(_BYTE *)(v24 + 152) = v25;
    v26 = v46;
    v27 = *(_BYTE *)(a2 + 69);
    *(_DWORD *)(v46 + 164) |= 0x20000000u;
    *(_BYTE *)(v26 + 159) = v27;
    v28 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(v46 + 164) |= 0x10u;
    *(_DWORD *)(v28 + 80) = LODWORD(v10);
    v29 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 76);
    *(_DWORD *)(v46 + 164) |= 8u;
    *(_DWORD *)(v29 + 76) = LODWORD(v10);
    v30 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(v46 + 164) |= 4u;
    *(_DWORD *)(v30 + 72) = LODWORD(v10);
    v31 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(v46 + 164) |= 0x20u;
    *(_DWORD *)(v31 + 84) = LODWORD(v10);
    v32 = v46;
    v33 = *(_BYTE *)(a2 + 88);
    *(_DWORD *)(v46 + 164) |= 0x80000000;
    *(_BYTE *)(v32 + 161) = v33;
    v34 = v46;
    v35 = *(_BYTE *)(a2 + 89);
    *(_DWORD *)(v46 + 164) |= 0x10000000u;
    *(_BYTE *)(v34 + 158) = v35;
    v36 = v46;
    v37 = *(_BYTE *)(a2 + 90);
    *(_DWORD *)(v46 + 164) |= 0x4000000u;
    *(_BYTE *)(v36 + 156) = v37;
    v38 = v46;
    v39 = *(_BYTE *)(a2 + 91);
    *(_DWORD *)(v46 + 164) |= 0x40000000u;
    *(_BYTE *)(v38 + 160) = v39;
    v40 = v46;
    v41 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(v46 + 164) |= 0x40u;
    *(_DWORD *)(v40 + 88) = v41;
    v42 = v46;
    v43 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(v46 + 164) |= 0x20000u;
    *(_DWORD *)(v42 + 132) = v43;
    sub_18F2A9EF0(*a1, (uint64_t)v45);
    result = sub_18F2B9670((PB::Base *)v45);
    if (!HIBYTE(v50))
      return result;
    if ((_BYTE)v50)
      return pthread_mutex_unlock(v49);
    v5 = v48;
  }
  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}

void sub_18F3640B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3640CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v19[315];
  uint64_t v20;
  char v21;
  uint64_t *v22;
  __int16 v23;

  v5 = a1 + 1;
  v4 = a1[1];
  v22 = a1 + 1;
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 1);
  v23 = 256;
  if (*a1)
  {
    sub_18F2B6BD0(v19);
    sub_18F2C74EC(v19);
    Current = CFAbsoluteTimeGetCurrent();
    v21 |= 1u;
    *(CFAbsoluteTime *)&v19[77] = Current;
    v7 = v20;
    v8 = (double)*(unint64_t *)a2 * 0.000001;
    *(_WORD *)(v20 + 80) |= 1u;
    *(double *)(v7 + 8) = v8;
    v9 = v20;
    v10 = (double)*(unint64_t *)(a2 + 8) * 0.000001;
    *(_WORD *)(v20 + 80) |= 4u;
    *(double *)(v9 + 24) = v10;
    v11 = v20;
    v12 = (double)*(unint64_t *)(a2 + 16) * 0.000001;
    *(_WORD *)(v20 + 80) |= 2u;
    *(double *)(v11 + 16) = v12;
    v13 = v20;
    LODWORD(v12) = *(_DWORD *)(a2 + 24);
    *(_WORD *)(v20 + 80) |= 0x800u;
    *(_DWORD *)(v13 + 64) = LODWORD(v12);
    v14 = v20;
    LODWORD(v12) = *(_DWORD *)(a2 + 28);
    *(_WORD *)(v20 + 80) |= 0x1000u;
    *(_DWORD *)(v14 + 68) = LODWORD(v12);
    v15 = v20;
    LODWORD(v12) = *(_DWORD *)(a2 + 32);
    *(_WORD *)(v20 + 80) |= 0x2000u;
    *(_DWORD *)(v15 + 72) = LODWORD(v12);
    v16 = v20;
    v17 = *(_BYTE *)(a2 + 36);
    *(_WORD *)(v20 + 80) |= 0x4000u;
    *(_BYTE *)(v16 + 76) = v17;
    sub_18F2A9EF0(*a1, (uint64_t)v19);
    sub_18F2B9670((PB::Base *)v19);
  }
  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}

void sub_18F364238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_18F364254(uint64_t *a1, float64x2_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  float64_t v8;
  uint64_t v9;
  float64_t v10;
  int8x16_t v11;
  uint64_t i;
  __int32 v13;
  _QWORD *v14;
  __int32 *v15;
  unint64_t v16;
  _DWORD *v17;
  __int32 *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  __int32 *v24;
  __int32 v25;
  uint64_t v26;
  float64_t v27;
  uint64_t v28;
  float64_t v29;
  uint64_t v30;
  float64_t v31;
  float32x4_t v33;
  _QWORD v34[392];
  uint64_t v35;
  char v36;
  uint64_t *v37;
  __int16 v38;

  v5 = a1 + 1;
  v4 = a1[1];
  v37 = a1 + 1;
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 1);
  v38 = 256;
  if (*a1)
  {
    sub_18F2B6BD0(v34);
    sub_18F2C67A4(v34);
    Current = CFAbsoluteTimeGetCurrent();
    v36 |= 1u;
    *(CFAbsoluteTime *)&v34[77] = Current;
    v7 = v35;
    v8 = a2->f64[0];
    *(_WORD *)(v35 + 96) |= 0x10u;
    *(float64_t *)(v7 + 64) = v8;
    v9 = v35;
    v10 = a2->f64[1];
    *(_WORD *)(v35 + 96) |= 8u;
    *(float64_t *)(v9 + 56) = v10;
    v11 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a2[1]), a2[2]);
    v33 = (float32x4_t)vextq_s8(v11, v11, 4uLL);
    sub_18F1FFE94(&v33, v33);
    for (i = 0; i != 4; ++i)
    {
      v13 = v33.i32[i];
      v14 = (_QWORD *)v35;
      v15 = *(__int32 **)(v35 + 16);
      v16 = *(_QWORD *)(v35 + 24);
      if ((unint64_t)v15 >= v16)
      {
        v18 = *(__int32 **)(v35 + 8);
        v19 = v15 - v18;
        if ((unint64_t)(v19 + 1) >> 62)
          sub_18F26F8C0();
        v20 = v16 - (_QWORD)v18;
        v21 = (uint64_t)(v16 - (_QWORD)v18) >> 1;
        if (v21 <= v19 + 1)
          v21 = v19 + 1;
        if (v20 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
        {
          v23 = (char *)sub_18F26FB8C(v35 + 24, v22);
          v18 = (__int32 *)v14[1];
          v15 = (__int32 *)v14[2];
        }
        else
        {
          v23 = 0;
        }
        v24 = (__int32 *)&v23[4 * v19];
        *v24 = v13;
        v17 = v24 + 1;
        while (v15 != v18)
        {
          v25 = *--v15;
          *--v24 = v25;
        }
        v14[1] = v24;
        v14[2] = v17;
        v14[3] = &v23[4 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v15 = v13;
        v17 = v15 + 1;
      }
      v14[2] = v17;
    }
    v26 = v35;
    v27 = a2[3].f64[0];
    *(_WORD *)(v35 + 96) |= 1u;
    *(float64_t *)(v26 + 32) = v27;
    v28 = v35;
    v29 = a2[3].f64[1];
    *(_WORD *)(v35 + 96) |= 4u;
    *(float64_t *)(v28 + 48) = v29;
    v30 = v35;
    v31 = a2[4].f64[0];
    *(_WORD *)(v35 + 96) |= 2u;
    *(float64_t *)(v30 + 40) = v31;
    sub_18F2A9EF0(*a1, (uint64_t)v34);
    sub_18F2B9670((PB::Base *)v34);
  }
  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}

void sub_18F364480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  sub_18F2B9670((PB::Base *)va);
  sub_18F346934(v3 - 120);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3644AC(uint64_t *a1, double a2)
{
  uint64_t v4;
  uint64_t *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[394];
  uint64_t v11;
  char v12;
  uint64_t *v13;
  __int16 v14;

  v5 = a1 + 1;
  v4 = a1[1];
  v13 = a1 + 1;
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 1);
  v14 = 256;
  if (*a1)
  {
    sub_18F2B6BD0(v10);
    sub_18F2C7294(v10);
    Current = CFAbsoluteTimeGetCurrent();
    v12 |= 1u;
    *(CFAbsoluteTime *)&v10[77] = Current;
    v7 = v11;
    *(_BYTE *)(v11 + 20) |= 1u;
    *(double *)(v7 + 8) = a2;
    v8 = v11;
    *(_BYTE *)(v11 + 20) |= 2u;
    *(_BYTE *)(v8 + 16) = 1;
    sub_18F2A9EF0(*a1, (uint64_t)v10);
    sub_18F2B9670((PB::Base *)v10);
  }
  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}

void sub_18F364584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 72);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3645A0()
{
  uint64_t v0;
  char *v1;
  char *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  NSObject *v16;
  char *v18;
  _QWORD v19[77];
  CFAbsoluteTime v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  char *v26;
  __int16 v27;
  CFAbsoluteTime v28;
  _BYTE buf[1632];
  uint64_t v30;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v3 = (uint64_t *)v0;
  v30 = *MEMORY[0x1E0C80C00];
  v5 = v0 + 8;
  v4 = *(_QWORD *)(v0 + 8);
  v23 = v0 + 8;
  (*(void (**)(uint64_t))(v4 + 16))(v0 + 8);
  v24 = 256;
  if (*v3)
  {
    sub_18F2B6BD0(v19);
    sub_18F2C66DC(v19);
    Current = CFAbsoluteTimeGetCurrent();
    v22 |= 1u;
    v20 = Current;
    v7 = v21;
    v8 = mach_absolute_time();
    v9 = sub_18F1FD20C(v8);
    *(_BYTE *)(v7 + 24) |= 1u;
    *(double *)(v7 + 16) = v9;
    v10 = v21;
    sub_18F270374(buf, v2);
    v13 = *(_QWORD *)(v10 + 8);
    v11 = (uint64_t *)(v10 + 8);
    v12 = v13;
    if (!v13)
    {
      v12 = operator new();
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      v14 = *v11;
      *v11 = v12;
      if (v14)
      {
        sub_18F26F7EC((uint64_t)v11, v14);
        v12 = *v11;
      }
    }
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    v15 = *(_OWORD *)buf;
    *(_QWORD *)(v12 + 16) = *(_QWORD *)&buf[16];
    *(_OWORD *)v12 = v15;
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952E68);
    v16 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = v2;
      *(_WORD *)&buf[12] = 2049;
      *(CFAbsoluteTime *)&buf[14] = v20;
      _os_log_impl(&dword_18F1DC000, v16, OS_LOG_TYPE_INFO, "[CMSpatialLogger] Logging event: %{private}s timestamp: %{private}f", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952E68);
      v25 = 136380931;
      v26 = v2;
      v27 = 2049;
      v28 = v20;
      v18 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMSpatialLogger::logEvent(const char *const)", "CoreLocation: %s\n", v18);
      if (v18 != buf)
        free(v18);
    }
    sub_18F2A9EF0(*v3, (uint64_t)v19);
    sub_18F2B9670((PB::Base *)v19);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
}

void sub_18F364890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F2B9670((PB::Base *)va);
  sub_18F346934((uint64_t)&STACK[0xE38]);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3648DC(uint64_t *a1, int *a2)
{
  uint64_t v4;
  uint64_t *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  _QWORD v47[248];
  uint64_t v48;
  char v49;
  uint64_t *v50;
  pthread_mutex_t *v51;
  __int16 v52;

  v5 = a1 + 1;
  v4 = a1[1];
  v50 = a1 + 1;
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 1);
  v52 = 256;
  if (*a1)
  {
    sub_18F2B6BD0(v47);
    sub_18F2C6808(v47);
    Current = CFAbsoluteTimeGetCurrent();
    v49 |= 1u;
    *(CFAbsoluteTime *)&v47[77] = Current;
    v7 = v48;
    v8 = *a2;
    *(_DWORD *)(v48 + 116) |= 0x10000u;
    *(_DWORD *)(v7 + 92) = v8;
    v9 = v48;
    v10 = a2[4];
    *(_DWORD *)(v48 + 116) |= 0x200u;
    *(_DWORD *)(v9 + 64) = v10;
    v11 = v48;
    v12 = a2[1];
    *(_DWORD *)(v48 + 116) |= 0x20u;
    *(_DWORD *)(v11 + 48) = v12;
    v13 = v48;
    v14 = a2[2];
    *(_DWORD *)(v48 + 116) |= 0x2000u;
    *(_DWORD *)(v13 + 80) = v14;
    v15 = v48;
    v16 = a2[3];
    *(_DWORD *)(v48 + 116) |= 0x400u;
    *(_DWORD *)(v15 + 68) = v16;
    v17 = v48;
    LOBYTE(v16) = *((_BYTE *)a2 + 32);
    *(_DWORD *)(v48 + 116) |= 0x100000u;
    *(_BYTE *)(v17 + 108) = v16;
    v18 = v48;
    LODWORD(Current) = a2[9];
    *(_DWORD *)(v48 + 116) |= 0x8000u;
    *(_DWORD *)(v18 + 88) = LODWORD(Current);
    v19 = v48;
    v20 = *((_QWORD *)a2 + 5);
    *(_DWORD *)(v48 + 116) |= 4u;
    *(_QWORD *)(v19 + 24) = v20;
    v21 = v48;
    LOBYTE(v16) = *((_BYTE *)a2 + 48);
    *(_DWORD *)(v48 + 116) |= 0x200000u;
    *(_BYTE *)(v21 + 109) = v16;
    v22 = v48;
    v23 = a2[13];
    *(_DWORD *)(v48 + 116) |= 0x100u;
    *(_DWORD *)(v22 + 60) = v23;
    v24 = v48;
    v25 = *((_QWORD *)a2 + 7);
    *(_DWORD *)(v48 + 116) |= 1u;
    *(_QWORD *)(v24 + 8) = v25;
    v26 = v48;
    v27 = *((_QWORD *)a2 + 10);
    *(_DWORD *)(v48 + 116) |= 2u;
    *(_QWORD *)(v26 + 16) = v27;
    v28 = v48;
    v29 = a2[22];
    *(_DWORD *)(v48 + 116) |= 0x1000u;
    *(_DWORD *)(v28 + 76) = v29;
    v30 = v48;
    v31 = a2[23];
    *(_DWORD *)(v48 + 116) |= 0x800u;
    *(_DWORD *)(v30 + 72) = v31;
    v32 = v48;
    LOBYTE(v31) = a2[24] & 1;
    *(_DWORD *)(v48 + 116) |= 0x2000000u;
    *(_BYTE *)(v32 + 113) = v31;
    v33 = v48;
    LOBYTE(v31) = (a2[24] & 2) != 0;
    *(_DWORD *)(v48 + 116) |= 0x1000000u;
    *(_BYTE *)(v33 + 112) = v31;
    v34 = v48;
    LOBYTE(v31) = (a2[24] & 4) != 0;
    *(_DWORD *)(v48 + 116) |= 0x400000u;
    *(_BYTE *)(v34 + 110) = v31;
    v35 = v48;
    LOBYTE(v31) = (a2[24] & 8) != 0;
    *(_DWORD *)(v48 + 116) |= 0x4000000u;
    *(_BYTE *)(v35 + 114) = v31;
    v36 = v48;
    LOBYTE(v31) = (a2[24] & 0x10) != 0;
    *(_DWORD *)(v48 + 116) |= 0x800000u;
    *(_BYTE *)(v36 + 111) = v31;
    v37 = v48;
    v38 = a2[25];
    *(_DWORD *)(v48 + 116) |= 0x40000u;
    *(_DWORD *)(v37 + 100) = v38;
    v39 = v48;
    v40 = a2[26];
    *(_DWORD *)(v48 + 116) |= 0x80000u;
    *(_DWORD *)(v39 + 104) = v40;
    v41 = v48;
    v42 = *((_QWORD *)a2 + 14);
    *(_DWORD *)(v48 + 116) |= 8u;
    *(_QWORD *)(v41 + 32) = v42;
    v43 = v48;
    v44 = *((_QWORD *)a2 + 15);
    *(_DWORD *)(v48 + 116) |= 0x10u;
    *(_QWORD *)(v43 + 40) = v44;
    v45 = v48;
    LODWORD(v44) = a2[32];
    *(_DWORD *)(v48 + 116) |= 0x20000u;
    *(_DWORD *)(v45 + 96) = v44;
    sub_18F2A9EF0(*a1, (uint64_t)v47);
    result = sub_18F2B9670((PB::Base *)v47);
    if (!HIBYTE(v52))
      return result;
    if ((_BYTE)v52)
      return pthread_mutex_unlock(v51);
    v5 = v50;
  }
  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}

void sub_18F364BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_18F364C10(uint64_t *a1, int *a2)
{
  uint64_t v4;
  uint64_t *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  char *v16;
  unint64_t v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  _QWORD *v28;
  int v29;
  char *v30;
  unint64_t v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  _QWORD *v42;
  int v43;
  char *v44;
  unint64_t v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  int v55;
  _QWORD *v56;
  int v57;
  char *v58;
  unint64_t v59;
  _DWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  int v69;
  _QWORD v71[17];
  _QWORD *v72;
  CFAbsoluteTime v73;
  char v74;
  uint64_t *v75;
  __int16 v76;

  v5 = a1 + 1;
  v4 = a1[1];
  v75 = a1 + 1;
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 1);
  v76 = 256;
  if (*a1)
  {
    sub_18F2B6BD0(v71);
    sub_18F2C7618(v71);
    Current = CFAbsoluteTimeGetCurrent();
    v74 |= 1u;
    v73 = Current;
    sub_18F2767B0(v72);
    v7 = v72[4];
    v8 = *a2;
    *(_BYTE *)(v7 + 32) |= 2u;
    *(_DWORD *)(v7 + 28) = v8;
    v9 = v72[4];
    sub_18F346B38(v9);
    std::string::operator=(*(std::string **)(v9 + 8), (const std::string *)(a2 + 2));
    v10 = v72[4];
    sub_18F346B98(v10);
    std::string::operator=(*(std::string **)(v10 + 16), (const std::string *)(a2 + 8));
    v11 = v72[4];
    v12 = a2[14];
    *(_BYTE *)(v11 + 32) |= 1u;
    *(_DWORD *)(v11 + 24) = v12;
    v13 = v72;
    LOBYTE(v12) = *((_BYTE *)a2 + 76);
    *((_BYTE *)v72 + 44) |= 1u;
    *((_BYTE *)v13 + 40) = v12;
    v14 = v72;
    v15 = a2[20];
    v16 = (char *)v72[2];
    v17 = v72[3];
    if ((unint64_t)v16 >= v17)
    {
      v19 = (char *)v72[1];
      v20 = (v16 - v19) >> 2;
      if ((unint64_t)(v20 + 1) >> 62)
        sub_18F26F8C0();
      v21 = v17 - (_QWORD)v19;
      v22 = (uint64_t)(v17 - (_QWORD)v19) >> 1;
      if (v22 <= v20 + 1)
        v22 = v20 + 1;
      if (v21 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
      {
        v24 = (char *)sub_18F26FB8C((uint64_t)(v72 + 3), v23);
        v19 = (char *)v14[1];
        v16 = (char *)v14[2];
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[4 * v20];
      v26 = &v24[4 * v23];
      *(_DWORD *)v25 = v15;
      v18 = v25 + 4;
      while (v16 != v19)
      {
        v27 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v25 - 1) = v27;
        v25 -= 4;
      }
      v14[1] = v25;
      v14[2] = v18;
      v14[3] = v26;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_DWORD *)v16 = v15;
      v18 = v16 + 4;
    }
    v14[2] = v18;
    v28 = v72;
    v29 = a2[21];
    v30 = (char *)v72[2];
    v31 = v72[3];
    if ((unint64_t)v30 >= v31)
    {
      v33 = (char *)v72[1];
      v34 = (v30 - v33) >> 2;
      if ((unint64_t)(v34 + 1) >> 62)
        sub_18F26F8C0();
      v35 = v31 - (_QWORD)v33;
      v36 = (uint64_t)(v31 - (_QWORD)v33) >> 1;
      if (v36 <= v34 + 1)
        v36 = v34 + 1;
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
      {
        v38 = (char *)sub_18F26FB8C((uint64_t)(v72 + 3), v37);
        v33 = (char *)v28[1];
        v30 = (char *)v28[2];
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[4 * v34];
      v40 = &v38[4 * v37];
      *(_DWORD *)v39 = v29;
      v32 = v39 + 4;
      while (v30 != v33)
      {
        v41 = *((_DWORD *)v30 - 1);
        v30 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      v28[1] = v39;
      v28[2] = v32;
      v28[3] = v40;
      if (v33)
        operator delete(v33);
    }
    else
    {
      *(_DWORD *)v30 = v29;
      v32 = v30 + 4;
    }
    v28[2] = v32;
    v42 = v72;
    v43 = a2[22];
    v44 = (char *)v72[2];
    v45 = v72[3];
    if ((unint64_t)v44 >= v45)
    {
      v47 = (char *)v72[1];
      v48 = (v44 - v47) >> 2;
      if ((unint64_t)(v48 + 1) >> 62)
        sub_18F26F8C0();
      v49 = v45 - (_QWORD)v47;
      v50 = (uint64_t)(v45 - (_QWORD)v47) >> 1;
      if (v50 <= v48 + 1)
        v50 = v48 + 1;
      if (v49 >= 0x7FFFFFFFFFFFFFFCLL)
        v51 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v51 = v50;
      if (v51)
      {
        v52 = (char *)sub_18F26FB8C((uint64_t)(v72 + 3), v51);
        v47 = (char *)v42[1];
        v44 = (char *)v42[2];
      }
      else
      {
        v52 = 0;
      }
      v53 = &v52[4 * v48];
      v54 = &v52[4 * v51];
      *(_DWORD *)v53 = v43;
      v46 = v53 + 4;
      while (v44 != v47)
      {
        v55 = *((_DWORD *)v44 - 1);
        v44 -= 4;
        *((_DWORD *)v53 - 1) = v55;
        v53 -= 4;
      }
      v42[1] = v53;
      v42[2] = v46;
      v42[3] = v54;
      if (v47)
        operator delete(v47);
    }
    else
    {
      *(_DWORD *)v44 = v43;
      v46 = v44 + 4;
    }
    v42[2] = v46;
    v56 = v72;
    v57 = a2[23];
    v58 = (char *)v72[2];
    v59 = v72[3];
    if ((unint64_t)v58 >= v59)
    {
      v61 = (char *)v72[1];
      v62 = (v58 - v61) >> 2;
      if ((unint64_t)(v62 + 1) >> 62)
        sub_18F26F8C0();
      v63 = v59 - (_QWORD)v61;
      v64 = (uint64_t)(v59 - (_QWORD)v61) >> 1;
      if (v64 <= v62 + 1)
        v64 = v62 + 1;
      if (v63 >= 0x7FFFFFFFFFFFFFFCLL)
        v65 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v65 = v64;
      if (v65)
      {
        v66 = (char *)sub_18F26FB8C((uint64_t)(v72 + 3), v65);
        v61 = (char *)v56[1];
        v58 = (char *)v56[2];
      }
      else
      {
        v66 = 0;
      }
      v67 = &v66[4 * v62];
      v68 = &v66[4 * v65];
      *(_DWORD *)v67 = v57;
      v60 = v67 + 4;
      while (v58 != v61)
      {
        v69 = *((_DWORD *)v58 - 1);
        v58 -= 4;
        *((_DWORD *)v67 - 1) = v69;
        v67 -= 4;
      }
      v56[1] = v67;
      v56[2] = v60;
      v56[3] = v68;
      if (v61)
        operator delete(v61);
    }
    else
    {
      *(_DWORD *)v58 = v57;
      v60 = v58 + 4;
    }
    v56[2] = v60;
    sub_18F2A9EF0(*a1, (uint64_t)v71);
    sub_18F2B9670((PB::Base *)v71);
  }
  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}

void sub_18F365060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_18F365090(uint64_t *a1, char *a2, double a3)
{
  uint64_t v6;
  uint64_t *v7;
  CFAbsoluteTime Current;
  uint64_t v9;
  uint64_t v10;
  __n128 __p;
  char v13;
  _QWORD v14[333];
  uint64_t v15;
  char v16;
  uint64_t *v17;
  __int16 v18;

  v7 = a1 + 1;
  v6 = a1[1];
  v17 = a1 + 1;
  (*(void (**)(uint64_t *))(v6 + 16))(a1 + 1);
  v18 = 256;
  if (*a1)
  {
    sub_18F2B6BD0(v14);
    sub_18F2C686C(v14);
    Current = CFAbsoluteTimeGetCurrent();
    v16 |= 1u;
    *(CFAbsoluteTime *)&v14[77] = Current;
    v9 = v15;
    sub_18F270374(&__p, a2);
    sub_18F3651C0(v9, &__p);
    if (v13 < 0)
      operator delete((void *)__p.n128_u64[0]);
    v10 = v15;
    *(_BYTE *)(v15 + 24) |= 1u;
    *(double *)(v10 + 16) = a3;
    sub_18F2A9EF0(*a1, (uint64_t)v14);
    sub_18F2B9670((PB::Base *)v14);
  }
  return (*(uint64_t (**)(uint64_t *))(*v7 + 24))(v7);
}

void sub_18F365184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  sub_18F2B9670((PB::Base *)&a16);
  sub_18F346934(v16 - 88);
  _Unwind_Resume(a1);
}

__n128 sub_18F3651C0(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  __n128 result;

  sub_18F346B38(a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(char *)(v4 + 23) < 0)
    operator delete(*(void **)v4);
  result = *a2;
  *(_QWORD *)(v4 + 16) = a2[1].n128_u64[0];
  *(__n128 *)v4 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

uint64_t sub_18F365210(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _QWORD v29[419];
  uint64_t v30;
  char v31;
  uint64_t *v32;
  pthread_mutex_t *v33;
  __int16 v34;

  v5 = a1 + 1;
  v4 = a1[1];
  v32 = a1 + 1;
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 1);
  v34 = 256;
  if (*a1)
  {
    sub_18F2B6BD0(v29);
    sub_18F2C767C(v29);
    Current = CFAbsoluteTimeGetCurrent();
    v31 |= 1u;
    *(CFAbsoluteTime *)&v29[77] = Current;
    v7 = v30;
    LODWORD(Current) = *(_DWORD *)a2;
    *(_WORD *)(v30 + 60) |= 8u;
    *(_DWORD *)(v7 + 24) = LODWORD(Current);
    v8 = v30;
    LODWORD(Current) = *(_DWORD *)(a2 + 4);
    *(_WORD *)(v30 + 60) |= 0x10u;
    *(_DWORD *)(v8 + 28) = LODWORD(Current);
    v9 = v30;
    LODWORD(Current) = *(_DWORD *)(a2 + 8);
    *(_WORD *)(v30 + 60) |= 0x20u;
    *(_DWORD *)(v9 + 32) = LODWORD(Current);
    v10 = v30;
    LODWORD(Current) = *(_DWORD *)(a2 + 12);
    *(_WORD *)(v30 + 60) |= 0x40u;
    *(_DWORD *)(v10 + 36) = LODWORD(Current);
    v11 = v30;
    LODWORD(Current) = *(_DWORD *)(a2 + 16);
    *(_WORD *)(v30 + 60) |= 0x200u;
    *(_DWORD *)(v11 + 48) = LODWORD(Current);
    v12 = v30;
    LODWORD(Current) = *(_DWORD *)(a2 + 20);
    *(_WORD *)(v30 + 60) |= 0x100u;
    *(_DWORD *)(v12 + 44) = LODWORD(Current);
    v13 = v30;
    LODWORD(Current) = *(_DWORD *)(a2 + 24);
    *(_WORD *)(v30 + 60) |= 0x400u;
    *(_DWORD *)(v13 + 52) = LODWORD(Current);
    v14 = v30;
    v15 = *(_BYTE *)(a2 + 28);
    *(_WORD *)(v30 + 60) |= 0x4000u;
    *(_BYTE *)(v14 + 59) = v15;
    v16 = v30;
    v17 = *(_BYTE *)(a2 + 29);
    *(_WORD *)(v30 + 60) |= 0x2000u;
    *(_BYTE *)(v16 + 58) = v17;
    v18 = v30;
    v19 = *(_BYTE *)(a2 + 30);
    *(_WORD *)(v30 + 60) |= 0x1000u;
    *(_BYTE *)(v18 + 57) = v19;
    v20 = v30;
    v21 = *(_BYTE *)(a2 + 40);
    *(_WORD *)(v30 + 60) |= 0x800u;
    *(_BYTE *)(v20 + 56) = v21;
    v22 = v30;
    LODWORD(Current) = *(_DWORD *)(a2 + 44);
    *(_WORD *)(v30 + 60) |= 2u;
    *(_DWORD *)(v22 + 16) = LODWORD(Current);
    v23 = v30;
    LODWORD(Current) = *(_DWORD *)(a2 + 48);
    *(_WORD *)(v30 + 60) |= 4u;
    *(_DWORD *)(v23 + 20) = LODWORD(Current);
    v24 = v30;
    v25 = *(_DWORD *)(a2 + 52);
    *(_WORD *)(v30 + 60) |= 0x80u;
    *(_DWORD *)(v24 + 40) = v25;
    v26 = v30;
    v27 = *(_QWORD *)(a2 + 32);
    *(_WORD *)(v30 + 60) |= 1u;
    *(_QWORD *)(v26 + 8) = v27;
    sub_18F2A9EF0(*a1, (uint64_t)v29);
    result = sub_18F2B9670((PB::Base *)v29);
    if (!HIBYTE(v34))
      return result;
    if ((_BYTE)v34)
      return pthread_mutex_unlock(v33);
    v5 = v32;
  }
  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}

void sub_18F36543C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 56);
  _Unwind_Resume(a1);
}

void sub_18F365458(uint64_t a1, int a2)
{
  NSObject *v4;
  SystemSoundID v5;
  char *v6;
  uint8_t buf[4];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2952E68);
  v4 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    v8 = a2;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEBUG, "[CMSpatialLogger] logStepDetectionResult walking,%{public}d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952E68);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMSpatialLogger::logStepDetectionResult(BOOL)", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  if (*(_BYTE *)(a1 + 24))
  {
    if (a2)
      v5 = 1547;
    else
      v5 = 1430;
    AudioServicesPlaySystemSound(v5);
  }
}

uint64_t sub_18F365620(uint64_t *a1, int a2, double a3)
{
  uint64_t v6;
  uint64_t *v7;
  CFAbsoluteTime Current;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[23];
  uint64_t v13;
  CFAbsoluteTime v14;
  char v15;
  uint64_t *v16;
  __int16 v17;

  v7 = a1 + 1;
  v6 = a1[1];
  v16 = a1 + 1;
  (*(void (**)(uint64_t *))(v6 + 16))(a1 + 1);
  v17 = 256;
  if (*a1)
  {
    sub_18F2B6BD0(v12);
    sub_18F2C76E0(v12);
    Current = CFAbsoluteTimeGetCurrent();
    v15 |= 1u;
    v14 = Current;
    v9 = v13;
    *(_BYTE *)(v13 + 16) |= 1u;
    *(_DWORD *)(v9 + 8) = a2;
    v10 = v13;
    *(float *)&Current = a3;
    *(_BYTE *)(v13 + 16) |= 2u;
    *(_DWORD *)(v10 + 12) = LODWORD(Current);
    sub_18F2A9EF0(*a1, (uint64_t)v12);
    sub_18F2B9670((PB::Base *)v12);
  }
  return (*(uint64_t (**)(uint64_t *))(*v7 + 24))(v7);
}

void sub_18F3656FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 72);
  _Unwind_Resume(a1);
}

uint64_t sub_18F365718(uint64_t *a1, int a2, int a3, double a4)
{
  uint64_t v8;
  uint64_t *v9;
  CFAbsoluteTime Current;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[182];
  uint64_t v16;
  char v17;
  uint64_t *v18;
  __int16 v19;

  v9 = a1 + 1;
  v8 = a1[1];
  v18 = a1 + 1;
  (*(void (**)(uint64_t *))(v8 + 16))(a1 + 1);
  v19 = 256;
  if (*a1)
  {
    sub_18F2B6BD0(v15);
    sub_18F2C7744(v15);
    Current = CFAbsoluteTimeGetCurrent();
    v17 |= 1u;
    *(CFAbsoluteTime *)&v15[77] = Current;
    v11 = v16;
    *(float *)&Current = a4;
    *(_BYTE *)(v16 + 20) |= 4u;
    *(_DWORD *)(v11 + 16) = LODWORD(Current);
    v12 = v16;
    *(_BYTE *)(v16 + 20) |= 1u;
    *(_DWORD *)(v12 + 8) = a2;
    v13 = v16;
    *(_BYTE *)(v16 + 20) |= 2u;
    *(_DWORD *)(v13 + 12) = a3;
    sub_18F2A9EF0(*a1, (uint64_t)v15);
    sub_18F2B9670((PB::Base *)v15);
  }
  return (*(uint64_t (**)(uint64_t *))(*v9 + 24))(v9);
}

void sub_18F365814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_18F365830(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  _QWORD v9[164];
  uint64_t v10;
  char v11;
  uint64_t *v12;
  __int16 v13;

  v5 = a1 + 1;
  v4 = a1[1];
  v12 = a1 + 1;
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 1);
  v13 = 256;
  if (*a1)
  {
    sub_18F2B6BD0(v9);
    sub_18F2C77A8(v9);
    Current = CFAbsoluteTimeGetCurrent();
    v11 |= 1u;
    *(CFAbsoluteTime *)&v9[77] = Current;
    v7 = v10;
    *(_BYTE *)(v10 + 12) |= 1u;
    *(_DWORD *)(v7 + 8) = a2;
    sub_18F2A9EF0(*a1, (uint64_t)v9);
    sub_18F2B9670((PB::Base *)v9);
  }
  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}

void sub_18F3658E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_18F365904(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  CFAbsoluteTime Current;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[11];
  _QWORD *v18;
  CFAbsoluteTime v19;
  char v20;
  uint64_t *v21;
  __int16 v22;

  v5 = a1 + 1;
  v4 = a1[1];
  v21 = a1 + 1;
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 1);
  v22 = 256;
  if (*a1)
  {
    sub_18F2B6BD0(v17);
    sub_18F2C65B0(v17);
    Current = CFAbsoluteTimeGetCurrent();
    v20 |= 1u;
    v19 = Current;
    v7 = v18;
    v8 = *((unsigned __int16 *)a2 + 16);
    *((_BYTE *)v18 + 32) |= 4u;
    *((_DWORD *)v7 + 7) = v8;
    sub_18F274494(v18);
    v9 = v18[1];
    v10 = *a2;
    *(_BYTE *)(v9 + 32) |= 1u;
    *(_QWORD *)(v9 + 8) = v10;
    v11 = v18[1];
    LODWORD(v10) = *((_DWORD *)a2 + 2);
    *(_BYTE *)(v11 + 32) |= 4u;
    *(_DWORD *)(v11 + 20) = v10;
    v12 = v18[1];
    LODWORD(v10) = *((_DWORD *)a2 + 3);
    *(_BYTE *)(v12 + 32) |= 8u;
    *(_DWORD *)(v12 + 24) = v10;
    v13 = v18[1];
    LODWORD(v10) = *((_DWORD *)a2 + 4);
    *(_BYTE *)(v13 + 32) |= 0x10u;
    *(_DWORD *)(v13 + 28) = v10;
    v14 = v18;
    v15 = a2[3];
    *((_BYTE *)v18 + 32) |= 1u;
    v14[2] = v15;
    sub_18F2A9EF0(*a1, (uint64_t)v17);
    sub_18F2B9670((PB::Base *)v17);
  }
  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}

void sub_18F365A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_18F365A6C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  CFAbsoluteTime Current;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[18];
  _QWORD *v18;
  CFAbsoluteTime v19;
  char v20;
  uint64_t *v21;
  __int16 v22;

  v5 = a1 + 1;
  v4 = a1[1];
  v21 = a1 + 1;
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 1);
  v22 = 256;
  if (*a1)
  {
    sub_18F2B6BD0(v17);
    sub_18F2C6614(v17);
    Current = CFAbsoluteTimeGetCurrent();
    v20 |= 1u;
    v19 = Current;
    v7 = v18;
    v8 = *((unsigned __int16 *)a2 + 16);
    *((_BYTE *)v18 + 36) |= 4u;
    *((_DWORD *)v7 + 7) = v8;
    sub_18F276F2C(v18);
    v9 = v18[1];
    v10 = *a2;
    *(_WORD *)(v9 + 44) |= 1u;
    *(_QWORD *)(v9 + 8) = v10;
    v11 = v18[1];
    LODWORD(v10) = *((_DWORD *)a2 + 2);
    *(_WORD *)(v11 + 44) |= 0x10u;
    *(_DWORD *)(v11 + 28) = v10;
    v12 = v18[1];
    LODWORD(v10) = *((_DWORD *)a2 + 3);
    *(_WORD *)(v12 + 44) |= 0x20u;
    *(_DWORD *)(v12 + 32) = v10;
    v13 = v18[1];
    LODWORD(v10) = *((_DWORD *)a2 + 4);
    *(_WORD *)(v13 + 44) |= 0x40u;
    *(_DWORD *)(v13 + 36) = v10;
    v14 = v18;
    v15 = a2[3];
    *((_BYTE *)v18 + 36) |= 1u;
    v14[2] = v15;
    sub_18F2A9EF0(*a1, (uint64_t)v17);
    sub_18F2B9670((PB::Base *)v17);
  }
  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}

void sub_18F365BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_18F365BD4()
{
  uint64_t v0;
  unsigned __int8 **v1;
  unsigned __int8 **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char __s[33];
  uint8_t buf[4];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v3 = (uint64_t *)v0;
  v37 = *MEMORY[0x1E0C80C00];
  v5 = v0 + 8;
  v4 = *(_QWORD *)(v0 + 8);
  v28 = v0 + 8;
  (*(void (**)(uint64_t))(v4 + 16))(v0 + 8);
  v29 = 256;
  if (*v3)
  {
    if (v2[1] - *v2 == 16)
    {
      sub_18F2B6BD0(buf);
      sub_18F2C7550(buf);
      v6 = v36;
      sub_18F270374(&v30, "00000000000000000000");
      v9 = *(_QWORD *)(v6 + 8);
      v7 = (uint64_t *)(v6 + 8);
      v8 = v9;
      if (!v9)
      {
        v8 = operator new();
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        v10 = *v7;
        *v7 = v8;
        if (v10)
        {
          sub_18F26F7EC((uint64_t)v7, v10);
          v8 = *v7;
        }
      }
      if (*(char *)(v8 + 23) < 0)
        operator delete(*(void **)v8);
      v11 = v30;
      *(_QWORD *)(v8 + 16) = v31;
      *(_OWORD *)v8 = v11;
      sub_18F2A9EF0(*v3, (uint64_t)buf);
      v12 = 0;
      __s[32] = 0;
      v13 = *v2;
      do
      {
        v14 = *v13++;
        snprintf(&__s[v12], 0x1FuLL, "%02x", v14);
        v12 += 2;
      }
      while (v12 != 32);
      sub_18F2B6BD0(&v30);
      sub_18F2C75B4(&v30);
      v15 = v32;
      sub_18F270374(&v26, __s);
      v18 = *(_QWORD *)(v15 + 8);
      v16 = (uint64_t *)(v15 + 8);
      v17 = v18;
      if (!v18)
      {
        v17 = operator new();
        *(_QWORD *)v17 = 0;
        *(_QWORD *)(v17 + 8) = 0;
        *(_QWORD *)(v17 + 16) = 0;
        v19 = *v16;
        *v16 = v17;
        if (v19)
        {
          sub_18F26F7EC((uint64_t)v16, v19);
          v17 = *v16;
        }
      }
      if (*(char *)(v17 + 23) < 0)
        operator delete(*(void **)v17);
      v20 = v26;
      *(_QWORD *)(v17 + 16) = v27;
      *(_OWORD *)v17 = v20;
      sub_18F2A9EF0(*v3, (uint64_t)&v30);
      sub_18F2B9670((PB::Base *)&v30);
      sub_18F2B9670((PB::Base *)buf);
    }
    else
    {
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E2954CE8);
      v21 = qword_1ECEDEE30;
      if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_ERROR))
      {
        v22 = (v2[1] - *v2) >> 2;
        *(_DWORD *)buf = 134217984;
        v35 = v22;
        _os_log_impl(&dword_18F1DC000, v21, OS_LOG_TYPE_ERROR, "[CMSpatialLogger] Incorrect gyro bias size %zu", buf, 0xCu);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE38 != -1)
          dispatch_once(&qword_1ECEDEE38, &unk_1E2954CE8);
        v24 = (v2[1] - *v2) >> 2;
        LODWORD(v30) = 134217984;
        *(_QWORD *)((char *)&v30 + 4) = v24;
        v25 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "void CMSpatialLogger::logAudioAccessoryGyroBias(const std::vector<float> &)", "CoreLocation: %s\n", v25);
        if (v25 != (char *)buf)
          free(v25);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
}

void sub_18F365F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F346934((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F365FE8(void *a1, int a2)
{
  if (a2)
    sub_18F213574(a1);
  JUMPOUT(0x18F365FE0);
}

os_log_t sub_18F365FF8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1EE16D820 = (uint64_t)result;
  return result;
}

os_log_t sub_18F366024()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Accessory");
  qword_1ECEDEE30 = (uint64_t)result;
  return result;
}

uint64_t sub_18F366050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  char *v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = 0;
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2954F68);
  v5 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v9 = a2;
    _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_INFO, "motion default ignored,'%{public}s'.", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2954F68);
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CLMotionDefaultsWrite<long long>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = long long]", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  return a1;
}

uint64_t sub_18F36620C(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v5;
  char *v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = a3;
  *(_BYTE *)(a1 + 8) = 0;
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2954F68);
  v5 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v9 = a2;
    _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_INFO, "motion default ignored,'%{public}s'.", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2954F68);
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CLMotionDefaultsWrite<unsigned int>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = unsigned int]", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  return a1;
}

uint64_t sub_18F3663C8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  NSObject *v6;
  char *v8;
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a1 = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_18F26F9A4((_BYTE *)(a1 + 8), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  *(_BYTE *)(a1 + 32) = 0;
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2954F68);
  v6 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v10 = a2;
    _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_INFO, "motion default ignored,'%{public}s'.", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2954F68);
    v8 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CLMotionDefaultsWrite<std::string>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = std::string]", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
  }
  return a1;
}

void sub_18F3665B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_18F3665D8()
{
  JUMPOUT(0x194001438);
}

void sub_18F3665EC(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE68 != -1)
    dispatch_once(&qword_1ECEDEE68, &unk_1E2954A88);
  v3 = qword_1ECEDEE60;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE60, OS_LOG_TYPE_INFO))
  {
    v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0)
      v5 = v4;
    else
      v5 = *(_QWORD *)v4;
    *(_DWORD *)buf = 136315138;
    v8 = v5;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_INFO, "Default handler received message %s", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE68 != -1)
      dispatch_once(&qword_1ECEDEE68, &unk_1E2954A88);
    CLConnectionMessage::name(*a2);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual void CLGyroBiasEstimatorClientRemote::registerWithGyroBiasEstimatorPrivate(CLGyroBiasEstimatorClientCallback, BOOL, void *)_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
}

_QWORD *sub_18F3667C8@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F366828(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F366814(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F366828(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F366888((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F366874(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F366888(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F3668DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F3668F8(uint64_t a1, _OWORD *a2, __int128 *a3, unint64_t a4, float32x4_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float32x2_t *v15;
  unint64_t v16;
  NSObject *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  double v25;
  NSObject *v26;
  __int32 v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x2_t *v30;
  __int32 v31;
  float32x4_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  unint64_t v43;
  unint64_t v44;
  float *v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  char *v56;
  float32x4_t v57;
  _BYTE v58[12];
  _DWORD v59[5];
  uint8_t buf[4];
  double v61;
  __int16 v62;
  _WORD v63[817];

  *(_QWORD *)&v63[813] = *MEMORY[0x1E0C80C00];
  v9 = *(unsigned __int16 *)(a1 + 10);
  v10 = *(unsigned __int16 *)(a1 + 8);
  if (!*(_WORD *)(a1 + 10))
  {
LABEL_33:
    v49 = *a3;
    *(_OWORD *)&v63[1] = *a3;
    v50 = *(unsigned int *)(a1 + 12);
    v51 = v10 + (unint64_t)v9;
    if (v51 >= v50)
      v52 = *(unsigned int *)(a1 + 12);
    else
      v52 = 0;
    v53 = a1 + 40 * (v51 - v52);
    *(_OWORD *)(v53 + 16) = *a2;
    *(_OWORD *)(v53 + 32) = v49;
    *(_QWORD *)(v53 + 48) = a4;
    if (v50 <= v9)
    {
      v54 = v10 + 1;
      if ((unint64_t)v10 + 1 >= v50)
        v55 = v50;
      else
        v55 = 0;
      *(_WORD *)(a1 + 8) = v54 - v55;
    }
    else
    {
      *(_WORD *)(a1 + 10) = v9 + 1;
    }
    return;
  }
  v11 = a1 + 16;
  v12 = v9 + v10 - 1;
  v13 = *(unsigned int *)(a1 + 12);
  if (v12 < v13)
    v13 = 0;
  v14 = v12 - v13;
  v15 = (float32x2_t *)(v11 + 40 * (v12 - v13));
  v16 = (unint64_t)v15[4];
  if ((double)v16 + 3000.0 <= (double)a4)
  {
    v25 = (double)(a4 - v16) / 1000000.0;
    a5.i32[1] = 1065646817;
    if (v25 <= 0.01)
    {
      v27 = v15[1].i32[1];
      a5.f32[0] = -v15[1].f32[0];
      *(float32x2_t *)v58 = vneg_f32(*v15);
      *(_DWORD *)&v58[8] = a5.i32[0];
      v59[0] = v27;
      v28 = sub_18F1FFE94((float32x4_t *)v58, a5);
      *(double *)v29.i64 = sub_18F3D3764((uint64_t)a2, (float *)v58, (float32x4_t *)buf, v28);
      v30 = (float32x2_t *)(v11 + 40 * v14);
      v31 = v30[3].i32[1];
      v29.f32[0] = -v30[3].f32[0];
      *(float32x2_t *)v57.f32 = vneg_f32(v30[2]);
      v57.i64[1] = __PAIR64__(v31, v29.u32[0]);
      v32 = sub_18F1FFE94(&v57, v29);
      sub_18F3D3764((uint64_t)a3, v57.f32, (float32x4_t *)v58, v32);
      v33 = v25;
      v34 = sub_18F3D3B4C((float32x4_t *)buf) / v33;
      v36 = v35 / v33;
      v38 = v37 / v33;
      v39 = sub_18F3D3B4C((float32x4_t *)v58) / v33;
      v42 = v41 / v33;
      v43 = *(unsigned int *)(a1 + 260);
      v44 = *(unsigned __int16 *)(a1 + 256) + (unint64_t)*(unsigned __int16 *)(a1 + 258);
      if (v44 < v43)
        v43 = 0;
      v45 = (float *)(a1 + 256 + 24 * (v44 - v43));
      v45[2] = v34;
      v45[3] = v36;
      v45[4] = v38;
      v45[5] = v39;
      v45[6] = v42;
      v45[7] = v40 / v33;
      v46 = *(unsigned __int16 *)(a1 + 258);
      v47 = *(unsigned int *)(a1 + 260);
      if (v47 <= v46)
      {
        v48 = *(unsigned __int16 *)(a1 + 256) + 1;
        if (v48 < v47)
          LOWORD(v47) = 0;
        *(_WORD *)(a1 + 256) = v48 - v47;
      }
      else
      {
        *(_WORD *)(a1 + 258) = v46 + 1;
      }
      LODWORD(v9) = *(unsigned __int16 *)(a1 + 10);
      LODWORD(v10) = *(unsigned __int16 *)(a1 + 8);
    }
    else
    {
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952EA8);
      v26 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349312;
        v61 = v25;
        v62 = 2050;
        *(_QWORD *)v63 = 0x3F847AE147AE147BLL;
        _os_log_impl(&dword_18F1DC000, v26, OS_LOG_TYPE_ERROR, "Time interval between feeds is %{public}lf, max value is %{public}f", buf, 0x16u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2952EA8);
        *(_DWORD *)v58 = 134349312;
        *(double *)&v58[4] = v25;
        LOWORD(v59[0]) = 2050;
        *(_QWORD *)((char *)v59 + 2) = 0x3F847AE147AE147BLL;
        v56 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "void CMRelDMFwdPredictor::feed(const CMOQuaternion &, const CMOQuaternion &, const uint64_t)", "CoreLocation: %s\n", v56);
        if (v56 != (char *)buf)
          free(v56);
      }
      LODWORD(v10) = 0;
      LODWORD(v9) = 0;
      *(_DWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 256) = 0;
    }
    goto LABEL_33;
  }
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2952EA8);
  v17 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
  {
    v18 = *(unsigned __int16 *)(a1 + 8) + (unint64_t)*(unsigned __int16 *)(a1 + 10) - 1;
    v19 = *(unsigned int *)(a1 + 12);
    if (v18 < v19)
      v19 = 0;
    v20 = *(_QWORD *)(v11 + 40 * (v18 - v19) + 32);
    *(_DWORD *)buf = 134349312;
    v61 = *(double *)&a4;
    v62 = 2050;
    *(_QWORD *)v63 = v20;
    _os_log_impl(&dword_18F1DC000, v17, OS_LOG_TYPE_ERROR, "Timestamp %{public}llu not long enough since previous %{public}llu. Skipping this sample.", buf, 0x16u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952EA8);
    v21 = *(unsigned __int16 *)(a1 + 8) + (unint64_t)*(unsigned __int16 *)(a1 + 10) - 1;
    v22 = *(unsigned int *)(a1 + 12);
    if (v21 < v22)
      v22 = 0;
    v23 = *(_QWORD *)(v11 + 40 * (v21 - v22) + 32);
    *(_DWORD *)v58 = 134349312;
    *(_QWORD *)&v58[4] = a4;
    LOWORD(v59[0]) = 2050;
    *(_QWORD *)((char *)v59 + 2) = v23;
    v24 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "void CMRelDMFwdPredictor::feed(const CMOQuaternion &, const CMOQuaternion &, const uint64_t)", "CoreLocation: %s\n", v24);
    if (v24 != (char *)buf)
      free(v24);
  }
}

void sub_18F366E9C(uint64_t a1@<X0>, unint64_t *a2@<X1>, float32x4_t *a3@<X8>, float32x4_t a4@<Q0>)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float32x4_t *v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  int8x16_t v19;
  int32x2_t v20;
  NSObject *v21;
  uint64_t v22;
  float32x2_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  uint64_t i;
  float v42;
  float v43;
  uint64_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  float v49;
  float v50;
  float32x4_t v51;
  unint64_t v52;
  unint64_t v53;
  NSObject *v54;
  NSObject *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  float32x2_t v69;
  float v70;
  float32x2_t v71;
  float v72;
  _BYTE v73[12];
  _BYTE buf[12];
  __int16 v75;
  uint64_t v76;
  _BYTE v77[24];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int16 *)(a1 + 10);
  if (*(_WORD *)(a1 + 10))
  {
    v8 = *a2;
    v9 = a1 + 16;
    v10 = v5 + *(unsigned __int16 *)(a1 + 8) - 1;
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 >= v11)
      v12 = *(unsigned int *)(a1 + 12);
    else
      v12 = 0;
    v13 = (float32x4_t *)(v9 + 40 * (v10 - v12));
    v14 = v13[2].u64[0];
    if (v8 <= v14)
    {
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952EA8);
      v55 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
      {
        v56 = *a2;
        v57 = *(unsigned __int16 *)(a1 + 8) + (unint64_t)*(unsigned __int16 *)(a1 + 10) - 1;
        v58 = *(unsigned int *)(a1 + 12);
        if (v57 < v58)
          v58 = 0;
        v59 = *(_QWORD *)(v9 + 40 * (v57 - v58) + 32);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v56;
        v75 = 2050;
        v76 = v59;
        _os_log_impl(&dword_18F1DC000, v55, OS_LOG_TYPE_ERROR, "Prediction target timestamp %{public}llu must be after last timestamp in buffer %{public}llu", buf, 0x16u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2952EA8);
        v63 = *a2;
        v64 = *(unsigned __int16 *)(a1 + 8) + (unint64_t)*(unsigned __int16 *)(a1 + 10) - 1;
        v65 = *(unsigned int *)(a1 + 12);
        if (v64 < v65)
          v65 = 0;
        v66 = *(_QWORD *)(v9 + 40 * (v64 - v65) + 32);
        *(_DWORD *)v77 = 134349312;
        *(_QWORD *)&v77[4] = v63;
        *(_WORD *)&v77[12] = 2050;
        *(_QWORD *)&v77[14] = v66;
        v67 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "CMOQuaternion CMRelDMFwdPredictor::getPredictedRelAttitude(uint64_t &) const", "CoreLocation: %s\n", v67);
        if (v67 != buf)
          free(v67);
      }
      v60 = *(unsigned __int16 *)(a1 + 8) + (unint64_t)*(unsigned __int16 *)(a1 + 10) - 1;
      v61 = *(unsigned int *)(a1 + 12);
      if (v60 < v61)
        v61 = 0;
      *a3 = *(float32x4_t *)(v9 + 40 * (v60 - v61));
    }
    else
    {
      *(double *)a4.i64 = (double)v8;
      if ((double)v14 + 100000.0 <= (double)v8)
        *(double *)a4.i64 = (double)v14 + 100000.0;
      *a2 = (unint64_t)*(double *)a4.i64;
      v15 = v13[2].i64[0];
      a3->i64[0] = 0;
      a3->i64[1] = 0x3F80000000000000;
      if ((_DWORD)v11 == (_DWORD)v5)
      {
        v16 = (double)((unint64_t)*(double *)a4.i64 - v15);
        sub_18F367764(v77, (unint64_t *)a1, (unsigned __int16 *)(a1 + 256), 5 - *(_QWORD *)a1);
        sub_18F367764(&v69, (unint64_t *)a1, (unsigned __int16 *)(a1 + 256), 4 - *(_QWORD *)a1);
        v17 = *(_QWORD *)(sub_18F367A70((unsigned __int16 *)(a1 + 8), 5uLL) + 32);
        v18 = (double)(unint64_t)(v17 - *(_QWORD *)(sub_18F367A70((unsigned __int16 *)(a1 + 8), 4uLL) + 32))
            / 1000000.0;
        if (v18 < 0.003)
        {
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2952EA8);
          v21 = qword_1EE16D820;
          if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)&buf[4] = 0x3F689374BC6A7EFALL;
            _os_log_impl(&dword_18F1DC000, v21, OS_LOG_TYPE_INFO, "[CMRelDMFwdPredictor] dt is less than %{public}f.", buf, 0xCu);
          }
          if (sub_18F1FCA08(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2952EA8);
            *(_DWORD *)v73 = 134349056;
            *(_QWORD *)&v73[4] = 0x3F689374BC6A7EFALL;
            v68 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 2, "CMOQuaternion CMRelDMFwdPredictor::predictKinematics(const CFTimeInterval) const", "CoreLocation: %s\n", v68);
            if (v68 != buf)
              free(v68);
          }
          v18 = 0.003;
        }
        v22 = 0;
        *(float *)v20.i32 = v18;
        v23 = (float32x2_t)vdup_lane_s32(v20, 0);
        *(float32x2_t *)v19.i8 = vdiv_f32(vsub_f32(*(float32x2_t *)v77, v69), v23);
        *(_QWORD *)buf = v19.i64[0];
        v24 = (float)(*(float *)&v77[8] - v70) / *(float *)v20.i32;
        *(float *)&buf[8] = v24;
        *(float32x2_t *)v73 = vdiv_f32(vsub_f32((float32x2_t)vext_s8(*(int8x8_t *)&v77[8], (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)&v77[8], *(int8x16_t *)&v77[8], 8uLL), 4uLL), v71), v23);
        *(float *)&v73[8] = (float)(*(float *)&v77[20] - v72) / *(float *)v20.i32;
        v25 = 0.0;
        do
        {
          v25 = v25 + (float)(*(float *)&v73[v22] * *(float *)&v73[v22]);
          v22 += 4;
        }
        while (v22 != 12);
        v26 = sqrtf(v25);
        v27 = 52.36;
        if (v26 <= 52.36)
        {
          v28 = 0;
          v29 = 0.0;
          do
          {
            v29 = v29 + (float)(*(float *)&v73[v28] * *(float *)&v73[v28]);
            v28 += 4;
          }
          while (v28 != 12);
          v27 = sqrtf(v29);
        }
        v30 = 0;
        v31 = 0.0;
        do
        {
          v31 = v31 + (float)(*(float *)&buf[v30] * *(float *)&buf[v30]);
          v30 += 4;
        }
        while (v30 != 12);
        if (sqrtf(v31) > v27)
        {
          v32 = 0;
          v33 = 0.0;
          do
          {
            v33 = v33 + (float)(*(float *)&buf[v32] * *(float *)&buf[v32]);
            v32 += 4;
          }
          while (v32 != 12);
          v34 = v27 / sqrtf(v33);
          *(float32x2_t *)v19.i8 = vmul_n_f32(*(float32x2_t *)v19.i8, v34);
          v24 = v24 * v34;
        }
        v35 = v16 / 1000000.0;
        *(float32x2_t *)v19.i8 = vmul_n_f32(*(float32x2_t *)v19.i8, v35);
        v36 = vmul_f32(vadd_f32(*(float32x2_t *)v77, vadd_f32(*(float32x2_t *)v77, *(float32x2_t *)v19.i8)), (float32x2_t)0x3F0000003F000000);
        *(float32x2_t *)v77 = v36;
        v37 = (float32x4_t)vextq_s8(*(int8x16_t *)&v77[8], v19, 0xCuLL);
        v37.f32[0] = v24 * v35;
        v37.f32[3] = v24 * v35;
        v38 = vaddq_f32(*(float32x4_t *)&v77[8], vaddq_f32(*(float32x4_t *)&v77[8], v37));
        v37.i64[0] = 0x3F0000003F000000;
        v37.i64[1] = 0x3F0000003F000000;
        v39 = vmulq_f32(v38, v37);
        *(float32x4_t *)&v77[8] = v39;
        v40 = 0.0;
        for (i = 12; i != 24; i += 4)
          v40 = v40 + (float)(*(float *)&v77[i] * *(float *)&v77[i]);
        v42 = sqrtf(v40);
        v43 = 8.7266;
        if (v42 <= 8.7266)
        {
          v44 = 0;
          v45 = 0.0;
          do
          {
            v45 = v45 + (float)(*(float *)&v77[v44 + 12] * *(float *)&v77[v44 + 12]);
            v44 += 4;
          }
          while (v44 != 12);
          v43 = sqrtf(v45);
        }
        v46 = 0;
        v47 = 0.0;
        do
        {
          v47 = v47 + (float)(*(float *)&v77[v46] * *(float *)&v77[v46]);
          v46 += 4;
        }
        while (v46 != 12);
        if (sqrtf(v47) > v43)
        {
          v48 = 0;
          v49 = 0.0;
          do
          {
            v49 = v49 + (float)(*(float *)&v77[v48] * *(float *)&v77[v48]);
            v48 += 4;
          }
          while (v48 != 12);
          v50 = v43 / sqrtf(v49);
          v36 = vmul_n_f32(v36, v50);
          v39.f32[0] = v39.f32[0] * v50;
        }
        *(float32x2_t *)v73 = vmul_n_f32(v36, v35);
        *(float *)&v73[8] = v39.f32[0] * v35;
        *(double *)v51.i64 = sub_18F3D3AA8((float32x4_t *)buf, (float *)v73);
        v52 = *(unsigned __int16 *)(a1 + 8) + (unint64_t)*(unsigned __int16 *)(a1 + 10) - 1;
        v53 = *(unsigned int *)(a1 + 12);
        if (v52 < v53)
          v53 = 0;
        *(double *)a4.i64 = sub_18F3D3764((uint64_t)buf, (float *)(v9 + 40 * (v52 - v53)), a3, v51);
      }
      else if (v13 != a3)
      {
        a4 = *v13;
        *a3 = *v13;
      }
      sub_18F1FFE94(a3, a4);
    }
  }
  else
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952EA8);
    v54 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v54, OS_LOG_TYPE_ERROR, "History buffer is empty, can't predict", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952EA8);
      *(_WORD *)v77 = 0;
      v62 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "CMOQuaternion CMRelDMFwdPredictor::getPredictedRelAttitude(uint64_t &) const", "CoreLocation: %s\n", v62);
      if (v62 != buf)
        free(v62);
    }
    a3->i64[0] = 0;
    a3->i64[1] = 0x3F80000000000000;
  }
}

void sub_18F367764(_QWORD *a1, unint64_t *a2, unsigned __int16 *a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v9;
  unint64_t i;
  unint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  NSObject *v18;
  char *v19;
  int v20;
  void *__p;
  void *v22;
  uint8_t buf[8];
  const void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if (a4 + v6 - 1 >= a3[1])
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952EA8);
    v18 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_ERROR, "[CMRelDMFwdPredictor] Index out of range of relative w buffer", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952EA8);
      LOWORD(__p) = 0;
      v19 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "CMRelDMFwdPredictor::OmegaState CMRelDMFwdPredictor::medianVector3d(const CMFixedSizeQueue<OmegaState, kQBufferLen - 1> &, const size_t) const", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    LODWORD(__p) = 0;
    sub_18F367F40(buf, v6, &__p);
    v9 = *a2;
    v20 = 0;
    sub_18F367F40(&__p, v9, &v20);
    for (i = 0; i != 3; ++i)
    {
      if (*a2)
      {
        v11 = 0;
        do
        {
          v12 = sub_18F367C6C(a3, a4 + v11);
          v13 = sub_18F3551B0(v12, i);
          *(float *)(*(_QWORD *)buf + 4 * v11) = v13;
          v14 = sub_18F367C6C(a3, a4 + v11);
          v15 = sub_18F3551B0(v14 + 12, i);
          *((float *)__p + v11++) = v15;
        }
        while (v11 < *a2);
      }
      v16 = sub_18F367E68(*(const void **)buf, (uint64_t)v24);
      *(float *)sub_18F33D3D0((uint64_t)a1, i) = v16;
      v17 = sub_18F367E68(__p, (uint64_t)v22);
      *(float *)sub_18F33D3D0((uint64_t)a1 + 12, i) = v17;
    }
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
    if (*(_QWORD *)buf)
    {
      v24 = *(const void **)buf;
      operator delete(*(void **)buf);
    }
  }
}

void sub_18F367A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F367A70(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954908);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v11 = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954908);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T &CMQueue<CMRelDMFwdPredictor::AttitudeState>::operator[](const size_t) const [T = CMRelDMFwdPredictor::AttitudeState]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[20 * (v4 - v5) + 4];
}

uint64_t sub_18F367C6C(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954908);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v11 = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954908);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T &CMQueue<CMRelDMFwdPredictor::OmegaState>::operator[](const size_t) const [T = CMRelDMFwdPredictor::OmegaState]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

float sub_18F367E68(const void *a1, uint64_t a2)
{
  unint64_t v2;
  float v3;
  float *v5;
  float *v6;
  uint64_t v7;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_18F367FC0(&v5, a1, a2, (a2 - (uint64_t)a1) >> 2);
  std::__sort<std::__less<float,float> &,float *>();
  v2 = (unint64_t)(v6 - v5) >> 1;
  if ((((_DWORD)v6 - (_DWORD)v5) & 4) != 0)
    v3 = v5[v2];
  else
    v3 = (float)(v5[v2 - 1] + v5[v2]) * 0.5;
  v6 = v5;
  operator delete(v5);
  return v3;
}

void sub_18F367EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

os_log_t sub_18F367F14()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1EE16D820 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F367F40(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_18F26FB4C(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_18F367FA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18F367FC0(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_18F26FB4C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18F36801C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_18F3681E4(_QWORD *a1)
{
  sub_18F1EDCB4(a1);
  JUMPOUT(0x194001438);
}

const __CFString *sub_18F368208()
{
  return CFSTR("Memory");
}

uint64_t sub_18F368218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 928))(a3, a1, a2);
}

uint64_t sub_18F368234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 896))(a3, a1, a2);
}

uint64_t sub_18F368250(void *context, uint64_t a2, int a3)
{
  const __CFDictionary *v4;
  void (__cdecl *v5)(const void *, const void *, void *);

  v4 = *(const __CFDictionary **)(a2 + 8);
  if (a3)
    v5 = (void (__cdecl *)(const void *, const void *, void *))sub_18F368234;
  else
    v5 = (void (__cdecl *)(const void *, const void *, void *))sub_18F368218;
  CFDictionaryApplyFunction(v4, v5, context);
  return (*(uint64_t (**)(void *))(*(_QWORD *)context + 848))(context);
}

uint64_t sub_18F36829C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 872))(a1);
}

uint64_t sub_18F3682A8(uint64_t a1, void *a2, int a3)
{
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t isDirectory;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  NSObject *v41;
  char *v43;
  void *v44;
  int v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint8_t buf[4];
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x194001B4C]();
  v7 = (void *)MEMORY[0x1E0C99E98];
  v11 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v8, a1, v9, v10);
  isDirectory = objc_msgSend_fileURLWithPath_isDirectory_(v7, v12, v11, 0, v13);
  if (isDirectory)
  {
    v16 = 536870913;
    if (a3)
      v16 = 1;
    if (a3 == 1)
      v17 = 1073741825;
    else
      v17 = v16;
    v44 = 0;
    v18 = objc_msgSend_writeToURL_options_error_(a2, v15, isDirectory, v17, (uint64_t)&v44);
    if ((v18 & 1) == 0)
    {
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v19 = off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_ERROR))
      {
        v24 = (void *)objc_msgSend_description(v44, v20, v21, v22, v23);
        v29 = objc_msgSend_UTF8String(v24, v25, v26, v27, v28);
        *(_DWORD *)buf = 136446466;
        v50 = a1;
        v51 = 2082;
        v52 = v29;
        _os_log_impl(&dword_18F1DC000, v19, OS_LOG_TYPE_ERROR, "Could not write data to disk %{public}s, %{public}s", buf, 0x16u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE88 != -1)
          dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
        v34 = (void *)objc_msgSend_description(v44, v30, v31, v32, v33);
        v39 = objc_msgSend_UTF8String(v34, v35, v36, v37, v38);
        v45 = 136446466;
        v46 = a1;
        v47 = 2082;
        v48 = v39;
        v40 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "BOOL CLNameValuePair::writeDataToFile(const char *, CFDataRef, CLNVPDataProtection) const", "CoreLocation: %s\n", v40);
        if (v40 != (char *)buf)
          free(v40);
      }
    }
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v41 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v50 = a1;
      _os_log_impl(&dword_18F1DC000, v41, OS_LOG_TYPE_FAULT, "Could not create NSURL for file: %{public}s", buf, 0xCu);
    }
    v18 = 0;
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v45 = 136446210;
      v46 = a1;
      v43 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "BOOL CLNameValuePair::writeDataToFile(const char *, CFDataRef, CLNVPDataProtection) const", "CoreLocation: %s\n", v43);
      if (v43 != (char *)buf)
        free(v43);
      v18 = 0;
    }
  }
  objc_autoreleasePoolPop(v6);
  return v18;
}

uint64_t sub_18F368660(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  char *v6;
  CFTypeRef cf;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if ((*(unsigned int (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 768))(a1, &cf))
  {
    v3 = sub_18F3682A8(a2, (void *)cf, 2);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v4 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v11 = a2;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "Could not serialize data for file %{public}s", buf, 0xCu);
    }
    v3 = 0;
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v8 = 136446210;
      v9 = a2;
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::saveToFile(const char *) const", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
      v3 = 0;
    }
  }
  if (cf)
    CFRelease(cf);
  return v3;
}

uint64_t sub_18F368850(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  id v12[2];
  CFTypeRef cf;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v6 = sub_18F361CC4((uint64_t *)v12, (uint64_t)"CLNameValuePair.SaveToBinaryFile", 0);
  v7 = (void *)MEMORY[0x194001B4C](v6);
  if ((*(unsigned int (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 776))(a1, &cf))
  {
    v8 = sub_18F3682A8(a2, (void *)cf, a3);
  }
  else
  {
    if (qword_1EE16D3E0 != -1)
      dispatch_once(&qword_1EE16D3E0, &unk_1E2955148);
    v9 = qword_1EE16D3D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D3D0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289282;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = a2;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not serialize data\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1EE16D3E0 != -1)
        dispatch_once(&qword_1EE16D3E0, &unk_1E2955148);
    }
    v10 = qword_1EE16D3D0;
    if (os_signpost_enabled((os_log_t)qword_1EE16D3D0))
    {
      *(_DWORD *)buf = 68289282;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = a2;
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not serialize data", "{\"msg%{public}.0s\":\"Could not serialize data\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    v8 = 0;
  }
  if (cf)
    CFRelease(cf);
  objc_autoreleasePoolPop(v7);
  sub_18F361EEC(v12);
  return v8;
}

void sub_18F368A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_18F368A6C(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)a1 + 880))(a1, v5, a3);
  CFRelease(v5);
}

uint64_t sub_18F368ACC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 880))(a1);
}

uint64_t sub_18F368AD8(CFMutableDictionaryRef *a1)
{
  CFDictionaryRemoveAllValues(a1[1]);
  return (*((uint64_t (**)(CFMutableDictionaryRef *))*a1 + 106))(a1);
}

void sub_18F368B08(uint64_t a1, const __CFString *a2, unsigned int a3)
{
  CFTypeID v6;
  NSObject *v7;
  int v8;
  _BYTE *v9;
  CFTypeID v10;
  _BYTE *v11;
  int v12;
  void **v13;
  CFTypeID v14;
  void **v15;
  char *v16;
  NSObject *v17;
  int v18;
  _BYTE *v19;
  CFIndex Count;
  _BYTE *v21;
  int v22;
  void **v23;
  CFIndex v24;
  void **v25;
  void *v26[2];
  char v27;
  CFTypeRef cf;
  _BYTE __p[12];
  __int16 v30;
  unsigned int v31;
  __int16 v32;
  CFTypeID v33;
  uint8_t buf[4];
  _BYTE *v35;
  __int16 v36;
  unsigned int v37;
  __int16 v38;
  CFTypeID v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0x80000000) != 0)
  {
    (*(void (**)(uint64_t, const __CFString *))(*(_QWORD *)a1 + 888))(a1, a2);
    return;
  }
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(_QWORD *)a1 + 912))(a1, a2, &cf))
    return;
  v6 = CFGetTypeID(cf);
  if (v6 != CFArrayGetTypeID())
  {
    if (!a3)
    {
      (*(void (**)(uint64_t, const __CFString *))(*(_QWORD *)a1 + 888))(a1, a2);
      goto LABEL_40;
    }
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v8 = SBYTE3(v33);
      v9 = *(_BYTE **)__p;
      v10 = CFGetTypeID(cf);
      v11 = __p;
      *(_DWORD *)buf = 136446722;
      if (v8 < 0)
        v11 = v9;
      v35 = v11;
      v36 = 1026;
      v37 = a3;
      v38 = 2050;
      v39 = v10;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "key %{public}s does not have element %{public}d in non-array type %{public}lu", buf, 0x1Cu);
      if (SBYTE3(v33) < 0)
        operator delete(*(void **)__p);
    }
    if (!sub_18F1FCA08(115, 0))
      goto LABEL_40;
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    sub_18F1ED06C(a2, (uint64_t)v26);
    v12 = v27;
    v13 = (void **)v26[0];
    v14 = CFGetTypeID(cf);
    v15 = v26;
    *(_DWORD *)__p = 136446722;
    if (v12 < 0)
      v15 = v13;
    *(_QWORD *)&__p[4] = v15;
    v30 = 1026;
    v31 = a3;
    v32 = 2050;
    v33 = v14;
    v16 = (char *)_os_log_send_and_compose_impl();
    if (v27 < 0)
      operator delete(v26[0]);
LABEL_37:
    sub_18F419700("Generic", 1, 0, 0, "virtual void CLNameValuePair::clearInternal(const CFStringRef, int)", "CoreLocation: %s\n", v16);
    if (v16 != (char *)buf)
      free(v16);
    goto LABEL_40;
  }
  if (CFArrayGetCount((CFArrayRef)cf) <= a3)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v17 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v18 = SBYTE3(v33);
      v19 = *(_BYTE **)__p;
      Count = CFArrayGetCount((CFArrayRef)cf);
      v21 = __p;
      *(_DWORD *)buf = 136446722;
      if (v18 < 0)
        v21 = v19;
      v35 = v21;
      v36 = 1026;
      v37 = a3;
      v38 = 2050;
      v39 = Count;
      _os_log_impl(&dword_18F1DC000, v17, OS_LOG_TYPE_FAULT, "key %{public}s does not have element %{public}d in array of size %{public}ld", buf, 0x1Cu);
      if (SBYTE3(v33) < 0)
        operator delete(*(void **)__p);
    }
    if (!sub_18F1FCA08(115, 0))
      goto LABEL_40;
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    sub_18F1ED06C(a2, (uint64_t)v26);
    v22 = v27;
    v23 = (void **)v26[0];
    v24 = CFArrayGetCount((CFArrayRef)cf);
    v25 = v26;
    *(_DWORD *)__p = 136446722;
    if (v22 < 0)
      v25 = v23;
    *(_QWORD *)&__p[4] = v25;
    v30 = 1026;
    v31 = a3;
    v32 = 2050;
    v33 = v24;
    v16 = (char *)_os_log_send_and_compose_impl();
    if (v27 < 0)
      operator delete(v26[0]);
    goto LABEL_37;
  }
  CFArrayRemoveValueAtIndex((CFMutableArrayRef)cf, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 848))(a1);
LABEL_40:
  CFRelease(cf);
}

void sub_18F369004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F369044(CFMutableDictionaryRef *a1, const void *a2)
{
  CFDictionaryRemoveValue(a1[1], a2);
  return (*((uint64_t (**)(CFMutableDictionaryRef *))*a1 + 106))(a1);
}

uint64_t sub_18F369074(uint64_t a1, uint64_t *a2)
{
  CFIndex Count;
  const void **v5;
  const void **v6;
  const __CFString **v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v13;

  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 8));
  v5 = (const void **)operator new[]();
  v6 = (const void **)operator new[]();
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 8), v5, v6);
  sub_18F2AA554(a2);
  if (Count >= 1)
  {
    v7 = (const __CFString **)v5;
    do
    {
      sub_18F1ED06C(*v7, (uint64_t)__p);
      v8 = a2[1];
      if (v8 >= a2[2])
      {
        v10 = sub_18F2B0D50(a2, (__int128 *)__p);
      }
      else
      {
        if (SHIBYTE(v13) < 0)
        {
          sub_18F26F9A4((_BYTE *)a2[1], __p[0], (unint64_t)__p[1]);
        }
        else
        {
          v9 = *(_OWORD *)__p;
          *(_QWORD *)(v8 + 16) = v13;
          *(_OWORD *)v8 = v9;
        }
        v10 = v8 + 24;
        a2[1] = v8 + 24;
      }
      a2[1] = v10;
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
      ++v7;
      --Count;
    }
    while (Count);
  }
  MEMORY[0x194001420](v5, 0x60C8044C4A2DFLL);
  MEMORY[0x194001420](v6, 0xC0C80B8AA526DLL);
  return 1;
}

void sub_18F3691D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F3691F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  v6 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], a2, (uint64_t)a2, a4, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 920))(a1, v6);
}

uint64_t sub_18F369234(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 920))(a1);
}

uint64_t sub_18F369240(uint64_t a1, const char *a2, _WORD *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F3692B0(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_18F3692B0(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  CFTypeRef cf;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  *(_DWORD *)buf = 0;
  v6 = sub_18F36B2A4(cf, buf);
  if ((_DWORD)v6)
  {
    *a3 = *(_WORD *)buf;
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v18 = v8;
      v19 = 2112;
      v20 = a2;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v13 = 138412546;
      v14 = v10;
      v15 = 2112;
      v16 = a2;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, uint16_t &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_18F3694F8(uint64_t a1, const char *a2, _WORD *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F369568(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_18F369568(uint64_t a1, uint64_t a2, _WORD *a3)
{
  const __CFNumber *v6;
  CFTypeID v7;
  NSObject *v8;
  char *v9;
  uint64_t v10;
  CFTypeID v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v15;
  char *v16;
  CFTypeRef cf;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = (const __CFNumber *)cf;
  v7 = CFGetTypeID(cf);
  if (v7 == CFNumberGetTypeID())
  {
    if (!CFNumberGetValue(v6, kCFNumberSInt16Type, a3))
    {
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v8 = off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE88 != -1)
          dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
        LOWORD(v18) = 0;
        v9 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, short &)", "CoreLocation: %s\n", v9);
        if (v9 != (char *)buf)
          free(v9);
      }
      goto LABEL_18;
    }
  }
  else
  {
    buf[0] = 0;
    v11 = CFGetTypeID(v6);
    if (v11 != CFBooleanGetTypeID() || (sub_18F1EF77C(v6, (BOOL *)buf) & 1) == 0)
    {
LABEL_18:
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v12 = off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
      {
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
        *(_DWORD *)buf = 138412546;
        v23 = v13;
        v24 = 2112;
        v25 = a2;
        _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
      }
      v10 = 0;
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE88 != -1)
          dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
        v18 = 138412546;
        v19 = v15;
        v20 = 2112;
        v21 = a2;
        v16 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, short &, int) const", "CoreLocation: %s\n", v16);
        if (v16 != (char *)buf)
          free(v16);
        v10 = 0;
      }
      goto LABEL_23;
    }
    *a3 = buf[0];
  }
  v10 = 1;
LABEL_23:
  if (cf)
    CFRelease(cf);
  return v10;
}

uint64_t sub_18F369928(uint64_t a1, const char *a2, _QWORD *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F369998(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_18F369998(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  CFTypeRef cf;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = sub_18F36B0A4(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v18 = v8;
      v19 = 2112;
      v20 = a2;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v13 = 138412546;
      v14 = v10;
      v15 = 2112;
      v16 = a2;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, int64_t &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_18F369BD0(uint64_t a1, const char *a2, _QWORD *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F369C40(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_18F369C40(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const __CFNumber *v6;
  CFTypeID v7;
  NSObject *v8;
  char *v9;
  uint64_t v10;
  CFTypeID v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v15;
  char *v16;
  CFTypeRef cf;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = (const __CFNumber *)cf;
  v7 = CFGetTypeID(cf);
  if (v7 == CFNumberGetTypeID())
  {
    if (!CFNumberGetValue(v6, kCFNumberLongType, a3))
    {
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v8 = off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE88 != -1)
          dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
        LOWORD(v18) = 0;
        v9 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, long &)", "CoreLocation: %s\n", v9);
        if (v9 != (char *)buf)
          free(v9);
      }
      goto LABEL_18;
    }
  }
  else
  {
    buf[0] = 0;
    v11 = CFGetTypeID(v6);
    if (v11 != CFBooleanGetTypeID() || (sub_18F1EF77C(v6, (BOOL *)buf) & 1) == 0)
    {
LABEL_18:
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v12 = off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
      {
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
        *(_DWORD *)buf = 138412546;
        v23 = v13;
        v24 = 2112;
        v25 = a2;
        _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
      }
      v10 = 0;
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE88 != -1)
          dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
        v18 = 138412546;
        v19 = v15;
        v20 = 2112;
        v21 = a2;
        v16 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, long &, int) const", "CoreLocation: %s\n", v16);
        if (v16 != (char *)buf)
          free(v16);
        v10 = 0;
      }
      goto LABEL_23;
    }
    *a3 = buf[0];
  }
  v10 = 1;
LABEL_23:
  if (cf)
    CFRelease(cf);
  return v10;
}

float sub_18F36A000(uint64_t a1, uint64_t a2, float *a3)
{
  float result;
  double v5;

  v5 = 0.0;
  if (sub_18F1EEBEC(a1, a2, &v5))
  {
    result = v5;
    *a3 = result;
  }
  return result;
}

BOOL sub_18F36A044(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36A0B4(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36A0B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  CFTypeRef cf;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = sub_18F1ED0D8((const __CFString *)cf, a3);
  if (!v6)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v18 = v8;
      v19 = 2112;
      v20 = a2;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v13 = 138412546;
      v14 = v10;
      v15 = 2112;
      v16 = a2;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, std::string &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_18F36A2EC(uint64_t a1, const char *a2, CFTypeRef *a3)
{
  const __CFString *v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36A35C(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_18F36A35C(uint64_t a1, const __CFString *a2, CFTypeRef *a3)
{
  uint64_t result;
  CFTypeID v7;
  CFTypeRef v8;
  NSObject *v9;
  _BYTE *v10;
  CFTypeID v11;
  CFTypeID TypeID;
  NSObject *v13;
  uint64_t v14;
  void **v15;
  CFTypeID v16;
  CFTypeID v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void *v21[2];
  char v22;
  CFTypeRef cf;
  _BYTE __p[12];
  __int16 v25;
  CFTypeID v26;
  __int16 v27;
  CFTypeID v28;
  uint8_t buf[4];
  _BYTE *v30;
  __int16 v31;
  CFTypeID v32;
  __int16 v33;
  CFTypeID v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  cf = 0;
  result = (*(uint64_t (**)(uint64_t, const __CFString *, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf);
  if ((_DWORD)result)
  {
    v7 = CFGetTypeID(cf);
    if (v7 == CFStringGetTypeID())
    {
      v8 = cf;
      *a3 = cf;
      CFAutorelease(v8);
      return 1;
    }
    else
    {
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v9 = off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
      {
        sub_18F1ED06C(a2, (uint64_t)__p);
        v10 = v27 >= 0 ? __p : *(_BYTE **)__p;
        v11 = CFGetTypeID(cf);
        TypeID = CFStringGetTypeID();
        *(_DWORD *)buf = 136446722;
        v30 = v10;
        v31 = 2050;
        v32 = v11;
        v33 = 2050;
        v34 = TypeID;
        _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "type IDs do not match for key %{public}s - %{public}lu vs %{public}lu", buf, 0x20u);
        if (SHIBYTE(v27) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE88 != -1)
          dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
        sub_18F1ED06C(a2, (uint64_t)v21);
        if (v22 >= 0)
          v15 = v21;
        else
          v15 = (void **)v21[0];
        v16 = CFGetTypeID(cf);
        v17 = CFStringGetTypeID();
        *(_DWORD *)__p = 136446722;
        *(_QWORD *)&__p[4] = v15;
        v25 = 2050;
        v26 = v16;
        v27 = 2050;
        v28 = v17;
        v18 = (char *)_os_log_send_and_compose_impl();
        if (v22 < 0)
          operator delete(v21[0]);
        sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFStringRef &, int) const", "CoreLocation: %s\n", v18);
        if (v18 != (char *)buf)
          free(v18);
      }
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v13 = off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
      {
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
        *(_DWORD *)buf = 138412546;
        v30 = (_BYTE *)v14;
        v31 = 2112;
        v32 = (CFTypeID)a2;
        _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE88 != -1)
          dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
        *(_DWORD *)__p = 138412546;
        *(_QWORD *)&__p[4] = v19;
        v25 = 2112;
        v26 = (CFTypeID)a2;
        v20 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFStringRef &, int) const", "CoreLocation: %s\n", v20);
        if (v20 != (char *)buf)
          free(v20);
      }
      CFRelease(cf);
      return 0;
    }
  }
  return result;
}

void sub_18F36A788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_18F36A7C0(uint64_t a1, const char *a2, const UInt8 **a3, _DWORD *a4, uint64_t a5)
{
  CFStringRef v9;
  _BOOL8 v10;

  v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v10 = sub_18F36A83C(a1, (CFTypeID)v9, a3, a4, a5);
  CFRelease(v9);
  return v10;
}

BOOL sub_18F36A83C(uint64_t a1, CFTypeID a2, const UInt8 **a3, _DWORD *a4, uint64_t a5)
{
  const __CFData *v9;
  CFTypeID v10;
  BOOL v11;
  _BOOL8 v12;
  NSObject *v13;
  CFTypeID v14;
  CFTypeID TypeID;
  NSObject *v16;
  uint64_t v17;
  CFTypeID v19;
  CFTypeID v20;
  char *v21;
  uint64_t v22;
  char *v23;
  CFTypeRef cf;
  int v25;
  CFTypeID v26;
  __int16 v27;
  CFTypeID v28;
  uint8_t buf[4];
  CFTypeID v30;
  __int16 v31;
  CFTypeID v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, CFTypeID, CFTypeRef *, uint64_t))(*(_QWORD *)a1 + 904))(a1, a2, &cf, a5))return 0;
  v9 = (const __CFData *)cf;
  v10 = CFGetTypeID(cf);
  v11 = v10 == CFDataGetTypeID();
  v12 = v11;
  if (v11)
  {
    *a3 = CFDataGetBytePtr(v9);
    *a4 = CFDataGetLength(v9);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v13 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v14 = CFGetTypeID(v9);
      TypeID = CFDataGetTypeID();
      *(_DWORD *)buf = 134349312;
      v30 = v14;
      v31 = 2050;
      v32 = TypeID;
      _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_FAULT, "type IDs do not match - %{public}lu vs %{public}lu", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v19 = CFGetTypeID(v9);
      v20 = CFDataGetTypeID();
      v25 = 134349312;
      v26 = v19;
      v27 = 2050;
      v28 = v20;
      v21 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, const char *&, unsigned int &)", "CoreLocation: %s\n", v21);
      if (v21 != (char *)buf)
        free(v21);
    }
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v16 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v30 = v17;
      v31 = 2112;
      v32 = a2;
      _os_log_impl(&dword_18F1DC000, v16, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v25 = 138412546;
      v26 = v22;
      v27 = 2112;
      v28 = a2;
      v23 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, const char *&, unsigned int &, int) const", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
    }
  }
  CFRelease(cf);
  return v12;
}

BOOL sub_18F36AC24(uint64_t a1, const char *a2, _QWORD *a3)
{
  CFStringRef v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36AC94(a1, (CFTypeID)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36AC94(uint64_t a1, CFTypeID a2, _QWORD *a3)
{
  const __CFDictionary *v6;
  CFTypeID v7;
  BOOL v8;
  _BOOL8 v9;
  const void *v10;
  uint64_t v11;
  NSObject *v12;
  CFTypeID v13;
  CFTypeID TypeID;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  CFTypeID v20;
  CFTypeID v21;
  char *v22;
  CFTypeRef cf;
  int v24;
  CFTypeID v25;
  __int16 v26;
  CFTypeID v27;
  uint8_t buf[4];
  CFTypeID v29;
  __int16 v30;
  CFTypeID v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, CFTypeID, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = (const __CFDictionary *)cf;
  v7 = CFGetTypeID(cf);
  v8 = v7 == CFDictionaryGetTypeID();
  v9 = v8;
  if (v8)
  {
    if (v6)
    {
      v10 = (const void *)a3[1];
      if (v10)
        CFRelease(v10);
      a3[1] = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v6);
      v11 = 106;
    }
    else
    {
      v11 = 109;
    }
    (*(void (**)(_QWORD *))(*a3 + 8 * v11))(a3);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v12 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v13 = CFGetTypeID(v6);
      TypeID = CFDictionaryGetTypeID();
      *(_DWORD *)buf = 134349312;
      v29 = v13;
      v30 = 2050;
      v31 = TypeID;
      _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_FAULT, "type IDs do not match - %{public}lu vs %{public}lu", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v20 = CFGetTypeID(v6);
      v21 = CFDictionaryGetTypeID();
      v24 = 134349312;
      v25 = v20;
      v26 = 2050;
      v27 = v21;
      v22 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, CLNameValuePair &)", "CoreLocation: %s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v15 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v29 = v16;
      v30 = 2112;
      v31 = a2;
      _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v24 = 138412546;
      v25 = v17;
      v26 = 2112;
      v27 = a2;
      v18 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CLNameValuePair &, int) const", "CoreLocation: %s\n", v18);
      if (v18 != (char *)buf)
        free(v18);
    }
  }
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t sub_18F36B0A4(const void *a1, _QWORD *a2)
{
  CFTypeID v4;
  NSObject *v5;
  int v6;
  uint64_t result;
  char *v8;
  CFTypeID v9;
  CFTypeID TypeID;
  uint8_t buf[1640];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    buf[0] = 0;
    v9 = CFGetTypeID(a1);
    TypeID = CFBooleanGetTypeID();
    result = 0;
    if (v9 != TypeID)
      return result;
    result = sub_18F1EF77C(a1, (BOOL *)buf);
    if (!(_DWORD)result)
      return result;
    *a2 = buf[0];
    return 1;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt64Type, a2))
    return 1;
  if (qword_1ECEDEE88 != -1)
    dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
  v5 = off_1ECEDEE80;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  v6 = sub_18F1FCA08(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v8 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, int64_t &)", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
    return 0;
  }
  return result;
}

uint64_t sub_18F36B2A4(const void *a1, _DWORD *a2)
{
  CFTypeID v4;
  NSObject *v5;
  int v6;
  uint64_t result;
  char *v8;
  CFTypeID v9;
  CFTypeID TypeID;
  uint8_t buf[1640];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    buf[0] = 0;
    v9 = CFGetTypeID(a1);
    TypeID = CFBooleanGetTypeID();
    result = 0;
    if (v9 != TypeID)
      return result;
    result = sub_18F1EF77C(a1, (BOOL *)buf);
    if (!(_DWORD)result)
      return result;
    *a2 = buf[0];
    return 1;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, a2))
    return 1;
  if (qword_1ECEDEE88 != -1)
    dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
  v5 = off_1ECEDEE80;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  v6 = sub_18F1FCA08(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v8 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, int &)", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
    return 0;
  }
  return result;
}

BOOL sub_18F36B4A4(uint64_t a1, const __CFString *a2, CFTypeRef *a3)
{
  CFTypeID v5;
  BOOL v6;
  _BOOL8 v7;
  NSObject *v8;
  _BYTE *v9;
  CFTypeID v10;
  CFTypeID TypeID;
  void **v13;
  CFTypeID v14;
  CFTypeID v15;
  char *v16;
  void *v17[2];
  char v18;
  CFTypeRef cf;
  _BYTE __p[12];
  __int16 v21;
  CFTypeID v22;
  __int16 v23;
  CFTypeID v24;
  uint8_t buf[4];
  _BYTE *v26;
  __int16 v27;
  CFTypeID v28;
  __int16 v29;
  CFTypeID v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(_QWORD *)a1 + 912))(a1, a2, &cf))
    return 0;
  v5 = CFGetTypeID(cf);
  v6 = v5 == CFArrayGetTypeID();
  v7 = v6;
  if (v6)
  {
    *a3 = cf;
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v8 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v9 = v23 >= 0 ? __p : *(_BYTE **)__p;
      v10 = CFGetTypeID(cf);
      TypeID = CFArrayGetTypeID();
      *(_DWORD *)buf = 136446722;
      v26 = v9;
      v27 = 2050;
      v28 = v10;
      v29 = 2050;
      v30 = TypeID;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_FAULT, "type IDs do not match for key %{public}s - %{public}lu vs %{public}lu", buf, 0x20u);
      if (SHIBYTE(v23) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v13 = v17;
      sub_18F1ED06C(a2, (uint64_t)v17);
      if (v18 < 0)
        v13 = (void **)v17[0];
      v14 = CFGetTypeID(cf);
      v15 = CFArrayGetTypeID();
      *(_DWORD *)__p = 136446722;
      *(_QWORD *)&__p[4] = v13;
      v21 = 2050;
      v22 = v14;
      v23 = 2050;
      v24 = v15;
      v16 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0)
        operator delete(v17[0]);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFArrayRef &) const", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
  }
  CFAutorelease(cf);
  return v7;
}

void sub_18F36B754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_18F36B78C(uint64_t a1, const __CFString *a2, CFTypeRef *a3)
{
  CFTypeID v5;
  BOOL v6;
  _BOOL8 v7;
  NSObject *v8;
  _BYTE *v9;
  CFTypeID v10;
  CFTypeID TypeID;
  void **v13;
  CFTypeID v14;
  CFTypeID v15;
  char *v16;
  void *v17[2];
  char v18;
  CFTypeRef cf;
  _BYTE __p[12];
  __int16 v21;
  CFTypeID v22;
  __int16 v23;
  CFTypeID v24;
  uint8_t buf[4];
  _BYTE *v26;
  __int16 v27;
  CFTypeID v28;
  __int16 v29;
  CFTypeID v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v5 = CFGetTypeID(cf);
  v6 = v5 == CFDataGetTypeID();
  v7 = v6;
  if (v6)
  {
    *a3 = cf;
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v8 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v9 = v23 >= 0 ? __p : *(_BYTE **)__p;
      v10 = CFGetTypeID(cf);
      TypeID = CFDataGetTypeID();
      *(_DWORD *)buf = 136446722;
      v26 = v9;
      v27 = 2050;
      v28 = v10;
      v29 = 2050;
      v30 = TypeID;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_FAULT, "type IDs do not match for key %{public}s - %{public}lu vs %{public}lu", buf, 0x20u);
      if (SHIBYTE(v23) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v13 = v17;
      sub_18F1ED06C(a2, (uint64_t)v17);
      if (v18 < 0)
        v13 = (void **)v17[0];
      v14 = CFGetTypeID(cf);
      v15 = CFDataGetTypeID();
      *(_DWORD *)__p = 136446722;
      *(_QWORD *)&__p[4] = v13;
      v21 = 2050;
      v22 = v14;
      v23 = 2050;
      v24 = v15;
      v16 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0)
        operator delete(v17[0]);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFDataRef &, int) const", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
  }
  CFAutorelease(cf);
  return v7;
}

void sub_18F36BA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_18F36BA74(uint64_t a1, const void *a2)
{
  return CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 8), a2) != 0;
}

uint64_t sub_18F36BA94(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)a1 + 896))(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return 1;
}

uint64_t sub_18F36BB00(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
  return 1;
}

BOOL sub_18F36BB20(uint64_t a1, const char *a2, _BYTE *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36BB88(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36BB88(uint64_t a1, const __CFString *a2, _BYTE *a3)
{
  CFTypeRef *v5;
  CFTypeRef v6;
  NSObject *v7;
  void **v8;
  _BYTE *v10;
  char *v11;
  _BYTE buf[12];
  char v13;
  int v14;
  _BYTE *v15;
  void *__p[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (!*a3)
    v5 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  v6 = *v5;
  CFRetain(*v5);
  if (v6)
  {
    (*(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)a1 + 896))(a1, a2, v6);
    CFRelease(v6);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v8 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v13 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v14 = 136446210;
      v15 = v10;
      v11 = (char *)_os_log_send_and_compose_impl();
      if (v13 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const BOOL &)", "CoreLocation: %s\n", v11);
      if (v11 != (char *)__p)
        free(v11);
    }
  }
  return v6 != 0;
}

BOOL sub_18F36BDFC(uint64_t a1, const char *a2, unsigned __int16 *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36BE64(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36BE64(uint64_t a1, const __CFString *a2, unsigned __int16 *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *valuePtr[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  LODWORD(valuePtr[0]) = *a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)valuePtr);
      v7 = v16 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(valuePtr[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const uint16_t &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)valuePtr)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F36C0D4(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36C13C(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36C13C(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt16Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const short &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F36C3A0(uint64_t a1, const char *a2, unsigned int *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36C408(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36C408(uint64_t a1, const __CFString *a2, unsigned int *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *valuePtr[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  valuePtr[0] = (void *)*a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)valuePtr);
      v7 = v16 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(valuePtr[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const uint32_t &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)valuePtr)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F36C678(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36C6E0(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36C6E0(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const int64_t &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F36C944(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36C9AC(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36C9AC(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const int &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F36CC10(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36CC78(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36CC78(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const long &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F36CEDC(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36CF44(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36CF44(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const double &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F36D1A8(uint64_t a1, const char *a2, char *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36D210(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36D210(uint64_t a1, const __CFString *a2, char *cStr)
{
  CFStringRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFStringRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const char *)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F36D47C(uint64_t a1, const char *a2, char *a3)
{
  const __CFString *v5;
  char *v6;
  _BOOL8 v7;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  if (a3[23] >= 0)
    v6 = a3;
  else
    v6 = *(char **)a3;
  v7 = sub_18F36D210(a1, v5, v6);
  if (v5)
    CFRelease(v5);
  return v7;
}

BOOL sub_18F36D4F0(uint64_t a1, const __CFString *a2, char *a3)
{
  if (a3[23] < 0)
    a3 = *(char **)a3;
  return sub_18F36D210(a1, a2, a3);
}

uint64_t sub_18F36D504(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)a1 + 896))(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return 1;
}

uint64_t sub_18F36D570(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
  return 1;
}

BOOL sub_18F36D590(uint64_t a1, const char *a2, uint64_t a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36D5F8(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36D5F8(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  CFDictionaryRef Copy;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)(a3 + 8));
  if (Copy)
  {
    (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)a1 + 896))(a1, a2, Copy);
    CFRelease(Copy);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const CLNameValuePair &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return Copy != 0;
}

uint64_t sub_18F36D85C(CFMutableDictionaryRef *a1, const void *a2, const void *a3)
{
  CFDictionarySetValue(a1[1], a2, a3);
  return (*((uint64_t (**)(CFMutableDictionaryRef *))*a1 + 106))(a1);
}

uint64_t sub_18F36D88C(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)a1 + 928))(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return 1;
}

uint64_t sub_18F36D8F8(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
  return 1;
}

BOOL sub_18F36D918(uint64_t a1, const char *a2, _BYTE *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36D980(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36D980(uint64_t a1, const __CFString *a2, _BYTE *a3)
{
  CFTypeRef *v5;
  CFTypeRef v6;
  NSObject *v7;
  void **v8;
  _BYTE *v10;
  char *v11;
  _BYTE buf[12];
  char v13;
  int v14;
  _BYTE *v15;
  void *__p[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (!*a3)
    v5 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  v6 = *v5;
  CFRetain(*v5);
  if (v6)
  {
    (*(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)a1 + 928))(a1, a2, v6);
    CFRelease(v6);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v8 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v13 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v14 = 136446210;
      v15 = v10;
      v11 = (char *)_os_log_send_and_compose_impl();
      if (v13 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const BOOL &)", "CoreLocation: %s\n", v11);
      if (v11 != (char *)__p)
        free(v11);
    }
  }
  return v6 != 0;
}

BOOL sub_18F36DBF4(uint64_t a1, const char *a2, unsigned __int16 *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36DC5C(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36DC5C(uint64_t a1, const __CFString *a2, unsigned __int16 *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *valuePtr[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  LODWORD(valuePtr[0]) = *a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)valuePtr);
      v7 = v16 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(valuePtr[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const uint16_t &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)valuePtr)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F36DECC(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36DF34(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36DF34(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt16Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const short &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F36E198(uint64_t a1, const char *a2, unsigned int *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36E200(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36E200(uint64_t a1, const __CFString *a2, unsigned int *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *valuePtr[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  valuePtr[0] = (void *)*a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)valuePtr);
      v7 = v16 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(valuePtr[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const uint32_t &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)valuePtr)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F36E470(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36E4D8(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36E4D8(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const int64_t &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F36E73C(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36E7A4(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36E7A4(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const int &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F36EA08(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36EA70(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36EA70(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const long &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F36ECD4(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36ED3C(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36ED3C(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const double &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F36EFA0(uint64_t a1, const char *a2, char *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36F008(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36F008(uint64_t a1, const __CFString *a2, char *cStr)
{
  CFStringRef v5;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFStringRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const char *)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return v5 != 0;
}

BOOL sub_18F36F274(uint64_t a1, const char *a2, char *a3)
{
  const __CFString *v5;
  char *v6;
  _BOOL8 v7;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  if (a3[23] >= 0)
    v6 = a3;
  else
    v6 = *(char **)a3;
  v7 = sub_18F36F008(a1, v5, v6);
  if (v5)
    CFRelease(v5);
  return v7;
}

BOOL sub_18F36F2E8(uint64_t a1, const __CFString *a2, char *a3)
{
  if (a3[23] < 0)
    a3 = *(char **)a3;
  return sub_18F36F008(a1, a2, a3);
}

uint64_t sub_18F36F2FC(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)a1 + 928))(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return 1;
}

uint64_t sub_18F36F368(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
  return 1;
}

BOOL sub_18F36F388(uint64_t a1, const char *a2, uint64_t a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F36F3F0(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_18F36F3F0(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  CFDictionaryRef Copy;
  NSObject *v6;
  void **v7;
  _BYTE *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFDictionaryRef *)(a3 + 8));
  if (Copy)
  {
    (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)a1 + 928))(a1, a2, Copy);
    CFRelease(Copy);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(a2, (uint64_t)__p);
      v7 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)buf);
      if (v12 >= 0)
        v9 = buf;
      else
        v9 = *(_BYTE **)buf;
      v13 = 136446210;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl();
      if (v12 < 0)
        operator delete(*(void **)buf);
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const CLNameValuePair &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)__p)
        free(v10);
    }
  }
  return Copy != 0;
}

uint64_t sub_18F36F654(uint64_t a1, uint64_t a2, const void *a3)
{
  CFTypeID v6;
  void *Mutable;
  CFTypeID v8;
  CFTypeRef arg;
  CFRange v11;

  arg = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 912))(a1, a2, &arg))
  {
    CFAutorelease(arg);
    v6 = CFGetTypeID(arg);
    if (v6 == CFArrayGetTypeID())
    {
      Mutable = (void *)arg;
    }
    else
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      CFAutorelease(Mutable);
      CFArrayAppendValue((CFMutableArrayRef)Mutable, arg);
    }
    v8 = CFGetTypeID(a3);
    if (v8 == CFArrayGetTypeID())
    {
      v11.length = CFArrayGetCount((CFArrayRef)a3);
      v11.location = 0;
      CFArrayAppendArray((CFMutableArrayRef)Mutable, (CFArrayRef)a3, v11);
    }
    else
    {
      CFArrayAppendValue((CFMutableArrayRef)Mutable, a3);
    }
  }
  else
  {
    Mutable = (void *)a3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 896))(a1, a2, Mutable);
}

uint64_t sub_18F36F764(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 856))(a1);
}

uint64_t sub_18F36F770(uint64_t a1, const char *a2)
{
  CFStringRef v3;
  uint64_t v4;

  v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v4 = (*(uint64_t (**)(uint64_t, CFStringRef))(*(_QWORD *)a1 + 864))(a1, v3);
  CFRelease(v3);
  return v4;
}

uint64_t sub_18F36F7CC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 864))(a1);
}

uint64_t sub_18F36F7D8(uint64_t a1, uint64_t a2)
{
  CFTypeID v2;
  CFIndex Count;
  CFTypeRef cf;

  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 912))(a1, a2, &cf))
    return 0xFFFFFFFFLL;
  v2 = CFGetTypeID(cf);
  if (v2 == CFArrayGetTypeID())
    Count = CFArrayGetCount((CFArrayRef)cf);
  else
    Count = 1;
  CFRelease(cf);
  return Count;
}

BOOL sub_18F36F850(uint64_t a1)
{
  return (*(int (**)(uint64_t))(*(_QWORD *)a1 + 856))(a1) < 1;
}

BOOL sub_18F36F874(uint64_t a1, const char *a2)
{
  CFStringRef v3;

  v3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  LODWORD(a1) = (*(uint64_t (**)(uint64_t, CFStringRef))(*(_QWORD *)a1 + 864))(a1, v3);
  CFRelease(v3);
  return (int)a1 < 1;
}

BOOL sub_18F36F8D4(uint64_t a1)
{
  return (*(int (**)(uint64_t))(*(_QWORD *)a1 + 864))(a1) < 1;
}

BOOL sub_18F36F8F8(uint64_t a1, CFDataRef *a2)
{
  CFDataRef Data;

  Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFPropertyListRef *)(a1 + 8), kCFPropertyListXMLFormat_v1_0, 0, 0);
  *a2 = Data;
  return Data != 0;
}

uint64_t sub_18F36F944(uint64_t a1, CFTypeRef *a2)
{
  __CFWriteStream *v4;
  __CFWriteStream *v5;
  CFIndex v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  char *v10;
  CFIndex Code;
  const __CFString *Domain;
  NSObject *v13;
  uint8_t *v14;
  char *v16;
  _BYTE *v17;
  CFErrorRef error;
  _BYTE v19[12];
  __int16 v20;
  uint8_t *v21;
  char v22;
  int v23;
  CFIndex v24;
  __int16 v25;
  _BYTE *v26;
  uint8_t buf[8];
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = CFWriteStreamCreateWithAllocatedBuffers((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  error = 0;
  if (v4)
  {
    v5 = v4;
    if (!CFWriteStreamOpen(v4))
    {
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v9 = off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "could not open write stream", buf, 2u);
      }
      if (!sub_18F1FCA08(115, 0))
        goto LABEL_35;
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      *(_WORD *)v19 = 0;
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::serializeBinary(CFDataRef *) const", "CoreLocation: %s\n", v10);
      if (v10 == (char *)buf)
        goto LABEL_35;
LABEL_51:
      free(v10);
LABEL_35:
      v7 = 0;
LABEL_36:
      CFRelease(v5);
      if (error)
        CFRelease(error);
      return v7;
    }
    v6 = CFPropertyListWrite(*(CFPropertyListRef *)(a1 + 8), v5, kCFPropertyListBinaryFormat_v1_0, 0, &error);
    if (!error && v6)
    {
      *a2 = CFWriteStreamCopyProperty(v5, (CFStreamPropertyKey)*MEMORY[0x1E0C9B2A8]);
      CFWriteStreamClose(v5);
      v7 = 1;
      goto LABEL_36;
    }
    if (error)
    {
      Code = CFErrorGetCode(error);
      if (error)
      {
        Domain = CFErrorGetDomain(error);
        goto LABEL_26;
      }
    }
    else
    {
      Code = 0;
    }
    Domain = CFSTR("unknown error");
LABEL_26:
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v13 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      sub_18F1ED06C(Domain, (uint64_t)buf);
      v14 = v28 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v19 = 134349314;
      *(_QWORD *)&v19[4] = Code;
      v20 = 2082;
      v21 = v14;
      _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_FAULT, "could not write data, error code, %{public}ld, error domain, %{public}s", v19, 0x16u);
      if (v28 < 0)
        operator delete(*(void **)buf);
    }
    if (!sub_18F1FCA08(115, 0))
      goto LABEL_35;
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    sub_18F1ED06C(Domain, (uint64_t)v19);
    if (v22 >= 0)
      v17 = v19;
    else
      v17 = *(_BYTE **)v19;
    v23 = 134349314;
    v24 = Code;
    v25 = 2082;
    v26 = v17;
    v10 = (char *)_os_log_send_and_compose_impl();
    if (v22 < 0)
      operator delete(*(void **)v19);
    sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::serializeBinary(CFDataRef *) const", "CoreLocation: %s\n", v10);
    if (v10 == (char *)buf)
      goto LABEL_35;
    goto LABEL_51;
  }
  if (qword_1ECEDEE88 != -1)
    dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
  v8 = off_1ECEDEE80;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_FAULT, "could not create write stream", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    *(_WORD *)v19 = 0;
    v16 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::serializeBinary(CFDataRef *) const", "CoreLocation: %s\n", v16);
    if (v16 != (char *)buf)
      free(v16);
  }
  return 0;
}

BOOL sub_18F36FE98(_QWORD *a1, const __CFData *a2)
{
  id v4;
  CFPropertyListRef v5;
  const void *v6;
  CFIndex Code;
  const __CFString *Domain;
  NSObject *v9;
  void **v10;
  const char *v12;
  char *v13;
  CFErrorRef error;
  _BYTE buf[12];
  __int16 v16;
  const char *v17;
  char v18;
  int v19;
  CFIndex v20;
  __int16 v21;
  const char *v22;
  void *__p[2];
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
  error = 0;
  v5 = CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 1uLL, 0, &error);
  if (v5)
  {
    v6 = (const void *)a1[1];
    if (v6)
      CFRelease(v6);
    a1[1] = v5;
    (*(void (**)(_QWORD *))(*a1 + 848))(a1);
    goto LABEL_21;
  }
  if (!error)
  {
    Code = 0;
    goto LABEL_9;
  }
  Code = CFErrorGetCode(error);
  if (!error)
  {
LABEL_9:
    Domain = CFSTR("unknown error");
    goto LABEL_10;
  }
  Domain = CFErrorGetDomain(error);
LABEL_10:
  if (qword_1ECEDEE88 != -1)
    dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
  v9 = off_1ECEDEE80;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
  {
    if (Domain)
    {
      sub_18F1ED06C(Domain, (uint64_t)__p);
      if (v24 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 134349314;
      *(_QWORD *)&buf[4] = Code;
      v16 = 2082;
      v17 = (const char *)v10;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "could not create intermediate property list - %{public}ld (%{public}s)", buf, 0x16u);
      if (v24 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 134349314;
      *(_QWORD *)&buf[4] = Code;
      v16 = 2082;
      v17 = "unknown error";
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "could not create intermediate property list - %{public}ld (%{public}s)", buf, 0x16u);
    }
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    if (Domain)
    {
      sub_18F1ED06C(Domain, (uint64_t)buf);
      if (v18 >= 0)
        v12 = buf;
      else
        v12 = *(const char **)buf;
    }
    else
    {
      v12 = "unknown error";
    }
    v19 = 134349314;
    v20 = Code;
    v21 = 2082;
    v22 = v12;
    v13 = (char *)_os_log_send_and_compose_impl();
    if (Domain && v18 < 0)
      operator delete(*(void **)buf);
    sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::deserialize(const CFDataRef)", "CoreLocation: %s\n", v13);
    if (v13 != (char *)__p)
      free(v13);
  }
LABEL_21:
  if (error)
    CFRelease(error);

  return v5 != 0;
}

void sub_18F3701DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18F370218(uint64_t a1)
{
  NSObject *v1;
  void **v2;
  void **v3;
  char *v4;
  void *__p[2];
  uint64_t v6;
  int v7;
  void **v8;
  uint8_t buf[4];
  void **v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  __p[0] = 0;
  __p[1] = 0;
  v6 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 800))(a1, __p);
  if (qword_1EE16D9A8 != -1)
    dispatch_once(&qword_1EE16D9A8, &unk_1E2955208);
  v1 = qword_1EE16D9B0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D9B0, OS_LOG_TYPE_DEBUG))
  {
    v2 = __p;
    if (v6 < 0)
      v2 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v10 = v2;
    _os_log_impl(&dword_18F1DC000, v1, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D9A8 != -1)
      dispatch_once(&qword_1EE16D9A8, &unk_1E2955208);
    v3 = __p;
    if (v6 < 0)
      v3 = (void **)__p[0];
    v7 = 136315138;
    v8 = v3;
    v4 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual void CLNameValuePair::print() const", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_18F370404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F370424(uint64_t a1, std::string *a2)
{
  const __CFDictionary *v4;
  std::string context;

  v4 = *(const __CFDictionary **)(a1 + 8);
  if (!v4 || !CFDictionaryGetCount(v4))
    JUMPOUT(0x1940012ACLL);
  memset(&context, 0, sizeof(context));
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 8), (CFDictionaryApplierFunction)sub_18F3704CC, &context);
  std::string::operator=(a2, &context);
  if (SHIBYTE(context.__r_.__value_.__r.__words[2]) < 0)
    operator delete(context.__r_.__value_.__l.__data_);
}

void sub_18F3704B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F3704CC(const __CFString *a1, const __CFString *a2, std::string *a3)
{
  CFTypeID v6;
  CFTypeID v7;
  int v8;
  void **v9;
  CFIndex Count;
  void **v11;
  CFTypeID v12;
  CFTypeID TypeID;
  CFTypeID v14;
  CFRange v15;
  void **v16;
  CFTypeID v17;
  void **v18;
  const char *p_context;
  CFTypeID v20;
  void **v21;
  CFTypeID v22;
  void **context;
  uint64_t v24;
  std::string *v25;
  void *__p[2];
  uint64_t v27;
  char __str[256];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = CFGetTypeID(a1);
  if (v6 == CFStringGetTypeID())
  {
    __p[0] = 0;
    __p[1] = 0;
    v27 = 0;
    sub_18F1ED0D8(a1, (uint64_t)__p);
    v7 = CFGetTypeID(a2);
    if (v7 == CFDictionaryGetTypeID())
    {
      v8 = SHIBYTE(v27);
      v9 = (void **)__p[0];
      Count = CFDictionaryGetCount((CFDictionaryRef)a2);
      v11 = __p;
      if (v8 < 0)
        v11 = v9;
      snprintf(__str, 0x100uLL, "%s = <dictionary (%ld entries)>:\n", (const char *)v11, Count);
      std::string::append(a3, __str);
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)sub_18F3704CC, a3);
    }
    else
    {
      v14 = CFGetTypeID(a2);
      if (v14 == CFArrayGetTypeID())
      {
        v15.length = CFArrayGetCount((CFArrayRef)a2);
        v16 = __p;
        if (v27 < 0)
          v16 = (void **)__p[0];
        context = v16;
        v24 = 0;
        v25 = a3;
        v15.location = 0;
        CFArrayApplyFunction((CFArrayRef)a2, v15, (CFArrayApplierFunction)sub_18F3712C4, &context);
      }
      else
      {
        v17 = CFGetTypeID(a2);
        if (v17 == CFStringGetTypeID())
        {
          context = 0;
          v24 = 0;
          v25 = 0;
          if (sub_18F1ED0D8(a2, (uint64_t)&context))
          {
            v18 = __p;
            if (v27 < 0)
              v18 = (void **)__p[0];
            p_context = (const char *)&context;
            if (SHIBYTE(v25) < 0)
              p_context = (const char *)context;
            snprintf(__str, 0x100uLL, "%s = %s\n", (const char *)v18, p_context);
          }
          std::string::append(a3, __str);
          if (SHIBYTE(v25) < 0)
            operator delete(context);
        }
        else
        {
          v20 = CFGetTypeID(a2);
          if (v20 == CFNumberGetTypeID())
          {
            context = 0;
            if (sub_18F1EF3E8(a2, &context))
            {
              v21 = __p;
              if (v27 < 0)
                v21 = (void **)__p[0];
              snprintf(__str, 0x100uLL, "%s = %0.6f\n", (const char *)v21, *(double *)&context);
            }
            std::string::append(a3, __str);
          }
          else
          {
            v22 = CFGetTypeID(a2);
            if (v22 == CFBooleanGetTypeID())
            {
              CFBooleanGetValue((CFBooleanRef)a2);
              snprintf(__str, 0x100uLL, "%s = %d\n");
            }
            else
            {
              CFGetTypeID(a2);
              snprintf(__str, 0x100uLL, "%s = <unhandled value type %lu>\n");
            }
            std::string::append(a3, __str);
          }
        }
      }
    }
    if (SHIBYTE(v27) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v12 = CFGetTypeID(a1);
    TypeID = CFStringGetTypeID();
    snprintf(__str, 0x100uLL, "type ID does not match - %lu vs %lu\n", v12, TypeID);
    std::string::append(a3, __str);
  }
}

void sub_18F3707F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F370838(const __CFString *a1, const __CFString *a2)
{
  CFTypeID v4;
  CFTypeID v5;
  NSObject *v6;
  int v7;
  void **v8;
  CFIndex Count;
  void **v10;
  CFTypeID v11;
  CFRange v12;
  void **v13;
  CFTypeID v14;
  NSObject *v15;
  void **v16;
  void **v17;
  CFTypeID v18;
  NSObject *v19;
  void **v20;
  void **v21;
  char *v22;
  CFTypeID v23;
  NSObject *v24;
  int v25;
  void **v26;
  int Value;
  void **v28;
  int v29;
  void **v30;
  int v31;
  void **v32;
  NSObject *v33;
  int v34;
  void **v35;
  CFTypeID v36;
  void **v37;
  int v38;
  void **v39;
  void *v40;
  void **v41;
  char *v42;
  void **v43;
  void **v44;
  char *v45;
  int v46;
  void **v47;
  void *v48;
  void **v49;
  void *v50[2];
  uint64_t v51;
  _BYTE v52[12];
  __int16 v53;
  void **v54;
  void *__p[4];
  _BYTE buf[1632];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v4 = CFGetTypeID(a1);
  if (v4 == CFStringGetTypeID())
  {
    v50[0] = 0;
    v50[1] = 0;
    v51 = 0;
    sub_18F1ED0D8(a1, (uint64_t)v50);
    v5 = CFGetTypeID(a2);
    if (v5 == CFDictionaryGetTypeID())
    {
      if (qword_1EE16D9A8 != -1)
        dispatch_once(&qword_1EE16D9A8, &unk_1E2955208);
      v6 = qword_1EE16D9B0;
      if (os_log_type_enabled((os_log_t)qword_1EE16D9B0, OS_LOG_TYPE_DEBUG))
      {
        v7 = SHIBYTE(v51);
        v8 = (void **)v50[0];
        Count = CFDictionaryGetCount((CFDictionaryRef)a2);
        v10 = v50;
        if (v7 < 0)
          v10 = v8;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v10;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = Count;
        _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEBUG, "\t%s = <dictionary (%ld entries)>:", buf, 0x16u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D9A8 != -1)
          dispatch_once(&qword_1EE16D9A8, &unk_1E2955208);
        v38 = SHIBYTE(v51);
        v39 = (void **)v50[0];
        v40 = (void *)CFDictionaryGetCount((CFDictionaryRef)a2);
        v41 = v50;
        if (v38 < 0)
          v41 = v39;
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = v41;
        WORD2(__p[1]) = 2048;
        *(void **)((char *)&__p[1] + 6) = v40;
        v42 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "CoreLocation: %s\n", v42);
        if (v42 != buf)
          free(v42);
      }
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)sub_18F370838, 0);
      goto LABEL_63;
    }
    v11 = CFGetTypeID(a2);
    if (v11 == CFArrayGetTypeID())
    {
      v12.length = CFArrayGetCount((CFArrayRef)a2);
      *(_OWORD *)&buf[8] = 0uLL;
      v13 = v50;
      if (v51 < 0)
        v13 = (void **)v50[0];
      *(_QWORD *)buf = v13;
      v12.location = 0;
      CFArrayApplyFunction((CFArrayRef)a2, v12, (CFArrayApplierFunction)sub_18F371250, buf);
      goto LABEL_63;
    }
    v14 = CFGetTypeID(a2);
    if (v14 == CFStringGetTypeID())
    {
      memset(__p, 0, 24);
      if (sub_18F1ED0D8(a2, (uint64_t)__p))
      {
        if (qword_1EE16D9A8 != -1)
          dispatch_once(&qword_1EE16D9A8, &unk_1E2955208);
        v15 = qword_1EE16D9B0;
        if (os_log_type_enabled((os_log_t)qword_1EE16D9B0, OS_LOG_TYPE_DEBUG))
        {
          v16 = v50;
          if (v51 < 0)
            v16 = (void **)v50[0];
          v17 = __p;
          if (SHIBYTE(__p[2]) < 0)
            v17 = (void **)__p[0];
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v16;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v17;
          _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_DEBUG, "\t%s = %s", buf, 0x16u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D9A8 != -1)
            dispatch_once(&qword_1EE16D9A8, &unk_1E2955208);
          v43 = v50;
          if (v51 < 0)
            v43 = (void **)v50[0];
          v44 = __p;
          if (SHIBYTE(__p[2]) < 0)
            v44 = (void **)__p[0];
          *(_DWORD *)v52 = 136315394;
          *(_QWORD *)&v52[4] = v43;
          v53 = 2080;
          v54 = v44;
          v45 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "CoreLocation: %s\n", v45);
          if (v45 != buf)
            free(v45);
        }
      }
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      goto LABEL_63;
    }
    v18 = CFGetTypeID(a2);
    if (v18 == CFNumberGetTypeID())
    {
      *(_QWORD *)v52 = 0;
      if (!sub_18F1EF3E8(a2, v52))
        goto LABEL_63;
      if (qword_1EE16D9A8 != -1)
        dispatch_once(&qword_1EE16D9A8, &unk_1E2955208);
      v19 = qword_1EE16D9B0;
      if (os_log_type_enabled((os_log_t)qword_1EE16D9B0, OS_LOG_TYPE_DEBUG))
      {
        v20 = v50;
        if (v51 < 0)
          v20 = (void **)v50[0];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v20;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = *(_QWORD *)v52;
        _os_log_impl(&dword_18F1DC000, v19, OS_LOG_TYPE_DEBUG, "\t%s = %0.6f", buf, 0x16u);
      }
      if (!sub_18F1FCA08(115, 2))
        goto LABEL_63;
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D9A8 != -1)
        dispatch_once(&qword_1EE16D9A8, &unk_1E2955208);
      v21 = v50;
      if (v51 < 0)
        v21 = (void **)v50[0];
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = v21;
      WORD2(__p[1]) = 2048;
      *(void **)((char *)&__p[1] + 6) = *(void **)v52;
      v22 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "CoreLocation: %s\n", v22);
      if (v22 == buf)
        goto LABEL_63;
    }
    else
    {
      v23 = CFGetTypeID(a2);
      if (v23 == CFBooleanGetTypeID())
      {
        if (qword_1EE16D9A8 != -1)
          dispatch_once(&qword_1EE16D9A8, &unk_1E2955208);
        v24 = qword_1EE16D9B0;
        if (os_log_type_enabled((os_log_t)qword_1EE16D9B0, OS_LOG_TYPE_DEBUG))
        {
          v25 = SHIBYTE(v51);
          v26 = (void **)v50[0];
          Value = CFBooleanGetValue((CFBooleanRef)a2);
          v28 = v50;
          if (v25 < 0)
            v28 = v26;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v28;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = Value;
          _os_log_impl(&dword_18F1DC000, v24, OS_LOG_TYPE_DEBUG, "\t%s = %d", buf, 0x12u);
        }
        if (!sub_18F1FCA08(115, 2))
          goto LABEL_63;
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D9A8 != -1)
          dispatch_once(&qword_1EE16D9A8, &unk_1E2955208);
        v29 = SHIBYTE(v51);
        v30 = (void **)v50[0];
        v31 = CFBooleanGetValue((CFBooleanRef)a2);
        v32 = v50;
        if (v29 < 0)
          v32 = v30;
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = v32;
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = v31;
        v22 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "CoreLocation: %s\n", v22);
      }
      else
      {
        if (qword_1EE16D9A8 != -1)
          dispatch_once(&qword_1EE16D9A8, &unk_1E2955208);
        v33 = qword_1EE16D9B0;
        if (os_log_type_enabled((os_log_t)qword_1EE16D9B0, OS_LOG_TYPE_DEBUG))
        {
          v34 = SHIBYTE(v51);
          v35 = (void **)v50[0];
          v36 = CFGetTypeID(a2);
          v37 = v50;
          if (v34 < 0)
            v37 = v35;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v37;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v36;
          _os_log_impl(&dword_18F1DC000, v33, OS_LOG_TYPE_DEBUG, "\t%s = <unhandled value type %lu>", buf, 0x16u);
        }
        if (!sub_18F1FCA08(115, 2))
          goto LABEL_63;
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D9A8 != -1)
          dispatch_once(&qword_1EE16D9A8, &unk_1E2955208);
        v46 = SHIBYTE(v51);
        v47 = (void **)v50[0];
        v48 = (void *)CFGetTypeID(a2);
        v49 = v50;
        if (v46 < 0)
          v49 = v47;
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = v49;
        WORD2(__p[1]) = 2048;
        *(void **)((char *)&__p[1] + 6) = v48;
        v22 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "CoreLocation: %s\n", v22);
      }
      if (v22 == buf)
      {
LABEL_63:
        if (SHIBYTE(v51) < 0)
          operator delete(v50[0]);
        return;
      }
    }
    free(v22);
    goto LABEL_63;
  }
}

void sub_18F3711E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F371250(uint64_t a1, uint64_t a2)
{
  CFStringRef v4;

  v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%s[%d]"), *(_QWORD *)a2, *(unsigned int *)(a2 + 8));
  sub_18F370838(v4, a1);
  ++*(_DWORD *)(a2 + 8);
  CFRelease(v4);
}

void sub_18F3712C4(uint64_t a1, uint64_t a2)
{
  CFStringRef v4;

  v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%s[%d]"), *(_QWORD *)a2, *(unsigned int *)(a2 + 8));
  sub_18F3704CC(v4, a1, *(_QWORD *)(a2 + 16));
  ++*(_DWORD *)(a2 + 8);
  CFRelease(v4);
}

os_log_t sub_18F37133C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1EE16D3D0 = (uint64_t)result;
  return result;
}

os_log_t sub_18F371368()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Direct_deprecated");
  qword_1EE16D9B0 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F371394(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_18F26FA30();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

uint64_t sub_18F37143C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_1E2948F38;
  pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 8));
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(void **)(v6 + 104);
  if (v7)
  {
    free(v7);
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(v6 + 104) = 0;
  }
  objc_msgSend_assertInside(*(void **)(v6 + 64), v2, v3, v4, v5);

  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    MEMORY[0x194001438](v8, 0x10B0C4016A090D5);
  return a1;
}

void sub_18F3714C0(uint64_t a1)
{
  sub_18F37143C(a1);
  JUMPOUT(0x194001438);
}

pthread_t sub_18F3714E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  pthread_t result;
  uint64_t v7;
  int v8;
  _opaque_pthread_t *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  objc_msgSend_assertInside(*(void **)(*(_QWORD *)(a1 + 8) + 64), a2, a3, a4, a5);
  if (pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8)))
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EE8);
    v13 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      v27 = "assert";
      v28 = 2081;
      v29 = "error == 0";
      _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EE8);
    }
    v14 = off_1ECEDEE80;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE80))
    {
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      v27 = "assert";
      v28 = 2081;
      v29 = "error == 0";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EE8);
    }
    v15 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      v27 = "assert";
      v28 = 2081;
      v29 = "error == 0";
      _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_50;
  }
  result = pthread_self();
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_DWORD *)(v7 + 72);
  if (v8 < 0)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EE8);
    v16 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      v27 = "assert";
      v28 = 2081;
      v29 = "info->fCount >= 0";
      _os_log_impl(&dword_18F1DC000, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EE8);
    }
    v17 = off_1ECEDEE80;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE80))
    {
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      v27 = "assert";
      v28 = 2081;
      v29 = "info->fCount >= 0";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EE8);
    }
    v18 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      v27 = "assert";
      v28 = 2081;
      v29 = "info->fCount >= 0";
      _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_50;
  }
  v9 = *(_opaque_pthread_t **)(v7 + 80);
  if (!v8)
  {
    if (!v9)
      goto LABEL_17;
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EE8);
    v19 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      v27 = "assert";
      v28 = 2081;
      v29 = "(info->fCount > 0) || (info->fOwner == __null)";
      _os_log_impl(&dword_18F1DC000, v19, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EE8);
    }
    v20 = off_1ECEDEE80;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE80))
    {
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      v27 = "assert";
      v28 = 2081;
      v29 = "(info->fCount > 0) || (info->fOwner == __null)";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EE8);
    }
    v21 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      v27 = "assert";
      v28 = 2081;
      v29 = "(info->fCount > 0) || (info->fOwner == __null)";
      _os_log_impl(&dword_18F1DC000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
LABEL_50:
    abort_report_np();
  }
  if (v9 != result)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EE8);
    v10 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      v27 = "assert";
      v28 = 2081;
      v29 = "(info->fCount == 0) || (info->fOwner == curThread)";
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EE8);
    }
    v11 = off_1ECEDEE80;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE80))
    {
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      v27 = "assert";
      v28 = 2081;
      v29 = "(info->fCount == 0) || (info->fOwner == curThread)";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EE8);
    }
    v12 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      v27 = "assert";
      v28 = 2081;
      v29 = "(info->fCount == 0) || (info->fOwner == curThread)";
      _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_50;
  }
LABEL_17:
  *(_DWORD *)(v7 + 72) = v8 + 1;
  *(_QWORD *)(v7 + 80) = result;
  return result;
}

uint64_t sub_18F371DF0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t result;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  objc_msgSend_assertInside(*(void **)(*(_QWORD *)(a1 + 8) + 64), a2, a3, a4, a5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD *)(v6 + 72);
  if (v7 <= 0)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EE8);
    v10 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "assert";
      v22 = 2081;
      v23 = "info->fCount > 0";
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EE8);
    }
    v11 = off_1ECEDEE80;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE80))
    {
      *(_DWORD *)buf = 68289539;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "assert";
      v22 = 2081;
      v23 = "info->fCount > 0";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EE8);
    }
    v12 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "assert";
      v22 = 2081;
      v23 = "info->fCount > 0";
      _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
LABEL_27:
    abort_report_np();
  }
  v8 = v7 - 1;
  *(_DWORD *)(v6 + 72) = v8;
  if (!v8)
    *(_QWORD *)(v6 + 80) = 0;
  result = pthread_mutex_unlock((pthread_mutex_t *)v6);
  if ((_DWORD)result)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EE8);
    v13 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "assert";
      v22 = 2081;
      v23 = "error == 0";
      _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EE8);
    }
    v14 = off_1ECEDEE80;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE80))
    {
      *(_DWORD *)buf = 68289539;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "assert";
      v22 = 2081;
      v23 = "error == 0";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EE8);
    }
    v15 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "assert";
      v22 = 2081;
      v23 = "error == 0";
      _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_27;
  }
  return result;
}

BOOL sub_18F3722C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;

  v5 = (int)a2;
  objc_msgSend_assertInside(*(void **)(*(_QWORD *)(a1 + 8) + 64), a2, a3, a4, a5);
  return *(_DWORD *)(*(_QWORD *)(a1 + 8) + 72) == v5;
}

BOOL sub_18F372304(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  pthread_t v6;

  objc_msgSend_assertInside(*(void **)(*(_QWORD *)(a1 + 8) + 64), a2, a3, a4, a5);
  v6 = *(pthread_t *)(*(_QWORD *)(a1 + 8) + 80);
  return v6 == pthread_self();
}

BOOL sub_18F372340(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  pthread_t v6;

  objc_msgSend_assertInside(*(void **)(*(_QWORD *)(a1 + 8) + 64), a2, a3, a4, a5);
  v6 = *(pthread_t *)(*(_QWORD *)(a1 + 8) + 80);
  return v6 != pthread_self();
}

uint64_t sub_18F37237C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

double *sub_18F372384(double *a1, char a2, int a3, char a4)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  NSObject *v10;
  char *v12;
  uint8_t buf[1640];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v7 = sub_18F1EE054((uint64_t)a1, a3);
  *(_QWORD *)(v7 + 200) = &unk_1E294B238;
  v8 = *(_BYTE *)(v7 + 8);
  *(_QWORD *)(v7 + 256) = 0;
  *(_QWORD *)(v7 + 264) = 0;
  *(_BYTE *)(v7 + 272) = 0;
  *(_QWORD *)(v7 + 208) = 0;
  *(_QWORD *)(v7 + 216) = 0;
  *(_WORD *)(v7 + 224) = 0;
  *(_BYTE *)(v7 + 273) = v8;
  *(_QWORD *)v7 = &off_1E294B1C8;
  *(_DWORD *)(v7 + 276) = 0;
  *(_QWORD *)(v7 + 280) = 0;
  *(_DWORD *)(v7 + 288) = -1;
  *(_BYTE *)(v7 + 292) = a4;
  *(_DWORD *)(v7 + 296) = 1127481344;
  v9 = sub_18F1EF73C();
  *(_QWORD *)buf = sub_18F1F723C(v9, a1 + 3);
  sub_18F412554((uint64_t)(a1 + 38), buf, a1 + 2, a1 + 4, a2);
  if (!sub_18F2009D4())
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2952F08);
    v10 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_FAULT, "9-axis sensor fusion is not supported on this platform.  Returning.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2952F08);
      v12 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "CLSensorFusionService9Axis::CLSensorFusionService9Axis(BOOL, int, BOOL)", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
  return a1;
}

void sub_18F3725B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  sub_18F412D48(v3);
  sub_18F352FB4(v2);
  sub_18F4B2E54(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3725E0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E294B1C8;
  a1[25] = &unk_1E294B238;
  v2 = a1 + 25;
  sub_18F372710((uint64_t)a1);
  sub_18F412D48(a1 + 38);
  sub_18F352FB4(v2);
  return sub_18F4B2E54((uint64_t)a1);
}

uint64_t sub_18F372634(uint64_t a1)
{
  return sub_18F3725E0((_QWORD *)(a1 - 200));
}

void sub_18F37263C(_QWORD *a1)
{
  sub_18F3725E0(a1);
  JUMPOUT(0x194001438);
}

void sub_18F372660(uint64_t a1)
{
  sub_18F3725E0((_QWORD *)(a1 - 200));
  JUMPOUT(0x194001438);
}

uint64_t sub_18F372688(uint64_t a1)
{
  uint64_t v3;

  sub_18F412DF4(a1 + 304);
  *(_DWORD *)(a1 + 276) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = -1;
  *(_DWORD *)(a1 + 296) = 1127481344;
  sub_18F209FE8(a1 + 200, *(double *)(a1 + 16));
  sub_18F209E74(a1 + 200, *(double *)(a1 + 24));
  sub_18F209F30(a1 + 200);
  sub_18F3530F0(a1 + 200, *(double *)(a1 + 32));
  v3 = 2;
  return sub_18F1E5858(a1, &v3);
}

_QWORD *sub_18F372710(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 200);
  sub_18F352FF8((_QWORD *)(a1 + 200));
  sub_18F209F74((uint64_t)v1);
  sub_18F1EAC4C(v1);
  return sub_18F209DDC(v1);
}

void sub_18F372748(uint64_t a1, int a2)
{
  NSObject *v3;
  int v4;
  char *v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 56))
  {
    if (*(unsigned __int8 *)(a1 + 292) != a2)
    {
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2952F08);
      v3 = off_1ECEDEE70;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *(unsigned __int8 *)(a1 + 292);
        *(_DWORD *)buf = 67240192;
        v7 = v4;
        _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEFAULT, "North reference overridden as %{public}d by first client", buf, 8u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2952F08);
        v5 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionService9Axis::useNorthRef(BOOL)", "CoreLocation: %s\n", v5);
        if (v5 != (char *)buf)
          free(v5);
      }
    }
  }
  else
  {
    *(_BYTE *)(a1 + 292) = a2;
  }
}

void sub_18F372910(uint64_t a1, uint64_t a2)
{
  double *v4;
  float v5;
  float32x4_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float v11;
  float v12;
  float v13;
  int v14;
  float32x4_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  __int128 v19;
  int v20;
  float v21;
  int v22;
  int v23;
  uint64_t v24;
  float32x4_t v25;
  double v26;
  float32x4_t v27;
  float v28;
  float v29;
  float v30;
  int v31;
  __int128 v32;
  int v33;
  float v34;
  int v35;
  int v36;
  uint64_t v37;
  char v38;
  char v39;
  __int16 v40;
  int v41;
  char v42;
  uint64_t v43;
  double v44;

  v4 = (double *)(a1 + 304);
  v5 = *(float *)(a2 + 12);
  v26 = *(float *)(a2 + 8);
  *(double *)v25.i64 = v5;
  v44 = *(float *)(a2 + 16);
  sub_18F413110(a1 + 304, (float64x2_t *)&v26, (uint64_t)&v25, &v44, (_QWORD *)a2);
  v7 = *(double *)(a1 + 320);
  v8 = *(double *)(a1 + 344);
  v10 = *(double *)(a1 + 328);
  v9 = *(double *)(a1 + 336);
  if (*(double *)(a1 + 480) <= 0.0)
  {
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
  }
  else
  {
    v11 = *(float *)(a1 + 656) - (v8 * (v10 + v10) - v7 * (v9 + v9));
    v12 = *(float *)(a1 + 660) - (-(v8 * (v7 + v7)) - v10 * (v9 + v9));
    v13 = *(float *)(a1 + 664) - (v7 * (v7 + v7) + -1.0 + v10 * (v10 + v10));
  }
  v14 = *(_DWORD *)(a1 + 460);
  v6.i64[0] = *(_QWORD *)(a1 + 464);
  v24 = v6.i64[0];
  v27 = 0uLL;
  v26 = -1.0;
  v15 = sub_18F1FFE94(&v27, v6);
  v37 = 0;
  v36 = 0;
  v26 = *(double *)a2;
  v15.i32[1] = HIDWORD(v26);
  v15.f32[0] = v7;
  *(float *)&v16 = v10;
  *(float *)&v17 = v9;
  *(float *)&v18 = v8;
  v25.i64[0] = __PAIR64__(v16, v15.u32[0]);
  v25.i64[1] = __PAIR64__(v18, v17);
  sub_18F1FFE94(&v25, v15);
  *(_QWORD *)&v19 = v24;
  v27 = v25;
  v28 = v11;
  v29 = v12;
  v30 = v13;
  v31 = v14;
  v20 = *(_DWORD *)(a1 + 284);
  *((_QWORD *)&v19 + 1) = *(_QWORD *)(a1 + 276);
  v32 = v19;
  v33 = v20;
  v38 = *(_DWORD *)(a1 + 288);
  v21 = sub_18F4145D8(v4);
  v22 = *(_DWORD *)(a1 + 296);
  v34 = v21;
  v35 = v22;
  v39 = 1;
  v40 = (*(unsigned __int8 *)(a1 + 312) << 8) | (*(unsigned __int8 *)(a1 + 315) << 13) | (8
                                                                                        * *(unsigned __int8 *)(a1 + 313)) | (16 * *(unsigned __int8 *)(a1 + 252));
  if (*(_BYTE *)(a1 + 292))
    v23 = 15;
  else
    v23 = 7;
  v41 = v23;
  v43 = 0;
  v42 = *(_BYTE *)(a2 + 22);
  sub_18F1FFEF8(a1, (uint64_t)&v26);
}

void sub_18F372B18(uint64_t a1, uint64_t a2)
{
  sub_18F372910(a1 - 200, a2);
}

void sub_18F372B20(uint64_t a1, float32x2_t *a2, float *a3)
{
  sub_18F414138(a1 + 304, a2, a3);
}

void sub_18F372B28(uint64_t a1, float32x2_t *a2, float *a3)
{
  sub_18F414138(a1 + 104, a2, a3);
}

void sub_18F372B30(uint64_t a1, uint64_t a2)
{
  float v2;
  double v3;
  double v4;
  double v5;

  v2 = *(float *)(a2 + 12);
  v5 = *(float *)(a2 + 8);
  v3 = *(float *)(a2 + 16);
  v4 = v2;
  sub_18F414784(a1 + 304, &v5, &v4, &v3, (_QWORD *)a2);
}

void sub_18F372B7C(uint64_t a1, uint64_t a2)
{
  sub_18F372B30(a1 - 200, a2);
}

void sub_18F372B84(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _BOOL4 v6;
  unsigned int v7;
  unsigned int v8;
  float v9;
  double v10;
  double v11;
  double v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  char *v19;
  unint64_t v20;
  float v21;
  _BYTE v22[32];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  int v34;
  __int16 v35;
  _BOOL4 v36;
  uint8_t buf[4];
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  int v44;
  __int16 v45;
  _BOOL4 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)(a2 + 56);
  v23 = *(_OWORD *)(a2 + 40);
  v24 = v4;
  v25 = *(_OWORD *)(a2 + 72);
  v26 = *(_QWORD *)(a2 + 88);
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)v22 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&v22[16] = v5;
  if ((sub_18F1F7BFC() & 0x10) != 0 && (DWORD1(v23) - 1) <= 4)
    DWORD1(v23) = dword_18F504998[DWORD1(v23) - 1];
  buf[0] = *(_BYTE *)(a1 + 272);
  v6 = sub_18F4167D0(a1 + 304, (uint64_t *)v22, buf, (_BYTE *)(a1 + 292), (double *)a2);
  v20 = 0;
  v21 = 0.0;
  if (*(_BYTE *)(a1 + 313))
  {
    *(float *)&v7 = *(double *)(a1 + 680);
    *(float *)&v8 = *(double *)(a1 + 688);
    v20 = __PAIR64__(v8, v7);
    v9 = *(double *)(a1 + 696);
    v21 = v9;
    v10 = *(float *)&v7;
    v11 = *(float *)&v8;
    v12 = v9;
  }
  else
  {
    v12 = 0.0;
    v11 = 0.0;
    v10 = 0.0;
  }
  if (*(_BYTE *)(a1 + 8))
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2952F08);
    v13 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(unsigned __int8 *)(a1 + 272);
      *(_DWORD *)buf = 134219008;
      v38 = v10;
      v39 = 2048;
      v40 = v11;
      v41 = 2048;
      v42 = v12;
      v43 = 1024;
      v44 = v14;
      v45 = 1024;
      v46 = v6;
      _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_DEBUG, "correctedCompassExt, %.3f, %.3f, %.3f, %u, %u", buf, 0x2Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2952F08);
      v18 = *(unsigned __int8 *)(a1 + 272);
      v27 = 134219008;
      v28 = v10;
      v29 = 2048;
      v30 = v11;
      v31 = 2048;
      v32 = v12;
      v33 = 1024;
      v34 = v18;
      v35 = 1024;
      v36 = v6;
      v19 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionService9Axis::feedCompassData(const CLCompass_Type::Sample *)", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
  }
  if (v6)
  {
    v15 = sub_18F2009D4();
    (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)v15 + 64))(v15, 1, &v20);
  }
  v16 = DWORD1(v23);
  *(_DWORD *)(a1 + 288) = DWORD1(v23);
  *(_DWORD *)(a1 + 296) = v23;
  if (v16 <= 0)
  {
    *(_DWORD *)(a1 + 276) = 0;
    *(_QWORD *)(a1 + 280) = 0;
  }
  else
  {
    if ((sub_18F1F7BFC() & 0x10) != 0)
    {
      *(_DWORD *)(a1 + 284) = *(_DWORD *)&v22[20];
      v17 = *(_QWORD *)&v22[12];
    }
    else
    {
      *(_DWORD *)(a1 + 284) = *(_DWORD *)&v22[8];
      v17 = *(_QWORD *)v22;
    }
    *(_QWORD *)(a1 + 276) = v17;
  }
}

void sub_18F372ED8(uint64_t a1, uint64_t a2)
{
  sub_18F372B84(a1 - 200, a2);
}

uint64_t sub_18F374854(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return sub_18F2A7D54(a2);
}

void sub_18F3748A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18F2A8438(v1 + 8);
  _Unwind_Resume(a1);
}

void sub_18F374E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A7FB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

os_log_t sub_18F374F24()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Fall");
  qword_1EE16D830 = (uint64_t)result;
  return result;
}

void sub_18F374F50()
{
  JUMPOUT(0x194001438);
}

uint64_t sub_18F374F68(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_18F374F70(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void sub_18F374F80()
{
  JUMPOUT(0x194001438);
}

BOOL sub_18F374F94()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  CFTypeID v2;
  _BOOL8 v3;

  v0 = (const __CFBoolean *)MGCopyAnswer();
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  v3 = v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1) != 0;
  CFRelease(v1);
  return v3;
}

void sub_18F375004(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_1ECEDEF78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDEF78))
  {
    unk_1ECEDF020 = 0;
    xmmword_1ECEDF010 = 0uLL;
    __cxa_atexit(MEMORY[0x1E0DE44D0], &xmmword_1ECEDF010, &dword_18F1DC000);
    __cxa_guard_release(&qword_1ECEDEF78);
  }
  if (qword_1ECEDEF80 != -1)
    dispatch_once(&qword_1ECEDEF80, &unk_1E2943820);
  if (byte_1ECEDF027 < 0)
  {
    sub_18F26F9A4((_BYTE *)a1, (void *)xmmword_1ECEDF010, *((unint64_t *)&xmmword_1ECEDF010 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1ECEDF010;
    *(_QWORD *)(a1 + 16) = unk_1ECEDF020;
  }
}

_QWORD *sub_18F3750D8()
{
  const __CFDictionary *v0;
  std::string *v1;
  __int128 v2;
  const std::string::value_type *p_p;
  std::string::size_type v4;
  std::string *v5;
  std::string::size_type v6;
  char v7;
  std::string v9;
  std::string v10;
  void *__p;
  std::string::size_type v12;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  const void *v16[2];
  uint64_t v17;
  _QWORD v18[2];
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v0 = (const __CFDictionary *)_CFCopyServerVersionDictionary();
  if (!v0)
  {
    v0 = (const __CFDictionary *)_CFCopySystemVersionDictionary();
    if (!v0)
      JUMPOUT(0x1940012ACLL);
  }
  sub_18F1EDCF0(v18, v0);
  CFRelease(v0);
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  __p = 0;
  v12 = 0;
  v13 = 0;
  if (!sub_18F36A0B4((uint64_t)v18, *MEMORY[0x1E0C9AB98], (uint64_t)v14))
    MEMORY[0x1940012AC](v14, "<name>");
  if (!sub_18F36A0B4((uint64_t)v18, *MEMORY[0x1E0C9ABB0], (uint64_t)v16))
    MEMORY[0x1940012AC](v16, "<version>");
  if (!sub_18F36A0B4((uint64_t)v18, *MEMORY[0x1E0C9AB90], (uint64_t)&__p))
    MEMORY[0x1940012AC](&__p, "<build>");
  sub_18F3753CC((const void **)v14, v16, (uint64_t)&v9);
  v1 = std::string::append(&v9, "/");
  v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v10.__r_.__value_.__r.__words[2] = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  if (v13 >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if (v13 >= 0)
    v4 = HIBYTE(v13);
  else
    v4 = v12;
  v5 = std::string::append(&v10, p_p, v4);
  v6 = v5->__r_.__value_.__r.__words[0];
  v19[0] = v5->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v19 + 7) = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
  v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (byte_1ECEDF027 < 0)
    operator delete((void *)xmmword_1ECEDF010);
  *(_QWORD *)&xmmword_1ECEDF010 = v6;
  *((_QWORD *)&xmmword_1ECEDF010 + 1) = v19[0];
  *(_QWORD *)((char *)&xmmword_1ECEDF010 + 15) = *(_QWORD *)((char *)v19 + 7);
  byte_1ECEDF027 = v7;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v17) < 0)
    operator delete((void *)v16[0]);
  return sub_18F1EDCB4(v18);
}

void sub_18F375344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v34 - 73) < 0)
    operator delete(*(void **)(v34 - 96));
  sub_18F1EDCB4((_QWORD *)(v34 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_18F3753CC@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = sub_18F2B6B4C(a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void sub_18F375494(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  int v5;
  _QWORD block[5];

  v3 = atomic_load((unsigned __int8 *)&qword_1ECEDEF88);
  if ((v3 & 1) == 0)
  {
    v4 = a1;
    v5 = __cxa_guard_acquire(&qword_1ECEDEF88);
    a1 = v4;
    if (v5)
    {
      unk_1ECEDF038 = 0;
      xmmword_1ECEDF028 = 0uLL;
      __cxa_atexit(MEMORY[0x1E0DE44D0], &xmmword_1ECEDF028, &dword_18F1DC000);
      __cxa_guard_release(&qword_1ECEDEF88);
      a1 = v4;
    }
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F3755BC;
  block[3] = &unk_1E2955738;
  block[4] = a1;
  if (qword_1ECEDEF90 != -1)
    dispatch_once(&qword_1ECEDEF90, block);
  if (byte_1ECEDF03F < 0)
  {
    sub_18F26F9A4((_BYTE *)a2, (void *)xmmword_1ECEDF028, *((unint64_t *)&xmmword_1ECEDF028 + 1));
  }
  else
  {
    *(_OWORD *)a2 = xmmword_1ECEDF028;
    *(_QWORD *)(a2 + 16) = unk_1ECEDF038;
  }
}

double sub_18F3755BC()
{
  char *v0;
  double result;
  __int128 v2;
  uint64_t v3;
  size_t v4;
  _BYTE v5[128];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = 128;
  if (sysctlbyname("hw.model", v5, &v4, 0, 0))
    v0 = "";
  else
    v0 = v5;
  sub_18F270374(&v2, v0);
  if (byte_1ECEDF03F < 0)
    operator delete((void *)xmmword_1ECEDF028);
  result = *(double *)&v2;
  xmmword_1ECEDF028 = v2;
  unk_1ECEDF038 = v3;
  return result;
}

void sub_18F37567C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_1ECEDEF98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDEF98))
  {
    unk_1ECEDF050 = 0;
    xmmword_1ECEDF040 = 0uLL;
    __cxa_atexit(MEMORY[0x1E0DE44D0], &xmmword_1ECEDF040, &dword_18F1DC000);
    __cxa_guard_release(&qword_1ECEDEF98);
  }
  if (qword_1ECEDEFA0 != -1)
    dispatch_once(&qword_1ECEDEFA0, &unk_1E2944F80);
  if (byte_1ECEDF057 < 0)
  {
    sub_18F26F9A4((_BYTE *)a1, (void *)xmmword_1ECEDF040, *((unint64_t *)&xmmword_1ECEDF040 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1ECEDF040;
    *(_QWORD *)(a1 + 16) = unk_1ECEDF050;
  }
}

void sub_18F375750()
{
  std::string *p_p;
  const __CFAllocator *v1;
  CFStringRef v2;
  CFTypeID v3;
  const __CFURL *v4;
  const __CFString *v5;
  __CFBundle *v6;
  __CFBundle *v7;
  const __CFString *ValueForInfoDictionaryKey;
  const __CFString *v9;
  CFTypeID v10;
  std::string __p;

  sub_18F37A14C(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)p_p, 0x8000100u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v2)
  {
    v3 = CFGetTypeID(v2);
    if (v3 == CFStringGetTypeID())
    {
      v4 = CFURLCreateWithFileSystemPath(v1, v2, kCFURLPOSIXPathStyle, 0);
      if (v4)
      {
        v5 = (const __CFString *)v4;
        v6 = CFBundleCreate(v1, v4);
        if (v6)
        {
          v7 = v6;
          ValueForInfoDictionaryKey = (const __CFString *)CFBundleGetValueForInfoDictionaryKey(v6, (CFStringRef)*MEMORY[0x1E0C9AE90]);
          if (ValueForInfoDictionaryKey)
          {
            v9 = ValueForInfoDictionaryKey;
            v10 = CFGetTypeID(ValueForInfoDictionaryKey);
            if (v10 == CFStringGetTypeID())
            {
              sub_18F1ED06C(v9, (uint64_t)&__p);
              if (byte_1ECEDF040[23] < 0)
                operator delete(*(void **)byte_1ECEDF040);
              *(std::string *)byte_1ECEDF040 = __p;
            }
          }
          CFRelease(v2);
          v2 = v5;
        }
        else
        {
          v7 = (__CFBundle *)v5;
        }
        CFRelease(v2);
        v2 = (CFStringRef)v7;
      }
    }
    CFRelease(v2);
  }
}

void sub_18F3758A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F3758C4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_1ECEDEFA8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDEFA8))
  {
    unk_1ECEDF068 = 0;
    xmmword_1ECEDF058 = 0uLL;
    __cxa_atexit(MEMORY[0x1E0DE44D0], &xmmword_1ECEDF058, &dword_18F1DC000);
    __cxa_guard_release(&qword_1ECEDEFA8);
  }
  if (qword_1ECEDEFB0 != -1)
    dispatch_once(&qword_1ECEDEFB0, &unk_1E2955F40);
  if (byte_1ECEDF06F < 0)
  {
    sub_18F26F9A4((_BYTE *)a1, (void *)xmmword_1ECEDF058, *((unint64_t *)&xmmword_1ECEDF058 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1ECEDF058;
    *(_QWORD *)(a1 + 16) = unk_1ECEDF068;
  }
}

uint64_t sub_18F375998()
{
  mach_port_t v0;
  const __CFDictionary *v1;
  uint64_t result;
  io_object_t v3;
  const __CFString *CFProperty;
  const __CFString *v5;
  __int128 v6;
  uint64_t v7;

  v0 = *MEMORY[0x1E0CBBAA8];
  v1 = IOServiceMatching("IOPlatformExpertDevice");
  result = IOServiceGetMatchingService(v0, v1);
  if ((_DWORD)result)
  {
    v3 = result;
    CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(result, CFSTR("IOPlatformSerialNumber"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (CFProperty)
    {
      v5 = CFProperty;
      sub_18F1ED06C(CFProperty, (uint64_t)&v6);
      if (byte_1ECEDF06F < 0)
        operator delete((void *)xmmword_1ECEDF058);
      xmmword_1ECEDF058 = v6;
      unk_1ECEDF068 = v7;
      CFRelease(v5);
    }
    return IOObjectRelease(v3);
  }
  return result;
}

BOOL sub_18F375A50()
{
  if ((MGGetBoolAnswer() & 1) != 0)
    return 1;
  if (qword_1ECEDF008 != -1)
    dispatch_once(&qword_1ECEDF008, &unk_1E29560A0);
  return byte_1ECEDEF58 != 0;
}

uint64_t sub_18F375AB0()
{
  if (qword_1ECEDEFC8 != -1)
    dispatch_once(&qword_1ECEDEFC8, &unk_1E2955FA0);
  return byte_1ECEDEF52;
}

uint64_t sub_18F375AF0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  if (qword_1ECEDEFC0 != -1)
    dispatch_once(&qword_1ECEDEFC0, &unk_1E2955F80);
  if (byte_1ECEDEF51 == 1)
  {
    v5 = (void *)objc_msgSend_processInfo(MEMORY[0x1E0CB3898], a2, a3, a4, a5);
    result = objc_msgSend_isiOSAppOnMac(v5, v6, v7, v8, v9);
  }
  else
  {
    result = 0;
  }
  byte_1ECEDEF52 = result;
  return result;
}

uint64_t sub_18F375B58()
{
  if (qword_1ECEDEFD8 != -1)
    dispatch_once(&qword_1ECEDEFD8, &unk_1E2955FE0);
  return byte_1ECEDEF54;
}

void sub_18F375B98()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  CFTypeID v2;

  v0 = (const __CFBoolean *)MGCopyAnswer();
  if (v0)
  {
    v1 = v0;
    v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1) == 1)
      byte_1ECEDEF54 = 1;
    CFRelease(v1);
  }
}

uint64_t sub_18F375C08()
{
  if (qword_1ECEDEFE0 != -1)
    dispatch_once(&qword_1ECEDEFE0, &unk_1E2956000);
  return byte_1ECEDEF55;
}

void sub_18F375C48()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  CFTypeID v2;
  NSObject *v3;
  char *v4;
  uint8_t buf[1640];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFBoolean *)MGCopyAnswer();
  v1 = v0;
  if (v0)
  {
    v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID())
    {
      byte_1ECEDEF55 = CFBooleanGetValue(v1) != 0;
LABEL_10:
      CFRelease(v1);
      return;
    }
  }
  if (qword_1EE16D988 != -1)
    dispatch_once(&qword_1EE16D988, &unk_1E2956080);
  v3 = qword_1EE16D990;
  if (os_log_type_enabled((os_log_t)qword_1EE16D990, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_FAULT, "unexpected MGCopyAnswer answer", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D988 != -1)
      dispatch_once(&qword_1EE16D988, &unk_1E2956080);
    v4 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "BOOL CLPlatformInfo::supportsCrudeProx()_block_invoke", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  if (v1)
    goto LABEL_10;
}

uint64_t sub_18F375EC4()
{
  uint64_t result;

  if (qword_1ECEDEF68 != -1)
    dispatch_once(&qword_1ECEDEF68, &unk_1E2952F48);
  if (qword_1ECEDEF70 != -1)
    dispatch_once(&qword_1ECEDEF70, &unk_1E2944F60);
  result = 1;
  if (((dword_1ECEDEF5C - 139) > 0x2D
     || ((1 << (dword_1ECEDEF5C + 117)) & 0x3FFFE000001DLL) == 0)
    && (dword_1ECEDEF5C - 217) >= 7
    && (dword_1ECEDEF5C - 78) >= 3)
  {
    return 0;
  }
  return result;
}

uint64_t sub_18F375F70()
{
  if (qword_1ECEDEFB8 != -1)
    dispatch_once(&qword_1ECEDEFB8, &unk_1E2955F60);
  if ((byte_1ECEDEF50 & 1) != 0)
    return 1;
  if (qword_1ECEDEFF8 != -1)
    dispatch_once(&qword_1ECEDEFF8, &unk_1E2956060);
  return BYTE2(qword_1ECEDF000) >> 7;
}

uint64_t sub_18F375FF0()
{
  if (qword_1ECEDEFE8 != -1)
    dispatch_once(&qword_1ECEDEFE8, &unk_1E2956020);
  return byte_1ECEDEF56;
}

uint64_t sub_18F376030(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v5 = (void *)objc_msgSend_processInfo(MEMORY[0x1E0CB3898], a2, a3, a4, a5);
  v10 = (void *)objc_msgSend_processName(v5, v6, v7, v8, v9);
  result = objc_msgSend_compare_(v10, v11, (uint64_t)CFSTR("locationd"), v12, v13);
  byte_1ECEDEF56 = result == 0;
  return result;
}

void sub_18F37647C(uint64_t a1, const char *a2)
{
  void *v2;
  io_service_t MatchingService;
  NSObject *v4;
  char *v5;
  uint8_t buf[1640];
  const __CFString *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v7 = CFSTR("IOPropertyMatch");
  v8[0] = &unk_1E298C050;
  v2 = (void *)objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v8, (uint64_t)&v7, 1);
  MatchingService = IOServiceGetMatchingService(*MEMORY[0x1E0CBBAA8], (CFDictionaryRef)v2);
  if (MatchingService)
  {
    byte_1ECEDEF57 = 1;
    IOObjectRelease(MatchingService);
  }
  else
  {
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E29560C0);
    v4 = qword_1EE16D6D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEFAULT, "Compass service missing", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E29560C0);
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "static BOOL CLPlatformInfo::supportsCompass()_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
}

uint64_t sub_18F376ACC()
{
  if (qword_1ECEDEFD0 != -1)
    dispatch_once(&qword_1ECEDEFD0, &unk_1E2955FC0);
  return 0;
}

BOOL sub_18F376B08()
{
  if (qword_1ECEDEF70 != -1)
    dispatch_once(&qword_1ECEDEF70, &unk_1E2944F60);
  return dword_1ECEDEF5C == 196;
}

os_log_t sub_18F376B50()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Utility", "Utility");
  qword_1EE16D990 = (uint64_t)result;
  return result;
}

void sub_18F376B7C()
{
  void *v0;
  const __CFString *v1;
  CFPropertyListRef v2;
  const void *v3;
  CFTypeID v4;
  CFPropertyListRef v5;
  const void *v6;
  CFTypeID v7;
  int valuePtr;

  v0 = (void *)MEMORY[0x194001B4C]();
  byte_1ECEDEF58 = 0;
  v1 = (const __CFString *)*MEMORY[0x1E0C9B230];
  v2 = CFPreferencesCopyValue(CFSTR("StoreDemoMode"), CFSTR("com.apple.demo-settings"), CFSTR("mobile"), (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (v2)
  {
    v3 = v2;
    CFAutorelease(v2);
    v4 = CFGetTypeID(v3);
    if (v4 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue((CFBooleanRef)v3))
      {
        v5 = CFPreferencesCopyValue(CFSTR("FProgramNumber"), CFSTR("com.apple.demo-settings"), CFSTR("mobile"), v1);
        if (v5)
        {
          v6 = v5;
          CFAutorelease(v5);
          v7 = CFGetTypeID(v6);
          if (v7 == CFNumberGetTypeID())
          {
            valuePtr = 0;
            if (CFNumberGetValue((CFNumberRef)v6, kCFNumberIntType, &valuePtr))
              byte_1ECEDEF58 = valuePtr == 5;
          }
        }
      }
    }
  }
  objc_autoreleasePoolPop(v0);
}

os_log_t sub_18F376C8C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Sensors");
  qword_1EE16D6D0 = (uint64_t)result;
  return result;
}

os_log_t sub_18F37952C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Swimming");
  qword_1EE16D800 = (uint64_t)result;
  return result;
}

void sub_18F379558()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  CFTypeRef arg;

  v0 = operator new();
  sub_18F20CC1C((char *)v0, CFSTR("com.apple.locationd"), 0);
  *(_QWORD *)v0 = &off_1E294A078;
  *(_QWORD *)(v0 + 136) = 0;
  *(_QWORD *)(v0 + 144) = 0;
  qword_1EE16E8D8 = v0;
  arg = 0;
  if (sub_18F1EEE9C(v0, CFSTR("KnownClients"), (uint64_t *)&arg, -1))
  {
    if (arg)
      CFAutorelease(arg);
    (*(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)qword_1EE16E8D8 + 880))(qword_1EE16E8D8, CFSTR("KnownClients"), 0xFFFFFFFFLL);
  }
  v1 = qword_1EE16E8D8;
  v2 = (_QWORD *)operator new();
  *v2 = &off_1E29527D8;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = v1;
  v3 = *(std::__shared_weak_count **)(v1 + 144);
  *(_QWORD *)(v1 + 136) = v1;
  *(_QWORD *)(v1 + 144) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_18F379674(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_rethrow();
}

void sub_18F379680(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_18F3796B4(_QWORD *a1@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  if (qword_1EE16E8D0 != -1)
    dispatch_once_f(&qword_1EE16E8D0, 0, (dispatch_function_t)sub_18F379558);
  v2 = *(_QWORD *)(qword_1EE16E8D8 + 144);
  *a1 = *(_QWORD *)(qword_1EE16E8D8 + 136);
  a1[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
}

_QWORD *sub_18F379724(_QWORD *a1)
{
  *a1 = &off_1E294A078;
  sub_18F2A8438((uint64_t)(a1 + 17));
  return sub_18F387C84((uint64_t)a1);
}

void sub_18F379754(_QWORD *a1)
{
  *a1 = &off_1E294A078;
  sub_18F2A8438((uint64_t)(a1 + 17));
  sub_18F387C84((uint64_t)a1);
  JUMPOUT(0x194001438);
}

void sub_18F37979C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3797C4(uint64_t a1, uint64_t a2)
{
  if (sub_18F2AB00C(a2, (uint64_t)&unk_1E2945F68))
    return a1 + 24;
  else
    return 0;
}

void sub_18F379D5C(int a1@<W0>, std::string *a2@<X8>)
{
  const std::string::value_type *v4;
  std::string::size_type v5;
  std::string *v6;
  NSObject *v7;
  std::string *v8;
  NSObject *v9;
  void *__p[2];
  char v11;
  std::string v12;
  void *v13[2];
  unsigned __int8 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1 == 3)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954E48);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_DEFAULT))
    {
      v12.__r_.__value_.__r.__words[0] = 0x304020100;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_DEFAULT, "no mutable store path for type, %{public}d", (uint8_t *)&v12, 8u);
    }
    if (!sub_18F1FCA08(115, 2))
      goto LABEL_28;
    bzero(&v12, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954E48);
    v13[0] = (void *)0x304020100;
    v8 = (std::string *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "static std::string CLPersistentStore::getMutableStorePath(CLPersistentStoreType)", "CoreLocation: %s\n", (const char *)v8);
    goto LABEL_33;
  }
  if (a1)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954E48);
    v9 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v12.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(v12.__r_.__value_.__r.__words[0]) = a1;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "could not get mutable store path for type, %{public}d", (uint8_t *)&v12, 8u);
    }
    if (!sub_18F1FCA08(115, 0))
      goto LABEL_28;
    bzero(&v12, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954E48);
    LODWORD(v13[0]) = 67240192;
    HIDWORD(v13[0]) = a1;
    v8 = (std::string *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "static std::string CLPersistentStore::getMutableStorePath(CLPersistentStoreType)", "CoreLocation: %s\n", (const char *)v8);
LABEL_33:
    if (v8 != &v12)
      free(v8);
LABEL_28:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  sub_18F270374(__p, "root");
  sub_18F1E9118((uint64_t)__p, &v12);
  sub_18F270374(v13, "/Library/Caches/locationd/");
  if ((v14 & 0x80u) == 0)
    v4 = (const std::string::value_type *)v13;
  else
    v4 = (const std::string::value_type *)v13[0];
  if ((v14 & 0x80u) == 0)
    v5 = v14;
  else
    v5 = (std::string::size_type)v13[1];
  v6 = std::string::append(&v12, v4, v5);
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_18F37A0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 57) < 0)
    operator delete(*(void **)(v23 - 80));
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_18F37A14C(std::string *a1@<X8>)
{
  std::string *v2;
  std::string v3;

  sub_18F20C024(&v3);
  v2 = std::string::append(&v3, "/System/Library/Frameworks/CoreLocation.framework");
  *a1 = *v2;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
}

void sub_18F37A1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F37B2CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 - 49) < 0)
    operator delete(*(void **)(v2 - 72));
  MEMORY[0x194001438](v1, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

uint64_t sub_18F37B308(uint64_t a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  NSSet *v19;
  uint64_t v20;
  uint64_t DictionaryOfClasses;

  v4 = (void *)MEMORY[0x1E0CB3940];
  v5 = CLConnectionMessage::name(*a2);
  if (*(char *)(v5 + 23) >= 0)
    v9 = objc_msgSend_stringWithUTF8String_(v4, v6, v5, v7, v8);
  else
    v9 = objc_msgSend_stringWithUTF8String_(v4, v6, *(_QWORD *)v5, v7, v8);
  v10 = v9;
  v11 = (void *)MEMORY[0x1E0C99E60];
  v12 = objc_opt_class();
  v13 = objc_opt_class();
  v14 = objc_opt_class();
  v15 = objc_opt_class();
  v19 = (NSSet *)objc_msgSend_setWithObjects_(v11, v16, v12, v17, v18, v13, v14, v15, 0);
  if (*a2)
    DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v19);
  else
    DictionaryOfClasses = 0;
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleDaemonMessage_data_, v10, DictionaryOfClasses, v20);
}

void sub_18F37B3EC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D8B8 != -1)
    dispatch_once(&qword_1EE16D8B8, &unk_1E2952FA8);
  v2 = qword_1EE16D8C0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D8C0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4[0] = 68289283;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 2049;
    v8 = v3;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client connection interrupt\", \"self\":\"%{private}p\"}", (uint8_t *)v4, 0x1Cu);
  }
}

void sub_18F37B5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F37BA98(uint64_t a1)
{
  uint64_t result;
  id Weak;
  id v4;
  uint64_t v5;

  objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 32));
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 32));
    v4 = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 40));
    return MEMORY[0x1E0DE7D20](Weak, sel_distributedSensingManager_didFailToSubscribeToVehicleState_, v4, *(_QWORD *)(a1 + 40), v5);
  }
  return result;
}

uint64_t sub_18F37BB04(uint64_t a1)
{
  uint64_t result;
  id Weak;
  id v4;
  uint64_t v5;

  objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 32));
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 32));
    v4 = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 40));
    return MEMORY[0x1E0DE7D20](Weak, sel_distributedSensingManager_didUpdateVehicleState_, v4, *(_QWORD *)(a1 + 40), v5);
  }
  return result;
}

void sub_18F37BBC8(uint64_t a1)
{
  const char *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD v11[6];
  void *__p;
  std::__shared_weak_count *v13;
  char v14;
  const __CFString *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
  {
    sub_18F270374(&__p, "DistributedSensing/kCLConnectionMessageDistributedSensingVehicleStateUpdate");
    v11[1] = MEMORY[0x1E0C809B0];
    v11[2] = 3221225472;
    v11[3] = sub_18F37BDA8;
    v11[4] = &unk_1E2955DD8;
    v11[5] = *(_QWORD *)(a1 + 32);
    CLConnectionClient::setHandlerForMessage();
    if (v14 < 0)
      operator delete(__p);
    v15 = CFSTR("kCLConnectionMessageSubscribeKey");
    v16[0] = MEMORY[0x1E0C9AAB0];
    v11[0] = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v2, (uint64_t)v16, (uint64_t)&v15, 1);
    sub_18F37C348(&__p, v11);
    v10 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v10)
    {
      v5 = (unint64_t *)&v10->__shared_owners_;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v7 = v13;
    if (v13)
    {
      v8 = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_18F37BD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_18F2A8438((uint64_t)&a9);
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_18F37BDA8(uint64_t a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  NSSet *v11;
  uint64_t DictionaryOfClasses;
  uint64_t v13;

  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v11 = (NSSet *)objc_msgSend_setWithObjects_(v4, v8, v5, v9, v10, v6, v7, 0);
  DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v11);
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleDaemonMessage_data_, CFSTR("DistributedSensing/kCLConnectionMessageDistributedSensingVehicleStateUpdate"), DictionaryOfClasses, v13);
}

void sub_18F37BE9C(uint64_t a1)
{
  const char *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD v11[6];
  void *__p;
  std::__shared_weak_count *v13;
  char v14;
  const __CFString *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
  {
    sub_18F270374(&__p, "DistributedSensing/kCLConnectionMessageDistributedSensingVehicleStateUpdate");
    v11[1] = MEMORY[0x1E0C809B0];
    v11[2] = 3221225472;
    v11[3] = sub_18F37C07C;
    v11[4] = &unk_1E2955DD8;
    v11[5] = *(_QWORD *)(a1 + 32);
    CLConnectionClient::setHandlerForMessage();
    if (v14 < 0)
      operator delete(__p);
    v15 = CFSTR("kCLConnectionMessageSubscribeKey");
    v16[0] = MEMORY[0x1E0C9AAA0];
    v11[0] = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v2, (uint64_t)v16, (uint64_t)&v15, 1);
    sub_18F37C348(&__p, v11);
    v10 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v10)
    {
      v5 = (unint64_t *)&v10->__shared_owners_;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v7 = v13;
    if (v13)
    {
      v8 = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_18F37C040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_18F2A8438((uint64_t)&a9);
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_18F37C07C(uint64_t a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  NSSet *v11;
  uint64_t DictionaryOfClasses;
  uint64_t v13;

  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v11 = (NSSet *)objc_msgSend_setWithObjects_(v4, v8, v5, v9, v10, v6, v7, 0);
  DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v11);
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__handleDaemonMessage_data_, CFSTR("DistributedSensing/kCLConnectionMessageDistributedSensingVehicleStateUpdate"), DictionaryOfClasses, v13);
}

void sub_18F37C21C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F37C274;
  block[3] = &unk_1E2955938;
  block[4] = v1;
  dispatch_sync(v2, block);
}

uint64_t sub_18F37C274(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend__teardown(*(void **)(a1 + 32), a2, a3, a4, a5);
}

os_log_t sub_18F37C31C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "DistributedSensing");
  qword_1EE16D8C0 = (uint64_t)result;
  return result;
}

void sub_18F37C348(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  void *__p[2];
  char v6;

  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2952688;
  sub_18F270374(__p, "DistributedSensing/kCLConnectionMessageDistributedSensingVehicleStateUpdate");
  MEMORY[0x19400103C](v4 + 3, __p, *a2);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_18F37C3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_18F37C914(uint64_t a1)
{
  unint64_t v2;
  _DWORD *v3;
  _OWORD v5[20];
  int v6;

  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_QWORD *)(a1 + 36) = 0x3F80000000000000;
  sub_18F1FFE94((float32x4_t *)(a1 + 28), (float32x4_t)0);
  *(_OWORD *)(a1 + 44) = xmmword_18F505C20;
  sub_18F1FFE94((float32x4_t *)(a1 + 44), (float32x4_t)xmmword_18F505C20);
  v2 = 0;
  *(_QWORD *)(a1 + 64) = 0xA000000000;
  *(_QWORD *)(a1 + 10320) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 10328) = 0;
  *(_QWORD *)(a1 + 1352) = 0xA000000000;
  *(_OWORD *)(a1 + 10336) = 0u;
  *(_QWORD *)(a1 + 10360) = 0x200000000;
  *(_QWORD *)(a1 + 10384) = 0x200000000;
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  do
  {
    if (v2 > 2)
    {
      v3 = (_DWORD *)sub_18F37CA6C((uint64_t)v5, v2, v2);
      if (v2 > 5)
        *v3 = 952607315;
      else
        *v3 = 980151802;
    }
    else
    {
      *(_DWORD *)sub_18F37CA6C((uint64_t)v5, v2, v2) = 944879383;
    }
    ++v2;
  }
  while (v2 != 9);
  sub_18F37CDC8(a1 + 10668, (uint64_t)v5);
  return a1;
}

uint64_t sub_18F37CA6C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  char *v8;
  NSObject *v9;
  char *v10;
  uint8_t buf[4];
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a2;
      v13 = 2048;
      v14 = 9;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 77,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T &CMMatrix<float, 9>::operator()(size_t, size_t) [T = float, M = 9, N = 9]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  if (a3 >= 9)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v9 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a3;
      v13 = 2048;
      v14 = 9;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 78,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T &CMMatrix<float, 9>::operator()(size_t, size_t) [T = float, M = 9, N = 9]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  return a1 + 4 * (9 * a3 + a2);
}

uint64_t sub_18F37CDC8(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  unint64_t v14;
  float v15;
  float v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  unint64_t v20;
  float v21;
  float v22;
  float v23;
  NSObject *v24;
  uint64_t result;
  char *v26;
  uint8_t buf[4];
  unint64_t v28;
  uint64_t v29;

  v4 = 0;
  v5 = 0;
  v29 = *MEMORY[0x1E0C80C00];
  while (2)
  {
    v6 = v5++;
    v7 = v5;
    do
    {
      v8 = sub_18F382B10(a2, v6, v7);
      v9 = v8 - sub_18F382B10(a2, v7, v6);
      if (v9 <= 0.0)
        v9 = -v9;
      if (v9 > 1.0e-16)
      {
        if (v4)
          goto LABEL_10;
        return 0;
      }
      ++v7;
    }
    while (v7 != 9);
    v4 = v6 > 6;
    if (v5 != 8)
      continue;
    break;
  }
LABEL_10:
  v10 = 9;
  v11 = 8;
  while (1)
  {
    v12 = v11;
    v13 = sub_18F382B10(a2, v11, v11);
    v14 = v10;
    if (v10 <= 8)
    {
      do
      {
        v15 = *(float *)sub_18F382E6C(a1 + 36, v12, v14);
        v16 = *(float *)sub_18F382E6C(a1 + 36, v12, v14);
        v13 = v13 + (float)((float)-(float)(v15 * v16) * *(float *)sub_18F3831C4(a1, v14++));
      }
      while (v14 != 9);
    }
    *(float *)sub_18F3831C4(a1, v12) = v13;
    if (*(float *)sub_18F3831C4(a1, v12) <= 0.0)
      break;
    if (!v12)
      return 1;
    v17 = v10 - 2;
    do
    {
      v18 = v17;
      v19 = sub_18F382B10(a2, v17, v12);
      v20 = v10;
      if (v10 <= 8)
      {
        do
        {
          v21 = *(float *)sub_18F382E6C(a1 + 36, v18, v20);
          v22 = *(float *)sub_18F382E6C(a1 + 36, v12, v20);
          v19 = v19 + (float)((float)-(float)(v21 * v22) * *(float *)sub_18F3831C4(a1, v20++));
        }
        while (v20 != 9);
      }
      v23 = v19 / *(float *)sub_18F3831C4(a1, v12);
      *(float *)sub_18F382E6C(a1 + 36, v18, v12) = v23;
      v17 = v18 - 1;
    }
    while (v18);
    v11 = v12 - 1;
    v10 = v12;
  }
  if (qword_1ECEDEE88 != -1)
    dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
  v24 = off_1ECEDEE80;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v28 = v12;
    _os_log_impl(&dword_18F1DC000, v24, OS_LOG_TYPE_DEBUG, "D(%zu) <= 0 non-positive definite matrix!", buf, 0xCu);
  }
  result = sub_18F1FCA08(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v26 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "BOOL CMFactoredMatrix<float, 9>::factor(const CMMatrix<T, N, N> &) [T = float, N = 9]", "CoreLocation: %s\n", v26);
    if (v26 != (char *)buf)
      free(v26);
    return 0;
  }
  return result;
}

double sub_18F37D168(uint64_t a1)
{
  double result;
  _BYTE v3[24];
  float32x4_t v4;

  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 1352) = 0;
  *(_DWORD *)(a1 + 10360) = 0;
  *(_DWORD *)(a1 + 10384) = 0;
  *(_OWORD *)v3 = 0u;
  *(_QWORD *)&v3[16] = 0x3F80000000000000;
  sub_18F1FFE94((float32x4_t *)&v3[8], (float32x4_t)0);
  v4 = (float32x4_t)xmmword_18F505C20;
  sub_18F1FFE94(&v4, (float32x4_t)xmmword_18F505C20);
  *(_OWORD *)(a1 + 4) = 0u;
  *(_QWORD *)(a1 + 20) = *(_QWORD *)v3;
  *(_OWORD *)(a1 + 28) = *(_OWORD *)&v3[8];
  *(float32x4_t *)(a1 + 44) = v4;
  *(_BYTE *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 10336) = 0u;
  return result;
}

double sub_18F37D1F8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  float *v8;
  float v9;
  float *v10;
  int v11;
  float32x4_t v12;
  double result;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  int v17;

  v4 = 0;
  v5 = a1 + 4;
  v6 = a1 + 16;
  do
  {
    v7 = sub_18F37D2D4(a2, v4);
    v8 = (float *)sub_18F33D3D0(v5, v4);
    *v8 = v7 + *v8;
    v9 = sub_18F37D2D4(a2, v4 + 3);
    v10 = (float *)sub_18F33D3D0(v6, v4);
    *v10 = v9 + *v10;
    ++v4;
  }
  while (v4 != 3);
  v11 = *(_DWORD *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = v11;
  *(double *)v12.i64 = sub_18F3D3AA8(&v15, (float *)&v16);
  sub_18F3D3764((uint64_t)&v15, (float *)(a1 + 28), &v14, v12);
  result = *(double *)v14.i64;
  *(float32x4_t *)(a1 + 28) = v14;
  return result;
}

float sub_18F37D2D4(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v8 = a2;
      v9 = 2048;
      v10 = 9;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMVector.h, line 271,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMVector<float, 9>::operator[](const size_t) const [T = float, N = 9]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return *(float *)(a1 + 4 * a2);
}

void sub_18F37D4AC(uint64_t a1, float32x2_t *a2, float *a3, uint64_t a4, int32x2_t a5, float a6)
{
  float v8;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float32x2_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  unint64_t v24;
  unint64_t i;
  float v26;
  float v27;
  NSObject *v28;
  char *v29;
  int32x2_t v30;
  _BYTE v31[36];
  _DWORD v32[3];
  __int128 v33;
  __int128 v34;
  int v35;
  _OWORD v36[2];
  int v37;
  float32x2_t v38;
  float v39;
  _OWORD buf[102];
  uint64_t v41;

  v8 = *(float *)a5.i32;
  v10 = 0;
  v41 = *MEMORY[0x1E0C80C00];
  v11 = 0.0;
  do
  {
    v11 = v11 + (float)(a2->f32[v10] * a2->f32[v10]);
    ++v10;
  }
  while (v10 != 3);
  if (sqrtf(v11) <= 0.000001)
    goto LABEL_22;
  v12 = 0;
  v13 = 0.0;
  do
  {
    v13 = v13 + (float)(a3[v12] * a3[v12]);
    ++v12;
  }
  while (v12 != 3);
  if (sqrtf(v13) <= 0.000001)
  {
LABEL_22:
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
    v28 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_18F1DC000, v28, OS_LOG_TYPE_ERROR, "[CMRelDMSensorFusionMekf] Unexpected 0 accel magnitude.", (uint8_t *)buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
      LOWORD(v36[0]) = 0;
      v29 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CMRelDMSensorFusionMekf::relativeGravityUpdate(const CMVector3d &, const CMVector3d &, float, float, uint64_t, BOOL)", "CoreLocation: %s\n", v29);
      if (v29 != (char *)buf)
        free(v29);
    }
  }
  else
  {
    v14 = 0;
    a5.i32[0] = 0;
    do
    {
      *(float *)a5.i32 = *(float *)a5.i32 + (float)(a2->f32[v14] * a2->f32[v14]);
      ++v14;
    }
    while (v14 != 3);
    v15 = 0;
    v16 = *a2;
    v17 = 0.0;
    do
    {
      v17 = v17 + (float)(a3[v15] * a3[v15]);
      ++v15;
    }
    while (v15 != 3);
    *(float *)a5.i32 = sqrtf(*(float *)a5.i32);
    v30 = a5;
    v18 = a2[1].f32[0] / *(float *)a5.i32;
    v19 = sqrtf(v17);
    v20 = sub_18F3D39F4((float *)(a1 + 28), *a3 / v19, a3[1] / v19, a3[2] / v19);
    v21 = 0;
    v38 = vsub_f32(vdiv_f32(v16, (float32x2_t)vdup_lane_s32(v30, 0)), (float32x2_t)__PAIR64__(LODWORD(v22), LODWORD(v20)));
    v39 = v18 - v23;
    memset(buf, 0, 108);
    LODWORD(v33) = 0;
    *((float *)&v33 + 1) = v23;
    *((float *)&v33 + 2) = -v22;
    *((float *)&v33 + 3) = -v23;
    LODWORD(v34) = 0;
    *(_QWORD *)((char *)&v34 + 4) = __PAIR64__(LODWORD(v22), LODWORD(v20));
    *((float *)&v34 + 3) = -v20;
    v35 = 0;
    do
    {
      *(float *)((char *)&v33 + v21) = *(float *)((char *)&v33 + v21) + *(float *)((char *)&v33 + v21);
      v21 += 4;
    }
    while (v21 != 36);
    v24 = 0;
    v36[0] = v33;
    v36[1] = v34;
    v37 = v35;
    do
    {
      for (i = 0; i != 3; ++i)
      {
        v26 = sub_18F37D890((uint64_t)v36, v24, i);
        *(float *)sub_18F37DBEC((uint64_t)buf, v24, i + 6) = v26;
      }
      ++v24;
    }
    while (v24 != 3);
    if (v8 == 0.0)
      v8 = (float)(unint64_t)(a4 - *(_QWORD *)(a1 + 10352)) * 0.000001;
    v27 = (float)((float)(0.0000009617 / v8) + 0.021638) + (float)((float)(0.0000009617 / v8) + 0.021638);
    if (v27 < a6)
      v27 = a6;
    *(float *)v32 = v27;
    *(float *)&v32[1] = v27;
    *(float *)&v32[2] = v27;
    sub_18F37DF48((uint64_t)v31, (float *)(a1 + 10488), (uint64_t)buf, (uint64_t)v32, (uint64_t)&v38);
    sub_18F37D1F8(a1, (uint64_t)v31);
    *(_QWORD *)(a1 + 10352) = a4;
  }
}

float sub_18F37D890(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  char *v8;
  NSObject *v9;
  char *v10;
  uint8_t buf[4];
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 3)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a2;
      v13 = 2048;
      v14 = 3;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 70,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMMatrix<float, 3>::operator()(size_t, size_t) const [T = float, M = 3, N = 3]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  if (a3 >= 3)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v9 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a3;
      v13 = 2048;
      v14 = 3;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 71,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMMatrix<float, 3>::operator()(size_t, size_t) const [T = float, M = 3, N = 3]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  return *(float *)(a1 + 4 * (3 * a3 + a2));
}

uint64_t sub_18F37DBEC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  char *v8;
  NSObject *v9;
  char *v10;
  uint8_t buf[4];
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 3)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a2;
      v13 = 2048;
      v14 = 3;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 77,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T &CMMatrix<float, 3, 9>::operator()(size_t, size_t) [T = float, M = 3, N = 9]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  if (a3 >= 9)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v9 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a3;
      v13 = 2048;
      v14 = 9;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 78,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T &CMMatrix<float, 3, 9>::operator()(size_t, size_t) [T = float, M = 3, N = 9]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  return a1 + 4 * (3 * a3 + a2);
}

void sub_18F37DF48(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  unint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  unint64_t v18;
  float v19;
  float v20;
  float v21;
  float *v22;
  unint64_t v23;
  float v24;
  float v25;
  float *v26;
  float v27;
  unint64_t v28;
  float v29;
  float v30;
  float *v31;
  __int128 v32;
  NSObject *v33;
  NSObject *v34;
  char *v35;
  __int128 v38;
  __int128 v39;
  int v40;
  int v41;
  unint64_t v42;
  uint8_t buf[4];
  unint64_t v44;
  float v45[9];
  float v46[9];
  uint64_t v47;

  v8 = 0;
  v47 = *MEMORY[0x1E0C80C00];
  v9 = (uint64_t)(a2 + 9);
  v40 = 0;
  v38 = 0u;
  v39 = 0u;
LABEL_2:
  v10 = 0;
  v11 = -1;
  do
  {
    v12 = sub_18F38339C(a3, v8, v10);
    v13 = v11;
    if (v10)
    {
      do
      {
        v14 = sub_18F38339C(a3, v8, v13);
        v12 = v12 + (float)(v14 * *(float *)sub_18F382E6C(v9, v13--, v10));
      }
      while (v13 != -1);
    }
    v46[v10] = v12;
    v45[v10] = v12 * *(float *)sub_18F3831C4((uint64_t)a2, v10);
    ++v10;
    ++v11;
  }
  while (v10 != 9);
  v15 = sub_18F3551B0(a4, v8);
  v16 = v15 + (float)(v46[0] * v45[0]);
  if (v16 <= 0.0)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v34 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v44 = v8;
      _os_log_impl(&dword_18F1DC000, v34, OS_LOG_TYPE_DEBUG, "%zu: alpha <= 0, matrix ! positive definite", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v41 = 134217984;
      v42 = v8;
LABEL_33:
      v35 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "CMVector<T, N> CMFactoredMatrix<float, 9>::biermanObservationalUpdate(const CMMatrix<T, P, N> &, const CMVector<T, P> &, const CMVector<T, P> &) [T = float, N = 9, P = 3UL]", "CoreLocation: %s\n", v35);
      if (v35 != (char *)buf)
        free(v35);
    }
  }
  else
  {
    v17 = 1.0 / v16;
    *a2 = *a2 * (float)((float)(1.0 / v16) * sub_18F3551B0(a4, v8));
    v18 = 1;
    while (1)
    {
      v19 = v46[v18];
      v20 = v16 + (float)(v19 * v45[v18]);
      if (v20 <= 0.0)
        break;
      v21 = -(float)(v19 * v17);
      v17 = 1.0 / v20;
      v22 = (float *)sub_18F3831C4((uint64_t)a2, v18);
      v23 = 0;
      *v22 = (float)(v16 * (float)(1.0 / v20)) * *v22;
      do
      {
        v24 = *(float *)sub_18F382E6C(v9, v23, v18);
        v25 = v45[v23];
        v26 = (float *)sub_18F382E6C(v9, v23, v18);
        v27 = v45[v18];
        *v26 = v24 + (float)(v25 * v21);
        v45[v23++] = v25 + (float)(v27 * v24);
      }
      while (v18 != v23);
      ++v18;
      v16 = v20;
      if (v18 == 9)
      {
        v28 = 0;
        v29 = v17 * sub_18F3551B0(a5, v8);
        do
        {
          v30 = v45[v28];
          v31 = (float *)sub_18F3836F8((uint64_t)&v38, v28);
          *v31 = *v31 + (float)(v29 * v30);
          ++v28;
        }
        while (v28 != 9);
        if (++v8 == 3)
        {
          v32 = v39;
          *(_OWORD *)a1 = v38;
          *(_OWORD *)(a1 + 16) = v32;
          *(_DWORD *)(a1 + 32) = v40;
          return;
        }
        goto LABEL_2;
      }
    }
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v33 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v44 = v8;
      _os_log_impl(&dword_18F1DC000, v33, OS_LOG_TYPE_DEBUG, "%zu: alpha <= 0, matrix ! positive definite", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v41 = 134217984;
      v42 = v8;
      goto LABEL_33;
    }
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
}

void sub_18F37E408(uint64_t a1, float a2, float a3)
{
  uint64_t v6;
  unint64_t v7;
  float v8;
  _BYTE v9[36];
  _DWORD v10[3];
  _OWORD v11[7];
  uint64_t v12;
  int v13;

  v6 = 0;
  *(_QWORD *)&v11[0] = *(_QWORD *)(a1 + 16);
  DWORD2(v11[0]) = *(_DWORD *)(a1 + 24);
  do
  {
    *(float *)((char *)v11 + v6) = -*(float *)((char *)v11 + v6);
    v6 += 4;
  }
  while (v6 != 12);
  v7 = 0;
  v12 = *(_QWORD *)&v11[0];
  v13 = DWORD2(v11[0]);
  memset(v11, 0, 108);
  do
  {
    *(_DWORD *)sub_18F37DBEC((uint64_t)v11, v7, v7 + 3) = 1065353216;
    ++v7;
  }
  while (v7 != 3);
  v8 = (float)((float)((float)(a2 * 0.021638) * a2) + (float)(a2 * 0.0000009617))
     + (float)((float)((float)(a2 * 0.021638) * a2) + (float)(a2 * 0.0000009617));
  if (v8 <= (float)((float)(a2 * a3) * a2))
    v8 = (float)(a2 * a3) * a2;
  *(float *)v10 = v8;
  *(float *)&v10[1] = v8;
  *(float *)&v10[2] = v8;
  sub_18F37DF48((uint64_t)v9, (float *)(a1 + 10488), (uint64_t)v11, (uint64_t)v10, (uint64_t)&v12);
  sub_18F37D1F8(a1, (uint64_t)v9);
}

uint64_t sub_18F37E520(uint64_t a1, float32x2_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  _OWORD *v10;
  __int32 v11;
  unsigned int v12;
  float32x4_t v13;
  unint64_t i;
  float v15;
  float v16;
  float v17;
  float v18;
  __int32 v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  float v39;
  __int128 v40;
  uint64_t result;
  uint64_t v42;
  char *v43;
  _DWORD v44[3];
  float v45;
  float v46;
  float v47;
  _DWORD v48[3];
  float32x4_t v49;
  float v50;
  float v51;
  float v52;
  float32x4_t v53;
  _OWORD v54[13];
  uint64_t v55;
  _BYTE v56[24];
  _BYTE v57[12];
  _DWORD v58[9];
  _BYTE buf[32];
  int v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v55 = 0;
  memset(v54, 0, sizeof(v54));
  v10 = (_OWORD *)(a1 + 28);
  v11 = a2[4].i32[1];
  *(float *)&v12 = -a2[4].f32[0];
  *(float32x2_t *)buf = vneg_f32(a2[3]);
  *(_DWORD *)&buf[8] = v12;
  *(_DWORD *)&buf[12] = v11;
  v13 = sub_18F1FFE94((float32x4_t *)buf, (float32x4_t)v12);
  sub_18F3D3764((uint64_t)v10, (float *)buf, &v53, v13);
  for (i = 0; i != 3; ++i)
  {
    v15 = sub_18F3551B0(a3 + 20, i);
    v16 = v15 - sub_18F3551B0((uint64_t)a2, i);
    *(float *)sub_18F33D3D0((uint64_t)&v50, i) = v16;
    *(_DWORD *)sub_18F37EBFC((uint64_t)v54, i, i) = 1065353216;
    *(_DWORD *)sub_18F37EBFC((uint64_t)v54, i + 3, i + 6) = 1065353216;
  }
  v50 = sub_18F3D39F4(v53.f32, v50, v51, v52);
  v51 = v17;
  v52 = v18;
  v19 = a2[4].i32[1];
  v20.f32[0] = -a2[4].f32[0];
  *(float32x2_t *)buf = vneg_f32(a2[3]);
  *(_DWORD *)&buf[8] = v20.i32[0];
  *(_DWORD *)&buf[12] = v19;
  v21 = sub_18F1FFE94((float32x4_t *)buf, v20);
  *(double *)v22.i64 = sub_18F3D3764(a3, (float *)buf, &v49, v21);
  *(double *)v23.i64 = sub_18F3D3764((uint64_t)&v53, v49.f32, (float32x4_t *)buf, v22);
  v23.f32[0] = -v53.f32[2];
  *(float32x2_t *)v57 = vneg_f32(*(float32x2_t *)v53.f32);
  *(float *)&v57[8] = -v53.f32[2];
  v58[0] = v53.i32[3];
  v24 = sub_18F1FFE94((float32x4_t *)v57, v23);
  sub_18F3D3764((uint64_t)buf, (float *)v57, &v49, v24);
  v25 = 0;
  v48[0] = sub_18F3D3B4C(&v49);
  v48[1] = v26;
  v48[2] = v27;
  do
  {
    v28 = *(_DWORD *)sub_18F33D3D0((uint64_t)&v50, v25);
    *(_DWORD *)sub_18F37EF58((uint64_t)v56, v25) = v28;
    v29 = sub_18F3551B0((uint64_t)v48, v25);
    *(float *)sub_18F37EF58((uint64_t)v56, v25 + 3) = v29;
    ++v25;
  }
  while (v25 != 3);
  v30 = 0;
  v31 = 0.0;
  do
  {
    v31 = v31 + (float)(*(float *)((char *)&v50 + v30) * *(float *)((char *)&v50 + v30));
    v30 += 4;
  }
  while (v30 != 12);
  if (sqrtf(v31) > 0.04)
    goto LABEL_11;
  v32 = 0;
  v33 = 0.0;
  do
  {
    v33 = v33 + (float)(*(float *)&v48[v32] * *(float *)&v48[v32]);
    ++v32;
  }
  while (v32 != 3);
  if ((float)(sqrtf(v33) * 57.296) <= 4.0)
  {
    *(_QWORD *)(a1 + 10344) = a5;
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
    v37 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
    {
      v38 = *(_QWORD *)(a1 + 10344);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v38;
      _os_log_impl(&dword_18F1DC000, v37, OS_LOG_TYPE_DEFAULT, "[CMRelDMSensorFusionMekf] Converged to anchor, fLastConvergedToAnchorTimestamp: %llu ... .", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
      v42 = *(_QWORD *)(a1 + 10344);
      *(_DWORD *)v57 = 134217984;
      *(_QWORD *)&v57[4] = v42;
      goto LABEL_35;
    }
  }
  else
  {
LABEL_11:
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
    v34 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
    {
      v35 = *(_QWORD *)(a1 + 10344);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v35;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a5;
      _os_log_impl(&dword_18F1DC000, v34, OS_LOG_TYPE_DEFAULT, "[CMRelDMSensorFusionMekf] NOT-Converged to anchor, fLastConvergedToAnchorTimestamp: %llu, timestamp: %llu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
      v36 = *(_QWORD *)(a1 + 10344);
      *(_DWORD *)v57 = 134218240;
      *(_QWORD *)&v57[4] = v36;
      LOWORD(v58[0]) = 2048;
      *(_QWORD *)((char *)v58 + 2) = a5;
LABEL_35:
      v43 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMRelDMSensorFusionMekf::anchorMeasurementUpdate(const State &, const AnchorData &, BOOL, uint64_t)", "CoreLocation: %s\n", v43);
      if (v43 != buf)
        free(v43);
    }
  }
  v39 = atan2f(*(float *)(a3 + 36), *(float *)(a3 + 44));
  if (v39 <= 0.0)
    v39 = -v39;
  v44[0] = *(_DWORD *)(a3 + 32);
  v44[1] = v44[0];
  v44[2] = v44[0];
  v45 = (float)((float)((float)((float)((float)((float)((float)(v39 * 57.296) * 0.01817)
                                              + (float)((float)((float)(v39 * 57.296) * (float)(v39 * 57.296))
                                                      * 0.00008261))
                                      + 1.285)
                              * 0.00030462)
                      + (float)((float)((float)((float)((float)(v39 * 57.296) * 0.050494)
                                              + (float)((float)((float)(v39 * 57.296) * (float)(v39 * 57.296)) * 0.001676))
                                      + 0.41393)
                              * 0.00030462))
              * 0.25)
      + 0.0002514;
  v46 = v45;
  v47 = v45;
  if (a4)
  {
    v60 = *(_DWORD *)(a1 + 10700);
    v40 = *(_OWORD *)(a1 + 10684);
    *(_OWORD *)buf = *(_OWORD *)(a1 + 10668);
    *(_OWORD *)&buf[16] = v40;
    v66 = *(_OWORD *)(a1 + 10784);
    v67 = *(_OWORD *)(a1 + 10800);
    v68 = *(_OWORD *)(a1 + 10816);
    v69 = *(_OWORD *)(a1 + 10832);
    v62 = *(_OWORD *)(a1 + 10720);
    v63 = *(_OWORD *)(a1 + 10736);
    v64 = *(_OWORD *)(a1 + 10752);
    v65 = *(_OWORD *)(a1 + 10768);
    v61 = *(_OWORD *)(a1 + 10704);
    sub_18F37F130((uint64_t)v57, (float *)buf, (uint64_t)v54, (uint64_t)v44, (uint64_t)v56);
    sub_18F37D1F8(a1, (uint64_t)v57);
    *(_OWORD *)(a1 + 44) = *v10;
  }
  else
  {
    sub_18F37F130((uint64_t)v57, (float *)(a1 + 10488), (uint64_t)v54, (uint64_t)v44, (uint64_t)v56);
    sub_18F37D1F8(a1, (uint64_t)v57);
  }
  result = sub_18F382560((unsigned __int16 *)(a1 + 1352), *(unsigned __int16 *)(a1 + 1354) - 1);
  if (a1 + 4 != result)
  {
    *(_DWORD *)result = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(result + 4) = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(result + 16) = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(result + 20) = *(_DWORD *)(a1 + 24);
    *(_OWORD *)(result + 24) = *v10;
    *(_OWORD *)(result + 40) = *(_OWORD *)(a1 + 44);
  }
  return result;
}

uint64_t sub_18F37EBFC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  char *v8;
  NSObject *v9;
  char *v10;
  uint8_t buf[4];
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 6)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a2;
      v13 = 2048;
      v14 = 6;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 77,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T &CMMatrix<float, 6, 9>::operator()(size_t, size_t) [T = float, M = 6, N = 9]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  if (a3 >= 9)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v9 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a3;
      v13 = 2048;
      v14 = 9;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 78,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T &CMMatrix<float, 6, 9>::operator()(size_t, size_t) [T = float, M = 6, N = 9]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  return a1 + 4 * (a2 + 6 * a3);
}

uint64_t sub_18F37EF58(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2 >= 6)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v8 = a2;
      v9 = 2048;
      v10 = 6;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMVector.h, line 277,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T &CMVector<float, 6>::operator[](const size_t) [T = float, N = 6]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return a1 + 4 * a2;
}

void sub_18F37F130(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  unint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  unint64_t v18;
  float v19;
  float v20;
  float v21;
  float *v22;
  unint64_t v23;
  float v24;
  float v25;
  float *v26;
  float v27;
  unint64_t v28;
  float v29;
  float v30;
  float *v31;
  __int128 v32;
  NSObject *v33;
  NSObject *v34;
  char *v35;
  __int128 v38;
  __int128 v39;
  int v40;
  int v41;
  unint64_t v42;
  uint8_t buf[4];
  unint64_t v44;
  float v45[9];
  float v46[9];
  uint64_t v47;

  v8 = 0;
  v47 = *MEMORY[0x1E0C80C00];
  v9 = (uint64_t)(a2 + 9);
  v40 = 0;
  v38 = 0u;
  v39 = 0u;
LABEL_2:
  v10 = 0;
  v11 = -1;
  do
  {
    v12 = sub_18F3838D0(a3, v8, v10);
    v13 = v11;
    if (v10)
    {
      do
      {
        v14 = sub_18F3838D0(a3, v8, v13);
        v12 = v12 + (float)(v14 * *(float *)sub_18F382E6C(v9, v13--, v10));
      }
      while (v13 != -1);
    }
    v46[v10] = v12;
    v45[v10] = v12 * *(float *)sub_18F3831C4((uint64_t)a2, v10);
    ++v10;
    ++v11;
  }
  while (v10 != 9);
  v15 = sub_18F383C2C(a4, v8);
  v16 = v15 + (float)(v46[0] * v45[0]);
  if (v16 <= 0.0)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v34 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v44 = v8;
      _os_log_impl(&dword_18F1DC000, v34, OS_LOG_TYPE_DEBUG, "%zu: alpha <= 0, matrix ! positive definite", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v41 = 134217984;
      v42 = v8;
LABEL_33:
      v35 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "CMVector<T, N> CMFactoredMatrix<float, 9>::biermanObservationalUpdate(const CMMatrix<T, P, N> &, const CMVector<T, P> &, const CMVector<T, P> &) [T = float, N = 9, P = 6UL]", "CoreLocation: %s\n", v35);
      if (v35 != (char *)buf)
        free(v35);
    }
  }
  else
  {
    v17 = 1.0 / v16;
    *a2 = *a2 * (float)((float)(1.0 / v16) * sub_18F383C2C(a4, v8));
    v18 = 1;
    while (1)
    {
      v19 = v46[v18];
      v20 = v16 + (float)(v19 * v45[v18]);
      if (v20 <= 0.0)
        break;
      v21 = -(float)(v19 * v17);
      v17 = 1.0 / v20;
      v22 = (float *)sub_18F3831C4((uint64_t)a2, v18);
      v23 = 0;
      *v22 = (float)(v16 * (float)(1.0 / v20)) * *v22;
      do
      {
        v24 = *(float *)sub_18F382E6C(v9, v23, v18);
        v25 = v45[v23];
        v26 = (float *)sub_18F382E6C(v9, v23, v18);
        v27 = v45[v18];
        *v26 = v24 + (float)(v25 * v21);
        v45[v23++] = v25 + (float)(v27 * v24);
      }
      while (v18 != v23);
      ++v18;
      v16 = v20;
      if (v18 == 9)
      {
        v28 = 0;
        v29 = v17 * sub_18F383C2C(a5, v8);
        do
        {
          v30 = v45[v28];
          v31 = (float *)sub_18F3836F8((uint64_t)&v38, v28);
          *v31 = *v31 + (float)(v29 * v30);
          ++v28;
        }
        while (v28 != 9);
        if (++v8 == 6)
        {
          v32 = v39;
          *(_OWORD *)a1 = v38;
          *(_OWORD *)(a1 + 16) = v32;
          *(_DWORD *)(a1 + 32) = v40;
          return;
        }
        goto LABEL_2;
      }
    }
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v33 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v44 = v8;
      _os_log_impl(&dword_18F1DC000, v33, OS_LOG_TYPE_DEBUG, "%zu: alpha <= 0, matrix ! positive definite", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v41 = 134217984;
      v42 = v8;
      goto LABEL_33;
    }
  }
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
}

void sub_18F37F5F0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  NSObject *v5;
  char *v6;
  uint64_t v9;
  _OWORD *v10;
  unint64_t v11;
  _DWORD *v12;
  uint8_t buf[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a1)
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
    v5 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_DEBUG, "[CMRelDMSensorFusionMekf] Already initialized", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMRelDMSensorFusionMekf::initialize(const IMUData &, const IMUData &, const Pose &, uint64_t)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 4) = *a4;
    v9 = a1 + 4;
    *(_DWORD *)(a1 + 8) = a4[1];
    *(_DWORD *)(a1 + 12) = a4[2];
    *(_QWORD *)(a1 + 20) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    v10 = a4 + 3;
    if ((_DWORD *)(a1 + 28) != a4 + 3)
      *(_OWORD *)(a1 + 28) = *v10;
    if ((_OWORD *)(a1 + 44) != v10)
      *(_OWORD *)(a1 + 44) = *v10;
    v11 = 0;
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)buf = 0u;
    v14 = 0u;
    do
    {
      if (v11 > 2)
      {
        v12 = (_DWORD *)sub_18F37CA6C((uint64_t)buf, v11, v11);
        if (v11 > 5)
          *v12 = 983545103;
        else
          *v12 = 992204554;
      }
      else
      {
        *(_DWORD *)sub_18F37CA6C((uint64_t)buf, v11, v11) = 1008981770;
      }
      ++v11;
    }
    while (v11 != 9);
    sub_18F37CDC8(a1 + 10488, (uint64_t)buf);
    sub_18F37F89C((unsigned __int16 *)(a1 + 64), v9, a5);
    *(_BYTE *)a1 = 1;
  }
}

uint64_t sub_18F37F89C(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_18F38275C(a1 + 644, a2);
  v6 = a1[1];
  v7 = *((unsigned int *)a1 + 1);
  v8 = *a1;
  if (v8 + v6 >= v7)
    v9 = *((unsigned int *)a1 + 1);
  else
    v9 = 0;
  *(_QWORD *)&a1[4 * (v8 + v6 - v9) + 4] = a3;
  if (v7 <= v6)
  {
    if (v8 + 1 < v7)
      LOWORD(v7) = 0;
    *a1 = v8 + 1 - v7;
  }
  else
  {
    a1[1] = v6 + 1;
  }
  return result;
}

void sub_18F37F910(uint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  uint64_t v7;
  _BYTE *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float v18;
  float v19;
  NSObject *v20;
  char *v21;
  NSObject *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  float32x2_t *v33;
  NSObject *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  NSObject *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t buf[32];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a1)
  {
    v7 = *(unsigned __int16 *)(a1 + 66);
    if (*(_WORD *)(a1 + 66))
    {
      v9 = (_BYTE *)(a1 + 10328);
      *(_QWORD *)(a1 + 10320) = 0xFFFFFFFFLL;
      *(_BYTE *)(a1 + 10328) = 0;
      if (v7 <= 0x32)
        v10 = 0;
      else
        v10 = v7 - 50;
      v11 = a1 + 72;
      v12 = v7 - 1;
      v13 = v7 - 1 + *(unsigned __int16 *)(a1 + 64);
      v14 = *(unsigned int *)(a1 + 68);
      if (v13 < v14)
        v14 = 0;
      v15 = *(_QWORD *)(v11 + 8 * (v13 - v14));
      if (v15 <= a4)
      {
        if (v15 + 10000 > a4)
          goto LABEL_53;
        if ((float)((float)v15 + 500000.0) <= (float)a4)
          goto LABEL_69;
        *v9 = 1;
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
        v22 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
        {
          v23 = *(unsigned __int16 *)(a1 + 64) + (unint64_t)*(unsigned __int16 *)(a1 + 66) - 1;
          v24 = *(unsigned int *)(a1 + 68);
          if (v23 < v24)
            v24 = 0;
          v25 = *(_QWORD *)(v11 + 8 * (v23 - v24));
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)&buf[4] = a4;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v25;
          _os_log_impl(&dword_18F1DC000, v22, OS_LOG_TYPE_DEBUG, "[CMRelDMSensorFusionMekf][hasValidStateAtAnchorTime] Anchor time is ahead of current state time. anchorTime=%{public}llu, newestStateTime=%{public}llu", buf, 0x16u);
        }
        if (!sub_18F1FCA08(115, 2))
          goto LABEL_69;
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 == -1)
          goto LABEL_87;
      }
      else
      {
        if (*(_QWORD *)sub_18F383E04((unsigned __int16 *)(a1 + 64), v10) <= a4)
        {
          v26 = *(unsigned __int16 *)(a1 + 66) - 1;
          v27 = v26 + *(unsigned __int16 *)(a1 + 64);
          v28 = *(unsigned int *)(a1 + 68);
          if (v27 < v28)
            v28 = 0;
          v29 = *(unsigned __int16 *)(a1 + 1354)
              - vcvtps_u32_f32((float)(*(_QWORD *)(v11 + 8 * (v27 - v28)) - a4) / 5000.0)
              + 2;
          if (v29 >= v26)
            v30 = *(unsigned __int16 *)(a1 + 66) - 1;
          else
            v30 = v29;
          while (v30 + 1 > v10)
          {
            v31 = (unint64_t *)sub_18F383E04((unsigned __int16 *)(a1 + 64), v30--);
            if (*v31 <= a4)
            {
              v32 = a4 - *(_QWORD *)sub_18F383E04((unsigned __int16 *)(a1 + 64), v30 + 1);
              if (v32 <= *(_QWORD *)sub_18F383E04((unsigned __int16 *)(a1 + 64), v30 + 2) - a4)
                v12 = v30 + 1;
              else
                v12 = v30 + 2;
              goto LABEL_53;
            }
          }
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
          v34 = qword_1EE16D820;
          if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
          {
            v35 = *(unsigned __int16 *)(a1 + 64) + (unint64_t)*(unsigned __int16 *)(a1 + 66) - 1;
            v36 = *(unsigned int *)(a1 + 68);
            if (v35 < v36)
              v36 = 0;
            v37 = *(_QWORD *)(v11 + 8 * (v35 - v36));
            *(_DWORD *)buf = 134349312;
            *(_QWORD *)&buf[4] = a4;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = v37;
            _os_log_impl(&dword_18F1DC000, v34, OS_LOG_TYPE_ERROR, "[CMRelDMSensorFusionMekf][hasValidStateAtAnchorTime] Failed to find a valid state idx. anchorTime=%{public}llu, newestStateTime=%{public}llu", buf, 0x16u);
          }
          if (!sub_18F1FCA08(115, 0))
            goto LABEL_69;
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
          v38 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "BOOL CMRelDMSensorFusionMekf::StateHistory::hasValidStateAtAnchorTime(uint64_t)", "CoreLocation: %s\n");
LABEL_88:
          if (v38 != buf)
            free(v38);
LABEL_69:
          if (*v9)
          {
            v40 = *(unsigned int *)(a1 + 10388);
            v41 = *(unsigned __int16 *)(a1 + 10384) + (unint64_t)*(unsigned __int16 *)(a1 + 10386);
            if (v41 < v40)
              v40 = 0;
            v42 = a1 + 48 * (v41 - v40) + 10384;
            *(_OWORD *)(v42 + 8) = *(_OWORD *)a2;
            v43 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)(v42 + 40) = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(v42 + 24) = v43;
            v44 = *(unsigned __int16 *)(a1 + 10386);
            v45 = *(unsigned int *)(a1 + 10388);
            if (v45 <= v44)
            {
              v46 = *(unsigned __int16 *)(a1 + 10384) + 1;
              if (v46 < v45)
                LOWORD(v45) = 0;
              *(_WORD *)(a1 + 10384) = v46 - v45;
            }
            else
            {
              *(_WORD *)(a1 + 10386) = v44 + 1;
            }
            v47 = *(unsigned __int16 *)(a1 + 10362);
            v48 = *(unsigned int *)(a1 + 10364);
            v49 = *(unsigned __int16 *)(a1 + 10360);
            if (v49 + v47 >= v48)
              v50 = *(unsigned int *)(a1 + 10364);
            else
              v50 = 0;
            *(_QWORD *)(a1 + 8 * (v49 + v47 - v50) + 10368) = a4;
            if (v48 <= v47)
            {
              if (v49 + 1 < v48)
                LOWORD(v48) = 0;
              *(_WORD *)(a1 + 10360) = v49 + 1 - v48;
            }
            else
            {
              *(_WORD *)(a1 + 10362) = v47 + 1;
            }
          }
          return;
        }
        v16 = *(_QWORD *)sub_18F383E04((unsigned __int16 *)(a1 + 64), v10) - a4;
        if (v16 >> 4 < 0x271)
        {
          v12 = 0;
LABEL_53:
          *(_QWORD *)(a1 + 10320) = v12;
          *(_DWORD *)(a1 + 10360) = 0;
          *(_DWORD *)(a1 + 10384) = 0;
          v33 = (float32x2_t *)sub_18F380AC8(a1 + 64, v12);
          sub_18F37E520(a1, v33, a2, (a3 & 0xFFFFFFFD) == 1, a4);
          *(_QWORD *)(a1 + 10336) = a4;
          return;
        }
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
        v39 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)&buf[4] = a4;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v16;
          _os_log_impl(&dword_18F1DC000, v39, OS_LOG_TYPE_DEFAULT, "[CMRelDMSensorFusionMekf][hasValidStateAtAnchorTime] Anchor is too old. anchorTime=%{public}llu, deltaT%{public}llu", buf, 0x16u);
        }
        if (!sub_18F1FCA08(115, 2))
          goto LABEL_69;
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 == -1)
        {
LABEL_87:
          v38 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "BOOL CMRelDMSensorFusionMekf::StateHistory::hasValidStateAtAnchorTime(uint64_t)", "CoreLocation: %s\n");
          goto LABEL_88;
        }
      }
      dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
      goto LABEL_87;
    }
  }
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (a1 + 28 != a2)
    *(_OWORD *)(a1 + 28) = *(_OWORD *)a2;
  if (a1 + 44 != a2)
    *(_OWORD *)(a1 + 44) = *(_OWORD *)a2;
  v17 = 0;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  memset(buf, 0, sizeof(buf));
  v70 = 0;
  do
  {
    v18 = *(float *)(a2 + 16);
    if (v17 < 6)
      v18 = 0.0009;
    if (v17 >= 3)
      v19 = v18;
    else
      v19 = *(float *)(a2 + 32);
    *(float *)sub_18F37CA6C((uint64_t)buf, v17, v17) = v19;
    ++v17;
  }
  while (v17 != 9);
  sub_18F37CDC8(a1 + 10488, (uint64_t)buf);
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 1352) = 0;
  sub_18F37F89C((unsigned __int16 *)(a1 + 64), a1 + 4, a4);
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 10336) = a4;
  *(_QWORD *)(a1 + 10344) = a4;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
  v20 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = a4;
    _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_DEFAULT, "[CMRelDMSensorFusionMekf][feedAnchorData] Initialize with anchor. anchorTime=%{public}llu", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
    v21 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMRelDMSensorFusionMekf::feedAnchorData(const AnchorData &, TrackingScheme, uint64_t)", "CoreLocation: %s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
  }
}

void sub_18F3802B4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int32x2_t a6, float a7)
{
  int v13;
  int v14;
  float v15;
  BOOL v16;
  float v17;
  float v19;

  v13 = *(_DWORD *)(a2 + 48);
  if (v13)
  {
    v14 = *(_DWORD *)(a3 + 48);
    if (v14)
    {
      v15 = (float)((float)(*(float *)(a2 + 52) + *(float *)(a3 + 52)) * 9.8067) * 9.8067;
      if (a4 == 2 && (v13 == 1 ? (v16 = v14 == 1) : (v16 = 0), v16))
      {
        v17 = *(double *)a6.i32;
        sub_18F37E408(a1, v17, (float)((float)(*(float *)(a2 + 52) + *(float *)(a3 + 52)) * 9.8067) * 9.8067);
      }
      else
      {
        if (a4 == 1)
          return;
        v17 = *(double *)a6.i32;
      }
      *(float *)a6.i32 = v17;
      sub_18F37D4AC(a1, (float32x2_t *)(a2 + 12), (float *)(a3 + 12), a5, a6, v15);
      return;
    }
  }
  if (a7 > 0.0 && a4 != 1)
  {
    v19 = *(double *)a6.i32;
    *(float *)a6.i32 = v19;
    sub_18F37D4AC(a1, (float32x2_t *)(a2 + 24), (float *)(a3 + 24), a5, a6, a7);
    if (a4 == 2)
      sub_18F37E408(a1, v19, a7);
  }
}

void sub_18F3803F0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unint64_t a5, int32x2_t a6, float a7)
{
  sub_18F3802B4(a1, a2, a3, a4, a5, a6, a7);
  sub_18F37F89C((unsigned __int16 *)(a1 + 64), a1 + 4, a5);
  sub_18F380444(a1, (a4 & 0xFFFFFFFD) == 1, a5);
}

void sub_18F380444(uint64_t a1, int a2, unint64_t a3)
{
  unsigned __int16 *v3;
  unint64_t v6;
  unsigned __int16 v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  char *v14;
  uint8_t buf[4];
  unint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = (unsigned __int16 *)(a1 + 10360);
  if (*(_WORD *)(a1 + 10362))
  {
    if ((v6 = *(_QWORD *)(a1 + 8 * *v3 + 10368), v6 >= a3) && (v6 - a3) >> 3 < 0x271
      || a3 >= v6 && (a3 - v6) >> 3 <= 0x270)
    {
      sub_18F37E520(a1, (float32x2_t *)(a1 + 4), a1 + 48 * *(unsigned __int16 *)(a1 + 10384) + 10392, a2, v6);
      *(_QWORD *)(a1 + 10336) = a3;
      v7 = v3[1];
      if (v7)
      {
        v8 = *v3 + 1;
        v9 = *(unsigned int *)(a1 + 10364);
        if (v8 < v9)
          LOWORD(v9) = 0;
        *v3 = v8 - v9;
        v3[1] = v7 - 1;
      }
      v10 = v3[13];
      if (v10)
      {
        v11 = v3[12] + 1;
        v12 = *(unsigned int *)(a1 + 10388);
        if (v11 < v12)
          LOWORD(v12) = 0;
        v3[12] = v11 - v12;
        v3[13] = v10 - 1;
      }
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
      v13 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        v16 = a3;
        _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_DEBUG, "[CMRelDMSensorFusionMekf] Consumed cached anchor. timestamp %llu", buf, 0xCu);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
        v14 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CMRelDMSensorFusionMekf::processCachedAnchorMeasurements(BOOL, uint64_t)", "CoreLocation: %s\n", v14);
        if (v14 != (char *)buf)
          free(v14);
      }
    }
  }
}

void sub_18F3806B4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  uint8_t buf[1640];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a1)
  {
    *(_DWORD *)(a1 + 4) = *a2;
    v4 = a1 + 4;
    *(_DWORD *)(a1 + 8) = a2[1];
    *(_DWORD *)(a1 + 12) = a2[2];
    v5 = a2 + 3;
    if ((_OWORD *)(a1 + 28) != v5)
      *(_OWORD *)(a1 + 28) = *v5;
    if ((_OWORD *)(a1 + 44) != v5)
      *(_OWORD *)(a1 + 44) = *v5;
    *(_DWORD *)(a1 + 64) = 0;
    v6 = a1 + 64;
    *(_DWORD *)(v6 + 1288) = 0;
    sub_18F37F89C((unsigned __int16 *)v6, v4, a3);
  }
  else
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
    v7 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_ERROR, "[CMRelDMSensorFusionMekf] Must be initialized before bleeding to zero", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CMRelDMSensorFusionMekf::bleedToZero(const Pose &, uint64_t)", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
}

void sub_18F3808C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  float32x4_t v6;
  unsigned int v7;
  float32x4_t v8;
  float32x4_t v9;
  NSObject *v10;
  char *v11;
  float32x4_t v12;
  float32x4_t v13;
  uint8_t buf[16];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a1)
  {
    v2 = a1 + 64;
    v3 = *(unsigned __int16 *)(a1 + 1354);
    if (v3 >= 0x28)
      v4 = v3 - 40;
    else
      v4 = 0;
    v5 = sub_18F380AC8(v2, v4);
    *(_OWORD *)buf = *(_OWORD *)(v5 + 24);
    v6 = *(float32x4_t *)buf;
    v7 = *(_DWORD *)(v5 + 52);
    v6.f32[0] = -*(float *)(v5 + 48);
    *(float32x2_t *)v12.f32 = vneg_f32(*(float32x2_t *)(v5 + 40));
    v12.i64[1] = __PAIR64__(v7, v6.u32[0]);
    v8 = sub_18F1FFE94(&v12, v6);
    *(double *)v9.i64 = sub_18F3D3764(a1 + 44, v12.f32, &v13, v8);
    sub_18F3D3764((uint64_t)&v13, (float *)buf, &v12, v9);
    *(float32x4_t *)(a1 + 44) = v12;
    *(_DWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 1352) = 0;
  }
  else
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
    v10 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_ERROR, "[CMRelDMSensorFusionMekf] Must be initialized before entering 1-IMU tracking mode", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
      v13.i16[0] = 0;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CMRelDMSensorFusionMekf::enter1IMUTracking()", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
}

uint64_t sub_18F380AC8(uint64_t a1, unint64_t a2)
{
  unsigned __int16 *v2;
  NSObject *v5;
  char *v6;
  uint8_t buf[1640];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned __int16 *)(a1 + 1288);
  if (*(unsigned __int16 *)(a1 + 1290) > a2)
    return sub_18F382560((unsigned __int16 *)(a1 + 1288), a2);
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
  v5 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_ERROR, "[StateHistory::getState] Invalid idx, returning latest index.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "const State &CMRelDMSensorFusionMekf::StateHistory::getState(size_t) const", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  return sub_18F382560(v2, *(unsigned __int16 *)(a1 + 1290) - 1);
}

void sub_18F380CAC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  float32x2_t *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float *v22;
  uint64_t v23;
  float v24;
  float v25;
  int v26;
  int v27;
  NSObject *v28;
  char *v29;
  uint8_t buf[4];
  float v31;
  float v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a1)
  {
    v5 = a1 + 64;
    v6 = *(unsigned __int16 *)(a1 + 1354);
    v7 = v6 - 160;
    if (v6 < 0xA0)
      v7 = 0;
    v8 = v6 - 1;
    if (a3)
      v9 = v8;
    else
      v9 = v7;
    v10 = (float32x2_t *)sub_18F380AC8(v5, v9);
    v11 = sub_18F380F20(a2, (float *)v10, v10 + 5);
    v13 = v12;
    v15 = v14;
    v16 = (float *)sub_18F382974(a2);
    v17 = sub_18F3D39F4(v16, v11, v13, v15);
    v19 = v18;
    v21 = v20;
    v22 = (float *)sub_18F3827D8(a2);
    v23 = 0;
    v24 = v19 + v22[1];
    v25 = v21 + v22[2];
    *(float *)buf = v17 + *v22;
    v31 = v24;
    v32 = v25;
    do
    {
      *(float *)&buf[v23] = -*(float *)&buf[v23];
      v23 += 4;
    }
    while (v23 != 12);
    *(float *)(a1 + 4) = sub_18F3D39F4((float *)&v10[3], *(float *)buf, v31, v32);
    *(_DWORD *)(a1 + 8) = v26;
    *(_DWORD *)(a1 + 12) = v27;
    *(_DWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 1352) = 0;
  }
  else
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
    v28 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v28, OS_LOG_TYPE_ERROR, "[CMRelDMSensorFusionMekf] Must be initialized before exiting 1-IMU tracking mode", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
      v29 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CMRelDMSensorFusionMekf::exit1IMUTracking(const BodyFaceTransform &, BOOL)", "CoreLocation: %s\n", v29);
      if (v29 != (char *)buf)
        free(v29);
    }
  }
}

float sub_18F380F20(uint64_t a1, float *a2, float32x2_t *a3)
{
  float *v6;
  __int32 v7;
  float32x4_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float32x2_t *v14;
  __int32 v15;
  float32x4_t v16;
  float v17;
  uint64_t v18;
  int v19;
  int v20;
  float32x4_t v22;
  _DWORD v23[3];

  v6 = (float *)sub_18F3827D8(a1);
  v7 = a3[1].i32[1];
  v8.f32[0] = -a3[1].f32[0];
  *(float32x2_t *)v22.f32 = vneg_f32(*a3);
  v22.i64[1] = __PAIR64__(v7, v8.u32[0]);
  sub_18F1FFE94(&v22, v8);
  v9 = *v6 + sub_18F3D39F4(v22.f32, *a2, a2[1], a2[2]);
  v11 = v6[1] + v10;
  v13 = v12 + v6[2];
  v14 = (float32x2_t *)sub_18F382974(a1);
  v15 = v14[1].i32[1];
  v16.f32[0] = -v14[1].f32[0];
  *(float32x2_t *)v22.f32 = vneg_f32(*v14);
  v22.i64[1] = __PAIR64__(v15, v16.u32[0]);
  sub_18F1FFE94(&v22, v16);
  v17 = sub_18F3D39F4(v22.f32, v9, v11, v13);
  v18 = 0;
  *(float *)v23 = v17;
  v23[1] = v19;
  v23[2] = v20;
  do
  {
    *(float *)&v23[v18] = -*(float *)&v23[v18];
    ++v18;
  }
  while (v18 != 3);
  return *(float *)v23;
}

float *sub_18F38101C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t i;
  unint64_t j;
  float v8;
  float v9;
  unint64_t k;
  float v11;
  float v12;
  float *result;

  for (i = 0; i != 3; ++i)
  {
    for (j = 0; j != 3; ++j)
    {
      v8 = sub_18F37D890(a1, i, 0);
      v9 = v8 * sub_18F37D890(a2, 0, j);
      *(float *)sub_18F3558C8(a3, i, j) = v9;
      for (k = 1; k != 3; ++k)
      {
        v11 = sub_18F37D890(a1, i, k);
        v12 = sub_18F37D890(a2, k, j);
        result = (float *)sub_18F3558C8(a3, i, j);
        *result = *result + (float)(v11 * v12);
      }
    }
  }
  return result;
}

uint64_t sub_18F381108(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  char *v8;
  NSObject *v9;
  char *v10;
  uint8_t buf[4];
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a2;
      v13 = 2048;
      v14 = 9;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 77,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T &CMMatrix<float, 9, 12>::operator()(size_t, size_t) [T = float, M = 9, N = 12]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  if (a3 >= 0xC)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v9 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a3;
      v13 = 2048;
      v14 = 12;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 78,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T &CMMatrix<float, 9, 12>::operator()(size_t, size_t) [T = float, M = 9, N = 12]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  return a1 + 4 * (9 * a3 + a2);
}

uint64_t sub_18F381464(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0xC)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v8 = a2;
      v9 = 2048;
      v10 = 12;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMVector.h, line 277,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T &CMVector<float, 12>::operator[](const size_t) [T = float, N = 12]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return a1 + 4 * a2;
}

void sub_18F38163C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5)
{
  float *v9;
  float32x2_t v10;
  float v11;
  float32_t v12;
  __int32 v13;
  float32x4_t v14;
  float v15;
  float v16;
  float32x4_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  NSObject *v23;
  float32x4_t *v24;
  uint64_t v25;
  float32x2_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float32_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float v44;
  float v45;
  float32x2_t v46;
  float32x2_t v47;
  float v48;
  __int32 v49;
  float32x2_t v50;
  int8x16_t v51;
  float32x4_t v52;
  int8x16_t v53;
  float32x4_t v54;
  float v55;
  float v56;
  unsigned int v57;
  float32_t v58;
  unint64_t i;
  float v60;
  unsigned int v61;
  float v62;
  unint64_t j;
  float v64;
  unint64_t k;
  float v66;
  unint64_t m;
  float v68;
  unint64_t n;
  unint64_t ii;
  float v71;
  unint64_t v72;
  uint64_t jj;
  unint64_t kk;
  unint64_t mm;
  unint64_t nn;
  float v77;
  float v78;
  unint64_t i1;
  float v80;
  float v81;
  float *v82;
  uint64_t i2;
  unint64_t i3;
  unint64_t v85;
  float v86;
  float v87;
  float v88;
  unint64_t v89;
  float v90;
  float v91;
  unint64_t v92;
  float v93;
  float32x2_t v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  unint64_t v107;
  uint64_t v108;
  float32x4_t v109;
  float32x4_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t i4;
  float v114;
  float v115;
  float *v116;
  uint64_t v117;
  uint64_t i5;
  unint64_t v119;
  float v120;
  float v121;
  float v122;
  unint64_t i6;
  float v124;
  float v125;
  unint64_t i7;
  unint64_t v127;
  float v128;
  float v129;
  float v130;
  unint64_t i8;
  float v132;
  float v133;
  unint64_t v134;
  float v135;
  float v136;
  float *v137;
  unint64_t i9;
  float v139;
  float v140;
  float *v141;
  NSObject *v142;
  int v143;
  float v144;
  float32x4_t __dst[27];
  _OWORD v147[20];
  int v148;
  _BYTE __src[324];
  _BYTE v150[324];
  _BYTE v151[12];
  float32x4_t buf[102];
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a1)
  {
    v9 = (float *)(a1 + 28);
    v10.f32[0] = sub_18F3D39F4((float *)(a1 + 28), *(float *)a3, *(float *)(a3 + 4), *(float *)(a3 + 8));
    v12 = (float)(*(float *)(a2 + 8) - v11) * a5;
    v10.i32[1] = v13;
    *(float32x2_t *)__dst[0].f32 = vmul_n_f32(vsub_f32(*(float32x2_t *)a2, v10), a5);
    __dst[0].f32[2] = v12;
    *(double *)v14.i64 = sub_18F3D3AA8(buf, __dst[0].f32);
    sub_18F3D3764((uint64_t)buf, v9, __dst, v14);
    *(float32x4_t *)(a1 + 28) = __dst[0];
    *(float *)v150 = -(float)(sub_18F3D39F4((float *)(a1 + 44), *(float *)a3, *(float *)(a3 + 4), *(float *)(a3 + 8))
                            * a5);
    *(float *)&v150[4] = -(float)(v15 * a5);
    *(float *)&v150[8] = -(float)(v16 * a5);
    *(double *)v17.i64 = sub_18F3D3AA8(__dst, (float *)v150);
    sub_18F3D3764((uint64_t)__dst, (float *)(a1 + 44), (float32x4_t *)v150, v17);
    *(_OWORD *)(a1 + 44) = *(_OWORD *)v150;
    v18 = *(float *)(a3 + 12) * 9.8067;
    v19 = *(float *)(a3 + 16) * 9.8067;
    v20 = *(float *)(a3 + 20) * 9.8067;
    v144 = v20;
    if (a4)
    {
      v21 = *(float *)(a3 + 12) * 9.8067;
      v22 = *(float *)(a3 + 16) * 9.8067;
      *(_QWORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
    }
    else
    {
      v25 = 0;
      v26 = *(float32x2_t *)(a2 + 16);
      v27 = *(float *)(a2 + 8);
      v28 = *(float *)(a2 + 12);
      v29 = *(float *)(a1 + 20);
      v30 = *(float *)(a1 + 24);
      v31 = -v27;
      v32 = *(float *)(a2 + 4);
      v33 = -(float)(*(float *)a2 * v30);
      v35 = *(float *)(a1 + 12);
      v34 = *(float *)(a1 + 16);
      v36 = (float)(*(float *)a2 * v29) - (float)(v32 * v34);
      v38 = *(float *)(a1 + 4);
      v37 = *(float *)(a1 + 8);
      v39 = (float)(v32 * v35) - (float)(v27 * v37);
      v40 = (float)(v27 * v38) - (float)(*(float *)a2 * v35);
      v41 = (float)(*(float *)a2 * v40) - (float)(v32 * v39);
      buf[0].i64[0] = __PAIR64__((float)(v27 * v39)- (float)(*(float *)a2 * (float)((float)(*(float *)a2 * v37) - (float)(v32 * v38))), (float)(v32 * (float)((float)(*(float *)a2 * v37) - (float)(v32 * v38))) - (float)(v27 * v40));
      buf[0].f32[2] = v41;
      do
      {
        buf[0].f32[v25] = -buf[0].f32[v25];
        ++v25;
      }
      while (v25 != 3);
      v42 = vmul_f32(v26, (float32x2_t)vdup_n_s32(0x411CE80Au));
      v43.f32[0] = v33 + (float)(v27 * v34);
      v44 = v28 * 9.8067;
      v45 = buf[0].f32[0]
          - (float)((float)((float)(v29 * v31) + (float)(v32 * v30)) + (float)((float)(v29 * v31) + (float)(v32 * v30)));
      v43.f32[1] = v36;
      v46 = vadd_f32(v43, v43);
      v47 = *(float32x2_t *)&buf[0].i32[1];
      v21 = v18;
      v22 = v19;
      v48 = sub_18F3D39F4(v9, v18, v19, v20);
      v50.i32[1] = v49;
      v51.i64[0] = *(_QWORD *)(a1 + 20);
      v52 = *(float32x4_t *)(a1 + 4);
      v53 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v52, 3);
      v54 = (float32x4_t)vextq_s8(vextq_s8(v53, v53, 4uLL), v51, 0xCuLL);
      v54.f32[3] = v45 - (float)(v44 - v48);
      *(float32x4_t *)(a1 + 4) = vaddq_f32(v52, vmulq_n_f32(v54, a5));
      *(float32x2_t *)(a1 + 20) = vadd_f32(*(float32x2_t *)v51.i8, vmul_n_f32(vsub_f32(vsub_f32(v47, v46), vsub_f32(v42, v50)), a5));
    }
    memset(__src, 0, sizeof(__src));
    v56 = *(float *)(a2 + 4);
    v55 = *(float *)(a2 + 8);
    v57 = *(_DWORD *)a2;
    v58 = -*(float *)a2;
    buf[0].i32[0] = 0;
    buf[0].f32[1] = v55;
    buf[0].f32[2] = -v56;
    buf[0].f32[3] = -v55;
    buf[1].i32[0] = 0;
    *(uint64_t *)((char *)buf[1].i64 + 4) = __PAIR64__(LODWORD(v56), v57);
    buf[1].f32[3] = v58;
    buf[2].i32[0] = 0;
    if ((a4 & 1) == 0)
    {
      for (i = 0; i != 3; ++i)
        *(_DWORD *)sub_18F37CA6C((uint64_t)__src, i, i + 3) = 1065353216;
      v60 = sub_18F3D39F4(v9, v21, v22, v144);
      __dst[0].i32[0] = 0;
      __dst[0].f32[1] = v62;
      __dst[0].f32[2] = -*(float *)&v61;
      __dst[0].f32[3] = -v62;
      __dst[1].i32[0] = 0;
      *(uint64_t *)((char *)__dst[1].i64 + 4) = __PAIR64__(v61, LODWORD(v60));
      __dst[1].f32[3] = -v60;
      __dst[2].i32[0] = 0;
      sub_18F38101C((uint64_t)buf, (uint64_t)buf, (uint64_t)v150);
      do
      {
        for (j = 0; j != 3; ++j)
        {
          v64 = -sub_18F37D890((uint64_t)v150, i - 3, j);
          *(float *)sub_18F37CA6C((uint64_t)__src, i, j) = v64;
        }
        for (k = 0; k != 3; ++k)
        {
          v66 = sub_18F37D890((uint64_t)buf, i - 3, k) * -2.0;
          *(float *)sub_18F37CA6C((uint64_t)__src, i, k + 3) = v66;
        }
        for (m = 0; m != 3; ++m)
        {
          v68 = sub_18F37D890((uint64_t)__dst, i - 3, m);
          *(float *)sub_18F37CA6C((uint64_t)__src, i, m + 6) = v68 + v68;
        }
        ++i;
      }
      while (i != 6);
    }
    for (n = 6; n != 9; ++n)
    {
      for (ii = 0; ii != 3; ++ii)
      {
        v71 = -sub_18F37D890((uint64_t)buf, n - 6, ii);
        *(float *)sub_18F37CA6C((uint64_t)__src, n, ii + 6) = v71;
      }
    }
    v72 = 0;
    memset(v147, 0, sizeof(v147));
    v148 = 0;
    do
    {
      *(_DWORD *)sub_18F37CA6C((uint64_t)v147, v72, v72) = 1065353216;
      ++v72;
    }
    while (v72 != 9);
    memcpy(__dst, __src, 0x144uLL);
    for (jj = 0; jj != 81; ++jj)
      __dst[0].f32[jj] = __dst[0].f32[jj] * a5;
    memcpy(buf, __dst, 0x144uLL);
    for (kk = 0; kk != 81; ++kk)
      *((float *)v147 + kk) = sub_18F383FFC((uint64_t)buf, kk) + *((float *)v147 + kk);
    for (mm = 0; mm != 9; ++mm)
    {
      for (nn = 0; nn != 9; ++nn)
      {
        v77 = sub_18F382B10((uint64_t)__src, mm, 0);
        v78 = v77 * sub_18F382B10((uint64_t)__src, 0, nn);
        *(float *)sub_18F37CA6C((uint64_t)v150, mm, nn) = v78;
        for (i1 = 1; i1 != 9; ++i1)
        {
          v80 = sub_18F382B10((uint64_t)__src, mm, i1);
          v81 = sub_18F382B10((uint64_t)__src, i1, nn);
          v82 = (float *)sub_18F37CA6C((uint64_t)v150, mm, nn);
          *v82 = *v82 + (float)(v80 * v81);
        }
      }
    }
    for (i2 = 0; i2 != 324; i2 += 4)
      *(float *)&v150[i2] = (float)((float)(a5 * 0.5) * a5) * *(float *)&v150[i2];
    memcpy(buf, v150, 0x144uLL);
    for (i3 = 0; i3 != 81; ++i3)
      *((float *)v147 + i3) = sub_18F383FFC((uint64_t)buf, i3) + *((float *)v147 + i3);
    memset(__dst, 0, sizeof(__dst));
    sub_18F3D4B74(v9, buf[0].f32, 1.0);
    v85 = 0;
    v87 = *(float *)(a1 + 20);
    v86 = *(float *)(a1 + 24);
    v88 = *(float *)(a1 + 16);
    *(_DWORD *)v150 = 0;
    *(float *)&v150[4] = v86;
    *(float *)&v150[8] = -v87;
    *(float *)&v150[12] = -v86;
    *(_DWORD *)&v150[16] = 0;
    *(float *)&v150[20] = v88;
    *(float *)&v150[24] = v87;
    *(float *)&v150[28] = -v88;
    *(_DWORD *)&v150[32] = 0;
    do
    {
      if ((a4 & 1) == 0)
      {
        v89 = 0;
        *(_DWORD *)sub_18F381108((uint64_t)__dst, v85 + 3, v85) = -1082130432;
        do
        {
          v90 = sub_18F37D890((uint64_t)buf, v85, v89);
          *(float *)sub_18F381108((uint64_t)__dst, v85 + 3, v89 + 3) = v90;
          v91 = sub_18F37D890((uint64_t)v150, v85, v89);
          *(float *)sub_18F381108((uint64_t)__dst, v85 + 3, v89 + 6) = v91 + v91;
          ++v89;
        }
        while (v89 != 3);
      }
      *(_DWORD *)sub_18F381108((uint64_t)__dst, v85 + 6, v85 + 6) = 1056964608;
      *(_DWORD *)sub_18F381108((uint64_t)__dst, v85 + 6, v85 + 9) = -1090519040;
      ++v85;
    }
    while (v85 != 3);
    v92 = 0;
    v93 = *(float *)(a2 + 20) * 9.8067;
    v94 = (float32x2_t)vdup_n_s32(0x411CE80Au);
    *(float32x2_t *)v150 = vmul_f32(*(float32x2_t *)(a2 + 12), v94);
    *(float *)&v150[8] = v93;
    v95 = *(float *)(a3 + 20) * 9.8067;
    *(float32x2_t *)v151 = vmul_f32(*(float32x2_t *)(a3 + 12), v94);
    *(float *)&v151[8] = v95;
    v96 = (float)(a5 * 0.021638) + 0.0000009617;
    do
    {
      v97 = sub_18F3551B0((uint64_t)v150, v92) * 0.0001;
      v98 = v96 + (float)((float)(v97 * sub_18F3551B0((uint64_t)v150, v92)) * a5);
      *(float *)sub_18F381464((uint64_t)buf, v92) = v98;
      v99 = sub_18F3551B0((uint64_t)v151, v92) * 0.0001;
      v100 = v96 + (float)((float)(v99 * sub_18F3551B0((uint64_t)v151, v92)) * a5);
      *(float *)sub_18F381464((uint64_t)buf, v92 + 3) = v100;
      v101 = (float)(sub_18F3551B0(a2 + 36, v92) / 50.0) + 0.000000019496;
      v102 = sub_18F3551B0(a2, v92) * 0.0004;
      v103 = v101 + (float)((float)(v102 * sub_18F3551B0(a2, v92)) * a5);
      *(float *)sub_18F381464((uint64_t)buf, v92 + 6) = v103;
      v104 = (float)(sub_18F3551B0(a3 + 36, v92) / 50.0) + 0.000000019496;
      v105 = sub_18F3551B0(a3, v92) * 0.0004;
      v106 = v104 + (float)((float)(v105 * sub_18F3551B0(a3, v92)) * a5);
      *(float *)sub_18F381464((uint64_t)buf, v92 + 9) = v106;
      ++v92;
    }
    while (v92 != 3);
    v107 = 0;
    v108 = a1 + 10848;
    v109 = vmulq_n_f32(buf[1], a5);
    v110 = vmulq_n_f32(buf[2], a5);
    *(float32x4_t *)(a1 + 10848) = vmulq_n_f32(buf[0], a5);
    *(float32x4_t *)(a1 + 10864) = v109;
    *(float32x4_t *)(a1 + 10880) = v110;
    v111 = a1 + 10524;
    do
    {
      v112 = 8;
      do
      {
        for (i4 = 0; i4 != v112; ++i4)
        {
          v114 = *(float *)sub_18F37CA6C((uint64_t)v147, v107, i4);
          v115 = *(float *)sub_18F382E6C(a1 + 10524, i4, v112);
          v116 = (float *)sub_18F37CA6C((uint64_t)v147, v107, v112);
          *v116 = *v116 + (float)(v114 * v115);
        }
        --v112;
      }
      while (v112);
      ++v107;
    }
    while (v107 != 9);
    v117 = a1 + 10488;
    for (i5 = 8; ; --i5)
    {
      v119 = 0;
      *(_DWORD *)&v150[4 * i5] = 0;
      v120 = 0.0;
      do
      {
        v121 = *(float *)sub_18F37CA6C((uint64_t)v147, i5, v119);
        v122 = v121 * *(float *)sub_18F37CA6C((uint64_t)v147, i5, v119);
        v120 = v120 + (float)(v122 * *(float *)sub_18F3831C4(v117, v119));
        *(float *)&v150[4 * i5] = v120;
        ++v119;
      }
      while (v119 != 9);
      for (i6 = 0; i6 != 12; ++i6)
      {
        v124 = *(float *)sub_18F381108((uint64_t)__dst, i5, i6);
        v125 = v124 * *(float *)sub_18F381108((uint64_t)__dst, i5, i6);
        v120 = v120 + (float)(v125 * sub_18F3841D4(v108, i6));
        *(float *)&v150[4 * i5] = v120;
      }
      if (v120 <= 0.0)
        break;
      if (!i5)
      {
        do
        {
          v143 = *(_DWORD *)&v150[4 * i5];
          *(_DWORD *)sub_18F3831C4(v117, i5++) = v143;
        }
        while (i5 != 9);
        return;
      }
      for (i7 = 0; i7 != i5; ++i7)
      {
        v127 = 0;
        v128 = 0.0;
        do
        {
          v129 = *(float *)sub_18F37CA6C((uint64_t)v147, i7, v127);
          v130 = v129 * *(float *)sub_18F3831C4(v117, v127);
          v128 = v128 + (float)(v130 * *(float *)sub_18F37CA6C((uint64_t)v147, i5, v127++));
        }
        while (v127 != 9);
        for (i8 = 0; i8 != 12; ++i8)
        {
          v132 = *(float *)sub_18F381108((uint64_t)__dst, i7, i8);
          v133 = v132 * sub_18F3841D4(v108, i8);
          v128 = v128 + (float)(v133 * *(float *)sub_18F381108((uint64_t)__dst, i5, i8));
        }
        v134 = 0;
        *(float *)sub_18F382E6C(v111, i7, i5) = v128 / v120;
        do
        {
          v135 = *(float *)sub_18F382E6C(v111, i7, i5);
          v136 = *(float *)sub_18F37CA6C((uint64_t)v147, i5, v134);
          v137 = (float *)sub_18F37CA6C((uint64_t)v147, i7, v134);
          *v137 = *v137 - (float)(v135 * v136);
          ++v134;
        }
        while (v134 != 9);
        for (i9 = 0; i9 != 12; ++i9)
        {
          v139 = *(float *)sub_18F382E6C(v111, i7, i5);
          v140 = *(float *)sub_18F381108((uint64_t)__dst, i5, i9);
          v141 = (float *)sub_18F381108((uint64_t)__dst, i7, i9);
          *v141 = *v141 - (float)(v139 * v140);
        }
      }
    }
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v142 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_DEBUG))
    {
      buf[0].i32[0] = 134217984;
      *(uint64_t *)((char *)buf[0].i64 + 4) = i5;
      _os_log_impl(&dword_18F1DC000, v142, OS_LOG_TYPE_DEBUG, "D[%zu] <= 0, matrix ! positive definite", (uint8_t *)buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      *(_DWORD *)v151 = 134217984;
      *(_QWORD *)&v151[4] = i5;
      v24 = (float32x4_t *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMFactoredMatrix<float, 9>::thorntonTemporalUpdate(CMMatrix<T, N, N> &, CMMatrix<T, N, M> &, const CMVector<T, M> &) [T = float, N = 9, M = 12UL]", "CoreLocation: %s\n");
LABEL_85:
      if (v24 != buf)
        free(v24);
    }
  }
  else
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
    v23 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      buf[0].i16[0] = 0;
      _os_log_impl(&dword_18F1DC000, v23, OS_LOG_TYPE_ERROR, "[CMRelDMSensorFusionMekf] Must be initialized before propagating", (uint8_t *)buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
      __dst[0].i16[0] = 0;
      v24 = (float32x4_t *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CMRelDMSensorFusionMekf::propagate(const IMUData &, const IMUData &, float, BOOL)", "CoreLocation: %s\n");
      goto LABEL_85;
    }
  }
}

os_log_t sub_18F382534()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1EE16D820 = (uint64_t)result;
  return result;
}

uint64_t sub_18F382560(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v11 = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T &CMQueue<CMRelDM::State>::operator[](const size_t) const [T = CMRelDM::State]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[28 * (v4 - v5) + 4];
}

uint64_t sub_18F38275C(unsigned __int16 *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *((unsigned int *)a1 + 1);
  v4 = *a1 + (unint64_t)a1[1];
  if (v4 < v3)
    v3 = 0;
  result = sub_18F48DC30((uint64_t)&a1[28 * (v4 - v3) + 4], a2);
  v6 = a1[1];
  v7 = *((unsigned int *)a1 + 1);
  if (v7 <= v6)
  {
    v8 = *a1 + 1;
    if (v8 < v7)
      LOWORD(v7) = 0;
    *a1 = v8 - v7;
  }
  else
  {
    a1[1] = v6 + 1;
  }
  return result;
}

uint64_t sub_18F3827D8(uint64_t a1)
{
  NSObject *v2;
  char *v4;
  uint8_t buf[1640];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 28))
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
    v2 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_ERROR, "[BodyFaceTransform] BodyFaceTransform has not been set.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
      v4 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const CMVector3d &CMRelDM::BodyFaceTransform::r_fb() const", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  return a1;
}

uint64_t sub_18F382974(uint64_t a1)
{
  NSObject *v2;
  char *v4;
  uint8_t buf[1640];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 28))
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
    v2 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_ERROR, "[BodyFaceTransform] BodyFaceTransform has not been set.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952FE8);
      v4 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const CMOQuaternion &CMRelDM::BodyFaceTransform::q_bf() const", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  return a1 + 12;
}

float sub_18F382B10(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  char *v8;
  NSObject *v9;
  char *v10;
  uint8_t buf[4];
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a2;
      v13 = 2048;
      v14 = 9;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 70,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMMatrix<float, 9>::operator()(size_t, size_t) const [T = float, M = 9, N = 9]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  if (a3 >= 9)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v9 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a3;
      v13 = 2048;
      v14 = 9;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 71,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMMatrix<float, 9>::operator()(size_t, size_t) const [T = float, M = 9, N = 9]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  return *(float *)(a1 + 4 * (9 * a3 + a2));
}

uint64_t sub_18F382E6C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  char *v8;
  NSObject *v9;
  char *v10;
  uint8_t buf[4];
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a3 >= 9)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a3;
      v13 = 2048;
      v14 = 9;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMFactoredMatrix.h, line 237,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T &CMFactoredMatrix<float, 9>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = float, N = 9]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  if (a3 <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v9 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a3;
      v13 = 2048;
      v14 = a2;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col > row, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMFactoredMatrix.h, line 238,invalid element %zu <= %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T &CMFactoredMatrix<float, 9>::UnitaryUpperTriangularMatrix::operator()(size_t, size_t) [T = float, N = 9]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  return a1 + 4 * (a2 + (((a3 - 1) * a3) >> 1));
}

uint64_t sub_18F3831C4(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v8 = a2;
      v9 = 2048;
      v10 = 9;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: row < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMFactoredMatrix.h, line 191,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T &CMFactoredMatrix<float, 9>::DiagonalMatrix::operator()(size_t) [T = float, N = 9]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return a1 + 4 * a2;
}

float sub_18F38339C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  char *v8;
  NSObject *v9;
  char *v10;
  uint8_t buf[4];
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 3)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a2;
      v13 = 2048;
      v14 = 3;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 70,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMMatrix<float, 3, 9>::operator()(size_t, size_t) const [T = float, M = 3, N = 9]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  if (a3 >= 9)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v9 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a3;
      v13 = 2048;
      v14 = 9;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 71,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMMatrix<float, 3, 9>::operator()(size_t, size_t) const [T = float, M = 3, N = 9]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  return *(float *)(a1 + 4 * (3 * a3 + a2));
}

uint64_t sub_18F3836F8(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v8 = a2;
      v9 = 2048;
      v10 = 9;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMVector.h, line 277,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T &CMVector<float, 9>::operator[](const size_t) [T = float, N = 9]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return a1 + 4 * a2;
}

float sub_18F3838D0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  char *v8;
  NSObject *v9;
  char *v10;
  uint8_t buf[4];
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 6)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a2;
      v13 = 2048;
      v14 = 6;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 70,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMMatrix<float, 6, 9>::operator()(size_t, size_t) const [T = float, M = 6, N = 9]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  if (a3 >= 9)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v9 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a3;
      v13 = 2048;
      v14 = 9;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 71,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMMatrix<float, 6, 9>::operator()(size_t, size_t) const [T = float, M = 6, N = 9]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  return *(float *)(a1 + 4 * (a2 + 6 * a3));
}

float sub_18F383C2C(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2 >= 6)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v8 = a2;
      v9 = 2048;
      v10 = 6;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMVector.h, line 271,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMVector<float, 6>::operator[](const size_t) const [T = float, N = 6]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return *(float *)(a1 + 4 * a2);
}

uint64_t sub_18F383E04(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v11 = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T &CMQueue<unsigned long long>::operator[](const size_t) const [T = unsigned long long]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[4 * (v4 - v5) + 4];
}

float sub_18F383FFC(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x51)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v8 = a2;
      v9 = 2048;
      v10 = 81;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: ldx < M*N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 84,invalid element %zu >= %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMMatrix<float, 9>::operator[](size_t) const [T = float, M = 9, N = 9]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return *(float *)(a1 + 4 * a2);
}

float sub_18F3841D4(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0xC)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v8 = a2;
      v9 = 2048;
      v10 = 12;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMVector.h, line 271,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954BC8);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMVector<float, 12>::operator[](const size_t) const [T = float, N = 12]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return *(float *)(a1 + 4 * a2);
}

uint64_t sub_18F3843AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int16 v4;
  unint64_t v5;
  uint64_t v6;
  __int16 v7;
  NSObject *v8;
  char *v10;
  uint8_t buf[1640];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = sub_18F41A4B8(1.536);
  *(_DWORD *)(a1 + 4) = sub_18F41A4B8(20.48);
  sub_18F4E5BF8(a1 + 8);
  v2 = 0;
  v3 = 0;
  v4 = 0;
  *(_QWORD *)(a1 + 2208) = 0x8000000000;
  *(_QWORD *)(a1 + 2728) = 0x8000000000;
  *(_QWORD *)(a1 + 3248) = 0x8000000000;
  *(_QWORD *)(a1 + 3768) = 0x8000000000;
  *(_QWORD *)(a1 + 5832) = 0x300000000;
  *(_QWORD *)(a1 + 6008) = 0x8000000000;
  *(_QWORD *)(a1 + 6528) = 0x8000000000;
  *(_QWORD *)(a1 + 7048) = 0x8000000000;
  *(_DWORD *)(a1 + 7568) = 0;
  *(_QWORD *)(a1 + 4800) = 0x8000000000;
  *(_QWORD *)(a1 + 7576) = 0;
  *(_QWORD *)(a1 + 7592) = 0;
  *(_QWORD *)(a1 + 7584) = 0;
  do
  {
    v5 = v3 + v4;
    if (v5 >= 0x80)
      v6 = -128;
    else
      v6 = 0;
    *(_QWORD *)(a1 + 4808 + 8 * (v6 + v5)) = v2;
    if (v3 > 0x7F)
    {
      if (v4 >= 0x7Fu)
        v7 = -128;
      else
        v7 = 0;
      v4 += v7 + 1;
      *(_WORD *)(a1 + 4800) = v4;
    }
    else
    {
      *(_WORD *)(a1 + 4802) = ++v3;
    }
    v2 += 20000;
  }
  while (v2 != 2560000);
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953008);
  v8 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_DEFAULT, "[CMAccessoryWalkingDetector] Instantiating Walk Detector.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953008);
    v10 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CMAccessoryWalkingDetector::CMAccessoryWalkingDetector()", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  return a1;
}

void sub_18F38461C()
{
  uint64_t v0;
  float32x2_t *v1;
  float32x2_t *v2;
  unint64_t v3;
  unint64_t v4;
  float32x2_t *v5;
  float *v6;
  uint64_t v7;
  __int32 v8;
  float32x4_t v9;
  float v10;
  int v11;
  int v12;
  float v13;
  float v14;
  __int32 v15;
  float32x4_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  NSObject *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _WORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _WORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _WORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _WORD *v51;
  unint64_t v52;
  __int16 v53;
  __int16 v54;
  uint64_t v55;
  unint64_t v56;
  float *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  float *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  float *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  unsigned int v80;
  float v81;
  unint64_t v82;
  uint64_t v83;
  float v84;
  char *v85;
  void *v86;
  char *v87;
  int64_t v88;
  unint64_t v89;
  int64_t v90;
  unint64_t v91;
  char *v92;
  float *v93;
  int v94;
  const void *v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  _DWORD *v106;
  _DWORD *v107;
  _DWORD *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned __int16 v116;
  unsigned __int16 v117;
  unsigned __int16 v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  __int16 v123;
  unsigned __int16 v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  __int16 v128;
  unsigned __int16 v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  __int16 v133;
  unsigned __int16 v134;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  uint64_t v141;
  float v142;
  float v143;
  float v144;
  uint64_t v145;
  float v146;
  float v147;
  uint64_t v148;
  float v149;
  float v150;
  float v151;
  unsigned __int8 v152;
  BOOL v153;
  BOOL v154;
  BOOL v156;
  _WORD *v157;
  unint64_t v158;
  unint64_t i;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  __int128 v166;
  unsigned int v167;
  unint64_t v168;
  unint64_t v169;
  __int16 v170;
  void (*v171)(_QWORD, _QWORD);
  unint64_t v172;
  uint64_t *v173;
  NSObject *v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  __int16 v182;
  unsigned __int16 v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  __int16 v189;
  unsigned __int16 v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  __int16 v196;
  unsigned __int16 v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  __int16 v203;
  unsigned __int16 v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  __int16 v210;
  unsigned __int16 v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  __int16 v217;
  unsigned __int16 v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  __int16 v224;
  unsigned __int16 v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  char *v229;
  char *v230;
  NSObject *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  unsigned __int16 *v237;
  unsigned __int16 *v238;
  unsigned __int16 *v239;
  unsigned __int16 *v240;
  unsigned __int16 *v241;
  unsigned __int16 *v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  void *v247[4];
  __int16 v248;
  double v249;
  __int16 v250;
  double v251;
  __int16 v252;
  double v253;
  __int16 v254;
  double v255;
  __int16 v256;
  int v257;
  __int16 v258;
  int v259;
  __int16 v260;
  int v261;
  __int16 v262;
  uint64_t v263;
  __int16 v264;
  int v265;
  __int16 v266;
  double v267;
  __int16 v268;
  double v269;
  __int16 v270;
  int v271;
  void *v272;
  void *v273;
  uint64_t v274;
  void *v275;
  void *v276;
  uint64_t v277;
  void *v278;
  void *v279;
  uint64_t v280;
  void *v281;
  _QWORD v282[128];
  void *v283;
  _QWORD v284[128];
  void *__p[130];
  int v286;
  uint64_t v287;
  __int16 v288;
  uint64_t v289;
  _BYTE v290[12];
  _BYTE v291[10];
  __int16 v292;
  double v293;
  __int16 v294;
  double v295;
  __int16 v296;
  double v297;
  __int16 v298;
  double v299;
  __int16 v300;
  double v301;
  __int16 v302;
  int v303;
  __int16 v304;
  int v305;
  __int16 v306;
  int v307;
  __int16 v308;
  uint64_t v309;
  __int16 v310;
  int v311;
  __int16 v312;
  double v313;
  __int16 v314;
  double v315;
  __int16 v316;
  int v317;
  uint64_t v318;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = (float *)v5;
  v7 = v0;
  v318 = *MEMORY[0x1E0C80C00];
  v8 = v5[8].i32[1];
  v9.f32[0] = -v5[8].f32[0];
  *(float32x2_t *)v290 = vneg_f32(v5[7]);
  *(_DWORD *)&v290[8] = v9.i32[0];
  *(_DWORD *)v291 = v8;
  sub_18F1FFE94((float32x4_t *)v290, v9);
  v10 = sub_18F3D39F4((float *)v290, v6[3], v6[4], v6[5]);
  v12 = v11;
  v14 = v13;
  v15 = v2[1].i32[1];
  v16.f32[0] = -v2[1].f32[0];
  *(float32x2_t *)v290 = vneg_f32(*v2);
  *(_DWORD *)&v290[8] = v16.i32[0];
  *(_DWORD *)v291 = v15;
  sub_18F1FFE94((float32x4_t *)v290, v16);
  v17 = sub_18F3D39F4((float *)v290, *v6, v6[1], v6[2]);
  v19 = v18;
  v21 = v20;
  v22 = *(unsigned __int16 *)(v7 + 3770);
  v23 = *(unsigned __int16 *)(v7 + 3768);
  if (*(_WORD *)(v7 + 3770))
  {
    v24 = v7 + 3776;
    v25 = v22 + v23 - 1;
    v26 = *(unsigned int *)(v7 + 3772);
    if (v25 < v26)
      v26 = 0;
    if (*(_QWORD *)(v24 + 8 * (v25 - v26)) > v4 + 1000000)
    {
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953008);
      v27 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
      {
        v28 = *(unsigned __int16 *)(v7 + 3768) + (unint64_t)*(unsigned __int16 *)(v7 + 3770) - 1;
        v29 = *(unsigned int *)(v7 + 3772);
        if (v28 < v29)
          v29 = 0;
        v30 = *(_QWORD *)(v24 + 8 * (v28 - v29));
        *(_DWORD *)v290 = 134218496;
        *(double *)&v290[4] = (float)((float)v30 * 0.000001);
        *(_WORD *)v291 = 2048;
        *(double *)&v291[2] = (float)((float)v4 * 0.000001);
        v292 = 2048;
        v293 = (float)((float)(v30 - v4) * 0.000001);
        _os_log_impl(&dword_18F1DC000, v27, OS_LOG_TYPE_INFO, "[CMAccessoryWalkingDetector], dataBuffers reset due to timestamp going backwards. PreviousTS, %.3f seconds, currentTS, %.3f seconds, gap, %.3f seconds", v290, 0x20u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(v290, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953008);
        v226 = *(unsigned __int16 *)(v7 + 3768) + (unint64_t)*(unsigned __int16 *)(v7 + 3770) - 1;
        v227 = *(unsigned int *)(v7 + 3772);
        if (v226 < v227)
          v227 = 0;
        v228 = *(_QWORD *)(v24 + 8 * (v226 - v227));
        LODWORD(__p[0]) = 134218496;
        *(double *)((char *)__p + 4) = (float)((float)v228 * 0.000001);
        WORD2(__p[1]) = 2048;
        *(double *)((char *)&__p[1] + 6) = (float)((float)v4 * 0.000001);
        HIWORD(__p[2]) = 2048;
        *(double *)&__p[3] = (float)((float)(v228 - v4) * 0.000001);
        v229 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CMAccessoryWalkingDetector::resetBuffersIfTimeWentFarBackward(const uint64_t)", "CoreLocation: %s\n", v229);
        if (v229 != v290)
          free(v229);
      }
      LODWORD(v23) = 0;
      LODWORD(v22) = 0;
      *(_DWORD *)(v7 + 2208) = 0;
      *(_DWORD *)(v7 + 2728) = 0;
      *(_DWORD *)(v7 + 3248) = 0;
      *(_DWORD *)(v7 + 3768) = 0;
      *(_DWORD *)(v7 + 6008) = 0;
      *(_DWORD *)(v7 + 6528) = 0;
      *(_DWORD *)(v7 + 7048) = 0;
    }
  }
  v31 = v7 + 3776;
  v32 = v23;
  v33 = v23 + (unint64_t)v22;
  v34 = *(unsigned int *)(v7 + 3772);
  if (v33 - 1 >= v34)
    v35 = *(unsigned int *)(v7 + 3772);
  else
    v35 = 0;
  if ((_DWORD)v22 && *(_QWORD *)(v31 + 8 * (v33 - 1 - v35)) >= v4)
  {
    ++*(_DWORD *)(v7 + 7568);
    return;
  }
  v36 = (_WORD *)(v7 + 2208);
  v37 = *(unsigned __int16 *)(v7 + 2210);
  v38 = *(unsigned int *)(v7 + 2212);
  v39 = *(unsigned __int16 *)(v7 + 2208);
  if (v39 + v37 >= v38)
    v40 = *(unsigned int *)(v7 + 2212);
  else
    v40 = 0;
  *(float *)&v36[2 * (v39 + v37 - v40) + 4] = v10;
  if (v38 <= v37)
  {
    if (v39 + 1 < v38)
      LOWORD(v38) = 0;
    *v36 = v39 + 1 - v38;
  }
  else
  {
    *(_WORD *)(v7 + 2210) = v37 + 1;
  }
  v41 = (_WORD *)(v7 + 2728);
  v42 = *(unsigned __int16 *)(v7 + 2730);
  v43 = *(unsigned int *)(v7 + 2732);
  v44 = *(unsigned __int16 *)(v7 + 2728);
  if (v44 + v42 >= v43)
    v45 = *(unsigned int *)(v7 + 2732);
  else
    v45 = 0;
  *(_DWORD *)&v41[2 * (v44 + v42 - v45) + 4] = v12;
  if (v43 <= v42)
  {
    if (v44 + 1 < v43)
      LOWORD(v43) = 0;
    *v41 = v44 + 1 - v43;
  }
  else
  {
    *(_WORD *)(v7 + 2730) = v42 + 1;
  }
  v46 = (_WORD *)(v7 + 3248);
  v47 = *(unsigned __int16 *)(v7 + 3250);
  v48 = *(unsigned int *)(v7 + 3252);
  v49 = *(unsigned __int16 *)(v7 + 3248);
  if (v49 + v47 >= v48)
    v50 = *(unsigned int *)(v7 + 3252);
  else
    v50 = 0;
  *(float *)&v46[2 * (v49 + v47 - v50) + 4] = v14 + 1.0;
  if (v48 <= v47)
  {
    if (v49 + 1 < v48)
      LOWORD(v48) = 0;
    *v46 = v49 + 1 - v48;
  }
  else
  {
    *(_WORD *)(v7 + 3250) = v47 + 1;
  }
  v51 = (_WORD *)(v7 + 3768);
  if (v33 >= v34)
    v52 = v34;
  else
    v52 = 0;
  *(_QWORD *)(v31 + 8 * (v33 - v52)) = v4;
  if (v34 <= v22)
  {
    v53 = v23 + 1;
    if (v32 + 1 >= v34)
      v54 = v34;
    else
      v54 = 0;
    LOWORD(v23) = v53 - v54;
    *v51 = v23;
  }
  else
  {
    LOWORD(v22) = v22 + 1;
    *(_WORD *)(v7 + 3770) = v22;
  }
  v55 = *(unsigned __int16 *)(v7 + 6010);
  v56 = *(unsigned int *)(v7 + 6012);
  v57 = (float *)(v7 + 6016);
  v58 = *(unsigned __int16 *)(v7 + 6008);
  if (v58 + v55 >= v56)
    v59 = *(unsigned int *)(v7 + 6012);
  else
    v59 = 0;
  v57[v58 + v55 - v59] = v21;
  if (v56 <= v55)
  {
    if (v58 + 1 < v56)
      LOWORD(v56) = 0;
    *(_WORD *)(v7 + 6008) = v58 + 1 - v56;
  }
  else
  {
    *(_WORD *)(v7 + 6010) = v55 + 1;
  }
  v60 = *(unsigned __int16 *)(v7 + 6530);
  v61 = *(unsigned int *)(v7 + 6532);
  v62 = (float *)(v7 + 6536);
  v63 = *(unsigned __int16 *)(v7 + 6528);
  if (v63 + v60 >= v61)
    v64 = *(unsigned int *)(v7 + 6532);
  else
    v64 = 0;
  v62[v63 + v60 - v64] = v17;
  v241 = (unsigned __int16 *)(v7 + 2728);
  v242 = (unsigned __int16 *)(v7 + 2208);
  v239 = (unsigned __int16 *)(v7 + 6008);
  v240 = (unsigned __int16 *)(v7 + 3248);
  v238 = (unsigned __int16 *)(v7 + 6528);
  if (v61 <= v60)
  {
    if (v63 + 1 < v61)
      LOWORD(v61) = 0;
    *(_WORD *)(v7 + 6528) = v63 + 1 - v61;
  }
  else
  {
    *(_WORD *)(v7 + 6530) = v60 + 1;
  }
  v65 = *(unsigned __int16 *)(v7 + 7050);
  v66 = *(unsigned int *)(v7 + 7052);
  v67 = (float *)(v7 + 7056);
  v68 = *(unsigned __int16 *)(v7 + 7048);
  if (v68 + v65 >= v66)
    v69 = *(unsigned int *)(v7 + 7052);
  else
    v69 = 0;
  v67[v68 + v65 - v69] = v19;
  v237 = (unsigned __int16 *)(v7 + 7048);
  if (v66 <= v65)
  {
    if (v68 + 1 < v66)
      LOWORD(v66) = 0;
    *(_WORD *)(v7 + 7048) = v68 + 1 - v66;
  }
  else
  {
    *(_WORD *)(v7 + 7050) = v65 + 1;
  }
  if ((_WORD)v22)
  {
    v70 = (unsigned __int16)v22 + (unint64_t)(unsigned __int16)v23 - 1;
    v71 = v70 >= v34 ? v34 : 0;
    v72 = *(_QWORD *)(v31 + 8 * (v70 - v71));
    v73 = (_QWORD *)sub_18F383E04((unsigned __int16 *)(v7 + 3768), 0);
    LODWORD(v74) = *(unsigned __int16 *)(v7 + 3770);
    if ((unint64_t)(v72 - *v73 - 2540001) < 0xFFFFFFFFFFD8EFFFLL || (_DWORD)v74 == 128)
    {
      if (v74 < 2)
      {
        v75 = 0;
      }
      else
      {
        v75 = 0;
        v76 = 1;
        do
        {
          v77 = *(_QWORD *)sub_18F383E04((unsigned __int16 *)(v7 + 3768), v76);
          v78 = v76 - 1;
          v79 = (_QWORD *)sub_18F383E04((unsigned __int16 *)(v7 + 3768), v78);
          if (v77 - *v79 > v75)
            v75 = v77 - *v79;
          v74 = *(unsigned __int16 *)(v7 + 3770);
          v76 = v78 + 2;
        }
        while (v76 < v74);
      }
      v80 = *(unsigned __int16 *)(v7 + 2210);
      v81 = (float)v80 / 2.56;
      BYTE14(v244) = v75 > 0x493E0;
      *((float *)&v245 + 3) = v81;
      *(float *)&v246 = (float)v75 / 1000000.0;
      BYTE8(v245) = v74 < 0x80;
      if (v74 <= 0x7F)
      {
        memset(__p, 0, 24);
        if ((_DWORD)v74)
        {
          v82 = 0;
          do
          {
            v83 = *(_QWORD *)sub_18F383E04((unsigned __int16 *)(v7 + 3768), v82);
            v84 = (float)(unint64_t)(v83 - *(_QWORD *)sub_18F383E04((unsigned __int16 *)(v7 + 3768), 0));
            v85 = (char *)__p[1];
            if (__p[1] >= __p[2])
            {
              v87 = (char *)__p[0];
              v88 = ((char *)__p[1] - (char *)__p[0]) >> 2;
              v89 = v88 + 1;
              if ((unint64_t)(v88 + 1) >> 62)
                sub_18F26F8C0();
              v90 = (char *)__p[2] - (char *)__p[0];
              if (((char *)__p[2] - (char *)__p[0]) >> 1 > v89)
                v89 = v90 >> 1;
              if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL)
                v91 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v91 = v89;
              if (v91)
              {
                v92 = (char *)sub_18F26FB8C((uint64_t)&__p[2], v91);
                v85 = (char *)__p[1];
                v87 = (char *)__p[0];
              }
              else
              {
                v92 = 0;
              }
              v93 = (float *)&v92[4 * v88];
              *v93 = v84;
              v86 = v93 + 1;
              while (v85 != v87)
              {
                v94 = *((_DWORD *)v85 - 1);
                v85 -= 4;
                *((_DWORD *)v93-- - 1) = v94;
              }
              __p[0] = v93;
              __p[1] = v86;
              __p[2] = &v92[4 * v91];
              if (v87)
                operator delete(v87);
            }
            else
            {
              *(float *)__p[1] = v84;
              v86 = v85 + 4;
            }
            __p[1] = v86;
            ++v82;
          }
          while (v82 < *(unsigned __int16 *)(v7 + 3770));
          v95 = __p[0];
        }
        else
        {
          v86 = 0;
          v95 = 0;
        }
        v284[0] = 0;
        v283 = 0;
        v284[1] = 0;
        sub_18F367FC0(&v283, v95, (uint64_t)v86, ((_BYTE *)v86 - (_BYTE *)v95) >> 2);
        sub_18F385DF0(v7, (uint64_t)&v283, v242, 2);
        if (v283)
        {
          v284[0] = v283;
          operator delete(v283);
        }
        v282[0] = 0;
        v281 = 0;
        v282[1] = 0;
        sub_18F367FC0(&v281, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
        sub_18F385DF0(v7, (uint64_t)&v281, v241, 2);
        if (v281)
        {
          v282[0] = v281;
          operator delete(v281);
        }
        v279 = 0;
        v278 = 0;
        v280 = 0;
        sub_18F367FC0(&v278, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
        sub_18F385DF0(v7, (uint64_t)&v278, v240, 2);
        if (v278)
        {
          v279 = v278;
          operator delete(v278);
        }
        v276 = 0;
        v275 = 0;
        v277 = 0;
        sub_18F367FC0(&v275, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
        sub_18F385DF0(v7, (uint64_t)&v275, v239, 1);
        if (v275)
        {
          v276 = v275;
          operator delete(v275);
        }
        v272 = 0;
        v273 = 0;
        v274 = 0;
        sub_18F367FC0(&v272, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
        sub_18F385DF0(v7, (uint64_t)&v272, v238, 1);
        if (v272)
        {
          v273 = v272;
          operator delete(v272);
        }
        memset(v247, 0, 24);
        sub_18F367FC0(v247, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
        sub_18F385DF0(v7, (uint64_t)v247, v237, 1);
        if (v247[0])
        {
          v247[1] = v247[0];
          operator delete(v247[0]);
        }
        v96 = *(_QWORD *)sub_18F383E04((unsigned __int16 *)(v7 + 3768), 0);
        *(_DWORD *)(v7 + 3768) = 0;
        if (*(_DWORD *)(v7 + 4804) != *(_DWORD *)(v7 + 3772))
        {
          if (qword_1ECEDEE88 != -1)
            dispatch_once(&qword_1ECEDEE88, &unk_1E29563B0);
          v231 = off_1ECEDEE80;
          if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
          {
            v232 = *(unsigned int *)(v7 + 3772);
            v233 = *(unsigned int *)(v7 + 4804);
            *(_DWORD *)v290 = 134218240;
            *(_QWORD *)&v290[4] = v232;
            *(_WORD *)v291 = 2048;
            *(_QWORD *)&v291[2] = v233;
            _os_log_impl(&dword_18F1DC000, v231, OS_LOG_TYPE_FAULT, "Assertion failed: rhs.capacity() == capacity(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 70,capacity,%zu,%zu.", v290, 0x16u);
          }
          if (sub_18F1FCA08(115, 0))
          {
            bzero(v290, 0x65CuLL);
            if (qword_1ECEDEE88 != -1)
              dispatch_once(&qword_1ECEDEE88, &unk_1E29563B0);
            v234 = *(unsigned int *)(v7 + 3772);
            v235 = *(unsigned int *)(v7 + 4804);
            v286 = 134218240;
            v287 = v234;
            v288 = 2048;
            v289 = v235;
            v236 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 0, "void CMQueue<unsigned long long>::deepCopy(const CMQueue<T> &) [T = unsigned long long]", "CoreLocation: %s\n", v236);
            if (v236 != v290)
              free(v236);
          }
        }
        if (*(_WORD *)(v7 + 4802))
        {
          v97 = 0;
          do
          {
            v98 = (_QWORD *)sub_18F383E04((unsigned __int16 *)(v7 + 4800), v97);
            v99 = *(unsigned __int16 *)(v7 + 3770);
            v100 = *(unsigned int *)(v7 + 3772);
            v101 = *(unsigned __int16 *)(v7 + 3768);
            if (v101 + v99 >= v100)
              v102 = *(unsigned int *)(v7 + 3772);
            else
              v102 = 0;
            *(_QWORD *)(v31 + 8 * (v101 + v99 - v102)) = *v98;
            if (v100 <= v99)
            {
              if (v101 + 1 < v100)
                LOWORD(v100) = 0;
              *v51 = v101 + 1 - v100;
            }
            else
            {
              *(_WORD *)(v7 + 3770) = v99 + 1;
            }
            ++v97;
          }
          while (v97 < *(unsigned __int16 *)(v7 + 4802));
          if (*(_WORD *)(v7 + 4802))
          {
            v103 = 0;
            do
            {
              v104 = (_QWORD *)sub_18F383E04((unsigned __int16 *)(v7 + 3768), v103);
              *v104 += v96;
              ++v103;
            }
            while (v103 < *(unsigned __int16 *)(v7 + 4802));
          }
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v80 = *(unsigned __int16 *)(v7 + 2210);
      }
      __p[0] = (void *)0x10000000000;
      v283 = (void *)0x10000000000;
      v281 = (void *)0x10000000000;
      if (v80)
      {
        v105 = 0;
        do
        {
          v106 = (_DWORD *)sub_18F3410E0(v242, v105);
          sub_18F201BDC((unsigned __int16 *)__p, v106);
          v107 = (_DWORD *)sub_18F3410E0(v241, v105);
          sub_18F201BDC((unsigned __int16 *)&v283, v107);
          v108 = (_DWORD *)sub_18F3410E0(v240, v105);
          sub_18F201BDC((unsigned __int16 *)&v281, v108);
          ++v105;
          v109 = *(unsigned __int16 *)(v7 + 2210);
        }
        while (v105 < v109);
        if (v109 > 0xFF)
        {
LABEL_177:
          sub_18F4E5D40(v7 + 8, &v278, (unsigned __int16 *)__p);
          sub_18F4E5D40(v7 + 8, &v275, (unsigned __int16 *)&v283);
          sub_18F4E5D40(v7 + 8, &v272, (unsigned __int16 *)&v281);
          v136 = sub_18F41A678(*(_DWORD *)v7, *(_DWORD *)(v7 + 4), (uint64_t)&v278);
          v137 = v136 + sub_18F41A678(*(_DWORD *)v7, *(_DWORD *)(v7 + 4), (uint64_t)&v275);
          *(float *)&v243 = v137;
          v138 = sub_18F41A678(*(_DWORD *)v7, *(_DWORD *)(v7 + 4), (uint64_t)&v272);
          v139 = v138 / v137;
          *((float *)&v243 + 1) = v138;
          *((float *)&v243 + 2) = v138 / v137;
          v140 = sub_18F41A878(*(_DWORD *)v7, *(_DWORD *)(v7 + 4), (uint64_t)&v272);
          *((float *)&v243 + 3) = v140;
          v141 = *(unsigned __int16 *)(v7 + 6010);
          v142 = 0.0;
          v143 = 0.0;
          if (*(_WORD *)(v7 + 6010))
          {
            do
            {
              v144 = *v57++;
              v143 = v143 + fabsf(v144);
              --v141;
            }
            while (v141);
            v143 = v143 * 57.2957795 * 20000.0 / 1000000.0;
          }
          *(float *)&v244 = v143;
          v145 = *(unsigned __int16 *)(v7 + 6530);
          if (*(_WORD *)(v7 + 6530))
          {
            v146 = 0.0;
            do
            {
              v147 = *v62++;
              v146 = v146 + fabsf(v147);
              --v145;
            }
            while (v145);
            v142 = v146 * 57.2957795 * 20000.0 / 1000000.0;
          }
          *((float *)&v244 + 1) = v142;
          v148 = *(unsigned __int16 *)(v7 + 7050);
          if (*(_WORD *)(v7 + 7050))
          {
            v149 = 0.0;
            do
            {
              v150 = *v67++;
              v149 = v149 + fabsf(v150);
              --v148;
            }
            while (v148);
            v151 = v149 * 57.2957795 * 20000.0 / 1000000.0;
          }
          else
          {
            v151 = 0.0;
          }
          v152 = 0;
          *((float *)&v244 + 2) = v151;
          if (v75 <= 0x493E0 && v81 >= 15.0 && v137 > 1.8)
          {
            v153 = v139 <= 0.4 || v140 <= 0.25;
            v154 = v153 || v143 < 5.0;
            if (!v154 && v143 <= 120.0)
            {
              v156 = v142 >= 5.0;
              if (v142 > 80.0)
                v156 = 0;
              v152 = v151 >= 0.0 && v156;
            }
          }
          WORD6(v244) = v152;
          v157 = (_WORD *)(v7 + 5832);
          v158 = *(unsigned __int16 *)(v7 + 5834);
          if (v158 == 3)
          {
            for (i = 1; i < v158; ++i)
            {
              v152 &= *(_BYTE *)(sub_18F38611C((unsigned __int16 *)(v7 + 5832), i) + 28);
              BYTE13(v244) = v152;
              v158 = *(unsigned __int16 *)(v7 + 5834);
            }
          }
          v160 = *(unsigned __int16 *)(v7 + 3768) + (unint64_t)*(unsigned __int16 *)(v7 + 3770) - 1;
          v161 = *(unsigned int *)(v7 + 3772);
          if (v160 < v161)
            v161 = 0;
          *(_QWORD *)&v245 = *(_QWORD *)(v31 + 8 * (v160 - v161));
          HIDWORD(v246) = *(_DWORD *)(v7 + 7568);
          v162 = *(unsigned int *)(v7 + 5836);
          v163 = v7 + 5840;
          v164 = v158 + *(unsigned __int16 *)(v7 + 5832);
          if (v164 < v162)
            v162 = 0;
          v165 = v163 + 56 * (v164 - v162);
          *(_QWORD *)(v165 + 48) = v246;
          v166 = v244;
          *(_OWORD *)v165 = v243;
          *(_OWORD *)(v165 + 16) = v166;
          *(_OWORD *)(v165 + 32) = v245;
          v167 = *(unsigned __int16 *)(v7 + 5834);
          v168 = *(unsigned int *)(v7 + 5836);
          if (v168 <= v167)
          {
            v169 = (unsigned __int16)*v157 + 1;
            if (v169 >= v168)
              v170 = *(_DWORD *)(v7 + 5836);
            else
              v170 = 0;
            *v157 = v169 - v170;
          }
          else
          {
            LOWORD(v167) = v167 + 1;
            *(_WORD *)(v7 + 5834) = v167;
          }
          v171 = *(void (**)(_QWORD, _QWORD))(v7 + 7576);
          if (v171 && (unsigned __int16)v167 == 3 && *(_QWORD *)(v7 + 7584))
          {
            v172 = (unsigned __int16)*v157 + 2;
            if (v172 < v168)
              v168 = 0;
            v171(*(unsigned __int8 *)(v163 + 56 * (v172 - v168) + 29), *(_QWORD *)(v163 + 56 * (v172 - v168) + 32));
          }
          v173 = *(uint64_t **)(v7 + 7592);
          if (v173)
            sub_18F365210(v173, (uint64_t)&v243);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953008);
          v174 = qword_1EE16D820;
          if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v290 = 134221568;
            *(double *)&v290[4] = *(float *)&v243;
            *(_WORD *)v291 = 2048;
            *(double *)&v291[2] = *((float *)&v243 + 1);
            v292 = 2048;
            v293 = *((float *)&v243 + 2);
            v294 = 2048;
            v295 = *((float *)&v243 + 3);
            v296 = 2048;
            v297 = *(float *)&v244;
            v298 = 2048;
            v299 = *((float *)&v244 + 1);
            v300 = 2048;
            v301 = *((float *)&v244 + 2);
            v302 = 1024;
            v303 = BYTE12(v244);
            v304 = 1024;
            v305 = BYTE13(v244);
            v306 = 1024;
            v307 = BYTE14(v244);
            v308 = 2048;
            v309 = v245;
            v310 = 1024;
            v311 = BYTE8(v245);
            v312 = 2048;
            v313 = *((float *)&v245 + 3);
            v314 = 2048;
            v315 = *(float *)&v246;
            v316 = 1024;
            v317 = HIDWORD(v246);
            _os_log_impl(&dword_18F1DC000, v174, OS_LOG_TYPE_INFO, "[CMAccessoryWalkingDetector],pedEnergyPlane,%f,pedEnergyZ,%f,pedEnergyZByPlane,%f,pedEnergyZPeak,%f,thetaRollFaceDeg,%f,thetaPitchFaceDeg,%f,thetaYawFaceDeg,%f,isWalkingRaw,%d,isWalkingFiltered,%d,isMissingSamples,%d,timestamp,%lld,isInterpolated,%d,dataRate,%f,maxSampleDeltaInSecond,%f,reversedTimestampCounts,%d", v290, 0x84u);
          }
          if (sub_18F1FCA08(115, 2))
          {
            bzero(v290, 0x65CuLL);
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2953008);
            LODWORD(v247[0]) = 134221568;
            *(double *)((char *)v247 + 4) = *(float *)&v243;
            WORD2(v247[1]) = 2048;
            *(double *)((char *)&v247[1] + 6) = *((float *)&v243 + 1);
            HIWORD(v247[2]) = 2048;
            *(double *)&v247[3] = *((float *)&v243 + 2);
            v248 = 2048;
            v249 = *((float *)&v243 + 3);
            v250 = 2048;
            v251 = *(float *)&v244;
            v252 = 2048;
            v253 = *((float *)&v244 + 1);
            v254 = 2048;
            v255 = *((float *)&v244 + 2);
            v256 = 1024;
            v257 = BYTE12(v244);
            v258 = 1024;
            v259 = BYTE13(v244);
            v260 = 1024;
            v261 = BYTE14(v244);
            v262 = 2048;
            v263 = v245;
            v264 = 1024;
            v265 = BYTE8(v245);
            v266 = 2048;
            v267 = *((float *)&v245 + 3);
            v268 = 2048;
            v269 = *(float *)&v246;
            v270 = 1024;
            v271 = HIDWORD(v246);
            v230 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 2, "void CMAccessoryWalkingDetector::processData()", "CoreLocation: %s\n", v230);
            if (v230 != v290)
              free(v230);
          }
          v175 = *(unsigned __int16 *)(v7 + 5832) + (unint64_t)*(unsigned __int16 *)(v7 + 5834) - 1;
          v176 = *(unsigned int *)(v7 + 5836);
          if (v175 < v176)
            v176 = 0;
          if (*(_BYTE *)(v163 + 56 * (v175 - v176) + 30))
          {
            *(_DWORD *)v242 = 0;
            *(_DWORD *)v241 = 0;
            *(_DWORD *)v240 = 0;
            *(_DWORD *)v51 = 0;
            *(_DWORD *)v239 = 0;
            *(_DWORD *)v238 = 0;
            *(_DWORD *)v237 = 0;
          }
          else
          {
            v177 = *(unsigned __int16 *)(v7 + 2210);
            if (v177 >= 0x41)
            {
              v178 = (v177 - 64);
              v179 = *(unsigned __int16 *)(v7 + 2208);
              v180 = *(unsigned int *)(v7 + 2212);
              do
              {
                if ((_WORD)v177)
                {
                  v181 = v179 + 1;
                  if (v181 >= v180)
                    v182 = v180;
                  else
                    v182 = 0;
                  v183 = v181 - v182;
                  v179 = v183;
                  *(_WORD *)(v7 + 2208) = v183;
                  LOWORD(v177) = v177 - 1;
                  *(_WORD *)(v7 + 2210) = v177;
                }
                else
                {
                  LOWORD(v177) = 0;
                }
                --v178;
              }
              while (v178);
            }
            v184 = *(unsigned __int16 *)(v7 + 2730);
            if (v184 >= 0x41)
            {
              v185 = (v184 - 64);
              v186 = *(unsigned __int16 *)(v7 + 2728);
              v187 = *(unsigned int *)(v7 + 2732);
              do
              {
                if ((_WORD)v184)
                {
                  v188 = v186 + 1;
                  if (v188 >= v187)
                    v189 = v187;
                  else
                    v189 = 0;
                  v190 = v188 - v189;
                  v186 = v190;
                  *(_WORD *)(v7 + 2728) = v190;
                  LOWORD(v184) = v184 - 1;
                  *(_WORD *)(v7 + 2730) = v184;
                }
                else
                {
                  LOWORD(v184) = 0;
                }
                --v185;
              }
              while (v185);
            }
            v191 = *(unsigned __int16 *)(v7 + 3250);
            if (v191 >= 0x41)
            {
              v192 = (v191 - 64);
              v193 = *(unsigned __int16 *)(v7 + 3248);
              v194 = *(unsigned int *)(v7 + 3252);
              do
              {
                if ((_WORD)v191)
                {
                  v195 = v193 + 1;
                  if (v195 >= v194)
                    v196 = v194;
                  else
                    v196 = 0;
                  v197 = v195 - v196;
                  v193 = v197;
                  *(_WORD *)(v7 + 3248) = v197;
                  LOWORD(v191) = v191 - 1;
                  *(_WORD *)(v7 + 3250) = v191;
                }
                else
                {
                  LOWORD(v191) = 0;
                }
                --v192;
              }
              while (v192);
            }
            v198 = *(unsigned __int16 *)(v7 + 3770);
            if (v198 >= 0x41)
            {
              v199 = (v198 - 64);
              v200 = *(unsigned __int16 *)(v7 + 3768);
              v201 = *(unsigned int *)(v7 + 3772);
              do
              {
                if ((_WORD)v198)
                {
                  v202 = v200 + 1;
                  if (v202 >= v201)
                    v203 = v201;
                  else
                    v203 = 0;
                  v204 = v202 - v203;
                  v200 = v204;
                  *(_WORD *)(v7 + 3768) = v204;
                  LOWORD(v198) = v198 - 1;
                  *(_WORD *)(v7 + 3770) = v198;
                }
                else
                {
                  LOWORD(v198) = 0;
                }
                --v199;
              }
              while (v199);
            }
            v205 = *(unsigned __int16 *)(v7 + 6010);
            if (v205 >= 0x41)
            {
              v206 = (v205 - 64);
              v207 = *(unsigned __int16 *)(v7 + 6008);
              v208 = *(unsigned int *)(v7 + 6012);
              do
              {
                if ((_WORD)v205)
                {
                  v209 = v207 + 1;
                  if (v209 >= v208)
                    v210 = v208;
                  else
                    v210 = 0;
                  v211 = v209 - v210;
                  v207 = v211;
                  *(_WORD *)(v7 + 6008) = v211;
                  LOWORD(v205) = v205 - 1;
                  *(_WORD *)(v7 + 6010) = v205;
                }
                else
                {
                  LOWORD(v205) = 0;
                }
                --v206;
              }
              while (v206);
            }
            v212 = *(unsigned __int16 *)(v7 + 6530);
            if (v212 >= 0x41)
            {
              v213 = (v212 - 64);
              v214 = *(unsigned __int16 *)(v7 + 6528);
              v215 = *(unsigned int *)(v7 + 6532);
              do
              {
                if ((_WORD)v212)
                {
                  v216 = v214 + 1;
                  if (v216 >= v215)
                    v217 = v215;
                  else
                    v217 = 0;
                  v218 = v216 - v217;
                  v214 = v218;
                  *(_WORD *)(v7 + 6528) = v218;
                  LOWORD(v212) = v212 - 1;
                  *(_WORD *)(v7 + 6530) = v212;
                }
                else
                {
                  LOWORD(v212) = 0;
                }
                --v213;
              }
              while (v213);
            }
            v219 = *(unsigned __int16 *)(v7 + 7050);
            if (v219 >= 0x41)
            {
              v220 = (v219 - 64);
              v221 = *(unsigned __int16 *)(v7 + 7048);
              v222 = *(unsigned int *)(v7 + 7052);
              do
              {
                if ((_WORD)v219)
                {
                  v223 = v221 + 1;
                  if (v223 >= v222)
                    v224 = v222;
                  else
                    v224 = 0;
                  v225 = v223 - v224;
                  v221 = v225;
                  *(_WORD *)(v7 + 7048) = v225;
                  LOWORD(v219) = v219 - 1;
                  *(_WORD *)(v7 + 7050) = v219;
                }
                else
                {
                  LOWORD(v219) = 0;
                }
                --v220;
              }
              while (v220);
            }
          }
          *(_DWORD *)(v7 + 7568) = 0;
          return;
        }
        v110 = (unsigned __int16)v281;
        v111 = (unsigned __int16)v283;
        v112 = LOWORD(__p[0]);
        v113 = HIDWORD(__p[0]);
        v114 = HIDWORD(v283);
        v115 = HIDWORD(v281);
        v116 = WORD1(__p[0]);
        v117 = WORD1(v283);
        v118 = WORD1(v281);
      }
      else
      {
        v118 = 0;
        v117 = 0;
        v116 = 0;
        v112 = 0;
        v111 = 0;
        v110 = 0;
        v109 = 0;
        v115 = 256;
        v114 = 256;
        v113 = 256;
      }
      v119 = v109 - 256;
      do
      {
        v120 = v112 + v116;
        if (v120 >= v113)
          v121 = v113;
        else
          v121 = 0;
        *((_DWORD *)&__p[1] + v120 - v121) = 0;
        if (v113 <= v116)
        {
          v122 = v112 + 1;
          if (v122 >= v113)
            v123 = v113;
          else
            v123 = 0;
          v124 = v122 - v123;
          v112 = v124;
          LOWORD(__p[0]) = v124;
        }
        else
        {
          WORD1(__p[0]) = ++v116;
        }
        v125 = v111 + v117;
        if (v125 >= v114)
          v126 = v114;
        else
          v126 = 0;
        *((_DWORD *)v284 + v125 - v126) = 0;
        if (v114 <= v117)
        {
          v127 = v111 + 1;
          if (v127 >= v114)
            v128 = v114;
          else
            v128 = 0;
          v129 = v127 - v128;
          v111 = v129;
          LOWORD(v283) = v129;
        }
        else
        {
          WORD1(v283) = ++v117;
        }
        v130 = v110 + v118;
        if (v130 >= v115)
          v131 = v115;
        else
          v131 = 0;
        *((_DWORD *)v282 + v130 - v131) = 0;
        if (v115 <= v118)
        {
          v132 = v110 + 1;
          if (v132 >= v115)
            v133 = v115;
          else
            v133 = 0;
          v134 = v132 - v133;
          v110 = v134;
          LOWORD(v281) = v134;
        }
        else
        {
          WORD1(v281) = ++v118;
        }
      }
      while (!__CFADD__(v119++, 1));
      goto LABEL_177;
    }
  }
}

void sub_18F385D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p)
{
  void *v26;

  if (__p)
    operator delete(__p);
  v26 = (void *)STACK[0xF20];
  if (STACK[0xF20])
  {
    STACK[0xF28] = (unint64_t)v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

void sub_18F385DF0(uint64_t a1, uint64_t a2, unsigned __int16 *a3, int a4)
{
  unint64_t v8;
  char *v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  void *v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  float v21;
  float *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _BYTE *v40;
  uint64_t v41;
  void *__p;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;

  v8 = a3[1];
  v45 = 0;
  v46 = 0;
  v47 = 0;
  if (v8)
  {
    sub_18F26FB4C(&v45, v8);
    v9 = (char *)v46;
    bzero(v46, 4 * v8);
    v10 = 0;
    v46 = &v9[4 * v8];
    do
    {
      v11 = (_DWORD *)sub_18F3410E0(a3, v10);
      *((_DWORD *)v45 + v10++) = *v11;
    }
    while (v8 != v10);
  }
  *(_DWORD *)a3 = 0;
  if (*(unsigned __int16 *)(a1 + 4802) >= 0x80u)
    v12 = 128;
  else
    v12 = *(unsigned __int16 *)(a1 + 4802);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = (unsigned __int16 *)(a1 + 4800);
    while (1)
    {
      v15 = *(_QWORD *)sub_18F383E04(v14, v13);
      __p = 0;
      v43 = 0;
      v44 = 0;
      sub_18F367FC0(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      v39 = 0;
      v40 = 0;
      v41 = 0;
      sub_18F367FC0(&v39, v45, (uint64_t)v46, ((_BYTE *)v46 - (_BYTE *)v45) >> 2);
      v16 = __p;
      v17 = v39;
      v18 = v40 - v39;
      v19 = (unint64_t)(v40 - v39) >> 2;
      if ((int)v19 <= a4)
        v20 = (unint64_t)(v40 - v39) >> 2;
      else
        v20 = a4 + 1;
      v21 = (float)v15;
      v22 = (float *)v39;
      if (*(float *)__p >= (float)v15)
        goto LABEL_20;
      v23 = (v18 << 30) - 0x100000000;
      if (*(float *)((char *)__p + (v23 >> 30)) <= v21)
        break;
      if ((int)v19 < 1)
      {
        LODWORD(v24) = 0;
      }
      else
      {
        v24 = 0;
        v25 = (v18 >> 2);
        while (*((float *)__p + v24) < v21)
        {
          if (v25 == ++v24)
          {
            v24 = (unint64_t)(v40 - v39) >> 2;
            break;
          }
        }
      }
      if (v20 < 1)
      {
        v26 = 0.0;
      }
      else
      {
        v31 = 0;
        v32 = (v24 - (v20 >> 1)) & ~((int)(v24 - (v20 >> 1)) >> 31);
        if (v32 + v20 <= (int)v19)
          v33 = v32;
        else
          v33 = v19 - v20;
        v34 = v33 + v20;
        v26 = 0.0;
        v35 = v33;
        do
        {
          v36 = 1.0;
          v37 = v31;
          v38 = v33;
          do
          {
            if (v37)
              v36 = (float)(v36 * (float)(v21 - *((float *)__p + v38)))
                  / (float)(*((float *)__p + v35) - *((float *)__p + v38));
            ++v38;
            --v37;
          }
          while (v38 < v34);
          v26 = v26 + (float)(*(float *)&v39[4 * v35++] * v36);
          ++v31;
        }
        while (v35 < v34);
      }
LABEL_21:
      v27 = a3[1];
      v28 = *((unsigned int *)a3 + 1);
      v29 = *a3;
      if (v29 + v27 >= v28)
        v30 = *((unsigned int *)a3 + 1);
      else
        v30 = 0;
      *(float *)&a3[2 * (v29 + v27 - v30) + 4] = v26;
      if (v28 <= v27)
      {
        if (v29 + 1 < v28)
          LOWORD(v28) = 0;
        *a3 = v29 + 1 - v28;
        if (!v17)
          goto LABEL_31;
      }
      else
      {
        a3[1] = v27 + 1;
        if (!v17)
          goto LABEL_31;
      }
      v40 = v17;
      operator delete(v17);
      v16 = __p;
LABEL_31:
      if (v16)
      {
        v43 = v16;
        operator delete(v16);
      }
      if (++v13 == v12)
        goto LABEL_48;
    }
    v22 = (float *)&v39[4 * (v23 >> 32)];
LABEL_20:
    v26 = *v22;
    goto LABEL_21;
  }
LABEL_48:
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
}

void sub_18F3860B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

os_log_t sub_18F3860F0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1EE16D820 = (uint64_t)result;
  return result;
}

uint64_t sub_18F38611C(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E29563B0);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v11 = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E29563B0);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T &CMQueue<DistViewDetection>::operator[](const size_t) const [T = DistViewDetection]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[28 * (v4 - v5) + 4];
}

id *sub_18F386354(id *a1, void *a2, void *a3, void *a4)
{
  id v8;
  id v9;
  id v10;
  id *v11;
  SEL v12;
  uint64_t v13;
  id v14;
  objc_super v16;

  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)RMConnectionClient;
    v11 = (id *)objc_msgSendSuper2(&v16, sel_init);
    a1 = v11;
    if (v11)
    {
      objc_storeStrong(v11 + 4, a2);
      objc_storeStrong(a1 + 3, a3);
      objc_setProperty_nonatomic_copy(a1, v12, v10, 48);
      v13 = objc_opt_new();
      v14 = a1[7];
      a1[7] = (id)v13;

      *((_BYTE *)a1 + 8) = 1;
    }
  }

  return a1;
}

void sub_18F38642C(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  id *v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  id v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  uint64_t v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v2 = *(id *)(a1 + 56);
    v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v25, (uint64_t)v31, 16);
    if (!v4)
    {
      v6 = (id *)v2;
LABEL_31:

      return;
    }
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v26;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v26 != v7)
          objc_enumerationMutation(v2);
        v9 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * v8);
        if (v9 && *(_QWORD *)(v9 + 24))
        {
          v10 = (id *)(id)v9;
          v11 = v6;
          v6 = v10;
        }
        else
        {
          if (qword_1EE16DD28 != -1)
            dispatch_once(&qword_1EE16DD28, &unk_1E2953028);
          v12 = (void *)qword_1EE16DD30;
          if (os_log_type_enabled((os_log_t)qword_1EE16DD30, OS_LOG_TYPE_DEFAULT))
          {
            if (v9)
              v13 = *(_QWORD *)(v9 + 8);
            else
              v13 = 0;
            *(_DWORD *)buf = 138412290;
            v30 = v13;
            v14 = v12;
            _os_log_impl(&dword_18F1DC000, v14, OS_LOG_TYPE_DEFAULT, "Sending cached message %@", buf, 0xCu);

          }
          v15 = *(void **)(a1 + 16);
          if (v9)
          {
            v16 = *(id *)(v9 + 8);
            v17 = *(void **)(v9 + 16);
          }
          else
          {
            v16 = 0;
            v17 = 0;
          }
          v11 = v15;
          sub_18F35D4F0((uint64_t)v11, v16, v17);

        }
        ++v8;
      }
      while (v5 != v8);
      v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v18, (uint64_t)&v25, (uint64_t)v31, 16);
      v5 = v19;
    }
    while (v19);

    if (v6)
    {
      if (qword_1EE16DD28 != -1)
        dispatch_once(&qword_1EE16DD28, &unk_1E2953028);
      v20 = qword_1EE16DD30;
      if (os_log_type_enabled((os_log_t)qword_1EE16DD30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_DEFAULT, "Restoring the streaming channel", buf, 2u);
      }
      v21 = v6[1];
      v22 = v6[3];
      v23 = v6[2];
      v24 = v21;
      sub_18F386718(a1, v24, v23, v22);

      goto LABEL_31;
    }
  }
}

id sub_18F3866D8()
{
  if (qword_1EE16DD28 != -1)
    dispatch_once(&qword_1EE16DD28, &unk_1E2953028);
  return (id)qword_1EE16DD30;
}

void sub_18F386718(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8;
  id v9;
  id v10;
  const char *v11;
  uint64_t v12;
  id v13;
  id v14;
  RMConnectionClientCachedMessage *v15;
  id v16;
  id v17;
  id v18;
  RMConnectionClientCachedMessage *v19;
  void *v20;
  id streamingCallback;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  _QWORD v28[5];
  id v29;
  _BYTE v30[18];
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a3;
  v10 = a4;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
    if (*(_QWORD *)(a1 + 40))
    {
      sub_18F3866D8();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
      {
        *(_QWORD *)v30 = 68289539;
        *(_WORD *)&v30[8] = 2082;
        *(_QWORD *)&v30[10] = "";
        v31 = 2082;
        v32 = "assert";
        v33 = 2081;
        v34 = "!self.streamingDataCallback";
        _os_log_impl(&dword_18F1DC000, v25, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Stream requested while one is already present\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v30, 0x26u);
      }

      sub_18F3866D8();
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_signpost_enabled(v26))
      {
        *(_QWORD *)v30 = 68289539;
        *(_WORD *)&v30[8] = 2082;
        *(_QWORD *)&v30[10] = "";
        v31 = 2082;
        v32 = "assert";
        v33 = 2081;
        v34 = "!self.streamingDataCallback";
        _os_signpost_emit_with_name_impl(&dword_18F1DC000, v26, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Stream requested while one is already present", "{\"msg%{public}.0s\":\"Stream requested while one is already present\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v30, 0x26u);
      }

      sub_18F3866D8();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        *(_QWORD *)v30 = 68289539;
        *(_WORD *)&v30[8] = 2082;
        *(_QWORD *)&v30[10] = "";
        v31 = 2082;
        v32 = "assert";
        v33 = 2081;
        v34 = "!self.streamingDataCallback";
        _os_log_impl(&dword_18F1DC000, v27, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Stream requested while one is already present\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v30, 0x26u);
      }

      abort_report_np();
    }
    objc_setProperty_nonatomic_copy((id)a1, v11, v10, 40);
    v12 = *(_QWORD *)(a1 + 16);
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = sub_18F386BDC;
    v28[3] = &unk_1E29563D8;
    v28[4] = a1;
    v13 = v10;
    v29 = v13;
    sub_18F35E13C(v12, v8, v9, v28);
    v14 = *(id *)(a1 + 56);
    v15 = [RMConnectionClientCachedMessage alloc];
    v16 = v8;
    v17 = v9;
    v18 = v13;
    if (v15)
    {
      *(_QWORD *)v30 = v15;
      *(_QWORD *)&v30[8] = RMConnectionClientCachedMessage;
      v19 = (RMConnectionClientCachedMessage *)objc_msgSendSuper2((objc_super *)v30, sel_init);
      v15 = v19;
      if (v19)
      {
        objc_storeStrong((id *)&v19->_name, a2);
        objc_storeStrong((id *)&v15->_data, a3);
        v20 = _Block_copy(v18);
        streamingCallback = v15->_streamingCallback;
        v15->_streamingCallback = v20;

      }
    }

    objc_msgSend_addObject_(v14, v22, (uint64_t)v15, v23, v24);
  }

}

void sub_18F386A7C(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  RMConnectionEndpoint *v8;
  id v9;
  id *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  xpc_connection_t mach_service;
  uint8_t buf[16];

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
    if (*(_BYTE *)(a1 + 8))
    {
      v2 = objc_retainAutorelease(*(id *)(a1 + 24));
      v7 = (const char *)objc_msgSend_UTF8String(v2, v3, v4, v5, v6);
      mach_service = xpc_connection_create_mach_service(v7, *(dispatch_queue_t *)(a1 + 32), 0);

      v8 = [RMConnectionEndpoint alloc];
      v9 = *(id *)(a1 + 32);
      v10 = sub_18F35D07C(v8, mach_service, v9);
      v11 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v10;

      v12 = *(_QWORD *)(a1 + 16);
      if (v12 && (objc_storeWeak((id *)(v12 + 16), (id)a1), (v13 = *(_QWORD *)(a1 + 16)) != 0))
      {
        objc_storeWeak((id *)(v13 + 24), (id)a1);
        v14 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        v14 = 0;
      }
      sub_18F35D428(v14);

    }
    else
    {
      if (qword_1EE16DD28 != -1)
        dispatch_once(&qword_1EE16DD28, &unk_1E2953028);
      v15 = qword_1EE16DD30;
      if (os_log_type_enabled((os_log_t)qword_1EE16DD30, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_FAULT, "Trying to connect after invalidation", buf, 2u);
      }
    }
  }
}

void sub_18F386BDC(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint8_t v11[16];

  v3 = a2;
  sub_18F386CC0(*(_QWORD *)(a1 + 32));
  if (objc_msgSend_code(v3, v4, v5, v6, v7) == -3
    && ((v8 = *(_QWORD *)(a1 + 32)) == 0 ? (v9 = 0) : (v9 = *(_QWORD *)(v8 + 16)), sub_18F35ECC8(v9)))
  {
    if (qword_1EE16DD28 != -1)
      dispatch_once(&qword_1EE16DD28, &unk_1E2953028);
    v10 = qword_1EE16DD30;
    if (os_log_type_enabled((os_log_t)qword_1EE16DD30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_DEFAULT, "#Warning The streaming connection has been interrupted", v11, 2u);
    }
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_18F386CC0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  SEL v5;
  uint8_t v6[16];

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
    v2 = *(id *)(a1 + 40);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 16);

      if (v3)
      {
        if (qword_1EE16DD28 != -1)
          dispatch_once(&qword_1EE16DD28, &unk_1E2953028);
        v4 = qword_1EE16DD30;
        if (os_log_type_enabled((os_log_t)qword_1EE16DD30, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v6 = 0;
          _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEBUG, "Stopping the streaming session", v6, 2u);
        }
        sub_18F35E0B8(*(_QWORD *)(a1 + 16));
        objc_setProperty_nonatomic_copy((id)a1, v5, 0, 40);
      }
    }
  }
}

void sub_18F386D88(uint64_t a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    sub_18F386CC0(a1);
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v2 = *(id *)(a1 + 56);
    v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v3, (uint64_t)&v15, (uint64_t)v19, 16);
    if (v4)
    {
      v6 = v4;
      v7 = 0;
      v8 = *(_QWORD *)v16;
      while (2)
      {
        v9 = 0;
        v10 = v7 + v6;
        do
        {
          if (*(_QWORD *)v16 != v8)
            objc_enumerationMutation(v2);
          v11 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v9);
          if (v11 && *(_QWORD *)(v11 + 24))
          {

            objc_msgSend_removeObjectAtIndex_(*(void **)(a1 + 56), v12, (v7 + v9), v13, v14, (_QWORD)v15);
            return;
          }
          ++v9;
        }
        while (v6 != v9);
        v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v2, v5, (uint64_t)&v15, (uint64_t)v19, 16);
        v7 = v10;
        if (v6)
          continue;
        break;
      }
    }

  }
}

void sub_18F386EAC(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  SEL v8;
  void *v9;

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
    *(_BYTE *)(a1 + 8) = 0;
    v6 = *(NSObject **)(a1 + 64);
    if (v6)
    {
      dispatch_source_cancel(v6);
      v7 = *(void **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = 0;

    }
    objc_msgSend_removeAllObjects(*(void **)(a1 + 56), v2, v3, v4, v5);
    objc_setProperty_nonatomic_copy((id)a1, v8, 0, 48);
    sub_18F386D88(a1);
    sub_18F35D398(*(_QWORD *)(a1 + 16));
    v9 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;

  }
}

void sub_18F386F24(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 64), a2);
}

void sub_18F386F34(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    v2 = *(NSObject **)(v1 + 32);
  else
    v2 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F386F98;
  block[3] = &unk_1E2956400;
  block[4] = v1;
  dispatch_async(v2, block);
}

void sub_18F386F98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int64_t v8;
  NSObject *v9;
  dispatch_time_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 16))
    {
      sub_18F386F24(v2, 0);
      return;
    }
    *(_QWORD *)(v2 + 72) *= 2;
    v3 = *(_QWORD *)(a1 + 32);
    if (v3 && *(_QWORD *)(v3 + 72) >= 0x81uLL)
      *(_QWORD *)(v3 + 72) = 128;
  }
  if (qword_1EE16DD28 != -1)
    dispatch_once(&qword_1EE16DD28, &unk_1E2953028);
  v4 = qword_1EE16DD30;
  if (os_log_type_enabled((os_log_t)qword_1EE16DD30, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
      v5 = *(_QWORD *)(v5 + 72);
    v11 = 134217984;
    v12 = v5;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEBUG, "Connection stil invalid, next reconnection attempt will be in %lu seconds", (uint8_t *)&v11, 0xCu);
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v7 = *(void **)(v6 + 64);
    v8 = 1000000000 * *(_QWORD *)(v6 + 72);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = v7;
  v10 = dispatch_time(0, v8);
  dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0);

}

void sub_18F3876F4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _xpc_connection_s *v3;
  _QWORD v4[6];

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    if (qword_1EE16DD28 != -1)
      dispatch_once(&qword_1EE16DD28, &unk_1E2953028);
    v2 = qword_1EE16DD30;
    if (os_log_type_enabled((os_log_t)qword_1EE16DD30, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v4[0]) = 0;
      _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEBUG, "Reconnection attempt", (uint8_t *)v4, 2u);
    }
    if (!*(_QWORD *)(v1 + 16))
    {
      sub_18F386A7C(v1);
      sub_18F38642C(v1);
      sub_18F35ECFC(*(id **)(v1 + 16));
      v3 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue();
      v4[0] = MEMORY[0x1E0C809B0];
      v4[1] = 3221225472;
      v4[2] = sub_18F386F34;
      v4[3] = &unk_1E2956400;
      v4[4] = v1;
      xpc_connection_send_barrier(v3, v4);

    }
  }
}

void sub_18F387888()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.RelativeMotion", "ConnectionClient");
  v1 = (void *)qword_1EE16DD30;
  qword_1EE16DD30 = (uint64_t)v0;

}

_QWORD *sub_18F387C84(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E2949710;
  CFRelease(*(CFTypeRef *)(a1 + 72));
  CFRelease(*(CFTypeRef *)(a1 + 80));
  sub_18F1EDCB4((_QWORD *)(a1 + 120));
  sub_18F1EDCB4((_QWORD *)(a1 + 104));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return sub_18F1EDCB4((_QWORD *)a1);
}

void sub_18F387CF8(uint64_t a1)
{
  sub_18F387C84(a1);
  JUMPOUT(0x194001438);
}

void sub_18F387D1C(char *a1, int a2)
{
  char *v2;
  const char **v3;
  int v4;
  const char *v5;
  const __CFString *v6;
  NSObject *v7;
  void *v8;
  int v9;
  int v10;
  stat *v11;
  NSObject *v12;
  const char *v13;
  gid_t v14;
  int v15;
  const char **v16;
  const char *v17;
  __CFString *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __CFString *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *PathComponent;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  const char *v39;
  const char *v40;
  NSObject *v41;
  const char *v42;
  int v43;
  int *v44;
  char *v45;
  const char *v46;
  NSObject *v47;
  const char *v48;
  int v49;
  int *v50;
  char *v51;
  int v52;
  int *v53;
  char *v54;
  NSObject *v55;
  NSObject *v56;
  int v57;
  int v58;
  char *v59;
  const char *v60;
  int v61;
  int *v62;
  char *v63;
  char *v64;
  stat v65;
  int v66;
  const char **v67;
  __int16 v68;
  uid_t st_uid;
  __int16 v70;
  _BYTE v71[10];
  __int16 v72;
  int v73;
  __int16 v74;
  int st_mode;
  __int16 v76;
  int v77;
  stat buf[11];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (a1[96])
    return;
  v2 = a1;
  if (a2)
  {
    v3 = (const char **)(a1 + 24);
    v4 = a1[47];
    v5 = a1 + 24;
    if (v4 < 0)
      v5 = *v3;
    if (stat(v5, &v65))
    {
      v6 = (const __CFString *)CMVO2MaxRetrocomputeState;
      if (qword_1ECEDEE88 == -1)
        goto LABEL_8;
      goto LABEL_80;
    }
    if (v65.st_uid == *((_DWORD *)v2 + 22) && v65.st_gid == *((_DWORD *)v2 + 23) && (~v65.st_mode & 0x1B6) == 0)
      return;
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
    v12 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_DEFAULT))
    {
      v13 = v2 + 24;
      if (v2[47] < 0)
        v13 = *v3;
      v14 = *((_DWORD *)v2 + 22);
      v15 = *((_DWORD *)v2 + 23);
      buf[0].st_dev = 136316674;
      *(_QWORD *)&buf[0].st_mode = v13;
      WORD2(buf[0].st_ino) = 1024;
      *(_DWORD *)((char *)&buf[0].st_ino + 6) = v65.st_uid;
      HIWORD(buf[0].st_uid) = 1024;
      buf[0].st_gid = v14;
      LOWORD(buf[0].st_rdev) = 1024;
      *(dev_t *)((char *)&buf[0].st_rdev + 2) = v65.st_gid;
      *((_WORD *)&buf[0].st_rdev + 3) = 1024;
      LODWORD(buf[0].st_atimespec.tv_sec) = v15;
      WORD2(buf[0].st_atimespec.tv_sec) = 1024;
      *(_DWORD *)((char *)&buf[0].st_atimespec.tv_sec + 6) = v65.st_mode;
      WORD1(buf[0].st_atimespec.tv_nsec) = 1024;
      HIDWORD(buf[0].st_atimespec.tv_nsec) = 438;
      _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_DEFAULT, "#Warning %s attributes incorrect (uid %d vs %d, gid %d vs %d, mode 0x%x vs 0x%x, resetting", (uint8_t *)buf, 0x30u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
      if (v2[47] < 0)
        v3 = (const char **)*v3;
      v57 = *((_DWORD *)v2 + 22);
      v58 = *((_DWORD *)v2 + 23);
      v66 = 136316674;
      v67 = v3;
      v68 = 1024;
      st_uid = v65.st_uid;
      v70 = 1024;
      *(_DWORD *)v71 = v57;
      *(_WORD *)&v71[4] = 1024;
      *(_DWORD *)&v71[6] = v65.st_gid;
      v72 = 1024;
      v73 = v58;
      v74 = 1024;
      st_mode = v65.st_mode;
      v76 = 1024;
      v77 = 438;
      v59 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLPreferences::setFileAttributes(BOOL)", "CoreLocation: %s\n", v59);
      if (v59 != (char *)buf)
        free(v59);
    }
  }
  v16 = (const char **)(v2 + 24);
  v17 = v2 + 24;
  if (v2[47] < 0)
    v17 = *v16;
  v18 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v17, 0x8000100u);
  if (v18)
  {
    v23 = v18;
    v24 = (void *)objc_msgSend_pathComponents(v18, v19, v20, v21, v22);
    v33 = objc_msgSend_count(v24, v25, v26, v27, v28) - 1;
    if (v33 >= 2)
    {
      PathComponent = v23;
      v6 = CFSTR("/tmp");
      while (1)
      {
        PathComponent = (void *)objc_msgSend_stringByDeletingLastPathComponent(PathComponent, v29, v30, v31, v32);
        if ((objc_msgSend_isEqualToString_(PathComponent, v35, (uint64_t)CFSTR("/var"), v36, v37) & 1) == 0
          && (objc_msgSend_isEqualToString_(PathComponent, v29, (uint64_t)CFSTR("/tmp"), v31, v32) & 1) == 0)
        {
          v38 = (const char *)objc_msgSend_fileSystemRepresentation(PathComponent, v29, v30, v31, v32);
          if (!lstat(v38, buf) && (buf[0].st_mode & 0xF000) == 0xA000)
            break;
        }
        if (--v33 <= 1)
          goto LABEL_38;
      }
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
      v3 = (const char **)CMVO2MaxRetrocomputeState;
      v55 = off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
      {
        buf[0].st_dev = 68289539;
        *(_DWORD *)&buf[0].st_mode = 0;
        LOWORD(buf[0].st_ino) = 2082;
        *(__darwin_ino64_t *)((char *)&buf[0].st_ino + 2) = (__darwin_ino64_t)"";
        HIWORD(buf[0].st_uid) = 2082;
        *(_QWORD *)&buf[0].st_gid = "assert";
        *((_WORD *)&buf[0].st_rdev + 2) = 2081;
        *(_QWORD *)((char *)&buf[0].st_rdev + 6) = "!_parentDirContainsSymLink(cfSettingsFile)";
        _os_log_impl(&dword_18F1DC000, v55, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
        if (qword_1ECEDEE88 != -1)
          dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
      }
      v56 = off_1ECEDEE80;
      if (os_signpost_enabled((os_log_t)off_1ECEDEE80))
      {
        buf[0].st_dev = 68289539;
        *(_DWORD *)&buf[0].st_mode = 0;
        LOWORD(buf[0].st_ino) = 2082;
        *(__darwin_ino64_t *)((char *)&buf[0].st_ino + 2) = (__darwin_ino64_t)"";
        HIWORD(buf[0].st_uid) = 2082;
        *(_QWORD *)&buf[0].st_gid = "assert";
        *((_WORD *)&buf[0].st_rdev + 2) = 2081;
        *(_QWORD *)((char *)&buf[0].st_rdev + 6) = "!_parentDirContainsSymLink(cfSettingsFile)";
        _os_signpost_emit_with_name_impl(&dword_18F1DC000, v56, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
        if (qword_1ECEDEE88 != -1)
          dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
      }
      v2 = (char *)off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_INFO))
      {
        buf[0].st_dev = 68289539;
        *(_DWORD *)&buf[0].st_mode = 0;
        LOWORD(buf[0].st_ino) = 2082;
        *(__darwin_ino64_t *)((char *)&buf[0].st_ino + 2) = (__darwin_ino64_t)"";
        HIWORD(buf[0].st_uid) = 2082;
        *(_QWORD *)&buf[0].st_gid = "assert";
        *((_WORD *)&buf[0].st_rdev + 2) = 2081;
        *(_QWORD *)((char *)&buf[0].st_rdev + 6) = "!_parentDirContainsSymLink(cfSettingsFile)";
        _os_log_impl(&dword_18F1DC000, (os_log_t)v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
      }
      abort_report_np();
LABEL_80:
      dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
LABEL_8:
      v7 = off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_DEFAULT))
      {
        v8 = v3;
        if (v2[47] < 0)
          v8 = (void *)*v3;
        v9 = *__error();
        buf[0].st_dev = 136315394;
        *(_QWORD *)&buf[0].st_mode = v8;
        WORD2(buf[0].st_ino) = 1024;
        *(_DWORD *)((char *)&buf[0].st_ino + 6) = v9;
        _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_DEFAULT, "#Warning could not check %s (errno %d)", (uint8_t *)buf, 0x12u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v6[116].info != -1)
          dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
        if (v2[47] < 0)
          v3 = (const char **)*v3;
        v10 = *__error();
        v66 = 136315394;
        v67 = v3;
        v68 = 1024;
        st_uid = v10;
        v11 = (stat *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CLPreferences::setFileAttributes(BOOL)", "CoreLocation: %s\n");
LABEL_67:
        if (v11 != buf)
          free(v11);
        return;
      }
      return;
    }
LABEL_38:
    CFRelease(v23);
  }
  v39 = v2 + 24;
  if (v2[47] < 0)
    v39 = *v16;
  if (!lstat(v39, &v65))
  {
    v40 = v2 + 24;
    if (v2[47] < 0)
      v40 = *v16;
    if (lchmod(v40, 0x1B6u))
    {
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
      v41 = off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
      {
        v42 = v2 + 24;
        if (v2[47] < 0)
          v42 = *v16;
        v43 = *__error();
        v44 = __error();
        v45 = strerror(*v44);
        buf[0].st_dev = 136446722;
        *(_QWORD *)&buf[0].st_mode = v42;
        WORD2(buf[0].st_ino) = 1026;
        *(_DWORD *)((char *)&buf[0].st_ino + 6) = v43;
        HIWORD(buf[0].st_uid) = 2082;
        *(_QWORD *)&buf[0].st_gid = v45;
        _os_log_impl(&dword_18F1DC000, v41, OS_LOG_TYPE_FAULT, "could not lchmod %{public}s errno %{public}d (%{public}s)", (uint8_t *)buf, 0x1Cu);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE88 != -1)
          dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
        v60 = v2 + 24;
        if (v2[47] < 0)
          v60 = *v16;
        v61 = *__error();
        v62 = __error();
        v63 = strerror(*v62);
        v66 = 136446722;
        v67 = (const char **)v60;
        v68 = 1026;
        st_uid = v61;
        v70 = 2082;
        *(_QWORD *)v71 = v63;
        v64 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "void CLPreferences::setFileAttributes(BOOL)", "CoreLocation: %s\n", v64);
        if (v64 != (char *)buf)
          free(v64);
      }
    }
    v46 = v2 + 24;
    if (v2[47] < 0)
      v46 = *v16;
    if (lchown(v46, *((_DWORD *)v2 + 22), *((_DWORD *)v2 + 23)))
    {
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
      v47 = off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
      {
        v48 = v2 + 24;
        if (v2[47] < 0)
          v48 = *v16;
        v49 = *__error();
        v50 = __error();
        v51 = strerror(*v50);
        buf[0].st_dev = 136446722;
        *(_QWORD *)&buf[0].st_mode = v48;
        WORD2(buf[0].st_ino) = 1026;
        *(_DWORD *)((char *)&buf[0].st_ino + 6) = v49;
        HIWORD(buf[0].st_uid) = 2082;
        *(_QWORD *)&buf[0].st_gid = v51;
        _os_log_impl(&dword_18F1DC000, v47, OS_LOG_TYPE_FAULT, "could not lchown %{public}s errno %{public}d (%{public}s)", (uint8_t *)buf, 0x1Cu);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE88 != -1)
          dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
        if (v2[47] < 0)
          v16 = (const char **)*v16;
        v52 = *__error();
        v53 = __error();
        v54 = strerror(*v53);
        v66 = 136446722;
        v67 = v16;
        v68 = 1026;
        st_uid = v52;
        v70 = 2082;
        *(_QWORD *)v71 = v54;
        v11 = (stat *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "void CLPreferences::setFileAttributes(BOOL)", "CoreLocation: %s\n");
        goto LABEL_67;
      }
    }
  }
}

uint64_t sub_18F388814(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

const __CFArray *sub_18F38881C(CFStringRef *a1)
{
  const __CFString *v2;
  const __CFArray *result;
  const __CFArray *v4;

  v2 = (const __CFString *)*MEMORY[0x1E0C9B250];
  result = CFPreferencesCopyKeyList(a1[9], a1[10], (CFStringRef)*MEMORY[0x1E0C9B250]);
  if (result)
  {
    v4 = result;
    CFPreferencesSetMultiple(0, result, a1[9], a1[10], v2);
    CFRelease(v4);
    return (const __CFArray *)((uint64_t (*)(CFStringRef *))(*a1)[26].data)(a1);
  }
  return result;
}

uint64_t sub_18F38889C(CFStringRef *a1, CFStringRef key)
{
  CFPreferencesSetValue(key, 0, a1[9], a1[10], (CFStringRef)*MEMORY[0x1E0C9B250]);
  return ((uint64_t (*)(CFStringRef *))(*a1)[26].data)(a1);
}

CFIndex sub_18F3888E0(uint64_t a1)
{
  const __CFArray *v1;
  const __CFArray *v2;
  CFIndex Count;

  v1 = CFPreferencesCopyKeyList(*(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E0C9B250]);
  if (!v1)
    return 0;
  v2 = v1;
  Count = CFArrayGetCount(v1);
  CFRelease(v2);
  return Count;
}

CFIndex sub_18F388934(uint64_t a1, CFStringRef key)
{
  const __CFArray *v2;
  const __CFArray *v3;
  CFTypeID v4;
  CFIndex Count;

  v2 = (const __CFArray *)CFPreferencesCopyValue(key, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E0C9B250]);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = CFGetTypeID(v2);
  if (v4 == CFArrayGetTypeID())
    Count = CFArrayGetCount(v3);
  else
    Count = 1;
  CFRelease(v3);
  return Count;
}

uint64_t sub_18F3889AC()
{
  NSObject *v0;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE88 != -1)
    dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
  v0 = off_1ECEDEE80;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLPreferences::serialize(CFDataRef *) const", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
  return 0;
}

uint64_t sub_18F388B34()
{
  NSObject *v0;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE88 != -1)
    dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
  v0 = off_1ECEDEE80;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLPreferences::serializeBinary(CFDataRef *) const", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
  return 0;
}

uint64_t sub_18F388CBC()
{
  NSObject *v0;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE88 != -1)
    dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
  v0 = off_1ECEDEE80;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLPreferences::deserialize(const CFDataRef)", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
  return 0;
}

void sub_18F388E44(const __CFString *a1, uint64_t a2)
{
  CFTypeRef cf;

  cf = 0;
  if ((*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(_QWORD *)a2 + 912))(a2, a1, &cf))
  {
    sub_18F370838(a1, (const __CFString *)cf);
    CFRelease(cf);
  }
}

void sub_18F388EA0(uint64_t a1)
{
  const __CFArray *v2;
  const __CFArray *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  char *v7;
  uint8_t buf[1640];
  uint64_t v9;
  CFRange v10;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D9A8 != -1)
    dispatch_once(&qword_1EE16D9A8, &unk_1E2954D88);
  if (os_log_type_enabled((os_log_t)qword_1EE16D9B0, OS_LOG_TYPE_DEBUG))
  {
    if ((*(int (**)(uint64_t))(*(_QWORD *)(a1 + 120) + 856))(a1 + 120) >= 1)
      sub_18F370218(a1 + 120);
    v2 = CFPreferencesCopyKeyList(*(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E0C9B250]);
    v3 = v2;
    if (v2 && CFArrayGetCount(v2))
    {
      v10.length = CFArrayGetCount(v3);
      v10.location = 0;
      CFArrayApplyFunction(v3, v10, (CFArrayApplierFunction)sub_18F388E44, (void *)a1);
      CFRelease(v3);
      v5 = *(_QWORD *)(a1 + 104);
      v4 = a1 + 104;
      if ((*(int (**)(uint64_t))(v5 + 856))(v4) >= 1)
        sub_18F370218(v4);
    }
    else
    {
      if (qword_1EE16D9A8 != -1)
        dispatch_once(&qword_1EE16D9A8, &unk_1E2954D88);
      v6 = qword_1EE16D9B0;
      if (os_log_type_enabled((os_log_t)qword_1EE16D9B0, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEBUG, "\t<empty>", buf, 2u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D9A8 != -1)
          dispatch_once(&qword_1EE16D9A8, &unk_1E2954D88);
        v7 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual void CLPreferences::print() const", "CoreLocation: %s\n", v7);
        if (v7 != (char *)buf)
          free(v7);
      }
      if (v3)
        CFRelease(v3);
    }
  }
}

void sub_18F389134()
{
  NSObject *v0;
  char *v1;
  uint8_t buf[1640];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE88 != -1)
    dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
  v0 = off_1ECEDEE80;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
    v1 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "virtual void CLPreferences::merge(const CLPreferences &, BOOL)", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf)
      free(v1);
  }
}

uint64_t sub_18F3892B8()
{
  NSObject *v0;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE88 != -1)
    dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
  v0 = off_1ECEDEE80;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLPreferences::loadFromFile(const char *)", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
  return 0;
}

uint64_t sub_18F389440()
{
  NSObject *v0;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE88 != -1)
    dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
  v0 = off_1ECEDEE80;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLPreferences::saveToFile(const char *) const", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
  return 0;
}

uint64_t sub_18F3895C8()
{
  NSObject *v0;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE88 != -1)
    dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
  v0 = off_1ECEDEE80;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v0, OS_LOG_TYPE_FAULT, "***not supported***", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLPreferences::saveToBinaryFile(const char *) const", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
  return 0;
}

void sub_18F389750(uint64_t a1, CFStringRef key, CFPropertyListRef value)
{
  NSObject *v5;
  _BYTE *v6;
  int v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  int v12;
  void **v13;
  void **v14;
  void **v15;
  char *v16;
  void *v17[2];
  char v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;
  _BYTE v23[12];
  __int16 v24;
  void **v25;
  __int16 v26;
  void **v27;
  uint8_t buf[4];
  _BYTE *v29;
  __int16 v30;
  void **v31;
  __int16 v32;
  void **v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 96))
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v6 = v23;
      sub_18F1ED06C(key, (uint64_t)v23);
      if (v26 < 0)
        v6 = *(_BYTE **)v23;
      sub_18F1ED06C(*(const __CFString **)(a1 + 72), (uint64_t)v21);
      v7 = v22;
      v8 = (void **)v21[0];
      sub_18F1ED06C(*(const __CFString **)(a1 + 80), (uint64_t)__p);
      v9 = v21;
      if (v7 < 0)
        v9 = v8;
      if (v20 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 136446722;
      v29 = v6;
      v30 = 2082;
      v31 = v9;
      v32 = 2082;
      v33 = v10;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Attempt to set key %{public}s for read-only preferences %{public}s/%{public}s!", buf, 0x20u);
      if (v20 < 0)
        operator delete(__p[0]);
      if (v22 < 0)
        operator delete(v21[0]);
      if (SHIBYTE(v26) < 0)
        operator delete(*(void **)v23);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
      sub_18F1ED06C(key, (uint64_t)v21);
      if (v22 >= 0)
        v11 = v21;
      else
        v11 = (void **)v21[0];
      sub_18F1ED06C(*(const __CFString **)(a1 + 72), (uint64_t)__p);
      v12 = v20;
      v13 = (void **)__p[0];
      sub_18F1ED06C(*(const __CFString **)(a1 + 80), (uint64_t)v17);
      v14 = __p;
      if (v12 < 0)
        v14 = v13;
      if (v18 >= 0)
        v15 = v17;
      else
        v15 = (void **)v17[0];
      *(_DWORD *)v23 = 136446722;
      *(_QWORD *)&v23[4] = v11;
      v24 = 2082;
      v25 = v14;
      v26 = 2082;
      v27 = v15;
      v16 = (char *)_os_log_send_and_compose_impl();
      if (v18 < 0)
        operator delete(v17[0]);
      if (v20 < 0)
        operator delete(__p[0]);
      if (v22 < 0)
        operator delete(v21[0]);
      sub_18F419700("Generic", 1, 0, 0, "virtual void CLPreferences::setInternal(const CFStringRef, const CFTypeRef)", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
  }
  else
  {
    CFPreferencesSetValue(key, value, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E0C9B250]);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 848))(a1);
  }
}

void sub_18F389AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void sub_18F389B30()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[4];
  int v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE88 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl(&dword_18F1DC000, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
    }
    v1 = off_1ECEDEE80;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE80))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
    }
    v2 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v4 = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2082;
      v8 = "assert";
      v9 = 2081;
      v10 = "0";
      _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
  }
}

const __CFString *sub_18F389D50()
{
  return CFSTR("OtherPref");
}

void sub_18F389D5C(_QWORD *a1)
{
  sub_18F1EDCB4(a1);
  JUMPOUT(0x194001438);
}

os_log_t sub_18F389D80()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Direct_deprecated");
  qword_1EE16D9B0 = (uint64_t)result;
  return result;
}

uint64_t sub_18F389DAC(uint64_t result, int a2)
{
  _BYTE *v2;
  uint64_t v4;
  NSObject *v5;
  int v6;
  char *v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)(result + 6336);
  if (*(unsigned __int8 *)(result + 6336) != a2)
  {
    v4 = result;
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953068);
    v5 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
    {
      v6 = *v2;
      *(_DWORD *)buf = 67109376;
      v9 = v6;
      v10 = 1024;
      v11 = a2;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_INFO, "[CMCorrelatedMotion] Changed tracking behavior from %d to %d.", buf, 0xEu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953068);
      v7 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMCorrelatedMotion::setTrackingBehavior(CMRelDM::TrackingBehavior)", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
    *v2 = a2;
    return sub_18F389FA4(v4, 0);
  }
  return result;
}

uint64_t sub_18F389FA4(uint64_t result, int a2)
{
  *(_DWORD *)result = 0;
  *(_DWORD *)(result + 1208) = 0;
  *(_DWORD *)(result + 3288) = 0;
  *(_DWORD *)(result + 2444) = 0;
  *(_QWORD *)(result + 2436) = 0;
  *(_QWORD *)(result + 2428) = 0;
  *(_OWORD *)(result + 3776) = 0u;
  *(_OWORD *)(result + 3792) = 0u;
  *(_QWORD *)(result + 3808) = 0;
  *(_QWORD *)(result + 6288) = 0;
  *(_QWORD *)(result + 6304) = 0;
  *(_QWORD *)(result + 6296) = 0;
  *(_BYTE *)(result + 2416) = 1;
  *(_QWORD *)(result + 2872) = 0;
  *(_QWORD *)(result + 2864) = 0;
  *(_DWORD *)(result + 2880) = 0;
  *(_BYTE *)(result + 2852) = 1;
  *(_WORD *)(result + 6320) = 0;
  if (a2)
  {
    *(_QWORD *)(result + 6312) = 0;
    *(_DWORD *)(result + 3816) = 0;
    *(_OWORD *)(result + 6224) = 0uLL;
  }
  if (*(_BYTE *)(result + 6336) == 1)
  {
    *(_QWORD *)(result + 8808) = 0;
    *(_QWORD *)(result + 8800) = 0;
    *(_DWORD *)(result + 8816) = 0;
    *(_BYTE *)(result + 8788) = 1;
    *(_DWORD *)(result + 9012) = 0;
    *(_QWORD *)(result + 9004) = 0;
    *(_QWORD *)(result + 8996) = 0;
    *(_BYTE *)(result + 8984) = 1;
    *(_QWORD *)(result + 10048) = 0;
    if (a2)
    {
      *(_DWORD *)(result + 10032) = 0;
      *(_QWORD *)(result + 9200) = 0;
      *(_QWORD *)(result + 9192) = 0;
      *(_DWORD *)(result + 9208) = 0;
      *(_BYTE *)(result + 9180) = 1;
    }
  }
  return result;
}

void sub_18F38A07C(float32x2_t *a1, float32x2_t *a2, uint64_t a3, float *a4, int *a5, unint64_t a6, unint64_t a7, double a8)
{
  unint64_t v9;
  float32x2_t *v15;
  unsigned int v16;
  uint64_t v17;
  float v18;
  float v19;
  int v20;
  float32_t v22;
  float v23;
  float32_t v25;
  float32x2_t *v26;
  NSObject *v28;
  double v29;
  double v30;
  int v31;
  __int32 v32;
  double v33;
  double v34;
  float32x2_t v35;
  float v36;
  float v37;
  __int32 v38;
  float v39;
  float v40;
  float v41;
  int v42;
  uint64_t v43;
  float v44;
  float v49;
  float v50;
  float v51;
  __int32 v52;
  __int32 v53;
  __int32 v54;
  __int32 v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  float v78;
  uint64_t v79;
  int v80;
  int v81;
  float v82;
  uint64_t v83;
  float v84;
  uint64_t v85;
  float v86;
  uint64_t v87;
  float v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  float v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  float v98;
  float v99;
  uint64_t v100;
  int v101;
  int v102;
  float v103;
  unint64_t v104;
  float v105;
  int v106;
  int v107;
  uint64_t v108;
  float v109;
  int v110;
  int v111;
  uint64_t v112;
  float v113;
  float v114;
  int v115;
  int v116;
  uint64_t i;
  float v118;
  unsigned int v119;
  float v120;
  float v121;
  int v122;
  float v123;
  unsigned int v124;
  _BYTE *v125;
  float v126;
  float v127;
  float v128;
  void **p_vtable;
  void **v130;
  int v131;
  int *v132;
  float v133;
  float v134;
  float v135;
  NSObject *v136;
  double v137;
  int v138;
  char v139;
  _BYTE *v140;
  unsigned int v141;
  float v142;
  int v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  NSObject *v150;
  double v151;
  double v152;
  NSObject *v153;
  float v154;
  _BOOL4 v155;
  _BOOL4 v156;
  float v158;
  float v159;
  float v160;
  NSObject *v161;
  float v162;
  float v163;
  float v164;
  double v165;
  float v166;
  float v167;
  float v168;
  double v169;
  NSObject *v170;
  double v171;
  double v172;
  double v173;
  float v174;
  double v175;
  double v176;
  double v177;
  char *v178;
  float v179;
  float v180;
  float v181;
  float v182;
  BOOL v183;
  double v184;
  double v185;
  NSObject *v186;
  double v187;
  double v188;
  double v189;
  float v190;
  unint64_t v191;
  unint64_t v192;
  float v193;
  float v194;
  float v195;
  float v196;
  float v197;
  NSObject *v198;
  _BYTE *v199;
  int v200;
  int v201;
  int v202;
  _BOOL4 v204;
  int v205;
  int v206;
  float v207;
  unsigned int v208;
  float v209;
  int v210;
  float v211;
  int v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float v221;
  float v222;
  float v223;
  float v224;
  _BOOL4 v225;
  float32x2_t v226;
  float v227;
  float v228;
  float v229;
  float v230;
  float v231;
  int v232;
  float v233;
  double v234;
  unint64_t v235;
  unint64_t v236;
  float v237;
  NSObject *v238;
  double v239;
  double v240;
  NSObject *v241;
  float v242;
  unsigned int v243;
  float v244;
  double v245;
  double v246;
  int v247;
  __int32 v248;
  double v249;
  double v250;
  char *v251;
  int v252;
  int v253;
  int v254;
  _BOOL4 v256;
  int v257;
  int v258;
  float v259;
  unsigned int v260;
  float v261;
  int v262;
  float v263;
  char *v264;
  double v265;
  int v266;
  char *v267;
  float v268;
  _BOOL4 v269;
  double v270;
  double v271;
  double v272;
  char *v273;
  float v274;
  float v275;
  float v276;
  double v277;
  float v278;
  float v279;
  float v280;
  double v281;
  char *v282;
  double v283;
  double v284;
  char *v285;
  char *v286;
  double v287;
  double v288;
  char *v289;
  _BYTE *v290;
  _BYTE *v291;
  unsigned __int16 *v292;
  float32x2_t *v293;
  unint64_t v294;
  unint64_t v295;
  _BYTE *v296;
  int *v297;
  unint64_t v298;
  _DWORD v299[3];
  _DWORD v300[3];
  _DWORD v301[3];
  float v302;
  _BYTE v303[40];
  __int16 v304;
  double v305;
  __int16 v306;
  double v307;
  _BYTE buf[44];
  __int16 v309;
  double v310;
  __int16 v311;
  double v312;
  uint64_t v313;

  v9 = a6;
  v313 = *MEMORY[0x1E0C80C00];
  v15 = (float32x2_t *)((char *)a1 + 3780);
  v16 = a1->u16[1];
  if (v16 == a1[151].u16[1])
  {
    if (v16 >= a1[411].u16[1])
      v16 = a1[411].u16[1];
    if (v16 >= 0x28)
    {
      v17 = 0;
      v18 = 0.0;
      do
      {
        v18 = v18 + (float)(*(float *)(a3 + v17) * *(float *)(a3 + v17));
        v17 += 4;
      }
      while (v17 != 12);
      v19 = sqrtf(v18);
      if (v19 > 0.17453 || (v20 = *(_DWORD *)(a3 + 48)) == 0 || (v19 > 0.087266 ? (_ZF = v20 == 2) : (_ZF = 0), _ZF))
      {
        v22 = a1[789].f32[0] + a8;
        a1[789].f32[0] = v22;
      }
      else if (v20 == 1 && a1[780].f32[1] < 0.043633)
      {
        a1[789].i32[0] = 0;
      }
      v23 = a1[780].f32[0];
      if (v23 > 0.1309 || a2[6].i32[0] == 0)
      {
        if (v23 > 0.2618)
          a1[789].i32[1] = 0;
      }
      else
      {
        v25 = a1[789].f32[1] + a8;
        a1[789].f32[1] = v25;
      }
      v26 = (float32x2_t *)((char *)a1 + 3780);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953068);
      v28 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
      {
        v29 = a1[780].f32[1];
        v30 = a1[780].f32[0];
        v31 = *(_DWORD *)(a3 + 48);
        v32 = a2[6].i32[0];
        v33 = a1[789].f32[0];
        v34 = a1[789].f32[1];
        *(_DWORD *)buf = 134219264;
        *(double *)&buf[4] = v29;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v30;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v31;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v32;
        *(_WORD *)&buf[34] = 2048;
        *(double *)&buf[36] = v33;
        v309 = 2048;
        v310 = v34;
        _os_log_impl(&dword_18F1DC000, v28, OS_LOG_TYPE_DEBUG, "[CorrelatedMotion] updateSrcAuxMovingDuration: fAuxAvgOmegaShort, %.3f, fSrcAvgOmegaShort, %.3f, aux.qMode, %d, src.qMode, %d, auxMovingDurationSecs, %.3f, srcStaticDurationSecs, %.3f", buf, 0x36u);
      }
      v9 = a6;
      v15 = v26;
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        v295 = v9;
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953068);
        v245 = a1[780].f32[1];
        v246 = a1[780].f32[0];
        v247 = *(_DWORD *)(a3 + 48);
        v248 = a2[6].i32[0];
        v249 = a1[789].f32[0];
        v250 = a1[789].f32[1];
        v302 = 3.8526e-34;
        *(double *)v303 = v245;
        *(_WORD *)&v303[8] = 2048;
        *(double *)&v303[10] = v246;
        *(_WORD *)&v303[18] = 1024;
        *(_DWORD *)&v303[20] = v247;
        *(_WORD *)&v303[24] = 1024;
        *(_DWORD *)&v303[26] = v248;
        *(_WORD *)&v303[30] = 2048;
        *(double *)&v303[32] = v249;
        v304 = 2048;
        v305 = v250;
        v251 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CMCorrelatedMotion::updateSrcAuxMovingDuration(const IMUData &, const IMUData &, double)", "CoreLocation: %s\n", v251);
        if (v251 != buf)
          free(v251);
        v9 = v295;
      }
    }
  }
  a1[791] = (float32x2_t)v9;
  v35.f32[0] = sub_18F3D39F4(a4, *(float *)a3, *(float *)(a3 + 4), *(float *)(a3 + 8));
  v37 = a2[1].f32[0] - v36;
  v35.i32[1] = v38;
  v15[3] = vadd_f32(vsub_f32(*a2, v35), v15[3]);
  a1[476].f32[1] = v37 + a1[476].f32[1];
  v39 = a2->f32[0] + a1[472].f32[1];
  a1[472].f32[1] = v39;
  v40 = a2->f32[1] + a1[473].f32[0];
  a1[473].f32[0] = v40;
  v41 = a2[1].f32[0] + a1[473].f32[1];
  a1[473].f32[1] = v41;
  a1[474].f32[0] = *(float *)a3 + a1[474].f32[0];
  a1[474].f32[1] = *(float *)(a3 + 4) + a1[474].f32[1];
  a1[475].f32[0] = *(float *)(a3 + 8) + a1[475].f32[0];
  v42 = a1[472].i32[0] + 1;
  a1[472].i32[0] = v42;
  if (v42 == 4)
  {
    v294 = v9;
    v297 = a5;
    v43 = (uint64_t)&a1[1147] + 4;
    *(float *)buf = v39 * 0.25;
    *(float *)&buf[4] = v40 * 0.25;
    *(float *)&buf[8] = v41 * 0.25;
    sub_18F33FACC((unsigned __int16 *)a1, (uint64_t)buf);
    v44 = a1[475].f32[0] * 0.25;
    __asm { FMOV            V9.2S, #0.25 }
    *(float32x2_t *)buf = vmul_f32(a1[474], _D9);
    *(float *)&buf[8] = v44;
    sub_18F33FACC((unsigned __int16 *)&a1[151], (uint64_t)buf);
    v49 = a1[475].f32[0] * 0.25;
    *(float32x2_t *)buf = vmul_f32(a1[474], _D9);
    *(float *)&buf[8] = v49;
    sub_18F33FACC((unsigned __int16 *)&a1[477], (uint64_t)buf);
    v50 = a1[473].f32[1] * 0.25;
    *(float32x2_t *)buf = vmul_f32(*v15, _D9);
    *(float *)&buf[8] = v50;
    sub_18F33FACC((unsigned __int16 *)&a1[797] + 2, (uint64_t)buf);
    v51 = a1[476].f32[1] * 0.25;
    *(float32x2_t *)buf = vmul_f32(v15[3], _D9);
    *(float *)&buf[8] = v51;
    sub_18F33FACC((unsigned __int16 *)&a1[411], (uint64_t)buf);
    a1[476] = 0;
    *(_OWORD *)a1[472].f32 = 0u;
    *(_OWORD *)a1[474].f32 = 0u;
    a1[786].f32[0] = sub_18F200A14((float *)&a2[7]);
    a1[786].i32[1] = v52;
    a1[787].i32[0] = v53;
    a1[787].f32[1] = sub_18F200A14((float *)(a3 + 56));
    a1[788].i32[0] = v54;
    a1[788].i32[1] = v55;
    v56 = sub_18F33DA38((unsigned __int16 *)a1);
    *(float *)buf = (float)((float)(v57 * a1[787].f32[0]) + (float)(v58 * a1[786].f32[1]))
                  + (float)(v56 * a1[786].f32[0]);
    v293 = a1 + 302;
    sub_18F33D300((uint64_t)&a1[302], (float *)buf);
    v292 = (unsigned __int16 *)&a1[151];
    v59 = sub_18F33DA38((unsigned __int16 *)&a1[151]);
    *(float *)buf = (float)((float)(v60 * a1[788].f32[1]) + (float)(v61 * a1[788].f32[0]))
                  + (float)(v59 * a1[787].f32[1]);
    v296 = (char *)&a1[356] + 4;
    sub_18F33D300((uint64_t)&a1[356] + 4, (float *)buf);
    if (v15[319].i8[4] == 1)
    {
      v62 = sub_18F33DA38((unsigned __int16 *)a1);
      *(float *)buf = (float)((float)(v63 * a1[787].f32[0]) + (float)(v64 * a1[786].f32[1]))
                    + (float)(v62 * a1[786].f32[0]);
      sub_18F33D300((uint64_t)&a1[1147] + 4, (float *)buf);
      v65 = a1[784].f32[0];
      if (v65 <= 0.0)
        v65 = -v65;
      v66 = a1[783].f32[1];
      if (v66 <= 0.0)
        v66 = -v66;
      *(float *)buf = v65 - v66;
      sub_18F33D300((uint64_t)&a1[1098] + 4, (float *)buf);
      sub_18F33D300((uint64_t)&a1[1123], (float *)&a1[783] + 1);
    }
    v298 = a7;
    v67 = a1->u16[1];
    v68 = a1[151].u16[1];
    if ((_DWORD)v67 == v68)
    {
      v69 = a1[411].u16[1];
      if (v67 >= v69)
        v70 = a1[411].u16[1];
      else
        v70 = a1->u16[1];
      if (v70 < 0x28)
        goto LABEL_100;
      v290 = (char *)&a1[1098] + 4;
      v302 = sub_18F3403AC((unsigned __int16 *)a1, v67 - 40, v67);
      *(_DWORD *)v303 = v71;
      *(_DWORD *)&v303[4] = v72;
      v301[0] = sub_18F3403AC(v292, v67 - 40, v67);
      v301[1] = v73;
      v301[2] = v74;
      v75 = v67 - 10;
      v300[0] = sub_18F3403AC((unsigned __int16 *)a1, v67 - 10, v67);
      v300[1] = v76;
      v300[2] = v77;
      v78 = sub_18F3403AC(v292, v67 - 10, v67);
      v79 = 0;
      *(float *)v299 = v78;
      v299[1] = v80;
      v299[2] = v81;
      v82 = 0.0;
      do
      {
        v82 = v82 + (float)(*(float *)&v300[v79] * *(float *)&v300[v79]);
        ++v79;
      }
      while (v79 != 3);
      v83 = 0;
      a1[780].f32[0] = sqrtf(v82);
      v84 = 0.0;
      do
      {
        v84 = v84 + (float)(*(float *)&v299[v83] * *(float *)&v299[v83]);
        ++v83;
      }
      while (v83 != 3);
      v85 = 0;
      a1[780].f32[1] = sqrtf(v84);
      v86 = 0.0;
      do
      {
        v86 = v86 + (float)(*(float *)&v303[v85 - 4] * *(float *)&v303[v85 - 4]);
        v85 += 4;
      }
      while (v85 != 12);
      v87 = 0;
      a1[781].f32[0] = sqrtf(v86);
      v88 = 0.0;
      do
      {
        v88 = v88 + (float)(*(float *)&v301[v87] * *(float *)&v301[v87]);
        ++v87;
      }
      while (v87 != 3);
      a1[781].f32[1] = sqrtf(v88);
      sub_18F38D4E4((unsigned __int16 *)&a1[411], v69 - 10, v69);
      v89 = 0;
      *(_DWORD *)buf = v90;
      *(_DWORD *)&buf[4] = v91;
      *(_DWORD *)&buf[8] = v92;
      v93 = 0.0;
      do
      {
        v93 = v93 + (float)(*(float *)&buf[v89] * *(float *)&buf[v89]);
        v89 += 4;
      }
      while (v89 != 12);
      a1[782].f32[0] = sqrtf(v93);
      sub_18F38D4E4((unsigned __int16 *)&a1[411], v69 - 40, v69);
      v94 = 0;
      *(_DWORD *)buf = v95;
      *(_DWORD *)&buf[4] = v96;
      *(_DWORD *)&buf[8] = v97;
      v98 = 0.0;
      do
      {
        v98 = v98 + (float)(*(float *)&buf[v94] * *(float *)&buf[v94]);
        v94 += 4;
      }
      while (v94 != 12);
      a1[782].f32[1] = sqrtf(v98);
      v99 = sub_18F3403AC((unsigned __int16 *)&a1[411], v69 - 40, v69);
      v100 = 0;
      *(float *)buf = v99;
      *(_DWORD *)&buf[4] = v101;
      *(_DWORD *)&buf[8] = v102;
      v103 = 0.0;
      do
      {
        v103 = v103 + (float)(*(float *)&buf[v100] * *(float *)&buf[v100]);
        v100 += 4;
      }
      while (v100 != 12);
      a1[783].f32[0] = sqrtf(v103);
      a1[783].f32[1] = sub_18F33F978((uint64_t)v293, v67 - 40, 40);
      a1[784].f32[0] = sub_18F33F978((uint64_t)v296, v67 - 40, 40);
      a1[784].f32[1] = sub_18F33F978((uint64_t)v293, v75, 10);
      a1[785].f32[0] = sub_18F33F978((uint64_t)v296, v75, 10);
      v104 = a1[477].u16[1];
      if (a1[477].i32[1] == (_DWORD)v104)
      {
        sub_18F38D4E4((unsigned __int16 *)&a1[477], 0, (unint64_t)(float)((float)v104 * 0.9));
        *(_DWORD *)&buf[4] = v106;
        *(_DWORD *)&buf[8] = v107;
        if (v105 <= 0.0)
          v105 = -v105;
        v108 = 4;
        v43 = (uint64_t)&a1[1147] + 4;
        do
        {
          v109 = *(float *)&buf[v108];
          if (v109 <= 0.0)
            v109 = -v109;
          if (v109 > v105)
            v105 = v109;
          v108 += 4;
        }
        while (v108 != 12);
      }
      else
      {
        sub_18F38D4E4((unsigned __int16 *)&a1[477], 0, v104);
        *(_DWORD *)&buf[4] = v110;
        *(_DWORD *)&buf[8] = v111;
        if (v105 <= 0.0)
          v105 = -v105;
        v112 = 4;
        v43 = (uint64_t)&a1[1147] + 4;
        do
        {
          v113 = *(float *)&buf[v112];
          if (v113 <= 0.0)
            v113 = -v113;
          if (v113 > v105)
            v105 = v113;
          v112 += 4;
        }
        while (v112 != 12);
      }
      a1[785].f32[1] = sqrtf(v105);
      if (v15[319].i8[4] == 1)
      {
        if (v293->i8[0])
          sub_18F33FB38((uint64_t)v293);
        a1[1252].i32[0] = a1[302].i32[1];
        if (a1[356].i8[4])
          sub_18F33FB38((uint64_t)v296);
        a1[1252].i32[1] = a1[357].i32[0];
        if (*v290)
          sub_18F33FB38((uint64_t)v290);
        a1[1254].i32[1] = a1[1099].i32[0];
        if (a1[1123].i8[0])
          sub_18F33FB38((uint64_t)&a1[1123]);
        a1[1255].i32[0] = a1[1123].i32[1];
        sub_18F38D4E4((unsigned __int16 *)&a1[797] + 2, 0, a1[797].u16[3]);
        *(_DWORD *)&buf[4] = v115;
        *(_DWORD *)&buf[8] = v116;
        if (v114 <= 0.0)
          v114 = -v114;
        for (i = 4; i != 12; i += 4)
        {
          v118 = *(float *)&buf[i];
          if (v118 <= 0.0)
            v118 = -v118;
          if (v118 > v114)
            v114 = v118;
        }
        a1[1253].f32[0] = sqrtf(v114);
        v119 = a1[305].u16[3];
        v120 = 0.0;
        v121 = 0.0;
        v122 = v119 - 40;
        if (v119 >= 0x28)
        {
          v123 = sub_18F33F978((uint64_t)v293, v119 - 40, 40);
          v121 = sqrtf(sub_18F38DC74((uint64_t)v293, v122, 40, v123));
        }
        a1[1253].f32[1] = v121;
        if (a1[1151].i32[1] == *(unsigned __int16 *)(v43 + 30))
        {
          if (*(_BYTE *)v43)
            sub_18F33FB38(v43);
          v120 = a1[1148].f32[0] * 4.0;
        }
        a1[1254].f32[0] = v120;
      }
      LODWORD(v67) = a1->u16[1];
      v68 = a1[151].u16[1];
    }
    _ZF = (_DWORD)v67 == v68;
    LODWORD(v67) = v68;
    if (!_ZF)
      goto LABEL_395;
LABEL_100:
    v124 = a1[411].u16[1];
    if (v67 < v124)
      v124 = v67;
    if (v124 < 0x28)
      goto LABEL_395;
    v125 = (_BYTE *)v43;
    if (a1[780].f32[1] <= a1[781].f32[1])
      v126 = a1[781].f32[1];
    else
      v126 = a1[780].f32[1];
    v127 = a1[780].f32[0];
    if (v127 <= a1[781].f32[0])
      v127 = a1[781].f32[0];
    if (v126 <= 0.17453)
      v128 = v126;
    else
      v128 = 0.17453;
    p_vtable = &OBJC_METACLASS___CMCardioFitnessSummary.vtable;
    v130 = &OBJC_METACLASS___CMCardioFitnessSummary.vtable;
    if (v127 <= v128)
    {
      v132 = v297;
      if (a1[789].f32[1] >= 5.0)
      {
        if (*v296)
          sub_18F33FB38((uint64_t)v296);
        v133 = a1[357].f32[0];
        if (v133 <= 0.0)
          v134 = -v133;
        else
          v134 = a1[357].f32[0];
        v135 = a1[789].f32[0];
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953068);
        v136 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
        {
          v137 = a1[789].f32[0];
          v138 = *(_DWORD *)(a3 + 48);
          *(_DWORD *)buf = 134218752;
          *(double *)&buf[4] = v137;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = (float)(v134 * 57.296);
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = (float)(v126 * 57.296);
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v138;
          _os_log_impl(&dword_18F1DC000, v136, OS_LOG_TYPE_DEBUG, "[CorrelatedActivity] auxMovingDuration, %.3f, auxRotGrav, %.3f, auxRot, %.3f, aux.qMode, %d", buf, 0x26u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953068);
          v265 = a1[789].f32[0];
          v266 = *(_DWORD *)(a3 + 48);
          v302 = 3.8523e-34;
          *(double *)v303 = v265;
          *(_WORD *)&v303[8] = 2048;
          *(double *)&v303[10] = (float)(v134 * 57.296);
          *(_WORD *)&v303[18] = 2048;
          *(double *)&v303[20] = (float)(v126 * 57.296);
          *(_WORD *)&v303[28] = 1024;
          *(_DWORD *)&v303[30] = v266;
          v267 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "BOOL CMCorrelatedMotion::isLikelyOnGymMachine(const IMUData &, const IMUData &) const", "CoreLocation: %s\n", v267);
          if (v267 != buf)
            free(v267);
          v132 = v297;
        }
        v131 = v135 > 5.0;
        if (v134 >= 0.17453)
          v131 = 0;
      }
      else
      {
        v131 = 0;
      }
    }
    else
    {
      v131 = 0;
      v132 = v297;
    }
    v15[317].i8[5] = v131;
    if (v15[319].i8[4] != 1)
    {
      if (v9 <= 0xF)
      {
        if ((v131 & 1) == 0
          && sub_18F48EB4C((uint64_t)v132, v298) <= 10.0
          && *v132 != 4
          && *v132 != 41
          && sub_18F48ED4C((uint64_t)v132, v298) >= 5.0)
        {
          goto LABEL_271;
        }
        v131 = v15[317].u8[5];
      }
      if (v131)
        v156 = 1;
      else
        v156 = *v132 == 4 || *v132 == 41;
      if (v293->i8[0])
        sub_18F33FB38((uint64_t)v293);
      v158 = a1[302].f32[1];
      if (a1[356].i8[4])
        sub_18F33FB38((uint64_t)v296);
      v159 = v158 - a1[357].f32[0];
      if (v159 <= 0.0)
        v160 = -v159;
      else
        v160 = v158 - a1[357].f32[0];
      if (v156)
      {
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953068);
        v161 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
        {
          v162 = sub_18F3403AC(v292, 0, a1[151].u16[1]);
          v165 = (float)((float)((float)(v163 * a1[788].f32[1]) + (float)(v164 * a1[788].f32[0]))
                       + (float)(v162 * a1[787].f32[1]));
          v166 = sub_18F3403AC((unsigned __int16 *)a1, 0, a1->u16[1]);
          v169 = (float)((float)((float)(v167 * a1[787].f32[0]) + (float)(v168 * a1[786].f32[1]))
                       + (float)(v166 * a1[786].f32[0]));
          *(_DWORD *)buf = 134218496;
          *(double *)&buf[4] = v165;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v169;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = v160;
          _os_log_impl(&dword_18F1DC000, v161, OS_LOG_TYPE_DEBUG, "[CorrelatedActivity] auxRotGravFull, %.3f, srcRotGravFull, %.3f, diff, %.3f", buf, 0x20u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953068);
          v274 = sub_18F3403AC(v292, 0, a1[151].u16[1]);
          v277 = (float)((float)((float)(v275 * a1[788].f32[1]) + (float)(v276 * a1[788].f32[0]))
                       + (float)(v274 * a1[787].f32[1]));
          v278 = sub_18F3403AC((unsigned __int16 *)a1, 0, a1->u16[1]);
          v281 = (float)((float)((float)(v279 * a1[787].f32[0]) + (float)(v280 * a1[786].f32[1]))
                       + (float)(v278 * a1[786].f32[0]));
          v302 = 3.8522e-34;
          *(double *)v303 = v277;
          *(_WORD *)&v303[8] = 2048;
          *(double *)&v303[10] = v281;
          *(_WORD *)&v303[18] = 2048;
          *(double *)&v303[20] = v160;
          v282 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "BOOL CMCorrelatedMotion::isLikelyInCorrelatedActivity(const ActivityState &, BOOL, uint64_t) const", "CoreLocation: %s\n", v282);
          if (v282 != buf)
            free(v282);
          v132 = v297;
          v130 = &OBJC_METACLASS___CMCardioFitnessSummary.vtable;
        }
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953068);
        v170 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
        {
          v171 = a1[784].f32[0];
          v172 = a1[783].f32[1];
          v173 = a1[783].f32[0];
          *(_DWORD *)buf = 134218496;
          *(double *)&buf[4] = v171;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v172;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = v173;
          _os_log_impl(&dword_18F1DC000, v170, OS_LOG_TYPE_DEBUG, "[CorrelatedActivity] auxRotGrav, %.3f, srcRotGrav, %.3f, relW, %.3f", buf, 0x20u);
        }
        v174 = 0.2;
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953068);
          v175 = a1[784].f32[0];
          v176 = a1[783].f32[1];
          v177 = a1[783].f32[0];
          v302 = 3.8522e-34;
          *(double *)v303 = v175;
          *(_WORD *)&v303[8] = 2048;
          *(double *)&v303[10] = v176;
          *(_WORD *)&v303[18] = 2048;
          *(double *)&v303[20] = v177;
          v178 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "BOOL CMCorrelatedMotion::isLikelyInCorrelatedActivity(const ActivityState &, BOOL, uint64_t) const", "CoreLocation: %s\n", v178);
          if (v178 != buf)
            free(v178);
          v132 = v297;
        }
      }
      else
      {
        v174 = 0.1;
      }
      if (v160 < v174)
      {
        v139 = 1;
        goto LABEL_272;
      }
      v179 = a1[784].f32[0];
      v180 = -v179;
      if (v179 > 0.0)
        v180 = a1[784].f32[0];
      if (v180 > 0.2618)
      {
        v181 = a1[783].f32[1];
        v182 = v179 - v181;
        if (v182 <= 0.0)
          v182 = -v182;
        if (v181 <= 0.0)
          v181 = -v181;
        if (v180 >= v181)
          v180 = v181;
        if (v180 < 0.17453)
          v180 = 0.17453;
        v183 = v182 > v180;
        goto LABEL_268;
      }
LABEL_271:
      v139 = 0;
      goto LABEL_272;
    }
    if (v9 <= 0xF)
    {
      if ((v131 & 1) == 0
        && sub_18F48EB4C((uint64_t)v132, v298) <= 10.0
        && *v132 != 4
        && *v132 != 41
        && sub_18F48ED4C((uint64_t)v132, v298) >= 5.0)
      {
        v139 = v15[324].i8[4];
        if (!v139)
        {
LABEL_272:
          v15[317].i8[4] = v139;
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953068);
          v198 = qword_1EE16D820;
          if (!os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
          {
LABEL_298:
            if (!sub_18F1FCA08(115, 2))
              goto LABEL_299;
            v291 = v125;
            bzero(buf, 0x65CuLL);
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2953068);
            v252 = v15[317].u8[4];
            v253 = v15[317].u8[5];
            v254 = *v297;
            v256 = *v297 == 4 || v254 == 41;
            v257 = 1;
            if (v254 > 51)
            {
              if (v254 == 52 || v254 == 56)
                goto LABEL_417;
            }
            else
            {
              if (!v254)
                goto LABEL_420;
              if (v254 == 5)
              {
LABEL_417:
                if ((v254 & 0xFFFFFFFE) == 0xA)
                  v254 = 1;
                else
                  v254 = v257;
LABEL_420:
                if (v297[1] > 1)
                  v258 = v254;
                else
                  v258 = 0;
                v259 = sub_18F48EB4C((uint64_t)v297, v298);
                v260 = *v297;
                v183 = v259 <= 10.0;
                v261 = a1[789].f32[0];
                v262 = !v183;
                v263 = a1[789].f32[1];
                v302 = 1.505e-36;
                *(_DWORD *)v303 = v252;
                *(_WORD *)&v303[4] = 1024;
                *(_DWORD *)&v303[6] = v253;
                *(_WORD *)&v303[10] = 1024;
                *(_DWORD *)&v303[12] = v256;
                *(_WORD *)&v303[16] = 1024;
                *(_DWORD *)&v303[18] = v258;
                *(_WORD *)&v303[22] = 1024;
                *(_DWORD *)&v303[24] = v262;
                *(_WORD *)&v303[28] = 1024;
                *(_DWORD *)&v303[30] = (v260 < 0xC) & (6u >> v260);
                *(_WORD *)&v303[34] = 1024;
                *(_DWORD *)&v303[36] = v294 > 0xF;
                v304 = 2048;
                v305 = v261;
                v306 = 2048;
                v307 = v263;
                v264 = (char *)_os_log_send_and_compose_impl();
                sub_18F419700("Generic", 1, 0, 2, "void CMCorrelatedMotion::feed(const IMUData &, const IMUData &, const CMOQuaternion &, const ActivityState &, uint64_t, uint64_t, double)", "CoreLocation: %s\n", v264);
                if (v264 != buf)
                  free(v264);
                v125 = v291;
                v130 = (void **)(&OBJC_METACLASS___CMCardioFitnessSummary + 24);
                p_vtable = (void **)(&OBJC_METACLASS___CMCardioFitnessSummary + 24);
LABEL_299:
                if (v15[319].i8[4] != 1)
                {
LABEL_395:
                  a1[1256] = (float32x2_t)v298;
                  return;
                }
                v212 = v15[323].u8[4];
                if (v15[324].i8[4])
                {
                  v213 = a1[785].f32[1] * 4.0;
                  if (v213 > 1.7453)
                    v213 = 1.7453;
                  if (a1[1253].f32[0] > v213 && a1[1253].f32[1] > 0.87266)
                  {
                    v214 = a1[1252].f32[0];
                    v215 = -v214;
                    if (v214 <= 0.0)
                      v216 = -v214;
                    else
                      v216 = a1[1252].f32[0];
                    v217 = a1[785].f32[0];
                    if (v217 <= 0.0)
                      v217 = -v217;
                    v218 = v217 - v216;
                    v219 = 0.5236;
                    goto LABEL_322;
                  }
                  v220 = a1[783].f32[1];
                  v216 = -v220;
                  if (v220 <= 0.0)
                    v221 = -v220;
                  else
                    v221 = a1[783].f32[1];
                }
                else
                {
                  v221 = a1[784].f32[1];
                  if (v221 <= 0.0)
                    v221 = -v221;
                  v220 = a1[783].f32[1];
                  v216 = -v220;
                }
                v222 = a1[785].f32[0];
                if (v222 <= 0.0)
                  v222 = -v222;
                v218 = v222 - v221;
                if (v220 > 0.0)
                  v216 = v220;
                v214 = a1[1252].f32[0];
                v215 = -v214;
                v219 = 0.34907;
LABEL_322:
                v223 = a1[784].f32[0];
                if (v223 <= 0.0)
                  v223 = -v223;
                if (v214 <= 0.0)
                  v214 = v215;
                if (!v15[323].i8[4])
                  goto LABEL_331;
                v224 = a1[795].f32[0];
                if (v224 <= 0.0)
                  v224 = -v224;
                if (v224 > 0.17453)
                  v225 = a1[795].f32[1] > 1.9199;
                else
LABEL_331:
                  v225 = 0;
                v226 = a1[1256];
                v227 = v223 - v216;
                v228 = v223 - v214;
                if (!v15[324].i8[4] || v225)
                  goto LABEL_352;
                v229 = a1[1254].f32[1];
                if (v227 <= v228)
                  v230 = v228;
                else
                  v230 = v227;
                if (v229 <= v230)
                  v229 = v230;
                v231 = a1[1255].f32[0];
                if (v231 <= 0.0)
                  v231 = -v231;
                if (v219 <= v229)
                  v219 = v229;
                if (v219 > 0.87266)
                  v219 = 0.87266;
                if (v231 > v219)
                {
                  v15[323].i8[4] = 0;
                  if (!v212)
                    goto LABEL_381;
                }
                else
                {
LABEL_352:
                  if (v15[323].i8[4] && (v228 > 0.34907 || v225 && a1[1254].f32[1] > 0.34907))
                  {
                    v232 = 1;
                  }
                  else
                  {
                    v232 = v218 > 0.61087;
                    if (v227 > 0.43633)
                      v232 = 1;
                  }
                  v15[323].i8[4] = v232;
                  if (v212 == v232)
                  {
                    if (!v232 || *(_QWORD *)&a1[794])
                      goto LABEL_381;
                    v233 = a1[795].f32[1];
                    v234 = a1[795].f32[0];
LABEL_361:
                    v235 = a1[360].u16[0] + (unint64_t)a1[360].u16[1] - 1;
                    v236 = a1[360].u32[1];
                    if (v235 < v236)
                      v236 = 0;
                    v237 = v234 + a1[361].f32[v235 - v236] * ((double)(v298 - *(_QWORD *)&v226) * 0.000001);
                    a1[795].f32[0] = v237;
                    if (v237 <= 0.0)
                      v237 = -v237;
                    if (v237 > v233)
                      a1[795].f32[1] = v237;
                    if (p_vtable[259] != (void *)-1)
                      dispatch_once(&qword_1EE16D818, &unk_1E2953068);
                    v238 = v130[260];
                    if (os_log_type_enabled(v238, OS_LOG_TYPE_DEBUG))
                    {
                      v239 = (float)(a1[795].f32[0] * 57.296);
                      *(_DWORD *)buf = 134217984;
                      *(double *)&buf[4] = v239;
                      _os_log_impl(&dword_18F1DC000, v238, OS_LOG_TYPE_DEBUG, "[UpdateHeadTurnState] headYaw, %.2f", buf, 0xCu);
                    }
                    if (sub_18F1FCA08(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (p_vtable[259] != (void *)-1)
                        dispatch_once(&qword_1EE16D818, &unk_1E2953068);
                      v240 = (float)(a1[795].f32[0] * 57.296);
                      v302 = 3.852e-34;
                      *(double *)v303 = v240;
LABEL_462:
                      v286 = (char *)_os_log_send_and_compose_impl();
                      sub_18F419700("Generic", 1, 0, 2, "void CMCorrelatedMotion::updateHeadTurnState(uint64_t, uint64_t)", "CoreLocation: %s\n", v286);
                      if (v286 != buf)
                        free(v286);
                      goto LABEL_381;
                    }
                    goto LABEL_381;
                  }
                  if (v232)
                  {
                    a1[793] = (float32x2_t)v298;
                    a1[795] = 0;
                    v234 = 0.0;
                    v233 = 0.0;
                    a1[794] = 0;
                    goto LABEL_361;
                  }
                }
                a1[794] = (float32x2_t)v298;
                if (*(_QWORD *)&a1[793] >= v298)
                {
                  if (p_vtable[259] != (void *)-1)
                    dispatch_once(&qword_1EE16D818, &unk_1E2953068);
                  v241 = v130[260];
                  if (os_log_type_enabled(v241, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_18F1DC000, v241, OS_LOG_TYPE_DEBUG, "[UpdateHeadTurnState] Something is wrong with timestamp.", buf, 2u);
                  }
                  if (sub_18F1FCA08(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (p_vtable[259] != (void *)-1)
                      dispatch_once(&qword_1EE16D818, &unk_1E2953068);
                    LOWORD(v302) = 0;
                    goto LABEL_462;
                  }
                }
LABEL_381:
                v242 = a1[783].f32[1];
                if (v242 <= 0.0)
                  v242 = -v242;
                if (v242 > 1.3963)
                {
                  a1[1150] = 0;
                  a1[1149] = 0;
                  a1[1151].i32[0] = 0;
                  *v125 = 1;
                  a1[1254].i32[0] = 0;
                  a1[1257].i32[0] = 0;
                  v15[324].i8[5] = 0;
                  goto LABEL_395;
                }
                v243 = v15[324].u8[4];
                if (v15[324].i8[4])
                {
                  v244 = a1[1254].f32[0];
                  if (v244 <= 0.0)
                    v244 = -v244;
                  v243 = a1[1257].u32[0];
                  if (v244 > 0.61087)
                  {
                    ++v243;
LABEL_393:
                    a1[1257].i32[0] = v243;
                    goto LABEL_394;
                  }
                  if (v243)
                  {
                    --v243;
                    goto LABEL_393;
                  }
                }
                else
                {
                  a1[1257].i32[0] = 0;
                }
LABEL_394:
                v15[324].i8[5] = v243 > 0x1E;
                goto LABEL_395;
              }
            }
            v257 = 0;
            goto LABEL_417;
          }
          v199 = v125;
          v200 = v15[317].u8[4];
          v201 = v15[317].u8[5];
          v202 = *v132;
          v204 = *v132 == 4 || v202 == 41;
          v205 = 1;
          if (v202 > 51)
          {
            if (v202 == 52 || v202 == 56)
              goto LABEL_288;
          }
          else
          {
            if (!v202)
              goto LABEL_291;
            if (v202 == 5)
            {
LABEL_288:
              if ((v202 & 0xFFFFFFFE) == 0xA)
                v202 = 1;
              else
                v202 = v205;
LABEL_291:
              if (v132[1] > 1)
                v206 = v202;
              else
                v206 = 0;
              v207 = sub_18F48EB4C((uint64_t)v297, v298);
              v208 = *v297;
              v183 = v207 <= 10.0;
              v209 = a1[789].f32[0];
              v210 = !v183;
              v211 = a1[789].f32[1];
              *(_DWORD *)buf = 67111168;
              *(_DWORD *)&buf[4] = v200;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v201;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&buf[16] = v204;
              *(_WORD *)&buf[20] = 1024;
              *(_DWORD *)&buf[22] = v206;
              *(_WORD *)&buf[26] = 1024;
              *(_DWORD *)&buf[28] = v210;
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = (v208 < 0xC) & (6u >> v208);
              *(_WORD *)&buf[38] = 1024;
              *(_DWORD *)&buf[40] = v294 > 0xF;
              v309 = 2048;
              v310 = v209;
              v311 = 2048;
              v312 = v211;
              _os_log_impl(&dword_18F1DC000, v198, OS_LOG_TYPE_DEBUG, "[CorrelatedMotion] isInCorrelatedActivity, %d, onGymMachine, %d, srcWalking, %d, srcVehicle, %d, srcMovingLT, %d, srcStatic, %d, noBTZLT, %d, auxMovingDurationSecs, %.3f, srcStaticDurationSecs, %.3f", buf, 0x40u);
              v125 = v199;
              v130 = &OBJC_METACLASS___CMCardioFitnessSummary.vtable;
              p_vtable = &OBJC_METACLASS___CMCardioFitnessSummary.vtable;
              goto LABEL_298;
            }
          }
          v205 = 0;
          goto LABEL_288;
        }
      }
      v131 = v15[317].u8[5];
    }
    v140 = v125;
    if (v131 || *v132 == 4 || *v132 == 41 || (v141 = v15[324].u8[4], v15[324].i8[4]))
    {
      v141 = v15[324].u8[4];
      v142 = (float)v141 + 2.0;
      v143 = 1;
    }
    else
    {
      v143 = 0;
      v142 = 1.0;
    }
    v144 = a1[1252].f32[1];
    v145 = a1[1252].f32[0] - v144;
    if (v145 <= 0.0)
      v146 = -v145;
    else
      v146 = a1[1252].f32[0] - v144;
    v147 = a1[784].f32[0] - a1[783].f32[1];
    if (v147 <= 0.0)
      v148 = -v147;
    else
      v148 = a1[784].f32[0] - a1[783].f32[1];
    if (!v141)
      goto LABEL_161;
    v149 = a1[785].f32[1] * 4.0;
    if (v149 > 1.7453)
      v149 = 1.7453;
    if (a1[1253].f32[0] <= v149 || a1[1253].f32[1] <= 0.87266)
      goto LABEL_161;
    if (v144 <= 0.0)
      v146 = -v144;
    else
      v146 = a1[1252].f32[1];
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953068);
    v150 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
    {
      if (*v296)
        sub_18F33FB38((uint64_t)v296);
      v151 = a1[357].f32[0];
      if (a1[302].i8[0])
        sub_18F33FB38((uint64_t)v293);
      v152 = a1[302].f32[1];
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = v151;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v152;
      *(_WORD *)&buf[22] = 2048;
      *(double *)&buf[24] = v146;
      _os_log_impl(&dword_18F1DC000, v150, OS_LOG_TYPE_DEBUG, "[CorrelatedActivity] Outdoor, auxRotGravFull, %.3f, srcRotGravFull, %.3f, diff, %.3f", buf, 0x20u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953068);
      if (*v296)
        sub_18F33FB38((uint64_t)v296);
      v287 = a1[357].f32[0];
      if (a1[302].i8[0])
        sub_18F33FB38((uint64_t)v293);
      v288 = a1[302].f32[1];
      v302 = 3.8522e-34;
      *(double *)v303 = v287;
      *(_WORD *)&v303[8] = 2048;
      *(double *)&v303[10] = v288;
      *(_WORD *)&v303[18] = 2048;
      *(double *)&v303[20] = v146;
      v289 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "BOOL CMCorrelatedMotion::isLikelyInCorrelatedActivityMusic(const ActivityState &, BOOL, uint64_t) const", "CoreLocation: %s\n", v289);
      if (v289 != buf)
        free(v289);
      v132 = v297;
      v130 = &OBJC_METACLASS___CMCardioFitnessSummary.vtable;
      if (!v143)
        goto LABEL_239;
    }
    else
    {
LABEL_161:
      if (!v143)
      {
LABEL_239:
        v190 = a1[785].f32[0];
        if (v190 <= 0.0)
          v190 = -v190;
        v191 = a1[360].u16[0] + (unint64_t)a1[360].u16[1] - 1;
        v192 = a1[360].u32[1];
        if (v191 < v192)
          v192 = 0;
        v193 = a1[361].f32[v191 - v192];
        if (v193 <= 0.0)
          v193 = -v193;
        v194 = (float)(v190 + v193) * 0.5;
        v195 = a1[784].f32[0];
        if (v195 <= 0.0)
          v195 = -v195;
        if (v195 > v194)
          v194 = v195;
        if (v146 < v194)
          v194 = v146;
        if (v194 < (float)(v142 * 0.1))
        {
          v139 = 1;
          v125 = v140;
          goto LABEL_272;
        }
        v125 = v140;
        if (v15[324].i8[4])
        {
          v196 = a1[785].f32[1] * 4.0;
          if (v196 > 1.7453)
            v196 = 1.7453;
          if (a1[1253].f32[0] > v196)
          {
            v139 = 0;
            if (v195 <= 0.2618 || a1[1253].f32[1] > 0.87266)
              goto LABEL_272;
            goto LABEL_261;
          }
        }
        if (v195 > 0.2618)
        {
LABEL_261:
          v197 = a1[783].f32[1];
          if (v197 <= 0.0)
            v197 = -v197;
          if (v195 >= v197)
            v195 = v197;
          if (v195 < 0.17453)
            v195 = 0.17453;
          v183 = v148 > v195;
LABEL_268:
          v139 = !v183;
          goto LABEL_272;
        }
        goto LABEL_271;
      }
    }
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953068);
    v153 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
    {
      if (!v15[324].i8[4])
        goto LABEL_227;
      v154 = a1[785].f32[1] * 4.0;
      if (v154 > 1.7453)
        v154 = 1.7453;
      if (a1[1253].f32[0] > v154)
        v155 = a1[1253].f32[1] > 0.87266;
      else
LABEL_227:
        v155 = 0;
      if (*v296)
        sub_18F33FB38((uint64_t)v296);
      v184 = a1[357].f32[0];
      if (a1[302].i8[0])
        sub_18F33FB38((uint64_t)v293);
      v185 = a1[302].f32[1];
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&buf[4] = v155;
      *(_WORD *)&buf[8] = 2048;
      *(double *)&buf[10] = v184;
      *(_WORD *)&buf[18] = 2048;
      *(double *)&buf[20] = v185;
      *(_WORD *)&buf[28] = 2048;
      *(double *)&buf[30] = v146;
      _os_log_impl(&dword_18F1DC000, v153, OS_LOG_TYPE_DEBUG, "[CorrelatedActivity] srcInHand, %d, auxRotGravFull, %.3f, srcRotGravFull, %.3f, diff, %.3f", buf, 0x26u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953068);
      if (!v15[324].i8[4])
        goto LABEL_451;
      v268 = a1[785].f32[1] * 4.0;
      if (v268 > 1.7453)
        v268 = 1.7453;
      if (a1[1253].f32[0] > v268)
        v269 = a1[1253].f32[1] > 0.87266;
      else
LABEL_451:
        v269 = 0;
      if (*v296)
        sub_18F33FB38((uint64_t)v296);
      v283 = a1[357].f32[0];
      if (a1[302].i8[0])
        sub_18F33FB38((uint64_t)v293);
      v284 = a1[302].f32[1];
      v302 = 1.5048e-36;
      *(_DWORD *)v303 = v269;
      *(_WORD *)&v303[4] = 2048;
      *(double *)&v303[6] = v283;
      *(_WORD *)&v303[14] = 2048;
      *(double *)&v303[16] = v284;
      *(_WORD *)&v303[24] = 2048;
      *(double *)&v303[26] = v146;
      v285 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "BOOL CMCorrelatedMotion::isLikelyInCorrelatedActivityMusic(const ActivityState &, BOOL, uint64_t) const", "CoreLocation: %s\n", v285);
      if (v285 != buf)
        free(v285);
      v132 = v297;
    }
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953068);
    v186 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
    {
      v187 = a1[784].f32[0];
      v188 = a1[783].f32[1];
      v189 = a1[783].f32[0];
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = v187;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v188;
      *(_WORD *)&buf[22] = 2048;
      *(double *)&buf[24] = v189;
      _os_log_impl(&dword_18F1DC000, v186, OS_LOG_TYPE_DEBUG, "[CorrelatedActivity] auxRotGrav, %.3f, srcRotGrav, %.3f, relW, %.3f", buf, 0x20u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953068);
      v270 = a1[784].f32[0];
      v271 = a1[783].f32[1];
      v272 = a1[783].f32[0];
      v302 = 3.8522e-34;
      *(double *)v303 = v270;
      *(_WORD *)&v303[8] = 2048;
      *(double *)&v303[10] = v271;
      *(_WORD *)&v303[18] = 2048;
      *(double *)&v303[20] = v272;
      v273 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "BOOL CMCorrelatedMotion::isLikelyInCorrelatedActivityMusic(const ActivityState &, BOOL, uint64_t) const", "CoreLocation: %s\n", v273);
      if (v273 != buf)
        free(v273);
      v132 = v297;
    }
    goto LABEL_239;
  }
}

BOOL sub_18F38C498(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  _BOOL8 result;
  double v7;
  double v8;
  double *v9;
  double v10;
  double v11;

  result = sub_18F38C54C(a1, a2, a3);
  if (result || (result = sub_18F38C620(a1)))
  {
    *(double *)(a1 + 6224) = *(double *)(a1 + 6224) + a4;
    v7 = *(double *)(a1 + 6232);
    if (v7 > a4)
      *(double *)(a1 + 6232) = v7 - a4;
  }
  else
  {
    v8 = *(double *)(a1 + 6232) + a4;
    *(double *)(a1 + 6232) = v8;
    v9 = (double *)(a1 + 6224);
    v10 = *(double *)(a1 + 6224);
    if (v10 > a4)
    {
      v10 = v10 - a4;
      *v9 = v10;
    }
    if (v8 >= 2.5)
      goto LABEL_11;
    v11 = v10 * 0.100000001;
    if (v11 < 0.100000001)
      v11 = 0.100000001;
    if (v8 >= v11)
    {
LABEL_11:
      *v9 = 0.0;
      *(_QWORD *)(a1 + 6232) = 0;
    }
  }
  return result;
}

BOOL sub_18F38C54C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;

  if (*(_DWORD *)(a1 + 4) != *(unsigned __int16 *)(a1 + 2)
    || *(_DWORD *)(a1 + 1212) != *(unsigned __int16 *)(a1 + 1210)
    || *(_DWORD *)(a1 + 3292) != *(unsigned __int16 *)(a1 + 3290))
  {
    return 0;
  }
  v3 = 0;
  v4 = 0.0;
  do
  {
    v4 = v4 + (float)(*(float *)(a2 + 24 + v3) * *(float *)(a2 + 24 + v3));
    v3 += 4;
  }
  while (v3 != 12);
  v5 = 0;
  v6 = 0.0;
  do
  {
    v6 = v6 + (float)(*(float *)(a3 + 24 + v5) * *(float *)(a3 + 24 + v5));
    v5 += 4;
  }
  while (v5 != 12);
  v7 = sqrtf(v4) - sqrtf(v6);
  if (v7 <= 0.0)
    v8 = -v7;
  else
    v8 = v7;
  return sub_18F38CA8C((unsigned __int16 *)a1) <= 0.10472 && v8 <= 0.05;
}

BOOL sub_18F38C620(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  int v4;
  unint64_t v5;
  float v6;
  _BOOL4 v8;
  _BYTE *v9;
  float v10;
  unint64_t v11;
  float v12;
  _BOOL4 v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  _BOOL4 v23;
  _BOOL4 v25;
  float v26;
  _BOOL4 v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  float v41;
  _BOOL4 v42;
  float v43;
  float v44;
  float v45;

  v2 = (_BYTE *)(a1 + 6320);
  v3 = *(unsigned __int16 *)(a1 + 2);
  v4 = *(_DWORD *)(a1 + 4);
  if (*(_BYTE *)(a1 + 6336) == 1)
  {
    if (v4 == v3
      && *(_DWORD *)(a1 + 1212) == *(unsigned __int16 *)(a1 + 1210)
      && *(_DWORD *)(a1 + 3292) == *(unsigned __int16 *)(a1 + 3290)
      && *v2)
    {
      v5 = *(_QWORD *)(a1 + 6328);
      v6 = *(float *)(a1 + 6284);
      if (*(_BYTE *)(a1 + 6321))
      {
        v8 = v6 >= 0.17453 || v5 > 0x1D;
        v9 = (_BYTE *)(a1 + 6376);
        v10 = (float)((float)v8 + 2.0) * 0.087266;
        if (!*(_BYTE *)(a1 + 6376))
        {
LABEL_64:
          v33 = *(float *)(a1 + 6272) - *(float *)(a1 + 6268);
          if (v33 <= 0.0)
            v33 = -v33;
          v27 = v33 <= v10;
          if (!*(_BYTE *)(a1 + 6321))
          {
            v42 = *(float *)(a1 + 6264) <= 0.5236;
            return v27 && v42;
          }
LABEL_67:
          v43 = sub_18F33DA38((unsigned __int16 *)(a1 + 1208));
          v44 = v34;
          v45 = v35;
          v36 = (float)((float)(v35 * *(float *)(a1 + 6308)) + (float)(v34 * *(float *)(a1 + 6304)))
              + (float)(v43 * *(float *)(a1 + 6300));
          v37 = -v36;
          if (v36 > 0.0)
            v37 = v36;
          if (*v9 && *(float *)(a1 + 6284) >= 0.87266)
          {
            v38 = *(float *)(a1 + 6280);
            if (v38 <= 0.0)
              v38 = -v38;
            v37 = (float)(v37 + v38) * 0.5;
          }
          if (v6 < 0.17453)
          {
            v39 = fmaxf(*(float *)(a1 + 6284) * 1.5, 0.087266);
          }
          else if (v5 <= 0x1D)
          {
            v39 = *(float *)(a1 + 6284) + *(float *)(a1 + 6284);
            if (v39 >= 0.5236)
              v39 = 0.5236;
          }
          else
          {
            v39 = 0.5236;
          }
          v40 = 0;
          v41 = 0.0;
          do
          {
            v41 = v41 + (float)(*(float *)((char *)&v43 + v40) * *(float *)((char *)&v43 + v40));
            v40 += 4;
          }
          while (v40 != 12);
          v42 = sqrtf(v41) < 2.7925;
          if (v37 >= v39)
            v42 = 0;
          return v27 && v42;
        }
      }
      else
      {
        v9 = (_BYTE *)(a1 + 6376);
        if (!*(_BYTE *)(a1 + 6376))
        {
          v10 = 0.1309;
          goto LABEL_64;
        }
        v25 = v6 >= 0.17453 || v5 > 0x1D;
        v10 = (float)((float)v25 + 2.0) * 0.087266;
      }
      v26 = *(float *)(a1 + 6272);
      if (v26 <= 0.0)
        v26 = -v26;
      v27 = v26 <= v10;
      goto LABEL_67;
    }
    return 0;
  }
  if (v4 != v3
    || *(_DWORD *)(a1 + 1212) != *(unsigned __int16 *)(a1 + 1210)
    || *(_DWORD *)(a1 + 3292) != *(unsigned __int16 *)(a1 + 3290))
  {
    return 0;
  }
  v11 = *(_QWORD *)(a1 + 6328);
  v12 = *(float *)(a1 + 6284);
  v14 = v12 >= 0.17453 || v11 > 0x1D;
  if (*(_BYTE *)(a1 + 6321))
    v15 = (float)((float)v14 + 2.0) * 0.087266;
  else
    v15 = 0.1309;
  v16 = *(float *)(a1 + 6272) - *(float *)(a1 + 6268);
  if (v16 <= 0.0)
    v17 = -v16;
  else
    v17 = *(float *)(a1 + 6272) - *(float *)(a1 + 6268);
  if (*(_BYTE *)(a1 + 6321))
  {
    v18 = sub_18F33DA38((unsigned __int16 *)(a1 + 1208));
    v43 = v18;
    v44 = v19;
    v45 = v20;
    if (v12 < 0.17453)
    {
      v21 = fmaxf(*(float *)(a1 + 6284) * 1.5, 0.087266);
    }
    else if (v11 <= 0x1D)
    {
      v21 = *(float *)(a1 + 6284) + *(float *)(a1 + 6284);
      if (v21 >= 0.5236)
        v21 = 0.5236;
    }
    else
    {
      v21 = 0.5236;
    }
    v28 = 0;
    v29 = 0.0;
    do
    {
      v29 = v29 + (float)(*(float *)((char *)&v43 + v28) * *(float *)((char *)&v43 + v28));
      v28 += 4;
    }
    while (v28 != 12);
    if (sqrtf(v29) >= 2.7925)
    {
      v23 = 0;
    }
    else
    {
      v30 = (float)((float)(v20 * *(float *)(a1 + 6308)) + (float)(v19 * *(float *)(a1 + 6304)))
          + (float)(v18 * *(float *)(a1 + 6300));
      v31 = -v30;
      if (v30 > 0.0)
        v31 = v30;
      v23 = v31 < v21;
    }
  }
  else
  {
    v23 = *(float *)(a1 + 6264) <= 0.5236;
  }
  return v17 <= v15 && *v2 != 0 && v23;
}

float sub_18F38CA10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;

  v2 = 0;
  v3 = 0.0;
  do
  {
    v3 = v3 + (float)(*(float *)(a1 + 24 + v2) * *(float *)(a1 + 24 + v2));
    v2 += 4;
  }
  while (v2 != 12);
  v4 = 0;
  v5 = 0.0;
  do
  {
    v5 = v5 + (float)(*(float *)(a2 + 24 + v4) * *(float *)(a2 + 24 + v4));
    v4 += 4;
  }
  while (v4 != 12);
  v6 = sqrtf(v3) + -1.0;
  if (v6 <= 0.0)
    v6 = -v6;
  v7 = sqrtf(v5) + -1.0;
  if (v7 <= 0.0)
    v7 = -v7;
  return v6 + v7;
}

float sub_18F38CA8C(unsigned __int16 *a1)
{
  float v2;

  v2 = sub_18F38DBC4(a1);
  if (v2 <= sub_18F38DC18((uint64_t)a1))
    return sub_18F38DC18((uint64_t)a1);
  else
    return sub_18F38DBC4(a1);
}

void sub_18F38CADC(uint64_t a1, float *a2, float *a3, float *a4, uint64_t a5)
{
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  _BOOL4 v19;
  float v20;
  float v21;
  float v23;
  NSObject *v24;
  float v25;
  char *v26;
  float v27[4];
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  uint64_t v32;
  uint8_t buf[4];
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 4) == *(unsigned __int16 *)(a1 + 2)
    && *(_DWORD *)(a1 + 1212) == *(unsigned __int16 *)(a1 + 1210)
    && *(_DWORD *)(a1 + 3292) == *(unsigned __int16 *)(a1 + 3290))
  {
    v9 = 0;
    v10 = 0.0;
    do
    {
      v10 = v10 + (float)(a3[v9] * a3[v9]);
      ++v9;
    }
    while (v9 != 3);
    v11 = sub_18F3D39F4(a4, a3[3], a3[4], a3[5]);
    v12 = 0;
    v14 = a2[4] - v13;
    v16 = a2[5] - v15;
    v27[0] = a2[3] - v11;
    v27[1] = v14;
    v27[2] = v16;
    v17 = 0.0;
    do
    {
      v17 = v17 + (float)(v27[v12] * v27[v12]);
      ++v12;
    }
    while (v12 != 3);
    v18 = sqrtf(v10);
    v19 = sub_18F38C54C(a1, (uint64_t)a2, (uint64_t)a3);
    v20 = sub_18F38CA10((uint64_t)a2, (uint64_t)a3);
    if (v18 <= 0.20944)
    {
      v21 = sqrtf(v17);
      if (v21 <= 0.15 && v19)
      {
        if (qword_1EE16D818 != -1)
        {
          v25 = v20;
          dispatch_once(&qword_1EE16D818, &unk_1E2953068);
          v20 = v25;
        }
        v23 = v21 + v20;
        v24 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349568;
          v34 = v23;
          v35 = 2050;
          v36 = v18;
          v37 = 2050;
          v38 = a5;
          _os_log_impl(&dword_18F1DC000, v24, OS_LOG_TYPE_DEBUG, "[CMRelDMSensorFusionMekf][RelativeGravityConstraints][CorrelatedAnchor] MagnitudeDiffUnity,%{public}.2e, rotationMax,%{public}.2f,timestamp,%{public}llu", buf, 0x20u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953068);
          v27[3] = 3.9124e-34;
          v28 = v23;
          v29 = 2050;
          v30 = v18;
          v31 = 2050;
          v32 = a5;
          v26 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "float CMCorrelatedMotion::getQuiescentMeasureAnchor(const IMUData &, const IMUData &, const CMOQuaternion &, uint64_t) const", "CoreLocation: %s\n", v26);
          if (v26 != (char *)buf)
            free(v26);
        }
      }
    }
  }
}

void sub_18F38CDE0(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, float32x4_t a5)
{
  float v8;
  uint64_t i;
  float v10;
  float v11;
  uint64_t j;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float v20;
  NSObject *v21;
  char *v22;
  float v23;
  _BYTE buf[1628];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 4) == *(unsigned __int16 *)(a1 + 2)
    && *(_DWORD *)(a1 + 1212) == *(unsigned __int16 *)(a1 + 1210)
    && *(_DWORD *)(a1 + 3292) == *(unsigned __int16 *)(a1 + 3290))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0x3F80000000000000;
    if ((sub_18F38D114(a1, a2, a3, (float32x2_t *)buf, 0, a5) & 1) != 0)
    {
      v8 = 0.0;
      for (i = 12; i != 24; i += 4)
        v8 = v8 + (float)(*(float *)(a2 + i) * *(float *)(a2 + i));
      v10 = sqrtf(v8) + -1.0;
      v11 = 0.0;
      for (j = 3; j != 6; ++j)
        v11 = v11 + (float)(a3[j] * a3[j]);
      if (v10 <= 0.0)
        v10 = -v10;
      v13 = sqrtf(v11) + -1.0;
      if (v13 <= 0.0)
        v13 = -v13;
      if (v10 <= v13)
      {
        v16 = 0;
        v15 = 0.0;
        do
        {
          v15 = v15 + (float)(a3[v16 + 3] * a3[v16 + 3]);
          ++v16;
        }
        while (v16 != 3);
      }
      else
      {
        v14 = 0;
        v15 = 0.0;
        do
        {
          v15 = v15 + (float)(*(float *)(a2 + 12 + v14) * *(float *)(a2 + 12 + v14));
          v14 += 4;
        }
        while (v14 != 12);
      }
      v17 = sqrtf(v15) + -1.0;
      if (v17 <= 0.0)
        v18 = -v17;
      else
        v18 = v17;
      v19 = sub_18F38CA10(a2, (uint64_t)a3);
      if (qword_1EE16D818 != -1)
      {
        v23 = v19;
        dispatch_once(&qword_1EE16D818, &unk_1E2953068);
        v19 = v23;
      }
      v20 = v19 + v18;
      v21 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(double *)&buf[4] = (float)(v20 * v20);
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = a4;
        _os_log_impl(&dword_18F1DC000, v21, OS_LOG_TYPE_DEBUG, "[CMRelDMSensorFusionMekf][RelativeGravityConstraints][CorrelatedBTZ] measNoiseVar,%{public}.2e, timestamp,%{public}llu", buf, 0x16u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953068);
        v22 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "float CMCorrelatedMotion::getQuiescentMeasureIMUOnly(const IMUData &, const IMUData &, uint64_t) const", "CoreLocation: %s\n", v22);
        if (v22 != buf)
          free(v22);
      }
    }
  }
}

uint64_t sub_18F38D114(uint64_t a1, uint64_t a2, float *a3, float32x2_t *a4, int a5, float32x4_t a6)
{
  uint64_t v9;
  float v10;
  __int32 v11;
  float v12;
  float v13;
  float v14;
  float v16;
  uint64_t i;
  float v18;
  uint64_t j;
  float v20;
  float v21;
  _BOOL4 v22;
  _BOOL4 v23;
  float32x4_t v24;

  if (*(_DWORD *)(a1 + 4) != *(unsigned __int16 *)(a1 + 2)
    || *(_DWORD *)(a1 + 1212) != *(unsigned __int16 *)(a1 + 1210)
    || *(_DWORD *)(a1 + 3292) != *(unsigned __int16 *)(a1 + 3290))
  {
    return 0;
  }
  v9 = 0;
  v10 = 0.0;
  do
  {
    v10 = v10 + (float)(a3[v9] * a3[v9]);
    ++v9;
  }
  while (v9 != 3);
  if (a5)
  {
    v11 = a4[1].i32[1];
    a6.f32[0] = -a4[1].f32[0];
    *(float32x2_t *)v24.f32 = vneg_f32(*a4);
    v24.i64[1] = __PAIR64__(v11, a6.u32[0]);
    sub_18F1FFE94(&v24, a6);
    sub_18F3D39F4(v24.f32, *a3, a3[1], a3[2]);
    if (v12 <= 0.0)
      v13 = -v12;
    else
      v13 = v12;
    v14 = 0.25;
  }
  else
  {
    v14 = 0.15;
    v13 = sqrtf(v10);
  }
  v16 = 0.0;
  for (i = 12; i != 24; i += 4)
    v16 = v16 + (float)(*(float *)(a2 + i) * *(float *)(a2 + i));
  v18 = 0.0;
  for (j = 3; j != 6; ++j)
    v18 = v18 + (float)(a3[j] * a3[j]);
  v20 = sqrtf(v16) - sqrtf(v18);
  if (v20 <= 0.0)
    v21 = -v20;
  else
    v21 = v20;
  v22 = sub_18F38C54C(a1, a2, (uint64_t)a3);
  if (sub_18F38D2C0(a1) && *(float *)(a1 + 6264) <= 0.17453 || sub_18F38C620(a1))
    return 1;
  v23 = v13 <= 0.20944;
  if (v21 > v14)
    v23 = 0;
  return v23 & v22;
}

uint64_t sub_18F38D2C0(uint64_t a1)
{
  _BYTE *v1;
  float v2;
  _BOOL4 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  _BOOL4 v9;
  BOOL v10;
  float v11;
  float v12;
  float v13;
  float v14;

  v1 = (_BYTE *)(a1 + 6320);
  v2 = *(float *)(a1 + 6252);
  v3 = *(float *)(a1 + 6264) <= (float)(v2 * 0.5)
    && *(float *)(a1 + 6248) < (float)(v2 + 0.17453)
    && *(float *)(a1 + 6240) < (float)(*(float *)(a1 + 6244) + 0.87266);
  if (*v1 && *(float *)(a1 + 6260) < 2.8074)
    goto LABEL_21;
  v4 = *(float *)(a1 + 6268) - *(float *)(a1 + 6272);
  v5 = -v4;
  if (v4 > 0.0)
    v5 = *(float *)(a1 + 6268) - *(float *)(a1 + 6272);
  if (v5 <= 0.34907)
    goto LABEL_14;
  v6 = *(float *)(a1 + 6248);
  if (v2 < v6)
    v6 = *(float *)(a1 + 6252);
  if (v6 > 0.087266 && *(float *)(a1 + 6260) <= 0.31193)
  {
LABEL_14:
    v7 = *(float *)(a1 + 6276) - *(float *)(a1 + 6280);
    if (v7 <= 0.0)
      v7 = -v7;
    if (v7 > 0.34907)
    {
      v8 = *(float *)(a1 + 6244);
      if (v8 >= *(float *)(a1 + 6240))
        v8 = *(float *)(a1 + 6240);
      if (v8 > 0.087266)
      {
        v9 = *(float *)(a1 + 6256) <= 0.31193;
        goto LABEL_23;
      }
      goto LABEL_22;
    }
LABEL_21:
    v9 = 1;
    goto LABEL_23;
  }
LABEL_22:
  v9 = 0;
LABEL_23:
  if (*(_BYTE *)(a1 + 6336) == 1)
  {
    if (*v1)
      v10 = *(_BYTE *)(a1 + 6376) == 0;
    else
      v10 = 0;
    if (!v10 || *(float *)(a1 + 6260) >= 2.8074)
    {
      v11 = *(float *)(a1 + 6268) - *(float *)(a1 + 6272);
      v12 = -v11;
      if (v11 > 0.0)
        v12 = *(float *)(a1 + 6268) - *(float *)(a1 + 6272);
      if (v12 > 0.34907)
      {
        if (v2 >= *(float *)(a1 + 6248))
          v2 = *(float *)(a1 + 6248);
        if (v2 <= 0.087266 || *(float *)(a1 + 6260) > 0.31193)
          goto LABEL_45;
      }
      v13 = *(float *)(a1 + 6276) - *(float *)(a1 + 6280);
      if (v13 <= 0.0)
        v13 = -v13;
      if (v13 > 0.34907)
      {
        v14 = *(float *)(a1 + 6244);
        if (v14 >= *(float *)(a1 + 6240))
          v14 = *(float *)(a1 + 6240);
        if (v14 > 0.087266)
        {
          v9 = *(float *)(a1 + 6256) <= 0.31193;
          return v3 & v9;
        }
LABEL_45:
        v9 = 0;
        return v3 & v9;
      }
    }
    v9 = 1;
  }
  return v3 & v9;
}

float32x2_t *sub_18F38D4E4(unsigned __int16 *a1, unint64_t a2, unint64_t a3)
{
  float32x2_t *result;
  __int128 v7;
  float v8;
  float32x2_t v9;
  float v10;
  float32x2_t v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  float32x2_t v15;
  float v16;
  float32x2_t v17;
  NSObject *v18;
  char *v19;
  __int128 v20;
  float v21;
  uint8_t buf[1640];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a1[1])
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954B88);
    v18 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 210,variance() on empty buffer.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954B88);
      v19 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const CMVector<T, N> CMVectorBufferBase<float, 3>::variance(size_t, size_t) const [T = float, N = 3]", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
  }
  v21 = 1.0 / (float)(a3 - a2);
  result = (float32x2_t *)sub_18F33FF64(a1, a2);
  v8 = v21;
  v9 = *result;
  v10 = result[1].f32[0];
  v11 = vmul_n_f32(*result, v21);
  v12 = v21 * v10;
  v13 = a2 + 1;
  if (v13 < a3)
  {
    v14 = v13;
    do
    {
      result = (float32x2_t *)sub_18F33FF64(a1, v14);
      v8 = v21;
      v11 = vadd_f32(v11, vmul_n_f32(*result, v21));
      v12 = v12 + (float)(v21 * result[1].f32[0]);
      ++v14;
    }
    while (a3 != v14);
  }
  v15 = vsub_f32(v9, v11);
  *(float32x2_t *)&v7 = vmul_n_f32(vmul_f32(v15, v15), v8);
  v16 = v8 * (float)((float)(v10 - v12) * (float)(v10 - v12));
  if (v13 < a3)
  {
    do
    {
      v20 = v7;
      result = (float32x2_t *)sub_18F33FF64(a1, v13);
      *((_QWORD *)&v7 + 1) = *((_QWORD *)&v20 + 1);
      v17 = vsub_f32(*result, v11);
      *(float32x2_t *)&v7 = vadd_f32(*(float32x2_t *)&v20, vmul_n_f32(vmul_f32(v17, v17), v21));
      v16 = v16 + (float)(v21 * (float)((float)(result[1].f32[0] - v12) * (float)(result[1].f32[0] - v12)));
      ++v13;
    }
    while (a3 != v13);
  }
  return result;
}

float sub_18F38D784(unsigned __int16 *a1)
{
  unint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  _DWORD v21[3];
  _DWORD v22[3];

  v2 = a1[1];
  v3 = sub_18F3403AC(a1, v2 - 20, v2 - 10);
  v5 = v4;
  v7 = v6;
  v8 = 0;
  *(float *)v22 = v3;
  *(float *)&v22[1] = v4;
  *(float *)&v22[2] = v6;
  v9 = 0.0;
  do
  {
    v9 = v9 + (float)(*(float *)&v22[v8] * *(float *)&v22[v8]);
    ++v8;
  }
  while (v8 != 3);
  v10 = sub_18F3403AC(a1, v2 - 10, v2);
  v13 = 0;
  *(float *)v21 = v10;
  *(float *)&v21[1] = v11;
  *(float *)&v21[2] = v12;
  v14 = 0.0;
  do
  {
    v14 = v14 + (float)(*(float *)&v21[v13] * *(float *)&v21[v13]);
    ++v13;
  }
  while (v13 != 3);
  v15 = sqrtf(v9);
  v16 = sqrtf(v14);
  if (v16 >= v15)
    v17 = v15;
  else
    v17 = v16;
  v18 = 1.0;
  if (v17 > 0.2618)
  {
    v19 = (float)((float)((float)(v7 / v15) * (float)(v12 / v16)) + (float)((float)(v5 / v15) * (float)(v11 / v16)))
        + (float)((float)(v3 / v15) * (float)(v10 / v16));
    if (v19 <= 0.0)
      return -v19;
    else
      return v19;
  }
  return v18;
}

float sub_18F38D8A0(uint64_t a1)
{
  float v2;
  float v3;
  float v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float result;
  _DWORD v10[3];

  v2 = sub_18F3403AC((unsigned __int16 *)a1, *(unsigned __int16 *)(a1 + 2) - 10, *(unsigned __int16 *)(a1 + 2));
  v5 = 0;
  *(float *)v10 = v2;
  *(float *)&v10[1] = v3;
  *(float *)&v10[2] = v4;
  v6 = 0.0;
  do
  {
    v6 = v6 + (float)(*(float *)&v10[v5] * *(float *)&v10[v5]);
    ++v5;
  }
  while (v5 != 3);
  v7 = sqrtf(v6);
  v8 = (float)((float)((float)(v4 / v7) * *(float *)(a1 + 6296)) + (float)((float)(v3 / v7) * *(float *)(a1 + 6292)))
     + (float)((float)(v2 / v7) * *(float *)(a1 + 6288));
  result = -v8;
  if (v8 > 0.0)
    return v8;
  return result;
}

BOOL sub_18F38D930(uint64_t a1)
{
  float v1;
  float v3;
  float v4;
  float v5;
  float v7;
  uint64_t i;

  v1 = *(float *)(a1 + 6240);
  if (v1 < 0.5236)
    return 0;
  v3 = *(float *)(a1 + 6244);
  if (v3 > (float)(v1 + 0.087266))
    goto LABEL_11;
  v4 = 0.76;
  if (v3 > 0.43633)
  {
    v5 = *(float *)(a1 + 6276) - *(float *)(a1 + 6280);
    if (v5 <= 0.0)
      v5 = -v5;
    if (v5 <= 0.34907)
      goto LABEL_11;
    if (v3 < v1)
      v1 = *(float *)(a1 + 6244);
    if (v1 > 0.087266 && *(float *)(a1 + 6256) <= 0.31193)
LABEL_11:
      v4 = 0.6;
  }
  if (sub_18F38D784((unsigned __int16 *)a1) <= v4)
    return 1;
  if ((sub_18F38D2C0(a1) & 1) != 0)
    return 0;
  v7 = 0.0;
  for (i = 1572; i != 1575; ++i)
    v7 = v7 + (float)(*(float *)(a1 + 4 * i) * *(float *)(a1 + 4 * i));
  return sqrtf(v7) < 0.001 || sub_18F38D8A0(a1) <= 0.4;
}

BOOL sub_18F38DA68(float *a1)
{
  float v1;
  uint64_t v2;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;

  v1 = a1[1564];
  if (v1 < 0.030462)
    return 0;
  v4 = a1[1560];
  v5 = a1[1562];
  if (v4 <= v5)
    v6 = a1[1562];
  else
    v6 = a1[1560];
  if (v6 <= 0.87266)
    goto LABEL_22;
  if (v1 <= a1[1565])
    v1 = a1[1565];
  if (v1 <= 0.31193)
  {
LABEL_22:
    v2 = 0;
    v7 = a1[1569];
    v8 = a1[1570];
    v9 = v7 - v8;
    if ((float)(v7 - v8) <= 0.0)
      v9 = -(float)(v7 - v8);
    v10 = a1[1567] - a1[1568];
    if (v10 <= 0.0)
      v10 = -v10;
    if (v9 >= v10)
      v9 = v10;
    if (v8 <= 0.0)
      v8 = -v8;
    if (v7 <= 0.0)
      v7 = -v7;
    if (v8 >= v7 || v9 <= 0.34907)
      return v2;
  }
  v11 = a1[1563];
  v12 = v11 * 1.5;
  if ((float)(v11 * 1.5) < 0.087266)
    v12 = 0.087266;
  if (a1[1566] >= v12)
  {
    v13 = v4 <= v5 ? a1[1560] : a1[1562];
    v14 = v5 - v11;
    v15 = v4 - a1[1561];
    if (v14 > v15)
      v15 = v14;
    if (v13 > 0.087266 && v15 >= 0.17453)
      return 1;
  }
  return sub_18F38D930((uint64_t)a1);
}

os_log_t sub_18F38DB98()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1EE16D820 = (uint64_t)result;
  return result;
}

float sub_18F38DBC4(unsigned __int16 *a1)
{
  float v1;
  uint64_t v2;
  int v3;
  int v4;
  float v5;
  _DWORD v7[3];

  v1 = sub_18F3403AC(a1, 0, a1[1]);
  v2 = 0;
  *(float *)v7 = v1;
  v7[1] = v3;
  v7[2] = v4;
  v5 = 0.0;
  do
  {
    v5 = v5 + (float)(*(float *)&v7[v2] * *(float *)&v7[v2]);
    ++v2;
  }
  while (v2 != 3);
  return sqrtf(v5);
}

float sub_18F38DC18(uint64_t a1)
{
  float v1;
  uint64_t v2;
  int v3;
  int v4;
  float v5;
  _DWORD v7[3];

  v1 = sub_18F3403AC((unsigned __int16 *)(a1 + 1208), 0, *(unsigned __int16 *)(a1 + 1210));
  v2 = 0;
  *(float *)v7 = v1;
  v7[1] = v3;
  v7[2] = v4;
  v5 = 0.0;
  do
  {
    v5 = v5 + (float)(*(float *)&v7[v2] * *(float *)&v7[v2]);
    ++v2;
  }
  while (v2 != 3);
  return sqrtf(v5);
}

float sub_18F38DC74(uint64_t a1, int a2, int a3, float a4)
{
  unsigned __int16 *v6;
  unint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  float *v11;
  float v12;
  float v13;

  if (a3 < 1)
  {
    v13 = 0.0;
  }
  else
  {
    v6 = (unsigned __int16 *)(a1 + 28);
    v7 = a2;
    v8 = 0.0;
    v9 = 0.0;
    v10 = a3;
    do
    {
      v11 = (float *)sub_18F3410E0(v6, v7);
      v12 = (float)((float)(*v11 - a4) * (float)(*v11 - a4)) - v8;
      v13 = v9 + v12;
      v8 = (float)((float)(v9 + v12) - v9) - v12;
      ++v7;
      v9 = v9 + v12;
      --v10;
    }
    while (v10);
  }
  return v13 / (float)a3;
}

void sub_18F38EB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x194001438](v15, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

uint64_t sub_18F38EBD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD *)(v2 + 16);
  if (result)
  {
    v4 = MEMORY[0x194001018]();
    result = MEMORY[0x194001438](v4, 0xB0C40BC2CC919);
    v2 = *(_QWORD *)(a1 + 32);
  }
  *(_QWORD *)(v2 + 16) = 0;
  return result;
}

void sub_18F38EFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_18F2A8438((uint64_t)&a15);
  sub_18F2A8438((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_18F38F3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_18F2A8438((uint64_t)&a15);
  sub_18F2A8438((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_18F38F87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_18F2A8438((uint64_t)&a15);
  sub_18F2A8438((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_18F38FD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_18F2A8438((uint64_t)&a15);
  sub_18F2A8438((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_18F3900B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_18F2A8438((uint64_t)&a15);
  sub_18F2A8438((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_18F39043C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_18F2A8438((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_18F390844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_18F2A8438((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_18F391624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_18F2A8438((uint64_t)&a15);
  _Unwind_Resume(a1);
}

os_log_t sub_18F391768()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "SensorRecorder");
  qword_1EE16D850 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F391794(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E2952880;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18F3917F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F3918A8((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_18F391810(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F391834(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    MEMORY[0x194001048]();
    JUMPOUT(0x194001438);
  }
  return result;
}

uint64_t sub_18F391868(uint64_t a1, uint64_t a2)
{
  if (sub_18F2AB00C(a2, (uint64_t)&unk_1E2948AD0))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_18F3918A8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x194001048]();
    JUMPOUT(0x194001438);
  }
  return result;
}

uint64_t sub_18F3918E4()
{
  if (qword_1ECEDF088 != -1)
    dispatch_once(&qword_1ECEDF088, &unk_1E29530A8);
  return qword_1ECEDF080;
}

double sub_18F391924()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  sub_18F1E61EC(v0, (uint64_t)"CLKeyboardCoverState", 1);
  *(_QWORD *)v0 = &off_1E294AB78;
  result = 0.0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_BYTE *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0xFFEFFFFFFFFFFFFFLL;
  qword_1ECEDF080 = v0;
  return result;
}

void sub_18F391998(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x10F1C4075DABF2CLL);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F3919BC(_QWORD *a1)
{
  *a1 = &off_1E294AB78;
  sub_18F391A20((uint64_t)a1, 0, 0);
  return sub_18F3DB8A0(a1);
}

void sub_18F3919FC(_QWORD *a1)
{
  sub_18F3919BC(a1);
  JUMPOUT(0x194001438);
}

void sub_18F391A20(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  uint8_t buf[8];
  uint64_t v10;
  void (*v11)(uint64_t);
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if (a3)
    {
      if (!*(_BYTE *)(a1 + 80))
      {
        if (qword_1ECEDF088 != -1)
          dispatch_once(&qword_1ECEDF088, &unk_1E29530A8);
        v5 = qword_1ECEDF080;
        if (qword_1ECEDEE38 != -1)
          dispatch_once(&qword_1ECEDEE38, &unk_1E29546E8);
        v6 = qword_1ECEDEE30;
        if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEBUG, "registering for keyboard updates", buf, 2u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE38 != -1)
            dispatch_once(&qword_1ECEDEE38, &unk_1E29546E8);
          v8 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "void CLKeyboardCoverState::registerForKeyboardUpdates()", "CoreLocation: %s\n", v8);
          if (v8 != (char *)buf)
            free(v8);
        }
        v7 = sub_18F204AE4();
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        v10 = 3221225472;
        v11 = sub_18F391F70;
        v12 = &unk_1E2955738;
        v13 = v5;
        sub_18F1F5E28(v7, (uint64_t)buf);
        *(_BYTE *)(v5 + 80) = 1;
      }
      if (a3 >= 2)
        sub_18F1E5A28(a1, 0, a1 + 81, 1);
    }
    else
    {
      if (qword_1ECEDF088 != -1)
        dispatch_once(&qword_1ECEDF088, &unk_1E29530A8);
      sub_18F391CF0(qword_1ECEDF080);
    }
  }
}

void sub_18F391CF0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  char *v4;
  _QWORD v5[5];
  __int16 v6;
  uint8_t buf[1640];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E29546E8);
  v2 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEBUG, "unregistering for keyboard updates", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E29546E8);
    v6 = 0;
    v4 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLKeyboardCoverState::unregisterForKeyboardUpdates()", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  v3 = sub_18F204AE4();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18F392538;
  v5[3] = &unk_1E2955738;
  v5[4] = a1;
  sub_18F1F5E28(v3, (uint64_t)v5);
  *(_BYTE *)(a1 + 80) = 0;
}

uint64_t sub_18F391EC0(uint64_t a1, io_iterator_t iterator)
{
  uint64_t result;
  io_object_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  BOOL v8;

  result = IOIteratorNext(iterator);
  if ((_DWORD)result)
  {
    v5 = result;
    do
    {
      v6 = sub_18F3926A4("AppleHIDKeyboardEventDriverV2");
      v7 = sub_18F3926A4("IOAccessoryIDBusHIDDevice");
      v8 = v6 || v7;
      if (*(_BYTE *)(a1 + 81) != (v6 || v7))
      {
        *(_BYTE *)(a1 + 81) = v6 || v7;
        sub_18F1E5A28(a1, 0, (uint64_t)&v8, 1);
      }
      IOObjectRelease(v5);
      result = IOIteratorNext(iterator);
      v5 = result;
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_18F391F70(uint64_t a1)
{
  uint64_t v1;
  mach_port_t v2;
  IONotificationPortRef v3;
  IONotificationPort *v4;
  BOOL v5;
  NSObject *v6;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoopSource *v8;
  __CFRunLoopSource *v9;
  CFRunLoopSourceRef v10;
  BOOL v11;
  __CFRunLoopSource *v14;
  const __CFString *v15;
  IONotificationPort *v16;
  const __CFDictionary *v17;
  kern_return_t v18;
  IONotificationPort *v19;
  const __CFDictionary *v20;
  kern_return_t v21;
  IONotificationPort *v22;
  const __CFDictionary *v23;
  kern_return_t v24;
  IONotificationPort *v25;
  const __CFDictionary *v26;
  kern_return_t v27;
  NSObject *v28;
  char *v29;
  char *v30;
  uint8_t buf[1640];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *MEMORY[0x1E0CBBAA8];
  *(_QWORD *)(v1 + 32) = IONotificationPortCreate(*MEMORY[0x1E0CBBAA8]);
  *(_QWORD *)(v1 + 40) = IONotificationPortCreate(v2);
  *(_QWORD *)(v1 + 48) = IONotificationPortCreate(v2);
  v3 = IONotificationPortCreate(v2);
  *(_QWORD *)(v1 + 56) = v3;
  v4 = *(IONotificationPort **)(v1 + 32);
  if (v4 && *(_QWORD *)(v1 + 40) && (*(_QWORD *)(v1 + 48) ? (v5 = v3 == 0) : (v5 = 1), !v5))
  {
    RunLoopSource = IONotificationPortGetRunLoopSource(v4);
    v8 = IONotificationPortGetRunLoopSource(*(IONotificationPortRef *)(v1 + 40));
    v9 = IONotificationPortGetRunLoopSource(*(IONotificationPortRef *)(v1 + 48));
    v10 = IONotificationPortGetRunLoopSource(*(IONotificationPortRef *)(v1 + 56));
    if (RunLoopSource)
      v11 = v8 == 0;
    else
      v11 = 1;
    if (v11 || v9 == 0 || v10 == 0)
    {
      if (qword_1ECEDF088 != -1)
        dispatch_once(&qword_1ECEDF088, &unk_1E29530A8);
      sub_18F391CF0(qword_1ECEDF080);
    }
    else
    {
      v14 = v10;
      sub_18F204AE4();
      v15 = (const __CFString *)*MEMORY[0x1E0C9B280];
      CFRunLoopAddSource(*(CFRunLoopRef *)qword_1ECEDFE08, RunLoopSource, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
      sub_18F204AE4();
      CFRunLoopAddSource(*(CFRunLoopRef *)qword_1ECEDFE08, v8, v15);
      sub_18F204AE4();
      CFRunLoopAddSource(*(CFRunLoopRef *)qword_1ECEDFE08, v9, v15);
      sub_18F204AE4();
      CFRunLoopAddSource(*(CFRunLoopRef *)qword_1ECEDFE08, v14, v15);
      v16 = *(IONotificationPort **)(v1 + 32);
      v17 = IOServiceMatching("AppleHIDKeyboardEventDriverV2");
      v18 = IOServiceAddMatchingNotification(v16, "IOServiceFirstMatch", v17, (IOServiceMatchingCallback)sub_18F391EC0, (void *)v1, (io_iterator_t *)(v1 + 64));
      v19 = *(IONotificationPort **)(v1 + 40);
      v20 = IOServiceMatching("AppleHIDKeyboardEventDriverV2");
      v21 = IOServiceAddMatchingNotification(v19, "IOServiceTerminate", v20, (IOServiceMatchingCallback)sub_18F391EC0, (void *)v1, (io_iterator_t *)(v1 + 68));
      v22 = *(IONotificationPort **)(v1 + 48);
      v23 = IOServiceMatching("IOAccessoryIDBusHIDDevice");
      v24 = IOServiceAddMatchingNotification(v22, "IOServiceFirstMatch", v23, (IOServiceMatchingCallback)sub_18F391EC0, (void *)v1, (io_iterator_t *)(v1 + 72));
      v25 = *(IONotificationPort **)(v1 + 56);
      v26 = IOServiceMatching("IOAccessoryIDBusHIDDevice");
      v27 = IOServiceAddMatchingNotification(v25, "IOServiceTerminate", v26, (IOServiceMatchingCallback)sub_18F391EC0, (void *)v1, (io_iterator_t *)(v1 + 76));
      if (v18 || v21 || v24 || v27)
      {
        if (qword_1ECEDEE38 != -1)
          dispatch_once(&qword_1ECEDEE38, &unk_1E29546E8);
        v28 = qword_1ECEDEE30;
        if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v28, OS_LOG_TYPE_DEFAULT, "#Warning Failed to register for keyboard updates. Could not register for notifications from  AppleHIDKeyboardEventDriverV2 service and IOAccessoryIDBusHIDDevice service (for kIOFirstMatchNotification and kIOTerminatedNotification).", buf, 2u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE38 != -1)
            dispatch_once(&qword_1ECEDEE38, &unk_1E29546E8);
          v30 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "void CLKeyboardCoverState::registerForKeyboardUpdates()_block_invoke", "CoreLocation: %s\n", v30);
          if (v30 != (char *)buf)
            free(v30);
        }
        if (qword_1ECEDF088 != -1)
          dispatch_once(&qword_1ECEDF088, &unk_1E29530A8);
        sub_18F391CF0(qword_1ECEDF080);
      }
      else
      {
        sub_18F391EC0(v1, *(_DWORD *)(v1 + 64));
        sub_18F391EC0(v1, *(_DWORD *)(v1 + 68));
        sub_18F391EC0(v1, *(_DWORD *)(v1 + 72));
        sub_18F391EC0(v1, *(_DWORD *)(v1 + 76));
      }
    }
  }
  else
  {
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E29546E8);
    v6 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEFAULT, "#Warning Failed to register for keyboard updates. Could not create KeyboardConnectNotificationPort and KeyboardConnectNotificationPort", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E29546E8);
      v29 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLKeyboardCoverState::registerForKeyboardUpdates()_block_invoke", "CoreLocation: %s\n", v29);
      if (v29 != (char *)buf)
        free(v29);
    }
  }
}

uint64_t sub_18F392538(uint64_t a1)
{
  uint64_t v1;
  IONotificationPort *v2;
  CFRunLoopSourceRef RunLoopSource;
  __CFRunLoopSource *v4;
  IONotificationPort *v5;
  CFRunLoopSourceRef v6;
  __CFRunLoopSource *v7;
  IONotificationPort *v8;
  CFRunLoopSourceRef v9;
  __CFRunLoopSource *v10;
  IONotificationPort *v11;
  CFRunLoopSourceRef v12;
  __CFRunLoopSource *v13;
  io_object_t v14;
  io_object_t v15;
  io_object_t v16;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(IONotificationPort **)(v1 + 32);
  if (v2)
  {
    RunLoopSource = IONotificationPortGetRunLoopSource(v2);
    if (RunLoopSource)
    {
      v4 = RunLoopSource;
      sub_18F204AE4();
      CFRunLoopRemoveSource(*(CFRunLoopRef *)qword_1ECEDFE08, v4, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
    }
    IONotificationPortDestroy(*(IONotificationPortRef *)(v1 + 32));
    *(_QWORD *)(v1 + 32) = 0;
  }
  v5 = *(IONotificationPort **)(v1 + 40);
  if (v5)
  {
    v6 = IONotificationPortGetRunLoopSource(v5);
    if (v6)
    {
      v7 = v6;
      sub_18F204AE4();
      CFRunLoopRemoveSource(*(CFRunLoopRef *)qword_1ECEDFE08, v7, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
    }
    IONotificationPortDestroy(*(IONotificationPortRef *)(v1 + 40));
    *(_QWORD *)(v1 + 40) = 0;
  }
  v8 = *(IONotificationPort **)(v1 + 48);
  if (v8)
  {
    v9 = IONotificationPortGetRunLoopSource(v8);
    if (v9)
    {
      v10 = v9;
      sub_18F204AE4();
      CFRunLoopRemoveSource(*(CFRunLoopRef *)qword_1ECEDFE08, v10, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
    }
    IONotificationPortDestroy(*(IONotificationPortRef *)(v1 + 48));
    *(_QWORD *)(v1 + 48) = 0;
  }
  v11 = *(IONotificationPort **)(v1 + 56);
  if (v11)
  {
    v12 = IONotificationPortGetRunLoopSource(v11);
    if (v12)
    {
      v13 = v12;
      sub_18F204AE4();
      CFRunLoopRemoveSource(*(CFRunLoopRef *)qword_1ECEDFE08, v13, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
    }
    IONotificationPortDestroy(*(IONotificationPortRef *)(v1 + 56));
    *(_QWORD *)(v1 + 56) = 0;
  }
  v14 = *(_DWORD *)(v1 + 64);
  if (v14)
  {
    IOObjectRelease(v14);
    *(_DWORD *)(v1 + 64) = 0;
  }
  v15 = *(_DWORD *)(v1 + 68);
  if (v15)
  {
    IOObjectRelease(v15);
    *(_DWORD *)(v1 + 68) = 0;
  }
  v16 = *(_DWORD *)(v1 + 72);
  if (v16)
  {
    IOObjectRelease(v16);
    *(_DWORD *)(v1 + 72) = 0;
  }
  result = *(unsigned int *)(v1 + 76);
  if ((_DWORD)result)
  {
    result = IOObjectRelease(result);
    *(_DWORD *)(v1 + 76) = 0;
  }
  return result;
}

BOOL sub_18F3926A4(const char *a1)
{
  mach_port_t v1;
  const __CFDictionary *v2;
  io_object_t v3;
  io_registry_entry_t v4;
  BOOL v5;
  const __CFAllocator *v6;
  const __CFBoolean *CFProperty;
  const __CFBoolean *v8;
  CFTypeID v9;
  io_iterator_t existing;

  existing = 0;
  v1 = *MEMORY[0x1E0CBBAA8];
  v2 = IOServiceMatching(a1);
  IOServiceGetMatchingServices(v1, v2, &existing);
  v3 = IOIteratorNext(existing);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      CFProperty = (const __CFBoolean *)IORegistryEntryCreateCFProperty(v4, CFSTR("RequiresCompassResetOnConnect"), v6, 0);
      if (CFProperty)
      {
        v8 = CFProperty;
        v9 = CFGetTypeID(CFProperty);
        if (v9 == CFBooleanGetTypeID())
        {
          v5 = CFBooleanGetValue(v8) != 0;
          CFRelease(v8);
        }
      }
      IOObjectRelease(v4);
      v4 = IOIteratorNext(existing);
    }
    while (v4);
  }
  else
  {
    return 0;
  }
  return v5;
}

os_log_t sub_18F39278C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Accessory");
  qword_1ECEDEE30 = (uint64_t)result;
  return result;
}

uint64_t sub_18F3927B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  BOOL *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t *v20;
  unint64_t v21;
  BOOL v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  uint64_t v26;
  _BOOL4 v27;
  char *v29;
  _BYTE buf[1638];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = sub_18F1EA294(a1);
  *(_QWORD *)v2 = &off_1E2948F88;
  *(_OWORD *)(v2 + 168) = xmmword_18F505EB0;
  v3 = (uint64_t *)(v2 + 168);
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 157) = 0;
  *(_WORD *)(v2 + 184) = 256;
  *(_BYTE *)(v2 + 186) = 0;
  v4 = (BOOL *)(v2 + 186);
  *(_QWORD *)(v2 + 200) = 0;
  *(_DWORD *)(v2 + 188) = 2139095039;
  v5 = sub_18F204AE4();
  v6 = *(_QWORD *)(v5 + 24);
  v7 = *(std::__shared_weak_count **)(v5 + 32);
  *(_QWORD *)buf = v6;
  *(_QWORD *)&buf[8] = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = sub_18F1EE8D4(v6, "CompassInterval", v3);
  v11 = v10;
  if (!v7)
    goto LABEL_8;
  v12 = (unint64_t *)&v7->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
  {
LABEL_8:
    if ((v10 & 1) != 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if ((v11 & 1) == 0)
LABEL_9:
    *v3 = 0x3F847AE147AE147BLL;
LABEL_10:
  v14 = sub_18F204AE4();
  v15 = *(_QWORD *)(v14 + 24);
  v16 = *(std::__shared_weak_count **)(v14 + 32);
  *(_QWORD *)buf = v15;
  *(_QWORD *)&buf[8] = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (sub_18F1EE944(v15, "CompassIgnoreGyro", v4))
  {
    v19 = *v4;
    if (!v16)
      goto LABEL_18;
    v20 = (unint64_t *)&v16->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if (v19)
        goto LABEL_19;
    }
    else
    {
LABEL_18:
      if (v19)
      {
LABEL_19:
        v22 = 0;
        goto LABEL_29;
      }
    }
  }
  else if (v16)
  {
    v23 = (unint64_t *)&v16->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v22 = sub_18F1FE420() != 0;
LABEL_29:
  *v4 = v22;
  if (qword_1EE16D698 != -1)
    dispatch_once(&qword_1EE16D698, &unk_1E29530C8);
  v25 = qword_1EE16D690;
  if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_INFO))
  {
    v26 = *v3;
    v27 = *v4;
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)&buf[4] = v26;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = v27;
    _os_log_impl(&dword_18F1DC000, v25, OS_LOG_TYPE_INFO, "Legacy compass, interval (%{public}.3f) gyro (%{public}d)", buf, 0x12u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29530C8);
    v29 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CLCompass6::CLCompass6()", "CoreLocation: %s\n", v29);
    if (v29 != buf)
      free(v29);
  }
  return a1;
}

void sub_18F392B48(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18F460AF0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F392B7C(_QWORD *a1)
{
  *a1 = &off_1E2948F88;
  sub_18F393F40((uint64_t)a1);
  return sub_18F460AF0((uint64_t)a1);
}

void sub_18F392BB4(_QWORD *a1)
{
  sub_18F392B7C(a1);
  JUMPOUT(0x194001438);
}

void sub_18F392BD8(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  CLDeviceMotionProperties *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  CLDeviceMotionProperties *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint8_t buf[8];
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D698 != -1)
    dispatch_once(&qword_1EE16D698, &unk_1E29530C8);
  v4 = qword_1EE16D690;
  if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEFAULT, "Legacy compass started. Cover attached %{public}d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29530C8);
    v35 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual void CLCompass6::start(BOOL)", "CoreLocation: %s\n", v35);
    if (v35 != (char *)buf)
      free(v35);
  }
  if (!*(_QWORD *)(a1 + 200))
  {
    v5 = operator new();
    sub_18F43A848(v5, (_QWORD *)(a1 + 168), *(_BYTE *)(a1 + 186), a2);
    *(_QWORD *)(a1 + 200) = v5;
  }
  if (*(_BYTE *)(a1 + 186))
  {
    if (!*(_QWORD *)(a1 + 144))
    {
      v6 = sub_18F1FE420();
      *(_DWORD *)buf = 7;
      if (sub_18F4735BC(v6, (int *)buf))
      {
        v7 = [CLDeviceMotionProperties alloc];
        v11 = objc_msgSend_initWithMode_(v7, v8, 7, v9, v10);
      }
      else
      {
        v14 = sub_18F1FE420();
        *(_DWORD *)buf = 15;
        v15 = sub_18F4735BC(v14, (int *)buf);
        v16 = [CLDeviceMotionProperties alloc];
        if (v15)
          v11 = objc_msgSend_initWithMode_(v16, v17, 15, v18, v19);
        else
          v11 = objc_msgSend_initWithMode_(v16, v17, 3, v18, v19);
      }
      v20 = (void *)v11;
      v21 = operator new();
      *(_QWORD *)v21 = off_1E294C238;
      v22 = v20;
      *(_QWORD *)v21 = &off_1E294C890;
      *(_QWORD *)(v21 + 8) = v22;
      *(_WORD *)(v21 + 126) = 0;
      *(_BYTE *)(v21 + 136) = 0;
      *(_DWORD *)(v21 + 140) = 0;
      *(_QWORD *)(a1 + 144) = v21;
      v23 = sub_18F1FE420();
      v24 = *(_QWORD *)(a1 + 144);
      v25 = *(_QWORD *)(a1 + 176);
      v26 = sub_18F204AE4();
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      v42 = 3221225472;
      v43 = sub_18F1F998C;
      v44 = &unk_1E2956F80;
      v45 = v23;
      v46 = v24;
      v47 = v25;
      sub_18F1F5E28(v26, (uint64_t)buf);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2954AA8);
      v27 = off_1ECEDEE70;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
      {
        v32 = objc_msgSend_mode(v20, v28, v29, v30, v31);
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v32;
        _os_log_impl(&dword_18F1DC000, v27, OS_LOG_TYPE_INFO, "Compass is requesting device motion with mode %{public}#x", buf, 8u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2954AA8);
        objc_msgSend_mode(v20, v36, v37, v38, v39);
        v40 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual void CLCompass6::start(BOOL)", "CoreLocation: %s\n", v40);
        if (v40 != (char *)buf)
          free(v40);
      }

    }
  }
  else if (!*(_QWORD *)(a1 + 136))
  {
    v12 = operator new();
    *(_QWORD *)v12 = off_1E294C238;
    *(_QWORD *)v12 = &off_1E294C8C8;
    *(_QWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 40) = 0;
    *(_DWORD *)(v12 + 44) = 0;
    *(_QWORD *)(a1 + 136) = v12;
    v13 = sub_18F1DFF7C();
    sub_18F1F4F0C(v13, 0, *(_QWORD *)(a1 + 136), *(double *)(a1 + 176));
  }
  if (!*(_QWORD *)(a1 + 152))
  {
    v33 = (_QWORD *)operator new();
    *v33 = off_1E294C238;
    *v33 = &off_1E294C388;
    v33[1] = 0;
    v33[2] = sub_18F393190;
    v33[3] = a1;
    *(_QWORD *)(a1 + 152) = v33;
    v34 = sub_18F3DA7B4();
    sub_18F1F4F0C(v34, 0, *(_QWORD *)(a1 + 152), *(double *)(a1 + 168));
  }
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 164) = 0;
}

void sub_18F393118(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x1081C40D4124DFELL);
  _Unwind_Resume(a1);
}

void sub_18F393190(__int128 *a1, uint64_t a2)
{
  unsigned __int8 v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  int v11;
  char v12;
  int v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  NSObject *v41;
  double v42;
  double v43;
  char *v44;
  uint64_t v45;
  int v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  float *v53;
  float v54;
  float v55;
  float v56;
  NSObject *v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  int v80;
  char *v81;
  int v82;
  char *v83;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  __int128 v88;
  char v89;
  uint64_t v90;
  float v91;
  int v92;
  int v93;
  char v94;
  __int128 v95;
  uint64_t v96;
  _QWORD v97[4];
  _DWORD v98[5];
  _DWORD v99[3];
  double v100;
  _DWORD v101[5];
  __int16 v102;
  double v103;
  __int16 v104;
  int v105;
  __int16 v106;
  double v107;
  __int16 v108;
  double v109;
  __int16 v110;
  double v111;
  __int16 v112;
  uint64_t v113;
  _OWORD buf[2];
  __int16 v115;
  double v116;
  __int16 v117;
  double v118;
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  double v124;
  __int16 v125;
  double v126;
  __int16 v127;
  double v128;
  __int16 v129;
  int v130;
  __int16 v131;
  double v132;
  __int16 v133;
  double v134;
  __int16 v135;
  double v136;
  __int16 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v95 = *a1;
  v96 = *((_QWORD *)a1 + 2);
  ++*(_DWORD *)(a2 + 160);
  v3 = atomic_load((unsigned __int8 *)&qword_1ECEDF098);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF098))
  {
    dword_1ECEDF090 = (int)(1.5 / *(double *)(a2 + 168));
    __cxa_guard_release(&qword_1ECEDF098);
  }
  v4 = *(_QWORD *)(a2 + 144);
  if (v4)
  {
    v5 = (os_unfair_lock_s *)(v4 + 140);
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 140));
    v6 = *(double *)(v4 + 24);
    v7 = *(double *)(v4 + 32);
    v8 = *(double *)(v4 + 40);
    v9 = *(double *)(v4 + 48);
    v10 = *(_QWORD *)(v4 + 68);
    v11 = *(_DWORD *)(v4 + 76);
    v12 = *(_BYTE *)(v4 + 98);
    v13 = *(unsigned __int8 *)(v4 + 136);
    os_unfair_lock_unlock(v5);
    if (v13)
    {
      v14 = v7 * (v9 + v9) - v6 * (v8 + v8);
      v15 = v6 * (v7 + v7) + v8 * (v9 + v9);
      v16 = 1.0 - v7 * (v7 + v7) - v8 * (v8 + v8);
      v17 = -v14;
      *(float *)(a2 + 188) = v17;
      *(float *)(a2 + 192) = -v15;
      *(float *)(a2 + 196) = -v16;
      v18 = *(_QWORD *)(a2 + 200);
      *(float *)(v18 + 80) = v17;
      *(_DWORD *)(v18 + 84) = *(_DWORD *)(a2 + 192);
      *(_DWORD *)(v18 + 88) = *(_DWORD *)(a2 + 196);
      *(double *)(v18 + 16) = v7;
      *(double *)(v18 + 24) = v8;
      *(double *)(v18 + 32) = v9;
      *(double *)(v18 + 40) = v6;
      *(_QWORD *)(v18 + 56) = v10;
      *(_DWORD *)(v18 + 64) = v11;
      *(_BYTE *)(v18 + 96) = v12;
    }
  }
  else
  {
    v19 = *(_QWORD *)(a2 + 136);
    if (v19)
    {
      v20 = (os_unfair_lock_s *)(v19 + 44);
      os_unfair_lock_lock((os_unfair_lock_t)(v19 + 44));
      buf[0] = *(_OWORD *)(v19 + 16);
      *(_QWORD *)&buf[1] = *(_QWORD *)(v19 + 32);
      v21 = *(unsigned __int8 *)(v19 + 40);
      os_unfair_lock_unlock(v20);
      if (v21)
      {
        *(_QWORD *)(a2 + 188) = *((_QWORD *)&buf[0] + 1);
        *(_DWORD *)(a2 + 196) = buf[1];
        v22 = *(_DWORD **)(a2 + 200);
        v22[20] = *(_DWORD *)(a2 + 188);
        v22[21] = *(_DWORD *)(a2 + 192);
        v22[22] = *(_DWORD *)(a2 + 196);
      }
    }
  }
  v92 = -1082130432;
  if (*(float *)(a2 + 188) != 3.4028e38 && sub_18F43C1E8(*(float32x2_t **)(a2 + 200), (uint64_t *)&v95 + 1))
  {
    if (!sub_18F43CD20(*(_QWORD *)(a2 + 200), (uint64_t)&v86, v29, v30, v31, v32, v33, v34, v35, v36, v23, v24, v25, v26, v27, v28))return;
    v37.n128_u32[1] = DWORD1(v95);
    v85 = v95;
    v38 = *(_QWORD *)(a2 + 200);
    v39 = *(_QWORD *)(v38 + 1640);
    v40 = v39
        ? *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 1608)
                                + (((unint64_t)(v39 + *(_QWORD *)(v38 + 1632) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                    + 4 * ((v39 + *(_QWORD *)(v38 + 1632) - 1) & 0x3FF))
        : 0;
    v93 = v40;
    v94 = *(_BYTE *)(a2 + 28);
    v37.n128_u32[0] = DWORD2(v88);
    if (*(_BYTE *)(a2 + 185))
    {
      if (*((float *)&v88 + 2) < 0.0)
      {
        *(_BYTE *)(a2 + 185) = 0;
        v45 = sub_18F3DA7B4();
        sub_18F3DAED4(v45);
        v38 = *(_QWORD *)(a2 + 200);
      }
    }
    else if (*((float *)&v88 + 2) >= 0.0)
    {
      *(_BYTE *)(a2 + 185) = 1;
    }
    v84 = 0;
    v46 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(v38 + 104) + 120))(*(_QWORD *)(v38 + 104), v37);
    v84 = v46;
    if (*(unsigned __int8 *)(a2 + 184) != v46)
    {
      sub_18F1FD2C8(a2, 1, (uint64_t)&v84, 1);
      *(_BYTE *)(a2 + 184) = v84;
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29530C8);
      v47 = qword_1EE16D690;
      if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0]) = 136315650;
        *(_QWORD *)((char *)buf + 4) = "CompassAlignment";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = v84;
        WORD1(buf[1]) = 2048;
        *(_QWORD *)((char *)&buf[1] + 4) = v95;
        _os_log_impl(&dword_18F1DC000, v47, OS_LOG_TYPE_DEBUG, "Type,%s,compassJustAlignedToStableField,%d,timestamp,%20.20f", (uint8_t *)buf, 0x1Cu);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29530C8);
        LODWORD(v97[0]) = 136315650;
        *(_QWORD *)((char *)v97 + 4) = "CompassAlignment";
        WORD2(v97[1]) = 1024;
        *(_DWORD *)((char *)&v97[1] + 6) = v84;
        WORD1(v97[2]) = 2048;
        *(_QWORD *)((char *)&v97[2] + 4) = v95;
        v83 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "static void CLCompass6::onMagnetometerData(const CLMagnetometer::Sample *, void *)", "CoreLocation: %s\n", v83);
        if (v83 != (char *)buf)
          free(v83);
      }
      if (*(_BYTE *)(a2 + 29))
      {
        v97[0] = &off_1E294C040;
        v97[1] = CFAbsoluteTimeGetCurrent();
        v97[3] = v95;
        LOBYTE(v98[0]) = v84;
        v48 = sub_18F47400C();
        sub_18F475D9C(v48, (uint64_t)v97);
        sub_18F2B6BD0(buf);
        sub_18F2C71CC(buf);
        v142 |= 1u;
        v139 = v97[1];
        v49 = v141;
        v50 = v95;
        *(_BYTE *)(v141 + 20) |= 1u;
        *(_QWORD *)(v49 + 8) = v50;
        v51 = v141;
        v52 = v84;
        *(_BYTE *)(v141 + 20) |= 2u;
        *(_DWORD *)(v51 + 16) = v52;
        sub_18F2B9670((PB::Base *)buf);
      }
    }
    v53 = *(float **)(a2 + 200);
    v54 = v53[338];
    v55 = v53[339];
    v56 = v53[340];
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29530C8);
    v57 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0]) = 136318722;
      *(_QWORD *)((char *)buf + 4) = "Compass";
      WORD6(buf[0]) = 2048;
      *(double *)((char *)buf + 14) = *(float *)&v88;
      WORD3(buf[1]) = 2048;
      *((double *)&buf[1] + 1) = *((float *)&v88 + 1);
      v115 = 2048;
      v116 = *((float *)&v88 + 2);
      v117 = 2048;
      v118 = *(float *)&v86;
      v119 = 2048;
      v120 = *((float *)&v86 + 1);
      v121 = 2048;
      v122 = v87;
      v123 = 2048;
      v124 = v54;
      v125 = 2048;
      v126 = v55;
      v127 = 2048;
      v128 = v56;
      v129 = 1024;
      v130 = HIDWORD(v88);
      v131 = 2048;
      v132 = *(float *)&v90;
      v133 = 2048;
      v134 = *((float *)&v90 + 1);
      v135 = 2048;
      v136 = v91;
      v137 = 2048;
      v138 = v85;
      _os_log_impl(&dword_18F1DC000, v57, OS_LOG_TYPE_DEBUG, "Type,%s,magneticHeading,%20.20f,trueHeading,%20.20f,accuracy,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,level,%d,magnitude,%20.20f,inclination,%20.20f,horizontal,%20.20f,timestamp,%20.20f", (uint8_t *)buf, 0x94u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29530C8);
      LODWORD(v97[0]) = 136318722;
      *(_QWORD *)((char *)v97 + 4) = "Compass";
      WORD2(v97[1]) = 2048;
      *(double *)((char *)&v97[1] + 6) = *(float *)&v88;
      HIWORD(v97[2]) = 2048;
      *(double *)&v97[3] = *((float *)&v88 + 1);
      LOWORD(v98[0]) = 2048;
      *(double *)((char *)v98 + 2) = *((float *)&v88 + 2);
      HIWORD(v98[2]) = 2048;
      *(double *)&v98[3] = *(float *)&v86;
      LOWORD(v99[0]) = 2048;
      *(double *)((char *)v99 + 2) = *((float *)&v86 + 1);
      HIWORD(v99[2]) = 2048;
      v100 = v87;
      LOWORD(v101[0]) = 2048;
      *(double *)((char *)v101 + 2) = v54;
      HIWORD(v101[2]) = 2048;
      *(double *)&v101[3] = v55;
      v102 = 2048;
      v103 = v56;
      v104 = 1024;
      v105 = HIDWORD(v88);
      v106 = 2048;
      v107 = *(float *)&v90;
      v108 = 2048;
      v109 = *((float *)&v90 + 1);
      v110 = 2048;
      v111 = v91;
      v112 = 2048;
      v113 = v85;
      v81 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "static void CLCompass6::onMagnetometerData(const CLMagnetometer::Sample *, void *)", "CoreLocation: %s\n", v81);
      if (v81 != (char *)buf)
        free(v81);
    }
    if (*(_BYTE *)(a2 + 29))
    {
      v97[0] = &off_1E294C1C0;
      v97[1] = CFAbsoluteTimeGetCurrent();
      v97[3] = v85;
      *(_QWORD *)&v58 = *(_QWORD *)((char *)&v88 + 4);
      *((_QWORD *)&v58 + 1) = v86;
      v98[0] = v88;
      *(_OWORD *)&v98[1] = v58;
      *(float *)v99 = v87;
      *(float *)&v99[1] = v54;
      *(float *)&v99[2] = v55;
      *(float *)&v100 = v56;
      BYTE4(v100) = BYTE12(v88);
      *(_QWORD *)v101 = v90;
      *(float *)&v101[2] = v91;
      v59 = sub_18F47400C();
      sub_18F475D9C(v59, (uint64_t)v97);
      sub_18F2B6BD0(buf);
      sub_18F2C7168(buf);
      v142 |= 1u;
      v139 = v97[1];
      v60 = v140;
      v61 = v85;
      *(_WORD *)(v140 + 68) |= 1u;
      *(_QWORD *)(v60 + 8) = v61;
      v62 = v140;
      *(_WORD *)(v140 + 68) |= 0x800u;
      v63 = DWORD1(v88);
      *(_DWORD *)(v62 + 56) = v88;
      v64 = v140;
      *(_WORD *)(v140 + 68) |= 0x2000u;
      *(_DWORD *)(v64 + 64) = v63;
      v65 = v140;
      LODWORD(v61) = DWORD2(v88);
      *(_WORD *)(v140 + 68) |= 2u;
      *(_DWORD *)(v65 + 16) = v61;
      v66 = v140;
      v67 = HIDWORD(v86);
      *(_DWORD *)(v140 + 44) = v86;
      *(_WORD *)(v66 + 68) |= 0x100u;
      v68 = v140;
      *(_WORD *)(v140 + 68) |= 0x200u;
      *(_DWORD *)(v68 + 48) = v67;
      v69 = v140;
      *(float *)&v61 = v87;
      *(_WORD *)(v140 + 68) |= 0x400u;
      *(_DWORD *)(v69 + 52) = v61;
      v70 = v140;
      *(_WORD *)(v140 + 68) |= 4u;
      *(float *)(v70 + 20) = v54;
      v71 = v140;
      *(_WORD *)(v140 + 68) |= 8u;
      *(float *)(v71 + 24) = v55;
      v72 = v140;
      *(_WORD *)(v140 + 68) |= 0x10u;
      *(float *)(v72 + 28) = v56;
      v73 = v140;
      v74 = HIDWORD(v88);
      *(_WORD *)(v140 + 68) |= 0x20u;
      *(_DWORD *)(v73 + 32) = v74;
      v75 = v140;
      *(_WORD *)(v140 + 68) |= 0x1000u;
      v76 = HIDWORD(v90);
      *(_DWORD *)(v75 + 60) = v90;
      v77 = v140;
      *(_WORD *)(v140 + 68) |= 0x80u;
      *(_DWORD *)(v77 + 40) = v76;
      v78 = v140;
      *(float *)&v61 = v91;
      *(_WORD *)(v140 + 68) |= 0x40u;
      *(_DWORD *)(v78 + 36) = v61;
      sub_18F2B9670((PB::Base *)buf);
    }
    if (SHIDWORD(v88) <= 0 && *(_DWORD *)(*(_QWORD *)(a2 + 200) + 376) <= dword_1ECEDF090)
      return;
    sub_18F1FD2C8(a2, 0, (uint64_t)&v85, 112);
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29530C8);
    v79 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
    {
      v80 = *(_DWORD *)(*(_QWORD *)(a2 + 200) + 376);
      LODWORD(buf[0]) = 67109632;
      DWORD1(buf[0]) = v80;
      WORD4(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 10) = HIDWORD(v88);
      HIWORD(buf[0]) = 2048;
      *(_QWORD *)&buf[1] = v85;
      _os_log_impl(&dword_18F1DC000, v79, OS_LOG_TYPE_DEBUG, "notified clients. sampleCount,%d,compass.compass.calibrationLevel,%d,compass.timestamp,%f", (uint8_t *)buf, 0x18u);
    }
    if (!sub_18F1FCA08(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29530C8);
    v82 = *(_DWORD *)(*(_QWORD *)(a2 + 200) + 376);
    LODWORD(v97[0]) = 67109632;
    HIDWORD(v97[0]) = v82;
    LOWORD(v97[1]) = 1024;
    *(_DWORD *)((char *)&v97[1] + 2) = HIDWORD(v88);
    HIWORD(v97[1]) = 2048;
    v97[2] = v85;
    v44 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "static void CLCompass6::onMagnetometerData(const CLMagnetometer::Sample *, void *)", "CoreLocation: %s\n", v44);
LABEL_59:
    if (v44 != (char *)buf)
      free(v44);
    return;
  }
  if (!*(_BYTE *)(a2 + 164) && *(_DWORD *)(*(_QWORD *)(a2 + 200) + 376) > dword_1ECEDF090)
  {
    *((_QWORD *)&v88 + 1) = 3212836864;
    *(_QWORD *)&v88 = 0;
    v87 = 0.0;
    v89 = 0;
    v90 = 0;
    v91 = 0.0;
    v93 = 0;
    v94 = 0;
    v85 = v95;
    v86 = 0;
    *(_BYTE *)(a2 + 164) = 1;
    sub_18F1FD2C8(a2, 0, (uint64_t)&v85, 112);
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29530C8);
    v41 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_INFO))
    {
      v42 = *(double *)(a2 + 168) * (double)*(int *)(*(_QWORD *)(a2 + 200) + 376);
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v42;
      _os_log_impl(&dword_18F1DC000, v41, OS_LOG_TYPE_INFO, "Notify after %{public}.3f seconds of no event.", (uint8_t *)buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29530C8);
      v43 = *(double *)(a2 + 168) * (double)*(int *)(*(_QWORD *)(a2 + 200) + 376);
      LODWORD(v97[0]) = 134349056;
      *(double *)((char *)v97 + 4) = v43;
      v44 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "static void CLCompass6::onMagnetometerData(const CLMagnetometer::Sample *, void *)", "CoreLocation: %s\n", v44);
      goto LABEL_59;
    }
  }
}

void sub_18F393F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_18F2B9670((PB::Base *)&a49);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F393F40(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  _QWORD *v17;
  char *v18;
  uint8_t buf[8];
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D698 != -1)
    dispatch_once(&qword_1EE16D698, &unk_1E29530C8);
  v2 = qword_1EE16D690;
  if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "Legacy compass stopped.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29530C8);
    v18 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual void CLCompass6::stop()", "CoreLocation: %s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
  v4 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = 0;
  v5 = MEMORY[0x1E0C809B0];
  if (v3)
  {
    v6 = sub_18F3DA7B4();
    v7 = *(_QWORD *)(a1 + 152);
    v8 = sub_18F204AE4();
    *(_QWORD *)buf = v5;
    v20 = 3221225472;
    v21 = sub_18F1F5EE0;
    v22 = &unk_1E2956E98;
    v25 = 0;
    v23 = v6;
    v24 = v7;
    sub_18F1F5E28(v8, (uint64_t)buf);
    v9 = *(_QWORD *)(a1 + 152);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    *(_QWORD *)(a1 + 152) = 0;
  }
  if (*(_BYTE *)(a1 + 186))
  {
    if (v4)
    {
      v10 = sub_18F1FE420();
      v11 = sub_18F204AE4();
      *(_QWORD *)buf = v5;
      v20 = 3221225472;
      v21 = sub_18F1FA1A4;
      v22 = &unk_1E2958238;
      v23 = v10;
      v24 = v4;
      sub_18F1F5E28(v11, (uint64_t)buf);
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  else if (*(_QWORD *)(a1 + 136))
  {
    v12 = sub_18F1DFF7C();
    v13 = *(_QWORD *)(a1 + 136);
    v14 = sub_18F204AE4();
    *(_QWORD *)buf = v5;
    v20 = 3221225472;
    v21 = sub_18F1F5EE0;
    v22 = &unk_1E2956E98;
    v25 = 0;
    v23 = v12;
    v24 = v13;
    sub_18F1F5E28(v14, (uint64_t)buf);
    v15 = *(_QWORD *)(a1 + 136);
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    *(_QWORD *)(a1 + 136) = 0;
  }
  result = *(_QWORD **)(a1 + 200);
  if (result)
  {
    v17 = sub_18F43C140(result);
    result = (_QWORD *)MEMORY[0x194001438](v17, 0x10A0C40E4B69569);
    *(_QWORD *)(a1 + 200) = 0;
  }
  *(_DWORD *)(a1 + 188) = 2139095039;
  return result;
}

float sub_18F39422C(uint64_t a1, double *a2)
{
  uint64_t v2;
  float result;

  v2 = *(_QWORD *)(a1 + 200);
  if (v2)
    return sub_18F43CBE8(v2, a2);
  return result;
}

uint64_t sub_18F39423C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 200);
  if (v1)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 104) + 128))(*(_QWORD *)(v1 + 104));
  return result;
}

void sub_18F39425C(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

void sub_18F394280(uint64_t a1, uint64_t a2, __int128 *a3)
{
  os_unfair_lock_s *v5;
  __int128 v6;

  v5 = (os_unfair_lock_s *)(a1 + 44);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 44));
  v6 = *a3;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 40) = 1;
  os_unfair_lock_unlock(v5);
}

void sub_18F3942D4(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

void sub_18F3942F8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  os_unfair_lock_s *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v5 = (os_unfair_lock_s *)(a1 + 140);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 140));
  v6 = *a3;
  v7 = a3[1];
  v8 = a3[3];
  *(_OWORD *)(a1 + 48) = a3[2];
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  v9 = a3[4];
  v10 = a3[5];
  v11 = a3[6];
  *(_DWORD *)(a1 + 128) = *((_DWORD *)a3 + 28);
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 80) = v9;
  *(_BYTE *)(a1 + 136) = 1;
  os_unfair_lock_unlock(v5);
}

void sub_18F394364(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F394388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

unsigned __int16 *sub_18F3943D8(unsigned __int16 *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  *(_QWORD *)&result[4 * (v3 - v2) + 4] = *a2;
  v4 = result[1];
  v5 = *((unsigned int *)result + 1);
  if (v5 <= v4)
  {
    v6 = *result + 1;
    if (v6 < v5)
      LOWORD(v5) = 0;
    *result = v6 - v5;
  }
  else
  {
    result[1] = v4 + 1;
  }
  return result;
}

uint64_t sub_18F394438(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2955008);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v11 = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2955008);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T &CMQueue<CMVector<float, 2>>::operator[](const size_t) const [T = CMVector<float, 2>]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[4 * (v4 - v5) + 4];
}

void sub_18F394630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  char v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  _QWORD *v11;
  dispatch_queue_t v12;
  uint64_t v13;
  NSObject *v14;
  char *v15;
  __int128 v16;
  void (*v17)(uint64_t, _OWORD *);
  void *v18;
  uint64_t v19;
  __int128 buf;
  void (*v21)(uint64_t);
  void *v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((sub_18F1F781C() & 0x10) != 0)
  {
    v0 = operator new();
    sub_18F1E61EC(v0, (uint64_t)"CLPressure", 2);
    *(_QWORD *)v0 = &off_1E2949228;
    v1 = sub_18F20CA68();
    *(_QWORD *)(v0 + 40) = 0;
    *(_QWORD *)(v0 + 32) = v1;
    *(_WORD *)(v0 + 48) = 0;
    *(_QWORD *)(v0 + 56) = 0;
    *(_DWORD *)(v0 + 64) = 0;
    *(_QWORD *)(v0 + 104) = 0x3FF0000000000000;
    *(_QWORD *)(v0 + 112) = 0;
    *(_QWORD *)(v0 + 120) = 0;
    v2 = sub_18F204AE4();
    v3 = *(_QWORD *)(v2 + 24);
    v4 = *(std::__shared_weak_count **)(v2 + 32);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v7 = sub_18F1EE944(v3, "LogPressure", (BOOL *)(v0 + 48));
    if (v4)
    {
      v8 = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if ((v7 & 1) == 0)
      *(_BYTE *)(v0 + 48) = 0;
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2954D08);
    v10 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = "PressureTempMaxUpdateInterval";
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_INFO, "motion default ignored,'%{public}s'.", (uint8_t *)&buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2954D08);
      LODWORD(v16) = 136446210;
      *(_QWORD *)((char *)&v16 + 4) = "PressureTempMaxUpdateInterval";
      v15 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "CLMotionDefaultsWrite<double>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = double]", "CoreLocation: %s\n", v15);
      if (v15 != (char *)&buf)
        free(v15);
    }
    *(_QWORD *)(v0 + 104) = 0x3FF0000000000000;
    if ((sub_18F375FF0() & 1) == 0)
    {
      v11 = (_QWORD *)operator new();
      *v11 = 0;
      v12 = dispatch_queue_create("com.apple.CoreMotion.CLPressureBiasProxy", 0);
      v11[2] = 0;
      v11[3] = 0;
      v11[1] = v12;
      sub_18F394A40((uint64_t *)(v0 + 40), (uint64_t)v11);
      v13 = *(_QWORD *)(v0 + 40);
      *(_QWORD *)&v16 = MEMORY[0x1E0C809B0];
      *((_QWORD *)&v16 + 1) = 3221225472;
      v17 = sub_18F207C54;
      v18 = &unk_1E2956480;
      v19 = v0;
      v14 = *(NSObject **)(v13 + 8);
      *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
      *((_QWORD *)&buf + 1) = 3221225472;
      v21 = sub_18F46ED90;
      v22 = &unk_1E29588B0;
      v25 = v13;
      v23 = MEMORY[0x1E0C80D38];
      v24 = &v16;
      dispatch_sync(v14, &buf);
    }
    qword_1ECEDF0A0 = v0;
  }
}

void sub_18F3949AC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;

  sub_18F2A8438(v3);
  sub_18F394A40(v2, 0);
  sub_18F3DB8A0(v1);
  MEMORY[0x194001438](v1, 0x10F1C40EC541284);
  _Unwind_Resume(a1);
}

uint64_t sub_18F394A40(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_18F46ED40(result);
    JUMPOUT(0x194001438);
  }
  return result;
}

_QWORD *sub_18F394A7C(_QWORD *a1)
{
  uint64_t *v2;

  *a1 = &off_1E2949228;
  v2 = a1 + 5;
  sub_18F2A8438((uint64_t)(a1 + 14));
  sub_18F394A40(v2, 0);
  return sub_18F3DB8A0(a1);
}

void sub_18F394AC4(_QWORD *a1)
{
  sub_18F394A7C(a1);
  JUMPOUT(0x194001438);
}

os_log_t sub_18F394AE8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Sensors");
  qword_1EE16D6D0 = (uint64_t)result;
  return result;
}

os_log_t sub_18F394B14()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Pressure");
  qword_1EE16D6C0 = (uint64_t)result;
  return result;
}

void sub_18F394EC0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CMWakeGestureManager *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  char *v10;
  uint8_t buf[1640];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend_isWakeGestureAvailable(CMWakeGestureManager, a2, a3, a4, a5) & 1) != 0)
  {
    v5 = [CMWakeGestureManager alloc];
    qword_1ECEDF0B8 = objc_msgSend_initWithQueue_(v5, v6, 0, v7, v8);
  }
  else
  {
    if (qword_1ECEDEE18 != -1)
      dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
    v9 = qword_1ECEDEE10;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE10, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "CMWakeGestureManager is not supported on this platform!", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE18 != -1)
        dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "+[CMWakeGestureManager sharedManager]_block_invoke", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
}

void sub_18F39537C()
{
  void *v0;
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t i;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  size_t size;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  size = 0;
  if (!sysctlbyname("kern.bootargs", 0, &size, 0, 0))
  {
    v0 = malloc_type_malloc(size, 0x100004077774924uLL);
    if (v0)
    {
      v1 = v0;
      if (!sysctlbyname("kern.bootargs", v0, &size, 0, 0))
      {
        v5 = (void *)objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v2, (uint64_t)v1, v3, v4);
        v15 = 0u;
        v16 = 0u;
        v17 = 0u;
        v18 = 0u;
        v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1E298BFD8, v6, (uint64_t)&v15, (uint64_t)v20, 16);
        if (v7)
        {
          v11 = v7;
          v12 = 0;
          v13 = *(_QWORD *)v16;
          do
          {
            for (i = 0; i != v11; ++i)
            {
              if (*(_QWORD *)v16 != v13)
                objc_enumerationMutation(&unk_1E298BFD8);
              v12 |= objc_msgSend_containsString_(v5, v8, *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * i), v9, v10);
            }
            v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(&unk_1E298BFD8, v8, (uint64_t)&v15, (uint64_t)v20, 16);
          }
          while (v11);
        }
        else
        {
          LOBYTE(v12) = 0;
        }
        byte_1EE16DDF8 = v12 & 1;
      }
      free(v1);
    }
  }
}

void sub_18F395578(uint64_t a1)
{
  id Weak;
  NSObject *v3;
  int v4;
  char *v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 140) = 0;
  Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 144));
  objc_storeWeak((id *)(*(_QWORD *)(a1 + 32) + 152), Weak);
  objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 152));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 140) |= 1u;
  objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 152));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 140) |= 4u;
  objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 152));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 140) |= 8u;
  objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 152));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 140) |= 0x10u;
  if (qword_1ECEDEE18 != -1)
    dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
  v3 = qword_1ECEDEE10;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE10, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 140);
    *(_DWORD *)buf = 67109120;
    v7 = v4;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEFAULT, "CMWakeGestureManagerDelegate selectors: %x", buf, 8u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE18 != -1)
      dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMWakeGestureManager setDelegate:]_block_invoke", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
}

void sub_18F396294(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3962D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onPowerStateUpdated_, a1, a4, a5);
}

uint64_t sub_18F396640(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  __CFNotificationCenter *DarwinNotifyCenter;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24))
  {
    v2 = (_QWORD *)operator new();
    v3 = *(_QWORD *)(a1 + 32);
    *v2 = off_1E294C238;
    *v2 = &off_1E294C7B0;
    v2[1] = 0;
    v2[2] = sub_18F39674C;
    v2[3] = v3;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = v2;
    v4 = sub_18F4E0194();
    sub_18F1F4F0C(v4, 0, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), -1.0);
    v9 = (void *)objc_msgSend_defaultCenter(MEMORY[0x1E0CB35B0], v5, v6, v7, v8);
    objc_msgSend_addObserver_selector_name_object_suspensionBehavior_(v9, v10, *(_QWORD *)(a1 + 32), (uint64_t)sel_onNotificationControl_, (uint64_t)CFSTR("CMSendWakeGestureNotification"), 0, 4);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, *(const void **)(a1 + 32), (CFNotificationCallback)sub_18F396758, CFSTR("com.apple.CoreMotion.WakeGesturePreferencesChanged"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  return sub_18F4E0194();
}

void sub_18F396728(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F39674C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onWakeUpdated_, a1, a4, a5);
}

void sub_18F396758(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F39A074;
  block[3] = &unk_1E2955938;
  block[4] = a2;
  dispatch_async(v2, block);
}

uint64_t sub_18F396AA8(uint64_t a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[6];
  int v16;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24))
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, *(const void **)(a1 + 32), CFSTR("com.apple.CoreMotion.WakeGesturePreferencesChanged"), 0);
    v7 = (void *)objc_msgSend_defaultCenter(MEMORY[0x1E0CB35B0], v3, v4, v5, v6);
    objc_msgSend_removeObserver_name_object_(v7, v8, *(_QWORD *)(a1 + 32), (uint64_t)CFSTR("CMSendWakeGestureNotification"), 0);
    v9 = sub_18F4E0194();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
    v11 = sub_18F204AE4();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = sub_18F1F5EE0;
    v15[3] = &unk_1E2956E98;
    v16 = 0;
    v15[4] = v9;
    v15[5] = v10;
    sub_18F1F5E28(v11, (uint64_t)v15);
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(_QWORD *)(v12 + 24);
    if (v13)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v12 = *(_QWORD *)(a1 + 32);
    }
    *(_QWORD *)(v12 + 24) = 0;
  }
  return sub_18F4E0194();
}

void sub_18F396DD4(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3;
  NSObject *v4;
  char *v5;
  uint8_t buf[1640];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = sub_18F4E0194();
  v3 = *(_BYTE *)(a1 + 32);
  *(_DWORD *)buf = 1285;
  buf[2] = v3;
  if (!sub_18F4E1FF8(v2, (uint64_t)buf, 4))
  {
    if (qword_1ECEDEE18 != -1)
      dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
    v4 = qword_1ECEDEE10;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE10, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "Unable to send display state", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE18 != -1)
        dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMWakeGestureManager setBacklightState:]_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
}

void sub_18F396F80(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  int v5;
  char *v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE18 != -1)
    dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
  v2 = qword_1ECEDEE10;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE10, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(unsigned __int8 *)(a1 + 48);
    v5 = *(unsigned __int8 *)(a1 + 49);
    *(_DWORD *)buf = 67240704;
    v8 = v3;
    v9 = 1026;
    v10 = v4;
    v11 = 1026;
    v12 = v5;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "setBacklightState,backlight,%{public}d,displayActive,%{public}u,prevDisplayActive,%{public}u", buf, 0x14u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE18 != -1)
      dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMWakeGestureManager setBacklightState:]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  if (!*(_BYTE *)(a1 + 48))
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 56) = 1;
}

BOOL sub_18F397254(uint64_t a1)
{
  NSObject *v2;
  double v3;
  uint64_t v4;
  double v5;
  _BOOL8 result;
  __int16 v7;
  unint64_t v8;

  v2 = sub_18F4E0194();
  v3 = *(double *)(a1 + 40);
  v7 = 259;
  v8 = (unint64_t)(v3 * 1000000.0);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_18F4E1FF8(v2, (uint64_t)&v7, 10);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v4 + 24))
  {
    v5 = *(double *)(a1 + 48);
    v7 = 515;
    v8 = (unint64_t)(v5 * 1000000.0);
    result = sub_18F4E1FF8(v2, (uint64_t)&v7, 10);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  }
  else
  {
    result = 0;
  }
  *(_BYTE *)(v4 + 24) = result;
  return result;
}

void sub_18F397368(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  char *v11;
  _BYTE buf[10];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_opt_class();
  v6 = objc_msgSend_toRaw_(v2, v3, *(_QWORD *)(a1 + 40), v4, v5);
  v7 = sub_18F4E0194();
  v8 = *(double *)(a1 + 48);
  buf[0] = 3;
  buf[1] = v6;
  *(_QWORD *)&buf[2] = (unint64_t)(v8 * 1000000.0);
  if (!sub_18F4E1FF8(v7, (uint64_t)buf, 10))
  {
    if (qword_1ECEDEE18 != -1)
      dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
    v9 = qword_1ECEDEE10;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE10, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v6;
      *(_WORD *)&buf[8] = 2048;
      v13 = v10;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_ERROR, "Error simulating gesture: %{public}u, delay,%f", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE18 != -1)
        dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMWakeGestureManager simulateGesture:after:]_block_invoke", "CoreLocation: %s\n", v11);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_18F397810(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  char *v4;
  uint8_t buf[1640];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = sub_18F4E0194();
  if (!sub_18F4E25FC(v2, *(_DWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 36)))
  {
    if (qword_1ECEDEE18 != -1)
      dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
    v3 = qword_1ECEDEE10;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_ERROR, "Wake Gesture: Error sending night stand control mode to detector", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE18 != -1)
        dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
      v4 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMWakeGestureManager setNightStandWakeEnabled:withConfiguration:]_block_invoke", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
}

void sub_18F397A04(uint64_t a1)
{
  uint64_t v1;
  int v3;
  id v4;
  const char *v5;
  uint64_t v6;
  NSObject *v7;
  CMWakeGestureEvent *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  const char *v12;
  id Weak;
  const char *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  id v21;
  const char *v22;
  char *v23;
  id v24;
  uint8_t buf[1640];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 24))
  {
    v3 = *(_DWORD *)(v1 + 140);
    if ((v3 & 0x10) != 0)
    {
      v8 = [CMWakeGestureEvent alloc];
      v9 = *(_QWORD *)(a1 + 40);
      v10 = mach_absolute_time();
      v11 = sub_18F1FD20C(v10);
      v24 = (id)objc_msgSend_initWithState_type_orientation_timestamp_(v8, v12, v9, 2, 0, v11);
      Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 152));
      objc_msgSend_wakeGestureManager_didUpdateWakeGestureEvent_(Weak, v14, *(_QWORD *)(a1 + 32), (uint64_t)v24, v15);

    }
    else if ((v3 & 8) != 0)
    {
      v16 = objc_loadWeak((id *)(v1 + 152));
      v18 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a1 + 40);
      v19 = mach_absolute_time();
      objc_msgSend_wakeGestureManager_didUpdateWakeGesture_orientation_detectedAt_(v16, v20, v18, v17, 0, v19);
    }
    else if ((v3 & 4) != 0)
    {
      v21 = objc_loadWeak((id *)(v1 + 152));
      objc_msgSend_wakeGestureManager_didUpdateWakeGesture_orientation_(v21, v22, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);
    }
    else if ((v3 & 1) != 0)
    {
      v4 = objc_loadWeak((id *)(v1 + 152));
      objc_msgSend_wakeGestureManager_didUpdateWakeGesture_(v4, v5, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v6);
    }
  }
  else
  {
    if (qword_1ECEDEE18 != -1)
      dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
    v7 = qword_1ECEDEE10;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE10, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Unable to invoke delegate. Please call startWakeGestureUpdates first.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE18 != -1)
        dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
      v23 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMWakeGestureManager invokeDelegateWithState:]_block_invoke", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
    }
  }
}

void sub_18F398088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_18F398254()
{
  AudioServicesPlaySystemSound(0x548u);
}

uint64_t sub_18F3985B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v5;
  const __CFString *v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v7 = CFSTR("spuLatencyMS");
  v8[0] = objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], a2, *(_QWORD *)(a1 + 32), a4, a5);
  return objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v5, (uint64_t)v8, (uint64_t)&v7, 1);
}

uint64_t sub_18F39868C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  _QWORD v34[4];
  _QWORD v35[5];

  v35[4] = *MEMORY[0x1E0C80C00];
  v34[0] = CFSTR("notification");
  v6 = (void *)MEMORY[0x1E0CB37E8];
  v7 = objc_msgSend_state(*(void **)(a1 + 32), a2, a3, a4, a5);
  v35[0] = objc_msgSend_numberWithInt_(v6, v8, v7, v9, v10);
  v34[1] = CFSTR("whileDisplay");
  v35[1] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v11, *(unsigned int *)(a1 + 40), v12, v13);
  v34[2] = CFSTR("processName");
  v18 = (void *)objc_msgSend_processInfo(MEMORY[0x1E0CB3898], v14, v15, v16, v17);
  v35[2] = objc_msgSend_processName(v18, v19, v20, v21, v22);
  v34[3] = CFSTR("type");
  v23 = (void *)MEMORY[0x1E0CB37E8];
  v28 = objc_msgSend_type(*(void **)(a1 + 32), v24, v25, v26, v27);
  v35[3] = objc_msgSend_numberWithInt_(v23, v29, v28, v30, v31);
  return objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v32, (uint64_t)v35, (uint64_t)v34, 4);
}

void sub_18F398D04(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t started;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  NSObject *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  double Current;
  double v39;
  uint64_t v40;
  NSObject *v41;
  char *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  CMWakeGestureEvent *v47;
  double v48;
  const char *v49;
  id v50;
  uint64_t v51;
  int v52;
  NSObject *v53;
  id Weak;
  const char *v55;
  uint64_t v56;
  id v57;
  const char *v58;
  NSObject *v59;
  id v60;
  const char *v61;
  id v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  void *v74;
  NSObject *v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  double v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  double v97;
  char *v98;
  _QWORD v99[3];
  _QWORD v100[3];
  int v101;
  _BYTE v102[34];
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  uint8_t buf[4];
  _BYTE v110[34];
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  int v114;
  __int16 v115;
  int v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  if (!objc_loadWeak((id *)(a1 + 40)))
    return;
  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v2 + 40))
  {
    v3 = (_QWORD *)operator new();
    *v3 = &off_1E294ACE0;
    v3[1] = 0;
    v3[2] = 0;
    v3[3] = 0;
    v4 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = v3;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  sub_18F449F38((unsigned __int8 *)(a1 + 64), *(_QWORD **)(*(_QWORD *)(a1 + 32) + 40));
  v5 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 32) + 40);
  v6 = v5[9];
  v7 = v5[10];
  v8 = v5[11];
  v9 = v5[12];
  v10 = v5[13];
  v11 = v5[14];
  v15 = objc_msgSend_stringForNotification_(CMWakeGestureManager, v12, v6, v13, v14);
  v19 = (void *)objc_msgSend_stringForMode_(CMWakeGestureManager, v16, v9, v17, v18);
  started = objc_msgSend_stringForStartPose_(CMWakeGestureManager, v20, v7, v21, v22);
  v27 = objc_msgSend_stringForViewPose_(CMWakeGestureManager, v24, v8, v25, v26);
  if (v10)
  {
    v28 = 1;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) = *(_QWORD *)(a1 + 48);
    v28 = 2;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 56) = v28;
  if (qword_1ECEDEE18 != -1)
    dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
  v29 = qword_1ECEDEE10;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67241730;
    *(_DWORD *)v110 = v6;
    *(_WORD *)&v110[4] = 2114;
    *(_QWORD *)&v110[6] = v15;
    *(_WORD *)&v110[14] = 2114;
    *(_QWORD *)&v110[16] = v19;
    *(_WORD *)&v110[24] = 2114;
    *(_QWORD *)&v110[26] = started;
    v111 = 2114;
    v112 = v27;
    v113 = 1026;
    v114 = v10;
    v115 = 1026;
    v116 = v11;
    _os_log_impl(&dword_18F1DC000, v29, OS_LOG_TYPE_DEFAULT, "Gesture notification: %{public}d(%{public}@), Mode:%{public}@, Start:%{public}@, End:%{public}@, HostAwake, %{public}d, Inferred:%{public}u", buf, 0x3Cu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE18 != -1)
      dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
    v101 = 67241730;
    *(_DWORD *)v102 = v6;
    *(_WORD *)&v102[4] = 2114;
    *(_QWORD *)&v102[6] = v15;
    *(_WORD *)&v102[14] = 2114;
    *(_QWORD *)&v102[16] = v19;
    *(_WORD *)&v102[24] = 2114;
    *(_QWORD *)&v102[26] = started;
    v103 = 2114;
    v104 = v27;
    v105 = 1026;
    v106 = v10;
    v107 = 1026;
    v108 = v11;
    v89 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMWakeGestureManager onWakeUpdated:]_block_invoke", "CoreLocation: %s\n", v89);
    if (v89 != (char *)buf)
      free(v89);
  }
  v30 = (void *)objc_opt_class();
  v34 = objc_msgSend_toState_(v30, v31, v6, v32, v33);
  Current = CFAbsoluteTimeGetCurrent();
  if (v34
    && ((v39 = Current, v40 = *(_QWORD *)(a1 + 32), v34 != *(_QWORD *)(v40 + 48))
     || Current - *(double *)(v40 + 88) > 1.0))
  {
    if (!objc_msgSend_isEqual_(v19, v35, (uint64_t)CFSTR("Nightstand"), v36, v37)
      || *(_BYTE *)(*(_QWORD *)(a1 + 32) + 136))
    {
      if (objc_msgSend_isEqual_(v19, v43, (uint64_t)CFSTR("Nightstand"), v44, v45))
        v46 = 7;
      else
        v46 = 2;
      v47 = [CMWakeGestureEvent alloc];
      v48 = sub_18F1FD20C((unint64_t)*(double *)(a1 + 48));
      v50 = (id)objc_msgSend_initWithState_type_orientation_timestamp_(v47, v49, v34, v46, v11, v48);
      v51 = *(_QWORD *)(a1 + 32);
      v52 = *(_DWORD *)(v51 + 140);
      if ((v52 & 0x10) != 0)
      {
        Weak = objc_loadWeak((id *)(v51 + 152));
        objc_msgSend_wakeGestureManager_didUpdateWakeGestureEvent_(Weak, v55, *(_QWORD *)(a1 + 32), (uint64_t)v50, v56);
      }
      else if ((v52 & 8) != 0)
      {
        v57 = objc_loadWeak((id *)(v51 + 152));
        objc_msgSend_wakeGestureManager_didUpdateWakeGesture_orientation_detectedAt_(v57, v58, *(_QWORD *)(a1 + 32), v34, v11, (unint64_t)*(double *)(a1 + 48));
      }
      else if ((v52 & 4) != 0)
      {
        v60 = objc_loadWeak((id *)(v51 + 152));
        objc_msgSend_wakeGestureManager_didUpdateWakeGesture_orientation_(v60, v61, *(_QWORD *)(a1 + 32), v34, v11);
      }
      else
      {
        if ((v52 & 1) == 0)
        {
          if (qword_1ECEDEE18 != -1)
            dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
          v53 = qword_1ECEDEE10;
          if (os_log_type_enabled((os_log_t)qword_1ECEDEE10, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F1DC000, v53, OS_LOG_TYPE_FAULT, "No valid delegate found.", buf, 2u);
          }
          if (sub_18F1FCA08(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1ECEDEE18 != -1)
              dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
            LOWORD(v101) = 0;
            v42 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 0, "-[CMWakeGestureManager onWakeUpdated:]_block_invoke", "CoreLocation: %s\n", v42);
            goto LABEL_23;
          }
          return;
        }
        v62 = objc_loadWeak((id *)(v51 + 152));
        objc_msgSend_wakeGestureManager_didUpdateWakeGesture_(v62, v63, *(_QWORD *)(a1 + 32), v34, v64);
      }
      sub_18F1F77DC();
      v65 = mach_absolute_time();
      sub_18F1FD20C(v65);
      kdebug_trace();
      if ((_DWORD)v9)
        objc_msgSend_sendWakeTriggerAnalytics_withDisplay_(*(void **)(a1 + 32), v66, (uint64_t)v50, *(double *)(*(_QWORD *)(a1 + 32) + 104) <= 0.0, v68);
      v69 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v69 + 120))
      {
        v99[0] = CFSTR("mode");
        v100[0] = objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], v66, v9, v67, v68);
        v99[1] = CFSTR("event");
        v100[1] = objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], v70, v6, v71, v72);
        v99[2] = CFSTR("display");
        if (*(double *)(*(_QWORD *)(a1 + 32) + 104) <= 0.0)
          v74 = &unk_1E298C2C0;
        else
          v74 = &unk_1E298C2A8;
        v100[2] = v74;
        objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v73, (uint64_t)v100, (uint64_t)v99, 3);
        PLLogTimeSensitiveRegisteredEvent();
        v69 = *(_QWORD *)(a1 + 32);
      }
      *(double *)(v69 + 88) = v39;
      if (qword_1ECEDEE18 != -1)
        dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
      v75 = qword_1ECEDEE10;
      if (os_log_type_enabled((os_log_t)qword_1ECEDEE10, OS_LOG_TYPE_DEFAULT))
      {
        v76 = (void *)objc_opt_class();
        v80 = objc_msgSend_stringForGestureState_(v76, v77, v34, v78, v79);
        v81 = sub_18F1FD20C(**(_QWORD **)(a1 + 56));
        v82 = mach_absolute_time();
        v83 = sub_18F1FD20C(v82);
        *(_DWORD *)buf = 138543874;
        *(_QWORD *)v110 = v80;
        *(_WORD *)&v110[8] = 2050;
        *(double *)&v110[10] = v81;
        *(_WORD *)&v110[18] = 2050;
        *(double *)&v110[20] = v83;
        _os_log_impl(&dword_18F1DC000, v75, OS_LOG_TYPE_DEFAULT, "Gesture state notified,%{public}@,eventTimestamp,%{public}f,currentTime,%{public}f", buf, 0x20u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE18 != -1)
          dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
        v90 = (void *)objc_opt_class();
        v94 = objc_msgSend_stringForGestureState_(v90, v91, v34, v92, v93);
        v95 = sub_18F1FD20C(**(_QWORD **)(a1 + 56));
        v96 = mach_absolute_time();
        v97 = sub_18F1FD20C(v96);
        v101 = 138543874;
        *(_QWORD *)v102 = v94;
        *(_WORD *)&v102[8] = 2050;
        *(double *)&v102[10] = v95;
        *(_WORD *)&v102[18] = 2050;
        *(double *)&v102[20] = v97;
        v98 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "-[CMWakeGestureManager onWakeUpdated:]_block_invoke", "CoreLocation: %s\n", v98);
        if (v98 != (char *)buf)
          free(v98);
      }
      v88 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v88 + 122) && *(double *)(v88 + 104) < 0.0 && v34 == 1)
      {
        objc_msgSend_playAlert((void *)v88, v84, v85, v86, v87);
        v88 = *(_QWORD *)(a1 + 32);
      }
      *(_QWORD *)(v88 + 48) = v34;
      return;
    }
    if (qword_1ECEDEE18 != -1)
      dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
    v59 = qword_1ECEDEE10;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE10, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v59, OS_LOG_TYPE_DEBUG, "Skipping nightstand mode gestures for non-nightstand clients", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE18 == -1)
        goto LABEL_22;
      goto LABEL_79;
    }
  }
  else
  {
    if (qword_1ECEDEE18 != -1)
      dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
    v41 = qword_1ECEDEE10;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE10, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v41, OS_LOG_TYPE_DEBUG, "Skipping redundant gesture update", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE18 == -1)
      {
LABEL_22:
        LOWORD(v101) = 0;
        v42 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "-[CMWakeGestureManager onWakeUpdated:]_block_invoke", "CoreLocation: %s\n", v42);
LABEL_23:
        if (v42 != (char *)buf)
          free(v42);
        return;
      }
LABEL_79:
      dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
      goto LABEL_22;
    }
  }
}

id sub_18F3998A4(uint64_t a1)
{
  id result;

  result = objc_loadWeak((id *)(a1 + 40));
  if (result)
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 56) = 1;
  return result;
}

void *sub_18F39997C(uint64_t a1)
{
  void *result;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = objc_loadWeak((id *)(a1 + 40));
  if (result && *(_DWORD *)(a1 + 48) == -536870352 && *(_DWORD *)(*(_QWORD *)(a1 + 32) + 56) == 2)
  {
    result = (void *)objc_msgSend_logWakeLatency(result, v3, v4, v5, v6);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 56) = 1;
  }
  return result;
}

void sub_18F399A84(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  NSObject *v7;
  NSObject *v8;
  char *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  char *v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE18 != -1)
    dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
  v2 = qword_1ECEDEE10;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE10, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_INFO, "Attempt re-enabling detected state recognition", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE18 != -1)
      dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
    v9 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMWakeGestureManager(BiometricKit) reenableDetectedStateRecognition]_block_invoke", "CoreLocation: %s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  v6 = atomic_load((unsigned __int8 *)&qword_1ECEDF0C8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF0C8))
  {
    qword_1ECEDF0C0 = &unk_1E298BFF0;
    __cxa_guard_release(&qword_1ECEDF0C8);
  }
  if ((objc_msgSend_containsObject_((void *)qword_1ECEDF0C0, v3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112), v4, v5) & 1) == 0)
  {
    if (qword_1ECEDEE18 != -1)
      dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
    v10 = qword_1ECEDEE10;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE10, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "assert";
      v20 = 2081;
      v21 = "[intendedClientList containsObject:fProcessName]";
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"This is not the SPI you are looking for\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE18 != -1)
        dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
    }
    v11 = qword_1ECEDEE10;
    if (os_signpost_enabled((os_log_t)qword_1ECEDEE10))
    {
      *(_DWORD *)buf = 68289539;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "assert";
      v20 = 2081;
      v21 = "[intendedClientList containsObject:fProcessName]";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "This is not the SPI you are looking for", "{\"msg%{public}.0s\":\"This is not the SPI you are looking for\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE18 != -1)
        dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
    }
    v12 = qword_1ECEDEE10;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "assert";
      v20 = 2081;
      v21 = "[intendedClientList containsObject:fProcessName]";
      _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"This is not the SPI you are looking for\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_29:
    dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
    goto LABEL_10;
  }
  v7 = sub_18F4E0194();
  *(_DWORD *)buf = 1797;
  if (sub_18F4E1FF8(v7, (uint64_t)buf, 4))
    return;
  if (qword_1ECEDEE18 != -1)
    goto LABEL_29;
LABEL_10:
  v8 = qword_1ECEDEE10;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_ERROR, "Unable to send reenable-detected hint", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE18 != -1)
      dispatch_once(&qword_1ECEDEE18, &unk_1E2943860);
    v13 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMWakeGestureManager(BiometricKit) reenableDetectedStateRecognition]_block_invoke", "CoreLocation: %s\n", v13);
    if (v13 != (char *)buf)
      free(v13);
  }
}

void sub_18F399FDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECEDF0C8);
  _Unwind_Resume(a1);
}

os_log_t sub_18F399FFC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "WakeGesture");
  qword_1ECEDEE10 = (uint64_t)result;
  return result;
}

void sub_18F39A02C()
{
  JUMPOUT(0x194001438);
}

__n128 sub_18F39A054(uint64_t a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *(_QWORD *)(a1 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t sub_18F39A074(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_loadPreferences(*(void **)(a1 + 32), a2, a3, a4, a5);
}

void sub_18F39A080(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F39A0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_18F39A0B4(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F39A0D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

CMOnBodyStatusManager *sub_18F39AFD8()
{
  CMOnBodyStatusManager *result;

  result = objc_alloc_init(CMOnBodyStatusManager);
  qword_1ECEDF0D0 = (uint64_t)result;
  return result;
}

uint64_t sub_18F39B058(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_startOnBodyStatusDetectionPrivateToQueue_withParameters_handler_, a1[5], a1[6], a1[7]);
}

uint64_t sub_18F39B0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_stopOnBodyStatusDetectionPrivate, a3, a4, a5);
}

void sub_18F39B138(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *__p[2];
  char v20;

  v6 = *(_QWORD **)(a1 + 32);
  v7 = v6[1];
  if (!v7)
    objc_msgSend_connect(v6, a2, a3, a4, a5);
  v8 = (std::__shared_weak_count *)operator new(0x70uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2952688;
  sub_18F270374(__p, "kCLConnectionMessageOnBodyDetectionParams");
  MEMORY[0x19400103C](&v8[1], __p, *(_QWORD *)(a1 + 40));
  if (v20 < 0)
    operator delete(__p[0]);
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  CLConnectionClient::sendMessage();
  if (!v8)
    goto LABEL_10;
  v15 = (unint64_t *)&v8->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_10:
    if (v7)
      goto LABEL_13;
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (!v7)
LABEL_11:
    objc_msgSend_disconnect(*(void **)(a1 + 32), v11, v12, v13, v14);
LABEL_13:
  if (v8)
  {
    v17 = (unint64_t *)&v8->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_18F39B284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_18F2A8438((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_18F39B3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F39B430(_QWORD *a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  NSSet *v11;
  void *DictionaryOfClasses;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  _QWORD *v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  char *v28;
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD block[5];
  uint8_t buf[1640];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v11 = (NSSet *)objc_msgSend_setWithObjects_(v4, v8, v5, v9, v10, v6, v7, 0);
  if (!*a2 || (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v11)) == 0)
  {
    v22 = a1[4];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_18F39B720;
    block[3] = &unk_1E2955B10;
    block[4] = a1[6];
    v24 = block;
    goto LABEL_6;
  }
  v16 = DictionaryOfClasses;
  v17 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v13, (uint64_t)CFSTR("CMErrorMessage"), v14, v15);
  v21 = objc_msgSend_objectForKeyedSubscript_(v16, v18, (uint64_t)CFSTR("CMOnBodyStatusData"), v19, v20);
  if (v17)
  {
    *(_BYTE *)(a1[5] + 16) = 0;
    v22 = a1[4];
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 3221225472;
    v30[2] = sub_18F39B76C;
    v30[3] = &unk_1E2955B60;
    v23 = a1[6];
    v30[4] = v17;
    v30[5] = v23;
    v24 = v30;
LABEL_6:
    dispatch_async(v22, v24);
    return;
  }
  if (v21)
  {
    v25 = a1[4];
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = sub_18F39B7CC;
    v29[3] = &unk_1E2955B60;
    v26 = a1[6];
    v29[4] = v21;
    v29[5] = v26;
    v24 = v29;
    v22 = v25;
    goto LABEL_6;
  }
  if (qword_1EE16D8C8 != -1)
    dispatch_once(&qword_1EE16D8C8, &unk_1E2955088);
  v27 = qword_1EE16D8D0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D8D0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v27, OS_LOG_TYPE_FAULT, "Unable to parse message when starting updates to queue!", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D8C8 != -1)
      dispatch_once(&qword_1EE16D8C8, &unk_1E2955088);
    v28 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMOnBodyStatusManager connect]_block_invoke", "CoreLocation: %s\n", v28);
    if (v28 != (char *)buf)
      free(v28);
  }
}

uint64_t sub_18F39B720(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F39B76C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;

  v5 = (void *)MEMORY[0x1E0CB35C8];
  v6 = *(_QWORD *)(a1 + 40);
  v7 = objc_msgSend_integerValue(*(void **)(a1 + 32), a2, a3, a4, a5);
  v9 = objc_msgSend_errorWithDomain_code_userInfo_(v5, v8, (uint64_t)CFSTR("CMErrorDomain"), v7, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v6, 0, v9);
}

uint64_t sub_18F39B7CC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_18F39B7E0(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D8C8 != -1)
    dispatch_once(&qword_1EE16D8C8, &unk_1E2955088);
  v3 = qword_1EE16D8D0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D8D0, OS_LOG_TYPE_DEBUG))
  {
    v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0)
      v5 = v4;
    else
      v5 = *(_QWORD *)v4;
    *(_DWORD *)buf = 136315138;
    v8 = v5;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEBUG, "Default handler received message %s", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D8C8 != -1)
      dispatch_once(&qword_1EE16D8C8, &unk_1E2955088);
    CLConnectionMessage::name(*a2);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMOnBodyStatusManager connect]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
}

void sub_18F39BDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F39BF44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

os_log_t sub_18F39BF70()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "OnBody");
  qword_1EE16D8D0 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F39BF9C@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F39BFFC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F39BFE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F39BFFC(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F39C05C((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F39C048(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F39C05C(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F39C0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F39C19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x194001438](v15, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_18F39C474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_18F2A8438((uint64_t)&a9);
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_18F39C4B0(uint64_t a1, CLConnectionMessage **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  char *v21;
  uint8_t buf[4];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v3, v6, v4, v7, v8, v5, 0);
  if (*a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9)) != 0
    && (v14 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, (uint64_t)CFSTR("CMErrorMessage"), v12, v13)) != 0)
  {
    v19 = objc_msgSend_intValue(v14, v15, v16, v17, v18);
  }
  else
  {
    v19 = 103;
  }
  if (qword_1EE16D858 != -1)
    dispatch_once(&qword_1EE16D858, &unk_1E2944F20);
  v20 = qword_1EE16D860;
  if (os_log_type_enabled((os_log_t)qword_1EE16D860, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v23 = v19;
    _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_FAULT, "Failed with CMError code %{public}d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D858 != -1)
      dispatch_once(&qword_1EE16D858, &unk_1E2944F20);
    v21 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMOdometerProxy _startDaemonConnection]_block_invoke", "CoreLocation: %s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
  }
}

uint64_t sub_18F39C6C4(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  NSSet *v10;
  uint64_t result;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;

  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v10 = (NSSet *)objc_msgSend_setWithObjects_(v4, v7, v5, v8, v9, v6, 0);
  result = *a2;
  if (*a2)
  {
    result = CLConnectionMessage::getDictionaryOfClasses((CLConnectionMessage *)result, v10);
    if (result)
    {
      v15 = (void *)objc_msgSend_objectForKeyedSubscript_((void *)result, v12, (uint64_t)CFSTR("CMOdometerGpsAvailability"), v13, v14);
      v24 = objc_msgSend_BOOLValue(v15, v16, v17, v18, v19);
      result = *(_QWORD *)(a1 + 32);
      v25 = v24;
      if (*(_QWORD *)(result + 40) != v24)
      {
        v26 = (void *)objc_msgSend_odometer((void *)result, v20, v21, v22, v23);
        objc_msgSend_delegate(v26, v27, v28, v29, v30);
        v35 = objc_opt_respondsToSelector();
        result = *(_QWORD *)(a1 + 32);
        if ((v35 & 1) != 0)
        {
          v36 = (void *)objc_msgSend_odometer((void *)result, v31, v32, v33, v34);
          v41 = (void *)objc_msgSend_delegate(v36, v37, v38, v39, v40);
          v46 = objc_msgSend_odometer(*(void **)(a1 + 32), v42, v43, v44, v45);
          objc_msgSend_odometer_didUpdateGpsAvailability_(v41, v47, v46, v25, v48);
          result = *(_QWORD *)(a1 + 32);
        }
      }
      *(_QWORD *)(result + 40) = v25;
    }
  }
  return result;
}

void sub_18F39C7B4(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ExecutablePathFromPid;
  uint64_t v7;
  NSObject *v8;
  pid_t v9;
  uint64_t v10;
  char *v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  pid_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = getpid();
  ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2, v4, v5);
  if (ExecutablePathFromPid)
  {
    v7 = ExecutablePathFromPid;
    if (qword_1EE16D858 != -1)
      dispatch_once(&qword_1EE16D858, &unk_1E2944F20);
    v8 = qword_1EE16D860;
    if (os_log_type_enabled((os_log_t)qword_1EE16D860, OS_LOG_TYPE_INFO))
    {
      v9 = getpid();
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      v13 = v7;
      v14 = 1024;
      v15 = v9;
      v16 = 2048;
      v17 = v10;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_INFO, "CMOdometer client connection interrupt, %@, %d, %p", buf, 0x1Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D858 != -1)
        dispatch_once(&qword_1EE16D858, &unk_1E2944F20);
      getpid();
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMOdometerProxy _startDaemonConnection]_block_invoke", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
}

void sub_18F39CB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_18F2A8438((uint64_t)&a10);
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_18F39CBBC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  NSSet *v16;
  void *DictionaryOfClasses;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  _QWORD *v32;
  NSObject *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  double v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  char *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  uint64_t v96;
  _QWORD v97[8];
  _QWORD block[6];
  uint8_t buf[1640];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  if (v6)
  {
    v8 = (void *)objc_msgSend_copy(v6, a2, a3, a4, a5);
    v9 = (void *)MEMORY[0x1E0C99E60];
    v10 = objc_opt_class();
    v11 = objc_opt_class();
    v12 = objc_opt_class();
    v16 = (NSSet *)objc_msgSend_setWithObjects_(v9, v13, v10, v14, v15, v11, v12, 0);
    if (!*(_QWORD *)a2)
      goto LABEL_7;
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v16);
    if (!DictionaryOfClasses)
      goto LABEL_7;
    v21 = DictionaryOfClasses;
    v22 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v18, (uint64_t)CFSTR("CMOdometerDataObject"), v19, v20);
    v26 = objc_msgSend_objectForKeyedSubscript_(v21, v23, (uint64_t)CFSTR("CMErrorMessage"), v24, v25);
    if (v26)
    {
      v31 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_18F39CF4C;
      block[3] = &unk_1E2955B60;
      block[4] = v26;
      block[5] = v8;
      v32 = block;
      v33 = v31;
    }
    else
    {
      if (!v22)
      {
        if (qword_1EE16D858 != -1)
          dispatch_once(&qword_1EE16D858, &unk_1E2944F20);
        v52 = qword_1EE16D860;
        if (os_log_type_enabled((os_log_t)qword_1EE16D860, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v52, OS_LOG_TYPE_FAULT, "Unable to parse kCLConnectionMessageOdometerUpdate message!", buf, 2u);
        }
        if (sub_18F1FCA08(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D858 != -1)
            dispatch_once(&qword_1EE16D858, &unk_1E2944F20);
          v53 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "-[CMOdometerProxy _startOdometerUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v53);
          if (v53 != (char *)buf)
            free(v53);
        }
        goto LABEL_7;
      }
      objc_msgSend_totalDistance(*(void **)(a1 + 32), v27, v28, v29, v30);
      v38 = (void *)MEMORY[0x1E0C99D68];
      if (v39 < 0.0)
      {
        objc_msgSend_timeIntervalSinceReferenceDate(MEMORY[0x1E0C99D68], v34, v35, v36, v37);
        objc_msgSend_setStartDate_(*(void **)(a1 + 32), v40, v41, v42, v43);
        objc_msgSend_setTotalDistance_(*(void **)(a1 + 32), v44, v45, v46, v47, 0.0);
        objc_msgSend_setAverageSpeed_(*(void **)(a1 + 32), v48, v49, v50, v51, 0.0);
        goto LABEL_7;
      }
      objc_msgSend_startDate(*(void **)(a1 + 32), v34, v35, v36, v37);
      v58 = objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(v38, v54, v55, v56, v57);
      v59 = *(void **)(a1 + 32);
      v64 = (void *)objc_msgSend_distance(v22, v60, v61, v62, v63);
      objc_msgSend_doubleValue(v64, v65, v66, v67, v68);
      v70 = v69;
      objc_msgSend_totalDistance(v59, v71, v72, v73, v74);
      objc_msgSend_setTotalDistance_(v59, v76, v77, v78, v79, v70 + v75);
      v84 = (void *)objc_msgSend_endDate(v22, v80, v81, v82, v83);
      objc_msgSend_timeIntervalSinceDate_(v84, v85, v58, v86, v87);
      v93 = v92;
      v94 = 0.0;
      if (v93 > 0.1)
      {
        objc_msgSend_totalDistance(*(void **)(a1 + 32), v88, v89, v90, v91, 0.0);
        v94 = v95 / v93;
      }
      objc_msgSend_setAverageSpeed_(*(void **)(a1 + 32), v88, v89, v90, v91, v94);
      v96 = *(_QWORD *)(a1 + 32);
      v33 = *(NSObject **)(v96 + 16);
      v97[0] = MEMORY[0x1E0C809B0];
      v97[1] = 3221225472;
      v97[2] = sub_18F39CFC8;
      v97[3] = &unk_1E2956778;
      v97[4] = v22;
      v97[5] = v96;
      v97[6] = v58;
      v97[7] = v8;
      v32 = v97;
    }
    dispatch_async(v33, v32);
LABEL_7:

  }
}

void sub_18F39CF4C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  v2 = (void *)MEMORY[0x194001B4C]();
  v3 = (void *)MEMORY[0x1E0CB35C8];
  v4 = *(_QWORD *)(a1 + 40);
  v9 = objc_msgSend_integerValue(*(void **)(a1 + 32), v5, v6, v7, v8);
  v11 = objc_msgSend_errorWithDomain_code_userInfo_(v3, v10, (uint64_t)CFSTR("CMErrorDomain"), v9, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v4, 0, v11);
  objc_autoreleasePoolPop(v2);
}

void sub_18F39CFC8(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;

  v2 = (void *)MEMORY[0x194001B4C]();
  v7 = (id)objc_msgSend_copy(*(void **)(a1 + 32), v3, v4, v5, v6);
  v8 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_averageSpeed(*(void **)(a1 + 40), v9, v10, v11, v12);
  v17 = objc_msgSend_numberWithDouble_(v8, v13, v14, v15, v16);
  objc_msgSend_setAverageSpeed_(v7, v18, v17, v19, v20);
  v21 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_totalDistance(*(void **)(a1 + 40), v22, v23, v24, v25);
  v30 = objc_msgSend_numberWithDouble_(v21, v26, v27, v28, v29);
  objc_msgSend_setDistance_(v7, v31, v30, v32, v33);
  objc_msgSend_updateStartDate_(v7, v34, *(_QWORD *)(a1 + 48), v35, v36);
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  objc_autoreleasePoolPop(v2);
}

void sub_18F39D1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0)
    operator delete(__p);
  sub_18F2A8438((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_18F39D3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  sub_18F2A8438((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_18F39D594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_18F2A8438((uint64_t)&a10);
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_18F39D5D0(uint64_t a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  NSSet *v12;
  void *DictionaryOfClasses;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  _QWORD *v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  void *Object;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t i;
  void *v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  double v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  double v107;
  double v108;
  double v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  char *v132;
  _QWORD v133[6];
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  _QWORD block[6];
  uint8_t buf[1632];
  _BYTE v140[128];
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v12 = (NSSet *)objc_msgSend_setWithObjects_(v4, v9, v5, v10, v11, v6, v7, v8, 0);
  if (*a2)
  {
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v12);
    if (DictionaryOfClasses)
    {
      v17 = DictionaryOfClasses;
      v18 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v14, (uint64_t)CFSTR("CMCyclingWorkoutDistanceDataArray"), v15, v16);
      v22 = objc_msgSend_objectForKeyedSubscript_(v17, v19, (uint64_t)CFSTR("CMErrorMessage"), v20, v21);
      if (v22)
      {
        v27 = *(_QWORD *)(a1 + 40);
        v28 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = sub_18F39DA18;
        block[3] = &unk_1E2955B60;
        block[4] = v22;
        block[5] = v27;
        v29 = block;
        v30 = v28;
LABEL_5:
        dispatch_async(v30, v29);
        return;
      }
      if (v18 && objc_msgSend_count(v18, v23, v24, v25, v26))
      {
        objc_msgSend_totalCyclingDistance(*(void **)(a1 + 32), v31, v32, v33, v34);
        if (v39 < 0.0)
        {
          Object = (void *)objc_msgSend_firstObject(v18, v35, v36, v37, v38);
          v45 = (void *)objc_msgSend_endDate(Object, v41, v42, v43, v44);
          objc_msgSend_timeIntervalSinceReferenceDate(v45, v46, v47, v48, v49);
          objc_msgSend_setCyclingStartDate_(*(void **)(a1 + 32), v50, v51, v52, v53);
          objc_msgSend_setTotalCyclingDistance_(*(void **)(a1 + 32), v54, v55, v56, v57, 0.0);
        }
        v136 = 0u;
        v137 = 0u;
        v134 = 0u;
        v135 = 0u;
        v58 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v35, (uint64_t)&v134, (uint64_t)v140, 16);
        if (v58)
        {
          v63 = v58;
          v64 = *(_QWORD *)v135;
          do
          {
            for (i = 0; i != v63; ++i)
            {
              if (*(_QWORD *)v135 != v64)
                objc_enumerationMutation(v18);
              v66 = *(void **)(*((_QWORD *)&v134 + 1) + 8 * i);
              v67 = (void *)MEMORY[0x1E0C99D68];
              objc_msgSend_cyclingStartDate(*(void **)(a1 + 32), v59, v60, v61, v62);
              v72 = objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(v67, v68, v69, v70, v71);
              v73 = *(void **)(a1 + 32);
              v78 = (void *)objc_msgSend_distance(v66, v74, v75, v76, v77);
              objc_msgSend_doubleValue(v78, v79, v80, v81, v82);
              v84 = v83;
              objc_msgSend_totalCyclingDistance(v73, v85, v86, v87, v88);
              objc_msgSend_setTotalCyclingDistance_(v73, v90, v91, v92, v93, v84 + v89);
              v98 = (void *)objc_msgSend_endDate(v66, v94, v95, v96, v97);
              objc_msgSend_timeIntervalSinceDate_(v98, v99, v72, v100, v101);
              v107 = v106;
              v108 = 0.0;
              if (v107 > 0.1)
              {
                objc_msgSend_totalCyclingDistance(*(void **)(a1 + 32), v102, v103, v104, v105, 0.0);
                v108 = v109 / v107;
              }
              v110 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v102, v103, v104, v105, v108);
              objc_msgSend_setAverageSpeed_(v66, v111, v110, v112, v113);
              v114 = (void *)MEMORY[0x1E0CB37E8];
              objc_msgSend_totalCyclingDistance(*(void **)(a1 + 32), v115, v116, v117, v118);
              v123 = objc_msgSend_numberWithDouble_(v114, v119, v120, v121, v122);
              objc_msgSend_setDistance_(v66, v124, v123, v125, v126);
              objc_msgSend_updateStartDate_(v66, v127, v72, v128, v129);
            }
            v63 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v59, (uint64_t)&v134, (uint64_t)v140, 16);
          }
          while (v63);
        }
        v130 = *(_QWORD *)(a1 + 40);
        v30 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
        v133[0] = MEMORY[0x1E0C809B0];
        v133[1] = 3221225472;
        v133[2] = sub_18F39DA78;
        v133[3] = &unk_1E2955B60;
        v133[4] = v18;
        v133[5] = v130;
        v29 = v133;
        goto LABEL_5;
      }
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954708);
      v131 = off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v131, OS_LOG_TYPE_FAULT, "Unable to parse kCLConnectionMessageCyclingWorkoutDistanceUpdate message!", buf, 2u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE88 != -1)
          dispatch_once(&qword_1ECEDEE88, &unk_1E2954708);
        v132 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "-[CMOdometerProxy _startCyclingWorkoutDistanceUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v132);
        if (v132 != (char *)buf)
          free(v132);
      }
    }
  }
}

uint64_t sub_18F39DA18(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;

  v5 = (void *)MEMORY[0x1E0CB35C8];
  v6 = *(_QWORD *)(a1 + 40);
  v7 = objc_msgSend_integerValue(*(void **)(a1 + 32), a2, a3, a4, a5);
  v9 = objc_msgSend_errorWithDomain_code_userInfo_(v5, v8, (uint64_t)CFSTR("CMErrorDomain"), v7, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v6, 0, v9);
}

uint64_t sub_18F39DA78(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_18F39DBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a14 < 0)
    operator delete(__p);
  sub_18F2A8438((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_18F39DD80(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend__teardown(*(void **)(*(_QWORD *)(a1 + 32) + 16), a2, a3, a4, a5);
}

uint64_t sub_18F39E194(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (void *)objc_msgSend_odometerProxy(*(void **)(a1 + 32), a2, a3, a4, a5);
  return objc_msgSend__startOdometerUpdatesWithHandler_(v6, v7, *(_QWORD *)(a1 + 40), v8, v9);
}

uint64_t sub_18F39E220(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (void *)objc_msgSend_odometerProxy(*(void **)(a1 + 32), a2, a3, a4, a5);
  return objc_msgSend__stopOdometerUpdates(v5, v6, v7, v8, v9);
}

void sub_18F39E368(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECEDF0E8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F39E380(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = objc_msgSend_odometerProxy(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v6, sel__startCyclingWorkoutDistanceUpdatesWithHandler_, *(_QWORD *)(a1 + 40), v7, v8);
}

uint64_t sub_18F39E3A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];

  v6 = (void *)objc_msgSend_odometerProxy(*(void **)(a1 + 32), a2, a3, a4, a5);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_18F39E410;
  v11[3] = &unk_1E29567C8;
  v11[4] = *(_QWORD *)(a1 + 40);
  return objc_msgSend__startOdometerUpdatesWithHandler_(v6, v7, (uint64_t)v11, v8, v9);
}

uint64_t sub_18F39E410(uint64_t result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  if (a3)
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(result + 32) + 16))(*(_QWORD *)(result + 32), 0);
  if (a2)
  {
    v5 = *(_QWORD *)(result + 32);
    v7[0] = a2;
    v6 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], a2, (uint64_t)v7, 1, a5);
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(v5, v6, 0);
  }
  return result;
}

void sub_18F39E594(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_1ECEDF0F0);
  _Unwind_Resume(a1);
}

uint64_t sub_18F39E5AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (void *)objc_msgSend_odometerProxy(*(void **)(a1 + 32), a2, a3, a4, a5);
  return objc_msgSend__stopCyclingWorkoutDistanceUpdates(v5, v6, v7, v8, v9);
}

uint64_t sub_18F39E5C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (void *)objc_msgSend_odometerProxy(*(void **)(a1 + 32), a2, a3, a4, a5);
  return objc_msgSend__stopOdometerUpdates(v5, v6, v7, v8, v9);
}

os_log_t sub_18F39E600()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Odometer");
  qword_1EE16D860 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F39E62C@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F39E68C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F39E678(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F39E68C(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F39E6EC((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F39E6D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F39E6EC(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F39E740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F39E75C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  void *__p[2];
  char v6;

  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2952688;
  sub_18F270374(__p, "kCLConnectionMessageCyclingWorkoutDistanceUpdate");
  MEMORY[0x19400103C](v4 + 3, __p, *a2);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_18F39E7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

long double CLClientGetDistanceCoordinates(double a1, double a2, double a3, double a4)
{
  unsigned __int8 v4;
  int v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v4 = atomic_load((unsigned __int8 *)&qword_1ECEDF100);
  if ((v4 & 1) == 0)
  {
    v9 = a4;
    v10 = a2;
    v7 = a3;
    v8 = a1;
    v6 = __cxa_guard_acquire(&qword_1ECEDF100);
    a3 = v7;
    a1 = v8;
    a4 = v9;
    a2 = v10;
    if (v6)
    {
      qword_1ECEDF120 = 0;
      unk_1ECEDF128 = 0;
      xmmword_1ECEDF110 = xmmword_18F5048A0;
      qword_1ECEDF130 = 0x3FF0000000000000;
      __cxa_guard_release(&qword_1ECEDF100);
      a3 = v7;
      a1 = v8;
      a4 = v9;
      a2 = v10;
    }
  }
  return sub_18F4790C4((double *)&xmmword_1ECEDF110, a1, a2, a3, a4, 0.0);
}

void CLClientGetDistanceHighPrecision(_OWORD *a1, _OWORD *a2)
{
  unsigned __int8 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD v14[8];
  _OWORD v15[2];
  _OWORD v16[8];
  _OWORD v17[2];

  v2 = atomic_load((unsigned __int8 *)&qword_1ECEDF108);
  if ((v2 & 1) == 0)
  {
    v12 = a2;
    v13 = a1;
    v11 = __cxa_guard_acquire(&qword_1ECEDF108);
    a2 = v12;
    a1 = v13;
    if (v11)
    {
      qword_1ECEDF150 = 0;
      unk_1ECEDF158 = 0;
      *(_OWORD *)dbl_1ECEDF140 = xmmword_18F5048A0;
      qword_1ECEDF160 = 0x3FF0000000000000;
      __cxa_guard_release(&qword_1ECEDF108);
      a2 = v12;
      a1 = v13;
    }
  }
  v3 = a1[7];
  v16[6] = a1[6];
  v16[7] = v3;
  v17[0] = a1[8];
  *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)((char *)a1 + 140);
  v4 = a1[3];
  v16[2] = a1[2];
  v16[3] = v4;
  v5 = a1[5];
  v16[4] = a1[4];
  v16[5] = v5;
  v6 = a1[1];
  v16[0] = *a1;
  v16[1] = v6;
  v7 = a2[7];
  v14[6] = a2[6];
  v14[7] = v7;
  v15[0] = a2[8];
  *(_OWORD *)((char *)v15 + 12) = *(_OWORD *)((char *)a2 + 140);
  v8 = a2[3];
  v14[2] = a2[2];
  v14[3] = v8;
  v9 = a2[5];
  v14[4] = a2[4];
  v14[5] = v9;
  v10 = a2[1];
  v14[0] = *a2;
  v14[1] = v10;
  sub_18F47918C(dbl_1ECEDF140, (uint64_t)v16, (uint64_t)v14);
}

CFStringRef CLClientCreateIso6709Notation(uint64_t a1)
{
  double v2;
  const __CFAllocator *v3;
  double v4;

  v2 = *(double *)(a1 + 36);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = *(double *)(a1 + 4);
  if (v2 >= 0.0)
    return CFStringCreateWithFormat(v3, 0, CFSTR("%+08.4lf%+09.4lf%+08.3lf/"), v4, *(_QWORD *)&v4, *(_QWORD *)(a1 + 12), *(_QWORD *)(a1 + 28));
  else
    return CFStringCreateWithFormat(v3, 0, CFSTR("%+08.4lf%+09.4lf/"), v4, *(_QWORD *)(a1 + 4), *(_QWORD *)(a1 + 12));
}

uint64_t sub_18F39FFFC(uint64_t a1, double a2)
{
  NSObject *v4;
  NSObject *v5;
  char *v7;
  char *v8;
  uint8_t buf[4];
  double v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(double *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0x1000000000;
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2953168);
  v4 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v10 = a2;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEBUG, "[CMResampleAccessoryDeviceMotion] Constructed CMResampleAccessoryDeviceMotion. Set output sample period to: %.4f s", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953168);
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CMResampleAccessoryDeviceMotion::CMResampleAccessoryDeviceMotion(const CLMotionTypeTimestamp)", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  if (a2 < 0.005 || a2 > 0.05)
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953168);
    v5 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v10 = a2;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_ERROR, "[CMResampleAccessoryDeviceMotion] Invalid output sample period: %.4f s", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953168);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "CMResampleAccessoryDeviceMotion::CMResampleAccessoryDeviceMotion(const CLMotionTypeTimestamp)", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  return a1;
}

uint64_t sub_18F3A0324(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  double v4;
  unsigned __int16 *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  _OWORD *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  double v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  double v48;
  double v49;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  float v54;
  float v55;
  float32x2_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  double v71;
  double v72;
  float v73;
  float v74;
  NSObject *v75;
  char *v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  float v89;
  _BYTE v90[22];
  __int16 v91;
  uint64_t v92;
  _BYTE buf[48];
  __int128 v94;
  uint64_t v95;

  result = 0;
  v95 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)a1;
  if (*(double *)a1 >= 0.005 && v4 <= 0.05)
  {
    v6 = (unsigned __int16 *)(a1 + 8);
    v7 = *(unsigned __int16 *)(a1 + 10);
    if (!*(_WORD *)(a1 + 10))
    {
LABEL_15:
      v19 = v6;
      v20 = (_OWORD *)a2;
      goto LABEL_16;
    }
    v8 = *(double *)(a2 + 48);
    v9 = a1 + 16;
    v10 = *(unsigned __int16 *)(a1 + 8);
    v11 = v7 + v10 - 1;
    v12 = *(unsigned int *)(a1 + 12);
    if (v11 >= v12)
      v13 = *(unsigned int *)(a1 + 12);
    else
      v13 = 0;
    if (v8 > *(double *)(v9 + ((v11 - v13) << 6) + 48))
    {
      v14 = *(double *)(v9 + (v10 << 6) + 48);
      v15 = v8 - v14;
      if (v8 - v14 > v4 + 0.1)
      {
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2953168);
        v16 = off_1ECEDEE70;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
        {
          v17 = *(_QWORD *)(v9 + ((unint64_t)*v6 << 6) + 48);
          v18 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)buf = 134218496;
          *(double *)&buf[4] = v15;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v17;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v18;
          _os_log_impl(&dword_18F1DC000, v16, OS_LOG_TYPE_DEBUG, "[CMResampleAccessoryDeviceMotion] Sample too far ahead by: %.6f s, last timestamp: %.6f s, this timestamp: %.6f s", buf, 0x20u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE78 != -1)
            dispatch_once(&qword_1ECEDEE78, &unk_1E2953168);
          v79 = *(_QWORD *)(v9 + ((unint64_t)*v6 << 6) + 48);
          v80 = *(_QWORD *)(a2 + 48);
          *(_DWORD *)v90 = 134218496;
          *(double *)&v90[4] = v15;
          *(_WORD *)&v90[12] = 2048;
          *(_QWORD *)&v90[14] = v79;
          v91 = 2048;
          v92 = v80;
          v81 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "BOOL CMResampleAccessoryDeviceMotion::feedDMData(const InputData &)", "CoreLocation: %s\n", v81);
          if (v81 != buf)
            free(v81);
        }
        *(_DWORD *)v6 = 0;
        goto LABEL_15;
      }
      if (v15 >= v4)
      {
        v43 = v4 + v14;
        if (v4 + v14 >= v8)
          return 1;
        v44 = 1;
        while (1)
        {
          v45 = *(unsigned __int16 *)(a1 + 8) + (unint64_t)*(unsigned __int16 *)(a1 + 10) - 1;
          v46 = *(unsigned int *)(a1 + 12);
          if (v45 < v46)
            v46 = 0;
          v47 = v9 + ((v45 - v46) << 6);
          v48 = *(double *)(v47 + 48);
          if (v43 - v48 < 0.001)
            break;
          v49 = (v43 - v48) / (v8 - v48);
          if (v49 < 0.0 || v49 > 1.0)
          {
            if (qword_1ECEDEE88 != -1)
              dispatch_once(&qword_1ECEDEE88, &unk_1E29548A8);
            v75 = off_1ECEDEE80;
            if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F1DC000, v75, OS_LOG_TYPE_FAULT, "Assertion failed: interpolationRatio >= 0 && interpolationRatio <= 1, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Framework/CoreMotion/Accessory/CMResampleAccessoryDeviceMotion.cpp, line 150,Invalid interpolationRatio..", buf, 2u);
            }
            if (sub_18F1FCA08(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1ECEDEE88 != -1)
                dispatch_once(&qword_1ECEDEE88, &unk_1E29548A8);
              *(_WORD *)v90 = 0;
              v76 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 0, "void CMResampleAccessoryDeviceMotion::interpolate(const InputData &)", "CoreLocation: %s\n", v76);
              if (v76 != buf)
                free(v76);
            }
          }
          v51 = *(unsigned __int16 *)(a1 + 8) + (unint64_t)*(unsigned __int16 *)(a1 + 10) - 1;
          v52 = *(unsigned int *)(a1 + 12);
          if (v51 < v52)
            v52 = 0;
          v53 = v9 + ((v51 - v52) << 6);
          v54 = v49;
          v89 = v54;
          v55 = *(float *)(v53 + 36) + (float)((float)(*(float *)(a2 + 36) - *(float *)(v53 + 36)) * v54);
          v56 = vadd_f32(*(float32x2_t *)(v53 + 28), vmul_n_f32(vsub_f32(*(float32x2_t *)(a2 + 28), *(float32x2_t *)(v53 + 28)), v54));
          sub_18F3D4DE4((float32x4_t *)v53, (float32x4_t *)a2, (float32x4_t *)v90, v54);
          v57 = *(unsigned __int16 *)(a1 + 8) + (unint64_t)*(unsigned __int16 *)(a1 + 10) - 1;
          v58 = *(unsigned int *)(a1 + 12);
          if (v57 < v58)
            v58 = 0;
          v59 = v9 + ((v57 - v58) << 6);
          v60 = *(float *)(v59 + 16) + sub_18F200A14((float *)v59);
          v62 = v61 + *(float *)(v59 + 20);
          v64 = v63 + *(float *)(v59 + 24);
          v67 = v60 + (float)((float)((float)(*(float *)(a2 + 16) + sub_18F200A14((float *)a2)) - v60) * v89);
          v68 = v62 + (float)((float)((float)(v65 + *(float *)(a2 + 20)) - v62) * v89);
          v69 = v64 + (float)((float)((float)(v66 + *(float *)(a2 + 24)) - v64) * v89);
          v70 = sub_18F200A14((float *)v90);
          v71 = *(double *)(v59 + 48);
          v72 = *(double *)(a2 + 48) - v71;
          *(_OWORD *)buf = *(_OWORD *)v90;
          *(float *)&buf[16] = v67 - v70;
          *(float *)&buf[20] = v68 - v73;
          *(float *)&buf[24] = v69 - v74;
          *(float32x2_t *)&buf[28] = v56;
          *(float *)&buf[36] = v55;
          buf[40] = *(_BYTE *)(a2 + 40);
          *(_DWORD *)&buf[44] = *(_DWORD *)(a2 + 44);
          v94 = COERCE_UNSIGNED_INT64(v71 + v72 * v49);
          if ((v44 & 1) != 0)
            *(_DWORD *)v6 = 0;
          sub_18F3A0CF4((unsigned __int16 *)(a1 + 8), buf);
          v44 = 0;
          v43 = v43 + *(double *)a1;
          result = 1;
          if (v43 >= v8)
            return result;
        }
        v77 = *(_OWORD *)(v47 + 16);
        *(_OWORD *)buf = *(_OWORD *)v47;
        *(_OWORD *)&buf[16] = v77;
        v78 = *(_OWORD *)(v47 + 48);
        *(_OWORD *)&buf[32] = *(_OWORD *)(v47 + 32);
        v94 = v78;
        *(_DWORD *)v6 = 0;
        v20 = buf;
        v19 = (unsigned __int16 *)(a1 + 8);
LABEL_16:
        sub_18F3A0CF4(v19, v20);
        return 1;
      }
      if ((_DWORD)v12 == (_DWORD)v7)
      {
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2953168);
        v36 = off_1ECEDEE70;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_ERROR))
        {
          v37 = *(_QWORD *)(a2 + 48);
          v38 = *(unsigned __int16 *)(a1 + 8);
          v39 = *(_QWORD *)(v9 + (v38 << 6) + 48);
          v40 = v38 + *(unsigned __int16 *)(a1 + 10) - 1;
          v41 = *(unsigned int *)(a1 + 12);
          if (v40 < v41)
            v41 = 0;
          v42 = *(_QWORD *)(v9 + ((v40 - v41) << 6) + 48);
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = v37;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v39;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v42;
          _os_log_impl(&dword_18F1DC000, v36, OS_LOG_TYPE_ERROR, "[CMResampleAccessoryDeviceMotion]:[feedDMData] Too many consecutive over-closely spaced sampled received. This suggests an input sampling rate anomaly. Input timestamp: %.4f s, First / last timestamp in the buffer : %.4f s / %.4f s . The resampling will still continue but in a non-ideal rate.", buf, 0x20u);
        }
        if (sub_18F1FCA08(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE78 != -1)
            dispatch_once(&qword_1ECEDEE78, &unk_1E2953168);
          v82 = *(_QWORD *)(a2 + 48);
          v83 = *(unsigned __int16 *)(a1 + 8);
          v84 = *(_QWORD *)(v9 + (v83 << 6) + 48);
          v85 = v83 + *(unsigned __int16 *)(a1 + 10) - 1;
          v86 = *(unsigned int *)(a1 + 12);
          if (v85 < v86)
            v86 = 0;
          v87 = *(_QWORD *)(v9 + ((v85 - v86) << 6) + 48);
          *(_DWORD *)v90 = 134218496;
          *(_QWORD *)&v90[4] = v82;
          *(_WORD *)&v90[12] = 2048;
          *(_QWORD *)&v90[14] = v84;
          v91 = 2048;
          v92 = v87;
          v88 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "BOOL CMResampleAccessoryDeviceMotion::feedDMData(const InputData &)", "CoreLocation: %s\n", v88);
          if (v88 != buf)
            free(v88);
        }
      }
      sub_18F3A0CF4(v6, (_OWORD *)a2);
      return 0;
    }
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953168);
    v21 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_ERROR))
    {
      v22 = *(_QWORD *)(a2 + 48);
      v23 = *(unsigned __int16 *)(a1 + 8);
      v24 = *(_QWORD *)(v9 + (v23 << 6) + 48);
      v25 = v23 + *(unsigned __int16 *)(a1 + 10) - 1;
      v26 = *(unsigned int *)(a1 + 12);
      if (v25 < v26)
        v26 = 0;
      v27 = *(_QWORD *)(v9 + ((v25 - v26) << 6) + 48);
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = v22;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v24;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v27;
      _os_log_impl(&dword_18F1DC000, v21, OS_LOG_TYPE_ERROR, "[CMResampleAccessoryDeviceMotion]:[feedDMData] Invalid backwards or repeated timestamp, rejecting input. Input timestamp: %.4f s, buffer front: %.4f s, buffer back: %.4f s", buf, 0x20u);
    }
    v28 = sub_18F1FCA08(115, 0);
    result = 0;
    if (v28)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953168);
      v29 = *(_QWORD *)(a2 + 48);
      v30 = *(unsigned __int16 *)(a1 + 8);
      v31 = *(_QWORD *)(v9 + (v30 << 6) + 48);
      v32 = v30 + *(unsigned __int16 *)(a1 + 10) - 1;
      v33 = *(unsigned int *)(a1 + 12);
      if (v32 < v33)
        v33 = 0;
      v34 = *(_QWORD *)(v9 + ((v32 - v33) << 6) + 48);
      *(_DWORD *)v90 = 134218496;
      *(_QWORD *)&v90[4] = v29;
      *(_WORD *)&v90[12] = 2048;
      *(_QWORD *)&v90[14] = v31;
      v91 = 2048;
      v92 = v34;
      v35 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "BOOL CMResampleAccessoryDeviceMotion::feedDMData(const InputData &)", "CoreLocation: %s\n", v35);
      if (v35 != buf)
        free(v35);
      return 0;
    }
  }
  return result;
}

unsigned __int16 *sub_18F3A0CF4(unsigned __int16 *result, _OWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  __int128 v5;
  __int128 v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  v4 = &result[32 * (v3 - v2)];
  *(_OWORD *)(v4 + 4) = *a2;
  v6 = a2[1];
  v5 = a2[2];
  *(_OWORD *)(v4 + 28) = a2[3];
  *(_OWORD *)(v4 + 12) = v6;
  *(_OWORD *)(v4 + 20) = v5;
  v7 = result[1];
  v8 = *((unsigned int *)result + 1);
  if (v8 <= v7)
  {
    v9 = *result + 1;
    if (v9 < v8)
      LOWORD(v8) = 0;
    *result = v9 - v8;
  }
  else
  {
    result[1] = v7 + 1;
  }
  return result;
}

uint64_t sub_18F3A0D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onAmbientPressure_, a1, a4, a5);
}

uint64_t sub_18F3A0D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onCompensatedAmbientPressure_, a1, a4, a5);
}

uint64_t sub_18F3A0D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onAccelerometer_, a1, a4, a5);
}

uint64_t sub_18F3A0D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onGyro_, a1, a4, a5);
}

uint64_t sub_18F3A0D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onFactoryGyro_, a1, a4, a5);
}

uint64_t sub_18F3A0DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onFactoryGyroTemperature_, a1, a4, a5);
}

uint64_t sub_18F3A0DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onMagnetometer_, a1, a4, a5);
}

uint64_t sub_18F3A0DBC(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t *, _QWORD);
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = *(uint64_t (**)(uint64_t *, _QWORD))(a2 + 448);
  if (v2)
  {
    v3 = *(_QWORD *)(result + 8);
    v4 = *(_DWORD *)(result + 16);
    v5 = *(_QWORD *)result;
    return v2(&v3, *(_QWORD *)(a2 + 456));
  }
  return result;
}

uint64_t sub_18F3A0E00(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t *, _QWORD);
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = *(uint64_t (**)(uint64_t *, _QWORD))(a2 + 472);
  if (v2)
  {
    v3 = *(_QWORD *)(result + 8);
    v4 = *(_DWORD *)(result + 16);
    v5 = *(_QWORD *)result;
    return v2(&v3, *(_QWORD *)(a2 + 480));
  }
  return result;
}

uint64_t sub_18F3A0E44(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t *, _QWORD);
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = *(uint64_t (**)(uint64_t *, _QWORD))(a2 + 496);
  if (v2)
  {
    v3 = *(_QWORD *)(result + 8);
    v4 = *(_DWORD *)(result + 16);
    v5 = *(_QWORD *)result;
    return v2(&v3, *(_QWORD *)(a2 + 504));
  }
  return result;
}

uint64_t sub_18F3A0E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onDeviceMotionForKeyboardMotion_, a1, a4, a5);
}

void sub_18F3A10E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3A10FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), sel_deallocPrivate, a3, a4, a5);
}

uint64_t sub_18F3A1304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_startAccelerometerUpdatesPrivateToQueue_withHandler_, 0, 0, a5);
}

uint64_t sub_18F3A1388(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_startAccelerometerUpdatesPrivateToQueue_withHandler_, a1[5], a1[6], a5);
}

uint64_t sub_18F3A13F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_stopAccelerometerUpdatesPrivate(*(void **)(a1 + 32), a2, a3, a4, a5);
}

void sub_18F3A1500(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3A168C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_setAmbientPressureUpdateIntervalPrivate_, a3, a4, a5);
}

uint64_t sub_18F3A171C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_startAmbientPressureUpdatesPrivateToQueue_withHandler_, 0, 0, a5);
}

uint64_t sub_18F3A17A0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_startAmbientPressureUpdatesPrivateToQueue_withHandler_, a1[5], a1[6], a5);
}

uint64_t sub_18F3A1810(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_stopAmbientPressureUpdatesPrivate(*(void **)(a1 + 32), a2, a3, a4, a5);
}

void sub_18F3A1B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  sub_18F3D0000((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_18F3A1BE4(uint64_t a1, uint64_t a2)
{
  CMAmbientPressureData *v4;
  double v5;
  double v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[6];

  v4 = [CMAmbientPressureData alloc];
  LODWORD(v5) = *(_DWORD *)(a2 + 8);
  LODWORD(v6) = *(_DWORD *)(a2 + 12);
  v11 = (void *)objc_msgSend_initWithPressure_andTimestamp_(v4, v7, v8, v9, v10, v5, v6, *(double *)a2);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = sub_18F3A1C68;
  v17[3] = &unk_1E2955B60;
  v12 = *(void **)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v17[4] = v11;
  v17[5] = v13;
  objc_msgSend_addOperationWithBlock_(v12, v14, (uint64_t)v17, v15, v16);

}

uint64_t sub_18F3A1C68(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F3A1C7C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

void sub_18F3A1EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void **v44;
  uint64_t v45;

  if (*(char *)(v45 - 73) < 0)
    operator delete(v44[204]);
  if (a44 < 0)
    operator delete(*v44);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F3A1F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_setCompensatedAmbientPressureUpdateIntervalPrivate_, a3, a4, a5);
}

uint64_t sub_18F3A2020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_startCompensatedAmbientPressureUpdatesPrivateToQueue_withHandler_, 0, 0, a5);
}

uint64_t sub_18F3A20A4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_startCompensatedAmbientPressureUpdatesPrivateToQueue_withHandler_, a1[5], a1[6], a5);
}

uint64_t sub_18F3A2114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_stopCompensatedAmbientPressureUpdatesPrivate, a3, a4, a5);
}

void sub_18F3A2324(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sub_18F3A258C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3A27AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_startGyroUpdatesPrivateToQueue_withHandler_, 0, 0, a5);
}

uint64_t sub_18F3A2830(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_startGyroUpdatesPrivateToQueue_withHandler_, a1[5], a1[6], a5);
}

uint64_t sub_18F3A28A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_stopGyroUpdatesPrivate(*(void **)(a1 + 32), a2, a3, a4, a5);
}

void sub_18F3A29B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3A2B20(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  uint64_t v7;

  v6 = (void *)a1[4];
  v7 = objc_msgSend_attitudeReferenceFrame(v6, a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v6, sel_startDeviceMotionUpdatesPrivateUsingReferenceFrame_toQueue_withHandler_, v7, a1[5], a1[6]);
}

void sub_18F3A2D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3A2DC4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  void *v13;
  const char *v14;
  uint64_t v15;

  if (!a2
    || ((v7 = objc_msgSend_objectForKeyedSubscript_(a2, a2, (uint64_t)CFSTR("CMErrorMessage"), a4, a5),
         v11 = (void *)objc_msgSend_objectForKeyedSubscript_(a2, v8, (uint64_t)CFSTR("CMReturnCode"), v9, v10),
         !v7)
      ? (v12 = v11 == 0)
      : (v12 = 1),
        v12 || (objc_msgSend_BOOLValue(v11, a2, a3, a4, a5) & 1) == 0))
  {
    v13 = (void *)objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], a2, a3, a4, a5);
    objc_msgSend_removeItemAtURL_error_(v13, v14, *(_QWORD *)(a1 + 32), 0, v15);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_18F3A2EC8(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CLDeviceMotionProperties *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[7];

  v2 = (void *)sub_18F20CA68();
  v7 = (void *)objc_msgSend_vendor(v2, v3, v4, v5, v6);
  v11 = (void *)objc_msgSend_proxyForService_(v7, v8, (uint64_t)CFSTR("CLGyroCalibrationDatabase"), v9, v10);
  if (objc_msgSend_syncgetWipeDatabase(v11, v12, v13, v14, v15))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 264) = 0x3F847AE147AE147BLL;
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 296) = 19;
    v16 = [CLDeviceMotionProperties alloc];
    v20 = (void *)objc_msgSend_initWithMode_(v16, v17, *(unsigned int *)(*(_QWORD *)(a1 + 32) + 296), v18, v19);
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 256))
    {
      v21 = (_QWORD *)operator new();
      v22 = *(_QWORD *)(a1 + 40);
      *v21 = off_1E294C238;
      v23 = v20;
      *v21 = &off_1E294C350;
      v21[1] = v23;
      v21[2] = sub_18F1FD7A8;
      v21[3] = v22;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 256) = v21;
    }

    v24 = sub_18F1FE420();
    v25 = *(_QWORD *)(a1 + 32);
    v26 = *(_QWORD *)(v25 + 256);
    v27 = *(_QWORD *)(v25 + 264);
    v28 = sub_18F204AE4();
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = sub_18F1F998C;
    v29[3] = &unk_1E2956F80;
    v29[4] = v24;
    v29[5] = v26;
    v29[6] = v27;
    sub_18F1F5E28(v28, (uint64_t)v29);
  }
}

void sub_18F3A300C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3A3110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_setMagnetometerUpdateIntervalPrivate_, a3, a4, a5);
}

uint64_t sub_18F3A321C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_startMagnetometerUpdatesPrivateToQueue_withHandler_, 0, 0, a5);
}

uint64_t sub_18F3A32A0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_startMagnetometerUpdatesPrivateToQueue_withHandler_, a1[5], a1[6], a5);
}

uint64_t sub_18F3A3310(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_stopMagnetometerUpdatesPrivate(*(void **)(a1 + 32), a2, a3, a4, a5);
}

void sub_18F3A34BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3A35D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_setShowsDeviceMovementDisplayPrivate_, *(unsigned __int8 *)(a1 + 40), a4, a5);
}

void sub_18F3A3A4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3A3A70(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_setAccelerometerDataCallback_info_interval_, a1[5], a1[6], a5);
}

uint64_t sub_18F3A3A84(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_setAccelerometerDataCallback_info_interval_, a1[5], a1[6], a5);
}

void sub_18F3A3C64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3A3C88(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_setGyroDataCallback_info_interval_, a1[5], a1[6], a5);
}

uint64_t sub_18F3A3C9C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_setGyroDataCallback_info_interval_, a1[5], a1[6], a5);
}

void sub_18F3A3E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3A3EA0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_setMagnetometerDataCallback_info_interval_, a1[5], a1[6], a5);
}

uint64_t sub_18F3A3EB4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_setMagnetometerDataCallback_info_interval_, a1[5], a1[6], a5);
}

void sub_18F3A3F40(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (_QWORD *)sub_18F1E0F30();
  v6 = 0xE0000FF00;
  v7 = 0;
  sub_18F1E9BC8(v2, (uint64_t)&v6, (uint64_t *)&v8);
  sub_18F346DC8(v1 + 8, &v8);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_18F203148(*(_QWORD *)(v1 + 8), (uint64_t)sub_18F3A3FDC, v1);
}

void sub_18F3A3FDC()
{
  NSObject *v0;
  char *v1;
  uint8_t buf[4];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  IOHIDEventGetVendorDefinedData();
  if (qword_1EE16D430 != -1)
    dispatch_once(&qword_1EE16D430, &unk_1E2956B30);
  v0 = qword_1EE16D420;
  if (os_log_type_enabled((os_log_t)qword_1EE16D420, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v0, OS_LOG_TYPE_FAULT, "Empty payload", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D430 != -1)
      dispatch_once(&qword_1EE16D430, &unk_1E2956B30);
    v1 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "static void CLIspDataVisitor::onOscarData(void *, void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf)
      free(v1);
  }
}

void sub_18F3A4344(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (_QWORD *)sub_18F1E0F30();
  v6 = 0x10000FF0CLL;
  v7 = 0;
  sub_18F1E9BC8(v2, (uint64_t)&v6, (uint64_t *)&v8);
  sub_18F346DC8(v1 + 8, &v8);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_18F203148(*(_QWORD *)(v1 + 8), (uint64_t)sub_18F205EAC, v1);
}

uint64_t sub_18F3A43E0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];

  *(_QWORD *)a1 = &off_1E294A4A0;
  v2 = sub_18F204AE4();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_18F3A447C;
  v4[3] = &unk_1E2955738;
  v4[4] = a1;
  sub_18F1F5E28(v2, (uint64_t)v4);

  sub_18F2A8438(a1 + 40);
  sub_18F2A8438(a1 + 24);
  sub_18F2A8438(a1 + 8);
  return a1;
}

void sub_18F3A447C(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char *v6;
  uint8_t buf[1640];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 32);
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2956B10);
  v2 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "[CLIspDataVisitor] closing HidInterfaces", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2956B10);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual CLIspDataVisitor::~CLIspDataVisitor()_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  sub_18F3A4658(v1 + 1);
  sub_18F3A4658(v1 + 3);
  v3 = (std::__shared_weak_count *)v1[6];
  v1[5] = 0;
  v1[6] = 0;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_18F3A4658(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_18F3A46B8(uint64_t a1)
{
  sub_18F3A43E0(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3A46DC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a2 + 1, 54);
  return result;
}

uint64_t sub_18F3A46F8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2956B10);
  v4 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a2 + 1);
    v6 = *(_QWORD *)(a2 + 9);
    *(_DWORD *)buf = 134218240;
    v10 = v5;
    v11 = 2048;
    v12 = v6;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_INFO, "[CLIspDataVisitor] TimeSync visit machTimestamp,%llu,oscarTimestamp,%llu", buf, 0x16u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2956B10);
    v8 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual void CLIspDataVisitor::visitTimeSync(const CMMotionCoprocessorReply::TimeSync *)", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
  }
  result = *(_QWORD *)(a1 + 64);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, *(_QWORD *)(a2 + 1), *(_QWORD *)(a2 + 9));
  return result;
}

uint64_t sub_18F3A48E4()
{
  return IOHIDEventGetVendorDefinedData();
}

void sub_18F3A4A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  MEMORY[0x194001438](v19, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_18F3A4ACC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 560))
  {
    *(_BYTE *)(v1 + 560) = 0;
    v3 = sub_18F204AE4();
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = sub_18F3A4B40;
    v4[3] = &unk_1E2955938;
    v4[4] = *(_QWORD *)(a1 + 32);
    sub_18F1F6514(v3, (uint64_t)v4);
  }
}

void sub_18F3A4B40(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  _QWORD v28[3];
  _QWORD v29[4];

  v29[3] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v5 + 560))
  {
    *(_BYTE *)(v5 + 560) = 1;
    v28[0] = CFSTR("CMSidebandSensorFusionEnable");
    v6 = a1 + 32;
    v29[0] = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 560), a4, a5);
    v28[1] = CFSTR("CMSidebandSensorFusionLatency");
    v29[1] = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v7, *(unsigned __int8 *)(*(_QWORD *)v6 + 561), v8, v9);
    v28[2] = CFSTR("CMSidebandSensorFusionSnoop");
    v29[2] = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v10, *(unsigned __int8 *)(*(_QWORD *)v6 + 562), v11, v12);
    v27 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v13, (uint64_t)v29, (uint64_t)v28, 3);
    sub_18F3ABE2C("kCLConnectionMessageSidebandSensorFusionEnable", &v27, &v25);
    v23 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessageSync();
    if (v24)
    {
      v16 = (unint64_t *)&v24->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)())v24->__on_zero_shared)();
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v23)
    {
      v18 = (unint64_t *)&v23->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v20 = v26;
    if (v26)
    {
      v21 = (unint64_t *)&v26->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
}

void sub_18F3A4D2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F3A573C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_18F2A8438((uint64_t)&a14);
  sub_18F2A8438((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3A57CC(uint64_t a1, const char *a2)
{
  uint64_t result;

  result = objc_msgSend_setSidebandSensorFusionEnable_measureLatency_withSnoopHandler_(*(void **)(a1 + 32), a2, *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57), *(_QWORD *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = result;
  return result;
}

intptr_t sub_18F3A5808(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = a2;
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = a3;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1[6] + 8) + 40));
}

uint64_t sub_18F3A5830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_18F206F94(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24, (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), a3, a4, a5);
}

uint64_t sub_18F3A5848(uint64_t result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(result + 32) + 568);
  if (v5)
  {
    v6 = result;
    v7 = *(void **)(v5 + 64);
    *(_QWORD *)(v5 + 64) = objc_msgSend_copy(*(void **)(result + 40), a2, a3, a4, a5);

    v8 = *(_QWORD *)(v6 + 32);
    result = *(_QWORD *)(v8 + 568);
    if (!*(_QWORD *)(result + 56) && !*(_QWORD *)(result + 64))
    {
      *(_QWORD *)(v8 + 568) = 0;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t sub_18F3A58C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_setNotificationCallback_info_, 0, 0, a5);
}

uint64_t sub_18F3A596C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  void *v20;
  const char *v21;
  void *v22;
  const char *v23;

  if (!*(_QWORD *)(a1 + 32))
  {
    v18 = (void *)objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v18, v19, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), (uint64_t)CFSTR("CMMotionManager.mm"), 2721, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("queue"));
  }
  if (!*(_QWORD *)(a1 + 48))
  {
    v20 = (void *)objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3, a4, a5);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v20, v21, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), (uint64_t)CFSTR("CMMotionManager.mm"), 2722, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("handler"));
  }
  result = objc_msgSend_isDeviceMotionAvailable(*(void **)(a1 + 40), a2, a3, a4, a5);
  if ((result & 1) == 0)
  {
    v22 = (void *)objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v7, v8, v9, v10);
    result = objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v22, v23, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), (uint64_t)CFSTR("CMMotionManager.mm"), 2724, CFSTR("Device motion is unavailable on this platform"));
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v12 = *(void **)(v11 + 616);
  if (v12 != *(void **)(a1 + 32))
  {

    result = (uint64_t)*(id *)(a1 + 32);
    *(_QWORD *)(v11 + 616) = result;
  }
  v13 = *(void **)(v11 + 608);
  if (v13 != *(void **)(a1 + 48))
  {

    result = objc_msgSend_copy(*(void **)(a1 + 48), v14, v15, v16, v17);
    *(_QWORD *)(v11 + 608) = result;
  }
  return result;
}

void sub_18F3A5AF8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 616);
  if (v2)
  {

    *(_QWORD *)(v1 + 616) = 0;
  }
  v3 = *(void **)(v1 + 608);
  if (v3)
  {

    *(_QWORD *)(v1 + 608) = 0;
  }
}

uint64_t sub_18F3A68A0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F3A6B84(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F3A7574(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, float))(a1[8] + 16))(a1[8], a1[4], a1[5], a1[7], *(float *)(a1[6] + 704));
}

uint64_t sub_18F3A7A88(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F3A7D20(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

uint64_t sub_18F3A7D34(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_18F3A8008(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F3A82E0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F3A8358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_willResignActivePrivate_, *(_QWORD *)(a1 + 40), a4, a5);
}

void sub_18F3A86F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_18F2A8438((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3A8F54(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_startFactoryGyroUpdatesPrivateToQueue_atUpdateInterval_withHandler_residualHandler_, a1[5], a1[6], 0);
}

uint64_t sub_18F3A8FF4(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_startFactoryGyroUpdatesPrivateToQueue_atUpdateInterval_withHandler_residualHandler_, a1[5], a1[6], 0);
}

uint64_t sub_18F3A9094(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_startFactoryGyroUpdatesPrivateToQueue_atUpdateInterval_withHandler_residualHandler_, a1[5], a1[6], a1[7]);
}

uint64_t sub_18F3A9108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_stopFactoryGyroUpdatesPrivate, a3, a4, a5);
}

uint64_t sub_18F3A9198(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_startDeviceMotionUpdatesForKeyboardMotionPrivateToQueue_withGravityDeltaThreshold_notificationFrequency_andHandler_, a1[5], a1[6], a5);
}

uint64_t sub_18F3A920C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_stopDeviceMotionUpdatesForKeyboardMotionPrivate, a3, a4, a5);
}

void sub_18F3AABBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p)
{
  void *v38;

  if (v38)
    operator delete(v38);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3AAD10(uint64_t a1)
{
  return (*(uint64_t (**)(float))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 680) + 16))(0.0);
}

uint64_t sub_18F3AAD2C(uint64_t a1)
{
  return (*(uint64_t (**)(float))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 680) + 16))(0.0);
}

uint64_t sub_18F3AAD48(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_18F3AB3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  MEMORY[0x194001438](v11, 0x81C4018A671A6);
  sub_18F387C84((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_18F3AB86C(float a1, float a2, float a3, float a4, float a5, float a6)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  double result;
  uint64_t v25;
  float v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  float v35;
  float v36[3];
  float v37[3];
  float v38[3];
  float v39;
  float v40;
  float v41;

  v6 = a6;
  v7 = a5;
  v8 = a4;
  v9 = a3;
  v10 = a2;
  v11 = a1;
  v12 = 0;
  v39 = a1;
  v40 = a2;
  v41 = a3;
  v13 = 0.0;
  do
  {
    v13 = v13 + (float)(*(float *)((char *)&v39 + v12) * *(float *)((char *)&v39 + v12));
    v12 += 4;
  }
  while (v12 != 12);
  if (sqrtf(v13) > 0.00000011921)
  {
    v14 = 0;
    v15 = 0.0;
    do
    {
      v15 = v15 + (float)(*(float *)((char *)&v39 + v14) * *(float *)((char *)&v39 + v14));
      v14 += 4;
    }
    while (v14 != 12);
    v16 = sqrtf(v15);
    v11 = v11 / v16;
    v10 = a2 / v16;
    v9 = a3 / v16;
  }
  v17 = 0;
  v39 = a4;
  v40 = a5;
  v18 = 0.0;
  v41 = a6;
  do
  {
    v18 = v18 + (float)(*(float *)((char *)&v39 + v17) * *(float *)((char *)&v39 + v17));
    v17 += 4;
  }
  while (v17 != 12);
  if (sqrtf(v18) > 0.00000011921)
  {
    v19 = 0;
    v20 = 0.0;
    do
    {
      v20 = v20 + (float)(*(float *)((char *)&v39 + v19) * *(float *)((char *)&v39 + v19));
      v19 += 4;
    }
    while (v19 != 12);
    v21 = sqrtf(v20);
    v8 = a4 / v21;
    v7 = a5 / v21;
    v6 = a6 / v21;
  }
  v22 = (float)((float)(v9 * v6) + (float)(v10 * v7)) + (float)(v11 * v8);
  v23 = 1.0;
  if (v22 < 1.0)
  {
    v23 = -1.0;
    if (v22 > -1.0)
      v23 = (float)((float)(v9 * v6) + (float)(v10 * v7)) + (float)(v11 * v8);
  }
  *(float *)&result = acosf(v23);
  if (*(float *)&result < 0.7854)
  {
    v25 = 0;
    v39 = (float)(v10 * v6) - (float)(v9 * v7);
    v40 = (float)(v9 * v8) - (float)(v11 * v6);
    v41 = (float)(v11 * v7) - (float)(v10 * v8);
    v26 = 0.0;
    do
    {
      v26 = v26 + (float)(*(float *)((char *)&v39 + v25) * *(float *)((char *)&v39 + v25));
      v25 += 4;
    }
    while (v25 != 12);
    if (sqrtf(v26) >= 1.0)
      goto LABEL_23;
    v27 = 0;
    v38[0] = (float)(v10 * v6) - (float)(v9 * v7);
    v38[1] = (float)(v9 * v8) - (float)(v11 * v6);
    v28 = 0.0;
    v38[2] = (float)(v11 * v7) - (float)(v10 * v8);
    do
    {
      v28 = v28 + (float)(v38[v27] * v38[v27]);
      ++v27;
    }
    while (v27 != 3);
    v29 = sqrtf(v28);
    v30 = -1.0;
    if (v29 > -1.0)
    {
LABEL_23:
      v31 = 0;
      v37[0] = (float)(v10 * v6) - (float)(v9 * v7);
      v37[1] = (float)(v9 * v8) - (float)(v11 * v6);
      v32 = 0.0;
      v37[2] = (float)(v11 * v7) - (float)(v10 * v8);
      do
      {
        v32 = v32 + (float)(v37[v31] * v37[v31]);
        ++v31;
      }
      while (v31 != 3);
      v33 = sqrtf(v32);
      v30 = 1.0;
      if (v33 < 1.0)
      {
        v34 = 0;
        v36[0] = (float)(v10 * v6) - (float)(v9 * v7);
        v36[1] = (float)(v9 * v8) - (float)(v11 * v6);
        v35 = 0.0;
        v36[2] = (float)(v11 * v7) - (float)(v10 * v8);
        do
        {
          v35 = v35 + (float)(v36[v34] * v36[v34]);
          ++v34;
        }
        while (v34 != 3);
        v30 = sqrtf(v35);
      }
    }
    *(float *)&result = asinf(v30);
  }
  return result;
}

uint64_t sub_18F3ABAE4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 1016) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 1016), a1 + 40, 0);
}

os_log_t sub_18F3ABC34()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Pressure");
  qword_1EE16D6C0 = (uint64_t)result;
  return result;
}

os_log_t sub_18F3ABC60()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "AOP");
  qword_1EE16D420 = (uint64_t)result;
  return result;
}

void sub_18F3ABC8C(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_18F3ABCFC(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *sub_18F3ABCFC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E29528B8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18F3ABD50(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_18F3ABD74(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3ABD98(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_18F3ABDB0(uint64_t a1, uint64_t a2)
{
  if (sub_18F2AB00C(a2, (uint64_t)&unk_1E2948AE8))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_18F3ABDF0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_18F480368(result);
    JUMPOUT(0x194001438);
  }
  return result;
}

_QWORD *sub_18F3ABE2C@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F3ABE8C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F3ABE78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F3ABE8C(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F3ABEEC((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F3ABED8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F3ABEEC(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F3ABF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F3ABF60(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

void *sub_18F3ABF84(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    sub_18F26F97C();
  return operator new(24 * a1);
}

void sub_18F3ABFCC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3ABFF0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_18F3AC008(uint64_t a1, uint64_t a2)
{
  if (sub_18F2AB00C(a2, (uint64_t)&unk_1E2948BB8))
    return a1 + 24;
  else
    return 0;
}

void sub_18F3AC04C(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3AC070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_18F3AC080(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3AC0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_18F3AC124(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ECEDF178);
  _Unwind_Resume(a1);
}

void sub_18F3AC9D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x10A0C40538029D6);
  _Unwind_Resume(a1);
}

void sub_18F3AF050(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x1020C4055877F28);
  _Unwind_Resume(a1);
}

void sub_18F3AF9A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3AF9F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
    return MEMORY[0x1E0DE7D20](a2, sel__feedAccessoryConfig_, result, a4, a5);
  return result;
}

uint64_t sub_18F3AFA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel__feedAccessoryInEarStatus_, a1, a4, a5);
}

uint64_t sub_18F3AFA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__startHeadTracking, a3, a4, a5);
}

void sub_18F3B02A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3B02F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
    return MEMORY[0x1E0DE7D20](a2, sel__feedSourceDeviceIMU_, result, a4, a5);
  return result;
}

uint64_t sub_18F3B0308(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
    return MEMORY[0x1E0DE7D20](a2, sel__feedAccessoryDeviceMotion_, result, a4, a5);
  return result;
}

uint64_t sub_18F3B031C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v7;
  uint64_t *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int *v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v24;
  int v25;
  uint64_t v26;
  double *v27;
  double v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  double *v33;
  double v34;

  v7 = *(_BYTE **)(a1 + 32);
  if (v7[505])
  {
    objc_sync_enter(*(id *)(a1 + 32));
    v8 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 648);
    v13 = (int *)objc_msgSend_motionActivity(a2, v9, v10, v11, v12);
    sub_18F3648DC(v8, v13);
    objc_sync_exit(v7);
  }
  v14 = (int *)objc_msgSend_motionActivity(a2, (const char *)a2, a3, a4, a5);
  v15 = *v14;
  v16 = *(void **)(a1 + 32);
  objc_sync_enter(v16);
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (!v14[2])
    sub_18F48DCD8(v17 + 5216, (uint64_t)v14);
  sub_18F466468(*(_QWORD *)(v17 + 37488), v14);
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(v18 + 240);
  if (v19)
  {
    v20 = *(_DWORD *)(v18 + 264);
    if ((v20 > 0xB || ((1 << v20) & 0xC06) == 0) && v15 <= 0xB && ((1 << v15) & 0xC06) != 0)
    {
      sub_18F4084AC((double *)(v19 + 32), CFSTR("staticActivityStateDuration"));
      v18 = *(_QWORD *)(a1 + 32);
      v20 = *(_DWORD *)(v18 + 264);
    }
    v24 = v20 > 0xB || ((1 << v20) & 0xC06) == 0;
    if (!v24 && (v15 > 0xB || ((1 << v15) & 0xC06) == 0))
    {
      sub_18F408688((double *)(*(_QWORD *)(v18 + 240) + 32), CFSTR("staticActivityStateDuration"));
      v18 = *(_QWORD *)(a1 + 32);
      v20 = *(_DWORD *)(v18 + 264);
    }
    if (v20 > 51)
    {
      if (v20 == 52 || v20 == 56)
        goto LABEL_40;
    }
    else
    {
      if (!v20)
        goto LABEL_30;
      if (v20 == 5)
        goto LABEL_40;
    }
    if ((v20 & 0xFFFFFFFE) == 0xA)
      goto LABEL_40;
LABEL_30:
    if (v15 > 51)
    {
      if (v15 != 52 && v15 != 56)
        goto LABEL_37;
    }
    else
    {
      if (!v15)
        goto LABEL_40;
      if (v15 != 5)
      {
LABEL_37:
        if ((v15 & 0xFFFFFFFE) != 0xA)
          goto LABEL_40;
      }
    }
    sub_18F4084AC((double *)(*(_QWORD *)(v18 + 240) + 48), CFSTR("vehicularActivityStateDuration"));
    v18 = *(_QWORD *)(a1 + 32);
    if (!*(_BYTE *)(*(_QWORD *)(v18 + 8) + 16056))
    {
      sub_18F4084AC((double *)(*(_QWORD *)(v18 + 240) + 80), CFSTR("inVehicle2IMUDuration"));
      v18 = *(_QWORD *)(a1 + 32);
    }
LABEL_40:
    v25 = *(_DWORD *)(v18 + 264);
    if (v25 > 51)
    {
      if (v25 == 52 || v25 == 56)
        goto LABEL_47;
    }
    else
    {
      if (!v25)
        goto LABEL_58;
      if (v25 == 5)
      {
LABEL_47:
        if (v15 > 51)
        {
          if (v15 == 52 || v15 == 56)
            goto LABEL_58;
        }
        else
        {
          if (!v15)
          {
LABEL_54:
            sub_18F408688((double *)(*(_QWORD *)(v18 + 240) + 48), CFSTR("vehicularActivityStateDuration"));
            v18 = *(_QWORD *)(a1 + 32);
            v26 = *(_QWORD *)(v18 + 240);
            if (*(double *)(v26 + 80) > 0.0)
            {
              sub_18F408688((double *)(v26 + 80), &stru_1E295ADC8);
              v18 = *(_QWORD *)(a1 + 32);
              v26 = *(_QWORD *)(v18 + 240);
            }
            v28 = *(double *)(v26 + 160);
            v27 = (double *)(v26 + 160);
            if (v28 > 0.0)
            {
              sub_18F408688(v27, &stru_1E295ADC8);
              v18 = *(_QWORD *)(a1 + 32);
            }
            goto LABEL_58;
          }
          if (v15 == 5)
          {
LABEL_58:
            v29 = *(_DWORD *)(v18 + 264);
            if ((v29 > 0x29 || ((1 << v29) & 0x20000000110) == 0)
              && v15 <= 0x29
              && ((1 << v15) & 0x20000000110) != 0)
            {
              sub_18F4084AC((double *)(*(_QWORD *)(v18 + 240) + 64), CFSTR("pedestrianActivityStateDuration"));
              v18 = *(_QWORD *)(a1 + 32);
              if (!*(_BYTE *)(*(_QWORD *)(v18 + 8) + 16056))
              {
                sub_18F4084AC((double *)(*(_QWORD *)(v18 + 240) + 96), CFSTR("srcPedestrian2IMUDuration"));
                v18 = *(_QWORD *)(a1 + 32);
              }
            }
            v30 = *(_DWORD *)(v18 + 264);
            if (v30 <= 0x29
              && ((1 << v30) & 0x20000000110) != 0
              && (v15 > 0x29 || ((1 << v15) & 0x20000000110) == 0))
            {
              sub_18F408688((double *)(*(_QWORD *)(v18 + 240) + 64), CFSTR("pedestrianActivityStateDuration"));
              v18 = *(_QWORD *)(a1 + 32);
              v32 = *(_QWORD *)(v18 + 240);
              if (*(double *)(v32 + 96) > 0.0)
              {
                sub_18F408688((double *)(v32 + 96), &stru_1E295ADC8);
                v18 = *(_QWORD *)(a1 + 32);
                v32 = *(_QWORD *)(v18 + 240);
              }
              v34 = *(double *)(v32 + 176);
              v33 = (double *)(v32 + 176);
              if (v34 > 0.0)
              {
                sub_18F408688(v33, &stru_1E295ADC8);
                v18 = *(_QWORD *)(a1 + 32);
              }
            }
            *(_DWORD *)(v18 + 264) = v15;
            return objc_sync_exit(v16);
          }
        }
        if ((v15 & 0xFFFFFFFE) != 0xA)
          goto LABEL_54;
        goto LABEL_58;
      }
    }
    if ((v25 & 0xFFFFFFFE) != 0xA)
      goto LABEL_58;
    goto LABEL_47;
  }
  return objc_sync_exit(v16);
}

void sub_18F3B071C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F3B079C(uint64_t a1)
{
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;

  v2 = mach_continuous_time();
  v3 = sub_18F1FD20C(v2);
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v5 + 505))
  {
    sub_18F3644AC(*(uint64_t **)(v5 + 648), v3);
    v5 = *(_QWORD *)(a1 + 32);
  }
  v6 = *(_QWORD *)(v5 + 8);
  sub_18F3FF75C(v6);
  sub_18F465704(*(_QWORD *)(v6 + 37488), (unint64_t)(v4 * 1000000.0));
}

void sub_18F3B1628(uint64_t a1, int a2)
{
  NSObject *v3;
  const char *v4;
  char *v5;
  uint8_t buf[4];
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a2)
    *(_DWORD *)(a1 + 16) = 0;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E29531A8);
  v3 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
  {
    v4 = "No";
    if (a2)
      v4 = "Yes";
    *(_DWORD *)buf = 136315138;
    v7 = v4;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_INFO, "[RelDM] Resetting UnTimesyncedAuxSampleHelper. Clearing buffer: %s", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E29531A8);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMRelDM::UnTimesyncedAuxSampleHelper::reset(BOOL)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
}

void sub_18F3B1C4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3B1C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__stopHeadTracking, a3, a4, a5);
}

uint64_t sub_18F3B3624(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend__feedAdaptiveLatencyJitterBufferLevel(*(void **)(a1 + 32), a2, a3, a4, a5);
}

void sub_18F3B368C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  NSObject *v7;
  _QWORD v8[6];
  _QWORD v9[3];
  int v10;

  objc_msgSend__stopJitterBufferLevelRetryTimer(*(void **)(a1 + 32), a2, a3, a4, a5);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 672) = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, MEMORY[0x1E0C80D38]);
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2020000000;
  v10 = 5;
  dispatch_source_set_timer(*(dispatch_source_t *)(*(_QWORD *)(a1 + 32) + 672), 0, 0x3B9ACA00uLL, 0x3B9ACA00uLL);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(NSObject **)(v6 + 672);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_18F3B3770;
  v8[3] = &unk_1E2956C30;
  v8[4] = v6;
  v8[5] = v9;
  dispatch_source_set_event_handler(v7, v8);
  dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 672));
  _Block_object_dispose(v9, 8);
}

void sub_18F3B3770(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v6;
  int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  uint8_t *v14;
  char *v15;
  uint8_t buf[4];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  objc_msgSend__feedAdaptiveLatencyJitterBufferLevel(*(void **)(a1 + 32), a2, a3, a4, a5);
  if (*(__int16 *)(*(_QWORD *)(a1 + 32) + 680) != -1)
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E29531A8);
    v6 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 680);
      *(_DWORD *)buf = 67240192;
      LODWORD(v17) = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEFAULT, "[CMMediaSession] Initial JBL: %{public}d", buf, 8u);
    }
    if (!sub_18F1FCA08(115, 2))
      goto LABEL_7;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E29531A8);
    v14 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMMediaSession _startJitterBufferLevelRetryTimer]_block_invoke", "CoreLocation: %s\n");
LABEL_26:
    if (v14 != buf)
      free(v14);
LABEL_7:
    objc_msgSend__stopJitterBufferLevelRetryTimer(*(void **)(a1 + 32), v8, v9, v10, v11);
    return;
  }
  if (*(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) < 1)
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E29531A8);
    v13 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_ERROR, "[CMMediaSession] Failed to feed initial JBL value", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
      goto LABEL_7;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E29531A8);
    v14 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMMediaSession _startJitterBufferLevelRetryTimer]_block_invoke", "CoreLocation: %s\n");
    goto LABEL_26;
  }
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E29531A8);
  v12 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    v17 = 0x3FF0000000000000;
    _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_DEFAULT, "[CMMediaSession] Failed to feed initial JBL value, retrying in %{public}.1f sec", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E29531A8);
    v15 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMMediaSession _startJitterBufferLevelRetryTimer]_block_invoke", "CoreLocation: %s\n", v15);
    if (v15 != (char *)buf)
      free(v15);
  }
  --*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
}

void sub_18F3B44EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3B452C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48));
}

uint64_t sub_18F3B4540(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48));
}

void sub_18F3B47F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F3B59EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F3B5CFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F3B9D28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F3BA854(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F3BAC64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F3BB16C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3BB188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__startHeadTracking, a3, a4, a5);
}

uint64_t sub_18F3BB190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__stopHeadTracking, a3, a4, a5);
}

uint64_t sub_18F3BB1F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  char *v23;
  uint8_t buf[1640];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = sub_18F4317A8();
  *(_WORD *)(*(_QWORD *)(a1 + 32) + 680) = sub_18F4A2C38(v2);
  v3 = mach_continuous_time();
  v7 = sub_18F1FD20C(v3);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(unsigned __int16 *)(v9 + 680);
  if (v10 != 0xFFFF)
  {
    v11 = *(_QWORD *)(v9 + 8);
    if (v11)
    {
      sub_18F44CC08(v11, v10, *(unsigned __int16 *)(v9 + 682), (unint64_t)(v7 * 1000000.0));
      v9 = *(_QWORD *)(a1 + 32);
    }
    v12 = *(_QWORD *)(v9 + 240);
    if (v12)
    {
      LOWORD(v7) = *(_WORD *)(v9 + 680);
      v13 = (double)*(unint64_t *)&v7;
      v14 = *(double *)(v12 + 792);
      if (v14 <= v13)
        v14 = v13;
      *(double *)(v12 + 792) = v14;
      v15 = *(double *)(v12 + 784);
      if (v15 >= v13)
        v15 = v13;
      *(double *)(v12 + 784) = v15;
      *(double *)(v12 + 800) = *(double *)(v12 + 800) + v13;
      ++*(_DWORD *)(v12 + 808);
      sub_18F34B2A4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 240), (const char *)*(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 680), v4, v5, v6);
      v16 = *(_QWORD *)(a1 + 32);
      if (*(unsigned __int16 *)(v16 + 680) > *(unsigned __int16 *)(v16 + 682))
      {
        v17 = *(_QWORD *)(v16 + 240);
        v18 = *(_DWORD *)(v17 + 1292);
        if (v18 != -1)
          *(_DWORD *)(v17 + 1292) = v18 + 1;
      }
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E29531A8);
      v19 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v19, OS_LOG_TYPE_INFO, "[CMMediaSession] log JBL CA metric", buf, 2u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E29531A8);
        v23 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "-[CMMediaSession _feedAdaptiveLatencyJitterBufferLevel]_block_invoke", "CoreLocation: %s\n", v23);
        if (v23 != (char *)buf)
          free(v23);
      }
    }
  }
  v20 = *(void **)(a1 + 32);
  objc_sync_enter(v20);
  v21 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v21 + 505))
    sub_18F365718(*(uint64_t **)(v21 + 648), *(unsigned __int16 *)(v21 + 680), *(unsigned __int16 *)(v21 + 682), v8);
  return objc_sync_exit(v20);
}

void sub_18F3BB49C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18F3BBAD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F3BBDF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_log_t sub_18F3BBF90()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1EE16D820 = (uint64_t)result;
  return result;
}

uint64_t sub_18F3BBFBC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_18F44C264(result);
    JUMPOUT(0x194001438);
  }
  return result;
}

void sub_18F3BBFFC(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3BC020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_18F3BC02C(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[189];
  if (v2)
  {
    a1[190] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[183];
  if (v3)
  {
    a1[184] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3BC07C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F3BC0F0;
  block[3] = &unk_1E2955938;
  block[4] = a1;
  if (qword_1EE16EA00 != -1)
    dispatch_once(&qword_1EE16EA00, block);
  return qword_1EE16E9F8;
}

uint64_t sub_18F3BC0F0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)operator new();
  result = sub_18F497858((uint64_t)v2, "CLGyroCalibrationDatabase", *(void **)(a1 + 32));
  *v2 = &off_1E294B580;
  qword_1EE16E9F8 = (uint64_t)v2;
  return result;
}

void sub_18F3BC14C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x10B3C406D655BBCLL);
  _Unwind_Resume(a1);
}

void sub_18F3BC174(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_18F4978F0(a1, a2, a3, a4, a5);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3BC198(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t **v4;
  _QWORD *v5;
  int *v7;
  _QWORD v8[2];
  uint64_t *v9;
  _DWORD *v10;

  if (*(_BYTE *)(a1 + 108))
    return 0xFFFFFFFFLL;
  v7 = (int *)v8;
  v8[0] = 0;
  v8[1] = 0;
  v9 = a2;
  v3 = (unsigned int *)(a1 + 104);
  ++*(_DWORD *)(a1 + 104);
  v10 = (_DWORD *)(a1 + 104);
  v4 = sub_18F3BE50C((uint64_t **)(a1 + 80), (int *)(a1 + 104), (uint64_t)&unk_18F506652, &v10);
  if (v4 + 5 != (uint64_t **)&v7)
    sub_18F3BE7C4(v4 + 5, v7, (int *)v8);
  v5 = (_QWORD *)v8[0];
  v4[8] = v9;
  v2 = *v3;
  sub_18F3BEA38((uint64_t)&v7, v5);
  return v2;
}

void sub_18F3BC248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_18F3BEA38((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_18F3BC260(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  int v14[2];
  _QWORD *v15;
  __int16 v16;
  int v17;
  uint8_t buf[4];
  _QWORD *v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v14[0] = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_18F3BEB30(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_1EE16D448 != -1)
        dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
      v10 = qword_1EE16D440;
      if (os_log_type_enabled((os_log_t)qword_1EE16D440, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v19 = v11;
        v20 = 1026;
        v21 = a2;
        _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D448 != -1)
          dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v14[1] = 136446466;
        v15 = v12;
        v16 = 1026;
        v17 = a2;
        v13 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "CoreLocation: %s\n", v13);
        if (v13 != (char *)buf)
          free(v13);
      }
    }
  }
}

uint64_t sub_18F3BC4D4(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v7;
  int v9;
  int v10;

  v7 = sub_18F3BEFC4(a4);
  if (v7)
  {
    v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_18F3BC554(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_18F3BC580(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_18F3BC5AC(uint64_t a1, int a2)
{
  int v3;

  v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, &v3);
}

uint64_t sub_18F3BC5DC(uint64_t a1)
{
  uint64_t result;
  CLNotifierServiceAdapter *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  result = *(_QWORD *)(a1 + 48);
  if (!result)
  {
    v3 = objc_alloc_init(CLNotifierServiceAdapter);
    *(_QWORD *)(a1 + 48) = v3;
    objc_msgSend_setValid_(v3, v4, 1, v5, v6);
    objc_msgSend_setAdaptedNotifier_(*(void **)(a1 + 48), v7, a1, v8, v9);
    return *(_QWORD *)(a1 + 48);
  }
  return result;
}

uint64_t sub_18F3BC628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1EE16DE60);
}

uint64_t sub_18F3BC63C(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  void *v36;
  _QWORD *v37;
  char *v38;
  int v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _OWORD buf[102];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_18F3BFD00((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_18F506652, (_DWORD **)buf) + 32) = v35;
        memset(buf, 0, 320);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          v36 = (void *)sub_18F3BFA2C(buf);
          sub_18F3BFAC4(a1, (uint64_t)v42, (uint64_t)&v40, v36);
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1EE16DE61;
        v39 = v17;
        *(_QWORD *)&buf[0] = &v39;
        *((_BYTE *)sub_18F3BFBA0((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_18F506652, (_DWORD **)buf) + 80) = v30;
        v39 = *a3;
        *(_QWORD *)&buf[0] = &v39;
        v31 = sub_18F3BFBA0((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_18F506652, (_DWORD **)buf);
        sub_18F3A4658(v31 + 8);
        v32 = *a4;
        v39 = *a3;
        *(_QWORD *)&buf[0] = &v39;
        v33 = sub_18F3BFBA0((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_18F506652, (_DWORD **)buf);
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_18F3BFD00(v33 + 5, &v41, (uint64_t)&unk_18F506652, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_18F3C07FC((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1EE16D448 != -1)
    dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
  v14 = qword_1EE16D440;
  if (os_log_type_enabled((os_log_t)qword_1EE16D440, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    LODWORD(buf[0]) = 136446466;
    *(_QWORD *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl(&dword_18F1DC000, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  v16 = sub_18F1FCA08(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D448 != -1)
      dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
    v37 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v37 = (_QWORD *)*v37;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v37;
    v43 = 1026;
    v44 = a2;
    v38 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "CoreLocation: %s\n", v38);
    if (v38 != (char *)buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_18F3BCAC4(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  int v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  char *v22;
  uint8_t buf[4];
  _QWORD *v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1EE16D448 != -1)
      dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
    v10 = qword_1EE16D440;
    if (os_log_type_enabled((os_log_t)qword_1EE16D440, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v24 = v11;
      v25 = 1026;
      v26 = a2;
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist", buf, 0x12u);
    }
    v12 = sub_18F1FCA08(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D448 != -1)
        dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
      v22 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "CoreLocation: %s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
      return 0;
    }
  }
  return result;
}

BOOL sub_18F3BCD44(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  _BYTE *v30;
  char *v31;
  int v32;
  _BYTE buf[12];
  __int16 v34;
  void **v35;
  char v36;
  int v37;
  _QWORD *v38;
  __int16 v39;
  _BYTE *v40;
  void *__p[2];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v32 = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_18F3C08B4((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_18F3C08B4((uint64_t)(v22 + 40), &v32);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1EE16D448 != -1)
                dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
              v26 = qword_1EE16D440;
              if (os_log_type_enabled((os_log_t)qword_1EE16D440, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v34 = 2082;
                v35 = v28;
                _os_log_impl(&dword_18F1DC000, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0)
                  operator delete(__p[0]);
              }
              if (sub_18F1FCA08(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1EE16D448 != -1)
                  dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0)
                  v30 = buf;
                else
                  v30 = *(_BYTE **)buf;
                v37 = 136446466;
                v38 = v29;
                v39 = 2082;
                v40 = v30;
                v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0)
                  operator delete(*(void **)buf);
                sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "CoreLocation: %s\n", v31);
                if (v31 != (char *)__p)
                  free(v31);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

void sub_18F3BD0CC(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;

  v4 = *(_QWORD *)(a1 + 64);
  v2 = a1 + 64;
  v3 = v4;
  if (v4)
  {
    v5 = *a2;
    v6 = v2;
    do
    {
      v7 = *(_DWORD *)(v3 + 32);
      v8 = v7 < v5;
      if (v7 >= v5)
        v9 = (uint64_t *)v3;
      else
        v9 = (uint64_t *)(v3 + 8);
      if (!v8)
        v6 = v3;
      v3 = *v9;
    }
    while (*v9);
    if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32))
      sub_18F3A4658((_QWORD *)(v6 + 64));
  }
}

uint64_t sub_18F3BD118(uint64_t a1, int *a2, void *__dst)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  const void *v11;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(const void **)(v7 + 64);
  if (!v11)
    return 0;
  memcpy(__dst, v11, 0x140uLL);
  return 1;
}

uint64_t sub_18F3BD188(uint64_t a1, int *a2, const void *a3)
{
  _QWORD *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;
  __int128 v13;
  int *v14;

  v6 = operator new(0x158uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E29526F8;
  memcpy(v6 + 3, a3, 0x140uLL);
  *(_QWORD *)&v13 = v6 + 3;
  *((_QWORD *)&v13 + 1) = v6;
  v12 = *a2;
  v14 = &v12;
  v7 = sub_18F3BFBA0((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_18F506652, &v14);
  sub_18F346DC8((uint64_t)(v7 + 8), &v13);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 1;
}

void sub_18F3BD26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F2A8438((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3BD280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v5[20];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_18F3BD314(uint64_t a1, unsigned int *a2, const void *a3, int a4, int a5)
{
  NSObject *v10;
  NSObject *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  __n128 *v14;
  __n128 *v15;
  signed __int32 v16;
  __n128 *v17;
  signed __int32 v18;
  BOOL v19;
  __n128 **v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  uint64_t *v43;
  NSObject *v44;
  _QWORD *v45;
  _BYTE *v46;
  _QWORD *v47;
  void **v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  BOOL v56;
  uint64_t *v57;
  void *__p[2];
  char v59;
  uint64_t v60;
  uint64_t v61;
  os_activity_scope_state_s state;
  _BYTE buf[28];
  __int16 v64;
  _QWORD *v65;
  __int16 v66;
  std::__shared_weak_count *v67;
  _BYTE v68[32];
  std::__shared_weak_count *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 108))
  {
    v10 = _os_activity_create(&dword_18F1DC000, "CL: notifyClientsWithData (Fallback)", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v10, &state);

    if (qword_1EE16D448 != -1)
      dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
    v11 = qword_1EE16D440;
    if (os_log_type_enabled((os_log_t)qword_1EE16D440, OS_LOG_TYPE_DEBUG))
    {
      v12 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v12 = (_QWORD *)*v12;
      v13 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "activity";
      v64 = 2082;
      v65 = v12;
      v66 = 2050;
      v67 = v13;
      _os_log_impl(&dword_18F1DC000, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v15 = (__n128 *)(a1 + 64);
    v14 = *(__n128 **)(a1 + 64);
    if (!v14)
      goto LABEL_18;
    v16 = *a2;
    v17 = (__n128 *)(a1 + 64);
    do
    {
      v18 = v14[2].n128_i32[0];
      v19 = v18 < v16;
      if (v18 >= v16)
        v20 = (__n128 **)v14;
      else
        v20 = (__n128 **)&v14->n128_u64[1];
      if (!v19)
        v17 = v14;
      v14 = *v20;
    }
    while (*v20);
    if (v17 == v15 || v16 < (signed __int32)v17[2].n128_u32[0])
    {
LABEL_18:
      *(_QWORD *)v68 = &v68[8];
      memset(&v68[8], 0, 24);
      v69 = 0;
      sub_18F3C0F58((uint64_t)buf, a2, (uint64_t)v68);
      v17 = sub_18F3C0E18((uint64_t **)(a1 + 56), (__n128 *)buf);
      v21 = v67;
      if (v67)
      {
        p_shared_owners = (unint64_t *)&v67->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_18F3BEA38((uint64_t)&buf[8], *(_QWORD **)&buf[16]);
      v24 = v69;
      if (v69)
      {
        v25 = (unint64_t *)&v69->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      sub_18F3BEA38((uint64_t)v68, *(_QWORD **)&v68[8]);
    }
    if (a4)
    {
      v27 = operator new(0x158uLL);
      v27[1] = 0;
      v27[2] = 0;
      *v27 = &off_1E29526F8;
      memcpy(v27 + 3, a3, 0x140uLL);
      *(_QWORD *)buf = v27 + 3;
      *(_QWORD *)&buf[8] = v27;
      sub_18F346DC8((uint64_t)&v17[4], (__int128 *)buf);
      v28 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v29 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    else
    {
      sub_18F3A4658((__n128 *)v17[4].n128_u64);
    }
    if (!v17[3].n128_u64[1])
      goto LABEL_83;
    v31 = (void *)sub_18F3C09AC(a3);
    if (a5 == -1)
    {
      sub_18F3C0A44(a1, (int *)a2, v31);
    }
    else
    {
      v32 = a1 + 88;
      v33 = *(_QWORD *)(a1 + 88);
      if (!v33)
        goto LABEL_48;
      v34 = a1 + 88;
      do
      {
        v35 = *(_DWORD *)(v33 + 32);
        v36 = v35 < a5;
        if (v35 >= a5)
          v37 = (uint64_t *)v33;
        else
          v37 = (uint64_t *)(v33 + 8);
        if (!v36)
          v34 = v33;
        v33 = *v37;
      }
      while (*v37);
      if (v34 == v32 || *(_DWORD *)(v34 + 32) > a5)
LABEL_48:
        v34 = a1 + 88;
      v61 = v34;
      v38 = v15->n128_u64[0];
      if (!v15->n128_u64[0])
        goto LABEL_59;
      v39 = *a2;
      v40 = a1 + 64;
      do
      {
        v41 = *(_DWORD *)(v38 + 32);
        v42 = v41 < v39;
        if (v41 >= v39)
          v43 = (uint64_t *)v38;
        else
          v43 = (uint64_t *)(v38 + 8);
        if (!v42)
          v40 = v38;
        v38 = *v43;
      }
      while (*v43);
      if ((__n128 *)v40 == v15 || v39 < *(_DWORD *)(v40 + 32))
      {
LABEL_59:
        v60 = a1 + 64;
LABEL_60:
        if (qword_1EE16D448 != -1)
          dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
        v44 = qword_1EE16D440;
        if (os_log_type_enabled((os_log_t)qword_1EE16D440, OS_LOG_TYPE_DEBUG))
        {
          v45 = (_QWORD *)(a1 + 8);
          if (*(char *)(a1 + 31) < 0)
            v45 = (_QWORD *)*v45;
          (*(void (**)(_BYTE *__return_ptr, uint64_t, unsigned int *))(*(_QWORD *)a1 + 160))(v68, a1, a2);
          if (v68[23] >= 0)
            v46 = v68;
          else
            v46 = *(_BYTE **)v68;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v45;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = a5;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v46;
          _os_log_impl(&dword_18F1DC000, v44, OS_LOG_TYPE_DEBUG, "%s; client %d has deregistered, not notifying %s",
            buf,
            0x1Cu);
          if ((v68[23] & 0x80000000) != 0)
            operator delete(*(void **)v68);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D448 != -1)
            dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
          v47 = (_QWORD *)(a1 + 8);
          if (*(char *)(a1 + 31) < 0)
            v47 = (_QWORD *)*v47;
          (*(void (**)(void **__return_ptr, uint64_t, unsigned int *))(*(_QWORD *)a1 + 160))(__p, a1, a2);
          if (v59 >= 0)
            v48 = __p;
          else
            v48 = (void **)__p[0];
          *(_DWORD *)v68 = 136315650;
          *(_QWORD *)&v68[4] = v47;
          *(_WORD *)&v68[12] = 1024;
          *(_DWORD *)&v68[14] = a5;
          *(_WORD *)&v68[18] = 2080;
          *(_QWORD *)&v68[20] = v48;
          v49 = (char *)_os_log_send_and_compose_impl();
          if (v59 < 0)
            operator delete(__p[0]);
          sub_18F419700("Generic", 1, 0, 2, "virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, BOOL, int, BOOL) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "CoreLocation: %s\n", v49);
          if (v49 != buf)
            free(v49);
        }
        goto LABEL_83;
      }
      v60 = v40;
      if (v34 == v32)
        goto LABEL_60;
      v52 = *(_QWORD *)(v40 + 48);
      v50 = v40 + 48;
      v51 = v52;
      if (!v52)
        goto LABEL_60;
      v53 = *(_DWORD *)(v34 + 32);
      v54 = v50;
      do
      {
        v55 = *(_DWORD *)(v51 + 28);
        v56 = v55 < v53;
        if (v55 >= v53)
          v57 = (uint64_t *)v51;
        else
          v57 = (uint64_t *)(v51 + 8);
        if (!v56)
          v54 = v51;
        v51 = *v57;
      }
      while (*v57);
      if (v54 == v50 || v53 < *(_DWORD *)(v54 + 28))
        goto LABEL_60;
      sub_18F3BFAC4(a1, (uint64_t)&v61, (uint64_t)&v60, v31);
    }
LABEL_83:
    os_activity_scope_leave(&state);
  }
}

void sub_18F3BD954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3BD9A0()
{
  return 1;
}

uint64_t sub_18F3BD9A8()
{
  return 1;
}

uint64_t sub_18F3BD9B4()
{
  return 1;
}

void sub_18F3BD9BC(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  char *v4;
  NSObject *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  int v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  uint8_t buf[4];
  _QWORD *v22;
  __int16 v23;
  _QWORD v24[204];

  *(_QWORD *)((char *)&v24[202] + 2) = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1EE16D448 != -1)
      dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
    v2 = qword_1EE16D440;
    if (os_log_type_enabled((os_log_t)qword_1EE16D440, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v22 = v3;
      _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D448 != -1)
        dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
      v4 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::listClients() [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  else
  {
    if (qword_1EE16D448 != -1)
      dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
    v5 = qword_1EE16D440;
    if (os_log_type_enabled((os_log_t)qword_1EE16D440, OS_LOG_TYPE_DEBUG))
    {
      v6 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v6 = (_QWORD *)*v6;
      v7 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v22 = v6;
      v23 = 2048;
      v24[0] = v7;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D448 != -1)
        dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
      v20 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::listClients() [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "CoreLocation: %s\n", v20);
      if (v20 != (char *)buf)
        free(v20);
    }
    v8 = *(_QWORD **)(a1 + 80);
    if (v8 != (_QWORD *)(a1 + 88))
    {
      do
      {
        v9 = (_QWORD *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_1EE16D448 != -1)
              dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
            v10 = qword_1EE16D440;
            if (os_log_type_enabled((os_log_t)qword_1EE16D440, OS_LOG_TYPE_DEBUG))
            {
              v11 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v11 = *(_QWORD **)(a1 + 8);
              v12 = *((_DWORD *)v8 + 8);
              v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)buf = 136315650;
              v22 = v11;
              v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_18F1FCA08(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE16D448 != -1)
                dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
              v17 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 2, "virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::listClients() [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "CoreLocation: %s\n", v17);
              if (v17 != (char *)buf)
                free(v17);
            }
            v14 = (_QWORD *)v9[1];
            if (v14)
            {
              do
              {
                v15 = v14;
                v14 = (_QWORD *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                v15 = (_QWORD *)v9[2];
                v16 = *v15 == (_QWORD)v9;
                v9 = v15;
              }
              while (!v16);
            }
            v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        v18 = (_QWORD *)v8[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v8[2];
            v16 = *v19 == (_QWORD)v8;
            v8 = v19;
          }
          while (!v16);
        }
        v8 = v19;
      }
      while (v19 != (_QWORD *)(a1 + 88));
    }
  }
}

BOOL sub_18F3BDF64(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  int v8;
  _BYTE v9[320];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v6 = sub_18F45BBD8(a1, a2, a3, a4, a5);
  if (v6 && (*(unsigned int (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 216))(a1, v9))
  {
    v8 = 0;
    (*(void (**)(uint64_t, int *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v8, v9, 0, 0xFFFFFFFFLL, 0);
  }
  return v6 != 0;
}

BOOL sub_18F3BE024(uint64_t a1, void *a2)
{
  CFRunLoopRef Current;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *global_queue;
  dispatch_time_t v11;
  intptr_t v12;
  NSObject *v13;
  NSObject *v14;
  char *v16;
  char *v17;
  _QWORD block[7];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  uint8_t buf[1640];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *(*v27)(uint64_t, uint64_t);
  uint64_t (*v28)();
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  sub_18F204AE4();
  if (Current != *(CFRunLoopRef *)qword_1ECEDFE08)
    return sub_18F45BB9C((uint64_t)a2, v4, v5, v6, v7) != 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  v24 = 0;
  v25 = &v24;
  v26 = 0x17012000000;
  v27 = sub_18F206C14;
  v28 = nullsub_4;
  v29 = &unk_18F58364E;
  v9 = dispatch_semaphore_create(0);
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F3C12D8;
  block[3] = &unk_1E2956C80;
  block[5] = &v19;
  block[6] = &v24;
  block[4] = v9;
  dispatch_async(global_queue, block);
  v11 = dispatch_time(0, 2000000000);
  v12 = dispatch_semaphore_wait(v9, v11);
  dispatch_release(v9);
  if (v12 || *((_BYTE *)v20 + 24) != 1)
  {
    bzero(a2, 0x140uLL);
    if (qword_1ECEDEE68 != -1)
      dispatch_once(&qword_1ECEDEE68, &unk_1E2955228);
    v14 = qword_1ECEDEE60;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE60, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v14, OS_LOG_TYPE_INFO, "Warning: can't get GyroBiasFit from CLGyroCalibrationDatabaseGetBiasFitAtTemperature()", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE68 != -1)
        dispatch_once(&qword_1ECEDEE68, &unk_1E2955228);
      v16 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual BOOL CLGyroCalibrationDatabaseRemote::getBiasFit(CLMotionTypeGyroBiasFit &)", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
    v8 = 0;
  }
  else
  {
    memcpy(a2, v25 + 6, 0x140uLL);
    if (qword_1ECEDEE68 != -1)
      dispatch_once(&qword_1ECEDEE68, &unk_1E2955228);
    v13 = qword_1ECEDEE60;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE60, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_INFO, "successfully got GyroBiasFit from CLGyroCalibrationDatabaseGetBiasFitAtTemperature()", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE68 != -1)
        dispatch_once(&qword_1ECEDEE68, &unk_1E2955228);
      v17 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual BOOL CLGyroCalibrationDatabaseRemote::getBiasFit(CLMotionTypeGyroBiasFit &)", "CoreLocation: %s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
    }
    v8 = 1;
  }
  _Block_object_dispose(&v24, 8);
  _Block_object_dispose(&v19, 8);
  return v8;
}

void sub_18F3BE448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(&STACK[0x6D8], 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3BE474()
{
  return 0;
}

BOOL sub_18F3BE47C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_18F45BC54(a1, a2, a3, a4, a5) != 0;
}

uint64_t sub_18F3BE498(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v6;

  v6 = -1;
  sub_18F45BC70((uint64_t)&v6, a2, a3, a4, a5);
  return v6;
}

BOOL sub_18F3BE4C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;

  v6 = 0;
  sub_18F45C874((uint64_t)&v6, a2, a3, a4, a5);
  return v6 != 0;
}

uint64_t sub_18F3BE4F4()
{
  return 0;
}

uint64_t sub_18F3BE4FC()
{
  return 0;
}

uint64_t sub_18F3BE504()
{
  return 0;
}

uint64_t **sub_18F3BE50C(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x48uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 8) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 5) = v11 + 12;
    sub_18F3BE5D8(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *sub_18F3BE5D8(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_18F3BE62C(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_18F3BE62C(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t **sub_18F3BE7C4(uint64_t **result, int *a2, int *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  int *v9;
  int *v10;
  BOOL v11;
  int *v12;
  int *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_18F3BE990((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 7) = v9[7];
          sub_18F3BE924(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_18F3BE990((uint64_t)v15);
          v10 = (int *)*((_QWORD *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = *(int **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (int *)*((_QWORD *)v9 + 2);
              v11 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_18F3BE9E4((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_18F3BEA78(v5, a2 + 7);
      v12 = (int *)*((_QWORD *)a2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (int *)*((_QWORD *)a2 + 2);
          v11 = *(_QWORD *)v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_18F3BE910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F3BE9E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3BE924(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  sub_18F3BE5D8(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

_QWORD *sub_18F3BE990(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t sub_18F3BE9E4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_18F3BEA38(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_18F3BEA38(*(_QWORD *)a1, v2);
  }
  return a1;
}

void sub_18F3BEA38(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_18F3BEA38(a1, *a2);
    sub_18F3BEA38(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *sub_18F3BEA78(uint64_t **a1, int *a2)
{
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x20uLL);
  v5 = *a2;
  *((_DWORD *)v4 + 7) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= *((_DWORD *)v7 + 7))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_18F3BE5D8(a1, (uint64_t)v6, v8, v4);
  return v4;
}

os_log_t sub_18F3BEB04()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Notifier");
  qword_1EE16D440 = (uint64_t)result;
  return result;
}

uint64_t sub_18F3BEB30(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  sub_18F3BEB94((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_18F3BEB94(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_18F3BEBD0(a1, (uint64_t *)a2);
  sub_18F3BEA38(a2 + 40, *(_QWORD **)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

uint64_t *sub_18F3BEBD0(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_18F3BEC40(v6, a2);
  return v3;
}

uint64_t *sub_18F3BEC40(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t sub_18F3BEFC4(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return sub_18F3BF03C(a1, v2, v3, v4, v5);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return sub_18F3BF3B4(a1, v7, v8, v9, v10);
  else
    return 0;
}

uint64_t sub_18F3BF03C(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend_binaryVersion(a1, a2, a3, a4, a5);
  objc_msgSend_sizeOfType(a1, v7, v8, v9, v10);
  if (!v6)
    return sub_18F3BF750((uint64_t)&v21, a1, v11, v12, v13);
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_1EE16D7E8 != -1)
      dispatch_once(&qword_1EE16D7E8, &unk_1E2954768);
    v17 = qword_1EE16D7F0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D7F0, OS_LOG_TYPE_FAULT))
    {
      v18 = *(_QWORD *)(MEMORY[0x1E0DE4EC8] + 8) & 0x7FFFFFFFFFFFFFFFLL;
      *(_DWORD *)buf = 134218498;
      v29 = v6;
      v30 = 2048;
      v31 = 0;
      v32 = 2080;
      v33 = v18;
      _os_log_impl(&dword_18F1DC000, v17, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_18F1FCA08(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D7E8 == -1)
      goto LABEL_18;
    goto LABEL_20;
  }
  if (qword_1EE16D7E8 != -1)
    dispatch_once(&qword_1EE16D7E8, &unk_1E2954768);
  v14 = qword_1EE16D7F0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D7F0, OS_LOG_TYPE_ERROR))
  {
    v15 = *(_QWORD *)(MEMORY[0x1E0DE4EC8] + 8) & 0x7FFFFFFFFFFFFFFFLL;
    *(_DWORD *)buf = 134218498;
    v29 = v6;
    v30 = 2048;
    v31 = 0;
    v32 = 2080;
    v33 = v15;
    _os_log_impl(&dword_18F1DC000, v14, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_18F1FCA08(115, 0))
    return 0;
  bzero(buf, 0x65CuLL);
  if (qword_1EE16D7E8 != -1)
LABEL_20:
    dispatch_once(&qword_1EE16D7E8, &unk_1E2954768);
LABEL_18:
  v19 = *(_QWORD *)(MEMORY[0x1E0DE4EC8] + 8) & 0x7FFFFFFFFFFFFFFFLL;
  v22 = 134218498;
  v23 = v6;
  v24 = 2048;
  v25 = 0;
  v26 = 2080;
  v27 = v19;
  v20 = (char *)_os_log_send_and_compose_impl();
  sub_18F419700("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = char, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Shared/Intersilo/CLCppContainer.h:241:46)]", "CoreLocation: %s\n", v20);
  if (v20 != (char *)buf)
    free(v20);
  return 0;
}

uint64_t sub_18F3BF3B4(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v18;
  uint64_t v19;
  char *v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend_binaryVersion(a1, a2, a3, a4, a5);
  objc_msgSend_sizeOfType(a1, v7, v8, v9, v10);
  if (!v6)
    return objc_msgSend_cppObjectPtr(a1, v11, v12, v13, v14);
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_1EE16D7E8 != -1)
      dispatch_once(&qword_1EE16D7E8, &unk_1E2954768);
    v18 = qword_1EE16D7F0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D7F0, OS_LOG_TYPE_FAULT))
    {
      v19 = *(_QWORD *)(MEMORY[0x1E0DE4EC8] + 8) & 0x7FFFFFFFFFFFFFFFLL;
      *(_DWORD *)buf = 134218498;
      v22 = v6;
      v23 = 2048;
      v24 = 0;
      v25 = 2080;
      v26 = v19;
      _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_18F1FCA08(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D7E8 == -1)
      goto LABEL_18;
    goto LABEL_20;
  }
  if (qword_1EE16D7E8 != -1)
    dispatch_once(&qword_1EE16D7E8, &unk_1E2954768);
  v15 = qword_1EE16D7F0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D7F0, OS_LOG_TYPE_ERROR))
  {
    v16 = *(_QWORD *)(MEMORY[0x1E0DE4EC8] + 8) & 0x7FFFFFFFFFFFFFFFLL;
    *(_DWORD *)buf = 134218498;
    v22 = v6;
    v23 = 2048;
    v24 = 0;
    v25 = 2080;
    v26 = v16;
    _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_18F1FCA08(115, 0))
    return 0;
  bzero(buf, 0x65CuLL);
  if (qword_1EE16D7E8 != -1)
LABEL_20:
    dispatch_once(&qword_1EE16D7E8, &unk_1E2954768);
LABEL_18:
  v20 = (char *)_os_log_send_and_compose_impl();
  sub_18F419700("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = char, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Shared/Intersilo/CLCppContainer.h:250:46)]", "CoreLocation: %s\n", v20);
  if (v20 != (char *)buf)
    free(v20);
  return 0;
}

uint64_t sub_18F3BF750(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!objc_msgSend_cppObjectPtr(a2, (const char *)a2, a3, a4, a5))
  {
    v10 = (void *)objc_msgSend_compatibilityInfo(a2, v6, v7, v8, v9);
    if (objc_msgSend_isEqual_(v10, v11, (uint64_t)&unk_1E298C2D8, v12, v13))
    {
      v14 = (void *)objc_msgSend_serialized(a2, v6, v7, v8, v9);
      if (objc_msgSend_length(v14, v15, v16, v17, v18) != 1)
      {
        if (qword_1EE16D7E8 != -1)
          dispatch_once(&qword_1EE16D7E8, &unk_1E2954768);
        v33 = qword_1EE16D7F0;
        if (os_log_type_enabled((os_log_t)qword_1EE16D7F0, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289539;
          v37 = 0;
          v38 = 2082;
          v39 = "";
          v40 = 2082;
          v41 = "assert";
          v42 = 2081;
          v43 = "sizeof(Object_T) == podContainer.serialized.length";
          _os_log_impl(&dword_18F1DC000, v33, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          if (qword_1EE16D7E8 != -1)
            dispatch_once(&qword_1EE16D7E8, &unk_1E2954768);
        }
        v34 = qword_1EE16D7F0;
        if (os_signpost_enabled((os_log_t)qword_1EE16D7F0))
        {
          *(_DWORD *)buf = 68289539;
          v37 = 0;
          v38 = 2082;
          v39 = "";
          v40 = 2082;
          v41 = "assert";
          v42 = 2081;
          v43 = "sizeof(Object_T) == podContainer.serialized.length";
          _os_signpost_emit_with_name_impl(&dword_18F1DC000, v34, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          if (qword_1EE16D7E8 != -1)
            dispatch_once(&qword_1EE16D7E8, &unk_1E2954768);
        }
        v35 = qword_1EE16D7F0;
        if (os_log_type_enabled((os_log_t)qword_1EE16D7F0, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 68289539;
          v37 = 0;
          v38 = 2082;
          v39 = "";
          v40 = 2082;
          v41 = "assert";
          v42 = 2081;
          v43 = "sizeof(Object_T) == podContainer.serialized.length";
          _os_log_impl(&dword_18F1DC000, v35, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }
        abort_report_np();
      }
      v23 = (void *)objc_msgSend_serialized(a2, v19, v20, v21, v22);
      v28 = objc_msgSend_bytes(v23, v24, v25, v26, v27);
      objc_msgSend_setCppObjectPtr_(a2, v29, v28, v30, v31);
    }
  }
  return objc_msgSend_cppObjectPtr(a2, v6, v7, v8, v9);
}

os_log_t sub_18F3BFA00()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Support", "Support");
  qword_1EE16D7F0 = (uint64_t)result;
  return result;
}

uint64_t sub_18F3BFA2C(const void *a1)
{
  void *v2;
  const char *v3;
  _QWORD v5[5];

  v2 = (void *)operator new();
  memcpy(v2, a1, 0x140uLL);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18F3BFDC0;
  v5[3] = &unk_1E2955738;
  v5[4] = v2;
  return objc_msgSend_containerWithObject_destructor_binaryVersion_typeSize_(MEMORY[0x1E0D44518], v3, (uint64_t)v2, (uint64_t)v5, 0, 320);
}

uint64_t sub_18F3BFAC4(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;

  if (!*(_BYTE *)(result + 108))
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v15) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_18F3BFDE0(a4);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v16 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_18F3BFD00(v11, v16, (uint64_t)&unk_18F506652, &v16);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v15, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend_onNotification_withData_(*(void **)(*(_QWORD *)a2 + 64), v13, *(unsigned int *)(*(_QWORD *)a3 + 32), (uint64_t)a4, v14, v15);
  }
  return result;
}

uint64_t **sub_18F3BFBA0(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x58uLL);
    v11[8] = **a4;
    *((_OWORD *)v11 + 4) = 0u;
    *((_QWORD *)v11 + 9) = 0;
    *((_QWORD *)v11 + 10) = 0;
    *((_OWORD *)v11 + 3) = 0u;
    *((_QWORD *)v11 + 5) = v11 + 12;
    *((_QWORD *)v11 + 8) = 0;
    sub_18F3BE5D8(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_18F3BFC78(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_18F2A8438((uint64_t)(a2 + 8));
    sub_18F3BEA38((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t sub_18F3BFCCC(uint64_t a1)
{
  sub_18F2A8438(a1 + 24);
  sub_18F3BEA38(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t **sub_18F3BFD00(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_BYTE *)v11 + 32) = 0;
    sub_18F3BE5D8(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_18F3BFDC0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    JUMPOUT(0x194001438);
  return result;
}

uint64_t sub_18F3BFDE0(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return sub_18F3BFE58(a1, v2, v3, v4, v5);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return sub_18F3C01C0(a1, v7, v8, v9, v10);
  else
    return 0;
}

uint64_t sub_18F3BFE58(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v16;
  char *v17;
  char v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  unint64_t v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  unint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend_binaryVersion(a1, a2, a3, a4, a5);
  objc_msgSend_sizeOfType(a1, v7, v8, v9, v10);
  if (!v6)
    return sub_18F3C054C((uint64_t)&v18, a1, v11, v12, v13);
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_1EE16D7E8 != -1)
      dispatch_once(&qword_1EE16D7E8, &unk_1E2954768);
    v16 = qword_1EE16D7F0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D7F0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v26 = v6;
      v27 = 2048;
      v28 = 0;
      v29 = 2080;
      v30 = (unint64_t)"N30CLGyroCalibrationDatabase_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl(&dword_18F1DC000, v16, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_18F1FCA08(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D7E8 == -1)
      goto LABEL_18;
    goto LABEL_20;
  }
  if (qword_1EE16D7E8 != -1)
    dispatch_once(&qword_1EE16D7E8, &unk_1E2954768);
  v14 = qword_1EE16D7F0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D7F0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218498;
    v26 = v6;
    v27 = 2048;
    v28 = 0;
    v29 = 2080;
    v30 = (unint64_t)"N30CLGyroCalibrationDatabase_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl(&dword_18F1DC000, v14, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_18F1FCA08(115, 0))
    return 0;
  bzero(buf, 0x65CuLL);
  if (qword_1EE16D7E8 != -1)
LABEL_20:
    dispatch_once(&qword_1EE16D7E8, &unk_1E2954768);
LABEL_18:
  v19 = 134218498;
  v20 = v6;
  v21 = 2048;
  v22 = 0;
  v23 = 2080;
  v24 = (unint64_t)"N30CLGyroCalibrationDatabase_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
  v17 = (char *)_os_log_send_and_compose_impl();
  sub_18F419700("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLGyroCalibrationDatabase_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Shared/Intersilo/CLCppContainer.h:241:46)]", "CoreLocation: %s\n", v17);
  if (v17 != (char *)buf)
    free(v17);
  return 0;
}

uint64_t sub_18F3C01C0(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v17;
  char *v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  unint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend_binaryVersion(a1, a2, a3, a4, a5);
  objc_msgSend_sizeOfType(a1, v7, v8, v9, v10);
  if (!v6)
    return objc_msgSend_cppObjectPtr(a1, v11, v12, v13, v14);
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_1EE16D7E8 != -1)
      dispatch_once(&qword_1EE16D7E8, &unk_1E2954768);
    v17 = qword_1EE16D7F0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D7F0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v20 = v6;
      v21 = 2048;
      v22 = 0;
      v23 = 2080;
      v24 = (unint64_t)"N30CLGyroCalibrationDatabase_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl(&dword_18F1DC000, v17, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_18F1FCA08(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D7E8 == -1)
      goto LABEL_18;
    goto LABEL_20;
  }
  if (qword_1EE16D7E8 != -1)
    dispatch_once(&qword_1EE16D7E8, &unk_1E2954768);
  v15 = qword_1EE16D7F0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D7F0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218498;
    v20 = v6;
    v21 = 2048;
    v22 = 0;
    v23 = 2080;
    v24 = (unint64_t)"N30CLGyroCalibrationDatabase_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_18F1FCA08(115, 0))
    return 0;
  bzero(buf, 0x65CuLL);
  if (qword_1EE16D7E8 != -1)
LABEL_20:
    dispatch_once(&qword_1EE16D7E8, &unk_1E2954768);
LABEL_18:
  v18 = (char *)_os_log_send_and_compose_impl();
  sub_18F419700("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLGyroCalibrationDatabase_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Shared/Intersilo/CLCppContainer.h:250:46)]", "CoreLocation: %s\n", v18);
  if (v18 != (char *)buf)
    free(v18);
  return 0;
}

uint64_t sub_18F3C054C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!objc_msgSend_cppObjectPtr(a2, (const char *)a2, a3, a4, a5))
  {
    v10 = (void *)objc_msgSend_compatibilityInfo(a2, v6, v7, v8, v9);
    if (objc_msgSend_isEqual_(v10, v11, (uint64_t)&unk_1E298C2D8, v12, v13))
    {
      v14 = (void *)objc_msgSend_serialized(a2, v6, v7, v8, v9);
      if (objc_msgSend_length(v14, v15, v16, v17, v18) != 320)
      {
        if (qword_1EE16D7E8 != -1)
          dispatch_once(&qword_1EE16D7E8, &unk_1E2954768);
        v33 = qword_1EE16D7F0;
        if (os_log_type_enabled((os_log_t)qword_1EE16D7F0, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289539;
          v37 = 0;
          v38 = 2082;
          v39 = "";
          v40 = 2082;
          v41 = "assert";
          v42 = 2081;
          v43 = "sizeof(Object_T) == podContainer.serialized.length";
          _os_log_impl(&dword_18F1DC000, v33, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          if (qword_1EE16D7E8 != -1)
            dispatch_once(&qword_1EE16D7E8, &unk_1E2954768);
        }
        v34 = qword_1EE16D7F0;
        if (os_signpost_enabled((os_log_t)qword_1EE16D7F0))
        {
          *(_DWORD *)buf = 68289539;
          v37 = 0;
          v38 = 2082;
          v39 = "";
          v40 = 2082;
          v41 = "assert";
          v42 = 2081;
          v43 = "sizeof(Object_T) == podContainer.serialized.length";
          _os_signpost_emit_with_name_impl(&dword_18F1DC000, v34, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          if (qword_1EE16D7E8 != -1)
            dispatch_once(&qword_1EE16D7E8, &unk_1E2954768);
        }
        v35 = qword_1EE16D7F0;
        if (os_log_type_enabled((os_log_t)qword_1EE16D7F0, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 68289539;
          v37 = 0;
          v38 = 2082;
          v39 = "";
          v40 = 2082;
          v41 = "assert";
          v42 = 2081;
          v43 = "sizeof(Object_T) == podContainer.serialized.length";
          _os_log_impl(&dword_18F1DC000, v35, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }
        abort_report_np();
      }
      v23 = (void *)objc_msgSend_serialized(a2, v19, v20, v21, v22);
      v28 = objc_msgSend_bytes(v23, v24, v25, v26, v27);
      objc_msgSend_setCppObjectPtr_(a2, v29, v28, v30, v31);
    }
  }
  return objc_msgSend_cppObjectPtr(a2, v6, v7, v8, v9);
}

uint64_t **sub_18F3C07FC(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_18F3BE5D8(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t sub_18F3C08B4(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 28);
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28))
    return 0;
  sub_18F3BEBD0((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

void sub_18F3C092C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29526F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18F3C093C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29526F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3C0974(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 8;
  sub_18F2A8438(a1 + 32);
  sub_18F3BEA38(v2, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_18F3C09AC(const void *a1)
{
  void *v2;
  const char *v3;
  _QWORD v5[5];

  v2 = (void *)operator new();
  memcpy(v2, a1, 0x140uLL);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18F3C12B8;
  v5[3] = &unk_1E2955738;
  v5[4] = v2;
  return objc_msgSend_containerWithObject_destructor_binaryVersion_typeSize_(MEMORY[0x1E0D44518], v3, (uint64_t)v2, (uint64_t)v5, 0, 320);
}

void sub_18F3C0A44(uint64_t a1, int *a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  uint64_t v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  __int16 v52;
  int v53;
  uint8_t buf[4];
  uint64_t v55;
  __int16 v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 108))
  {
    v5 = a1 + 64;
    v4 = *(_QWORD *)(a1 + 64);
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 64;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *(_DWORD *)(v9 + 32))
      {
        v49 = v9;
        v13 = sub_18F3BFDE0(a3);
        (*(void (**)(uint64_t, int *, uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, a2, v13, v9 + 80);
        v14 = *(_QWORD **)(v9 + 40);
        if (v14 != (_QWORD *)(v9 + 48))
        {
          v15 = (uint64_t *)(a1 + 88);
          v16 = (uint64_t *)(a1 + 8);
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 88;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = v17;
              v17 = *v22;
            }
            while (*v22);
            if ((uint64_t *)v19 != v15 && (v23 = *(_DWORD *)(v19 + 32), v18 >= v23))
            {
              v48 = v19;
              sub_18F3BFAC4(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              v27 = *(_QWORD *)(a1 + 64);
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *(_DWORD *)(v29 + 32))
                return;
              v49 = v29;
              v34 = *(_QWORD *)(v29 + 48);
              v14 = (_QWORD *)(v29 + 48);
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v48 = a1 + 88;
              if (qword_1EE16D448 != -1)
                dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
              v24 = qword_1EE16D440;
              if (os_log_type_enabled((os_log_t)qword_1EE16D440, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 8;
                if (*(char *)(a1 + 31) < 0)
                  v25 = *v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v55 = v25;
                v56 = 1026;
                v57 = v26;
                _os_log_impl(&dword_18F1DC000, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_18F1FCA08(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE16D448 != -1)
                  dispatch_once(&qword_1EE16D448, &unk_1E29531C8);
                v45 = a1 + 8;
                if (*(char *)(a1 + 31) < 0)
                  v45 = *v16;
                v46 = *((_DWORD *)v14 + 7);
                v50 = 136446466;
                v51 = v45;
                v52 = 1026;
                v53 = v46;
                v47 = (char *)_os_log_send_and_compose_impl();
                sub_18F419700("Generic", 1, 0, 0, "void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "CoreLocation: %s\n", v47);
                if (v47 != (char *)buf)
                  free(v47);
              }
            }
          }
          while (v14 != (_QWORD *)(v49 + 48));
        }
      }
    }
  }
}

__n128 *sub_18F3C0E18(uint64_t **a1, __n128 *a2)
{
  uint64_t **v4;
  __n128 *v5;
  uint64_t *v6;
  signed __int32 v7;
  uint64_t **v8;
  signed __int32 v9;
  uint64_t **v11;
  char v12;

  v4 = a1 + 1;
  v5 = (__n128 *)operator new(0x58uLL);
  v11 = v4;
  sub_18F3C0F00(v5 + 2, a2);
  v12 = 1;
  v6 = a1[1];
  if (v6)
  {
    v7 = v5[2].n128_i32[0];
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v7 >= v9)
          break;
        v6 = *v8;
        v4 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v6 = v8[1];
      if (!v6)
      {
        v4 = v8 + 1;
        goto LABEL_10;
      }
    }
    sub_18F3BFC78((uint64_t)&v11, v5);
    return (__n128 *)v8;
  }
  else
  {
    v8 = v4;
LABEL_10:
    sub_18F3BE5D8(a1, (uint64_t)v8, v4, (uint64_t *)v5);
  }
  return v5;
}

__n128 sub_18F3C0F00(__n128 *a1, __n128 *a2)
{
  __n128 *v2;
  unint64_t v3;
  __n128 *v4;
  unint64_t v5;
  __n128 result;

  a1->n128_u32[0] = a2->n128_u32[0];
  a1->n128_u64[1] = a2->n128_u64[1];
  v2 = a2 + 1;
  v3 = a2[1].n128_u64[0];
  a1[1].n128_u64[0] = v3;
  v4 = a1 + 1;
  v5 = a2[1].n128_u64[1];
  a1[1].n128_u64[1] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2->n128_u64[1] = (unint64_t)v2;
    v2->n128_u64[0] = 0;
    a2[1].n128_u64[1] = 0;
  }
  else
  {
    a1->n128_u64[1] = (unint64_t)v4;
  }
  result = a2[2];
  a1[2] = result;
  a2[2].n128_u64[0] = 0;
  a2[2].n128_u64[1] = 0;
  a1[3].n128_u8[0] = a2[3].n128_u8[0];
  return result;
}

uint64_t sub_18F3C0F58(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_DWORD *)a1 = *a2;
  sub_18F3C0FB4((uint64_t *)(a1 + 8), a3);
  v5 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a3 + 40);
  return a1;
}

uint64_t *sub_18F3C0FB4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_18F3C1008(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_18F3C0FF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18F3BEA38(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_18F3C1008(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_18F3C108C(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_18F3C108C(uint64_t **a1, uint64_t *a2, int *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = sub_18F3C1110(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_18F3BE5D8(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_18F3C1110(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t sub_18F3C12B8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    JUMPOUT(0x194001438);
  return result;
}

intptr_t sub_18F3C12D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = sub_18F45BB9C(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48, a2, a3, a4, a5);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_18F3C172C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  MEMORY[0x194001438](v19, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_18F3C1768(uint64_t a1, CLConnectionMessage **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  char *v21;
  uint8_t buf[4];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v3, v6, v4, v7, v8, v5, 0);
  if (*a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9)) != 0
    && (v14 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, (uint64_t)CFSTR("CMErrorMessage"), v12, v13)) != 0)
  {
    v19 = objc_msgSend_intValue(v14, v15, v16, v17, v18);
  }
  else
  {
    v19 = 103;
  }
  if (qword_1EE16D978 != -1)
    dispatch_once(&qword_1EE16D978, &unk_1E29451E8);
  v20 = qword_1EE16D980;
  if (os_log_type_enabled((os_log_t)qword_1EE16D980, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v23 = v19;
    _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_FAULT, "Failed with error, %{public}d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D978 != -1)
      dispatch_once(&qword_1EE16D978, &unk_1E29451E8);
    v21 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMSpringTrackerInternal init]_block_invoke", "CoreLocation: %s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
  }
}

void sub_18F3C197C(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ExecutablePathFromPid;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  pid_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  pid_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = getpid();
  ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2, v4, v5);
  if (ExecutablePathFromPid)
  {
    v11 = ExecutablePathFromPid;
    if (qword_1EE16D978 != -1)
      dispatch_once(&qword_1EE16D978, &unk_1E29451E8);
    v12 = qword_1EE16D980;
    if (os_log_type_enabled((os_log_t)qword_1EE16D980, OS_LOG_TYPE_INFO))
    {
      v13 = getpid();
      v14 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      v22 = v11;
      v23 = 1024;
      v24 = v13;
      v25 = 2048;
      v26 = v14;
      _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_INFO, "Client connection interrupt, %@, %d, %p", buf, 0x1Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D978 != -1)
        dispatch_once(&qword_1EE16D978, &unk_1E29451E8);
      getpid();
      v20 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMSpringTrackerInternal init]_block_invoke", "CoreLocation: %s\n", v20);
      if (v20 != (char *)buf)
        free(v20);
    }
  }
  v15 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v15 + 24))
  {
    v16 = (id)objc_msgSend_copy(*(void **)(v15 + 32), v7, v8, v9, v10);
    objc_msgSend__startWithHandler_(*(void **)(a1 + 32), v17, (uint64_t)v16, v18, v19);
  }
}

void sub_18F3C1CCC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  void *__p[2];
  char v35;

  v2 = (std::__shared_weak_count *)operator new(0x70uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2952688;
  sub_18F270374(__p, "SpringTracking/kCLConnectionMessageSpringTrackerIsTracking");
  MEMORY[0x194001030](&v2[1], __p);
  if (v35 < 0)
    operator delete(__p[0]);
  v32 = &v2[1].__vftable;
  v33 = v2;
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v12 = objc_msgSend_setWithObjects_(v4, v8, v5, v9, v10, v6, v7, 0);
  v30 = &v2[1].__vftable;
  v31 = v2;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v18 = (void *)objc_msgSend_sendMessage_withReplyClassesSync_(CMMotionUtils, v11, (uint64_t)&v30, v12, v13);
  v19 = v31;
  if (v31)
  {
    v20 = (unint64_t *)&v31->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (void *)objc_msgSend_objectForKeyedSubscript_(v18, v15, (uint64_t)CFSTR("CMReturnCode"), v16, v17);
  if (v18 && v22 && objc_msgSend_BOOLValue(v22, v23, v24, v25, v26))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  v27 = v33;
  if (v33)
  {
    v28 = (unint64_t *)&v33->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_18F3C1E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_18F2A8438((uint64_t)&a12);
  sub_18F2A8438((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_18F3C1F24(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9[2];
  char v10;

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = *(id *)(a1 + 40);
  v2 = (std::__shared_weak_count *)operator new(0x70uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2952688;
  sub_18F270374(v9, "SpringTracking/kCLConnectionMessageSpringTrackerStart");
  MEMORY[0x194001030](&v2[1], v9);
  if (v10 < 0)
    operator delete(v9[0]);
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  CLConnectionClient::sendMessage();
  if (v2)
  {
    v5 = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (v2)
  {
    v7 = (unint64_t *)&v2->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_18F3C2098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F3C20E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v6 = *(void **)(a1 + 32);
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  v13 = *(_QWORD *)a2;
  v14 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  objc_msgSend__handleStartStopResponse_handler_(v6, a2, (uint64_t)&v13, *(_QWORD *)(a1 + 40), a5);
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 1;
}

void sub_18F3C2178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F2A8438((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18F3C21E4()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7[2];
  char v8;

  v0 = (std::__shared_weak_count *)operator new(0x70uLL);
  v0->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v0->__shared_owners_;
  v0->__shared_weak_owners_ = 0;
  v0->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2952688;
  sub_18F270374(v7, "SpringTracking/kCLConnectionMessageSpringTrackerStop");
  MEMORY[0x194001030](&v0[1], v7);
  if (v8 < 0)
    operator delete(v7[0]);
  do
    v2 = __ldxr(p_shared_owners);
  while (__stxr(v2 + 1, p_shared_owners));
  CLConnectionClient::sendMessage();
  if (v0)
  {
    v3 = (unint64_t *)&v0->__shared_owners_;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
  if (v0)
  {
    v5 = (unint64_t *)&v0->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
}

void sub_18F3C2334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F3C237C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v6 = *(void **)(a1 + 32);
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  v13 = *(_QWORD *)a2;
  v14 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  objc_msgSend__handleStartStopResponse_handler_(v6, a2, (uint64_t)&v13, *(_QWORD *)(a1 + 40), a5);
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 0;
}

void sub_18F3C2410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F2A8438((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3C2818(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v2, v3);
}

uint64_t sub_18F3C2860(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  const char *v15;

  v6 = objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3, a4, a5);
  v11 = *(_QWORD *)(a1 + 40);
  if (v6 == 100)
  {
    v12 = 0;
  }
  else
  {
    v13 = (void *)MEMORY[0x1E0CB35C8];
    v14 = objc_msgSend_intValue(*(void **)(a1 + 32), v7, v8, v9, v10);
    v12 = objc_msgSend_errorWithDomain_code_userInfo_(v13, v15, (uint64_t)CFSTR("CMErrorDomain"), v14, 0);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v11, v12);
}

uint64_t sub_18F3C28DC(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v2, v3);
}

void sub_18F3C2980(uint64_t a1, const char *a2)
{
  uint64_t v2;
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  CMSleepData *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  const __CFString *v25;
  void *v26;
  const __CFString *v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v27 = CFSTR("CMSpringKeyDataRecord");
    v28[0] = v2;
    v24 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v28, (uint64_t)&v27, 1);
  }
  else
  {
    v3 = objc_alloc(MEMORY[0x1E0CB3A28]);
    v7 = (void *)objc_msgSend_initWithUUIDString_(v3, v4, (uint64_t)CFSTR("00000000-0000-0000-0000-000000000000"), v5, v6);
    v8 = [CMSleepData alloc];
    v12 = (void *)objc_msgSend_initWithSessionId_(v8, v9, (uint64_t)v7, v10, v11);
    v25 = CFSTR("CMSpringKeyDataRecord");
    v26 = v12;
    v24 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v13, (uint64_t)&v26, (uint64_t)&v25, 1);

  }
  sub_18F3C33B0("SpringTracking/kCLConnectionMessageSpringTrackerQuery", &v24, &v22);
  v21 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  CLConnectionClient::sendMessage();
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_18F3C2B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F3C2B8C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  NSSet *v15;
  void *DictionaryOfClasses;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  char *v28;
  _QWORD v29[5];
  __int16 v30;
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD block[5];
  uint8_t buf[1640];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = (id)objc_msgSend_copy(*(void **)(a1 + 32), a2, a3, a4, a5);
  v7 = (void *)MEMORY[0x1E0C99E60];
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  v10 = objc_opt_class();
  v11 = objc_opt_class();
  v15 = (NSSet *)objc_msgSend_setWithObjects_(v7, v12, v8, v13, v14, v9, v10, v11, 0);
  if (*(_QWORD *)a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v15)) != 0)
  {
    v20 = DictionaryOfClasses;
    v21 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v17, (uint64_t)CFSTR("CMErrorMessage"), v18, v19);
    v25 = objc_msgSend_objectForKeyedSubscript_(v20, v22, (uint64_t)CFSTR("CMSpringKeyDataArray"), v23, v24);
    if (v21)
    {
      v32[0] = MEMORY[0x1E0C809B0];
      v32[1] = 3221225472;
      v32[2] = sub_18F3C2F08;
      v32[3] = &unk_1E2955B60;
      v32[4] = v21;
      v32[5] = v6;
      v26 = v32;
    }
    else if (v25)
    {
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v31[2] = sub_18F3C2F68;
      v31[3] = &unk_1E2955B60;
      v31[4] = v25;
      v31[5] = v6;
      v26 = v31;
    }
    else
    {
      if (qword_1EE16D978 != -1)
        dispatch_once(&qword_1EE16D978, &unk_1E29451E8);
      v27 = qword_1EE16D980;
      if (os_log_type_enabled((os_log_t)qword_1EE16D980, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v27, OS_LOG_TYPE_FAULT, "Error parsing query response.", buf, 2u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D978 != -1)
          dispatch_once(&qword_1EE16D978, &unk_1E29451E8);
        v30 = 0;
        v28 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "-[CMSpringTrackerInternal _querySpringDataFromRecord:handler:]_block_invoke", "CoreLocation: %s\n", v28);
        if (v28 != (char *)buf)
          free(v28);
      }
      v29[0] = MEMORY[0x1E0C809B0];
      v29[1] = 3221225472;
      v29[2] = sub_18F3C2F7C;
      v29[3] = &unk_1E2955B10;
      v29[4] = v6;
      v26 = v29;
    }
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_18F3C2EBC;
    block[3] = &unk_1E2955B10;
    block[4] = v6;
    v26 = block;
  }
  dispatch_async(MEMORY[0x1E0C80D38], v26);
}

uint64_t sub_18F3C2EBC(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F3C2F08(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;

  v5 = (void *)MEMORY[0x1E0CB35C8];
  v6 = *(_QWORD *)(a1 + 40);
  v7 = objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3, a4, a5);
  v9 = objc_msgSend_errorWithDomain_code_userInfo_(v5, v8, (uint64_t)CFSTR("CMErrorDomain"), v7, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v6, 0, v9);
}

uint64_t sub_18F3C2F68(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F3C2F7C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F3C30A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend__teardown(*(void **)(a1 + 32), a2, a3, a4, a5);
}

uint64_t sub_18F3C3194(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (void *)objc_msgSend__internal(*(void **)(a1 + 32), a2, a3, a4, a5);
  return objc_msgSend__startWithHandler_(v6, v7, *(_QWORD *)(a1 + 40), v8, v9);
}

uint64_t sub_18F3C3270(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v6, sel__stopWithHandler_, *(_QWORD *)(a1 + 40), v7, v8);
}

uint64_t sub_18F3C3354(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v6, sel__querySpringDataFromRecord_handler_, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v7);
}

os_log_t sub_18F3C3384()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Position", "Spring");
  qword_1EE16D980 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F3C33B0@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F3C3410(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F3C33FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F3C3410(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F3C3470((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F3C345C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F3C3470(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F3C34C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F3C34E0(uint64_t a1, char *a2)
{
  uint64_t context;
  uint64_t plan;
  std::string *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  std::string *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  std::string *v14;
  NSObject *v15;
  std::string __p;
  std::string v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 1560) = 0;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_BYTE *)(a1 + 1564) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  context = espresso_create_context();
  *(_QWORD *)a1 = context;
  if (context)
  {
    plan = espresso_create_plan();
    *(_QWORD *)(a1 + 8) = plan;
    if (plan)
    {
      sub_18F270374(&v18, a2);
      v6 = std::string::append(&v18, "/model.espresso.net");
      __p = *v6;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      if (espresso_plan_add_network())
      {
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E2953208);
        v7 = off_1ECEDEE90;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v18.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_ERROR, "Failed to add network to Espresso plan", (uint8_t *)&v18, 2u);
        }
        if (!sub_18F1FCA08(115, 0))
          goto LABEL_57;
        bzero(&v18, 0x65CuLL);
        if (qword_1ECEDEE98 == -1)
          goto LABEL_51;
      }
      else if (espresso_plan_build())
      {
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E2953208);
        v11 = off_1ECEDEE90;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v18.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_18F1DC000, v11, OS_LOG_TYPE_ERROR, "Failed to build Espresso plan", (uint8_t *)&v18, 2u);
        }
        if (!sub_18F1FCA08(115, 0))
          goto LABEL_57;
        bzero(&v18, 0x65CuLL);
        if (qword_1ECEDEE98 == -1)
          goto LABEL_51;
      }
      else if (espresso_network_bind_buffer())
      {
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E2953208);
        v12 = off_1ECEDEE90;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v18.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_ERROR, "Failed to bind input buffer", (uint8_t *)&v18, 2u);
        }
        if (!sub_18F1FCA08(115, 0))
          goto LABEL_57;
        bzero(&v18, 0x65CuLL);
        if (qword_1ECEDEE98 == -1)
          goto LABEL_51;
      }
      else
      {
        if (!espresso_network_bind_buffer())
        {
          *(_BYTE *)(a1 + 1564) = 1;
          if (qword_1ECEDEE98 != -1)
            dispatch_once(&qword_1ECEDEE98, &unk_1E2953208);
          v15 = off_1ECEDEE90;
          if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v18.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_DEFAULT, "The Espresso Network is ready", (uint8_t *)&v18, 2u);
          }
          if (!sub_18F1FCA08(115, 2))
            goto LABEL_57;
          bzero(&v18, 0x65CuLL);
          if (qword_1ECEDEE98 != -1)
            dispatch_once(&qword_1ECEDEE98, &unk_1E2953208);
          v14 = (std::string *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "CMPdrMLModel::CMPdrMLModel(const char *)", "CoreLocation: %s\n", (const char *)v14);
          goto LABEL_63;
        }
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E2953208);
        v13 = off_1ECEDEE90;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v18.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_ERROR, "Failed to bind output buffer", (uint8_t *)&v18, 2u);
        }
        if (!sub_18F1FCA08(115, 0))
          goto LABEL_57;
        bzero(&v18, 0x65CuLL);
        if (qword_1ECEDEE98 == -1)
        {
LABEL_51:
          v14 = (std::string *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "CMPdrMLModel::CMPdrMLModel(const char *)", "CoreLocation: %s\n", (const char *)v14);
LABEL_63:
          if (v14 != &v18)
            free(v14);
LABEL_57:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          return a1;
        }
      }
      dispatch_once(&qword_1ECEDEE98, &unk_1E2953208);
      goto LABEL_51;
    }
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2953208);
    v9 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v18.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_ERROR, "Failed to create Espresso plan", (uint8_t *)&v18, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(&v18, 0x65CuLL);
      if (qword_1ECEDEE98 == -1)
        goto LABEL_26;
      goto LABEL_67;
    }
  }
  else
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2953208);
    v8 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v18.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_ERROR, "Failed to create Espresso context", (uint8_t *)&v18, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(&v18, 0x65CuLL);
      if (qword_1ECEDEE98 == -1)
      {
LABEL_26:
        v10 = (std::string *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "CMPdrMLModel::CMPdrMLModel(const char *)", "CoreLocation: %s\n", (const char *)v10);
        if (v10 != &v18)
          free(v10);
        return a1;
      }
LABEL_67:
      dispatch_once(&qword_1ECEDEE98, &unk_1E2953208);
      goto LABEL_26;
    }
  }
  return a1;
}

void sub_18F3C3E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18F3C3E9C(_QWORD *a1)
{
  if (a1[1])
    espresso_plan_destroy();
  if (*a1)
    espresso_context_destroy();
  return a1;
}

uint64_t sub_18F3C3ED8(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  int v5;
  int v6;
  int v7;

  v3 = a1 + 24 * *(int *)(a1 + 1556);
  v4 = *a2;
  *(_QWORD *)(v3 + 368) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v3 + 352) = v4;
  v5 = *(_DWORD *)(a1 + 1556);
  if ((v5 + 1) <= 0x31)
    v6 = v5 + 1;
  else
    v6 = 0;
  *(_DWORD *)(a1 + 1556) = v6;
  if (*(_BYTE *)(a1 + 1560))
  {
    *(_DWORD *)(a1 + 1552) = v6;
    v7 = v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 1552);
  }
  *(_BYTE *)(a1 + 1560) = v7 == v6;
  return sub_18F3C3F34(a1, a3);
}

uint64_t sub_18F3C3F34(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  uint64_t result;
  NSObject *v11;
  int v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint8_t buf[1640];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 1564))
    return 0;
  if (*(_BYTE *)(a1 + 1560))
  {
    v4 = *(char **)(a1 + 16);
    v5 = *(int *)(a1 + 1552);
    v6 = 24 * (50 - v5);
    memcpy(v4, (const void *)(a1 + 352 + 24 * (int)v5), v6);
    v7 = *(unsigned int *)(a1 + 1552);
    if ((int)v7 >= 1)
      memcpy(&v4[v6], (const void *)(a1 + 352), 24 * v7);
    if (espresso_plan_execute_sync())
    {
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2953208);
      v8 = off_1ECEDEE90;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_ERROR, "Failed to execute Espresso plan", buf, 2u);
      }
      v9 = sub_18F1FCA08(115, 0);
      result = 0;
      if (v9)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE98 == -1)
        {
LABEL_19:
          v13 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "BOOL CMPdrMLModel::predict(Velocity &, double)", "CoreLocation: %s\n", v13);
          if (v13 != (char *)buf)
            free(v13);
          return 0;
        }
LABEL_24:
        dispatch_once(&qword_1ECEDEE98, &unk_1E2953208);
        goto LABEL_19;
      }
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 184);
      v15 = *(_DWORD *)(v14 + 8);
      *(_QWORD *)a2 = *(_QWORD *)v14;
      *(_DWORD *)(a2 + 8) = v15;
      return 1;
    }
  }
  else
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2953208);
    v11 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v11, OS_LOG_TYPE_ERROR, "ImuData Buffer not ready", buf, 2u);
    }
    v12 = sub_18F1FCA08(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE98 == -1)
        goto LABEL_19;
      goto LABEL_24;
    }
  }
  return result;
}

void sub_18F3C4338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  MEMORY[0x194001438](v19, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_18F3C4374(uint64_t a1, CLConnectionMessage **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  char *v21;
  uint8_t buf[4];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v3, v6, v4, v7, v8, v5, 0);
  if (*a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9)) != 0
    && (v14 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, (uint64_t)CFSTR("CMErrorMessage"), v12, v13)) != 0)
  {
    v19 = objc_msgSend_intValue(v14, v15, v16, v17, v18);
  }
  else
  {
    v19 = 103;
  }
  if (qword_1EE16D8F8 != -1)
    dispatch_once(&qword_1EE16D8F8, &unk_1E2955248);
  v20 = qword_1EE16D900;
  if (os_log_type_enabled((os_log_t)qword_1EE16D900, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v23 = v19;
    _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_FAULT, "CMIndoorOutdoor, Failed with CMError code %{public}d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D8F8 != -1)
      dispatch_once(&qword_1EE16D8F8, &unk_1E2955248);
    v21 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMIndoorOutdoorManagerInternal init]_block_invoke", "CoreLocation: %s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
  }
}

_BYTE *sub_18F3C4588(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ExecutablePathFromPid;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  pid_t v13;
  uint64_t v14;
  _BYTE *result;
  char *v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  pid_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = getpid();
  ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2, v4, v5);
  if (ExecutablePathFromPid)
  {
    v11 = ExecutablePathFromPid;
    if (qword_1EE16D8F8 != -1)
      dispatch_once(&qword_1EE16D8F8, &unk_1E2955248);
    v12 = qword_1EE16D900;
    if (os_log_type_enabled((os_log_t)qword_1EE16D900, OS_LOG_TYPE_DEFAULT))
    {
      v13 = getpid();
      v14 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      v18 = v11;
      v19 = 1024;
      v20 = v13;
      v21 = 2048;
      v22 = v14;
      _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_DEFAULT, "CMIndoorOutdoor, client connection interrupt, %@, %d, %p", buf, 0x1Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D8F8 != -1)
        dispatch_once(&qword_1EE16D8F8, &unk_1E2955248);
      getpid();
      v16 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMIndoorOutdoorManagerInternal init]_block_invoke", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
  }
  result = *(_BYTE **)(a1 + 32);
  if (result[40])
    return (_BYTE *)objc_msgSend__startIndoorOutdoorUpdates(result, v7, v8, v9, v10);
  return result;
}

void sub_18F3C486C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F3C48E0(uint64_t a1)
{
  const char *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD v11[6];
  void *__p;
  std::__shared_weak_count *v13;
  char v14;
  const __CFString *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32))
  {
    sub_18F270374(&__p, "kCLConnectionMessageIndoorOutdoorUpdate");
    v11[1] = MEMORY[0x1E0C809B0];
    v11[2] = 3221225472;
    v11[3] = sub_18F3C4AD8;
    v11[4] = &unk_1E2955DD8;
    v11[5] = *(_QWORD *)(a1 + 32);
    CLConnectionClient::setHandlerForMessage();
    if (v14 < 0)
      operator delete(__p);
    v15 = CFSTR("kCLConnectionMessageSubscribeKey");
    v16[0] = MEMORY[0x1E0C9AAB0];
    v11[0] = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v2, (uint64_t)v16, (uint64_t)&v15, 1);
    sub_18F3515BC("kCLConnectionMessageIndoorOutdoorUpdate", v11, &__p);
    v10 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v10)
    {
      v5 = (unint64_t *)&v10->__shared_owners_;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 40) = 1;
    v7 = v13;
    if (v13)
    {
      v8 = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_18F3C4A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_18F2A8438((uint64_t)&a10);
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3C4AD8(uint64_t a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  char *v40;
  uint8_t buf[1640];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v4, v6, v5, v7, v8, 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
  if (*a2)
    v14 = DictionaryOfClasses == 0;
  else
    v14 = 1;
  if (v14)
  {
    result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
    {
      v17 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v16, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
      return objc_msgSend_indoorOutdoorManager_updateFailedWithError_(*(void **)(*(_QWORD *)(a1 + 32) + 16), v18, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), v17, v19);
    }
  }
  else
  {
    v20 = DictionaryOfClasses;
    v21 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, (uint64_t)CFSTR("CMErrorMessage"), v12, v13);
    v25 = objc_msgSend_objectForKeyedSubscript_(v20, v22, (uint64_t)CFSTR("CMIndoorOutdoorStateKey"), v23, v24);
    if (v21)
    {
      result = objc_opt_respondsToSelector();
      if ((result & 1) != 0)
      {
        v30 = (void *)MEMORY[0x1E0CB35C8];
        v31 = (int)objc_msgSend_intValue(v21, v26, v27, v28, v29);
        v17 = objc_msgSend_errorWithDomain_code_userInfo_(v30, v32, (uint64_t)CFSTR("CMErrorDomain"), v31, 0);
        return objc_msgSend_indoorOutdoorManager_updateFailedWithError_(*(void **)(*(_QWORD *)(a1 + 32) + 16), v18, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), v17, v19);
      }
    }
    else
    {
      v33 = v25;
      if (v25)
      {
        result = objc_opt_respondsToSelector();
        if ((result & 1) != 0)
          return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), sel_indoorOutdoorManager_didChangeTo_, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), v33, v34);
      }
      else
      {
        if (qword_1EE16D8F8 != -1)
          dispatch_once(&qword_1EE16D8F8, &unk_1E2955248);
        v35 = qword_1EE16D900;
        if (os_log_type_enabled((os_log_t)qword_1EE16D900, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v35, OS_LOG_TYPE_FAULT, "IndoorOutdoor, unable to parse kCLConnectionMessageIndoorOutdoorUpdate message", buf, 2u);
        }
        if (sub_18F1FCA08(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D8F8 != -1)
            dispatch_once(&qword_1EE16D8F8, &unk_1E2955248);
          v40 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "-[CMIndoorOutdoorManagerInternal _startIndoorOutdoorUpdates]_block_invoke", "CoreLocation: %s\n", v40);
          if (v40 != (char *)buf)
            free(v40);
        }
        result = objc_opt_respondsToSelector();
        if ((result & 1) != 0)
        {
          v37 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v36, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
          return objc_msgSend_indoorOutdoorManager_updateFailedWithError_(*(void **)(*(_QWORD *)(a1 + 32) + 16), v38, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), v37, v39);
        }
      }
    }
  }
  return result;
}

void sub_18F3C4E90(uint64_t a1)
{
  const char *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  char *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  const __CFString *v14;
  uint64_t v15;
  void *__p;
  std::__shared_weak_count *v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  sub_18F270374(&__p, "kCLConnectionMessageIndoorOutdoorUpdate");
  CLConnectionClient::setHandlerForMessage();
  if (v18 < 0)
    operator delete(__p);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 40))
  {
    v14 = CFSTR("kCLConnectionMessageSubscribeKey");
    v15 = MEMORY[0x1E0C9AAA0];
    v13 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v2, (uint64_t)&v15, (uint64_t)&v14, 1);
    sub_18F3515BC("kCLConnectionMessageIndoorOutdoorUpdate", &v13, &__p);
    v12 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v12)
    {
      v5 = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 40) = 0;
    v7 = v17;
    if (v17)
    {
      v8 = (unint64_t *)&v17->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    if (qword_1EE16D8F8 != -1)
      dispatch_once(&qword_1EE16D8F8, &unk_1E2955248);
    v10 = qword_1EE16D900;
    if (os_log_type_enabled((os_log_t)qword_1EE16D900, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_DEFAULT, "IndoorOutdoor, Error stopping updates, no active clients", (uint8_t *)&__p, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1EE16D8F8 != -1)
        dispatch_once(&qword_1EE16D8F8, &unk_1E2955248);
      LOWORD(v13) = 0;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMIndoorOutdoorManagerInternal _stopIndoorOutdoorUpdates]_block_invoke", "CoreLocation: %s\n", v11);
      if (v11 != (char *)&__p)
        free(v11);
    }
  }
}

void sub_18F3C5158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_18F2A8438((uint64_t)&a11);
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_18F3C51EC(uint64_t a1)
{
  unint64_t *p_shared_owners;
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) && *(_QWORD *)(a1 + 40))
  {
    sub_18F3C5D28("kCLConnectionMessageIndoorOutdoorLastKnownState", &v9);
    v8 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v2 = __ldxr(p_shared_owners);
      while (__stxr(v2 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v8)
    {
      v3 = (unint64_t *)&v8->__shared_owners_;
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v5 = v10;
    if (v10)
    {
      v6 = (unint64_t *)&v10->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_18F3C5310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438(v6 - 40);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3C532C(uint64_t a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  const char *v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint8_t buf[1640];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v4, v6, v5, v7, v8, 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
  if (*a2)
    v14 = DictionaryOfClasses == 0;
  else
    v14 = 1;
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 32);
    v16 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v11, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
LABEL_9:
    v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
    v31 = v16;
    v32 = v15;
    v33 = 0;
    return v30(v32, v33, v31);
  }
  v17 = DictionaryOfClasses;
  v18 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, (uint64_t)CFSTR("CMErrorMessage"), v12, v13);
  v22 = objc_msgSend_objectForKeyedSubscript_(v17, v19, (uint64_t)CFSTR("CMIndoorOutdoorStateKey"), v20, v21);
  if (v18)
  {
    v15 = *(_QWORD *)(a1 + 32);
    v27 = (void *)MEMORY[0x1E0CB35C8];
    v28 = (int)objc_msgSend_intValue(v18, v23, v24, v25, v26);
    v16 = objc_msgSend_errorWithDomain_code_userInfo_(v27, v29, (uint64_t)CFSTR("CMErrorDomain"), v28, 0);
    goto LABEL_9;
  }
  v33 = v22;
  if (v22)
  {
    v32 = *(_QWORD *)(a1 + 32);
    v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
    v31 = 0;
    return v30(v32, v33, v31);
  }
  if (qword_1EE16D8F8 != -1)
    dispatch_once(&qword_1EE16D8F8, &unk_1E2955248);
  v35 = qword_1EE16D900;
  if (os_log_type_enabled((os_log_t)qword_1EE16D900, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v35, OS_LOG_TYPE_FAULT, "IndoorOutdoor, Unable to parse query.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D8F8 != -1)
      dispatch_once(&qword_1EE16D8F8, &unk_1E2955248);
    v39 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMIndoorOutdoorManagerInternal _lastKnownIndoorOutdoorStateWithHandler:]_block_invoke", "CoreLocation: %s\n", v39);
    if (v39 != (char *)buf)
      free(v39);
  }
  v37 = *(_QWORD *)(a1 + 32);
  v38 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v36, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v37 + 16))(v37, 0, v38);
}

uint64_t sub_18F3C5724(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend__teardown(*(void **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5);
}

os_log_t sub_18F3C5CFC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
  qword_1EE16D900 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F3C5D28@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = sub_18F3C5D80(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18F3C5D6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F3C5D80(_QWORD *a1, char *__s)
{
  char v4;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F3C5DDC((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_18F3C5DC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F3C5DDC(int a1, uint64_t a2, char *__s)
{
  void *__p[2];
  char v5;

  sub_18F270374(__p, __s);
  MEMORY[0x194001030](a2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_18F3C5E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F3C5E44()
{
  uint64_t result;
  _QWORD *v1;

  result = sub_18F1F7BFC();
  if ((result & 0x200) != 0)
  {
    v1 = (_QWORD *)operator new();
    sub_18F1E61EC((uint64_t)v1, (uint64_t)"CLMagicMountNotifier", 1);
    result = sub_18F498324((uint64_t)(v1 + 4));
    *v1 = &off_1E294ABB8;
    v1[4] = &unk_1E294AC08;
    qword_1EE16E940 = (uint64_t)v1;
  }
  return result;
}

void sub_18F3C5EB8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_18F3DB8A0(v1);
  MEMORY[0x194001438](v1, 0x10F1C40817FB44ELL);
  _Unwind_Resume(a1);
}

void sub_18F3C5EEC(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  char *v8;
  char *v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D808 != -1)
    dispatch_once(&qword_1EE16D808, &unk_1E2956CC8);
  v6 = qword_1EE16D810;
  if (os_log_type_enabled((os_log_t)qword_1EE16D810, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240448;
    v11 = a2;
    v12 = 2050;
    v13 = a3;
    _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEBUG, "NumberOfSpectatorsChanged,notification,%{public}d,num,%{public}zu", buf, 0x12u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D808 != -1)
      dispatch_once(&qword_1EE16D808, &unk_1E2956CC8);
    v9 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual void CLMagicMountNotifier::numberOfSpectatorsChanged(int, size_t)", "CoreLocation: %s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  if (a2)
  {
    if (qword_1EE16D808 != -1)
      dispatch_once(&qword_1EE16D808, &unk_1E2956CC8);
    v7 = qword_1EE16D810;
    if (os_log_type_enabled((os_log_t)qword_1EE16D810, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v11 = a2;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Unrecognized notification,%{public}d", buf, 8u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D808 != -1)
        dispatch_once(&qword_1EE16D808, &unk_1E2956CC8);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual void CLMagicMountNotifier::numberOfSpectatorsChanged(int, size_t)", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  else if (sub_18F4983D8(a1 + 32))
  {
    sub_18F203AF8(*(_QWORD *)(a1 + 40), a3 != 0);
  }
}

void sub_18F3C621C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  char *v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D808 != -1)
    dispatch_once(&qword_1EE16D808, &unk_1E2956CC8);
  v3 = qword_1EE16D810;
  if (os_log_type_enabled((os_log_t)qword_1EE16D810, OS_LOG_TYPE_INFO))
  {
    v4 = *(_DWORD *)(a2 + 1);
    *(_DWORD *)buf = 67240192;
    v7 = v4;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_INFO, "pong,%{public}u", buf, 8u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D808 != -1)
      dispatch_once(&qword_1EE16D808, &unk_1E2956CC8);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual void CLMagicMountNotifier::visitPong(const CMMagicMountReport::Pong *)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
}

uint64_t sub_18F3C63D0(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char *v12;
  uint8_t buf[8];
  uint64_t v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  double v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D808 != -1)
    dispatch_once(&qword_1EE16D808, &unk_1E2956CC8);
  v4 = qword_1EE16D810;
  if (os_log_type_enabled((os_log_t)qword_1EE16D810, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2[1];
    v6 = a2[2];
    v7 = a2[3];
    v8 = *(_QWORD *)(a1 + 64);
    v9 = mach_absolute_time();
    *(_DWORD *)buf = 67241216;
    *(_DWORD *)&buf[4] = v5;
    LOWORD(v14) = 1026;
    *(_DWORD *)((char *)&v14 + 2) = v6;
    HIWORD(v14) = 1026;
    v15 = v7;
    v16 = 2050;
    v17 = v8;
    v18 = 2050;
    v19 = sub_18F1FD20C(v9);
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEBUG, "Report,mountStatus,%{public}u,APAwake,%{public}u,isSimulated,%{public}u,timestamp,%{public}lf,now,%{public}lf", buf, 0x28u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D808 != -1)
      dispatch_once(&qword_1EE16D808, &unk_1E2956CC8);
    v11 = mach_absolute_time();
    sub_18F1FD20C(v11);
    v12 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual void CLMagicMountNotifier::visitMagicMountState(const CMMagicMountReport::MagicMountState *)", "CoreLocation: %s\n", v12);
    if (v12 != (char *)buf)
      free(v12);
  }
  v14 = 0;
  *(_QWORD *)buf = *(_QWORD *)(a1 + 64);
  LOBYTE(v14) = a2[1];
  *(_WORD *)((char *)&v14 + 1) = *((_WORD *)a2 + 1);
  return sub_18F1FD2C8(a1, 0, (uint64_t)buf, 16);
}

uint64_t sub_18F3C6644(uint64_t a1, unsigned __int8 *a2)
{
  return sub_18F3C63D0(a1 - 32, a2);
}

void sub_18F3C6650(uint64_t a1)
{
  sub_18F3C66D0(a1);
  JUMPOUT(0x194001438);
}

_QWORD *sub_18F3C6674(uint64_t a1)
{
  return sub_18F3C66D0(a1 - 32);
}

void sub_18F3C667C(uint64_t a1)
{
  sub_18F3C66D0(a1 - 32);
  JUMPOUT(0x194001438);
}

os_log_t sub_18F3C66A4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "MagicMount");
  qword_1EE16D810 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F3C66D0(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &off_1E294B148;
  sub_18F3C67B0((_QWORD **)(a1 + 56), 0);
  sub_18F2A8438(a1 + 40);
  return sub_18F3DB8A0((_QWORD *)a1);
}

uint64_t sub_18F3C6710(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E294B148;
  v2 = a1 + 8;
  sub_18F3C67B0((_QWORD **)(a1 + 24), 0);
  sub_18F2A8438(v2);
  return a1;
}

void sub_18F3C6754(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = &off_1E294B148;
  v1 = a1 + 8;
  sub_18F3C67B0((_QWORD **)(a1 + 24), 0);
  sub_18F2A8438(v1);
  JUMPOUT(0x194001438);
}

_QWORD *sub_18F3C67B0(_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_18F411110(result);
    JUMPOUT(0x194001438);
  }
  return result;
}

uint64_t sub_18F3C67EC(_QWORD *a1)
{
  *a1 = &off_1E294B178;
  sub_18F1DF72C((uint64_t)a1);
  sub_18F2A8438((uint64_t)(a1 + 26));
  return sub_18F4B2E54((uint64_t)a1);
}

void sub_18F3C682C(_QWORD *a1)
{
  sub_18F3C67EC(a1);
  JUMPOUT(0x194001438);
}

os_log_t sub_18F3C6850()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "AOP");
  qword_1EE16D420 = (uint64_t)result;
  return result;
}

void sub_18F3C687C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2952650;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18F3C688C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2952650;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3C68BC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

CFTypeRef sub_18F3C76A0(const char *a1, uint64_t a2)
{
  const __CFDictionary *v3;
  io_service_t MatchingService;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  io_registry_entry_t v8;
  const __CFString *v9;
  CFTypeRef CFProperty;

  v3 = IOServiceNameMatching(a1);
  if (!v3)
    return 0;
  MatchingService = IOServiceGetMatchingService(*MEMORY[0x1E0CBBAA8], v3);
  if (!MatchingService)
    return 0;
  v8 = MatchingService;
  v9 = (const __CFString *)objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v5, a2, v6, v7);
  CFProperty = IORegistryEntryCreateCFProperty(v8, v9, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  IOObjectRelease(v8);
  return CFProperty;
}

const void *sub_18F3C7724()
{
  CFTypeRef v0;
  const void *v1;
  CFTypeID v2;
  NSObject *v3;
  NSObject *v4;
  char *v6;
  char *v7;
  uint8_t buf[1640];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v0 = sub_18F3C76A0("compass", (uint64_t)"compass-calibration");
  if (!v0)
  {
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E2953288);
    v4 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_INFO, "Invalid cpas data.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E2953288);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "CFDataRef CLMagnetometerCoexistenceLocal::copyCompassCalibrationData()", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    return 0;
  }
  v1 = v0;
  v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID())
  {
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E2953288);
    v3 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_INFO, "The cpas data is not a CFData type.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E2953288);
      v7 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "CFDataRef CLMagnetometerCoexistenceLocal::copyCompassCalibrationData()", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
    CFRelease(v1);
    return 0;
  }
  return v1;
}

BOOL sub_18F3C7A24()
{
  const __CFData *v0;
  const __CFData *v1;
  const UInt8 *BytePtr;
  const UInt8 *v3;
  CFIndex Length;
  int v5;
  unint64_t v6;
  NSObject *v7;
  _BOOL8 v8;
  NSObject *v9;
  uint8_t *v10;
  const __CFData *v11;
  const __CFData *v12;
  const UInt8 *v13;
  const UInt8 *v14;
  const __CFData *v15;
  const __CFData *v16;
  CFTypeID v17;
  const UInt8 *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  NSObject *v23;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  char *v28;
  NSObject *v29;
  char *v30;
  NSObject *v31;
  char *v32;
  char *v33;
  uint8_t buf[4];
  CFIndex v35;
  __int16 v36;
  unint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFData *)sub_18F3C7724();
  if (v0)
  {
    v1 = v0;
    BytePtr = CFDataGetBytePtr(v0);
    if (!BytePtr)
    {
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E2953288);
      v9 = qword_1EE16D690;
      if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_DEFAULT, "#Warning Cpas pointer is NULL.", buf, 2u);
      }
      if (!sub_18F1FCA08(115, 2))
        goto LABEL_40;
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E2953288);
      v10 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "CoreLocation: %s\n");
      goto LABEL_90;
    }
    v3 = BytePtr;
    Length = CFDataGetLength(v1);
    if (Length >= 2)
    {
      v5 = *v3;
      if (Length == 76 && v5 == 5)
      {
        v6 = 5;
      }
      else
      {
        if (Length != 76 || v5 != 6)
        {
          if (qword_1EE16D698 != -1)
            dispatch_once(&qword_1EE16D698, &unk_1E2953288);
          v25 = qword_1EE16D690;
          if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v35) = v5;
            _os_log_impl(&dword_18F1DC000, v25, OS_LOG_TYPE_FAULT, "Unexpected cpas version: %u.", buf, 8u);
          }
          if (!sub_18F1FCA08(115, 0))
            goto LABEL_40;
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D698 == -1)
            goto LABEL_89;
          goto LABEL_101;
        }
        v6 = 8;
      }
      v11 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3 + 2, v6);
      if (v11)
      {
        v12 = v11;
        v13 = CFDataGetBytePtr(v11);
        if (v13)
        {
          v14 = v13;
          v15 = (const __CFData *)sub_18F3C76A0("AppleH4CamIn", (uint64_t)"BackCameraSerialNumber");
          v16 = v15;
          if (!v15 || (v17 = CFGetTypeID(v15), v17 != CFDataGetTypeID()))
          {
            if (qword_1EE16D698 != -1)
              dispatch_once(&qword_1EE16D698, &unk_1E2953288);
            v26 = qword_1EE16D690;
            if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F1DC000, v26, OS_LOG_TYPE_FAULT, "Invalid back camera serial number data.", buf, 2u);
            }
            v8 = 0;
            if (sub_18F1FCA08(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE16D698 != -1)
                dispatch_once(&qword_1EE16D698, &unk_1E2953288);
              v33 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 0, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "CoreLocation: %s\n", v33);
              if (v33 != (char *)buf)
                free(v33);
              v8 = 0;
            }
LABEL_58:
            CFRelease(v1);
            if (!v16)
            {
LABEL_43:
              if (v12)
                CFRelease(v12);
              return v8;
            }
LABEL_42:
            CFRelease(v16);
            goto LABEL_43;
          }
          if (CFDataGetLength(v16) == v6)
          {
            v18 = CFDataGetBytePtr(v16);
            if (v18)
            {
              if (*v14 == *v18)
              {
                v19 = 1;
                do
                {
                  v20 = v19;
                  if (v6 == v19)
                    break;
                  v21 = v14[v19];
                  v22 = v18[v19++];
                }
                while (v21 == v22);
                v8 = v20 >= v6;
                goto LABEL_58;
              }
LABEL_83:
              CFRelease(v1);
              v8 = 0;
              goto LABEL_42;
            }
            if (qword_1EE16D698 != -1)
              dispatch_once(&qword_1EE16D698, &unk_1E2953288);
            v31 = qword_1EE16D690;
            if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F1DC000, v31, OS_LOG_TYPE_FAULT, "Current serial number data is NULL.", buf, 2u);
            }
            if (!sub_18F1FCA08(115, 0))
              goto LABEL_83;
            bzero(buf, 0x65CuLL);
            if (qword_1EE16D698 != -1)
              dispatch_once(&qword_1EE16D698, &unk_1E2953288);
            v30 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 0, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "CoreLocation: %s\n", v30);
            if (v30 == (char *)buf)
              goto LABEL_83;
          }
          else
          {
            if (qword_1EE16D698 != -1)
              dispatch_once(&qword_1EE16D698, &unk_1E2953288);
            v29 = qword_1EE16D690;
            if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 134218240;
              v35 = CFDataGetLength(v16);
              v36 = 2048;
              v37 = v6;
              _os_log_impl(&dword_18F1DC000, v29, OS_LOG_TYPE_FAULT, "Incorrect back camera serial number length. Actual length %ld. Expected length %lu.", buf, 0x16u);
            }
            if (!sub_18F1FCA08(115, 0))
              goto LABEL_83;
            bzero(buf, 0x65CuLL);
            if (qword_1EE16D698 != -1)
              dispatch_once(&qword_1EE16D698, &unk_1E2953288);
            CFDataGetLength(v16);
            v30 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 0, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "CoreLocation: %s\n", v30);
            if (v30 == (char *)buf)
              goto LABEL_83;
          }
          free(v30);
          goto LABEL_83;
        }
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E2953288);
        v27 = qword_1EE16D690;
        if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v27, OS_LOG_TYPE_FAULT, "Original serial number pointer is NULL.", buf, 2u);
        }
        if (sub_18F1FCA08(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D698 != -1)
            dispatch_once(&qword_1EE16D698, &unk_1E2953288);
          v28 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "CoreLocation: %s\n", v28);
          if (v28 != (char *)buf)
            free(v28);
        }
LABEL_41:
        v8 = 0;
        v16 = v1;
        goto LABEL_42;
      }
    }
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E2953288);
    v23 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v23, OS_LOG_TYPE_FAULT, "Original serial number data is NULL.", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
      goto LABEL_40;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 == -1)
      goto LABEL_89;
LABEL_101:
    dispatch_once(&qword_1EE16D698, &unk_1E2953288);
LABEL_89:
    v10 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "CoreLocation: %s\n");
LABEL_90:
    if (v10 != buf)
      free(v10);
LABEL_40:
    v12 = 0;
    goto LABEL_41;
  }
  if (qword_1EE16D698 != -1)
    dispatch_once(&qword_1EE16D698, &unk_1E2953288);
  v7 = qword_1EE16D690;
  if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_DEFAULT, "#Warning Cpas data is NULL.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E2953288);
    v32 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()", "CoreLocation: %s\n", v32);
    if (v32 != (char *)buf)
      free(v32);
  }
  return 0;
}

uint64_t sub_18F3C8554()
{
  const __CFNumber *v0;
  const __CFNumber *v1;
  CFTypeID v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v9;
  char *v10;
  unsigned int valuePtr;
  int v12;
  int v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int Type;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFNumber *)sub_18F3C76A0("AppleH4CamIn", (uint64_t)"BackCameraModuleFocusActuatorID");
  v1 = v0;
  valuePtr = -1;
  if (v0 && (v2 = CFGetTypeID(v0), v2 == CFNumberGetTypeID()))
  {
    if (CFNumberGetType(v1) == kCFNumberSInt32Type)
    {
      if (!CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr))
        valuePtr = -1;
    }
    else
    {
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E2953288);
      v4 = qword_1EE16D690;
      if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109376;
        Type = CFNumberGetType(v1);
        v18 = 1024;
        v19 = 3;
        _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_INFO, "VCM actuator ID data type %d does not match expected type %d", buf, 0xEu);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E2953288);
        v12 = 67109376;
        v13 = CFNumberGetType(v1);
        v14 = 1024;
        v15 = 3;
        v10 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "NSNumber *CLMagnetometerCoexistenceLocal::cameraVcmId()", "CoreLocation: %s\n", v10);
        if (v10 != (char *)buf)
          free(v10);
      }
    }
  }
  else
  {
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E2953288);
    v3 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_INFO, "Bailing while checking VCM actuator ID.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E2953288);
      LOWORD(v12) = 0;
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "NSNumber *CLMagnetometerCoexistenceLocal::cameraVcmId()", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
    if (!v1)
      return 0;
  }
  CFRelease(v1);
  if (valuePtr != -1)
    return objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v5, valuePtr, v6, v7);
  return 0;
}

id sub_18F3C88F8()
{
  const __CFData *v0;
  const __CFData *v1;
  const UInt8 *BytePtr;
  const UInt8 *v3;
  CFIndex Length;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFIndex v9;
  int v10;
  id v11;
  const char *v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  NSObject *v16;
  char *v18;
  char *v19;
  uint8_t buf[1640];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFData *)sub_18F3C7724();
  if (v0)
  {
    v1 = v0;
    BytePtr = CFDataGetBytePtr(v0);
    if (BytePtr)
    {
      v3 = BytePtr;
      Length = CFDataGetLength(v1);
      if (Length >= 2)
      {
        v9 = Length;
        v10 = *v3;
        v11 = (id)objc_msgSend_mutableCopy(v1, v5, v6, v7, v8);
        v14 = v11;
        if (v11)
        {
          if (v9 == 76 && v10 == 5)
          {
            objc_msgSend_resetBytesInRange_(v11, v12, 2, 5, v13);
          }
          else if (v9 == 76 && v10 == 6)
          {
            objc_msgSend_resetBytesInRange_(v11, v12, 2, 8, v13);
          }
        }
        goto LABEL_20;
      }
    }
    else
    {
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E2953288);
      v16 = qword_1EE16D690;
      if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v16, OS_LOG_TYPE_DEFAULT, "#Warning CPAS pointer is NULL.", buf, 2u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E2953288);
        v19 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "NSData *CLMagnetometerCoexistenceLocal::sanitizedCompassCalibrationData()", "CoreLocation: %s\n", v19);
        if (v19 != (char *)buf)
          free(v19);
      }
    }
    v14 = 0;
LABEL_20:
    CFRelease(v1);
    return v14;
  }
  if (qword_1EE16D698 != -1)
    dispatch_once(&qword_1EE16D698, &unk_1E2953288);
  v15 = qword_1EE16D690;
  if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_DEFAULT, "#Warning CPAS data is NULL.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E2953288);
    v18 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "NSData *CLMagnetometerCoexistenceLocal::sanitizedCompassCalibrationData()", "CoreLocation: %s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
  return 0;
}

void sub_18F3C9140(uint64_t a1)
{
  NSObject *v1;
  char *v2;
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16))
  {
    if (qword_1EE16D3E8 != -1)
      dispatch_once(&qword_1EE16D3E8, &unk_1E29532A8);
    v1 = qword_1EE16D3D8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D3D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v1, OS_LOG_TYPE_ERROR, "CallHandedness service already started!", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D3E8 != -1)
        dispatch_once(&qword_1EE16D3E8, &unk_1E29532A8);
      v2 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMCallHandednessManager startCallHandednessUpdates]_block_invoke", "CoreLocation: %s\n", v2);
LABEL_21:
      if (v2 != (char *)buf)
        free(v2);
    }
  }
  else
  {
    v4 = (_QWORD *)operator new();
    v5 = *(_QWORD *)(a1 + 32);
    *v4 = off_1E294C238;
    *v4 = &off_1E294C708;
    v4[1] = 0;
    v4[2] = sub_18F3C94DC;
    v4[3] = v5;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = v4;
    if (qword_1EE16E8B8 != -1)
      dispatch_once(&qword_1EE16E8B8, &unk_1E2953B48);
    sub_18F1F4F0C(qword_1EE16E8B0, 0, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), -1.0);
    if (qword_1EE16D3E8 != -1)
      dispatch_once(&qword_1EE16D3E8, &unk_1E29532A8);
    v6 = qword_1EE16D3D8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D3D8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134217984;
      v9 = v7;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEFAULT, "Started CallHandedness updates. Current Time: %f", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D3E8 != -1)
        dispatch_once(&qword_1EE16D3E8, &unk_1E29532A8);
      v2 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMCallHandednessManager startCallHandednessUpdates]_block_invoke", "CoreLocation: %s\n", v2);
      goto LABEL_21;
    }
  }
}

void sub_18F3C94B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3C94DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onCallHandednessStateUpdated_, a1, a4, a5);
}

void sub_18F3C956C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  __int128 *v9;
  NSObject *v10;
  __int128 buf;
  uint64_t *(*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16))
  {
    if (qword_1EE16E8B8 != -1)
      dispatch_once(&qword_1EE16E8B8, &unk_1E2953B48);
    v2 = qword_1EE16E8B0;
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
    v4 = sub_18F204AE4();
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3221225472;
    v12 = sub_18F1F5EE0;
    v13 = &unk_1E2956E98;
    v16 = 0;
    v14 = v2;
    v15 = v3;
    sub_18F1F5E28(v4, (uint64_t)&buf);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v5 = *(_QWORD *)(a1 + 32);
    }
    *(_QWORD *)(v5 + 16) = 0;
    if (qword_1EE16D3E8 != -1)
      dispatch_once(&qword_1EE16D3E8, &unk_1E29532A8);
    v7 = qword_1EE16D3D8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D3D8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 40);
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_DEFAULT, "Stopped CallHandedness updates. Current Time: %f", (uint8_t *)&buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE16D3E8 != -1)
        dispatch_once(&qword_1EE16D3E8, &unk_1E29532A8);
      v9 = (__int128 *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMCallHandednessManager stopCallHandednessUpdates]_block_invoke", "CoreLocation: %s\n");
LABEL_23:
      if (v9 != &buf)
        free(v9);
    }
  }
  else
  {
    if (qword_1EE16D3E8 != -1)
      dispatch_once(&qword_1EE16D3E8, &unk_1E29532A8);
    v10 = qword_1EE16D3D8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D3D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_ERROR, "CallHandedness service already stopped!", (uint8_t *)&buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE16D3E8 != -1)
        dispatch_once(&qword_1EE16D3E8, &unk_1E29532A8);
      v9 = (__int128 *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMCallHandednessManager stopCallHandednessUpdates]_block_invoke", "CoreLocation: %s\n");
      goto LABEL_23;
    }
  }
}

uint64_t sub_18F3C9A54(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  char *v12;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D3E0 != -1)
    dispatch_once(&qword_1EE16D3E0, &unk_1E2954FE8);
  v2 = qword_1EE16D3D0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D3D0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 134217984;
    v14 = v3;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "CallHandedness Detection: %ld", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D3E0 != -1)
      dispatch_once(&qword_1EE16D3E0, &unk_1E2954FE8);
    v12 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMCallHandednessManager onCallHandednessStateUpdated:]_block_invoke", "CoreLocation: %s\n", v12);
    if (v12 != (char *)buf)
      free(v12);
  }
  v8 = (void *)objc_msgSend_delegate(*(void **)(a1 + 32), v4, v5, v6, v7);
  return objc_msgSend_callHandednessManager_didUpdateState_(v8, v9, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v10);
}

os_log_t sub_18F3C9C24()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Gesture");
  qword_1EE16D3D8 = (uint64_t)result;
  return result;
}

os_log_t sub_18F3C9C50()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1EE16D3D0 = (uint64_t)result;
  return result;
}

void sub_18F3C9C80(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3C9CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

uint64_t sub_18F3CA034()
{
  uint64_t result;
  uint64_t v1;

  result = sub_18F1F7BFC();
  if ((result & 0x200000000) != 0)
  {
    if (sub_18F376B08())
    {
      v1 = operator new();
      *(_OWORD *)v1 = 0u;
      *(_OWORD *)(v1 + 16) = 0u;
      *(_OWORD *)(v1 + 32) = 0u;
      *(_OWORD *)(v1 + 48) = 0u;
      *(_OWORD *)(v1 + 64) = 0u;
      *(_QWORD *)(v1 + 80) = 0;
      result = sub_18F1E61EC(v1, (uint64_t)"CMPickupService", 1);
      *(_BYTE *)(v1 + 32) = 0;
      *(_QWORD *)v1 = &off_1E294B7A8;
      *(_QWORD *)(v1 + 40) = &unk_1E294B800;
      *(_OWORD *)(v1 + 48) = 0u;
      *(_OWORD *)(v1 + 64) = 0u;
      *(_BYTE *)(v1 + 80) = 0;
    }
    else
    {
      v1 = operator new();
      *(_OWORD *)v1 = 0u;
      *(_OWORD *)(v1 + 16) = 0u;
      *(_OWORD *)(v1 + 32) = 0u;
      *(_QWORD *)(v1 + 48) = 0;
      result = sub_18F1E61EC(v1, (uint64_t)"CMPickupService", 1);
      *(_BYTE *)(v1 + 32) = 0;
      *(_QWORD *)v1 = &off_1E294A8B0;
      *(_QWORD *)(v1 + 40) = 0;
    }
    qword_1EE16E950 = v1;
  }
  return result;
}

void sub_18F3CA124(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x10F1C40926F10A7);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F3CA15C(_QWORD *a1)
{
  *a1 = off_1E294A028;
  sub_18F3CA1A0((uint64_t)a1, 0, 0);
  return sub_18F3DB8A0(a1);
}

void sub_18F3CA1A0(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v3;
  NSObject *v4;
  uint8_t *v5;
  NSObject *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a2)
    return;
  if (a3 == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    if (qword_1EE16D3E8 != -1)
      dispatch_once(&qword_1EE16D3E8, &unk_1E29551E8);
    v4 = qword_1EE16D3D8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D3D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v8 = 1;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEBUG, "CMPickupService started, %zd", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D3E8 == -1)
      {
LABEL_18:
        v5 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual void CMPickupService::numberOfSpectatorsChanged(int, size_t)", "CoreLocation: %s\n");
LABEL_27:
        if (v5 != buf)
          free(v5);
        return;
      }
LABEL_29:
      dispatch_once(&qword_1EE16D3E8, &unk_1E29551E8);
      goto LABEL_18;
    }
  }
  else if (a3)
  {
    if (qword_1EE16D3E8 != -1)
      dispatch_once(&qword_1EE16D3E8, &unk_1E29551E8);
    v6 = qword_1EE16D3D8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D3D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_ERROR, "CMPickupService expects only 1 client", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D3E8 != -1)
        dispatch_once(&qword_1EE16D3E8, &unk_1E29551E8);
      v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual void CMPickupService::numberOfSpectatorsChanged(int, size_t)", "CoreLocation: %s\n");
      goto LABEL_27;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    if (qword_1EE16D3E8 != -1)
      dispatch_once(&qword_1EE16D3E8, &unk_1E29551E8);
    v3 = qword_1EE16D3D8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D3D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v8 = 0;
      _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEBUG, "CMPickupService stopped, %zd", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D3E8 == -1)
        goto LABEL_18;
      goto LABEL_29;
    }
  }
}

os_log_t sub_18F3CA574()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Gesture");
  qword_1EE16D3D8 = (uint64_t)result;
  return result;
}

double sub_18F3CAB44()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  sub_18F1E61EC(v0, (uint64_t)"CLAccessoryMagnetometer", 2);
  *(_WORD *)(v0 + 28) = 256;
  *(_BYTE *)(v0 + 30) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 56) = 0x8300000020;
  result = 0.0;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)v0 = &off_1E294AF28;
  *(_DWORD *)(v0 + 100) = 0x800000;
  qword_1EE16E960 = v0;
  return result;
}

void sub_18F3CABD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x10F1C40E7E486F4);
  _Unwind_Resume(a1);
}

void sub_18F3CABF8(_QWORD *a1)
{
  sub_18F4A2ABC(a1);
  JUMPOUT(0x194001438);
}

double sub_18F3CAC1C(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  char *v6;
  NSObject *v9;
  double v10;
  double v11;
  uint64_t v12;
  char *v14;
  uint8_t buf[4];
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2954628);
    v4 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v16) = a2;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "[AccessoryMagnetometer] Unrecognized update interval notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E2954628);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryMagnetometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  else
  {
    sub_18F4A461C(a1);
    if (*a3 > 0.0)
      *(_BYTE *)(a1 + 30) = 0;
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2954628);
    v9 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_INFO))
    {
      v10 = *a3;
      *(_DWORD *)buf = 134349056;
      v16 = v10;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_INFO, "[AccessoryMagnetometer] Setting update interval to %{public}f", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E2954628);
      v14 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryMagnetometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
    v11 = rint(*a3 * 1000000.0);
    if (*a3 < 0.0)
      v12 = 0;
    else
      v12 = (uint64_t)v11;
    sub_18F203AF8(*(_QWORD *)(a1 + 32), v12);
    return *a3;
  }
  return v5;
}

double sub_18F3CAF70(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  char *v6;
  NSObject *v9;
  double v10;
  char *v12;
  uint8_t buf[4];
  double v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2954628);
    v4 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v14) = a2;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "[AccessoryMagnetometer] Unrecognized batch interval notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E2954628);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryMagnetometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  else
  {
    sub_18F4A461C(a1);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2954628);
    v9 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_INFO))
    {
      v10 = *a3;
      *(_DWORD *)buf = 134349056;
      v14 = v10;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_INFO, "[AccessoryMagnetometer] Setting batch interval to %{public}f", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E2954628);
      v12 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryMagnetometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
    sub_18F203A68(*(_QWORD *)(a1 + 32), *a3);
    return *a3;
  }
  return v5;
}

uint64_t sub_18F3CB298(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_18F3CB2D8(uint64_t a1)
{
  double v2;
  float v3;
  double v4;
  float v5;
  double v6;
  float v7;
  unint64_t TimeStamp;
  double v9;
  unsigned __int16 IntegerValue;
  uint64_t v11;
  float v12;
  NSObject *v13;
  NSObject *v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  char *v22;
  char *v23;
  double v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  unsigned __int16 v29;
  float v30;
  NSObject v31;
  _BYTE v32[10];
  __int16 v33;
  double v34;
  __int16 v35;
  _BYTE v36[10];
  double v37;
  __int16 v38;
  _BYTE v39[10];
  double v40;
  int v41;
  int v42;
  __int16 v43;
  _BYTE *v44;
  __int16 v45;
  _BYTE *v46;
  uint8_t buf[4];
  int isa;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  double v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  if (IOHIDEventGetType() == 21)
  {
    IOHIDEventGetFloatValue();
    v3 = v2;
    v25 = v3;
    IOHIDEventGetFloatValue();
    v5 = v4;
    v26 = v5;
    IOHIDEventGetFloatValue();
    v7 = v6;
    v27 = v7;
    TimeStamp = IOHIDEventGetTimeStamp();
    v9 = sub_18F1FD20C(TimeStamp);
    v24 = v9;
    IntegerValue = IOHIDEventGetIntegerValue();
    v29 = IntegerValue;
    v11 = sub_18F4E3A64();
    v28 = v11;
    v12 = *(float *)(a1 + 100);
    v30 = v12;
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2954628);
    v13 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67241728;
      isa = IntegerValue;
      v49 = 2050;
      v50 = v3;
      v51 = 2050;
      v52 = v5;
      v53 = 2050;
      v54 = v7;
      v55 = 2050;
      v56 = v12;
      v57 = 2050;
      v58 = v11;
      v59 = 2050;
      v60 = v9;
      _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_DEBUG, "[AccessoryMagnetometer] seq,%{public}d,x,%{public}20.20f,y,%{public}20.20f,z,%{public}20.20f,temp,%{public}20.20f,sensorTime,%{public}llu,timestamp,%{public}20.20f", buf, 0x44u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E2954628);
      LODWORD(v31.isa) = 67241728;
      HIDWORD(v31.isa) = IntegerValue;
      *(_WORD *)v32 = 2050;
      *(double *)&v32[2] = v3;
      v33 = 2050;
      v34 = v5;
      v35 = 2050;
      *(double *)v36 = v7;
      *(_WORD *)&v36[8] = 2050;
      v37 = v12;
      v38 = 2050;
      *(_QWORD *)v39 = v11;
      *(_WORD *)&v39[8] = 2050;
      v40 = v9;
      v19 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLAccessoryMagnetometer::onEventData(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
    sub_18F1FD2C8(a1, 0, (uint64_t)&v24, 40);
    if (!*(_BYTE *)(a1 + 30))
    {
      *(_BYTE *)(a1 + 30) = 1;
      LODWORD(v31.isa) = 0;
      sub_18F270374(v32, "N/A");
      sub_18F270374(&v36[2], "N/A");
      *(_DWORD *)&v39[6] = 0;
      if (sub_18F4A4B24((const char *)a1, &v31))
      {
        if (qword_1ECEDEE38 != -1)
          dispatch_once(&qword_1ECEDEE38, &unk_1E2954628);
        v14 = qword_1ECEDEE30;
        if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEBUG))
        {
          if (v36[1] >= 0)
            v15 = COERCE_DOUBLE(v32);
          else
            v15 = *(double *)v32;
          if (v39[5] >= 0)
            v16 = COERCE_DOUBLE(&v36[2]);
          else
            v16 = *(double *)&v36[2];
          *(_DWORD *)buf = 67240707;
          isa = (int)v31.isa;
          v49 = 2081;
          v50 = v15;
          v51 = 2081;
          v52 = v16;
          _os_log_impl(&dword_18F1DC000, v14, OS_LOG_TYPE_DEBUG, "[AccessoryMagnetometer] config,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s", buf, 0x1Cu);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE38 != -1)
            dispatch_once(&qword_1ECEDEE38, &unk_1E2954628);
          if (v36[1] >= 0)
            v20 = v32;
          else
            v20 = *(_BYTE **)v32;
          if (v39[5] >= 0)
            v21 = &v36[2];
          else
            v21 = *(_BYTE **)&v36[2];
          v41 = 67240707;
          v42 = (int)v31.isa;
          v43 = 2081;
          v44 = v20;
          v45 = 2081;
          v46 = v21;
          v22 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "void CLAccessoryMagnetometer::onMagnetometerData(const Sample &)", "CoreLocation: %s\n", v22);
          if (v22 != (char *)buf)
            free(v22);
        }
        sub_18F1FD2C8(a1, 1, (uint64_t)&v31, 64);
      }
      else
      {
        if (qword_1ECEDEE38 != -1)
          dispatch_once(&qword_1ECEDEE38, &unk_1E2954628);
        v18 = qword_1ECEDEE30;
        if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_FAULT, "[AccessoryMagnetometer] Service not found!", buf, 2u);
        }
        if (sub_18F1FCA08(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE38 != -1)
            dispatch_once(&qword_1ECEDEE38, &unk_1E2954628);
          LOWORD(v41) = 0;
          v23 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "void CLAccessoryMagnetometer::onMagnetometerData(const Sample &)", "CoreLocation: %s\n", v23);
          if (v23 != (char *)buf)
            free(v23);
        }
      }
      if ((v39[5] & 0x80000000) != 0)
        operator delete(*(void **)&v36[2]);
      if ((v36[1] & 0x80000000) != 0)
        operator delete(*(void **)v32);
    }
  }
  else if (IOHIDEventGetType() == 15)
  {
    IOHIDEventGetFloatValue();
    *(float *)&v17 = v17;
    *(_DWORD *)(a1 + 100) = LODWORD(v17);
  }
}

void sub_18F3CB970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_18F3CB298((uint64_t)&a17);
  _Unwind_Resume(a1);
}

os_log_t sub_18F3CB9B0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Accessory");
  qword_1ECEDEE30 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F3CB9DC(_QWORD *a1)
{
  *a1 = &off_1E294AC98;
  sub_18F3CBA50(a1 + 3);
  return a1;
}

void sub_18F3CBA10(_QWORD *a1)
{
  *a1 = &off_1E294AC98;
  sub_18F3CBA50(a1 + 3);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3CBA50(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_18F1EB148((uint64_t)a1);
}

uint64_t sub_18F3CBAE4(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x400)
    a2 = 1;
  if (v2 < 0x800)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

void sub_18F3CBFC4(uint64_t a1)
{
  NSObject *v1;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 56) = xmmword_18F5068C0;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953308);
  v1 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v1, OS_LOG_TYPE_DEBUG, "[SitStandDetector] Set linkModel initial angles from LyingDown state", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953308);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMSitStandDetector::setLinkModelJointAngles(const EventT *) [T = CMSitStandDetector::ELyingDown]", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
}

void sub_18F3CC154()
{
  NSObject *v0;
  char *v1;
  uint8_t buf[1640];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953308);
  v0 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v0, OS_LOG_TYPE_INFO, "[SitStandDetector] resetFSM forced FSM to init state.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953308);
    v1 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMSitStandDetector::logReset(const EventT *) [T = CMSitStandDetector::EReset]", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf)
      free(v1);
  }
}

uint64_t sub_18F3CC2D8(uint64_t a1, float a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int16 v13;
  NSObject *v14;
  unint64_t v15;
  const char *v16;
  char *v18;
  uint8_t buf[4];
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &unk_1E29452A8;
  *(_QWORD *)(a1 + 8) = 9;
  *(_WORD *)(a1 + 16) = 512;
  v3 = a2;
  *(double *)(a1 + 24) = v3;
  v4 = a1 + 10592;
  *(float64x2_t *)(a1 + 32) = vmulq_n_f64((float64x2_t)xmmword_18F5068D0, v3);
  *(double *)(a1 + 48) = v3 * 0.3;
  *(_OWORD *)(a1 + 56) = xmmword_18F5068E0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_BYTE *)(a1 + 92) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 116) = 0;
  *(_QWORD *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 124) = 0x6400000000;
  *(_BYTE *)(a1 + 532) = 1;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 560) = 0x6400000000;
  *(_QWORD *)(a1 + 968) = 0x6400000000;
  *(_QWORD *)(a1 + 1776) = 0x6400000000;
  *(_QWORD *)(a1 + 4984) = 0x6400000000;
  *(_BYTE *)(a1 + 10592) = 1;
  *(_QWORD *)(a1 + 10612) = 0;
  *(_QWORD *)(a1 + 10604) = 0;
  *(_QWORD *)(a1 + 10620) = 0x200000000;
  *(_BYTE *)(a1 + 10636) = 1;
  *(_QWORD *)(a1 + 10648) = 0;
  *(_QWORD *)(a1 + 10656) = 0;
  *(_QWORD *)(a1 + 10664) = 0x200000000;
  *(_BYTE *)(a1 + 10680) = 1;
  *(_QWORD *)(a1 + 10692) = 0;
  v5 = a1 + 10692;
  *(_QWORD *)(a1 + 10708) = 0x700000000;
  *(_QWORD *)(a1 + 10700) = 0;
  *(_BYTE *)(a1 + 10744) = 1;
  *(_QWORD *)(a1 + 10756) = 0;
  v6 = a1 + 10756;
  *(_QWORD *)(a1 + 10764) = 0;
  *(_QWORD *)(a1 + 10772) = 0x700000000;
  *(_BYTE *)(a1 + 10816) = 0;
  *(_QWORD *)(a1 + 10808) = 0;
  *(_OWORD *)(a1 + 10840) = 0u;
  *(_OWORD *)(a1 + 10856) = 0u;
  *(_OWORD *)(a1 + 10824) = 0u;
  *(_QWORD *)(a1 + 10872) = 0x3F80000000000000;
  sub_18F1FFE94((float32x4_t *)(a1 + 10864), (float32x4_t)0);
  *(_OWORD *)(a1 + 10912) = 0u;
  *(_OWORD *)(a1 + 10896) = 0u;
  *(_OWORD *)(a1 + 10880) = 0u;
  sub_18F3CC710(a1);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_DWORD *)(v5 + 16) = 0;
  *(_BYTE *)(v4 + 88) = 1;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 16) = 0;
  *(_BYTE *)(v4 + 152) = 1;
  LODWORD(v7) = *(_DWORD *)(a1 + 4988);
  if ((_DWORD)v7)
  {
    v8 = 0;
    LOWORD(v9) = *(_WORD *)(a1 + 4986);
    do
    {
      v10 = *(unsigned __int16 *)(a1 + 4984) + (unint64_t)(unsigned __int16)v9;
      if (v10 >= v7)
        v7 = v7;
      else
        v7 = 0;
      v11 = a1 + 4992 + 56 * (v10 - v7);
      *(_QWORD *)(v11 + 48) = 0;
      *(_OWORD *)v11 = 0uLL;
      *(_OWORD *)(v11 + 16) = 0uLL;
      *(_OWORD *)(v11 + 32) = 0uLL;
      v9 = *(unsigned __int16 *)(a1 + 4986);
      v7 = *(unsigned int *)(a1 + 4988);
      if (v7 <= v9)
      {
        v12 = *(unsigned __int16 *)(a1 + 4984) + 1;
        if (v12 >= v7)
          v13 = *(_DWORD *)(a1 + 4988);
        else
          v13 = 0;
        *(_WORD *)(a1 + 4984) = v12 - v13;
      }
      else
      {
        LOWORD(v9) = v9 + 1;
        *(_WORD *)(a1 + 4986) = v9;
      }
      ++v8;
    }
    while (v7 > v8);
  }
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953308);
  v14 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
  {
    v15 = *(char *)(a1 + 16);
    if (v15 > 3)
      v16 = "Unknown";
    else
      v16 = off_1E2956CE8[v15];
    *(_DWORD *)buf = 136315138;
    v20 = v16;
    _os_log_impl(&dword_18F1DC000, v14, OS_LOG_TYPE_INFO, "[SitStandDetector] Starting sit-stand detector from state %s", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953308);
    v18 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CMSitStandDetector::CMSitStandDetector(float)", "CoreLocation: %s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
  return a1;
}

void sub_18F3CC6C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = 0;
  v4 = v1 + 10904;
  while (1)
  {
    v5 = *(_QWORD *)(v4 + v3);
    *(_QWORD *)(v4 + v3) = 0;
    if (v5)
      MEMORY[0x194001438](v5, 0x1000C40FF89C88ELL);
    v3 -= 8;
    if (v3 == -24)
      _Unwind_Resume(exception_object);
  }
}

BOOL sub_18F3CC710(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  int *v4;
  uint64_t j;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float **v9;
  int v10;
  _BOOL8 result;

  for (i = 0; i != 3; ++i)
  {
    v3 = operator new();
    *(_OWORD *)v3 = xmmword_18F503FB0;
    v4 = &dword_18F506F48;
    for (j = 52; j != 32; j -= 4)
    {
      v6 = *v4++;
      *(_DWORD *)(v3 + j) = v6;
    }
    *(float *)(v3 + 40) = -*(float *)(v3 + 40);
    *(float *)(v3 + 48) = -*(float *)(v3 + 48);
    *(_OWORD *)(v3 + 56) = *(_OWORD *)(v3 + 36);
    v7 = a1 + 8 * i;
    v8 = *(_QWORD *)(v7 + 10888);
    *(_QWORD *)(v7 + 10888) = v3;
    if (v8)
      MEMORY[0x194001438](v8, 0x1000C40FF89C88ELL);
    v9 = (float **)(v7 + 10888);
    v10 = 4;
    do
    {
      result = sub_18F33F604(*v9, 0.0);
      --v10;
    }
    while (v10);
  }
  return result;
}

void sub_18F3CC810(uint64_t a1, char a2, uint64_t a3)
{
  char v5;
  unsigned __int8 v6;
  void (*v7)(uint64_t, uint64_t);
  NSObject *v8;
  char *v9;
  char v10;
  uint8_t buf[1640];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 16) == 2)
  {
    *(_BYTE *)(a1 + 92) = 0;
    return;
  }
  if ((a2 & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 92))
      return;
    v5 = -1;
  }
  v6 = v5 + *(_BYTE *)(a1 + 92);
  *(_BYTE *)(a1 + 92) = v6;
  if (v6 >= 2u)
  {
    sub_18F4E7CF0(a1, 2, (uint64_t)&v10);
    v7 = *(void (**)(uint64_t, uint64_t))(a1 + 10912);
    if (v7 && *(_QWORD *)(a1 + 10920))
      v7(1, a3);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953308);
    v8 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_DEBUG, "[SitStandDetector] Walking detection forced FSM to standing state.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953308);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMSitStandDetector::walkingDetectorCallback(BOOL, uint64_t)", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
}

void sub_18F3CCA08(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t, uint64_t);
  NSObject *v5;
  char *v6;
  char v7;
  uint8_t buf[1640];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned __int8 *)(a1 + 16) | 2) == 2)
  {
    sub_18F4E7CF0(a1, 1, (uint64_t)&v7);
    v4 = *(void (**)(uint64_t, uint64_t))(a1 + 10912);
    if (v4 && *(_QWORD *)(a1 + 10920))
      v4(2, a2);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953308);
    v5 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_DEBUG, "[SitStandDetector] Strict period of head static forced FSM from standing/init state to sitting state.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953308);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMSitStandDetector::auxSustainedStaticEventCallback(uint64_t)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
}

uint64_t sub_18F3CCBCC(uint64_t a1, float *a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  _BYTE *v6;
  unsigned __int8 v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  double v11;
  double *v12;
  uint64_t v13;
  double v14;
  double *v15;
  uint64_t v16;
  double v17;
  double *v18;
  double v19;
  float v20;
  unsigned __int16 *v21;
  float *v23;
  int v24;
  float *v25;
  int v26;
  float *v27;
  int v28;
  int v29;
  float *v30;
  float v31;
  float v32;

  v3 = atomic_load((unsigned __int8 *)&unk_1ECEDF1A0);
  if ((v3 & 1) == 0)
  {
    v23 = a2;
    v24 = __cxa_guard_acquire((__guard *)&unk_1ECEDF1A0);
    a2 = v23;
    if (v24)
    {
      xmmword_1ECEDF348 = xmmword_18F5069B8;
      unk_1ECEDF358 = unk_18F5069C8;
      xmmword_1ECEDF368 = xmmword_18F5069D8;
      unk_1ECEDF378 = unk_18F5069E8;
      xmmword_1ECEDF308 = xmmword_18F506978;
      unk_1ECEDF318 = unk_18F506988;
      xmmword_1ECEDF328 = xmmword_18F506998;
      unk_1ECEDF338 = unk_18F5069A8;
      xmmword_1ECEDF2C8 = xmmword_18F506938;
      unk_1ECEDF2D8 = unk_18F506948;
      xmmword_1ECEDF2E8 = xmmword_18F506958;
      unk_1ECEDF2F8 = unk_18F506968;
      __cxa_guard_release((__guard *)&unk_1ECEDF1A0);
      a2 = v23;
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_1ECEDF1A8);
  if ((v4 & 1) == 0)
  {
    v25 = a2;
    v26 = __cxa_guard_acquire(&qword_1ECEDF1A8);
    a2 = v25;
    if (v26)
    {
      memcpy(&qword_1ECEDF6F8, &unk_18F5069F8, 0x110uLL);
      __cxa_guard_release(&qword_1ECEDF1A8);
      a2 = v25;
    }
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1ECEDF1B0);
  if ((v5 & 1) == 0)
  {
    v27 = a2;
    v28 = __cxa_guard_acquire(&qword_1ECEDF1B0);
    a2 = v27;
    if (v28)
    {
      xmmword_1ECEDF4E8 = xmmword_18F506BA8;
      unk_1ECEDF4F8 = unk_18F506BB8;
      xmmword_1ECEDF508 = xmmword_18F506BC8;
      xmmword_1ECEDF4A8 = xmmword_18F506B68;
      unk_1ECEDF4B8 = unk_18F506B78;
      xmmword_1ECEDF4C8 = xmmword_18F506B88;
      unk_1ECEDF4D8 = unk_18F506B98;
      xmmword_1ECEDF468 = xmmword_18F506B28;
      unk_1ECEDF478 = unk_18F506B38;
      xmmword_1ECEDF488 = xmmword_18F506B48;
      unk_1ECEDF498 = unk_18F506B58;
      xmmword_1ECEDF448 = xmmword_18F506B08;
      unk_1ECEDF458 = unk_18F506B18;
      __cxa_guard_release(&qword_1ECEDF1B0);
      a2 = v27;
    }
  }
  v6 = (_BYTE *)(a1 + 10592);
  v7 = atomic_load((unsigned __int8 *)&qword_1ECEDF1B8);
  if ((v7 & 1) == 0)
  {
    v30 = a2;
    v29 = __cxa_guard_acquire(&qword_1ECEDF1B8);
    a2 = v30;
    if (v29)
    {
      xmmword_1ECEDF6B8 = xmmword_18F506C98;
      xmmword_1ECEDF6C8 = unk_18F506CA8;
      xmmword_1ECEDF6D8 = xmmword_18F506CB8;
      xmmword_1ECEDF6E8 = unk_18F506CC8;
      xmmword_1ECEDF678 = xmmword_18F506C58;
      xmmword_1ECEDF688 = unk_18F506C68;
      xmmword_1ECEDF698 = xmmword_18F506C78;
      xmmword_1ECEDF6A8 = unk_18F506C88;
      xmmword_1ECEDF638 = xmmword_18F506C18;
      xmmword_1ECEDF648 = unk_18F506C28;
      xmmword_1ECEDF658 = xmmword_18F506C38;
      xmmword_1ECEDF668 = unk_18F506C48;
      xmmword_1ECEDF5F8 = xmmword_18F506BD8;
      xmmword_1ECEDF608 = unk_18F506BE8;
      xmmword_1ECEDF618 = xmmword_18F506BF8;
      xmmword_1ECEDF628 = unk_18F506C08;
      __cxa_guard_release(&qword_1ECEDF1B8);
      a2 = v30;
    }
  }
  v8 = 0;
  v9 = (double *)&xmmword_1ECEDF2C8;
  do
  {
    if (*v9 >= a2[2])
      break;
    ++v8;
    v9 += 2;
  }
  while (v8 != 12);
  v10 = 0;
  v11 = *((double *)&unk_1ECEDF1A0 + 2 * v8 + 38);
  v12 = (double *)&qword_1ECEDF6F8;
  do
  {
    if (*v12 >= a2[3])
      break;
    ++v10;
    v12 += 2;
  }
  while (v10 != 17);
  v13 = 0;
  v14 = v11 * *((double *)&unk_1ECEDF1A0 + 2 * v10 + 172);
  v15 = (double *)&xmmword_1ECEDF448;
  do
  {
    if (*v15 >= a2[6])
      break;
    ++v13;
    v15 += 2;
  }
  while (v13 != 13);
  v16 = 0;
  v17 = v14 * *((double *)&unk_1ECEDF1A0 + 2 * v13 + 86);
  v18 = (double *)&xmmword_1ECEDF5F8;
  do
  {
    if (*v18 >= a2[8])
      break;
    ++v16;
    v18 += 2;
  }
  while (v16 != 16);
  v19 = v17 * *((double *)&unk_1ECEDF1A0 + 2 * v16 + 140);
  if (a2[4] < 0.05)
    v19 = 0.0;
  v20 = v19;
  v32 = v20;
  sub_18F33D300((uint64_t)v6, &v32);
  if (*(_DWORD *)(a1 + 10624) != *(unsigned __int16 *)(a1 + 10622))
    return 0;
  if (*v6)
    sub_18F33FB38((uint64_t)v6);
  if (((v31 = *(float *)(a1 + 10596), v31 >= 40.0) || *(_WORD *)(a1 + 10710))
    && (sub_18F33D300(a1 + 10680, &v31),
        *(_QWORD *)(a1 + 10612) = 0,
        *(_QWORD *)(a1 + 10604) = 0,
        *(_DWORD *)(a1 + 10620) = 0,
        *v6 = 1,
        *(_DWORD *)(a1 + 10712) == *(unsigned __int16 *)(a1 + 10710))
    && (v21 = (unsigned __int16 *)(a1 + 10708),
        sub_18F3412D8(v21, (unsigned int (*)(float, float))sub_18F3414E0, 0) >= 20.0)
    && sub_18F3412D8(v21, (unsigned int (*)(float, float))sub_18F3414D4, 0) >= 40.0)
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_18F3CD00C(uint64_t a1, float *a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  _BYTE *v6;
  unsigned __int8 v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  double v11;
  double *v12;
  uint64_t v13;
  double v14;
  double *v15;
  uint64_t v16;
  double v17;
  double *v18;
  double v19;
  float v20;
  unsigned __int16 *v21;
  float *v23;
  int v24;
  float *v25;
  int v26;
  float *v27;
  int v28;
  float *v29;
  int v30;
  float v31;
  float v32;

  v3 = atomic_load((unsigned __int8 *)&qword_1ECEDF1C0);
  if ((v3 & 1) == 0)
  {
    v23 = a2;
    v24 = __cxa_guard_acquire(&qword_1ECEDF1C0);
    a2 = v23;
    if (v24)
    {
      unk_1ECEDF218 = xmmword_18F506CF8;
      unk_1ECEDF228 = unk_18F506D08;
      unk_1ECEDF238 = xmmword_18F506D18;
      unk_1ECEDF248 = unk_18F506D28;
      *(_OWORD *)&qword_1ECEDF1F8 = xmmword_18F506CD8;
      unk_1ECEDF208 = unk_18F506CE8;
      __cxa_guard_release(&qword_1ECEDF1C0);
      a2 = v23;
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_1ECEDF1C8);
  if ((v4 & 1) == 0)
  {
    v25 = a2;
    v26 = __cxa_guard_acquire(&qword_1ECEDF1C8);
    a2 = v25;
    if (v26)
    {
      xmmword_1ECEDF298 = xmmword_18F506D78;
      unk_1ECEDF2A8 = unk_18F506D88;
      xmmword_1ECEDF2B8 = xmmword_18F506D98;
      xmmword_1ECEDF258 = xmmword_18F506D38;
      unk_1ECEDF268 = unk_18F506D48;
      xmmword_1ECEDF278 = xmmword_18F506D58;
      unk_1ECEDF288 = unk_18F506D68;
      __cxa_guard_release(&qword_1ECEDF1C8);
      a2 = v25;
    }
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1ECEDF1D0);
  if ((v5 & 1) == 0)
  {
    v27 = a2;
    v28 = __cxa_guard_acquire(&qword_1ECEDF1D0);
    a2 = v27;
    if (v28)
    {
      xmmword_1ECEDF5B8 = xmmword_18F506E48;
      unk_1ECEDF5C8 = unk_18F506E58;
      xmmword_1ECEDF5D8 = xmmword_18F506E68;
      unk_1ECEDF5E8 = unk_18F506E78;
      xmmword_1ECEDF578 = xmmword_18F506E08;
      unk_1ECEDF588 = unk_18F506E18;
      xmmword_1ECEDF598 = xmmword_18F506E28;
      unk_1ECEDF5A8 = unk_18F506E38;
      xmmword_1ECEDF538 = xmmword_18F506DC8;
      unk_1ECEDF548 = unk_18F506DD8;
      xmmword_1ECEDF558 = xmmword_18F506DE8;
      unk_1ECEDF568 = unk_18F506DF8;
      xmmword_1ECEDF518 = xmmword_18F506DA8;
      unk_1ECEDF528 = unk_18F506DB8;
      __cxa_guard_release(&qword_1ECEDF1D0);
      a2 = v27;
    }
  }
  v6 = (_BYTE *)(a1 + 10636);
  v7 = atomic_load((unsigned __int8 *)&qword_1ECEDF1D8);
  if ((v7 & 1) == 0)
  {
    v29 = a2;
    v30 = __cxa_guard_acquire(&qword_1ECEDF1D8);
    a2 = v29;
    if (v30)
    {
      xmmword_1ECEDF408 = xmmword_18F506F08;
      unk_1ECEDF418 = unk_18F506F18;
      xmmword_1ECEDF428 = xmmword_18F506F28;
      unk_1ECEDF438 = unk_18F506F38;
      xmmword_1ECEDF3C8 = xmmword_18F506EC8;
      unk_1ECEDF3D8 = unk_18F506ED8;
      xmmword_1ECEDF3E8 = xmmword_18F506EE8;
      unk_1ECEDF3F8 = unk_18F506EF8;
      xmmword_1ECEDF388 = xmmword_18F506E88;
      unk_1ECEDF398 = unk_18F506E98;
      xmmword_1ECEDF3A8 = xmmword_18F506EA8;
      unk_1ECEDF3B8 = unk_18F506EB8;
      __cxa_guard_release(&qword_1ECEDF1D8);
      a2 = v29;
    }
  }
  v8 = 0;
  v9 = (double *)&qword_1ECEDF1F8;
  do
  {
    if (*v9 >= a2[2])
      break;
    ++v8;
    v9 += 2;
  }
  while (v8 != 6);
  v10 = 0;
  v11 = *((double *)&unk_1ECEDF1A0 + 2 * v8 + 12);
  v12 = (double *)&xmmword_1ECEDF258;
  do
  {
    if (*v12 >= a2[3])
      break;
    ++v10;
    v12 += 2;
  }
  while (v10 != 7);
  v13 = 0;
  v14 = v11 * *((double *)&unk_1ECEDF1A0 + 2 * v10 + 24);
  v15 = (double *)&xmmword_1ECEDF518;
  do
  {
    if (*v15 >= a2[5])
      break;
    ++v13;
    v15 += 2;
  }
  while (v13 != 14);
  v16 = 0;
  v17 = v14 * *((double *)&unk_1ECEDF1A0 + 2 * v13 + 112);
  v18 = (double *)&xmmword_1ECEDF388;
  do
  {
    if (*v18 >= a2[7])
      break;
    ++v16;
    v18 += 2;
  }
  while (v16 != 12);
  v19 = v17 * *((double *)&unk_1ECEDF1A0 + 2 * v16 + 62);
  if (a2[4] < 0.05)
    v19 = 0.0;
  v20 = v19;
  v32 = v20;
  sub_18F33D300((uint64_t)v6, &v32);
  if (*(_DWORD *)(a1 + 10668) != *(unsigned __int16 *)(a1 + 10666))
    return 0;
  if (*v6)
    sub_18F33FB38((uint64_t)v6);
  if (((v31 = *(float *)(a1 + 10640), v31 >= 25.0) || *(_WORD *)(a1 + 10774))
    && (sub_18F33D300(a1 + 10744, &v31),
        *(_QWORD *)(a1 + 10656) = 0,
        *(_QWORD *)(a1 + 10648) = 0,
        *(_DWORD *)(a1 + 10664) = 0,
        *v6 = 1,
        *(_DWORD *)(a1 + 10776) == *(unsigned __int16 *)(a1 + 10774))
    && (v21 = (unsigned __int16 *)(a1 + 10772),
        sub_18F3412D8(v21, (unsigned int (*)(float, float))sub_18F3414E0, 0) >= 15.0)
    && sub_18F3412D8(v21, (unsigned int (*)(float, float))sub_18F3414D4, 0) >= 25.0)
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

double sub_18F3CD3DC(uint64_t a1, float32x2_t *a2, float32x4_t a3)
{
  unsigned __int8 v5;
  __int32 v6;
  unsigned int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t i;
  unsigned int v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  double v28;
  float32x4_t v30;
  float32x4_t v31;

  v5 = atomic_load((unsigned __int8 *)&qword_1ECEDF1E0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF1E0))
  {
    qword_1ECEDF1E8 = 0;
    dword_1ECEDF1F0 = -1082130432;
    __cxa_guard_release(&qword_1ECEDF1E0);
  }
  v6 = a2[5].i32[1];
  *(float *)&v7 = -a2[5].f32[0];
  *(float32x2_t *)a3.f32 = vneg_f32(a2[4]);
  v31.i64[0] = a3.i64[0];
  v31.i64[1] = __PAIR64__(v6, v7);
  sub_18F1FFE94(&v31, a3);
  v8 = sub_18F3D39F4(v31.f32, -a2[2].f32[1], -a2[3].f32[0], -a2[3].f32[1]);
  v10 = v9;
  v12 = v11;
  v13 = 0.0;
  for (i = 5; i != 8; ++i)
    v13 = v13 + (float)(a2->f32[i] * a2->f32[i]);
  v31.i32[0] = sqrtf(v13);
  sub_18F33D300(a1 + 96, v31.f32);
  v15 = *(_DWORD *)(a1 + 88);
  v16.f32[0] = -*(float *)(a1 + 84);
  *(float32x2_t *)v30.f32 = vneg_f32(*(float32x2_t *)(a1 + 76));
  v30.i64[1] = __PAIR64__(v15, v16.u32[0]);
  v17 = sub_18F1FFE94(&v30, v16);
  sub_18F3D3764((uint64_t)&v30, (float *)&a2[4], &v31, v17);
  v18 = sub_18F3D39F4(v31.f32, v8, v10, 0.0);
  v20 = v19;
  v22 = v21;
  sub_18F3D39F4(v31.f32, *(float *)&qword_1ECEDF1E8, *((float *)&qword_1ECEDF1E8 + 1), *(float *)&dword_1ECEDF1F0);
  v23 = sqrtf((float)(v22 * v22) + (float)(v20 * v20));
  if (v25 >= (float)-v24)
    v26 = v20;
  else
    v26 = v22;
  v27 = v23 * (float)(int)((__PAIR64__(v26 > 0.0, LODWORD(v26)) - COERCE_UNSIGNED_INT(0.0)) >> 32);
  v28 = *(double *)a2;
  v30.f32[0] = v12;
  sub_18F33D300(a1 + 532, v30.f32);
  sub_18F33F604(*(float **)(a1 + 10888), v27);
  sub_18F33F604(*(float **)(a1 + 10896), v18);
  sub_18F33F604(*(float **)(a1 + 10904), v12);
  return v28;
}

void sub_18F3CD60C(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  __double2 v5;
  double v6;
  __double2 v7;
  unint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  float *v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  float *v17;
  double v18;
  __double2 v19;
  float v20;
  float v21;
  double v22;
  __double2 v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  long double v28;
  long double v29;
  double v30;
  float v31;
  double v32;
  double v33;
  long double v34;
  long double v35;
  double v36;
  long double v37;
  double v38;
  long double v39;
  long double v40;
  float v41;
  float v42;
  float v43;
  long double v44;
  long double v45;
  float v46;

  v2 = *(double *)(a1 + 64);
  v3 = 3.14159265 - *(double *)(a1 + 56);
  v4 = *(double *)(a1 + 32);
  v5 = __sincos_stret(v3);
  v6 = *(double *)(a1 + 40);
  v7 = __sincos_stret(v3 + v2);
  if (*(_WORD *)(a1 + 1778))
  {
    v8 = 0;
    v9 = -(v6 * v7.__cosval) - v4 * v5.__cosval;
    v10 = v6 * v7.__sinval + v4 * v5.__sinval;
    v41 = v10;
    v42 = v9;
    do
    {
      if (v8)
      {
        v11 = sub_18F3CF8EC((unsigned __int16 *)(a1 + 4984), v8 - 1);
        v12 = (float *)sub_18F394438((unsigned __int16 *)(a1 + 968), v8);
        v13 = *(float *)(v11 + 8) + *v12;
        v14 = *(float *)(v11 + 12) + v12[1];
        v15 = (float *)sub_18F394438((unsigned __int16 *)(a1 + 968), v8 - 1);
        v43 = v13 - *v15;
        v16 = v14 - v15[1];
      }
      else
      {
        v17 = (float *)sub_18F394438((unsigned __int16 *)(a1 + 968), 0);
        v43 = *v17 + v42;
        v16 = v17[1] + v41;
      }
      v46 = v16;
      v18 = *(double *)(a1 + 32);
      v19 = __sincos_stret(v3);
      v20 = -(v18 * v19.__cosval);
      v21 = v19.__sinval * v18;
      v22 = *(double *)(a1 + 40);
      v23 = __sincos_stret(v3 + v2);
      v24 = -(v22 * v23.__cosval) - v18 * v19.__cosval;
      v25 = v23.__sinval * v22 + v18 * v19.__sinval;
      v26 = *(_QWORD *)sub_18F3CFAE8((unsigned __int16 *)(a1 + 1776), v8);
      v27 = sub_18F3CF8EC((unsigned __int16 *)(a1 + 4984), v8);
      *(_QWORD *)v27 = v26;
      *(float *)(v27 + 8) = v24;
      *(float *)(v27 + 12) = v25;
      *(float *)(v27 + 16) = v20;
      *(float *)(v27 + 20) = v21;
      *(_QWORD *)(v27 + 24) = 0;
      *(double *)(v27 + 32) = 3.14159265 - v3;
      *(double *)(v27 + 40) = v2;
      *(double *)(v27 + 48) = v3 + 1.57079633;
      v28 = *(double *)(a1 + 32);
      v29 = pow(v28, 4.0);
      v45 = v28 * v28;
      v30 = *(double *)(a1 + 40) * *(double *)(a1 + 40);
      v44 = *(double *)(a1 + 40);
      v31 = v43;
      v32 = (float)(v31 * v31);
      v33 = (float)(v46 * v46);
      v34 = (v45 + v45) * v32
          - (v29
           - (v45 + v45) * v30)
          + (v45 + v45) * v33
          - pow(v44, 4.0)
          - (float)((float)(v46 * v46) * (float)((float)(v31 * v31) + (float)(v31 * v31)))
          + (v30 + v30) * v32
          + (v30 + v30) * v33;
      v35 = v34 - pow(v43, 4.0);
      v36 = sqrt(v35 - pow(v46, 4.0));
      v37 = atan(-(v36 - (v28 + v28) * v46) / (v28 * v28 + v28 * -2.0 * v43 - v30 + v32 + v33));
      v38 = v37 + v37;
      v39 = (v28 + v28) * v44 - v28 * v28 - v30 + v32 + v33;
      v40 = atan(sqrt(v39 * (v28 * v28 + (v28 + v28) * v44 + v30 - v32 - v33)) / v39);
      v3 = v38;
      v2 = v40 + v40;
      ++v8;
    }
    while (v8 < *(unsigned __int16 *)(a1 + 1778));
  }
}

void sub_18F3CD928(uint64_t a1, uint64_t a2)
{
  unint64_t v9;
  unsigned __int16 *v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  float v23;
  float v24;
  float v25;
  float64x2_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  NSObject *v32;
  char *v33;
  double v34;
  float v35;
  double v36;
  double v37;
  unint64_t v38;
  double v39;
  float v40;
  double v41;
  double v42;
  __int128 v43;
  float64_t v44;
  uint8_t buf[48];
  double v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(a1 + 28) = _D0;
  if (*(_WORD *)(a2 + 1778))
  {
    v9 = 0;
    v10 = (unsigned __int16 *)(a2 + 1776);
    v11 = 0.0;
    v12 = 0.0;
    do
    {
      v13 = sub_18F3CFAE8(v10, v9);
      v11 = v11 + *(double *)(v13 + 8) * *(double *)(v13 + 8);
      v14 = sub_18F3CFAE8(v10, v9);
      v12 = v12 + *(double *)(v14 + 16) * *(double *)(v14 + 16);
      ++v9;
    }
    while (v9 < *(unsigned __int16 *)(a2 + 1778));
    v15 = sub_18F3CDD7C(v10, (unsigned int (*)(double, double, double, double, double, double, double, double))sub_18F3CDFC0);
    v17 = v16;
    v18 = sub_18F3CDD7C(v10, (unsigned int (*)(double, double, double, double, double, double, double, double))sub_18F3CDFCC);
    v20 = *(unsigned __int8 *)(a2 + 96);
    v21 = *(unsigned __int16 *)(a2 + 1776) + (unint64_t)*(unsigned __int16 *)(a2 + 1778) - 1;
    v22 = *(unsigned int *)(a2 + 1780);
    if (v21 < v22)
      v22 = 0;
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 1776 + 32 * (v21 - v22) + 8);
    v23 = v12;
    v24 = v11 + 0.000000999999997;
    v25 = (v19 - v17) * (double)((v18 - v15 > 0.0) - (v18 - v15 < 0.0));
    *(float *)(a1 + 8) = sqrtf(v23) / sqrtf(v24);
    *(float *)(a1 + 12) = v25;
    if (v20)
      sub_18F33FB38(a2 + 96);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 100);
    sub_18F3CDFD8((__int128 *)buf, (unsigned __int16 *)(a2 + 4984), (uint64_t (*)(uint64_t *, _OWORD *))sub_18F3CE29C);
    v41 = v46;
    sub_18F3CDFD8(&v43, (unsigned __int16 *)(a2 + 4984), (uint64_t (*)(uint64_t *, _OWORD *))sub_18F3CE2B0);
    v26.f64[0] = v41;
    v42 = v44;
    v26.f64[1] = v44;
    *(float32x2_t *)(a1 + 20) = vcvt_f32_f64(vmulq_f64(v26, (float64x2_t)vdupq_n_s64(0x404CA5DC20000000uLL)));
    if (v41 >= 1.74532926)
      v27 = v41;
    else
      v27 = 1.74532926;
    v28 = *(double *)sub_18F3CF8EC((unsigned __int16 *)(a2 + 4984), 0);
    v29 = 0.0;
    v30 = 0.0;
    if (*(_WORD *)(a2 + 4986))
    {
      v31 = 0;
      while (*(double *)(sub_18F3CF8EC((unsigned __int16 *)(a2 + 4984), v31) + 48) > v27)
      {
        if (++v31 >= *(unsigned __int16 *)(a2 + 4986))
        {
          v30 = 0.0;
          goto LABEL_26;
        }
      }
      v30 = *(double *)sub_18F3CF8EC((unsigned __int16 *)(a2 + 4984), v31);
    }
LABEL_26:
    if (v30 == 0.0)
      v34 = 0.0;
    else
      v34 = v30 - v28;
    v35 = v34;
    *(float *)(a1 + 28) = v35;
    if (v42 <= 2.53072739)
      v36 = v42;
    else
      v36 = 2.53072739;
    v37 = *(double *)sub_18F3CF8EC((unsigned __int16 *)(a2 + 4984), 0);
    if (*(_WORD *)(a2 + 4986))
    {
      v38 = 0;
      while (*(double *)(sub_18F3CF8EC((unsigned __int16 *)(a2 + 4984), v38) + 48) < v36)
      {
        if (++v38 >= *(unsigned __int16 *)(a2 + 4986))
          goto LABEL_38;
      }
      v29 = *(double *)sub_18F3CF8EC((unsigned __int16 *)(a2 + 4984), v38);
    }
LABEL_38:
    v39 = v29 - v37;
    if (v29 == 0.0)
      v39 = 0.0;
    v40 = v39;
    *(float *)(a1 + 32) = v40;
  }
  else
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953308);
    v32 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 0;
      _os_log_impl(&dword_18F1DC000, v32, OS_LOG_TYPE_ERROR, "[SitStandDetector] startIdx out of range. =%d", buf, 8u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953308);
      *(_QWORD *)&v43 = 67109120;
      v33 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "SitStandDetectorFeatures CMSitStandDetector::calcEpochFeatures(int)", "CoreLocation: %s\n", v33);
      if (v33 != (char *)buf)
        free(v33);
    }
  }
}

double sub_18F3CDD7C(unsigned __int16 *a1, unsigned int (*a2)(double, double, double, double, double, double, double, double))
{
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  unint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  NSObject *v17;
  char *v18;
  uint8_t buf[1640];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  if (!a1[1])
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954E68);
    v17 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v17, OS_LOG_TYPE_FAULT, "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 179,.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954E68);
      v18 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMQueue<SitStandDetector::DecomposedUserAccel>::getComparison(int (*)(const T, const T), size_t) const [T = SitStandDetector::DecomposedUserAccel]", "CoreLocation: %s\n", v18);
      if (v18 != (char *)buf)
        free(v18);
    }
  }
  v5 = (double *)sub_18F3CFAE8(a1, 0);
  v6 = *v5;
  v7 = v5[3];
  if ((_DWORD)v4)
  {
    v8 = 0;
    v9 = v5[1];
    v10 = v5[2];
    do
    {
      v11 = sub_18F3CFAE8(a1, v8);
      v12 = *(double *)v11;
      v13 = *(double *)(v11 + 8);
      v14 = *(double *)(v11 + 16);
      v15 = *(double *)(v11 + 24);
      if (a2(*(double *)v11, v13, v14, v15, v6, v9, v10, v7))
      {
        v6 = v12;
        v9 = v13;
        v10 = v14;
        v7 = v15;
      }
      ++v8;
    }
    while (v4 != v8);
  }
  return v6;
}

BOOL sub_18F3CDFC0(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  return a4 < a8;
}

BOOL sub_18F3CDFCC(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  return a4 > a8;
}

uint64_t sub_18F3CDFD8(__int128 *a1, unsigned __int16 *a2, uint64_t (*a3)(uint64_t *, _OWORD *))
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t result;
  NSObject *v22;
  __int128 v23;
  char *v24;
  _OWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  __int16 v36;
  uint8_t buf[16];
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  if (a2[1])
  {
    v7 = sub_18F3CF8EC(a2, 0);
    v8 = 0;
    v9 = *(_OWORD *)(v7 + 16);
    *a1 = *(_OWORD *)v7;
    a1[1] = v9;
    a1[2] = *(_OWORD *)(v7 + 32);
    *((_QWORD *)a1 + 6) = *(_QWORD *)(v7 + 48);
    do
    {
      v10 = sub_18F3CF8EC(a2, v8);
      v11 = *(_QWORD *)v10;
      v12 = *(_DWORD *)(v10 + 8);
      v13 = *(_DWORD *)(v10 + 12);
      v14 = *(_DWORD *)(v10 + 16);
      v15 = *(_DWORD *)(v10 + 20);
      v16 = *(_DWORD *)(v10 + 24);
      v17 = *(_DWORD *)(v10 + 28);
      *(_OWORD *)buf = *(_OWORD *)(v10 + 32);
      v38 = *(_QWORD *)(v10 + 48);
      v27 = v11;
      v28 = v12;
      v29 = v13;
      v30 = v14;
      v31 = v15;
      v32 = v16;
      v33 = v17;
      v18 = *(_OWORD *)(v10 + 32);
      v35 = *(_QWORD *)(v10 + 48);
      v34 = v18;
      v26 = *((_QWORD *)a1 + 6);
      v19 = *a1;
      v20 = a1[2];
      v25[1] = a1[1];
      v25[2] = v20;
      v25[0] = v19;
      result = a3(&v27, v25);
      if ((_DWORD)result)
      {
        *(_QWORD *)a1 = v11;
        *((_DWORD *)a1 + 2) = v12;
        *((_DWORD *)a1 + 3) = v13;
        *((_DWORD *)a1 + 4) = v14;
        *((_DWORD *)a1 + 5) = v15;
        *((_DWORD *)a1 + 6) = v16;
        *((_DWORD *)a1 + 7) = v17;
        a1[2] = *(_OWORD *)buf;
        *((_QWORD *)a1 + 6) = v38;
      }
      ++v8;
    }
    while (v5 != v8);
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954E68);
    v22 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v22, OS_LOG_TYPE_FAULT, "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 179,.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954E68);
      v36 = 0;
      v24 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMQueue<SitStandDetector::TwoLinkPositionSample>::getComparison(int (*)(const T, const T), size_t) const [T = SitStandDetector::TwoLinkPositionSample]", "CoreLocation: %s\n", v24);
      if (v24 != (char *)buf)
        free(v24);
    }
    result = sub_18F3CF8EC(a2, 0);
    v23 = *(_OWORD *)(result + 16);
    *a1 = *(_OWORD *)result;
    a1[1] = v23;
    a1[2] = *(_OWORD *)(result + 32);
    *((_QWORD *)a1 + 6) = *(_QWORD *)(result + 48);
  }
  return result;
}

BOOL sub_18F3CE29C(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 48) < *(double *)(a2 + 48);
}

BOOL sub_18F3CE2B0(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 48) > *(double *)(a2 + 48);
}

void sub_18F3CE2C4(uint64_t a1)
{
  NSObject *v1;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 56) = xmmword_18F5068E0;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953308);
  v1 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v1, OS_LOG_TYPE_DEBUG, "[SitStandDetector] Set linkModel initial angles from Sitting state", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953308);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMSitStandDetector::setLinkModelJointAngles(const EventT *) [T = CMSitStandDetector::ESitting]", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
}

void sub_18F3CE454(uint64_t a1)
{
  NSObject *v1;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 56) = xmmword_18F5068F0;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953308);
  v1 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v1, OS_LOG_TYPE_DEBUG, "[SitStandDetector] Set linkModel initial angles from Standing state", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953308);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMSitStandDetector::setLinkModelJointAngles(const EventT *) [T = CMSitStandDetector::EStanding]", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
}

BOOL sub_18F3CE5E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t);
  NSObject *v6;
  char *v8;
  uint8_t buf[1640];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  sub_18F4E7CF0(a1, 2, a2);
  *(_DWORD *)(a1 + 72) = 1;
  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 10912);
  if (v5 && *(_QWORD *)(a1 + 10920))
    v5(1, a3);
  *(_QWORD *)(a1 + 10824) = a3 + 500000;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953308);
  v6 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEFAULT, "[SitStandDetector] Detected Sit->Stand", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953308);
    v8 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMSitStandDetector::notifyWithDetection(const EventT *, uint64_t) [EventT = CMSitStandDetector::EStanding]", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
  }
  *(_DWORD *)(a1 + 1776) = 0;
  *(_DWORD *)(a1 + 968) = 0;
  *(_DWORD *)(a1 + 10620) = 0;
  *(_QWORD *)(a1 + 10612) = 0;
  *(_QWORD *)(a1 + 10604) = 0;
  *(_BYTE *)(a1 + 10592) = 1;
  *(_QWORD *)(a1 + 10656) = 0;
  *(_QWORD *)(a1 + 10648) = 0;
  *(_DWORD *)(a1 + 10664) = 0;
  *(_BYTE *)(a1 + 10636) = 1;
  *(_DWORD *)(a1 + 10708) = 0;
  *(_QWORD *)(a1 + 10700) = 0;
  *(_QWORD *)(a1 + 10692) = 0;
  *(_BYTE *)(a1 + 10680) = 1;
  *(_DWORD *)(a1 + 10772) = 0;
  *(_QWORD *)(a1 + 10764) = 0;
  *(_QWORD *)(a1 + 10756) = 0;
  *(_BYTE *)(a1 + 10744) = 1;
  return sub_18F3CC710(a1);
}

BOOL sub_18F3CE828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t);
  NSObject *v6;
  char *v8;
  uint8_t buf[1640];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  sub_18F4E7CF0(a1, 1, a2);
  *(_DWORD *)(a1 + 72) = 2;
  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 10912);
  if (v5 && *(_QWORD *)(a1 + 10920))
    v5(2, a3);
  *(_QWORD *)(a1 + 10824) = a3 + 2000000;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953308);
  v6 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEFAULT, "[SitStandDetector] Detected Stand->Sit", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953308);
    v8 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMSitStandDetector::notifyWithDetection(const EventT *, uint64_t) [EventT = CMSitStandDetector::ESitting]", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
  }
  *(_DWORD *)(a1 + 1776) = 0;
  *(_DWORD *)(a1 + 968) = 0;
  *(_DWORD *)(a1 + 10620) = 0;
  *(_QWORD *)(a1 + 10612) = 0;
  *(_QWORD *)(a1 + 10604) = 0;
  *(_BYTE *)(a1 + 10592) = 1;
  *(_QWORD *)(a1 + 10656) = 0;
  *(_QWORD *)(a1 + 10648) = 0;
  *(_DWORD *)(a1 + 10664) = 0;
  *(_BYTE *)(a1 + 10636) = 1;
  *(_DWORD *)(a1 + 10708) = 0;
  *(_QWORD *)(a1 + 10700) = 0;
  *(_QWORD *)(a1 + 10692) = 0;
  *(_BYTE *)(a1 + 10680) = 1;
  *(_DWORD *)(a1 + 10772) = 0;
  *(_QWORD *)(a1 + 10764) = 0;
  *(_QWORD *)(a1 + 10756) = 0;
  *(_BYTE *)(a1 + 10744) = 1;
  return sub_18F3CC710(a1);
}

unsigned __int16 *sub_18F3CEA6C(unsigned __int16 *result, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  __int128 v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  v4 = &result[16 * (v3 - v2)];
  v5 = *a2;
  *(_OWORD *)(v4 + 12) = a2[1];
  *(_OWORD *)(v4 + 4) = v5;
  v6 = result[1];
  v7 = *((unsigned int *)result + 1);
  if (v7 <= v6)
  {
    v8 = *result + 1;
    if (v8 < v7)
      LOWORD(v7) = 0;
    *result = v8 - v7;
  }
  else
  {
    result[1] = v6 + 1;
  }
  return result;
}

uint64_t sub_18F3CEAD0(uint64_t a1, uint64_t a2, float32x4_t a3)
{
  double v4;
  float v6;
  NSObject *v7;
  char *v8;
  float v9;
  int v10;
  float32x2_t v11;
  float32x2_t v12;
  NSObject *v13;
  float v14;
  double v15;
  float32x2_t v16;
  int i;
  double v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  unint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  unint64_t v34;
  double v35;
  NSObject *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  float v41;
  char *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  float v47;
  float v48;
  unint64_t v49;
  BOOL v50;
  NSObject *v51;
  unint64_t v52;
  const char *v53;
  uint64_t result;
  NSObject *v55;
  unint64_t v56;
  const char *v57;
  char *v58;
  unint64_t v59;
  const char *v60;
  char *v61;
  unint64_t v62;
  const char *v63;
  char *v64;
  unint64_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  int v73;
  const char *v74;
  _BYTE buf[44];
  int v76;
  _BYTE v77[32];
  int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v4 = *(double *)a2 * 1000000.0;
  if (*(_QWORD *)(a1 + 10824) > (unint64_t)v4)
    goto LABEL_80;
  v65 = (unint64_t)v4;
  if (*(_WORD *)(a1 + 1778))
  {
    v6 = *(double *)a2 - *(double *)(a1 + 10832);
    if (v6 <= 0.5)
    {
      if (v6 > 0.04)
      {
        v9 = rintf(v6 * 50.0);
        v10 = (int)v9;
        v66 = *(float32x4_t *)(a1 + 10840);
        v67 = *(float32x4_t *)(a2 + 8);
        v11 = *(float32x2_t *)(a2 + 24);
        v12 = *(float32x2_t *)(a1 + 10856);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953308);
        v13 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218240;
          *(double *)&buf[4] = v6;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v10 - 1;
          _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_DEBUG, "[SitStandDetector] data gap of %.3f seconds, interpolating to %d samples.", buf, 0x12u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953308);
          *(_DWORD *)v77 = 134218240;
          *(double *)&v77[4] = v6;
          *(_WORD *)&v77[12] = 1024;
          *(_DWORD *)&v77[14] = v10 - 1;
          v58 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "void CMSitStandDetector::insertInterpolatedSamplesIfDataGap(const ImuData &)", "CoreLocation: %s\n", v58);
          if (v58 != buf)
            free(v58);
        }
        if (v10 >= 2)
        {
          v14 = (float)(int)v9;
          a3.f32[0] = 1.0 / v14;
          v15 = (float)((float)(1.0 / v14) * v6);
          v68 = vmulq_n_f32(vsubq_f32(v67, v66), 1.0 / v14);
          v16 = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)a3.f32, 0), vsub_f32(v11, v12));
          for (i = 1; i != v10; ++i)
          {
            memset(buf, 0, sizeof(buf));
            v76 = 1065353216;
            sub_18F1FFE94((float32x4_t *)&buf[32], (float32x4_t)0);
            v18 = (double)i;
            *(float *)&v18 = (float)i;
            *(double *)buf = *(double *)(a1 + 10832) + (double)i * v15;
            *(float32x4_t *)&buf[8] = vaddq_f32(vmulq_n_f32(v68, (float)i), *(float32x4_t *)(a1 + 10840));
            *(float32x2_t *)&buf[24] = vadd_f32(vmul_f32(v16, (float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)&v18, 0)), *(float32x2_t *)(a1 + 10856));
            sub_18F3D4DE4((float32x4_t *)(a1 + 10864), (float32x4_t *)(a2 + 32), (float32x4_t *)&buf[32], (float)i / v14);
            *(_QWORD *)v77 = sub_18F3CD3DC(a1, (float32x2_t *)buf, v19);
            *(_QWORD *)&v77[8] = v20;
            *(_QWORD *)&v77[16] = v21;
            *(_QWORD *)&v77[24] = v22;
            sub_18F3CEA6C((unsigned __int16 *)(a1 + 1776), (__int128 *)v77);
          }
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 1776) = 0;
      *(_DWORD *)(a1 + 968) = 0;
      *(_DWORD *)(a1 + 10620) = 0;
      *(_QWORD *)(a1 + 10612) = 0;
      *(_QWORD *)(a1 + 10604) = 0;
      *(_BYTE *)(a1 + 10592) = 1;
      *(_QWORD *)(a1 + 10656) = 0;
      *(_QWORD *)(a1 + 10648) = 0;
      *(_DWORD *)(a1 + 10664) = 0;
      *(_BYTE *)(a1 + 10636) = 1;
      *(_DWORD *)(a1 + 10708) = 0;
      *(_QWORD *)(a1 + 10700) = 0;
      *(_QWORD *)(a1 + 10692) = 0;
      *(_BYTE *)(a1 + 10680) = 1;
      *(_DWORD *)(a1 + 10772) = 0;
      *(_QWORD *)(a1 + 10764) = 0;
      *(_QWORD *)(a1 + 10756) = 0;
      *(_BYTE *)(a1 + 10744) = 1;
      sub_18F3CC710(a1);
      if (v6 >= 1.0)
        sub_18F4E7CF0(a1, 4, (uint64_t)buf);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953308);
      v7 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = v6;
        _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_DEFAULT, "[SitStandDetector] Large data gap of %.3f seconds caused a reset", buf, 0xCu);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953308);
        *(_DWORD *)v77 = 134217984;
        *(double *)&v77[4] = v6;
        v8 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CMSitStandDetector::insertInterpolatedSamplesIfDataGap(const ImuData &)", "CoreLocation: %s\n", v8);
        if (v8 != buf)
          free(v8);
      }
    }
  }
  a3.i64[0] = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 10832) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 10840) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 10844) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 10848) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 10852) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 10856) = *(_DWORD *)(a2 + 24);
  a3.i32[0] = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 10860) = a3.i32[0];
  if (a1 + 10832 != a2)
  {
    a3 = *(float32x4_t *)(a2 + 32);
    *(float32x4_t *)(a1 + 10864) = a3;
  }
  *(_QWORD *)&v69 = sub_18F3CD3DC(a1, (float32x2_t *)a2, a3);
  *((_QWORD *)&v69 + 1) = v23;
  v70 = v24;
  v71 = v25;
  sub_18F3CEA6C((unsigned __int16 *)(a1 + 1776), &v69);
  if (*(_DWORD *)(a1 + 1780) != *(unsigned __int16 *)(a1 + 1778))
    goto LABEL_80;
  v26 = *(double *)(sub_18F3CFAE8((unsigned __int16 *)(a1 + 1776), 0) + 8);
  v27 = *(double *)(sub_18F3CFAE8((unsigned __int16 *)(a1 + 1776), 0) + 24);
  *(_QWORD *)buf = 0;
  sub_18F3943D8((unsigned __int16 *)(a1 + 968), buf);
  if (*(unsigned __int16 *)(a1 + 1778) >= 2u)
  {
    v28 = 1;
    v29 = v27 * 0.02;
    v30 = v26 * 0.02;
    v31 = 0.0;
    v32 = 0.0;
    do
    {
      v33 = *(double *)sub_18F3CFAE8((unsigned __int16 *)(a1 + 1776), v28);
      v34 = v28 - 1;
      v35 = v33 - *(double *)sub_18F3CFAE8((unsigned __int16 *)(a1 + 1776), v34);
      if (v35 < 0.0)
      {
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953308);
        v36 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = 0;
          _os_log_impl(&dword_18F1DC000, v36, OS_LOG_TYPE_ERROR, "[SitStandDetector] Timestamp went backwards. dt = %f", buf, 0xCu);
        }
        v35 = 0.0;
        if (sub_18F1FCA08(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953308);
          *(_DWORD *)v77 = 134217984;
          *(_QWORD *)&v77[4] = 0;
          v42 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "void CMSitStandDetector::integrateUserAccel()", "CoreLocation: %s\n", v42);
          if (v42 != buf)
            free(v42);
        }
      }
      v37 = *(double *)(sub_18F3CFAE8((unsigned __int16 *)(a1 + 1776), v34) + 8);
      v38 = (v37 + *(double *)(sub_18F3CFAE8((unsigned __int16 *)(a1 + 1776), v34 + 1) + 8)) * 0.5;
      v39 = *(double *)(sub_18F3CFAE8((unsigned __int16 *)(a1 + 1776), v34) + 24);
      v40 = (v39 + *(double *)(sub_18F3CFAE8((unsigned __int16 *)(a1 + 1776), v34 + 1) + 24)) * 0.5;
      v30 = v30 + v38 * 9.80665016 * v35;
      v29 = v29 + v40 * 9.80665016 * v35;
      v31 = v31 + v35 * v35 * (v38 * 4.90332508) + v30 * v35;
      v32 = v32 + v35 * v35 * (v40 * 4.90332508) + v29 * v35;
      *(float *)&v40 = v31;
      v41 = v32;
      *(_DWORD *)buf = LODWORD(v40);
      *(float *)&buf[4] = v41;
      sub_18F3943D8((unsigned __int16 *)(a1 + 968), buf);
      v28 = v34 + 2;
    }
    while (v28 < *(unsigned __int16 *)(a1 + 1778));
  }
  if (!*(_BYTE *)(a1 + 16))
  {
    sub_18F3CE2C4(a1);
    sub_18F3CD60C(a1);
    sub_18F3CD928((uint64_t)buf, a1);
    v44 = sub_18F3CCBCC(a1, (float *)buf);
    sub_18F3CE454(a1);
    sub_18F3CD60C(a1);
    sub_18F3CD928((uint64_t)v77, a1);
    *(_OWORD *)buf = *(_OWORD *)v77;
    *(_OWORD *)&buf[16] = *(_OWORD *)&v77[16];
    *(_DWORD *)&buf[32] = v78;
    v45 = sub_18F3CD00C(a1, (float *)buf);
    v46 = v45;
    if ((v44 & 1) != 0 || (v45 & 1) != 0 || *(_QWORD *)(a1 + 10880))
    {
      if (v44)
      {
        if (*(_BYTE *)(a1 + 10680))
          sub_18F33FB38(a1 + 10680);
        v47 = *(float *)(a1 + 10684) / 40.0;
        if (v47 > *(float *)(a1 + 10808))
          *(float *)(a1 + 10808) = v47;
      }
      if (v46)
      {
        if (*(_BYTE *)(a1 + 10744))
          sub_18F33FB38(a1 + 10744);
        v48 = *(float *)(a1 + 10748) / 25.0;
        if (v48 > *(float *)(a1 + 10812))
          *(float *)(a1 + 10812) = v48;
      }
      v49 = *(_QWORD *)(a1 + 10880);
      if (v49)
      {
        if (v49 <= v65)
        {
          if (*(float *)(a1 + 10808) <= *(float *)(a1 + 10812))
            sub_18F3CE828(a1, (uint64_t)&v73, v65);
          else
            sub_18F3CE5E4(a1, (uint64_t)&v72, v65);
          *(_QWORD *)(a1 + 10880) = 0;
          *(_QWORD *)(a1 + 10808) = 0;
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953308);
          v55 = qword_1EE16D820;
          if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
          {
            v56 = *(char *)(a1 + 16);
            if (v56 > 3)
              v57 = "Unknown";
            else
              v57 = off_1E2956CE8[v56];
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v57;
            _os_log_impl(&dword_18F1DC000, v55, OS_LOG_TYPE_DEFAULT, "[SitStandDetector] Initial FSM state has been detected as: %s", buf, 0xCu);
          }
          if (sub_18F1FCA08(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2953308);
            v62 = *(char *)(a1 + 16);
            if (v62 > 3)
              v63 = "Unknown";
            else
              v63 = off_1E2956CE8[v62];
            *(_DWORD *)v77 = 136315138;
            *(_QWORD *)&v77[4] = v63;
            v64 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 2, "TransitionState CMSitStandDetector::feedImuData(const ImuData &)", "CoreLocation: %s\n", v64);
            if (v64 != buf)
              free(v64);
          }
          return *(unsigned int *)(a1 + 72);
        }
      }
      else
      {
        *(_QWORD *)(a1 + 10880) = v65 + 800000;
      }
    }
    goto LABEL_80;
  }
  sub_18F3CD60C(a1);
  sub_18F3CD928((uint64_t)v77, a1);
  v43 = *(unsigned __int8 *)(a1 + 16);
  if (v43 == 2)
  {
    if (sub_18F3CD00C(a1, (float *)v77))
    {
      sub_18F3CE828(a1, (uint64_t)buf, v65);
      goto LABEL_65;
    }
    goto LABEL_80;
  }
  if (v43 != 1)
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953308);
    v51 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
    {
      v52 = *(char *)(a1 + 16);
      if (v52 > 3)
        v53 = "Unknown";
      else
        v53 = off_1E2956CE8[v52];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v53;
      _os_log_impl(&dword_18F1DC000, v51, OS_LOG_TYPE_INFO, "[SitStandDetector] Wrong FSM state, %s", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953308);
      v59 = *(char *)(a1 + 16);
      if (v59 > 3)
        v60 = "Unknown";
      else
        v60 = off_1E2956CE8[v59];
      v73 = 136315138;
      v74 = v60;
      v61 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "BOOL CMSitStandDetector::detectStateTransitions(uint64_t)", "CoreLocation: %s\n", v61);
      if (v61 != buf)
        free(v61);
    }
    goto LABEL_80;
  }
  if (!sub_18F3CCBCC(a1, (float *)v77))
  {
LABEL_80:
    result = 0;
    *(_DWORD *)(a1 + 72) = 0;
    return result;
  }
  sub_18F3CE5E4(a1, (uint64_t)buf, v65);
LABEL_65:
  v50 = *(_DWORD *)(a1 + 72) == 2
     && (sub_18F3412D8((unsigned __int16 *)(a1 + 560), (unsigned int (*)(float, float))sub_18F3414D4, 0) > 0.7
      || sub_18F3412D8((unsigned __int16 *)(a1 + 560), (unsigned int (*)(float, float))sub_18F3414E0, 0) < -0.7);
  *(_BYTE *)(a1 + 10816) = v50;
  return *(unsigned int *)(a1 + 72);
}

os_log_t sub_18F3CF8C0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1EE16D820 = (uint64_t)result;
  return result;
}

uint64_t sub_18F3CF8EC(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954E68);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v11 = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954E68);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T &CMQueue<SitStandDetector::TwoLinkPositionSample>::operator[](const size_t) const [T = SitStandDetector::TwoLinkPositionSample]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[28 * (v4 - v5) + 4];
}

uint64_t sub_18F3CFAE8(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954E68);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v11 = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954E68);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T &CMQueue<SitStandDetector::DecomposedUserAccel>::operator[](const size_t) const [T = SitStandDetector::DecomposedUserAccel]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[16 * (v4 - v5) + 4];
}

uint64_t sub_18F3D0000(uint64_t a1)
{
  NSObject *v2;
  char *v4;
  uint8_t buf[1640];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D6C8 != -1)
    dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
  v2 = qword_1EE16D6C0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_INFO, "Closing PressureSample", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D6C8 != -1)
      dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
    v4 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CLPressureSampleDatabase::~CLPressureSampleDatabase()", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  sqlite3_reset(*(sqlite3_stmt **)(a1 + 16));
  sqlite3_close(*(sqlite3 **)(a1 + 8));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_18F3D01C4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_18F213574(a1);
}

uint64_t sub_18F3D01D0(uint64_t a1, const char *a2, __int128 *a3, __int128 *a4)
{
  sqlite3_stmt **v8;
  __int128 v9;
  __int128 v10;
  const char *v11;
  sqlite3 **v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  int v16;
  const char *v17;
  const char *v18;
  const char *v19;
  char v20;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  const char *v27;
  const char *v28;
  const char *v29;
  int v30;
  const char *v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  NSObject *v35;
  int v36;
  const char *v37;
  const char *v38;
  const char *v39;
  int v40;
  const char *v41;
  NSObject *v42;
  int v43;
  const char *v44;
  const char *v45;
  const char *v46;
  int v47;
  const char *v48;
  NSObject *v49;
  const char *v50;
  const char *v51;
  char *v52;
  NSObject *v53;
  int v54;
  const char *v55;
  const char *v56;
  const char *v57;
  int v58;
  const char *v59;
  int v60;
  const char *v61;
  const char *v62;
  const char *v63;
  char *v64;
  const char *v65;
  char *v66;
  sqlite3_stmt *pStmt;
  int v68;
  const char *v69;
  __int16 v70;
  const char *v71;
  uint8_t buf[4];
  const char *v73;
  __int16 v74;
  const char *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 16) = 0;
  v8 = (sqlite3_stmt **)(a1 + 16);
  if (*((char *)a3 + 23) < 0)
  {
    sub_18F26F9A4((_BYTE *)(a1 + 24), *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 24) = v9;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_18F26F9A4((_BYTE *)(a1 + 48), *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v10 = *a4;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 48) = v10;
  }
  pStmt = 0;
  if (a2[23] >= 0)
    v11 = a2;
  else
    v11 = *(const char **)a2;
  v12 = (sqlite3 **)(a1 + 8);
  v13 = *((unsigned __int8 *)a3 + 23);
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)a3 + 1);
  if (v13)
    v14 = 6;
  else
    v14 = 1;
  if (!sqlite3_open_v2(v11, (sqlite3 **)(a1 + 8), v14, 0))
  {
    if (sqlite3_prepare_v2(*v12, "SELECT COUNT(*) FROM PressureSample", -1, &pStmt, 0) || sqlite3_step(pStmt) != 100)
    {
      v34 = *((unsigned __int8 *)a3 + 23);
      if ((v34 & 0x80u) != 0)
        v34 = *((_QWORD *)a3 + 1);
      if (!v34)
      {
        if (qword_1EE16D6C8 != -1)
          dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
        v49 = qword_1EE16D6C0;
        if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_FAULT))
        {
          if (a2[23] >= 0)
            v50 = a2;
          else
            v50 = *(const char **)a2;
          *(_DWORD *)buf = 136315138;
          v73 = v50;
          _os_log_impl(&dword_18F1DC000, v49, OS_LOG_TYPE_FAULT, "No PressureSample table in %s", buf, 0xCu);
        }
        if (!sub_18F1FCA08(115, 0))
          goto LABEL_24;
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D6C8 != -1)
          dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
        if (a2[23] >= 0)
          v51 = a2;
        else
          v51 = *(const char **)a2;
        v68 = 136315138;
        v69 = v51;
        v52 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "CLPressureSampleDatabase::CLPressureSampleDatabase(const std::string &, const std::string &, const std::string &)", "CoreLocation: %s\n", v52);
        goto LABEL_115;
      }
      if (sqlite3_prepare_v2(*v12, "CREATE TABLE PressureSample (CFTime FLOAT, Timestamp FLOAT, Run TEXT, Tag TEXT, degC FLOAT, kPa FLOAT)", -1, &pStmt, 0)|| sqlite3_step(pStmt) != 101)
      {
        if (qword_1EE16D6C8 != -1)
          dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
        v42 = qword_1EE16D6C0;
        if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_FAULT))
        {
          v43 = a2[23];
          v44 = *(const char **)a2;
          v45 = sqlite3_errmsg(*v12);
          if (v43 >= 0)
            v46 = a2;
          else
            v46 = v44;
          *(_DWORD *)buf = 136315394;
          v73 = v46;
          v74 = 2080;
          v75 = v45;
          _os_log_impl(&dword_18F1DC000, v42, OS_LOG_TYPE_FAULT, "Can't create table in %s: %s", buf, 0x16u);
        }
        if (!sub_18F1FCA08(115, 0))
          goto LABEL_24;
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D6C8 != -1)
          dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
        v47 = a2[23];
        v48 = *(const char **)a2;
        v32 = sqlite3_errmsg(*v12);
        if (v47 >= 0)
          v33 = a2;
        else
          v33 = v48;
      }
      else
      {
        sqlite3_finalize(pStmt);
        pStmt = 0;
        if (sqlite3_prepare_v2(*v12, "CREATE INDEX TheIdx ON PressureSample (Run, Tag, CFTime)", -1, &pStmt, 0)
          || sqlite3_step(pStmt) != 101)
        {
          if (qword_1EE16D6C8 != -1)
            dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
          v53 = qword_1EE16D6C0;
          if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_FAULT))
          {
            v54 = a2[23];
            v55 = *(const char **)a2;
            v56 = sqlite3_errmsg(*v12);
            if (v54 >= 0)
              v57 = a2;
            else
              v57 = v55;
            *(_DWORD *)buf = 136315394;
            v73 = v57;
            v74 = 2080;
            v75 = v56;
            _os_log_impl(&dword_18F1DC000, v53, OS_LOG_TYPE_FAULT, "Can't create index in %s: %s", buf, 0x16u);
          }
          if (!sub_18F1FCA08(115, 0))
            goto LABEL_24;
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D6C8 != -1)
            dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
          v58 = a2[23];
          v59 = *(const char **)a2;
          v32 = sqlite3_errmsg(*v12);
          if (v58 >= 0)
            v33 = a2;
          else
            v33 = v59;
        }
        else
        {
          if (!sqlite3_prepare_v2(*v12, "INSERT INTO PressureSample VALUES (?,?,?,?,?,?)", -1, v8, 0) && *v8)
          {
LABEL_119:
            sqlite3_finalize(pStmt);
            v20 = 1;
            goto LABEL_25;
          }
          if (qword_1EE16D6C8 != -1)
            dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
          v35 = qword_1EE16D6C0;
          if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_FAULT))
          {
            v36 = a2[23];
            v37 = *(const char **)a2;
            v38 = sqlite3_errmsg(*v12);
            if (v36 >= 0)
              v39 = a2;
            else
              v39 = v37;
            *(_DWORD *)buf = 136315394;
            v73 = v39;
            v74 = 2080;
            v75 = v38;
            _os_log_impl(&dword_18F1DC000, v35, OS_LOG_TYPE_FAULT, "Can't create insert statment in %s: %s", buf, 0x16u);
          }
          if (!sub_18F1FCA08(115, 0))
            goto LABEL_24;
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D6C8 != -1)
            dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
          v40 = a2[23];
          v41 = *(const char **)a2;
          v32 = sqlite3_errmsg(*v12);
          if (v40 >= 0)
            v33 = a2;
          else
            v33 = v41;
        }
      }
    }
    else
    {
      if (qword_1EE16D6C8 != -1)
        dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
      v22 = qword_1EE16D6C0;
      if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_INFO))
      {
        if (a2[23] >= 0)
          v23 = a2;
        else
          v23 = *(const char **)a2;
        *(_DWORD *)buf = 136315138;
        v73 = v23;
        _os_log_impl(&dword_18F1DC000, v22, OS_LOG_TYPE_INFO, "Found PressureSample table already in %s", buf, 0xCu);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D6C8 != -1)
          dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
        if (a2[23] >= 0)
          v65 = a2;
        else
          v65 = *(const char **)a2;
        v68 = 136315138;
        v69 = v65;
        v66 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "CLPressureSampleDatabase::CLPressureSampleDatabase(const std::string &, const std::string &, const std::string &)", "CoreLocation: %s\n", v66);
        if (v66 != (char *)buf)
          free(v66);
      }
      v24 = *((unsigned __int8 *)a3 + 23);
      if ((v24 & 0x80u) != 0)
        v24 = *((_QWORD *)a3 + 1);
      if (!v24 || !sqlite3_prepare_v2(*v12, "INSERT INTO PressureSample VALUES (?,?,?,?,?,?)", -1, v8, 0) && *v8)
        goto LABEL_119;
      if (qword_1EE16D6C8 != -1)
        dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
      v25 = qword_1EE16D6C0;
      if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_FAULT))
      {
        v26 = a2[23];
        v27 = *(const char **)a2;
        v28 = sqlite3_errmsg(*v12);
        if (v26 >= 0)
          v29 = a2;
        else
          v29 = v27;
        *(_DWORD *)buf = 136315394;
        v73 = v29;
        v74 = 2080;
        v75 = v28;
        _os_log_impl(&dword_18F1DC000, v25, OS_LOG_TYPE_FAULT, "Can't create insert statment in %s: %s", buf, 0x16u);
      }
      if (!sub_18F1FCA08(115, 0))
        goto LABEL_24;
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6C8 != -1)
        dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
      v30 = a2[23];
      v31 = *(const char **)a2;
      v32 = sqlite3_errmsg(*v12);
      if (v30 >= 0)
        v33 = a2;
      else
        v33 = v31;
    }
    v68 = 136315394;
    v69 = v33;
    v70 = 2080;
    v71 = v32;
    v52 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "CLPressureSampleDatabase::CLPressureSampleDatabase(const std::string &, const std::string &, const std::string &)", "CoreLocation: %s\n", v52);
LABEL_115:
    if (v52 != (char *)buf)
      free(v52);
    goto LABEL_24;
  }
  if (qword_1EE16D6C8 != -1)
    dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
  v15 = qword_1EE16D6C0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_FAULT))
  {
    v16 = a2[23];
    v17 = *(const char **)a2;
    v18 = sqlite3_errmsg(*v12);
    if (v16 >= 0)
      v19 = a2;
    else
      v19 = v17;
    *(_DWORD *)buf = 136315394;
    v73 = v19;
    v74 = 2080;
    v75 = v18;
    _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_FAULT, "Can't open %s: %s", buf, 0x16u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D6C8 != -1)
      dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
    v60 = a2[23];
    v61 = *(const char **)a2;
    v62 = sqlite3_errmsg(*v12);
    if (v60 >= 0)
      v63 = a2;
    else
      v63 = v61;
    v68 = 136315394;
    v69 = v63;
    v70 = 2080;
    v71 = v62;
    v64 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "CLPressureSampleDatabase::CLPressureSampleDatabase(const std::string &, const std::string &, const std::string &)", "CoreLocation: %s\n", v64);
    if (v64 != (char *)buf)
      free(v64);
  }
LABEL_24:
  sqlite3_finalize(pStmt);
  v20 = 0;
  *v8 = 0;
LABEL_25:
  *(_BYTE *)a1 = v20;
  return a1;
}

void sub_18F3D0EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;
  void **v12;

  if (*(char *)(v11 + 71) < 0)
    operator delete(*v12);
  if (*(char *)(v11 + 47) < 0)
    operator delete(*a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F3D0F7C(uint64_t a1, const void **a2, uint64_t a3)
{
  size_t v6;
  __int128 *p_p;
  const void *v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  NSObject *v12;
  const char *v13;
  const char *v14;
  char *v15;
  float v16;
  float v17;
  uint64_t v18;
  NSObject *v19;
  std::string v21;
  sqlite3_stmt *ppStmt;
  int v23;
  const char *v24;
  __int128 __p;
  unsigned __int8 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  ppStmt = 0;
  sub_18F270374(&v21, "SELECT Timestamp, degC, kPa FROM PressureSample WHERE ");
  if (!*(_BYTE *)a1)
  {
    if (qword_1EE16D6C8 != -1)
      dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
    v19 = qword_1EE16D6C0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_18F1DC000, v19, OS_LOG_TYPE_FAULT, "Table PressureSample invalid", (uint8_t *)&__p, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
      goto LABEL_41;
    bzero(&__p, 0x65CuLL);
    if (qword_1EE16D6C8 != -1)
      dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
    LOWORD(v23) = 0;
    v15 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "BOOL CLPressureSampleDatabase::iterate(const std::string &, CLPressureSampleDatabase::OnSample)", "CoreLocation: %s\n", v15);
    if (v15 == (char *)&__p)
      goto LABEL_41;
    goto LABEL_48;
  }
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  p_p = &__p;
  sub_18F2B6B4C((uint64_t)&__p, v6 + 20);
  if ((v26 & 0x80u) != 0)
    p_p = (__int128 *)__p;
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *a2;
    memmove(p_p, v8, v6);
  }
  strcpy((char *)p_p + v6, " ORDER BY CFTime ASC");
  if ((v26 & 0x80u) == 0)
    v9 = (const std::string::value_type *)&__p;
  else
    v9 = (const std::string::value_type *)__p;
  if ((v26 & 0x80u) == 0)
    v10 = v26;
  else
    v10 = *((_QWORD *)&__p + 1);
  std::string::append(&v21, v9, v10);
  if ((char)v26 < 0)
    operator delete((void *)__p);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v21;
  else
    v11 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (!sqlite3_prepare_v2(*(sqlite3 **)(a1 + 8), (const char *)v11, -1, &ppStmt, 0))
  {
    while (sqlite3_step(ppStmt) == 100)
    {
      *(_QWORD *)&__p = sqlite3_column_double(ppStmt, 0);
      v16 = sqlite3_column_double(ppStmt, 1);
      *((float *)&__p + 3) = v16;
      v17 = sqlite3_column_double(ppStmt, 2);
      *((float *)&__p + 2) = v17;
      (*(void (**)(uint64_t, __int128 *))(a3 + 16))(a3, &__p);
    }
    v18 = 1;
    goto LABEL_42;
  }
  if (qword_1EE16D6C8 != -1)
    dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
  v12 = qword_1EE16D6C0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_FAULT))
  {
    v13 = sqlite3_errmsg(*(sqlite3 **)(a1 + 8));
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v13;
    _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_FAULT, "Can't create query %s", (uint8_t *)&__p, 0xCu);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1EE16D6C8 != -1)
      dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
    v14 = sqlite3_errmsg(*(sqlite3 **)(a1 + 8));
    v23 = 136315138;
    v24 = v14;
    v15 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "BOOL CLPressureSampleDatabase::iterate(const std::string &, CLPressureSampleDatabase::OnSample)", "CoreLocation: %s\n", v15);
    if (v15 != (char *)&__p)
LABEL_48:
      free(v15);
  }
LABEL_41:
  v18 = 0;
LABEL_42:
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return v18;
}

void sub_18F3D13D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F3D1430(const char *a1, std::string::size_type a2, uint64_t a3)
{
  void **v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  uint64_t *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  void **v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  const void **v27;
  int v28;
  size_t v29;
  uint8_t *v30;
  const void *v31;
  uint8_t *v32;
  std::string::size_type v33;
  NSObject *v34;
  std::string *v35;
  float v36;
  _WORD *v37;
  _WORD *v38;
  NSObject *v39;
  uint64_t *v40;
  std::string *v41;
  int v42;
  NSObject *v43;
  std::string *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  float *v48;
  uint64_t **v49;
  float *v50;
  float *v51;
  float v52;
  float *v53;
  float *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  float *v60;
  int v61;
  float *v62;
  uint64_t v63;
  float v64;
  _QWORD *v65;
  float *v66;
  NSObject *v67;
  std::string *v68;
  uint64_t **v69;
  uint64_t **v70;
  uint64_t v71;
  uint64_t *v72;
  float v73;
  float *v74;
  float *v75;
  float *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  float *v82;
  int v83;
  float *v84;
  uint64_t v85;
  std::string *v86;
  char *v87;
  uint64_t *v88;
  std::string *v89;
  char *v90;
  std::string *v91;
  char *v92;
  std::string *v93;
  char *v94;
  NSObject *v95;
  uint64_t *v96;
  std::string::size_type v97;
  float v98;
  sqlite3_stmt *v99;
  float v100;
  void **v101;
  void **v102;
  void **v103;
  int v104;
  int v105;
  uint64_t *v106;
  _DWORD *v107;
  sqlite3_stmt *v108;
  sqlite3_stmt **v109;
  BOOL v110;
  NSObject *v111;
  std::string::size_type v112;
  void **v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  char *v117;
  void **v118;
  void **v119;
  uint64_t *v121;
  char *v122;
  std::string::size_type v123;
  char *v124;
  uint64_t *v125;
  void *v126;
  char *v127;
  const void **v130;
  _QWORD v131[5];
  sqlite3_stmt *ppStmt;
  _QWORD *v133[2];
  void **v134;
  char v135[8];
  sqlite3 *db;
  int v137;
  std::string *v138;
  __int128 v139;
  float *v140;
  void *v141[8];
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  std::string v148;
  void *__p[3];
  __int128 v150;
  __int128 v151;
  _QWORD *v152;
  _QWORD v153[3];
  _QWORD v154[3];
  uint8_t buf[24];
  char *v156;
  uint64_t v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  memset(buf, 0, sizeof(buf));
  memset(v141, 0, 24);
  sub_18F3D01D0((uint64_t)v135, a1, (__int128 *)buf, (__int128 *)v141);
  if (v135[0])
  {
    ppStmt = 0;
    sub_18F270374(v141, "SELECT Run, MAX(degC) + MIN(degC) AS Midx2, MAX(degC) - MIN(degC) AS Range FROM PressureSample GROUP BY Run HAVING Range > 5 ORDER BY Midx2");
    if (v135[0])
    {
      if (SHIBYTE(v141[2]) >= 0)
        v4 = v141;
      else
        v4 = (void **)v141[0];
      if (!sqlite3_prepare_v2(db, (const char *)v4, -1, &ppStmt, 0))
      {
        v13 = operator new();
        *(_QWORD *)v13 = 0;
        *(_QWORD *)(v13 + 8) = 0;
        *(_QWORD *)(v13 + 16) = 0;
        v134 = (void **)v13;
        while (sqlite3_step(ppStmt) == 100)
        {
          v14 = (char *)sqlite3_column_text(ppStmt, 0);
          sub_18F270374(__p, v14);
          v16 = *(_QWORD *)(v13 + 8);
          v15 = *(_QWORD *)(v13 + 16);
          if (v16 >= v15)
          {
            v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(_QWORD *)v13) >> 3);
            v19 = v18 + 1;
            if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_18F26F8C0();
            v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(_QWORD *)v13) >> 3);
            if (2 * v20 > v19)
              v19 = 2 * v20;
            if (v20 >= 0x555555555555555)
              v21 = 0xAAAAAAAAAAAAAAALL;
            else
              v21 = v19;
            v157 = v13 + 16;
            if (v21)
              v22 = (char *)sub_18F2AC910(v13 + 16, v21);
            else
              v22 = 0;
            v23 = (void **)&v22[24 * v18];
            *(_QWORD *)buf = v22;
            *(_QWORD *)&buf[8] = v23;
            v156 = &v22[24 * v21];
            v24 = *(_OWORD *)__p;
            v23[2] = __p[2];
            *(_OWORD *)v23 = v24;
            memset(__p, 0, sizeof(__p));
            *(_QWORD *)&buf[16] = v23 + 3;
            sub_18F2B0E70((uint64_t *)v13, buf);
            v25 = *(_QWORD *)(v13 + 8);
            sub_18F2B0FF8((uint64_t)buf);
            v26 = SHIBYTE(__p[2]);
            *(_QWORD *)(v13 + 8) = v25;
            if (v26 < 0)
              operator delete(__p[0]);
          }
          else
          {
            v17 = *(_OWORD *)__p;
            *(void **)(v16 + 16) = __p[2];
            *(_OWORD *)v16 = v17;
            *(_QWORD *)(v13 + 8) = v16 + 24;
          }
        }
LABEL_45:
        if (SHIBYTE(v141[2]) < 0)
        {
          operator delete(v141[0]);
          if (v13)
            goto LABEL_47;
        }
        else if (v13)
        {
LABEL_47:
          v133[0] = 0;
          v133[1] = 0;
          ppStmt = (sqlite3_stmt *)v133;
          *(_OWORD *)a3 = xmmword_18F506F70;
          *(_DWORD *)(a3 + 16) = -1;
          memset_pattern16((void *)(a3 + 20), &unk_18F5094A0, 0xCAuLL);
          LODWORD(__p[0]) = 0;
          *(_OWORD *)&__p[1] = 0u;
          v150 = 0u;
          v151 = 0u;
          v153[0] = 0;
          v152 = v153;
          v154[1] = 0;
          v154[0] = 0;
          v153[1] = 0;
          v153[2] = v154;
          v154[2] = 0x6400000000;
          v27 = *(const void ***)v13;
          v130 = *(const void ***)(v13 + 8);
          if (*(const void ***)v13 != v130)
          {
            v28 = 0;
            while (1)
            {
              sub_18F270374(&v148, "RUN=\"");
              if (*((char *)v27 + 23) >= 0)
                v29 = *((unsigned __int8 *)v27 + 23);
              else
                v29 = (size_t)v27[1];
              sub_18F2B6B4C((uint64_t)buf, v29 + 1);
              if ((buf[23] & 0x80u) == 0)
                v30 = buf;
              else
                v30 = *(uint8_t **)buf;
              if (v29)
              {
                if (*((char *)v27 + 23) >= 0)
                  v31 = v27;
                else
                  v31 = *v27;
                memmove(v30, v31, v29);
              }
              *(_WORD *)&v30[v29] = 34;
              if ((buf[23] & 0x80u) == 0)
                v32 = buf;
              else
                v32 = *(uint8_t **)buf;
              if ((buf[23] & 0x80u) == 0)
                v33 = buf[23];
              else
                v33 = *(_QWORD *)&buf[8];
              std::string::append(&v148, (const std::string::value_type *)v32, v33);
              if ((char)buf[23] < 0)
                operator delete(*(void **)buf);
              if (qword_1EE16D6C8 != -1)
                dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
              v34 = qword_1EE16D6C0;
              if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_DEBUG))
              {
                v35 = &v148;
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v35 = (std::string *)v148.__r_.__value_.__r.__words[0];
                *(_DWORD *)buf = 136315138;
                *(_QWORD *)&buf[4] = v35;
                _os_log_impl(&dword_18F1DC000, v34, OS_LOG_TYPE_DEBUG, "Calculating PRTT median for %s", buf, 0xCu);
              }
              if (sub_18F1FCA08(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE16D6C8 != -1)
                  dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
                v86 = &v148;
                if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v86 = (std::string *)v148.__r_.__value_.__r.__words[0];
                LODWORD(v141[0]) = 136315138;
                *(void **)((char *)v141 + 4) = v86;
                v87 = (char *)_os_log_send_and_compose_impl();
                sub_18F419700("Generic", 1, 0, 2, "static BOOL CLPressureSampleDatabase::getPRTT(const std::string &, const std::string &, struct CLNonlinearPrtt::Syscfg &)", "CoreLocation: %s\n", v87);
                if (v87 != (char *)buf)
                  free(v87);
              }
              sub_18F421034((uint64_t)__p);
              v131[0] = MEMORY[0x1E0C809B0];
              v131[1] = 3221225472;
              v131[2] = sub_18F3D2EA4;
              v131[3] = &unk_1E2956D40;
              v131[4] = __p;
              if ((sub_18F3D0F7C((uint64_t)v135, (const void **)&v148.__r_.__value_.__l.__data_, (uint64_t)v131) & 1) == 0)
              {
                if (qword_1EE16D6C8 != -1)
                  dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
                v39 = qword_1EE16D6C0;
                if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_FAULT))
                {
                  if (a1[23] >= 0)
                    v40 = (uint64_t *)a1;
                  else
                    v40 = *(uint64_t **)a1;
                  v41 = &v148;
                  if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v41 = (std::string *)v148.__r_.__value_.__r.__words[0];
                  *(_DWORD *)buf = 136315394;
                  *(_QWORD *)&buf[4] = v40;
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = v41;
                  _os_log_impl(&dword_18F1DC000, v39, OS_LOG_TYPE_FAULT, "Problem running through %s for %s", buf, 0x16u);
                }
                if (sub_18F1FCA08(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE16D6C8 != -1)
                    dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
                  if (a1[23] >= 0)
                    v88 = (uint64_t *)a1;
                  else
                    v88 = *(uint64_t **)a1;
                  v89 = &v148;
                  if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v89 = (std::string *)v148.__r_.__value_.__r.__words[0];
                  LODWORD(v141[0]) = 136315394;
                  *(void **)((char *)v141 + 4) = v88;
                  WORD2(v141[1]) = 2080;
                  *(void **)((char *)&v141[1] + 6) = v89;
                  v90 = (char *)_os_log_send_and_compose_impl();
                  sub_18F419700("Generic", 1, 0, 0, "static BOOL CLPressureSampleDatabase::getPRTT(const std::string &, const std::string &, struct CLNonlinearPrtt::Syscfg &)", "CoreLocation: %s\n", v90);
                  if (v90 != (char *)buf)
                    free(v90);
                }
                v42 = 1;
                goto LABEL_172;
              }
              sub_18F41ED64(__p, 4, (uint64_t)v141);
              if (!v142)
              {
                if (qword_1EE16D6C8 != -1)
                  dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
                v43 = qword_1EE16D6C0;
                if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_FAULT))
                {
                  v44 = &v148;
                  if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v44 = (std::string *)v148.__r_.__value_.__r.__words[0];
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = v44;
                  _os_log_impl(&dword_18F1DC000, v43, OS_LOG_TYPE_FAULT, "Invalid stat for run %s", buf, 0xCu);
                }
                if (sub_18F1FCA08(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE16D6C8 != -1)
                    dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
                  v91 = &v148;
                  if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v91 = (std::string *)v148.__r_.__value_.__r.__words[0];
                  LODWORD(v139) = 136315138;
                  *(_QWORD *)((char *)&v139 + 4) = v91;
                  v92 = (char *)_os_log_send_and_compose_impl();
                  sub_18F419700("Generic", 1, 0, 0, "static BOOL CLPressureSampleDatabase::getPRTT(const std::string &, const std::string &, struct CLNonlinearPrtt::Syscfg &)", "CoreLocation: %s\n", v92);
                  if (v92 != (char *)buf)
                    free(v92);
                }
                v42 = 1;
                goto LABEL_171;
              }
              v36 = *((float *)v141 + 1);
              v38 = (_WORD *)(a3 + 14);
              v37 = (_WORD *)(a3 + 8);
              if (!v28)
                goto LABEL_101;
              if (v28 == 2)
                break;
              v37 = (_WORD *)(a3 + 10);
              v38 = (_WORD *)(a3 + 16);
              if (v28 == 1)
                goto LABEL_101;
LABEL_102:
              v139 = 0uLL;
              v140 = 0;
              v45 = v144;
              v46 = v145;
              v47 = (_QWORD *)(v144 + 8 * (v146 >> 9));
              if (v145 == v144)
                v48 = 0;
              else
                v48 = (float *)(*v47 + 8 * (v146 & 0x1FF));
              while (1)
              {
                v63 = v46 == v45
                    ? 0
                    : *(_QWORD *)(v45 + (((v147 + v146) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v147 + v146) & 0x1FF);
                if (v48 == (float *)v63)
                  break;
                *(_DWORD *)buf = (int)v48[1];
                v49 = sub_18F3D31E4((uint64_t **)&ppStmt, *(int *)buf, buf);
                v50 = (float *)v49[5];
                if (v50 != (float *)v49[6])
                {
                  v51 = (float *)*((_QWORD *)&v139 + 1);
                  do
                  {
                    v52 = *v48 - *v50;
                    if (v51 >= v140)
                    {
                      v54 = (float *)v139;
                      v55 = (uint64_t)((uint64_t)v51 - v139) >> 2;
                      v56 = v55 + 1;
                      if ((unint64_t)(v55 + 1) >> 62)
                        sub_18F26F8C0();
                      v57 = (uint64_t)v140 - v139;
                      if ((uint64_t)((uint64_t)v140 - v139) >> 1 > v56)
                        v56 = v57 >> 1;
                      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
                        v58 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v58 = v56;
                      if (v58)
                      {
                        v59 = (char *)sub_18F26FB8C((uint64_t)&v140, v58);
                        v51 = (float *)*((_QWORD *)&v139 + 1);
                        v54 = (float *)v139;
                      }
                      else
                      {
                        v59 = 0;
                      }
                      v60 = (float *)&v59[4 * v55];
                      *v60 = v52;
                      v53 = v60 + 1;
                      while (v51 != v54)
                      {
                        v61 = *((_DWORD *)v51-- - 1);
                        *((_DWORD *)v60-- - 1) = v61;
                      }
                      *(_QWORD *)&v139 = v60;
                      *((_QWORD *)&v139 + 1) = v53;
                      v140 = (float *)&v59[4 * v58];
                      if (v54)
                        operator delete(v54);
                    }
                    else
                    {
                      *v51 = v52;
                      v53 = v51 + 1;
                    }
                    *((_QWORD *)&v139 + 1) = v53;
                    ++v50;
                    v51 = v53;
                  }
                  while (v50 != (float *)v49[6]);
                }
                v48 += 2;
                if ((float *)((char *)v48 - *v47) == (float *)4096)
                {
                  v62 = (float *)v47[1];
                  ++v47;
                  v48 = v62;
                }
                v45 = v144;
                v46 = v145;
              }
              if (*((_QWORD *)&v139 + 1) == (_QWORD)v139)
              {
                if (v28)
                {
                  if (qword_1EE16D6C8 != -1)
                    dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
                  v67 = qword_1EE16D6C0;
                  if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_FAULT))
                  {
                    v68 = &v148;
                    if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v68 = (std::string *)v148.__r_.__value_.__r.__words[0];
                    *(_DWORD *)buf = 136315138;
                    *(_QWORD *)&buf[4] = v68;
                    _os_log_impl(&dword_18F1DC000, v67, OS_LOG_TYPE_FAULT, "Cannot align run %s to previous runs", buf, 0xCu);
                  }
                  if (sub_18F1FCA08(115, 0))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE16D6C8 != -1)
                      dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
                    v93 = &v148;
                    if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v93 = (std::string *)v148.__r_.__value_.__r.__words[0];
                    v137 = 136315138;
                    v138 = v93;
                    v94 = (char *)_os_log_send_and_compose_impl();
                    sub_18F419700("Generic", 1, 0, 0, "static BOOL CLPressureSampleDatabase::getPRTT(const std::string &, const std::string &, struct CLNonlinearPrtt::Syscfg &)", "CoreLocation: %s\n", v94);
                    if (v94 != (char *)buf)
                      free(v94);
                  }
                  v42 = 1;
                  goto LABEL_169;
                }
                v64 = 0.0;
              }
              else
              {
                v64 = sub_18F3D32B4(v139, *((float **)&v139 + 1));
                v45 = v144;
                v46 = v145;
              }
              v65 = (_QWORD *)(v45 + 8 * (v146 >> 9));
              if (v46 == v45)
                v66 = 0;
              else
                v66 = (float *)(*v65 + 8 * (v146 & 0x1FF));
              while (1)
              {
                v85 = v46 == v45
                    ? 0
                    : *(_QWORD *)(v45 + (((v147 + v146) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v147 + v146) & 0x1FF);
                if (v66 == (float *)v85)
                  break;
                *(_DWORD *)buf = (int)v66[1];
                v69 = sub_18F3D31E4((uint64_t **)&ppStmt, *(int *)buf, buf);
                v70 = v69;
                v71 = (uint64_t)(v69 + 7);
                v72 = v69[7];
                v73 = *v66 - v64;
                v74 = (float *)v69[6];
                if (v74 >= (float *)v72)
                {
                  v76 = (float *)v69[5];
                  v77 = v74 - v76;
                  if ((unint64_t)(v77 + 1) >> 62)
                    sub_18F26F8C0();
                  v78 = (char *)v72 - (char *)v76;
                  v79 = ((char *)v72 - (char *)v76) >> 1;
                  if (v79 <= v77 + 1)
                    v79 = v77 + 1;
                  if (v78 >= 0x7FFFFFFFFFFFFFFCLL)
                    v80 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v80 = v79;
                  if (v80)
                  {
                    v81 = (char *)sub_18F26FB8C(v71, v80);
                    v76 = (float *)v70[5];
                    v74 = (float *)v70[6];
                  }
                  else
                  {
                    v81 = 0;
                  }
                  v82 = (float *)&v81[4 * v77];
                  *v82 = v73;
                  v75 = v82 + 1;
                  while (v74 != v76)
                  {
                    v83 = *((_DWORD *)v74-- - 1);
                    *((_DWORD *)v82-- - 1) = v83;
                  }
                  v70[5] = (uint64_t *)v82;
                  v70[6] = (uint64_t *)v75;
                  v70[7] = (uint64_t *)&v81[4 * v80];
                  if (v76)
                    operator delete(v76);
                }
                else
                {
                  *v74 = v73;
                  v75 = v74 + 1;
                }
                v70[6] = (uint64_t *)v75;
                v66 += 2;
                if ((float *)((char *)v66 - *v65) == (float *)4096)
                {
                  v84 = (float *)v65[1];
                  ++v65;
                  v66 = v84;
                }
                v45 = v144;
                v46 = v145;
              }
              v42 = 0;
              ++v28;
LABEL_169:
              if ((_QWORD)v139)
              {
                *((_QWORD *)&v139 + 1) = v139;
                operator delete((void *)v139);
              }
LABEL_171:
              sub_18F3D30B8(&v143);
LABEL_172:
              if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v148.__r_.__value_.__l.__data_);
              if (v42)
              {
                v11 = 0;
                goto LABEL_272;
              }
              v27 += 3;
              if (v27 == v130)
              {
                v99 = ppStmt;
                v141[1] = 0;
                v141[2] = 0;
                v141[0] = &v141[1];
                if (ppStmt == (sqlite3_stmt *)v133)
                {
                  v98 = 3.4028e38;
                }
                else
                {
                  v98 = 3.4028e38;
                  do
                  {
                    v100 = sub_18F3D32B4(*((_QWORD *)v99 + 5), *((float **)v99 + 6));
                    v101 = (void **)v141[1];
                    v102 = &v141[1];
                    v103 = &v141[1];
                    if (v141[1])
                    {
                      v104 = *((_DWORD *)v99 + 8);
                      do
                      {
                        while (1)
                        {
                          v103 = v101;
                          v105 = *((_DWORD *)v101 + 7);
                          if (v105 <= v104)
                            break;
                          v101 = (void **)*v103;
                          v102 = v103;
                          if (!*v103)
                            goto LABEL_231;
                        }
                        if (v105 >= v104)
                        {
                          v107 = v103;
                          goto LABEL_234;
                        }
                        v101 = (void **)v103[1];
                      }
                      while (v101);
                      v102 = v103 + 1;
                    }
LABEL_231:
                    v107 = operator new(0x28uLL);
                    v107[7] = *((_DWORD *)v99 + 8);
                    v107[8] = 0;
                    *(_QWORD *)v107 = 0;
                    *((_QWORD *)v107 + 1) = 0;
                    *((_QWORD *)v107 + 2) = v103;
                    *v102 = v107;
                    v106 = (uint64_t *)v107;
                    if (*(_QWORD *)v141[0])
                    {
                      v141[0] = *(void **)v141[0];
                      v106 = (uint64_t *)*v102;
                    }
                    sub_18F3BE62C((uint64_t *)v141[1], v106);
                    ++v141[2];
LABEL_234:
                    *((float *)v107 + 8) = v100;
                    if (v100 < v98)
                      v98 = v100;
                    v108 = (sqlite3_stmt *)*((_QWORD *)v99 + 1);
                    if (v108)
                    {
                      do
                      {
                        v109 = (sqlite3_stmt **)v108;
                        v108 = *(sqlite3_stmt **)v108;
                      }
                      while (v108);
                    }
                    else
                    {
                      do
                      {
                        v109 = (sqlite3_stmt **)*((_QWORD *)v99 + 2);
                        v110 = *v109 == v99;
                        v99 = (sqlite3_stmt *)v109;
                      }
                      while (!v110);
                    }
                    v99 = (sqlite3_stmt *)v109;
                  }
                  while (v109 != (sqlite3_stmt **)v133);
                }
                goto LABEL_244;
              }
            }
            v38 = (_WORD *)(a3 + 18);
            v37 = (_WORD *)(a3 + 12);
LABEL_101:
            *v37 = vcvts_n_s32_f32(*(float *)v141 * 1000.0, 8uLL);
            *v38 = vcvts_n_s32_f32(v36 * 1000.0, 8uLL);
            goto LABEL_102;
          }
          v141[1] = 0;
          v141[2] = 0;
          v141[0] = &v141[1];
          v98 = 3.4028e38;
LABEL_244:
          if (qword_1EE16D6C8 != -1)
            dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
          v111 = qword_1EE16D6C0;
          if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_DEBUG))
          {
            if (*(char *)(a2 + 23) >= 0)
              v112 = a2;
            else
              v112 = *(_QWORD *)a2;
            *(_DWORD *)buf = 134218242;
            *(double *)&buf[4] = v98;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v112;
            _os_log_impl(&dword_18F1DC000, v111, OS_LOG_TYPE_DEBUG, "min kPa = %f for %s", buf, 0x16u);
          }
          if (sub_18F1FCA08(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE16D6C8 != -1)
              dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
            if (*(char *)(a2 + 23) >= 0)
              v123 = a2;
            else
              v123 = *(_QWORD *)a2;
            LODWORD(v148.__r_.__value_.__l.__data_) = 134218242;
            *(double *)((char *)v148.__r_.__value_.__r.__words + 4) = v98;
            WORD2(v148.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v148.__r_.__value_.__r.__words[1] + 6) = v123;
            v124 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 2, "static BOOL CLPressureSampleDatabase::getPRTT(const std::string &, const std::string &, struct CLNonlinearPrtt::Syscfg &)", "CoreLocation: %s\n", v124);
            if (v124 != (char *)buf)
              free(v124);
          }
          *(_WORD *)(a3 + 2) = vcvts_n_s32_f32(v98, 8uLL);
          v113 = (void **)v141[0];
          if (v141[0] != &v141[1])
          {
            v114 = a3;
            do
            {
              v115 = *((unsigned int *)v113 + 7);
              if (v115 < 0x64)
              {
                *(_WORD *)(v114 + 2 * v115 + 20) = vcvts_n_s32_f32((float)(*((float *)v113 + 8) - v98) * 1000.0, 6uLL);
              }
              else
              {
                if (qword_1EE16D6C8 != -1)
                  dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
                v116 = qword_1EE16D6C0;
                if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&buf[4] = v115;
                  _os_log_impl(&dword_18F1DC000, v116, OS_LOG_TYPE_ERROR, "No bin for %d; dropping", buf, 8u);
                }
                if (sub_18F1FCA08(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE16D6C8 != -1)
                    dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
                  LODWORD(v148.__r_.__value_.__l.__data_) = 67109120;
                  HIDWORD(v148.__r_.__value_.__r.__words[0]) = v115;
                  v117 = (char *)_os_log_send_and_compose_impl();
                  sub_18F419700("Generic", 1, 0, 0, "static BOOL CLPressureSampleDatabase::getPRTT(const std::string &, const std::string &, struct CLNonlinearPrtt::Syscfg &)", "CoreLocation: %s\n", v117);
                  if (v117 != (char *)buf)
                    free(v117);
                }
              }
              v118 = (void **)v113[1];
              if (v118)
              {
                do
                {
                  v119 = v118;
                  v118 = (void **)*v118;
                }
                while (v118);
              }
              else
              {
                do
                {
                  v119 = (void **)v113[2];
                  v110 = *v119 == v113;
                  v113 = v119;
                }
                while (!v110);
              }
              v113 = v119;
            }
            while (v119 != &v141[1]);
          }
          sub_18F3D372C((_QWORD *)v141[1]);
          v11 = 1;
LABEL_272:
          sub_18F41ED24((uint64_t)__p);
          sub_18F3D319C(v133[0]);
          goto LABEL_273;
        }
        if (qword_1EE16D6C8 != -1)
          dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
        v95 = qword_1EE16D6C0;
        if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_FAULT))
        {
          if (a1[23] >= 0)
            v96 = (uint64_t *)a1;
          else
            v96 = *(uint64_t **)a1;
          if (*(char *)(a2 + 23) >= 0)
            v97 = a2;
          else
            v97 = *(_QWORD *)a2;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v96;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v97;
          _os_log_impl(&dword_18F1DC000, v95, OS_LOG_TYPE_FAULT, "%s has no runs for clause %s", buf, 0x16u);
        }
        if (sub_18F1FCA08(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D6C8 != -1)
            dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
          if (a1[23] >= 0)
            v125 = (uint64_t *)a1;
          else
            v125 = *(uint64_t **)a1;
          if (*(char *)(a2 + 23) >= 0)
            v126 = (void *)a2;
          else
            v126 = *(void **)a2;
          LODWORD(v141[0]) = 136315394;
          *(void **)((char *)v141 + 4) = v125;
          WORD2(v141[1]) = 2080;
          *(void **)((char *)&v141[1] + 6) = v126;
          v127 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "static BOOL CLPressureSampleDatabase::getPRTT(const std::string &, const std::string &, struct CLNonlinearPrtt::Syscfg &)", "CoreLocation: %s\n", v127);
          if (v127 != (char *)buf)
            free(v127);
        }
        v11 = 0;
LABEL_273:
        sub_18F3D314C(&v134);
        goto LABEL_274;
      }
      if (qword_1EE16D6C8 != -1)
        dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
      v5 = qword_1EE16D6C0;
      if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_FAULT))
      {
        v6 = sqlite3_errmsg(db);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v6;
        _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Can't create query %s", buf, 0xCu);
      }
      if (!sub_18F1FCA08(115, 0))
      {
LABEL_29:
        v13 = 0;
        v134 = 0;
        goto LABEL_45;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6C8 != -1)
        dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
      v7 = sqlite3_errmsg(db);
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = (void *)v7;
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "std::unique_ptr<std::vector<std::string>> CLPressureSampleDatabase::findRuns()", "CoreLocation: %s\n", v8);
    }
    else
    {
      if (qword_1EE16D6C8 != -1)
        dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
      v12 = qword_1EE16D6C0;
      if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "PressureSample";
        _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_FAULT, "Table %s invalid", buf, 0xCu);
      }
      if (!sub_18F1FCA08(115, 0))
        goto LABEL_29;
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6C8 != -1)
        dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = "PressureSample";
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "std::unique_ptr<std::vector<std::string>> CLPressureSampleDatabase::findRuns()", "CoreLocation: %s\n", v8);
    }
    if (v8 != (char *)buf)
      free(v8);
    goto LABEL_29;
  }
  if (qword_1EE16D6C8 != -1)
    dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
  v9 = qword_1EE16D6C0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_FAULT))
  {
    if (a1[23] >= 0)
      v10 = (uint64_t *)a1;
    else
      v10 = *(uint64_t **)a1;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "%s is invalid", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D6C8 != -1)
      dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
    if (a1[23] >= 0)
      v121 = (uint64_t *)a1;
    else
      v121 = *(uint64_t **)a1;
    LODWORD(v141[0]) = 136315138;
    *(void **)((char *)v141 + 4) = v121;
    v122 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "static BOOL CLPressureSampleDatabase::getPRTT(const std::string &, const std::string &, struct CLNonlinearPrtt::Syscfg &)", "CoreLocation: %s\n", v122);
    if (v122 != (char *)buf)
      free(v122);
  }
  v11 = 0;
LABEL_274:
  sub_18F3D0000((uint64_t)v135);
  return v11;
}

void sub_18F3D2D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void **a39,__int16 a40)
{
  sub_18F3D314C(&a39);
  sub_18F3D0000((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_18F3D2EA4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double v5;
  double v6;
  char *v7;
  uint8_t buf[4];
  double v9;
  __int16 v10;
  double v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D6C8 != -1)
    dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
  v4 = qword_1EE16D6C0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(float *)(a2 + 12);
    v6 = *(float *)(a2 + 8);
    *(_DWORD *)buf = 134218240;
    v9 = v5;
    v10 = 2048;
    v11 = v6;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEBUG, "Feeding %f %f to median estimator", buf, 0x16u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D6C8 != -1)
      dispatch_once(&qword_1EE16D6C8, &unk_1E2953328);
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "static BOOL CLPressureSampleDatabase::getPRTT(const std::string &, const std::string &, struct CLNonlinearPrtt::Syscfg &)_block_invoke", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  sub_18F420230(*(_QWORD *)(a1 + 32), a2);
}

os_log_t sub_18F3D308C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Pressure");
  qword_1EE16D6C0 = (uint64_t)result;
  return result;
}

uint64_t sub_18F3D30B8(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_18F1EB148((uint64_t)a1);
}

void ***sub_18F3D314C(void ***result)
{
  void **v1;
  void **v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = v1;
    sub_18F2AA514(&v2);
    return (void ***)MEMORY[0x194001438](v1, 0x20C40960023A9);
  }
  return result;
}

void sub_18F3D319C(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    sub_18F3D319C(*a1);
    sub_18F3D319C(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t **sub_18F3D31E4(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[6] = 0;
    v7[7] = 0;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_18F3BE62C(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

float sub_18F3D32B4(uint64_t a1, float *a2)
{
  uint64_t v2;
  float *v3;
  unint64_t v4;
  float *v5;
  float *v7;
  float v8;
  uint64_t v9;
  float *v10;
  float v11;
  float v12;

  v2 = (uint64_t)a2 - a1;
  if ((uint64_t)a2 - a1 <= 3)
    __assert_rtn("getMedianInPlace", "CMPressureUtilities.h", 163, "size > 0");
  v3 = (float *)a1;
  v4 = (unint64_t)(v2 >> 2) >> 1;
  v5 = (float *)(a1 + 4 * v4);
  if (v5 != a2)
    sub_18F3D33A8(a1, (float *)(a1 + 4 * v4), a2);
  if (((v2 >> 2) & 0x8000000000000001) == 1)
    return *v5;
  if ((unint64_t)v2 >= 8 && v4 != 1)
  {
    v7 = v3 + 1;
    v8 = *v3;
    v9 = 4 * v4 - 4;
    v10 = v3 + 1;
    do
    {
      v11 = *v10++;
      v12 = v11;
      if (v8 < v11)
      {
        v8 = v12;
        v3 = v7;
      }
      v7 = v10;
      v9 -= 4;
    }
    while (v9);
  }
  return *v3 + (float)((float)(*v5 - *v3) * 0.5);
}

uint64_t sub_18F3D33A8(uint64_t result, float *a2, float *a3)
{
  float *v3;
  float *v5;
  unint64_t v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float *v22;
  float v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  float v34;

  if (a3 != a2)
  {
    v3 = a3;
    v5 = (float *)result;
    do
    {
      v6 = v3 - v5;
      if (v6 < 2)
        break;
      if (v6 == 3)
        return sub_18F3D3630(v5, v5 + 1, v3 - 1);
      if (v6 == 2)
      {
        v33 = *(v3 - 1);
        v34 = *v5;
        if (v33 < *v5)
        {
          *v5 = v33;
          *(v3 - 1) = v34;
        }
        return result;
      }
      if ((char *)v3 - (char *)v5 <= 31)
        return (uint64_t)sub_18F3D36B8(v5, v3);
      v7 = &v5[v6 >> 1];
      v8 = v3 - 1;
      result = sub_18F3D3630(v5, v7, v3 - 1);
      v9 = *v5;
      if (*v5 >= *v7)
      {
        v10 = v3 - 1;
        while (--v10 != v5)
        {
          if (*v10 < *v7)
          {
            *v5 = *v10;
            *v10 = v9;
            result = (result + 1);
            goto LABEL_13;
          }
        }
        v22 = v5 + 1;
        if (v9 >= *v8)
        {
          while (v22 != v8)
          {
            v23 = *v22;
            if (v9 < *v22)
            {
              *v22++ = *v8;
              *v8 = v23;
              goto LABEL_45;
            }
            ++v22;
          }
          return result;
        }
LABEL_45:
        if (v22 == v8)
          return result;
        while (1)
        {
          v27 = *v5;
          do
          {
            v28 = *v22++;
            v29 = v28;
          }
          while (v27 >= v28);
          v30 = v22 - 1;
          do
          {
            v31 = *--v8;
            v32 = v31;
          }
          while (v27 < v31);
          if (v30 >= v8)
            break;
          *v30 = v32;
          *v8 = v29;
        }
        v5 = v22 - 1;
        if (v30 > a2)
          return result;
      }
      else
      {
        v10 = v3 - 1;
LABEL_13:
        v11 = v5 + 1;
        if (v5 + 1 >= v10)
        {
          v16 = v5 + 1;
        }
        else
        {
          v12 = v5 + 1;
          while (1)
          {
            v13 = *v7;
            do
            {
              v14 = *v12++;
              v15 = v14;
            }
            while (v14 < v13);
            v16 = v12 - 1;
            do
            {
              v17 = *--v10;
              v18 = v17;
            }
            while (v17 >= v13);
            if (v16 >= v10)
              break;
            *v16 = v18;
            *v10 = v15;
            result = (result + 1);
            if (v16 == v7)
              v7 = v10;
          }
        }
        if (v16 != v7)
        {
          v19 = *v16;
          if (*v7 < *v16)
          {
            *v16 = *v7;
            *v7 = v19;
            result = (result + 1);
          }
        }
        if (v16 == a2)
          return result;
        if (!(_DWORD)result)
        {
          if (v16 <= a2)
          {
            v24 = v16 + 1;
            while (v24 != v3)
            {
              v26 = *(v24 - 1);
              v25 = *v24++;
              if (v25 < v26)
                goto LABEL_29;
            }
          }
          else
          {
            while (v11 != v16)
            {
              v21 = *(v11 - 1);
              v20 = *v11++;
              if (v20 < v21)
                goto LABEL_29;
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2)
          v5 = v16 + 1;
        else
          v3 = v16;
      }
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t sub_18F3D3630(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float *sub_18F3D36B8(float *result, float *a2)
{
  float *v2;
  float v3;
  float v4;
  float *v5;
  float *v6;
  float *v7;
  float v8;
  float v9;

  while (result != a2 - 1)
  {
    v2 = result++;
    if (v2 != a2 && result != a2)
    {
      v3 = *v2;
      v4 = *v2;
      v5 = result;
      v6 = v2;
      v7 = result;
      do
      {
        v8 = *v7++;
        v9 = v8;
        if (v8 < v4)
        {
          v4 = v9;
          v6 = v5;
        }
        v5 = v7;
      }
      while (v7 != a2);
      if (v6 != v2)
      {
        *v2 = *v6;
        *v6 = v3;
      }
    }
  }
  return result;
}

void sub_18F3D372C(_QWORD *a1)
{
  if (a1)
  {
    sub_18F3D372C(*a1);
    sub_18F3D372C(a1[1]);
    operator delete(a1);
  }
}

double sub_18F3D3764@<D0>(uint64_t a1@<X0>, float *a2@<X1>, float32x4_t *a3@<X8>, float32x4_t a4@<Q0>)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float32_t v9;
  float32_t v10;
  float32_t v11;
  float v12;
  double result;

  v4 = *(float *)(a1 + 8);
  a4.i32[0] = *(_DWORD *)(a1 + 12);
  v5 = a2[1];
  v6 = *(float *)(a1 + 4);
  v7 = a2[2];
  v8 = a2[3];
  v9 = (float)((float)((float)(v4 * v5) + (float)(a4.f32[0] * *a2)) - (float)(v6 * v7)) + (float)(*(float *)a1 * v8);
  v10 = (float)((float)((float)(a4.f32[0] * v5) - (float)(v4 * *a2)) + (float)(*(float *)a1 * v7)) + (float)(v6 * v8);
  v11 = (float)((float)((float)(v6 * *a2) - (float)(*(float *)a1 * v5)) + (float)(a4.f32[0] * v7)) + (float)(v4 * v8);
  v12 = (float)((float)-(float)(v6 * v5) - (float)(*(float *)a1 * *a2)) - (float)(v4 * v7);
  a3->f32[0] = v9;
  a3->f32[1] = v10;
  a4.f32[0] = v12 + (float)(a4.f32[0] * v8);
  a3->f32[2] = v11;
  a3->i32[3] = a4.i32[0];
  *(_QWORD *)&result = sub_18F1FFE94(a3, a4).u64[0];
  return result;
}

double sub_18F3D37C4@<D0>(float32x2_t *a1@<X0>, float32x4_t *a2@<X8>, float32x4_t a3@<Q0>)
{
  __int32 v3;
  double result;

  v3 = a1[1].i32[1];
  a3.f32[0] = -a1[1].f32[0];
  *(float32x2_t *)a2->f32 = vneg_f32(*a1);
  a2->i32[2] = a3.i32[0];
  a2->i32[3] = v3;
  *(_QWORD *)&result = sub_18F1FFE94(a2, a3).u64[0];
  return result;
}

float32x4_t sub_18F3D37E4@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t v2;
  float32x4_t result;

  if (a1->f32[3] >= 0.0)
  {
    result = *a1;
    *a2 = *a1;
  }
  else
  {
    v2 = vnegq_f32(*a1);
    *a2 = v2;
    result.i64[0] = sub_18F1FFE94(a2, v2).u64[0];
  }
  return result;
}

double sub_18F3D381C@<D0>(float32x2_t *a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>, float32x4_t a4@<Q0>)
{
  __int32 v6;
  float32x4_t v7;
  double result;
  float32x4_t v9;
  float32x4_t v10;

  v6 = a1[1].i32[1];
  a4.f32[0] = -a1[1].f32[0];
  *(float32x2_t *)v9.f32 = vneg_f32(*a1);
  v9.i64[1] = __PAIR64__(v6, a4.u32[0]);
  v7 = sub_18F1FFE94(&v9, a4);
  sub_18F3D3764(a2, v9.f32, &v10, v7);
  *(_QWORD *)&result = sub_18F3D37E4(&v10, a3).u64[0];
  return result;
}

float sub_18F3D3880(float *a1)
{
  uint64_t v1;
  float v2;
  float v3;
  float v4;
  float result;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11[3];

  v1 = 0;
  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  result = (float)((float)((float)(*a1 * *a1) + (float)(v3 * v3)) * 2.0) + -1.0;
  v6 = (float)((float)(*a1 * v2) - (float)(v3 * v4)) + (float)((float)(*a1 * v2) - (float)(v3 * v4));
  v7 = (float)((float)(v3 * v2) + (float)(*a1 * v4)) + (float)((float)(v3 * v2) + (float)(*a1 * v4));
  v11[0] = result;
  v11[1] = v6;
  v11[2] = v7;
  v8 = 0.0;
  do
  {
    v8 = v8 + (float)(v11[v1] * v11[v1]);
    ++v1;
  }
  while (v1 != 3);
  if (sqrtf(v8) > 0.00000011921)
  {
    v9 = 0;
    v10 = 0.0;
    do
    {
      v10 = v10 + (float)(v11[v9] * v11[v9]);
      ++v9;
    }
    while (v9 != 3);
    return result / sqrtf(v10);
  }
  return result;
}

float sub_18F3D3930(uint64_t a1, float *a2)
{
  unint64_t i;
  float v5;
  unint64_t j;
  float v7;
  float v8;
  float *v9;
  float v11;

  for (i = 0; i != 3; ++i)
  {
    v5 = sub_18F37D890(a1, i, 0) * *a2;
    *(float *)sub_18F33D3D0((uint64_t)&v11, i) = v5;
    for (j = 1; j != 3; ++j)
    {
      v7 = sub_18F37D890(a1, i, j);
      v8 = sub_18F3551B0((uint64_t)a2, j);
      v9 = (float *)sub_18F33D3D0((uint64_t)&v11, i);
      *v9 = *v9 + (float)(v7 * v8);
    }
  }
  return v11;
}

float sub_18F3D39F4(float *a1, float a2, float a3, float a4)
{
  float v5[3];
  float v6[9];

  v5[0] = a2;
  v5[1] = a3;
  v5[2] = a4;
  sub_18F3D4B74(a1, v6, 1.0);
  return sub_18F3D3930((uint64_t)v6, v5);
}

void sub_18F3D3A2C(float *a1, uint64_t a2)
{
  int v3;
  int v4;
  float v5[9];

  sub_18F3D4B74(a1, v5, -1.0);
  *(float *)a2 = sub_18F3D3930((uint64_t)v5, (float *)a2);
  *(_DWORD *)(a2 + 4) = v3;
  *(_DWORD *)(a2 + 8) = v4;
}

float sub_18F3D3A70(float *a1, float a2, float a3, float a4)
{
  float v5[3];
  float v6[9];

  v5[0] = a2;
  v5[1] = a3;
  v5[2] = a4;
  sub_18F3D4B74(a1, v6, -1.0);
  return sub_18F3D3930((uint64_t)v6, v5);
}

double sub_18F3D3AA8(float32x4_t *a1, float *a2)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float32x4_t v9;
  double result;

  v4 = 0;
  v5 = 0.0;
  do
  {
    v5 = v5 + (float)(a2[v4] * a2[v4]);
    ++v4;
  }
  while (v4 != 3);
  v6 = sqrtf(v5);
  v7 = 0.5;
  v8 = v6 * 0.5;
  if ((float)(v6 * 0.5) > 0.0)
    v7 = (float)(sinf(v6 * 0.5) / v8) * 0.5;
  a1->f32[0] = v7 * *a2;
  a1->f32[1] = v7 * a2[1];
  a1->f32[2] = v7 * a2[2];
  v9.f32[0] = cosf(v8);
  a1->i32[3] = v9.i32[0];
  *(_QWORD *)&result = sub_18F1FFE94(a1, v9).u64[0];
  return result;
}

float sub_18F3D3B4C(float32x4_t *a1)
{
  uint64_t v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float32x4_t v7;
  float32x4_t v8;

  v8 = *a1;
  sub_18F3D37E4(&v8, &v7);
  v1 = 0;
  v8 = v7;
  v2 = v7.f32[0];
  v3 = 0.0;
  do
  {
    v3 = v3 + (float)(v7.f32[v1] * v7.f32[v1]);
    ++v1;
  }
  while (v1 != 3);
  v4 = sqrtf(v3);
  if (v4 >= 0.00000011921)
  {
    v5 = atan2f(v4, v8.f32[3]);
    return v2 * (float)((float)(v5 + v5) / v4);
  }
  return v2;
}

BOOL sub_18F3D3C08(float *a1, float32x4_t *a2, uint64_t a3, float a4, float a5, float a6, float a7, float a8, float a9, double a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, float a18)
{
  unsigned __int8 v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t v37;
  float v38;
  float v39;
  uint64_t v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  NSObject *v46;
  _BOOL8 v47;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  uint64_t v57;
  float v58;
  float v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  float v66;
  float v67;
  uint64_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  float v74;
  float v75;
  float v76;
  float v77;
  unint64_t i;
  uint64_t v79;
  float v80;
  unint64_t v81;
  float v82;
  unint64_t j;
  uint64_t v84;
  unint64_t v85;
  float32x4_t v86;
  uint64_t v87;
  float v88;
  uint64_t v89;
  float v90;
  unint64_t v91;
  uint64_t v92;
  float v93;
  float v94;
  float v95;
  unint64_t v96;
  float v97;
  unint64_t k;
  unint64_t v99;
  float v100;
  float v101;
  float *v102;
  float *v103;
  float *v104;
  NSObject *v105;
  char *v106;
  char *v107;
  NSObject *v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  int v112;
  __int128 v113;
  __int128 v114;
  int v115;
  __int128 v116;
  __int128 v117;
  int v118;
  __int128 v119;
  __int128 v120;
  int v121;
  __int128 v122;
  __int128 v123;
  int v124;
  int v125;
  float v126;
  float v127;
  float v128;
  int v129;
  unint64_t v130;
  float v131;
  int v132;
  int v133;
  float v134;
  float v135;
  float v136;
  int v137;
  float v138;
  float v139;
  float v140;
  int v141;
  _WORD v142[24];
  _OWORD v143[2];
  int v144;
  __int128 v145;
  __int128 v146;
  int v147;
  __int128 v148;
  __int128 v149;
  int v150;
  _OWORD v151[2];
  int v152;
  _OWORD v153[2];
  int v154;
  __int128 v155;
  __int128 v156;
  int v157;
  _DWORD v158[3];
  unint64_t v159;
  float v160;
  float v161;
  float v162;
  float v163;
  unint64_t v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  __int128 v172;
  __int128 v173;
  int v174;
  uint8_t buf[16];
  __int128 v176;
  int v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v169 = a4;
  v170 = a5;
  v171 = a6;
  v166 = a7;
  v167 = a8;
  v168 = a9;
  v164 = a17;
  v165 = a18;
  v19 = atomic_load((unsigned __int8 *)&qword_1ECEDF810);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF810))
  {
    dword_1ECEDF808 = 1043452116;
    __cxa_guard_release(&qword_1ECEDF810);
  }
  v20 = 0;
  v21 = 0.0;
  do
  {
    v21 = v21 + (float)(*(float *)((char *)&v169 + v20) * *(float *)((char *)&v169 + v20));
    v20 += 4;
  }
  while (v20 != 12);
  if (sqrtf(v21) == 0.0)
    return 0;
  v22 = 0;
  v23 = 0.0;
  do
  {
    v23 = v23 + (float)(*(float *)((char *)&v166 + v22) * *(float *)((char *)&v166 + v22));
    v22 += 4;
  }
  while (v22 != 12);
  if (sqrtf(v23) == 0.0)
    return 0;
  v24 = 0;
  v25 = v169;
  v26 = v170;
  v27 = v171;
  *(float *)buf = v169;
  *(float *)&buf[4] = v170;
  *(float *)&buf[8] = v171;
  v28 = 0.0;
  do
  {
    v28 = v28 + (float)(*(float *)&buf[v24] * *(float *)&buf[v24]);
    v24 += 4;
  }
  while (v24 != 12);
  if (sqrtf(v28) > 0.00000011921)
  {
    v29 = 0;
    v30 = 0.0;
    do
    {
      v30 = v30 + (float)(*(float *)&buf[v29] * *(float *)&buf[v29]);
      v29 += 4;
    }
    while (v29 != 12);
    v31 = sqrtf(v30);
    v25 = v169 / v31;
    v26 = v170 / v31;
    v27 = v171 / v31;
  }
  v32 = 0;
  v169 = v25;
  v170 = v26;
  v171 = v27;
  v33 = v166;
  v34 = v167;
  v35 = v168;
  *(float *)buf = v166;
  *(float *)&buf[4] = v167;
  *(float *)&buf[8] = v168;
  v36 = 0.0;
  do
  {
    v36 = v36 + (float)(*(float *)&buf[v32] * *(float *)&buf[v32]);
    v32 += 4;
  }
  while (v32 != 12);
  if (sqrtf(v36) > 0.00000011921)
  {
    v37 = 0;
    v38 = 0.0;
    do
    {
      v38 = v38 + (float)(*(float *)&buf[v37] * *(float *)&buf[v37]);
      v37 += 4;
    }
    while (v37 != 12);
    v39 = sqrtf(v38);
    v33 = v166 / v39;
    v34 = v167 / v39;
    v35 = v168 / v39;
  }
  v40 = 0;
  v166 = v33;
  v167 = v34;
  v168 = v35;
  v41 = (float)(v26 * v35) - (float)(v27 * v34);
  v42 = (float)(v27 * v33) - (float)(v25 * v35);
  v43 = (float)(v25 * v34) - (float)(v26 * v33);
  v161 = v41;
  v162 = v42;
  v163 = v43;
  v44 = 0.0;
  do
  {
    v44 = v44 + (float)(*(float *)((char *)&v161 + v40) * *(float *)((char *)&v161 + v40));
    v40 += 4;
  }
  while (v40 != 12);
  v45 = sqrtf(v44);
  if (v45 < *(float *)&dword_1ECEDF808)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2953348);
    v46 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = v45;
      _os_log_impl(&dword_18F1DC000, v46, OS_LOG_TYPE_DEBUG, "n and g are too close %f", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2953348);
      LODWORD(v172) = 134217984;
      *(double *)((char *)&v172 + 4) = v45;
      v107 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "static BOOL CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, CMVector<float, 3>, const float *, CMOQuaternion &, CMMatrix<float, 3> &)", "CoreLocation: %s\n", v107);
      if (v107 != (char *)buf)
        free(v107);
    }
    return 0;
  }
  v49 = 0;
  v50 = v41 / v45;
  v51 = v42 / v45;
  v161 = v41 / v45;
  v162 = v42 / v45;
  v52 = v43 / v45;
  v163 = v43 / v45;
  v54 = *((float *)&v164 + 1);
  LODWORD(v53) = v164;
  v55 = v165;
  *(_QWORD *)buf = v164;
  *(float *)&buf[8] = v165;
  v56 = 0.0;
  do
  {
    v56 = v56 + (float)(*(float *)&buf[v49] * *(float *)&buf[v49]);
    v49 += 4;
  }
  while (v49 != 12);
  if (sqrtf(v56) > 0.00000011921)
  {
    v57 = 0;
    v58 = 0.0;
    do
    {
      v58 = v58 + (float)(*(float *)&buf[v57] * *(float *)&buf[v57]);
      v57 += 4;
    }
    while (v57 != 12);
    v59 = sqrtf(v58);
    v53 = *(float *)&v164 / v59;
    v54 = *((float *)&v164 + 1) / v59;
    v55 = v165 / v59;
  }
  v60 = 0;
  v164 = __PAIR64__(LODWORD(v54), LODWORD(v53));
  v165 = v55;
  v159 = 0;
  v160 = -1.0;
  v61 = (float)(v55 * -0.0) - v54;
  v62 = 0.0;
  v63 = v53 + (float)(v55 * 0.0);
  v64 = (float)(v54 * -0.0) + (float)(v53 * 0.0);
  *(float *)buf = v61;
  *(float *)&buf[4] = v63;
  *(float *)&buf[8] = v64;
  do
  {
    v62 = v62 + (float)(*(float *)&buf[v60] * *(float *)&buf[v60]);
    v60 += 4;
  }
  while (v60 != 12);
  if (sqrtf(v62) > 0.00000011921)
  {
    v65 = 0;
    v66 = 0.0;
    do
    {
      v66 = v66 + (float)(*(float *)&buf[v65] * *(float *)&buf[v65]);
      v65 += 4;
    }
    while (v65 != 12);
    v67 = sqrtf(v66);
    v61 = v61 / v67;
    v63 = v63 / v67;
    v64 = v64 / v67;
  }
  v68 = 0;
  *(float *)v158 = v61;
  *(float *)&v158[1] = v63;
  *(float *)&v158[2] = v64;
  v69 = (float)(v34 * v52) - (float)(v35 * v51);
  v70 = (float)(v35 * v50) - (float)(v33 * v52);
  v71 = (float)(v33 * v51) - (float)(v34 * v50);
  *(float *)buf = v69;
  *(float *)&buf[4] = v70;
  *(float *)&buf[8] = v71;
  v72 = 0.0;
  do
  {
    v72 = v72 + (float)(*(float *)&buf[v68] * *(float *)&buf[v68]);
    v68 += 4;
  }
  while (v68 != 12);
  if (sqrtf(v72) > 0.00000011921)
  {
    v73 = 0;
    v74 = 0.0;
    do
    {
      v74 = v74 + (float)(*(float *)&buf[v73] * *(float *)&buf[v73]);
      v73 += 4;
    }
    while (v73 != 12);
    v75 = sqrtf(v74);
    v69 = v69 / v75;
    v70 = v70 / v75;
    v71 = v71 / v75;
  }
  v169 = v69;
  v170 = v70;
  v171 = v71;
  sub_18F3D4928((uint64_t)&v172, (uint64_t)&v169, (uint64_t)&v164);
  sub_18F3D4928((uint64_t)&v155, (uint64_t)&v166, (uint64_t)&v159);
  sub_18F3D4928((uint64_t)v153, (uint64_t)&v161, (uint64_t)v158);
  v76 = (float)((float)(a1[1] * a1[1]) + (float)(*a1 * *a1)) + (float)((float)(*a1 + *a1) * a1[1]);
  if (v76 == 0.0)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2953348);
    v108 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v108, OS_LOG_TYPE_FAULT, "Assertion failed: lambda2 != 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMOQuaternion.cpp, line 208,invalid weights.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2953348);
      LOWORD(v151[0]) = 0;
      v109 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "static BOOL CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, CMVector<float, 3>, const float *, CMOQuaternion &, CMMatrix<float, 3> &)", "CoreLocation: %s\n", v109);
      if (v109 != (char *)buf)
        free(v109);
    }
  }
  v151[0] = v153[0];
  v151[1] = v153[1];
  v152 = v154;
  v77 = *a1;
  v145 = v172;
  v146 = v173;
  v147 = v174;
  v133 = 0;
  v134 = v171;
  v135 = -v170;
  v136 = -v171;
  v137 = 0;
  v138 = v169;
  v139 = v170;
  v140 = -v169;
  v141 = 0;
  sub_18F38101C((uint64_t)&v133, (uint64_t)v153, (uint64_t)v142);
  v125 = 0;
  v126 = v165;
  v127 = -*((float *)&v164 + 1);
  v128 = -v165;
  v129 = 0;
  v130 = v164;
  v131 = -*(float *)&v164;
  v132 = 0;
  sub_18F38101C((uint64_t)v142, (uint64_t)&v125, (uint64_t)v143);
  for (i = 0; i != 9; ++i)
    *((float *)&v145 + i) = *((float *)&v145 + i) - sub_18F359948((uint64_t)v143, i);
  v79 = 0;
  v80 = 1.0 / sqrtf(v76);
  v148 = v145;
  v149 = v146;
  v150 = v147;
  do
  {
    *(float *)((char *)&v148 + v79) = (float)(v80 * v77) * *(float *)((char *)&v148 + v79);
    v79 += 4;
  }
  while (v79 != 36);
  v81 = 0;
  *(_OWORD *)buf = v148;
  v176 = v149;
  v177 = v150;
  do
  {
    *((float *)v151 + v81) = sub_18F359948((uint64_t)buf, v81) + *((float *)v151 + v81);
    ++v81;
  }
  while (v81 != 9);
  v82 = a1[1];
  v119 = v155;
  v120 = v156;
  v121 = v157;
  v133 = 0;
  v134 = v168;
  v135 = -v167;
  v136 = -v168;
  v137 = 0;
  v138 = v166;
  v139 = v167;
  v140 = -v166;
  v141 = 0;
  sub_18F38101C((uint64_t)&v133, (uint64_t)v153, (uint64_t)v142);
  v125 = 0;
  v126 = v160;
  v127 = -*((float *)&v159 + 1);
  v128 = -v160;
  v129 = 0;
  v130 = v159;
  v131 = -*(float *)&v159;
  v132 = 0;
  sub_18F38101C((uint64_t)v142, (uint64_t)&v125, (uint64_t)v143);
  for (j = 0; j != 9; ++j)
    *((float *)&v119 + j) = *((float *)&v119 + j) - sub_18F359948((uint64_t)v143, j);
  v84 = 0;
  v122 = v119;
  v123 = v120;
  v124 = v121;
  do
  {
    *(float *)((char *)&v122 + v84) = (float)(v80 * v82) * *(float *)((char *)&v122 + v84);
    v84 += 4;
  }
  while (v84 != 36);
  v85 = 0;
  *(_OWORD *)buf = v122;
  v176 = v123;
  v177 = v124;
  do
  {
    v86.f32[0] = sub_18F359948((uint64_t)buf, v85) + *((float *)v151 + v85);
    *((_DWORD *)v151 + v85++) = v86.i32[0];
  }
  while (v85 != 9);
  sub_18F3D49B8(a2, (float *)v151, v86);
  v87 = 0;
  v88 = *a1;
  v113 = v172;
  v114 = v173;
  v115 = v174;
  do
  {
    *(float *)((char *)&v113 + v87) = v88 * *(float *)((char *)&v113 + v87);
    v87 += 4;
  }
  while (v87 != 36);
  v89 = 0;
  v118 = v115;
  v116 = v113;
  v117 = v114;
  v90 = a1[1];
  v112 = v157;
  v110 = v155;
  v111 = v156;
  do
  {
    *(float *)((char *)&v110 + v89) = v90 * *(float *)((char *)&v110 + v89);
    v89 += 4;
  }
  while (v89 != 36);
  v91 = 0;
  *(_OWORD *)buf = v110;
  v176 = v111;
  v177 = v112;
  do
  {
    *((float *)&v116 + v91) = sub_18F359948((uint64_t)buf, v91) + *((float *)&v116 + v91);
    ++v91;
  }
  while (v91 != 9);
  v92 = 0;
  v143[0] = v116;
  v143[1] = v117;
  v144 = v118;
  v93 = 0.0;
  do
  {
    v93 = v93 + (float)(*(float *)((char *)v143 + v92) * *(float *)((char *)v143 + v92));
    v92 += 4;
  }
  while (v92 != 36);
  v94 = sqrtf(v93);
  v95 = (float)(v76 - (float)(v94 * v94)) * 0.5;
  v47 = v95 != 0.0;
  if (v95 == 0.0)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2953348);
    v105 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v105, OS_LOG_TYPE_DEBUG, "kappa zero!", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2953348);
      v142[0] = 0;
      v106 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "static BOOL CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, CMVector<float, 3>, const float *, CMOQuaternion &, CMMatrix<float, 3> &)", "CoreLocation: %s\n", v106);
      if (v106 != (char *)buf)
        free(v106);
    }
  }
  else
  {
    v96 = 0;
    v97 = v80 * (float)(1.0 / v95);
    do
    {
      for (k = 0; k != 3; ++k)
      {
        v99 = 0;
        *(_DWORD *)sub_18F3558C8(a3, v96, k) = 0;
        do
        {
          v100 = sub_18F37D890((uint64_t)v143, v96, v99);
          v101 = sub_18F37D890((uint64_t)v143, k, v99);
          v102 = (float *)sub_18F3558C8(a3, v96, k);
          *v102 = *v102 + (float)(v100 * v101);
          ++v99;
        }
        while (v99 != 3);
        v103 = (float *)sub_18F3558C8(a3, v96, k);
        *v103 = v97 * *v103;
      }
      v104 = (float *)sub_18F3558C8(a3, v96, v96);
      *v104 = v80 + *v104;
      ++v96;
    }
    while (v96 != 3);
  }
  return v47;
}

float *sub_18F3D4928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t i;
  unint64_t j;
  float v8;
  float v9;
  float *result;

  for (i = 0; i != 3; ++i)
  {
    for (j = 0; j != 3; ++j)
    {
      v8 = sub_18F3551B0(a2, i);
      v9 = v8 * sub_18F3551B0(a3, j);
      result = (float *)sub_18F3558C8(a1, i, j);
      *result = v9;
    }
  }
  return result;
}

double sub_18F3D49B8(float32x4_t *a1, float *a2, float32x4_t a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  BOOL v8;
  BOOL v9;
  float v10;
  float v11;
  double result;
  float v13;
  float v14;
  float v15;
  float v16;

  v3 = *a2;
  v4 = a2[4];
  v5 = a2[8];
  v6 = (float)(*a2 + v4) + v5;
  if (v6 <= 0.0)
  {
    if (v3 > v4)
    {
      v8 = v3 == v5;
      v9 = v3 < v5;
    }
    else
    {
      v8 = 1;
      v9 = 0;
    }
    if (v9 || v8)
    {
      if (v4 <= v5)
      {
        v15 = (float)((float)((float)-v3 - v4) + v5) + 1.0;
        v16 = 0.5 / sqrtf(v15);
        a1->f32[2] = v15 * v16;
        a1->f32[3] = v16 * (float)(a2[3] - a2[1]);
        a1->f32[0] = v16 * (float)(a2[2] + a2[6]);
        a3.f32[0] = v16 * (float)(a2[7] + a2[5]);
        a1->i32[1] = a3.i32[0];
      }
      else
      {
        v10 = (float)((float)(v4 - v3) - v5) + 1.0;
        v11 = 0.5 / sqrtf(v10);
        a1->f32[1] = v10 * v11;
        a1->f32[0] = v11 * (float)(a2[3] + a2[1]);
        a1->f32[3] = v11 * (float)(a2[2] - a2[6]);
        a3.f32[0] = v11 * (float)(a2[7] + a2[5]);
        a1->i32[2] = a3.i32[0];
      }
    }
    else
    {
      v13 = (float)((float)(v3 - v4) - v5) + 1.0;
      v14 = 0.5 / sqrtf(v13);
      a1->f32[0] = v13 * v14;
      a1->f32[1] = v14 * (float)(a2[3] + a2[1]);
      a1->f32[2] = v14 * (float)(a2[2] + a2[6]);
      a3.f32[0] = v14 * (float)(a2[7] - a2[5]);
      a1->i32[3] = a3.i32[0];
    }
  }
  else
  {
    v7 = 0.5 / sqrtf(v6 + 1.0);
    a1->f32[3] = (float)(v6 + 1.0) * v7;
    a1->f32[2] = v7 * (float)(a2[3] - a2[1]);
    a1->f32[1] = v7 * (float)(a2[2] - a2[6]);
    a3.f32[0] = v7 * (float)(a2[7] - a2[5]);
    a1->i32[0] = a3.i32[0];
  }
  *(_QWORD *)&result = sub_18F1FFE94(a1, a3).u64[0];
  return result;
}

float sub_18F3D4B74@<S0>(float *a1@<X0>, float *a2@<X8>, float a3@<S0>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float result;

  v4 = a1[2];
  v3 = a1[3];
  v5 = v3 + v3;
  v6 = *a1;
  v7 = a1[1];
  v8 = v7 + v7;
  v9 = v3 * (float)(v3 + v3);
  v10 = (float)((float)(v7 + v7) * v7) + -1.0;
  v11 = (float)((float)(v4 + v4) * v4) + -1.0;
  v12 = (float)(v6 + v6) * v7;
  v13 = (float)(v6 + v6) * v4;
  v14 = v3 * (float)(v6 + v6);
  v15 = v8 * v4;
  v16 = v3 * v8;
  v17 = v5 * v4;
  v18 = v9 + (float)((float)((float)(v6 + v6) * v6) + -1.0);
  v19 = v12 - (float)(v17 * a3);
  v20 = v13 + (float)(v16 * a3);
  v21 = v12 + (float)(v17 * a3);
  v22 = v9 + v10;
  v23 = v15 - (float)(v14 * a3);
  v24 = v13 - (float)(v16 * a3);
  result = v15 + (float)(v14 * a3);
  *a2 = v18;
  a2[1] = v19;
  a2[2] = v20;
  a2[3] = v21;
  a2[4] = v22;
  a2[5] = v23;
  a2[6] = v24;
  a2[7] = result;
  a2[8] = v9 + v11;
  return result;
}

void sub_18F3D4BF4(float *a1)
{
  unsigned __int8 v1;
  float v2;
  float v3;
  float v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  int v14;
  float *v15;
  float32x4_t v16;
  float v17[3];
  uint64_t v18;
  int v19;
  float v20[9];

  v1 = atomic_load((unsigned __int8 *)&qword_1ECEDF818);
  if ((v1 & 1) == 0)
  {
    v15 = a1;
    v14 = __cxa_guard_acquire(&qword_1ECEDF818);
    a1 = v15;
    if (v14)
    {
      dword_1ECEDF80C = 1043452116;
      __cxa_guard_release(&qword_1ECEDF818);
      a1 = v15;
    }
  }
  v4 = sub_18F200A14(a1);
  v5 = 0;
  v6 = sqrtf((float)(v2 * v2) + (float)(v4 * v4));
  v7 = -1.0;
  if (v3 > v6)
    v7 = 1.0;
  v18 = 0x3F80000000000000;
  v19 = 0;
  v8 = (float)(v3 * -0.0) + (float)(v2 * v7);
  v9 = 0.0;
  v10 = (float)(v3 * 0.0) - (float)(v4 * v7);
  v11 = (float)(v2 * -0.0) + (float)(v4 * 0.0);
  v17[0] = v8;
  v17[1] = v10;
  v17[2] = v11;
  do
  {
    v9 = v9 + (float)(v17[v5] * v17[v5]);
    ++v5;
  }
  while (v5 != 3);
  v12 = sqrtf(v9);
  if (v12 > *(float *)&dword_1ECEDF80C)
  {
    v13 = (float)-atan2f(v6, v3 * v7) / v12;
    v20[0] = v8 * v13;
    v20[1] = v10 * v13;
    v20[2] = v11 * v13;
    sub_18F3D3AA8(&v16, v20);
    sub_18F3D4B74(v16.f32, v20, -1.0);
    sub_18F3D3930((uint64_t)v20, (float *)&v18);
  }
}

float sub_18F3D4D58(float *a1)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float result;

  sub_18F3D4BF4(a1);
  v5 = sub_18F3D3A70(a1, v2, v3, v4);
  for (result = atan2f(-v6, v5) * 57.296; result < 0.0; result = result + 360.0)
    ;
  for (; result >= 360.0; result = result + -360.0)
    ;
  return result;
}

void sub_18F3D4DE4(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>, float a4@<S0>)
{
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float32_t v22;
  float32x4_t v23;
  NSObject *v24;
  char *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float32x4_t v30;
  float32x4_t buf;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a4 < 0.0 || a4 > 1.0)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2953348);
    v24 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      buf.i16[0] = 0;
      _os_log_impl(&dword_18F1DC000, v24, OS_LOG_TYPE_FAULT, "Assertion failed: t >= 0 && t <= 1, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMOQuaternion.cpp, line 375,Invalid time t for slerp.", (uint8_t *)&buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2953348);
      v30.i16[0] = 0;
      v25 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "static CMOQuaternion CMOQuaternion::slerp(const CMOQuaternion &, const CMOQuaternion &, const float)", "CoreLocation: %s\n", v25);
      if (v25 != (char *)&buf)
        free(v25);
    }
  }
  buf = *a1;
  sub_18F1FFE94(&buf, buf);
  v30 = *a2;
  sub_18F1FFE94(&v30, v30);
  v9 = v30.i64[0];
  v11 = buf.f32[2];
  v10 = buf.f32[3];
  v12 = v30.i64[1];
  v13 = fmaxf(fminf((float)((float)((float)(buf.f32[1] * v30.f32[1]) + (float)(buf.f32[0] * v30.f32[0]))+ (float)(buf.f32[2] * v30.f32[2]))+ (float)(buf.f32[3] * v30.f32[3]), 1.0), -1.0);
  v14 = -v13;
  if (v13 > 0.0)
    v14 = v13;
  v15 = v14 + -1.0;
  if ((float)(v14 + -1.0) <= 0.0)
    v15 = -v15;
  if (v15 >= 0.00000011921)
  {
    v27 = 1.0 - a4;
    v28 = buf.f32[0];
    v29 = buf.f32[1];
    v16 = acosf(v13);
    v26 = a4;
    v17 = sinf(v16);
    v18 = sinf(v27 * v16);
    v19 = v16 * v26;
    v20 = v18 / v17;
    v21 = sinf(v19) / v17;
    v22 = (float)(*(float *)&v12 * v21) + (float)(v20 * v11);
    a3->f32[0] = (float)(*(float *)&v9 * v21) + (float)(v20 * v28);
    a3->f32[1] = (float)(*((float *)&v9 + 1) * v21) + (float)(v20 * v29);
    v23.f32[0] = (float)(*((float *)&v12 + 1) * v21) + (float)(v20 * v10);
    a3->f32[2] = v22;
    a3->i32[3] = v23.i32[0];
    sub_18F1FFE94(a3, v23);
  }
  else
  {
    *a3 = *a1;
  }
}

uint64_t sub_18F3D53A8()
{
  uint64_t v0;
  uint64_t v1;

  qword_1ECEDF820 = (uint64_t)objc_alloc_init(MEMORY[0x1E0CB3578]);
  return MEMORY[0x1E0DE7D20](qword_1ECEDF820, sel_setDateFormat_, CFSTR("yyyy-MM-dd HH:mm:ss Z"), v0, v1);
}

uint64_t sub_18F3D53D4(uint64_t a1)
{
  int32x4_t v2;
  NSObject *v3;
  char *v5;
  uint8_t buf[1640];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(a1 + 8) = v2;
  *(int32x4_t *)(a1 + 24) = v2;
  *(int32x4_t *)(a1 + 40) = v2;
  *(int64x2_t *)(a1 + 72) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)(a1 + 120) = xmmword_18F506FA8;
  *(_OWORD *)(a1 + 136) = unk_18F506FB8;
  *(_OWORD *)(a1 + 152) = xmmword_18F506FC8;
  *(_OWORD *)(a1 + 168) = unk_18F506FD8;
  *(_OWORD *)(a1 + 88) = xmmword_18F506F88;
  *(_OWORD *)(a1 + 104) = unk_18F506F98;
  *(_OWORD *)(a1 + 248) = xmmword_18F507028;
  *(_OWORD *)(a1 + 232) = unk_18F507018;
  *(_OWORD *)(a1 + 216) = xmmword_18F507008;
  *(_OWORD *)(a1 + 200) = unk_18F506FF8;
  *(_OWORD *)(a1 + 184) = xmmword_18F506FE8;
  *(_OWORD *)(a1 + 264) = unk_18F507038;
  *(_OWORD *)(a1 + 280) = xmmword_18F507048;
  *(_OWORD *)(a1 + 312) = xmmword_18F507068;
  *(_OWORD *)(a1 + 328) = unk_18F507078;
  *(_QWORD *)a1 = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 61) = 0;
  *(_OWORD *)(a1 + 296) = unk_18F507058;
  *(_QWORD *)(a1 + 344) = a1 + 88;
  *(_DWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 408) = a1 + 88;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)(a1 + 472) = a1 + 88;
  *(_DWORD *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_QWORD *)(a1 + 536) = a1 + 88;
  *(_DWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_QWORD *)(a1 + 600) = a1 + 88;
  *(_DWORD *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_QWORD *)(a1 + 664) = a1 + 88;
  *(_DWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  if (qword_1EE16D8D8 != -1)
    dispatch_once(&qword_1EE16D8D8, &unk_1E2953388);
  v3 = qword_1EE16D8E0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D8E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEFAULT, "Constructing CMPdrInputs.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D8D8 != -1)
      dispatch_once(&qword_1EE16D8D8, &unk_1E2953388);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CMPdrInputs::CMPdrInputs()", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  return a1;
}

void sub_18F3D5674(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float32x2_t v13;
  float v14;
  float v15;
  NSObject *v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  NSObject *v25;
  char *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float32x2_t v34;
  int v35;
  double v36;
  int v37;
  unint64_t v38;
  uint8_t buf[4];
  double v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 68) = 0;
  v4 = 0;
  v5 = *(float *)(a1 + 20);
  v6 = *(float *)(a1 + 24);
  v7 = *(float *)(a1 + 28);
  v8 = *(float *)(a1 + 44);
  v9 = *(float *)(a1 + 48);
  v10 = *(float *)(a1 + 52);
  v11 = *(float *)a2;
  v12 = *(float *)a2 - *(float *)(a1 + 8);
  v33 = v12;
  v13 = vsub_f32(*(float32x2_t *)(a2 + 4), *(float32x2_t *)(a1 + 12));
  v34 = v13;
  *(float *)(a1 + 8) = v11;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 8);
  v14 = 0.0;
  do
  {
    v14 = v14 + (float)(*(float *)((char *)&v33 + v4) * *(float *)((char *)&v33 + v4));
    v4 += 4;
  }
  while (v4 != 12);
  v15 = sqrtf(v14);
  *(float *)(a1 + 56) = v15;
  if (v15 >= 0.005)
  {
    v17 = v12 / v15;
    v18 = v13.f32[0] / v15;
    *(float *)(a1 + 20) = v17;
    *(float *)(a1 + 24) = v13.f32[0] / v15;
    v13.f32[0] = v13.f32[1] / v15;
    *(float *)(a1 + 28) = v13.f32[1] / v15;
    v19 = 0;
    v20 = v17 - v5;
    v21 = v18 - v6;
    v22 = (float)(v13.f32[1] / v15) - v7;
    v37 = LODWORD(v20);
    v38 = __PAIR64__(LODWORD(v22), LODWORD(v21));
    v23 = 0.0;
    do
    {
      v23 = v23 + (float)(*(float *)((char *)&v37 + v19) * *(float *)((char *)&v37 + v19));
      v19 += 4;
    }
    while (v19 != 12);
    v24 = sqrtf(v23);
    *(float *)(a1 + 60) = v24;
    if (v24 >= 0.005)
    {
      v27 = v20 / v24;
      v28 = v21 / v24;
      v29 = v22 / v24;
      *(float *)(a1 + 32) = v27;
      *(float *)(a1 + 36) = v28;
      v30 = (float)(v18 * v29) - (float)(v13.f32[0] * v28);
      v31 = (float)(v13.f32[0] * v27) - (float)(v17 * v29);
      v32 = (float)(v17 * v28) - (float)(v18 * v27);
      *(float *)(a1 + 40) = v29;
      *(float *)(a1 + 44) = v30;
      *(float *)(a1 + 48) = v31;
      *(float *)(a1 + 52) = v32;
      *(float *)(a1 + 64) = -(float)((float)((float)(v29 * (float)(v32 - v10)) + (float)(v28 * (float)(v31 - v9)))
                                   + (float)(v27 * (float)(v30 - v8)));
      *(_BYTE *)(a1 + 68) = 1;
      *(double *)a1 = a3;
      return;
    }
    if (qword_1EE16D8D8 != -1)
      dispatch_once(&qword_1EE16D8D8, &unk_1E2953388);
    v25 = qword_1EE16D8E0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D8E0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v40 = a3;
      _os_log_impl(&dword_18F1DC000, v25, OS_LOG_TYPE_DEBUG, "[CMTNBDoTEstimatorBase::TNBFrame] Failed to obtain a new normal(N) vector, time %f", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D8D8 != -1)
        dispatch_once(&qword_1EE16D8D8, &unk_1E2953388);
      v35 = 134217984;
      v36 = a3;
      goto LABEL_23;
    }
  }
  else
  {
    *(int32x2_t *)(a1 + 20) = vdup_n_s32(0x7FC00000u);
    *(_DWORD *)(a1 + 28) = 2143289344;
    if (qword_1EE16D8D8 != -1)
      dispatch_once(&qword_1EE16D8D8, &unk_1E2953388);
    v16 = qword_1EE16D8E0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D8E0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v40 = a3;
      _os_log_impl(&dword_18F1DC000, v16, OS_LOG_TYPE_DEBUG, "[CMTNBDoTEstimatorBase::TNBFrame] Failed to obtain a new tangent(T) vector, time %f", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D8D8 != -1)
        dispatch_once(&qword_1EE16D8D8, &unk_1E2953388);
      v37 = 134217984;
      v38 = *(_QWORD *)&a3;
LABEL_23:
      v26 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMPdrInputs::AccelTNBFrame::updateFrame(const CMVector3d &, double)", "CoreLocation: %s\n", v26);
      if (v26 != (char *)buf)
        free(v26);
    }
  }
}

void sub_18F3D5A90(uint64_t a1, uint64_t a2, float32x4_t a3)
{
  double v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  float32x4_t v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  float v15;
  int v16;
  float v17;
  _DWORD v18[3];
  float32x4_t v19;
  _DWORD v20[3];

  v5 = *(double *)a2 - *(double *)(a1 + 72);
  *(double *)a3.i64 = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)a2;
  *(double *)(a1 + 80) = v5;
  v6 = *(_DWORD *)(a2 + 44);
  a3.f32[0] = -*(float *)(a2 + 40);
  *(float32x2_t *)v19.f32 = vneg_f32(*(float32x2_t *)(a2 + 32));
  v19.i64[1] = __PAIR64__(v6, a3.u32[0]);
  sub_18F1FFE94(&v19, a3);
  v20[0] = sub_18F3D39F4(v19.f32, -*(float *)(a2 + 20), -*(float *)(a2 + 24), -*(float *)(a2 + 28));
  v20[1] = v7;
  v20[2] = v8;
  v9 = *(_DWORD *)(a2 + 44);
  v10.f32[0] = -*(float *)(a2 + 40);
  *(float32x2_t *)v19.f32 = vneg_f32(*(float32x2_t *)(a2 + 32));
  v19.i64[1] = __PAIR64__(v9, v10.u32[0]);
  sub_18F1FFE94(&v19, v10);
  v11 = 0;
  v18[0] = sub_18F3D39F4(v19.f32, *(float *)(a2 + 8), *(float *)(a2 + 12), *(float *)(a2 + 16));
  v18[1] = v12;
  v18[2] = v13;
  v14 = a1 + 344;
  do
  {
    v15 = sub_18F3551B0((uint64_t)v20, v11);
    sub_18F3D5BD0(v14, v15);
    v16 = *(_DWORD *)(v14 + 8);
    *(_DWORD *)sub_18F33D3D0((uint64_t)&v19, v11) = v16;
    v17 = sub_18F3551B0((uint64_t)v18, v11);
    sub_18F3D5BD0(v14 + 192, v17);
    ++v11;
    v14 += 64;
  }
  while (v11 != 3);
  sub_18F3D5674(a1, (uint64_t)&v19, *(double *)a2);
}

void sub_18F3D5BD0(uint64_t a1, float a2)
{
  float v3;
  uint64_t i;

  v3 = sub_18F3D5C44((_QWORD *)a1, 0, a2);
  *(float *)(a1 + 8) = v3;
  for (i = 1; i != 4; ++i)
  {
    v3 = sub_18F3D5C44((_QWORD *)a1, i, v3);
    *(float *)(a1 + 8) = v3;
  }
}

os_log_t sub_18F3D5C18()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "MotionContext");
  qword_1EE16D8E0 = (uint64_t)result;
  return result;
}

float sub_18F3D5C44(_QWORD *a1, uint64_t a2, float a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  double v9;
  float v10;
  double v11;
  float result;

  v4 = *a1;
  v3 = (char *)a1 + 12;
  v5 = v4 + 8 * a2;
  v6 = 3 * a2 + 1;
  v7 = *(float *)&v3[4 * v6];
  v8 = 3 * a2 + 2;
  v9 = *(float *)&v3[4 * v8];
  v10 = *(double *)(v4 + 96 + 24 * a2) * a3 * *(double *)(v5 + 192)
      - *(double *)(v4 + 96 + 8 * v6) * v7
      - *(double *)(v4 + 96 + 8 * v8) * v9;
  v11 = *(double *)(v5 + 224)
      * (*(double *)(v4 + 8 * v6) * v7 + *(double *)(v4 + 24 * a2) * v10 + *(double *)(v4 + 8 * v8) * v9);
  *(float *)&v3[4 * v8] = v7;
  result = v11;
  *(float *)&v3[4 * v6] = v10;
  *(_DWORD *)&v3[12 * a2] = 0;
  return result;
}

uint64_t sub_18F3D5CCC(_BYTE *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = 2;
  switch(*a1)
  {
    case 1:
      goto LABEL_5;
    case 2:
      v2 = 3;
      goto LABEL_5;
    case 3:
      v2 = 4;
      goto LABEL_5;
    case 5:
      v2 = 6;
LABEL_5:
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 8 * v2))(a2, a1);
      break;
    default:
      return 1;
  }
  return 1;
}

_QWORD *sub_18F3D5D4C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E294A9E8;
  v2 = a1[16];
  if (v2)
    MEMORY[0x194001420](v2, 0x1000C8052888210);
  sub_18F3D6A70(a1 + 38);
  a1[29] = &off_1E294AC98;
  sub_18F3CBA50(a1 + 32);
  return a1;
}

void sub_18F3D5DB4(_QWORD *a1)
{
  sub_18F3D5D4C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3D5DD8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_18F3D5DE0(uint64_t result, double a2, int32x2_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v10;
  float v11;
  float v12;
  float v13;
  double v14;
  float v15;
  uint64_t i;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t j;
  uint64_t v23;
  int *v24;
  uint64_t k;
  float v26;
  uint64_t m;
  uint64_t v28;
  uint64_t v29;
  float *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  float v36;
  uint64_t v37;
  float *v38;
  float v39;
  uint64_t v40;
  double v41;
  float v42;
  float *v43;
  double v44;
  long double v45;
  uint64_t v46;
  uint64_t v47;
  long double v48;
  float v49;
  float v50;
  uint64_t n;
  uint64_t *v52;
  int *v53;
  __int128 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  float v59;
  uint64_t v60;
  uint64_t ii;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  float *v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  float *v81;
  uint64_t v82;
  float v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  int v87;
  float32x2_t v88;
  float v89;
  double v90;
  int32x2_t v91;
  void *v92[2];
  _DWORD v93[6];
  float v94[15];
  _BYTE v95[12];
  uint64_t v96;
  int v97;
  float v98[18];
  int v99;
  float v100[2];
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  _DWORD v108[2];
  float32x2_t v109;
  int v110;
  float v111;
  __int32 v112;
  float v113;
  int v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(result + 148);
  if (v3)
  {
    v4 = result;
    v5 = result + 136;
    *(float *)a3.i32 = (float)v3;
    v91 = a3;
    v6 = *(float *)(result + 136) / (float)v3;
    v7 = *(double *)(result + 200) * (double)v3;
    *(_DWORD *)(result + 148) = 0;
    v90 = exp(v7 / -5000.0);
    v88 = vdiv_f32(*(float32x2_t *)(v5 + 4), (float32x2_t)vdup_lane_s32(v91, 0));
    bzero((void *)v5, 0xCuLL);
    v8 = 0;
    v9 = 0;
    *(float64x2_t *)(v5 - 48) = vmulq_n_f64(*(float64x2_t *)(v5 - 48), v90);
    *(double *)(v5 - 32) = v90 * *(double *)(v5 - 32);
    v108[0] = 0;
    v10 = v88;
    v11 = v88.f32[1];
    v108[1] = v88.i32[1];
    v109 = vneg_f32(v88);
    v110 = 0;
    v111 = v6;
    v112 = v88.i32[0];
    v113 = -v6;
    v114 = 0;
    v89 = vmul_f32(v10, v10).f32[0];
    v100[0] = -(float)(v89 + (float)(v11 * v11));
    v100[1] = v6 * v88.f32[0];
    v101 = vmuls_lane_f32(v6, v88, 1);
    v102 = v6 * v88.f32[0];
    v103 = -(float)((float)(v6 * v6) + (float)(v11 * v11));
    v104 = vmuls_lane_f32(v88.f32[0], v88, 1);
    v105 = v101;
    v106 = v104;
    v107 = -(float)((float)(v6 * v6) + (float)(v10.f32[0] * v10.f32[0]));
    v12 = v7;
    v13 = -v12;
    v14 = v7 * v7 * 0.5;
    v15 = v14;
    do
    {
      for (i = 0; i != 3; ++i)
        *(float *)&v95[v8 * 4 + i * 4] = (float)(v100[v8 + i] * v15) + (float)(v13 * *(float *)&v108[v8 + i]);
      *(float *)&v95[16 * v9] = *(float *)&v95[16 * v9] + 1.0;
      ++v9;
      v8 += 3;
    }
    while (v9 != 3);
    v17 = 0;
    v18 = v98;
    do
    {
      *(_QWORD *)v18 = *(_QWORD *)&v95[v17];
      v18[2] = *(float *)&v95[v17 + 8];
      v17 += 12;
      v18 += 6;
    }
    while (v17 != 36);
    v19 = 0;
    v20 = 0;
    v21 = v14 / 5000.0 - v7;
    do
    {
      for (j = 0; j != 3; ++j)
        *(float *)&v95[v19 * 4 + j * 4] = *(float *)&v108[v19 + j] * v15;
      *(float *)&v95[16 * v20] = *(float *)&v95[16 * v20] + v21;
      ++v20;
      v19 += 3;
    }
    while (v20 != 3);
    v23 = 0;
    v24 = &v99;
    do
    {
      *(_QWORD *)v24 = *(_QWORD *)&v95[v23];
      v24[2] = *(_DWORD *)&v95[v23 + 8];
      v23 += 12;
      v24 += 6;
    }
    while (v23 != 36);
    for (k = 3; k != 21; k += 6)
      bzero(&v98[k], 0xCuLL);
    for (m = 21; m != 39; m += 6)
    {
      bzero(&v98[m], 0xCuLL);
      v26 = v90;
      v98[k] = v26;
      k += 7;
    }
    v28 = 0;
    v29 = *(_QWORD *)(v4 + 112);
    v30 = v98;
    do
    {
      v31 = v28 + 30;
      v32 = 5;
      LODWORD(v33) = 6;
      do
      {
        v34 = 0;
        v35 = v33 - 2;
        v33 = v32;
        v36 = v98[v31];
        v37 = v29 + 4 * (v35 * (int)v32 / 2);
        v38 = v30;
        do
        {
          v39 = *v38;
          v38 += 6;
          v36 = v36 + (float)(v39 * *(float *)(v37 + 4 * v34++));
        }
        while (v33 != v34);
        v98[v31] = v36;
        v32 = v33 - 1;
        v31 = v28 + 6 * (v33 - 1);
      }
      while (v33 > 1);
      ++v28;
      ++v30;
    }
    while (v28 != 6);
    v92[0] = v94;
    v92[1] = v93;
    v40 = 0;
    v41 = 2.76135698e-10
        / (7.0 / (exp((0.11 - sqrtf((float)(v89 + (float)(v6 * v6)) + (float)(v88.f32[1] * v88.f32[1]))) / 0.012) + 1.0)
         + 1.0);
    v43 = (float *)v95;
    do
    {
      bzero(&v95[v40], 0xCuLL);
      v42 = (v7 * -0.25 / 5000.0 + 0.333333333) * (v7 * (v7 * (v7 * v41)))
          + (float)(*(float *)v91.i32 * 0.00000021323) * 0.5 * v7;
      *v43 = v42;
      v43 += 7;
      v40 += 24;
    }
    while (v40 != 72);
    v44 = expm1(-(v7 / 5000.0));
    v45 = exp(-(v7 / 5000.0));
    v46 = 0;
    v47 = 0;
    v48 = v41 * -0.5 * 1.24999999e11 * (v45 * (v7 / 5000.0 * (v7 / 5000.0) + v7 / 5000.0 * 2.0) + v44 * 2.0);
    v49 = v45 * (v7 * (v7 * (v41 * -0.5)));
    v50 = v48;
    do
    {
      for (n = 0; n != 3; ++n)
        *(float *)((char *)&v115 + v46 * 4 + n * 4) = *(float *)&v108[v46 + n] * v50;
      *((float *)&v115 + 4 * v47) = *((float *)&v115 + 4 * v47) + v49;
      ++v47;
      v46 += 3;
    }
    while (v47 != 3);
    v52 = &v96;
    v53 = &v97;
    v54 = &v115;
    v55 = 3;
    do
    {
      v56 = 0;
      v57 = v52;
      do
      {
        v58 = *(_DWORD *)((char *)v54 + v56 * 4);
        v53[v56] = v58;
        *(_DWORD *)v57 = v58;
        v57 += 3;
        ++v56;
      }
      while (v56 != 3);
      ++v55;
      v52 = (uint64_t *)((char *)v52 + 4);
      v53 += 6;
      v54 = (__int128 *)((char *)v54 + 12);
    }
    while (v55 != 6);
    v59 = (1.0 - exp(v7 * -2.0 / 5000.0)) * (v41 * 5000.0) * 0.5;
    v60 = 84;
    for (ii = 84; ii != 156; ii += 24)
    {
      bzero(&v95[ii], 0xCuLL);
      *(float *)&v95[v60] = v59;
      v60 += 28;
    }
    v62 = 6;
    sub_18F3D65E8(v92, (uint64_t)v95, 6);
    v63 = 0;
    v64 = 5;
    v66 = *(_QWORD *)(v4 + 112);
    v65 = *(_QWORD *)(v4 + 120);
    v67 = 5;
    result = v65;
    while (1)
    {
      v68 = 0;
      v69 = v62 - 1;
      v70 = 0.0;
      v71 = v67 * 4;
      do
      {
        v70 = v70
            + (float)((float)(*(float *)((char *)v98 + v71) * *(float *)((char *)v98 + v71)) * *(float *)(v65 + v68));
        v68 += 4;
        v71 += 24;
      }
      while (v68 != 24);
      if (v62 > 5)
      {
        v74 = (float *)&v93[v69];
        v75 = v70 + *v74;
        *((float *)&v115 + v69) = v75;
      }
      else
      {
        v72 = v63;
        do
        {
          v73 = v94[v69 + ((int)v72 + 5) * ((int)v72 + 6) / 2];
          v70 = v70 + (float)((float)(v73 * v73) * *(float *)&v93[v72++ + 6]);
        }
        while ((_DWORD)v72);
        v74 = (float *)&v93[v69];
        v75 = v70 + *v74;
        *((float *)&v115 + v69) = v75;
        if (v62 < 2)
        {
          *(_OWORD *)result = v115;
          *(_QWORD *)(result + 16) = v116;
          return result;
        }
      }
      v76 = 0;
      v77 = 0;
      result = *(_QWORD *)(v4 + 120);
      v78 = (uint64_t)(int)(v69 * (v62 - 2) + ((int)v69 * ((int)v62 - 2) < 0)) >> 1;
      do
      {
        v79 = 0;
        v80 = 0.0;
        v81 = v98;
        do
        {
          v80 = v80 + (float)((float)(v81[v67] * *(float *)(result + v79)) * v81[v76]);
          v79 += 4;
          v81 += 6;
        }
        while (v79 != 24);
        v82 = v77 + v78;
        v83 = v80 + (float)(*v74 * v94[v77 + v78]);
        v84 = v63;
        if (v62 <= 5)
        {
          do
          {
            v83 = v83
                + (float)((float)(v94[v69 + ((int)v84 + 5) * ((int)v84 + 6) / 2] * v94[v84])
                        * v94[v77 + ((int)v84 + 5) * ((int)v84 + 6) / 2]);
            ++v84;
          }
          while ((_DWORD)v84);
        }
        v85 = 0;
        v86 = v83 / v75;
        *(float *)(v66 + 4 * v82) = v86;
        do
        {
          v98[v76 + v85] = v98[v76 + v85] + (float)((float)-v86 * v98[v67 + v85]);
          v85 += 6;
        }
        while (v85 != 36);
        v87 = v64;
        if (v62 <= 5)
        {
          do
          {
            v94[v77 + v87 * (v87 + 1) / 2] = v94[v77 + v87 * (v87 + 1) / 2]
                                           - (float)(*(float *)(v66 + 4 * v82) * v94[v69 + v87 * (v87 + 1) / 2]);
            ++v87;
          }
          while (v87 != 5);
          v86 = *(float *)(v66 + 4 * v82);
        }
        v94[v82] = v94[v82] - v86;
        ++v77;
        ++v76;
      }
      while (v77 != v64);
      --v64;
      --v67;
      --v63;
      --v62;
    }
  }
  return result;
}

void sub_18F3D65E8(void **a1, uint64_t a2, int a3)
{
  int v6;
  float *v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  int v13;
  float v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  float v18;
  uint64_t v19;

  bzero(*a1, 4 * ((a3 - 1) * a3 / 2));
  bzero(a1[1], 4 * a3);
  if (a3 >= 1)
  {
    v6 = 0;
    v7 = (float *)*a1;
    v8 = (float *)a1[1];
    v9 = a3 - 2;
    v10 = a3 - 1;
    v11 = &v8[a3];
    v12 = v10;
    v13 = a3;
    while (1)
    {
      v14 = *(float *)(a2 + 4 * (v12 + (int)v12 * a3));
      if (v12 < v10)
      {
        v15 = 0;
        do
        {
          v14 = v14
              + (float)((float)-(float)(v7[v12 + (v13 - 1 + (int)v15) * (v13 + (int)v15) / 2]
                                      * v7[v12 + (v13 - 1 + (int)v15) * (v13 + (int)v15) / 2])
                      * v11[v15]);
          ++v15;
        }
        while (v6 != (_DWORD)v15);
      }
      v8[v12] = v14;
      if (v12 < 1)
        break;
      v16 = (float *)*a1;
      v17 = v9;
      do
      {
        v18 = *(float *)(a2 + 4 * (v17 + v12 * a3));
        if (v12 < v10)
        {
          v19 = 0;
          do
          {
            v18 = v18
                + (float)((float)-(float)(v16[v17 + (v13 - 1 + (int)v19) * (v13 + (int)v19) / 2]
                                        * v16[v12 + (v13 - 1 + (int)v19) * (v13 + (int)v19) / 2])
                        * v11[v19]);
            ++v19;
          }
          while (v6 != (_DWORD)v19);
        }
        v7[v17 + ((uint64_t)(int)((v12 - 1) * v12 + (((int)v12 - 1) * (int)v12 < 0)) >> 1)] = v18 / v8[v12];
      }
      while (v17-- > 0);
      --v13;
      --v9;
      ++v6;
      --v11;
      --v12;
    }
  }
}

double sub_18F3D677C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  double v3;
  double v4;
  double v5;
  unint64_t v6;
  double v7;
  unint64_t v8;
  double v9;
  double v10;
  double result;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = 0.0;
  v4 = 0.0;
  if (v2 >= 2)
  {
    v5 = (double)v2 * *(double *)(a1 + 40) - *(double *)(a1 + 32) * *(double *)(a1 + 32);
    v4 = 0.0;
    if (v5 >= 0.0)
      v4 = v5 / (double)((v2 - 1) * v2);
  }
  v6 = *(_QWORD *)(a1 + 168);
  if (v6 >= 2)
  {
    v7 = (double)v6 * *(double *)(a1 + 120) - *(double *)(a1 + 112) * *(double *)(a1 + 112);
    if (v7 >= 0.0)
      v3 = v7 / (double)((v6 - 1) * v6);
  }
  v8 = *(_QWORD *)(a1 + 248);
  v9 = 0.0;
  if (v8 >= 2)
  {
    v10 = (double)v8 * *(double *)(a1 + 200) - *(double *)(a1 + 192) * *(double *)(a1 + 192);
    if (v10 >= 0.0)
      v9 = v10 / (double)((v8 - 1) * v8);
  }
  *(_QWORD *)a2 = &off_1E2949630;
  *(double *)(a2 + 8) = sqrt(v4);
  *(double *)(a2 + 16) = sqrt(v3);
  result = sqrt(v9);
  *(double *)(a2 + 24) = result;
  return result;
}

uint64_t sub_18F3D684C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  double v3;
  double v4;
  unint64_t v5;
  unint64_t v6;
  double v7;

  v2 = *(_QWORD *)(result + 88);
  v3 = 0.0;
  v4 = 0.0;
  if (v2)
    v4 = *(double *)(result + 32) / (double)v2;
  v5 = *(_QWORD *)(result + 168);
  if (v5)
    v3 = *(double *)(result + 112) / (double)v5;
  v6 = *(_QWORD *)(result + 248);
  if (v6)
    v7 = *(double *)(result + 192) / (double)v6;
  else
    v7 = 0.0;
  *(_QWORD *)a2 = &off_1E2949630;
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = v3;
  *(double *)(a2 + 24) = v7;
  return result;
}

uint64_t sub_18F3D68B4()
{
  return 0;
}

double sub_18F3D68BC(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

double sub_18F3D68C4(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

double sub_18F3D68CC(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

double sub_18F3D68D4(uint64_t a1)
{
  return *(double *)(a1 + 40);
}

uint64_t sub_18F3D68DC(_DWORD *a1, _DWORD *a2)
{
  *a2 = a1[39];
  a2[1] = a1[40];
  a2[2] = a1[41];
  return 1;
}

BOOL sub_18F3D68FC(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float v10;
  _BOOL8 result;

  v2 = *(double *)(a1 + 176);
  if (v2 <= 0.0)
  {
    *(_QWORD *)a2 = 0;
    v10 = 0.0;
  }
  else
  {
    v3 = *(double *)(a1 + 40);
    v4 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
    v5 = *(double *)(a1 + 16);
    v6 = *(double *)(a1 + 24);
    v7 = v3 * (v6 + v6) - v5 * v4;
    v8 = -(v3 * (v5 + v5)) - v6 * v4;
    v9 = v5 * (v5 + v5) + -1.0 + v6 * (v6 + v6);
    *(float *)&v5 = *(float *)(a1 + 184) - v7;
    *(_DWORD *)a2 = LODWORD(v5);
    *(float *)&v8 = *(float *)(a1 + 188) - v8;
    *(_DWORD *)(a2 + 4) = LODWORD(v8);
    v10 = *(float *)(a1 + 192) - v9;
  }
  result = v2 > 0.0;
  *(float *)(a2 + 8) = v10;
  return result;
}

uint64_t sub_18F3D698C()
{
  return 0;
}

uint64_t sub_18F3D6994()
{
  return 0;
}

uint64_t sub_18F3D699C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9);
}

float sub_18F3D69A4(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

os_log_t sub_18F3D69B0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Sensors");
  qword_1EE16D6D0 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F3D69DC(_QWORD *a1)
{
  *a1 = &off_1E294AC78;
  sub_18F3D30B8(a1 + 4);
  return a1;
}

void sub_18F3D6A0C(_QWORD *a1)
{
  sub_18F3D6A70(a1);
  JUMPOUT(0x194001438);
}

void sub_18F3D6A30(_QWORD *a1)
{
  *a1 = &off_1E294AC78;
  sub_18F3D30B8(a1 + 4);
  JUMPOUT(0x194001438);
}

_QWORD *sub_18F3D6A70(_QWORD *a1)
{
  *a1 = &off_1E294A870;
  a1[22] = &off_1E294AC78;
  sub_18F3D30B8(a1 + 26);
  a1[12] = &off_1E294AC78;
  sub_18F3D30B8(a1 + 16);
  a1[2] = &off_1E294AC78;
  sub_18F3D30B8(a1 + 6);
  return a1;
}

double sub_18F3D6AC8(uint64_t a1, double *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double result;

  v4 = a1 + 32;
  sub_18F3D6B6C((_QWORD *)(a1 + 32), a2);
  v5 = *(_QWORD *)(a1 + 72);
  if (v5 > *(_QWORD *)(a1 + 8))
  {
    v6 = *(_QWORD *)(a1 + 64);
    v7 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + ((v6 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v6 & 0x1FF));
    v8 = *(double *)(a1 + 16) - v7;
    v9 = *(double *)(a1 + 24) - v7 * v7;
    *(double *)(a1 + 16) = v8;
    *(double *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 64) = v6 + 1;
    *(_QWORD *)(a1 + 72) = v5 - 1;
    sub_18F3D6F04(v4, 1);
  }
  v10 = *(double *)(a1 + 24);
  *(double *)(a1 + 16) = *a2 + *(double *)(a1 + 16);
  result = v10 + *a2 * *a2;
  *(double *)(a1 + 24) = result;
  return result;
}

double sub_18F3D6B6C(_QWORD *a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double result;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_18F3D6BF0(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  result = *a2;
  *(double *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
  return result;
}

void sub_18F3D6BF0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_18F26F8D4(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_18F2B5CA8(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_18F2B5DBC((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_18F26F8D4((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_18F26F8D4((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_18F2020CC(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_18F2B5ED8((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_18F3D6EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3D6F04(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x200)
    a2 = 1;
  if (v2 < 0x400)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

void sub_18F3D6F60()
{
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3D6F74(uint64_t a1, int a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  _OWORD v7[2];
  int v8;

  v3 = sub_18F1EE054(a1, a2);
  *(_QWORD *)(v3 + 200) = &unk_1E294B388;
  v4 = *(_BYTE *)(v3 + 8);
  *(_QWORD *)(v3 + 256) = 0;
  *(_QWORD *)(v3 + 264) = 0;
  *(_BYTE *)(v3 + 272) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_WORD *)(v3 + 224) = 0;
  *(_BYTE *)(v3 + 273) = v4;
  *(_QWORD *)v3 = &off_1E294B320;
  *(_BYTE *)(v3 + 274) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  sub_18F4C07C0(v3 + 288);
  *(_QWORD *)(a1 + 1112) = &off_1E2943938;
  *(_WORD *)(a1 + 1120) = 0;
  *(_BYTE *)(a1 + 1122) = 0;
  *(_QWORD *)(a1 + 1124) = 0;
  *(_QWORD *)(a1 + 1132) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 1168) = v5;
  *(_QWORD *)(a1 + 1176) = 0;
  *(_DWORD *)(a1 + 1184) = 0;
  *(_QWORD *)(a1 + 1192) = 1;
  v7[0] = xmmword_18F509AD4;
  v7[1] = unk_18F509AE4;
  v8 = 973279855;
  sub_18F45C8CC(a1 + 1140, (uint64_t)v7);
  return a1;
}

void sub_18F3D7044(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 288) = &off_1E294ACB8;
  sub_18F352FB4(v2);
  sub_18F4B2E54(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3D706C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E294B320;
  a1[25] = &unk_1E294B388;
  v2 = a1 + 25;
  sub_18F209F74((uint64_t)(a1 + 25));
  sub_18F1EAC4C(v2);
  sub_18F209DDC(v2);
  a1[36] = &off_1E294ACB8;
  sub_18F352FB4(v2);
  return sub_18F4B2E54((uint64_t)a1);
}

uint64_t sub_18F3D70D8(uint64_t a1)
{
  return sub_18F3D706C((_QWORD *)(a1 - 200));
}

void sub_18F3D70E0(_QWORD *a1)
{
  sub_18F3D706C(a1);
  JUMPOUT(0x194001438);
}

void sub_18F3D7104(uint64_t a1)
{
  sub_18F3D706C((_QWORD *)(a1 - 200));
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3D712C(uint64_t a1)
{
  uint64_t result;
  _OWORD v3[2];
  int v4;

  *(_BYTE *)(a1 + 1122) = 0;
  *(_QWORD *)(a1 + 1124) = 0;
  *(_QWORD *)(a1 + 1132) = 0x3F80000000000000;
  v3[0] = xmmword_18F509AD4;
  v3[1] = unk_18F509AE4;
  v4 = 973279855;
  sub_18F45C8CC(a1 + 1140, (uint64_t)v3);
  *(_BYTE *)(a1 + 1120) = 0;
  *(_QWORD *)(a1 + 1176) = 0;
  *(_DWORD *)(a1 + 1184) = 0;
  *(_QWORD *)(a1 + 1192) = 1;
  sub_18F4C088C(a1 + 288);
  sub_18F209FE8(a1 + 200, *(double *)(a1 + 16));
  sub_18F209E74(a1 + 200, *(double *)(a1 + 24));
  sub_18F209F30(a1 + 200);
  *(_QWORD *)&v3[0] = 2;
  result = sub_18F1E5858(a1, v3);
  *(_BYTE *)(a1 + 274) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  return result;
}

_QWORD *sub_18F3D71E4(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 200);
  sub_18F209F74(a1 + 200);
  sub_18F1EAC4C(v1);
  return sub_18F209DDC(v1);
}

void sub_18F3D7214(uint64_t a1, int a2)
{
  NSObject *v4;
  char *v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E29533C8);
  v4 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v7 = a2;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_INFO, "Application state changed, %d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E29533C8);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionService6AxisAP::applicationStateChanged(BOOL)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  *(_BYTE *)(a1 + 274) = a2 ^ 1;
}

void sub_18F3D73C8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  float v5;
  uint64_t v6;
  float32x4_t v7;
  _OWORD *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  double v14;
  double v15;
  double v16;
  NSObject *v17;
  NSObject *v18;
  char *v19;
  char *v20;
  double v21;
  _DWORD v22[17];
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  float32x2_t v27;
  float v28;
  int v29;
  double v30;
  _OWORD buf[2];
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = (unint64_t)(*(double *)a2 * 1000000.0);
  v5 = *(float *)(a2 + 16) * 0.017453;
  v27 = vmul_f32(*(float32x2_t *)(a2 + 8), (float32x2_t)vdup_n_s32(0x3C8EFA35u));
  v28 = v5;
  v6 = a1 + 1112;
  sub_18F4C37E4(a1 + 1112, &v27, v4);
  sub_18F4C0C0C(a1 + 288, &v27, v4);
  *(_OWORD *)v22 = 0uLL;
  v21 = -1.0;
  sub_18F1FFE94((float32x4_t *)v22, v7);
  memset(&v22[4], 0, 36);
  *(_OWORD *)&v22[13] = xmmword_18F506750;
  v23 = 0x1FF00000000;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v21 = *(double *)a2;
  v8 = (_OWORD *)(a1 + 1124);
  if (v22 != (_DWORD *)(a1 + 1124))
    *(_OWORD *)v22 = *v8;
  sub_18F4C34A0(v6);
  v22[4] = v9;
  v22[5] = v10;
  v22[6] = v11;
  v12 = *(_QWORD *)(a1 + 1168);
  *(_QWORD *)&v22[7] = *(_QWORD *)(v12 + 432);
  v22[9] = *(_DWORD *)(v12 + 440);
  WORD2(v23) = 511;
  *(_OWORD *)&v22[10] = xmmword_18F506760;
  v22[14] = -1082130432;
  if (*(_BYTE *)(v12 + 416) && *(_QWORD *)(v12 + 408) && *(_BYTE *)(a1 + 1122))
    v13 = HIWORD(v23) & 0xFFEF | (16 * *(unsigned __int8 *)(a1 + 252)) | 0x100;
  else
    v13 = HIWORD(v23) & 0xFEEF | (16 * *(unsigned __int8 *)(a1 + 252)) & 0xFEFF;
  HIWORD(v23) = v13;
  v24 = 3;
  v26 = 0;
  v25 = *(_BYTE *)(a2 + 22);
  v14 = *(double *)a2;
  v15 = *(double *)(a1 + 280);
  if (v15 != 0.0)
  {
    v16 = v14 - v15;
    if (v14 - v15 > 0.100000001)
    {
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E29533C8);
      v17 = off_1ECEDEE70;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf[0]) = 134217984;
        *(double *)((char *)buf + 4) = v16;
        _os_log_impl(&dword_18F1DC000, v17, OS_LOG_TYPE_INFO, "Large time gap, %lf", (uint8_t *)buf, 0xCu);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E29533C8);
        v29 = 134217984;
        v30 = v16;
        v19 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionService6AxisAP::feedGyroData(const CLGyro::Sample *)", "CoreLocation: %s\n", v19);
        if (v19 != (char *)buf)
          free(v19);
      }
      if (*(_BYTE *)(a1 + 274))
      {
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E29533C8);
        v18 = off_1ECEDEE70;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf[0]) = 0;
          _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_DEFAULT, "Reset while backgrounded", (uint8_t *)buf, 2u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE78 != -1)
            dispatch_once(&qword_1ECEDEE78, &unk_1E29533C8);
          LOWORD(v29) = 0;
          v20 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionService6AxisAP::feedGyroData(const CLGyro::Sample *)", "CoreLocation: %s\n", v20);
          if (v20 != (char *)buf)
            free(v20);
        }
        *(_BYTE *)(a1 + 1122) = 0;
        *(_QWORD *)v8 = 0;
        *(_DWORD *)(a1 + 1132) = 0;
        *(_DWORD *)(a1 + 1136) = 1065353216;
        buf[0] = xmmword_18F509AD4;
        buf[1] = unk_18F509AE4;
        v32 = 973279855;
        sub_18F45C8CC(a1 + 1140, (uint64_t)buf);
        *(_BYTE *)(a1 + 1120) = 0;
        *(_QWORD *)(a1 + 1176) = 0;
        *(_DWORD *)(a1 + 1184) = 0;
        *(_QWORD *)(a1 + 1192) = 1;
      }
    }
  }
  *(double *)(a1 + 280) = v14;
  sub_18F1FFEF8(a1, (uint64_t)&v21);
}

void sub_18F3D7888(uint64_t a1, uint64_t a2)
{
  sub_18F3D73C8(a1 - 200, a2);
}

float sub_18F3D7890(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  float result;
  int v4;
  uint64_t v5;

  result = *(float *)(a2 + 8);
  v4 = *((_DWORD *)a3 + 2);
  *(_BYTE *)(a1 + 704) = 1;
  v5 = *a3;
  *(_QWORD *)(a1 + 732) = *(_QWORD *)a2;
  *(float *)(a1 + 740) = result;
  *(_QWORD *)(a1 + 708) = v5;
  *(_DWORD *)(a1 + 716) = v4;
  return result;
}

float sub_18F3D78C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  float result;
  int v4;
  uint64_t v5;

  result = *(float *)(a2 + 8);
  v4 = *((_DWORD *)a3 + 2);
  *(_BYTE *)(a1 + 504) = 1;
  v5 = *a3;
  *(_QWORD *)(a1 + 532) = *(_QWORD *)a2;
  *(float *)(a1 + 540) = result;
  *(_QWORD *)(a1 + 508) = v5;
  *(_DWORD *)(a1 + 516) = v4;
  return result;
}

uint64_t sub_18F3D78F0(float32x2_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  float32x2_t v6;
  int v7;

  v3 = (unint64_t)(*(double *)a2 * 1000000.0);
  v4 = *(_DWORD *)(a2 + 16);
  v6 = *(float32x2_t *)(a2 + 8);
  v7 = v4;
  sub_18F4C0928((uint64_t)&a1[36], &v6, v3);
  return sub_18F4C3AD0(a1 + 139);
}

uint64_t sub_18F3D7954(uint64_t a1, uint64_t a2)
{
  return sub_18F3D78F0((float32x2_t *)(a1 - 200), a2);
}

_QWORD *sub_18F3D8938(_QWORD *a1)
{
  *a1 = &off_1E2949BE0;
  sub_18F2A8438((uint64_t)(a1 + 5));
  return sub_18F3DB8A0(a1);
}

void sub_18F3D8968(_QWORD *a1)
{
  *a1 = &off_1E2949BE0;
  sub_18F2A8438((uint64_t)(a1 + 5));
  sub_18F3DB8A0(a1);
  JUMPOUT(0x194001438);
}

_QWORD *sub_18F3D89AC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E294BAF8;
  *(_QWORD *)(a1 + 64) = 0;
  sub_18F203474(a1, *(_DWORD *)(a1 + 32));
  sub_18F2A8438(a1 + 80);
  return sub_18F3DB8A0((_QWORD *)a1);
}

void sub_18F3D89F4(uint64_t a1)
{
  sub_18F3D89AC(a1);
  JUMPOUT(0x194001438);
}

os_log_t sub_18F3D8A18()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Sensors");
  qword_1EE16D6D0 = (uint64_t)result;
  return result;
}

void sub_18F3D8B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  MEMORY[0x194001438](v19, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_18F3D8BA8(uint64_t a1, CLConnectionMessage **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  char *v21;
  uint8_t buf[4];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v3, v6, v4, v7, v8, v5, 0);
  if (*a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9)) != 0
    && (v14 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, (uint64_t)CFSTR("CMErrorMessage"), v12, v13)) != 0)
  {
    v19 = objc_msgSend_intValue(v14, v15, v16, v17, v18);
  }
  else
  {
    v19 = 103;
  }
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2945020);
  v20 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v23 = v19;
    _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_FAULT, "ExericseMinute, Failed with CMError code %{public}d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945020);
    v21 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMExerciseMinuteInternal init]_block_invoke", "CoreLocation: %s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
  }
}

void sub_18F3D8DBC(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ExecutablePathFromPid;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  pid_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  id v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  const char *v23;
  uint64_t v24;
  char *v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  pid_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = getpid();
  ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2, v4, v5);
  if (ExecutablePathFromPid)
  {
    v11 = ExecutablePathFromPid;
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945020);
    v12 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
    {
      v13 = getpid();
      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(unsigned __int8 *)(v14 + 32);
      *(_DWORD *)buf = 138413058;
      v27 = v11;
      v28 = 1024;
      v29 = v13;
      v30 = 1024;
      v31 = v15;
      v32 = 2048;
      v33 = v14;
      _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_DEFAULT, "ExericseMinute, client connection interrupt, %@, %d, %d, %p", buf, 0x22u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945020);
      getpid();
      v25 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMExerciseMinuteInternal init]_block_invoke", "CoreLocation: %s\n", v25);
      if (v25 != (char *)buf)
        free(v25);
    }
  }
  v16 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v16 + 32))
  {
    v17 = (id)objc_msgSend_copy(*(void **)(v16 + 48), v7, v8, v9, v10);
    v22 = (id)objc_msgSend_copy(*(void **)(*(_QWORD *)(a1 + 32) + 40), v18, v19, v20, v21);
    objc_msgSend__startUpdatesFromRecord_handler_(*(void **)(a1 + 32), v23, (uint64_t)v22, (uint64_t)v17, v24);
  }
}

void sub_18F3D9108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F3D91CC(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  char *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  const __CFString *v15;
  uint64_t v16;
  void *__p;
  std::__shared_weak_count *v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  sub_18F270374(&__p, "kCLConnectionMessageExerciseMinuteUpdate");
  CLConnectionClient::setHandlerForMessage();
  if (v19 < 0)
    operator delete(__p);
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v3 + 32) && *(_QWORD *)(v3 + 48))
  {
    v15 = CFSTR("kCLConnectionMessageSubscribeKey");
    v16 = MEMORY[0x1E0C9AAA0];
    v14 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v2, (uint64_t)&v16, (uint64_t)&v15, 1);
    sub_18F352D1C("kCLConnectionMessageExerciseMinuteUpdate", &v14, &__p);
    v13 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v13)
    {
      v6 = (unint64_t *)&v13->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = 0;
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = 0;
    v8 = v18;
    if (v18)
    {
      v9 = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945020);
    v11 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_18F1DC000, v11, OS_LOG_TYPE_DEFAULT, "ExerciseMinute, Error stopping updates, no active clients.", (uint8_t *)&__p, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945020);
      LOWORD(v14) = 0;
      v12 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMExerciseMinuteInternal _stopUpdates]_block_invoke", "CoreLocation: %s\n", v12);
      if (v12 != (char *)&__p)
        free(v12);
    }
  }
}

void sub_18F3D94C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_18F2A8438((uint64_t)&a11);
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_18F3D9560(uint64_t a1)
{
  uint64_t v1;
  const char *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD v12[6];
  void *__p;
  std::__shared_weak_count *v14;
  char v15;
  const __CFString *v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 8) && *(_QWORD *)(a1 + 40))
  {

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = 0;
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = *(id *)(a1 + 40);
    sub_18F270374(&__p, "kCLConnectionMessageExerciseMinuteUpdate");
    v12[1] = MEMORY[0x1E0C809B0];
    v12[2] = 3221225472;
    v12[3] = sub_18F3D9794;
    v12[4] = &unk_1E2955DD8;
    v12[5] = *(_QWORD *)(a1 + 32);
    CLConnectionClient::setHandlerForMessage();
    if (v15 < 0)
      operator delete(__p);
    v16 = CFSTR("kCLConnectionMessageSubscribeKey");
    v17[0] = MEMORY[0x1E0C9AAB0];
    v12[0] = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v3, (uint64_t)v17, (uint64_t)&v16, 1);
    sub_18F352D1C("kCLConnectionMessageExerciseMinuteUpdate", v12, &__p);
    v11 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v11)
    {
      v6 = (unint64_t *)&v11->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = 1;
    v8 = v14;
    if (v14)
    {
      v9 = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_18F3D9758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_18F2A8438((uint64_t)&a10);
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_18F3D9794(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  NSSet *v17;
  void *DictionaryOfClasses;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  _QWORD *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  char *v36;
  _QWORD v37[5];
  __int16 v38;
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD block[5];
  uint8_t buf[1640];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  if (v6)
  {
    v8 = (id)objc_msgSend_copy(v6, a2, a3, a4, a5);
    v9 = (void *)MEMORY[0x1E0C99E60];
    v10 = objc_opt_class();
    v11 = objc_opt_class();
    v12 = objc_opt_class();
    v13 = objc_opt_class();
    v17 = (NSSet *)objc_msgSend_setWithObjects_(v9, v14, v10, v15, v16, v11, v12, v13, 0);
    if (*(_QWORD *)a2
      && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v17)) != 0)
    {
      v22 = DictionaryOfClasses;
      v23 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v19, (uint64_t)CFSTR("CMErrorMessage"), v20, v21);
      v27 = objc_msgSend_objectForKeyedSubscript_(v22, v24, (uint64_t)CFSTR("CMExerciseMinuteDataArray"), v25, v26);
      if (v23)
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = 0;
        v28 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
        v40[0] = MEMORY[0x1E0C809B0];
        v40[1] = 3221225472;
        v40[2] = sub_18F3D9B68;
        v40[3] = &unk_1E2955B60;
        v40[4] = v23;
        v40[5] = v8;
        v29 = v40;
      }
      else
      {
        v30 = (void *)v27;
        if (v27)
        {

          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = 0;
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = (id)objc_msgSend_lastObject(v30, v31, v32, v33, v34);
          v28 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
          v39[0] = MEMORY[0x1E0C809B0];
          v39[1] = 3221225472;
          v39[2] = sub_18F3D9BC8;
          v39[3] = &unk_1E2955B60;
          v39[4] = v30;
          v39[5] = v8;
          v29 = v39;
        }
        else
        {
          if (qword_1ECEDEE98 != -1)
            dispatch_once(&qword_1ECEDEE98, &unk_1E2945020);
          v35 = off_1ECEDEE90;
          if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F1DC000, v35, OS_LOG_TYPE_FAULT, "ExerciseMinute, Unable to parse update.", buf, 2u);
          }
          if (sub_18F1FCA08(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1ECEDEE98 != -1)
              dispatch_once(&qword_1ECEDEE98, &unk_1E2945020);
            v38 = 0;
            v36 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 0, "-[CMExerciseMinuteInternal _startUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v36);
            if (v36 != (char *)buf)
              free(v36);
          }
          v28 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
          v37[0] = MEMORY[0x1E0C809B0];
          v37[1] = 3221225472;
          v37[2] = sub_18F3D9BDC;
          v37[3] = &unk_1E2955B10;
          v37[4] = v8;
          v29 = v37;
        }
      }
    }
    else
    {
      v28 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_18F3D9B1C;
      block[3] = &unk_1E2955B10;
      block[4] = v8;
      v29 = block;
    }
    dispatch_async(v28, v29);
  }
}

uint64_t sub_18F3D9B1C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F3D9B68(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;

  v5 = (void *)MEMORY[0x1E0CB35C8];
  v6 = *(_QWORD *)(a1 + 40);
  v7 = objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3, a4, a5);
  v9 = objc_msgSend_errorWithDomain_code_userInfo_(v5, v8, (uint64_t)CFSTR("CMErrorDomain"), v7, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v6, 0, v9);
}

uint64_t sub_18F3D9BC8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F3D9BDC(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

void sub_18F3D9C84(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *started;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  _QWORD v52[3];
  _QWORD v53[3];
  const __CFString *v54;
  _QWORD v55[2];

  v55[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) && *(_QWORD *)(a1 + 48))
  {
    v6 = *(void **)(a1 + 40);
    if (v6)
    {
      v52[0] = CFSTR("CMExerciseMinuteRecordId");
      v7 = (void *)MEMORY[0x1E0CB37E8];
      v8 = objc_msgSend_recordId(v6, a2, a3, a4, a5);
      v53[0] = objc_msgSend_numberWithInteger_(v7, v9, v8, v10, v11);
      v52[1] = CFSTR("CMExerciseMinuteStartDate");
      v12 = (void *)MEMORY[0x1E0CB37E8];
      started = (void *)objc_msgSend_startDate(*(void **)(a1 + 40), v13, v14, v15, v16);
      objc_msgSend_timeIntervalSinceReferenceDate(started, v18, v19, v20, v21);
      v53[1] = objc_msgSend_numberWithDouble_(v12, v22, v23, v24, v25);
      v52[2] = CFSTR("CMExerciseMinuteSourceId");
      if (objc_msgSend_sourceId(*(void **)(a1 + 40), v26, v27, v28, v29))
        v34 = (void *)objc_msgSend_sourceId(*(void **)(a1 + 40), v30, v31, v32, v33);
      else
        v34 = (void *)objc_msgSend_UUID(MEMORY[0x1E0CB3A28], v30, v31, v32, v33);
      v53[2] = objc_msgSend_UUIDString(v34, v35, v36, v37, v38);
      v39 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v40, (uint64_t)v53, (uint64_t)v52, 3);
    }
    else
    {
      v54 = CFSTR("CMExerciseMinuteRecordId");
      v55[0] = &unk_1E298C320;
      v39 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v55, (uint64_t)&v54, 1);
    }
    v51 = v39;
    sub_18F3515BC("kCLConnectionMessageExerciseMinuteQuery", &v51, &v49);
    v48 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v42 = __ldxr(p_shared_owners);
      while (__stxr(v42 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v48)
    {
      v43 = (unint64_t *)&v48->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v45 = v50;
    if (v50)
    {
      v46 = (unint64_t *)&v50->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
}

void sub_18F3D9EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F3D9EEC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  NSSet *v16;
  void *DictionaryOfClasses;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  _QWORD *v28;
  NSObject *v29;
  NSObject *v30;
  char *v31;
  _QWORD v32[5];
  __int16 v33;
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD block[5];
  uint8_t buf[1640];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = (id)objc_msgSend_copy(*(void **)(a1 + 40), a2, a3, a4, a5);
  v8 = (void *)MEMORY[0x1E0C99E60];
  v9 = objc_opt_class();
  v10 = objc_opt_class();
  v11 = objc_opt_class();
  v12 = objc_opt_class();
  v16 = (NSSet *)objc_msgSend_setWithObjects_(v8, v13, v9, v14, v15, v10, v11, v12, 0);
  if (*(_QWORD *)a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v16)) != 0)
  {
    v21 = DictionaryOfClasses;
    v22 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v18, (uint64_t)CFSTR("CMErrorMessage"), v19, v20);
    v26 = objc_msgSend_objectForKeyedSubscript_(v21, v23, (uint64_t)CFSTR("CMExerciseMinuteDataArray"), v24, v25);
    if (v22)
    {
      v27 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
      v35[0] = MEMORY[0x1E0C809B0];
      v35[1] = 3221225472;
      v35[2] = sub_18F3DA288;
      v35[3] = &unk_1E2955B60;
      v35[4] = v22;
      v35[5] = v7;
      v28 = v35;
    }
    else if (v26)
    {
      v29 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
      v34[0] = MEMORY[0x1E0C809B0];
      v34[1] = 3221225472;
      v34[2] = sub_18F3DA2E8;
      v34[3] = &unk_1E2955B60;
      v34[4] = v26;
      v34[5] = v7;
      v28 = v34;
      v27 = v29;
    }
    else
    {
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945020);
      v30 = off_1ECEDEE90;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v30, OS_LOG_TYPE_FAULT, "ExerciseMinute, Unable to parse query.", buf, 2u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E2945020);
        v33 = 0;
        v31 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "-[CMExerciseMinuteInternal _queryExerciseMinutesFromRecord:handler:]_block_invoke", "CoreLocation: %s\n", v31);
        if (v31 != (char *)buf)
          free(v31);
      }
      v27 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
      v32[0] = MEMORY[0x1E0C809B0];
      v32[1] = 3221225472;
      v32[2] = sub_18F3DA2FC;
      v32[3] = &unk_1E2955B10;
      v32[4] = v7;
      v28 = v32;
    }
  }
  else
  {
    v27 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_18F3DA23C;
    block[3] = &unk_1E2955B10;
    block[4] = v7;
    v28 = block;
  }
  dispatch_async(v27, v28);
}

uint64_t sub_18F3DA23C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F3DA288(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;

  v5 = (void *)MEMORY[0x1E0CB35C8];
  v6 = *(_QWORD *)(a1 + 40);
  v7 = objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3, a4, a5);
  v9 = objc_msgSend_errorWithDomain_code_userInfo_(v5, v8, (uint64_t)CFSTR("CMErrorDomain"), v7, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v6, 0, v9);
}

uint64_t sub_18F3DA2E8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F3DA2FC(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F3DA428(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend__teardown(*(void **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5);
}

uint64_t sub_18F3DA534(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;

  v6 = (void *)objc_msgSend__internal(*(void **)(a1 + 32), a2, a3, a4, a5);
  return objc_msgSend__startUpdatesFromRecord_handler_(v6, v7, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v8);
}

uint64_t sub_18F3DA5B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v5, sel__stopUpdates, v6, v7, v8);
}

uint64_t sub_18F3DA684(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (void *)objc_msgSend__internal(*(void **)(a1 + 32), a2, a3, a4, a5);
  return objc_msgSend__startUpdatesWithHandler_(v6, v7, *(_QWORD *)(a1 + 40), v8, v9);
}

uint64_t sub_18F3DA780(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = objc_msgSend_isAuthorizedForEntitlement_(CMMotionUtils, a2, (uint64_t)CFSTR("com.apple.locationd.activity"), a4, a5);
  qword_1ECEDF860 = result;
  return result;
}

uint64_t sub_18F3DA7B4()
{
  if (qword_1ECEDF878 != -1)
    dispatch_once(&qword_1ECEDF878, &unk_1E2953448);
  return qword_1ECEDF870;
}

void sub_18F3DA7F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char v6;
  unint64_t *v7;
  unint64_t v8;

  if ((sub_18F1F781C() & 1) != 0)
  {
    v0 = operator new();
    sub_18F1E61EC(v0, (uint64_t)"CLMagnetometer", 1);
    *(_QWORD *)v0 = &off_1E2949B18;
    *(_BYTE *)(v0 + 32) = 0;
    *(_QWORD *)(v0 + 64) = 0;
    *(_DWORD *)(v0 + 72) = 0;
    *(_QWORD *)(v0 + 80) = 0;
    *(_QWORD *)(v0 + 88) = 0;
    *(_QWORD *)(v0 + 40) = 0;
    *(_QWORD *)(v0 + 48) = 0;
    *(_DWORD *)(v0 + 56) = 0;
    v1 = sub_18F204AE4();
    v2 = *(_QWORD *)(v1 + 24);
    v3 = *(std::__shared_weak_count **)(v1 + 32);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v6 = sub_18F1EE944(v2, "LogMagnetometer", (BOOL *)(v0 + 32));
    if (v3)
    {
      v7 = (unint64_t *)&v3->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if ((v6 & 1) == 0)
      *(_BYTE *)(v0 + 32) = 0;
    qword_1ECEDF870 = v0;
  }
}

void sub_18F3DA908(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_18F2A8438(v2);
  sub_18F3DB8A0(v1);
  MEMORY[0x194001438](v1, 0x10F1C40A45ED163);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F3DA980(_QWORD *a1)
{
  uint64_t v3;

  *a1 = &off_1E2949B18;
  v3 = 0;
  sub_18F3DA9D8((uint64_t)a1, (double *)&v3);
  sub_18F3A4658(a1 + 10);
  sub_18F2A8438((uint64_t)(a1 + 10));
  return sub_18F3DB8A0(a1);
}

uint64_t sub_18F3DA9D8(uint64_t a1, double *a2)
{
  uint64_t result;
  void **v5;
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  uint8_t buf[1640];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  result = sub_18F1F781C();
  if ((result & 1) == 0)
    return result;
  v5 = (void **)(a1 + 80);
  if (!*(_QWORD *)(a1 + 80))
  {
    v6 = (_QWORD *)sub_18F1E0F30();
    v40 = 0xA0000FF00;
    v41 = 0;
    sub_18F1E9BC8(v6, (uint64_t)&v40, (uint64_t *)buf);
    sub_18F346DC8(a1 + 80, (__int128 *)buf);
    v11 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (void *)objc_msgSend_mutableCopy(&unk_1E298C140, v7, v8, v9, v10);
    v39 = 0;
    v15 = sub_18F204AE4();
    v16 = *(_QWORD *)(v15 + 24);
    v17 = *(std::__shared_weak_count **)(v15 + 32);
    *(_QWORD *)buf = v16;
    *(_QWORD *)&buf[8] = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    v20 = sub_18F1E312C(v16, "MagLocationID", &v39);
    if (v39)
      v24 = 1;
    else
      v24 = v20;
    if (!v17)
      goto LABEL_18;
    v25 = (unint64_t *)&v17->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if (v24)
        goto LABEL_19;
    }
    else
    {
LABEL_18:
      if (v24)
      {
LABEL_19:
        v27 = v39;
        v28 = objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v21, v39, v22, v23);
        objc_msgSend_setObject_forKey_(v14, v29, v28, (uint64_t)CFSTR("LocationID"), v30);
        if (qword_1ECEDEE48 != -1)
          dispatch_once(&qword_1ECEDEE48, &unk_1E2954B48);
        v31 = qword_1ECEDEE40;
        if (os_log_type_enabled((os_log_t)qword_1ECEDEE40, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v27;
          _os_log_impl(&dword_18F1DC000, v31, OS_LOG_TYPE_DEFAULT, "Setting Mag matching properties with IMULocationID %d", buf, 8u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE48 != -1)
            dispatch_once(&qword_1ECEDEE48, &unk_1E2954B48);
          v42 = 67109120;
          LODWORD(v43) = v27;
          v38 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "BOOL CLMagnetometer::setMagnetometerInterval(const CFTimeInterval &)", "CoreLocation: %s\n", v38);
          if (v38 != (char *)buf)
            free(v38);
        }
      }
    }
    sub_18F1E4538(*v5, v14);
    sub_18F203148(*(_QWORD *)(a1 + 80), (uint64_t)sub_18F3DAF40, a1);

  }
  if (qword_1EE16D6D8 != -1)
    dispatch_once(&qword_1EE16D6D8, &unk_1E2954DA8);
  v32 = qword_1EE16D6D0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_INFO))
  {
    v33 = *a2;
    *(_DWORD *)buf = 134349056;
    *(double *)&buf[4] = v33;
    _os_log_impl(&dword_18F1DC000, v32, OS_LOG_TYPE_INFO, "Setting magnetometer update and batch interval to %{public}f", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2954DA8);
    v36 = *(_QWORD *)a2;
    v42 = 134349056;
    v43 = v36;
    v37 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "BOOL CLMagnetometer::setMagnetometerInterval(const CFTimeInterval &)", "CoreLocation: %s\n", v37);
    if (v37 != (char *)buf)
      free(v37);
  }
  v34 = rint(*a2 * 1000000.0);
  if (*a2 < 0.0)
    v35 = 0;
  else
    v35 = (uint64_t)v34;
  sub_18F203AF8((uint64_t)*v5, v35);
  return sub_18F203A68((uint64_t)*v5, *a2);
}

void sub_18F3DAE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_18F3DAEB0(_QWORD *a1)
{
  sub_18F3DA980(a1);
  JUMPOUT(0x194001438);
}

BOOL sub_18F3DAED4(uint64_t a1)
{
  uint64_t v1;
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v3 = objc_alloc(MEMORY[0x1E0CB37E8]);
    v7 = (void *)objc_msgSend_initWithBool_(v3, v4, 1, v5, v6);
    (*(void (**)(_QWORD, const __CFString *, void *))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), CFSTR("IOHIDCompasssResetDAC"), v7);

  }
  return v1 != 0;
}

uint64_t sub_18F3DAF40(uint64_t a1)
{
  uint64_t result;
  double v3;
  float v4;
  double v5;
  float v6;
  double v7;
  float v8;
  unint64_t TimeStamp;
  double v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  int v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  double v32;
  float v33;
  float v34;
  float v35;
  int v36;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _BYTE v50[22];
  __int16 v51;
  double v52;
  _BYTE v53[12];
  double v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  result = IOHIDEventGetType();
  if ((_DWORD)result == 21)
  {
    IOHIDEventGetFloatValue();
    v4 = v3;
    IOHIDEventGetFloatValue();
    v6 = v5;
    IOHIDEventGetFloatValue();
    v8 = v7;
    TimeStamp = IOHIDEventGetTimeStamp();
    v10 = sub_18F1FD20C(TimeStamp);
    if (v10 > *(double *)(a1 + 64) + 1.0)
    {
      v11 = (void *)(*(uint64_t (**)(_QWORD, const __CFString *))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), CFSTR("AppleVoltageDictionary"));
      v15 = (void *)objc_msgSend_objectForKeyedSubscript_(v11, v12, (uint64_t)CFSTR("COMPASS_TEMP"), v13, v14);
      objc_msgSend_floatValue(v15, v16, v17, v18, v19);
      *(float *)(a1 + 72) = v20 / 100.0;
      *(double *)(a1 + 64) = v10;

    }
    v32 = v10;
    v21 = v6 - *(float *)(a1 + 52);
    v33 = v4 - *(float *)(a1 + 48);
    v34 = v21;
    v22 = *(_DWORD *)(a1 + 72);
    v35 = v8 - *(float *)(a1 + 56);
    v36 = v22;
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2954DA8);
    v23 = qword_1EE16D6D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136316162;
      v38 = "Magnetometer";
      v39 = 2048;
      v40 = v4;
      v41 = 2048;
      v42 = v6;
      v43 = 2048;
      v44 = v8;
      v45 = 2048;
      v46 = v10;
      _os_log_impl(&dword_18F1DC000, v23, OS_LOG_TYPE_DEBUG, "Type,%s,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f", buf, 0x34u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2954DA8);
      *(_DWORD *)v50 = 136316162;
      *(_QWORD *)&v50[4] = "Magnetometer";
      *(_WORD *)&v50[12] = 2048;
      *(double *)&v50[14] = v4;
      v51 = 2048;
      v52 = v6;
      *(_WORD *)v53 = 2048;
      *(double *)&v53[2] = v8;
      *(_WORD *)&v53[10] = 2048;
      v54 = v10;
      v31 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLMagnetometer::onMagnetometerData(const CLMotionTypeMagneticField &, const CLMotionTypeTimestamp &)", "CoreLocation: %s\n", v31);
      if (v31 != (char *)buf)
        free(v31);
    }
    if (*(_BYTE *)(a1 + 32))
    {
      *(_QWORD *)v50 = &off_1E294BFC0;
      *(_QWORD *)&v50[8] = CFAbsoluteTimeGetCurrent();
      v52 = v10;
      *(float *)v53 = v4;
      *(float *)&v53[4] = v6;
      *(float *)&v53[8] = v8;
      v24 = sub_18F47400C();
      sub_18F475D9C(v24, (uint64_t)v50);
      sub_18F2B6BD0(buf);
      sub_18F2C7104(buf);
      v49 |= 1u;
      v47 = *(_QWORD *)&v50[8];
      v25 = v48;
      *(_BYTE *)(v48 + 36) |= 1u;
      *(double *)(v25 + 8) = v10;
      v26 = v48;
      *(_BYTE *)(v48 + 36) |= 8u;
      *(float *)(v26 + 24) = v4;
      v27 = v48;
      *(_BYTE *)(v48 + 36) |= 0x10u;
      *(float *)(v27 + 28) = v6;
      v28 = v48;
      *(_BYTE *)(v48 + 36) |= 0x20u;
      *(float *)(v28 + 32) = v8;
      v29 = v48;
      v30 = *(_DWORD *)(a1 + 72);
      *(_BYTE *)(v48 + 36) |= 4u;
      *(_DWORD *)(v29 + 20) = v30;
      sub_18F2B9670((PB::Base *)buf);
    }
    return sub_18F1FD2C8(a1, 0, (uint64_t)&v32, 24);
  }
  return result;
}

void sub_18F3DB328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_18F2B9670((PB::Base *)va);
  _Unwind_Resume(a1);
}

double sub_18F3DB344(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  char *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint8_t buf[8];
  uint64_t v17;
  uint64_t *(*v18)(uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2954DA8);
    v4 = qword_1EE16D6D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "Unrecognized magnetometer notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2954DA8);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual CFTimeInterval CLMagnetometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  else
  {
    sub_18F3DA9D8(a1, a3);
    if (*a3 <= 0.0 || *(_QWORD *)(a1 + 40))
    {
      if (*a3 <= 0.0 && *(_QWORD *)(a1 + 40))
      {
        v9 = sub_18F45E880();
        v10 = *(_QWORD *)(a1 + 40);
        v11 = sub_18F204AE4();
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        v17 = 3221225472;
        v18 = sub_18F1F5EE0;
        v19 = &unk_1E2956E98;
        v22 = 0;
        v20 = v9;
        v21 = v10;
        sub_18F1F5E28(v11, (uint64_t)buf);
        v12 = *(_QWORD *)(a1 + 40);
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        *(_QWORD *)(a1 + 40) = 0;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      v13 = (_QWORD *)operator new();
      *v13 = off_1E294C238;
      *v13 = &off_1E294C270;
      v13[1] = 0;
      v13[2] = sub_18F3DB634;
      v13[3] = a1;
      *(_QWORD *)(a1 + 40) = v13;
      v14 = sub_18F45E880();
      sub_18F1F4F0C(v14, 0, *(_QWORD *)(a1 + 40), -1.0);
    }
    return *a3;
  }
  return v5;
}

void sub_18F3DB608(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sub_18F3DB634(float *a1, uint64_t a2)
{
  NSObject *v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint8_t buf[4];
  double v11;
  __int16 v12;
  double v13;
  __int16 v14;
  double v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D6D8 != -1)
    dispatch_once(&qword_1EE16D6D8, &unk_1E2954DA8);
  v4 = qword_1EE16D6D0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_INFO))
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = a1[2];
    *(_DWORD *)buf = 134218496;
    v11 = v5;
    v12 = 2048;
    v13 = v6;
    v14 = 2048;
    v15 = v7;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_INFO, "Received magnetometer offset (%f, %f, %f)", buf, 0x20u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2954DA8);
    v9 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "static void CLMagnetometer::onOffset(const CLMotionTypeMagneticField *, void *)", "CoreLocation: %s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  v8 = *(_QWORD *)a1;
  *(float *)(a2 + 56) = a1[2];
  *(_QWORD *)(a2 + 48) = v8;
}

os_log_t sub_18F3DB840()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Sensors");
  qword_1EE16D6D0 = (uint64_t)result;
  return result;
}

void sub_18F3DB870(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3DB894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

_QWORD *sub_18F3DB8A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E294A740;
  v2 = a1[2];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 - 8);
    if (v3)
    {
      v4 = 80 * v3;
      do
      {
        sub_18F3DBB24((_QWORD *)(v2 + v4 - 24));
        sub_18F3BEA38(v2 + v4 - 48, *(_QWORD **)(v2 + v4 - 40));
        v4 -= 80;
      }
      while (v4);
    }
    MEMORY[0x194001420](v2 - 16, 0x1020C80BCAB735ELL);
  }
  return a1;
}

void sub_18F3DB934(_QWORD *a1)
{
  sub_18F3DB8A0(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3DB958(uint64_t a1, int a2)
{
  NSObject *v4;
  char *v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 24) > a2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * a2 + 72);
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2953468);
  v4 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    v7 = a2;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "Unknown notification %d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2953468);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "ssize_t CLMotionNotifier::numberOfSpectators(int)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  return -1;
}

_QWORD *sub_18F3DBB24(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t sub_18F3DD3D0()
{
  if (qword_1ECEDF888 != -1)
    dispatch_once(&qword_1ECEDF888, &unk_1E29534A8);
  return qword_1ECEDF880;
}

void sub_18F3DD88C()
{
  uint64_t v0;
  int v1;
  const char *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  int v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  BOOL v23;
  int v24;
  _BOOL4 v25;
  __int16 v26;
  int v27;
  uint8_t buf[8];
  std::__shared_weak_count *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDF888 != -1)
    dispatch_once(&qword_1ECEDF888, &unk_1E29534A8);
  v0 = qword_1ECEDF880;
  v1 = sub_18F3DE228();
  v2 = (const char *)sub_18F3DDF7C();
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E2945128);
  v3 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v1;
    LOWORD(v29) = 1024;
    *(_DWORD *)((char *)&v29 + 2) = (_DWORD)v2;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEFAULT, "KeyboardMotion preferences changed,dataCollection,%d,accelStreaming,%d", buf, 0xEu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2945128);
    v24 = 67109376;
    v25 = v1;
    v26 = 1024;
    v27 = (int)v2;
    v21 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLKeyboardMotionNotifier::dataCollectionSettingsChanged()", "CoreLocation: %s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
  }
  sub_18F3DDF00(v0, v2, v4, v5, v6);
  if (*(unsigned __int8 *)(v0 + 89) != v1)
  {
    buf[0] = -60;
    buf[1] = v1;
    if (objc_msgSend_setReport_payload_length_(*(void **)(v0 + 40), v7, 196, (uint64_t)buf, 2))
      *(_BYTE *)(v0 + 89) = v1;
  }
  if (*(unsigned __int8 *)(v0 + 90) != (_DWORD)v2)
  {
    buf[0] = 105;
    buf[1] = v2;
    if (objc_msgSend_setReport_payload_length_(*(void **)(v0 + 48), v7, 105, (uint64_t)buf, 2))
      *(_BYTE *)(v0 + 90) = (_BYTE)v2;
  }
  v23 = 0;
  sub_18F3796B4(buf);
  v8 = sub_18F1EE944(*(uint64_t *)buf, "MotionLoggerLogKeyboardMotion", &v23);
  v9 = v8;
  v10 = v29;
  if (!v29)
    goto LABEL_18;
  p_shared_owners = (unint64_t *)&v29->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (!v9)
      return;
  }
  else
  {
LABEL_18:
    if (!v8)
      return;
  }
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E2945128);
  v13 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v23;
    _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_DEFAULT, "KeyboardMotion,Msl Logging,%d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2945128);
    v24 = 67109120;
    v25 = v23;
    v22 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLKeyboardMotionNotifier::dataCollectionSettingsChanged()", "CoreLocation: %s\n", v22);
    if (v22 != (char *)buf)
      free(v22);
  }
  sub_18F3796B4(buf);
  sub_18F36BB20(*(uint64_t *)buf, "MslLogger.Enable", &v23);
  v14 = v29;
  if (v29)
  {
    v15 = (unint64_t *)&v29->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  sub_18F3796B4(buf);
  if (v23)
    v17 = 15;
  else
    v17 = 255;
  v24 = v17;
  sub_18F36C944(*(uint64_t *)buf, "MslLogger.FlushTimeout", &v24);
  v18 = v29;
  if (v29)
  {
    v19 = (unint64_t *)&v29->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_18F3DDD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_18F2A8438((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3DDD9C()
{
  uint64_t result;
  _QWORD *v1;
  __CFNotificationCenter *DarwinNotifyCenter;
  CLHidManager *v3;
  uint64_t v4;
  dispatch_queue_global_t global_queue;
  const char *v6;
  uint64_t v7;
  Class v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_18F1F77DC();
  result = sub_18F1E1B00();
  if ((_DWORD)result)
  {
    v1 = (_QWORD *)operator new();
    sub_18F1E61EC((uint64_t)v1, (uint64_t)"CLKeyboardMotionNotifier", 5);
    *v1 = &off_1E294B108;
    *((_OWORD *)v1 + 2) = 0u;
    v1[10] = 0;
    *((_OWORD *)v1 + 3) = 0u;
    *(_OWORD *)((char *)v1 + 57) = 0u;
    *(_DWORD *)((char *)v1 + 87) = 0;
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, v1, (CFNotificationCallback)sub_18F3DD88C, CFSTR("com.apple.locationd.KeyboardMotion.DataCollectionMode"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    v1[7] = objc_opt_new();
    v3 = [CLHidManager alloc];
    v4 = v1[7];
    global_queue = dispatch_get_global_queue(0, 0);
    v1[4] = objc_msgSend_initWithDelegate_queue_(v3, v6, v4, (uint64_t)global_queue, v7);
    v8 = (Class)off_1EE16D6F0[0]();
    v13 = (void *)objc_msgSend_sharedInstance(v8, v9, v10, v11, v12);
    v1[10] = (id)objc_msgSend_registerSmartCoverStateObserver_(v13, v14, v1[7], v15, v16);
    v17 = (const char *)sub_18F3DDF7C();
    result = sub_18F3DDF00((uint64_t)v1, v17, v18, v19, v20);
    qword_1ECEDF880 = (uint64_t)v1;
  }
  return result;
}

void sub_18F3DDECC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x10F1C406BBC6232);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3DDF00(uint64_t result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = result;
  if ((_DWORD)a2)
  {
    if (!*(_QWORD *)(result + 40))
    {
      result = objc_msgSend_registerForDeviceMatching_(*(void **)(result + 32), a2, (uint64_t)&unk_1E298C230, a4, a5);
      *(_QWORD *)(v5 + 40) = result;
    }
  }
  else
  {
    result = sub_18F3DB958(result, 1);
    if (!result)
    {
      result = sub_18F3DB958(v5, 2);
      if (!result)
      {
        result = sub_18F3DB958(v5, 4);
        if (!result)
        {
          result = objc_msgSend_unregisterForDeviceMatching_(*(void **)(v5 + 32), v6, *(_QWORD *)(v5 + 40), v7, v8);
          *(_QWORD *)(v5 + 40) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_18F3DDF7C()
{
  unsigned int v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  BOOL v7;

  v7 = 0;
  sub_18F3796B4(&v5);
  v0 = sub_18F1EE944(v5, "EnableKeyboardMotionAccelStream", &v7);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (v7)
    return v0;
  else
    return 0;
}

void sub_18F3DE008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F2A8438((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F3DE01C(id *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = &off_1E294B108;
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, CFSTR("com.apple.locationd.KeyboardMotion.DataCollectionMode"), 0);

  objc_msgSend_invalidate(a1[10], v3, v4, v5, v6);
  return sub_18F3DB8A0(a1);
}

void sub_18F3DE098(id *a1)
{
  sub_18F3DE01C(a1);
  JUMPOUT(0x194001438);
}

void sub_18F3DE0BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  CLHidEventMonitorManager *v9;
  uint64_t v10;
  dispatch_queue_global_t global_queue;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  switch((int)a2)
  {
    case 0:
      if (a3)
      {
        if (!*(_QWORD *)(a1 + 48))
          *(_QWORD *)(a1 + 48) = objc_msgSend_registerForDeviceMatching_(*(void **)(a1 + 32), a2, (uint64_t)&unk_1E298C168, a4, a5);
      }
      else
      {
        objc_msgSend_unregisterForDeviceMatching_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 48), a4, a5);

        *(_QWORD *)(a1 + 48) = 0;
      }
      break;
    case 1:
    case 4:
      sub_18F3DDF00(a1, (const char *)(a3 != 0), a3, a4, a5);
      break;
    case 2:
      sub_18F3DDF00(a1, (const char *)(a3 != 0), a3, a4, a5);
      if (a3)
      {
        v7 = mach_absolute_time();
        sub_18F1FD20C(v7);
        sub_18F1FD2C8(a1, 2, a1 + 91, 1);
      }
      break;
    case 3:
      v8 = *(_QWORD *)(a1 + 64);
      if (a3)
      {
        if (!v8)
        {
          v9 = [CLHidEventMonitorManager alloc];
          v10 = *(_QWORD *)(a1 + 56);
          global_queue = dispatch_get_global_queue(0, 0);
          v13 = objc_msgSend_initWithDelegate_queue_matching_(v9, v12, v10, (uint64_t)global_queue, (uint64_t)&unk_1E298C208);
          *(_QWORD *)(a1 + 64) = v13;
          MEMORY[0x1E0DE7D20](v13, sel_addSystemClientMatching_, &unk_1E298C208, v14, v15);
        }
      }
      else
      {
        MEMORY[0x1E0DE7D20](v8, sel_removeSystemClientmatching_, &unk_1E298C208, a4, a5);
      }
      break;
    default:
      return;
  }
}

uint64_t sub_18F3DE228()
{
  unsigned int v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  BOOL v7;

  v7 = 0;
  sub_18F3796B4(&v5);
  v0 = sub_18F1EE944(v5, "EnableKeyboardMotionDataCollectionMode", &v7);
  v1 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (v7)
    return v0;
  else
    return 0;
}

void sub_18F3DE2B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F2A8438((uint64_t)va);
  _Unwind_Resume(a1);
}

Class sub_18F3DE2C8()
{
  Class result;

  if (qword_1ECEDF898 != -1)
    dispatch_once(&qword_1ECEDF898, &unk_1E2954688);
  result = objc_getClass("SBSSmartCoverService");
  qword_1ECEDF890 = (uint64_t)result;
  off_1EE16D6F0[0] = sub_18F3DE324;
  return result;
}

uint64_t sub_18F3DE324()
{
  return qword_1ECEDF890;
}

void *sub_18F3DE330()
{
  void *result;

  result = dlopen("/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices", 2);
  qword_1ECEDF8A0 = (uint64_t)result;
  return result;
}

os_log_t sub_18F3DE358()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Accessory");
  qword_1ECEDEE30 = (uint64_t)result;
  return result;
}

uint64_t sub_18F3DE384(uint64_t a1)
{
  if (qword_1ECEDF898 != -1)
    dispatch_once(&qword_1ECEDF898, &unk_1E2954688);
  off_1EE16D6F8 = (uint64_t (*)())dlsym((void *)qword_1ECEDF8A0, "NSStringFromSBSSmartCoverState");
  return ((uint64_t (*)(uint64_t))off_1EE16D6F8)(a1);
}

uint64_t sub_18F3DE3EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_main(MEMORY[0x1E0D44548], a2, a3, a4, a5);
}

uint64_t sub_18F3DE3F8(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD v5[5];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  if (qword_1ECEDEF30 != -1)
    dispatch_once(&qword_1ECEDEF30, &unk_1E29534C8);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18F3DE4CC;
  v5[3] = &unk_1E2956F00;
  v5[4] = &v7;
  v6 = a2;
  sub_18F1F5E28(a1, (uint64_t)v5);
  v3 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_18F3DE4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F3DE4CC(uint64_t a1)
{
  _opaque_pthread_t *v2;
  int v3;
  int v4;
  NSObject *v5;
  _opaque_pthread_t *v6;
  char *v7;
  int v8;
  sched_param v9;
  int v10;
  int v11;
  uint8_t buf[4];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v2 = pthread_self();
  v3 = pthread_getschedparam(v2, &v8, &v9);
  if (v3)
  {
    v4 = v3;
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954FA8);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v13 = v4;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Could not get scheduling parameters for motion thread, error = %{public}d", buf, 8u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954FA8);
      v10 = 67240192;
      v11 = v4;
      v7 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "BOOL CLMotionCore::setMotionThreadPriority(int)_block_invoke", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    if (*(int *)(a1 + 40) >= 1)
      v9.sched_priority = *(_DWORD *)(a1 + 40);
    v6 = pthread_self();
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = pthread_setschedparam(v6, v8, &v9) == 0;
  }
}

void sub_18F3DE6D4()
{
  CFRunLoopRef Current;
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t buf[4];
  int v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  if (qword_1ECEDEF30 != -1)
    dispatch_once(&qword_1ECEDEF30, &unk_1E29534C8);
  if (Current != *(CFRunLoopRef *)qword_1ECEDFE08)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2944FA0);
    v1 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v5 = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = "assert";
      v10 = 2081;
      v11 = "runningOnMotionThread";
      _os_log_impl(&dword_18F1DC000, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Not running on motion thread!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2944FA0);
    }
    v2 = off_1ECEDEE90;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE90))
    {
      *(_DWORD *)buf = 68289539;
      v5 = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = "assert";
      v10 = 2081;
      v11 = "runningOnMotionThread";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Not running on motion thread!", "{\"msg%{public}.0s\":\"Not running on motion thread!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2944FA0);
    }
    v3 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v5 = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = "assert";
      v10 = 2081;
      v11 = "runningOnMotionThread";
      _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Not running on motion thread!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
  }
}

void sub_18F3DE970(int a1, uint64_t a2, CFArrayRef theArray)
{
  CFIndex Count;
  CFIndex v6;
  const void *ValueAtIndex;
  const void *v8;

  if (a2 == 1)
    goto LABEL_6;
  if (a2 == 128 || a2 == 32)
  {
    Count = CFArrayGetCount(theArray);
    if (Count <= 0)
      __assert_rtn("wrapRunLoopWithAutoreleasePoolHandler", "CLMotionCore.mm", 218, "count > 0");
    v6 = Count - 1;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, Count - 1);
    MEMORY[0x194000EC8](ValueAtIndex);
    CFArrayRemoveValueAtIndex(theArray, v6);
    if (a2 == 32)
    {
LABEL_6:
      v8 = (const void *)MEMORY[0x194000ED4](0);
      CFArrayAppendValue(theArray, v8);
    }
  }
}

void sub_18F3DEA28()
{
  NSObject *v0;
  int v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint8_t buf[4];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2944FA0);
  v0 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
  {
    v1 = *(_DWORD *)(qword_1ECEDFE08 + 48);
    *(_DWORD *)buf = 67109120;
    v19 = v1;
    _os_log_impl(&dword_18F1DC000, v0, OS_LOG_TYPE_DEFAULT, "Motion thread deadlock watchdog after %d petting", buf, 8u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2944FA0);
    v17 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "static void *CLMotionCore::runMotionThread(void *)_block_invoke", "CoreLocation: %s\n", v17);
    if (v17 != (char *)buf)
      free(v17);
  }
  if (MEMORY[0x1E0CF6398])
  {
    ADClientAddValueForScalarKey();
    v2 = objc_alloc(MEMORY[0x1E0CB3940]);
    v7 = (void *)objc_msgSend_processInfo(MEMORY[0x1E0CB3898], v3, v4, v5, v6);
    v12 = objc_msgSend_processName(v7, v8, v9, v10, v11);
    v16 = (void *)objc_msgSend_initWithFormat_(v2, v13, (uint64_t)CFSTR("%@.%@"), v14, v15, CFSTR("com.apple.CoreMotion.ThreadDeadlockCount"), v12);
    ADClientAddValueForScalarKey();

  }
}

void sub_18F3DEC44(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3DEC68(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_18F3DEC80(uint64_t a1, uint64_t a2)
{
  if (sub_18F2AB00C(a2, (uint64_t)&unk_1E2948AA0))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_18F3DECC0()
{
  if (qword_1ECEDF8C0 != -1)
    dispatch_once(&qword_1ECEDF8C0, &unk_1E29534E8);
  return qword_1ECEDF8B8;
}

double sub_18F3DED00()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  sub_18F1E61EC(v0, (uint64_t)"CLPocketStateService", 1);
  *(_QWORD *)v0 = &off_1E294AC38;
  *(_DWORD *)(v0 + 32) = 3;
  *(_QWORD *)(v0 + 112) = 0;
  *(_BYTE *)(v0 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_DWORD *)(v0 + 104) = 0;
  qword_1ECEDF8B8 = v0;
  return result;
}

void sub_18F3DED84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x10F1C40417077C4);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F3DEDA8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &off_1E294AC38;
  sub_18F3DEE0C((io_object_t *)a1, a2, a3, a4, a5);
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return sub_18F3DB8A0((_QWORD *)a1);
}

void sub_18F3DEE0C(io_object_t *notifier, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  NSObject *v15;
  io_connect_t v16;
  IONotificationPort *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *(*v20)(uint64_t);
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v6 = MEMORY[0x1E0C809B0];
  if (*((_QWORD *)notifier + 5))
  {
    v7 = sub_18F47A70C();
    v8 = *((_QWORD *)notifier + 5);
    v9 = sub_18F204AE4();
    v18 = v6;
    v19 = 3221225472;
    v20 = sub_18F1F5EE0;
    v21 = &unk_1E2956E98;
    v24 = 1;
    v22 = v7;
    v23 = v8;
    sub_18F1F5E28(v9, (uint64_t)&v18);
  }
  if (*((_QWORD *)notifier + 6))
  {
    if (qword_1EE16E920 != -1)
      dispatch_once(&qword_1EE16E920, &unk_1E2953C48);
    v10 = qword_1EE16E918;
    v11 = *((_QWORD *)notifier + 6);
    v12 = sub_18F204AE4();
    v18 = v6;
    v19 = 3221225472;
    v20 = sub_18F1F5EE0;
    v21 = &unk_1E2956E98;
    v24 = 0;
    v22 = v10;
    v23 = v11;
    sub_18F1F5E28(v12, (uint64_t)&v18);
  }
  v13 = (void *)*((_QWORD *)notifier + 8);
  if (v13)
  {

    *((_QWORD *)notifier + 8) = 0;
  }
  v14 = (void *)*((_QWORD *)notifier + 7);
  if (v14)
  {
    objc_msgSend_stopActivityUpdates(v14, a2, a3, a4, a5);

    *((_QWORD *)notifier + 7) = 0;
  }
  v15 = *((_QWORD *)notifier + 9);
  if (v15)
  {
    dispatch_release(v15);
    *((_QWORD *)notifier + 9) = 0;
  }
  if (notifier[20])
  {
    IODeregisterForSystemPower(notifier + 20);
    notifier[20] = 0;
  }
  v16 = notifier[21];
  if (v16)
  {
    IOServiceClose(v16);
    notifier[21] = 0;
  }
  v17 = (IONotificationPort *)*((_QWORD *)notifier + 11);
  if (v17)
  {
    IONotificationPortDestroy(v17);
    *((_QWORD *)notifier + 11) = 0;
  }
}

void sub_18F3DEF74(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_18F3DEDA8(a1, a2, a3, a4, a5);
  JUMPOUT(0x194001438);
}

void sub_18F3DEF98(__int128 *a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD block[5];
  __int128 v4;

  v4 = *a1;
  v2 = *(NSObject **)(a2 + 72);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F3E0F64;
  block[3] = &unk_1E2956F80;
  block[4] = a2;
  dispatch_async(v2, block);
}

void sub_18F3DEFF4(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  _QWORD v5[5];
  int v6;

  v3 = *(_DWORD *)(a1 + 8);
  kdebug_trace();
  v4 = *(NSObject **)(a2 + 72);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_18F3E0A4C;
  v5[3] = &unk_1E2956F60;
  v5[4] = a2;
  v6 = v3;
  dispatch_async(v4, v5);
}

uint64_t sub_18F3DF074(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v5;
  int v6;

  v5 = *(int **)(a1 + 32);
  if (objc_msgSend_stationary(a2, (const char *)a2, a3, a4, a5))
    v6 = 2;
  else
    v6 = 1;
  v5[24] = v6;
  return sub_18F3DF638(v5);
}

void sub_18F3DF0AC(uint64_t a1, int a2, int a3, intptr_t notificationID)
{
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  _QWORD v26[6];
  uint8_t buf[8];
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a3 > -536870145)
  {
    if (a3 == -536870144)
    {
      if (qword_1EE16D6B8 != -1)
        dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
      v21 = qword_1EE16D6B0;
      if (os_log_type_enabled((os_log_t)qword_1EE16D6B0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v21, OS_LOG_TYPE_INFO, "received HasPoweredOn", buf, 2u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D6B8 != -1)
          dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
        LOWORD(v26[0]) = 0;
        v25 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CLPocketStateService::onSystemPowerChanged(io_service_t, uint32_t, void *)", "CoreLocation: %s\n", v25);
        if (v25 != (char *)buf)
          free(v25);
      }
    }
    else if (a3 == -536870112)
    {
      if (qword_1EE16D6B8 != -1)
        dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
      v7 = qword_1EE16D6B0;
      if (os_log_type_enabled((os_log_t)qword_1EE16D6B0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_INFO, "received WillPowerOn", buf, 2u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D6B8 != -1)
          dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
        LOWORD(v26[0]) = 0;
        v24 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CLPocketStateService::onSystemPowerChanged(io_service_t, uint32_t, void *)", "CoreLocation: %s\n", v24);
        if (v24 != (char *)buf)
          free(v24);
      }
      *(_BYTE *)(a1 + 120) = 1;
      objc_msgSend_stopActivityUpdates(*(void **)(a1 + 56), v8, v9, v10, v11);
      v12 = MEMORY[0x1E0C809B0];
      v13 = *(void **)(a1 + 56);
      v14 = *(_QWORD *)(a1 + 64);
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3221225472;
      v26[2] = sub_18F3E0E84;
      v26[3] = &unk_1E2956F40;
      v26[4] = a1;
      objc_msgSend_startActivityUpdatesToQueue_withHandler_(v13, v15, v14, (uint64_t)v26, v16);
      if ((sub_18F1F7BFC() & 0x40) != 0)
      {
        if (*(_BYTE *)(a1 + 120) && !*(_DWORD *)(a1 + 100))
        {
          v22 = sub_18F204AE4();
          *(_QWORD *)buf = v12;
          v28 = 3221225472;
          v29 = sub_18F3E0EBC;
          v30 = &unk_1E2955738;
          v31 = a1;
          sub_18F1F6514(v22, (uint64_t)buf);
        }
      }
      else
      {
        v17 = sub_18F47A70C();
        v18 = *(_QWORD *)(a1 + 40);
        v19 = sub_18F204AE4();
        *(_QWORD *)buf = v12;
        v28 = 3221225472;
        v29 = sub_18F1F5EE0;
        v30 = &unk_1E2956E98;
        v33 = 1;
        v31 = v17;
        v32 = v18;
        sub_18F1F5E28(v19, (uint64_t)buf);
        v20 = sub_18F47A70C();
        sub_18F1F4F0C(v20, 1, *(_QWORD *)(a1 + 40), -1.0);
      }
    }
  }
  else if (a3 == -536870288)
  {
    IOAllowPowerChange(*(_DWORD *)(a1 + 84), notificationID);
  }
  else if (a3 == -536870272)
  {
    if (qword_1EE16D6B8 != -1)
      dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
    v6 = qword_1EE16D6B0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6B0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_INFO, "received WillSleep", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6B8 != -1)
        dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
      LOWORD(v26[0]) = 0;
      v23 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLPocketStateService::onSystemPowerChanged(io_service_t, uint32_t, void *)", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
    }
    *(_BYTE *)(a1 + 120) = 0;
    IOAllowPowerChange(*(_DWORD *)(a1 + 84), notificationID);
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
  }
}

uint64_t sub_18F3DF638(int *a1)
{
  NSObject *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;
  int v12;
  char *v14;
  uint8_t buf[4];
  char *v16;
  __int16 v17;
  char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D6B8 != -1)
    dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
  v2 = qword_1EE16D6B0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D6B0, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1[24];
    if (v3 > 2)
      v4 = 0;
    else
      v4 = off_1E2956FC0[v3];
    v5 = a1[25];
    if (v5 > 2)
      v6 = 0;
    else
      v6 = off_1E2956FD8[v5];
    v7 = a1[26];
    if (v7 > 2)
      v8 = 0;
    else
      v8 = off_1E2957030[v7];
    *(_DWORD *)buf = 136315650;
    v16 = v4;
    v17 = 2080;
    v18 = v6;
    v19 = 2080;
    v20 = v8;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEBUG, "Device Stationary?, %s, Orientation, %s, Proximity, %s", buf, 0x20u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D6B8 != -1)
      dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
    v14 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLPocketStateService::determineState()", "CoreLocation: %s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
  }
  v9 = a1[25];
  if (a1[26] == 2)
  {
    if (v9 != 2 || a1[24] != 2)
    {
      v10 = "2 not (FaceDown and static)";
      v11 = (uint64_t)a1;
      v12 = 4;
      return sub_18F3DF958(v11, v12, v10);
    }
    v10 = "1 prox corroborated";
  }
  else
  {
    if (v9 != 2)
    {
      v10 = "5 not FaceDown, prox uncovered";
      v11 = (uint64_t)a1;
      v12 = 3;
      return sub_18F3DF958(v11, v12, v10);
    }
    if (a1[24] != 2)
    {
      v10 = "4 FaceDown only";
      v11 = (uint64_t)a1;
      v12 = 1;
      return sub_18F3DF958(v11, v12, v10);
    }
    v10 = "3 no prox";
  }
  v11 = (uint64_t)a1;
  v12 = 2;
  return sub_18F3DF958(v11, v12, v10);
}

uint64_t sub_18F3DF958(uint64_t result, int a2, char *a3)
{
  int *v3;
  int *v6;
  NSObject *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  NSObject *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint8_t buf[4];
  double v26;
  __int16 v27;
  char *v28;
  __int16 v29;
  char *v30;
  __int16 v31;
  char *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = (int *)(result + 32);
  if (*(_DWORD *)(result + 32) != a2)
  {
    v6 = (int *)result;
    if (qword_1EE16D6B8 != -1)
      dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
    v7 = qword_1EE16D6B0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6B0, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *v3;
      if (v8 > 4)
        v9 = 0;
      else
        v9 = off_1E2956FF0[v8];
      if ((a2 - 1) > 3)
        v10 = 0;
      else
        v10 = off_1E2956FA0[a2 - 1];
      *(_DWORD *)buf = 136315650;
      v26 = *(double *)&v9;
      v27 = 2080;
      v28 = v10;
      v29 = 2080;
      v30 = a3;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_DEFAULT, "Transition, From: %s, To: %s, %s", buf, 0x20u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6B8 != -1)
        dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
      v23 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLPocketStateService::transitionToState(CLPocketStateInternalType, const char *)", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
    }
    *v3 = a2;
    if (qword_1EE16D6B8 != -1)
      dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
    v11 = qword_1EE16D6B0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6B0, OS_LOG_TYPE_DEFAULT))
    {
      v12 = mach_absolute_time();
      v13 = sub_18F1FD20C(v12);
      v14 = v6[24];
      if (v14 > 2)
        v15 = 0;
      else
        v15 = off_1E2956FC0[v14];
      v16 = v6[25];
      if (v16 > 2)
        v17 = 0;
      else
        v17 = off_1E2956FD8[v16];
      v18 = v6[26];
      if (v18 > 2)
        v19 = 0;
      else
        v19 = off_1E2957030[v18];
      v20 = *v3;
      if (v20 > 4)
        v21 = 0;
      else
        v21 = off_1E2956FF0[v20];
      *(_DWORD *)buf = 134219010;
      v26 = v13;
      v27 = 2080;
      v28 = v15;
      v29 = 2080;
      v30 = v17;
      v31 = 2080;
      v32 = v19;
      v33 = 2080;
      v34 = v21;
      _os_log_impl(&dword_18F1DC000, v11, OS_LOG_TYPE_DEFAULT, "%f: Device Stationary?, %s, Orientation, %s, Proximity, %s, State, %s", buf, 0x34u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6B8 != -1)
        dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
      v22 = mach_absolute_time();
      sub_18F1FD20C(v22);
      v24 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLPocketStateService::transitionToState(CLPocketStateInternalType, const char *)", "CoreLocation: %s\n", v24);
      if (v24 != (char *)buf)
        free(v24);
    }
    return sub_18F1E5A28((uint64_t)v6, 0, (uint64_t)v3, 4);
  }
  return result;
}

void sub_18F3DFE7C(void *refcon, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  CMMotionActivityManager *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  io_connect_t v17;
  NSObject *v18;
  char *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v32[6];
  uint8_t buf[1640];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (!*((_QWORD *)refcon + 5))
    {
      v4 = (_QWORD *)operator new();
      *v4 = off_1E294C238;
      *v4 = &off_1E294C628;
      v4[1] = 0;
      v4[2] = sub_18F3DEF98;
      v4[3] = refcon;
      v5 = *((_QWORD *)refcon + 5);
      *((_QWORD *)refcon + 5) = v4;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v6 = sub_18F47A70C();
      sub_18F1F4F0C(v6, 1, *((_QWORD *)refcon + 5), -1.0);
    }
    if (!*((_QWORD *)refcon + 6))
    {
      sub_18F1F77DC();
      if (sub_18F375C08())
      {
        v7 = (_QWORD *)operator new();
        *v7 = off_1E294C238;
        *v7 = &off_1E294C580;
        v7[1] = 0;
        v7[2] = sub_18F3DEFF4;
        v7[3] = refcon;
        v8 = *((_QWORD *)refcon + 6);
        *((_QWORD *)refcon + 6) = v7;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        if (qword_1EE16E920 != -1)
          dispatch_once(&qword_1EE16E920, &unk_1E2953C48);
        sub_18F1F4F0C(qword_1EE16E918, 0, *((_QWORD *)refcon + 6), -1.0);
      }
    }
    if (!*((_QWORD *)refcon + 9))
      *((_QWORD *)refcon + 9) = dispatch_queue_create("com.apple.CoreMotion.CLPocketStateService", 0);
    if (!*((_QWORD *)refcon + 8))
    {
      v9 = (void *)objc_opt_new();
      *((_QWORD *)refcon + 8) = v9;
      objc_msgSend_setUnderlyingQueue_(v9, v10, *((_QWORD *)refcon + 9), v11, v12);
    }
    if (!*((_QWORD *)refcon + 7))
    {
      v13 = objc_alloc_init(CMMotionActivityManager);
      *((_QWORD *)refcon + 7) = v13;
      v14 = *((_QWORD *)refcon + 8);
      v32[0] = MEMORY[0x1E0C809B0];
      v32[1] = 3221225472;
      v32[2] = sub_18F3DF074;
      v32[3] = &unk_1E2956F40;
      v32[4] = refcon;
      objc_msgSend_startActivityUpdatesToQueue_withHandler_(v13, v15, v14, (uint64_t)v32, v16);
    }
    if (*((_QWORD *)refcon + 11))
      goto LABEL_22;
    v17 = IORegisterForSystemPower(refcon, (IONotificationPortRef *)refcon + 11, (IOServiceInterestCallback)sub_18F3DF0AC, (io_object_t *)refcon + 20);
    *((_DWORD *)refcon + 21) = v17;
    if (v17)
    {
      IONotificationPortSetDispatchQueue(*((IONotificationPortRef *)refcon + 11), *((dispatch_queue_t *)refcon + 9));
LABEL_22:
      if (qword_1EE16D6B8 != -1)
        dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
      v18 = qword_1EE16D6B0;
      if (os_log_type_enabled((os_log_t)qword_1EE16D6B0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_DEFAULT, "enabled detection successfully", buf, 2u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D6B8 != -1)
          dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
        v19 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CLPocketStateService::enableDetection()", "CoreLocation: %s\n", v19);
        if (v19 != (char *)buf)
          free(v19);
      }
      return;
    }
    if (qword_1EE16D6B8 != -1)
      dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
    v25 = qword_1EE16D6B0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6B0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v25, OS_LOG_TYPE_FAULT, "Could not subscribe to system power notifications", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6B8 != -1)
        dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
      v31 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CLPocketStateService::enableDetection()", "CoreLocation: %s\n", v31);
      if (v31 != (char *)buf)
        free(v31);
    }
    sub_18F3DEE0C((io_object_t *)refcon, v26, v27, v28, v29);
  }
  else
  {
    if (qword_1EE16D6B8 != -1)
      dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
    v20 = qword_1EE16D6B0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_DEFAULT, "disable Detection", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6B8 != -1)
        dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
      LOWORD(v32[0]) = 0;
      v30 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLPocketStateService::numberOfSpectatorsChanged(int, size_t)", "CoreLocation: %s\n", v30);
      if (v30 != (char *)buf)
        free(v30);
    }
    sub_18F3DEE0C((io_object_t *)refcon, v21, v22, v23, v24);
  }
}

void sub_18F3E0470(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3E04A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v5 = (void *)objc_msgSend_processInfo(MEMORY[0x1E0CB3898], a2, a3, a4, a5);
  v10 = objc_msgSend_processName(v5, v6, v7, v8, v9);
  v11 = objc_alloc(MEMORY[0x1E0CB3940]);
  result = objc_msgSend_initWithFormat_(v11, v12, (uint64_t)CFSTR("com.apple.CoreMotion.PocketState.%@"), v13, v14, v10);
  qword_1ECEDF8C8 = result;
  return result;
}

void sub_18F3E04F8(uint64_t a1, double a2)
{
  uint64_t v4;
  double v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  double v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFString *v18;
  void *v19;
  uint64_t v20;
  char *v21;
  uint8_t buf[4];
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  kdebug_trace();
  v4 = mach_absolute_time();
  v5 = sub_18F1FD20C(v4);
  v6 = BKSHIDServicesRequestEstimatedProximityEvents();
  kdebug_trace();
  v7 = mach_absolute_time();
  v8 = sub_18F1FD20C(v7);
  if (qword_1EE16D6B8 != -1)
    dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
  v9 = v8 - v5;
  v10 = qword_1EE16D6B0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D6B0, OS_LOG_TYPE_DEFAULT))
  {
    v11 = mach_absolute_time();
    v12 = sub_18F1FD20C(v11);
    if (v6 > 2)
      v13 = 0;
    else
      v13 = off_1E2957018[v6];
    *(_DWORD *)buf = 134219010;
    v23 = v12;
    v24 = 2048;
    v25 = a2;
    v26 = 2048;
    v27 = a2 + 2.0;
    v28 = 2048;
    v29 = v9;
    v30 = 2080;
    v31 = v13;
    _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_DEFAULT, "%f: monitorTime, %f, bksMonitorTime, %f, bksDelay, %f, proxStatus, %s", buf, 0x34u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D6B8 != -1)
      dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
    v20 = mach_absolute_time();
    sub_18F1FD20C(v20);
    v21 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLPocketStateService::queryInitiated(NSTimeInterval)", "CoreLocation: %s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
  }
  if (v6 == 2)
  {
    v18 = CFSTR("proxStatus.ignored");
  }
  else if (v6 == 1)
  {
    v18 = CFSTR("proxStatus.extended");
  }
  else
  {
    if (v6)
      return;
    v17 = mach_absolute_time();
    *(double *)(a1 + 112) = sub_18F1FD20C(v17);
    *(_DWORD *)(a1 + 104) = 0;
    v18 = CFSTR("proxStatus.started");
  }
  if (MEMORY[0x1E0CF6398])
  {
    v19 = (void *)MEMORY[0x1E0CB3940];
    if (qword_1ECEDF8D0 != -1)
      dispatch_once(&qword_1ECEDF8D0, &unk_1E2954E08);
    objc_msgSend_stringWithFormat_(v19, v14, (uint64_t)CFSTR("%@.%@"), v15, v16, qword_1ECEDF8C8, v18);
    ADClientAddValueForScalarKey();
  }
}

uint64_t sub_18F3E0868(int *a1, int a2)
{
  NSObject *v4;
  int v5;
  int v6;
  char *v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D6B8 != -1)
    dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
  v4 = qword_1EE16D6B0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D6B0, OS_LOG_TYPE_DEBUG))
  {
    v5 = a1[25];
    *(_DWORD *)buf = 67240448;
    v10 = a2;
    v11 = 1026;
    v12 = v5;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEBUG, "New orientation,%{public}d,Prev orientation,%{public}d", buf, 0xEu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D6B8 != -1)
      dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
    v8 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLPocketStateService::feedDeviceOrientationData(const CLOrientationNotifier::Sample *)", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
  }
  if (a2 == 6)
    v6 = 2;
  else
    v6 = 1;
  a1[25] = v6;
  return sub_18F3DF638(a1);
}

uint64_t sub_18F3E0A4C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v20;
  uint64_t v21;
  char *v22;
  uint8_t buf[4];
  _BYTE v24[18];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_DWORD *)(a1 + 40) & 0x100) != 0)
    v3 = 2;
  else
    v3 = 1;
  if (*(double *)(v2 + 112) != 0.0 && !*(_DWORD *)(v2 + 104) && (*(_DWORD *)(a1 + 40) & 0x100) != 0)
  {
    v5 = mach_absolute_time();
    v6 = sub_18F1FD20C(v5);
    v7 = *(double *)(v2 + 112);
    *(_QWORD *)(v2 + 112) = 0;
    if (qword_1EE16D6B8 != -1)
      dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
    v8 = v6 - v7;
    v9 = qword_1EE16D6B0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6B0, OS_LOG_TYPE_INFO))
    {
      v10 = mach_absolute_time();
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)v24 = sub_18F1FD20C(v10);
      *(_WORD *)&v24[8] = 2048;
      *(double *)&v24[10] = v8;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_INFO, "%f: ProxDelay,%f", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6B8 != -1)
        dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
      v21 = mach_absolute_time();
      sub_18F1FD20C(v21);
      v22 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLPocketStateService::feedProximityData(const uint32_t)_block_invoke", "CoreLocation: %s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
    v14 = (void *)MEMORY[0x1E0CB3940];
    if (qword_1ECEDF8D0 != -1)
      dispatch_once(&qword_1ECEDF8D0, &unk_1E2954E08);
    objc_msgSend_stringWithFormat_(v14, v11, (uint64_t)CFSTR("%@.%@"), v12, v13, qword_1ECEDF8C8, CFSTR("proxBootDelay"));
    ADClientPushValueForDistributionKey();
  }
  *(_DWORD *)(v2 + 104) = v3;
  if (qword_1EE16D6B8 != -1)
    dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
  v15 = qword_1EE16D6B0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D6B0, OS_LOG_TYPE_INFO))
  {
    v16 = *(_DWORD *)(a1 + 40);
    v17 = *(int *)(v2 + 104);
    if (v17 > 2)
      v18 = 0;
    else
      v18 = off_1E2957030[v17];
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v24 = v16;
    *(_WORD *)&v24[4] = 2080;
    *(_QWORD *)&v24[6] = v18;
    _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_INFO, "Proximity detection mask: %u, Last prox state: %s", buf, 0x12u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D6B8 != -1)
      dispatch_once(&qword_1EE16D6B8, &unk_1E2955108);
    v20 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLPocketStateService::feedProximityData(const uint32_t)_block_invoke", "CoreLocation: %s\n", v20);
    if (v20 != (char *)buf)
      free(v20);
  }
  return sub_18F3DF638((int *)v2);
}

uint64_t sub_18F3E0E84(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v5;
  int v6;

  v5 = *(int **)(a1 + 32);
  if (objc_msgSend_stationary(a2, (const char *)a2, a3, a4, a5))
    v6 = 2;
  else
    v6 = 1;
  v5[24] = v6;
  return sub_18F3DF638(v5);
}

void sub_18F3E0EBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[7];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 120))
  {
    if (!*(_DWORD *)(v1 + 100))
    {
      v2 = sub_18F47A70C();
      v3 = sub_18F47F5E4(v2, 0);
      v4 = *(NSObject **)(v1 + 72);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_18F3E0F40;
      block[3] = &unk_1E2956F80;
      block[4] = v1;
      block[5] = v3;
      block[6] = v5;
      dispatch_async(v4, block);
    }
  }
}

uint64_t sub_18F3E0F40(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(result + 120))
  {
    if (!*(_DWORD *)(result + 100))
      return sub_18F3E0868((int *)result, *(_DWORD *)(a1 + 48));
  }
  return result;
}

uint64_t sub_18F3E0F64(uint64_t a1)
{
  return sub_18F3E0868(*(int **)(a1 + 32), *(_DWORD *)(a1 + 48));
}

os_log_t sub_18F3E0F74()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Pocket");
  qword_1EE16D6B0 = (uint64_t)result;
  return result;
}

void sub_18F3E0FA4(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3E0FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_18F3E0FD8(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3E0FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_18F3E1124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  MEMORY[0x194001438](v19, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_18F3E1160(uint64_t a1, CLConnectionMessage **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  NSObject *v25;
  char *v26;
  uint8_t buf[4];
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v3, v6, v4, v7, v8, v5, 0);
  if (*a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9)) != 0
    && (v14 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, (uint64_t)CFSTR("CMErrorMessage"), v12, v13)) != 0&& (v19 = v14, objc_msgSend_intValue(v14, v15, v16, v17, v18) != 100))
  {
    v24 = objc_msgSend_intValue(v19, v20, v21, v22, v23);
  }
  else
  {
    v24 = 103;
  }
  if (qword_1EE16D3F8 != -1)
    dispatch_once(&qword_1EE16D3F8, &unk_1E29450C8);
  v25 = qword_1EE16D3F0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D3F0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v28 = v24;
    _os_log_impl(&dword_18F1DC000, v25, OS_LOG_TYPE_ERROR, "Failed with CMError code %{public}d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D3F8 != -1)
      dispatch_once(&qword_1EE16D3F8, &unk_1E29450C8);
    v26 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMMotionAlarmManagerInternal init]_block_invoke", "CoreLocation: %s\n", v26);
    if (v26 != (char *)buf)
      free(v26);
  }
}

void sub_18F3E1388(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ExecutablePathFromPid;
  uint64_t v7;
  NSObject *v8;
  pid_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  pid_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = getpid();
  ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2, v4, v5);
  if (ExecutablePathFromPid)
  {
    v7 = ExecutablePathFromPid;
    if (qword_1EE16D3F8 != -1)
      dispatch_once(&qword_1EE16D3F8, &unk_1E29450C8);
    v8 = qword_1EE16D3F0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D3F0, OS_LOG_TYPE_INFO))
    {
      v9 = getpid();
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(unsigned __int8 *)(v10 + 32);
      *(_DWORD *)buf = 138413058;
      v14 = v7;
      v15 = 1024;
      v16 = v9;
      v17 = 1024;
      v18 = v11;
      v19 = 2048;
      v20 = v10;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_INFO, "CMMotionAlarmManager client connection interrupt, %@, %d, %d, %p", buf, 0x22u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D3F8 != -1)
        dispatch_once(&qword_1EE16D3F8, &unk_1E29450C8);
      getpid();
      v12 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMMotionAlarmManagerInternal init]_block_invoke", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
}

id sub_18F3E1620(uint64_t a1)
{
  id result;

  result = objc_alloc_init(*(Class *)(a1 + 32));
  qword_1ECEDF8E0 = (uint64_t)result;
  return result;
}

void sub_18F3E18AC(uint64_t a1)
{
  const char *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD v11[6];
  void *__p;
  std::__shared_weak_count *v13;
  char v14;
  const __CFString *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 32))
  {
    sub_18F270374(&__p, "kCLConnectionMessageMotionAlarmFire");
    v11[1] = MEMORY[0x1E0C809B0];
    v11[2] = 3221225472;
    v11[3] = sub_18F3E1AAC;
    v11[4] = &unk_1E2955DD8;
    v11[5] = *(_QWORD *)(a1 + 32);
    CLConnectionClient::setHandlerForMessage();
    if (v14 < 0)
      operator delete(__p);
    v15 = CFSTR("kCLConnectionMessageSubscribeKey");
    v16[0] = MEMORY[0x1E0C9AAB0];
    v11[0] = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v2, (uint64_t)v16, (uint64_t)&v15, 1);
    sub_18F39BF9C("kCLConnectionMessageMotionAlarmFire", v11, &__p);
    v10 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v10)
    {
      v5 = (unint64_t *)&v10->__shared_owners_;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = 1;
    v7 = v13;
    if (v13)
    {
      v8 = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_18F3E1A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_18F2A8438((uint64_t)&a10);
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3E1AAC(uint64_t a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  NSSet *v11;
  uint64_t v12;
  uint64_t DictionaryOfClasses;
  uint64_t v14;
  uint64_t v15;

  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v11 = (NSSet *)objc_msgSend_setWithObjects_(v4, v8, v5, v9, v10, v6, v7, 0);
  v12 = *(_QWORD *)(a1 + 32);
  DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v11);
  return MEMORY[0x1E0DE7D20](v12, sel__handleAlarmFire_, DictionaryOfClasses, v14, v15);
}

void sub_18F3E1B9C(uint64_t a1, const char *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  char *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  const __CFString *v14;
  uint64_t v15;
  uint8_t buf[8];
  std::__shared_weak_count *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 32))
  {
    v14 = CFSTR("kCLConnectionMessageSubscribeKey");
    v15 = MEMORY[0x1E0C9AAA0];
    v13 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)&v15, (uint64_t)&v14, 1);
    sub_18F39BF9C("kCLConnectionMessageMotionAlarmFire", &v13, buf);
    v12 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v12)
    {
      v5 = (unint64_t *)&v12->__shared_owners_;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = 0;
    v7 = v17;
    if (v17)
    {
      v8 = (unint64_t *)&v17->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    if (qword_1EE16D3F8 != -1)
      dispatch_once(&qword_1EE16D3F8, &unk_1E29450C8);
    v10 = qword_1EE16D3F0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D3F0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_INFO, "Unable to stop MotionAlarm data updates as we are are not receiving updates.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D3F8 != -1)
        dispatch_once(&qword_1EE16D3F8, &unk_1E29450C8);
      LOWORD(v13) = 0;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMMotionAlarmManagerInternal _stopListeners]_block_invoke", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
}

void sub_18F3E1E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F3E2350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;

  objc_sync_exit(v27);
  _Unwind_Resume(a1);
}

void sub_18F3E2388(uint64_t a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  NSSet *v11;
  void *DictionaryOfClasses;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  NSObject *v30;
  char *v31;
  _QWORD block[5];
  __int16 v33;
  _QWORD v34[5];
  _QWORD v35[6];
  _QWORD v36[5];
  uint8_t buf[1640];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v11 = (NSSet *)objc_msgSend_setWithObjects_(v4, v8, v5, v9, v10, v6, v7, 0);
  if (*a2 && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v11)) != 0)
  {
    v16 = DictionaryOfClasses;
    v17 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v13, (uint64_t)CFSTR("CMErrorMessage"), v14, v15);
    v21 = objc_msgSend_objectForKeyedSubscript_(v16, v18, (uint64_t)CFSTR("CMMotionAlarmKey"), v19, v20);
    if (objc_msgSend_intValue(v17, v22, v23, v24, v25) == 100)
    {
      if (v21)
      {
        objc_msgSend_copyPropertiesFromAlarm_(*(void **)(a1 + 32), v26, v21, v27, v28);
        v34[0] = MEMORY[0x1E0C809B0];
        v34[1] = 3221225472;
        v34[2] = sub_18F3E28B0;
        v34[3] = &unk_1E2955938;
        v34[4] = *(_QWORD *)(a1 + 32);
        v29 = v34;
      }
      else
      {
        if (qword_1EE16D3F8 != -1)
          dispatch_once(&qword_1EE16D3F8, &unk_1E29450C8);
        v30 = qword_1EE16D3F0;
        if (os_log_type_enabled((os_log_t)qword_1EE16D3F0, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v30, OS_LOG_TYPE_ERROR, "Unable to parse kCLConnectionMessageMotionAlarmRegister message.", buf, 2u);
        }
        if (sub_18F1FCA08(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D3F8 != -1)
            dispatch_once(&qword_1EE16D3F8, &unk_1E29450C8);
          v33 = 0;
          v31 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "-[CMMotionAlarmManagerInternal _registerAlarm:error:]_block_invoke", "CoreLocation: %s\n", v31);
          if (v31 != (char *)buf)
            free(v31);
        }
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = sub_18F3E2908;
        block[3] = &unk_1E2955938;
        block[4] = *(_QWORD *)(a1 + 32);
        v29 = block;
      }
    }
    else
    {
      v35[0] = MEMORY[0x1E0C809B0];
      v35[1] = 3221225472;
      v35[2] = sub_18F3E27B0;
      v35[3] = &unk_1E29559D0;
      v35[4] = *(_QWORD *)(a1 + 32);
      v35[5] = v17;
      v29 = v35;
    }
  }
  else
  {
    v36[0] = MEMORY[0x1E0C809B0];
    v36[1] = 3221225472;
    v36[2] = sub_18F3E26C0;
    v36[3] = &unk_1E2955938;
    v36[4] = *(_QWORD *)(a1 + 32);
    v29 = v36;
  }
  dispatch_async(MEMORY[0x1E0C80D38], v29);
}

uint64_t sub_18F3E26C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), a2, a3, a4, a5);
  objc_msgSend_delegate(v6, v7, v8, v9, v10);
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    v16 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), v12, v13, v14, v15);
    v21 = (void *)objc_msgSend_delegate(v16, v17, v18, v19, v20);
    v22 = *(_QWORD *)(a1 + 32);
    v23 = (void *)MEMORY[0x1E0CB35C8];
    v30 = *MEMORY[0x1E0CB2D50];
    v31[0] = CFSTR("Alarm registration response missing");
    v25 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v24, (uint64_t)v31, (uint64_t)&v30, 1);
    v27 = objc_msgSend_errorWithDomain_code_userInfo_(v23, v26, (uint64_t)CFSTR("CMErrorDomain"), 103, v25);
    return objc_msgSend_alarmDidRegister_error_(v21, v28, v22, v27, v29);
  }
  return result;
}

uint64_t sub_18F3E27B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];

  v36[1] = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), a2, a3, a4, a5);
  objc_msgSend_delegate(v6, v7, v8, v9, v10);
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    v16 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), v12, v13, v14, v15);
    v21 = (void *)objc_msgSend_delegate(v16, v17, v18, v19, v20);
    v22 = (void *)MEMORY[0x1E0CB35C8];
    v23 = *(_QWORD *)(a1 + 32);
    v28 = (int)objc_msgSend_intValue(*(void **)(a1 + 40), v24, v25, v26, v27);
    v35 = *MEMORY[0x1E0CB2D50];
    v36[0] = CFSTR("Alarm registration returned an error");
    v30 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v29, (uint64_t)v36, (uint64_t)&v35, 1);
    v32 = objc_msgSend_errorWithDomain_code_userInfo_(v22, v31, (uint64_t)CFSTR("CMErrorDomain"), v28, v30);
    return objc_msgSend_alarmDidRegister_error_(v21, v33, v23, v32, v34);
  }
  return result;
}

uint64_t sub_18F3E28B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;

  v6 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), a2, a3, a4, a5);
  objc_msgSend_delegate(v6, v7, v8, v9, v10);
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    v16 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), v12, v13, v14, v15);
    v21 = (void *)objc_msgSend_delegate(v16, v17, v18, v19, v20);
    return objc_msgSend_alarmDidRegister_error_(v21, v22, *(_QWORD *)(a1 + 32), 0, v23);
  }
  return result;
}

uint64_t sub_18F3E2908(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), a2, a3, a4, a5);
  objc_msgSend_delegate(v6, v7, v8, v9, v10);
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    v16 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), v12, v13, v14, v15);
    v21 = (void *)objc_msgSend_delegate(v16, v17, v18, v19, v20);
    v22 = *(_QWORD *)(a1 + 32);
    v23 = (void *)MEMORY[0x1E0CB35C8];
    v30 = *MEMORY[0x1E0CB2D50];
    v31[0] = CFSTR("Unable to parse alarm registration response");
    v25 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v24, (uint64_t)v31, (uint64_t)&v30, 1);
    v27 = objc_msgSend_errorWithDomain_code_userInfo_(v23, v26, (uint64_t)CFSTR("CMErrorDomain"), 103, v25);
    return objc_msgSend_alarmDidRegister_error_(v21, v28, v22, v27, v29);
  }
  return result;
}

void sub_18F3E2EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,id location,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  objc_sync_exit(v28);
  _Unwind_Resume(a1);
}

void sub_18F3E2F64(uint64_t a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  NSSet *v11;
  void *DictionaryOfClasses;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *Weak;
  _QWORD *v27;
  id v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  _QWORD *v42;
  NSObject *v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  _QWORD v49[5];
  _QWORD block[5];
  _QWORD v51[6];
  _QWORD v52[5];
  int v53;
  uint64_t v54;
  uint8_t buf[4];
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v11 = (NSSet *)objc_msgSend_setWithObjects_(v4, v8, v5, v9, v10, v6, v7, 0);
  if (!*a2 || (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v11)) == 0)
  {
    v52[0] = MEMORY[0x1E0C809B0];
    v52[1] = 3221225472;
    v52[2] = sub_18F3E3464;
    v52[3] = &unk_1E2955938;
    v52[4] = *(_QWORD *)(a1 + 32);
    v41 = MEMORY[0x1E0C80D38];
    v42 = v52;
LABEL_15:
    dispatch_async(v41, v42);
    return;
  }
  v16 = DictionaryOfClasses;
  v17 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v13, (uint64_t)CFSTR("CMErrorMessage"), v14, v15);
  v21 = objc_msgSend_objectForKeyedSubscript_(v16, v18, (uint64_t)CFSTR("CMMotionAlarmKey"), v19, v20);
  if (objc_msgSend_intValue(v17, v22, v23, v24, v25) != 100)
  {
    v51[0] = MEMORY[0x1E0C809B0];
    v51[1] = 3221225472;
    v51[2] = sub_18F3E34E4;
    v51[3] = &unk_1E29559D0;
    v51[4] = *(_QWORD *)(a1 + 32);
    v51[5] = v17;
    v41 = MEMORY[0x1E0C80D38];
    v42 = v51;
    goto LABEL_15;
  }
  if (!v21)
  {
    if (qword_1EE16D3F8 != -1)
      dispatch_once(&qword_1EE16D3F8, &unk_1E29450C8);
    v43 = qword_1EE16D3F0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D3F0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v43, OS_LOG_TYPE_ERROR, "Unable to parse kCLConnectionMessageMotionAlarmUnregister message.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D3F8 != -1)
        dispatch_once(&qword_1EE16D3F8, &unk_1E29450C8);
      LOWORD(v53) = 0;
      v48 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMMotionAlarmManagerInternal _unregisterAlarm:error:]_block_invoke", "CoreLocation: %s\n", v48);
      if (v48 != (char *)buf)
        free(v48);
    }
    v49[0] = MEMORY[0x1E0C809B0];
    v49[1] = 3221225472;
    v49[2] = sub_18F3E35D4;
    v49[3] = &unk_1E2955938;
    v49[4] = *(_QWORD *)(a1 + 32);
    v41 = MEMORY[0x1E0C80D38];
    v42 = v49;
    goto LABEL_15;
  }
  Weak = objc_loadWeak((id *)(a1 + 40));
  if (Weak)
  {
    v27 = Weak;
    objc_sync_enter(Weak);
    v28 = *(id *)(a1 + 32);
    objc_msgSend_copyPropertiesFromAlarm_(*(void **)(a1 + 32), v29, v21, v30, v31);
    v32 = (void *)v27[3];
    v37 = objc_msgSend_name(*(void **)(a1 + 32), v33, v34, v35, v36);
    objc_msgSend_removeObjectForKey_(v32, v38, v37, v39, v40);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_18F3E3580;
    block[3] = &unk_1E2955938;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async(MEMORY[0x1E0C80D38], block);
    objc_sync_exit(v27);
  }
  else
  {
    if (qword_1EE16D3F8 != -1)
      dispatch_once(&qword_1EE16D3F8, &unk_1E29450C8);
    v44 = qword_1EE16D3F0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D3F0, OS_LOG_TYPE_DEFAULT))
    {
      v45 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      v56 = v45;
      _os_log_impl(&dword_18F1DC000, v44, OS_LOG_TYPE_DEFAULT, "Alarm manager no longer exists, cannot unregister alarm: %{public}@", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D3F8 != -1)
        dispatch_once(&qword_1EE16D3F8, &unk_1E29450C8);
      v46 = *(_QWORD *)(a1 + 32);
      v53 = 138543362;
      v54 = v46;
      v47 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMMotionAlarmManagerInternal _unregisterAlarm:error:]_block_invoke", "CoreLocation: %s\n", v47);
      if (v47 != (char *)buf)
        free(v47);
    }
  }
}

void sub_18F3E3448(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F3E3464(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;

  v6 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), a2, a3, a4, a5);
  objc_msgSend_delegate(v6, v7, v8, v9, v10);
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    v16 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), v12, v13, v14, v15);
    v21 = (void *)objc_msgSend_delegate(v16, v17, v18, v19, v20);
    v23 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v22, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
    return objc_msgSend_alarmDidUnregister_error_(v21, v24, 0, v23, v25);
  }
  return result;
}

uint64_t sub_18F3E34E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;

  v6 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), a2, a3, a4, a5);
  objc_msgSend_delegate(v6, v7, v8, v9, v10);
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    v16 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), v12, v13, v14, v15);
    v21 = (void *)objc_msgSend_delegate(v16, v17, v18, v19, v20);
    v22 = (void *)MEMORY[0x1E0CB35C8];
    v27 = objc_msgSend_intValue(*(void **)(a1 + 40), v23, v24, v25, v26);
    v29 = objc_msgSend_errorWithDomain_code_userInfo_(v22, v28, (uint64_t)CFSTR("CMErrorDomain"), v27, 0);
    return objc_msgSend_alarmDidUnregister_error_(v21, v30, 0, v29, v31);
  }
  return result;
}

void sub_18F3E3580(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;

  v6 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), a2, a3, a4, a5);
  objc_msgSend_delegate(v6, v7, v8, v9, v10);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v15 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), v11, v12, v13, v14);
    v20 = (void *)objc_msgSend_delegate(v15, v16, v17, v18, v19);
    objc_msgSend_alarmDidUnregister_error_(v20, v21, *(_QWORD *)(a1 + 32), 0, v22);
  }

}

uint64_t sub_18F3E35D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;

  v6 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), a2, a3, a4, a5);
  objc_msgSend_delegate(v6, v7, v8, v9, v10);
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    v16 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), v12, v13, v14, v15);
    v21 = (void *)objc_msgSend_delegate(v16, v17, v18, v19, v20);
    v23 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v22, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
    return objc_msgSend_alarmDidUnregister_error_(v21, v24, 0, v23, v25);
  }
  return result;
}

void sub_18F3E3990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, id location, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;

  objc_sync_exit(v23);
  _Unwind_Resume(a1);
}

void sub_18F3E39E0(uint64_t a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  NSSet *v11;
  void *DictionaryOfClasses;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *Weak;
  _QWORD *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  NSObject *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  NSObject *v71;
  NSObject *v72;
  uint8_t buf[4];
  void *v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v11 = (NSSet *)objc_msgSend_setWithObjects_(v4, v8, v5, v9, v10, v6, v7, 0);
  if (!*a2 || (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v11)) == 0)
  {
    if (qword_1EE16D3F8 != -1)
      dispatch_once(&qword_1EE16D3F8, &unk_1E29450C8);
    v60 = qword_1EE16D3F0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D3F0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v60, OS_LOG_TYPE_ERROR, "Unable to parse kCLConnectionMessageMotionAlarmAcknowledge message.", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D3F8 == -1)
      goto LABEL_39;
    goto LABEL_42;
  }
  v16 = DictionaryOfClasses;
  v17 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v13, (uint64_t)CFSTR("CMErrorMessage"), v14, v15);
  v21 = (void *)objc_msgSend_objectForKeyedSubscript_(v16, v18, (uint64_t)CFSTR("CMMotionAlarmKey"), v19, v20);
  if (objc_msgSend_intValue(v17, v22, v23, v24, v25) != 100)
  {
    if (qword_1EE16D3F8 != -1)
      dispatch_once(&qword_1EE16D3F8, &unk_1E29450C8);
    v61 = qword_1EE16D3F0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D3F0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v74) = objc_msgSend_intValue(v17, v62, v63, v64, v65);
      _os_log_impl(&dword_18F1DC000, v61, OS_LOG_TYPE_ERROR, "Unable to call kCLConnectionMessageMotionAlarmAcknowledge message. Code: %d", buf, 8u);
    }
    if (!sub_18F1FCA08(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D3F8 != -1)
      dispatch_once(&qword_1EE16D3F8, &unk_1E29450C8);
    objc_msgSend_intValue(v17, v66, v67, v68, v69);
    v70 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMMotionAlarmManagerInternal _acknowledgeAlarm:error:]_block_invoke", "CoreLocation: %s\n", v70);
LABEL_40:
    if (v70 != (char *)buf)
      free(v70);
    return;
  }
  if (!v21)
  {
    if (qword_1EE16D3F8 != -1)
      dispatch_once(&qword_1EE16D3F8, &unk_1E29450C8);
    v71 = qword_1EE16D3F0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D3F0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v71, OS_LOG_TYPE_ERROR, "Unable to parse kCLConnectionMessageMotionAlarmAcknowledge message.", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D3F8 == -1)
      goto LABEL_39;
    goto LABEL_42;
  }
  Weak = objc_loadWeak((id *)(a1 + 32));
  if (Weak)
  {
    v27 = Weak;
    objc_sync_enter(Weak);
    v28 = (void *)v27[3];
    v33 = objc_msgSend_name(v21, v29, v30, v31, v32);
    v37 = (void *)objc_msgSend_objectForKey_(v28, v34, v33, v35, v36);
    if ((objc_msgSend_repeats(v37, v38, v39, v40, v41) & 1) == 0)
    {
      v46 = objc_msgSend_alarmId(v21, v42, v43, v44, v45);
      if (v46 == objc_msgSend_alarmId(v37, v47, v48, v49, v50))
      {
        v55 = (void *)v27[3];
        v56 = objc_msgSend_name(v37, v51, v52, v53, v54);
        objc_msgSend_removeObjectForKey_(v55, v57, v56, v58, v59);
      }
    }
    objc_sync_exit(v27);
    return;
  }
  if (qword_1EE16D3F8 != -1)
    dispatch_once(&qword_1EE16D3F8, &unk_1E29450C8);
  v72 = qword_1EE16D3F0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D3F0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v74 = v21;
    _os_log_impl(&dword_18F1DC000, v72, OS_LOG_TYPE_ERROR, "Alarm manager no longer exists, cannot acknowledge alarm: %{public}@", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D3F8 == -1)
    {
LABEL_39:
      v70 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMMotionAlarmManagerInternal _acknowledgeAlarm:error:]_block_invoke", "CoreLocation: %s\n", v70);
      goto LABEL_40;
    }
LABEL_42:
    dispatch_once(&qword_1EE16D3F8, &unk_1E29450C8);
    goto LABEL_39;
  }
}

void sub_18F3E4058(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F3E41E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  sub_18F2A8438((uint64_t)&a14);
  sub_18F2A8438((uint64_t)&a16);
  objc_sync_exit(v23);
  _Unwind_Resume(a1);
}

void sub_18F3E4238(uint64_t a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  NSSet *v10;
  void *DictionaryOfClasses;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v21[5];
  _QWORD block[6];
  _QWORD v23[5];

  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v10 = (NSSet *)objc_msgSend_setWithObjects_(v4, v7, v5, v8, v9, v6, 0);
  if (*a2 && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v10)) != 0)
  {
    v15 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v12, (uint64_t)CFSTR("CMErrorMessage"), v13, v14);
    if (objc_msgSend_intValue(v15, v16, v17, v18, v19) == 100)
    {
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = sub_18F3E4428;
      v21[3] = &unk_1E2955938;
      v21[4] = *(_QWORD *)(a1 + 32);
      v20 = v21;
    }
    else
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_18F3E43CC;
      block[3] = &unk_1E29559D0;
      block[4] = *(_QWORD *)(a1 + 32);
      block[5] = v15;
      v20 = block;
    }
  }
  else
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = sub_18F3E4384;
    v23[3] = &unk_1E2955938;
    v23[4] = *(_QWORD *)(a1 + 32);
    v20 = v23;
  }
  dispatch_async(MEMORY[0x1E0C80D38], v20);
}

uint64_t sub_18F3E4384(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return MEMORY[0x1E0DE7D20](v2, sel_remoteAppLaunchedWithResult_error_, 1, v3, v4);
}

uint64_t sub_18F3E43CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = (void *)MEMORY[0x1E0CB35C8];
  v6 = *(_QWORD *)(a1 + 32);
  v7 = objc_msgSend_intValue(*(void **)(a1 + 40), a2, a3, a4, a5);
  v9 = objc_msgSend_errorWithDomain_code_userInfo_(v5, v8, (uint64_t)CFSTR("CMErrorDomain"), v7, 0);
  return MEMORY[0x1E0DE7D20](v6, sel_remoteAppLaunchedWithResult_error_, 1, v9, v10);
}

uint64_t sub_18F3E4428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_remoteAppLaunchedWithResult_error_, 0, 0, a5);
}

void sub_18F3E4830(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3E485C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;

  v6 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), a2, a3, a4, a5);
  objc_msgSend_delegate(v6, v7, v8, v9, v10);
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    v16 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), v12, v13, v14, v15);
    v21 = objc_msgSend_delegate(v16, v17, v18, v19, v20);
    v22 = (void *)MEMORY[0x1E0CB35C8];
    v23 = *(_QWORD *)(a1 + 32);
    v28 = objc_msgSend_intValue(*(void **)(a1 + 40), v24, v25, v26, v27);
    v30 = objc_msgSend_errorWithDomain_code_userInfo_(v22, v29, (uint64_t)CFSTR("CMErrorDomain"), v28, 0);
    return MEMORY[0x1E0DE7D20](v21, sel_alarmDidFire_error_, v23, v30, v31);
  }
  return result;
}

uint64_t sub_18F3E4904(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), a2, a3, a4, a5);
  objc_msgSend_delegate(v6, v7, v8, v9, v10);
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
    v16 = (void *)objc_msgSend_manager(*(void **)(a1 + 32), v12, v13, v14, v15);
    v21 = objc_msgSend_delegate(v16, v17, v18, v19, v20);
    return MEMORY[0x1E0DE7D20](v21, sel_alarmDidFire_error_, *(_QWORD *)(a1 + 32), 0, v22);
  }
  return result;
}

id sub_18F3E4A7C(uint64_t a1)
{
  id result;

  result = objc_alloc_init(*(Class *)(a1 + 32));
  qword_1ECEDF8F0 = (uint64_t)result;
  return result;
}

os_log_t sub_18F3E4CC0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "MotionAlarm");
  qword_1EE16D3F0 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F3E4CEC@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F3E4D4C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F3E4D38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F3E4D4C(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F3E4DAC((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F3E4D98(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F3E4DAC(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F3E4E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F3E4E1C(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>, float32x4_t a5@<Q0>)
{
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  float v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  uint8_t buf[4];
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 728) == 2)
  {
    v9 = sub_18F496178();
  }
  else
  {
    if (!*(_QWORD *)(a1 + 6664))
    {
      v13 = operator new();
      sub_18F43F2A0(v13, a1);
      v14 = *(_QWORD *)(a1 + 6664);
      *(_QWORD *)(a1 + 6664) = v13;
      if (v14)
        sub_18F346A80(a1 + 6664, v14);
    }
    sub_18F3D5A90(a1, (uint64_t)a2, a5);
    sub_18F43F580(*(_QWORD *)(a1 + 6664), (uint64_t)a2, (uint64_t)a3, *(_DWORD *)(a1 + 728) != 0);
  }
  *(_BYTE *)a4 = 0;
  *(int64x2_t *)(a4 + 8) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_QWORD *)(a4 + 40) = 0;
  *(_QWORD *)(a4 + 64) = 0x3F80000000000000;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 24) = v10;
  *(_QWORD *)(a4 + 32) = v11;
  v15 = v9;
  *(float *)(a4 + 44) = v15;
  *(_QWORD *)(a4 + 48) = v12;
  v16 = v9 * 0.0174532924;
  v27 = 0;
  v28 = v16;
  sub_18F3D3AA8((float32x4_t *)(a4 + 56), (float *)&v27);
  v17 = a3[1];
  v18 = ++dword_1EE16E730;
  *(_QWORD *)(a4 + 8) = *a3;
  *(_QWORD *)(a4 + 16) = v17;
  *(_BYTE *)a4 = 1;
  *(_DWORD *)(a4 + 40) = v18;
  if (qword_1EE16D8D8 != -1)
    dispatch_once(&qword_1EE16D8D8, &unk_1E2953528);
  v19 = qword_1EE16D8E0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D8E0, OS_LOG_TYPE_DEBUG))
  {
    v20 = *a2;
    v21 = *a3;
    v22 = a3[1];
    *(_DWORD *)buf = 134218752;
    v38 = v20;
    v39 = 2048;
    v40 = v21;
    v41 = 2048;
    v42 = v22;
    v43 = 1024;
    v44 = dword_1EE16E730;
    _os_log_impl(&dword_18F1DC000, v19, OS_LOG_TYPE_DEBUG, "[CMPdr] StepImpulse,time,%f,%f,%f, totalSteps,%d\n", buf, 0x26u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D8D8 != -1)
      dispatch_once(&qword_1EE16D8D8, &unk_1E2953528);
    v23 = *a2;
    v24 = *a3;
    v25 = a3[1];
    v29 = 134218752;
    v30 = v23;
    v31 = 2048;
    v32 = v24;
    v33 = 2048;
    v34 = v25;
    v35 = 1024;
    v36 = dword_1EE16E730;
    v26 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CMPdr::PdrResults CMPdr::feedImuData(const AccessoryActivity::ImuData *const, const CMAccessoryStepDetector::Impulse &)", "CoreLocation: %s\n", v26);
    if (v26 != (char *)buf)
      free(v26);
  }
}

void sub_18F3E5140(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x1060C406F52CB89);
  _Unwind_Resume(a1);
}

os_log_t sub_18F3E516C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "MotionContext");
  qword_1EE16D8E0 = (uint64_t)result;
  return result;
}

double sub_18F3E5198()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  sub_18F1E61EC(v0, (uint64_t)"CLAccessoryPPG", 1);
  *(_WORD *)(v0 + 28) = 256;
  *(_BYTE *)(v0 + 30) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 56) = 0x670000FF00;
  result = 0.0;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)v0 = &off_1E2944198;
  qword_1EE16E970 = v0;
  return result;
}

void sub_18F3E521C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x10F1C40E59F67ADLL);
  _Unwind_Resume(a1);
}

void sub_18F3E5244(_QWORD *a1)
{
  sub_18F4A2ABC(a1);
  JUMPOUT(0x194001438);
}

double sub_18F3E5268(uint64_t a1, int a2, _QWORD *a3)
{
  NSObject *v4;
  double v5;
  char *v6;
  NSObject *v8;
  uint64_t v9;
  char *v11;
  uint8_t buf[4];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E29553A8);
    v4 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v13) = a2;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "[AccessoryPPG] Unrecognized update interval notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E29553A8);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryPPG::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  else
  {
    sub_18F4A461C(a1);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E29553A8);
    v8 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_INFO))
    {
      v9 = *a3;
      *(_DWORD *)buf = 134349056;
      v13 = v9;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_INFO, "[AccessoryPPG] Setting update interval to %{public}f", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E29553A8);
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryPPG::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
    return *(double *)a3;
  }
  return v5;
}

void sub_18F3E5580(uint64_t a1)
{
  unsigned __int8 *DataValue;
  uint64_t IntegerValue;
  int v4;
  unint64_t TimeStamp;
  double v6;
  unsigned __int8 *v7;
  int v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  char *v15;
  char *v16;
  _QWORD v17[2];
  char v18;
  unsigned __int8 v19;
  __int16 v20;
  unsigned __int8 v21;
  __int16 v22;
  char v23;
  __int16 v24;
  unsigned __int8 v25;
  __int16 v26;
  unsigned __int8 v27;
  __int16 v28;
  char v29;
  __int16 v30;
  char v31;
  __int16 v32;
  __int16 v33;
  int v34;
  int v35;
  __int16 v36;
  unsigned __int8 *v37;
  __int16 v38;
  double v39;
  __int16 v40;
  int v41;
  __int16 v42;
  unsigned __int8 *v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  unsigned __int8 *v47;
  __int16 v48;
  double v49;
  __int16 v50;
  int v51;
  __int16 v52;
  unsigned __int8 *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  DataValue = (unsigned __int8 *)IOHIDEventGetDataValue();
  IntegerValue = IOHIDEventGetIntegerValue();
  if (!DataValue)
  {
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E29553A8);
    v13 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_ERROR, "[AccessoryPPG] Invalid payload", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E29553A8);
    LOWORD(v34) = 0;
LABEL_30:
    v16 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "virtual void CLAccessoryPPG::onEventData(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v16);
    if (v16 != (char *)buf)
      free(v16);
    return;
  }
  v4 = IntegerValue;
  if (IntegerValue == 32)
  {
    TimeStamp = IOHIDEventGetTimeStamp();
    v6 = sub_18F1FD20C(TimeStamp);
    *(double *)v17 = v6;
    v7 = *(unsigned __int8 **)(DataValue + 2);
    v17[1] = v7;
    v8 = *DataValue;
    v18 = *DataValue;
    v19 = DataValue[1];
    v9 = *((_WORD *)DataValue + 5);
    v21 = DataValue[12];
    v20 = v9;
    LOBYTE(v9) = DataValue[15];
    v22 = *(_WORD *)(DataValue + 13);
    v23 = v9;
    v10 = *((_WORD *)DataValue + 8);
    v25 = DataValue[18];
    v24 = v10;
    v11 = *(_WORD *)(DataValue + 19);
    v27 = DataValue[21];
    v26 = v11;
    LOBYTE(v11) = DataValue[24];
    v28 = *((_WORD *)DataValue + 11);
    v29 = v11;
    LOBYTE(v11) = DataValue[27];
    v30 = *(_WORD *)(DataValue + 25);
    v31 = v11;
    v32 = *((_WORD *)DataValue + 14);
    v33 = *((_WORD *)DataValue + 15);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E29553A8);
    v12 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67241219;
      v45 = v8;
      v46 = 2050;
      v47 = v7;
      v48 = 2050;
      v49 = v6;
      v50 = 1040;
      v51 = 32;
      v52 = 2097;
      v53 = DataValue;
      _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_DEBUG, "[AccessoryPPG] frameNum,%{public}d,sensorTime,%{public}llu,timestamp,%{public}20.20f,payload,{%{private}.*P}", buf, 0x2Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E29553A8);
      v34 = 67241219;
      v35 = v8;
      v36 = 2050;
      v37 = v7;
      v38 = 2050;
      v39 = v6;
      v40 = 1040;
      v41 = 32;
      v42 = 2097;
      v43 = DataValue;
      v15 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLAccessoryPPG::onEventData(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v15);
      if (v15 != (char *)buf)
        free(v15);
    }
    sub_18F1FD2C8(a1, 0, (uint64_t)v17, 40);
    return;
  }
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E29553A8);
  v14 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68157955;
    v45 = v4;
    v46 = 2097;
    v47 = DataValue;
    _os_log_impl(&dword_18F1DC000, v14, OS_LOG_TYPE_ERROR, "[AccessoryPPG] Invalid payload: %{private}.*P", buf, 0x12u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E29553A8);
    v34 = 68157955;
    v35 = v4;
    v36 = 2097;
    v37 = DataValue;
    goto LABEL_30;
  }
}

os_log_t sub_18F3E5AC0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Accessory");
  qword_1ECEDEE30 = (uint64_t)result;
  return result;
}

uint64_t sub_18F3E5AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_feedOdometryData_, a1, a4, a5);
}

void sub_18F3E5BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3E5C14(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = objc_msgSend_initPrivate(*(void **)(a1 + 32), a2, a3, a4, a5);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = result;
  return result;
}

void sub_18F3E5D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3E5D78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), sel_deallocPrivate, a3, a4, a5);
}

void sub_18F3E5E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  MEMORY[0x194001438](v19, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_18F3E5ED8(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D918 != -1)
    dispatch_once(&qword_1EE16D918, &unk_1E29450E8);
  v3 = qword_1EE16D920;
  if (os_log_type_enabled((os_log_t)qword_1EE16D920, OS_LOG_TYPE_DEBUG))
  {
    v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0)
      v5 = v4;
    else
      v5 = *(_QWORD *)v4;
    *(_DWORD *)buf = 136446210;
    v8 = v5;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEBUG, "Default handler received message %{public}s", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D918 != -1)
      dispatch_once(&qword_1EE16D918, &unk_1E29450E8);
    CLConnectionMessage::name(*a2);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMOdometryManager setupBIO]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
}

void sub_18F3E60B4(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ExecutablePathFromPid;
  uint64_t v7;
  NSObject *v8;
  pid_t v9;
  uint64_t v10;
  char *v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  pid_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = getpid();
  ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2, v4, v5);
  if (ExecutablePathFromPid)
  {
    v7 = ExecutablePathFromPid;
    if (qword_1EE16D918 != -1)
      dispatch_once(&qword_1EE16D918, &unk_1E29450E8);
    v8 = qword_1EE16D920;
    if (os_log_type_enabled((os_log_t)qword_1EE16D920, OS_LOG_TYPE_DEFAULT))
    {
      v9 = getpid();
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138478339;
      v13 = v7;
      v14 = 1025;
      v15 = v9;
      v16 = 2049;
      v17 = v10;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_DEFAULT, "Client connection interrupt, %{private}@, %{private}d, %{private}p", buf, 0x1Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D918 != -1)
        dispatch_once(&qword_1EE16D918, &unk_1E29450E8);
      getpid();
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMOdometryManager setupBIO]_block_invoke", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
}

void sub_18F3E6348(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
}

uint64_t sub_18F3E63C4(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_startOdometryUpdatesPrivateUsingReferenceFrame_toQueue_withHandler_, 1, a1[5], a1[6]);
}

uint64_t sub_18F3E6450(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_startOdometryUpdatesPrivateUsingReferenceFrame_toQueue_withHandler_, a1[7], a1[5], a1[6]);
}

uint64_t sub_18F3E64C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_stopOdometryUpdatesPrivate(*(void **)(a1 + 32), a2, a3, a4, a5);
}

uint64_t sub_18F3E6544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_setOdometryUpdateIntervalPrivate_, a3, a4, a5);
}

uint64_t sub_18F3E65E4(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_startOdometryUpdatesPrivateUsingReferenceFrame_toQueue_withHandler_, a1[7], a1[5], a1[6]);
}

uint64_t sub_18F3E666C(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_startBackgroundUpdatesPrivateUsingReferenceFrame_toQueue_withHandler_, a1[7], a1[5], a1[6]);
}

uint64_t sub_18F3E6E70(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

uint64_t sub_18F3E6E84(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F3E7068(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v5 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(v5 + 168);
  *(_OWORD *)(v5 + 72) = *(_OWORD *)(v5 + 184);
  *(_OWORD *)(v5 + 88) = *(_OWORD *)(v5 + 200);
  *(_OWORD *)(v5 + 104) = *(_OWORD *)(v5 + 216);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(v5 + 120);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(v5 + 136);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)(v5 + 152);
  v6 = *(_OWORD **)(result + 40);
  v7 = v6[3];
  v8 = v6[4];
  v9 = v6[5];
  *(_OWORD *)(v5 + 216) = v6[6];
  *(_OWORD *)(v5 + 200) = v9;
  *(_OWORD *)(v5 + 184) = v8;
  *(_OWORD *)(v5 + 168) = v7;
  v11 = v6[1];
  v10 = v6[2];
  *(_OWORD *)(v5 + 120) = *v6;
  *(_OWORD *)(v5 + 136) = v11;
  *(_OWORD *)(v5 + 152) = v10;
  if (*(_BYTE *)(v5 + 232))
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(result + 32), sel_sendOdometryToClientPrivate, a3, a4, a5);
  *(_BYTE *)(v5 + 232) = 1;
  return result;
}

void sub_18F3E76FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sub_18F3E7D68(uint64_t a1, CLConnectionMessage **a2)
{
  id *v3;
  _QWORD *Weak;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  NSSet *v13;
  void *DictionaryOfClasses;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[6];
  id v30;

  v3 = (id *)(a1 + 32);
  Weak = objc_loadWeak((id *)(a1 + 32));
  if (Weak)
  {
    v5 = Weak;
    if (Weak[4])
    {
      v6 = (void *)MEMORY[0x1E0C99E60];
      v7 = objc_opt_class();
      v8 = objc_opt_class();
      v9 = objc_opt_class();
      v13 = (NSSet *)objc_msgSend_setWithObjects_(v6, v10, v7, v11, v12, v8, v9, 0);
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v13);
      v18 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v15, (uint64_t)CFSTR("CMBackgroundInertialOdometry"), v16, v17);
      v23 = v18;
      if (v5[6] == 8)
        objc_msgSend_rotateArbitraryToTrueNorth(v18, v19, v20, v21, v22);
      v24 = objc_msgSend_copy((void *)v5[4], v19, v20, v21, v22);
      v25 = (void *)v5[5];
      v29[0] = MEMORY[0x1E0C809B0];
      v29[1] = 3221225472;
      v29[2] = sub_18F3E7EB0;
      v29[3] = &unk_1E2955C20;
      objc_copyWeak(&v30, v3);
      v29[4] = v23;
      v29[5] = v24;
      objc_msgSend_addOperationWithBlock_(v25, v26, (uint64_t)v29, v27, v28);
      objc_destroyWeak(&v30);
    }
  }
}

void sub_18F3E7E9C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18F3E7EB0(uint64_t a1)
{
  id Weak;
  void (**v3)(_QWORD, _QWORD, _QWORD);

  Weak = objc_loadWeak((id *)(a1 + 48));
  v3 = *(void (***)(_QWORD, _QWORD, _QWORD))(a1 + 40);
  if (Weak)
  {
    v3[2](v3, *(_QWORD *)(a1 + 32), 0);
    v3 = *(void (***)(_QWORD, _QWORD, _QWORD))(a1 + 40);
  }

}

void sub_18F3E7EF4(uint64_t a1)
{
  _QWORD *Weak;
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  std::__shared_weak_count *v31;
  _QWORD v32[2];
  _QWORD v33[2];
  uint64_t v34;
  uint8_t buf[8];
  std::__shared_weak_count *v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  Weak = objc_loadWeak((id *)(a1 + 56));
  if (Weak)
  {
    v3 = Weak;
    if (qword_1EE16D918 != -1)
      dispatch_once(&qword_1EE16D918, &unk_1E29450E8);
    v4 = qword_1EE16D920;
    if (os_log_type_enabled((os_log_t)qword_1EE16D920, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v5;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEFAULT, "Starting background InertialOdometry updates with reference frame: %{public}d", buf, 8u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D918 != -1)
        dispatch_once(&qword_1EE16D918, &unk_1E29450E8);
      v29 = *(_QWORD *)(a1 + 64);
      LODWORD(v34) = 67240192;
      HIDWORD(v34) = v29;
      v30 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMOdometryManager startBackgroundUpdatesPrivateUsingReferenceFrame:toQueue:withHandler:]_block_invoke", "CoreLocation: %s\n", v30);
      if (v30 != (char *)buf)
        free(v30);
    }
    v6 = (void *)v3[4];
    if (v6 != *(void **)(a1 + 40))
    {

      v3[4] = objc_msgSend_copy(*(void **)(a1 + 40), v7, v8, v9, v10);
    }
    v11 = (void *)v3[5];
    if (v11 != *(void **)(a1 + 32))
    {

      v3[5] = *(id *)(a1 + 32);
    }
    v3[6] = *(_QWORD *)(a1 + 64);
    sub_18F270374(buf, "PedestrianFence/kCLConnectionMessageBackgroundInertialOdometry");
    CLConnectionClient::setHandlerForMessage();
    if (v37 < 0)
      operator delete(*(void **)buf);
    v32[0] = CFSTR("kCLConnectionMessageSubscribeKey");
    v32[1] = CFSTR("CMPedestrianFenceClientIdentifier");
    v33[0] = MEMORY[0x1E0C9AAB0];
    v16 = (void *)objc_msgSend_processInfo(MEMORY[0x1E0CB3898], v12, v13, v14, v15);
    v33[1] = objc_msgSend_processName(v16, v17, v18, v19, v20);
    v34 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v21, (uint64_t)v33, (uint64_t)v32, 2);
    sub_18F3E8644(buf, &v34);
    v31 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v31)
    {
      v24 = (unint64_t *)&v31->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v26 = v36;
    if (v36)
    {
      v27 = (unint64_t *)&v36->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
}

void sub_18F3E8234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_18F2A8438((uint64_t)&a11);
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_18F3E8308(uint64_t a1)
{
  id *Weak;
  id *v2;
  NSObject *v3;
  const char *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  const __CFString *v15;
  uint64_t v16;
  uint8_t buf[8];
  std::__shared_weak_count *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  Weak = (id *)objc_loadWeak((id *)(a1 + 32));
  if (Weak)
  {
    v2 = Weak;
    if (qword_1EE16D918 != -1)
      dispatch_once(&qword_1EE16D918, &unk_1E29450E8);
    v3 = qword_1EE16D920;
    if (os_log_type_enabled((os_log_t)qword_1EE16D920, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEFAULT, "Stopping background InertialOdometry updates", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D918 != -1)
        dispatch_once(&qword_1EE16D918, &unk_1E29450E8);
      LOWORD(v14) = 0;
      v12 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMOdometryManager stopBackgroundUpdatesPrivate]_block_invoke", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
    if (v2[4])
    {
      v15 = CFSTR("kCLConnectionMessageSubscribeKey");
      v16 = MEMORY[0x1E0C9AAA0];
      v14 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v4, (uint64_t)&v16, (uint64_t)&v15, 1);
      sub_18F3E8644(buf, &v14);
      v13 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      CLConnectionClient::sendMessage();
      if (v13)
      {
        v7 = (unint64_t *)&v13->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }

      v2[4] = 0;
      v2[5] = 0;
      v9 = v18;
      if (v18)
      {
        v10 = (unint64_t *)&v18->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
}

void sub_18F3E85A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

os_log_t sub_18F3E85E4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "InertialOdometry");
  qword_1EE16D920 = (uint64_t)result;
  return result;
}

void sub_18F3E8614(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3E8638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_18F3E8644(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  void *__p[2];
  char v6;

  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2952688;
  sub_18F270374(__p, "PedestrianFence/kCLConnectionMessageBackgroundInertialOdometry");
  MEMORY[0x19400103C](v4 + 3, __p, *a2);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_18F3E86C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

os_log_t sub_18F3E96E8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
  qword_1EE16D940 = (uint64_t)result;
  return result;
}

void sub_18F3E9820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  MEMORY[0x194001438](v19, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_18F3E985C(uint64_t a1, CLConnectionMessage **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  char *v21;
  uint8_t buf[4];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v3, v6, v4, v7, v8, v5, 0);
  if (*a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9)) != 0
    && (v14 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, (uint64_t)CFSTR("CMErrorMessage"), v12, v13)) != 0)
  {
    v19 = objc_msgSend_intValue(v14, v15, v16, v17, v18);
  }
  else
  {
    v19 = 103;
  }
  if (qword_1EE16D6A0 != -1)
    dispatch_once(&qword_1EE16D6A0, &unk_1E2945108);
  v20 = qword_1EE16D6A8;
  if (os_log_type_enabled((os_log_t)qword_1EE16D6A8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v23 = v19;
    _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_ERROR, "Calorie response failed with error %{public}d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D6A0 != -1)
      dispatch_once(&qword_1EE16D6A0, &unk_1E2945108);
    v21 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMNatalimeterInternal init]_block_invoke", "CoreLocation: %s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
  }
}

void sub_18F3E9A70(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ExecutablePathFromPid;
  uint64_t v7;
  NSObject *v8;
  pid_t v9;
  uint64_t v10;
  char *v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  pid_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = getpid();
  ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2, v4, v5);
  if (ExecutablePathFromPid)
  {
    v7 = ExecutablePathFromPid;
    if (qword_1EE16D6A0 != -1)
      dispatch_once(&qword_1EE16D6A0, &unk_1E2945108);
    v8 = qword_1EE16D6A8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6A8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = getpid();
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      v13 = v7;
      v14 = 1024;
      v15 = v9;
      v16 = 2048;
      v17 = v10;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_DEFAULT, "Client connection interrupt, %@, %d, %p", buf, 0x1Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6A0 != -1)
        dispatch_once(&qword_1EE16D6A0, &unk_1E2945108);
      getpid();
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMNatalimeterInternal init]_block_invoke", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
}

void sub_18F3E9D70(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  const __CFString *v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v17 = CFSTR("CMNatalimetryRecordId");
  v18[0] = objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], a2, *(_QWORD *)(a1 + 48), a4, a5);
  v16 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v5, (uint64_t)v18, (uint64_t)&v17, 1);
  sub_18F3ED590("kCLConnectionMessageNatalimetryQuery", &v16, &v14);
  v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  CLConnectionClient::sendMessage();
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_18F3E9EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F3E9F18(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v6 = *(void **)(a1 + 32);
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  v13 = *(_QWORD *)a2;
  v14 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  objc_msgSend__handleQueryResponse_withHandler_(v6, a2, (uint64_t)&v13, *(_QWORD *)(a1 + 40), a5);
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_18F3E9FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F2A8438((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18F3EA014(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ExecutablePathFromPid;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  pid_t v13;
  const __CFString *v14;
  uint64_t v15;
  void *started;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double Current;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  NSObject *v37;
  pid_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *p_shared_owners;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  pid_t v101;
  const __CFString *v102;
  uint64_t v103;
  char *v104;
  pid_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  std::__shared_weak_count *v112;
  _QWORD v113[7];
  _QWORD v114[7];
  _BYTE v115[18];
  __int16 v116;
  const __CFString *v117;
  __int16 v118;
  uint64_t v119;
  int buf;
  _BYTE buf_4[14];
  __int16 v122;
  const __CFString *v123;
  __int16 v124;
  uint64_t v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v2 = getpid();
  ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2, v4, v5);
  if (ExecutablePathFromPid)
  {
    v11 = ExecutablePathFromPid;
    if (qword_1EE16D6A0 != -1)
      dispatch_once(&qword_1EE16D6A0, &unk_1E2945108);
    v12 = qword_1EE16D6A8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6A8, OS_LOG_TYPE_DEBUG))
    {
      v13 = getpid();
      v14 = CFSTR(" ");
      v15 = *(_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 32))
        v14 = *(const __CFString **)(a1 + 32);
      buf = 138413058;
      *(_QWORD *)buf_4 = v11;
      *(_WORD *)&buf_4[8] = 1024;
      *(_DWORD *)&buf_4[10] = v13;
      v122 = 2112;
      v123 = v14;
      v124 = 2048;
      v125 = v15;
      _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_DEBUG, "%@, pid, %d, query since record, %@, %p", (uint8_t *)&buf, 0x26u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE16D6A0 != -1)
        dispatch_once(&qword_1EE16D6A0, &unk_1E2945108);
      v101 = getpid();
      v102 = CFSTR(" ");
      v103 = *(_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 32))
        v102 = *(const __CFString **)(a1 + 32);
      *(_DWORD *)v115 = 138413058;
      *(_QWORD *)&v115[4] = v11;
      *(_WORD *)&v115[12] = 1024;
      *(_DWORD *)&v115[14] = v101;
      v116 = 2112;
      v117 = v102;
      v118 = 2048;
      v119 = v103;
      v104 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMNatalimeterInternal _queryAbsoluteNatalimetryDataSinceDataRecord:withHandler:]_block_invoke", "CoreLocation: %s\n", v104);
      if (v104 != (char *)&buf)
        free(v104);
    }
  }
  started = (void *)objc_msgSend_startDate(*(void **)(a1 + 32), v7, v8, v9, v10);
  objc_msgSend_timeIntervalSinceReferenceDate(started, v17, v18, v19, v20);
  if (v25 != 0.0)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v31 = (void *)objc_msgSend_startDate(*(void **)(a1 + 32), v27, v28, v29, v30);
    objc_msgSend_timeIntervalSinceReferenceDate(v31, v32, v33, v34, v35);
    if (vabdd_f64(Current, v36) > 86400.0)
    {
      if (qword_1EE16D6A0 != -1)
        dispatch_once(&qword_1EE16D6A0, &unk_1E2945108);
      v37 = qword_1EE16D6A8;
      if (os_log_type_enabled((os_log_t)qword_1EE16D6A8, OS_LOG_TYPE_ERROR))
      {
        v38 = getpid();
        v43 = objc_msgSend_startDate(*(void **)(a1 + 32), v39, v40, v41, v42);
        buf = 67109378;
        *(_DWORD *)buf_4 = v38;
        *(_WORD *)&buf_4[4] = 2112;
        *(_QWORD *)&buf_4[6] = v43;
        _os_log_impl(&dword_18F1DC000, v37, OS_LOG_TYPE_ERROR, "Attempting to request data older than 24 hours, pid, %d, startDate %@", (uint8_t *)&buf, 0x12u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1EE16D6A0 != -1)
          dispatch_once(&qword_1EE16D6A0, &unk_1E2945108);
        v105 = getpid();
        v110 = objc_msgSend_startDate(*(void **)(a1 + 32), v106, v107, v108, v109);
        *(_DWORD *)v115 = 67109378;
        *(_DWORD *)&v115[4] = v105;
        *(_WORD *)&v115[8] = 2112;
        *(_QWORD *)&v115[10] = v110;
        v111 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "-[CMNatalimeterInternal _queryAbsoluteNatalimetryDataSinceDataRecord:withHandler:]_block_invoke", "CoreLocation: %s\n", v111);
        if (v111 != (char *)&buf)
          free(v111);
      }
    }
  }
  v113[0] = CFSTR("CMNatalimetryNatalieDataStartDate");
  v44 = (void *)MEMORY[0x1E0CB37E8];
  v45 = (void *)objc_msgSend_startDate(*(void **)(a1 + 32), v21, v22, v23, v24);
  objc_msgSend_timeIntervalSinceReferenceDate(v45, v46, v47, v48, v49);
  v114[0] = objc_msgSend_numberWithDouble_(v44, v50, v51, v52, v53);
  v113[1] = CFSTR("CMNatalimetryNatalieDataMets");
  v114[1] = objc_msgSend_mets(*(void **)(a1 + 32), v54, v55, v56, v57);
  v113[2] = CFSTR("CMNatalimetryNatalieDataNatalies");
  v114[2] = objc_msgSend_natalies(*(void **)(a1 + 32), v58, v59, v60, v61);
  v113[3] = CFSTR("CMNatalimetryNatalieDataBasalNatalies");
  v114[3] = objc_msgSend_basalNatalies(*(void **)(a1 + 32), v62, v63, v64, v65);
  v113[4] = CFSTR("CMNatalimetrySessionId");
  v66 = (void *)MEMORY[0x1E0CB37E8];
  v71 = objc_msgSend_activityType(*(void **)(a1 + 32), v67, v68, v69, v70);
  v114[4] = objc_msgSend_numberWithInteger_(v66, v72, v71, v73, v74);
  v113[5] = CFSTR("CMNatalimetryRecordId");
  v75 = (void *)MEMORY[0x1E0CB37E8];
  v80 = objc_msgSend_recordId(*(void **)(a1 + 32), v76, v77, v78, v79);
  v114[5] = objc_msgSend_numberWithInteger_(v75, v81, v80, v82, v83);
  v113[6] = CFSTR("CMNatalimetryNatalieDataSourceId");
  v88 = (void *)objc_msgSend_sourceId(*(void **)(a1 + 32), v84, v85, v86, v87);
  v114[6] = objc_msgSend_UUIDString(v88, v89, v90, v91, v92);
  *(_QWORD *)v115 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v93, (uint64_t)v114, (uint64_t)v113, 7);
  sub_18F3ED590("kCLConnectionMessageNatalimetryQuery", v115, &buf);
  v112 = *(std::__shared_weak_count **)&buf_4[4];
  if (*(_QWORD *)&buf_4[4])
  {
    v94 = (unint64_t *)(*(_QWORD *)&buf_4[4] + 8);
    do
      v95 = __ldxr(v94);
    while (__stxr(v95 + 1, v94));
  }
  CLConnectionClient::sendMessage();
  if (v112)
  {
    p_shared_owners = (unint64_t *)&v112->__shared_owners_;
    do
      v97 = __ldaxr(p_shared_owners);
    while (__stlxr(v97 - 1, p_shared_owners));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  v98 = *(std::__shared_weak_count **)&buf_4[4];
  if (*(_QWORD *)&buf_4[4])
  {
    v99 = (unint64_t *)(*(_QWORD *)&buf_4[4] + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
}

void sub_18F3EA65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_18F2A8438((uint64_t)&a18);
  sub_18F2A8438((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_18F3EA680(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v6 = *(void **)(a1 + 32);
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  v13 = *(_QWORD *)a2;
  v14 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  objc_msgSend__handleQueryResponse_withHandler_(v6, a2, (uint64_t)&v13, *(_QWORD *)(a1 + 40), a5);
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_18F3EA70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F2A8438((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3EA8D8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F3EA924(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;

  v5 = (void *)MEMORY[0x1E0CB35C8];
  v6 = *(_QWORD *)(a1 + 40);
  v7 = objc_msgSend_integerValue(*(void **)(a1 + 32), a2, a3, a4, a5);
  v9 = objc_msgSend_errorWithDomain_code_userInfo_(v5, v8, (uint64_t)CFSTR("CMErrorDomain"), v7, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v6, 0, v9);
}

uint64_t sub_18F3EA984(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F3EA998(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

void sub_18F3EAA3C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  _QWORD v17[6];
  void *__p;
  std::__shared_weak_count *v19;
  char v20;
  const __CFString *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 32);
  if (v3 != *(void **)(a1 + 40) || !*(_BYTE *)(v2 + 24))
  {

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = objc_msgSend_copy(*(void **)(a1 + 40), v4, v5, v6, v7);
    sub_18F270374(&__p, "kCLConnectionMessageNatalimetryUpdate");
    v17[1] = MEMORY[0x1E0C809B0];
    v17[2] = 3221225472;
    v17[3] = sub_18F3EAC6C;
    v17[4] = &unk_1E2955DD8;
    v17[5] = *(_QWORD *)(a1 + 32);
    CLConnectionClient::setHandlerForMessage();
    if (v20 < 0)
      operator delete(__p);
    v21 = CFSTR("kCLConnectionMessageSubscribeKey");
    v22[0] = MEMORY[0x1E0C9AAB0];
    v17[0] = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v8, (uint64_t)v22, (uint64_t)&v21, 1);
    sub_18F3ED6C0("kCLConnectionMessageNatalimetryUpdate", v17, &__p);
    v16 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 1;
    v13 = v19;
    if (v19)
    {
      v14 = (unint64_t *)&v19->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_18F3EAC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_18F2A8438((uint64_t)&a10);
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_18F3EAC6C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  NSSet *v16;
  void *DictionaryOfClasses;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  _QWORD *v28;
  uint64_t v29;
  NSObject *v30;
  char *v31;
  _QWORD v32[7];
  _QWORD v33[6];
  _QWORD block[5];
  uint8_t buf[1640];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  if (v6)
  {
    v8 = (id)objc_msgSend_copy(v6, a2, a3, a4, a5);
    v9 = (void *)MEMORY[0x1E0C99E60];
    v10 = objc_opt_class();
    v11 = objc_opt_class();
    v12 = objc_opt_class();
    v16 = (NSSet *)objc_msgSend_setWithObjects_(v9, v13, v10, v14, v15, v11, v12, 0);
    if (!*(_QWORD *)a2
      || (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v16)) == 0)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_18F3EAF80;
      block[3] = &unk_1E2955B10;
      block[4] = v8;
      v27 = MEMORY[0x1E0C80D38];
      v28 = block;
      goto LABEL_7;
    }
    v21 = DictionaryOfClasses;
    v22 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v18, (uint64_t)CFSTR("CMErrorMessage"), v19, v20);
    v26 = objc_msgSend_objectForKeyedSubscript_(v21, v23, (uint64_t)CFSTR("CMNatalimetryNatalieData"), v24, v25);
    if (v22)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 0;
      v33[0] = MEMORY[0x1E0C809B0];
      v33[1] = 3221225472;
      v33[2] = sub_18F3EAFCC;
      v33[3] = &unk_1E2955B60;
      v33[4] = v22;
      v33[5] = v8;
      v27 = MEMORY[0x1E0C80D38];
      v28 = v33;
LABEL_7:
      dispatch_async(v27, v28);
      return;
    }
    if (v26)
    {
      v32[0] = MEMORY[0x1E0C809B0];
      v32[1] = 3221225472;
      v32[2] = sub_18F3EB02C;
      v32[3] = &unk_1E2955BD8;
      v29 = *(_QWORD *)(a1 + 32);
      v32[4] = v26;
      v32[5] = v29;
      v32[6] = v8;
      v27 = MEMORY[0x1E0C80D38];
      v28 = v32;
      goto LABEL_7;
    }
    if (qword_1EE16D6A0 != -1)
      dispatch_once(&qword_1EE16D6A0, &unk_1E2945108);
    v30 = qword_1EE16D6A8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v30, OS_LOG_TYPE_FAULT, "Error parsing update.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6A0 != -1)
        dispatch_once(&qword_1EE16D6A0, &unk_1E2945108);
      v31 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMNatalimeterInternal _startAbsoluteNatalimetryDataUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v31);
      if (v31 != (char *)buf)
        free(v31);
    }
  }
}

uint64_t sub_18F3EAF80(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F3EAFCC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;

  v5 = (void *)MEMORY[0x1E0CB35C8];
  v6 = *(_QWORD *)(a1 + 40);
  v7 = objc_msgSend_integerValue(*(void **)(a1 + 32), a2, a3, a4, a5);
  v9 = objc_msgSend_errorWithDomain_code_userInfo_(v5, v8, (uint64_t)CFSTR("CMErrorDomain"), v7, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v6, 0, v9);
}

uint64_t sub_18F3EB02C(_QWORD *a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ExecutablePathFromPid;
  uint64_t v7;
  NSObject *v8;
  pid_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  pid_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = getpid();
  ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2, v4, v5);
  if (ExecutablePathFromPid)
  {
    v7 = ExecutablePathFromPid;
    if (qword_1EE16D6A0 != -1)
      dispatch_once(&qword_1EE16D6A0, &unk_1E2945108);
    v8 = qword_1EE16D6A8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6A8, OS_LOG_TYPE_DEBUG))
    {
      v9 = getpid();
      v10 = a1[4];
      v11 = a1[5];
      *(_DWORD *)buf = 138413058;
      v15 = v7;
      v16 = 1024;
      v17 = v9;
      v18 = 2112;
      v19 = v10;
      v20 = 2048;
      v21 = v11;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_DEBUG, "%@, pid, %d, update, %@, %p", buf, 0x26u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6A0 != -1)
        dispatch_once(&qword_1EE16D6A0, &unk_1E2945108);
      getpid();
      v13 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMNatalimeterInternal _startAbsoluteNatalimetryDataUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v13);
      if (v13 != (char *)buf)
        free(v13);
    }
  }
  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

void sub_18F3EB2BC(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  char *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  const __CFString *v15;
  uint64_t v16;
  void *__p;
  std::__shared_weak_count *v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  sub_18F270374(&__p, "kCLConnectionMessageNatalimetryUpdate");
  CLConnectionClient::setHandlerForMessage();
  if (v19 < 0)
    operator delete(__p);
  v3 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v3 + 24) && *(_QWORD *)(v3 + 32))
  {
    v15 = CFSTR("kCLConnectionMessageSubscribeKey");
    v16 = MEMORY[0x1E0C9AAA0];
    v14 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v2, (uint64_t)&v16, (uint64_t)&v15, 1);
    sub_18F3ED6C0("kCLConnectionMessageNatalimetryUpdate", &v14, &__p);
    v13 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v13)
    {
      v6 = (unint64_t *)&v13->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = 0;
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 0;
    v8 = v18;
    if (v18)
    {
      v9 = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    if (qword_1EE16D6A0 != -1)
      dispatch_once(&qword_1EE16D6A0, &unk_1E2945108);
    v11 = qword_1EE16D6A8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6A8, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_18F1DC000, v11, OS_LOG_TYPE_INFO, "Error stopping calorie updates, not active clients.", (uint8_t *)&__p, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1EE16D6A0 != -1)
        dispatch_once(&qword_1EE16D6A0, &unk_1E2945108);
      LOWORD(v14) = 0;
      v12 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMNatalimeterInternal _stopAbsoluteNatalimetryDataUpdates]_block_invoke", "CoreLocation: %s\n", v12);
      if (v12 != (char *)&__p)
        free(v12);
    }
  }
}

void sub_18F3EB5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_18F3EBA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_18F2A8438((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3EBB2C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend__teardown(*(void **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5);
}

void sub_18F3EBDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_18F2A8438((uint64_t)va);
  objc_sync_exit(v7);
  _Unwind_Resume(a1);
}

void sub_18F3EC234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);
  sub_18F2A8438((uint64_t)va);
  objc_sync_exit(v6);
  _Unwind_Resume(a1);
}

void sub_18F3EC874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_18F2A8438((uint64_t)va);
  objc_sync_exit(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3EC9B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v6, sel__queryAbsoluteNatalimetryDataSinceRecord_withHandler_, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), v7);
}

uint64_t sub_18F3ECB00(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = objc_msgSend_isAuthorizedForEntitlement_(CMMotionUtils, a2, (uint64_t)CFSTR("com.apple.locationd.activity"), a4, a5);
  qword_1ECEDF8F8 = result;
  return result;
}

uint64_t sub_18F3ECBE0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v6, sel__startAbsoluteNatalimetryDataUpdatesWithHandler_, *(_QWORD *)(a1 + 40), v7, v8);
}

uint64_t sub_18F3ECC64(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v5, sel__stopAbsoluteNatalimetryDataUpdates, v6, v7, v8);
}

os_log_t sub_18F3ED564()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Calorimetry");
  qword_1EE16D6A8 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F3ED590@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F3ED5F0(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F3ED5DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F3ED5F0(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F3ED650((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F3ED63C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F3ED650(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F3ED6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18F3ED6C0@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F3ED720(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F3ED70C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F3ED720(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F3ED780((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F3ED76C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F3ED780(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F3ED7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18F3ED7F0@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = sub_18F3ED848(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18F3ED834(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F3ED848(_QWORD *a1, char *__s)
{
  char v4;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F3ED8A4((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_18F3ED890(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F3ED8A4(int a1, uint64_t a2, char *__s)
{
  void *__p[2];
  char v5;

  sub_18F270374(__p, __s);
  MEMORY[0x194001030](a2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_18F3ED8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18F3ED90C@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F3ED96C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F3ED958(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F3ED96C(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F3ED9CC((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F3ED9B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F3ED9CC(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F3EDA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F3EDA3C(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  _OWORD *v3;
  _OWORD *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  _QWORD v17[3];
  char v18;
  char *v19;
  _QWORD *v20;
  _QWORD v21[11];

  v21[9] = *MEMORY[0x1E0C80C00];
  v2 = operator new(0xF0uLL);
  v2[12] = xmmword_18F507840;
  v2[13] = unk_18F507850;
  v2[14] = xmmword_18F507860;
  v2[8] = xmmword_18F507800;
  v2[9] = unk_18F507810;
  v2[10] = xmmword_18F507820;
  v2[11] = unk_18F507830;
  v2[4] = xmmword_18F5077C0;
  v2[5] = unk_18F5077D0;
  v2[6] = xmmword_18F5077E0;
  v2[7] = unk_18F5077F0;
  *v2 = xmmword_18F507780;
  v2[1] = unk_18F507790;
  v2[2] = xmmword_18F5077A0;
  v2[3] = unk_18F5077B0;
  v21[0] = v2;
  v21[1] = v2 + 15;
  v21[2] = v2 + 15;
  v3 = operator new(0xF0uLL);
  v3[12] = xmmword_18F507930;
  v3[13] = unk_18F507940;
  v3[14] = xmmword_18F507950;
  v3[8] = xmmword_18F5078F0;
  v3[9] = unk_18F507900;
  v3[10] = xmmword_18F507910;
  v3[11] = unk_18F507920;
  v3[4] = xmmword_18F5078B0;
  v3[5] = unk_18F5078C0;
  v3[6] = xmmword_18F5078D0;
  v3[7] = unk_18F5078E0;
  *v3 = xmmword_18F507870;
  v3[1] = unk_18F507880;
  v3[2] = xmmword_18F507890;
  v3[3] = unk_18F5078A0;
  v21[3] = v3;
  v21[4] = v3 + 15;
  v21[5] = v3 + 15;
  v4 = operator new(0xF0uLL);
  v21[8] = v4 + 15;
  v4[12] = xmmword_18F507A20;
  v4[13] = unk_18F507A30;
  v4[14] = xmmword_18F507A40;
  v4[8] = xmmword_18F5079E0;
  v4[9] = unk_18F5079F0;
  v4[10] = xmmword_18F507A00;
  v4[11] = unk_18F507A10;
  v4[4] = xmmword_18F5079A0;
  v4[5] = unk_18F5079B0;
  v4[6] = xmmword_18F5079C0;
  v4[7] = unk_18F5079D0;
  *v4 = xmmword_18F507960;
  v4[1] = unk_18F507970;
  v4[2] = xmmword_18F507980;
  v4[3] = unk_18F507990;
  v21[6] = v4;
  v21[7] = v4 + 15;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v5 = (char *)operator new(0x48uLL);
  v6 = 0;
  *a1 = v5;
  a1[1] = v5;
  v16 = a1;
  a1[2] = v5 + 72;
  v19 = v5;
  v20 = v5;
  v17[0] = a1 + 2;
  v17[1] = &v19;
  v17[2] = &v20;
  v18 = 0;
  do
  {
    v7 = &v5[v6 * 8];
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    v9 = (_BYTE *)v21[v6];
    v8 = (_BYTE *)v21[v6 + 1];
    v10 = v8 - v9;
    if (v8 != v9)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v10 >> 4) >= 0x555555555555556)
        sub_18F26F8C0();
      v11 = (char *)operator new(v10);
      v12 = &v5[v6 * 8];
      *(_QWORD *)v12 = v11;
      *((_QWORD *)v12 + 1) = v11;
      v13 = &v11[16 * (v10 >> 4)];
      *((_QWORD *)v12 + 2) = v13;
      memcpy(v11, v9, v10);
      *((_QWORD *)v12 + 1) = v13;
    }
    v20 = v7 + 24;
    v6 += 3;
  }
  while (v6 != 9);
  v18 = 1;
  sub_18F3EE9E0((uint64_t)v17);
  v14 = 0;
  v16[1] = v5 + 72;
  do
  {
    v15 = (void *)v21[v14 + 6];
    if (v15)
    {
      v21[v14 + 7] = v15;
      operator delete(v15);
    }
    v14 -= 3;
  }
  while (v14 != -9);
}

void sub_18F3EDCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v19;
  void *v20;

  sub_18F3EEA44(&a10);
  v19 = 0;
  while (1)
  {
    v20 = *(void **)(&a18 + v19 + 48);
    if (v20)
    {
      *(_QWORD *)(&a18 + v19 + 56) = v20;
      operator delete(v20);
    }
    v19 -= 24;
    if (v19 == -72)
      _Unwind_Resume(a1);
  }
}

void sub_18F3EDD8C(uint64_t *a1@<X0>, void **a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t *v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1[1] != *a1)
  {
    v3 = a1;
    v4 = 0;
    v33 = (uint64_t)(a2 + 2);
    do
    {
      v5 = sub_18F3EE02C(v4);
      v6 = *v3;
      if (*(_QWORD *)(*v3 + 24 * v4 + 8) != *(_QWORD *)(*v3 + 24 * v4))
      {
        v7 = v5;
        v8 = 0;
        v31 = v4;
        do
        {
          v9 = sub_18F3EE1F0(v8);
          v10 = v9;
          v11 = HIDWORD(v9);
          v32 = v8;
          v12 = (uint64_t *)(*(_QWORD *)(*v3 + 24 * v4) + 48 * v8);
          v13 = &dword_18F507A50;
          do
          {
            v14 = *v13;
            v15 = *v12;
            v16 = v12[2];
            switch(*v13)
            {
              case 0:
                break;
              case 1:
                v15 = v12[2];
                v16 = v12[3];
                break;
              case 2:
                v15 = v12[3];
                v16 = v12[4];
                break;
              case 3:
                v16 = v12[5];
                v15 = v12[4];
                break;
              default:
                v15 = 0;
                v16 = 0;
                break;
            }
            v18 = (char *)a2[1];
            v17 = (char *)a2[2];
            if (v18 >= v17)
            {
              v20 = (char *)*a2;
              v21 = (v18 - (_BYTE *)*a2) >> 5;
              v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 59)
                sub_18F26F8C0();
              v23 = v17 - v20;
              if (v23 >> 4 > v22)
                v22 = v23 >> 4;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
                v24 = 0x7FFFFFFFFFFFFFFLL;
              else
                v24 = v22;
              if (v24)
              {
                v25 = (char *)sub_18F3EEAD8(v33, v24);
                v20 = (char *)*a2;
                v18 = (char *)a2[1];
              }
              else
              {
                v25 = 0;
              }
              v26 = &v25[32 * v21];
              *(_DWORD *)v26 = v7;
              *((_DWORD *)v26 + 1) = v10;
              *((_DWORD *)v26 + 2) = v11;
              *((_DWORD *)v26 + 3) = v14;
              *((_QWORD *)v26 + 2) = v15;
              *((_QWORD *)v26 + 3) = v16;
              if (v18 == v20)
              {
                v29 = &v25[32 * v21];
              }
              else
              {
                v27 = &v25[32 * v21];
                do
                {
                  v28 = *((_OWORD *)v18 - 1);
                  v29 = v27 - 32;
                  *((_OWORD *)v27 - 2) = *((_OWORD *)v18 - 2);
                  *((_OWORD *)v27 - 1) = v28;
                  v18 -= 32;
                  v27 -= 32;
                }
                while (v18 != v20);
              }
              v19 = v26 + 32;
              *a2 = v29;
              a2[1] = v26 + 32;
              a2[2] = &v25[32 * v24];
              if (v20)
                operator delete(v20);
            }
            else
            {
              *(_DWORD *)v18 = v7;
              *((_DWORD *)v18 + 1) = v10;
              *((_DWORD *)v18 + 2) = v11;
              *((_DWORD *)v18 + 3) = v14;
              v19 = v18 + 32;
              *((_QWORD *)v18 + 2) = v15;
              *((_QWORD *)v18 + 3) = v16;
            }
            a2[1] = v19;
            ++v13;
          }
          while (v13 != (int *)qword_18F507A60);
          v4 = v31;
          v8 = v32 + 1;
          v3 = a1;
          v6 = *a1;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*a1 + 24 * v31 + 8) - *(_QWORD *)(*a1 + 24 * v31)) >> 4) > v32 + 1);
      }
      ++v4;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v3[1] - v6) >> 3) > v4);
  }
}

void sub_18F3EE004(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F3EE02C(unsigned int a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  char *v5;
  uint8_t buf[4];
  unsigned int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a1 < 3)
    return a1 + 1;
  if (qword_1EE16D868 != -1)
    dispatch_once(&qword_1EE16D868, &unk_1E29535C8);
  v3 = qword_1EE16D870;
  if (os_log_type_enabled((os_log_t)qword_1EE16D870, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67174657;
    v7 = a1;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_FAULT, "VO2MaxClassifier: Invalid biologicalSex index %{private}d", buf, 8u);
  }
  v4 = sub_18F1FCA08(115, 0);
  result = 0;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D868 != -1)
      dispatch_once(&qword_1EE16D868, &unk_1E29535C8);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "static CLHKBiologicalSex CLVO2MaxClassifier::getBiologicalSexFromIndex(int)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
    return 0;
  }
  return result;
}

uint64_t sub_18F3EE1F0(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  char *v6;
  uint8_t buf[4];
  unsigned int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1 >= 5)
  {
    if (qword_1EE16D868 != -1)
      dispatch_once(&qword_1EE16D868, &unk_1E29535C8);
    v4 = qword_1EE16D870;
    if (os_log_type_enabled((os_log_t)qword_1EE16D870, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      v8 = a1;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "Invalid age index: %{public}d", buf, 8u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D868 != -1)
        dispatch_once(&qword_1EE16D868, &unk_1E29535C8);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "static std::pair<int, int> CLVO2MaxClassifier::getAgeRangeFromIndex(int)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    v2 = 0;
    v3 = 0;
  }
  else
  {
    v2 = 10 * a1 + 20;
    v3 = qword_18F507A60[a1];
  }
  return v3 | v2;
}

void sub_18F3EE3C8(_QWORD *a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, char **a4@<X8>)
{
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  switch(a2)
  {
    case 0:
    case 3:
      v6 = 2;
      goto LABEL_4;
    case 1:
      v6 = 0;
LABEL_4:
      v7 = 1;
      break;
    case 2:
      v7 = 1;
      v6 = 1;
      break;
    default:
      v7 = 0;
      v6 = -1;
      break;
  }
  v8 = sub_18F3EE664(a3);
  if (v8 == -1)
    v9 = 0;
  else
    v9 = v7;
  if (v9 == 1)
  {
    v10 = sub_18F3EE02C(v6);
    v11 = sub_18F3EE1F0(v8);
    v12 = 0;
    v13 = *(_QWORD *)(*a1 + 24 * v6);
    v14 = HIDWORD(v11);
    v15 = (uint64_t *)(v13 + 48 * v8);
    v16 = a4 + 2;
    v17 = &dword_18F507A50;
    do
    {
      v18 = *v17;
      v19 = *v15;
      v20 = v15[2];
      switch(*v17)
      {
        case 0:
          break;
        case 1:
          v19 = v15[2];
          v20 = v15[3];
          break;
        case 2:
          v19 = v15[3];
          v20 = v15[4];
          break;
        case 3:
          v20 = v15[5];
          v19 = v15[4];
          break;
        default:
          v19 = 0;
          v20 = 0;
          break;
      }
      if ((unint64_t)v12 >= *v16)
      {
        v21 = v11;
        v22 = v10;
        v23 = *a4;
        v24 = (v12 - *a4) >> 5;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 59)
          sub_18F26F8C0();
        v26 = *v16 - (_QWORD)v23;
        if (v26 >> 4 > v25)
          v25 = v26 >> 4;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0)
          v27 = 0x7FFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)sub_18F3EEAD8((uint64_t)v16, v27);
          v23 = *a4;
          v12 = a4[1];
          v16 = a4 + 2;
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[32 * v24];
        v10 = v22;
        *(_DWORD *)v29 = v22;
        v11 = v21;
        *((_DWORD *)v29 + 1) = v21;
        *((_DWORD *)v29 + 2) = v14;
        *((_DWORD *)v29 + 3) = v18;
        *((_QWORD *)v29 + 2) = v19;
        *((_QWORD *)v29 + 3) = v20;
        if (v12 == v23)
        {
          v32 = v29;
        }
        else
        {
          v30 = v29;
          do
          {
            v31 = *((_OWORD *)v12 - 1);
            v32 = v30 - 32;
            *((_OWORD *)v30 - 2) = *((_OWORD *)v12 - 2);
            *((_OWORD *)v30 - 1) = v31;
            v12 -= 32;
            v30 -= 32;
          }
          while (v12 != v23);
        }
        v12 = v29 + 32;
        *a4 = v32;
        a4[1] = v29 + 32;
        a4[2] = &v28[32 * v27];
        if (v23)
        {
          operator delete(v23);
          v16 = a4 + 2;
        }
      }
      else
      {
        *(_DWORD *)v12 = v10;
        *((_DWORD *)v12 + 1) = v11;
        *((_DWORD *)v12 + 2) = v14;
        *((_DWORD *)v12 + 3) = v18;
        *((_QWORD *)v12 + 2) = v19;
        *((_QWORD *)v12 + 3) = v20;
        v12 += 32;
      }
      a4[1] = v12;
      ++v17;
    }
    while (v17 != (int *)qword_18F507A60);
  }
}

void sub_18F3EE638(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F3EE664(unsigned int a1)
{
  int v2;
  int v3;
  unsigned int v4;
  NSObject *v6;
  char *v7;
  uint8_t buf[4];
  unsigned int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1 - 20 >= 0xB5)
  {
    if (qword_1EE16D868 != -1)
      dispatch_once(&qword_1EE16D868, &unk_1E29535C8);
    v6 = qword_1EE16D870;
    if (os_log_type_enabled((os_log_t)qword_1EE16D870, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67174657;
      v9 = a1;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_ERROR, "Invalid parameter in getIndexFromAge: %{private}d", buf, 8u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D868 != -1)
        dispatch_once(&qword_1EE16D868, &unk_1E29535C8);
      v7 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "static int CLVO2MaxClassifier::getIndexFromAge(int)", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    if (a1 < 0x3C)
      v2 = 3;
    else
      v2 = 4;
    if (a1 >= 0x32)
      v3 = v2;
    else
      v3 = 2;
    if (a1 >= 0x28)
      v4 = v3;
    else
      v4 = 1;
    if (a1 >= 0x1E)
      return v4;
    else
      return 0;
  }
}

uint64_t sub_18F3EE84C@<X0>(_QWORD *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t *a4@<X8>, double a5@<D0>)
{
  unsigned int v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  double v18;
  unint64_t v20;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a2 >= 4)
    return sub_18F3EE664(a3);
  v8 = dword_18F507A90[a2];
  result = sub_18F3EE664(a3);
  if ((_DWORD)result != -1)
  {
    v10 = result;
    v11 = sub_18F3EE02C(v8);
    v12 = sub_18F3EE1F0(v10);
    v13 = v12;
    v14 = 0;
    v15 = *(_QWORD *)(*a1 + 24 * v8) + 48 * v10;
    do
    {
      v16 = dword_18F507A50[v14];
      v17 = *(_QWORD *)v15;
      v18 = *(double *)(v15 + 16);
      switch(v16)
      {
        case 0:
          break;
        case 1:
          v17 = *(_QWORD *)(v15 + 16);
          v18 = *(double *)(v15 + 24);
          break;
        case 2:
          v17 = *(_QWORD *)(v15 + 24);
          v18 = *(double *)(v15 + 32);
          break;
        case 3:
          v18 = *(double *)(v15 + 40);
          v17 = *(_QWORD *)(v15 + 32);
          break;
        default:
          v17 = 0;
          v18 = 0.0;
          break;
      }
    }
    while (v18 <= a5 && v14++ != 3);
    v20 = HIDWORD(v12);
    result = (uint64_t)operator new(0x20uLL);
    *(_DWORD *)result = v11;
    *(_DWORD *)(result + 4) = v13;
    *(_DWORD *)(result + 8) = v20;
    *(_DWORD *)(result + 12) = v16;
    *(_QWORD *)(result + 16) = v17;
    *(double *)(result + 24) = v18;
    a4[1] = result + 32;
    a4[2] = result + 32;
    *a4 = result;
  }
  return result;
}

os_log_t sub_18F3EE9B4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Health");
  qword_1EE16D870 = (uint64_t)result;
  return result;
}

uint64_t sub_18F3EE9E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 8);
    v3 = **(_QWORD **)(a1 + 16);
    if (v3 != v2)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 24);
        v4 -= 24;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

void sub_18F3EEA44(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_18F3EEA84((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_18F3EEA84(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void *sub_18F3EEAD8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_18F26F97C();
  return operator new(32 * a2);
}

double sub_18F3EEB0C(double *a1, double *a2)
{
  return *a1 * *a2 - a1[1] * a2[1] - a1[2] * a2[2] - a1[3] * a2[3];
}

double sub_18F3EEB60(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double result;

  v2 = *a2;
  v3 = a2[1];
  v4 = v2 + v2;
  v5 = v3 + v3;
  v6 = a2[2];
  v7 = v6 + v6;
  v8 = v3 * (v3 + v3);
  v9 = v6 * (v6 + v6);
  *a1 = 1.0 - v8 - v9;
  v10 = 1.0 - v2 * (v2 + v2);
  a1[4] = v10 - v9;
  a1[8] = v10 - v8;
  v11 = v7 * a2[1];
  v12 = v4 * a2[3];
  a1[7] = v11 - v12;
  a1[5] = v11 + v12;
  v13 = v5 * *a2;
  v14 = v7 * a2[3];
  a1[3] = v13 - v14;
  a1[1] = v13 + v14;
  v15 = v7 * *a2;
  v16 = v5 * a2[3];
  a1[2] = v15 - v16;
  result = v15 + v16;
  a1[6] = result;
  return result;
}

void sub_18F3EEC08(uint64_t a1, float a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v11;
  double v12;
  double v13;
  float v14;
  float v15;
  float v16;
  __double2 v17;
  __int128 v18;
  float v19;
  float v20;
  float v21;
  _OWORD v22[2];
  double v23[12];

  if (a3 >= 0.0)
  {
    v23[4] = v8;
    v23[5] = v7;
    v23[6] = v6;
    v23[7] = v5;
    v23[10] = v3;
    v23[11] = v4;
    v11 = *(double *)(a1 + 16);
    v12 = *(double *)(a1 + 24) + *(double *)(a1 + 24);
    v13 = *(double *)(a1 + 8);
    v14 = v13 * v12 - *(double *)a1 * (v11 + v11);
    v15 = (v13 + v13) * *(double *)a1 + v11 * v12;
    v16 = 1.0 - v13 * (v13 + v13) - v11 * (v11 + v11);
    v17 = __sincos_stret(a2 * -0.5 * 0.0174532924);
    v23[0] = v17.__cosval;
    v23[1] = v17.__sinval * v14;
    v23[2] = v17.__sinval * v15;
    v23[3] = v17.__sinval * v16;
    sub_18F1FDF60((double *)v22, v23, (double *)a1);
    v18 = v22[1];
    *(_OWORD *)a1 = v22[0];
    *(_OWORD *)(a1 + 16) = v18;
    v19 = *(float *)(a1 + 76);
    if (v19 >= 0.0)
    {
      v20 = v19 + a2;
      *(float *)(a1 + 76) = v20;
      v21 = 360.0;
      if (v20 >= 360.0)
      {
        v21 = -360.0;
      }
      else if (v20 >= 0.0)
      {
        return;
      }
      *(float *)(a1 + 76) = v20 + v21;
    }
  }
}

double sub_18F3EED18(double *a1, float *a2, float *a3, float *a4)
{
  double *v4;
  double *v5;
  float v6;
  float v7;
  float v8;
  double v11;
  double result;
  float v13;
  float v14;
  float v15;
  float *v16;
  double v17;
  double v18;
  float v19;
  double v20;

  a1[1] = 0.0;
  a1[2] = 0.0;
  v4 = a1 + 2;
  a1[3] = 0.0;
  v5 = a1 + 3;
  *a1 = 1.0;
  v6 = *a2;
  v7 = a3[1];
  v8 = a4[2];
  if (*a2 <= v7 || v6 <= v8)
  {
    if (v7 <= v6 || v7 <= v8)
    {
      v11 = sqrt(v8 + 1.0 - v6 - v7);
      result = v11 + v11;
      if (result <= 1.0e-10)
        return result;
      v13 = a2[2];
      v14 = *a3 - a2[1];
      v15 = *a4;
      a1[3] = result * 0.25;
      *a1 = v14 / result;
      a1[1] = (float)(v15 + v13) / result;
      v16 = a3 + 2;
      a3 = a4 + 1;
      a4 = v16;
      v5 = v4;
    }
    else
    {
      v18 = sqrt(v7 + 1.0 - v8 - v6);
      result = v18 + v18;
      if (result <= 1.0e-10)
        return result;
      v19 = a4[1];
      *a1 = (float)(a2[2] - *a4) / result;
      v20 = (float)(a3[2] + v19) / result;
      a1[2] = result * 0.25;
      a1[3] = v20;
      a4 = a2 + 1;
      v5 = a1 + 1;
    }
  }
  else
  {
    v17 = sqrt(v6 + 1.0 - v7 - v8);
    result = v17 + v17;
    if (result <= 1.0e-10)
      return result;
    *a1 = (float)(a4[1] - a3[2]) / result;
    a1[1] = result * 0.25;
    a1[2] = (float)(a2[1] + *a3) / result;
    a3 = a2 + 2;
  }
  result = (float)(*a4 + *a3) / result;
  *v5 = result;
  return result;
}

uint64_t sub_18F3EEED8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  const char *v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1 > 65663)
  {
    if (a1 > 589887)
    {
      if (a1 > 851979)
      {
        if (a1 >= 0x100000)
        {
          if (a1 == 0x100000)
          {
            v2 = "kTypeMachineWorkout";
            return MEMORY[0x1940012AC](a2, v2);
          }
          if (a1 == 0x200000)
          {
            v2 = "kTypeWorkout";
            return MEMORY[0x1940012AC](a2, v2);
          }
        }
        else
        {
          if (a1 == 851980)
          {
            v2 = "kTypeSemiStationaryPocket";
            return MEMORY[0x1940012AC](a2, v2);
          }
          if (a1 == 917516)
          {
            v2 = "kTypeSemiStationaryArm";
            return MEMORY[0x1940012AC](a2, v2);
          }
        }
      }
      else if (a1 > 720911)
      {
        if (a1 == 720912)
        {
          v2 = "kTypeWalkingLeg";
          return MEMORY[0x1940012AC](a2, v2);
        }
        if (a1 == 786448)
        {
          v2 = "kTypeWalkingArm";
          return MEMORY[0x1940012AC](a2, v2);
        }
      }
      else
      {
        if (a1 == 589888)
        {
          v2 = "kTypeRunningLeg";
          return MEMORY[0x1940012AC](a2, v2);
        }
        if (a1 == 655424)
        {
          v2 = "kTypeRunningArm";
          return MEMORY[0x1940012AC](a2, v2);
        }
      }
    }
    else if (a1 > 327807)
    {
      if (a1 >= 462848)
      {
        if (a1 == 462848)
        {
          v2 = "kTypeDrivingArm";
          return MEMORY[0x1940012AC](a2, v2);
        }
        if (a1 == 528384)
        {
          v2 = "kTypeDrivingStowed";
          return MEMORY[0x1940012AC](a2, v2);
        }
      }
      else
      {
        if (a1 == 327808)
        {
          v2 = "kTypeCyclingTorso";
          return MEMORY[0x1940012AC](a2, v2);
        }
        if (a1 == 397312)
        {
          v2 = "kTypeDrivingSeat";
          return MEMORY[0x1940012AC](a2, v2);
        }
      }
    }
    else if (a1 >= 196608)
    {
      if (a1 == 196608)
      {
        v2 = "kTypeCyclingLeg";
        return MEMORY[0x1940012AC](a2, v2);
      }
      if (a1 == 262272)
      {
        v2 = "kTypeCyclingArm";
        return MEMORY[0x1940012AC](a2, v2);
      }
    }
    else
    {
      if (a1 == 65664)
      {
        v2 = "kTypeCyclingSeat";
        return MEMORY[0x1940012AC](a2, v2);
      }
      if (a1 == 131200)
      {
        v2 = "kTypeCyclingChassis";
        return MEMORY[0x1940012AC](a2, v2);
      }
    }
LABEL_63:
    v2 = "ERROR";
    return MEMORY[0x1940012AC](a2, v2);
  }
  if (a1 > 255)
  {
    if (a1 >= 0x2000)
    {
      if (a1 >= 0x4000)
      {
        if (a1 == 0x4000)
        {
          v2 = "kTypeDrivingMounted";
          return MEMORY[0x1940012AC](a2, v2);
        }
        if (a1 == 0x8000)
        {
          v2 = "kTypeMotorcycle";
          return MEMORY[0x1940012AC](a2, v2);
        }
      }
      else
      {
        if (a1 == 0x2000)
        {
          v2 = "kTypeVehicularInHand";
          return MEMORY[0x1940012AC](a2, v2);
        }
        if (a1 == 12288)
        {
          v2 = "kTypeDrivingOther";
          return MEMORY[0x1940012AC](a2, v2);
        }
      }
    }
    else if (a1 > 4095)
    {
      if (a1 == 4096)
      {
        v2 = "kTypeDriving";
        return MEMORY[0x1940012AC](a2, v2);
      }
      if (a1 == 4128)
      {
        v2 = "kTypeDrivingOrWalkingSlow";
        return MEMORY[0x1940012AC](a2, v2);
      }
    }
    else
    {
      if (a1 == 256)
      {
        v2 = "kTypeInVehicleFrozen";
        return MEMORY[0x1940012AC](a2, v2);
      }
      if (a1 == 512)
      {
        v2 = "kTypeInVehicleStatic";
        return MEMORY[0x1940012AC](a2, v2);
      }
    }
    goto LABEL_63;
  }
  if (a1 > 15)
  {
    if (a1 > 63)
    {
      if (a1 == 64)
      {
        v2 = "kTypeRunning";
        return MEMORY[0x1940012AC](a2, v2);
      }
      if (a1 == 128)
      {
        v2 = "kTypeCycling";
        return MEMORY[0x1940012AC](a2, v2);
      }
    }
    else
    {
      if (a1 == 16)
      {
        v2 = "kTypeWalking";
        return MEMORY[0x1940012AC](a2, v2);
      }
      if (a1 == 32)
      {
        v2 = "kTypeWalkingSlow";
        return MEMORY[0x1940012AC](a2, v2);
      }
    }
    goto LABEL_63;
  }
  v2 = "kTypeFrozen";
  switch(a1)
  {
    case 0:
      v2 = "kTypeUnknown";
      break;
    case 1:
      return MEMORY[0x1940012AC](a2, v2);
    case 2:
      v2 = "kTypeStatic";
      break;
    case 3:
      goto LABEL_63;
    case 4:
      v2 = "kTypeMoving";
      break;
    default:
      if (a1 != 12)
        goto LABEL_63;
      v2 = "kTypeSemiStationary";
      break;
  }
  return MEMORY[0x1940012AC](a2, v2);
}

void sub_18F3EF27C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18F3EF298(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E294BAC8;
  sub_18F3EF2E4(a1, 0, 0);
  dispatch_release(*(dispatch_object_t *)(a1 + 208));
  sub_18F2A8438(a1 + 216);
  return sub_18F494CAC((_QWORD *)a1);
}

uint64_t sub_18F3EF2E4(uint64_t a1, FILE *a2, char a3)
{
  _QWORD *v6;
  FILE *v7;

  v6 = (_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40);
  v7 = (FILE *)v6[18];
  if (v7 != a2)
  {
    *(_QWORD *)(a1 + 184) = a2;
    if (v7 && *(_BYTE *)(a1 + 156))
      fclose(v7);
    *(_BYTE *)(a1 + 156) = a3;
  }
  return (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
}

void sub_18F3EF360(uint64_t a1)
{
  sub_18F3EF298(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3EF384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10;

  v10 = a1 + 40;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40);
  sub_18F3EF424(a1, "Generic", 0, 2, "void CLLog::logHeader()", "%s\n", &a9);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
}

void sub_18F3EF410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F346934((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3EF424(uint64_t a1, const char *a2, int a3, signed int a4, const char *a5, const char *a6, va_list a7, ...)
{
  fpos_t v13;
  unsigned int v14;
  unsigned int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  double Current;
  double v21;
  const char *v22;
  FILE *v23;
  const char *v24;
  FILE *v26;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  size_t size;
  __int128 *v35;
  std::string *v36;
  std::string *v37;
  uid_t v38;
  gid_t v39;
  std::error_code *v40;
  char *v41;
  const std::__fs::filesystem::path *v42;
  const std::__fs::filesystem::path *v43;
  int v44;
  int v45;
  const char *v46;
  int *v47;
  const char *v48;
  int v49;
  void *v50;
  void *v51;
  void *v52;
  NSObject *v53;
  FILE *v54;
  const char *v55;
  int v56;
  fpos_t v58[3];
  __int16 v59;
  void *__p[2];
  void (*v61)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v62;
  _QWORD *v63;
  std::string v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  _QWORD v70[6];
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  _QWORD v76[3];
  int v77;
  __int128 v78;
  uint64_t v79;
  __int128 __dst;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  std::string v84;
  fpos_t v85;
  __int16 v86;
  char __str[512];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v13 = a1 + 40;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40);
  v14 = vsnprintf(__str, 0x1FFuLL, a6, a7);
  if ((v14 & 0x80000000) == 0)
  {
    v15 = v14;
    if (v14 < 0x1FF)
    {
      v16 = 0;
      v17 = __str;
    }
    else
    {
      v16 = (char *)operator new[]();
      __p[0] = a7;
      if (vsnprintf(v16, v15 + 2 - 1, a6, a7) != v15)
        __assert_rtn("vlog", "CLLog.mm", 169, "newFullContentLength == fullContentLength");
      v17 = v16;
    }
    v18 = (int)v15 - 1;
    if (v17[v18] != 10)
      __assert_rtn("vlog", "CLLog.mm", 172, "'\\n' == buffer[fullContentLength - 1]");
    if (v15 >= 2)
    {
      v18 = v18;
      v19 = v17;
      do
      {
        if (*v19 == 10)
          *v19 = 32;
        ++v19;
        --v18;
      }
      while (v18);
    }
    Current = CFAbsoluteTimeGetCurrent();
    v21 = Current;
    if (*(_BYTE *)(a1 + 152))
    {
      if (a4 > 5)
        v22 = "NONE";
      else
        v22 = off_1E2957170[a4];
      fprintf(*(FILE **)(a1 + 200), "%s,%s,Time,%08.3f,Function,\"%s\",", v22, a2, Current, a5);
      fputs(v17, *(FILE **)(a1 + 200));
    }
    else
    {
      v23 = *(FILE **)(a1 + 184);
      if (v23 && *(_DWORD *)(a1 + 160) >= a4)
      {
        if (a4 > 5)
          v24 = "NONE";
        else
          v24 = off_1E2957170[a4];
        fprintf(v23, "%s,%s,Time,%08.3f,Function,\"%s\",", v24, a2, Current, a5);
        fputs(v17, *(FILE **)(a1 + 184));
        if (*(_DWORD *)(a1 + 172) >= a4)
          sub_18F3EFFF8(a1, 3, *(FILE **)(a1 + 184));
        v58[1] = v13;
        (*(void (**)(fpos_t))(*(_QWORD *)v13 + 16))(v13);
        v59 = 256;
        if (*(int *)(a1 + 12) >= 1)
        {
          v26 = *(FILE **)(a1 + 184);
          if (v26)
          {
            if (*(char *)(a1 + 151) < 0 ? *(_QWORD *)(a1 + 136) : *(unsigned __int8 *)(a1 + 151))
            {
              if (*(char *)(a1 + 79) < 0 ? *(_QWORD *)(a1 + 64) : *(unsigned __int8 *)(a1 + 79))
              {
                v58[0] = 0;
                fgetpos(v26, v58);
                if (v58[0] >= *(int *)(a1 + 12))
                {
                  v85 = v13;
                  (*(void (**)(fpos_t))(*(_QWORD *)v13 + 16))(v13);
                  v86 = 256;
                  sub_18F270374(__p, ".log");
                  v33 = sub_18F495604(a1, v29, v30, v31, v32);
                  sub_18F4951D4((const void **)(a1 + 56), a1 + 80, (uint64_t)__p, v33, &v84);
                  if (SHIBYTE(v61) < 0)
                    operator delete(__p[0]);
                  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
                  else
                    size = v84.__r_.__value_.__l.__size_;
                  v35 = &v82;
                  sub_18F2B6B4C((uint64_t)&v82, size + 4);
                  if (v83 < 0)
                    v35 = (__int128 *)v82;
                  if (size)
                  {
                    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v36 = &v84;
                    else
                      v36 = (std::string *)v84.__r_.__value_.__r.__words[0];
                    memmove(v35, v36, size);
                  }
                  strcpy((char *)v35 + size, ".bz2");
                  sub_18F3F0EC0(a1);
                  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v37 = &v84;
                  else
                    v37 = (std::string *)v84.__r_.__value_.__r.__words[0];
                  v38 = getuid();
                  v39 = getgid();
                  sub_18F3605AC(v37, v38, v39);
                  v41 = (char *)(a1 + 128);
                  v42 = (const std::__fs::filesystem::path *)(a1 + 128);
                  if (*(char *)(a1 + 151) < 0)
                    v42 = *(const std::__fs::filesystem::path **)v41;
                  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v43 = (const std::__fs::filesystem::path *)&v84;
                  else
                    v43 = (const std::__fs::filesystem::path *)v84.__r_.__value_.__r.__words[0];
                  rename(v42, v43, v40);
                  if (v44)
                  {
                    v45 = SHIBYTE(v83);
                    v46 = (const char *)v82;
                    v47 = __error();
                    v48 = (const char *)&v82;
                    if (v45 < 0)
                      v48 = v46;
                    syslog(3, "%s,%s,Failed to move aside log file %s (%d)\n", "ERROR", "CLLog", v48, *v47);
                  }
                  if (*(char *)(a1 + 151) < 0)
                    v41 = *(char **)v41;
                  sub_18F3F0928(a1, v41);
                  if (*(char *)(a1 + 103) < 0)
                  {
                    sub_18F26F9A4(&__dst, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
                  }
                  else
                  {
                    __dst = *(_OWORD *)(a1 + 80);
                    v81 = *(_QWORD *)(a1 + 96);
                  }
                  if (*(char *)(a1 + 79) < 0)
                  {
                    sub_18F26F9A4(&v78, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
                  }
                  else
                  {
                    v78 = *(_OWORD *)(a1 + 56);
                    v79 = *(_QWORD *)(a1 + 72);
                  }
                  v49 = *(_DWORD *)(a1 + 16);
                  v76[0] = 0;
                  v76[1] = v76;
                  v76[2] = 0x2020000000;
                  v77 = 0;
                  v50 = (void *)MEMORY[0x1E0C809B0];
                  v70[0] = MEMORY[0x1E0C809B0];
                  v70[1] = 3321888768;
                  v70[2] = sub_18F3F0F0C;
                  v70[3] = &unk_1E2952A48;
                  v70[5] = a1;
                  if (SHIBYTE(v81) < 0)
                  {
                    v51 = (void *)MEMORY[0x1E0C809B0];
                    sub_18F26F9A4(&v71, (void *)__dst, *((unint64_t *)&__dst + 1));
                    v50 = v51;
                  }
                  else
                  {
                    v71 = __dst;
                    v72 = v81;
                  }
                  v70[4] = v76;
                  v75 = v49;
                  if (SHIBYTE(v79) < 0)
                  {
                    v52 = v50;
                    sub_18F26F9A4(&v73, (void *)v78, *((unint64_t *)&v78 + 1));
                    v50 = v52;
                  }
                  else
                  {
                    v73 = v78;
                    v74 = v79;
                  }
                  v53 = *(NSObject **)(a1 + 208);
                  __p[0] = v50;
                  __p[1] = (void *)3321888768;
                  v61 = sub_18F3F12DC;
                  v62 = &unk_1E2952A80;
                  v69 = v49;
                  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
                    sub_18F26F9A4(&v64, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
                  else
                    v64 = v84;
                  if (SHIBYTE(v83) < 0)
                  {
                    sub_18F26F9A4(&v65, (void *)v82, *((unint64_t *)&v82 + 1));
                  }
                  else
                  {
                    v65 = v82;
                    v66 = v83;
                  }
                  if (SHIBYTE(v79) < 0)
                  {
                    sub_18F26F9A4(&v67, (void *)v78, *((unint64_t *)&v78 + 1));
                  }
                  else
                  {
                    v67 = v78;
                    v68 = v79;
                  }
                  v63 = v70;
                  dispatch_async(v53, __p);
                  if (SHIBYTE(v68) < 0)
                    operator delete((void *)v67);
                  if (SHIBYTE(v66) < 0)
                    operator delete((void *)v65);
                  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v64.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v74) < 0)
                    operator delete((void *)v73);
                  if (SHIBYTE(v72) < 0)
                    operator delete((void *)v71);
                  _Block_object_dispose(v76, 8);
                  if (SHIBYTE(v79) < 0)
                    operator delete((void *)v78);
                  if (SHIBYTE(v81) < 0)
                    operator delete((void *)__dst);
                  if (SHIBYTE(v83) < 0)
                    operator delete((void *)v82);
                  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v84.__r_.__value_.__l.__data_);
                  (*(void (**)(fpos_t))(*(_QWORD *)v13 + 24))(v13);
                }
              }
            }
          }
        }
        (*(void (**)(fpos_t))(*(_QWORD *)v13 + 24))(v13);
      }
      v54 = *(FILE **)(a1 + 192);
      if (v54 && *(_DWORD *)(a1 + 164) >= a4)
      {
        if (a4 > 5)
          v55 = "NONE";
        else
          v55 = off_1E2957170[a4];
        fprintf(v54, "%s,%s,Time,%08.3f,", v55, a2, v21);
        fputs(v17, *(FILE **)(a1 + 192));
      }
      if ((!a3 || *(_DWORD *)(a1 + 176)) && *(_DWORD *)(a1 + 168) >= a4)
      {
        if (a4)
          v56 = 5;
        else
          v56 = 3;
        syslog(v56, "%s", v17);
      }
    }
    if (v16)
      MEMORY[0x194001420](v16, 0x1000C8077774924);
  }
  return (*(uint64_t (**)(fpos_t))(*(_QWORD *)v13 + 24))(v13);
}

void sub_18F3EFC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  char a65;
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  char a79;
  uint64_t v79;

  if (a41 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a63 < 0)
    operator delete(a58);
  if (a57 < 0)
    operator delete(a52);
  _Block_object_dispose(&a65, 8);
  if (a72 < 0)
    operator delete(a69);
  if (a74 < 0)
    operator delete(a73);
  if (a76 < 0)
    operator delete(a75);
  if (a78 < 0)
    operator delete(a77);
  sub_18F346934((uint64_t)&a79);
  sub_18F346934((uint64_t)&a22);
  if (v79)
    MEMORY[0x194001420](v79, 0x1000C8077774924);
  sub_18F346934((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3EFD78(uint64_t a1, const char *a2, int a3, signed int a4, const char *a5, char *__src, va_list a7)
{
  int v13;
  char __dst[1628];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v13 = strncpy(__dst, __src, 0x65CuLL);
  sub_18F3EFE2C(v13, __dst);
  return sub_18F3EF424(a1, a2, a3, a4, a5, __dst, a7);
}

BOOL sub_18F3EFE2C(int a1, char *__s)
{
  int64_t v3;
  char *v4;
  char *v5;
  char *v6;
  int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  _BOOL8 result;
  NSObject *v14;
  int v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = strlen(__s);
  if (v3 < 1)
    return 1;
  v4 = &__s[v3];
  v5 = __s;
  while (1)
  {
    if (*v5 != 37)
    {
      v6 = v5;
      goto LABEL_18;
    }
    v6 = v5 + 1;
    v7 = v5[1];
    if (v7 == 123)
      break;
LABEL_11:
    v6 = v5 + 1;
    v12 = v5 + 1;
    if (v7 != 64)
    {
      if (v7 != 46)
        goto LABEL_18;
      if (v5[2] != 42)
        goto LABEL_18;
      v12 = v5 + 3;
      if (v5[3] != 80)
        goto LABEL_18;
      *(_WORD *)(v5 + 1) = 9572;
    }
    *v12 = 112;
LABEL_18:
    v5 = v6 + 1;
    if (v6 + 1 >= v4)
      return 1;
  }
  if (v6 != v4)
  {
    v8 = 0;
    while (1)
    {
      v9 = &v5[v8 + 2];
      if (v9 == v4)
        break;
      ++v8;
      if (*v9 == 125)
      {
        if (v8 == -1)
          goto LABEL_18;
        v10 = &v5[v8];
        v11 = (uint64_t)&v5[v8 + 1];
        memmove(v5, v6, v8 + 1);
        v10[1] = 37;
        v7 = v10[2];
        v5 = (char *)v11;
        goto LABEL_11;
      }
    }
  }
  if (qword_1EE16D3E0 != -1)
    dispatch_once(&qword_1EE16D3E0, &unk_1E29552C8);
  v14 = qword_1EE16D3D0;
  result = os_log_type_enabled((os_log_t)qword_1EE16D3D0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v15 = 136446210;
    v16 = __s;
    _os_log_error_impl(&dword_18F1DC000, v14, OS_LOG_TYPE_ERROR, "Failed parse os_log format specifier for shimming:missing closing brace,format,%{public}s", (uint8_t *)&v15, 0xCu);
    return 0;
  }
  return result;
}

uint64_t sub_18F3EFFF8(uint64_t a1, int a2, FILE *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  const void **v9;
  Dl_info v11;
  uint64_t v12;
  __int16 v13;
  void *v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = a1 + 40;
  v5 = *(_QWORD *)(a1 + 40);
  v12 = a1 + 40;
  (*(void (**)(uint64_t))(v5 + 16))(a1 + 40);
  v13 = 256;
  CFAbsoluteTimeGetCurrent();
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  *(_OWORD *)v14 = 0u;
  v7 = backtrace(v14, 128);
  v8 = a2 + 1;
  if (a2 + 1 < v7)
  {
    v9 = (const void **)&v14[v8];
    do
    {
      if (dladdr(*v9, &v11))
      {
        if (v11.dli_sname)
        {
          basename((char *)v11.dli_fname);
          fprintf(a3, "%s,%s,Time,%08.3f,%d\t%s\t0x%08lx %s + %lu\n", "STATUS");
        }
        else
        {
          basename((char *)v11.dli_fname);
          fprintf(a3, "%s,%s,Time,%08.3f,%d\t%s\t0x%08lx 0x%08lx + %lu\n", "STATUS");
        }
      }
      else
      {
        fprintf(a3, "%s,%s,Time,%08.3f,%d\t0x%08lx\n");
      }
      ++v8;
      ++v9;
    }
    while (v7 != v8);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_18F3F01F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_18F213574(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_18F3F0220(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  std::string *v9;
  const void *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  void **p_p;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  _QWORD *v36;
  unint64_t *v37;
  uint64_t v38;
  FILE *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  std::string v50;
  std::string v51;
  void *__p;
  __int128 __n;
  int v54;
  _QWORD v55[3];

  v55[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend_assertInside(*(void **)(*(_QWORD *)(a1 + 48) + 64), a2, a3, a4, a5);
  pthread_self();
  sub_18F1EE944(*(_QWORD *)(a1 + 24), "ShowError", (BOOL *)(a1 + 154));
  sub_18F1EE944(*(_QWORD *)(a1 + 24), "LogShowUI", (BOOL *)(a1 + 155));
  sub_18F1E4DFC(*(_QWORD *)(a1 + 24), "LogFileLevel", (_DWORD *)(a1 + 160));
  sub_18F1E4DFC(*(_QWORD *)(a1 + 24), "LogBufferLevel", (_DWORD *)(a1 + 164));
  sub_18F1E4DFC(*(_QWORD *)(a1 + 24), "LogConsoleLevel", (_DWORD *)(a1 + 168));
  sub_18F1E4DFC(*(_QWORD *)(a1 + 24), "LogStackLevel", (_DWORD *)(a1 + 172));
  sub_18F36A044(*(_QWORD *)(a1 + 24), "LogFileDirectory", a1 + 56);
  sub_18F36A044(*(_QWORD *)(a1 + 24), "LogFilePrefix", a1 + 80);
  sub_18F1EE944(*(_QWORD *)(a1 + 24), "LogFileFlush", (BOOL *)(a1 + 157));
  sub_18F1EE944(*(_QWORD *)(a1 + 24), "LogFence", (BOOL *)(a1 + 153));
  v54 = 0;
  sub_18F1E4DFC(*(_QWORD *)(a1 + 24), "LogBufferSize", &v54);
  if ((*(_DWORD *)(a1 + 160) & 0x80000000) != 0)
  {
    sub_18F3EF2E4(a1, 0, 0);
    goto LABEL_75;
  }
  v6 = *(_QWORD *)(a1 + 184);
  __p = 0;
  __n = 0uLL;
  if (!sub_18F36A044(*(_QWORD *)(a1 + 24), "LogFile", (uint64_t)&__p))
    goto LABEL_6;
  v7 = HIBYTE(__n);
  if (__n < 0)
    v7 = __n;
  if (!v7)
  {
LABEL_6:
    if (*(char *)(a1 + 79) < 0)
    {
      if (!*(_QWORD *)(a1 + 64))
        goto LABEL_43;
    }
    else if (!*(_BYTE *)(a1 + 79))
    {
      goto LABEL_43;
    }
    if (*(char *)(a1 + 103) < 0)
    {
      if (!*(_QWORD *)(a1 + 88))
        goto LABEL_43;
    }
    else if (!*(_BYTE *)(a1 + 103))
    {
      goto LABEL_43;
    }
    if (*(char *)(a1 + 79) >= 0)
      v8 = *(unsigned __int8 *)(a1 + 79);
    else
      v8 = *(_QWORD *)(a1 + 64);
    v9 = &v50;
    sub_18F2B6B4C((uint64_t)&v50, v8 + 1);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v50.__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (*(char *)(a1 + 79) >= 0)
        v10 = (const void *)(a1 + 56);
      else
        v10 = *(const void **)(a1 + 56);
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 47;
    v11 = *(char *)(a1 + 103);
    if (v11 >= 0)
      v12 = (const std::string::value_type *)(a1 + 80);
    else
      v12 = *(const std::string::value_type **)(a1 + 80);
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a1 + 103);
    else
      v13 = *(_QWORD *)(a1 + 88);
    v14 = std::string::append(&v50, v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = *(char *)(a1 + 127);
    if (v16 >= 0)
      v17 = (const std::string::value_type *)(a1 + 104);
    else
      v17 = *(const std::string::value_type **)(a1 + 104);
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a1 + 127);
    else
      v18 = *(_QWORD *)(a1 + 112);
    v19 = std::string::append(&v51, v17, v18);
    v20 = (void *)v19->__r_.__value_.__r.__words[0];
    v55[0] = v19->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v55 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
    v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__n) < 0)
      operator delete(__p);
    __p = v20;
    *(_QWORD *)&__n = v55[0];
    *(_QWORD *)((char *)&__n + 7) = *(_QWORD *)((char *)v55 + 7);
    HIBYTE(__n) = v21;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
  }
LABEL_43:
  if (__n >= 0)
    v22 = HIBYTE(__n);
  else
    v22 = __n;
  if (v22)
  {
    if (v6)
    {
      v23 = *(unsigned __int8 *)(a1 + 151);
      v24 = (char)v23;
      if ((v23 & 0x80u) != 0)
        v23 = *(_QWORD *)(a1 + 136);
      if (v22 == v23)
      {
        if (v24 >= 0)
          v25 = (unsigned __int8 *)(a1 + 128);
        else
          v25 = *(unsigned __int8 **)(a1 + 128);
        if ((HIBYTE(__n) & 0x80) != 0)
        {
          v28 = (char *)__p;
          if (memcmp(__p, v25, __n))
            goto LABEL_63;
        }
        else if (HIBYTE(__n))
        {
          p_p = &__p;
          v27 = HIBYTE(__n);
          while (*(unsigned __int8 *)p_p == *v25)
          {
            p_p = (void **)((char *)p_p + 1);
            ++v25;
            if (!--v27)
              goto LABEL_66;
          }
          goto LABEL_60;
        }
LABEL_66:
        sub_18F3F0E54(a1, *(unsigned __int8 *)(a1 + 157));
        v30 = (const char *)&__p;
        if (__n < 0)
          v30 = (const char *)__p;
        if (*(_BYTE *)(a1 + 157))
          v31 = " and flushing immediately";
        else
          v31 = " no flush";
        syslog(5, "%s,%s,logging locations to %s%s\n", "NOTICE", "CLLog", v30, v31);
        goto LABEL_73;
      }
    }
LABEL_60:
    if (__n >= 0)
      v28 = (char *)&__p;
    else
      v28 = (char *)__p;
LABEL_63:
    sub_18F3F0928(a1, v28);
    if (!v6)
    {
      v29 = *(_QWORD *)(a1 + 216);
      if (v29)
        sub_18F3F4340(v29, *(FILE **)(a1 + 184));
    }
    goto LABEL_66;
  }
  sub_18F3EF2E4(a1, 0, 0);
LABEL_73:
  if (SHIBYTE(__n) < 0)
    operator delete(__p);
LABEL_75:
  if ((*(_DWORD *)(a1 + 164) & 0x80000000) != 0 || (v32 = v54, v54 < 1))
  {
    v47 = *(std::__shared_weak_count **)(a1 + 224);
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(p_shared_owners);
      while (__stlxr(v49 - 1, p_shared_owners));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    *(_QWORD *)(a1 + 192) = 0;
  }
  else
  {
    if (v54 > 0xA00000)
    {
      v32 = 10485760;
      v54 = 10485760;
    }
    v33 = *(_QWORD *)(a1 + 216);
    if (!v33 || *(_DWORD *)(v33 + 16) != v32)
    {
      v34 = (_QWORD *)operator new();
      v35 = v54;
      *v34 = 0;
      v34[1] = 0;
      *((_DWORD *)v34 + 5) = 0;
      *((_DWORD *)v34 + 6) = 0;
      *((_DWORD *)v34 + 4) = v35;
      sub_18F1E8C74((uint64_t)(v34 + 4), "CLCircularLogBuffer", 1, 1);
      __p = v34;
      v51.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
      v36 = (_QWORD *)operator new();
      v36[1] = 0;
      v37 = v36 + 1;
      *v36 = &off_1E2952848;
      v36[2] = 0;
      v36[3] = v34;
      *(_QWORD *)&__n = v36;
      v38 = *(_QWORD *)(a1 + 216);
      if (v38)
      {
        v39 = sub_18F3F4178((FILE **)v34);
        sub_18F3F4340(v38, v39);
      }
      do
        v40 = __ldxr(v37);
      while (__stxr(v40 + 1, v37));
      v41 = *(std::__shared_weak_count **)(a1 + 224);
      *(_QWORD *)(a1 + 216) = v34;
      *(_QWORD *)(a1 + 224) = v36;
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v44 = (std::__shared_weak_count *)__n;
      if ((_QWORD)__n)
      {
        v45 = (unint64_t *)(__n + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v33 = *(_QWORD *)(a1 + 216);
    }
    *(_QWORD *)(a1 + 192) = sub_18F3F4178((FILE **)v33);
    syslog(5, "%s,%s,logging locations to an internal buffer with capacity %d\n", "NOTICE", "CLLog", v54);
  }
}

void sub_18F3F0890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F3F0928(uint64_t a1, char *a2)
{
  uint64_t v4;
  uid_t v5;
  gid_t v6;
  FILE *v7;
  FILE *v8;
  char *v9;
  unint64_t v10;
  unsigned __int8 v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  void **v36;
  void **v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v58[2];
  char v59;
  void *v60[2];
  char v61;
  uint32_t bufsize;
  void *v63[2];
  unsigned __int8 v64;
  char buf[1024];
  char __p[114];
  _BYTE v67[1534];

  *(_QWORD *)&v67[1526] = *MEMORY[0x1E0C80C00];
  v4 = a1 + 40;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40);
  if (a2)
  {
    v5 = getuid();
    v6 = getgid();
    sub_18F3605AC(a2, v5, v6);
    v7 = fopen(a2, "a");
    if (v7)
    {
      MEMORY[0x1940012AC](a1 + 128, a2);
      sub_18F3EF2E4(a1, v7, 1);
      sub_18F3F0E54(a1, *(unsigned __int8 *)(a1 + 157));
      v8 = *(FILE **)(a1 + 184);
      if (v8)
        sub_18F3619D4(v8);
      sub_18F1F77DC();
      sub_18F37567C((uint64_t)__p);
      if (__p[23] >= 0)
        v9 = __p;
      else
        v9 = *(char **)__p;
      sub_18F270374(v63, v9);
      if (__p[23] < 0)
        operator delete(*(void **)__p);
      v10 = v64;
      v11 = v64;
      if ((v64 & 0x80u) != 0)
        v10 = (unint64_t)v63[1];
      if (!v10)
      {
        MEMORY[0x1940012AC](v63, "Unplugged!");
        v11 = v64;
      }
      bzero(__p, 0x65CuLL);
      v12 = v63;
      if ((v11 & 0x80u) != 0)
        v12 = (void **)v63[0];
      snprintf(__p, 0x65CuLL, "CoreLocation-%s\n", (const char *)v12);
      sub_18F3EF384(a1, v13, 0, v14, v15, v16, v17, v18, (char)__p);
      bzero(__p, 0x65CuLL);
      snprintf(__p, 0x65CuLL, "locationd was compiled on %s at %s\n", "Aug 13 2024", "20:10:12");
      sub_18F3EF384(a1, v19, 0, v20, v21, v22, v23, v24, (char)__p);
      bufsize = 1024;
      if (_NSGetExecutablePath(buf, &bufsize))
      {
        bzero(__p, 0x65CuLL);
        v25 = sub_18F1F77DC();
        v26 = v60;
        sub_18F375494(v25, (uint64_t)v60);
        if (v61 < 0)
          v26 = (void **)v60[0];
        sub_18F1F77DC();
        sub_18F375004((uint64_t)v58);
        if (v59 >= 0)
          v27 = v58;
        else
          v27 = (void **)v58[0];
        snprintf(__p, 0x65CuLL, "/usr/libexec/locationd @ system model %s / version %s\n", (const char *)v26, (const char *)v27);
        if (v59 < 0)
          operator delete(v58[0]);
        if (v61 < 0)
          operator delete(v60[0]);
      }
      else
      {
        bzero(__p, 0x65CuLL);
        v35 = sub_18F1F77DC();
        v36 = v60;
        sub_18F375494(v35, (uint64_t)v60);
        if (v61 < 0)
          v36 = (void **)v60[0];
        sub_18F1F77DC();
        sub_18F375004((uint64_t)v58);
        if (v59 >= 0)
          v37 = v58;
        else
          v37 = (void **)v58[0];
        snprintf(__p, 0x65CuLL, "%s @ system model %s / version %s\n", buf, (const char *)v36, (const char *)v37);
        if (v59 < 0)
          operator delete(v58[0]);
        if (v61 < 0)
          operator delete(v60[0]);
      }
      sub_18F3EF384(a1, v28, 0, v29, v30, v31, v32, v33, (char)__p);
      bzero(__p, 0x65CuLL);
      sub_18F1F77DC();
      sub_18F3758C4((uint64_t)v60);
      if (v61 >= 0)
        v38 = v60;
      else
        v38 = (void **)v60[0];
      snprintf(__p, 0x65CuLL, "IOPlatformSerialNumber: %s\n", (const char *)v38);
      if (v61 < 0)
        operator delete(v60[0]);
      sub_18F3EF384(a1, v39, 0, v40, v41, v42, v43, v44, (char)__p);
      bzero(v67, 0x5EAuLL);
      strcpy(__p, "Begin settings dump (read at construction of CLSettings or upon darwin notification 'com.apple.locationd/prefs')\n");
      sub_18F3EF384(a1, v45, 0, v46, v47, v48, v49, v50, (char)__p);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 792))(*(_QWORD *)(a1 + 24));
      bzero(&__p[19], 0x649uLL);
      strcpy(__p, "End settings dump\n");
      sub_18F3EF384(a1, v51, 0, v52, v53, v54, v55, v56, (char)__p);
      if ((char)v64 < 0)
        operator delete(v63[0]);
    }
    else
    {
      v34 = __error();
      syslog(3, "%s,%s,could not open locations log %s, errno %d\n", "ERROR", "CLLog", a2, *v34);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_18F3F0DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  sub_18F346934((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3F0E54(uint64_t a1, int a2)
{
  uint64_t v3;
  FILE *v4;

  v3 = a1 + 40;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40);
  *(_BYTE *)(v3 + 117) = a2 != 0;
  v4 = *(FILE **)(v3 + 144);
  if (v4)
    setvbuf(v4, 0, a2 != 0, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
}

uint64_t sub_18F3F0EC0(uint64_t a1)
{
  _QWORD *v1;
  FILE *v2;

  v1 = (_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 40) + 16))(a1 + 40);
  v2 = (FILE *)v1[18];
  if (v2)
    fflush(v2);
  return (*(uint64_t (**)(_QWORD *))(*v1 + 24))(v1);
}

uint64_t sub_18F3F0F0C(uint64_t a1, char *a2)
{
  uint64_t v4;
  size_t v5;
  void **v6;
  const void *v7;
  int v8;
  const char *v9;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 40);
  sub_18F270374(v21, a2);
  if (*(char *)(a1 + 71) >= 0)
    v5 = *(unsigned __int8 *)(a1 + 71);
  else
    v5 = *(_QWORD *)(a1 + 56);
  v6 = v19;
  sub_18F2B6B4C((uint64_t)v19, v5 + 1);
  if (v20 < 0)
    v6 = (void **)v19[0];
  if (v5)
  {
    if (*(char *)(a1 + 71) >= 0)
      v7 = (const void *)(a1 + 48);
    else
      v7 = *(const void **)(a1 + 48);
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)v6 + v5) = 95;
  if (sub_18F495610(v4, (char **)v21, (char *)v19))
  {
    sub_18F270374(v17, a2);
    sub_18F270374(v15, ".log.bz2");
    if ((sub_18F4956E4(v4, v17, (char *)v15) & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      sub_18F270374(v13, a2);
      sub_18F270374(__p, ".log");
      v8 = sub_18F4956E4(v4, v13, (char *)__p);
      if (v12 < 0)
        operator delete(__p[0]);
      if (v14 < 0)
        operator delete(v13[0]);
    }
    if (v16 < 0)
      operator delete(v15[0]);
    if (v18 < 0)
      operator delete(v17[0]);
  }
  else
  {
    v8 = 0;
  }
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
  {
    operator delete(v21[0]);
    if (!v8)
      return 1;
  }
  else if (!v8)
  {
    return 1;
  }
  if (++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) > *(_DWORD *)(a1 + 96))
  {
    LOBYTE(v21[0]) = 0;
    v9 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0)
      v9 = *(const char **)v9;
    if (snprintf((char *)v21, 0x400uLL, "%s/%s", v9, a2) > 1023)
    {
      syslog(3, "%s,%s,Rotation path is too long, could not delete old logs.\n", "ERROR", "CLLog");
    }
    else if (unlink((const char *)v21))
    {
      perror("Failed to delete log");
    }
  }
  return 1;
}

void sub_18F3F1174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  if (a37 < 0)
    operator delete(a32);
  if (a43 < 0)
    operator delete(a38);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_18F3F11F8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *result;
  __int128 v6;

  if (*(char *)(a2 + 71) < 0)
  {
    sub_18F26F9A4((_BYTE *)(a1 + 48), *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
  }
  result = (_BYTE *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
    return sub_18F26F9A4(result, *(void **)(a2 + 72), *(_QWORD *)(a2 + 80));
  v6 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)result = v6;
  return result;
}

void sub_18F3F127C(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 71) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_18F3F1298(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_18F3F12DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  _QWORD *v10;

  if (!*(_DWORD *)(a1 + 112))
    goto LABEL_7;
  v6 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    v6 = *(const char **)v6;
  v7 = (const char *)(a1 + 64);
  v8 = (const char *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    v8 = *(const char **)v7;
  if (!sub_18F360D08(v6, v8, a3, a4, a5))
  {
    if (*(char *)(a1 + 87) < 0)
      v7 = *(const char **)v7;
    syslog(3, "%s,%s,Failed to write %s\n", "ERROR", "CLLog", v7);
  }
  else
  {
LABEL_7:
    v9 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v9 = *(const char **)v9;
    unlink(v9);
  }
  if ((*(_DWORD *)(a1 + 112) & 0x80000000) == 0)
  {
    v10 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v10 = (_QWORD *)*v10;
    sub_18F404218((uint64_t)v10, *(_QWORD *)(a1 + 32));
  }
}

_BYTE *sub_18F3F13AC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *result;
  __int128 v7;

  if (*(char *)(a2 + 63) < 0)
  {
    sub_18F26F9A4((_BYTE *)(a1 + 40), *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    sub_18F26F9A4((_BYTE *)(a1 + 64), *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v5;
  }
  result = (_BYTE *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
    return sub_18F26F9A4(result, *(void **)(a2 + 88), *(_QWORD *)(a2 + 96));
  v7 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)result = v7;
  return result;
}

void sub_18F3F1460(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 87) < 0)
    operator delete(*v3);
  if (*(char *)(v2 + 63) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_18F3F1494(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void sub_18F3F14E8(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  stat *v8;
  FILE *v9;
  FILE *v10;
  char v11;
  const char *p_dst;
  char v13;
  __int128 *v14;
  char *v15;
  const char *v16;
  std::error_code *v17;
  const std::__fs::filesystem::path *v18;
  stat *v19;
  stat *v20;
  char v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *st_ino;
  unint64_t *v26;
  unint64_t v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  void **v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  void **v39;
  stat *v40;
  stat *v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  stat *v54;
  stat *v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  void **v62;
  void **v63;
  stat *v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  void *v69[2];
  int64_t v70;
  BOOL v71;
  _QWORD v72[5];
  __int128 v73;
  uint64_t v74;
  __int128 __p;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 __dst;
  uint64_t v80;
  uint64_t v81;
  pthread_mutex_t *v82;
  __int16 v83;
  stat v84;

  v2 = *(_QWORD *)(a1 + 40);
  v81 = a1 + 40;
  (*(void (**)(void))(v2 + 16))();
  v83 = 256;
  v7 = sub_18F495604(a1, v3, v4, v5, v6);
  if (*(char *)(a1 + 79) < 0)
  {
    sub_18F26F9A4(&__dst, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
  }
  else
  {
    __dst = *(_OWORD *)(a1 + 56);
    v80 = *(_QWORD *)(a1 + 72);
  }
  if (*(char *)(a1 + 103) < 0)
  {
    sub_18F26F9A4(&v77, *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
  }
  else
  {
    v77 = *(_OWORD *)(a1 + 80);
    v78 = *(_QWORD *)(a1 + 96);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    syslog(5, "%s,%s,dumping internal buffer\n", "NOTICE", "CLLog");
    sub_18F495538(a1, (std::string *)&v84);
    if ((v84.st_gid & 0x80000000) == 0)
      v8 = &v84;
    else
      v8 = *(stat **)&v84.st_dev;
    v9 = fopen((const char *)v8, "a");
    v10 = v9;
    if (SHIBYTE(v84.st_gid) < 0)
    {
      operator delete(*(void **)&v84.st_dev);
      if (v10)
        goto LABEL_13;
    }
    else if (v9)
    {
LABEL_13:
      sub_18F3F4340(*(_QWORD *)(a1 + 216), v10);
      fclose(v10);
      v11 = 1;
      goto LABEL_16;
    }
  }
  v11 = 0;
LABEL_16:
  if (v80 >= 0)
    p_dst = (const char *)&__dst;
  else
    p_dst = (const char *)__dst;
  if (!stat(p_dst, &v84))
  {
    v13 = HIBYTE(v80);
    if (v80 >= 0)
      v14 = &__dst;
    else
      v14 = (__int128 *)__dst;
    v72[0] = MEMORY[0x1E0C809B0];
    v72[1] = 3321888768;
    v72[2] = sub_18F3F20AC;
    v72[3] = &unk_1E2952BB8;
    v72[4] = a1;
    if (SHIBYTE(v78) < 0)
    {
      sub_18F26F9A4(&v73, (void *)v77, *((unint64_t *)&v77 + 1));
      v13 = HIBYTE(v80);
    }
    else
    {
      v73 = v77;
      v74 = v78;
    }
    if (v13 < 0)
    {
      sub_18F26F9A4(&__p, (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      __p = __dst;
      v76 = v80;
    }
    sub_18F404218((uint64_t)v14, (uint64_t)v72);
    if (SHIBYTE(v76) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v74) < 0)
      operator delete((void *)v73);
  }
  sub_18F3F0EC0(a1);
  v15 = (char *)(a1 + 128);
  v16 = (const char *)(a1 + 128);
  if (*(char *)(a1 + 151) < 0)
    v16 = *(const char **)v15;
  if (!stat(v16, &v84))
  {
    sub_18F495538(a1, (std::string *)&v84);
    v18 = (const std::__fs::filesystem::path *)(a1 + 128);
    if (*(char *)(a1 + 151) < 0)
      v18 = *(const std::__fs::filesystem::path **)v15;
    if ((v84.st_gid & 0x80000000) == 0)
      v19 = &v84;
    else
      v19 = *(stat **)&v84.st_dev;
    rename(v18, (const std::__fs::filesystem::path *)v19, v17);
    if ((v84.st_gid & 0x80000000) == 0)
      v20 = &v84;
    else
      v20 = *(stat **)&v84.st_dev;
    sub_18F36056C((const char *)v20);
    if (*(char *)(a1 + 151) < 0)
      v15 = *(char **)v15;
    sub_18F3F0928(a1, v15);
    if (SHIBYTE(v84.st_gid) < 0)
      operator delete(*(void **)&v84.st_dev);
    v11 = 1;
  }
  v71 = 0;
  sub_18F3796B4(&v84);
  if ((sub_18F1EE944(*(uint64_t *)&v84.st_dev, "LogNatalimetry", &v71) & 1) != 0)
  {
    v21 = 1;
  }
  else
  {
    sub_18F3796B4(v69);
    v21 = sub_18F1EE944((uint64_t)v69[0], "LogCalorimetry", &v71);
    v22 = (std::__shared_weak_count *)v69[1];
    if (v69[1])
    {
      v23 = (unint64_t *)((char *)v69[1] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  st_ino = (std::__shared_weak_count *)v84.st_ino;
  if (!v84.st_ino)
    goto LABEL_60;
  v26 = (unint64_t *)(v84.st_ino + 8);
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (v27)
  {
LABEL_60:
    if ((v21 & 1) != 0)
      goto LABEL_61;
LABEL_117:
    v71 = 0;
    goto LABEL_118;
  }
  ((void (*)(std::__shared_weak_count *))st_ino->__on_zero_shared)(st_ino);
  std::__shared_weak_count::__release_weak(st_ino);
  if ((v21 & 1) == 0)
    goto LABEL_117;
LABEL_61:
  if (v71)
  {
    sub_18F379D5C(0, &v68);
    v28 = std::string::append(&v68, "userinfo");
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    *(_QWORD *)&v84.st_uid = *((_QWORD *)&v28->__r_.__value_.__l + 2);
    *(_OWORD *)&v84.st_dev = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append((std::string *)&v84, ".plist");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v70 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)v69 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v84.st_gid) < 0)
      operator delete(*(void **)&v84.st_dev);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if (v70 >= 0)
      v32 = v69;
    else
      v32 = (void **)v69[0];
    if (!stat((const char *)v32, &v84))
    {
      sub_18F495014((uint64_t)&v66);
      v33 = std::string::append(&v66, "/");
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      v35 = std::string::append(&v67, "userinfo");
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      v37 = std::string::append(&v68, ".log");
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      *(_QWORD *)&v84.st_uid = *((_QWORD *)&v37->__r_.__value_.__l + 2);
      *(_OWORD *)&v84.st_dev = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (v70 >= 0)
        v39 = v69;
      else
        v39 = (void **)v69[0];
      if ((v84.st_gid & 0x80000000) == 0)
        v40 = &v84;
      else
        v40 = *(stat **)&v84.st_dev;
      sub_18F3606A4((const char *)v39, (const char *)v40);
      if ((v84.st_gid & 0x80000000) == 0)
        v41 = &v84;
      else
        v41 = *(stat **)&v84.st_dev;
      sub_18F36056C((const char *)v41);
      if (SHIBYTE(v84.st_gid) < 0)
        operator delete(*(void **)&v84.st_dev);
    }
    sub_18F379D5C(0, &v67);
    v42 = std::string::append(&v67, "cache");
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    *(_QWORD *)&v84.st_uid = *((_QWORD *)&v42->__r_.__value_.__l + 2);
    *(_OWORD *)&v84.st_dev = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    v44 = std::string::append((std::string *)&v84, ".plist");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v84.st_gid) < 0)
      operator delete(*(void **)&v84.st_dev);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = &v68;
    else
      v46 = (std::string *)v68.__r_.__value_.__r.__words[0];
    if (!stat((const char *)v46, &v84))
    {
      sub_18F495014((uint64_t)&v65);
      v47 = std::string::append(&v65, "/");
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v66.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      v49 = std::string::append(&v66, "cache");
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      v51 = std::string::append(&v67, ".log");
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      *(_QWORD *)&v84.st_uid = *((_QWORD *)&v51->__r_.__value_.__l + 2);
      *(_OWORD *)&v84.st_dev = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = &v68;
      else
        v53 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if ((v84.st_gid & 0x80000000) == 0)
        v54 = &v84;
      else
        v54 = *(stat **)&v84.st_dev;
      sub_18F3606A4((const char *)v53, (const char *)v54);
      if ((v84.st_gid & 0x80000000) == 0)
        v55 = &v84;
      else
        v55 = *(stat **)&v84.st_dev;
      sub_18F36056C((const char *)v55);
      if (SHIBYTE(v84.st_gid) < 0)
        operator delete(*(void **)&v84.st_dev);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70) < 0)
      operator delete(v69[0]);
  }
LABEL_118:
  sub_18F494E54((uint64_t)&v67);
  v56 = std::string::append(&v67, "/");
  v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v68.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  v58 = std::string::append(&v68, "com.apple.timed");
  v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  *(_QWORD *)&v84.st_uid = *((_QWORD *)&v58->__r_.__value_.__l + 2);
  *(_OWORD *)&v84.st_dev = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  v60 = std::string::append((std::string *)&v84, ".plist");
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v70 = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)v69 = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v84.st_gid) < 0)
    operator delete(*(void **)&v84.st_dev);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (v70 >= 0)
    v62 = v69;
  else
    v62 = (void **)v69[0];
  if (stat((const char *)v62, &v84))
    goto LABEL_143;
  sub_18F494D6C((uint64_t)&v68);
  sub_18F270374(&v67, "com.apple.timed");
  sub_18F270374(&v66, ".plist.log");
  sub_18F4951D4((const void **)&v68.__r_.__value_.__l.__data_, (uint64_t)&v67, (uint64_t)&v66, v7, (std::string *)&v84);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (v70 >= 0)
    v63 = v69;
  else
    v63 = (void **)v69[0];
  if ((v84.st_gid & 0x80000000) == 0)
    v64 = &v84;
  else
    v64 = *(stat **)&v84.st_dev;
  if (sub_18F3606A4((const char *)v63, (const char *)v64) == 1)
    syslog(5, "%s,%s,could not copy %s log\n", "WARNING", "CLLog", "com.apple.timed");
  if ((SHIBYTE(v84.st_gid) & 0x80000000) == 0)
  {
LABEL_143:
    if ((v11 & 1) != 0)
      goto LABEL_145;
    goto LABEL_144;
  }
  operator delete(*(void **)&v84.st_dev);
  if ((v11 & 1) == 0)
LABEL_144:
    syslog(5, "%s,%s,could not dump log file\n", "WARNING", "CLLog");
LABEL_145:
  if (SHIBYTE(v70) < 0)
    operator delete(v69[0]);
  if (SHIBYTE(v78) < 0)
    operator delete((void *)v77);
  if (SHIBYTE(v80) < 0)
    operator delete((void *)__dst);
  if (HIBYTE(v83))
  {
    if ((_BYTE)v83)
      pthread_mutex_unlock(v82);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v81 + 24))(v81);
  }
}

void sub_18F3F1E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;

  if (a30 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a17 < 0)
    operator delete(a12);
  if (a37 < 0)
    operator delete(a32);
  if (a44 < 0)
    operator delete(a39);
  if (a63 < 0)
    operator delete(a58);
  if (*(char *)(v63 - 233) < 0)
    operator delete(*(void **)(v63 - 256));
  sub_18F346934(v63 - 232);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3F20AC(uint64_t a1, char *a2)
{
  uint64_t v4;
  size_t v5;
  std::string *v6;
  const void *v7;
  int v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  size_t v13;
  std::string *v14;
  const void *v15;
  std::string *v16;
  std::error_code *v17;
  int v18;
  void *v19;
  const std::__fs::filesystem::path *v20;
  const std::__fs::filesystem::path *v21;
  void *__p[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  std::string v29;
  std::string v30;
  __int128 v31;
  int64_t v32;

  v4 = *(_QWORD *)(a1 + 32);
  sub_18F270374(&v31, a2);
  if (*(char *)(a1 + 63) >= 0)
    v5 = *(unsigned __int8 *)(a1 + 63);
  else
    v5 = *(_QWORD *)(a1 + 48);
  v6 = &v30;
  sub_18F2B6B4C((uint64_t)&v30, v5 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if (v5)
  {
    if (*(char *)(a1 + 63) >= 0)
      v7 = (const void *)(a1 + 40);
    else
      v7 = *(const void **)(a1 + 40);
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 95;
  if (sub_18F495610(v4, (char **)&v31, (char *)&v30))
  {
    sub_18F270374(&v29, a2);
    sub_18F270374(v27, ".log.bz2");
    if ((sub_18F4956E4(v4, (void **)&v29.__r_.__value_.__l.__data_, (char *)v27) & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      sub_18F270374(v25, a2);
      sub_18F270374(__p, ".log");
      v8 = sub_18F4956E4(v4, v25, (char *)__p);
      if (v24 < 0)
        operator delete(__p[0]);
      if (v26 < 0)
        operator delete(v25[0]);
    }
    if (v28 < 0)
      operator delete(v27[0]);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = 0;
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32) < 0)
  {
    operator delete((void *)v31);
    if (!v8)
      return 1;
  }
  else if (!v8)
  {
    return 1;
  }
  sub_18F495014((uint64_t)&v29);
  v9 = std::string::append(&v29, "/");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v30, a2);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v32 = v11->__r_.__value_.__r.__words[2];
  v31 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 87) >= 0)
    v13 = *(unsigned __int8 *)(a1 + 87);
  else
    v13 = *(_QWORD *)(a1 + 72);
  v14 = &v29;
  sub_18F2B6B4C((uint64_t)&v29, v13 + 1);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if (v13)
  {
    if (*(char *)(a1 + 87) >= 0)
      v15 = (const void *)(a1 + 64);
    else
      v15 = *(const void **)(a1 + 64);
    memmove(v14, v15, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 47;
  v16 = std::string::append(&v29, a2);
  v30 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v18 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
  v19 = (void *)v30.__r_.__value_.__r.__words[0];
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = (const std::__fs::filesystem::path *)&v30;
  else
    v20 = (const std::__fs::filesystem::path *)v30.__r_.__value_.__r.__words[0];
  if (v32 >= 0)
    v21 = (const std::__fs::filesystem::path *)&v31;
  else
    v21 = (const std::__fs::filesystem::path *)v31;
  rename(v20, v21, v17);
  sub_18F36056C((const char *)v21);
  if (v18 < 0)
    operator delete(v19);
  if (SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  return 1;
}

void sub_18F3F23A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 57) < 0)
    operator delete(*(void **)(v35 - 80));
  _Unwind_Resume(exception_object);
}

_BYTE *sub_18F3F2478(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  _BYTE *result;
  __int128 v6;

  if (*(char *)(a2 + 63) < 0)
  {
    sub_18F26F9A4((_BYTE *)(a1 + 40), *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  result = (_BYTE *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
    return sub_18F26F9A4(result, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  v6 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)result = v6;
  return result;
}

void sub_18F3F24FC(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 63) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_18F3F2518(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

os_log_t sub_18F3F255C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1EE16D3D0 = (uint64_t)result;
  return result;
}

void sub_18F3F258C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194001438);
}

FILE **sub_18F3F25B0(uint64_t a1)
{
  FILE **result;

  result = *(FILE ***)(a1 + 24);
  if (result)
  {
    sub_18F3F409C(result);
    JUMPOUT(0x194001438);
  }
  return result;
}

uint64_t sub_18F3F25E4(uint64_t a1, uint64_t a2)
{
  if (sub_18F2AB00C(a2, (uint64_t)&unk_1E2948AB8))
    return a1 + 24;
  else
    return 0;
}

FILE **sub_18F3F2624(FILE ***a1)
{
  FILE **result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_18F3F409C(result);
    JUMPOUT(0x194001438);
  }
  return result;
}

void sub_18F3F2664(uint64_t a1)
{
  sub_18F387C84(a1);
  JUMPOUT(0x194001438);
}

BOOL sub_18F3F268C(uint64_t a1, const __CFString *a2, const void *a3)
{
  sub_18F389750(a1, a2, a3);
  return sub_18F1E4D5C(a1);
}

os_log_t sub_18F3F2DB8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Altimeter");
  qword_1EE16D480 = (uint64_t)result;
  return result;
}

uint64_t sub_18F3F2DE4(uint64_t a1, uint64_t a2, float a3)
{
  NSObject *v5;
  char *v7;
  uint8_t buf[4];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a1 = 0;
  *(float *)(a1 + 4) = a3;
  *(_BYTE *)(a1 + 8) = 0;
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E29571A0);
  v5 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v9 = a2;
    _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_INFO, "motion default ignored,'%{public}s'.", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E29571A0);
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CLMotionDefaultsWrite<float>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = float]", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  return a1;
}

void sub_18F3F306C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x194001438](v15, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_18F3F31B4(uint64_t a1, CLConnectionMessage **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  char *v21;
  uint8_t buf[4];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v3, v6, v4, v7, v8, v5, 0);
  if (*a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9)) != 0
    && (v14 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, (uint64_t)CFSTR("CMErrorMessage"), v12, v13)) != 0)
  {
    v19 = objc_msgSend_intValue(v14, v15, v16, v17, v18);
  }
  else
  {
    v19 = 103;
  }
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E29552E8);
  v20 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v23 = v19;
    _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_FAULT, "Failed with CMError code %{public}d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E29552E8);
    v21 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMOdometerSuitabilityManagerProxy _startDaemonConnection]_block_invoke", "CoreLocation: %s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
  }
}

void sub_18F3F33C8(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ExecutablePathFromPid;
  uint64_t v7;
  NSObject *v8;
  pid_t v9;
  uint64_t v10;
  char *v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  pid_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = getpid();
  ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2, v4, v5);
  if (ExecutablePathFromPid)
  {
    v7 = ExecutablePathFromPid;
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E29552E8);
    v8 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
    {
      v9 = getpid();
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      v13 = v7;
      v14 = 1024;
      v15 = v9;
      v16 = 2048;
      v17 = v10;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_INFO, "CMOdometerSuitability client connection interrupt, %@, %d, %p", buf, 0x1Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E29552E8);
      getpid();
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMOdometerSuitabilityManagerProxy _startDaemonConnection]_block_invoke", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
}

void sub_18F3F3780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_18F2A8438((uint64_t)&a9);
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_18F3F37BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  NSSet *v16;
  void *DictionaryOfClasses;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  _QWORD *v28;
  NSObject *v29;
  NSObject *v30;
  char *v31;
  _QWORD block[6];
  _QWORD v33[6];
  uint8_t buf[1640];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 32);
  if (v6)
  {
    v8 = (void *)objc_msgSend_copy(v6, a2, a3, a4, a5);
    v9 = (void *)MEMORY[0x1E0C99E60];
    v10 = objc_opt_class();
    v11 = objc_opt_class();
    v12 = objc_opt_class();
    v16 = (NSSet *)objc_msgSend_setWithObjects_(v9, v13, v10, v14, v15, v11, v12, 0);
    if (*(_QWORD *)a2)
    {
      DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v16);
      if (DictionaryOfClasses)
      {
        v21 = DictionaryOfClasses;
        v22 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v18, (uint64_t)CFSTR("CMOdometerSuitabilityObject"), v19, v20);
        v26 = objc_msgSend_objectForKeyedSubscript_(v21, v23, (uint64_t)CFSTR("CMErrorMessage"), v24, v25);
        if (v26)
        {
          v27 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
          v33[0] = MEMORY[0x1E0C809B0];
          v33[1] = 3221225472;
          v33[2] = sub_18F3F3A84;
          v33[3] = &unk_1E2955B60;
          v33[4] = v26;
          v33[5] = v8;
          v28 = v33;
          v29 = v27;
        }
        else
        {
          if (!v22)
          {
            if (qword_1ECEDEE98 != -1)
              dispatch_once(&qword_1ECEDEE98, &unk_1E29552E8);
            v30 = off_1ECEDEE90;
            if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F1DC000, v30, OS_LOG_TYPE_FAULT, "Unable to parse kCLConnectionMessageOdometerSuitabilityUpdate message!", buf, 2u);
            }
            if (sub_18F1FCA08(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1ECEDEE98 != -1)
                dispatch_once(&qword_1ECEDEE98, &unk_1E29552E8);
              v31 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 0, "-[CMOdometerSuitabilityManagerProxy _startOdometerSuitabilityUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v31);
              if (v31 != (char *)buf)
                free(v31);
            }
            goto LABEL_9;
          }
          v29 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = sub_18F3F3B00;
          block[3] = &unk_1E2955B38;
          block[4] = v22;
          block[5] = v8;
          v28 = block;
        }
        dispatch_async(v29, v28);
      }
    }
LABEL_9:

  }
}

void sub_18F3F3A84(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  v2 = (void *)MEMORY[0x194001B4C]();
  v3 = (void *)MEMORY[0x1E0CB35C8];
  v4 = *(_QWORD *)(a1 + 40);
  v9 = objc_msgSend_integerValue(*(void **)(a1 + 32), v5, v6, v7, v8);
  v11 = objc_msgSend_errorWithDomain_code_userInfo_(v3, v10, (uint64_t)CFSTR("CMErrorDomain"), v9, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v4, 0, v11);
  objc_autoreleasePoolPop(v2);
}

void sub_18F3F3B00(uint64_t a1)
{
  void *v2;
  CMOdometerSuitability *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t started;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  id v20;

  v2 = (void *)MEMORY[0x194001B4C]();
  v3 = [CMOdometerSuitability alloc];
  started = objc_msgSend_startDate(*(void **)(a1 + 32), v4, v5, v6, v7);
  v13 = objc_msgSend_suitableForRunning(*(void **)(a1 + 32), v9, v10, v11, v12);
  v18 = objc_msgSend_suitableForWalking(*(void **)(a1 + 32), v14, v15, v16, v17);
  v20 = (id)objc_msgSend_initWithStartDate_suitableForRunning_suitableForWalking_(v3, v19, started, v13, v18);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_autoreleasePoolPop(v2);
}

void sub_18F3F3D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_18F2A8438((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3F3E78(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend__teardown(*(void **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5);
}

uint64_t sub_18F3F3F3C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = objc_msgSend_odometerSuitabilityManagerProxy(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v6, sel__startOdometerSuitabilityUpdatesWithHandler_, *(_QWORD *)(a1 + 40), v7, v8);
}

uint64_t sub_18F3F3FC8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (void *)objc_msgSend_odometerSuitabilityManagerProxy(*(void **)(a1 + 32), a2, a3, a4, a5);
  return objc_msgSend__stopOdometerSuitabilityUpdates(v5, v6, v7, v8, v9);
}

void sub_18F3F3FE8(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  void *__p[2];
  char v6;

  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2952688;
  sub_18F270374(__p, "kCLConnectionMessageOdometerSuitabilityUpdate");
  MEMORY[0x19400103C](v4 + 3, __p, *a2);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_18F3F406C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

FILE **sub_18F3F409C(FILE **a1)
{
  sub_18F3F40CC(a1);
  sub_18F37143C((uint64_t)(a1 + 4));
  return a1;
}

uint64_t sub_18F3F40CC(FILE **a1)
{
  _QWORD *v2;
  FILE *v3;
  FILE *v4;
  uint64_t v5;

  v2 = a1 + 4;
  (*(void (**)(FILE **))&a1[4]->_flags)(a1 + 4);
  v3 = *a1;
  if (*a1)
  {
    *a1 = 0;
    fclose(v3);
  }
  v4 = a1[1];
  if (v4)
  {
    free(v4);
    a1[1] = 0;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  sub_18F3F42FC((uint64_t)a1);
  (*(void (**)(_QWORD *))(*v2 + 24))(v2);
  return v5;
}

void sub_18F3F4164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F346934((uint64_t)va);
  _Unwind_Resume(a1);
}

FILE *sub_18F3F4178(FILE **a1)
{
  char *v2;
  FILE *v3;
  FILE *v4;

  v2 = (char *)(a1 + 4);
  (*(void (**)(FILE **))&a1[4]->_flags)(a1 + 4);
  v3 = *a1;
  if (!*a1)
  {
    v4 = (FILE *)malloc_type_malloc(*((int *)a1 + 4), 0x100004077774924uLL);
    a1[1] = v4;
    if (v4)
    {
      *a1 = funopen(a1, 0, (int (__cdecl *)(void *, const char *, int))sub_18F3F4248, 0, (int (__cdecl *)(void *))sub_18F3F42F8);
      sub_18F3F42FC((uint64_t)a1);
    }
    v3 = *a1;
  }
  (*(void (**)(char *))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

void sub_18F3F4230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F346934((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3F4248(uint64_t a1, const void *a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;

  LODWORD(v3) = a3;
  v6 = a1 + 32;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
  v7 = *(_QWORD *)(v6 - 24);
  if (v7)
  {
    v8 = *(int *)(a1 + 20);
    v9 = *(_DWORD *)(a1 + 16) - v8;
    if (v9 >= (int)v3)
      v3 = v3;
    else
      v3 = v9;
    memcpy((void *)(v7 + v8), a2, (int)v3);
    v10 = *(_DWORD *)(a1 + 16);
    v11 = (*(_DWORD *)(a1 + 20) + (int)v3) % v10;
    if (*(_DWORD *)(a1 + 24) + (int)v3 < v10)
      v10 = *(_DWORD *)(a1 + 24) + v3;
    *(_DWORD *)(a1 + 20) = v11;
    *(_DWORD *)(a1 + 24) = v10;
  }
  else
  {
    v3 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return v3;
}

uint64_t sub_18F3F42FC(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 32;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
  *(_QWORD *)(v1 - 12) = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
}

uint64_t sub_18F3F4340(uint64_t a1, FILE *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v4 = a1 + 32;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
  v5 = *(_QWORD *)(v4 - 24);
  if (v5)
  {
    if (*(_QWORD *)a1)
    {
      fflush(*(FILE **)a1);
      v5 = *(_QWORD *)(a1 + 8);
    }
    v6 = *(unsigned int *)(a1 + 24);
    v7 = *(int *)(a1 + 16);
    if ((int)v6 >= (int)v7)
    {
      v8 = v7 + v5;
      v9 = *(char *)(v8 - 1);
      *(_BYTE *)(v8 - 1) = 0;
      fputs((const char *)(*(_QWORD *)(a1 + 8) + *(int *)(a1 + 20)), a2);
      fputc(v9, a2);
      v5 = *(_QWORD *)(a1 + 8);
    }
    *(_BYTE *)(v5 + *(int *)(a1 + 20)) = 0;
    fputs(*(const char **)(a1 + 8), a2);
    sub_18F3F42FC(a1);
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v6;
}

void sub_18F3F4428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F346934((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3F4980(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int32x2_t v9;
  NSObject *v15;
  unsigned int v16;
  int v17;
  char *v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  unsigned int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)a1 = 0;
  v6 = a1 + 15020;
  *(_DWORD *)(a1 + 3) = 0;
  v7 = (_BYTE *)(a1 + 14628);
  *(_DWORD *)(a1 + 40) = a3;
  v8 = a1 + 5196;
  *(_WORD *)(a1 + 44) = 257;
  *(_DWORD *)(a1 + 46) = 0;
  *(_BYTE *)(a1 + 50) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  sub_18F1FFE94((float32x4_t *)(a1 + 76), (float32x4_t)0);
  *(_BYTE *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 100) = 0x3200000000;
  *(_BYTE *)(a1 + 708) = 1;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_QWORD *)(a1 + 736) = 0x3200000000;
  *(_QWORD *)(a1 + 944) = 0x6400000000;
  *(_QWORD *)(a1 + 2152) = 0x6400000000;
  *(_QWORD *)(a1 + 3760) = 0x6400000000;
  *(_QWORD *)(a1 + 4568) = 0x3200000000;
  *(_DWORD *)(a1 + 5176) = 0;
  *(_QWORD *)(a1 + 5184) = 0;
  *(_DWORD *)(a1 + 5192) = 0;
  *(_OWORD *)v8 = xmmword_18F507C20;
  *(_OWORD *)(a1 + 5216) = 0u;
  *(_OWORD *)(a1 + 5232) = 0u;
  *(_OWORD *)(a1 + 5248) = 0u;
  *(_OWORD *)(a1 + 5264) = 0u;
  *(_OWORD *)(a1 + 5280) = 0u;
  *(_DWORD *)(a1 + 5296) = 0;
  *(_DWORD *)(a1 + 5300) = 973279855;
  v9 = vdup_n_s32(0x3A03126Fu);
  *(int32x2_t *)(a1 + 5304) = v9;
  *(_DWORD *)(a1 + 5312) = 0;
  *(_OWORD *)(v8 + 120) = xmmword_18F507C30;
  *(_DWORD *)(a1 + 5332) = 1065353216;
  sub_18F1FFE94((float32x4_t *)(a1 + 5320), (float32x4_t)xmmword_18F507C30);
  *(_OWORD *)(a1 + 5336) = 0u;
  *(_OWORD *)(a1 + 5352) = 0u;
  *(_QWORD *)(a1 + 5368) = 0x3A03126F00000000;
  *(int32x2_t *)(a1 + 5376) = v9;
  *(_DWORD *)(a1 + 5384) = 0;
  *(_OWORD *)(v8 + 192) = xmmword_18F507C30;
  *(_DWORD *)(a1 + 5404) = 1065353216;
  sub_18F1FFE94((float32x4_t *)(a1 + 5392), (float32x4_t)xmmword_18F507C30);
  *(_OWORD *)(a1 + 5408) = 0u;
  *(_QWORD *)(a1 + 5424) = 0x200000000;
  *(_BYTE *)(v8 + 244) = 1;
  *(_OWORD *)(a1 + 5452) = 0u;
  *(_QWORD *)(a1 + 5468) = 0x4B00000000;
  *(_OWORD *)(a1 + 5776) = 0u;
  *(_DWORD *)(a1 + 5792) = 0;
  bzero((void *)(a1 + 5800), 0x2778uLL);
  *(_DWORD *)(a1 + 5844) = 100;
  *(_DWORD *)(a1 + 7052) = 100;
  *(_BYTE *)(a1 + 8256) = 1;
  *(_OWORD *)(a1 + 8268) = 0u;
  *(_DWORD *)(a1 + 8288) = 100;
  *(_BYTE *)(a1 + 8692) = 1;
  *(_OWORD *)(a1 + 8704) = 0u;
  *(_DWORD *)(a1 + 8724) = 100;
  *(_DWORD *)(a1 + 9132) = 40;
  *(_OWORD *)(a1 + 9616) = 0u;
  *(_OWORD *)(a1 + 9632) = 0u;
  *(_QWORD *)(a1 + 9648) = 0;
  *(_DWORD *)(a1 + 9660) = 200;
  *(_QWORD *)(a1 + 12184) = 0;
  *(_OWORD *)(a1 + 12192) = 0u;
  *(_BYTE *)(a1 + 12208) = 0;
  *(_WORD *)(a1 + 12160) = 0;
  *(_OWORD *)(a1 + 12144) = 0u;
  *(_OWORD *)(a1 + 12128) = 0u;
  *(_OWORD *)(a1 + 12112) = 0u;
  *(_OWORD *)(a1 + 12096) = 0u;
  *(_OWORD *)(a1 + 12080) = 0u;
  *(_OWORD *)(a1 + 12064) = 0u;
  *(_DWORD *)(a1 + 12224) = 200;
  *v7 = 1;
  *(_OWORD *)(a1 + 14640) = 0u;
  *(_DWORD *)(a1 + 14660) = 40;
  *(_OWORD *)(a1 + 14836) = 0u;
  v7[196] = 1;
  *(_DWORD *)(a1 + 14856) = 40;
  *(_BYTE *)v6 = 1;
  *(_OWORD *)(a1 + 15032) = 0u;
  *(_DWORD *)(a1 + 15052) = 200;
  *(_QWORD *)(a1 + 15872) = 0;
  *(_DWORD *)(a1 + 15880) = 0;
  *(_OWORD *)(a1 + 15856) = 0u;
  __asm { FMOV            V0.2S, #5.0 }
  *(_QWORD *)(a1 + 15904) = _D0;
  *(_QWORD *)(a1 + 15928) = 0;
  *(_QWORD *)(a1 + 15912) = 0;
  *(_QWORD *)(a1 + 15920) = 0;
  *(_DWORD *)(a1 + 15936) = 1065353216;
  sub_18F1FFE94((float32x4_t *)(a1 + 15924), (float32x4_t)_D0);
  *(_BYTE *)(v6 + 920) = 0;
  *(_DWORD *)(a1 + 15944) = 0;
  *(_OWORD *)(a1 + 15952) = 0u;
  *(_OWORD *)(a1 + 15968) = 0u;
  *(_OWORD *)(a1 + 15984) = 0u;
  *(_OWORD *)(a1 + 16000) = 0u;
  *(_DWORD *)(a1 + 16016) = 1065353216;
  sub_18F1FFE94((float32x4_t *)(a1 + 16004), (float32x4_t)0);
  *(_BYTE *)(v6 + 1000) = 0;
  *(_QWORD *)(a1 + 16024) = 0;
  *(_DWORD *)(a1 + 16032) = 0;
  *(_BYTE *)(v6 + 1016) = 0;
  *(_BYTE *)(v6 + 1020) = 0;
  *(_QWORD *)(a1 + 16048) = 0;
  *(_DWORD *)(a1 + 16056) = 1;
  *(_WORD *)(v6 + 1040) = 1;
  *(_BYTE *)(v6 + 1042) = 0;
  sub_18F37C914(a1 + 16064);
  *(_QWORD *)(a1 + 26968) = 0x600000000;
  *(_QWORD *)(a1 + 27216) = 0x500000000;
  *(_QWORD *)(a1 + 26960) = 4;
  sub_18F40D72C(a1 + 27344);
  *(_WORD *)(a1 + 27520) = 0;
  *(_WORD *)(a1 + 27532) = 0;
  *(_DWORD *)(a1 + 27536) = 0;
  *(_QWORD *)(a1 + 27544) = 0;
  sub_18F33AF74(a1 + 27552);
  sub_18F330058(a1 + 33592);
  sub_18F4DDD9C(a1 + 33656);
  *(_BYTE *)(a1 + 37408) = 0;
  *(_QWORD *)(a1 + 37456) = 0;
  *(_BYTE *)(a1 + 37464) = 0;
  *(_DWORD *)(a1 + 37468) = 0;
  *(_DWORD *)(a1 + 37472) = 0;
  *(_OWORD *)(a1 + 37416) = 0u;
  *(_OWORD *)(a1 + 37432) = 0u;
  *(_WORD *)(a1 + 37448) = 0;
  sub_18F3F4F58((unsigned int *)a1, a2);
  *(_DWORD *)(a1 + 5192) = 0;
  *(_OWORD *)v8 = xmmword_18F507C40;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
  v15 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(_DWORD *)a1;
    v17 = *(unsigned __int8 *)(a1 + 4);
    *(_DWORD *)buf = 67240704;
    v21 = a3;
    v22 = 1026;
    v23 = v16;
    v24 = 1026;
    v25 = v17;
    _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_DEFAULT, "[RelDMService] Constructing service with scheme %{public}d, with client %{public}d, with trackingBehavior: %{public}d", buf, 0x14u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v19 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CMRelDMService::CMRelDMService(ClientMode, TrackingScheme)", "CoreLocation: %s\n", v19);
    if (v19 != (char *)buf)
      free(v19);
  }
  return a1;
}

void sub_18F3F4F00(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  _QWORD *v4;
  uint64_t v5;

  sub_18F3FFC88(v2);
  v4 = *(_QWORD **)(v1 + 32);
  if (v4 == (_QWORD *)(v1 + 8))
  {
    v5 = 4;
    v4 = (_QWORD *)(v1 + 8);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_18F3F4F58(unsigned int *a1, unsigned int a2)
{
  NSObject *v4;
  unsigned int v5;
  unint64_t v6;
  NSObject *v7;
  int v8;
  char *v9;
  char *v10;
  uint8_t buf[4];
  unsigned int v12;
  __int16 v13;
  unsigned int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*a1 != a2)
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v4 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
    {
      v5 = *a1;
      *(_DWORD *)buf = 67109376;
      v12 = v5;
      v13 = 1024;
      v14 = a2;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_INFO, "[RelDMService] Client mode changed from %d to %d", buf, 0xEu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::setClientMode(const CMRelDM::ClientMode, const BOOL)", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
    *a1 = a2;
    if (a2 >= 5)
    {
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v7 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v12 = a2;
        _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_ERROR, "[RelDMService] Received unexpected client type: %d. Defaulting behavior to kVideo.", buf, 8u);
      }
      v8 = sub_18F1FCA08(115, 0);
      LOBYTE(v6) = 0;
      if (v8)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v10 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "void CMRelDMService::setClientMode(const CMRelDM::ClientMode, const BOOL)", "CoreLocation: %s\n", v10);
        if (v10 != (char *)buf)
          free(v10);
        LOBYTE(v6) = 0;
      }
    }
    else
    {
      v6 = 0x1010100uLL >> (8 * a2);
    }
    sub_18F3F52AC((uint64_t)a1, v6);
  }
}

void sub_18F3F52AC(uint64_t a1, int a2)
{
  _BYTE *v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  BOOL v8;
  BOOL v9;
  char v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  int v17;
  _BOOL4 v18;
  int v19;
  int v20;
  NSObject *v21;
  int v22;
  int v23;
  NSObject *v24;
  int v25;
  _BOOL4 v26;
  int v27;
  int v28;
  int v29;
  int v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  _BOOL4 v41;
  __int16 v42;
  int v43;
  __int16 v44;
  _BOOL4 v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = (_BYTE *)(a1 + 37449);
  v5 = (unsigned __int8 *)(a1 + 16058);
  v6 = *(unsigned __int8 *)(a1 + 4);
  if (v6 == a2)
    v7 = 0;
  else
    v7 = *(_BYTE *)(a1 + 4) && (*v4 ? (v8 = a2 == 0) : (v8 = 0), v8 ? (v9 = v6 == 1) : (v9 = 0), v9)
      || (*(unsigned __int8 *)(a1 + 16059) | *(unsigned __int8 *)(a1 + 16058)) != 0;
  if (*(_BYTE *)(a1 + 5))
    v10 = v7;
  else
    v10 = 1;
  if (*(unsigned __int8 *)(a1 + 5) == v7)
  {
    if (v7)
      return;
    goto LABEL_17;
  }
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
  v15 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
  {
    v16 = *(unsigned __int8 *)(a1 + 5);
    v17 = *(unsigned __int8 *)(a1 + 4);
    if (*(_BYTE *)(a1 + 4))
      v18 = *v4 != 0;
    else
      v18 = 0;
    v19 = v5[1];
    v20 = *v5;
    *(_DWORD *)buf = 67110656;
    v37 = v16;
    v38 = 1024;
    v39 = v7;
    v40 = 1024;
    v41 = v17;
    v42 = 1024;
    v43 = a2;
    v44 = 1024;
    v45 = v18;
    v46 = 1024;
    v47 = v19;
    v48 = 1024;
    v49 = v20;
    _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_INFO, "[RelDMService] fDelaySetTrackingBehaviorState changed from %d to %d, current fTrackingBehavior: %d, requested trackingBehavior %d, getInSteadyStatePedestrian: %d, fInComplexTransitionState: %d, fDisableTracking: %d.", buf, 0x2Cu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v31 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::setTrackingBehavior(CMRelDM::TrackingBehavior)", "CoreLocation: %s\n", v31);
    if (v31 != (char *)buf)
      free(v31);
  }
  *(_BYTE *)(a1 + 5) = v7;
  if (v7)
  {
    *(_BYTE *)(a1 + 6) = a2;
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v21 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
    {
      v22 = *(unsigned __int8 *)(a1 + 4);
      if (*(_BYTE *)(a1 + 4))
        v23 = *v4;
      else
        v23 = 0;
      v27 = v5[1];
      v28 = *v5;
      *(_DWORD *)buf = 67110144;
      v37 = v22;
      v38 = 1024;
      v39 = a2;
      v40 = 1024;
      v41 = v23;
      v42 = 1024;
      v43 = v27;
      v44 = 1024;
      v45 = v28;
      _os_log_impl(&dword_18F1DC000, v21, OS_LOG_TYPE_INFO, "[RelDMService] Delaying tracking behavior update from %d to %d, getInSteadyStatePedestrian: %d, inComplexTransitionState: %d, fDisableTracking: %d.", buf, 0x20u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v33 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::setTrackingBehavior(CMRelDM::TrackingBehavior)", "CoreLocation: %s\n", v33);
      if (v33 != (char *)buf)
        free(v33);
    }
  }
  else if (*(unsigned __int8 *)(a1 + 4) != a2)
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v24 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
    {
      v25 = *(unsigned __int8 *)(a1 + 4);
      if (*(_BYTE *)(a1 + 4))
        v26 = *v4 != 0;
      else
        v26 = 0;
      v29 = v5[1];
      v30 = *v5;
      *(_DWORD *)buf = 67110144;
      v37 = v25;
      v38 = 1024;
      v39 = a2;
      v40 = 1024;
      v41 = v26;
      v42 = 1024;
      v43 = v29;
      v44 = 1024;
      v45 = v30;
      _os_log_impl(&dword_18F1DC000, v24, OS_LOG_TYPE_INFO, "[RelDMService] The previously delayed tracking behavior update from %d to %d will now occur, getInSteadyStatePedestrian: %d, inComplexTransitionState: %d, fDisableTracking: %d.", buf, 0x20u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v34 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::setTrackingBehavior(CMRelDM::TrackingBehavior)", "CoreLocation: %s\n", v34);
      if (v34 != (char *)buf)
        free(v34);
    }
    if (!*(_BYTE *)(a1 + 5))
    {
LABEL_17:
      if (*(unsigned __int8 *)(a1 + 4) != a2)
      {
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v11 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
        {
          v12 = *(unsigned __int8 *)(a1 + 4);
          *(_DWORD *)buf = 67109376;
          v37 = v12;
          v38 = 1024;
          v39 = a2;
          _os_log_impl(&dword_18F1DC000, v11, OS_LOG_TYPE_INFO, "[RelDMService] Tracking behavior changed from %d to %d", buf, 0xEu);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953648);
          v32 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::setTrackingBehavior(CMRelDM::TrackingBehavior)", "CoreLocation: %s\n", v32);
          if (v32 != (char *)buf)
            free(v32);
        }
        *(_BYTE *)(a1 + 4) = a2;
        sub_18F33B1F8((_BYTE *)(a1 + 27552), a2);
        sub_18F468B24(a1 + 15904, a2);
        sub_18F389DAC(a1 + 5840, a2);
        if ((v10 & 1) == 0 && *(_QWORD *)(a1 + 32))
        {
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953648);
          v13 = qword_1EE16D820;
          if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_INFO, "[RelDMService] Notifying delayed tracking behavior update callback subscribers.", buf, 2u);
          }
          if (sub_18F1FCA08(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2953648);
            v35 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::setTrackingBehavior(CMRelDM::TrackingBehavior)", "CoreLocation: %s\n", v35);
            if (v35 != (char *)buf)
              free(v35);
          }
          v14 = *(_QWORD *)(a1 + 32);
          if (!v14)
            sub_18F3FFD00();
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
        }
      }
    }
  }
}

uint8_t *sub_18F3F5C38(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t *result;
  uint64_t v10;
  char *v11;
  uint8_t buf[24];
  uint8_t *v13;
  _QWORD v14[4];

  v14[3] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v4 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_INFO, "[RelDMService] Overwriting existing fDelayedTrackingBehaviorUpdateCallback", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      LOWORD(v14[0]) = 0;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::subscribeDelayedTrackingBehaviorUpdateCallback(std::function<void ()>)", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v13 = buf;
      (*(void (**)(_QWORD *, uint8_t *))(*a2 + 24))(a2, buf);
    }
    else
    {
      v13 = (uint8_t *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v13 = 0;
  }
  v6 = a1 + 8;
  if (buf != (uint8_t *)(a1 + 8))
  {
    v7 = v13;
    v8 = *(_QWORD *)(a1 + 32);
    if (v13 == buf)
    {
      if (v8 == v6)
      {
        (*(void (**)(uint8_t *, _QWORD *))(*(_QWORD *)buf + 24))(buf, v14);
        (*(void (**)(uint8_t *))(*(_QWORD *)v13 + 32))(v13);
        v13 = 0;
        (*(void (**)(_QWORD, uint8_t *))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), buf);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
        *(_QWORD *)(a1 + 32) = 0;
        v13 = buf;
        (*(void (**)(_QWORD *, uint64_t))(v14[0] + 24))(v14, a1 + 8);
        (*(void (**)(_QWORD *))(v14[0] + 32))(v14);
      }
      else
      {
        (*(void (**)(uint8_t *, uint64_t))(*(_QWORD *)buf + 24))(buf, a1 + 8);
        (*(void (**)(uint8_t *))(*(_QWORD *)v13 + 32))(v13);
        v13 = *(uint8_t **)(a1 + 32);
      }
      *(_QWORD *)(a1 + 32) = v6;
    }
    else if (v8 == v6)
    {
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v6 + 24))(a1 + 8, buf);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
      *(_QWORD *)(a1 + 32) = v13;
      v13 = buf;
    }
    else
    {
      v13 = *(uint8_t **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v7;
    }
  }
  result = v13;
  if (v13 == buf)
  {
    v10 = 4;
    result = buf;
  }
  else
  {
    if (!v13)
      return result;
    v10 = 5;
  }
  return (uint8_t *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v10))();
}

void sub_18F3F5F6C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_18F213574(a1);
  _Unwind_Resume(a1);
}

void sub_18F3F5F78(uint64_t a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  char *v10;
  char *v11;
  uint8_t buf[1632];
  uint64_t v13;

  v3 = a1 + 27520;
  v13 = *MEMORY[0x1E0C80C00];
  v4 = (_DWORD *)(a1 + 26968);
  v5 = (_DWORD *)(a1 + 26424);
  v6 = (_DWORD *)(a1 + 17416);
  v7 = a1 + 5196;
  if (a2)
  {
    *(_DWORD *)(a1 + 5192) = 0;
    *(_OWORD *)v7 = xmmword_18F507C40;
    *(_DWORD *)(a1 + 5176) = 0;
    *(_QWORD *)(a1 + 5184) = 0;
    *(_DWORD *)(a1 + 944) = 0;
    *(_DWORD *)(a1 + 2152) = 0;
    *(_DWORD *)(a1 + 3760) = 0;
    *(_DWORD *)(a1 + 100) = 0;
    *(_OWORD *)(a1 + 720) = 0u;
    *(_DWORD *)(a1 + 736) = 0;
    *(_OWORD *)(a1 + 5408) = 0u;
    *(_BYTE *)(a1 + 708) = 1;
    *(_DWORD *)(a1 + 4568) = 0;
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v8 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_DEFAULT, "[RelDMService] Clearing src buffers.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::clearAll(BOOL)", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  *(_DWORD *)(a1 + 5424) = 0;
  *(_DWORD *)(a1 + 5468) = 0;
  *(_QWORD *)(a1 + 5460) = 0;
  *(_QWORD *)(a1 + 5452) = 0;
  *(_BYTE *)(v7 + 244) = 1;
  sub_18F389FA4(a1 + 5840, 0);
  sub_18F33B17C(a1 + 27552);
  *(_DWORD *)(a1 + 16128) = 0;
  *v6 = 0;
  *v5 = 0;
  v5[6] = 0;
  *v4 = 0;
  v4[62] = 0;
  *(_BYTE *)v3 = 0;
  *(_DWORD *)(v3 + 16) = 0;
  *(_QWORD *)(a1 + 27544) = 0;
  sub_18F330220(a1 + 33592);
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
  v9 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_DEFAULT, "[RelDMService] Clearing buffers.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v10 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::clearAll(BOOL)", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
}

void sub_18F3F631C(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  char *v7;
  uint8_t buf[4];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 16036;
  v5 = a2 ^ 1;
  sub_18F3F5F78(a1, a2 ^ 1);
  sub_18F3F6564(a1 + 27344, v5);
  sub_18F389FA4(a1 + 5840, 1);
  sub_18F37D168(a1 + 16064);
  *(_BYTE *)(v4 + 4) = 0;
  *(_QWORD *)(a1 + 16048) = 0;
  *(_BYTE *)(a1 + 46) = 0;
  *(_WORD *)(v4 + 20) = 1;
  *(_OWORD *)(a1 + 15952) = 0u;
  *(_OWORD *)(a1 + 15968) = 0u;
  *(_QWORD *)(a1 + 15984) = 0;
  *(_DWORD *)(a1 + 15904) = 1084227584;
  *(_BYTE *)v4 = 0;
  *(_BYTE *)(v4 + 23) = 0;
  *(_BYTE *)(v4 + 26) = 0;
  *(_OWORD *)(a1 + 5776) = 0u;
  *(_DWORD *)(a1 + 5792) = 0;
  if (*(_BYTE *)(a1 + 4) == 1)
  {
    *(_BYTE *)(a1 + 37448) = 0;
    *(_QWORD *)(a1 + 37456) = 0;
  }
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
  v6 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a2;
    _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEFAULT, "[RelDMService] Resetting. WithSmoothing, %{public}d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::resetInternal(BOOL)", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
}

void sub_18F3F6564(uint64_t a1, int a2)
{
  NSObject *v3;
  char *v4;
  uint8_t buf[16];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 57) = 0;
  *(_DWORD *)(a1 + 92) = 1;
  *(_DWORD *)(a1 + 96) = 1065749138;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  if (a2)
  {
    v7 = 0;
    *(_OWORD *)buf = 0u;
    v6 = 0u;
    *(_DWORD *)&buf[12] = 1065353216;
    sub_18F1FFE94((float32x4_t *)buf, (float32x4_t)0);
    *(_OWORD *)a1 = *(_OWORD *)buf;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_WORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 92) = 0;
  }
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
  v3 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEFAULT, "[PerceptualFilter] resetting", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v4 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMAudioPerceptualFilter::reset(BOOL)", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
}

void sub_18F3F6750(_DWORD *a1, int a2)
{
  NSObject *v3;
  int v4;
  char *v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a1[10] != a2)
  {
    a1[10] = a2;
    if (!a2)
    {
      a1[6606] = 0;
      a1[6612] = 0;
    }
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v3 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
    {
      v4 = a1[10];
      *(_DWORD *)buf = 67240192;
      v7 = v4;
      _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEFAULT, "[RelDMService] Setting scheme to %{public}d", buf, 8u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::setScheme(TrackingScheme)", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
}

void sub_18F3F6924(uint64_t a1, int a2)
{
  _BYTE *v2;
  NSObject *v5;
  const char *v6;
  const char *v7;
  float32x4_t v8;
  char *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)(a1 + 37408);
  if (*(unsigned __int8 *)(a1 + 37408) != a2)
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v5 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
    {
      v6 = "true";
      if (*v2)
        v7 = "true";
      else
        v7 = "false";
      if (!a2)
        v6 = "false";
      *(_DWORD *)buf = 136315394;
      v11 = v7;
      v12 = 2080;
      v13 = v6;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_DEFAULT, "[RelDMService] Online headToHeadsetTransformationEstimation changed from: %s  to:%s", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::enableOnlineHeadToHeadsetTransformationEstimator(BOOL)", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
    *v2 = a2;
    if ((a2 & 1) == 0)
      sub_18F4DDF94(a1 + 33656, v8);
  }
}

void sub_18F3F6B60(uint64_t a1)
{
  NSObject *v1;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 16058))
  {
    *(_BYTE *)(a1 + 16058) = 1;
    sub_18F3F631C(a1, 1);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v1 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v1, OS_LOG_TYPE_DEFAULT, "[RelDMService] Tracking is disabled.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v2 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::disableTracking()", "CoreLocation: %s\n", v2);
      if (v2 != (char *)buf)
        free(v2);
    }
  }
}

void sub_18F3F6D04(uint64_t a1)
{
  NSObject *v1;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 16058))
  {
    *(_BYTE *)(a1 + 16058) = 0;
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v1 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v1, OS_LOG_TYPE_DEFAULT, "[RelDMService] Tracking is re-enabled.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v2 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::enableTracking()", "CoreLocation: %s\n", v2);
      if (v2 != (char *)buf)
        free(v2);
    }
  }
}

BOOL sub_18F3F6E9C(uint64_t a1, unint64_t a2)
{
  float v4;
  unint64_t v5;
  float v6;
  _BOOL8 result;
  NSObject *v8;
  double v9;
  float v10;
  char *v11;
  uint8_t buf[4];
  double v13;
  __int16 v14;
  double v15;
  __int16 v16;
  double v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 16058))
  {
    result = 0;
    *(_QWORD *)(a1 + 5256) = 0;
    return result;
  }
  if (*(_BYTE *)(a1 + 708))
    sub_18F33FB38(a1 + 708);
  v4 = *(float *)(a1 + 716);
  if (v4 < 0.0)
    v4 = 0.0;
  if (v4 >= 0.00005)
  {
    *(_QWORD *)(a1 + 5256) = a2;
    v5 = a2;
    if (a2)
      goto LABEL_8;
LABEL_11:
    v6 = 3.4028e38;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(a1 + 5256);
  if (!v5)
    goto LABEL_11;
LABEL_8:
  v6 = (float)(a2 - v5) * 0.000001;
LABEL_12:
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
  v8 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
  {
    v9 = sub_18F48EB4C(a1 + 5216, a2);
    if (*(_BYTE *)(a1 + 708))
      sub_18F33FB38(a1 + 708);
    v10 = *(float *)(a1 + 716);
    if (v10 < 0.0)
      v10 = 0.0;
    *(_DWORD *)buf = 134218496;
    v13 = v9;
    v14 = 2048;
    v15 = v10;
    v16 = 2048;
    v17 = v6;
    _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_DEBUG, "[RelDMService] moveDuration, %.3f, var, %.4f, timeSinceAccelNonStatic, %.3f", buf, 0x20u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    sub_18F48EB4C(a1 + 5216, a2);
    if (*(_BYTE *)(a1 + 708))
      sub_18F33FB38(a1 + 708);
    v11 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "BOOL CMRelDMService::isSrcInMovingStateWhenTrackingDisabled(uint64_t)", "CoreLocation: %s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
  return sub_18F48EB4C(a1 + 5216, a2) >= 0.4 && v6 <= 0.4;
}

uint64_t sub_18F3F71AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  BOOL v9;
  NSObject *v10;
  uint64_t v11;
  double v12;
  float v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  NSObject *v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  float v21;
  uint64_t v23;
  int v24;
  NSObject *v25;
  uint64_t result;
  uint64_t v27;
  NSObject *v28;
  double v29;
  NSObject *v30;
  double v31;
  char *v32;
  NSObject *v33;
  double v34;
  uint64_t v35;
  float v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint8_t buf[4];
  double v42;
  __int16 v43;
  unint64_t v44;
  __int16 v45;
  double v46;
  __int16 v47;
  int v48;
  __int16 v49;
  double v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 5784);
  if (v8)
    v9 = v8 >= a3;
  else
    v9 = 1;
  if (!v9)
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v10 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
    {
      v11 = 0;
      v12 = *(double *)(a1 + 5784);
      v13 = 0.0;
      do
      {
        v13 = v13 + (float)(*(float *)(a2 + v11) * *(float *)(a2 + v11));
        v11 += 4;
      }
      while (v11 != 12);
      v14 = *(_DWORD *)(a2 + 48);
      *(_DWORD *)buf = 134219008;
      v42 = v12;
      v43 = 2048;
      v44 = a3;
      v45 = 2048;
      v46 = (float)(sqrtf(v13) * 57.296);
      v47 = 1024;
      v48 = v14;
      v49 = 2048;
      v50 = (float)((float)(a3 - *(_QWORD *)&v12) / 1000000.0);
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_DEBUG, "[RelDMService] ReEnable/SitStandFSM: ts, %llu, inputTS, %llu, rot, %.3f, qMode, %d, staticDuration, %.3f", buf, 0x30u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v35 = 0;
      v36 = 0.0;
      do
      {
        v36 = v36 + (float)(*(float *)(a2 + v35) * *(float *)(a2 + v35));
        v35 += 4;
      }
      while (v35 != 12);
      v37 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "BOOL CMRelDMService::isAuxInStaticState(const IMUData &, const uint64_t, const uint64_t)", "CoreLocation: %s\n", v37);
      if (v37 != (char *)buf)
        free(v37);
    }
  }
  v15 = *(_QWORD *)(a1 + 5776);
  if (v15)
    v16 = v15 + 1000000 >= a3;
  else
    v16 = 1;
  if (!v16)
  {
    *(_QWORD *)(a1 + 5784) = 0;
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v17 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
    {
      v18 = (float)((float)(a3 - *(_QWORD *)(a1 + 5776)) / 1000000.0);
      *(_DWORD *)buf = 134217984;
      v42 = v18;
      _os_log_impl(&dword_18F1DC000, v17, OS_LOG_TYPE_DEBUG, "[RelDMService] large gap in aux data, %.3f", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v38 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "BOOL CMRelDMService::isAuxInStaticState(const IMUData &, const uint64_t, const uint64_t)", "CoreLocation: %s\n", v38);
      if (v38 != (char *)buf)
        free(v38);
    }
  }
  v19 = 0;
  v20 = *(_QWORD *)(a1 + 5776);
  *(_QWORD *)(a1 + 5776) = a3;
  v21 = 0.0;
  do
  {
    v21 = v21 + (float)(*(float *)(a2 + v19) * *(float *)(a2 + v19));
    v19 += 4;
  }
  while (v19 != 12);
  if (a3 <= v20 || v20 == 0)
    v23 = 0;
  else
    v23 = a3 - v20;
  if (sqrtf(v21) > 0.34907)
    ++*(_DWORD *)(a1 + 5792);
  v24 = *(_DWORD *)(a2 + 48);
  if (!v24 || *(_DWORD *)(a1 + 5792) >= 3u)
  {
    if (*(_BYTE *)(a1 + 16058) && *(_QWORD *)(a1 + 5784))
    {
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v25 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v25, OS_LOG_TYPE_DEBUG, "[RelDMService] ReEnable/SitStandFSM: movement terminated static period.", buf, 2u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v39 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "BOOL CMRelDMService::isAuxInStaticState(const IMUData &, const uint64_t, const uint64_t)", "CoreLocation: %s\n", v39);
        if (v39 != (char *)buf)
          free(v39);
      }
    }
    result = 0;
    *(_QWORD *)(a1 + 5784) = 0;
    *(_DWORD *)(a1 + 5792) = 0;
    return result;
  }
  v27 = *(_QWORD *)(a1 + 5784);
  if (v27)
  {
    if (v24 == 2)
    {
      v27 += v23;
      *(_QWORD *)(a1 + 5784) = v27;
    }
    if (v27 + a4 < a3)
    {
      if (*(_BYTE *)(a1 + 16058))
      {
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v28 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
        {
          v29 = (float)((a3 - *(_QWORD *)(a1 + 5784)) / 0xF4240);
          *(_DWORD *)buf = 134349056;
          v42 = v29;
          _os_log_impl(&dword_18F1DC000, v28, OS_LOG_TYPE_DEFAULT, "[RelDMService] ReEnable: reached staticDuration, %{public}.3f", buf, 0xCu);
        }
        if (!sub_18F1FCA08(115, 2))
          goto LABEL_69;
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 == -1)
        {
LABEL_86:
          v40 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "BOOL CMRelDMService::isAuxInStaticState(const IMUData &, const uint64_t, const uint64_t)", "CoreLocation: %s\n", v40);
          if (v40 != (char *)buf)
            free(v40);
LABEL_69:
          *(_DWORD *)(a1 + 5792) = 0;
          return 1;
        }
      }
      else
      {
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v33 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
        {
          v34 = (float)((a3 - *(_QWORD *)(a1 + 5784)) / 0xF4240);
          *(_DWORD *)buf = 134349056;
          v42 = v34;
          _os_log_impl(&dword_18F1DC000, v33, OS_LOG_TYPE_DEBUG, "[RelDMService] SitStandFSM: reached staticDuration, %{public}.3f", buf, 0xCu);
        }
        if (!sub_18F1FCA08(115, 2))
          goto LABEL_69;
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 == -1)
          goto LABEL_86;
      }
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      goto LABEL_86;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 5784) = a3;
  }
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
  v30 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
  {
    v31 = *(double *)(a1 + 5784);
    *(_DWORD *)buf = 134217984;
    v42 = v31;
    _os_log_impl(&dword_18F1DC000, v30, OS_LOG_TYPE_DEBUG, "[RelDMService] ReEnable/SitStandFSM: gettingStatic, ts, %llu", buf, 0xCu);
  }
  result = sub_18F1FCA08(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v32 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "BOOL CMRelDMService::isAuxInStaticState(const IMUData &, const uint64_t, const uint64_t)", "CoreLocation: %s\n", v32);
    if (v32 != (char *)buf)
      free(v32);
    return 0;
  }
  return result;
}

uint64_t sub_18F3F7BF4(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;
  NSObject *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8_t *v19;
  NSObject *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  NSObject *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  char *v30;
  uint8_t buf[4];
  unint64_t v32;
  __int16 v33;
  unint64_t v34;
  __int16 v35;
  int v36;
  __int16 v37;
  unint64_t v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  if (!*(_WORD *)(a1 + 3762))
    return 1;
  v5 = a1 + 3768;
  v6 = *(unsigned __int16 *)(a1 + 3762) + (unint64_t)*(unsigned __int16 *)(a1 + 3760) - 1;
  v7 = *(unsigned int *)(a1 + 3764);
  if (v6 < v7)
    v7 = 0;
  v8 = *(_QWORD *)(v5 + 8 * (v6 - v7));
  if (v8 >= a2)
  {
    if (v8 - a2 <= 0x9C3)
    {
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v15 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
      {
        v16 = *(unsigned __int16 *)(a1 + 3760) + (unint64_t)*(unsigned __int16 *)(a1 + 3762) - 1;
        v17 = *(unsigned int *)(a1 + 3764);
        if (v16 < v17)
          v17 = 0;
        v18 = *(_QWORD *)(v5 + 8 * (v16 - v17));
        *(_DWORD *)buf = 134349312;
        v32 = a2;
        v33 = 2050;
        v34 = v18;
        _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_DEBUG, "[RelDMService] Src IMU timestamp went backwards. curr=%{public}llu, last=%{public}llu", buf, 0x16u);
      }
      result = sub_18F1FCA08(115, 2);
      if (!(_DWORD)result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v19 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "BOOL CMRelDMService::checkSrcIMUTimestamp(uint64_t, BOOL &) const", "CoreLocation: %s\n");
LABEL_49:
      if (v19 != buf)
        free(v19);
      return 0;
    }
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v20 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      v21 = *(unsigned __int16 *)(a1 + 3760) + (unint64_t)*(unsigned __int16 *)(a1 + 3762) - 1;
      v22 = *(unsigned int *)(a1 + 3764);
      if (v21 < v22)
        v22 = 0;
      v23 = *(_QWORD *)(v5 + 8 * (v21 - v22));
      *(_DWORD *)buf = 134349312;
      v32 = a2;
      v33 = 2050;
      v34 = v23;
      _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_ERROR, "[RelDMService] Src IMU sample time went backwards. curr=%{public}llu, last=%{public}llu", buf, 0x16u);
    }
    v24 = sub_18F1FCA08(115, 0);
    result = 0;
    if (!v24)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 == -1)
    {
LABEL_48:
      v19 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "BOOL CMRelDMService::checkSrcIMUTimestamp(uint64_t, BOOL &) const", "CoreLocation: %s\n");
      goto LABEL_49;
    }
LABEL_52:
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    goto LABEL_48;
  }
  v9 = a2 - v8;
  if (a2 - v8 < 0x1D4D)
    return 1;
  if (v9 <= 0x4E20)
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v10 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(unsigned __int16 *)(a1 + 3760) + (unint64_t)*(unsigned __int16 *)(a1 + 3762) - 1;
      v12 = *(unsigned int *)(a1 + 3764);
      if (v11 < v12)
        v12 = 0;
      v13 = *(_QWORD *)(v5 + 8 * (v11 - v12));
      *(_DWORD *)buf = 134350080;
      v32 = v13;
      v33 = 2050;
      v34 = a2;
      v35 = 1026;
      v36 = 7500;
      v37 = 2050;
      v38 = v9;
      v39 = 1026;
      v40 = 20000;
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_DEBUG, "[RelDMService] Src IMU sample time interval is large. last=%{public}llu, new=%{public}llu, %{public}u < dt=%{public}llu <= %{public}u", buf, 0x2Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v30 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "BOOL CMRelDMService::checkSrcIMUTimestamp(uint64_t, BOOL &) const", "CoreLocation: %s\n", v30);
      if (v30 != (char *)buf)
        free(v30);
    }
    return 1;
  }
  *a3 = 1;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
  v25 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
  {
    v26 = *(unsigned __int16 *)(a1 + 3760) + (unint64_t)*(unsigned __int16 *)(a1 + 3762) - 1;
    v27 = *(unsigned int *)(a1 + 3764);
    if (v26 < v27)
      v27 = 0;
    v28 = *(_QWORD *)(v5 + 8 * (v26 - v27));
    *(_DWORD *)buf = 134349824;
    v32 = v28;
    v33 = 2050;
    v34 = a2;
    v35 = 1026;
    v36 = 7500;
    v37 = 2050;
    v38 = v9;
    _os_log_impl(&dword_18F1DC000, v25, OS_LOG_TYPE_ERROR, "[RelDMService] Src IMU sample time interval is unexpectedly large. last=%{public}lluus , new=%{public}lluus, %{public}u < dt=%{public}lluus", buf, 0x26u);
  }
  v29 = sub_18F1FCA08(115, 0);
  result = 0;
  if (v29)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 == -1)
      goto LABEL_48;
    goto LABEL_52;
  }
  return result;
}

uint64_t sub_18F3F8380(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  uint8_t buf[4];
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)(a1 + 16061);
  if (!*(_BYTE *)(a1 + 16064))
    return 0;
  v4 = *(_QWORD *)(a1 + 5408);
  if (!v4 || (float)((float)v4 + 1000000.0) >= (float)a2)
    return 0;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
  v6 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
  {
    v7 = *(_QWORD *)(a1 + 5408);
    *(_DWORD *)buf = 134349568;
    v12 = a2;
    v13 = 2050;
    v14 = v7;
    v15 = 2050;
    v16 = (double)(a2 - v7) * 0.000001;
    _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_ERROR, "[RelDMService] Unexpectedly large time interval since last aux IMU sample, resetting. timestamp, %{public}llu, fLastAuxGyroTimestamp, %{public}llu, dt, %{public}f s", buf, 0x20u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v10 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "BOOL CMRelDMService::checkForLargeAuxDataGap(const uint64_t)", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  v8 = 1;
  sub_18F3F631C(a1, 1);
  *v2 = 1;
  ++*(_QWORD *)(a1 + 37416);
  return v8;
}

void sub_18F3F85F4(float32x2_t *a1, _OWORD *a2, float32x2_t *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  __int32 v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int16 v20;
  float32x2_t v21;
  float v22;
  char v23;

  sub_18F48E728((int *)&a1[652], a6);
  sub_18F3F8380((uint64_t)a1, a6);
  v23 = 0;
  if ((sub_18F3F7BF4((uint64_t)a1, a6, &v23) & 1) != 0)
  {
    sub_18F3F8790(a1 + 649, a3);
    v12 = a1[647].i32[0];
    if ((v12 & 1) == 0)
    {
      sub_18F33FACC((unsigned __int16 *)&a1[12] + 2, (uint64_t)a3);
      v13 = 0;
      v14 = 0.0;
      do
      {
        v14 = v14 + (float)(a3->f32[v13] * a3->f32[v13]);
        ++v13;
      }
      while (v13 != 3);
      v22 = sqrtf(v14);
      sub_18F33D300((uint64_t)&a1[88] + 4, &v22);
      sub_18F33FACC((unsigned __int16 *)&a1[571], a5);
      v12 = 0;
    }
    a1[647].i32[0] = v12 + 1;
    sub_18F33FACC((unsigned __int16 *)&a1[118], a4);
    sub_18F3F8818((unsigned __int16 *)&a1[269], a2);
    v15 = a1[470].u16[1];
    v16 = a1[470].u32[1];
    v17 = a1[470].u16[0];
    if (v17 + v15 >= v16)
      v18 = a1[470].u32[1];
    else
      v18 = 0;
    a1[v17 + v15 - v18 + 471] = (float32x2_t)a6;
    if (v16 <= v15)
    {
      v19 = v17 + 1;
      if (v19 >= v16)
        v20 = v16;
      else
        v20 = 0;
      a1[470].i16[0] = v19 - v20;
    }
    else
    {
      LOWORD(v15) = v15 + 1;
      a1[470].i16[1] = v15;
      LODWORD(v15) = (unsigned __int16)v15;
    }
    v21 = a1[648];
    if (v21)
    {
      if ((_DWORD)v16 == (_DWORD)v15)
        a1[648] = (float32x2_t)(*(_QWORD *)&v21 - 1);
    }
  }
  else if (v23)
  {
    sub_18F3F5F78((uint64_t)a1, 1);
  }
}

float32x2_t *sub_18F3F8790(float32x2_t *result, float32x2_t *a2)
{
  int v2;
  int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v2 = result->i32[0];
  v3 = result->i32[0] + 1;
  result->i32[0] = v3;
  v4 = a2[1].f32[0];
  if (v2 > 2)
  {
    v7 = result->f32[1];
    v8 = result[2].f32[0];
    result[1] = vsub_f32(result[1], vmul_n_f32(vsub_f32(result[1], *a2), v7));
    v6 = v8 - (float)(v7 * (float)(v8 - v4));
  }
  else
  {
    v5 = 1.0 / (float)v3;
    v6 = v5 * (float)((float)(result[2].f32[0] * (float)v2) + v4);
    result[1] = vmul_n_f32(vadd_f32(vmul_n_f32(result[1], (float)v2), *a2), v5);
  }
  result[2].f32[0] = v6;
  return result;
}

unsigned __int16 *sub_18F3F8818(unsigned __int16 *result, _OWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  *(_OWORD *)&result[8 * (v3 - v2) + 4] = *a2;
  v4 = result[1];
  v5 = *((unsigned int *)result + 1);
  if (v5 <= v4)
  {
    v6 = *result + 1;
    if (v6 < v5)
      LOWORD(v5) = 0;
    *result = v6 - v5;
  }
  else
  {
    result[1] = v4 + 1;
  }
  return result;
}

void sub_18F3F8878(uint64_t a1, float32x2_t *a2, float *a3, unint64_t a4, float a5)
{
  float32x2_t *v10;
  uint64_t v11;
  __int32 v12;
  float32x4_t v13;
  float32x2_t *v14;
  __int32 v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  uint64_t v19;
  unsigned int v20;
  __int32 v21;
  float v22;
  float v23;
  float *v24;
  NSObject *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  float32x4_t v33;
  float v34;
  float32x4_t v35;
  NSObject *v36;
  NSObject *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  float *v45;
  NSObject *v46;
  void **p_vtable;
  float *v48;
  NSObject *v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  NSObject *v57;
  float32x4_t v58;
  float32x2_t *v59;
  __int32 v60;
  float32x4_t v61;
  float32x4_t v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float *v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  __int32 v74;
  float32x4_t v75;
  uint64_t v76;
  float v77;
  int v78;
  int v79;
  void **v80;
  NSObject *v81;
  NSObject *v82;
  NSObject *v83;
  NSObject *v84;
  char *v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  float32x4_t v93;
  float v94;
  char *v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  uint64_t v117;
  double v118;
  float v119;
  float v120;
  float32x4_t v121;
  int v122;
  float v123;
  float v124;
  float v125;
  int v126;
  float v127;
  int v128;
  int v129;
  float32x4_t v130;
  uint64_t v131;
  int v132;
  _BYTE v133[12];
  _BYTE v134[10];
  __int16 v135;
  double v136;
  __int16 v137;
  double v138;
  __int16 v139;
  double v140;
  __int16 v141;
  double v142;
  __int16 v143;
  double v144;
  __int16 v145;
  double v146;
  __int16 v147;
  double v148;
  __int16 v149;
  double v150;
  __int16 v151;
  double v152;
  __int16 v153;
  double v154;
  __int16 v155;
  double v156;
  __int16 v157;
  double v158;
  _BYTE buf[22];
  __int16 v160;
  double v161;
  __int16 v162;
  double v163;
  __int16 v164;
  double v165;
  __int16 v166;
  double v167;
  __int16 v168;
  double v169;
  __int16 v170;
  double v171;
  __int16 v172;
  double v173;
  __int16 v174;
  double v175;
  __int16 v176;
  double v177;
  __int16 v178;
  double v179;
  __int16 v180;
  double v181;
  __int16 v182;
  double v183;
  uint64_t v184;

  v184 = *MEMORY[0x1E0C80C00];
  v10 = (float32x2_t *)(a1 + 33592);
  v11 = a1 + 15940;
  if ((*(_DWORD *)(a1 + 40) == 1 || *(_BYTE *)(a1 + 37408)) && *(_BYTE *)(a1 + 33672))
  {
    sub_18F4DEC74(a1 + 33656, a2, a4, 180.0);
    v12 = v10[9].i32[1];
    v13.f32[0] = -v10[9].f32[0];
    *(float32x2_t *)buf = vneg_f32(v10[8]);
    *(_DWORD *)&buf[8] = v13.i32[0];
    *(_DWORD *)&buf[12] = v12;
    sub_18F1FFE94((float32x4_t *)buf, v13);
    sub_18F3D37E4((float32x4_t *)buf, &v121);
    v14 = (float32x2_t *)sub_18F382974(a1 + 64);
    v15 = v14[1].i32[1];
    v16.f32[0] = -v14[1].f32[0];
    *(float32x2_t *)v133 = vneg_f32(*v14);
    *(_DWORD *)&v133[8] = v16.i32[0];
    *(_DWORD *)v134 = v15;
    v17 = sub_18F1FFE94((float32x4_t *)v133, v16);
    sub_18F3D3764((uint64_t)&v121, (float *)v133, (float32x4_t *)buf, v17);
    v18 = sub_18F3D3B4C((float32x4_t *)buf);
    v19 = 0;
    v130.i64[0] = __PAIR64__(v20, LODWORD(v18));
    v130.i32[2] = v21;
    v22 = 0.0;
    do
    {
      v22 = v22 + (float)(v130.f32[v19] * v130.f32[v19]);
      ++v19;
    }
    while (v19 != 3);
    v23 = sqrtf(v22);
    if (v23 > 0.017453)
    {
      sub_18F3D37E4((float32x4_t *)(a1 + 37392), &v130);
      v24 = a3;
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v25 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
      {
        v116 = *(float *)sub_18F382974(a1 + 64);
        v114 = *(float *)(sub_18F382974(a1 + 64) + 4);
        v112 = *(float *)(sub_18F382974(a1 + 64) + 8);
        v26 = *(float *)(sub_18F382974(a1 + 64) + 12);
        v27 = v121.f32[0];
        v119 = a5;
        v28 = v121.f32[1];
        v29 = v121.f32[2];
        v30 = v130.f32[0];
        v31 = v130.f32[1];
        v32 = v130.f32[2];
        v108 = v130.f32[3];
        v109 = v121.f32[3];
        *(double *)v33.i64 = v23;
        v34 = sub_18F4DEEB8(v10 + 8, v33);
        *(_DWORD *)buf = 134352384;
        *(double *)&buf[4] = v116;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v114;
        v160 = 2050;
        v161 = v112;
        v162 = 2050;
        v163 = v26;
        v164 = 2050;
        v165 = v27;
        v166 = 2050;
        v167 = v28;
        a5 = v119;
        v168 = 2050;
        v169 = v29;
        v170 = 2050;
        v171 = v109;
        v172 = 2050;
        v173 = v30;
        v174 = 2050;
        v175 = v31;
        v176 = 2050;
        v177 = v32;
        v178 = 2050;
        v179 = v108;
        v180 = 2050;
        v181 = v23;
        v182 = 2050;
        v183 = v34;
        _os_log_impl(&dword_18F1DC000, v25, OS_LOG_TYPE_DEBUG, "[RelDMService] Head to Headset attitude updated. Previous q_bf: %{public}.6f %{public}.6f %{public}.6f %{public}.6f , New q_bf: %{public}.6f %{public}.6f %{public}.6f %{public}.6f, Default q_bf: %{public}.6f %{public}.6f %{public}.6f %{public}.6f, angle between previous: %{public}.2f deg, angle between default: %{public}.2f deg", buf, 0x8Eu);
      }
      a3 = v24;
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        v120 = a5;
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v118 = *(float *)sub_18F382974(a1 + 64);
        v115 = *(float *)(sub_18F382974(a1 + 64) + 4);
        v113 = *(float *)(sub_18F382974(a1 + 64) + 8);
        v86 = *(float *)(sub_18F382974(a1 + 64) + 12);
        v87 = v121.f32[0];
        v88 = v121.f32[1];
        v89 = v121.f32[2];
        v90 = v130.f32[0];
        v91 = v130.f32[1];
        v92 = v130.f32[2];
        *(double *)v93.i64 = v130.f32[3];
        v110 = v130.f32[3];
        v111 = v121.f32[3];
        v94 = sub_18F4DEEB8(v10 + 8, v93);
        *(_DWORD *)v133 = 134352384;
        *(double *)&v133[4] = v118;
        *(_WORD *)v134 = 2050;
        *(double *)&v134[2] = v115;
        v135 = 2050;
        v136 = v113;
        v137 = 2050;
        v138 = v86;
        v139 = 2050;
        v140 = v87;
        v141 = 2050;
        v142 = v88;
        v143 = 2050;
        v144 = v89;
        v145 = 2050;
        v146 = v111;
        v147 = 2050;
        v148 = v90;
        v149 = 2050;
        v150 = v91;
        v151 = 2050;
        v152 = v92;
        v153 = 2050;
        v154 = v110;
        v155 = 2050;
        v156 = v23;
        v157 = 2050;
        v158 = v94;
        v95 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::feedAnchor(const CMOQuaternion &, const CMVector3d &, float, const uint64_t)", "CoreLocation: %s\n", v95);
        if (v95 != buf)
          free(v95);
        a5 = v120;
        a3 = v24;
      }
    }
    v35 = v121;
    *(float32x4_t *)(a1 + 76) = v121;
    *(_BYTE *)(a1 + 92) = 1;
    *(float32x4_t *)(a1 + 15924) = v35;
    *(_BYTE *)v11 = 1;
  }
  if (*(_BYTE *)(v11 + 118))
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v36 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v36, OS_LOG_TYPE_INFO, "[RelDMService] Tracking will be re-enabled from getting anchor.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      *(_WORD *)v133 = 0;
      v85 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::feedAnchor(const CMOQuaternion &, const CMVector3d &, float, const uint64_t)", "CoreLocation: %s\n", v85);
      if (v85 != buf)
        free(v85);
    }
    *(_BYTE *)(v11 + 122) = 1;
    return;
  }
  if (!*(_DWORD *)(a1 + 40) || !*(_BYTE *)(a1 + 92))
    return;
  if (sub_18F38DA68((float *)(a1 + 5840)))
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v37 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a4;
      _os_log_impl(&dword_18F1DC000, v37, OS_LOG_TYPE_DEFAULT, "[RelDMService][feedAnchor] anchor is SKIPPED, timestamp: %llu", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      *(_DWORD *)v133 = 134217984;
      *(_QWORD *)&v133[4] = a4;
LABEL_86:
      v44 = (_BYTE *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::feedAnchor(const CMOQuaternion &, const CMVector3d &, float, const uint64_t)", "CoreLocation: %s\n");
LABEL_87:
      if (v44 != buf)
        free(v44);
      return;
    }
    return;
  }
  v39 = v11 + 124;
  v38 = *(unsigned __int8 *)(v11 + 124);
  if (*(_BYTE *)(v11 + 124))
  {
    v40 = *(_QWORD *)(a1 + 5408);
    if (v40)
    {
      if (v40 + 250000 < a4)
      {
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v41 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
        {
          v42 = *(_QWORD *)(a1 + 5408);
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)&buf[4] = a4;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v42;
          _os_log_impl(&dword_18F1DC000, v41, OS_LOG_TYPE_ERROR, "[RelDMService] anchor data is far ahead of IMU: anchor, %{public}llu, auxIMU, %{public}llu", buf, 0x16u);
        }
        if (sub_18F1FCA08(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953648);
          v43 = *(_QWORD *)(a1 + 5408);
          *(_DWORD *)v133 = 134349312;
          *(_QWORD *)&v133[4] = a4;
          *(_WORD *)v134 = 2050;
          *(_QWORD *)&v134[2] = v43;
          v44 = (_BYTE *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "void CMRelDMService::feedAnchor(const CMOQuaternion &, const CMVector3d &, float, const uint64_t)", "CoreLocation: %s\n");
          goto LABEL_87;
        }
        return;
      }
    }
  }
  v117 = a1 + 64;
  if (*(_BYTE *)(v11 + 116))
  {
    if (*(_DWORD *)(a1 + 40) != 1)
    {
      *(_WORD *)(v11 + 116) = 256;
      if (v38)
      {
        sub_18F380CAC(v11 + 124, v117, 1);
        v45 = a3;
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v46 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v46, OS_LOG_TYPE_DEFAULT, "[RelDMService] Entering 2-IMU with anchored tracking.", buf, 2u);
        }
        a3 = v45;
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953648);
          *(_WORD *)v133 = 0;
          v107 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::feedAnchor(const CMOQuaternion &, const CMVector3d &, float, const uint64_t)", "CoreLocation: %s\n", v107);
          if (v107 != buf)
            free(v107);
          a3 = v45;
        }
      }
    }
  }
  p_vtable = &OBJC_METACLASS___CMCardioFitnessSummary.vtable;
  v48 = a3;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
  v49 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    v50 = *v48;
    v51 = v48[1];
    v52 = v48[2];
    v53 = a2->f32[0];
    v54 = a2->f32[1];
    v55 = a2[1].f32[0];
    v56 = a2[1].f32[1];
    *(_DWORD *)buf = 134220032;
    *(_QWORD *)&buf[4] = a4;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = a5;
    v160 = 2048;
    v161 = v50;
    v162 = 2048;
    v163 = v51;
    v164 = 2048;
    v165 = v52;
    v166 = 2048;
    v167 = v53;
    v168 = 2048;
    v169 = v54;
    v170 = 2048;
    v171 = v55;
    v172 = 2048;
    v173 = v56;
    _os_log_impl(&dword_18F1DC000, v49, OS_LOG_TYPE_DEFAULT, "[RelDMService][feedAnchor][AnchorBeforeTransform], timestamp: %llu, lidAngleDeg: %.1f, _r_fc: (%.2f, %.2f, %.2f), _q_cf: (%.3f, %.3f, %.3f, %.3f)", buf, 0x5Cu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v96 = *v48;
    v97 = v48[1];
    v98 = v48[2];
    v99 = a2->f32[0];
    v100 = a2->f32[1];
    v101 = a2[1].f32[0];
    v102 = a2[1].f32[1];
    *(_DWORD *)v133 = 134220032;
    *(_QWORD *)&v133[4] = a4;
    *(_WORD *)v134 = 2048;
    *(double *)&v134[2] = a5;
    v135 = 2048;
    v136 = v96;
    v137 = 2048;
    v138 = v97;
    v139 = 2048;
    v140 = v98;
    v141 = 2048;
    v142 = v99;
    v143 = 2048;
    v144 = v100;
    v145 = 2048;
    v146 = v101;
    v147 = 2048;
    v148 = v102;
    v103 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::feedAnchor(const CMOQuaternion &, const CMVector3d &, float, const uint64_t)", "CoreLocation: %s\n", v103);
    if (v103 != buf)
      free(v103);
    p_vtable = (void **)(&OBJC_METACLASS___CMCardioFitnessSummary + 24);
  }
  v131 = 0x80000000;
  v132 = 0;
  sub_18F3D3AA8(&v130, (float *)&v131);
  if (p_vtable[259] != (void *)-1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
  v57 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218752;
    *(double *)&buf[4] = v130.f32[0];
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v130.f32[1];
    v160 = 2048;
    v161 = v130.f32[2];
    v162 = 2048;
    v163 = v130.f32[3];
    _os_log_impl(&dword_18F1DC000, v57, OS_LOG_TYPE_DEFAULT, "[SourceAnchorTransform] q_sc: [%.3f, %.3f, %.3f, %.3f] ", buf, 0x2Au);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    *(_DWORD *)v133 = 134218752;
    *(double *)&v133[4] = v130.f32[0];
    *(_WORD *)v134 = 2048;
    *(double *)&v134[2] = v130.f32[1];
    v135 = 2048;
    v136 = v130.f32[2];
    v137 = 2048;
    v138 = v130.f32[3];
    v104 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "AnchorData CMRelDM::SourceAnchorTransform::transformAnchor(const CMVector3d &, const CMOQuaternion &, const BodyFaceTransform &, const float) const", "CoreLocation: %s\n", v104);
    if (v104 != buf)
      free(v104);
  }
  sub_18F3D3764((uint64_t)&v130, (float *)a2, (float32x4_t *)v133, v58);
  v59 = (float32x2_t *)sub_18F382974(v117);
  v60 = v59[1].i32[1];
  v61.f32[0] = -v59[1].f32[0];
  *(float32x2_t *)v121.f32 = vneg_f32(*v59);
  v121.i64[1] = __PAIR64__(v60, v61.u32[0]);
  v62 = sub_18F1FFE94(&v121, v61);
  sub_18F3D3764((uint64_t)v133, v121.f32, (float32x4_t *)buf, v62);
  v63 = sub_18F3D39F4(v130.f32, *v48, v48[1], v48[2]);
  v65 = v64;
  v67 = v66;
  v68 = (float *)sub_18F3827D8(v117);
  v69 = sub_18F3D39F4((float *)buf, *v68, v68[1], v68[2]);
  v71 = v70;
  v73 = v72;
  v74 = a2[1].i32[1];
  v75.f32[0] = -a2[1].f32[0];
  *(float32x2_t *)v133 = vneg_f32(*a2);
  *(_DWORD *)&v133[8] = v75.i32[0];
  *(_DWORD *)v134 = v74;
  sub_18F1FFE94((float32x4_t *)v133, v75);
  v76 = 0;
  v121.i64[0] = *(_QWORD *)v48;
  v121.f32[2] = v48[2];
  do
  {
    v121.f32[v76] = -v121.f32[v76];
    ++v76;
  }
  while (v76 != 3);
  v77 = sub_18F3D39F4((float *)v133, v121.f32[0], v121.f32[1], v121.f32[2]);
  v121 = *(float32x4_t *)buf;
  v122 = 969384531;
  v123 = (float)(v63 - v69) + 0.0;
  v124 = (float)(v65 - v71) + 0.0;
  v125 = (float)(v67 - v73) + 0.0;
  v126 = 961656599;
  v127 = v77;
  v128 = v78;
  v129 = v79;
  sub_18F330CFC((uint64_t)v10, &v121, a4);
  if (v10->i8[0])
  {
    sub_18F37F910(v39, (uint64_t)&v121, *(_DWORD *)(a1 + 40), a4);
    v80 = &OBJC_METACLASS___CMCardioFitnessSummary.vtable;
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v81 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134220032;
      *(_QWORD *)&buf[4] = a4;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = a5;
      v160 = 2048;
      v161 = v123;
      v162 = 2048;
      v163 = v124;
      v164 = 2048;
      v165 = v125;
      v166 = 2048;
      v167 = v121.f32[0];
      v168 = 2048;
      v169 = v121.f32[1];
      v170 = 2048;
      v171 = v121.f32[2];
      v172 = 2048;
      v173 = v121.f32[3];
      _os_log_impl(&dword_18F1DC000, v81, OS_LOG_TYPE_DEFAULT, "[RelDMService][feedAnchor] timestamp: %llu, lidAngleDeg: %.1f, r_bs: (%.2f, %.2f, %.2f), q_sb: (%.3f, %.3f, %.3f, %.3f)", buf, 0x5Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      *(_DWORD *)v133 = 134220032;
      *(_QWORD *)&v133[4] = a4;
      *(_WORD *)v134 = 2048;
      *(double *)&v134[2] = a5;
      v135 = 2048;
      v136 = v123;
      v137 = 2048;
      v138 = v124;
      v139 = 2048;
      v140 = v125;
      v141 = 2048;
      v142 = v121.f32[0];
      v143 = 2048;
      v144 = v121.f32[1];
      v145 = 2048;
      v146 = v121.f32[2];
      v147 = 2048;
      v148 = v121.f32[3];
      v105 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::feedAnchor(const CMOQuaternion &, const CMVector3d &, float, const uint64_t)", "CoreLocation: %s\n", v105);
      if (v105 != buf)
        free(v105);
      v80 = (void **)(&OBJC_METACLASS___CMCardioFitnessSummary + 24);
    }
    if (*(_QWORD *)(a1 + 26400) == a4)
    {
      *(_OWORD *)(a1 + 15968) = 0u;
      *(_OWORD *)(a1 + 15952) = 0u;
      *(_QWORD *)(a1 + 16048) = 0;
      if (v80[259] != (void *)-1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v82 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a4;
        _os_log_impl(&dword_18F1DC000, v82, OS_LOG_TYPE_DEFAULT, "[RelDMService][feedAnchor] anchor is VALID, timestamp: %llu", buf, 0xCu);
      }
      if (!sub_18F1FCA08(115, 2))
        goto LABEL_94;
      bzero(buf, 0x65CuLL);
      if (v80[259] != (void *)-1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      *(_DWORD *)v133 = 134217984;
      *(_QWORD *)&v133[4] = a4;
    }
    else
    {
      if (v80[259] != (void *)-1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v84 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a4;
        _os_log_impl(&dword_18F1DC000, v84, OS_LOG_TYPE_DEFAULT, "[RelDMService][feedAnchor] anchor is NOT-VALID, timestamp: %llu", buf, 0xCu);
      }
      if (!sub_18F1FCA08(115, 2))
        goto LABEL_94;
      bzero(buf, 0x65CuLL);
      if (v80[259] != (void *)-1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      *(_DWORD *)v133 = 134217984;
      *(_QWORD *)&v133[4] = a4;
    }
    v106 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::feedAnchor(const CMOQuaternion &, const CMVector3d &, float, const uint64_t)", "CoreLocation: %s\n", v106);
    if (v106 != buf)
      free(v106);
LABEL_94:
    *(_QWORD *)(a1 + 5808) = a4;
    return;
  }
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
  v83 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a4;
    _os_log_impl(&dword_18F1DC000, v83, OS_LOG_TYPE_DEFAULT, "[RelDMService] [feedAnchor][AnchorMotionCorrespondence] anchor is IGNORED, timestamp: %llu", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    *(_DWORD *)v133 = 134217984;
    *(_QWORD *)&v133[4] = a4;
    goto LABEL_86;
  }
}

void sub_18F3F9E64(uint64_t a1, unint64_t a2, float *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float32x2_t *v14;
  __int32 v15;
  float32x4_t v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  float *v21;
  float v22;
  float v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  double v27;
  double v28;
  float32x4_t *v29;
  float v30[3];
  int v31;
  double v32;
  float32x4_t buf[102];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 92))
  {
    v6 = a1 + 27428;
    v7 = a1 + 64;
    v8 = a1 + 5336;
    v9 = sub_18F200A14((float *)(a1 + 5392));
    v11 = v10;
    v13 = v12;
    v14 = (float32x2_t *)sub_18F382974(v7);
    v15 = v14[1].i32[1];
    v16.f32[0] = -v14[1].f32[0];
    *(float32x2_t *)buf[0].f32 = vneg_f32(*v14);
    buf[0].i64[1] = __PAIR64__(v15, v16.u32[0]);
    sub_18F1FFE94(buf, v16);
    v30[0] = sub_18F3D39F4(buf[0].f32, v9, v11, v13);
    v30[1] = v17;
    v30[2] = v18;
    sub_18F40DA50(a1 + 27344, v30);
    v19 = 0;
    v20 = 0.0;
    do
    {
      v20 = v20 + (float)(*(float *)(v8 + v19) * *(float *)(v8 + v19));
      v19 += 4;
    }
    while (v19 != 12);
    *(float *)(v6 + 76) = sqrtf(v20);
    if (*(_DWORD *)(a1 + 40))
    {
      v21 = (float *)sub_18F382974(v7);
      sub_18F3D3A70(v21, *a3, a3[1], a3[2]);
      if (v22 <= 0.0)
        v23 = -v22;
      else
        v23 = v22;
      if (*(_BYTE *)(v6 + 10))
      {
        if (!*(_BYTE *)(v6 + 92) && v23 > 0.87266)
        {
          *(_BYTE *)(v6 + 10) = 0;
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953648);
          v24 = qword_1EE16D820;
          if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
          {
            buf[0].i32[0] = 134349056;
            *(double *)((char *)buf[0].i64 + 4) = (float)(v23 * 57.296);
            _os_log_impl(&dword_18F1DC000, v24, OS_LOG_TYPE_DEFAULT, "[RelDMService] Turn OFF convergingToAnchorMode in perceptualFilter. headRawDps %{public}.3f", (uint8_t *)buf, 0xCu);
          }
          if (sub_18F1FCA08(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2953648);
            v31 = 134349056;
            v32 = (float)(v23 * 57.296);
LABEL_30:
            v29 = (float32x4_t *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::perceptualFilterUpdate(const uint64_t, const CMVector3d &)", "CoreLocation: %s\n", (const char *)v29);
            if (v29 != buf)
              free(v29);
          }
        }
      }
      else
      {
        v25 = *(_QWORD *)(a1 + 26400);
        if (v25 && v25 + 250000 > a2)
        {
          *(_BYTE *)(v6 + 10) = 1;
          *(_BYTE *)v6 = 0;
          *(_DWORD *)(v6 + 4) = 0;
          *(_QWORD *)(a1 + 27396) = 0;
          *(_QWORD *)(a1 + 27401) = 0;
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953648);
          v26 = qword_1EE16D820;
          if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
          {
            v27 = (float)((float)(a2 - *(_QWORD *)(a1 + 26400)) * 0.000001);
            buf[0].i32[0] = 134349056;
            *(double *)((char *)buf[0].i64 + 4) = v27;
            _os_log_impl(&dword_18F1DC000, v26, OS_LOG_TYPE_DEFAULT, "[RelDMService] Turn ON convergingToAnchorMode in perceptualFilter. timeSinceAnchorSeconds %{public}.2f", (uint8_t *)buf, 0xCu);
          }
          if (sub_18F1FCA08(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2953648);
            v28 = (float)((float)(a2 - *(_QWORD *)(a1 + 26400)) * 0.000001);
            v31 = 134349056;
            v32 = v28;
            goto LABEL_30;
          }
        }
      }
    }
  }
}

void sub_18F3FA2A4(uint64_t a1, float32x2_t *a2, unint64_t a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  NSObject *v9;
  unint64_t v10;
  BOOL v11;
  float v12;
  float v13;
  NSObject *v14;
  int v15;
  int v16;
  NSObject *v17;
  int v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  NSObject *v22;
  uint64_t v23;
  double v24;
  char *v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  unint64_t v29;
  float32x4_t v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  float32x4_t v34;
  double v35;
  float32x2_t v36;
  uint64_t v37;
  float v38;
  __int32 v39;
  float v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  NSObject *v45;
  __int128 v46;
  float v47;
  int v48;
  BOOL v50;
  _BOOL4 v51;
  char *v52;
  char *v53;
  int v54;
  char *v55;
  double v56;
  char *v57;
  double v58;
  char *v59;
  char *v60;
  char *v61;
  int32x2_t v62;
  float32x2_t v63;
  float v64;
  float32x4_t v65;
  int v66;
  double v67;
  __int16 v68;
  double v69;
  _BYTE buf[32];
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v6 = (unsigned __int8 *)(a1 + 27520);
  v7 = (unsigned __int8 *)(a1 + 16058);
  if (*(_DWORD *)(a1 + 40) != 1)
    goto LABEL_33;
  if (*(_BYTE *)(a1 + 44))
  {
    v8 = *v6;
    if (*v7)
    {
      sub_18F495DC8(a1 + 27520, *(_QWORD *)(a1 + 5784), a3, *(unsigned __int8 *)(a1 + 37448));
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 26400);
      v11 = a3 <= v10 || v10 == 0;
      v12 = 3.4028e38;
      if (!v11)
        v12 = (float)(a3 - v10) * 0.000001;
      v13 = *(double *)(a1 + 16048);
      sub_18F4957C0(a1 + 27520, a1 + 15904, *(_BYTE *)(a1 + 16064), a3, v13, v12);
    }
    if ((v8 != 0) != (*v6 != 0))
    {
      if (*v6)
      {
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v14 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
        {
          v15 = *v7;
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = v15;
          _os_log_impl(&dword_18F1DC000, v14, OS_LOG_TYPE_DEFAULT, "[RelDMService] Started requesting anchor, in DV %{public}d.", buf, 8u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953648);
          v16 = *v7;
          v66 = 67240192;
          LODWORD(v67) = v16;
LABEL_119:
          v55 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::camControllerUpdate(const uint64_t)", "CoreLocation: %s\n", v55);
          if (v55 != buf)
            free(v55);
        }
      }
      else
      {
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v17 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
        {
          v18 = *v7;
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = v18;
          _os_log_impl(&dword_18F1DC000, v17, OS_LOG_TYPE_DEFAULT, "[RelDMService] Stopped requesting anchor, in DV %{public}d.", buf, 8u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953648);
          v54 = *v7;
          v66 = 67240192;
          LODWORD(v67) = v54;
          goto LABEL_119;
        }
      }
    }
  }
  else
  {
    *v6 = 0;
    if (*(_BYTE *)(a1 + 45))
    {
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v9 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_DEFAULT, "[RelDMService] Stop requesting anchor if screen is locked or off.", buf, 2u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        LOWORD(v66) = 0;
        v53 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::camControllerUpdate(const uint64_t)", "CoreLocation: %s\n", v53);
        if (v53 != buf)
          free(v53);
      }
      *(_BYTE *)(a1 + 45) = *(_BYTE *)(a1 + 44);
    }
  }
LABEL_33:
  if (*(_WORD *)(a1 + 3762))
  {
    if (*(_QWORD *)(a1 + 5416) && (v19 = *(_QWORD *)(a1 + 5408)) != 0)
    {
      v20 = a3 >= v19;
      v21 = a3 - v19;
      if (v21 != 0 && v20 && v21 > 0x9CE)
      {
        if (v21 < 0x75301)
        {
          v29 = *(unint64_t *)(a1 + 5184);
          if ((sub_18F3FB33C(a1, a3) & 1) != 0)
          {
            if (*(_QWORD *)(a1 + 5184) == v29)
            {
              if (qword_1EE16D818 != -1)
                dispatch_once(&qword_1EE16D818, &unk_1E2953648);
              v31 = qword_1EE16D820;
              if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 134349312;
                *(_QWORD *)&buf[4] = a3;
                *(_WORD *)&buf[12] = 2050;
                *(_QWORD *)&buf[14] = v29;
                _os_log_impl(&dword_18F1DC000, v31, OS_LOG_TYPE_ERROR, "[RelDMService] Unexpected. activeIndex unchanged. %{public}llu, last, %{public}lu", buf, 0x16u);
              }
              if (sub_18F1FCA08(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE16D818 != -1)
                  dispatch_once(&qword_1EE16D818, &unk_1E2953648);
                v66 = 134349312;
                v67 = *(double *)&a3;
                v68 = 2050;
                v69 = *(double *)&v29;
                v60 = (char *)_os_log_send_and_compose_impl();
                sub_18F419700("Generic", 1, 0, 0, "void CMRelDMService::feedAuxIMU(const IMUData &, const uint64_t)", "CoreLocation: %s\n", v60);
                if (v60 != buf)
                  free(v60);
              }
              ++*((_QWORD *)v6 + 1239);
            }
            else
            {
              if (!v7[6])
                sub_18F3FBA30(a1, a2, v30);
              *(double *)v34.i64 = sub_18F3D37C4((float32x2_t *)(a1 + 5392), (float32x4_t *)buf, v30);
              v35 = sub_18F3D3764((uint64_t)&a2[7], (float *)buf, &v65, v34);
              *(float *)&v35 = (float)(a3 - *(_QWORD *)(a1 + 5408));
              v62 = *(int32x2_t *)&v35;
              v36.f32[0] = sub_18F3D3B4C(&v65);
              v37 = 0;
              v36.i32[1] = v39;
              v63 = vdiv_f32(vmul_f32(v36, (float32x2_t)vdup_n_s32(0x49742400u)), (float32x2_t)vdup_lane_s32(v62, 0));
              v64 = (float)(v38 * 1000000.0) / *(float *)v62.i32;
              v40 = 0.0;
              do
              {
                v40 = v40 + (float)(a2->f32[v37] * a2->f32[v37]);
                ++v37;
              }
              while (v37 != 3);
              v41 = 0;
              v42 = 0.0;
              do
              {
                v42 = v42 + (float)(v63.f32[v41] * v63.f32[v41]);
                ++v41;
              }
              while (v41 != 3);
              v43 = sqrtf(v40);
              if (v43 > 0.1)
              {
                v44 = sqrtf(v42);
                if (v44 > (float)(v43 * 100.0))
                {
                  if (qword_1EE16D818 != -1)
                    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
                  v45 = qword_1EE16D820;
                  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 134349312;
                    *(double *)&buf[4] = v44;
                    *(_WORD *)&buf[12] = 2050;
                    *(double *)&buf[14] = v43;
                    _os_log_impl(&dword_18F1DC000, v45, OS_LOG_TYPE_DEFAULT, "[RelDMService] Unexpected large discrepency between avgAuxOmega and instAuxOmega. avg, %{public}.3f, inst, %{public}.3f", buf, 0x16u);
                  }
                  if (sub_18F1FCA08(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1EE16D818 != -1)
                      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
                    v66 = 134349312;
                    v67 = v44;
                    v68 = 2050;
                    v69 = v43;
                    v61 = (char *)_os_log_send_and_compose_impl();
                    sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::feedAuxIMU(const IMUData &, const uint64_t)", "CoreLocation: %s\n", v61);
                    if (v61 != buf)
                      free(v61);
                  }
                }
              }
              v46 = *(_OWORD *)(a1 + 5352);
              *(_OWORD *)buf = *(_OWORD *)(a1 + 5336);
              *(_OWORD *)&buf[16] = v46;
              v71 = *(_OWORD *)(a1 + 5368);
              v72 = *(_QWORD *)(a1 + 5384);
              v73 = *(_OWORD *)(a1 + 5392);
              sub_18F3FBC6C(a1 + 5336, (uint64_t)a2);
              *(double *)(a1 + 5408) = *(double *)&a3;
              sub_18F3F9E64(a1, a3, (float *)&v63);
              if (v7[6])
                goto LABEL_139;
              v47 = (float)*(unint64_t *)(a1 + 5416) + 1500000.0;
              v48 = *(_DWORD *)(a1 + 40);
              if (v47 <= (float)a3 && v48 == 2)
              {
                v48 = 1;
                *(_DWORD *)(a1 + 40) = 1;
              }
              v50 = v47 <= (float)a3 && v48 == 1;
              v51 = v50;
              if (!v48 || v51)
              {
LABEL_139:
                if (!*v7)
                  sub_18F3FBCE8(a1, (uint64_t)buf, &v63, v29);
              }
            }
          }
          else
          {
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2953648);
            v32 = qword_1EE16D820;
            if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
            {
              v33 = *(_QWORD *)(a1 + 5184);
              *(_DWORD *)buf = 134349312;
              *(_QWORD *)&buf[4] = a3;
              *(_WORD *)&buf[12] = 2050;
              *(_QWORD *)&buf[14] = v33;
              _os_log_impl(&dword_18F1DC000, v32, OS_LOG_TYPE_ERROR, "[RelDMService] failed to find new activeIdxSrc, %{public}llu, last, %{public}lu", buf, 0x16u);
            }
            if (sub_18F1FCA08(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE16D818 != -1)
                dispatch_once(&qword_1EE16D818, &unk_1E2953648);
              v58 = *(double *)(a1 + 5184);
              v66 = 134349312;
              v67 = *(double *)&a3;
              v68 = 2050;
              v69 = v58;
              v59 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 0, "void CMRelDMService::feedAuxIMU(const IMUData &, const uint64_t)", "CoreLocation: %s\n", v59);
              if (v59 != buf)
                free(v59);
            }
            ++*((_QWORD *)v6 + 1238);
          }
        }
        else
        {
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953648);
          v27 = qword_1EE16D820;
          if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
          {
            v28 = *(_QWORD *)(a1 + 5408);
            *(_DWORD *)buf = 134349312;
            *(_QWORD *)&buf[4] = a3;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = v28;
            _os_log_impl(&dword_18F1DC000, v27, OS_LOG_TYPE_ERROR, "[RelDMService] Aux data timestamp has large gap: current, %{public}llu, last, %{public}llu", buf, 0x16u);
          }
          if (sub_18F1FCA08(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2953648);
            v56 = *(double *)(a1 + 5408);
            v66 = 134349312;
            v67 = *(double *)&a3;
            v68 = 2050;
            v69 = v56;
            v57 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 0, "void CMRelDMService::feedAuxIMU(const IMUData &, const uint64_t)", "CoreLocation: %s\n", v57);
            if (v57 != buf)
              free(v57);
          }
          sub_18F3FB274(a1, (uint64_t)a2, a3);
          sub_18F389FA4(a1 + 5840, 0);
          *(_DWORD *)(a1 + 16128) = 0;
          *(_DWORD *)(a1 + 17416) = 0;
          *(_DWORD *)(a1 + 26424) = 0;
          *(_DWORD *)(a1 + 26448) = 0;
          *(_DWORD *)(a1 + 26968) = 0;
          *(_DWORD *)(a1 + 27216) = 0;
          ++*((_QWORD *)v6 + 1237);
        }
      }
      else
      {
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v22 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
        {
          v23 = *(_QWORD *)(a1 + 5408);
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)&buf[4] = a3;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v23;
          _os_log_impl(&dword_18F1DC000, v22, OS_LOG_TYPE_DEBUG, "[RelDMService] Aux data timestamp stayed the same or went backwards: current, %{public}llu, last, %{public}llu", buf, 0x16u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953648);
          v24 = *(double *)(a1 + 5408);
          v66 = 134349312;
          v67 = *(double *)&a3;
          v68 = 2050;
          v69 = v24;
          v25 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::feedAuxIMU(const IMUData &, const uint64_t)", "CoreLocation: %s\n", v25);
          if (v25 != buf)
            free(v25);
        }
      }
    }
    else
    {
      sub_18F3FB274(a1, (uint64_t)a2, a3);
    }
  }
  else
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v26 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v26, OS_LOG_TYPE_ERROR, "[RelDMService] Source IMU data missing", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      LOWORD(v66) = 0;
      v52 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CMRelDMService::feedAuxIMU(const IMUData &, const uint64_t)", "CoreLocation: %s\n", v52);
      if (v52 != buf)
        free(v52);
    }
    ++*((_QWORD *)v6 + 1240);
  }
}

uint64_t sub_18F3FB274(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)(a1 + 5184) = 0;
  *(_QWORD *)(a1 + 5408) = 0;
  result = sub_18F3FB33C(a1, a3);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 5336) = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 5340) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a1 + 5344) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 5348) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 5352) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 5356) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 5360) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 5364) = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a1 + 5368) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 5372) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 5376) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 5380) = *(_DWORD *)(a2 + 44);
    *(_QWORD *)(a1 + 5384) = *(_QWORD *)(a2 + 48);
    if (a1 + 5336 != a2)
      *(_OWORD *)(a1 + 5392) = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 5408) = a3;
    *(_QWORD *)(a1 + 5416) = a3;
  }
  return result;
}

uint64_t sub_18F3FB33C(uint64_t a1, unint64_t a2)
{
  unsigned __int16 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  float v8;
  uint64_t v9;
  double v10;
  float v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  NSObject *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  double v25;
  float v26;
  unint64_t v27;
  NSObject *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  NSObject *v37;
  int v38;
  double v39;
  char *v40;
  uint8_t buf[4];
  unint64_t v42;
  __int16 v43;
  unint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  double v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!*(_WORD *)(a1 + 3762))
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v16 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v16, OS_LOG_TYPE_ERROR, "[RelDMService] calcActiveIndexSrc: srcBuffer is empty.", buf, 2u);
    }
    v17 = sub_18F1FCA08(115, 0);
    result = 0;
    if (!v17)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 == -1)
      goto LABEL_48;
    goto LABEL_51;
  }
  v4 = (unsigned __int16 *)(a1 + 3760);
  v5 = *(_QWORD *)sub_18F383E04((unsigned __int16 *)(a1 + 3760), 0);
  v6 = a2 + 5000;
  v7 = *(_QWORD *)sub_18F383E04(v4, 0);
  if (v5 <= a2 + 5000)
  {
    if (v7 >= a2 && *(_QWORD *)sub_18F383E04(v4, 0) <= v6)
    {
      *(_QWORD *)(a1 + 5184) = 0;
      return 1;
    }
    v18 = a1 + 3768;
    v19 = *(unsigned __int16 *)(a1 + 3762);
    v20 = *(unsigned __int16 *)(a1 + 3760) + v19 - 1;
    v21 = *(unsigned int *)(a1 + 3764);
    if (v20 < v21)
      v21 = 0;
    v22 = *(_QWORD *)(v18 + 8 * (v20 - v21));
    if (v22 + 10000 >= a2)
    {
      v33 = *(_QWORD *)(a1 + 5184);
      while (v19 > v33)
      {
        if (*(_QWORD *)sub_18F383E04(v4, --v19) <= a2)
        {
          v34 = (_QWORD *)sub_18F383E04(v4, v19);
          if (v19 >= (unint64_t)*(unsigned __int16 *)(a1 + 3762) - 1
            || (v35 = v19 + 1, v36 = a2 - *v34, *(_QWORD *)sub_18F383E04(v4, v19 + 1) - a2 >= v36))
          {
            v35 = v19;
          }
          *(_QWORD *)(a1 + 5184) = v35;
          return 1;
        }
      }
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v37 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v37, OS_LOG_TYPE_ERROR, "[RelDMService] Should not end up here.", buf, 2u);
      }
      v38 = sub_18F1FCA08(115, 0);
      result = 0;
      if (v38)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          goto LABEL_51;
        goto LABEL_48;
      }
      return result;
    }
    v23 = (float)(a2 - v22);
    v24 = mach_absolute_time();
    v25 = sub_18F1FD20C(v24) * 1000000.0;
    if (qword_1EE16D818 != -1)
    {
      v39 = v25;
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v25 = v39;
    }
    v26 = v23 * 0.001;
    v27 = (unint64_t)v25;
    v28 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      v29 = *(unsigned __int16 *)(a1 + 3760) + (unint64_t)*(unsigned __int16 *)(a1 + 3762) - 1;
      v30 = *(unsigned int *)(a1 + 3764);
      if (v29 < v30)
        v30 = 0;
      v31 = *(_QWORD *)(v18 + 8 * (v29 - v30));
      *(_DWORD *)buf = 134349824;
      v42 = v27;
      v43 = 2050;
      v44 = a2;
      v45 = 2050;
      v46 = v31;
      v47 = 2050;
      v48 = v26;
      _os_log_impl(&dword_18F1DC000, v28, OS_LOG_TYPE_ERROR, "[RelDMService] calcActiveIndexSrc: Unexpected Aux data is ahead of source IMU data. {current: %{public}llu aux: %{public}llu source: %{public}llu diffMS: %{public}f}", buf, 0x2Au);
    }
    v32 = sub_18F1FCA08(115, 0);
    result = 0;
    if (!v32)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 == -1)
    {
LABEL_48:
      v40 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "BOOL CMRelDMService::calcActiveIndexSrc(const uint64_t)", "CoreLocation: %s\n", v40);
      if (v40 != (char *)buf)
        free(v40);
      return 0;
    }
LABEL_51:
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    goto LABEL_48;
  }
  v8 = (float)(v7 - v6);
  v9 = mach_absolute_time();
  v10 = sub_18F1FD20C(v9) * 1000000.0;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
  v11 = v8 * 0.001;
  v12 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
  {
    v13 = *(_QWORD *)sub_18F383E04(v4, 0);
    *(_DWORD *)buf = 134349824;
    v42 = (unint64_t)v10;
    v43 = 2050;
    v44 = v6;
    v45 = 2050;
    v46 = v13;
    v47 = 2050;
    v48 = v11;
    _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_ERROR, "[RelDMService] calcActiveIndexSrc: Aux data is too old compared to source data. {current: %{public}llu aux: %{public}llu source: %{public}llu diffMS: %{public}f}", buf, 0x2Au);
  }
  v14 = sub_18F1FCA08(115, 0);
  result = 0;
  if (v14)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    sub_18F383E04(v4, 0);
    goto LABEL_48;
  }
  return result;
}

void sub_18F3FBA30(uint64_t a1, float32x2_t *a2, float32x4_t a3)
{
  NSObject *v3;
  float32x4_t *v4;
  __int32 v7;
  float v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t buf[102];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 16064))
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v3 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      buf[0].i16[0] = 0;
      _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_ERROR, "[RelDMService] Calling feed initCheckBuffers when tracking already initialized", (uint8_t *)buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v4 = (float32x4_t *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CMRelDMService::feedInitCheckBuffers(const IMUData &)", "CoreLocation: %s\n", (const char *)v4);
      if (v4 != buf)
        free(v4);
    }
  }
  else
  {
    v7 = a2[8].i32[1];
    a3.f32[0] = -a2[8].f32[0];
    *(float32x2_t *)buf[0].f32 = vneg_f32(a2[7]);
    buf[0].i64[1] = __PAIR64__(v7, a3.u32[0]);
    sub_18F1FFE94(buf, a3);
    sub_18F3D39F4(buf[0].f32, a2->f32[0], a2->f32[1], a2[1].f32[0]);
    v9 = -v8;
    if (v8 > 0.0)
      v9 = v8;
    v10 = *(unsigned __int16 *)(a1 + 5426);
    v11 = *(unsigned int *)(a1 + 5428);
    v12 = *(unsigned __int16 *)(a1 + 5424);
    if (v12 + v10 >= v11)
      v13 = *(unsigned int *)(a1 + 5428);
    else
      v13 = 0;
    *(float *)(a1 + 5424 + 4 * (v12 + v10 - v13) + 8) = v9;
    if (v11 <= v10)
    {
      if (v12 + 1 < v11)
        LOWORD(v11) = 0;
      *(_WORD *)(a1 + 5424) = v12 + 1 - v11;
    }
    else
    {
      *(_WORD *)(a1 + 5426) = v10 + 1;
    }
    buf[0].f32[0] = v8;
    sub_18F33D300(a1 + 5440, buf[0].f32);
  }
}

__n128 sub_18F3FBC6C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  result.n128_u32[0] = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 44) = result.n128_u32[0];
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  if (a1 != a2)
  {
    result = *(__n128 *)(a2 + 56);
    *(__n128 *)(a1 + 56) = result;
  }
  return result;
}

_QWORD *sub_18F3FBCE8(uint64_t a1, uint64_t a2, float32x2_t *a3, unint64_t a4)
{
  uint64_t v6;
  _BYTE *v7;
  float v8;
  int v9;
  float v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *result;
  unint64_t v18;
  float v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x2_t v23;
  float v24;
  float32x2_t *v25;
  unint64_t v26;
  float32x2_t *v27;
  float32x2_t *v28;
  float32x2_t *v29;
  float v30;
  uint64_t v31;
  float32x4_t *v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  NSObject *v36;
  float v37;
  unint64_t v38;
  double v39;
  float32x4_t *v40;
  char *v41;
  int v42;
  float v43;
  float v44;
  float v45;
  float v46;
  unint64_t v47;
  unint64_t v48;
  float v49;
  unint64_t v50;
  unint64_t v51;
  float v52;
  _BYTE *v54;
  _DWORD *v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE v58[32];
  __int128 v59;
  unint64_t v60;
  float32x4_t v61;
  float32x2_t v62;
  float v63;
  float32x2_t v64;
  float v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  __int128 v72;
  int v73;
  unint64_t v74;
  _BYTE buf[12];
  float32x4_t v76[101];
  uint64_t v77;

  v6 = 0;
  v77 = *MEMORY[0x1E0C80C00];
  v57 = (_BYTE *)(a1 + 33594);
  v54 = (_BYTE *)(a1 + 27520);
  v55 = (_DWORD *)(a1 + 26968);
  v62 = *a3;
  v63 = a3[1].f32[0];
  v7 = (_BYTE *)(a1 + 16040);
  v8 = (float)(*(float *)(a2 + 20) + *(float *)(a1 + 5356)) * -0.5;
  v64 = vmul_f32(vadd_f32(*(float32x2_t *)(a2 + 12), *(float32x2_t *)(a1 + 5348)), (float32x2_t)0xBF000000BF000000);
  v65 = v8;
  *(_QWORD *)buf = *(_QWORD *)(a1 + 5360);
  *(_DWORD *)&buf[8] = *(_DWORD *)(a1 + 5368);
  do
  {
    *(float *)&buf[v6] = -*(float *)&buf[v6];
    v6 += 4;
  }
  while (v6 != 12);
  v66 = *(_QWORD *)buf;
  v67 = *(_DWORD *)&buf[8];
  v68 = *(_QWORD *)(a1 + 5372);
  v9 = *(_DWORD *)(a1 + 5384);
  v69 = *(_DWORD *)(a1 + 5380);
  v70 = v9;
  v71 = *(_DWORD *)(a1 + 5388);
  v72 = *(_OWORD *)(a1 + 5392);
  v10 = -1.0;
  if (*(_DWORD *)(a1 + 740) != *(unsigned __int16 *)(a1 + 738) || (v11 = *(_QWORD *)(a1 + 5184), v11 < 0x30))
  {
LABEL_5:
    v12 = 0;
    goto LABEL_6;
  }
  v42 = (v11 >> 1) - 24;
  v43 = sub_18F33F978(a1 + 708, v42, 25);
  v44 = sub_18F38DC74(a1 + 708, v42, 25, v43);
  v45 = sub_18F33F978(a1 + 708, v42, 25) + -1.0;
  v46 = -v45;
  if (v45 > 0.0)
    v46 = v45;
  v10 = v44 + (float)(v46 * v46);
  if (v44 < 0.000025 && v46 < 0.05)
  {
    v47 = *(unsigned __int16 *)(a1 + 736) + (unint64_t)*(unsigned __int16 *)(a1 + 738) - 1;
    v48 = *(unsigned int *)(a1 + 740);
    if (v47 < v48)
      v48 = 0;
    v49 = *(float *)(a1 + 736 + 4 * (v47 - v48) + 8) + -1.0;
    if (v49 <= 0.0)
      v49 = -v49;
    if (v49 < 0.05)
    {
      v12 = 1;
      goto LABEL_6;
    }
  }
  v12 = 0;
  if (v44 < 0.01 && v46 < 0.1)
  {
    v50 = *(unsigned __int16 *)(a1 + 736) + (unint64_t)*(unsigned __int16 *)(a1 + 738) - 1;
    v51 = *(unsigned int *)(a1 + 740);
    if (v50 < v51)
      v51 = 0;
    v52 = *(float *)(a1 + 736 + 4 * (v50 - v51) + 8) + -1.0;
    if (v52 <= 0.0)
      v52 = -v52;
    if (v52 < 0.1)
    {
      v12 = 2;
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_6:
  v13 = 0;
  memset(v58, 0, 24);
  v14 = *(_DWORD *)(a1 + 5208);
  *(_QWORD *)buf = *(_QWORD *)(a1 + 5200);
  *(_DWORD *)&buf[8] = v14;
  do
  {
    *(float *)&buf[v13] = -*(float *)&buf[v13];
    v13 += 4;
  }
  while (v13 != 12);
  *(_QWORD *)&v58[24] = *(_QWORD *)buf;
  LODWORD(v59) = *(_DWORD *)&buf[8];
  *(int32x2_t *)((char *)&v59 + 4) = vdup_n_s32(0x3A03126Fu);
  HIDWORD(v59) = 973279855;
  v60 = __PAIR64__(LODWORD(v10), v12);
  v61 = (float32x4_t)xmmword_18F505C20;
  sub_18F1FFE94(&v61, (float32x4_t)xmmword_18F505C20);
  v15 = a4 + 1;
  v16 = *(_QWORD *)(a1 + 5184);
  if (a4 + 1 <= v16)
  {
    v56 = v7;
    do
    {
      v18 = v15;
      if (v15 == v16)
      {
        v19 = (float)(a3[1].f32[0] + *(float *)(a1 + 5344)) * 0.5;
        v62 = vmul_f32(vadd_f32(*a3, *(float32x2_t *)(a1 + 5336)), (float32x2_t)0x3F0000003F000000);
        v63 = v19;
      }
      if ((v15 & 1) != 0)
      {
        v20 = a4 >> 1;
        v25 = (float32x2_t *)sub_18F3FC530((unsigned __int16 *)(a1 + 100), a4 >> 1);
        if ((a4 >> 1) + 1 < (unint64_t)*(unsigned __int16 *)(a1 + 102) - 1)
          v26 = v20 + 1;
        else
          v26 = *(unsigned __int16 *)(a1 + 102) - 1;
        v27 = (float32x2_t *)sub_18F3FC530((unsigned __int16 *)(a1 + 100), v26);
        v23 = vmul_f32(vadd_f32(*v25, *v27), (float32x2_t)0xBF000000BF000000);
        v24 = (float)(v25[1].f32[0] + v27[1].f32[0]) * -0.5;
      }
      else
      {
        v20 = v15 >> 1;
        v21 = sub_18F3FC530((unsigned __int16 *)(a1 + 100), v15 >> 1);
        v22 = 0;
        *(_QWORD *)buf = *(_QWORD *)v21;
        *(_DWORD *)&buf[8] = *(_DWORD *)(v21 + 8);
        do
        {
          *(float *)&buf[v22] = -*(float *)&buf[v22];
          v22 += 4;
        }
        while (v22 != 12);
        v23 = *(float32x2_t *)buf;
        v24 = *(float *)&buf[8];
      }
      *(float32x2_t *)&v58[12] = v23;
      *(float *)&v58[20] = v24;
      v28 = (float32x2_t *)sub_18F3FC530((unsigned __int16 *)(a1 + 944), a4);
      v29 = (float32x2_t *)sub_18F3FC530((unsigned __int16 *)(a1 + 944), v18);
      v30 = (float)(v28[1].f32[0] + v29[1].f32[0]) * 0.5;
      *(float32x2_t *)v58 = vmul_f32(vadd_f32(*v28, *v29), (float32x2_t)0x3F0000003F000000);
      *(float *)&v58[8] = v30;
      v31 = sub_18F3FC530((unsigned __int16 *)(a1 + 4568), v20);
      *(_QWORD *)((char *)&v59 + 4) = *(_QWORD *)v31;
      HIDWORD(v59) = *(_DWORD *)(v31 + 8);
      v32 = (float32x4_t *)sub_18F3FFD58((unsigned __int16 *)(a1 + 2152), v18);
      if (&v61 != v32)
        v61 = *v32;
      v33 = *(_OWORD *)&v58[16];
      *(_OWORD *)(a1 + 5264) = *(_OWORD *)v58;
      *(_OWORD *)(a1 + 5280) = v33;
      *(_OWORD *)(a1 + 5296) = v59;
      *(_QWORD *)(a1 + 5312) = v60;
      if ((_BYTE *)(a1 + 5264) != v58)
        *(float32x4_t *)(a1 + 5320) = v61;
      v34 = *(_QWORD *)sub_18F383E04((unsigned __int16 *)(a1 + 3760), v18);
      v35 = v34 - *(_QWORD *)sub_18F383E04((unsigned __int16 *)(a1 + 3760), a4);
      if (v35 >= 0x4E21)
      {
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v36 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v35;
          _os_log_impl(&dword_18F1DC000, v36, OS_LOG_TYPE_ERROR, "[RelDMService] Unexpected large IMU dt passed to EKF. dt=%{public}llu", buf, 0xCu);
        }
        if (sub_18F1FCA08(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953648);
          v73 = 134349056;
          v74 = v35;
          v41 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "void CMRelDMService::processIMUData(const IMUData &, const CMVector3d &, const size_t)", "CoreLocation: %s\n", v41);
          if (v41 != buf)
            free(v41);
        }
      }
      v37 = (double)v35 / 1000000.0;
      v38 = *(_QWORD *)sub_18F383E04((unsigned __int16 *)(a1 + 3760), v18);
      v39 = v37;
      sub_18F3FC6F4(a1, (uint64_t)v58, &v62, v38, v39);
      if ((*(_DWORD *)(a1 + 40) == 1 || v57[3814]) && v57[78])
      {
        sub_18F4DE460(a1 + 33656, (uint64_t)v58, (uint64_t *)&v62, v38, v39);
        *v57 = *v54;
        sub_18F3303B8(a1 + 33592, (float32x2_t *)v58, (float *)&v62, v38, v39);
      }
      if (!v56[24] || *v56 || v56[17])
      {
        *v55 = 0;
        v55[62] = 0;
      }
      else
      {
        *(_QWORD *)buf = *(_QWORD *)(a1 + 16068);
        *(_DWORD *)&buf[8] = *(_DWORD *)(a1 + 16076);
        v40 = (float32x4_t *)(a1 + 16092);
        if (v56[16])
          v40 = (float32x4_t *)(a1 + 16108);
        v76[0] = *v40;
        sub_18F3668F8(a1 + 26960, v76, (__int128 *)(a1 + 16108), v38, v76[0]);
      }
      v15 = v18 + 1;
      v16 = *(_QWORD *)(a1 + 5184);
      a4 = v18;
    }
    while (v18 + 1 <= v16);
  }
  result = (_QWORD *)sub_18F383E04((unsigned __int16 *)(a1 + 3760), v16);
  *(_QWORD *)(a1 + 5800) = *result;
  return result;
}

uint64_t sub_18F3FC530(unsigned __int16 *a1, unint64_t a2)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1[1] <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2955468);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      v8 = a2;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < size(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 39,out of buffer range %zu.", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2955468);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "Element &CMVectorBufferBase<float, 3>::operator[](const size_t) [T = float, N = 3]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return sub_18F33FF64(a1, a2);
}

void sub_18F3FC6F4(uint64_t a1, uint64_t a2, float32x2_t *a3, unint64_t a4, double a5)
{
  _BYTE *v10;
  int v11;
  unsigned int v12;
  int v13;
  NSObject *v14;
  char *v15;
  float *v16;
  NSObject *v17;
  NSObject *v18;
  float32x4_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  double v22;
  float v23;
  float v24;
  NSObject *v25;
  double v26;
  double v27;
  char *v28;
  NSObject *v29;
  float v30;
  BOOL v31;
  float v32;
  double v33;
  NSObject *v34;
  uint64_t v35;
  double v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  NSObject *v40;
  int v41;
  int32x2_t v42;
  uint64_t v43;
  float32x2_t v44;
  float v45;
  uint64_t v46;
  float v47;
  uint8_t *v48;
  uint64_t v49;
  float32x2_t *v50;
  float32x4_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  float32x4_t v56;
  float v57;
  float v58;
  float v59;
  uint64_t i;
  float v61;
  _BYTE *v62;
  _BOOL4 v63;
  NSObject *v64;
  NSObject *v65;
  NSObject *v66;
  int v67;
  _OWORD *v68;
  int v69;
  int v70;
  float v71;
  NSObject *v72;
  char *v73;
  char v74;
  NSObject *v75;
  uint64_t v76;
  unint64_t v77;
  float v79;
  NSObject *v80;
  float v81;
  float v82;
  NSObject *v83;
  NSObject *v84;
  unint64_t v85;
  BOOL v86;
  float v87;
  unint64_t v88;
  BOOL v89;
  float v90;
  unint64_t v91;
  BOOL v92;
  float v93;
  int v94;
  int v95;
  NSObject *v96;
  float v97;
  NSObject *v98;
  double v99;
  float v100;
  int v101;
  int v102;
  float32x4_t v103;
  int v104;
  int v105;
  NSObject *v106;
  NSObject *v107;
  NSObject *v108;
  double v109;
  int v110;
  float v111;
  uint64_t v112;
  unsigned int v113;
  NSObject *v114;
  NSObject *v115;
  char *v116;
  char *v117;
  double v118;
  double v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  double v127;
  char *v128;
  char *v129;
  float v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  float *v134;
  float *v135;
  float v136;
  int v137;
  int v138;
  int v139;
  double v140;
  __int16 v141;
  double v142;
  __int16 v143;
  double v144;
  uint8_t buf[12];
  _BYTE v146[20];
  int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 5))
    sub_18F3F52AC(a1, *(unsigned __int8 *)(a1 + 6));
  if (!*(_BYTE *)(a1 + 92))
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v14 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v14, OS_LOG_TYPE_DEFAULT, "[RelDMService] Missing BodyFace transform prevented feedEKFWithData.", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    LOWORD(v139) = 0;
    goto LABEL_20;
  }
  v10 = (_BYTE *)(a1 + 12176);
  if (*(_BYTE *)(a1 + 4) == 1)
  {
    v11 = *(unsigned __int8 *)(a1 + 37449);
    *(_BYTE *)(a1 + 37449) = 0;
    v12 = *(_DWORD *)(a1 + 5216);
    if (v12 <= 0x29 && ((1 << v12) & 0x20000000110) != 0 && (v12 == 8 || *(int *)(a1 + 5220) > 1)
      || sub_18F48EB4C(a1 + 5216, a4) > 3.0 && *(_BYTE *)(a1 + 37448))
    {
      v13 = 1;
      *(_BYTE *)(a1 + 37449) = 1;
      *(_QWORD *)(a1 + 37456) = a4;
    }
    else if (*(_QWORD *)(a1 + 37456) && sub_18F48E94C(a1 + 5216, a4) < 2.0 && *(_QWORD *)(a1 + 37456) + 10000000 > a4)
    {
      v13 = 1;
      *(_BYTE *)(a1 + 37449) = 1;
    }
    else
    {
      v13 = *(unsigned __int8 *)(a1 + 37449);
    }
    if (v13 != v11)
    {
      v16 = (float *)(a1 + 15904);
      if (v13)
      {
        if (*v16 > 2.25)
          sub_18F3FEC38(v16, 2.25);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v17 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v17, OS_LOG_TYPE_DEFAULT, "[RelDMService, Entering steadyStatePedestrian.", buf, 2u);
        }
        if (!sub_18F1FCA08(115, 2))
          goto LABEL_44;
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        LOWORD(v139) = 0;
      }
      else
      {
        sub_18F3FEC38(v16, *(float *)(a1 + 15908));
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v18 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_DEFAULT, "[RelDMService], Exiting steadyStatePedestrian.", buf, 2u);
        }
        if (!sub_18F1FCA08(115, 2))
          goto LABEL_44;
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        LOWORD(v139) = 0;
      }
      v122 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::shortenBTZHorizonForMusic(const uint64_t)", "CoreLocation: %s\n", v122);
      if (v122 != (char *)buf)
        free(v122);
    }
LABEL_44:
    if (*(_BYTE *)(a1 + 4) == 1)
      *(_BYTE *)(a1 + 12216) = *(_BYTE *)(a1 + 37449);
  }
  v134 = (float *)(a1 + 16092);
  v135 = (float *)(a1 + 5840);
  sub_18F38A07C((float32x2_t *)(a1 + 5840), (float32x2_t *)a2, (uint64_t)a3, (float *)(a1 + 16092), (int *)(a1 + 5216), (unint64_t)*(double *)(a1 + 16048), a4, a5);
  if (*(_BYTE *)(a1 + 16056))
    v20 = *(_BYTE *)(a1 + 12208) == 0;
  else
    v20 = 0;
  if (*v10)
    v21 = *(_BYTE *)(a1 + 12216) != 0;
  else
    v21 = 0;
  v19.i32[0] = *(_DWORD *)(a1 + 15856);
  sub_18F33B4C0((unsigned __int8 *)(a1 + 27552), (float32x2_t *)a2, a3, v20, v21, (__int128 *)(a1 + 12184), a4, v19, *(float *)(a1 + 12088));
  if (*(_BYTE *)(a1 + 4) != 1)
    goto LABEL_94;
  if (*(double *)(a1 + 16048) <= 0.00499999989)
  {
    *(_DWORD *)(a1 + 37468) = 0;
  }
  else
  {
    v22 = *(double *)(a1 + 15960);
    if (v22 > 1.0)
    {
      v23 = v22 + *(double *)(a1 + 15952) * 2.0;
      *(float *)(a1 + 37472) = v23;
    }
    if (v22 == 0.0)
    {
      v24 = *(float *)(a1 + 37472);
      if (v24 > 0.0)
      {
        *(float *)(a1 + 37468) = v24 + *(float *)(a1 + 37468);
        *(_DWORD *)(a1 + 37472) = 0;
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v25 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
        {
          v26 = *(float *)(a1 + 37468);
          *(_DWORD *)buf = 134217984;
          *(double *)&buf[4] = v26;
          _os_log_impl(&dword_18F1DC000, v25, OS_LOG_TYPE_DEBUG, "[RelDMService], fAccumulatedShortQuiescenceSeconds, %.3f", buf, 0xCu);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953648);
          v27 = *(float *)(a1 + 37468);
          v139 = 134217984;
          v140 = v27;
          v28 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::updateKeepBoresightCenteredState()", "CoreLocation: %s\n", v28);
          if (v28 != (char *)buf)
            free(v28);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 37464))
  {
    if (*(double *)(a1 + 16048) < 0.00499999989 && (*(_BYTE *)(a1 + 37449) || *(double *)(a1 + 15952) >= 1.0))
    {
      *(_BYTE *)(a1 + 37464) = 0;
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v29 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v29, OS_LOG_TYPE_DEFAULT, "[RelDMService] keepBoresightCentered: Release boresight to normal tracking.", buf, 2u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        LOWORD(v139) = 0;
LABEL_374:
        v120 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::updateKeepBoresightCenteredState()", "CoreLocation: %s\n", v120);
        if (v120 != (char *)buf)
          free(v120);
      }
    }
  }
  else
  {
    v30 = *(float *)(a1 + 37468);
    v31 = v30 <= 12.5 && *(_BYTE *)(a1 + 37449) == 0;
    if (v31)
      v32 = 25.0;
    else
      v32 = 50.0;
    v33 = *(double *)(a1 + 16048);
    if (v33 > (float)(v30 + v32) || *(_BYTE *)(a1 + 37449) && v33 > v32)
    {
      *(_BYTE *)(a1 + 37464) = 1;
      sub_18F3F5F78(a1, 0);
      *(_BYTE *)(a1 + 46) = 0;
      *(_BYTE *)(a1 + 37449) = 0;
      sub_18F3FEC38((float *)(a1 + 15904), 5.0);
      sub_18F3F6564(a1 + 27344, 0);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v34 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
      {
        v35 = *(_QWORD *)(a1 + 16048);
        v36 = *(float *)(a1 + 37468);
        *(_DWORD *)buf = 134218496;
        *(double *)&buf[4] = v32;
        *(_WORD *)v146 = 2048;
        *(_QWORD *)&v146[2] = v35;
        *(_WORD *)&v146[10] = 2048;
        *(double *)&v146[12] = v36;
        _os_log_impl(&dword_18F1DC000, v34, OS_LOG_TYPE_DEFAULT, "[RelDMService] keepBoresightCentered: Keep boresight centered, timeThreshold, %.3f, fTimeSinceLastBTZ, %.3f, fAccumulatedShortQuiescenceSeconds, %.3f", buf, 0x20u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v118 = *(double *)(a1 + 16048);
        v119 = *(float *)(a1 + 37468);
        v139 = 134218496;
        v140 = v32;
        v141 = 2048;
        v142 = v118;
        v143 = 2048;
        v144 = v119;
        goto LABEL_374;
      }
    }
  }
LABEL_94:
  if ((*(_DWORD *)(a1 + 40) & 0xFFFFFFFE) == 2)
    goto LABEL_95;
  v49 = a1 + 16064;
  *(_BYTE *)(a1 + 16057) = 0;
  if (*(_BYTE *)(a1 + 16064))
  {
    v131 = a1 + 64;
    v50 = (float32x2_t *)sub_18F382974(a1 + 64);
    v132 = sub_18F38D114((uint64_t)v135, a2, (float *)a3, v50, *(unsigned __int8 *)(a1 + 46), v51);
    v52 = *(unsigned __int8 *)(a1 + 16059);
    v53 = *(unsigned __int8 *)(a1 + 32604);
    *(_BYTE *)(a1 + 16059) = v53;
    v54 = *(unsigned __int8 *)(a1 + 4);
    if (v54 == 1)
    {
      v55 = *v10;
      if (*v10)
      {
        v55 = *(unsigned __int8 *)(a1 + 12216);
        if (*(_BYTE *)(a1 + 12216))
          v55 = (!*(_BYTE *)(a1 + 27552) || !*(_BYTE *)(a1 + 33512)) && *(_BYTE *)(a1 + 12208) != 0;
      }
      v31 = v53 == 0;
      v53 = v55 ^ 1;
      if (v31)
        v53 = 0;
      *(_BYTE *)(a1 + 16059) = v53;
    }
    if (v52 != v53)
    {
      if (v53)
      {
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v64 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v64, OS_LOG_TYPE_DEFAULT, "[RelDMService] Entering complex transition.", buf, 2u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953648);
          LOWORD(v139) = 0;
LABEL_393:
          v124 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "BOOL CMRelDMService::determineBTZ(const IMUData &, const IMUData &, const double, const uint64_t)", "CoreLocation: %s\n", v124);
          if (v124 != (char *)buf)
            free(v124);
        }
      }
      else
      {
        if (v54 == 1)
        {
          sub_18F3FEC38((float *)(a1 + 15904), 1.0);
          *(_BYTE *)(a1 + 47) = 1;
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953648);
          v65 = qword_1EE16D820;
          if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F1DC000, v65, OS_LOG_TYPE_DEFAULT, "[RelDMService] Shorten Pedestrian BTZ horizon upon exiting complex transition.", buf, 2u);
          }
          if (sub_18F1FCA08(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2953648);
            LOWORD(v139) = 0;
            v126 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 2, "BOOL CMRelDMService::determineBTZ(const IMUData &, const IMUData &, const double, const uint64_t)", "CoreLocation: %s\n", v126);
            if (v126 != (char *)buf)
              free(v126);
          }
        }
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v66 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v66, OS_LOG_TYPE_DEFAULT, "[RelDMService] Exiting complex transition.", buf, 2u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953648);
          LOWORD(v139) = 0;
          goto LABEL_393;
        }
      }
    }
    v67 = *v10;
    if (!*v10 || !*(_BYTE *)(a1 + 12216))
    {
      *(_BYTE *)(a1 + 50) = 0;
      goto LABEL_223;
    }
    *(_QWORD *)buf = *(_QWORD *)(a1 + 16068);
    *(_DWORD *)&buf[8] = *(_DWORD *)(a1 + 16076);
    v68 = (_OWORD *)(a1 + 16092);
    if (*(_BYTE *)(a1 + 16056))
      v68 = (_OWORD *)(a1 + 16108);
    *(_OWORD *)v146 = *v68;
    v136 = sub_18F380F20(v131, (float *)buf, (float32x2_t *)v146);
    v137 = v69;
    v138 = v70;
    v71 = sub_18F48DB10(&v136);
    if (*(_BYTE *)(a1 + 50))
    {
      if (!*(_BYTE *)(a1 + 16059) && !*(_BYTE *)(a1 + 16040) && a4 - *(_QWORD *)(a1 + 56) <= 0x6ACFC0 && v71 >= 0.43633)
        goto LABEL_222;
      sub_18F3FEC38((float *)(a1 + 15904), 2.25);
      *(_BYTE *)(a1 + 50) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v72 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v72, OS_LOG_TYPE_DEFAULT, "[RelDMService] Exit lengthened BTZ horizon.", buf, 2u);
      }
      if (!sub_18F1FCA08(115, 2))
        goto LABEL_222;
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      LOWORD(v139) = 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 12208))
      {
        v74 = 1;
      }
      else
      {
        v76 = *(_QWORD *)(a1 + 12192);
        v31 = v76 == 0;
        v77 = v76 + 2000000;
        v74 = v31 || v77 <= a4;
      }
      if (*(_BYTE *)(a1 + 47))
        goto LABEL_222;
      if (*(unsigned __int8 *)(a1 + 16059) | *(unsigned __int8 *)(a1 + 49))
        v74 = 1;
      if ((v74 & 1) != 0)
        goto LABEL_222;
      v79 = *(float *)(a1 + 12200);
      if (v79 <= 0.0)
        v79 = -v79;
      if (v79 <= 0.43633 || v71 <= 0.7854)
        goto LABEL_222;
      sub_18F3FEC38((float *)(a1 + 15904), 5.0);
      *(_BYTE *)(a1 + 50) = 1;
      *(_QWORD *)(a1 + 56) = a4;
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v80 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
      {
        v81 = *(float *)(a1 + 12200);
        if (v81 <= 0.0)
          v81 = -v81;
        *(_DWORD *)buf = 134218240;
        *(double *)&buf[4] = (float)(v81 * 57.296);
        *(_WORD *)v146 = 2048;
        *(double *)&v146[2] = (float)(v71 * 57.296);
        _os_log_impl(&dword_18F1DC000, v80, OS_LOG_TYPE_DEFAULT, "[RelDMService] Enter lengthened BTZ horizon. headYaw, %.2f, boreSightAngle, %.2f", buf, 0x16u);
      }
      if (!sub_18F1FCA08(115, 2))
        goto LABEL_222;
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v130 = *(float *)(a1 + 12200);
      if (v130 <= 0.0)
        v130 = -v130;
      v139 = 134218240;
      v140 = (float)(v130 * 57.296);
      v141 = 2048;
      v142 = (float)(v71 * 57.296);
    }
    v73 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::updateBTZHorizonAfterPedestrianHeadTurn(uint64_t)", "CoreLocation: %s\n", v73);
    if (v73 != (char *)buf)
      free(v73);
LABEL_222:
    v67 = *v10;
LABEL_223:
    if (v67)
    {
      if (!*(_BYTE *)(a1 + 49))
      {
        if (*(_BYTE *)(a1 + 12217))
        {
          *(_BYTE *)(a1 + 49) = 1;
          sub_18F3FEC38((float *)(a1 + 15904), 1.0);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953648);
          v84 = qword_1EE16D820;
          if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F1DC000, v84, OS_LOG_TYPE_DEFAULT, "[RelDMService] Enter ForceShortendBTZHorizon due to likelySlowBodyTurn.", buf, 2u);
          }
          if (sub_18F1FCA08(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2953648);
            LOWORD(v139) = 0;
            goto LABEL_398;
          }
        }
LABEL_248:
        sub_18F469C70(a1 + 15904, a2, (uint64_t)a3, v134, v132, *(unsigned __int8 *)(a1 + 16059), a4, a5);
        if (*(_DWORD *)(a1 + 40) == 1)
        {
          v85 = *(_QWORD *)(a1 + 26400);
          v86 = a4 <= v85 || v85 == 0;
          v87 = (float)(a4 - v85) * 0.000001;
          if (v86)
            v87 = 3.4028e38;
          v88 = *(_QWORD *)(a1 + 5816);
          if (v88 <= *(_QWORD *)(a1 + 5824))
            v88 = *(_QWORD *)(a1 + 5824);
          v89 = a4 <= v88 || v88 == 0;
          v90 = (float)(a4 - v88) * 0.000001;
          if (v89)
            v90 = 3.4028e38;
          v91 = *(_QWORD *)(a1 + 5832);
          v92 = a4 <= v91 || v91 == 0;
          v93 = (float)(a4 - v91) * 0.000001;
          if (v92)
            v93 = 3.4028e38;
          sub_18F4698B0(a1 + 15904, v87, v90, v93);
        }
        v133 = a1 + 16064;
        v94 = *(unsigned __int8 *)(a1 + 16040);
        if (*(_BYTE *)(a1 + 15946))
        {
          v95 = *(unsigned __int8 *)(a1 + 27520);
          *(_BYTE *)(a1 + 16040) = v95 ^ 1;
          if (v94 == (v95 ^ 1))
            goto LABEL_318;
          if (!v95)
          {
            if (*(_BYTE *)(a1 + 47) && !*(_BYTE *)(a1 + 48))
              *(_BYTE *)(a1 + 48) = *(_BYTE *)(a1 + 16059) ^ 1;
            *(_BYTE *)(a1 + 27428) = 0;
            *(_DWORD *)(a1 + 27432) = 0;
            *(_QWORD *)(a1 + 27396) = 0;
            *(_QWORD *)(a1 + 27401) = 0;
            *(_BYTE *)(a1 + 27436) = 1;
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2953648);
            v96 = qword_1EE16D820;
            if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F1DC000, v96, OS_LOG_TYPE_DEFAULT, "[RelDMService] Entering BTZ.", buf, 2u);
            }
            if (sub_18F1FCA08(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE16D818 != -1)
                dispatch_once(&qword_1EE16D818, &unk_1E2953648);
              LOWORD(v139) = 0;
LABEL_379:
              v121 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 2, "BOOL CMRelDMService::determineBTZ(const IMUData &, const IMUData &, const double, const uint64_t)", "CoreLocation: %s\n", v121);
              if (v121 != (char *)buf)
                free(v121);
              goto LABEL_318;
            }
            goto LABEL_318;
          }
        }
        else
        {
          *(_BYTE *)(a1 + 16040) = 0;
          if (!v94)
            goto LABEL_318;
        }
        if (*(_BYTE *)(a1 + 48))
        {
          if (!*(_BYTE *)(a1 + 49))
          {
            if (*v10)
            {
              v97 = 2.25;
              if (!*(_BYTE *)(a1 + 12216))
                v97 = 5.0;
            }
            else
            {
              v97 = 5.0;
            }
            sub_18F3FEC38((float *)(a1 + 15904), v97);
          }
          *(_WORD *)(a1 + 47) = 0;
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953648);
          v107 = qword_1EE16D820;
          if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F1DC000, v107, OS_LOG_TYPE_DEFAULT, "[RelDMService] Reset BTZ horizon upon first BTZ after shortened horizon due to CT.", buf, 2u);
          }
          if (sub_18F1FCA08(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2953648);
            LOWORD(v139) = 0;
            v123 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 2, "BOOL CMRelDMService::determineBTZ(const IMUData &, const IMUData &, const double, const uint64_t)", "CoreLocation: %s\n", v123);
            if (v123 != (char *)buf)
              free(v123);
          }
        }
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        v108 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v108, OS_LOG_TYPE_DEFAULT, "[RelDMService] Exiting BTZ.", buf, 2u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953648);
          LOWORD(v139) = 0;
          goto LABEL_379;
        }
LABEL_318:
        *(double *)(a1 + 16048) = *(double *)(a1 + 16048) + a5;
        sub_18F38C498((uint64_t)v135, a2, (uint64_t)a3, a5);
        v109 = *(double *)(a1 + 12064);
        if (*(_BYTE *)(a1 + 4) == 1 && *(_BYTE *)(a1 + 37464) || *(_BYTE *)(a1 + 15944))
          goto LABEL_328;
        v110 = *(unsigned __int8 *)(a1 + 46);
        if (!*(_BYTE *)(a1 + 16040))
        {
          if (!*(_BYTE *)(a1 + 46))
          {
            if (*(double *)(a1 + 16048) < v109)
              v109 = *(double *)(a1 + 16048);
            if (v109 > 15.0)
            {
              *(_BYTE *)(a1 + 46) = 1;
              v111 = 3.0;
              if (*(float *)(a1 + 15908) > 3.0)
                goto LABEL_327;
            }
            goto LABEL_328;
          }
          v110 = 1;
        }
        if (v109 < a5 && v110)
        {
          *(_BYTE *)(a1 + 46) = 0;
          v111 = *(float *)(a1 + 15908);
LABEL_327:
          sub_18F3FEC38((float *)(a1 + 15904), v111);
        }
LABEL_328:
        if (*(_BYTE *)(a1 + 16040))
        {
          *(_QWORD *)buf = *(_QWORD *)(a1 + 15992);
          *(_DWORD *)&buf[8] = *(_DWORD *)(a1 + 16000);
          *(_OWORD *)v146 = *(_OWORD *)(a1 + 16004);
          sub_18F3806B4(v133, buf, a4);
          goto LABEL_330;
        }
        if (*(_DWORD *)(a1 + 40))
        {
          v112 = *(_QWORD *)(a1 + 26400);
          if (v112)
          {
            if (v112 + 250000 > a4)
              goto LABEL_95;
          }
        }
        v113 = *(unsigned __int16 *)(a1 + 5842);
        if (v113 == *(unsigned __int16 *)(a1 + 7050))
        {
          if (v113 >= *(unsigned __int16 *)(a1 + 9130))
            v113 = *(unsigned __int16 *)(a1 + 9130);
          if (v113 >= 0x28)
          {
            if (sub_18F38DA68(v135))
            {
              *(_QWORD *)(a1 + 5832) = a4;
              if (!*(_BYTE *)(a1 + 16056))
              {
                *(_WORD *)(a1 + 16056) = 257;
                sub_18F3808C0(v133);
                if (qword_1EE16D818 != -1)
                  dispatch_once(&qword_1EE16D818, &unk_1E2953648);
                v114 = qword_1EE16D820;
                if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_18F1DC000, v114, OS_LOG_TYPE_DEFAULT, "[RelDMService] Entering 1-IMU.", buf, 2u);
                }
                if (sub_18F1FCA08(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE16D818 != -1)
                    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
                  LOWORD(v139) = 0;
LABEL_364:
                  v116 = (char *)_os_log_send_and_compose_impl();
                  sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::feedEKFWithData(const IMUData &, const IMUData &, double, const uint64_t)", "CoreLocation: %s\n", v116);
                  if (v116 != (char *)buf)
                    free(v116);
                  goto LABEL_95;
                }
                goto LABEL_95;
              }
            }
            else if (*(_BYTE *)(a1 + 16056) && (sub_18F38D2C0((uint64_t)v135) & 1) != 0)
            {
              *(_WORD *)(a1 + 16056) = 256;
              sub_18F380CAC(v133, v131, 0);
              if (qword_1EE16D818 != -1)
                dispatch_once(&qword_1EE16D818, &unk_1E2953648);
              v115 = qword_1EE16D820;
              if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18F1DC000, v115, OS_LOG_TYPE_DEFAULT, "[RelDMService] Entering 2-IMU.", buf, 2u);
              }
              if (sub_18F1FCA08(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE16D818 != -1)
                  dispatch_once(&qword_1EE16D818, &unk_1E2953648);
                LOWORD(v139) = 0;
                goto LABEL_364;
              }
LABEL_95:
              v37 = *(_QWORD *)(a1 + 5808) + 210000;
              v38 = *(_DWORD *)(a1 + 40) & 0xFFFFFFFE;
              v39 = v38 != 2 || v37 < a4;
              if (v37 < a4 && v38 == 2)
              {
                if (qword_1EE16D818 != -1)
                  dispatch_once(&qword_1EE16D818, &unk_1E2953648);
                v40 = qword_1EE16D820;
                if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&buf[4] = v37 < a4;
                  _os_log_impl(&dword_18F1DC000, v40, OS_LOG_TYPE_DEFAULT, "[RelDMService] LongTimeSinceAnchor %d.", buf, 8u);
                }
                if (sub_18F1FCA08(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE16D818 != -1)
                    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
                  v139 = 67109120;
                  LODWORD(v140) = v37 < a4;
                  v117 = (char *)_os_log_send_and_compose_impl();
                  sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::feedEKFWithData(const IMUData &, const IMUData &, double, const uint64_t)", "CoreLocation: %s\n", v117);
                  if (v117 != (char *)buf)
                    free(v117);
                }
              }
              v41 = *(_DWORD *)(a1 + 40);
              v42.i32[1] = 0;
              if (v41 == 3)
                a5 = 0.0;
              if (v37 < a4 && v41 == 2)
              {
                v43 = 0;
                v42.i32[0] = 0;
                do
                {
                  *(float *)v42.i32 = *(float *)v42.i32 + (float)(*(float *)(a2 + 12 + v43) * *(float *)(a2 + 12 + v43));
                  v43 += 4;
                }
                while (v43 != 12);
                *(float *)v42.i32 = sqrtf(*(float *)v42.i32);
                v44 = vdiv_f32(*(float32x2_t *)(a2 + 12), (float32x2_t)vdup_lane_s32(v42, 0));
                v45 = *(float *)(a2 + 20);
                memset(buf, 0, sizeof(buf));
                *(float32x2_t *)v146 = v44;
                *(float *)&v146[8] = v45 / *(float *)v42.i32;
                *(_QWORD *)&v146[12] = *(_QWORD *)(a2 + 24);
                v147 = *(_DWORD *)(a2 + 32);
                v148 = *(_QWORD *)(a2 + 36);
                v149 = *(_DWORD *)(a2 + 44);
                v150 = 1;
                v151 = *(_OWORD *)(a2 + 56);
                v46 = a1 + 16064;
                v47 = a5;
                v48 = buf;
              }
              else
              {
                v46 = a1 + 16064;
                v47 = a5;
                v48 = (uint8_t *)a2;
              }
              sub_18F38163C(v46, (uint64_t)v48, (uint64_t)a3, v39, v47);
              if (!*(_DWORD *)(a2 + 48) || (v57 = 0.0, !a3[6].i32[0]))
              {
                if (*(_DWORD *)(a1 + 40) == 2)
                  sub_18F38CADC((uint64_t)v135, (float *)a2, (float *)a3, v134, a4);
                else
                  sub_18F38CDE0((uint64_t)v135, a2, (float *)a3, a4, v56);
                v57 = (float)(v58 * 9.8067) * 9.8067;
              }
              sub_18F3803F0(a1 + 16064, a2, (uint64_t)a3, *(_DWORD *)(a1 + 40), a4, *(int32x2_t *)&a5, v57);
              if (*(_DWORD *)(a1 + 40) == 1 && *(_QWORD *)(a1 + 26400) == a4)
              {
                *(_OWORD *)(a1 + 15968) = 0u;
                *(_OWORD *)(a1 + 15952) = 0u;
LABEL_330:
                *(_QWORD *)(a1 + 16048) = 0;
                return;
              }
              return;
            }
          }
        }
        *(_BYTE *)(a1 + 16057) = 0;
        goto LABEL_95;
      }
      if (*(_BYTE *)(a1 + 12217))
        goto LABEL_248;
      *(_BYTE *)(a1 + 49) = 0;
      if (!*(_BYTE *)(a1 + 47))
      {
        v82 = 2.25;
        if (!*(_BYTE *)(a1 + 12216))
          v82 = 5.0;
        goto LABEL_233;
      }
    }
    else
    {
      if (!*(_BYTE *)(a1 + 49))
        goto LABEL_248;
      *(_BYTE *)(a1 + 49) = 0;
      if (!*(_BYTE *)(a1 + 47))
      {
        v82 = 5.0;
LABEL_233:
        sub_18F3FEC38((float *)(a1 + 15904), v82);
      }
    }
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v83 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v83, OS_LOG_TYPE_DEFAULT, "[RelDMService] Exit ForceShortendBTZHorizon.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      LOWORD(v139) = 0;
LABEL_398:
      v125 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "BOOL CMRelDMService::determineBTZ(const IMUData &, const IMUData &, const double, const uint64_t)", "CoreLocation: %s\n", v125);
      if (v125 != (char *)buf)
        free(v125);
      goto LABEL_248;
    }
    goto LABEL_248;
  }
  if (!*(_BYTE *)(a1 + 16061))
  {
    if (*(_DWORD *)(a1 + 5428) == *(unsigned __int16 *)(a1 + 5426))
      goto LABEL_133;
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v75 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v75, OS_LOG_TYPE_DEFAULT, "[RelDMService] Can't initialize due to accessory IMU buffers not being full.", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    LOWORD(v139) = 0;
LABEL_20:
    v15 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::feedEKFWithData(const IMUData &, const IMUData &, double, const uint64_t)", "CoreLocation: %s\n", v15);
    if (v15 != (char *)buf)
      free(v15);
    return;
  }
  if (*(_DWORD *)(a1 + 5472) != *(unsigned __int16 *)(a1 + 5470))
    return;
LABEL_133:
  v59 = 0.0;
  for (i = 3; i != 6; ++i)
    v59 = v59 + (float)(a3->f32[i] * a3->f32[i]);
  v61 = sqrtf(v59) + -1.0;
  if (v61 <= 0.0)
    v61 = -v61;
  if (v61 < 0.5)
  {
    if (*(_BYTE *)(a1 + 16061))
    {
      if (*(_BYTE *)(a1 + 5440))
        sub_18F33FB38(a1 + 5440);
      v62 = (_BYTE *)(a1 + 5440);
      v63 = *(float *)(a1 + 5444) < 0.2618
         && sub_18F3412D8((unsigned __int16 *)(a1 + 5424), (unsigned int (*)(float, float))sub_18F3414D4, 0) < 0.5236;
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v98 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
      {
        if (*v62)
          sub_18F33FB38(a1 + 5440);
        v99 = *(float *)(a1 + 5444);
        v100 = sub_18F3412D8((unsigned __int16 *)(a1 + 5424), (unsigned int (*)(float, float))sub_18F3414D4, 0);
        *(_DWORD *)buf = 134218240;
        *(double *)&buf[4] = v99;
        *(_WORD *)v146 = 2048;
        *(double *)&v146[2] = v100;
        _os_log_impl(&dword_18F1DC000, v98, OS_LOG_TYPE_DEBUG, "[RelDMService] fResetTrackingAfterAuxGap, mean %.3f, maxCurr %.3f", buf, 0x16u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953648);
        if (*v62)
          sub_18F33FB38(a1 + 5440);
        v127 = *(float *)(a1 + 5444);
        v139 = 134218240;
        v140 = v127;
        v141 = 2048;
        v142 = sub_18F3412D8((unsigned __int16 *)(a1 + 5424), (unsigned int (*)(float, float))sub_18F3414D4, 0);
        v128 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::feedEKFWithData(const IMUData &, const IMUData &, double, const uint64_t)", "CoreLocation: %s\n", v128);
        if (v128 != (char *)buf)
          free(v128);
        v49 = a1 + 16064;
        if (!v63)
          return;
      }
      else if (!v63)
      {
        return;
      }
    }
    else if (sub_18F3412D8((unsigned __int16 *)(a1 + 5424), (unsigned int (*)(float, float))sub_18F3414D4, 0) >= 0.34907)
    {
      return;
    }
    *(_DWORD *)buf = sub_18F200A14((float *)(a2 + 56));
    *(_DWORD *)&buf[4] = v101;
    *(_DWORD *)&buf[8] = v102;
    v103.f32[0] = sub_18F200A14((float *)&a3[7]);
    v136 = v103.f32[0];
    v137 = v104;
    v138 = v105;
    sub_18F46981C(a1 + 15904, (float *)buf, &v136, v134, (uint64_t)&v139, v103);
    sub_18F37F5F0(v49, a2, (uint64_t)a3, &v139, a4);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v106 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v106, OS_LOG_TYPE_DEFAULT, "[RelDMService] Initializing EKF.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      LOWORD(v136) = 0;
      v129 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::feedEKFWithData(const IMUData &, const IMUData &, double, const uint64_t)", "CoreLocation: %s\n", v129);
      if (v129 != (char *)buf)
        free(v129);
    }
    *(_BYTE *)(a1 + 16061) = 0;
  }
}

void sub_18F3FEC38(float *a1, float a2)
{
  NSObject *v3;
  double v4;
  char *v5;
  uint8_t buf[4];
  double v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *a1 = a2;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
  v3 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a1;
    *(_DWORD *)buf = 134217984;
    v7 = v4;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEBUG, "[CMBleedToZero] Setting BTZ horizon to %.2f seconds", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMBleedToZero::setMinRequiredQuiescentPeriod(float)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
}

void sub_18F3FEDF4(uint64_t a1, float32x2_t *a2)
{
  float *v4;
  NSObject *v5;
  NSObject *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  float32x4_t v11;
  char *v12;
  char *v13;
  uint8_t buf[4];
  double v15;
  __int16 v16;
  double v17;
  __int16 v18;
  double v19;
  __int16 v20;
  double v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 92))
  {
    v4 = (float *)sub_18F382974(a1 + 64);
    if (*v4 == a2->f32[0] && v4[1] == a2->f32[1] && v4[2] == a2[1].f32[0] && v4[3] == a2[1].f32[1])
      return;
    sub_18F3F631C(a1, 1);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v5 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_ERROR, "[RelDMService] Fixed transforms changed in session. Resetting RelDM.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v13 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CMRelDMService::setFixedTransforms(const CMOQuaternion &)", "CoreLocation: %s\n", v13);
      if (v13 != (char *)buf)
        free(v13);
    }
  }
  if ((float32x2_t *)(a1 + 76) != a2)
    *(_OWORD *)(a1 + 76) = *(_OWORD *)a2->f32;
  *(_BYTE *)(a1 + 92) = 1;
  if ((float32x2_t *)(a1 + 15924) != a2)
    *(_OWORD *)(a1 + 15924) = *(_OWORD *)a2->f32;
  *(_BYTE *)(a1 + 15940) = 1;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
  v6 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    v7 = a2->f32[0];
    v8 = a2->f32[1];
    v9 = a2[1].f32[0];
    v10 = a2[1].f32[1];
    *(_DWORD *)buf = 134284289;
    v15 = v7;
    v16 = 2049;
    v17 = v8;
    v18 = 2049;
    v19 = v9;
    v20 = 2049;
    v21 = v10;
    _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEFAULT, "[RelDMService] Headset orientation q_bf set to [%{private}f,%{private}f,%{private}f,%{private}f]", buf, 0x2Au);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v12 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::setFixedTransforms(const CMOQuaternion &)", "CoreLocation: %s\n", v12);
    if (v12 != (char *)buf)
      free(v12);
  }
  if (*(_DWORD *)(a1 + 40) == 1 || *(_BYTE *)(a1 + 37408))
    sub_18F4DE1C8(a1 + 33656, a2, v11);
}

BOOL sub_18F3FF200(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 4) != 1 || !*(_BYTE *)(a1 + 37464))
      && !*(_BYTE *)(a1 + 16058)
      && *(double *)(a1 + 16048) > 0.100000001
      && *(_WORD *)(a1 + 26970)
      && *(_BYTE *)(a1 + 16057) == 0;
}

float sub_18F3FF268(float32x2_t *a1, float32x4_t a2)
{
  __int32 v3;
  float v4;
  float32x4_t v6;

  a2.f32[0] = -a1[666].f32[0];
  v3 = a1[666].i32[1];
  *(float32x2_t *)v6.f32 = vneg_f32(a1[665]);
  v6.i64[1] = __PAIR64__(v3, a2.u32[0]);
  sub_18F1FFE94(&v6, a2);
  sub_18F3D39F4(v6.f32, a1[658].f32[0], a1[658].f32[1], a1[659].f32[0]);
  return v4;
}

float sub_18F3FF2C8(float32x2_t *a1, float32x4_t a2)
{
  __int32 v3;
  float v4;
  float32x4_t v6;

  a2.f32[0] = -a1[675].f32[0];
  v3 = a1[675].i32[1];
  *(float32x2_t *)v6.f32 = vneg_f32(a1[674]);
  v6.i64[1] = __PAIR64__(v3, a2.u32[0]);
  sub_18F1FFE94(&v6, a2);
  sub_18F3D39F4(v6.f32, a1[667].f32[0], a1[667].f32[1], a1[668].f32[0]);
  return v4;
}

void sub_18F3FF328(uint64_t a1, float32x4_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _BYTE *v10;
  _BOOL4 v11;
  _OWORD *v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  float32x4_t v23;
  uint64_t v24;
  int v25;
  float32x2_t v26[2];

  v10 = (_BYTE *)(a1 + 16056);
  if (*(_BYTE *)(a1 + 4))
  {
    v11 = *(_BYTE *)(a1 + 37464) != 0;
    if (*(_BYTE *)(a1 + 37464))
      goto LABEL_14;
  }
  else
  {
    v11 = 0;
  }
  if (!*(_BYTE *)(a1 + 16064))
  {
LABEL_14:
    a2->i64[0] = 0;
    a2->i64[1] = 0x3F80000000000000;
    *(float *)a3 = sub_18F3FF4CC();
    *(_DWORD *)(a3 + 4) = v17;
    *(_DWORD *)(a3 + 8) = v18;
    v19 = *(unsigned __int16 *)(a1 + 3762);
    if (*(_WORD *)(a1 + 3762))
    {
      v20 = v19 + *(unsigned __int16 *)(a1 + 3760) - 1;
      v21 = *(unsigned int *)(a1 + 3764);
      if (v20 < v21)
        v21 = 0;
      v19 = *(_QWORD *)(a1 + 3760 + 8 * (v20 - v21) + 8);
    }
    *a5 = v19;
    if (v10[2])
      v22 = 1;
    else
      v22 = v11;
    if (!v22)
      v19 = 0;
    *a4 = v19;
    return;
  }
  v25 = *(_DWORD *)(a1 + 16076);
  v24 = *(_QWORD *)(a1 + 16068);
  if (*v10)
    v12 = (_OWORD *)(a1 + 16108);
  else
    v12 = (_OWORD *)(a1 + 16092);
  *(_OWORD *)v26[0].f32 = *v12;
  sub_18F3FF56C(a1 + 64, (uint64_t)v26, &v23);
  if (&v23 != a2)
    *a2 = v23;
  *(float *)a3 = sub_18F380F20(a1 + 64, (float *)&v24, v26);
  *(_DWORD *)(a3 + 4) = v13;
  *(_DWORD *)(a3 + 8) = v14;
  *a4 = *(_QWORD *)(a1 + 5800);
  v15 = *(unsigned __int16 *)(a1 + 3760) + (unint64_t)*(unsigned __int16 *)(a1 + 3762) - 1;
  v16 = *(unsigned int *)(a1 + 3764);
  if (v15 < v16)
    v16 = 0;
  *a5 = *(_QWORD *)(a1 + 3760 + 8 * (v15 - v16) + 8);
}

float sub_18F3FF4CC()
{
  unsigned __int8 v0;
  int v2;
  float v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1EE16DFF0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EE16DFF0))
  {
    sub_18F1F77DC();
    v2 = sub_18F1E1B00();
    v3 = -0.34907;
    if (!v2)
      v3 = 0.0;
    dword_1EE16DFE8 = LODWORD(v3);
    __cxa_guard_release(&qword_1EE16DFF0);
  }
  __sincosf_stret(*(float *)&dword_1EE16DFE8);
  return 0.0;
}

void sub_18F3FF554(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EE16DFF0);
  _Unwind_Resume(a1);
}

double sub_18F3FF56C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>)
{
  float *v5;
  float32x4_t v6;
  float32x4_t v7;
  __int32 v8;
  double result;
  float32x4_t v10;

  v5 = (float *)sub_18F382974(a1);
  *(double *)v7.i64 = sub_18F3D3764(a2, v5, &v10, v6);
  v8 = v10.i32[3];
  v7.f32[0] = -v10.f32[2];
  *(float32x2_t *)a3->f32 = vneg_f32(*(float32x2_t *)v10.f32);
  a3->i32[2] = v7.i32[0];
  a3->i32[3] = v8;
  *(_QWORD *)&result = sub_18F1FFE94(a3, v7).u64[0];
  return result;
}

void sub_18F3FF5C4(uint64_t a1, unint64_t *a2, float32x4_t *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, _BYTE *a7)
{
  _BYTE *v14;
  BOOL v15;
  _BOOL4 v16;
  float32x4_t *v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  uint64_t v25;
  int v26;
  float32x4_t v27;

  v14 = (_BYTE *)(a1 + 16056);
  if (*(_BYTE *)(a1 + 16060))
    v15 = *a2 == 0;
  else
    v15 = 1;
  if (v15)
  {
    *a7 = 0;
LABEL_16:
    sub_18F3FF328(a1, a3, a4, a5, a6);
    v23 = *a5;
    *a2 = *a5;
    v22 = *a6;
    goto LABEL_17;
  }
  v16 = sub_18F3FF200(a1);
  *a7 = v16;
  if (!v16)
    goto LABEL_16;
  v26 = *(_DWORD *)(a1 + 16076);
  v25 = *(_QWORD *)(a1 + 16068);
  if (*v14)
    v17 = (float32x4_t *)(a1 + 16108);
  else
    v17 = (float32x4_t *)(a1 + 16092);
  v27 = *v17;
  sub_18F366E9C(a1 + 26960, a2, &v27, v27);
  sub_18F3FF56C(a1 + 64, (uint64_t)&v27, &v24);
  if (&v24 != a3)
    *a3 = v24;
  *(float *)a4 = sub_18F380F20(a1 + 64, (float *)&v25, (float32x2_t *)&v27);
  *(_DWORD *)(a4 + 4) = v18;
  *(_DWORD *)(a4 + 8) = v19;
  *a5 = *(_QWORD *)(a1 + 5800);
  v20 = *(unsigned __int16 *)(a1 + 3760) + (unint64_t)*(unsigned __int16 *)(a1 + 3762) - 1;
  v21 = *(unsigned int *)(a1 + 3764);
  if (v20 < v21)
    v21 = 0;
  v22 = *(_QWORD *)(a1 + 3760 + 8 * (v20 - v21) + 8);
  *a6 = v22;
  v23 = *a2;
LABEL_17:
  sub_18F40DCA4(a1 + 27344, (float *)a4, v23, v22);
}

void sub_18F3FF75C(uint64_t a1)
{
  NSObject *v1;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 4) && *(_BYTE *)(a1 + 37464))
  {
    *(_BYTE *)(a1 + 37464) = 0;
    sub_18F3F631C(a1, 1);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v1 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v1, OS_LOG_TYPE_DEFAULT, "[RelDMService] keepBoresightCentered: Release boresight to normal tracking due to user interaction with src", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953648);
      v2 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::feedUserInteractedWithDeviceEvent(const uint64_t)", "CoreLocation: %s\n", v2);
      if (v2 != (char *)buf)
        free(v2);
    }
  }
}

void sub_18F3FF904(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  char *v4;
  uint8_t buf[4];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 5816) = a2;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
  v3 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v6 = a2;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEBUG, "[RelDMService], walk or step detected. timestamp %llu", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v4 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::setTimestampAuxLastDetectedWalking(uint64_t)", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
}

void sub_18F3FFAB0(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  char *v4;
  uint8_t buf[4];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 5824) = a2;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953648);
  v3 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v6 = a2;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEBUG, "[RelDMService], sit->stand detected. timestamp %llu", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953648);
    v4 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMRelDMService::setTimestampAuxLastDetectedSitToStand(uint64_t)", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
}

os_log_t sub_18F3FFC5C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1EE16D820 = (uint64_t)result;
  return result;
}

void **sub_18F3FFC88(void **a1)
{
  void **v3;

  v3 = a1 + 647;
  sub_18F33FA2C(&v3);
  v3 = a1 + 644;
  sub_18F33FA2C(&v3);
  v3 = a1 + 641;
  sub_18F33FA2C(&v3);
  v3 = a1 + 638;
  sub_18F33FA2C(&v3);
  return a1;
}

void sub_18F3FFD00()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &off_1E2952508;
  __cxa_throw(exception, (struct type_info *)&unk_1E2948C98, (void (*)(void *))std::exception::~exception);
}

void sub_18F3FFD34(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3FFD58(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2955468);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v11 = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2955468);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T &CMQueue<CMOQuaternion>::operator[](const size_t) const [T = CMOQuaternion]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[8 * (v4 - v5) + 4];
}

void sub_18F4003FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);
  sub_18F2A8438((uint64_t)va);
  objc_sync_exit(v6);
  _Unwind_Resume(a1);
}

os_log_t sub_18F400448()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
  qword_1EE16D8A0 = (uint64_t)result;
  return result;
}

void sub_18F400AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_18F2A8438((uint64_t)&a9);
  sub_18F2A8438((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_18F400CE8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend__disconnect(*(void **)(a1 + 32), a2, a3, a4, a5);
}

void sub_18F400D4C(uint64_t a1)
{
  __int128 v1;
  NSObject *v2;
  _QWORD v3[4];
  __int128 v4;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v1 = *(_OWORD *)(a1 + 32);
  v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
  v3[2] = sub_18F400DA8;
  v3[3] = &unk_1E29559D0;
  v4 = v1;
  dispatch_async(v2, v3);
}

uint64_t sub_18F400DA8(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id Weak;
  void *v7;

  objc_storeWeak((id *)(*(_QWORD *)(a1 + 32) + 24), *(id *)(a1 + 40));
  Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 24));
  v7 = *(void **)(a1 + 32);
  if (Weak)
    return objc_msgSend__connect(v7, v2, v3, v4, v5);
  else
    return objc_msgSend__disconnect(v7, v2, v3, v4, v5);
}

void sub_18F401058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  id *v25;

  sub_18F2A8438((uint64_t)&a10);
  sub_18F2A8438((uint64_t)&a12);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18F401104(uint64_t a1, uint64_t *a2)
{
  id *Weak;
  id *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  Weak = (id *)objc_loadWeak((id *)(a1 + 32));
  if (Weak)
  {
    v4 = Weak;
    if (objc_loadWeak(Weak + 3))
    {
      v8 = (std::__shared_weak_count *)a2[1];
      v14 = *a2;
      v15 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      objc_msgSend__handleMessage_(v4, v5, (uint64_t)&v14, v6, v7);
      v11 = v15;
      if (v15)
      {
        v12 = (unint64_t *)&v15->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
}

void sub_18F4011A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F2A8438((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F4014DC(uint64_t a1)
{
  id Weak;
  uint64_t v3;

  Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 24));
  return MEMORY[0x1E0DE7D20](Weak, sel_manager_didUpdateEvent_, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v3);
}

uint64_t sub_18F401508(uint64_t a1)
{
  id Weak;
  uint64_t v3;

  Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 24));
  return MEMORY[0x1E0DE7D20](Weak, sel_manager_didUpdateMeasurement_, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v3);
}

uint64_t sub_18F401534(uint64_t a1)
{
  id Weak;
  uint64_t v3;

  Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 24));
  return MEMORY[0x1E0DE7D20](Weak, sel_manager_didUpdateTemperature_, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v3);
}

uint64_t sub_18F401560(uint64_t a1)
{
  id Weak;
  uint64_t v3;

  Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 24));
  return MEMORY[0x1E0DE7D20](Weak, sel_manager_errorOccurred_, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v3);
}

void sub_18F4018E4()
{
  uint64_t v0;
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v0 = sub_18F204AE4();
  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(std::__shared_weak_count **)(v0 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  sub_18F1EE944(v1, "ForceAnomalyDetectionAvailable", (BOOL *)&byte_1ECEDF908);
  if (v2)
  {
    v5 = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_18F401988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F2A8438((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18F401B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F401B90(uint64_t a1, CLConnectionMessage **a2)
{
  CLConnectionMessage *v2;
  void *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  const char *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  const char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  const char *v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  NSObject *v184;
  os_log_type_t v185;
  uint64_t v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  const char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  NSObject *v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD v230[6];
  uint8_t buf[4];
  int v232;
  __int16 v233;
  const char *v234;
  __int16 v235;
  uint64_t v236;
  __int16 v237;
  uint64_t v238;
  __int16 v239;
  uint64_t v240;
  __int16 v241;
  uint64_t v242;
  __int16 v243;
  uint64_t v244;
  __int16 v245;
  uint64_t v246;
  __int16 v247;
  uint64_t v248;
  uint64_t v249;

  v249 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (*a2)
  {
    v4 = (void *)MEMORY[0x1E0C99E60];
    v5 = objc_opt_class();
    v9 = (NSSet *)objc_msgSend_setWithObject_(v4, v6, v5, v7, v8);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v2, v9);
    if (DictionaryOfClasses)
    {
      v14 = (id)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, (uint64_t)CFSTR("CMAnomalyDetectorEvent"), v12, v13);
      if (qword_1EE16D828 != -1)
        dispatch_once(&qword_1EE16D828, &unk_1E2957200);
      v15 = qword_1EE16D830;
      if (os_log_type_enabled((os_log_t)qword_1EE16D830, OS_LOG_TYPE_DEFAULT))
      {
        v20 = objc_msgSend_identifier(v14, v16, v17, v18, v19);
        objc_msgSend_absoluteTimestamp(v14, v21, v22, v23, v24);
        v26 = v25;
        objc_msgSend_updateTimestamp(v14, v27, v28, v29, v30);
        *(_DWORD *)buf = 68290819;
        v233 = 2082;
        v232 = 0;
        v234 = "";
        v235 = 2050;
        v236 = v20;
        v237 = 2049;
        v238 = v26;
        v239 = 2049;
        v240 = v47;
        v241 = 2049;
        v242 = objc_msgSend_state(v14, v31, v32, v33, v34);
        v243 = 2049;
        v244 = objc_msgSend_response(v14, v35, v36, v37, v38);
        v245 = 2049;
        v246 = objc_msgSend_resolution(v14, v39, v40, v41, v42);
        v247 = 2049;
        v248 = objc_msgSend_sosState(v14, v43, v44, v45, v46);
        _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CMAnomalyManager received event notification\", \"identifier\":%{public}llu, \"anomaly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}f\", \"state\":%{private}ld, \"response\":%{private}ld, \"resolution\":%{private}ld, \"sosState\":%{private}ld}", buf, 0x58u);
      }
      v48 = objc_msgSend_identifier(v14, v16, v17, v18, v19);
      if (v48 == objc_msgSend_identifier(*(void **)(*(_QWORD *)(a1 + 32) + 40), v49, v50, v51, v52)
        && objc_msgSend_state(*(void **)(*(_QWORD *)(a1 + 32) + 40), v53, v54, v55, v56) == 2
        && objc_msgSend_state(v14, v53, v54, v55, v56) == 1)
      {
        if (qword_1EE16D828 != -1)
          dispatch_once(&qword_1EE16D828, &unk_1E2957200);
        v57 = qword_1EE16D830;
        if (os_log_type_enabled((os_log_t)qword_1EE16D830, OS_LOG_TYPE_FAULT))
        {
          v62 = objc_msgSend_identifier(v14, v58, v59, v60, v61);
          *(_DWORD *)buf = 68289282;
          v232 = 0;
          v233 = 2082;
          v234 = "";
          v235 = 2050;
          v236 = v62;
          _os_log_impl(&dword_18F1DC000, v57, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received same event identifier but state went from recovered to detected\", \"identifier\":%{public}llu}", buf, 0x1Cu);
          if (qword_1EE16D828 != -1)
            dispatch_once(&qword_1EE16D828, &unk_1E2957200);
        }
        v63 = qword_1EE16D830;
        if (!os_signpost_enabled((os_log_t)qword_1EE16D830))
          goto LABEL_46;
        v68 = objc_msgSend_identifier(v14, v64, v65, v66, v67);
        *(_DWORD *)buf = 68289282;
        v232 = 0;
        v233 = 2082;
        v234 = "";
        v235 = 2050;
        v236 = v68;
        v69 = "Received same event identifier but state went from recovered to detected";
        v70 = "{\"msg%{public}.0s\":\"Received same event identifier but state went from recovered to detected\", \"ident"
              "ifier\":%{public}llu}";
      }
      else
      {
        if (objc_msgSend_state(v14, v53, v54, v55, v56) >= 1 && objc_msgSend_state(v14, v71, v72, v73, v74) < 4)
        {
          if (objc_msgSend_identifier(v14, v75, v76, v77, v78))
          {
            v94 = objc_msgSend_identifier(v14, v90, v91, v92, v93);
            if (v94 == objc_msgSend_identifier(*(void **)(*(_QWORD *)(a1 + 32) + 40), v95, v96, v97, v98)
              && (v103 = objc_msgSend_state(v14, v99, v100, v101, v102),
                  v103 == objc_msgSend_state(*(void **)(*(_QWORD *)(a1 + 32) + 40), v104, v105, v106, v107)))
            {
              if (qword_1EE16D828 != -1)
                dispatch_once(&qword_1EE16D828, &unk_1E2957200);
              v108 = qword_1EE16D830;
              if (!os_log_type_enabled((os_log_t)qword_1EE16D830, OS_LOG_TYPE_DEFAULT))
                goto LABEL_46;
              v113 = objc_msgSend_identifier(v14, v109, v110, v111, v112);
              objc_msgSend_absoluteTimestamp(v14, v114, v115, v116, v117);
              v119 = v118;
              objc_msgSend_updateTimestamp(v14, v120, v121, v122, v123);
              v125 = v124;
              v130 = objc_msgSend_state(v14, v126, v127, v128, v129);
              v135 = objc_msgSend_response(v14, v131, v132, v133, v134);
              v140 = objc_msgSend_resolution(v14, v136, v137, v138, v139);
              v145 = objc_msgSend_sosState(v14, v141, v142, v143, v144);
              *(_DWORD *)buf = 68290819;
              v233 = 2082;
              v232 = 0;
              v234 = "";
              v235 = 2050;
              v236 = v113;
              v237 = 2049;
              v238 = v119;
              v239 = 2049;
              v240 = v125;
              v241 = 2049;
              v242 = v130;
              v243 = 2049;
              v244 = v135;
              v245 = 2049;
              v246 = v140;
              v247 = 2049;
              v248 = v145;
              v146 = "{\"msg%{public}.0s\":\"CMAnomalyManager dispatch avoided, this event state has already been dispatc"
                     "hed before\", \"identifier\":%{public}llu, \"anomaly timestamp\":\"%{private}f\", \"update timestam"
                     "p\":\"%{private}f\", \"state\":%{private}ld, \"response\":%{private}ld, \"resolution\":%{private}ld"
                     ", \"sosState\":%{private}ld}";
            }
            else
            {
              if (!objc_msgSend_resolution(v14, v99, v100, v101, v102))
              {
                v224 = *(_QWORD *)(a1 + 32);
                v225 = *(NSObject **)(v224 + 16);
                v230[0] = MEMORY[0x1E0C809B0];
                v230[1] = 3221225472;
                v230[2] = sub_18F402400;
                v230[3] = &unk_1E29559D0;
                v230[4] = v224;
                v230[5] = v14;
                dispatch_async(v225, v230);
                goto LABEL_46;
              }
              if (qword_1EE16D828 != -1)
                dispatch_once(&qword_1EE16D828, &unk_1E2957200);
              v108 = qword_1EE16D830;
              if (!os_log_type_enabled((os_log_t)qword_1EE16D830, OS_LOG_TYPE_DEFAULT))
                goto LABEL_46;
              v151 = objc_msgSend_identifier(v14, v147, v148, v149, v150);
              objc_msgSend_absoluteTimestamp(v14, v152, v153, v154, v155);
              v157 = v156;
              objc_msgSend_updateTimestamp(v14, v158, v159, v160, v161);
              v163 = v162;
              v168 = objc_msgSend_state(v14, v164, v165, v166, v167);
              v173 = objc_msgSend_response(v14, v169, v170, v171, v172);
              v178 = objc_msgSend_resolution(v14, v174, v175, v176, v177);
              v183 = objc_msgSend_sosState(v14, v179, v180, v181, v182);
              *(_DWORD *)buf = 68290819;
              v233 = 2082;
              v232 = 0;
              v234 = "";
              v235 = 2050;
              v236 = v151;
              v237 = 2049;
              v238 = v157;
              v239 = 2049;
              v240 = v163;
              v241 = 2049;
              v242 = v168;
              v243 = 2049;
              v244 = v173;
              v245 = 2049;
              v246 = v178;
              v247 = 2049;
              v248 = v183;
              v146 = "{\"msg%{public}.0s\":\"CMAnomalyManager dispatch avoided, this event state is already resolved\", \""
                     "identifier\":%{public}llu, \"anomaly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}"
                     "f\", \"state\":%{private}ld, \"response\":%{private}ld, \"resolution\":%{private}ld, \"sosState\":%{private}ld}";
            }
            v184 = v108;
            v185 = OS_LOG_TYPE_DEFAULT;
          }
          else
          {
            if (qword_1EE16D828 != -1)
              dispatch_once(&qword_1EE16D828, &unk_1E2957200);
            v186 = qword_1EE16D830;
            if (!os_log_type_enabled((os_log_t)qword_1EE16D830, OS_LOG_TYPE_DEBUG))
              goto LABEL_46;
            v191 = objc_msgSend_identifier(v14, v187, v188, v189, v190);
            objc_msgSend_absoluteTimestamp(v14, v192, v193, v194, v195);
            v197 = v196;
            objc_msgSend_updateTimestamp(v14, v198, v199, v200, v201);
            v203 = v202;
            v208 = objc_msgSend_state(v14, v204, v205, v206, v207);
            v213 = objc_msgSend_response(v14, v209, v210, v211, v212);
            v218 = objc_msgSend_resolution(v14, v214, v215, v216, v217);
            v223 = objc_msgSend_sosState(v14, v219, v220, v221, v222);
            *(_DWORD *)buf = 68290819;
            v233 = 2082;
            v232 = 0;
            v234 = "";
            v235 = 2050;
            v236 = v191;
            v237 = 2049;
            v238 = v197;
            v239 = 2049;
            v240 = v203;
            v241 = 2049;
            v242 = v208;
            v243 = 2049;
            v244 = v213;
            v245 = 2049;
            v246 = v218;
            v247 = 2049;
            v248 = v223;
            v146 = "{\"msg%{public}.0s\":\"CMAnomalyManager dispatch avoided, this event is non event\", \"identifier\":%"
                   "{public}llu, \"anomaly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}f\", \"state\":%"
                   "{private}ld, \"response\":%{private}ld, \"resolution\":%{private}ld, \"sosState\":%{private}ld}";
            v184 = v186;
            v185 = OS_LOG_TYPE_DEBUG;
          }
          _os_log_impl(&dword_18F1DC000, v184, v185, v146, buf, 0x58u);
LABEL_46:

          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = objc_msgSend_copy(v14, v226, v227, v228, v229);
          return;
        }
        if (qword_1EE16D828 != -1)
          dispatch_once(&qword_1EE16D828, &unk_1E2957200);
        v79 = qword_1EE16D830;
        if (os_log_type_enabled((os_log_t)qword_1EE16D830, OS_LOG_TYPE_FAULT))
        {
          v84 = objc_msgSend_state(v14, v80, v81, v82, v83);
          *(_DWORD *)buf = 68289282;
          v232 = 0;
          v233 = 2082;
          v234 = "";
          v235 = 2050;
          v236 = v84;
          _os_log_impl(&dword_18F1DC000, v79, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid event state\", \"state\":%{public}ld}", buf, 0x1Cu);
          if (qword_1EE16D828 != -1)
            dispatch_once(&qword_1EE16D828, &unk_1E2957200);
        }
        v63 = qword_1EE16D830;
        if (!os_signpost_enabled((os_log_t)qword_1EE16D830))
          goto LABEL_46;
        v89 = objc_msgSend_state(v14, v85, v86, v87, v88);
        *(_DWORD *)buf = 68289282;
        v232 = 0;
        v233 = 2082;
        v234 = "";
        v235 = 2050;
        v236 = v89;
        v69 = "Invalid event state";
        v70 = "{\"msg%{public}.0s\":\"Invalid event state\", \"state\":%{public}ld}";
      }
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v63, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v69, v70, buf, 0x1Cu);
      goto LABEL_46;
    }
  }
}

void sub_18F402400(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  NSObject *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  const char *v145;
  const char *v146;
  NSObject *v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  const char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  NSObject *v222;
  const char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  const char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  const char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  const char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  const char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  const char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  const char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  const char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  const char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  const char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  const char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  const char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  const char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  int v298;
  __int16 v299;
  const char *v300;
  __int16 v301;
  uint64_t v302;
  __int16 v303;
  uint64_t v304;
  __int16 v305;
  uint64_t v306;
  __int16 v307;
  uint64_t v308;
  __int16 v309;
  uint64_t v310;
  __int16 v311;
  uint64_t v312;
  __int16 v313;
  uint64_t v314;
  uint64_t v315;

  v315 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_delegate(*(void **)(a1 + 32), a2, a3, a4, a5))
  {
    objc_msgSend_delegate(*(void **)(a1 + 32), v6, v7, v8, v9);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      if (qword_1EE16D828 != -1)
        dispatch_once(&qword_1EE16D828, &unk_1E2957200);
      v14 = qword_1EE16D830;
      if (os_log_type_enabled((os_log_t)qword_1EE16D830, OS_LOG_TYPE_DEFAULT))
      {
        v19 = objc_msgSend_identifier(*(void **)(a1 + 40), v15, v16, v17, v18);
        objc_msgSend_absoluteTimestamp(*(void **)(a1 + 40), v20, v21, v22, v23);
        v25 = v24;
        objc_msgSend_updateTimestamp(*(void **)(a1 + 40), v26, v27, v28, v29);
        v31 = v30;
        v36 = objc_msgSend_state(*(void **)(a1 + 40), v32, v33, v34, v35);
        v41 = objc_msgSend_response(*(void **)(a1 + 40), v37, v38, v39, v40);
        v46 = objc_msgSend_resolution(*(void **)(a1 + 40), v42, v43, v44, v45);
        v51 = objc_msgSend_sosState(*(void **)(a1 + 40), v47, v48, v49, v50);
        v297 = 68290819;
        v299 = 2082;
        v298 = 0;
        v300 = "";
        v301 = 2050;
        v302 = v19;
        v303 = 2049;
        v304 = v25;
        v305 = 2049;
        v306 = v31;
        v307 = 2049;
        v308 = v36;
        v309 = 2049;
        v310 = v41;
        v311 = 2049;
        v312 = v46;
        v313 = 2049;
        v314 = v51;
        _os_log_impl(&dword_18F1DC000, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CMAnomalyManager dispatches event through onAnomalyEvent\", \"identifier\":%{public}llu, \"anomaly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}f\", \"state\":%{private}ld, \"response\":%{private}ld, \"resolution\":%{private}ld, \"sosState\":%{private}ld}", (uint8_t *)&v297, 0x58u);
      }

      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = objc_msgSend_copy(*(void **)(a1 + 40), v52, v53, v54, v55);
      objc_msgSend_setAcknowledgement_(*(void **)(*(_QWORD *)(a1 + 32) + 40), v56, 1, v57, v58);
      objc_msgSend__sendRegistrationForAnomalyEvent_(*(void **)(a1 + 32), v59, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), v60, v61);
      v66 = (void *)objc_msgSend_delegate(*(void **)(a1 + 32), v62, v63, v64, v65);
      objc_msgSend_anomalyManager_onAnomalyEvent_(v66, v67, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v68);
      return;
    }
    objc_msgSend_delegate(*(void **)(a1 + 32), v10, v11, v12, v13);
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      if (qword_1EE16D828 != -1)
        dispatch_once(&qword_1EE16D828, &unk_1E2957200);
      v147 = qword_1EE16D830;
      if (os_log_type_enabled((os_log_t)qword_1EE16D830, OS_LOG_TYPE_FAULT))
      {
        v152 = objc_msgSend_identifier(*(void **)(a1 + 40), v148, v149, v150, v151);
        objc_msgSend_absoluteTimestamp(*(void **)(a1 + 40), v153, v154, v155, v156);
        v158 = v157;
        objc_msgSend_updateTimestamp(*(void **)(a1 + 40), v159, v160, v161, v162);
        v164 = v163;
        v169 = objc_msgSend_state(*(void **)(a1 + 40), v165, v166, v167, v168);
        v174 = objc_msgSend_response(*(void **)(a1 + 40), v170, v171, v172, v173);
        v179 = objc_msgSend_resolution(*(void **)(a1 + 40), v175, v176, v177, v178);
        v184 = objc_msgSend_sosState(*(void **)(a1 + 40), v180, v181, v182, v183);
        v297 = 68290819;
        v299 = 2082;
        v298 = 0;
        v300 = "";
        v301 = 2050;
        v302 = v152;
        v303 = 2049;
        v304 = v158;
        v305 = 2049;
        v306 = v164;
        v307 = 2049;
        v308 = v169;
        v309 = 2049;
        v310 = v174;
        v311 = 2049;
        v312 = v179;
        v313 = 2049;
        v314 = v184;
        _os_log_impl(&dword_18F1DC000, v147, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CMAnomalyManager did not dispatch event through didDetectAnomalyEvent, function was deprecated\", \"identifier\":%{public}llu, \"anomaly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}f\", \"state\":%{private}ld, \"response\":%{private}ld, \"resolution\":%{private}ld, \"sosState\":%{private}ld}", (uint8_t *)&v297, 0x58u);
        if (qword_1EE16D828 != -1)
          dispatch_once(&qword_1EE16D828, &unk_1E2957200);
      }
      v107 = qword_1EE16D830;
      if (os_signpost_enabled((os_log_t)qword_1EE16D830))
      {
        v189 = objc_msgSend_identifier(*(void **)(a1 + 40), v185, v186, v187, v188);
        objc_msgSend_absoluteTimestamp(*(void **)(a1 + 40), v190, v191, v192, v193);
        v195 = v194;
        objc_msgSend_updateTimestamp(*(void **)(a1 + 40), v196, v197, v198, v199);
        v201 = v200;
        v206 = objc_msgSend_state(*(void **)(a1 + 40), v202, v203, v204, v205);
        v211 = objc_msgSend_response(*(void **)(a1 + 40), v207, v208, v209, v210);
        v216 = objc_msgSend_resolution(*(void **)(a1 + 40), v212, v213, v214, v215);
        v221 = objc_msgSend_sosState(*(void **)(a1 + 40), v217, v218, v219, v220);
        v297 = 68290819;
        v299 = 2082;
        v298 = 0;
        v300 = "";
        v301 = 2050;
        v302 = v189;
        v303 = 2049;
        v304 = v195;
        v305 = 2049;
        v306 = v201;
        v307 = 2049;
        v308 = v206;
        v309 = 2049;
        v310 = v211;
        v311 = 2049;
        v312 = v216;
        v313 = 2049;
        v314 = v221;
        v145 = "CMAnomalyManager did not dispatch event through didDetectAnomalyEvent, function was deprecated";
        v146 = "{\"msg%{public}.0s\":\"CMAnomalyManager did not dispatch event through didDetectAnomalyEvent, function wa"
               "s deprecated\", \"identifier\":%{public}llu, \"anomaly timestamp\":\"%{private}f\", \"update timestamp\":"
               "\"%{private}f\", \"state\":%{private}ld, \"response\":%{private}ld, \"resolution\":%{private}ld, \"sosSta"
               "te\":%{private}ld}";
        goto LABEL_30;
      }
    }
    else
    {
      if (qword_1EE16D828 != -1)
        dispatch_once(&qword_1EE16D828, &unk_1E2957200);
      v222 = qword_1EE16D830;
      if (os_log_type_enabled((os_log_t)qword_1EE16D830, OS_LOG_TYPE_FAULT))
      {
        v227 = objc_msgSend_identifier(*(void **)(a1 + 40), v223, v224, v225, v226);
        objc_msgSend_absoluteTimestamp(*(void **)(a1 + 40), v228, v229, v230, v231);
        v233 = v232;
        objc_msgSend_updateTimestamp(*(void **)(a1 + 40), v234, v235, v236, v237);
        v239 = v238;
        v244 = objc_msgSend_state(*(void **)(a1 + 40), v240, v241, v242, v243);
        v249 = objc_msgSend_response(*(void **)(a1 + 40), v245, v246, v247, v248);
        v254 = objc_msgSend_resolution(*(void **)(a1 + 40), v250, v251, v252, v253);
        v259 = objc_msgSend_sosState(*(void **)(a1 + 40), v255, v256, v257, v258);
        v297 = 68290819;
        v298 = 0;
        v299 = 2082;
        v300 = "";
        v301 = 2050;
        v302 = v227;
        v303 = 2049;
        v304 = v233;
        v305 = 2049;
        v306 = v239;
        v307 = 2049;
        v308 = v244;
        v309 = 2049;
        v310 = v249;
        v311 = 2049;
        v312 = v254;
        v313 = 2049;
        v314 = v259;
        _os_log_impl(&dword_18F1DC000, v222, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CMAnomalyManager did not dispatch event - no suitable selector\", \"identifier\":%{public}llu, \"anomaly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}f\", \"state\":%{private}ld, \"response\":%{private}ld, \"resolution\":%{private}ld, \"sosState\":%{private}ld}", (uint8_t *)&v297, 0x58u);
        if (qword_1EE16D828 != -1)
          dispatch_once(&qword_1EE16D828, &unk_1E2957200);
      }
      v107 = qword_1EE16D830;
      if (os_signpost_enabled((os_log_t)qword_1EE16D830))
      {
        v264 = objc_msgSend_identifier(*(void **)(a1 + 40), v260, v261, v262, v263);
        objc_msgSend_absoluteTimestamp(*(void **)(a1 + 40), v265, v266, v267, v268);
        v270 = v269;
        objc_msgSend_updateTimestamp(*(void **)(a1 + 40), v271, v272, v273, v274);
        v276 = v275;
        v281 = objc_msgSend_state(*(void **)(a1 + 40), v277, v278, v279, v280);
        v286 = objc_msgSend_response(*(void **)(a1 + 40), v282, v283, v284, v285);
        v291 = objc_msgSend_resolution(*(void **)(a1 + 40), v287, v288, v289, v290);
        v296 = objc_msgSend_sosState(*(void **)(a1 + 40), v292, v293, v294, v295);
        v297 = 68290819;
        v298 = 0;
        v299 = 2082;
        v300 = "";
        v301 = 2050;
        v302 = v264;
        v303 = 2049;
        v304 = v270;
        v305 = 2049;
        v306 = v276;
        v307 = 2049;
        v308 = v281;
        v309 = 2049;
        v310 = v286;
        v311 = 2049;
        v312 = v291;
        v313 = 2049;
        v314 = v296;
        v145 = "CMAnomalyManager did not dispatch event - no suitable selector";
        v146 = "{\"msg%{public}.0s\":\"CMAnomalyManager did not dispatch event - no suitable selector\", \"identifier\":%"
               "{public}llu, \"anomaly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}f\", \"state\":%{pri"
               "vate}ld, \"response\":%{private}ld, \"resolution\":%{private}ld, \"sosState\":%{private}ld}";
        goto LABEL_30;
      }
    }
  }
  else
  {
    if (qword_1EE16D828 != -1)
      dispatch_once(&qword_1EE16D828, &unk_1E2957200);
    v69 = qword_1EE16D830;
    if (os_log_type_enabled((os_log_t)qword_1EE16D830, OS_LOG_TYPE_FAULT))
    {
      v74 = objc_msgSend_identifier(*(void **)(a1 + 40), v70, v71, v72, v73);
      objc_msgSend_absoluteTimestamp(*(void **)(a1 + 40), v75, v76, v77, v78);
      v80 = v79;
      objc_msgSend_updateTimestamp(*(void **)(a1 + 40), v81, v82, v83, v84);
      v86 = v85;
      v91 = objc_msgSend_state(*(void **)(a1 + 40), v87, v88, v89, v90);
      v96 = objc_msgSend_response(*(void **)(a1 + 40), v92, v93, v94, v95);
      v101 = objc_msgSend_resolution(*(void **)(a1 + 40), v97, v98, v99, v100);
      v106 = objc_msgSend_sosState(*(void **)(a1 + 40), v102, v103, v104, v105);
      v297 = 68290819;
      v299 = 2082;
      v298 = 0;
      v300 = "";
      v301 = 2050;
      v302 = v74;
      v303 = 2049;
      v304 = v80;
      v305 = 2049;
      v306 = v86;
      v307 = 2049;
      v308 = v91;
      v309 = 2049;
      v310 = v96;
      v311 = 2049;
      v312 = v101;
      v313 = 2049;
      v314 = v106;
      _os_log_impl(&dword_18F1DC000, v69, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CMAnomalyManager did not dispatch event - registered delegate was released\", \"identifier\":%{public}llu, \"anomaly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}f\", \"state\":%{private}ld, \"response\":%{private}ld, \"resolution\":%{private}ld, \"sosState\":%{private}ld}", (uint8_t *)&v297, 0x58u);
      if (qword_1EE16D828 != -1)
        dispatch_once(&qword_1EE16D828, &unk_1E2957200);
    }
    v107 = qword_1EE16D830;
    if (os_signpost_enabled((os_log_t)qword_1EE16D830))
    {
      v112 = objc_msgSend_identifier(*(void **)(a1 + 40), v108, v109, v110, v111);
      objc_msgSend_absoluteTimestamp(*(void **)(a1 + 40), v113, v114, v115, v116);
      v118 = v117;
      objc_msgSend_updateTimestamp(*(void **)(a1 + 40), v119, v120, v121, v122);
      v124 = v123;
      v129 = objc_msgSend_state(*(void **)(a1 + 40), v125, v126, v127, v128);
      v134 = objc_msgSend_response(*(void **)(a1 + 40), v130, v131, v132, v133);
      v139 = objc_msgSend_resolution(*(void **)(a1 + 40), v135, v136, v137, v138);
      v144 = objc_msgSend_sosState(*(void **)(a1 + 40), v140, v141, v142, v143);
      v297 = 68290819;
      v299 = 2082;
      v298 = 0;
      v300 = "";
      v301 = 2050;
      v302 = v112;
      v303 = 2049;
      v304 = v118;
      v305 = 2049;
      v306 = v124;
      v307 = 2049;
      v308 = v129;
      v309 = 2049;
      v310 = v134;
      v311 = 2049;
      v312 = v139;
      v313 = 2049;
      v314 = v144;
      v145 = "CMAnomalyManager did not dispatch event - registered delegate was released";
      v146 = "{\"msg%{public}.0s\":\"CMAnomalyManager did not dispatch event - registered delegate was released\", \"iden"
             "tifier\":%{public}llu, \"anomaly timestamp\":\"%{private}f\", \"update timestamp\":\"%{private}f\", \"state"
             "\":%{private}ld, \"response\":%{private}ld, \"resolution\":%{private}ld, \"sosState\":%{private}ld}";
LABEL_30:
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v107, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v145, v146, (uint8_t *)&v297, 0x58u);
    }
  }
}

void sub_18F402C70(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ExecutablePathFromPid;
  void *v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  pid_t v14;
  uint64_t v15;
  _DWORD v16[2];
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = getpid();
  ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2, v4, v5);
  if (ExecutablePathFromPid)
  {
    v7 = (void *)ExecutablePathFromPid;
    if (qword_1EE16D828 != -1)
      dispatch_once(&qword_1EE16D828, &unk_1E2957200);
    v8 = qword_1EE16D830;
    if (os_log_type_enabled((os_log_t)qword_1EE16D830, OS_LOG_TYPE_INFO))
    {
      v13 = objc_msgSend_UTF8String(v7, v9, v10, v11, v12);
      v14 = getpid();
      v15 = *(_QWORD *)(a1 + 32);
      v16[0] = 68289795;
      v16[1] = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = v13;
      v21 = 2050;
      v22 = v14;
      v23 = 2049;
      v24 = v15;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CMAnomalyManager client connection interrupt\", \"path\":%{public, location:escape_only}s, \"pid\":%{public}llu, \"self\":\"%{private}p\"}", (uint8_t *)v16, 0x30u);
    }
  }
}

void sub_18F402E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F403660(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  _QWORD v21[2];
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v5 + 24))
  {
    v21[0] = CFSTR("kCLConnectionMessageSubscribeKey");
    v7 = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a2, *(unsigned __int8 *)(v5 + 48), a4, a5);
    v21[1] = CFSTR("CMAnomalyDetectorEvent");
    v8 = *(_QWORD *)(a1 + 40);
    v22[0] = v7;
    v22[1] = v8;
    v20 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v9, (uint64_t)v22, (uint64_t)v21, 2);
    sub_18F4040E8("kCLConnectionMessageAnomalyEvent", &v20, &v18);
    v17 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v17)
    {
      v12 = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v14 = v19;
    if (v19)
    {
      v15 = (unint64_t *)&v19->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_18F4037C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

os_log_t sub_18F4040BC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Fall");
  qword_1EE16D830 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F4040E8@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F404148(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F404134(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F404148(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F4041A8((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F404194(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F4041A8(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F4041FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F404218(uint64_t a1, uint64_t a2)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = objc_alloc_init(MEMORY[0x1E0CB3620]);
  v8 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v5, a1, v6, v7);
  v11 = (void *)objc_msgSend_contentsOfDirectoryAtPath_error_(v4, v9, v8, 0, v10);
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v16 = (void *)objc_msgSend_reverseObjectEnumerator(v11, v12, v13, v14, v15, 0);
  v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v17, (uint64_t)&v27, (uint64_t)v31, 16);
  if (v18)
  {
    v23 = v18;
    v24 = *(_QWORD *)v28;
LABEL_3:
    v25 = 0;
    while (1)
    {
      if (*(_QWORD *)v28 != v24)
        objc_enumerationMutation(v16);
      v26 = objc_msgSend_UTF8String(*(void **)(*((_QWORD *)&v27 + 1) + 8 * v25), v19, v20, v21, v22);
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(a2 + 16))(a2, v26))
        break;
      if (v23 == ++v25)
      {
        v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v16, v19, (uint64_t)&v27, (uint64_t)v31, 16);
        if (v23)
          goto LABEL_3;
        break;
      }
    }
  }

}

uint64_t sub_18F404350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onAudioAccessoryAccelerometer_, a1, a4, a5);
}

uint64_t sub_18F40435C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onAudioAccessoryGyro_, a1, a4, a5);
}

uint64_t sub_18F404368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onAudioAccessoryMagnetometer_, a1, a4, a5);
}

uint64_t sub_18F404374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onAudioAccessoryDeviceMotion_, a1, a4, a5);
}

uint64_t sub_18F404380(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
    return MEMORY[0x1E0DE7D20](a2, sel_onAudioAccessoryActivity_, result, a4, a5);
  return result;
}

uint64_t sub_18F404394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onAudioAccessoryDeviceMotionConfig_, a1, a4, a5);
}

uint64_t sub_18F4043A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_onAudioAccessoryDeviceMotionStatus_(a2, (const char *)a2, a1, a4, a5);
}

uint64_t sub_18F4043AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onAudioAccessoryHeartRate_, a1, a4, a5);
}

uint64_t sub_18F4043B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onAudioAccessoryPPG_, a1, a4, a5);
}

void sub_18F404570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F404588(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = objc_msgSend_initPrivate(*(void **)(a1 + 32), a2, a3, a4, a5);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = result;
  return result;
}

void sub_18F404658(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x1000C4021477895);
  _Unwind_Resume(a1);
}

void sub_18F404730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F404748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), sel_deallocPrivate, a3, a4, a5);
}

uint64_t sub_18F4049E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__setAudioAccessoryAccelerometerUpdateIntervalPrivate_, a3, a4, a5);
}

uint64_t sub_18F404A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__isAudioAccessoryAccelerometerAvailablePrivate, a3, a4, a5);
}

uint64_t sub_18F404B74(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel__startAudioAccessoryAccelerometerUpdatesPrivateToQueue_withHandler_, a1[5], a1[6], a5);
}

uint64_t sub_18F404BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__stopAudioAccessoryAccelerometerUpdatesPrivate, a3, a4, a5);
}

void sub_18F404DD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F404F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__setAudioAccessoryGyroUpdateIntervalPrivate_, a3, a4, a5);
}

uint64_t sub_18F404FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__isAudioAccessoryGyroAvailablePrivate, a3, a4, a5);
}

uint64_t sub_18F4050DC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel__startAudioAccessoryGyroUpdatesPrivateToQueue_withHandler_, a1[5], a1[6], a5);
}

uint64_t sub_18F40514C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__stopAudioAccessoryGyroUpdatesPrivate, a3, a4, a5);
}

void sub_18F40533C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F4054B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__setAudioAccessoryMagnetometerUpdateIntervalPrivate_, a3, a4, a5);
}

uint64_t sub_18F40553C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__isAudioAccessoryMagnetometerAvailablePrivate, a3, a4, a5);
}

uint64_t sub_18F405644(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel__startAudioAccessoryMagnetometerUpdatesPrivateToQueue_withHandler_, a1[5], a1[6], a5);
}

uint64_t sub_18F4056B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__stopAudioAccessoryMagnetometerUpdatesPrivate, a3, a4, a5);
}

void sub_18F4058A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F405A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__isAudioAccessoryDeviceMotionAvailablePrivate, a3, a4, a5);
}

uint64_t sub_18F405A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__setAudioAccessoryDeviceMotionUpdateIntervalPrivate_, a3, a4, a5);
}

uint64_t sub_18F405B28(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__startAudioAccessoryDeviceMotionUpdatesPrivate_lowLatencyMode_withHandler_, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

uint64_t sub_18F405B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__stopAudioAccessoryDeviceMotionUpdatesPrivate, a3, a4, a5);
}

uint64_t sub_18F405C18(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel__startAudioAccessoryDeviceMotionStatusUpdatesPrivate_withHandler_, a1[5], a1[6], a5);
}

uint64_t sub_18F405C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__stopAudioAccessoryDeviceMotionStatusUpdatesPrivate, a3, a4, a5);
}

void sub_18F405EA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sub_18F4060DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F40622C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__isAudioAccessoryActivityAvailablePrivate, a3, a4, a5);
}

uint64_t sub_18F4062A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__setAudioAccessoryActivityUpdateIntervalPrivate_, a3, a4, a5);
}

uint64_t sub_18F406334(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel__startAudioAccessoryActivityUpdatesPrivate_withHandler_, a1[5], a1[6], a5);
}

uint64_t sub_18F4063A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__stopAudioAccessoryActivityUpdatesPrivate, a3, a4, a5);
}

void sub_18F406554(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F4066A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__setAudioAccessoryHeartRateUpdateIntervalPrivate_, a3, a4, a5);
}

uint64_t sub_18F40672C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__isAudioAccessoryHeartRateAvailablePrivate, a3, a4, a5);
}

uint64_t sub_18F4067A8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel__startAudioAccessoryHeartRateUpdatesPrivateToQueue_withHandler_, a1[5], a1[6], a5);
}

uint64_t sub_18F406818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__stopAudioAccessoryHeartRateUpdatesPrivate, a3, a4, a5);
}

void sub_18F406A08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F406B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__isAudioAccessoryPPGAvailablePrivate, a3, a4, a5);
}

uint64_t sub_18F406BF8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel__startAudioAccessoryPPGUpdatesPrivateToQueue_withHandler_, a1[5], a1[6], a5);
}

uint64_t sub_18F406C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__stopAudioAccessoryPPGUpdatesPrivate, a3, a4, a5);
}

void sub_18F406D88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F40711C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F4073BC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F407658(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F407ADC(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2957268);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v11 = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2957268);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T &CMQueue<CMResampleAccessoryDeviceMotion::InputData>::operator[](const size_t) const [T = CMResampleAccessoryDeviceMotion::InputData]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[32 * (v4 - v5) + 4];
}

uint64_t sub_18F407CD4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F407D9C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);
}

uint64_t sub_18F4080DC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F4080F0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

uint64_t sub_18F4081B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], a2, *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8), a4, a5);
  LODWORD(v8) = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 12);
  v13 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v9, v10, v11, v12, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, v7, v13);
}

uint64_t sub_18F4082BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 16), a4, a5);
  v11 = objc_msgSend_numberWithUnsignedLongLong_(MEMORY[0x1E0CB37E8], v8, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), v9, v10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, v7, v11);
}

os_log_t sub_18F408348()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Accessory");
  qword_1ECEDEE30 = (uint64_t)result;
  return result;
}

void sub_18F408378(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F40839C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_18F4083AC(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F4083D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_18F4083E0(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F408404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_18F408414(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F408438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_18F408448(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F40846C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_18F40847C(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F4084A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_18F4084AC(double *a1, void *a2)
{
  uint64_t v3;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint8_t buf[4];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*a1 >= 0.0)
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E29536C8);
    v5 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v16 = objc_msgSend_UTF8String(a2, v6, v7, v8, v9);
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_ERROR, "[CMMediaSessionAnalyticsTracker] Metric %s: Calling start when we've already started.", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E29536C8);
      objc_msgSend_UTF8String(a2, v10, v11, v12, v13);
      v14 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CMCoreAnalyticsUtil::AccumulatedEvent::start(const NSString *)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
  }
  else
  {
    v3 = mach_continuous_time();
    *a1 = sub_18F1FD20C(v3);
  }
}

void sub_18F408688(double *a1, void *a2)
{
  uint64_t v3;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint8_t buf[4];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*a1 <= 0.0)
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E29536C8);
    v5 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      v16 = objc_msgSend_UTF8String(a2, v6, v7, v8, v9);
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_ERROR, "[CMMediaSessionAnalyticsTracker] Metric %s: Calling stop when we haven't started.", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E29536C8);
      objc_msgSend_UTF8String(a2, v10, v11, v12, v13);
      v14 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CMCoreAnalyticsUtil::AccumulatedEvent::stop(const NSString *)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
  }
  else
  {
    v3 = mach_continuous_time();
    a1[1] = a1[1] + sub_18F1FD20C(v3) - *a1;
    *a1 = -1.0;
  }
}

os_log_t sub_18F408878()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1EE16D820 = (uint64_t)result;
  return result;
}

void sub_18F40895C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x194001438](v15, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_18F408A90(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18F408AB0(uint64_t a1, CLConnectionMessage **a2)
{
  void *Dictionary;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  char *v20;
  uint8_t buf[4];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*a2)
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    if (objc_msgSend_objectForKeyedSubscript_(Dictionary, v3, (uint64_t)CFSTR("CMErrorMessage"), v4, v5))
    {
      v9 = (void *)objc_msgSend_objectForKeyedSubscript_(Dictionary, v6, (uint64_t)CFSTR("CMErrorMessage"), v7, v8);
      v10 = (void *)MEMORY[0x1E0CB35C8];
      v15 = objc_msgSend_integerValue(v9, v11, v12, v13, v14);
      v17 = objc_msgSend_errorWithDomain_code_userInfo_(v10, v16, (uint64_t)CFSTR("CMErrorDomain"), v15, 0);
      if (qword_1EE16D418 != -1)
        dispatch_once(&qword_1EE16D418, &unk_1E2957300);
      v18 = qword_1EE16D410;
      if (os_log_type_enabled((os_log_t)qword_1EE16D410, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        v22 = v17;
        _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_ERROR, "Failed with error %{public}@", buf, 0xCu);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D418 == -1)
        {
LABEL_17:
          v20 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "-[CMVO2MaxRetrocomputeManager connect]_block_invoke", "CoreLocation: %s\n", v20);
          if (v20 != (char *)buf)
            free(v20);
          return;
        }
LABEL_19:
        dispatch_once(&qword_1EE16D418, &unk_1E2957300);
        goto LABEL_17;
      }
    }
  }
  else
  {
    if (qword_1EE16D418 != -1)
      dispatch_once(&qword_1EE16D418, &unk_1E2957300);
    v19 = qword_1EE16D410;
    if (os_log_type_enabled((os_log_t)qword_1EE16D410, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v19, OS_LOG_TYPE_ERROR, "Failed with unknown internal error.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D418 == -1)
        goto LABEL_17;
      goto LABEL_19;
    }
  }
}

void sub_18F408D8C(uint64_t a1)
{
  id Weak;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ExecutablePathFromPid;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  pid_t v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  Weak = objc_loadWeak((id *)(a1 + 40));
  v3 = getpid();
  ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v4, v3, v5, v6);
  if (ExecutablePathFromPid)
  {
    v12 = (void *)ExecutablePathFromPid;
    if (qword_1EE16D418 != -1)
      dispatch_once(&qword_1EE16D418, &unk_1E2957300);
    v13 = qword_1EE16D410;
    if (os_log_type_enabled((os_log_t)qword_1EE16D410, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446722;
      v25 = objc_msgSend_UTF8String(v12, v14, v15, v16, v17);
      v26 = 1026;
      v27 = getpid();
      v28 = 2050;
      v29 = Weak;
      _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_INFO, "Client connection interrupt, %{public}s, %{public}d, %{public}p", buf, 0x1Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D418 != -1)
        dispatch_once(&qword_1EE16D418, &unk_1E2957300);
      objc_msgSend_UTF8String(v12, v19, v20, v21, v22);
      getpid();
      v23 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMVO2MaxRetrocomputeManager connect]_block_invoke", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 24))
    v18 = Weak == 0;
  else
    v18 = 1;
  if (!v18)
    objc_msgSend_startRetrocomputeStatusUpdates(Weak, v8, v9, v10, v11);
}

void sub_18F409380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F4093BC(uint64_t a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  _QWORD *v21;
  NSObject *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  char *v28;
  char *v29;
  _QWORD v30[6];
  _QWORD v31[4];
  __int128 v32;
  _QWORD v33[5];
  __int128 v34;
  _QWORD block[4];
  __int128 v36;
  __int16 v37;
  uint8_t buf[1640];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v4, v6, v5, v7, v8, 0);
  if (*a2 && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9)) != 0)
  {
    v14 = DictionaryOfClasses;
    v15 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, (uint64_t)CFSTR("CMErrorMessage"), v12, v13);
    if (v15)
    {
      v19 = v15;
      v20 = v15;
      v33[0] = MEMORY[0x1E0C809B0];
      v33[1] = 3221225472;
      v33[2] = sub_18F409868;
      v33[3] = &unk_1E29572B8;
      v33[4] = v19;
      v34 = *(_OWORD *)(a1 + 32);
      v21 = v33;
    }
    else
    {
      v23 = (void *)objc_msgSend_objectForKeyedSubscript_(v14, v16, (uint64_t)CFSTR("CMVO2MaxRetrocomputeRecord"), v17, v18);
      if (v23)
      {
        v24 = v23;
        v25 = v23;
        v30[0] = MEMORY[0x1E0C809B0];
        v30[1] = 3221225472;
        v30[2] = sub_18F409AE4;
        v30[3] = &unk_1E2955B60;
        v26 = *(_QWORD *)(a1 + 32);
        v30[4] = v24;
        v30[5] = v26;
        v21 = v30;
      }
      else
      {
        if (qword_1EE16D418 != -1)
          dispatch_once(&qword_1EE16D418, &unk_1E2957300);
        v27 = qword_1EE16D410;
        if (os_log_type_enabled((os_log_t)qword_1EE16D410, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v27, OS_LOG_TYPE_ERROR, "Error in retrocomputeStatusWithHandler: Unable to parse query response", buf, 2u);
        }
        if (sub_18F1FCA08(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D418 != -1)
            dispatch_once(&qword_1EE16D418, &unk_1E2957300);
          v37 = 0;
          v29 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "-[CMVO2MaxRetrocomputeManager retrocomputeStatusWithHandler:]_block_invoke", "CoreLocation: %s\n", v29);
          if (v29 != (char *)buf)
            free(v29);
        }
        v31[0] = MEMORY[0x1E0C809B0];
        v31[1] = 3221225472;
        v31[2] = sub_18F409A74;
        v31[3] = &unk_1E2957290;
        v32 = *(_OWORD *)(a1 + 32);
        v21 = v31;
      }
    }
  }
  else
  {
    if (qword_1EE16D418 != -1)
      dispatch_once(&qword_1EE16D418, &unk_1E2957300);
    v22 = qword_1EE16D410;
    if (os_log_type_enabled((os_log_t)qword_1EE16D410, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v22, OS_LOG_TYPE_ERROR, "Response invalid for retrocomputeStatusWithHandler. Internal error occured.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D418 != -1)
        dispatch_once(&qword_1EE16D418, &unk_1E2957300);
      v37 = 0;
      v28 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMVO2MaxRetrocomputeManager retrocomputeStatusWithHandler:]_block_invoke", "CoreLocation: %s\n", v28);
      if (v28 != (char *)buf)
        free(v28);
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_18F4097F8;
    block[3] = &unk_1E2957290;
    v36 = *(_OWORD *)(a1 + 32);
    v21 = block;
  }
  dispatch_async(MEMORY[0x1E0C80D38], v21);
}

void sub_18F4097F8(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v5 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(v3 + 16))(v3, v4, 0, 0, v5);

}

void sub_18F409868(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  int v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  char *v11;
  uint8_t buf[4];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x1E0CB35C8];
  v7 = objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3, a4, a5);
  v9 = objc_msgSend_errorWithDomain_code_userInfo_(v6, v8, (uint64_t)CFSTR("CMErrorDomain"), v7, 0);
  if (qword_1EE16D418 != -1)
    dispatch_once(&qword_1EE16D418, &unk_1E2957300);
  v10 = qword_1EE16D410;
  if (os_log_type_enabled((os_log_t)qword_1EE16D410, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v13 = v9;
    _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_ERROR, "Received error for retrocomputeStatusWithHandler: %{public}@", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D418 != -1)
      dispatch_once(&qword_1EE16D418, &unk_1E2957300);
    v11 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMVO2MaxRetrocomputeManager retrocomputeStatusWithHandler:]_block_invoke", "CoreLocation: %s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_18F409A74(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v5 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(v3 + 16))(v3, v4, 0, 0, v5);

}

void sub_18F409AE4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t started;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 40);
  v7 = objc_msgSend_status(*(void **)(a1 + 32), a2, a3, a4, a5);
  started = objc_msgSend_startDate(*(void **)(a1 + 32), v8, v9, v10, v11);
  v17 = objc_msgSend_endDate(*(void **)(a1 + 32), v13, v14, v15, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v6 + 16))(v6, v7, started, v17, 0);

}

void sub_18F409ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F409EF4(uint64_t a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  NSObject *v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  NSObject *v28;
  char *v29;
  char *v30;
  _QWORD v31[6];
  _QWORD v32[5];
  _QWORD v33[6];
  _QWORD block[5];
  __int16 v35;
  uint8_t buf[1640];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v4, v6, v5, v7, v8, 0);
  if (*a2 && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9)) != 0)
  {
    v14 = DictionaryOfClasses;
    v15 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, (uint64_t)CFSTR("CMErrorMessage"), v12, v13);
    if (v15)
    {
      v19 = v15;
      v20 = v15;
      v33[0] = MEMORY[0x1E0C809B0];
      v33[1] = 3221225472;
      v33[2] = sub_18F40A380;
      v33[3] = &unk_1E2955B38;
      v21 = *(_QWORD *)(a1 + 32);
      v33[4] = v19;
      v33[5] = v21;
      v22 = v33;
    }
    else
    {
      v24 = (void *)objc_msgSend_objectForKeyedSubscript_(v14, v16, (uint64_t)CFSTR("CMVO2MaxRetrocomputeRecord"), v17, v18);
      if (v24)
      {
        v25 = v24;
        v26 = v24;
        v31[0] = MEMORY[0x1E0C809B0];
        v31[1] = 3221225472;
        v31[2] = sub_18F40A5D8;
        v31[3] = &unk_1E2955B60;
        v27 = *(_QWORD *)(a1 + 32);
        v31[4] = v25;
        v31[5] = v27;
        v22 = v31;
      }
      else
      {
        if (qword_1EE16D418 != -1)
          dispatch_once(&qword_1EE16D418, &unk_1E2957300);
        v28 = qword_1EE16D410;
        if (os_log_type_enabled((os_log_t)qword_1EE16D410, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v28, OS_LOG_TYPE_ERROR, "Error in retrocomputeStateWithHandler: Unable to parse query response", buf, 2u);
        }
        if (sub_18F1FCA08(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D418 != -1)
            dispatch_once(&qword_1EE16D418, &unk_1E2957300);
          v35 = 0;
          v30 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "-[CMVO2MaxRetrocomputeManager retrocomputeStateWithHandler:]_block_invoke", "CoreLocation: %s\n", v30);
          if (v30 != (char *)buf)
            free(v30);
        }
        v32[0] = MEMORY[0x1E0C809B0];
        v32[1] = 3221225472;
        v32[2] = sub_18F40A580;
        v32[3] = &unk_1E2955B10;
        v32[4] = *(_QWORD *)(a1 + 32);
        v22 = v32;
      }
    }
  }
  else
  {
    if (qword_1EE16D418 != -1)
      dispatch_once(&qword_1EE16D418, &unk_1E2957300);
    v23 = qword_1EE16D410;
    if (os_log_type_enabled((os_log_t)qword_1EE16D410, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v23, OS_LOG_TYPE_ERROR, "Response invalid for retrocomputeStateWithHandler. Internal error occured.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D418 != -1)
        dispatch_once(&qword_1EE16D418, &unk_1E2957300);
      v35 = 0;
      v29 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMVO2MaxRetrocomputeManager retrocomputeStateWithHandler:]_block_invoke", "CoreLocation: %s\n", v29);
      if (v29 != (char *)buf)
        free(v29);
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_18F40A328;
    block[3] = &unk_1E2955B10;
    block[4] = *(_QWORD *)(a1 + 32);
    v22 = block;
  }
  dispatch_async(MEMORY[0x1E0C80D38], v22);
}

void sub_18F40A328(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v3, 0, v4);

}

void sub_18F40A380(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  int v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  char *v11;
  uint8_t buf[4];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x1E0CB35C8];
  v7 = objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3, a4, a5);
  v9 = objc_msgSend_errorWithDomain_code_userInfo_(v6, v8, (uint64_t)CFSTR("CMErrorDomain"), v7, 0);
  if (qword_1EE16D418 != -1)
    dispatch_once(&qword_1EE16D418, &unk_1E2957300);
  v10 = qword_1EE16D410;
  if (os_log_type_enabled((os_log_t)qword_1EE16D410, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v13 = v9;
    _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_ERROR, "Received error for retrocomputeStateWithHandler: %{public}@", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D418 != -1)
      dispatch_once(&qword_1EE16D418, &unk_1E2957300);
    v11 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMVO2MaxRetrocomputeManager retrocomputeStateWithHandler:]_block_invoke", "CoreLocation: %s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_18F40A580(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v3, 0, v4);

}

void sub_18F40A5D8(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_18F40A8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F40A90C(uint64_t a1, CLConnectionMessage **a2)
{
  void *Dictionary;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  NSObject *v19;
  NSObject *v20;
  char *v21;
  id v22;
  uint64_t v23;
  _QWORD block[6];
  int v25;
  void *v26;
  uint8_t buf[4];
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*a2)
  {
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    if (!objc_msgSend_objectForKeyedSubscript_(Dictionary, v4, (uint64_t)CFSTR("CMErrorMessage"), v5, v6))
    {
      v18 = 0;
      goto LABEL_22;
    }
    v10 = (void *)objc_msgSend_objectForKeyedSubscript_(Dictionary, v7, (uint64_t)CFSTR("CMErrorMessage"), v8, v9);
    v11 = (void *)MEMORY[0x1E0CB35C8];
    v16 = objc_msgSend_integerValue(v10, v12, v13, v14, v15);
    v18 = (void *)objc_msgSend_errorWithDomain_code_userInfo_(v11, v17, (uint64_t)CFSTR("CMErrorDomain"), v16, 0);
    if (qword_1EE16D418 != -1)
      dispatch_once(&qword_1EE16D418, &unk_1E2957300);
    v19 = qword_1EE16D410;
    if (os_log_type_enabled((os_log_t)qword_1EE16D410, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v28 = v18;
      _os_log_impl(&dword_18F1DC000, v19, OS_LOG_TYPE_ERROR, "Received error for triggerVO2MaxRetrocompute: %{public}@", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D418 != -1)
        dispatch_once(&qword_1EE16D418, &unk_1E2957300);
      v25 = 138543362;
      v26 = v18;
LABEL_19:
      v21 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMVO2MaxRetrocomputeManager triggerRetrocomputeWithHandler:]_block_invoke", "CoreLocation: %s\n", v21);
      if (v21 != (char *)buf)
        free(v21);
    }
  }
  else
  {
    v18 = (void *)objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], (const char *)a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
    if (qword_1EE16D418 != -1)
      dispatch_once(&qword_1EE16D418, &unk_1E2957300);
    v20 = qword_1EE16D410;
    if (os_log_type_enabled((os_log_t)qword_1EE16D410, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_ERROR, "Response invalid for triggerVO2MaxRetrocompute.  Internal error occured.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D418 != -1)
        dispatch_once(&qword_1EE16D418, &unk_1E2957300);
      LOWORD(v25) = 0;
      goto LABEL_19;
    }
  }
LABEL_22:
  v22 = v18;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F40AC5C;
  block[3] = &unk_1E2955B60;
  v23 = *(_QWORD *)(a1 + 32);
  block[4] = v18;
  block[5] = v23;
  dispatch_async(MEMORY[0x1E0C80D38], block);
}

void sub_18F40AC5C(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x194001B4C]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  objc_autoreleasePoolPop(v2);
}

void sub_18F40B004(uint64_t a1)
{
  const char *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD v11[6];
  void *__p;
  std::__shared_weak_count *v13;
  char v14;
  const __CFString *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
  {
    sub_18F270374(&__p, "kCLConnectionMessageVO2MaxRetrocomputeStatusUpdate");
    v11[1] = MEMORY[0x1E0C809B0];
    v11[2] = 3221225472;
    v11[3] = sub_18F40B1FC;
    v11[4] = &unk_1E2955DD8;
    v11[5] = *(_QWORD *)(a1 + 32);
    CLConnectionClient::setHandlerForMessage();
    if (v14 < 0)
      operator delete(__p);
    v15 = CFSTR("kCLConnectionMessageSubscribeKey");
    v16[0] = MEMORY[0x1E0C9AAB0];
    v11[0] = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v2, (uint64_t)v16, (uint64_t)&v15, 1);
    sub_18F40BDA4("kCLConnectionMessageVO2MaxRetrocomputeStatusUpdate", v11, &__p);
    v10 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v10)
    {
      v5 = (unint64_t *)&v10->__shared_owners_;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 1;
    v7 = v13;
    if (v13)
    {
      v8 = (unint64_t *)&v13->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_18F40B1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_18F2A8438((uint64_t)&a10);
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_18F40B1FC(uint64_t a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  NSObject *v15;
  uint64_t result;
  const char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  int v30;
  const char *v31;
  NSObject *v32;
  id v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  id Weak;
  NSObject *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint8_t buf[4];
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v4, v6, v5, v7, v8, 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9);
  if (*a2)
    v14 = DictionaryOfClasses == 0;
  else
    v14 = 1;
  if (v14)
  {
    if (qword_1EE16D418 != -1)
      dispatch_once(&qword_1EE16D418, &unk_1E2957300);
    v15 = qword_1EE16D410;
    if (os_log_type_enabled((os_log_t)qword_1EE16D410, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_ERROR, "Response invalid for retrocompute status update.  Internal error occured.", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
      goto LABEL_11;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D418 == -1)
      goto LABEL_33;
    goto LABEL_39;
  }
  v19 = DictionaryOfClasses;
  v20 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, (uint64_t)CFSTR("CMErrorMessage"), v12, v13);
  v24 = objc_msgSend_objectForKeyedSubscript_(v19, v21, (uint64_t)CFSTR("CMVO2MaxRetrocomputeRecord"), v22, v23);
  if (!v20)
  {
    v36 = v24;
    if (v24)
    {
      objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 32));
      result = objc_opt_respondsToSelector();
      if ((result & 1) != 0)
      {
        Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 32));
        return MEMORY[0x1E0DE7D20](Weak, sel_vo2MaxRetrocomputeManager_didUpdateState_, *(_QWORD *)(a1 + 32), v36, v41);
      }
      return result;
    }
    if (qword_1EE16D418 != -1)
      dispatch_once(&qword_1EE16D418, &unk_1E2957300);
    v38 = qword_1EE16D410;
    if (os_log_type_enabled((os_log_t)qword_1EE16D410, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v38, OS_LOG_TYPE_FAULT, "Unable to parse kCLConnectionMessageVO2MaxRetrocomputeStatusUpdate message", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
    {
LABEL_11:
      objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 32));
      result = objc_opt_respondsToSelector();
      if ((result & 1) == 0)
        return result;
      v18 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v17, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
      goto LABEL_20;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D418 == -1)
    {
LABEL_33:
      v39 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMVO2MaxRetrocomputeManager startRetrocomputeStatusUpdates]_block_invoke", "CoreLocation: %s\n", v39);
      if (v39 != (char *)buf)
        free(v39);
      goto LABEL_11;
    }
LABEL_39:
    dispatch_once(&qword_1EE16D418, &unk_1E2957300);
    goto LABEL_33;
  }
  v29 = (void *)MEMORY[0x1E0CB35C8];
  v30 = objc_msgSend_intValue(v20, v25, v26, v27, v28);
  v18 = objc_msgSend_errorWithDomain_code_userInfo_(v29, v31, (uint64_t)CFSTR("CMErrorDomain"), v30, 0);
  if (qword_1EE16D418 != -1)
    dispatch_once(&qword_1EE16D418, &unk_1E2957300);
  v32 = qword_1EE16D410;
  if (os_log_type_enabled((os_log_t)qword_1EE16D410, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543362;
    v43 = v18;
    _os_log_impl(&dword_18F1DC000, v32, OS_LOG_TYPE_ERROR, "Received error for retrocompute status update: %{public}@", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D418 != -1)
      dispatch_once(&qword_1EE16D418, &unk_1E2957300);
    v40 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMVO2MaxRetrocomputeManager startRetrocomputeStatusUpdates]_block_invoke", "CoreLocation: %s\n", v40);
    if (v40 != (char *)buf)
      free(v40);
  }
  objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 32));
  result = objc_opt_respondsToSelector();
  if ((result & 1) != 0)
  {
LABEL_20:
    v33 = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 32));
    return objc_msgSend_vo2MaxRetrocomputeManager_updateFailedWithError_(v33, v34, *(_QWORD *)(a1 + 32), v18, v35);
  }
  return result;
}

void sub_18F40BA54(uint64_t a1)
{
  const char *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  char *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  const __CFString *v14;
  uint64_t v15;
  void *__p;
  std::__shared_weak_count *v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
  {
    sub_18F270374(&__p, "kCLConnectionMessageVO2MaxRetrocomputeStatusUpdate");
    CLConnectionClient::setHandlerForMessage();
    if (v18 < 0)
      operator delete(__p);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 24))
    {
      v14 = CFSTR("kCLConnectionMessageSubscribeKey");
      v15 = MEMORY[0x1E0C9AAA0];
      v13 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v2, (uint64_t)&v15, (uint64_t)&v14, 1);
      sub_18F40BDA4("kCLConnectionMessageVO2MaxRetrocomputeStatusUpdate", &v13, &__p);
      v12 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v4 = __ldxr(p_shared_owners);
        while (__stxr(v4 + 1, p_shared_owners));
      }
      CLConnectionClient::sendMessage();
      if (v12)
      {
        v5 = (unint64_t *)&v12->__shared_owners_;
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) = 0;
      v7 = v17;
      if (v17)
      {
        v8 = (unint64_t *)&v17->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else
    {
      if (qword_1EE16D418 != -1)
        dispatch_once(&qword_1EE16D418, &unk_1E2957300);
      v10 = qword_1EE16D410;
      if (os_log_type_enabled((os_log_t)qword_1EE16D410, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_DEFAULT, "Error stopping retrocompute status updates, no active clients", (uint8_t *)&__p, 2u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1EE16D418 != -1)
          dispatch_once(&qword_1EE16D418, &unk_1E2957300);
        LOWORD(v13) = 0;
        v11 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "-[CMVO2MaxRetrocomputeManager stopRetrocomputeStatusUpdates]_block_invoke", "CoreLocation: %s\n", v11);
        if (v11 != (char *)&__p)
          free(v11);
      }
    }
  }
}

void sub_18F40BD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_18F2A8438((uint64_t)&a11);
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

os_log_t sub_18F40BD78()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "VO2Max");
  qword_1EE16D410 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F40BDA4@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F40BE04(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F40BDF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F40BE04(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F40BE64((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F40BE50(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F40BE64(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F40BEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F40BFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  MEMORY[0x194001438](v19, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_18F40C024(uint64_t a1, CLConnectionMessage **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  char *v21;
  uint8_t buf[4];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v3, v6, v4, v7, v8, v5, 0);
  if (*a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9)) != 0
    && (v14 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, (uint64_t)CFSTR("CMErrorMessage"), v12, v13)) != 0)
  {
    v19 = objc_msgSend_intValue(v14, v15, v16, v17, v18);
  }
  else
  {
    v19 = 103;
  }
  if (qword_1EE16D868 != -1)
    dispatch_once(&qword_1EE16D868, &unk_1E2945208);
  v20 = qword_1EE16D870;
  if (os_log_type_enabled((os_log_t)qword_1EE16D870, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v23 = v19;
    _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_FAULT, "Failed with code %{public}d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D868 != -1)
      dispatch_once(&qword_1EE16D868, &unk_1E2945208);
    v21 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMHealthTrackerInternal init]_block_invoke", "CoreLocation: %s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
  }
}

void sub_18F40C238(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ExecutablePathFromPid;
  uint64_t v7;
  NSObject *v8;
  pid_t v9;
  uint64_t v10;
  char *v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  pid_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = getpid();
  ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2, v4, v5);
  if (ExecutablePathFromPid)
  {
    v7 = ExecutablePathFromPid;
    if (qword_1EE16D868 != -1)
      dispatch_once(&qword_1EE16D868, &unk_1E2945208);
    v8 = qword_1EE16D870;
    if (os_log_type_enabled((os_log_t)qword_1EE16D870, OS_LOG_TYPE_DEFAULT))
    {
      v9 = getpid();
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      v13 = v7;
      v14 = 1024;
      v15 = v9;
      v16 = 2048;
      v17 = v10;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_DEFAULT, "Client connection interrupt, %@, %d, %p", buf, 0x1Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D868 != -1)
        dispatch_once(&qword_1EE16D868, &unk_1E2945208);
      getpid();
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMHealthTrackerInternal init]_block_invoke", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
}

void sub_18F40C538(uint64_t a1)
{
  CMMotionTimeRange *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  void *started;
  const char *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  void *__p[2];
  char v29;
  const __CFString *v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) && *(_QWORD *)(a1 + 56))
  {
    v2 = [CMMotionTimeRange alloc];
    objc_msgSend_timeIntervalSinceReferenceDate(*(void **)(a1 + 40), v3, v4, v5, v6);
    v8 = v7;
    objc_msgSend_timeIntervalSinceReferenceDate(*(void **)(a1 + 48), v9, v10, v11, v12);
    started = (void *)objc_msgSend_initWithStartDate_endDate_(v2, v13, v14, v15, v16, v8, v17);
    v30 = CFSTR("CMTimeRangeKey");
    v31[0] = started;
    v20 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v19, (uint64_t)v31, (uint64_t)&v30, 1);

    v21 = (std::__shared_weak_count *)operator new(0x70uLL);
    v21->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    v21->__shared_weak_owners_ = 0;
    v21->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2952688;
    sub_18F270374(__p, "Health/kCLConnectionMessageMetMinutesQuery");
    MEMORY[0x19400103C](&v21[1], __p, v20);
    if (v29 < 0)
      operator delete(__p[0]);
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    CLConnectionClient::sendMessage();
    if (v21)
    {
      v24 = (unint64_t *)&v21->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (v21)
    {
      v26 = (unint64_t *)&v21->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
}

void sub_18F40C744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_18F2A8438((uint64_t)&a15);
  sub_18F2A8438((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_18F40C794(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  NSSet *v16;
  void *DictionaryOfClasses;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  _QWORD *v28;
  NSObject *v29;
  NSObject *v30;
  char *v31;
  _QWORD v32[5];
  __int16 v33;
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD block[5];
  uint8_t buf[1640];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = (id)objc_msgSend_copy(*(void **)(a1 + 40), a2, a3, a4, a5);
  v8 = (void *)MEMORY[0x1E0C99E60];
  v9 = objc_opt_class();
  v10 = objc_opt_class();
  v11 = objc_opt_class();
  v12 = objc_opt_class();
  v16 = (NSSet *)objc_msgSend_setWithObjects_(v8, v13, v9, v14, v15, v10, v11, v12, 0);
  if (*(_QWORD *)a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v16)) != 0)
  {
    v21 = DictionaryOfClasses;
    v22 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v18, (uint64_t)CFSTR("CMErrorMessage"), v19, v20);
    v26 = objc_msgSend_objectForKeyedSubscript_(v21, v23, (uint64_t)CFSTR("CMMetMinutesArray"), v24, v25);
    if (v22)
    {
      v27 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
      v35[0] = MEMORY[0x1E0C809B0];
      v35[1] = 3221225472;
      v35[2] = sub_18F40CB30;
      v35[3] = &unk_1E2955B60;
      v35[4] = v22;
      v35[5] = v7;
      v28 = v35;
    }
    else if (v26)
    {
      v29 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
      v34[0] = MEMORY[0x1E0C809B0];
      v34[1] = 3221225472;
      v34[2] = sub_18F40CB90;
      v34[3] = &unk_1E2955B60;
      v34[4] = v26;
      v34[5] = v7;
      v28 = v34;
      v27 = v29;
    }
    else
    {
      if (qword_1EE16D868 != -1)
        dispatch_once(&qword_1EE16D868, &unk_1E2945208);
      v30 = qword_1EE16D870;
      if (os_log_type_enabled((os_log_t)qword_1EE16D870, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v30, OS_LOG_TYPE_FAULT, "METMinutes,Unable to parse query response", buf, 2u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D868 != -1)
          dispatch_once(&qword_1EE16D868, &unk_1E2945208);
        v33 = 0;
        v31 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "-[CMHealthTrackerInternal _queryMetMinutesFromDate:toDate:handler:]_block_invoke", "CoreLocation: %s\n", v31);
        if (v31 != (char *)buf)
          free(v31);
      }
      v27 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
      v32[0] = MEMORY[0x1E0C809B0];
      v32[1] = 3221225472;
      v32[2] = sub_18F40CBA4;
      v32[3] = &unk_1E2955B10;
      v32[4] = v7;
      v28 = v32;
    }
  }
  else
  {
    v27 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_18F40CAE4;
    block[3] = &unk_1E2955B10;
    block[4] = v7;
    v28 = block;
  }
  dispatch_async(v27, v28);
}

uint64_t sub_18F40CAE4(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F40CB30(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;

  v5 = (void *)MEMORY[0x1E0CB35C8];
  v6 = *(_QWORD *)(a1 + 40);
  v7 = objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3, a4, a5);
  v9 = objc_msgSend_errorWithDomain_code_userInfo_(v5, v8, (uint64_t)CFSTR("CMErrorDomain"), v7, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v6, 0, v9);
}

uint64_t sub_18F40CB90(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F40CBA4(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

void sub_18F40CC4C(_QWORD *a1, const char *a2)
{
  uint64_t v2;
  CMVO2MaxInputs *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  const __CFString *v20;
  uint64_t v21;
  const __CFString *v22;
  void *v23;
  _OWORD v24[2];
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1[4] + 8) && a1[6])
  {
    v2 = a1[5];
    if (v2)
    {
      v20 = CFSTR("CMVO2MaxInputsRecord");
      v21 = v2;
      v19 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)&v21, (uint64_t)&v20, 1);
    }
    else
    {
      memset(v24, 0, sizeof(v24));
      v28 = 0u;
      v29 = 0u;
      v30 = 0u;
      v31 = 0;
      v3 = [CMVO2MaxInputs alloc];
      v25 = 0xFFEFFFFFFFFFFFFFLL;
      v26 = 0;
      v27 = 0xFFEFFFFFFFFFFFFFLL;
      v7 = (void *)objc_msgSend_initWithSample_(v3, v4, (uint64_t)v24, v5, v6);
      v22 = CFSTR("CMVO2MaxInputsRecord");
      v23 = v7;
      v19 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v8, (uint64_t)&v23, (uint64_t)&v22, 1);

    }
    sub_18F40D5FC("Health/kCLConnectionMessageVO2MaxInputsQuery", &v19, &v17);
    v16 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v13 = v18;
    if (v18)
    {
      v14 = (unint64_t *)&v18->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_18F40CE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F40CE78(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  NSSet *v16;
  void *DictionaryOfClasses;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  _QWORD *v28;
  NSObject *v29;
  NSObject *v30;
  char *v31;
  _QWORD v32[5];
  __int16 v33;
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD block[5];
  uint8_t buf[1640];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = (id)objc_msgSend_copy(*(void **)(a1 + 40), a2, a3, a4, a5);
  v8 = (void *)MEMORY[0x1E0C99E60];
  v9 = objc_opt_class();
  v10 = objc_opt_class();
  v11 = objc_opt_class();
  v12 = objc_opt_class();
  v16 = (NSSet *)objc_msgSend_setWithObjects_(v8, v13, v9, v14, v15, v10, v11, v12, 0);
  if (*(_QWORD *)a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v16)) != 0)
  {
    v21 = DictionaryOfClasses;
    v22 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v18, (uint64_t)CFSTR("CMErrorMessage"), v19, v20);
    v26 = objc_msgSend_objectForKeyedSubscript_(v21, v23, (uint64_t)CFSTR("CMVO2MaxInputsArray"), v24, v25);
    if (v22)
    {
      v27 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
      v35[0] = MEMORY[0x1E0C809B0];
      v35[1] = 3221225472;
      v35[2] = sub_18F40D214;
      v35[3] = &unk_1E2955B60;
      v35[4] = v22;
      v35[5] = v7;
      v28 = v35;
    }
    else if (v26)
    {
      v29 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
      v34[0] = MEMORY[0x1E0C809B0];
      v34[1] = 3221225472;
      v34[2] = sub_18F40D274;
      v34[3] = &unk_1E2955B60;
      v34[4] = v26;
      v34[5] = v7;
      v28 = v34;
      v27 = v29;
    }
    else
    {
      if (qword_1EE16D868 != -1)
        dispatch_once(&qword_1EE16D868, &unk_1E2945208);
      v30 = qword_1EE16D870;
      if (os_log_type_enabled((os_log_t)qword_1EE16D870, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v30, OS_LOG_TYPE_FAULT, "VO2MaxData,Unable to parse query response", buf, 2u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D868 != -1)
          dispatch_once(&qword_1EE16D868, &unk_1E2945208);
        v33 = 0;
        v31 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "-[CMHealthTrackerInternal _queryVO2MaxInputsFromRecord:handler:]_block_invoke", "CoreLocation: %s\n", v31);
        if (v31 != (char *)buf)
          free(v31);
      }
      v27 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
      v32[0] = MEMORY[0x1E0C809B0];
      v32[1] = 3221225472;
      v32[2] = sub_18F40D288;
      v32[3] = &unk_1E2955B10;
      v32[4] = v7;
      v28 = v32;
    }
  }
  else
  {
    v27 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_18F40D1C8;
    block[3] = &unk_1E2955B10;
    block[4] = v7;
    v28 = block;
  }
  dispatch_async(v27, v28);
}

uint64_t sub_18F40D1C8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F40D214(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;

  v5 = (void *)MEMORY[0x1E0CB35C8];
  v6 = *(_QWORD *)(a1 + 40);
  v7 = objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3, a4, a5);
  v9 = objc_msgSend_errorWithDomain_code_userInfo_(v5, v8, (uint64_t)CFSTR("CMErrorDomain"), v7, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v6, 0, v9);
}

uint64_t sub_18F40D274(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F40D288(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F40D3B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend__teardown(*(void **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5);
}

os_log_t sub_18F40D5D0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Health");
  qword_1EE16D870 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F40D5FC@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F40D65C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F40D648(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F40D65C(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F40D6BC((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F40D6A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F40D6BC(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F40D710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F40D72C(uint64_t a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;

  *(_OWORD *)a1 = xmmword_18F505C20;
  sub_18F1FFE94((float32x4_t *)a1, (float32x4_t)xmmword_18F505C20);
  *(_OWORD *)(a1 + 68) = xmmword_18F507EB0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  sub_18F1FFE94((float32x4_t *)(a1 + 68), (float32x4_t)xmmword_18F507EB0);
  *(_BYTE *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1065749138;
  *(_BYTE *)(a1 + 100) = 1;
  sub_18F40FAA4(a1 + 104, 0.0, 6.2832, 0.01, 100.0, 1.0);
  *(_DWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 164) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  *(_BYTE *)(a1 + 172) = 0;
  v2 = atomic_load((unsigned __int8 *)qword_1EE16E990);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_1EE16E990))
  {
    xmmword_1EE16E980 = xmmword_18F507EC0;
    __cxa_guard_release(qword_1EE16E990);
  }
  sub_18F40D890(a1 + 104, &xmmword_1EE16E980);
  v3 = atomic_load((unsigned __int8 *)&qword_1EE16E9B0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EE16E9B0))
  {
    xmmword_1EE16E9A0 = xmmword_18F507ED0;
    __cxa_guard_release(&qword_1EE16E9B0);
  }
  sub_18F40D978(a1 + 104, &xmmword_1EE16E9A0);
  return a1;
}

uint64_t sub_18F40D890(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  unint64_t v7;

  v4 = 0;
  while (sub_18F33ECEC((uint64_t)a2, v4) >= *(float *)a1 && sub_18F33ECEC((uint64_t)a2, v4) <= *(float *)(a1 + 4))
  {
    if (++v4 == 4)
    {
      v5 = 1;
      while (1)
      {
        v6 = *(float *)sub_18F40FB5C(a1 + 24, v5);
        v7 = v5 - 1;
        if (v6 < (float)(*(float *)sub_18F40FB5C(a1 + 24, v7) + 0.000001))
          break;
        v5 = v7 + 2;
        if (v5 == 4)
        {
          *(_DWORD *)(a1 + 24) = *a2;
          *(_DWORD *)(a1 + 28) = a2[1];
          *(_DWORD *)(a1 + 32) = a2[2];
          *(_DWORD *)(a1 + 36) = a2[3];
          return 1;
        }
      }
      return 0;
    }
  }
  return 0;
}

BOOL sub_18F40D978(uint64_t a1, _DWORD *a2)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  float v8;

  if (sub_18F33ECEC((uint64_t)a2, 0) < *(float *)(a1 + 8) || sub_18F33ECEC((uint64_t)a2, 0) > *(float *)(a1 + 12))
    return 0;
  v5 = 0;
  while (v5 != 3)
  {
    v6 = v5;
    v7 = v5 + 1;
    if (sub_18F33ECEC((uint64_t)a2, v5 + 1) >= *(float *)(a1 + 8))
    {
      v8 = sub_18F33ECEC((uint64_t)a2, v7);
      v5 = v6 + 1;
      if (v8 <= *(float *)(a1 + 12))
        continue;
    }
    return v6 > 2;
  }
  *(_DWORD *)(a1 + 40) = *a2;
  *(_DWORD *)(a1 + 44) = a2[1];
  *(_DWORD *)(a1 + 48) = a2[2];
  *(_DWORD *)(a1 + 52) = a2[3];
  return 1;
}

void sub_18F40DA50(uint64_t a1, float *a2)
{
  uint64_t v4;
  float v5;
  NSObject *v6;
  double v7;
  double v8;
  double v9;
  char *v10;
  int v11;
  int v12;
  uint8_t buf[4];
  double v14;
  __int16 v15;
  double v16;
  __int16 v17;
  double v18;
  uint64_t v19;

  v4 = 0;
  v19 = *MEMORY[0x1E0C80C00];
  v5 = 0.0;
  do
  {
    v5 = v5 + (float)(a2[v4] * a2[v4]);
    ++v4;
  }
  while (v4 != 3);
  if (fabsf(sqrtf(v5) + -1.0) <= 0.000001)
  {
    *(float *)(a1 + 40) = sub_18F3D39F4((float *)(a1 + 68), *a2, a2[1], a2[2]);
    *(_DWORD *)(a1 + 44) = v11;
    *(_DWORD *)(a1 + 48) = v12;
  }
  else
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953728);
    v6 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      v7 = *a2;
      v8 = a2[1];
      v9 = a2[2];
      *(_DWORD *)buf = 134349568;
      v14 = v7;
      v15 = 2050;
      v16 = v8;
      v17 = 2050;
      v18 = v9;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_ERROR, "[CMPerceptualFilter] Gravity vector must be unity norm. gravity.x,%{public}f,.y,%{public}f,.z,%{public}f", buf, 0x20u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953728);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CMAudioPerceptualFilter::feedGravity(const CMVector3d &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
}

void sub_18F40DCA4(uint64_t a1, float *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  NSObject *v13;
  float v14;
  float v15;
  float v16;
  float32x4_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  float v20;
  float v21;
  float32x4_t v22;
  NSObject *v23;
  unsigned int v24;
  unsigned int v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  NSObject *v34;
  float32x4_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  float32x4_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  NSObject *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  char *v53;
  uint64_t v54;
  int v55;
  float v56;
  NSObject *v57;
  float v58;
  float v59;
  float v60;
  NSObject *v61;
  double v62;
  double v63;
  float v64;
  float v65;
  float v66;
  NSObject *v67;
  uint64_t v68;
  int v69;
  int v70;
  NSObject *v71;
  float v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  float v77;
  NSObject *v78;
  char *v79;
  char *v80;
  double v81;
  int v82;
  int v83;
  char *v84;
  double v85;
  double v86;
  char *v87;
  char *v88;
  float32x4_t v89;
  float32x2_t v90;
  float v91;
  float32x4_t v92;
  __int128 v93;
  __int16 v94;
  float32x4_t v95;
  float v96[3];
  float v97;
  float v98;
  float v99;
  __int16 v100;
  int v101;
  double v102;
  __int16 v103;
  double v104;
  __int16 v105;
  double v106;
  __int16 v107;
  double v108;
  __int16 v109;
  double v110;
  __int16 v111;
  double v112;
  __int16 v113;
  double v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;
  _BYTE buf[22];
  __int16 v120;
  double v121;
  __int16 v122;
  double v123;
  __int16 v124;
  double v125;
  __int16 v126;
  double v127;
  __int16 v128;
  double v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v6 = *(_OWORD *)(a1 + 16);
  v92 = *(float32x4_t *)a1;
  v93 = v6;
  v94 = *(_WORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  v7 = sub_18F3D39F4((float *)(a1 + 68), *a2, a2[1], a2[2]);
  v10 = 0;
  v11 = 0.0;
  do
  {
    v11 = v11 + (float)(a2[v10] * a2[v10]);
    ++v10;
  }
  while (v10 != 3);
  v12 = sqrtf(v11);
  if (v12 < 0.001)
  {
    if (*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a1 + 100) = 0;
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953728);
      v13 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_ERROR, "Error -- cannot set listener orientation using boresight vector at 0 distance.", buf, 2u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953728);
        LOWORD(v101) = 0;
        v80 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "void CMAudioPerceptualFilter::feed(const CMVector3d &, uint64_t, uint64_t)", "CoreLocation: %s\n", v80);
        if (v80 != buf)
          free(v80);
      }
    }
    sub_18F3F6564(a1, 0);
    return;
  }
  *(_BYTE *)(a1 + 100) = 1;
  v14 = v7 / v12;
  v15 = v8 / v12;
  v90.f32[0] = v7 / v12;
  v90.f32[1] = v8 / v12;
  v16 = v9 / v12;
  v91 = v9 / v12;
  if (*(_BYTE *)(a1 + 84))
  {
    sub_18F40F090((float32x4_t *)buf, (float *)&v90);
    if (*(_BYTE *)(a1 + 172))
    {
      v17 = *(float32x4_t *)buf;
      v89 = *(float32x4_t *)buf;
    }
    else
    {
      v95.i32[0] = sub_18F3D39F4((float *)buf, *(float *)(a1 + 52), *(float *)(a1 + 56), *(float *)(a1 + 60));
      *(uint64_t *)((char *)v95.i64 + 4) = __PAIR64__(v25, v24);
      v26 = *(float *)(a1 + 40);
      v27 = *(float *)(a1 + 44);
      v28 = *(float *)(a1 + 48);
      v29 = (float)((float)(v28 * v16) + (float)(v27 * v15)) + (float)(v26 * v14);
      v97 = v26 - (float)(v14 * v29);
      v98 = v27 - (float)(v15 * v29);
      v99 = v28 - (float)(v16 * v29);
      sub_18F40F224((float32x4_t *)&v101, a1, &v97, v95.f32, &v90);
      *(double *)v17.i64 = sub_18F3D3764((uint64_t)&v101, (float *)buf, &v89, v30);
    }
    goto LABEL_33;
  }
  sub_18F40F090((float32x4_t *)&v101, (float *)&v90);
  v18 = atomic_load((unsigned __int8 *)&qword_1ECEDF920);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF920))
  {
    qword_1ECEDF940 = 0x3F80000000000000;
    dword_1ECEDF948 = 0;
    __cxa_guard_release(&qword_1ECEDF920);
  }
  v19 = atomic_load((unsigned __int8 *)&qword_1ECEDF928);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF928))
  {
    qword_1ECEDF950 = 0;
    dword_1ECEDF958 = 1065353216;
    __cxa_guard_release(&qword_1ECEDF928);
  }
  v97 = sub_18F3D39F4((float *)&v101, *(float *)&qword_1ECEDF940, *((float *)&qword_1ECEDF940 + 1), *(float *)&dword_1ECEDF948);
  v98 = v20;
  v99 = v21;
  v96[0] = (float)(*((float *)&qword_1ECEDF950 + 1) * v91) - (float)(*(float *)&dword_1ECEDF958 * v90.f32[1]);
  v96[1] = (float)(*(float *)&dword_1ECEDF958 * v90.f32[0]) - (float)(*(float *)&qword_1ECEDF950 * v91);
  v96[2] = (float)(*(float *)&qword_1ECEDF950 * v90.f32[1]) - (float)(*((float *)&qword_1ECEDF950 + 1) * v90.f32[0]);
  sub_18F40F224(&v95, a1, v96, &v97, &v90);
  *(double *)v17.i64 = sub_18F3D3764((uint64_t)&v95, (float *)&v101, &v89, v22);
  if (*(_BYTE *)(a1 + 84))
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953728);
    v23 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v23, OS_LOG_TYPE_ERROR, "[PerceptualFilter] already initialized, should not be calling initializeAmbienceBedGravity", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
      goto LABEL_33;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 == -1)
      goto LABEL_125;
LABEL_140:
    dispatch_once(&qword_1EE16D818, &unk_1E2953728);
LABEL_125:
    v100 = 0;
    v79 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "void CMAudioPerceptualFilter::initializeAmbienceBedGravity(const CMOQuaternion &)", "CoreLocation: %s\n", v79);
LABEL_126:
    if (v79 != buf)
      free(v79);
    goto LABEL_33;
  }
  v31 = 0;
  v32 = a1 + 52;
  v33 = 0.0;
  do
  {
    v33 = v33 + (float)(*(float *)(v32 + v31) * *(float *)(v32 + v31));
    v31 += 4;
  }
  while (v31 != 12);
  if (sqrtf(v33) != 0.0)
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953728);
    v34 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v34, OS_LOG_TYPE_ERROR, "[PerceptualFilter] fAmbienceBedGravity has already been set, cannot re-initialize ambience bed gravity direction.", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
      goto LABEL_33;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 == -1)
      goto LABEL_125;
    goto LABEL_140;
  }
  v54 = 0;
  v55 = *(_DWORD *)(a1 + 168);
  v56 = 0.0;
  do
  {
    v56 = v56 + (float)(*(float *)(a1 + 40 + v54) * *(float *)(a1 + 40 + v54));
    v54 += 4;
  }
  while (v54 != 12);
  if (sqrtf(v56) < 0.000001)
  {
    *(_DWORD *)(a1 + 168) = 0;
    if (!v55)
      goto LABEL_33;
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953728);
    v57 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v57, OS_LOG_TYPE_ERROR, "[PerceptualFilter] Accessory gravity has not been set.", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
      goto LABEL_33;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 == -1)
      goto LABEL_125;
    goto LABEL_140;
  }
  *(_DWORD *)(a1 + 168) = 1;
  if (v55 != 1)
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953728);
    v71 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v71, OS_LOG_TYPE_DEFAULT, "[PerceptualFilter] Accessory gravity is available", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953728);
      v100 = 0;
      v88 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMAudioPerceptualFilter::initializeAmbienceBedGravity(const CMOQuaternion &)", "CoreLocation: %s\n", v88);
      if (v88 != buf)
        free(v88);
    }
  }
  v17.f32[0] = -v89.f32[2];
  *(float32x2_t *)buf = vneg_f32(*(float32x2_t *)v89.f32);
  *(float *)&buf[8] = -v89.f32[2];
  *(_DWORD *)&buf[12] = v89.i32[3];
  sub_18F1FFE94((float32x4_t *)buf, v17);
  sub_18F3D39F4((float *)buf, *(float *)(a1 + 40), *(float *)(a1 + 44), *(float *)(a1 + 48));
  v74 = 0;
  *(float *)(a1 + 56) = v72;
  *(float *)(a1 + 60) = v73;
  v17.i32[0] = 0;
  *(_DWORD *)(a1 + 52) = 0;
  do
  {
    v17.f32[0] = v17.f32[0] + (float)(*(float *)(v32 + v74) * *(float *)(v32 + v74));
    v74 += 4;
  }
  while (v74 != 12);
  if (sqrtf(v17.f32[0]) >= 0.087156)
  {
    v75 = 0;
    v76 = 0.0;
    do
    {
      v76 = v76 + (float)(*(float *)(v32 + v75) * *(float *)(v32 + v75));
      v75 += 4;
    }
    while (v75 != 12);
    v77 = sqrtf(v76);
    *(float *)(a1 + 52) = 0.0 / v77;
    *(float *)(a1 + 56) = v72 / v77;
    *(float *)(a1 + 60) = v73 / v77;
    *(_BYTE *)(a1 + 84) = 1;
    if (*(_BYTE *)(a1 + 92))
      goto LABEL_33;
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953728);
    v78 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v78, OS_LOG_TYPE_DEFAULT, "[PerceptualFilter] Initialized ambience bed orientation with fixed gravity direction", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 2))
      goto LABEL_33;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953728);
    v100 = 0;
    v79 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMAudioPerceptualFilter::initializeAmbienceBedGravity(const CMOQuaternion &)", "CoreLocation: %s\n", v79);
    goto LABEL_126;
  }
  *(_QWORD *)(a1 + 56) = 0;
LABEL_33:
  v17.f32[0] = -v92.f32[2];
  *(float32x2_t *)buf = vneg_f32(*(float32x2_t *)v92.f32);
  *(float *)&buf[8] = -v92.f32[2];
  *(_DWORD *)&buf[12] = v92.i32[3];
  v35 = sub_18F1FFE94((float32x4_t *)buf, v17);
  sub_18F3D3764((uint64_t)&v89, (float *)buf, &v95, v35);
  v36 = sub_18F3D3B4C(&v95);
  v38 = v37;
  v40 = v39;
  v41 = 0;
  v97 = v36;
  v98 = v37;
  v99 = v39;
  v42.i32[0] = 0;
  do
  {
    v42.f32[0] = v42.f32[0] + (float)(*(float *)((char *)&v97 + v41) * *(float *)((char *)&v97 + v41));
    v41 += 4;
  }
  while (v41 != 12);
  v43 = sqrtf(v42.f32[0]);
  if ((_BYTE)v94)
  {
    v42.i64[0] = 0x3FA65718498ADC00;
    if (v43 > 0.017453 && (*(_BYTE *)(a1 + 92) || *(_BYTE *)(a1 + 94)))
    {
      if (*(unsigned __int8 *)(a1 + 92) == *(unsigned __int8 *)(a1 + 93))
      {
        if (*(_BYTE *)(a1 + 94))
        {
          if (*(_BYTE *)(a1 + 95))
          {
            v44 = *(float *)(a1 + 164);
          }
          else
          {
            *(_DWORD *)(a1 + 164) = 0;
            v44 = 0.0;
          }
          if (v43 > v44)
          {
            sub_18F40EF50(a1 + 104, v43);
            v58 = 0.1;
            if (v59 >= 0.1)
            {
              sub_18F40EF50(a1 + 104, v43);
              v58 = v60;
            }
            *(float *)(a1 + 96) = v43 / v58;
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2953728);
            v61 = qword_1EE16D820;
            if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
            {
              v62 = *(float *)(a1 + 96);
              v63 = *(float *)(a1 + 160);
              *(_DWORD *)buf = 134218752;
              *(double *)&buf[4] = v43;
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = v58;
              v120 = 2048;
              v121 = v62;
              v122 = 2048;
              v123 = v63;
              _os_log_impl(&dword_18F1DC000, v61, OS_LOG_TYPE_DEFAULT, "[PerceptualFilterAnchor] thetaNormRad %.3f, sweepDurationS, %.3f, fPerceptualAngularVelocityRps, %.3f, fLastAuxYawRateRps, %.3f", buf, 0x2Au);
            }
            if (sub_18F1FCA08(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE16D818 != -1)
                dispatch_once(&qword_1EE16D818, &unk_1E2953728);
              v85 = *(float *)(a1 + 96);
              v86 = *(float *)(a1 + 160);
              v101 = 134218752;
              v102 = v43;
              v103 = 2048;
              v104 = v58;
              v105 = 2048;
              v106 = v85;
              v107 = 2048;
              v108 = v86;
              v87 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 2, "void CMAudioPerceptualFilter::feed(const CMVector3d &, uint64_t, uint64_t)", "CoreLocation: %s\n", v87);
              if (v87 != buf)
                free(v87);
            }
            *(float *)(a1 + 164) = v43;
          }
        }
      }
      else
      {
        sub_18F40EF50(a1 + 104, v43);
        v46 = v45;
        v47 = 0.1;
        if (v46 >= 0.1)
          sub_18F40EF50(a1 + 104, v43);
        *(float *)(a1 + 96) = v43 / v47;
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953728);
        v48 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
        {
          v49 = *(float *)(a1 + 96);
          v50 = *(float *)(a1 + 160);
          *(_DWORD *)buf = 134218496;
          *(double *)&buf[4] = v43;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v49;
          v120 = 2048;
          v121 = v50;
          _os_log_impl(&dword_18F1DC000, v48, OS_LOG_TYPE_DEFAULT, "[PerceptualFilterBTZ] thetaNormRad %.3f, fPerceptualAngularVelocityRps, %.3f, fLastAuxYawRateRps, %.3f", buf, 0x20u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953728);
          v51 = *(float *)(a1 + 96);
          v52 = *(float *)(a1 + 160);
          v101 = 134218496;
          v102 = v43;
          v103 = 2048;
          v104 = v51;
          v105 = 2048;
          v106 = v52;
          v53 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "void CMAudioPerceptualFilter::feed(const CMVector3d &, uint64_t, uint64_t)", "CoreLocation: %s\n", v53);
          if (v53 != buf)
            free(v53);
        }
      }
      v64 = *(float *)(a1 + 96);
      if (v64 <= *(float *)(a1 + 160))
        v64 = *(float *)(a1 + 160);
      *(double *)v42.i64 = v64 * 0.00499999989;
    }
    if (v43 >= 0.000001)
    {
      if (*(double *)v42.i64 <= v43)
      {
        v65 = *(double *)v42.i64;
        v66 = v65;
      }
      else
      {
        v66 = v43;
      }
      *(float *)buf = (float)(v36 * v66) / v43;
      *(float *)&buf[4] = (float)(v38 * v66) / v43;
      *(float *)&buf[8] = (float)(v40 * v66) / v43;
      *(double *)v42.i64 = sub_18F3D3AA8(&v95, (float *)buf);
    }
    else
    {
      v95.i64[0] = 0;
      v95.i64[1] = 0x3F80000000000000;
    }
    sub_18F3D3764((uint64_t)&v95, v92.f32, (float32x4_t *)buf, v42);
    *(_OWORD *)a1 = *(_OWORD *)buf;
    if (v43 >= 0.017453)
    {
      if (*(_BYTE *)(a1 + 92) || *(_BYTE *)(a1 + 94))
      {
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953728);
        v67 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
        {
          v68 = *(_QWORD *)(a1 + 16);
          v69 = *(unsigned __int8 *)(a1 + 92);
          v70 = *(unsigned __int8 *)(a1 + 94);
          *(_DWORD *)buf = 134220032;
          *(_QWORD *)&buf[4] = v68;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v93;
          v120 = 2048;
          v121 = v95.f32[0];
          v122 = 2048;
          v123 = v95.f32[1];
          v124 = 2048;
          v125 = v95.f32[2];
          v126 = 2048;
          v127 = v95.f32[3];
          v128 = 2048;
          v129 = v43;
          v130 = 1024;
          v131 = v69;
          v132 = 1024;
          v133 = v70;
          _os_log_impl(&dword_18F1DC000, v67, OS_LOG_TYPE_DEBUG, "[PerceptualFilter] currTimestamp %llu, prevTimestamp, %llu, dq [%.3f, %.3f, %.3f, %.3f], dthetaNorm, %.3f, inBTZ, %d, inAnchorConvergence, %d", buf, 0x54u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953728);
          v81 = *(double *)(a1 + 16);
          v82 = *(unsigned __int8 *)(a1 + 92);
          v83 = *(unsigned __int8 *)(a1 + 94);
          v101 = 134220032;
          v102 = v81;
          v103 = 2048;
          v104 = *(double *)&v93;
          v105 = 2048;
          v106 = v95.f32[0];
          v107 = 2048;
          v108 = v95.f32[1];
          v109 = 2048;
          v110 = v95.f32[2];
          v111 = 2048;
          v112 = v95.f32[3];
          v113 = 2048;
          v114 = v43;
          v115 = 1024;
          v116 = v82;
          v117 = 1024;
          v118 = v83;
          v84 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "void CMAudioPerceptualFilter::feed(const CMVector3d &, uint64_t, uint64_t)", "CoreLocation: %s\n", v84);
          if (v84 != buf)
            free(v84);
        }
      }
    }
    else
    {
      *(_BYTE *)(a1 + 92) = 0;
      *(_BYTE *)(a1 + 94) = 0;
    }
  }
  else
  {
    *(float32x4_t *)a1 = v89;
    *(_BYTE *)(a1 + 92) = 0;
  }
  *(_BYTE *)(a1 + 32) = 1;
  *(_BYTE *)(a1 + 33) = v43 >= 0.0017453;
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a1 + 92);
  *(_BYTE *)(a1 + 95) = *(_BYTE *)(a1 + 94);
}

void sub_18F40EF50(uint64_t a1, float a2)
{
  uint64_t v4;
  unint64_t v5;
  float v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 20))
  {
    if (*(float *)a1 <= a2 && *(float *)(a1 + 4) >= a2)
    {
      v4 = a1 + 24;
      if (*(float *)(a1 + 24) <= a2)
      {
        v5 = -1;
        while (v5 != 2)
        {
          v6 = sub_18F33ECEC(a1 + 24, v5 + 2);
          ++v5;
          if (v6 > a2)
          {
            v7 = a1 + 40;
            sub_18F33ECEC(v7, v5 + 1);
            sub_18F33ECEC(v7, v5);
            sub_18F33ECEC(v4, v5 + 1);
            sub_18F33ECEC(v4, v5);
            sub_18F33ECEC(v4, v5);
            sub_18F33ECEC(v7, v5);
            return;
          }
        }
      }
    }
  }
}

void sub_18F40F090(float32x4_t *a1, float *a2)
{
  unsigned __int8 v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float *v18;
  int v19;
  float v20[3];
  uint64_t v21;
  float v22;

  v3 = atomic_load((unsigned __int8 *)&qword_1ECEDF918);
  if ((v3 & 1) == 0)
  {
    v18 = a2;
    v19 = __cxa_guard_acquire(&qword_1ECEDF918);
    a2 = v18;
    if (v19)
    {
      qword_1ECEDF930 = 1065353216;
      dword_1ECEDF938 = 0;
      __cxa_guard_release(&qword_1ECEDF918);
      a2 = v18;
    }
  }
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = (float)((float)(v6 * *(float *)&dword_1ECEDF938) + (float)(v5 * *((float *)&qword_1ECEDF930 + 1)))
     + (float)(*a2 * *(float *)&qword_1ECEDF930);
  v8 = 1.0;
  if (v7 < 1.0)
  {
    v8 = -1.0;
    if (v7 > -1.0)
      v8 = (float)((float)(v6 * *(float *)&dword_1ECEDF938) + (float)(v5 * *((float *)&qword_1ECEDF930 + 1)))
         + (float)(*a2 * *(float *)&qword_1ECEDF930);
  }
  v9 = 0;
  v10 = (float)(v5 * *(float *)&dword_1ECEDF938) - (float)(v6 * *((float *)&qword_1ECEDF930 + 1));
  v11 = (float)(v6 * *(float *)&qword_1ECEDF930) - (float)(v4 * *(float *)&dword_1ECEDF938);
  v12 = (float)(v4 * *((float *)&qword_1ECEDF930 + 1)) - (float)(v5 * *(float *)&qword_1ECEDF930);
  *(float *)&v21 = v10;
  *((float *)&v21 + 1) = v11;
  v22 = v12;
  v13 = 0.0;
  do
  {
    v13 = v13 + (float)(*(float *)((char *)&v21 + v9) * *(float *)((char *)&v21 + v9));
    v9 += 4;
  }
  while (v9 != 12);
  if (sqrtf(v13) < 0.000001)
  {
    v21 = 0x3F80000000000000;
    v22 = 0.0;
    v11 = 1.0;
    v12 = 0.0;
    v10 = 0.0;
  }
  v14 = 0;
  v15 = 0.0;
  do
  {
    v15 = v15 + (float)(*(float *)((char *)&v21 + v14) * *(float *)((char *)&v21 + v14));
    v14 += 4;
  }
  while (v14 != 12);
  v16 = acosf(v8);
  v17 = sqrtf(v15);
  v20[0] = (float)(v10 / v17) * v16;
  v20[1] = (float)(v11 / v17) * v16;
  v20[2] = (float)(v12 / v17) * v16;
  sub_18F3D3AA8(a1, v20);
}

void sub_18F40F224(float32x4_t *a1, uint64_t a2, float *a3, float *a4, float32x2_t *a5)
{
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  int v14;
  float v15;
  _BOOL4 v16;
  uint64_t v17;
  float v18;
  double v19;
  NSObject *v20;
  char v21;
  NSObject *v22;
  float *v23;
  float v24;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  NSObject *v41;
  float v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  uint64_t v58;
  float v59;
  float v60;
  char *v61;
  char *v62;
  float v63[3];
  float32x2_t v64;
  float v65;
  uint8_t buf[8];
  float v67;
  uint64_t v68;

  v10 = 0;
  v68 = *MEMORY[0x1E0C80C00];
  v11 = a5->f32[1];
  v12 = a5[1].f32[0];
  v13 = (float)((float)(v12 * a4[2]) + (float)(a4[1] * v11)) + (float)(*a4 * a5->f32[0]);
  v14 = *(unsigned __int8 *)(a2 + 64);
  v15 = 0.0;
  do
  {
    v15 = v15 + (float)(a3[v10] * a3[v10]);
    ++v10;
  }
  while (v10 != 3);
  if (sqrtf(v15) >= 0.087156)
  {
    v17 = 0;
    v18 = 0.0;
    do
    {
      v18 = v18 + (float)(a4[v17] * a4[v17]);
      ++v17;
    }
    while (v17 != 3);
    v16 = sqrtf(v18) < 0.087156;
  }
  else
  {
    v16 = 1;
  }
  v19 = (float)((float)((float)(a3[2] * v12) + (float)(a3[1] * v11)) + (float)(*a3 * a5->f32[0]));
  *(_BYTE *)(a2 + 64) = v16;
  if (v14 || !v16)
  {
    if (v14)
      v21 = v16;
    else
      v21 = 1;
    if ((v21 & 1) == 0)
    {
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953728);
      v22 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v22, OS_LOG_TYPE_DEFAULT, "[PerceptualFilter] Exiting ambience bed constraints singularity", buf, 2u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953728);
        v64.i16[0] = 0;
        goto LABEL_64;
      }
    }
  }
  else
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953728);
    v20 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_DEFAULT, "[PerceptualFilter] Entering ambience bed constraints singularity", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953728);
      v64.i16[0] = 0;
LABEL_64:
      v62 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "CMOQuaternion CMAudioPerceptualFilter::rollAboutBoresightToAlignVectors(const CMVector3d &, const CMVector3d &, const CMVector3d &)", "CoreLocation: %s\n", v62);
      if (v62 != (char *)buf)
        free(v62);
    }
  }
  if (v19 >= 0.001 || v13 >= 0.001)
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953728);
    v41 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v41, OS_LOG_TYPE_ERROR, "[PerceptualFilter] Vectors to align are not perpendicular to boresight vector", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953728);
      v64.i16[0] = 0;
      v61 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "CMOQuaternion CMAudioPerceptualFilter::rollAboutBoresightToAlignVectors(const CMVector3d &, const CMVector3d &, const CMVector3d &)", "CoreLocation: %s\n", v61);
      if (v61 != (char *)buf)
        free(v61);
    }
    v42 = *(float *)(a2 + 88);
    v23 = (float *)(a2 + 88);
    v25 = v42;
    *(float32x2_t *)buf = *a5;
    v67 = a5[1].f32[0];
  }
  else
  {
    v24 = *(float *)(a2 + 88);
    v23 = (float *)(a2 + 88);
    v25 = v24;
    *(float32x2_t *)buf = *a5;
    v67 = a5[1].f32[0];
    if (!*((_BYTE *)v23 - 24))
    {
      v26 = 0;
      v27 = 0.0;
      do
      {
        v27 = v27 + (float)(a3[v26] * a3[v26]);
        ++v26;
      }
      while (v26 != 3);
      v28 = 0;
      v29 = 0.0;
      do
      {
        v29 = v29 + (float)(a4[v28] * a4[v28]);
        ++v28;
      }
      while (v28 != 3);
      v30 = sqrtf(v27);
      v31 = a3[1] / v30;
      v32 = *a3 / v30;
      v33 = a3[2] / v30;
      v34 = sqrtf(v29);
      v35 = a4[1] / v34;
      v36 = a4[2] / v34;
      v37 = (float)(v33 * v36) + (float)(v31 * v35);
      v38 = *a4 / v34;
      v39 = v37 + (float)(v32 * v38);
      v40 = 1.0;
      if (v39 < 1.0)
      {
        v40 = -1.0;
        if (v39 > -1.0)
          v40 = v37 + (float)(v32 * v38);
      }
      v25 = acosf(v40);
      *(float *)buf = (float)(v31 * v36) - (float)(v33 * v35);
      *(float *)&buf[4] = (float)(v33 * v38) - (float)(v32 * v36);
      v67 = (float)(v32 * v35) - (float)(v31 * v38);
    }
  }
  v43 = 0;
  v44 = 0.0;
  do
  {
    v44 = v44 + (float)(*(float *)&buf[v43] * *(float *)&buf[v43]);
    v43 += 4;
  }
  while (v43 != 12);
  v45 = sqrtf(v44);
  v46 = 0.0;
  if (v45 >= 0.000001)
  {
    v47 = 0;
    v48 = 0.0;
    do
    {
      v48 = v48 + (float)(*(float *)&buf[v47] * *(float *)&buf[v47]);
      v47 += 4;
    }
    while (v47 != 12);
    v49 = 0;
    v50 = sqrtf(v48);
    v51 = *(float *)buf / v50;
    v52 = *(float *)&buf[4] / v50;
    v53 = v67 / v50;
    v54 = a5->f32[0];
    v55 = a5->f32[1];
    v56 = a5[1].f32[0];
    v64.f32[0] = (float)-(float)(*(float *)buf / v50) - a5->f32[0];
    v64.f32[1] = (float)-(float)(*(float *)&buf[4] / v50) - v55;
    v65 = (float)-(float)(v67 / v50) - v56;
    v57 = 0.0;
    do
    {
      v57 = v57 + (float)(v64.f32[v49] * v64.f32[v49]);
      ++v49;
    }
    while (v49 != 3);
    v58 = 0;
    v63[0] = v51 - v54;
    v63[1] = v52 - v55;
    v63[2] = v53 - v56;
    v59 = 0.0;
    do
    {
      v59 = v59 + (float)(v63[v58] * v63[v58]);
      ++v58;
    }
    while (v58 != 3);
    if (sqrtf(v57) >= sqrtf(v59))
      v46 = v25;
    else
      v46 = -v25;
  }
  *v23 = v46;
  v60 = v46 * a5[1].f32[0];
  v64 = vmul_n_f32(*a5, v46);
  v65 = v60;
  sub_18F3D3AA8(a1, (float *)&v64);
}

void sub_18F40F8EC(uint64_t a1)
{
  NSObject *v1;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 172) = 1;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953728);
  v1 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v1, OS_LOG_TYPE_DEFAULT, "[PerceptualFilter] Bypassing ambience bed alignment. This should only be used for E2E latency testing.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953728);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMAudioPerceptualFilter::enableBypassAmbienceBedForE2ELatencyTesting()", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
}

os_log_t sub_18F40FA78()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1EE16D820 = (uint64_t)result;
  return result;
}

uint64_t sub_18F40FAA4(uint64_t a1, float a2, float a3, float a4, float a5, float a6)
{
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  int v13;
  float v14;

  v7 = 0;
  *(float *)a1 = a2;
  *(float *)(a1 + 4) = a3;
  *(float *)(a1 + 8) = a4;
  *(float *)(a1 + 12) = a5;
  *(float *)(a1 + 16) = a6;
  v8 = (float)(a2 + 0.000001) <= a3;
  if (a5 < a4)
    v8 = 0;
  *(_BYTE *)(a1 + 20) = v8;
  v9 = a1 + 24;
  v10 = a1 + 40;
  v11 = (float)(a3 - a2) * 0.25;
  if (v11 >= 0.000001)
    v12 = v11;
  else
    v12 = 0.000001;
  do
  {
    v13 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)sub_18F40FB5C(v10, v7) = v13;
    v14 = *(float *)a1 + (float)((float)(int)v7 * v12);
    *(float *)sub_18F40FB5C(v9, v7++) = v14;
  }
  while (v7 != 4);
  return a1;
}

uint64_t sub_18F40FB5C(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2 >= 4)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954D48);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v8 = a2;
      v9 = 2048;
      v10 = 4;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMVector.h, line 277,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954D48);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T &CMVector<float, 4>::operator[](const size_t) [T = float, N = 4]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return a1 + 4 * a2;
}

uint64_t sub_18F40FD34(uint64_t a1, double a2)
{
  NSObject *v4;
  NSObject *v5;
  char *v7;
  char *v8;
  uint8_t buf[4];
  double v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *(double *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0x1000000000;
  *(_QWORD *)(a1 + 144) = 0x1000000000;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953748);
  v4 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    v10 = a2;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_INFO, "[CMResampleIMUData] Constructed CMResampleIMUData. Set output sample period to: %.4f s", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953748);
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CMResampleIMUData::CMResampleIMUData(const double)", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  if (a2 < 0.005 || a2 > 0.05)
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953748);
    v5 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v10 = a2;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_ERROR, "[CMResampleIMUData] Invalid output sample period: %.4f s", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953748);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "CMResampleIMUData::CMResampleIMUData(const double)", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  return a1;
}

uint64_t sub_18F410060(uint64_t a1, _BYTE *a2, unint64_t a3)
{
  uint64_t result;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  unsigned __int16 *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int16 *v46;
  __int128 v47;
  double v48;
  _DWORD *v50;
  unint64_t v51;
  unint64_t v52;
  _DWORD *v53;
  float v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  NSObject *v64;
  char *v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  _BYTE v69[22];
  __int16 v70;
  uint64_t v71;
  _BYTE buf[32];
  float32x4_t v73;
  unint64_t v74;
  __int128 v75;
  uint64_t v76;

  result = 0;
  v76 = *MEMORY[0x1E0C80C00];
  v5 = *(double *)a1;
  if (*(double *)a1 >= 0.005 && v5 <= 0.05)
  {
    v6 = (uint64_t)a2;
    v7 = (double)a3 * 0.000001;
    if (!*(_WORD *)(a1 + 10))
    {
      v16 = *(unsigned __int16 *)(a1 + 8);
      v17 = *(unsigned int *)(a1 + 12);
      if (v16 >= v17)
        v18 = *(unsigned int *)(a1 + 12);
      else
        v18 = 0;
      *(double *)(a1 + 8 + 8 * (v16 - v18) + 8) = v7;
      if ((_DWORD)v17)
        *(_WORD *)(a1 + 10) = 1;
      else
        *(_WORD *)(a1 + 8) = v16 + 1;
      v15 = (unsigned __int16 *)(a1 + 144);
      goto LABEL_45;
    }
    v8 = a1 + 16;
    v9 = *(unsigned __int16 *)(a1 + 8);
    v10 = *(unsigned __int16 *)(a1 + 10) + v9 - 1;
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 >= v11)
      v12 = *(unsigned int *)(a1 + 12);
    else
      v12 = 0;
    v13 = *(double *)(v8 + 8 * (v10 - v12));
    if (v7 > v13)
    {
      v14 = *(double *)(v8 + 8 * v9);
      if (v7 - v14 > 0.1)
      {
        *(_DWORD *)(a1 + 144) = 0;
        v15 = (unsigned __int16 *)(a1 + 144);
        *(_DWORD *)(a1 + 8) = 0;
        *(double *)(a1 + 16) = v7;
        if ((_DWORD)v11)
          *(_WORD *)(a1 + 10) = 1;
        else
          *(_WORD *)(a1 + 8) = 1;
LABEL_45:
        sub_18F41089C(v15, (uint64_t)a2);
        return 1;
      }
      if (v7 - v14 >= v5)
      {
        v42 = v5 + v14;
        v43 = v5 + v14 - v13;
        if (v43 >= 0.001)
        {
          v48 = v43 / (v7 - v13);
          if (v48 < 0.0 || v48 > 1.0)
          {
            if (qword_1ECEDEE88 != -1)
              dispatch_once(&qword_1ECEDEE88, &unk_1E2954968);
            v64 = off_1ECEDEE80;
            if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F1DC000, v64, OS_LOG_TYPE_FAULT, "Assertion failed: interpolationRatio >= 0 && interpolationRatio <= 1, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Shared/Motion/DeviceMotion/RelativeDeviceMotion/CMResampleIMUData.cpp, line 157,Invalid interpolationRatio..", buf, 2u);
            }
            if (sub_18F1FCA08(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1ECEDEE88 != -1)
                dispatch_once(&qword_1ECEDEE88, &unk_1E2954968);
              *(_WORD *)v69 = 0;
              v65 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 0, "void CMResampleIMUData::interpolate(const CMRelDM::IMUData &, double)", "CoreLocation: %s\n", v65);
              if (v65 != buf)
                free(v65);
            }
          }
          v50 = (_DWORD *)(a1 + 144);
          v51 = *(unsigned __int16 *)(a1 + 144) + (unint64_t)*(unsigned __int16 *)(a1 + 146) - 1;
          v52 = *(unsigned int *)(a1 + 148);
          if (v51 < v52)
            v52 = 0;
          v53 = &v50[18 * (v51 - v52)];
          v54 = v48;
          v55 = *(_DWORD *)(v6 + 48);
          *(float *)&v56 = *((float *)v53 + 15) + (float)(*(float *)(v6 + 52) - *((float *)v53 + 15)) * v48;
          v67 = vaddq_f32(*(float32x4_t *)(v53 + 6), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v6 + 16), *(float32x4_t *)(v53 + 6)), v54));
          v68 = vaddq_f32(*(float32x4_t *)(v53 + 2), vmulq_n_f32(vsubq_f32(*(float32x4_t *)v6, *(float32x4_t *)(v53 + 2)), v54));
          v66 = vaddq_f32(*(float32x4_t *)(v53 + 10), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v6 + 32), *(float32x4_t *)(v53 + 10)), v54));
          sub_18F3D4DE4((float32x4_t *)v53 + 4, (float32x4_t *)(v6 + 56), (float32x4_t *)v69, v54);
          *(float32x4_t *)buf = v68;
          *(float32x4_t *)&buf[16] = v67;
          v73 = v66;
          v74 = __PAIR64__(v56, v55);
          v75 = *(_OWORD *)v69;
          *(_DWORD *)(a1 + 8) = 0;
          *v50 = 0;
          v57 = *(_DWORD *)(a1 + 12);
          *(double *)(a1 + 16) = v42;
          if (v57)
            *(_WORD *)(a1 + 10) = 1;
          else
            *(_WORD *)(a1 + 8) = 1;
          a2 = buf;
          v15 = (unsigned __int16 *)(a1 + 144);
        }
        else
        {
          v15 = (unsigned __int16 *)(a1 + 144);
          v44 = *(unsigned __int16 *)(a1 + 144) + (unint64_t)*(unsigned __int16 *)(a1 + 146) - 1;
          v45 = *(unsigned int *)(a1 + 148);
          if (v44 < v45)
            v45 = 0;
          v46 = &v15[36 * (v44 - v45)];
          v47 = *(_OWORD *)(v46 + 12);
          *(_OWORD *)buf = *(_OWORD *)(v46 + 4);
          *(_OWORD *)&buf[16] = v47;
          v73 = *(float32x4_t *)(v46 + 20);
          v74 = *((_QWORD *)v46 + 7);
          v75 = *((_OWORD *)v46 + 4);
          *(_DWORD *)(a1 + 8) = 0;
          *(_DWORD *)v15 = 0;
          *(double *)(a1 + 16) = v13;
          if ((_DWORD)v11)
            *(_WORD *)(a1 + 10) = 1;
          else
            *(_WORD *)(a1 + 8) = 1;
          a2 = buf;
        }
        goto LABEL_45;
      }
      if (*(_DWORD *)(a1 + 148) == *(unsigned __int16 *)(a1 + 146))
      {
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2953748);
        v32 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
        {
          v33 = *(unsigned __int16 *)(a1 + 8);
          v34 = *(_QWORD *)(v8 + 8 * v33);
          v35 = v33 + *(unsigned __int16 *)(a1 + 10) - 1;
          v36 = *(unsigned int *)(a1 + 12);
          if (v35 < v36)
            v36 = 0;
          v37 = *(_QWORD *)(v8 + 8 * (v35 - v36));
          *(_DWORD *)buf = 134218496;
          *(double *)&buf[4] = v7;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v34;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v37;
          _os_log_impl(&dword_18F1DC000, v32, OS_LOG_TYPE_ERROR, "[CMResampleIMUData]:[feedIMUData] Too many consecutive over-closely spaced sampled received. This suggests an input sampling rate anomaly. Input timestamp: %.4f s, First / last timestamp in the buffer : %.4f s / %.4f s . The resampling will still continue but in a non-ideal rate.", buf, 0x20u);
        }
        if (sub_18F1FCA08(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2953748);
          v58 = *(unsigned __int16 *)(a1 + 8);
          v59 = *(_QWORD *)(v8 + 8 * v58);
          v60 = v58 + *(unsigned __int16 *)(a1 + 10) - 1;
          v61 = *(unsigned int *)(a1 + 12);
          if (v60 < v61)
            v61 = 0;
          v62 = *(_QWORD *)(v8 + 8 * (v60 - v61));
          *(_DWORD *)v69 = 134218496;
          *(double *)&v69[4] = v7;
          *(_WORD *)&v69[12] = 2048;
          *(_QWORD *)&v69[14] = v59;
          v70 = 2048;
          v71 = v62;
          v63 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "BOOL CMResampleIMUData::feedIMUData(const CMRelDM::IMUData &, const uint64_t)", "CoreLocation: %s\n", v63);
          if (v63 != buf)
            free(v63);
        }
      }
      v38 = *(unsigned __int16 *)(a1 + 10);
      v39 = *(unsigned int *)(a1 + 12);
      v40 = *(unsigned __int16 *)(a1 + 8);
      if (v40 + v38 >= v39)
        v41 = *(unsigned int *)(a1 + 12);
      else
        v41 = 0;
      *(double *)(v8 + 8 * (v40 + v38 - v41)) = v7;
      if (v39 <= v38)
      {
        if (v40 + 1 < v39)
          LOWORD(v39) = 0;
        *(_WORD *)(a1 + 8) = v40 + 1 - v39;
      }
      else
      {
        *(_WORD *)(a1 + 10) = v38 + 1;
      }
      sub_18F41089C((unsigned __int16 *)(a1 + 144), v6);
      return 0;
    }
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953748);
    v19 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      v20 = *(unsigned __int16 *)(a1 + 8);
      v21 = *(_QWORD *)(v8 + 8 * v20);
      v22 = v20 + *(unsigned __int16 *)(a1 + 10) - 1;
      v23 = *(unsigned int *)(a1 + 12);
      if (v22 < v23)
        v23 = 0;
      v24 = *(_QWORD *)(v8 + 8 * (v22 - v23));
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v21;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v24;
      _os_log_impl(&dword_18F1DC000, v19, OS_LOG_TYPE_ERROR, "[CMResampleIMUData]:[feedIMUData] Invalid backwards or repeated timestamp, rejecting input. Input timestamp: %.4f s, buffer front: %.4f s, buffer back: %.4f s", buf, 0x20u);
    }
    v25 = sub_18F1FCA08(115, 0);
    result = 0;
    if (v25)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953748);
      v26 = *(unsigned __int16 *)(a1 + 8);
      v27 = *(_QWORD *)(v8 + 8 * v26);
      v28 = v26 + *(unsigned __int16 *)(a1 + 10) - 1;
      v29 = *(unsigned int *)(a1 + 12);
      if (v28 < v29)
        v29 = 0;
      v30 = *(_QWORD *)(v8 + 8 * (v28 - v29));
      *(_DWORD *)v69 = 134218496;
      *(double *)&v69[4] = v7;
      *(_WORD *)&v69[12] = 2048;
      *(_QWORD *)&v69[14] = v27;
      v70 = 2048;
      v71 = v30;
      v31 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "BOOL CMResampleIMUData::feedIMUData(const CMRelDM::IMUData &, const uint64_t)", "CoreLocation: %s\n", v31);
      if (v31 != buf)
        free(v31);
      return 0;
    }
  }
  return result;
}

unsigned __int16 *sub_18F41089C(unsigned __int16 *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  v4 = &result[36 * (v3 - v2)];
  v6 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 4) = *(_OWORD *)a2;
  *((_QWORD *)v4 + 7) = v7;
  *(_OWORD *)(v4 + 20) = v5;
  *(_OWORD *)(v4 + 12) = v6;
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a2 + 56);
  v8 = result[1];
  v9 = *((unsigned int *)result + 1);
  if (v9 <= v8)
  {
    v10 = *result + 1;
    if (v10 < v9)
      LOWORD(v9) = 0;
    *result = v10 - v9;
  }
  else
  {
    result[1] = v8 + 1;
  }
  return result;
}

double sub_18F41091C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  NSObject *v6;
  char *v7;
  uint8_t buf[1640];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(_WORD *)(a1 + 10))
  {
    v3 = a1 + 144 + 72 * *(unsigned __int16 *)(a1 + 144);
    v4 = *(_OWORD *)(v3 + 24);
    *(_OWORD *)a2 = *(_OWORD *)(v3 + 8);
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(v3 + 40);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(v3 + 56);
    v5 = *(_OWORD *)(v3 + 64);
    *(_OWORD *)(a2 + 56) = v5;
  }
  else
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953748);
    v6 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_ERROR, "[CMResampleIMUData]:[getResampledIMU] Called getResampledIMU before any valid samples were fed to the resampler. This should not occur under normal conditions. Returning zero-IMU data. This is a serious error, investigate further.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2953748);
      v7 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "CMRelDM::IMUData CMResampleIMUData::getResampledIMU() const", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
    *(_DWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(int32x2_t *)(a2 + 36) = vdup_n_s32(0x3A03126Fu);
    *(_QWORD *)(a2 + 44) = 973279855;
    *(_OWORD *)(a2 + 52) = xmmword_18F507C30;
    *(_DWORD *)(a2 + 68) = 1065353216;
    *(_QWORD *)&v5 = sub_18F1FFE94((float32x4_t *)(a2 + 56), (float32x4_t)xmmword_18F507C30).u64[0];
  }
  return *(double *)&v5;
}

unint64_t sub_18F410B24(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  uint8_t buf[1640];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (*(_WORD *)(a1 + 10))
    return (unint64_t)(*(double *)(a1 + 8 + 8 * *(unsigned __int16 *)(a1 + 8) + 8) * 1000000.0);
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2953748);
  v2 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_ERROR, "[CMResampleIMUData]:[getResampledTimestampMicroSeconds] Called getResampledTimestampMicroSeconds before any valid samples were fed to the resampler. This should not occur under normal conditions. Returning zero-timestamp. This is a serious error, investigate further.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2953748);
    v3 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "uint64_t CMResampleIMUData::getResampledTimestampMicroSeconds() const", "CoreLocation: %s\n", v3);
    if (v3 != (char *)buf)
      free(v3);
  }
  return 0;
}

os_log_t sub_18F410CD4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1EE16D820 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F410E3C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a1[2] = 0;
  a1[3] = 0;
  sub_18F410E98();
  return a1;
}

void sub_18F410E84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18F2A8438(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F410E98()
{
  CFRunLoopRef Current;
  uint64_t result;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t buf[4];
  int v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  result = sub_18F204AE4();
  if (Current != *(CFRunLoopRef *)qword_1ECEDFE08)
  {
    if (qword_1EE16D430 != -1)
      dispatch_once(&qword_1EE16D430, &unk_1E2953768);
    v2 = qword_1EE16D420;
    if (os_log_type_enabled((os_log_t)qword_1EE16D420, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      v9 = 2082;
      v10 = "assert";
      v11 = 2081;
      v12 = "runningOnMotionThread";
      _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLSPUHIDDriverInterface calls must be made on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EE16D430 != -1)
        dispatch_once(&qword_1EE16D430, &unk_1E2953768);
    }
    v3 = qword_1EE16D420;
    if (os_signpost_enabled((os_log_t)qword_1EE16D420))
    {
      *(_DWORD *)buf = 68289539;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      v9 = 2082;
      v10 = "assert";
      v11 = 2081;
      v12 = "runningOnMotionThread";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLSPUHIDDriverInterface calls must be made on motion thread", "{\"msg%{public}.0s\":\"CLSPUHIDDriverInterface calls must be made on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EE16D430 != -1)
        dispatch_once(&qword_1EE16D430, &unk_1E2953768);
    }
    v4 = qword_1EE16D420;
    if (os_log_type_enabled((os_log_t)qword_1EE16D420, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      v9 = 2082;
      v10 = "assert";
      v11 = 2081;
      v12 = "runningOnMotionThread";
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLSPUHIDDriverInterface calls must be made on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
  }
  return result;
}

uint64_t sub_18F411110(_QWORD *a1)
{
  sub_18F411138(a1);
  return sub_18F2A8438((uint64_t)a1);
}

void sub_18F411138(_QWORD *a1)
{
  NSObject *v2;
  IOCFPlugInInterface **v3;
  uint64_t v4;
  _QWORD *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint8_t buf[4];
  IOCFPlugInInterface **v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  sub_18F410E98();
  if (!*a1)
    return;
  if (qword_1EE16D430 != -1)
    dispatch_once(&qword_1EE16D430, &unk_1E2953768);
  v2 = qword_1EE16D420;
  if (os_log_type_enabled((os_log_t)qword_1EE16D420, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEBUG, "[CLSPUHIDDriverInterface] Close hid driver interface", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D430 != -1)
      dispatch_once(&qword_1EE16D430, &unk_1E2953768);
    v9 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLSPUHIDDriverInterface::closeHIDDriverInterface()", "CoreLocation: %s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  v3 = (IOCFPlugInInterface **)a1[2];
  v4 = a1[3];
  v5 = a1 + 2;
  if (v4)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v4 + 72))(a1[3], 0);
    if (!v3)
      goto LABEL_12;
  }
  else if (!v3)
  {
    *(_QWORD *)(*a1 + 8) = 0;
    *v5 = 0;
    a1[3] = 0;
    return;
  }
  ((void (*)(IOCFPlugInInterface **))(*v3)->Release)(v3);
  IODestroyPlugInInterface(v3);
LABEL_12:
  *(_QWORD *)(*a1 + 8) = 0;
  *v5 = 0;
  a1[3] = 0;
  if (qword_1EE16D430 != -1)
    dispatch_once(&qword_1EE16D430, &unk_1E2953768);
  v6 = qword_1EE16D420;
  if (os_log_type_enabled((os_log_t)qword_1EE16D420, OS_LOG_TYPE_DEFAULT))
  {
    v7 = a1[2];
    v8 = a1[3];
    *(_DWORD *)buf = 134218752;
    v12 = v3;
    v13 = 2048;
    v14 = v4;
    v15 = 2048;
    v16 = v7;
    v17 = 2048;
    v18 = v8;
    _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEFAULT, "[CLSPUHIDDriverInterface] Closed hid driver interface, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", buf, 0x2Au);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D430 != -1)
      dispatch_once(&qword_1EE16D430, &unk_1E2953768);
    v10 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLSPUHIDDriverInterface::closeHIDDriverInterface()", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
}

void sub_18F4114BC(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  __IOHIDServiceClient *v4;
  __IOHIDServiceClient *v5;
  const __CFNumber *RegistryID;
  mach_port_t v7;
  const __CFDictionary *v8;
  io_service_t MatchingService;
  io_service_t v10;
  const __CFAllocator *v11;
  const __CFUUID *v12;
  const __CFUUID *v13;
  mach_error_t v14;
  NSObject *v15;
  char *v16;
  char *v17;
  uint8_t *v18;
  NSObject *v19;
  NSObject *v20;
  IOCFPlugInInterface **v21;
  HRESULT (__cdecl *QueryInterface)(void *, REFIID, LPVOID *);
  const __CFUUID *v23;
  CFUUIDBytes v24;
  mach_error_t v25;
  mach_error_t v26;
  NSObject *v27;
  char *v28;
  mach_error_t v29;
  mach_error_t v30;
  NSObject *v31;
  char *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  SInt32 theScore;
  uint64_t v46;
  IOCFPlugInInterface **theInterface;
  uint64_t valuePtr;
  int v49;
  _BYTE v50[28];
  __int16 v51;
  IOCFPlugInInterface **v52;
  __int16 v53;
  uint64_t v54;
  uint8_t buf[4];
  _BYTE v56[28];
  __int16 v57;
  IOCFPlugInInterface **v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  sub_18F410E98();
  if (qword_1EE16D430 != -1)
    dispatch_once(&qword_1EE16D430, &unk_1E2953768);
  v2 = qword_1EE16D420;
  if (os_log_type_enabled((os_log_t)qword_1EE16D420, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEBUG, "[CLSPUHIDDriverInterface] Open hid driver interface", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D430 != -1)
      dispatch_once(&qword_1EE16D430, &unk_1E2953768);
    LOWORD(v49) = 0;
    v37 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "CoreLocation: %s\n", v37);
    if (v37 != (char *)buf)
      free(v37);
  }
  v3 = *a1;
  if (!*a1)
    return;
  theInterface = 0;
  valuePtr = 0;
  v46 = 0;
  v4 = (__IOHIDServiceClient *)sub_18F1FBD7C(v3);
  if (!v4)
  {
    if (qword_1EE16D430 != -1)
      dispatch_once(&qword_1EE16D430, &unk_1E2953768);
    v19 = qword_1EE16D420;
    if (os_log_type_enabled((os_log_t)qword_1EE16D420, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v19, OS_LOG_TYPE_INFO, "[CLSPUHIDDriverInterface] IoHidDevice is not ready", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D430 != -1)
      dispatch_once(&qword_1EE16D430, &unk_1E2953768);
    LOWORD(v49) = 0;
    v18 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "CoreLocation: %s\n");
LABEL_35:
    if (v18 == buf)
      return;
    goto LABEL_36;
  }
  v5 = v4;
  RegistryID = (const __CFNumber *)IOHIDServiceClientGetRegistryID(v4);
  CFNumberGetValue(RegistryID, kCFNumberSInt64Type, &valuePtr);
  v7 = *MEMORY[0x1E0CBBAA8];
  v8 = IORegistryEntryIDMatching(valuePtr);
  MatchingService = IOServiceGetMatchingService(v7, v8);
  if (!MatchingService)
  {
    if (qword_1EE16D430 != -1)
      dispatch_once(&qword_1EE16D430, &unk_1E2953768);
    v20 = qword_1EE16D420;
    if (os_log_type_enabled((os_log_t)qword_1EE16D420, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_FAULT, "[CLSPUHIDDriverInterface] Service doesn't exist", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D430 != -1)
      dispatch_once(&qword_1EE16D430, &unk_1E2953768);
    LOWORD(v49) = 0;
    v18 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "CoreLocation: %s\n");
    goto LABEL_35;
  }
  v10 = MatchingService;
  theScore = 0;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
  v12 = CFUUIDGetConstantUUIDWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE30], 0x3Bu, 0xC5u, 0xCCu, 0x87u, 0x84u, 0x5Eu, 0x48u, 0xABu, 0xA9u, 0xC2u, 0x94u, 0x36u, 0, 0x1Bu, 0xA6u, 0x8Au);
  v13 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
  v14 = IOCreatePlugInInterfaceForService(v10, v12, v13, &theInterface, &theScore);
  IOObjectRelease(v10);
  if (v14)
  {
    if (qword_1EE16D430 != -1)
      dispatch_once(&qword_1EE16D430, &unk_1E2953768);
    v15 = qword_1EE16D420;
    if (os_log_type_enabled((os_log_t)qword_1EE16D420, OS_LOG_TYPE_FAULT))
    {
      v16 = mach_error_string(v14);
      *(_DWORD *)buf = 67240706;
      *(_DWORD *)v56 = v14;
      *(_WORD *)&v56[4] = 2082;
      *(_QWORD *)&v56[6] = v16;
      *(_WORD *)&v56[14] = 2114;
      *(_QWORD *)&v56[16] = v5;
      _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_FAULT, "[CLSPUHIDDriverInterface] Unable to create plugin interface,retCode,0x%{public}x,retStr,%{public}s,service,%{public}@", buf, 0x1Cu);
    }
    if (!sub_18F1FCA08(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D430 != -1)
      dispatch_once(&qword_1EE16D430, &unk_1E2953768);
    v17 = mach_error_string(v14);
    v49 = 67240706;
    *(_DWORD *)v50 = v14;
    *(_WORD *)&v50[4] = 2082;
    *(_QWORD *)&v50[6] = v17;
    *(_WORD *)&v50[14] = 2114;
    *(_QWORD *)&v50[16] = v5;
    v18 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "CoreLocation: %s\n", (const char *)v18);
    if (v18 == buf)
      return;
LABEL_36:
    free(v18);
    return;
  }
  v21 = theInterface;
  QueryInterface = (*theInterface)->QueryInterface;
  v23 = CFUUIDGetConstantUUIDWithBytes(v11, 0x6Eu, 0xBEu, 0xBAu, 0x6Eu, 9u, 0x1Eu, 0x45u, 0x2Eu, 0x82u, 0xEAu, 0x29u, 0x79u, 0x81u, 0x6Fu, 0xB1u, 0xB5u);
  v24 = CFUUIDGetUUIDBytes(v23);
  v25 = ((uint64_t (*)(IOCFPlugInInterface **, _QWORD, _QWORD, uint64_t *))QueryInterface)(v21, *(_QWORD *)&v24.byte0, *(_QWORD *)&v24.byte8, &v46);
  if (v25)
  {
    v26 = v25;
    if (qword_1EE16D430 != -1)
      dispatch_once(&qword_1EE16D430, &unk_1E2953768);
    v27 = qword_1EE16D420;
    if (os_log_type_enabled((os_log_t)qword_1EE16D420, OS_LOG_TYPE_FAULT))
    {
      v28 = mach_error_string(v26);
      *(_DWORD *)buf = 67240706;
      *(_DWORD *)v56 = v26;
      *(_WORD *)&v56[4] = 2082;
      *(_QWORD *)&v56[6] = v28;
      *(_WORD *)&v56[14] = 2114;
      *(_QWORD *)&v56[16] = v5;
      _os_log_impl(&dword_18F1DC000, v27, OS_LOG_TYPE_FAULT, "[CLSPUHIDDriverInterface] Unable to set up query interface,retCode,0x%{public}x,retStr,%{public}s,service,%{public}@", buf, 0x1Cu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D430 != -1)
        dispatch_once(&qword_1EE16D430, &unk_1E2953768);
      v38 = mach_error_string(v26);
      v49 = 67240706;
      *(_DWORD *)v50 = v26;
      *(_WORD *)&v50[4] = 2082;
      *(_QWORD *)&v50[6] = v38;
      *(_WORD *)&v50[14] = 2114;
      *(_QWORD *)&v50[16] = v5;
      v39 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "CoreLocation: %s\n", v39);
      if (v39 != (char *)buf)
        free(v39);
    }
LABEL_43:
    if (theInterface)
    {
      ((void (*)(IOCFPlugInInterface **))(*theInterface)->Release)(theInterface);
      IODestroyPlugInInterface(theInterface);
    }
    return;
  }
  v29 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 64))(v46, 0);
  if (v29)
  {
    v30 = v29;
    if (qword_1EE16D430 != -1)
      dispatch_once(&qword_1EE16D430, &unk_1E2953768);
    v31 = qword_1EE16D420;
    if (os_log_type_enabled((os_log_t)qword_1EE16D420, OS_LOG_TYPE_FAULT))
    {
      v32 = mach_error_string(v30);
      *(_DWORD *)buf = 67240706;
      *(_DWORD *)v56 = v30;
      *(_WORD *)&v56[4] = 2082;
      *(_QWORD *)&v56[6] = v32;
      *(_WORD *)&v56[14] = 2114;
      *(_QWORD *)&v56[16] = v5;
      _os_log_impl(&dword_18F1DC000, v31, OS_LOG_TYPE_FAULT, "[CLSPUHIDDriverInterface] Unable to open hid driver interface,retCode,0x%{public}x,retStr,%{public}s,service,%{public}@", buf, 0x1Cu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D430 != -1)
        dispatch_once(&qword_1EE16D430, &unk_1E2953768);
      v40 = mach_error_string(v30);
      v49 = 67240706;
      *(_DWORD *)v50 = v30;
      *(_WORD *)&v50[4] = 2082;
      *(_QWORD *)&v50[6] = v40;
      *(_WORD *)&v50[14] = 2114;
      *(_QWORD *)&v50[16] = v5;
      v41 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "CoreLocation: %s\n", v41);
      if (v41 != (char *)buf)
        free(v41);
    }
    if (v46)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 72))(v46, 0);
    goto LABEL_43;
  }
  if (qword_1EE16D430 != -1)
    dispatch_once(&qword_1EE16D430, &unk_1E2953768);
  v33 = qword_1EE16D420;
  if (os_log_type_enabled((os_log_t)qword_1EE16D420, OS_LOG_TYPE_DEFAULT))
  {
    v34 = a1[2];
    v35 = a1[3];
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)v56 = valuePtr;
    *(_WORD *)&v56[8] = 2048;
    *(_QWORD *)&v56[10] = v34;
    *(_WORD *)&v56[18] = 2048;
    *(_QWORD *)&v56[20] = v35;
    v57 = 2048;
    v58 = theInterface;
    v59 = 2048;
    v60 = v46;
    _os_log_impl(&dword_18F1DC000, v33, OS_LOG_TYPE_DEFAULT, "[CLSPUHIDDriverInterface] Opened hid driver interface, registryID %llx, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", buf, 0x34u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D430 != -1)
      dispatch_once(&qword_1EE16D430, &unk_1E2953768);
    v42 = a1[2];
    v43 = a1[3];
    v49 = 134219008;
    *(_QWORD *)v50 = valuePtr;
    *(_WORD *)&v50[8] = 2048;
    *(_QWORD *)&v50[10] = v42;
    *(_WORD *)&v50[18] = 2048;
    *(_QWORD *)&v50[20] = v43;
    v51 = 2048;
    v52 = theInterface;
    v53 = 2048;
    v54 = v46;
    v44 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLSPUHIDDriverInterface::openHIDDriverInterface()", "CoreLocation: %s\n", v44);
    if (v44 != (char *)buf)
      free(v44);
  }
  *(_QWORD *)(*a1 + 8) = valuePtr;
  v36 = v46;
  a1[2] = (uint64_t)theInterface;
  a1[3] = v36;
}

uint64_t sub_18F4120A8(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  uint8_t *v15;
  NSObject *v16;
  char *v18;
  uint8_t buf[4];
  char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D430 != -1)
    dispatch_once(&qword_1EE16D430, &unk_1E2953768);
  v10 = qword_1EE16D420;
  if (os_log_type_enabled((os_log_t)qword_1EE16D420, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v20 = a3;
    _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_DEBUG, "[CLSPUHIDDriverInterface] Attempting to send command with reply to SPU,length,%zu", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D430 != -1)
      dispatch_once(&qword_1EE16D430, &unk_1E2953768);
    v18 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "IOReturn CLSPUHIDDriverInterface::sendCommand(const void *, size_t, void *, size_t *)", "CoreLocation: %s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
  v11 = *(_QWORD *)(a1 + 24);
  if (v11)
  {
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)v11 + 80))(v11, a2, a3, a4, a5);
    if ((_DWORD)v12)
    {
      if (qword_1EE16D430 != -1)
        dispatch_once(&qword_1EE16D430, &unk_1E2953768);
      v13 = qword_1EE16D420;
      if (os_log_type_enabled((os_log_t)qword_1EE16D420, OS_LOG_TYPE_FAULT))
      {
        v14 = mach_error_string(v12);
        *(_DWORD *)buf = 136446466;
        v20 = v14;
        v21 = 1026;
        v22 = v12;
        _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_FAULT, "[CLSPUHIDDriverInterface] sendCommand() = %{public}s (0x%{public}x)", buf, 0x12u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D430 != -1)
          dispatch_once(&qword_1EE16D430, &unk_1E2953768);
        mach_error_string(v12);
        v15 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "IOReturn CLSPUHIDDriverInterface::sendCommand(const void *, size_t, void *, size_t *)", "CoreLocation: %s\n");
LABEL_29:
        if (v15 != buf)
          free(v15);
      }
    }
  }
  else
  {
    if (qword_1EE16D430 != -1)
      dispatch_once(&qword_1EE16D430, &unk_1E2953768);
    v16 = qword_1EE16D420;
    if (os_log_type_enabled((os_log_t)qword_1EE16D420, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v16, OS_LOG_TYPE_INFO, "[CLSPUHIDDriverInterface] hidDriverInterface NULL, unable to send command", buf, 2u);
    }
    v12 = 3758097084;
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D430 != -1)
        dispatch_once(&qword_1EE16D430, &unk_1E2953768);
      v15 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "IOReturn CLSPUHIDDriverInterface::sendCommand(const void *, size_t, void *, size_t *)", "CoreLocation: %s\n");
      goto LABEL_29;
    }
  }
  return v12;
}

os_log_t sub_18F412528()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "AOP");
  qword_1EE16D420 = (uint64_t)result;
  return result;
}

uint64_t sub_18F412554(uint64_t a1, _QWORD *a2, double *a3, double *a4, char a5)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  NSObject *v20;
  char *v21;
  uint64_t v22;
  double v23;
  int v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  int v32;
  char *v34;
  char *v35;
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E294AF98;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 9) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 168) = _Q0;
  *(_OWORD *)(a1 + 184) = _Q0;
  *(_QWORD *)(a1 + 200) = 0xBFF0000000000000;
  v13 = (int)(0.100000001 / *a4);
  *(_QWORD *)(a1 + 208) = &off_1E294AC98;
  *(_QWORD *)(a1 + 216) = v13;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  v14 = (int)(0.100000001 / *a4);
  *(_QWORD *)(a1 + 280) = &off_1E294AC98;
  *(_QWORD *)(a1 + 288) = v14;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_WORD *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 472) = a5;
  *(_QWORD *)(a1 + 480) = *a2;
  *(double *)(a1 + 488) = *a4;
  *(_DWORD *)(a1 + 496) = 4;
  *(_QWORD *)(a1 + 504) = 0x3FA0A3D70A3D70A4;
  *(_BYTE *)(a1 + 512) = 1;
  v15 = (_QWORD *)(a1 + 520);
  *(_QWORD *)(a1 + 520) = &off_1E294AC98;
  *(_QWORD *)(a1 + 528) = 100;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 592) = &off_1E294A870;
  *(_QWORD *)(a1 + 600) = 20;
  *(_QWORD *)(a1 + 608) = &off_1E294AC78;
  *(_QWORD *)(a1 + 616) = 20;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_QWORD *)(a1 + 688) = &off_1E294AC78;
  *(_QWORD *)(a1 + 696) = 20;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_QWORD *)(a1 + 768) = &off_1E294AC78;
  *(_QWORD *)(a1 + 776) = 20;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 896) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 904) = 0;
  v16 = operator new[]();
  *(_QWORD *)(a1 + 120) = v16;
  *(_QWORD *)(a1 + 128) = v16;
  *(_QWORD *)(a1 + 112) = v16 + 24;
  v17 = *(double *)(a1 + 480);
  if (v17 > 0.011 || (v18 = *a3, *a3 > 0.021))
  {
    *(_QWORD *)(a1 + 528) = 0;
    sub_18F1E6174(v15);
    *(_QWORD *)(a1 + 600) = 0;
    *(_QWORD *)(a1 + 616) = 0;
    sub_18F1E7F08((_QWORD *)(a1 + 608));
    *(_QWORD *)(a1 + 696) = 0;
    sub_18F1E7F08((_QWORD *)(a1 + 688));
    *(_QWORD *)(a1 + 776) = 0;
    sub_18F1E7F08((_QWORD *)(a1 + 768));
    *(_BYTE *)(a1 + 512) = 0;
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
    v20 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_DEBUG, "Doing crude accel measurement update.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
      v21 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "CLSensorFusion9AxisMekf::CLSensorFusion9AxisMekf(const CFTimeInterval &, const CFTimeInterval &, const CFTimeInterval &, BOOL)", "CoreLocation: %s\n", v21);
      if (v21 != (char *)buf)
        free(v21);
    }
  }
  else
  {
    if (fabs(v17 * 200.0 + -1.0) > 0.25)
    {
      if (v17 <= 0.008 || v17 > 0.011)
        v19 = (0.5 / v17);
      else
        v19 = 50;
      *(_QWORD *)(a1 + 528) = v19;
      sub_18F1E6174(v15);
      v18 = *a3;
    }
    if (fabs(v18 * 100.0 + -1.0) > 0.25)
    {
      v22 = (0.200000003 / v18);
      *(_QWORD *)(a1 + 600) = v22;
      *(_QWORD *)(a1 + 616) = v22;
      sub_18F1E7F08((_QWORD *)(a1 + 608));
      *(_QWORD *)(a1 + 696) = v22;
      sub_18F1E7F08((_QWORD *)(a1 + 688));
      *(_QWORD *)(a1 + 776) = v22;
      sub_18F1E7F08((_QWORD *)(a1 + 768));
      v23 = *a3;
      v24 = (int)((double)*(int *)(a1 + 496) / (*a3 * 100.0));
      if (v24 <= 2)
        v24 = 2;
      *(_DWORD *)(a1 + 496) = v24;
      *(double *)(a1 + 504) = fmax(sqrt(v23 * 75.0) * 0.0325, 0.0325);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
  v25 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
  {
    v26 = *(_QWORD *)(a1 + 528);
    v27 = *(_QWORD *)(a1 + 600);
    v28 = *(_DWORD *)(a1 + 496);
    v29 = *(_QWORD *)(a1 + 288);
    *(_DWORD *)buf = 134218752;
    v37 = v26;
    v38 = 2048;
    v39 = v27;
    v40 = 1024;
    v41 = v28;
    v42 = 2048;
    v43 = v29;
    _os_log_impl(&dword_18F1DC000, v25, OS_LOG_TYPE_DEBUG, "rotBufferSize9, %zu, accelBufferSize, %zuu, peakCount, %d, compassBufferSize, %zu", buf, 0x26u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
    v34 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CLSensorFusion9AxisMekf::CLSensorFusion9AxisMekf(const CFTimeInterval &, const CFTimeInterval &, const CFTimeInterval &, BOOL)", "CoreLocation: %s\n", v34);
    if (v34 != (char *)buf)
      free(v34);
  }
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
  v30 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
  {
    v31 = *a2;
    v32 = *(unsigned __int8 *)(a1 + 512);
    *(_DWORD *)buf = 134218240;
    v37 = v31;
    v38 = 1024;
    LODWORD(v39) = v32;
    _os_log_impl(&dword_18F1DC000, v30, OS_LOG_TYPE_DEBUG, "gyroDt9, %.4f, doAccelCheck, %d", buf, 0x12u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
    v35 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CLSensorFusion9AxisMekf::CLSensorFusion9AxisMekf(const CFTimeInterval &, const CFTimeInterval &, const CFTimeInterval &, BOOL)", "CoreLocation: %s\n", v35);
    if (v35 != (char *)buf)
      free(v35);
  }
  return a1;
}

void sub_18F412D04(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_18F3D6A70(v1 + 74);
  v1[65] = v2;
  sub_18F3CBA50(v1 + 68);
  v1[35] = v2;
  sub_18F3CBA50(v1 + 38);
  v1[26] = v2;
  sub_18F3CBA50(v1 + 29);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F412D48(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E294AF98;
  v2 = a1[16];
  if (v2)
    MEMORY[0x194001420](v2, 0x1000C8052888210);
  sub_18F3D6A70(a1 + 74);
  a1[65] = &off_1E294AC98;
  sub_18F3CBA50(a1 + 68);
  a1[35] = &off_1E294AC98;
  sub_18F3CBA50(a1 + 38);
  a1[26] = &off_1E294AC98;
  sub_18F3CBA50(a1 + 29);
  return a1;
}

void sub_18F412DC8(_QWORD *a1)
{
  sub_18F412D48(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F412DEC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_18F412DF4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v8;
  uint64_t v9;
  char *v10;
  uint8_t buf[4];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 11) = 0;
  bzero((void *)(a1 + 16), 0x20uLL);
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  bzero((void *)(a1 + 64), 0x30uLL);
  bzero(*(void **)(a1 + 120), 0x18uLL);
  bzero(*(void **)(a1 + 112), 0x3CuLL);
  v2 = *(_QWORD *)(a1 + 120);
  memset_pattern16((void *)v2, &unk_18F507F90, 0xCuLL);
  memset_pattern16((void *)(v2 + 12), &unk_18F507FA0, 0xCuLL);
  *(_BYTE *)(a1 + 12) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 168) = _Q0;
  *(_QWORD *)(a1 + 184) = 0xBFF0000000000000;
  bzero((void *)(a1 + 352), 0xCuLL);
  bzero((void *)(a1 + 364), 0xCuLL);
  bzero((void *)(a1 + 376), 0x18uLL);
  bzero((void *)(a1 + 156), 0xCuLL);
  bzero((void *)(a1 + 136), 0xCuLL);
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  bzero((void *)(a1 + 448), 0x18uLL);
  bzero((void *)(a1 + 400), 0x18uLL);
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_WORD *)(a1 + 440) = 0;
  bzero((void *)(a1 + 848), 0xCuLL);
  bzero((void *)(a1 + 864), 0x18uLL);
  *(_DWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 896) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 904) = 0;
  sub_18F1E7F08((_QWORD *)(a1 + 608));
  sub_18F1E7F08((_QWORD *)(a1 + 688));
  sub_18F1E7F08((_QWORD *)(a1 + 768));
  sub_18F1E6174((_QWORD *)(a1 + 520));
  sub_18F1E6174((_QWORD *)(a1 + 208));
  sub_18F1E6174((_QWORD *)(a1 + 280));
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
  v8 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_QWORD *)(a1 + 600);
    *(_DWORD *)buf = 134217984;
    v12 = v9;
    _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_DEBUG, "fAccelBuffer,size,%zu", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
    v10 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::reset()", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
}

BOOL sub_18F4130D8(uint64_t a1, uint64_t a2)
{
  int v2;
  float v3;

  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(unsigned __int8 *)(a1 + 9);
  if (*(_BYTE *)(a1 + 9))
  {
    *(float32x2_t *)a2 = vcvt_f32_f64(*(float64x2_t *)(a1 + 376));
    v3 = *(double *)(a1 + 392);
    *(float *)(a2 + 8) = v3;
  }
  return v2 != 0;
}

void sub_18F413110(uint64_t a1, float64x2_t *a2, uint64_t a3, double *a4, _QWORD *a5)
{
  float v7;
  float32x2_t v8;
  float v9;
  float v10;
  NSObject *v11;
  __int128 v12;
  float32x2_t v13;
  double v14;
  NSObject *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  double v28;
  float32x2_t v29;
  float v30;
  _BYTE v31[32];
  __int16 v32;
  double v33;
  __int16 v34;
  uint64_t v35;
  uint8_t buf[4];
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  uint64_t v45;
  float64x2_t v46;
  double v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 168) = *a5;
  ++*(_DWORD *)(a1 + 152);
  v7 = *a4;
  v8 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(*a2), (float32x2_t)vdup_n_s32(0x3C8EFA35u))), *(float64x2_t *)(a1 + 88)));
  v9 = (float)(v7 * 0.017453) - *(double *)(a1 + 104);
  *(float32x2_t *)(a1 + 156) = v8;
  *(float *)(a1 + 164) = v9;
  v10 = v8.f32[1];
  v29 = v8;
  v30 = sqrtf(vmlas_n_f32(vmuls_lane_f32(v8.f32[1], v8, 1), v8.f32[0], v8.f32[0]) + (float)(v9 * v9));
  sub_18F1FD65C(a1 + 520, &v30);
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
    v11 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218752;
      v37 = (float)(v30 / 0.017453);
      v38 = 2048;
      v39 = (float)(v29.f32[0] / 0.017453);
      v40 = 2048;
      v41 = (float)(v10 / 0.017453);
      v42 = 2048;
      v43 = (float)(v9 / 0.017453);
      _os_log_impl(&dword_18F1DC000, v11, OS_LOG_TYPE_DEBUG, "omegaMag9, %.3f, omega, %.3f, %.3f, %.3f", buf, 0x2Au);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
      *(_DWORD *)v31 = 134218752;
      *(double *)&v31[4] = (float)(v30 / 0.017453);
      *(_WORD *)&v31[12] = 2048;
      *(double *)&v31[14] = (float)(v29.f32[0] / 0.017453);
      *(_WORD *)&v31[22] = 2048;
      *(double *)&v31[24] = (float)(v10 / 0.017453);
      v32 = 2048;
      v33 = (float)(v9 / 0.017453);
      v21 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v21);
      if (v21 != (char *)buf)
        free(v21);
    }
  }
  v28 = *(double *)(a1 + 480);
  v46 = vmulq_n_f64(vcvtq_f64_f32(v29), v28);
  v47 = v28 * v9;
  sub_18F414504((double *)buf, v46.f64);
  sub_18F2010A8((double *)v31, (double *)buf, (double *)(a1 + 16));
  v12 = *(_OWORD *)&v31[16];
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v31;
  *(_OWORD *)(a1 + 32) = v12;
  v13 = vadd_f32(*(float32x2_t *)(a1 + 136), v29);
  *(float32x2_t *)(a1 + 136) = v13;
  *(float *)&v12 = *(float *)(a1 + 144) + v9;
  *(_DWORD *)(a1 + 144) = v12;
  ++*(_DWORD *)(a1 + 148);
  v14 = v28
      * (v28
       * (float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v13, v13).i32[1]), v13.f32[0], v13.f32[0])
               + (float)(*(float *)&v12 * *(float *)&v12)));
  if (v14 > 0.122500002)
    sub_18F413658(a1, v14, (int32x2_t)0x3FBF5C2900000000);
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
    v15 = qword_1EE16D6D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(double *)(a1 + 16);
      v17 = *(double *)(a1 + 24);
      v18 = *(double *)(a1 + 32);
      v19 = *(double *)(a1 + 40);
      v20 = *a5;
      *(_DWORD *)buf = 134219008;
      v37 = v16;
      v38 = 2048;
      v39 = v17;
      v40 = 2048;
      v41 = v18;
      v42 = 2048;
      v43 = v19;
      v44 = 2048;
      v45 = v20;
      _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_DEBUG, "[AppleQuaternion9] x,%f,y,%f,z,%f,w,%f,timestamp,%f", buf, 0x34u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
      v22 = *(_QWORD *)(a1 + 16);
      v23 = *(_QWORD *)(a1 + 24);
      v24 = *(_QWORD *)(a1 + 32);
      v25 = *(double *)(a1 + 40);
      v26 = *a5;
      *(_DWORD *)v31 = 134219008;
      *(_QWORD *)&v31[4] = v22;
      *(_WORD *)&v31[12] = 2048;
      *(_QWORD *)&v31[14] = v23;
      *(_WORD *)&v31[22] = 2048;
      *(_QWORD *)&v31[24] = v24;
      v32 = 2048;
      v33 = v25;
      v34 = 2048;
      v35 = v26;
      v27 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v27);
      if (v27 != (char *)buf)
        free(v27);
    }
  }
}

uint64_t sub_18F413658(uint64_t result, double a2, int32x2_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  double v15;
  float v16;
  uint64_t i;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t j;
  uint64_t v24;
  uint64_t *v25;
  uint64_t k;
  float v27;
  uint64_t m;
  uint64_t v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  float v37;
  uint64_t v38;
  float *v39;
  float v40;
  uint64_t v41;
  double v42;
  float v43;
  float *v44;
  double v45;
  long double v46;
  uint64_t v47;
  uint64_t v48;
  long double v49;
  float v50;
  float v51;
  uint64_t n;
  int *v53;
  uint64_t *v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  float v59;
  float v60;
  uint64_t v61;
  uint64_t ii;
  uint64_t v63;
  uint64_t v64;
  uint64_t jj;
  float v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  float v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  float v83;
  float v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  float *v91;
  uint64_t v92;
  float v93;
  float v94;
  uint64_t v95;
  uint64_t v96;
  float v97;
  int v98;
  int v99;
  float32x2_t v100;
  double v101;
  int32x2_t v102;
  __int128 v103;
  uint64_t v104;
  float v105[6];
  float v106[15];
  _BYTE v107[12];
  int v108;
  uint64_t v109;
  float v110[18];
  uint64_t v111;
  float v112[2];
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  _DWORD v120[2];
  float32x2_t v121;
  int v122;
  float v123;
  __int32 v124;
  float v125;
  int v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(result + 148);
  if (v3)
  {
    v4 = result;
    v5 = result + 136;
    *(float *)a3.i32 = (float)v3;
    v102 = a3;
    v6 = *(float *)(result + 136) / (float)v3;
    v7 = *(double *)(result + 480) * (double)v3;
    *(_DWORD *)(result + 148) = 0;
    v101 = exp(v7 / -5000.0);
    v100 = vdiv_f32(*(float32x2_t *)(v5 + 4), (float32x2_t)vdup_lane_s32(v102, 0));
    bzero((void *)v5, 0xCuLL);
    v8 = 0;
    v9 = 0;
    v10 = v100;
    *(float64x2_t *)(v5 - 48) = vmulq_n_f64(*(float64x2_t *)(v5 - 48), v101);
    *(double *)(v5 - 32) = v101 * *(double *)(v5 - 32);
    v120[0] = 0;
    v120[1] = v100.i32[1];
    v121 = vneg_f32(v100);
    v122 = 0;
    v123 = v6;
    v124 = v100.i32[0];
    v125 = -v6;
    v126 = 0;
    v11 = vmul_f32(v10, v10).f32[0];
    v12 = vmuls_lane_f32(v100.f32[1], v100, 1);
    v112[0] = -(float)(v11 + v12);
    v112[1] = v6 * v100.f32[0];
    v113 = vmuls_lane_f32(v6, v100, 1);
    v114 = v6 * v100.f32[0];
    v115 = -(float)((float)(v6 * v6) + v12);
    v116 = vmuls_lane_f32(v10.f32[0], v10, 1);
    v117 = v113;
    v118 = v116;
    v100.f32[0] = v11;
    v119 = -(float)((float)(v6 * v6) + v11);
    v13 = v7;
    v14 = -v13;
    v15 = v7 * v7 * 0.5;
    v16 = v15;
    do
    {
      for (i = 0; i != 3; ++i)
        *(float *)&v107[v8 * 4 + i * 4] = (float)(v112[v8 + i] * v16) + (float)(v14 * *(float *)&v120[v8 + i]);
      *(float *)&v107[16 * v9] = *(float *)&v107[16 * v9] + 1.0;
      ++v9;
      v8 += 3;
    }
    while (v9 != 3);
    v18 = 0;
    v19 = v110;
    do
    {
      *(_QWORD *)v19 = *(_QWORD *)&v107[v18];
      v19[2] = *(float *)&v107[v18 + 8];
      v18 += 12;
      v19 += 6;
    }
    while (v18 != 36);
    v20 = 0;
    v21 = 0;
    v22 = v15 / 5000.0 - v7;
    do
    {
      for (j = 0; j != 3; ++j)
        *(float *)&v107[v20 * 4 + j * 4] = *(float *)&v120[v20 + j] * v16;
      *(float *)&v107[16 * v21] = *(float *)&v107[16 * v21] + v22;
      ++v21;
      v20 += 3;
    }
    while (v21 != 3);
    v24 = 0;
    v25 = &v111;
    do
    {
      *v25 = *(_QWORD *)&v107[v24];
      *((_DWORD *)v25 + 2) = *(_DWORD *)&v107[v24 + 8];
      v24 += 12;
      v25 += 3;
    }
    while (v24 != 36);
    for (k = 3; k != 21; k += 6)
      bzero(&v110[k], 0xCuLL);
    for (m = 21; m != 39; m += 6)
    {
      bzero(&v110[m], 0xCuLL);
      v27 = v101;
      v110[k] = v27;
      k += 7;
    }
    v29 = 0;
    v30 = *(_QWORD *)(v4 + 112);
    v31 = v110;
    do
    {
      v32 = v29 + 30;
      v33 = 5;
      LODWORD(v34) = 6;
      do
      {
        v35 = 0;
        v36 = v34 - 2;
        v34 = v33;
        v37 = v110[v32];
        v38 = v30 + 4 * (v36 * (int)v33 / 2);
        v39 = v31;
        do
        {
          v40 = *v39;
          v39 += 6;
          v37 = v37 + (float)(v40 * *(float *)(v38 + 4 * v35++));
        }
        while (v34 != v35);
        v110[v32] = v37;
        v33 = v34 - 1;
        v32 = v29 + 6 * (v34 - 1);
      }
      while (v34 > 1);
      ++v29;
      ++v31;
    }
    while (v29 != 6);
    v41 = 0;
    v42 = 2.76135698e-10
        / (7.0
         / (exp((0.11 - sqrtf((float)(v100.f32[0] + (float)(v6 * v6)) + (float)(v100.f32[1] * v100.f32[1]))) / 0.012)
          + 1.0)
         + 1.0);
    v44 = (float *)v107;
    do
    {
      bzero(&v107[v41], 0xCuLL);
      v43 = (v7 * -0.25 / 5000.0 + 0.333333333) * (v7 * (v7 * (v7 * v42)))
          + (float)(*(float *)v102.i32 * 0.00000021323) * 0.5 * v7;
      *v44 = v43;
      v44 += 7;
      v41 += 24;
    }
    while (v41 != 72);
    v45 = expm1(-(v7 / 5000.0));
    v46 = exp(-(v7 / 5000.0));
    v47 = 0;
    v48 = 0;
    v49 = v42 * -0.5 * 1.24999999e11 * (v46 * (v7 / 5000.0 * (v7 / 5000.0) + v7 / 5000.0 * 2.0) + v45 * 2.0);
    v50 = v46 * (v7 * (v7 * (v42 * -0.5)));
    v51 = v49;
    do
    {
      for (n = 0; n != 3; ++n)
        v106[v47 + n] = *(float *)&v120[v47 + n] * v51;
      v106[4 * v48] = v106[4 * v48] + v50;
      ++v48;
      v47 += 3;
    }
    while (v48 != 3);
    v53 = &v108;
    v54 = &v109;
    v55 = v106;
    v56 = 3;
    do
    {
      v57 = 0;
      v58 = v53;
      do
      {
        v59 = v55[v57];
        *(float *)((char *)v54 + v57 * 4) = v59;
        *(float *)v58 = v59;
        v58 += 6;
        ++v57;
      }
      while (v57 != 3);
      ++v56;
      ++v53;
      v54 += 3;
      v55 += 3;
    }
    while (v56 != 6);
    v60 = (1.0 - exp(v7 * -2.0 / 5000.0)) * (v42 * 5000.0) * 0.5;
    v61 = 84;
    for (ii = 84; ii != 156; ii += 24)
    {
      bzero(&v107[ii], 0xCuLL);
      *(float *)&v107[v61] = v60;
      v61 += 28;
    }
    bzero(v106, 0x3CuLL);
    bzero(v105, 0x18uLL);
    v63 = 0;
    v64 = 4;
    for (jj = 5; ; --jj)
    {
      v66 = *(float *)&v107[24 * (int)jj + 4 * jj];
      if (jj > 4)
      {
        v105[jj] = v66;
      }
      else
      {
        v67 = v63;
        do
        {
          v68 = v106[jj + ((int)v67 + 5) * ((int)v67 + 6) / 2];
          v66 = v66 + (float)((float)-(float)(v68 * v68) * v105[v67++ + 6]);
        }
        while ((_DWORD)v67);
        v105[jj] = v66;
        if (jj < 1)
        {
          v73 = 0;
          v74 = *(_QWORD *)(v4 + 120);
          v75 = 6;
          v76 = 5;
          v77 = 5;
          result = v74;
          while (1)
          {
            v78 = 0;
            v79 = v75 - 1;
            v80 = 0.0;
            v81 = v77 * 4;
            do
            {
              v80 = v80
                  + (float)((float)(*(float *)((char *)v110 + v81) * *(float *)((char *)v110 + v81))
                          * *(float *)(v74 + v78));
              v78 += 4;
              v81 += 24;
            }
            while (v78 != 24);
            if (v75 > 5)
            {
              v84 = v105[v79];
              v85 = v80 + v84;
              *((float *)&v103 + v79) = v85;
            }
            else
            {
              v82 = v73;
              do
              {
                v83 = v106[v79 + ((int)v82 + 5) * ((int)v82 + 6) / 2];
                v80 = v80 + (float)((float)(v83 * v83) * v105[v82++ + 6]);
              }
              while ((_DWORD)v82);
              v84 = v105[v79];
              v85 = v80 + v84;
              *((float *)&v103 + v79) = v85;
              if (v75 < 2)
              {
                *(_OWORD *)result = v103;
                *(_QWORD *)(result + 16) = v104;
                return result;
              }
            }
            v86 = 0;
            v87 = 0;
            result = *(_QWORD *)(v4 + 120);
            v88 = (uint64_t)(int)(v79 * (v75 - 2) + ((int)v79 * ((int)v75 - 2) < 0)) >> 1;
            do
            {
              v89 = 0;
              v90 = 0.0;
              v91 = v110;
              do
              {
                v90 = v90 + (float)((float)(v91[v77] * *(float *)(result + v89)) * v91[v86]);
                v89 += 4;
                v91 += 6;
              }
              while (v89 != 24);
              v92 = v87 + v88;
              v93 = v106[v87 + v88];
              v94 = v90 + (float)(v84 * v93);
              v95 = v73;
              if (v75 <= 5)
              {
                do
                {
                  v94 = v94
                      + (float)((float)(v106[v79 + ((int)v95 + 5) * ((int)v95 + 6) / 2] * v106[v95])
                              * v106[v87 + ((int)v95 + 5) * ((int)v95 + 6) / 2]);
                  ++v95;
                }
                while ((_DWORD)v95);
              }
              v96 = 0;
              v97 = v94 / v85;
              *(float *)(v30 + 4 * v92) = v97;
              do
              {
                v110[v86 + v96] = v110[v86 + v96] + (float)((float)-v97 * v110[v77 + v96]);
                v96 += 6;
              }
              while (v96 != 36);
              v98 = v76;
              if (v75 <= 5)
              {
                do
                {
                  v99 = v98 + 1;
                  v106[v87 + v98 * v99 / 2] = v106[v87 + v98 * v99 / 2]
                                            + (float)((float)-v97 * v106[v79 + v98 * v99 / 2]);
                  ++v98;
                }
                while (v99 != 5);
                v93 = v106[v92];
              }
              v106[v92] = v93 - v97;
              ++v87;
              ++v86;
            }
            while (v87 != v76);
            --v76;
            --v77;
            --v73;
            --v75;
          }
        }
      }
      v69 = v64;
      do
      {
        v70 = *(float *)&v107[24 * jj + 4 * v69];
        v71 = v63;
        if (jj <= 4)
        {
          do
          {
            v70 = v70
                + (float)((float)-(float)(v106[v69 + ((int)v71 + 5) * ((int)v71 + 6) / 2]
                                        * v106[jj + ((int)v71 + 5) * ((int)v71 + 6) / 2])
                        * v106[v71]);
            ++v71;
          }
          while ((_DWORD)v71);
        }
        v106[v69 + ((uint64_t)(int)((jj - 1) * jj + (((int)jj - 1) * (int)jj < 0)) >> 1)] = v70 / v66;
      }
      while (v69-- > 0);
      --v64;
      --v63;
    }
  }
  return result;
}

void sub_18F413F70(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  float *v18;
  float v19;
  float *v20;
  uint64_t v21;
  float v22;
  uint64_t i;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;

  v12 = a6 + 24;
  bzero(a1, 0x30uLL);
  v13 = 0;
  v14 = a2[1];
  v15 = *a2 - 4;
  v16 = (float *)(a3 - 12);
  do
  {
    v17 = 0;
    v18 = v16;
    do
    {
      v19 = *(float *)(a3 + 4 * v13 + 12 * v17);
      *(float *)(a6 + 4 * v17) = v19;
      if (v17)
      {
        v20 = v18;
        v21 = v17;
        do
        {
          v22 = *v20;
          v20 -= 3;
          v19 = v19 + (float)(v22 * *(float *)(v15 + 4 * (((int)v17 - 1) * (int)v17 / 2) + 4 * v21));
          *(float *)(a6 + 4 * v17) = v19;
        }
        while (v21-- > 1);
      }
      ++v17;
      v18 += 3;
    }
    while (v17 != 6);
    for (i = 0; i != 24; i += 4)
      *(float *)(a6 + i + 24) = *(float *)(v14 + i) * *(float *)(a6 + i);
    v25 = 0;
    v26 = *(float *)(a5 + 4 * v13);
    v27 = *(float *)(a4 + 4 * v13);
    v28 = *a2;
    v29 = 1.0 / v27;
    do
    {
      v30 = v27;
      v31 = *(float *)(a6 + 4 * v25);
      v27 = v27 + (float)(v31 * *(float *)(v12 + 4 * v25));
      *(float *)(v14 + 4 * v25) = *(float *)(v14 + 4 * v25) * (float)(v30 * (float)(1.0 / v27));
      if (v25)
      {
        v32 = 0;
        v33 = -(float)(v31 * v29);
        v34 = v28 + 4 * (((int)v25 - 1) * (int)v25 / 2);
        do
        {
          v35 = *(float *)(v34 + 4 * v32);
          *(float *)(v34 + 4 * v32) = v35 + (float)(*(float *)(v12 + 4 * v32) * v33);
          *(float *)(v12 + 4 * v32) = *(float *)(v12 + 4 * v32) + (float)(*(float *)(v12 + 4 * v25) * v35);
          ++v32;
        }
        while (v25 != v32);
      }
      ++v25;
      v29 = 1.0 / v27;
    }
    while (v25 != 6);
    v36 = 0;
    v37 = v26 * (float)(1.0 / v27);
    do
    {
      *((double *)a1 + v36) = *((double *)a1 + v36) + (float)(v37 * *(float *)(v12 + 4 * v36));
      ++v36;
    }
    while (v36 != 6);
    ++v13;
    ++v16;
  }
  while (v13 != 3);
}

void sub_18F414138(uint64_t a1, float32x2_t *a2, float *a3)
{
  NSObject *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  float v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  float v20;
  uint64_t i;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  char *v28;
  float32x2_t v29;
  float v30;
  uint64_t v31;
  int v32;
  int v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  uint8_t buf[4];
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  _DWORD v55[397];
  _BYTE v56[48];
  uint64_t v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
    v6 = qword_1EE16D6D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
    {
      v7 = a2->f32[0];
      v8 = a2->f32[1];
      v9 = a2[1].f32[0];
      v10 = *a3;
      v11 = a3[1];
      v12 = a3[2];
      *(_DWORD *)buf = 134219264;
      v46 = v7;
      v47 = 2048;
      v48 = v8;
      v49 = 2048;
      v50 = v9;
      v51 = 2048;
      v52 = v10;
      v53 = 2048;
      v54 = v11;
      LOWORD(v55[0]) = 2048;
      *(double *)((char *)v55 + 2) = v12;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEBUG, "[Bias,Var] bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f", buf, 0x3Eu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
      v22 = a2->f32[0];
      v23 = a2->f32[1];
      v24 = a2[1].f32[0];
      v25 = *a3;
      v26 = a3[1];
      v27 = a3[2];
      v33 = 134219264;
      v34 = v22;
      v35 = 2048;
      v36 = v23;
      v37 = 2048;
      v38 = v24;
      v39 = 2048;
      v40 = v25;
      v41 = 2048;
      v42 = v26;
      v43 = 2048;
      v44 = v27;
      v28 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedGyroBias(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &)", "CoreLocation: %s\n", v28);
      if (v28 != (char *)buf)
        free(v28);
    }
  }
  if (*(_BYTE *)(a1 + 12))
  {
    v13 = 0;
    v31 = *(_QWORD *)a3;
    v32 = *((_DWORD *)a3 + 2);
    do
    {
      v14 = *(float *)((char *)&v31 + v13);
      if (v14 < 0.000001)
        v14 = 0.000001;
      *(float *)((char *)&v31 + v13) = v14;
      v13 += 4;
    }
    while (v13 != 12);
    v15 = *(_DWORD *)(a1 + 152);
    if (v15 >= 1)
    {
      v16 = 0;
      if (v15 >= 50)
        v17 = 50;
      else
        v17 = *(_DWORD *)(a1 + 152);
      v18 = v31;
      v19 = v32;
      do
      {
        v29 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*a2), *(float64x2_t *)(a1 + 88)));
        v20 = a2[1].f32[0] - *(double *)(a1 + 104);
        v30 = v20;
        bzero(buf, 0x48uLL);
        *(_DWORD *)((char *)&v52 + 2) = 1065353216;
        v55[0] = 1065353216;
        v55[4] = 1065353216;
        v57 = v18;
        v58 = v19;
        sub_18F413F70(&v33, (uint64_t *)(a1 + 112), (uint64_t)buf, (uint64_t)&v57, (uint64_t)&v29, (uint64_t)v56);
        for (i = 0; i != 24; i += 8)
          *(double *)(a1 + i + 88) = *(double *)((char *)&v38 + i) + *(double *)(a1 + i + 88);
        ++v16;
      }
      while (v16 != v17);
    }
    *(_DWORD *)(a1 + 152) = 0;
  }
  else
  {
    *(float64x2_t *)(a1 + 88) = vcvtq_f64_f32(*a2);
    *(double *)(a1 + 104) = a2[1].f32[0];
    *(_BYTE *)(a1 + 12) = 1;
  }
}

void sub_18F414504(double *a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double cosval;
  __double2 v13;

  v4 = *a2;
  v5 = sqrt(a2[1] * a2[1] + v4 * v4 + a2[2] * a2[2]);
  if (v5 >= 0.00000002)
  {
    v13 = __sincos_stret(v5 * 0.5);
    cosval = v13.__cosval;
    *a1 = v4 * (v13.__sinval / v5);
    a1[1] = v13.__sinval / v5 * a2[1];
    v11 = v13.__sinval / v5 * a2[2];
  }
  else
  {
    *a1 = v4 * 0.5;
    v6 = a2[1] * 0.5;
    a1[1] = v6;
    v7 = a2[2] * 0.5;
    v8 = v5 * v5 * 0.125;
    v9 = 1.0 - v8;
    v10 = sqrt(v8 + 1.0);
    *a1 = v4 * 0.5 / v10;
    a1[1] = v6 / v10;
    v11 = v7 / v10;
    cosval = v9 / v10;
  }
  a1[2] = v11;
  a1[3] = cosval;
}

double sub_18F4145D8(double *a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v17;
  _BYTE v18[36];
  uint64_t v19;
  double v20[4];

  v20[3] = *(double *)MEMORY[0x1E0C80C00];
  sub_18F4146D0(a1 + 2, a1 + 47, v20);
  v2 = a1[5];
  v3 = a1[4] + a1[4];
  v4 = a1[2];
  v5 = a1[3];
  v6 = v2 * (v5 + v5) - v4 * v3;
  v7 = -(v2 * (v4 + v4)) - v5 * v3;
  v8 = -1.0;
  v9 = v4 * (v4 + v4) + -1.0 + v5 * (v5 + v5);
  v19 = 0x3F8000003F800000;
  v17.i64[0] = 0;
  v17.i64[1] = 0x3F80000000000000;
  *(float *)&v3 = v20[0];
  *(float *)&v2 = v20[1];
  *(float *)&v4 = v20[2];
  *(float *)&v5 = v6;
  v10 = v7;
  *(float *)&v6 = v9;
  if (sub_18F3D3C08((float *)&v19, &v17, (uint64_t)v18, *(float *)&v3, *(float *)&v2, *(float *)&v4, *(float *)&v5, v10, *(float *)&v6, v9, v7, v11, v12, v13, v14, v15, 0x3F800000uLL, 0.0))
  {
    return sub_18F3D4D58(v17.f32);
  }
  return v8;
}

double sub_18F4146D0(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double result;

  v4 = a1[2];
  v3 = a1[3];
  v5 = v3 + v3;
  v6 = a1[1];
  v7 = *a1 + *a1;
  v8 = v6 + v6;
  v9 = v3 * (v3 + v3);
  v10 = (v6 + v6) * v6 + -1.0;
  v11 = (v4 + v4) * v4 + -1.0;
  v12 = v7 * v6;
  v13 = v7 * v4;
  v14 = v3 * v7;
  v15 = v8 * v4;
  v16 = v3 * v8;
  v17 = v5 * v4;
  *a3 = (v12 + v17) * a2[1] + (v9 + (*a1 + *a1) * *a1 + -1.0) * *a2 + (v13 - v16) * a2[2];
  a3[1] = (v9 + v10) * a2[1] + (v12 - v17) * *a2 + (v14 + v15) * a2[2];
  result = (v15 - v14) * a2[1] + (v13 + v16) * *a2 + (v9 + v11) * a2[2];
  a3[2] = result;
  return result;
}

void sub_18F414784(uint64_t a1, double *a2, double *a3, double *a4, _QWORD *a5)
{
  float64x2_t v10;
  float v11;
  double v12;
  float v13;
  double v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float32x2_t v19;
  float v20;
  double v21;
  double v22;
  NSObject *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  NSObject *v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  float v33;
  double v34;
  double v35;
  double v36;
  int v37;
  double v38;
  double v39;
  int v40;
  NSObject *v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t i;
  float v54;
  float v55;
  float v56;
  float v57;
  double v58;
  double v59;
  double v60;
  double v61;
  NSObject *v62;
  double v63;
  double v64;
  double v65;
  uint64_t v66;
  int v67;
  BOOL v68;
  int v69;
  NSObject *v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  double v82;
  double v83;
  double v84;
  uint64_t v85;
  char *v86;
  float v87;
  float v88;
  float v89;
  unint64_t v90;
  float v91;
  float v92;
  NSObject *v93;
  char *v94;
  double v95;
  uint64_t v96;
  float v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  NSObject *v110;
  NSObject *v111;
  unint64_t v112;
  float v113;
  NSObject *v114;
  char *v115;
  double v116;
  double v117;
  double v118;
  double v119;
  char *v120;
  double v121;
  double v122;
  double v123;
  unint64_t v124;
  float v125;
  BOOL v126;
  double v127;
  float v128;
  NSObject *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  int v138;
  int *v139;
  double v140;
  NSObject *v141;
  NSObject *v142;
  unint64_t v143;
  NSObject *v144;
  uint64_t v145;
  uint64_t v146;
  double v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  float v160;
  float v161;
  float v162;
  _BYTE v163[24];
  double v164;
  __int16 v165;
  uint64_t v166;
  __int16 v167;
  uint64_t v168;
  __int16 v169;
  uint64_t v170;
  __int16 v171;
  uint64_t v172;
  _BYTE buf[24];
  double v174;
  __int16 v175;
  double v176;
  __int16 v177;
  double v178;
  __int16 v179;
  double v180;
  __int16 v181;
  uint64_t v182;
  char v183[48];
  double v184;
  double v185;
  double v186;
  _DWORD v187[3];
  _DWORD v188[3];
  _BYTE v189[24];
  double v190;
  __int16 v191;
  double v192;
  __int16 v193;
  double v194;
  __int16 v195;
  double v196;
  __int16 v197;
  uint64_t v198;
  _DWORD v199[9];
  uint64_t v200;

  v200 = *MEMORY[0x1E0C80C00];
  v10.f64[0] = *a2;
  v11 = *a2;
  *(float *)(a1 + 352) = v11;
  v12 = *a3;
  v13 = *a3;
  *(float *)(a1 + 356) = v13;
  v14 = *a4;
  v15 = *a4;
  *(float *)(a1 + 360) = v15;
  if (*(double *)(a1 + 176) < 0.0)
  {
    sub_18F20D06C(a1 + 16, a2, a3, a4);
    *(_QWORD *)(a1 + 176) = *a5;
    v16 = *a2;
    *(float *)(a1 + 848) = v16;
    v17 = *a3;
    *(float *)(a1 + 852) = v17;
    v18 = *a4;
    *(float *)(a1 + 856) = v18;
    *(_DWORD *)(a1 + 888) = 0;
    sub_18F20A0A8((double *)(a1 + 864), (double *)(a1 + 16));
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v10.f64[1] = v12;
  v19 = vcvt_f32_f64(vmlaq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 848)), (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL)), (float64x2_t)vdupq_n_s64(0x3FECCCCCCCCCCCCDuLL), v10));
  *(float32x2_t *)(a1 + 848) = v19;
  v20 = *(float *)(a1 + 856) * 0.1 + v14 * 0.9;
  *(float *)(a1 + 856) = v20;
  *(double *)buf = v19.f32[0];
  *(double *)v189 = v19.f32[1];
  *(double *)v163 = v20;
  sub_18F3D6AC8(a1 + 608, (double *)buf);
  sub_18F3D6AC8(a1 + 688, (double *)v189);
  sub_18F3D6AC8(a1 + 768, (double *)v163);
  *(_QWORD *)(a1 + 176) = *a5;
  if (!*(_DWORD *)(a1 + 148))
    return;
  v21 = *(double *)a5;
  v22 = *(double *)(a1 + 168);
  if (*(double *)a5 < v22)
    return;
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
    v23 = qword_1EE16D6D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
    {
      v24 = *a2;
      v25 = *a3;
      v26 = *a4;
      v27 = *(double *)a5;
      *(_DWORD *)buf = 134218752;
      *(double *)&buf[4] = v24;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v25;
      *(_WORD *)&buf[22] = 2048;
      v174 = v26;
      v175 = 2048;
      v176 = v27;
      _os_log_impl(&dword_18F1DC000, v23, OS_LOG_TYPE_DEBUG, "[Accelerometer9] x,%f,y,%f,z,%f,timestamp,%lf", buf, 0x2Au);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
      v116 = *a2;
      v117 = *a3;
      v118 = *a4;
      v119 = *(double *)a5;
      *(_DWORD *)v189 = 134218752;
      *(double *)&v189[4] = v116;
      *(_WORD *)&v189[12] = 2048;
      *(double *)&v189[14] = v117;
      *(_WORD *)&v189[22] = 2048;
      v190 = v118;
      v191 = 2048;
      v192 = v119;
      v120 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v120);
      if (v120 != buf)
        free(v120);
    }
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
    v28 = qword_1EE16D6D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
    {
      v29 = *(float *)(a1 + 156);
      v30 = *(float *)(a1 + 160);
      v31 = *(float *)(a1 + 164);
      v32 = *(_QWORD *)(a1 + 584);
      if (v32)
        v33 = *(float *)(a1 + 536) / (float)v32;
      else
        v33 = 0.0;
      *(_DWORD *)buf = 134218752;
      *(double *)&buf[4] = v29;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v30;
      *(_WORD *)&buf[22] = 2048;
      v174 = v31;
      v175 = 2048;
      v176 = v33;
      _os_log_impl(&dword_18F1DC000, v28, OS_LOG_TYPE_DEBUG, "[RotationRate9] %.3f, %.3f, %.3f, %.3f", buf, 0x2Au);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
      v121 = *(float *)(a1 + 156);
      v122 = *(float *)(a1 + 160);
      v123 = *(float *)(a1 + 164);
      v124 = *(_QWORD *)(a1 + 584);
      if (v124)
        v125 = *(float *)(a1 + 536) / (float)v124;
      else
        v125 = 0.0;
      *(_DWORD *)v189 = 134218752;
      *(double *)&v189[4] = v121;
      *(_WORD *)&v189[12] = 2048;
      *(double *)&v189[14] = v122;
      *(_WORD *)&v189[22] = 2048;
      v190 = v123;
      v191 = 2048;
      v192 = v125;
      v137 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v137);
      if (v137 != buf)
        free(v137);
    }
  }
  v34 = *a2;
  v35 = *a3;
  v36 = *a4;
  LODWORD(v22) = *(_DWORD *)(a1 + 136);
  v161 = *(float *)(a1 + 140);
  v162 = *(float *)&v22;
  LODWORD(v21) = *(_DWORD *)(a1 + 144);
  v37 = *(_DWORD *)(a1 + 148);
  v160 = *(float *)&v21;
  sub_18F413658(a1, v21, *(int32x2_t *)&v22);
  v38 = sqrt(v35 * v35 + v34 * v34 + v36 * v36);
  v39 = fabs(v38 + -1.0) / v38;
  if (v39 > 0.1)
    return;
  if (!*(_BYTE *)(a1 + 512) || *(_DWORD *)(a1 + 904))
    goto LABEL_22;
  v87 = fabsf(*(float *)(a1 + 156));
  if (v87 > 10.0)
    goto LABEL_92;
  v88 = fabsf(*(float *)(a1 + 160));
  if (v88 > 10.0)
    goto LABEL_92;
  v89 = fabsf(*(float *)(a1 + 164));
  if (v89 > 10.0)
    goto LABEL_92;
  v90 = *(_QWORD *)(a1 + 584);
  if (v90)
  {
    if ((float)(*(float *)(a1 + 536) / (float)v90) > 10.0)
      goto LABEL_92;
  }
  if (v87 > 3.14159265
    || v88 > 3.14159265
    || v89 > 3.14159265
    || (!v90 ? (v91 = 0.0) : (v91 = *(float *)(a1 + 536) / (float)v90), v91 > 3.14159265))
  {
    if (v90 < 2
      || (v92 = (float)((float)v90 * *(float *)(a1 + 540)) - (float)(*(float *)(a1 + 536) * *(float *)(a1 + 536)),
          v92 < 0.0)
      || (float)(v92 / (float)((v90 - 1) * v90)) < 1.25)
    {
      sub_18F20A0A8((double *)(a1 + 864), (double *)(a1 + 16));
      if (!*(_BYTE *)(a1 + 472))
      {
        *(_DWORD *)(a1 + 888) = 0;
        goto LABEL_28;
      }
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
      v93 = off_1ECEDEE70;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v93, OS_LOG_TYPE_DEBUG, "rotating and going through.", buf, 2u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
        *(_WORD *)v189 = 0;
        v94 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v94);
        if (v94 != buf)
          free(v94);
      }
LABEL_22:
      v40 = *(unsigned __int8 *)(a1 + 472);
      *(_DWORD *)(a1 + 888) = 0;
      if (v40)
      {
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
        v41 = off_1ECEDEE70;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218752;
          *(double *)&buf[4] = v34;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v35;
          *(_WORD *)&buf[22] = 2048;
          v174 = v36;
          v175 = 2048;
          v176 = v38;
          _os_log_impl(&dword_18F1DC000, v41, OS_LOG_TYPE_DEBUG, "accM, (%.4f, %.4f, %.4f), mag, %.3f", buf, 0x2Au);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE78 != -1)
            dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
          *(_DWORD *)v189 = 134218752;
          *(double *)&v189[4] = v34;
          *(_WORD *)&v189[12] = 2048;
          *(double *)&v189[14] = v35;
          *(_WORD *)&v189[22] = 2048;
          v190 = v36;
          v191 = 2048;
          v192 = v38;
          v136 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v136);
          if (v136 != buf)
            free(v136);
        }
      }
LABEL_28:
      v42 = v39
          * (0.015
           / (exp((0.9- sqrtf((float)((float)((float)(v161 / (float)v37) * (float)(v161 / (float)v37))+ (float)((float)(v162 / (float)v37) * (float)(v162 / (float)v37)))+ (float)((float)(v160 / (float)v37) * (float)(v160 / (float)v37))))/ 0.08)+ 1.0))+ 0.00000900000032;
      if (*(_BYTE *)(a1 + 512) && !*(_DWORD *)(a1 + 904))
        v42 = v42 * 0.85;
      v43 = 0;
      v44 = 0;
      v45 = v35 / v38;
      v46 = *(double *)(a1 + 16);
      v47 = *(double *)(a1 + 24);
      v48 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
      v49 = *(double *)(a1 + 40);
      v50 = v49 * (v47 + v47) - v46 * v48;
      v51 = -(v49 * (v46 + v46)) - v47 * v48;
      v52 = v46 * (v46 + v46) + -1.0 + v47 * (v47 + v47);
      *(float *)&v46 = v51;
      *(float *)&v48 = v52;
      v199[0] = 0;
      v199[1] = LODWORD(v48);
      *(float *)&v199[2] = -*(float *)&v46;
      *(float *)&v47 = v50;
      *(float *)&v199[3] = -*(float *)&v48;
      v199[4] = 0;
      v199[5] = LODWORD(v47);
      v199[6] = LODWORD(v46);
      *(float *)&v199[7] = -*(float *)&v47;
      v199[8] = 0;
      do
      {
        for (i = 0; i != 9; i += 3)
          *(_DWORD *)&v189[v43 * 4 + i * 4] = v199[v43 + i];
        ++v44;
        ++v43;
      }
      while (v44 != 3);
      bzero((char *)&v192 + 2, 0x24uLL);
      v54 = v42;
      *(float *)v188 = v54;
      *(float *)&v188[1] = v54;
      *(float *)&v188[2] = v54;
      v55 = v34 / v38 - v50;
      v56 = v45 - v51;
      *(float *)v187 = v55;
      *(float *)&v187[1] = v56;
      v57 = v36 / v38 - v52;
      *(float *)&v187[2] = v57;
      sub_18F413F70(&v184, (uint64_t *)(a1 + 112), (uint64_t)v189, (uint64_t)v188, (uint64_t)v187, (uint64_t)v183);
      v58 = v51 * v185 + v184 * v50 + v186 * v52;
      v59 = v184 - v58 * v50;
      v60 = v185 - v58 * v51;
      v184 = v59;
      v185 = v60;
      v61 = v186 - v58 * v52;
      v186 = v61;
      sub_18F416728(a1, &v184);
      if (*(_BYTE *)(a1 + 472))
      {
        if (qword_1EE16D6D8 != -1)
          dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
        v62 = qword_1EE16D6D0;
        if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
        {
          v63 = *(double *)(a1 + 88);
          v64 = *(double *)(a1 + 96);
          v65 = *(double *)(a1 + 104);
          v66 = *(_QWORD *)(a1 + 176);
          *(_DWORD *)buf = 134219520;
          *(double *)&buf[4] = v59;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v60;
          *(_WORD *)&buf[22] = 2048;
          v174 = v61;
          v175 = 2048;
          v176 = v63;
          v177 = 2048;
          v178 = v64;
          v179 = 2048;
          v180 = v65;
          v181 = 2048;
          v182 = v66;
          _os_log_impl(&dword_18F1DC000, v62, OS_LOG_TYPE_DEBUG, "[KalmanFilterStates9-AccelUpdate] %f,%f,%f,%f,%f,%f,%f", buf, 0x48u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D6D8 != -1)
            dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
          v130 = *(_QWORD *)(a1 + 88);
          v131 = *(_QWORD *)(a1 + 96);
          v132 = *(_QWORD *)(a1 + 104);
          v133 = *(_QWORD *)(a1 + 176);
          *(_DWORD *)v163 = 134219520;
          *(double *)&v163[4] = v59;
          *(_WORD *)&v163[12] = 2048;
          *(double *)&v163[14] = v60;
          *(_WORD *)&v163[22] = 2048;
          v164 = v61;
          v165 = 2048;
          v166 = v130;
          v167 = 2048;
          v168 = v131;
          v169 = 2048;
          v170 = v132;
          v171 = 2048;
          v172 = v133;
          v134 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "void CLSensorFusion9AxisMekf::doAccelerometerMeasurementUpdate(double *, double)", "CoreLocation: %s\n", v134);
          if (v134 != buf)
            free(v134);
        }
      }
      if (*(_BYTE *)(a1 + 512))
        sub_18F20A0A8((double *)(a1 + 864), (double *)(a1 + 16));
      *(_QWORD *)(a1 + 896) = *a5;
      v67 = *(_DWORD *)(a1 + 904);
      v68 = __OFSUB__(v67, 1);
      v69 = v67 - 1;
      if (v69 < 0 == v68)
      {
        *(_DWORD *)(a1 + 904) = v69;
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
        v70 = off_1ECEDEE70;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v70, OS_LOG_TYPE_DEBUG, "Doing some crude updates to catch up.", buf, 2u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE78 != -1)
            dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
          *(_WORD *)v189 = 0;
          v135 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v135);
          if (v135 != buf)
            free(v135);
        }
      }
      if (*(_BYTE *)(a1 + 472))
      {
        if (qword_1EE16D6D8 != -1)
          dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
        v71 = qword_1EE16D6D0;
        if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
        {
          v72 = *(_QWORD *)(a1 + 64);
          v73 = *(_QWORD *)(a1 + 72);
          v74 = *(double *)(a1 + 80);
          v75 = *(double *)(a1 + 88);
          v76 = *(double *)(a1 + 96);
          v77 = *(double *)(a1 + 104);
          v78 = *a5;
          *(_DWORD *)buf = 134219520;
          *(_QWORD *)&buf[4] = v72;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v73;
          *(_WORD *)&buf[22] = 2048;
          v174 = v74;
          v175 = 2048;
          v176 = v75;
          v177 = 2048;
          v178 = v76;
          v179 = 2048;
          v180 = v77;
          v181 = 2048;
          v182 = v78;
          _os_log_impl(&dword_18F1DC000, v71, OS_LOG_TYPE_DEBUG, "[KalmanFilterStates9] %f,%f,%f,%f,%f,%f,%f", buf, 0x48u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D6D8 != -1)
            dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
          v79 = *(_QWORD *)(a1 + 64);
          v80 = *(_QWORD *)(a1 + 72);
          v81 = *(double *)(a1 + 80);
          v82 = *(double *)(a1 + 88);
          v83 = *(double *)(a1 + 96);
          v84 = *(double *)(a1 + 104);
          v85 = *a5;
          *(_DWORD *)v189 = 134219520;
          *(_QWORD *)&v189[4] = v79;
          *(_WORD *)&v189[12] = 2048;
          *(_QWORD *)&v189[14] = v80;
          *(_WORD *)&v189[22] = 2048;
          v190 = v81;
          v191 = 2048;
          v192 = v82;
          v193 = 2048;
          v194 = v83;
          v195 = 2048;
          v196 = v84;
          v197 = 2048;
          v198 = v85;
          v86 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v86);
LABEL_58:
          if (v86 != buf)
            free(v86);
          return;
        }
      }
      return;
    }
  }
  sub_18F3D677C(a1 + 592, (uint64_t)v163);
  v159 = sqrt(*(double *)&v163[16] * *(double *)&v163[16] + *(double *)&v163[8] * *(double *)&v163[8] + v164 * v164);
  v95 = *(double *)(a1 + 896);
  if (v95 > 0.0 && *(double *)(a1 + 176) - v95 > 15.0 && v159 < 0.3)
  {
    sub_18F3D684C(a1 + 592, (uint64_t)buf);
    if (fabs(sqrt(*(double *)&buf[16] * *(double *)&buf[16] + *(double *)&buf[8] * *(double *)&buf[8] + v174 * v174)+ -1.0) <= 0.1)
    {
      *(_DWORD *)(a1 + 904) = 10;
      if (!*(_BYTE *)(a1 + 472))
        goto LABEL_192;
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
      v114 = off_1ECEDEE70;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v114, OS_LOG_TYPE_DEBUG, "it's been too long. go through.", buf, 2u);
      }
      if (!sub_18F1FCA08(115, 2))
        goto LABEL_192;
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 == -1)
        goto LABEL_125;
      goto LABEL_224;
    }
  }
  if (*(_DWORD *)(a1 + 680) <= (int)((double)*(unint64_t *)(a1 + 600) * 0.5))
  {
LABEL_92:
    sub_18F20A0A8((double *)(a1 + 864), (double *)(a1 + 16));
    return;
  }
  v96 = *(_QWORD *)(a1 + 584);
  if (v96)
    v97 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 552)
                               + (((unint64_t)(v96 + *(_QWORD *)(a1 + 576) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((v96 + *(_QWORD *)(a1 + 576) - 1) & 0x3FF));
  else
    v97 = 0.0;
  if (v97 > 0.2)
  {
    sub_18F20A0A8((double *)(a1 + 864), (double *)(a1 + 16));
    if (*(_BYTE *)(a1 + 472))
    {
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
      v98 = off_1ECEDEE70;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
      {
        v99 = *(_QWORD *)(a1 + 864);
        v100 = *(_QWORD *)(a1 + 872);
        v101 = *(double *)(a1 + 880);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v99;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v100;
        *(_WORD *)&buf[22] = 2048;
        v174 = v101;
        _os_log_impl(&dword_18F1DC000, v98, OS_LOG_TYPE_DEBUG, "grabing gravity, %.4f, %.4f, %.4f", buf, 0x20u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
        v145 = *(_QWORD *)(a1 + 864);
        v146 = *(_QWORD *)(a1 + 872);
        v147 = *(double *)(a1 + 880);
        *(_DWORD *)v189 = 134218496;
        *(_QWORD *)&v189[4] = v145;
        *(_WORD *)&v189[12] = 2048;
        *(_QWORD *)&v189[14] = v146;
        *(_WORD *)&v189[22] = 2048;
        v190 = v147;
        v148 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v148);
        if (v148 != buf)
          free(v148);
      }
    }
  }
  if (v159 <= *(double *)(a1 + 504) * 0.75)
    goto LABEL_192;
  v102 = *(double *)(a1 + 864);
  v103 = *(double *)(a1 + 872);
  v104 = *(double *)(a1 + 880);
  v105 = fabs(*(double *)&v163[16] * v103 + *(double *)&v163[8] * v102 + v164 * v104);
  v158 = v159 - v105;
  v106 = *(double *)(a1 + 624);
  v107 = *(double *)(a1 + 704);
  v108 = *(double *)(a1 + 784);
  v109 = v103 * v107 + v106 * v102 + v108 * v104;
  v153 = v106 - v109 * v102;
  v154 = v107 - v109 * v103;
  v155 = v108 - v109 * v104;
  v156 = v109;
  v157 = fabs(v155) + fabs(v153) + fabs(v154);
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
    v110 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134219264;
      *(_QWORD *)&buf[4] = *(_QWORD *)&v163[8];
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = *(_QWORD *)&v163[16];
      *(_WORD *)&buf[22] = 2048;
      v174 = v164;
      v175 = 2048;
      v176 = v159;
      v177 = 2048;
      v178 = v105;
      v179 = 2048;
      v180 = v159 - v105;
      _os_log_impl(&dword_18F1DC000, v110, OS_LOG_TYPE_DEBUG, "std, %.3f, %.3f, %.3f, mag, %.3f, dot, %.3f, leftover, %.3f", buf, 0x3Eu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
      *(_DWORD *)v189 = 134219264;
      *(_QWORD *)&v189[4] = *(_QWORD *)&v163[8];
      *(_WORD *)&v189[12] = 2048;
      *(_QWORD *)&v189[14] = *(_QWORD *)&v163[16];
      *(_WORD *)&v189[22] = 2048;
      v190 = v164;
      v191 = 2048;
      v192 = v159;
      v193 = 2048;
      v194 = v105;
      v195 = 2048;
      v196 = v159 - v105;
      v149 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v149);
      if (v149 != buf)
        free(v149);
    }
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
    v111 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134219008;
      *(double *)&buf[4] = v153;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v154;
      *(_WORD *)&buf[22] = 2048;
      v174 = v155;
      v175 = 2048;
      v176 = v156;
      v177 = 2048;
      v178 = v157;
      _os_log_impl(&dword_18F1DC000, v111, OS_LOG_TYPE_DEBUG, "sum, %.3f, %.3f, %.3f, dot, %.3f, leftover, %.3f", buf, 0x34u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
      *(_DWORD *)v189 = 134219008;
      *(double *)&v189[4] = v153;
      *(_WORD *)&v189[12] = 2048;
      *(double *)&v189[14] = v154;
      *(_WORD *)&v189[22] = 2048;
      v190 = v155;
      v191 = 2048;
      v192 = v156;
      v193 = 2048;
      v194 = v157;
      v150 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v150);
      if (v150 != buf)
        free(v150);
    }
  }
  if (v158 > *(double *)(a1 + 504))
    goto LABEL_139;
  v112 = *(_QWORD *)(a1 + 584);
  if (v112)
    v113 = *(float *)(a1 + 536) / (float)v112;
  else
    v113 = 0.0;
  v126 = v113 <= 1.57079633;
  v127 = 0.0;
  if (!v126)
    v127 = 1.0;
  if (v157 > (v127 * 0.5 + 1.0) * 6.0)
  {
LABEL_139:
    *(_DWORD *)(a1 + 888) = 0;
    return;
  }
  if (v158 >= 0.01 || v157 >= 0.6)
  {
    v138 = *(_DWORD *)(a1 + 888) + 1;
    *(_DWORD *)(a1 + 888) = v138;
    if (!v112)
      goto LABEL_182;
    v139 = (int *)(a1 + 888);
    v128 = *(float *)(a1 + 536) / (float)v112;
  }
  else
  {
    if (!v112)
    {
      v138 = *(_DWORD *)(a1 + 888) + 1;
      *(_DWORD *)(a1 + 888) = v138;
      goto LABEL_182;
    }
    v128 = *(float *)(a1 + 536) / (float)v112;
    if (v128 > 0.5)
    {
      if (!*(_BYTE *)(a1 + 472))
        goto LABEL_192;
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
      v129 = off_1ECEDEE70;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v129, OS_LOG_TYPE_DEBUG, "===========Skip ahead.", buf, 2u);
      }
      if (!sub_18F1FCA08(115, 2))
        goto LABEL_192;
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 == -1)
        goto LABEL_125;
LABEL_224:
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
LABEL_125:
      *(_WORD *)v189 = 0;
      v115 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v115);
      if (v115 != buf)
        free(v115);
      goto LABEL_192;
    }
    v139 = (int *)(a1 + 888);
    v138 = *(_DWORD *)(a1 + 888) + 1;
    *(_DWORD *)(a1 + 888) = v138;
  }
  if (v128 > 1.0
    && *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 552) + (((v112 + *(_QWORD *)(a1 + 576) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                + 4 * ((v112 + *(_QWORD *)(a1 + 576) - 1) & 0x3FF)) < 0.2)
  {
    sub_18F3D684C(a1 + 592, (uint64_t)buf);
    v140 = sqrt(*(double *)&buf[16] * *(double *)&buf[16] + *(double *)&buf[8] * *(double *)&buf[8] + v174 * v174);
    if (fabs(v140 + -1.0) / v140 >= 0.025)
    {
      v138 = *v139;
    }
    else
    {
      if (*(_BYTE *)(a1 + 472))
      {
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
        v141 = off_1ECEDEE70;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v141, OS_LOG_TYPE_DEBUG, "Skip ahead------.", buf, 2u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE78 != -1)
            dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
          *(_WORD *)v189 = 0;
          v152 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v152);
          if (v152 != buf)
            free(v152);
        }
      }
      v138 = *v139 + 2;
      *v139 = v138;
    }
  }
LABEL_182:
  if (v138 >= *(_DWORD *)(a1 + 496))
  {
LABEL_192:
    if (*(_BYTE *)(a1 + 512))
    {
      if (v159 > 0.2)
      {
        v143 = *(_QWORD *)(a1 + 584);
        if (!v143
          || *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 552)
                                  + (((v143 + *(_QWORD *)(a1 + 576) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * ((v143 + *(_QWORD *)(a1 + 576) - 1) & 0x3FF)) < 0.75
          && (float)(*(float *)(a1 + 536) / (float)v143) < 1.0)
        {
          sub_18F3D684C(a1 + 592, (uint64_t)v189);
          v34 = *(double *)&v189[8];
          v35 = *(double *)&v189[16];
          v36 = v190;
          if (*(_BYTE *)(a1 + 472))
          {
            if (qword_1ECEDEE78 != -1)
              dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
            v144 = off_1ECEDEE70;
            if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F1DC000, v144, OS_LOG_TYPE_DEBUG, "using mean accel", buf, 2u);
            }
            if (sub_18F1FCA08(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1ECEDEE78 != -1)
                dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
              *(_WORD *)v163 = 0;
              v151 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v151);
              if (v151 != buf)
                free(v151);
            }
          }
          v38 = sqrt(v35 * v35 + v34 * v34 + v36 * v36);
          v39 = fabs(v38 + -1.0) / v38;
        }
      }
    }
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
    v142 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v142, OS_LOG_TYPE_DEBUG, "Taking another look.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
      *(_WORD *)v189 = 0;
      v86 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v86);
      goto LABEL_58;
    }
  }
}

double sub_18F416728(uint64_t a1, double *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  double result;
  _OWORD v8[2];
  double v9[4];

  sub_18F414504(v9, a2);
  sub_18F2010A8((double *)v8, v9, (double *)(a1 + 16));
  v4 = 0;
  v5 = v8[1];
  *(_OWORD *)(a1 + 16) = v8[0];
  *(_OWORD *)(a1 + 32) = v5;
  v6 = a1 + 88;
  do
  {
    result = a2[v4 + 3] + *(double *)(v6 + v4 * 8);
    *(double *)(v6 + v4 * 8) = result;
    ++v4;
  }
  while (v4 != 3);
  return result;
}

void sub_18F416798(uint64_t a1)
{
  sub_18F1E6174((_QWORD *)(a1 + 208));
  sub_18F1E6174((_QWORD *)(a1 + 280));
  *(_WORD *)(a1 + 440) = 256;
  *(_DWORD *)(a1 + 436) = 0;
}

BOOL sub_18F4167D0(uint64_t a1, uint64_t *a2, _BYTE *a3, _BYTE *a4, double *a5)
{
  int v10;
  NSObject *v11;
  double v12;
  int v13;
  int v14;
  _BOOL8 v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float v27;
  NSObject *v28;
  double v29;
  unint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  NSObject *v35;
  float32x2_t *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  NSObject *v42;
  NSObject *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  int v55;
  uint64_t v56;
  double v57;
  double v58;
  float v59;
  double v60;
  unint64_t v61;
  float v62;
  float v63;
  unint64_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  float v72;
  float v73;
  NSObject *v74;
  int v75;
  int v79;
  NSObject *v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  NSObject *v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  float v94;
  float v95;
  float v96;
  float v97;
  double v98;
  double v99;
  __int128 v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  NSObject *v105;
  NSObject *v106;
  NSObject *v107;
  int v108;
  int v109;
  NSObject *v110;
  double v111;
  int v112;
  int v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  double v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  double v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  double v136;
  double v137;
  double v138;
  double v139;
  char *v140;
  char *v141;
  char *v142;
  float v143;
  float v144[3];
  uint64_t v145;
  float v146;
  float v147[2];
  float v148;
  _BYTE v149[24];
  double v150;
  __int16 v151;
  _BYTE v152[14];
  _BYTE v153[24];
  uint64_t v154;
  float64x2_t v155;
  double v156;
  _BYTE v157[24];
  uint64_t v158;
  double v159[3];
  _BYTE buf[24];
  double v161;
  __int16 v162;
  _BYTE v163[14];
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 9) = 0;
  v10 = *((_DWORD *)a2 + 9);
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
    v11 = qword_1EE16D6D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
    {
      v12 = *a5;
      v13 = *a3;
      v14 = *a4;
      *(_DWORD *)buf = 134218752;
      *(double *)&buf[4] = v12;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v13;
      LOWORD(v161) = 1024;
      *(_DWORD *)((char *)&v161 + 2) = v14;
      _os_log_impl(&dword_18F1DC000, v11, OS_LOG_TYPE_DEBUG, "[CompassIntoKF] timestamp,%f,calibration level %d, compassHasAlignedToStableField %d, useMagneticRefX %d", buf, 0x1Eu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
      v111 = *a5;
      v112 = *a3;
      v113 = *a4;
      *(_DWORD *)v149 = 134218752;
      *(double *)&v149[4] = v111;
      *(_WORD *)&v149[12] = 1024;
      *(_DWORD *)&v149[14] = v10;
      *(_WORD *)&v149[18] = 1024;
      *(_DWORD *)&v149[20] = v112;
      LOWORD(v150) = 1024;
      *(_DWORD *)((char *)&v150 + 2) = v113;
      v114 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "CoreLocation: %s\n", v114);
      if (v114 != buf)
        free(v114);
    }
  }
  if (v10 <= 2)
  {
    if (v10 <= 0)
    {
      v15 = 0;
      *(_QWORD *)(a1 + 184) = 0xBFF0000000000000;
      *(_BYTE *)(a1 + 441) = 1;
      *(_BYTE *)(a1 + 11) = 0;
      return v15;
    }
    return 0;
  }
  if (*a4 && !*(_BYTE *)(a1 + 11) || *(double *)(a1 + 184) < 0.0)
    *(_BYTE *)(a1 + 441) = 1;
  if (*(double *)(a1 + 176) < 0.0)
  {
    if (!*(_BYTE *)(a1 + 472))
      return 0;
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
    v16 = qword_1EE16D6D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(_QWORD *)(a1 + 176);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v17;
      _os_log_impl(&dword_18F1DC000, v16, OS_LOG_TYPE_DEBUG, "[CompassIntoKF] fLastAccelTime,%f", buf, 0xCu);
    }
    if (!sub_18F1FCA08(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
    v115 = *(_QWORD *)(a1 + 176);
    *(_DWORD *)v149 = 134217984;
    *(_QWORD *)&v149[4] = v115;
    goto LABEL_175;
  }
  if (*a3)
  {
    if (*(_BYTE *)(a1 + 472))
    {
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
      v18 = qword_1EE16D6D0;
      if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_DEBUG, "[CompassIntoKF] magneticFieldAdjusted!", buf, 2u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D6D8 != -1)
          dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
        *(_WORD *)v149 = 0;
        v117 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "CoreLocation: %s\n", v117);
        if (v117 != buf)
          free(v117);
      }
    }
    v15 = 0;
    *(_WORD *)(a1 + 440) = 1;
    *(_DWORD *)(a1 + 432) = 0;
    return v15;
  }
  v20 = *(double *)(a1 + 40);
  v21 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
  v22 = *(double *)(a1 + 16);
  v23 = *(double *)(a1 + 24);
  v24 = v20 * (v23 + v23) - v22 * v21;
  v25 = -(v20 * (v22 + v22)) - v23 * v21;
  v159[0] = v24;
  v159[1] = v25;
  v26 = v22 * (v22 + v22) + -1.0 + v23 * (v23 + v23);
  v159[2] = v26;
  v27 = v25 * *(float *)(a1 + 160) + *(float *)(a1 + 156) * v24 + *(float *)(a1 + 164) * v26;
  *(float *)&v21 = *(float *)(a1 + 436) + (float)(v27 * 57.296) * *(double *)(a1 + 488);
  *(_DWORD *)(a1 + 436) = LODWORD(v21);
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
    v28 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
    {
      v29 = *(float *)(a1 + 436);
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v27;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v29;
      _os_log_impl(&dword_18F1DC000, v28, OS_LOG_TYPE_DEBUG, "rotAroundGrav, %.3f, sum, %.3f", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
      v118 = *(float *)(a1 + 436);
      *(_DWORD *)v149 = 134218240;
      *(double *)&v149[4] = v27;
      *(_WORD *)&v149[12] = 2048;
      *(double *)&v149[14] = v118;
      v119 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "CoreLocation: %s\n", v119);
      if (v119 != buf)
        free(v119);
    }
  }
  v30 = *(_QWORD *)(a1 + 584);
  v31 = 0.0;
  if (v30)
  {
    v32 = *(float *)(a1 + 536);
    v33 = v32 / (float)v30;
    if (v30 != 1)
    {
      v34 = (float)((float)v30 * *(float *)(a1 + 540)) - (float)(v32 * v32);
      if (v34 >= 0.0)
        v31 = v34 / (float)((v30 - 1) * v30);
    }
  }
  else
  {
    v33 = 0.0;
  }
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
    v35 = qword_1EE16D6D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v33;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v31;
      _os_log_impl(&dword_18F1DC000, v35, OS_LOG_TYPE_DEBUG, "[CompassIntoKF] omegaMag, %.3f, omegaVar, %.3f", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
      *(_DWORD *)v149 = 134218240;
      *(double *)&v149[4] = v33;
      *(_WORD *)&v149[12] = 2048;
      *(double *)&v149[14] = v31;
      v120 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "CoreLocation: %s\n", v120);
      if (v120 != buf)
        free(v120);
    }
  }
  *(_DWORD *)(a1 + 364) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 368) = *((_DWORD *)a2 + 1);
  *(_DWORD *)(a1 + 372) = *((_DWORD *)a2 + 2);
  if (!*a4 && *(_BYTE *)(a1 + 440))
  {
    v15 = 0;
    if (v31 >= 2.25 || fabsf(*(float *)(a1 + 436)) <= 90.0 || v33 >= 1.57079633)
      return v15;
    sub_18F1FD65C(a1 + 208, (float *)a2 + 11);
    sub_18F1FD65C(a1 + 280, (float *)a2 + 12);
    v61 = *(_QWORD *)(a1 + 272);
    if (v61 < *(_QWORD *)(a1 + 216))
      return 0;
    v62 = 0.0;
    v63 = 0.0;
    if (v61)
      v63 = *(float *)(a1 + 224) / (float)v61;
    v64 = *(_QWORD *)(a1 + 344);
    if (v64)
      v62 = *(float *)(a1 + 296) / (float)v64;
    v65 = *(float *)(a1 + 424);
    v66 = 0.0;
    v67 = 0.0;
    if (v61 >= 2)
    {
      v68 = (float)((float)v61 * *(float *)(a1 + 228)) - (float)(*(float *)(a1 + 224) * *(float *)(a1 + 224));
      if (v68 >= 0.0)
        v67 = v68 / (float)((v61 - 1) * v61);
    }
    v69 = vabds_f32(v63, v65);
    if (v64 >= 2)
    {
      v70 = (float)((float)v64 * *(float *)(a1 + 300)) - (float)(*(float *)(a1 + 296) * *(float *)(a1 + 296));
      v71 = (v64 - 1) * v64;
      if (v70 >= 0.0)
        v66 = v70 / (float)(unint64_t)v71;
      else
        v66 = 0.0;
    }
    v72 = vabds_f32(v62, *(float *)(a1 + 428));
    v73 = v69 / v65;
    if (*(_BYTE *)(a1 + 472))
    {
      v143 = v72;
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
      v74 = off_1ECEDEE70;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218752;
        *(double *)&buf[4] = v73;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v143;
        *(_WORD *)&buf[22] = 2048;
        v161 = v67;
        v162 = 2048;
        *(double *)v163 = v66;
        _os_log_impl(&dword_18F1DC000, v74, OS_LOG_TYPE_DEBUG, "FieldDiff, %.3f, %.3f, %.3f, %.3f", buf, 0x2Au);
      }
      v75 = sub_18F1FCA08(115, 2);
      v72 = v143;
      if (v75)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
        *(_DWORD *)v149 = 134218752;
        *(double *)&v149[4] = v73;
        *(_WORD *)&v149[12] = 2048;
        *(double *)&v149[14] = v143;
        *(_WORD *)&v149[22] = 2048;
        v150 = v67;
        v151 = 2048;
        *(double *)v152 = v66;
        v141 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "CoreLocation: %s\n", v141);
        if (v141 != buf)
          free(v141);
        v72 = v143;
      }
    }
    if (v73 < 0.07 && v72 < 4.0 && v67 < 2.25 && v66 < 4.0)
    {
      *(_DWORD *)(a1 + 432) = 0;
    }
    else
    {
      v79 = *(_DWORD *)(a1 + 432);
      *(_DWORD *)(a1 + 432) = v79 + 1;
      if (v79 < 2)
      {
        sub_18F1E6174((_QWORD *)(a1 + 208));
        sub_18F1E6174((_QWORD *)(a1 + 280));
        if (!*(_BYTE *)(a1 + 472))
          return 0;
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
        v107 = off_1ECEDEE70;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
        {
          v108 = *(_DWORD *)(a1 + 432);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v108;
          _os_log_impl(&dword_18F1DC000, v107, OS_LOG_TYPE_DEBUG, "Checking again for magField. checkcount, %d", buf, 8u);
        }
        if (!sub_18F1FCA08(115, 2))
          return 0;
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
        v109 = *(_DWORD *)(a1 + 432);
        *(_DWORD *)v149 = 67109120;
        *(_DWORD *)&v149[4] = v109;
        goto LABEL_175;
      }
      if (*(_BYTE *)(a1 + 472))
      {
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
        v80 = off_1ECEDEE70;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v80, OS_LOG_TYPE_DEBUG, "Aborted yawUpdate.", buf, 2u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE78 != -1)
            dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
          *(_WORD *)v149 = 0;
          v142 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "CoreLocation: %s\n", v142);
          if (v142 != buf)
            free(v142);
        }
      }
      sub_18F416798(a1);
    }
  }
  v36 = (float32x2_t *)(a1 + 364);
  if (*(_BYTE *)(a1 + 441))
  {
    if (!*a4)
    {
      *(_QWORD *)(a1 + 424) = *(uint64_t *)((char *)a2 + 44);
      *(float64x2_t *)v153 = vcvtq_f64_f32(*v36);
      *(double *)&v153[16] = *(float *)(a1 + 372);
      *(float64x2_t *)v149 = vnegq_f64(*(float64x2_t *)(a1 + 16));
      v81 = *(double *)(a1 + 40);
      *(double *)&v149[16] = -*(double *)(a1 + 32);
      v150 = v81;
      sub_18F4146D0((double *)v149, (double *)v153, (double *)(a1 + 400));
      v83 = *(double *)(a1 + 400);
      v82 = *(double *)(a1 + 408);
      v84 = *(double *)(a1 + 416);
      v85 = sqrt(v82 * v82 + v83 * v83 + v84 * v84);
      if (v85 <= 0.0)
      {
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
        v105 = off_1ECEDEE70;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v105, OS_LOG_TYPE_INFO, "Warning: Compass outputs field magnitude 0.", buf, 2u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE78 != -1)
            dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
          *(_WORD *)v157 = 0;
          v131 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "CoreLocation: %s\n", v131);
          if (v131 != buf)
            free(v131);
        }
        *(_QWORD *)(a1 + 184) = 0xBFF0000000000000;
      }
      else
      {
        *(double *)(a1 + 448) = v83 / v85;
        *(double *)(a1 + 456) = v82 / v85;
        *(double *)(a1 + 464) = v84 / v85;
        if (*(_BYTE *)(a1 + 472))
        {
          if (qword_1EE16D6D8 != -1)
            dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
          v86 = qword_1EE16D6D0;
          if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
          {
            v87 = *(_QWORD *)(a1 + 448);
            v88 = *(_QWORD *)(a1 + 456);
            v89 = *(double *)(a1 + 464);
            *(_DWORD *)buf = 134218496;
            *(_QWORD *)&buf[4] = v87;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v88;
            *(_WORD *)&buf[22] = 2048;
            v161 = v89;
            _os_log_impl(&dword_18F1DC000, v86, OS_LOG_TYPE_DEBUG, "[!!!CompassInertialReference] x,%f,y,%f,z,%f", buf, 0x20u);
          }
          if (sub_18F1FCA08(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE16D6D8 != -1)
              dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
            v132 = *(_QWORD *)(a1 + 448);
            v133 = *(_QWORD *)(a1 + 456);
            v134 = *(_QWORD *)(a1 + 464);
            *(_DWORD *)v157 = 134218496;
            *(_QWORD *)&v157[4] = v132;
            *(_WORD *)&v157[12] = 2048;
            *(_QWORD *)&v157[14] = v133;
            *(_WORD *)&v157[22] = 2048;
            v158 = v134;
            v135 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "CoreLocation: %s\n", v135);
            if (v135 != buf)
              free(v135);
          }
        }
        *(double *)(a1 + 184) = *a5;
        *(double *)(a1 + 200) = *a5;
      }
      return 0;
    }
    if (!*(_BYTE *)(a1 + 11))
    {
      v90 = *(double *)(a1 + 40);
      v91 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
      v92 = *(double *)(a1 + 16);
      v93 = *(double *)(a1 + 24);
      v94 = v90 * (v93 + v93) - v92 * v91;
      *(float *)&v91 = -(v90 * (v92 + v92)) - v93 * v91;
      *(float *)&v90 = -*(float *)&v91;
      *(float *)&v92 = v92 * (v92 + v92) + -1.0 + v93 * (v93 + v93);
      *(float *)&v91 = sqrtf((float)((float)(*(float *)&v91 * *(float *)&v91) + (float)(v94 * v94))+ (float)(*(float *)&v92 * *(float *)&v92));
      v147[0] = (float)-v94 / *(float *)&v91;
      v147[1] = *(float *)&v90 / *(float *)&v91;
      v148 = (float)-*(float *)&v92 / *(float *)&v91;
      v145 = *a2;
      v146 = *((float *)a2 + 2);
      v95 = (float)((float)(*(float *)&v90 / *(float *)&v91) * v146) - (float)(v148 * *((float *)&v145 + 1));
      *(float *)&v93 = (float)(v148 * *(float *)&v145) - (float)(v147[0] * v146);
      v96 = (float)(v147[0] * *((float *)&v145 + 1))
          - (float)((float)(*(float *)&v90 / *(float *)&v91) * *(float *)&v145);
      v97 = sqrtf((float)((float)(*(float *)&v93 * *(float *)&v93) + (float)(v95 * v95)) + (float)(v96 * v96));
      v144[0] = v95 / v97;
      v144[1] = *(float *)&v93 / v97;
      v144[2] = v96 / v97;
      *(float *)&v145 = (float)((float)(*(float *)&v93 / v97) * v148)
                      - (float)((float)(v96 / v97) * (float)(*(float *)&v90 / *(float *)&v91));
      *((float *)&v145 + 1) = (float)((float)(v96 / v97) * v147[0]) - (float)((float)(v95 / v97) * v148);
      v146 = (float)((float)(v95 / v97) * (float)(*(float *)&v90 / *(float *)&v91))
           - (float)((float)(*(float *)&v93 / v97) * v147[0]);
      sub_18F3EED18((double *)v149, (float *)&v145, v144, v147);
      v98 = *(double *)&v149[16];
      v99 = v150;
      v100 = *(_OWORD *)v149;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)&v149[8];
      *(double *)(a1 + 24) = v98;
      *(double *)(a1 + 32) = v99;
      *(_QWORD *)(a1 + 40) = v100;
      *(_BYTE *)(a1 + 11) = 1;
      *(double *)(a1 + 184) = *a5;
      *(_BYTE *)(a1 + 441) = 0;
      *(double *)v157 = -*((double *)&v100 + 1);
      *(double *)&v157[8] = -v98;
      *(double *)&v157[16] = -v99;
      v158 = v100;
      v155 = vcvtq_f64_f32(*v36);
      v156 = *(float *)(a1 + 372);
      sub_18F4146D0((double *)v157, v155.f64, (double *)(a1 + 376));
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
      v101 = off_1ECEDEE70;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
      {
        v102 = *(_QWORD *)(a1 + 376);
        v103 = *(_QWORD *)(a1 + 384);
        v104 = *(double *)(a1 + 392);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v102;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v103;
        *(_WORD *)&buf[22] = 2048;
        v161 = v104;
        _os_log_impl(&dword_18F1DC000, v101, OS_LOG_TYPE_DEBUG, "fCorrected, %.3f, %.3f, %.3f", buf, 0x20u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
        v127 = *(_QWORD *)(a1 + 376);
        v128 = *(_QWORD *)(a1 + 384);
        v129 = *(_QWORD *)(a1 + 392);
        *(_DWORD *)v153 = 134218496;
        *(_QWORD *)&v153[4] = v127;
        *(_WORD *)&v153[12] = 2048;
        *(_QWORD *)&v153[14] = v128;
        *(_WORD *)&v153[22] = 2048;
        v154 = v129;
        v130 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "CoreLocation: %s\n", v130);
        if (v130 != buf)
          free(v130);
      }
      v15 = 1;
      *(_BYTE *)(a1 + 9) = 1;
      *(_QWORD *)(a1 + 456) = 0;
      *(_QWORD *)(a1 + 464) = 0;
      *(_QWORD *)(a1 + 448) = 0x3FF0000000000000;
      *(double *)(a1 + 200) = *a5;
      return v15;
    }
    if (*(_BYTE *)(a1 + 472))
    {
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
      v37 = qword_1EE16D6D0;
      if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
      {
        v38 = *(_QWORD *)(a1 + 448);
        v39 = *(_QWORD *)(a1 + 456);
        v40 = *(double *)(a1 + 464);
        v41 = *a5;
        *(_DWORD *)buf = 134219008;
        *(_QWORD *)&buf[4] = v38;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v39;
        *(_WORD *)&buf[22] = 2048;
        v161 = v40;
        v162 = 1024;
        *(_DWORD *)v163 = v10;
        *(_WORD *)&v163[4] = 2048;
        *(double *)&v163[6] = v41;
        _os_log_impl(&dword_18F1DC000, v37, OS_LOG_TYPE_DEBUG, "[!!!CompassInertialReference] x,%f,y,%f,z,%f,calibrationLevel,%d,timestamp,%lf", buf, 0x30u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D6D8 != -1)
          dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
        v122 = *(_QWORD *)(a1 + 448);
        v123 = *(_QWORD *)(a1 + 456);
        v124 = *(double *)(a1 + 464);
        v125 = *a5;
        *(_DWORD *)v149 = 134219008;
        *(_QWORD *)&v149[4] = v122;
        *(_WORD *)&v149[12] = 2048;
        *(_QWORD *)&v149[14] = v123;
        *(_WORD *)&v149[22] = 2048;
        v150 = v124;
        v151 = 1024;
        *(_DWORD *)v152 = v10;
        *(_WORD *)&v152[4] = 2048;
        *(double *)&v152[6] = v125;
        v126 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "CoreLocation: %s\n", v126);
        if (v126 != buf)
          free(v126);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 440))
    return 0;
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
    v42 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v42, OS_LOG_TYPE_DEBUG, "UpdatingYaw!", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
      *(_WORD *)v149 = 0;
      v121 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "CoreLocation: %s\n", v121);
      if (v121 != buf)
        free(v121);
    }
  }
  v15 = 0;
  if (v33 <= 5.0 && v31 <= 8.0)
  {
    if (*a5 < *(double *)(a1 + 168))
      return 0;
    *(double *)(a1 + 184) = *a5;
    if (*(_BYTE *)(a1 + 472))
    {
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
      v43 = qword_1EE16D6D0;
      if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
      {
        v44 = *(float *)(a1 + 364);
        v45 = *(float *)(a1 + 368);
        v46 = *(float *)(a1 + 372);
        v47 = *a5;
        *(_DWORD *)buf = 134218752;
        *(double *)&buf[4] = v44;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v45;
        *(_WORD *)&buf[22] = 2048;
        v161 = v46;
        v162 = 2048;
        *(double *)v163 = v47;
        _os_log_impl(&dword_18F1DC000, v43, OS_LOG_TYPE_DEBUG, "[Magnetometer9] x,%f,y,%f,z,%f,timestamp,%lf", buf, 0x2Au);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D6D8 != -1)
          dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
        v136 = *(float *)(a1 + 364);
        v137 = *(float *)(a1 + 368);
        v138 = *(float *)(a1 + 372);
        v139 = *a5;
        *(_DWORD *)v149 = 134218752;
        *(double *)&v149[4] = v136;
        *(_WORD *)&v149[12] = 2048;
        *(double *)&v149[14] = v137;
        *(_WORD *)&v149[22] = 2048;
        v150 = v138;
        v151 = 2048;
        *(double *)v152 = v139;
        v140 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "CoreLocation: %s\n", v140);
        if (v140 != buf)
          free(v140);
      }
    }
    v48 = *(float *)(a1 + 364);
    v49 = *(float *)(a1 + 368);
    v50 = *(float *)(a1 + 372);
    v51 = sqrt(v49 * v49 + v48 * v48 + v50 * v50);
    if (v51 <= 0.0)
    {
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
      v106 = off_1ECEDEE70;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v106, OS_LOG_TYPE_INFO, "Warning: Hey! Compass outputs field magnitude 0.", buf, 2u);
      }
      if (!sub_18F1FCA08(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
      *(_WORD *)v149 = 0;
    }
    else
    {
      v52 = v48 / v51;
      v53 = v49 / v51;
      *(double *)v149 = v52;
      *(double *)&v149[8] = v53;
      v54 = v50 / v51;
      *(double *)&v149[16] = v54;
      v55 = *a4;
      if (!*a4)
        goto LABEL_80;
      v56 = 0;
      v57 = -(v25 * v53 + v52 * v24 + v54 * v26);
      do
      {
        *(double *)&v149[v56 * 8] = *(double *)&v149[v56 * 8] + v57 * v159[v56];
        ++v56;
      }
      while (v56 != 3);
      v58 = sqrt(*(double *)&v149[8] * *(double *)&v149[8]+ *(double *)v149 * *(double *)v149+ *(double *)&v149[16] * *(double *)&v149[16]);
      if (v58 > 0.001)
      {
        *(double *)v149 = *(double *)v149 / v58;
        *(double *)&v149[8] = *(double *)&v149[8] / v58;
        *(double *)&v149[16] = *(double *)&v149[16] / v58;
LABEL_80:
        v59 = sub_18F4184D0(a1, (double *)v149, v10, v55 != 0);
        *(float64x2_t *)buf = vnegq_f64(*(float64x2_t *)(a1 + 16));
        v60 = *(double *)(a1 + 40);
        *(double *)&buf[16] = -*(double *)(a1 + 32);
        v161 = v60;
        *(float64x2_t *)v157 = vcvtq_f64_f32(*v36);
        *(double *)&v157[16] = *(float *)(a1 + 372);
        sub_18F4146D0((double *)buf, (double *)v157, (double *)(a1 + 376));
        v15 = v59 >= 0.1;
        if (v59 < 0.1)
        {
          sub_18F416798(a1);
          *(_BYTE *)(a1 + 440) = 0;
        }
        return v15;
      }
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
      v110 = off_1ECEDEE70;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v110, OS_LOG_TYPE_INFO, "Warning: Hey! Compass outputs field magnitude 0.", buf, 2u);
      }
      if (!sub_18F1FCA08(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953788);
      *(_WORD *)v157 = 0;
    }
LABEL_175:
    v116 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "CoreLocation: %s\n", v116);
    if (v116 != buf)
      free(v116);
    return 0;
  }
  return v15;
}

float sub_18F4184D0(uint64_t a1, double *a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float v18;
  float v19;
  double v20;
  float v21;
  uint64_t i;
  double v23;
  double v24;
  double v25;
  double v26;
  float v27;
  float v28;
  float v29;
  double v30;
  double v31;
  double v32;
  float v33;
  NSObject *v34;
  uint64_t v35;
  NSObject *v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  NSObject *v43;
  double v44;
  double v45;
  double v46;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  float v52;
  float v53;
  double v54;
  uint8_t buf[4];
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  _BYTE v62[18];
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  _BYTE v73[48];
  double v74;
  double v75;
  double v76;
  _DWORD v77[3];
  int32x2_t v78;
  int v79;
  _BYTE v80[36];
  uint64_t v81;
  _DWORD v82[9];
  double v83;
  double v84;
  double v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 9) = 1;
  sub_18F4146D0((double *)(a1 + 16), (double *)(a1 + 448), &v83);
  v8 = 0;
  v9 = 0;
  v10 = *(double *)(a1 + 32);
  v11 = *(double *)(a1 + 40);
  v13 = *(double *)(a1 + 16);
  v12 = *(double *)(a1 + 24);
  v14 = v11 * (v12 + v12);
  v15 = -(v11 * (v13 + v13));
  v16 = v83;
  v17 = v84;
  v18 = v83;
  v19 = v84;
  v20 = v85;
  v21 = v85;
  v82[0] = 0;
  *(float *)&v82[1] = v21;
  *(float *)&v82[2] = -v19;
  v52 = -v19;
  *(float *)&v82[3] = -v21;
  v82[4] = 0;
  *(float *)&v82[5] = v18;
  *(float *)&v82[6] = v19;
  v53 = v19;
  *(float *)&v82[7] = -v18;
  v82[8] = 0;
  do
  {
    for (i = 0; i != 9; i += 3)
      *(_DWORD *)&v80[v8 * 4 + i * 4] = v82[v8 + i];
    ++v9;
    ++v8;
  }
  while (v9 != 3);
  v23 = v10 + v10;
  v24 = v14 - v13 * v23;
  v25 = v15 - v12 * v23;
  v26 = v13 * (v13 + v13) + -1.0 + v12 * (v12 + v12);
  bzero(&v81, 0x24uLL);
  v78 = vdup_n_s32(0x368637BDu);
  v79 = 914765757;
  v27 = *a2 - v16;
  v28 = a2[1] - v17;
  *(float *)v77 = v27;
  *(float *)&v77[1] = v28;
  v29 = a2[2] - v20;
  *(float *)&v77[2] = v29;
  sub_18F413F70(&v74, (uint64_t *)(a1 + 112), (uint64_t)v80, (uint64_t)&v78, (uint64_t)v77, (uint64_t)v73);
  v30 = v25 * v75 + v74 * v24 + v76 * v26;
  v74 = v24 * v30;
  v75 = v25 * v30;
  v31 = v26 * v30;
  v32 = v24 * v30;
  v76 = v31;
  v54 = v75;
  v33 = sqrt(v75 * v75 + v74 * v74 + v31 * v31) * 57.2957802;
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
    v34 = qword_1EE16D6D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
    {
      v35 = *(_QWORD *)(a1 + 184);
      *(_DWORD *)buf = 134218752;
      v56 = v16;
      v57 = 2048;
      v58 = v17;
      v59 = 2048;
      v60 = v20;
      v61 = 2048;
      *(_QWORD *)v62 = v35;
      _os_log_impl(&dword_18F1DC000, v34, OS_LOG_TYPE_DEBUG, "[ExpectedCompass] %f,%f,%f,%f", buf, 0x2Au);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
      v48 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "float CLSensorFusion9AxisMekf::doCompassMeasurementUpdate(double *, double, int, BOOL)", "CoreLocation: %s\n", v48);
      if (v48 != (char *)buf)
        free(v48);
    }
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
    v36 = qword_1EE16D6D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
    {
      v37 = *a2;
      v38 = a2[1];
      v39 = a2[2];
      v40 = *(_QWORD *)(a1 + 184);
      *(_DWORD *)buf = 134219008;
      v56 = v37;
      v57 = 2048;
      v58 = v38;
      v59 = 2048;
      v60 = v39;
      v61 = 1024;
      *(_DWORD *)v62 = a3;
      *(_WORD *)&v62[4] = 2048;
      *(_QWORD *)&v62[6] = v40;
      _os_log_impl(&dword_18F1DC000, v36, OS_LOG_TYPE_DEBUG, "[TrueCompass] %f,%f,%f,%d,%f", buf, 0x30u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
      v49 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "float CLSensorFusion9AxisMekf::doCompassMeasurementUpdate(double *, double, int, BOOL)", "CoreLocation: %s\n", v49);
      if (v49 != (char *)buf)
        free(v49);
    }
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
    v41 = qword_1EE16D6D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
    {
      v42 = *(_QWORD *)(a1 + 184);
      *(_DWORD *)buf = 134220288;
      v56 = 0.0;
      v57 = 2048;
      v58 = v21;
      v59 = 2048;
      v60 = v52;
      v61 = 2048;
      *(double *)v62 = (float)-v21;
      *(_WORD *)&v62[8] = 2048;
      *(_QWORD *)&v62[10] = 0;
      v63 = 2048;
      v64 = v18;
      v65 = 2048;
      v66 = v53;
      v67 = 2048;
      v68 = (float)-v18;
      v69 = 2048;
      v70 = 0;
      v71 = 2048;
      v72 = v42;
      _os_log_impl(&dword_18F1DC000, v41, OS_LOG_TYPE_DEBUG, "[MagCCross] %f,%f,%f,%f,%f,%f,%f,%f,%f,%f", buf, 0x66u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
      v50 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "float CLSensorFusion9AxisMekf::doCompassMeasurementUpdate(double *, double, int, BOOL)", "CoreLocation: %s\n", v50);
      if (v50 != (char *)buf)
        free(v50);
    }
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
    v43 = qword_1EE16D6D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
    {
      v44 = fabsf(*(float *)(a1 + 436));
      v45 = *(double *)(a1 + 184);
      *(_DWORD *)buf = 134219264;
      v56 = v32;
      v57 = 2048;
      v58 = v54;
      v59 = 2048;
      v60 = v31;
      v61 = 2048;
      *(double *)v62 = v33;
      *(_WORD *)&v62[8] = 2048;
      *(double *)&v62[10] = v44;
      v63 = 2048;
      v64 = v45;
      _os_log_impl(&dword_18F1DC000, v43, OS_LOG_TYPE_DEBUG, "[MagCorrectionDX] %f,%f,%f,angle,%.3f,sumRot,%.3f,%f", buf, 0x3Eu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2955168);
      v51 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "float CLSensorFusion9AxisMekf::doCompassMeasurementUpdate(double *, double, int, BOOL)", "CoreLocation: %s\n", v51);
      if (v51 != (char *)buf)
        free(v51);
    }
  }
  if (a4 && v33 > 3.0)
  {
    v46 = (float)(sqrtf(v33) / v33);
    v74 = v32 * v46;
    v75 = v54 * v46;
    v76 = v31 * v46;
  }
  sub_18F416728(a1, &v74);
  return v33;
}

double sub_18F418E70(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

double sub_18F418E78(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

double sub_18F418E80(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

double sub_18F418E88(uint64_t a1)
{
  return *(double *)(a1 + 40);
}

uint64_t sub_18F418E90(_DWORD *a1, _DWORD *a2)
{
  *a2 = a1[39];
  a2[1] = a1[40];
  a2[2] = a1[41];
  return 1;
}

BOOL sub_18F418EB0(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float v10;
  _BOOL8 result;

  v2 = *(double *)(a1 + 176);
  if (v2 <= 0.0)
  {
    *(_QWORD *)a2 = 0;
    v10 = 0.0;
  }
  else
  {
    v3 = *(double *)(a1 + 40);
    v4 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
    v5 = *(double *)(a1 + 16);
    v6 = *(double *)(a1 + 24);
    v7 = v3 * (v6 + v6) - v5 * v4;
    v8 = -(v3 * (v5 + v5)) - v6 * v4;
    v9 = v5 * (v5 + v5) + -1.0 + v6 * (v6 + v6);
    *(float *)&v5 = *(float *)(a1 + 352) - v7;
    *(_DWORD *)a2 = LODWORD(v5);
    *(float *)&v8 = *(float *)(a1 + 356) - v8;
    *(_DWORD *)(a2 + 4) = LODWORD(v8);
    v10 = *(float *)(a1 + 360) - v9;
  }
  result = v2 > 0.0;
  *(float *)(a2 + 8) = v10;
  return result;
}

uint64_t sub_18F418F40(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 9);
}

uint64_t sub_18F418F48(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 10);
}

float sub_18F418F50(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

os_log_t sub_18F418F5C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Sensors");
  qword_1EE16D6D0 = (uint64_t)result;
  return result;
}

uint64_t sub_18F419700(const char *a1, int a2, int a3, signed int a4, const char *a5, char *__src, ...)
{
  va_list va;

  va_start(va, __src);
  if (qword_1ECEDFE38 != -1)
    dispatch_once(&qword_1ECEDFE38, &unk_1E29535E8);
  if (a3)
    return sub_18F3EFD78(qword_1ECEDFE30, a1, a2, a4, a5, __src, va);
  else
    return sub_18F3EF424(qword_1ECEDFE30, a1, a2, a4, a5, __src, va);
}

uint64_t sub_18F41A4B8(float a1)
{
  NSObject *v3;
  char *v4;
  uint8_t buf[4];
  double v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a1 < 0.0)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E29537A8);
    v3 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      v6 = a1;
      _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_FAULT, "Assertion failed: arg >= 0.0, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMFFTProcessor.cpp, line 41,arg,%f.", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E29537A8);
      v4 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "static int CMFFTProcessor::idxRound(scalar_32)", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  return (int)(float)(a1 + 0.5);
}

float sub_18F41A678(int a1, int a2, uint64_t a3)
{
  float result;
  int v7;
  float *v8;
  float v9;
  NSObject *v10;
  char *v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1 >= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E29537A8);
    v10 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109376;
      v13 = a1;
      v14 = 1024;
      v15 = a2;
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_FAULT, "Assertion failed: start < end, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMFFTProcessor.cpp, line 74,start,%d,end,%d.", buf, 0xEu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E29537A8);
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "static float CMFFTProcessor::getSum(int, int, const FrequencyData *)", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  result = 0.0;
  if (a1 <= a2)
  {
    v7 = a2 - a1 + 1;
    v8 = (float *)(a3 + 4 * a1);
    do
    {
      v9 = *v8++;
      result = result + v9;
      --v7;
    }
    while (v7);
  }
  return result;
}

float sub_18F41A878(int a1, int a2, uint64_t a3)
{
  float *v6;
  float *v7;
  float v8;
  float result;
  uint64_t v10;
  float v11;
  float v12;
  NSObject *v13;
  char *v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1 >= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E29537A8);
    v13 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109376;
      v16 = a1;
      v17 = 1024;
      v18 = a2;
      _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_FAULT, "Assertion failed: start < end, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMFFTProcessor.cpp, line 96,start,%d,end,%d.", buf, 0xEu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E29537A8);
      v14 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "static float CMFFTProcessor::getMaxInRange(int, int, const FrequencyData *)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
    return *(float *)(a3 + 4 * a1);
  }
  else
  {
    v6 = (float *)(a3 + 4 * a1);
    v8 = *v6;
    v7 = v6 + 1;
    result = v8;
    v10 = a2 - (uint64_t)a1;
    do
    {
      v11 = *v7++;
      v12 = v11;
      if (v11 > result)
        result = v12;
      --v10;
    }
    while (v10);
  }
  return result;
}

double sub_18F41AA7C()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  sub_18F1E61EC(v0, (uint64_t)"CLAccessoryHeartRate", 1);
  *(_WORD *)(v0 + 28) = 256;
  *(_BYTE *)(v0 + 30) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 56) = 0x650000FF00;
  result = 0.0;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)v0 = &off_1E29441E8;
  qword_1EE16E9B8 = v0;
  return result;
}

void sub_18F41AB00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x10F1C40E59F67ADLL);
  _Unwind_Resume(a1);
}

void sub_18F41AB28(_QWORD *a1)
{
  sub_18F4A2ABC(a1);
  JUMPOUT(0x194001438);
}

double sub_18F41AB4C(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  char *v6;
  double v9;
  NSObject *v10;
  double v11;
  uint64_t v12;
  char *v14;
  uint8_t buf[4];
  double v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E29553C8);
    v4 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v16) = a2;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "[AccessoryHeartRate] Unrecognized update interval notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E29553C8);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryHeartRate::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  else
  {
    sub_18F4A461C(a1);
    v9 = *a3;
    if (*a3 > 0.0)
      *(_BYTE *)(a1 + 30) = 0;
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E29553C8);
    v5 = fmax(v9, 1.0);
    v10 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349056;
      v16 = v5;
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_INFO, "[AccessoryHeartRate] Setting update interval to %{public}f", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E29553C8);
      v14 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryHeartRate::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
    v11 = rint(v5 * 1000000.0);
    if (v5 < 0.0)
      v12 = 0;
    else
      v12 = (uint64_t)v11;
    sub_18F203AF8(*(_QWORD *)(a1 + 32), v12);
  }
  return v5;
}

void sub_18F41AE98(uint64_t a1)
{
  uint64_t DataValue;
  uint64_t IntegerValue;
  int v4;
  unint64_t TimeStamp;
  double v6;
  int v7;
  uint64_t v14;
  int v15;
  NSObject *v16;
  NSObject *v18;
  NSObject *v19;
  char *v21;
  char *v22;
  double v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  __int16 v30;
  _BYTE v31[14];
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  double v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  uint8_t buf[4];
  int v41;
  __int16 v42;
  _BYTE v43[14];
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  double v47;
  __int16 v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  DataValue = IOHIDEventGetDataValue();
  IntegerValue = IOHIDEventGetIntegerValue();
  if (!DataValue)
  {
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E29553C8);
    v18 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_ERROR, "[AccessoryHeartRate] Invalid payload", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E29553C8);
    LOWORD(v28) = 0;
LABEL_30:
    v22 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "virtual void CLAccessoryHeartRate::onEventData(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v22);
    if (v22 != (char *)buf)
      free(v22);
    return;
  }
  v4 = IntegerValue;
  if (IntegerValue == 16)
  {
    TimeStamp = IOHIDEventGetTimeStamp();
    v6 = sub_18F1FD20C(TimeStamp);
    v23 = v6;
    v7 = *(unsigned __int8 *)(DataValue + 13);
    v24 = v7;
    _H9 = *(_WORD *)(DataValue + 14);
    __asm { FCVT            S0, H9 }
    v25 = _S0;
    v14 = *(_QWORD *)(DataValue + 5);
    v26 = v14;
    v15 = *(_DWORD *)(DataValue + 1);
    v27 = v15;
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E29553C8);
    v16 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEBUG))
    {
      __asm { FCVT            D1, H9 }
      *(_DWORD *)buf = 67241731;
      v41 = v15;
      v42 = 1025;
      *(_DWORD *)v43 = v7;
      *(_WORD *)&v43[4] = 2050;
      *(_QWORD *)&v43[6] = _D1;
      v44 = 2050;
      v45 = v14;
      v46 = 2050;
      v47 = v6;
      v48 = 1040;
      v49 = 16;
      v50 = 2097;
      v51 = DataValue;
      _os_log_impl(&dword_18F1DC000, v16, OS_LOG_TYPE_DEBUG, "[AccessoryHeartRate] seq,%{public}d,heartrate,%{private}u,confidence,%{public}10.10f,sensorTime,%{public}llu,timestamp,%{public}20.20f,payload,{%{private}.*P}", buf, 0x3Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E29553C8);
      __asm { FCVT            D0, H9 }
      v28 = 67241731;
      v29 = v15;
      v30 = 1025;
      *(_DWORD *)v31 = v7;
      *(_WORD *)&v31[4] = 2050;
      *(_QWORD *)&v31[6] = _D0;
      v32 = 2050;
      v33 = v14;
      v34 = 2050;
      v35 = v6;
      v36 = 1040;
      v37 = 16;
      v38 = 2097;
      v39 = DataValue;
      v21 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLAccessoryHeartRate::onEventData(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v21);
      if (v21 != (char *)buf)
        free(v21);
    }
    sub_18F1FD2C8(a1, 0, (uint64_t)&v23, 32);
    return;
  }
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E29553C8);
  v19 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68157955;
    v41 = v4;
    v42 = 2097;
    *(_QWORD *)v43 = DataValue;
    _os_log_impl(&dword_18F1DC000, v19, OS_LOG_TYPE_ERROR, "[AccessoryHeartRate] Invalid payload: %{private}.*P", buf, 0x12u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E29553C8);
    v28 = 68157955;
    v29 = v4;
    v30 = 2097;
    *(_QWORD *)v31 = DataValue;
    goto LABEL_30;
  }
}

os_log_t sub_18F41B3B0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Accessory");
  qword_1ECEDEE30 = (uint64_t)result;
  return result;
}

void sub_18F41BB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  sub_18F2A8438((uint64_t)&a11);
  sub_18F2A8438((uint64_t)&a24);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F41BBD8(uint64_t a1, CLConnectionMessage **a2)
{
  const __CFDictionary *Dictionary;
  NSObject *v4;
  std::string *v5;
  std::string *v6;
  char *v7;
  NSObject *v8;
  char *v9;
  int v10;
  uint64_t v11;
  _QWORD block[5];
  std::string __p;
  int v15;
  std::string v16;
  _QWORD v17[2];
  int v18;
  std::string *v19;
  uint8_t buf[4];
  std::string *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_18F1EDCF0(v17, Dictionary);
  if ((*(int (**)(_QWORD *))(v17[0] + 856))(v17) > 0)
  {
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24))
      return sub_18F1EDCB4(v17);
    memset(&v16, 0, sizeof(v16));
    sub_18F36A044((uint64_t)v17, "kCLConnectionMessageNameKey", (uint64_t)&v16);
    if (!std::string::compare(&v16, "GestureDetected"))
    {
      v10 = 0;
    }
    else
    {
      if (std::string::compare(&v16, "GestureCanceled"))
      {
        if (qword_1EE16D400 != -1)
          dispatch_once(&qword_1EE16D400, &unk_1E29451C8);
        v4 = qword_1EE16D408;
        if (os_log_type_enabled((os_log_t)qword_1EE16D408, OS_LOG_TYPE_FAULT))
        {
          v5 = &v16;
          if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v5 = (std::string *)v16.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136446210;
          v21 = v5;
          _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "Unexpected ear gesture state received: %{public}s", buf, 0xCu);
        }
        if (sub_18F1FCA08(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D400 != -1)
            dispatch_once(&qword_1EE16D400, &unk_1E29451C8);
          v6 = &v16;
          if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v6 = (std::string *)v16.__r_.__value_.__r.__words[0];
          v18 = 136446210;
          v19 = v6;
          v7 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "-[CMGestureManagerInternal startGestureUpdatesWithHandlerPrivate:]_block_invoke", "CoreLocation: %s\n", v7);
          if (v7 != (char *)buf)
            free(v7);
        }
LABEL_34:
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v16.__r_.__value_.__l.__data_);
        return sub_18F1EDCB4(v17);
      }
      v10 = 1;
    }
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3321888768;
    block[2] = sub_18F41C03C;
    block[3] = &unk_1E2952B50;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      sub_18F26F9A4(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
    else
      __p = v16;
    block[4] = v11;
    v15 = v10;
    dispatch_async(MEMORY[0x1E0C80D38], block);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_34;
  }
  if (qword_1EE16D400 != -1)
    dispatch_once(&qword_1EE16D400, &unk_1E29451C8);
  v8 = qword_1EE16D408;
  if (os_log_type_enabled((os_log_t)qword_1EE16D408, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_ERROR, "Could not get dictionary for kCLConnectionMessageGesture", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D400 != -1)
      dispatch_once(&qword_1EE16D400, &unk_1E29451C8);
    LOWORD(v16.__r_.__value_.__l.__data_) = 0;
    v9 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMGestureManagerInternal startGestureUpdatesWithHandlerPrivate:]_block_invoke", "CoreLocation: %s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  return sub_18F1EDCB4(v17);
}

void sub_18F41BFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  if (a26 < 0)
    operator delete(__p);
  sub_18F1EDCB4(&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_18F41C03C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  char *v5;
  uint8_t buf[4];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D400 != -1)
    dispatch_once(&qword_1EE16D400, &unk_1E29451C8);
  v2 = qword_1EE16D408;
  if (os_log_type_enabled((os_log_t)qword_1EE16D408, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v3 = (_QWORD *)*v3;
    *(_DWORD *)buf = 136446210;
    v7 = v3;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "Dispatching ear gesture %{public}s", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D400 != -1)
      dispatch_once(&qword_1EE16D400, &unk_1E29451C8);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMGestureManagerInternal startGestureUpdatesWithHandlerPrivate:]_block_invoke", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

_QWORD *sub_18F41C214(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
    return sub_18F26F9A4(result, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  v3 = *(_OWORD *)(a2 + 40);
  result[2] = *(_QWORD *)(a2 + 56);
  *(_OWORD *)result = v3;
  return result;
}

void sub_18F41C244(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void sub_18F41C258(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D400 != -1)
    dispatch_once(&qword_1EE16D400, &unk_1E29451C8);
  v3 = qword_1EE16D408;
  if (os_log_type_enabled((os_log_t)qword_1EE16D408, OS_LOG_TYPE_DEBUG))
  {
    v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0)
      v5 = v4;
    else
      v5 = *(_QWORD *)v4;
    *(_DWORD *)buf = 136446210;
    v8 = v5;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEBUG, "Default handler received message %{public}s", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D400 != -1)
      dispatch_once(&qword_1EE16D400, &unk_1E29451C8);
    CLConnectionMessage::name(*a2);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMGestureManagerInternal startGestureUpdatesWithHandlerPrivate:]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
}

uint64_t sub_18F41C6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_stopGestureUpdatesPrivate, a3, a4, a5);
}

uint64_t sub_18F41C754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a1 + 32;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v7 + 8);
  if (v6)
    return MEMORY[0x1E0DE7D20](v5, sel_startGestureUpdatesWithHandlerPrivate_, v6, a4, a5);
  else
    return MEMORY[0x1E0DE7D20](v5, sel_stopGestureUpdatesPrivate, 0, a4, a5);
}

void sub_18F41C808(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  uint8_t buf[1640];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D400 != -1)
    dispatch_once(&qword_1EE16D400, &unk_1E29451C8);
  v2 = qword_1EE16D408;
  if (os_log_type_enabled((os_log_t)qword_1EE16D408, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "#Notice Calling ear gesture handler", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D400 != -1)
      dispatch_once(&qword_1EE16D400, &unk_1E29451C8);
    v3 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMGestureManager gestureHandler]_block_invoke", "CoreLocation: %s\n", v3);
    if (v3 != (char *)buf)
      free(v3);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
}

os_log_t sub_18F41CA0C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "EarGesture");
  qword_1EE16D408 = (uint64_t)result;
  return result;
}

void sub_18F41CCE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

void sub_18F41CD3C(uint64_t a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  NSSet *v11;
  void *DictionaryOfClasses;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  _QWORD block[6];
  int v36;
  int v37;
  uint8_t buf[4];
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  v11 = (NSSet *)objc_msgSend_setWithObjects_(v4, v8, v5, v9, v10, v6, v7, 0);
  if (*a2 && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v11)) != 0)
  {
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16))
      return;
    v16 = DictionaryOfClasses;
    v17 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v13, (uint64_t)CFSTR("CMErrorMessage"), v14, v15);
    v21 = objc_msgSend_objectForKeyedSubscript_(v16, v18, (uint64_t)CFSTR("CMActivityData"), v19, v20);
    if (v17)
    {
      if (qword_1EE16D6E0 != -1)
        dispatch_once(&qword_1EE16D6E0, &unk_1E2955348);
      v22 = qword_1EE16D6E8;
      if (os_log_type_enabled((os_log_t)qword_1EE16D6E8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67240192;
        v39 = objc_msgSend_intValue(v17, v23, v24, v25, v26);
        _os_log_impl(&dword_18F1DC000, v22, OS_LOG_TYPE_FAULT, "Error occurred while trying to retrieve activity update: CMErrorDomain Code:%{public}d", buf, 8u);
      }
      if (!sub_18F1FCA08(115, 0))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6E0 != -1)
        dispatch_once(&qword_1EE16D6E0, &unk_1E2955348);
      v36 = 67240192;
      v37 = objc_msgSend_intValue(v17, v27, v28, v29, v30);
      v31 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMActivityManagerInternal connect]_block_invoke", "CoreLocation: %s\n", v31);
      if (v31 == (char *)buf)
        return;
LABEL_34:
      free(v31);
      return;
    }
    if (v21)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_18F41D1F8;
      block[3] = &unk_1E2955B60;
      block[4] = v21;
      block[5] = v33;
      dispatch_async(MEMORY[0x1E0C80D38], block);
      return;
    }
    if (qword_1EE16D6E0 != -1)
      dispatch_once(&qword_1EE16D6E0, &unk_1E2955348);
    v34 = qword_1EE16D6E8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v34, OS_LOG_TYPE_FAULT, "Unable to parse kCLConnectionMessageMotionState message!", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6E0 != -1)
        dispatch_once(&qword_1EE16D6E0, &unk_1E2955348);
      LOWORD(v36) = 0;
      goto LABEL_33;
    }
  }
  else
  {
    if (qword_1EE16D6E0 != -1)
      dispatch_once(&qword_1EE16D6E0, &unk_1E2955348);
    v32 = qword_1EE16D6E8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v32, OS_LOG_TYPE_ERROR, "Could not get dictionary for kCLConnectionMessageMotionState", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6E0 != -1)
        dispatch_once(&qword_1EE16D6E0, &unk_1E2955348);
      LOWORD(v36) = 0;
LABEL_33:
      v31 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMActivityManagerInternal connect]_block_invoke", "CoreLocation: %s\n", v31);
      if (v31 == (char *)buf)
        return;
      goto LABEL_34;
    }
  }
}

uint64_t sub_18F41D1F8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_18F41D208(uint64_t a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  NSSet *v10;
  void *DictionaryOfClasses;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  char *v22;
  uint8_t buf[1640];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v10 = (NSSet *)objc_msgSend_setWithObjects_(v4, v7, v5, v8, v9, v6, 0);
  if (*a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v10),
        (v15 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v12, (uint64_t)CFSTR("CMOverrideResult"), v13, v14)) != 0)&& (v20 = *(_QWORD *)(a1 + 32), *(_QWORD *)(v20 + 40))&& *(_BYTE *)(v20 + 56))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) = objc_msgSend_integerValue(v15, v16, v17, v18, v19);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 56) = 0;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 40));
  }
  else
  {
    if (qword_1EE16D6E0 != -1)
      dispatch_once(&qword_1EE16D6E0, &unk_1E2955348);
    v21 = qword_1EE16D6E8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v21, OS_LOG_TYPE_ERROR, "Could not parse dictionary for kCLConnectionMessageSidebandOverride", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6E0 != -1)
        dispatch_once(&qword_1EE16D6E0, &unk_1E2955348);
      v22 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMActivityManagerInternal connect]_block_invoke", "CoreLocation: %s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
  }
}

void sub_18F41D454(uint64_t a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  NSSet *v10;
  void *DictionaryOfClasses;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  char *v22;
  uint8_t buf[1640];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v10 = (NSSet *)objc_msgSend_setWithObjects_(v4, v7, v5, v8, v9, v6, 0);
  if (*a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v10),
        (v15 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v12, (uint64_t)CFSTR("CMMotionStateSimResult"), v13, v14)) != 0)&& (v20 = *(_QWORD *)(a1 + 32), *(_QWORD *)(v20 + 72))&& *(_BYTE *)(v20 + 88))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96) = objc_msgSend_integerValue(v15, v16, v17, v18, v19);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 88) = 0;
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 72));
  }
  else
  {
    if (qword_1EE16D6E0 != -1)
      dispatch_once(&qword_1EE16D6E0, &unk_1E2955348);
    v21 = qword_1EE16D6E8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v21, OS_LOG_TYPE_ERROR, "Could not parse dictionary for kCLConnectionMessageMotionStateSim", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6E0 != -1)
        dispatch_once(&qword_1EE16D6E0, &unk_1E2955348);
      v22 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMActivityManagerInternal connect]_block_invoke", "CoreLocation: %s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
  }
}

intptr_t sub_18F41D6A0(intptr_t result)
{
  intptr_t v1;
  uint64_t v2;

  v1 = result;
  v2 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(v2 + 56) && *(_QWORD *)(v2 + 40))
  {
    *(_BYTE *)(v2 + 56) = 0;
    *(_QWORD *)(*(_QWORD *)(result + 32) + 64) = 3;
    result = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(result + 32) + 40));
    v2 = *(_QWORD *)(v1 + 32);
  }
  if (*(_BYTE *)(v2 + 88))
  {
    if (*(_QWORD *)(v2 + 72))
    {
      *(_BYTE *)(v2 + 88) = 0;
      *(_QWORD *)(*(_QWORD *)(v1 + 32) + 96) = 3;
      return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(v1 + 32) + 72));
    }
  }
  return result;
}

void sub_18F41D724(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D6E0 != -1)
    dispatch_once(&qword_1EE16D6E0, &unk_1E2955348);
  v3 = qword_1EE16D6E8;
  if (os_log_type_enabled((os_log_t)qword_1EE16D6E8, OS_LOG_TYPE_DEBUG))
  {
    v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0)
      v5 = v4;
    else
      v5 = *(_QWORD *)v4;
    *(_DWORD *)buf = 136315138;
    v8 = v5;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEBUG, "Default handler received message %s", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D6E0 != -1)
      dispatch_once(&qword_1EE16D6E0, &unk_1E2955348);
    CLConnectionMessage::name(*a2);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMActivityManagerInternal connect]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
}

void sub_18F41DAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_18F2A8438((uint64_t)&a9);
  sub_18F2A8438((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_18F41DC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0)
    operator delete(__p);
  sub_18F2A8438((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_18F41DE90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F41E0A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F41E258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F41E27C(uint64_t a1, CLConnectionMessage **a2)
{
  CLConnectionMessage *v3;
  objc_class *v4;
  void *ObjectOfClass;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *a2;
  if (*a2
    && (v4 = (objc_class *)objc_opt_class(),
        (ObjectOfClass = (void *)CLConnectionMessage::getObjectOfClass(v3, v4)) != 0))
  {
    result = objc_msgSend_integerValue(ObjectOfClass, v6, v7, v8, v9);
  }
  else
  {
    result = 3;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104) = result;
  return result;
}

uint64_t sub_18F41E3D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a1 + 32;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v7 + 8);
  if (v6)
    return MEMORY[0x1E0DE7D20](v5, sel_startActivityUpdatesWithHandlerPrivate_, v6, a4, a5);
  else
    return MEMORY[0x1E0DE7D20](v5, sel_stopActivityUpdatesPrivate, 0, a4, a5);
}

uint64_t sub_18F41E484(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 40) = *(_QWORD *)(*(_QWORD *)(result + 32) + 16);
  return result;
}

dispatch_queue_t sub_18F41E5B4(dispatch_queue_t result)
{
  dispatch_queue_t v1;

  if (!*((_QWORD *)result[4].isa + 5))
  {
    v1 = result;
    *((_QWORD *)result[4].isa + 5) = dispatch_semaphore_create(0);
    if (!*((_QWORD *)v1[4].isa + 5))
      *(_QWORD *)(*((_QWORD *)v1[5].isa + 1) + 24) = 3;
    result = dispatch_queue_create("com.apple.CoreMotion.SidebandOverride", 0);
    *((_QWORD *)v1[4].isa + 6) = result;
    if (!*((_QWORD *)v1[4].isa + 6))
      *(_QWORD *)(*((_QWORD *)v1[5].isa + 1) + 24) = 3;
  }
  return result;
}

void sub_18F41E63C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  dispatch_time_t v6;
  intptr_t v7;
  intptr_t v8;
  NSObject *v9;
  uint64_t v10;
  char *v11;
  _QWORD block[6];
  char v13;
  int v14;
  intptr_t v15;
  uint8_t buf[4];
  intptr_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F41E87C;
  block[3] = &unk_1E29574B8;
  v13 = *(_BYTE *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 48);
  block[4] = v2;
  block[5] = v4;
  dispatch_async(v3, block);
  v5 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  v6 = dispatch_time(0, 5000000000);
  v7 = dispatch_semaphore_wait(v5, v6);
  if (v7)
  {
    v8 = v7;
    if (qword_1EE16D6E0 != -1)
      dispatch_once(&qword_1EE16D6E0, &unk_1E2955348);
    v9 = qword_1EE16D6E8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v17 = v8;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "Timeout occurred after 5 seconds during overrideOscarSideband:withState:.  Wait result = %{public}ld", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6E0 != -1)
        dispatch_once(&qword_1EE16D6E0, &unk_1E2955348);
      v14 = 134349056;
      v15 = v8;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMActivityManager overrideOscarSideband:withState:]_block_invoke", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
    v10 = 3;
  }
  else
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v10;
}

uint64_t sub_18F41E87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_overrideOscarSideband_withState_, *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40), a5);
}

dispatch_queue_t sub_18F41E97C(dispatch_queue_t result)
{
  dispatch_queue_t v1;

  if (!*((_QWORD *)result[4].isa + 9))
  {
    v1 = result;
    *((_QWORD *)result[4].isa + 9) = dispatch_semaphore_create(0);
    if (!*((_QWORD *)v1[4].isa + 9))
      *(_QWORD *)(*((_QWORD *)v1[5].isa + 1) + 24) = 3;
    result = dispatch_queue_create("com.apple.CoreMotion.MotionStateSim", 0);
    *((_QWORD *)v1[4].isa + 10) = result;
    if (!*((_QWORD *)v1[4].isa + 10))
      *(_QWORD *)(*((_QWORD *)v1[5].isa + 1) + 24) = 3;
  }
  return result;
}

intptr_t sub_18F41EA04(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  intptr_t result;
  _QWORD block[6];
  char v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F41EA94;
  block[3] = &unk_1E29574B8;
  v7 = *(_BYTE *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 48);
  block[4] = v2;
  block[5] = v4;
  dispatch_async(v3, block);
  result = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 72), 0xFFFFFFFFFFFFFFFFLL);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96);
  return result;
}

uint64_t sub_18F41EA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_simulateMotionState_withState_, *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40), a5);
}

uint64_t sub_18F41EB08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_simulateMotionStateYouthWithState_, *(_QWORD *)(a1 + 40), a4, a5);
}

os_log_t sub_18F41EB14()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Activity");
  qword_1EE16D6E8 = (uint64_t)result;
  return result;
}

void sub_18F41EB40(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  void *__p[2];
  char v6;

  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2952688;
  sub_18F270374(__p, "kCLConnectionMessageMotionState");
  MEMORY[0x19400103C](v4 + 3, __p, *a2);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_18F41EBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F41EBF4@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F41EC54(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F41EC40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F41EC54(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F41ECB4((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F41ECA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F41ECB4(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F41ED08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F41ED24(uint64_t a1)
{
  sub_18F3BEA38(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_18F421844(a1 + 56, *(_QWORD **)(a1 + 64));
  sub_18F3CBA50((_QWORD *)(a1 + 8));
  return a1;
}

void sub_18F41ED64(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int32x4_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char **v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t **v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  float v89;
  void **v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  float v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  float *v114;
  float *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  float v121;
  void **v122;
  float **v123;
  float *v124;
  float *v125;
  uint64_t v126;
  float *v127;
  float *v128;
  float v129;
  unint64_t v130;
  uint64_t v131;
  void **v132;
  unint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  void **v138;
  unint64_t v139;
  void **v140;
  void **p_vtable;
  void **v142;
  uint64_t v143;
  uint64_t *v144;
  int v145;
  BOOL v146;
  uint64_t *v147;
  char *v148;
  unint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  float v162;
  char *v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  uint64_t v170;
  void **v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  void **v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  void *v184;
  unint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  NSObject *v195;
  float *v196;
  double v197;
  double v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  unint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  void *v215;
  float *v216;
  double v217;
  double v218;
  char *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  __int128 v227;
  uint64_t v228;
  _QWORD *v229;
  void *__p[2];
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  int v242;
  _BYTE v243[12];
  __int16 v244;
  double v245;
  __int16 v246;
  const char *v247;
  __int16 v248;
  double v249;
  _BYTE buf[32];
  int32x4_t v251;
  __int128 v252;
  char v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;

  v260 = *MEMORY[0x1E0C80C00];
  v6 = vdupq_n_s32(0x7F7FFFFFu);
  *(_QWORD *)buf = v6.i64[0];
  *(_QWORD *)&v7 = 0x8000000080000000;
  *((_QWORD *)&v7 + 1) = 0x8000000080000000;
  *(_OWORD *)&buf[12] = v7;
  *(_DWORD *)&buf[8] = 2139095039;
  *(_DWORD *)&buf[28] = 0x7FFFFFFF;
  v251 = v6;
  *(_QWORD *)&v252 = v6.i64[0];
  *((_QWORD *)&v252 + 1) = 0x7FFFFFFF7F7FFFFFLL;
  v253 = 0;
  v254 = 0u;
  v255 = 0u;
  v256 = 0u;
  sub_18F4210DC(&v254, 1uLL);
  v8 = *((_QWORD *)&v256 + 1);
  v9 = v256;
  v11 = *((_QWORD *)&v254 + 1);
  v10 = v255;
  v12 = (char **)(*((_QWORD *)&v254 + 1) + 8 * (((_QWORD)v256 + *((_QWORD *)&v256 + 1)) >> 9));
  v13 = *v12;
  if ((_QWORD)v255 == *((_QWORD *)&v254 + 1))
    v14 = 0;
  else
    v14 = &(*v12)[8 * ((v256 + *((_QWORD *)&v256 + 1)) & 0x1FF)];
  v15 = (v14 - v13) >> 3;
  if (v14 - v13 < -7)
  {
    v19 = 510 - v15;
    v17 = &v12[-(v19 >> 9)];
    v18 = (uint64_t)&(*v17)[8 * (~(_WORD)v19 & 0x1FF)];
  }
  else
  {
    v16 = v15 + 1;
    v17 = &v12[v16 >> 9];
    v18 = (uint64_t)&(*v17)[8 * (v16 & 0x1FF)];
  }
  if (v14 != (char *)v18)
  {
    v229 = a1;
    do
    {
      v20 = v13 + 4096;
      if (v12 == v17)
        v20 = (char *)v18;
      if (v14 == v20)
      {
        v21 = 0;
      }
      else
      {
        v21 = v20 - v14;
        memset_pattern16(v14, &unk_18F508000, (v20 - v14) & 0xFFFFFFFFFFFFFFF8);
      }
      v8 += v21 >> 3;
      if (v12 == v17)
        break;
      v22 = v12[1];
      ++v12;
      v13 = v22;
      v14 = v22;
    }
    while (v22 != (char *)v18);
    *((_QWORD *)&v256 + 1) = v8;
    a1 = v229;
  }
  v23 = v252;
  *(int32x4_t *)(a3 + 32) = v251;
  *(_OWORD *)(a3 + 48) = v23;
  *(_BYTE *)(a3 + 64) = v253;
  v24 = *(_OWORD *)&buf[16];
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_OWORD *)(a3 + 16) = v24;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  v25 = (char *)(v11 + 8 * (v9 >> 9));
  *(_OWORD *)(a3 + 104) = 0u;
  if (v10 == v11)
  {
    v26 = 0;
    v28 = 0;
    v27 = (char *)(v10 + 8 * ((v8 + v9) >> 9));
  }
  else
  {
    v26 = (uint64_t *)(*(_QWORD *)v25 + 8 * (v9 & 0x1FF));
    v27 = (char *)(v11 + 8 * ((v8 + v9) >> 9));
    v28 = *(_QWORD *)v27 + 8 * ((v8 + v9) & 0x1FF);
  }
  if ((uint64_t *)v28 != v26)
  {
    v29 = ((v28 - *(_QWORD *)v27) >> 3) + ((v27 - v25) << 6);
    v30 = (uint64_t)v26 - *(_QWORD *)v25;
    v31 = v29 - (v30 >> 3);
    if (v29 != v30 >> 3)
    {
      sub_18F4210DC((_QWORD *)(a3 + 72), v29 - (v30 >> 3));
      v32 = *(_QWORD *)(a3 + 112);
      v33 = *(_QWORD *)(a3 + 80);
      v34 = *(_QWORD *)(a3 + 104) + v32;
      v35 = (_QWORD *)(v33 + 8 * (v34 >> 9));
      v36 = (_QWORD *)*v35;
      v37 = *v35 + 8 * (v34 & 0x1FF);
      v38 = *(_QWORD *)(a3 + 88) == v33 ? 0 : (_QWORD *)v37;
      v39 = v31 + v38 - v36;
      if (v39 < 1)
      {
        v41 = 511 - v39;
        LOWORD(v39) = ~(511 - v39);
        v40 = &v35[-(v41 >> 9)];
      }
      else
      {
        v40 = &v35[(unint64_t)v39 >> 9];
      }
      v42 = *v40 + 8 * (v39 & 0x1FF);
      if (v38 != (_QWORD *)v42)
      {
        do
        {
          v43 = v36 + 512;
          if (v35 == v40)
            v43 = (_QWORD *)v42;
          if (v38 == v43)
          {
            v43 = v38;
          }
          else
          {
            v44 = v38;
            do
            {
              v45 = *v26++;
              *v44++ = v45;
              if ((uint64_t *)((char *)v26 - *(_QWORD *)v25) == (uint64_t *)4096)
              {
                v46 = (uint64_t *)*((_QWORD *)v25 + 1);
                v25 += 8;
                v26 = v46;
              }
            }
            while (v44 != v43);
            v32 = *(_QWORD *)(a3 + 112);
          }
          v32 += v43 - v38;
          *(_QWORD *)(a3 + 112) = v32;
          if (v35 == v40)
            break;
          v47 = (_QWORD *)v35[1];
          ++v35;
          v36 = v47;
          v38 = v47;
        }
        while (v47 != (_QWORD *)v42);
      }
    }
  }
  if (a1[12])
  {
    v48 = a1 + 11;
    v49 = a1[11];
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1[10] + 28);
    if (v49)
    {
      do
      {
        v50 = v49;
        v49 = *(_QWORD *)(v49 + 8);
      }
      while (v49);
    }
    else
    {
      do
      {
        v50 = v48[2];
        v51 = *(_QWORD *)v50 == (_QWORD)v48;
        v48 = (_QWORD *)v50;
      }
      while (v51);
    }
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(v50 + 28);
  }
  sub_18F3D30B8(&v254);
  if (a1[9] < (unint64_t)a2)
  {
    if (qword_1EE16D6C8 != -1)
      dispatch_once(&qword_1EE16D6C8, &unk_1E2953828);
    v52 = qword_1EE16D6C0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_INFO))
    {
      v53 = a1[9];
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v53;
      _os_log_impl(&dword_18F1DC000, v52, OS_LOG_TYPE_INFO, "CLRobustSlopeEstimator given only %zd bins", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6C8 != -1)
        dispatch_once(&qword_1EE16D6C8, &unk_1E2953828);
      v54 = a1[9];
      LODWORD(v257) = 134217984;
      *(_QWORD *)((char *)&v257 + 4) = v54;
      v55 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "CLPressureStats CLRobustSlopeEstimator::computeStats(int)", "CoreLocation: %s\n", v55);
      if (v55 != buf)
        free(v55);
    }
    return;
  }
  v56 = (uint64_t **)(a1 + 7);
  v240 = 0u;
  v241 = 0u;
  v239 = 0u;
  v57 = (uint64_t *)a1[7];
  v58 = a1;
  v59 = a1 + 8;
  while (1)
  {
    v60 = (uint64_t *)*v59;
    v61 = v59;
    if (*v59)
    {
      do
      {
        v62 = v60;
        v60 = (uint64_t *)v60[1];
      }
      while (v60);
    }
    else
    {
      do
      {
        v62 = (uint64_t *)v61[2];
        v51 = *v62 == (_QWORD)v61;
        v61 = v62;
      }
      while (v51);
    }
    if (v57 == v62)
      break;
    v63 = v57[9];
    v64 = v57[6];
    v65 = v57[7];
    v66 = (_QWORD *)(v64 + 8 * (v63 >> 8));
    if (v65 == v64)
      v67 = 0;
    else
      v67 = *v66 + 16 * v63;
    while (1)
    {
      if (v65 == v64)
      {
        v83 = 0;
      }
      else
      {
        v82 = v57[10] + v57[9];
        v83 = *(_QWORD *)(v64 + ((v82 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v82;
      }
      v70 = (uint64_t *)v57[1];
      if (v67 == v83)
        break;
      v68 = v57;
      if (v70)
      {
        do
        {
          v69 = v70;
          v70 = (uint64_t *)*v70;
        }
        while (v70);
      }
      else
      {
        do
        {
          v69 = (uint64_t *)v68[2];
          v51 = *v69 == (_QWORD)v68;
          v68 = v69;
        }
        while (!v51);
      }
      if (v69 != v59)
      {
        do
        {
          v71 = v69[9];
          v72 = v69[6];
          v73 = v69[7];
          v74 = (_QWORD *)(v72 + 8 * (v71 >> 8));
          if (v73 == v72)
            v75 = 0;
          else
            v75 = *v74 + 16 * v71;
          while (1)
          {
            if (v73 == v72)
            {
              v78 = 0;
            }
            else
            {
              v77 = v69[10] + v69[9];
              v78 = *(_QWORD *)(v72 + ((v77 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v77;
            }
            if (v75 == v78)
              break;
            *(float *)buf = (float)(*(float *)(v75 + 8) - *(float *)(v67 + 8))
                          / (float)(*(float *)(v75 + 12) - *(float *)(v67 + 12));
            sub_18F1FD700(&v239, (float *)buf);
            v75 += 16;
            if (v75 - *v74 == 4096)
            {
              v76 = v74[1];
              ++v74;
              v75 = v76;
            }
            v72 = v69[6];
            v73 = v69[7];
          }
          v79 = (uint64_t *)v69[1];
          if (v79)
          {
            do
            {
              v80 = v79;
              v79 = (uint64_t *)*v79;
            }
            while (v79);
          }
          else
          {
            do
            {
              v80 = (uint64_t *)v69[2];
              v51 = *v80 == (_QWORD)v69;
              v69 = v80;
            }
            while (!v51);
          }
          v69 = v80;
        }
        while (v80 != v59);
      }
      v67 += 16;
      if (v67 - *v66 == 4096)
      {
        v81 = v66[1];
        ++v66;
        v67 = v81;
      }
      v64 = v57[6];
      v65 = v57[7];
    }
    v84 = v57;
    if (v70)
    {
      do
      {
        v57 = v70;
        v70 = (uint64_t *)*v70;
      }
      while (v70);
    }
    else
    {
      do
      {
        v57 = (uint64_t *)v84[2];
        v51 = *v57 == (_QWORD)v84;
        v84 = v57;
      }
      while (!v51);
    }
  }
  v85 = (char *)(*((_QWORD *)&v239 + 1) + 8 * ((unint64_t)v241 >> 10));
  if ((_QWORD)v240 == *((_QWORD *)&v239 + 1))
  {
    v86 = 0;
    v88 = 0;
    v87 = (char *)(*((_QWORD *)&v239 + 1) + 8 * ((*((_QWORD *)&v241 + 1) + (_QWORD)v241) >> 10));
  }
  else
  {
    v86 = *(_QWORD *)v85 + 4 * (v241 & 0x3FF);
    v87 = (char *)(*((_QWORD *)&v239 + 1) + 8 * ((*((_QWORD *)&v241 + 1) + (_QWORD)v241) >> 10));
    v88 = *(_QWORD *)v87 + 4 * ((*((_QWORD *)&v241 + 1) + v241) & 0x3FF);
  }
  v89 = sub_18F421964(v85, v86, v87, v88);
  v90 = (void **)*((_QWORD *)&v239 + 1);
  *((_QWORD *)&v241 + 1) = 0;
  v91 = v240 - *((_QWORD *)&v239 + 1);
  if ((_QWORD)v240 - *((_QWORD *)&v239 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v90);
      v90 = (void **)(*((_QWORD *)&v239 + 1) + 8);
      *((_QWORD *)&v239 + 1) = v90;
      v91 = v240 - (_QWORD)v90;
    }
    while ((_QWORD)v240 - (_QWORD)v90 > 0x10uLL);
  }
  if (v91 >> 3 == 1)
  {
    v92 = 512;
  }
  else
  {
    if (v91 >> 3 != 2)
      goto LABEL_110;
    v92 = 1024;
  }
  *(_QWORD *)&v241 = v92;
LABEL_110:
  v237 = 0u;
  v238 = 0u;
  v236 = 0u;
  v93 = *v56;
  if (*v56 == v59)
  {
    v105 = 0;
    v104 = 0;
    v109 = 0;
  }
  else
  {
    do
    {
      v94 = v93[9];
      v95 = v93[6];
      v96 = v93[7];
      v97 = (_QWORD *)(v95 + 8 * (v94 >> 8));
      if (v96 == v95)
        v98 = 0;
      else
        v98 = *v97 + 16 * v94;
      while (1)
      {
        if (v96 == v95)
        {
          v101 = 0;
        }
        else
        {
          v100 = v93[10] + v93[9];
          v101 = *(_QWORD *)(v95 + ((v100 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v100;
        }
        if (v98 == v101)
          break;
        *(float *)buf = *(float *)(v98 + 8) + (float)((float)-v89 * *(float *)(v98 + 12));
        sub_18F1FD700(&v236, (float *)buf);
        v98 += 16;
        if (v98 - *v97 == 4096)
        {
          v99 = v97[1];
          ++v97;
          v98 = v99;
        }
        v95 = v93[6];
        v96 = v93[7];
      }
      v102 = (uint64_t *)v93[1];
      if (v102)
      {
        do
        {
          v103 = v102;
          v102 = (uint64_t *)*v102;
        }
        while (v102);
      }
      else
      {
        do
        {
          v103 = (uint64_t *)v93[2];
          v51 = *v103 == (_QWORD)v93;
          v93 = v103;
        }
        while (!v51);
      }
      v93 = v103;
    }
    while (v103 != v59);
    v104 = *((_QWORD *)&v236 + 1);
    v105 = (char *)(*((_QWORD *)&v236 + 1) + 8 * ((unint64_t)v238 >> 10));
    if ((_QWORD)v237 != *((_QWORD *)&v236 + 1))
    {
      v106 = *(_QWORD *)v105 + 4 * (v238 & 0x3FF);
      v107 = (char *)(*((_QWORD *)&v236 + 1) + 8 * ((*((_QWORD *)&v238 + 1) + (_QWORD)v238) >> 10));
      v108 = *(_QWORD *)v107 + 4 * ((*((_QWORD *)&v238 + 1) + v238) & 0x3FF);
      goto LABEL_132;
    }
    v109 = *((_QWORD *)&v238 + 1) + v238;
  }
  v106 = 0;
  v108 = 0;
  v107 = (char *)(v104 + 8 * (v109 >> 10));
LABEL_132:
  v110 = sub_18F421964(v105, v106, v107, v108);
  v234 = 0u;
  v235 = 0u;
  v233 = 0u;
  v111 = *((_QWORD *)&v236 + 1);
  v112 = v237;
  v113 = (_QWORD *)(*((_QWORD *)&v236 + 1) + 8 * ((unint64_t)v238 >> 10));
  if ((_QWORD)v237 == *((_QWORD *)&v236 + 1))
    v114 = 0;
  else
    v114 = (float *)(*v113 + 4 * (v238 & 0x3FF));
  while (1)
  {
    v116 = v112 == v111
         ? 0
         : *(_QWORD *)(v111 + (((*((_QWORD *)&v238 + 1) + (_QWORD)v238) >> 7) & 0x1FFFFFFFFFFFFF8))
         + 4 * ((*((_QWORD *)&v238 + 1) + v238) & 0x3FF);
    if (v114 == (float *)v116)
      break;
    *(_DWORD *)buf = vabds_f32(*v114, v110);
    sub_18F1FD700(&v233, (float *)buf);
    if ((float *)((char *)++v114 - *v113) == (float *)4096)
    {
      v115 = (float *)v113[1];
      ++v113;
      v114 = v115;
    }
    v111 = *((_QWORD *)&v236 + 1);
    v112 = v237;
  }
  v117 = (char *)(*((_QWORD *)&v233 + 1) + 8 * ((unint64_t)v235 >> 10));
  if ((_QWORD)v234 == *((_QWORD *)&v233 + 1))
  {
    v118 = 0;
    v120 = 0;
    v119 = (char *)(*((_QWORD *)&v233 + 1) + 8 * ((*((_QWORD *)&v235 + 1) + (_QWORD)v235) >> 10));
  }
  else
  {
    v118 = *(_QWORD *)v117 + 4 * (v235 & 0x3FF);
    v119 = (char *)(*((_QWORD *)&v233 + 1) + 8 * ((*((_QWORD *)&v235 + 1) + (_QWORD)v235) >> 10));
    v120 = *(_QWORD *)v119 + 4 * ((*((_QWORD *)&v235 + 1) + v235) & 0x3FF);
  }
  v121 = sub_18F421964(v117, v118, v119, v120);
  v122 = (void **)*((_QWORD *)&v233 + 1);
  v123 = (float **)(*((_QWORD *)&v233 + 1) + 8 * ((unint64_t)v235 >> 10));
  v124 = *v123;
  v125 = &(*v123)[v235 & 0x3FF];
  v126 = *(_QWORD *)(*((_QWORD *)&v233 + 1) + (((*((_QWORD *)&v235 + 1) + (_QWORD)v235) >> 7) & 0x1FFFFFFFFFFFFF8))
       + 4 * ((*((_QWORD *)&v235 + 1) + v235) & 0x3FF);
  if (v125 != (float *)v126)
  {
    v127 = &(*v123)[v235 & 0x3FF];
    while (1)
    {
      if ((char *)++v127 - (char *)v124 == 4096)
      {
        v128 = v123[1];
        ++v123;
        v124 = v128;
        v127 = v128;
      }
      if (v127 == (float *)v126)
        break;
      if (*v125 < *v127)
        v125 = v127;
    }
  }
  v129 = *v125;
  *((_QWORD *)&v235 + 1) = 0;
  v130 = v234 - *((_QWORD *)&v233 + 1);
  if ((_QWORD)v234 - *((_QWORD *)&v233 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v122);
      v122 = (void **)(*((_QWORD *)&v233 + 1) + 8);
      *((_QWORD *)&v233 + 1) = v122;
      v130 = v234 - (_QWORD)v122;
    }
    while ((_QWORD)v234 - (_QWORD)v122 > 0x10uLL);
  }
  if (v130 >> 3 == 1)
  {
    v131 = 512;
  }
  else
  {
    if (v130 >> 3 != 2)
      goto LABEL_160;
    v131 = 1024;
  }
  *(_QWORD *)&v235 = v131;
LABEL_160:
  v132 = (void **)*((_QWORD *)&v236 + 1);
  *((_QWORD *)&v238 + 1) = 0;
  v133 = v237 - *((_QWORD *)&v236 + 1);
  if ((_QWORD)v237 - *((_QWORD *)&v236 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v132);
      v132 = (void **)(*((_QWORD *)&v236 + 1) + 8);
      *((_QWORD *)&v236 + 1) = v132;
      v133 = v237 - (_QWORD)v132;
    }
    while ((_QWORD)v237 - (_QWORD)v132 > 0x10uLL);
  }
  if (v133 >> 3 == 1)
  {
    v134 = 512;
  }
  else
  {
    if (v133 >> 3 != 2)
      goto LABEL_167;
    v134 = 1024;
  }
  *(_QWORD *)&v238 = v134;
LABEL_167:
  *(float *)a3 = v89;
  *(float *)(a3 + 4) = v121;
  *(float *)(a3 + 8) = v129;
  *(_BYTE *)(a3 + 64) = 1;
  v231 = 0u;
  v232 = 0u;
  *(_OWORD *)__p = 0u;
  v136 = *((_DWORD *)v58 + 26);
  v135 = *((_DWORD *)v58 + 27);
  v242 = v136;
  if (v136 <= v135)
  {
    p_vtable = &OBJC_METACLASS___CMCardioFitnessSummary.vtable;
    v142 = (void **)(&OBJC_METACLASS___CMCardioFitnessSummary + 24);
    do
    {
      v143 = *v59;
      if (*v59)
      {
        v144 = v59;
        do
        {
          v145 = *(_DWORD *)(v143 + 32);
          v146 = v145 < v136;
          if (v145 >= v136)
            v147 = (uint64_t *)v143;
          else
            v147 = (uint64_t *)(v143 + 8);
          if (!v146)
            v144 = (uint64_t *)v143;
          v143 = *v147;
        }
        while (*v147);
        if (v144 != v59 && v136 >= *((_DWORD *)v144 + 8))
        {
          v258 = 0u;
          v259 = 0u;
          v257 = 0u;
          v148 = sub_18F42188C(v56, v136, &v242);
          v149 = *((_QWORD *)v148 + 9);
          v150 = *((_QWORD *)v148 + 6);
          v151 = (_QWORD *)(v150 + 8 * (v149 >> 8));
          if (*((_QWORD *)v148 + 7) == v150)
            v152 = 0;
          else
            v152 = *v151 + 16 * v149;
          while (1)
          {
            v154 = sub_18F42188C(v56, v136, &v242);
            v155 = *((_QWORD *)v154 + 6);
            if (*((_QWORD *)v154 + 7) == v155)
            {
              v157 = 0;
            }
            else
            {
              v156 = *((_QWORD *)v154 + 10) + *((_QWORD *)v154 + 9);
              v157 = *(_QWORD *)(v155 + ((v156 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v156;
            }
            if (v152 == v157)
              break;
            sub_18F1FD700(&v257, (float *)(v152 + 8));
            v152 += 16;
            if (v152 - *v151 == 4096)
            {
              v153 = v151[1];
              ++v151;
              v152 = v153;
            }
            v136 = v242;
          }
          if (*((_QWORD *)&v259 + 1))
          {
            v158 = (char *)(*((_QWORD *)&v257 + 1) + 8 * ((unint64_t)v259 >> 10));
            if ((_QWORD)v258 == *((_QWORD *)&v257 + 1))
            {
              v159 = 0;
              v161 = 0;
              v160 = (char *)(*((_QWORD *)&v257 + 1) + 8 * (((_QWORD)v259 + *((_QWORD *)&v259 + 1)) >> 10));
            }
            else
            {
              v159 = *(_QWORD *)v158 + 4 * (v259 & 0x3FF);
              v160 = (char *)(*((_QWORD *)&v257 + 1) + 8 * (((_QWORD)v259 + *((_QWORD *)&v259 + 1)) >> 10));
              v161 = *(_QWORD *)v160 + 4 * ((v259 + *((_QWORD *)&v259 + 1)) & 0x3FF);
            }
            v162 = sub_18F421964(v158, v159, v160, v161);
            v163 = (char *)v231;
            v164 = (char *)__p[1];
            v165 = v231 - (unint64_t)__p[1];
            if ((void *)v231 == __p[1])
              v166 = 0;
            else
              v166 = (((_QWORD)v231 - (unint64_t)__p[1]) << 6) - 1;
            v167 = *((_QWORD *)&v232 + 1);
            v168 = *((_QWORD *)&v232 + 1) + v232;
            if (v166 == *((_QWORD *)&v232 + 1) + (_QWORD)v232)
            {
              if ((unint64_t)v232 < 0x200)
              {
                v179 = p_vtable;
                v180 = v165 >> 3;
                if (v165 >> 3 >= (unint64_t)((uint64_t)(*((_QWORD *)&v231 + 1) - (unint64_t)__p[0]) >> 3))
                {
                  if (*((void **)&v231 + 1) == __p[0])
                    v181 = 1;
                  else
                    v181 = (uint64_t)(*((_QWORD *)&v231 + 1) - (unint64_t)__p[0]) >> 2;
                  v251.i64[0] = (uint64_t)&v231 + 8;
                  *(_QWORD *)buf = sub_18F340E0C(v181);
                  *(_QWORD *)&buf[8] = *(_QWORD *)buf + 8 * v180;
                  *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
                  *(_QWORD *)&buf[24] = *(_QWORD *)buf + 8 * v182;
                  *(_QWORD *)v243 = operator new(0x1000uLL);
                  sub_18F4215F4(buf, v243);
                  v183 = (_QWORD *)v231;
                  p_vtable = v179;
                  v142 = (void **)(&OBJC_METACLASS___CMCardioFitnessSummary + 24);
                  while (v183 != __p[1])
                    sub_18F421704((uint64_t)buf, --v183);
                  v184 = __p[0];
                  *(_OWORD *)__p = *(_OWORD *)buf;
                  v231 = *(_OWORD *)&buf[16];
                  if (v184)
                    operator delete(v184);
                }
                else if (*((_QWORD *)&v231 + 1) == (_QWORD)v231)
                {
                  *(_QWORD *)buf = operator new(0x1000uLL);
                  sub_18F421704((uint64_t)__p, buf);
                  v199 = (char *)v231;
                  v200 = (char *)__p[1] + 8;
                  v201 = *(_QWORD *)__p[1];
                  __p[1] = (char *)__p[1] + 8;
                  v142 = (void **)(&OBJC_METACLASS___CMCardioFitnessSummary + 24);
                  if ((_QWORD)v231 == *((_QWORD *)&v231 + 1))
                  {
                    v202 = v200 - (char *)__p[0];
                    if (v200 <= __p[0])
                    {
                      if ((void *)v231 == __p[0])
                        v207 = 1;
                      else
                        v207 = (uint64_t)(v231 - (unint64_t)__p[0]) >> 2;
                      v208 = (char *)sub_18F340E0C(v207);
                      v210 = (uint64_t *)__p[1];
                      v199 = &v208[8 * (v207 >> 2)];
                      v211 = v231 - (unint64_t)__p[1];
                      if ((void *)v231 != __p[1])
                      {
                        v199 = &v208[8 * (v207 >> 2) + (v211 & 0xFFFFFFFFFFFFFFF8)];
                        v212 = 8 * (v211 >> 3);
                        v213 = &v208[8 * (v207 >> 2)];
                        do
                        {
                          v214 = *v210++;
                          *(_QWORD *)v213 = v214;
                          v213 += 8;
                          v212 -= 8;
                        }
                        while (v212);
                      }
                      v215 = __p[0];
                      __p[0] = v208;
                      __p[1] = &v208[8 * (v207 >> 2)];
                      *(_QWORD *)&v231 = v199;
                      *((_QWORD *)&v231 + 1) = &v208[8 * v209];
                      v142 = (void **)(&OBJC_METACLASS___CMCardioFitnessSummary + 24);
                      if (v215)
                      {
                        operator delete(v215);
                        v199 = (char *)v231;
                      }
                    }
                    else
                    {
                      v203 = v202 >> 3;
                      v146 = v202 >> 3 < -1;
                      v204 = (v202 >> 3) + 2;
                      if (!v146)
                        v204 = v203 + 1;
                      v205 = &v200[-8 * (v204 >> 1)];
                      v206 = v231 - (_QWORD)v200;
                      if ((char *)v231 != v200)
                      {
                        v228 = v204;
                        memmove(&v200[-8 * (v204 >> 1)], v200, v231 - (_QWORD)v200);
                        v204 = v228;
                        v200 = (char *)__p[1];
                      }
                      v199 = &v205[v206];
                      __p[1] = &v200[-8 * (v204 >> 1)];
                      *(_QWORD *)&v231 = &v205[v206];
                    }
                  }
                  *(_QWORD *)v199 = v201;
                  *(_QWORD *)&v231 = v231 + 8;
                  p_vtable = v179;
                }
                else
                {
                  *(_QWORD *)buf = operator new(0x1000uLL);
                  sub_18F4215F4(__p, buf);
                  p_vtable = v179;
                  v142 = (void **)(&OBJC_METACLASS___CMCardioFitnessSummary + 24);
                }
              }
              else
              {
                *(_QWORD *)&v232 = v232 - 512;
                v169 = (char *)__p[1] + 8;
                v170 = *(_QWORD *)__p[1];
                __p[1] = (char *)__p[1] + 8;
                if ((_QWORD)v231 == *((_QWORD *)&v231 + 1))
                {
                  v171 = p_vtable;
                  v172 = v169 - (char *)__p[0];
                  if (v169 <= __p[0])
                  {
                    if ((void *)v231 == __p[0])
                      v185 = 1;
                    else
                      v185 = (uint64_t)(v231 - (unint64_t)__p[0]) >> 2;
                    v186 = (char *)sub_18F340E0C(v185);
                    v188 = (uint64_t *)__p[1];
                    v163 = &v186[8 * (v185 >> 2)];
                    v189 = v231 - (unint64_t)__p[1];
                    if ((void *)v231 != __p[1])
                    {
                      v163 = &v186[8 * (v185 >> 2) + (v189 & 0xFFFFFFFFFFFFFFF8)];
                      v190 = 8 * (v189 >> 3);
                      v191 = &v186[8 * (v185 >> 2)];
                      do
                      {
                        v192 = *v188++;
                        *(_QWORD *)v191 = v192;
                        v191 += 8;
                        v190 -= 8;
                      }
                      while (v190);
                    }
                    v193 = __p[0];
                    __p[0] = v186;
                    __p[1] = &v186[8 * (v185 >> 2)];
                    *(_QWORD *)&v231 = v163;
                    *((_QWORD *)&v231 + 1) = &v186[8 * v187];
                    v142 = &OBJC_METACLASS___CMCardioFitnessSummary.vtable;
                    if (v193)
                    {
                      operator delete(v193);
                      v163 = (char *)v231;
                    }
                  }
                  else
                  {
                    v173 = v172 >> 3;
                    v146 = v172 >> 3 < -1;
                    v174 = (v172 >> 3) + 2;
                    if (v146)
                      v175 = v174;
                    else
                      v175 = v173 + 1;
                    v176 = &v169[-8 * (v175 >> 1)];
                    v177 = v231 - (_QWORD)v169;
                    if ((char *)v231 != v169)
                    {
                      memmove(&v169[-8 * (v175 >> 1)], v169, v231 - (_QWORD)v169);
                      v163 = (char *)__p[1];
                    }
                    v178 = &v163[-8 * (v175 >> 1)];
                    v163 = &v176[v177];
                    __p[1] = v178;
                    *(_QWORD *)&v231 = &v176[v177];
                    p_vtable = v171;
                    v142 = (void **)(&OBJC_METACLASS___CMCardioFitnessSummary + 24);
                  }
                }
                *(_QWORD *)v163 = v170;
                *(_QWORD *)&v231 = v231 + 8;
              }
              v164 = (char *)__p[1];
              v167 = *((_QWORD *)&v232 + 1);
              v168 = *((_QWORD *)&v232 + 1) + v232;
            }
            v194 = *(_QWORD *)&v164[(v168 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v168 & 0x1FF);
            *(float *)v194 = v162;
            *(float *)(v194 + 4) = (float)v136 + 0.5;
            *((_QWORD *)&v232 + 1) = v167 + 1;
            if (p_vtable[217] != (void *)-1)
              dispatch_once(&qword_1EE16D6C8, &unk_1E2953828);
            v195 = v142[216];
            if (os_log_type_enabled(v195, OS_LOG_TYPE_DEBUG))
            {
              v196 = (float *)(*(_QWORD *)((char *)__p[1]
                                         + (((unint64_t)(*((_QWORD *)&v232 + 1) + v232 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                             + 8 * ((*((_QWORD *)&v232 + 1) + v232 - 1) & 0x1FF));
              v197 = v196[1];
              v198 = *v196;
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "PRTTSampleTemperature";
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = v197;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = "PRTTSamplePressure";
              v251.i16[0] = 2048;
              *(double *)((char *)v251.i64 + 2) = v198;
              _os_log_impl(&dword_18F1DC000, v195, OS_LOG_TYPE_DEBUG, "%s,%f,%s,%f", buf, 0x2Au);
            }
            if (sub_18F1FCA08(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (p_vtable[217] != (void *)-1)
                dispatch_once(&qword_1EE16D6C8, &unk_1E2953828);
              v216 = (float *)(*(_QWORD *)((char *)__p[1]
                                         + (((unint64_t)(*((_QWORD *)&v232 + 1) + v232 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                             + 8 * ((*((_QWORD *)&v232 + 1) + v232 - 1) & 0x1FF));
              v217 = v216[1];
              v218 = *v216;
              *(_DWORD *)v243 = 136315906;
              *(_QWORD *)&v243[4] = "PRTTSampleTemperature";
              v244 = 2048;
              v245 = v217;
              v246 = 2080;
              v247 = "PRTTSamplePressure";
              v248 = 2048;
              v249 = v218;
              v219 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 2, "std::deque<CLMotionTypePressure> CLRobustSlopeEstimator::computePRTT()", "CoreLocation: %s\n", v219);
              if (v219 != buf)
                free(v219);
            }
          }
          sub_18F3CBA50(&v257);
        }
      }
      v242 = v136 + 1;
      v146 = v136++ < *((_DWORD *)v58 + 27);
    }
    while (v146);
  }
  v138 = *(void ***)(a3 + 80);
  v137 = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a3 + 112) = 0;
  v139 = v137 - (_QWORD)v138;
  if ((unint64_t)(v137 - (_QWORD)v138) < 0x11)
  {
    v140 = (void **)(a3 + 72);
  }
  else
  {
    v140 = (void **)(a3 + 72);
    do
    {
      operator delete(*v138);
      v137 = *(_QWORD *)(a3 + 88);
      v138 = (void **)(*(_QWORD *)(a3 + 80) + 8);
      *(_QWORD *)(a3 + 80) = v138;
      v139 = v137 - (_QWORD)v138;
    }
    while ((unint64_t)(v137 - (_QWORD)v138) > 0x10);
  }
  v220 = v139 >> 3;
  if (v220 == 1)
  {
    v221 = 256;
    goto LABEL_264;
  }
  if (v220 == 2)
  {
    v221 = 512;
LABEL_264:
    *(_QWORD *)(a3 + 104) = v221;
  }
  v222 = *(_QWORD *)(a3 + 112);
  if (v222)
  {
    v223 = *(_QWORD *)(a3 + 104);
    if (v223 >= 0x200)
    {
      operator delete(*v138);
      v137 = *(_QWORD *)(a3 + 88);
      v138 = (void **)(*(_QWORD *)(a3 + 80) + 8);
      *(_QWORD *)(a3 + 80) = v138;
      v222 = *(_QWORD *)(a3 + 112);
      v223 = *(_QWORD *)(a3 + 104) - 512;
      *(_QWORD *)(a3 + 104) = v223;
    }
    if ((void **)v137 == v138)
      v224 = 0;
    else
      v224 = ((v137 - (_QWORD)v138) << 6) - 1;
    if (v224 - (v223 + v222) >= 0x200)
    {
      operator delete(*(void **)(v137 - 8));
      *(_QWORD *)(a3 + 88) -= 8;
    }
  }
  else
  {
    while ((void **)v137 != v138)
    {
      operator delete(*(void **)(v137 - 8));
      v138 = *(void ***)(a3 + 80);
      v137 = *(_QWORD *)(a3 + 88) - 8;
      *(_QWORD *)(a3 + 88) = v137;
    }
    *(_QWORD *)(a3 + 104) = 0;
  }
  sub_18F4220C4(v140);
  v226 = *(_QWORD *)(a3 + 80);
  v225 = *(_QWORD *)(a3 + 88);
  if (v225 != v226)
    *(_QWORD *)(a3 + 88) = v225 + ((v226 - v225 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_18F4220C4(v140);
  v227 = v231;
  *(_OWORD *)(a3 + 72) = *(_OWORD *)__p;
  *(_OWORD *)(a3 + 88) = v227;
  *(_OWORD *)__p = 0u;
  v231 = 0u;
  *(_OWORD *)(a3 + 104) = v232;
  v232 = 0uLL;
  sub_18F3D30B8(__p);
  sub_18F3CBA50(&v233);
  sub_18F3CBA50(&v236);
  sub_18F3CBA50(&v239);
}

void sub_18F42013C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60)
{
  _QWORD *v60;

  sub_18F3D30B8(v60);
  _Unwind_Resume(a1);
}

void sub_18F420230(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float *v5;
  unint64_t v6;
  float v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  void **v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  float v29;
  float v30;
  int v31;
  uint64_t **v32;
  NSObject *v33;
  char *v34;
  uint64_t v35;
  int v36;
  char *v37;
  int v38;
  double v39;
  float v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int64_t v60;
  char *v61;
  char *v62;
  char *v63;
  void *v64;
  void *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  void *v89;
  uint64_t **v90;
  NSObject *v91;
  double v92;
  float v93;
  float v94;
  int v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  void *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  int64_t v117;
  void *v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t i;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  void *v151;
  double v152;
  float v153;
  float v154;
  int v155;
  char *v156;
  char *v157;
  double v158;
  int v159;
  char *v160;
  uint64_t v161;
  uint64_t **v162;
  int v163;
  int v164;
  const char *v165;
  __int16 v166;
  double v167;
  __int16 v168;
  const char *v169;
  __int16 v170;
  double v171;
  __int16 v172;
  const char *v173;
  __int16 v174;
  double v175;
  __int16 v176;
  const char *v177;
  __int16 v178;
  double v179;
  __int16 v180;
  const char *v181;
  __int16 v182;
  int v183;
  uint8_t buf[32];
  _BYTE v185[20];
  __int16 v186;
  double v187;
  __int16 v188;
  const char *v189;
  __int16 v190;
  double v191;
  __int16 v192;
  const char *v193;
  __int16 v194;
  int v195;
  uint64_t v196;

  v196 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 8;
  v5 = (float *)(a2 + 12);
  sub_18F1FD700((_QWORD *)(a1 + 8), (float *)(a2 + 12));
  v6 = *(_QWORD *)(a1 + 48);
  if (v6 >= 0x14)
  {
    v7 = *v5;
    v8 = (int)*v5;
    if (*(_DWORD *)(a1 + 104) <= v8 && *(_DWORD *)(a1 + 108) >= v8)
    {
      v9 = *(_QWORD *)(a1 + 40);
      v10 = v6 - 1;
      v11 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + (((v9 + v10) >> 7) & 0x1FFFFFFFFFFFFF8))
                     + 4 * ((v9 + v10) & 0x3FF))
          - *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + ((v9 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v9 & 0x3FF));
      if (v11 == 0.0)
      {
LABEL_89:
        *(_QWORD *)(a1 + 40) = v9 + 1;
        *(_QWORD *)(a1 + 48) = v10;
        sub_18F3CBAE4(v4, 1);
        return;
      }
      v163 = (int)*v5;
      v12 = *(_QWORD *)(a1 + 64);
      if (v12)
      {
        v13 = a1 + 64;
        do
        {
          v14 = *(_DWORD *)(v12 + 32);
          v15 = v14 < v8;
          if (v14 >= v8)
            v16 = (uint64_t *)v12;
          else
            v16 = (uint64_t *)(v12 + 8);
          if (!v15)
            v13 = v12;
          v12 = *v16;
        }
        while (*v16);
        if (v13 != a1 + 64 && *(_DWORD *)(v13 + 32) <= v8)
        {
LABEL_34:
          v29 = powf(0.2, v11 * 0.05);
          if (v11 >= 0.0)
          {
            v30 = v29;
            v31 = v8 + 1;
          }
          else
          {
            v30 = powf(0.2, v11 * -0.05);
            v31 = v8;
          }
          v162 = (uint64_t **)(a1 + 80);
          if (*((_DWORD *)sub_18F422328((uint64_t **)(a1 + 80), v8, &v163) + 8) == 30
            && (float)((float)(1.0 - v30) * 2147500000.0) > (float)rand())
          {
            v32 = sub_18F422328(v162, v8, &v163);
            --*((_DWORD *)v32 + 8);
            if (qword_1EE16D6C8 != -1)
              dispatch_once(&qword_1EE16D6C8, &unk_1E2953828);
            v33 = qword_1EE16D6C0;
            if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_DEBUG))
            {
              v34 = sub_18F42188C((uint64_t **)(a1 + 56), v8, &v163);
              v35 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v34 + 6) + ((*((_QWORD *)v34 + 9) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * *((_QWORD *)v34 + 9));
              v36 = *((_DWORD *)sub_18F422328(v162, v8, &v163) + 8);
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "PopSampleTime";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v35;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = "CalibrationBinCount";
              *(_WORD *)v185 = 1024;
              *(_DWORD *)&v185[2] = v36;
              _os_log_impl(&dword_18F1DC000, v33, OS_LOG_TYPE_DEBUG, "%s,%f,%s,%d", buf, 0x26u);
            }
            if (sub_18F1FCA08(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE16D6C8 != -1)
                dispatch_once(&qword_1EE16D6C8, &unk_1E2953828);
              v157 = sub_18F42188C((uint64_t **)(a1 + 56), v8, &v163);
              v158 = *(double *)(*(_QWORD *)(*((_QWORD *)v157 + 6) + ((*((_QWORD *)v157 + 9) >> 5) & 0x7FFFFFFFFFFFFF8))
                               + 16 * *((_QWORD *)v157 + 9));
              v159 = *((_DWORD *)sub_18F422328(v162, v8, &v163) + 8);
              v164 = 136315906;
              v165 = "PopSampleTime";
              v166 = 2048;
              v167 = v158;
              v168 = 2080;
              v169 = "CalibrationBinCount";
              v170 = 1024;
              LODWORD(v171) = v159;
              v160 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 2, "void CLRobustSlopeEstimator::addPoint(const CLPressure::Sample *)", "CoreLocation: %s\n", v160);
              if (v160 != (char *)buf)
                free(v160);
            }
            v37 = sub_18F42188C((uint64_t **)(a1 + 56), v8, &v163);
            *(int64x2_t *)(v37 + 72) = vaddq_s64(*(int64x2_t *)(v37 + 72), (int64x2_t)xmmword_18F507FF0);
            sub_18F422214((uint64_t)(v37 + 40), 1);
          }
          v38 = *((_DWORD *)sub_18F422328(v162, v8, &v163) + 8);
          v39 = *(double *)a2;
          if (v38 >= 1 && v39 - *(float *)a1 <= (float)((float)((float)((float)v31 - v7) / v11) / (float)(30 - v38)))
            goto LABEL_88;
          v40 = v39;
          *(float *)a1 = v40;
          v41 = sub_18F42188C((uint64_t **)(a1 + 56), v8, &v163);
          v42 = v41;
          v43 = (char *)*((_QWORD *)v41 + 7);
          v44 = (char *)*((_QWORD *)v41 + 6);
          v45 = v43 - v44;
          if (v43 == v44)
            v46 = 0;
          else
            v46 = 32 * (v43 - v44) - 1;
          v47 = *((_QWORD *)v41 + 9);
          v48 = *((_QWORD *)v41 + 10) + v47;
          if (v46 != v48)
          {
LABEL_83:
            *(_OWORD *)(*(_QWORD *)&v44[(v48 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v48) = *(_OWORD *)a2;
            ++*((_QWORD *)v42 + 10);
            v90 = sub_18F422328(v162, v8, &v163);
            ++*((_DWORD *)v90 + 8);
            if (qword_1EE16D6C8 != -1)
              dispatch_once(&qword_1EE16D6C8, &unk_1E2953828);
            v91 = qword_1EE16D6C0;
            if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_DEBUG))
            {
              v92 = *(double *)a2;
              v94 = *(float *)(a2 + 8);
              v93 = *(float *)(a2 + 12);
              v95 = *((_DWORD *)sub_18F422328(v162, v8, &v163) + 8);
              *(_DWORD *)buf = 136317442;
              *(_QWORD *)&buf[4] = "CalibrationSampleTime";
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = v92;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = "CalibrationSamplePressure";
              *(_WORD *)v185 = 2048;
              *(double *)&v185[2] = v94;
              *(_WORD *)&v185[10] = 2080;
              *(_QWORD *)&v185[12] = "CalibrationSampleTemperature";
              v186 = 2048;
              v187 = v93;
              v188 = 2080;
              v189 = "CalibrationTemperatureRate";
              v190 = 2048;
              v191 = v11;
              v192 = 2080;
              v193 = "CalibrationBinCount";
              v194 = 1024;
              v195 = v95;
              _os_log_impl(&dword_18F1DC000, v91, OS_LOG_TYPE_DEBUG, "%s,%f,%s,%f,%s,%f,%s,%f,%s,%d", buf, 0x62u);
            }
            if (sub_18F1FCA08(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE16D6C8 != -1)
                dispatch_once(&qword_1EE16D6C8, &unk_1E2953828);
              v152 = *(double *)a2;
              v154 = *(float *)(a2 + 8);
              v153 = *(float *)(a2 + 12);
              v155 = *((_DWORD *)sub_18F422328(v162, v8, &v163) + 8);
              v164 = 136317442;
              v165 = "CalibrationSampleTime";
              v166 = 2048;
              v167 = v152;
              v168 = 2080;
              v169 = "CalibrationSamplePressure";
              v170 = 2048;
              v171 = v154;
              v172 = 2080;
              v173 = "CalibrationSampleTemperature";
              v174 = 2048;
              v175 = v153;
              v176 = 2080;
              v177 = "CalibrationTemperatureRate";
              v178 = 2048;
              v179 = v11;
              v180 = 2080;
              v181 = "CalibrationBinCount";
              v182 = 1024;
              v183 = v155;
              v156 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 2, "void CLRobustSlopeEstimator::addPoint(const CLPressure::Sample *)", "CoreLocation: %s\n", v156);
              if (v156 != (char *)buf)
                free(v156);
            }
LABEL_88:
            v9 = *(_QWORD *)(a1 + 40);
            v10 = *(_QWORD *)(a1 + 48) - 1;
            goto LABEL_89;
          }
          if (v47 < 0x100)
          {
            v62 = (char *)*((_QWORD *)v41 + 8);
            v63 = (char *)*((_QWORD *)v41 + 5);
            if (v45 >> 3 >= (unint64_t)((v62 - v63) >> 3))
            {
              v161 = v45 >> 3;
              if (v62 == v63)
                v66 = 1;
              else
                v66 = (v62 - v63) >> 2;
              v67 = (char *)sub_18F340E0C(v66);
              v69 = v68;
              v70 = operator new(0x1000uLL);
              v71 = &v67[8 * v161];
              v72 = v69;
              v73 = &v67[8 * v69];
              if (v161 == v72)
              {
                v74 = 8 * v161;
                if (v45 < 1)
                {
                  v118 = v70;
                  v119 = v74 >> 2;
                  if (v43 == v44)
                    v120 = 1;
                  else
                    v120 = v119;
                  v121 = (char *)sub_18F340E0C(v120);
                  v71 = &v121[8 * (v120 >> 2)];
                  v73 = &v121[8 * v122];
                  if (v67)
                    operator delete(v67);
                  v67 = v121;
                  v70 = v118;
                }
                else
                {
                  v75 = v74 >> 3;
                  if (v75 >= -1)
                    v76 = v75 + 1;
                  else
                    v76 = v75 + 2;
                  v71 -= 8 * (v76 >> 1);
                }
              }
              *(_QWORD *)v71 = v70;
              v123 = v71 + 8;
              for (i = *((_QWORD *)v42 + 7); i != *((_QWORD *)v42 + 6); i -= 8)
              {
                if (v71 == v67)
                {
                  if (v123 >= v73)
                  {
                    if (v73 == v67)
                      v129 = 1;
                    else
                      v129 = (v73 - v67) >> 2;
                    v130 = (char *)sub_18F340E0C(v129);
                    v132 = v130;
                    v71 = &v130[(2 * v129 + 6) & 0xFFFFFFFFFFFFFFF8];
                    v133 = v123 - v67;
                    v77 = v123 == v67;
                    v123 = v71;
                    if (!v77)
                    {
                      v123 = &v71[v133 & 0xFFFFFFFFFFFFFFF8];
                      v134 = 8 * (v133 >> 3);
                      v135 = v71;
                      v136 = (uint64_t *)v67;
                      do
                      {
                        v137 = *v136++;
                        *(_QWORD *)v135 = v137;
                        v135 += 8;
                        v134 -= 8;
                      }
                      while (v134);
                    }
                    v73 = &v130[8 * v131];
                    if (v67)
                      operator delete(v67);
                    v67 = v132;
                  }
                  else
                  {
                    v125 = (v73 - v123) >> 3;
                    if (v125 >= -1)
                      v126 = v125 + 1;
                    else
                      v126 = v125 + 2;
                    v127 = v126 >> 1;
                    v71 = &v67[8 * (v126 >> 1)];
                    v128 = v67;
                    if (v123 != v67)
                    {
                      memmove(v71, v67, v123 - v67);
                      v128 = v123;
                    }
                    v123 = &v128[8 * v127];
                  }
                }
                v138 = *(_QWORD *)(i - 8);
                *((_QWORD *)v71 - 1) = v138;
                v71 -= 8;
              }
              v139 = (void *)*((_QWORD *)v42 + 5);
              *((_QWORD *)v42 + 5) = v67;
              *((_QWORD *)v42 + 6) = v71;
              *((_QWORD *)v42 + 7) = v123;
              *((_QWORD *)v42 + 8) = v73;
              if (v139)
                operator delete(v139);
              goto LABEL_82;
            }
            v64 = operator new(0x1000uLL);
            v65 = v64;
            if (v62 == v43)
            {
              if (v44 == v63)
              {
                if (v43 == v44)
                  v96 = 1;
                else
                  v96 = (v62 - v44) >> 2;
                v97 = (char *)sub_18F340E0C(v96);
                v44 = &v97[8 * ((v96 + 3) >> 2)];
                v99 = (uint64_t *)*((_QWORD *)v42 + 6);
                v100 = v44;
                v101 = *((_QWORD *)v42 + 7) - (_QWORD)v99;
                if (v101)
                {
                  v100 = &v44[v101 & 0xFFFFFFFFFFFFFFF8];
                  v102 = 8 * (v101 >> 3);
                  v103 = &v97[8 * ((v96 + 3) >> 2)];
                  do
                  {
                    v104 = *v99++;
                    *(_QWORD *)v103 = v104;
                    v103 += 8;
                    v102 -= 8;
                  }
                  while (v102);
                }
                v105 = (void *)*((_QWORD *)v42 + 5);
                *((_QWORD *)v42 + 5) = v97;
                *((_QWORD *)v42 + 6) = v44;
                *((_QWORD *)v42 + 7) = v100;
                *((_QWORD *)v42 + 8) = &v97[8 * v98];
                if (v105)
                {
                  operator delete(v105);
                  v44 = (char *)*((_QWORD *)v42 + 6);
                }
              }
              *((_QWORD *)v44 - 1) = v65;
              v106 = (char *)*((_QWORD *)v42 + 6);
              v107 = (char *)*((_QWORD *)v42 + 7);
              *((_QWORD *)v42 + 6) = v106 - 8;
              v108 = *((_QWORD *)v106 - 1);
              *((_QWORD *)v42 + 6) = v106;
              if (v107 == *((char **)v42 + 8))
              {
                v109 = *((_QWORD *)v42 + 5);
                v110 = (uint64_t)&v106[-v109];
                if ((unint64_t)v106 <= v109)
                {
                  v140 = (uint64_t)&v107[-v109];
                  v77 = v140 == 0;
                  v141 = v140 >> 2;
                  if (v77)
                    v142 = 1;
                  else
                    v142 = v141;
                  v143 = (char *)sub_18F340E0C(v142);
                  v145 = &v143[8 * (v142 >> 2)];
                  v146 = (uint64_t *)*((_QWORD *)v42 + 6);
                  v107 = v145;
                  v147 = *((_QWORD *)v42 + 7) - (_QWORD)v146;
                  if (v147)
                  {
                    v107 = &v145[v147 & 0xFFFFFFFFFFFFFFF8];
                    v148 = 8 * (v147 >> 3);
                    v149 = &v143[8 * (v142 >> 2)];
                    do
                    {
                      v150 = *v146++;
                      *(_QWORD *)v149 = v150;
                      v149 += 8;
                      v148 -= 8;
                    }
                    while (v148);
                  }
                  v151 = (void *)*((_QWORD *)v42 + 5);
                  *((_QWORD *)v42 + 5) = v143;
                  *((_QWORD *)v42 + 6) = v145;
                  *((_QWORD *)v42 + 7) = v107;
                  *((_QWORD *)v42 + 8) = &v143[8 * v144];
                  if (v151)
                  {
                    operator delete(v151);
                    v107 = (char *)*((_QWORD *)v42 + 7);
                  }
                }
                else
                {
                  v111 = v110 >> 3;
                  v15 = v110 >> 3 < -1;
                  v112 = (v110 >> 3) + 2;
                  if (v15)
                    v113 = v112;
                  else
                    v113 = v111 + 1;
                  v114 = -(v113 >> 1);
                  v115 = v113 >> 1;
                  v116 = &v106[-8 * v115];
                  v117 = v107 - v106;
                  if (v107 != v106)
                  {
                    memmove(&v106[-8 * v115], v106, v107 - v106);
                    v106 = (char *)*((_QWORD *)v42 + 6);
                  }
                  v107 = &v116[v117];
                  *((_QWORD *)v42 + 6) = &v106[8 * v114];
                  *((_QWORD *)v42 + 7) = &v116[v117];
                }
              }
              *(_QWORD *)v107 = v108;
            }
            else
            {
              *(_QWORD *)v43 = v64;
            }
          }
          else
          {
            *((_QWORD *)v41 + 9) = v47 - 256;
            v51 = *(_QWORD *)v44;
            v49 = v44 + 8;
            v50 = v51;
            *((_QWORD *)v41 + 6) = v49;
            if (v43 == *((char **)v41 + 8))
            {
              v52 = *((_QWORD *)v41 + 5);
              v53 = (uint64_t)&v49[-v52];
              if ((unint64_t)v49 <= v52)
              {
                v78 = (uint64_t)&v43[-v52];
                v77 = v78 == 0;
                v79 = v78 >> 2;
                if (v77)
                  v80 = 1;
                else
                  v80 = v79;
                v81 = (char *)sub_18F340E0C(v80);
                v83 = &v81[8 * (v80 >> 2)];
                v84 = (uint64_t *)*((_QWORD *)v42 + 6);
                v43 = v83;
                v85 = *((_QWORD *)v42 + 7) - (_QWORD)v84;
                if (v85)
                {
                  v43 = &v83[v85 & 0xFFFFFFFFFFFFFFF8];
                  v86 = 8 * (v85 >> 3);
                  v87 = &v81[8 * (v80 >> 2)];
                  do
                  {
                    v88 = *v84++;
                    *(_QWORD *)v87 = v88;
                    v87 += 8;
                    v86 -= 8;
                  }
                  while (v86);
                }
                v89 = (void *)*((_QWORD *)v42 + 5);
                *((_QWORD *)v42 + 5) = v81;
                *((_QWORD *)v42 + 6) = v83;
                *((_QWORD *)v42 + 7) = v43;
                *((_QWORD *)v42 + 8) = &v81[8 * v82];
                if (v89)
                {
                  operator delete(v89);
                  v43 = (char *)*((_QWORD *)v42 + 7);
                }
              }
              else
              {
                v54 = v53 >> 3;
                v15 = v53 >> 3 < -1;
                v55 = (v53 >> 3) + 2;
                if (v15)
                  v56 = v55;
                else
                  v56 = v54 + 1;
                v57 = -(v56 >> 1);
                v58 = v56 >> 1;
                v59 = &v49[-8 * v58];
                v60 = v43 - v49;
                if (v43 != v49)
                {
                  memmove(&v49[-8 * v58], v49, v43 - v49);
                  v43 = (char *)*((_QWORD *)v42 + 6);
                }
                v61 = &v43[8 * v57];
                v43 = &v59[v60];
                *((_QWORD *)v42 + 6) = v61;
                *((_QWORD *)v42 + 7) = &v59[v60];
              }
            }
            *(_QWORD *)v43 = v50;
          }
          *((_QWORD *)v42 + 7) += 8;
LABEL_82:
          v44 = (char *)*((_QWORD *)v42 + 6);
          v48 = *((_QWORD *)v42 + 10) + *((_QWORD *)v42 + 9);
          v8 = v163;
          goto LABEL_83;
        }
      }
      *(_OWORD *)v185 = 0u;
      memset(buf, 0, sizeof(buf));
      v17 = sub_18F42188C((uint64_t **)(a1 + 56), v8, &v163);
      v19 = (void **)*((_QWORD *)v17 + 6);
      v18 = *((_QWORD *)v17 + 7);
      *((_QWORD *)v17 + 10) = 0;
      v20 = v18 - (_QWORD)v19;
      if ((unint64_t)(v18 - (_QWORD)v19) >= 0x11)
      {
        do
        {
          operator delete(*v19);
          v18 = *((_QWORD *)v17 + 7);
          v19 = (void **)(*((_QWORD *)v17 + 6) + 8);
          *((_QWORD *)v17 + 6) = v19;
          v20 = v18 - (_QWORD)v19;
        }
        while ((unint64_t)(v18 - (_QWORD)v19) > 0x10);
      }
      v21 = v20 >> 3;
      if (v21 == 1)
      {
        v22 = 128;
      }
      else
      {
        if (v21 != 2)
        {
LABEL_22:
          if (*((_QWORD *)v17 + 10))
          {
            sub_18F422214((uint64_t)(v17 + 40), 0);
            v24 = *((_QWORD *)v17 + 6);
            v23 = *((_QWORD *)v17 + 7);
            if (v23 == v24)
              v25 = 0;
            else
              v25 = 32 * (v23 - v24) - 1;
            if ((unint64_t)(v25 - (*((_QWORD *)v17 + 10) + *((_QWORD *)v17 + 9))) >= 0x100)
            {
              operator delete(*(void **)(v23 - 8));
              *((_QWORD *)v17 + 7) -= 8;
            }
          }
          else
          {
            while ((void **)v18 != v19)
            {
              operator delete(*(void **)(v18 - 8));
              v19 = (void **)*((_QWORD *)v17 + 6);
              v18 = *((_QWORD *)v17 + 7) - 8;
              *((_QWORD *)v17 + 7) = v18;
            }
            *((_QWORD *)v17 + 9) = 0;
          }
          sub_18F42226C((void **)v17 + 5);
          v27 = *((_QWORD *)v17 + 6);
          v26 = *((_QWORD *)v17 + 7);
          if (v26 != v27)
            *((_QWORD *)v17 + 7) = v26 + ((v27 - v26 + 7) & 0xFFFFFFFFFFFFFFF8);
          sub_18F42226C((void **)v17 + 5);
          *(_OWORD *)(v17 + 40) = *(_OWORD *)buf;
          v28 = *(_OWORD *)v185;
          *(_OWORD *)(v17 + 56) = *(_OWORD *)&buf[16];
          memset(buf, 0, sizeof(buf));
          *(_OWORD *)(v17 + 72) = v28;
          *(_QWORD *)v185 = 0;
          *(_QWORD *)&v185[8] = 0;
          sub_18F422180(buf);
          *((_DWORD *)sub_18F422328((uint64_t **)(a1 + 80), v8, &v163) + 8) = 0;
          v7 = *v5;
          goto LABEL_34;
        }
        v22 = 256;
      }
      *((_QWORD *)v17 + 9) = v22;
      goto LABEL_22;
    }
  }
}

void sub_18F420FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;

  operator delete(v30);
  if (v29)
    operator delete(v29);
  _Unwind_Resume(a1);
}

void sub_18F421034(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  *(_DWORD *)a1 = 0;
  v2 = *(void ***)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 48) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 24);
      v2 = (void **)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 40) = v6;
  }
  sub_18F421844(a1 + 56, *(_QWORD **)(a1 + 64));
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 64) = 0;
  v8 = *(_QWORD **)(a1 + 88);
  v7 = (_QWORD *)(a1 + 88);
  *(v7 - 2) = 0;
  sub_18F3BEA38((uint64_t)(v7 - 1), v8);
  *(v7 - 1) = v7;
  *v7 = 0;
  v7[1] = 0;
}

void sub_18F4210DC(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *j;
  char *v57;
  __int128 v58;
  uint64_t i;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  char *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  void *v84;
  __int128 v85;
  __int128 v86;
  _QWORD *v87;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = a1[4];
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_18F340E0C(v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          *(_QWORD *)&v85 = operator new(0x1000uLL);
          sub_18F4215F4(a1, &v85);
          --v6;
          if (!--v9)
            goto LABEL_73;
        }
        for (i = 0; i != v9; ++i)
        {
          *(_QWORD *)&v85 = operator new(0x1000uLL);
          sub_18F421704((uint64_t)a1, &v85);
          if (a1[2] - a1[1] == 8)
            v60 = 511;
          else
            v60 = 512;
          v61 = v60 + a1[4];
          a1[4] = v61;
        }
        v8 = v6;
      }
      else
      {
LABEL_73:
        v61 = a1[4];
      }
      a1[4] = v61 - (v8 << 9);
      if (v8)
      {
        v62 = (char *)a1[2];
        do
        {
          v63 = (_QWORD *)a1[1];
          v66 = *v63;
          v64 = (char *)(v63 + 1);
          v65 = v66;
          a1[1] = v64;
          if (v62 == (char *)a1[3])
          {
            v67 = (uint64_t)&v64[-*a1];
            if ((unint64_t)v64 <= *a1)
            {
              if (v62 == (char *)*a1)
                v74 = 1;
              else
                v74 = (uint64_t)&v62[-*a1] >> 2;
              v75 = (char *)sub_18F340E0C(v74);
              v77 = &v75[8 * (v74 >> 2)];
              v78 = (uint64_t *)a1[1];
              v62 = v77;
              v79 = a1[2] - (_QWORD)v78;
              if (v79)
              {
                v62 = &v77[v79 & 0xFFFFFFFFFFFFFFF8];
                v80 = 8 * (v79 >> 3);
                v81 = &v75[8 * (v74 >> 2)];
                do
                {
                  v82 = *v78++;
                  *(_QWORD *)v81 = v82;
                  v81 += 8;
                  v80 -= 8;
                }
                while (v80);
              }
              v83 = (char *)*a1;
              *a1 = v75;
              a1[1] = v77;
              a1[2] = v62;
              a1[3] = &v75[8 * v76];
              if (v83)
              {
                operator delete(v83);
                v62 = (char *)a1[2];
              }
            }
            else
            {
              v68 = v67 >> 3;
              v22 = v67 >> 3 < -1;
              v69 = (v67 >> 3) + 2;
              if (v22)
                v70 = v69;
              else
                v70 = v68 + 1;
              v71 = &v64[-8 * (v70 >> 1)];
              v72 = v62 - v64;
              if (v62 != v64)
              {
                memmove(&v64[-8 * (v70 >> 1)], v64, v62 - v64);
                v62 = (char *)a1[1];
              }
              v73 = &v62[-8 * (v70 >> 1)];
              v62 = &v71[v72];
              a1[1] = v73;
              a1[2] = &v71[v72];
            }
          }
          *(_QWORD *)v62 = v65;
          v62 = (char *)(a1[2] + 8);
          a1[2] = v62;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = (char *)(v9 + v11);
      else
        v13 = (char *)v12;
      v14 = v11 - v8;
      v87 = a1 + 3;
      if (v13)
        v13 = (char *)sub_18F340E0C((unint64_t)v13);
      else
        v15 = 0;
      v38 = v8 << 9;
      *(_QWORD *)&v85 = v13;
      *((_QWORD *)&v85 + 1) = &v13[8 * v14];
      *(_QWORD *)&v86 = *((_QWORD *)&v85 + 1);
      *((_QWORD *)&v86 + 1) = &v13[8 * v15];
      do
      {
        v84 = operator new(0x1000uLL);
        sub_18F4215F4(&v85, &v84);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v86;
        do
        {
          if (v40 == *((char **)&v86 + 1))
          {
            v41 = (char *)*((_QWORD *)&v85 + 1);
            v42 = (void *)v85;
            if (*((_QWORD *)&v85 + 1) <= (unint64_t)v85)
            {
              if (v40 == (char *)v85)
                v48 = 1;
              else
                v48 = (uint64_t)&v40[-v85] >> 2;
              v49 = (char *)sub_18F340E0C(v48);
              v52 = v40 - v41;
              v51 = v40 == v41;
              v40 = &v49[8 * (v48 >> 2)];
              if (!v51)
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *(_QWORD *)v41;
                  v41 += 8;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              *(_QWORD *)&v85 = v49;
              *((_QWORD *)&v85 + 1) = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v86 = v40;
              *((_QWORD *)&v86 + 1) = &v49[8 * v50];
              if (v42)
                operator delete(v42);
            }
            else
            {
              v43 = (uint64_t)(*((_QWORD *)&v85 + 1) - v85) >> 3;
              if (v43 >= -1)
                v44 = v43 + 1;
              else
                v44 = v43 + 2;
              v45 = *((_QWORD *)&v85 + 1) - 8 * (v44 >> 1);
              v46 = &v40[-*((_QWORD *)&v85 + 1)];
              if (v40 != *((char **)&v85 + 1))
              {
                memmove((void *)(*((_QWORD *)&v85 + 1) - 8 * (v44 >> 1)), *((const void **)&v85 + 1), (size_t)&v40[-*((_QWORD *)&v85 + 1)]);
                v40 = v41;
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v46[v45];
              *((_QWORD *)&v85 + 1) = v47;
              *(_QWORD *)&v86 = &v46[v45];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v86 + 8);
          *(_QWORD *)&v86 = v86 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      for (j = (_QWORD *)a1[2]; j != (_QWORD *)a1[1]; sub_18F421704((uint64_t)&v85, j))
        --j;
      v57 = (char *)*a1;
      v58 = v86;
      *(_OWORD *)a1 = v85;
      *((_OWORD *)a1 + 1) = v58;
      a1[4] -= v38;
      if (v57)
        operator delete(v57);
    }
  }
}

void sub_18F4215A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F4215F4(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_18F340E0C(v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_18F421704(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_18F340E0C(v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

os_log_t sub_18F421818()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Pressure");
  qword_1EE16D6C0 = (uint64_t)result;
  return result;
}

void sub_18F421844(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_18F421844(a1, *a2);
    sub_18F421844(a1, a2[1]);
    sub_18F422180(a2 + 5);
    operator delete(a2);
  }
}

char *sub_18F42188C(uint64_t **a1, int a2, _DWORD *a3)
{
  char *v5;
  uint64_t **v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *(char **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (char *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (char *)(a1 + 1);
LABEL_9:
    v9 = v7;
    v7 = (char *)operator new(0x58uLL);
    *((_DWORD *)v7 + 8) = *a3;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_18F3BE62C(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

float sub_18F421964(char *a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  float *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  float *v10;
  float *v11;
  char *v12;
  float *v13;
  float *v14;
  char *v15;
  float *v16;
  float *v17;
  uint64_t v18;
  float *v19;
  _QWORD *v20;
  float *v21;
  uint64_t v22;
  float *v23;
  int v24;
  float v25;
  float *v26;
  float *v27;
  float *v28;
  float *v29;
  float *v30;
  char *v31;
  float v32;
  float v33;
  float *v34;
  float *v35;
  float *v36;
  float v37;
  float v38;
  BOOL v39;
  float *v40;
  float v41;
  float *v42;
  float *v43;
  float *v44;
  char *v45;
  float *v46;
  char *v47;
  float *v48;
  float *v49;
  BOOL v50;
  float *v51;
  float *v52;
  float *v53;
  float *v54;
  float *v55;
  char *v56;
  uint64_t v57;
  float *v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float *v63;
  float *v64;
  float v65;
  float v66;
  float *v67;
  float v68;
  float *v69;
  float *v70;
  float *v71;
  float *v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  float v76;
  uint64_t v77;
  float *v78;
  float *v79;
  float *v80;
  float *v81;
  char *v82;
  float *v83;
  float v84;
  float *v85;
  float *v87;
  float *v88;
  float *v89;
  unint64_t v90;
  char *v91;

  if (a2 == a4
    || (v4 = a4,
        v5 = a3,
        v6 = (float *)a2,
        v7 = a1,
        v8 = a2 - *(_QWORD *)a1,
        ((a4 - *(_QWORD *)a3) >> 2) + ((a3 - a1) << 7) - (v8 >> 2) <= 0))
  {
    __assert_rtn("getMedianInPlace", "CMPressureUtilities.h", 163, "size > 0");
  }
  v90 = ((a4 - *(_QWORD *)a3) >> 2) + ((a3 - a1) << 7) - (v8 >> 2);
  v9 = (char *)sub_18F421FE8(a1, a2, v90 >> 1);
  v11 = v10;
  if (v10 != (float *)v4)
  {
    v12 = v9;
    v13 = v6;
    v14 = v6;
    v15 = v7;
    while (1)
    {
      if ((float *)v4 == v14)
        goto LABEL_124;
      v16 = *(float **)v5;
      v17 = *(float **)v15;
      v18 = ((v4 - *(_QWORD *)v5) >> 2) + ((v5 - v15) << 7) - (((uint64_t)v14 - *(_QWORD *)v15) >> 2);
      if ((unint64_t)v18 < 2)
        goto LABEL_124;
      if (v18 == 3)
      {
        v72 = v14 + 1;
        v73 = (uint64_t)v15;
        if ((char *)(v14 + 1) - (char *)v17 == 4096)
        {
          v73 = (uint64_t)(v15 + 8);
          v72 = (float *)*((_QWORD *)v15 + 1);
        }
        if ((float *)v4 == v16)
        {
          v74 = *((_QWORD *)v5 - 1);
          v5 -= 8;
          v4 = v74 + 4096;
        }
        sub_18F42203C((uint64_t)v15, v14, v73, v72, (uint64_t)v5, (float *)(v4 - 4));
        goto LABEL_124;
      }
      if (v18 == 2)
      {
        if ((float *)v4 == v16)
          v4 = *((_QWORD *)v5 - 1) + 4096;
        v75 = *(float *)(v4 - 4);
        if (v75 < *v14)
        {
          v76 = *v13;
          *v13 = v75;
          *(float *)(v4 - 4) = v76;
        }
        goto LABEL_124;
      }
      if (v18 <= 7)
      {
        v77 = v4;
        if (v16 == (float *)v4)
          v77 = *((_QWORD *)v5 - 1) + 4096;
        v78 = (float *)(v77 - 4);
        while (v13 != v78)
        {
          v79 = (float *)v4;
          if (v13 != (float *)v4)
          {
            v80 = v17;
            v79 = v13;
            v81 = v13;
            v82 = v15;
            while (1)
            {
              if ((char *)++v81 - (char *)v80 == 4096)
              {
                v83 = (float *)*((_QWORD *)v82 + 1);
                v82 += 8;
                v80 = v83;
                v81 = v83;
              }
              if (v81 == (float *)v4)
                break;
              if (*v81 < *v79)
                v79 = v81;
            }
          }
          if (v79 != v13)
          {
            v84 = *v13;
            *v13 = *v79;
            *v79 = v84;
          }
          if ((char *)++v13 - (char *)v17 == 4096)
          {
            v85 = (float *)*((_QWORD *)v15 + 1);
            v15 += 8;
            v17 = v85;
            v13 = v85;
          }
        }
        goto LABEL_124;
      }
      v20 = sub_18F421FE8(v15, (uint64_t)v14, (unint64_t)v18 >> 1);
      v21 = v19;
      v91 = v5;
      v22 = v4;
      if ((float *)v4 == v16)
      {
        v5 -= 8;
        v22 = *((_QWORD *)v91 - 1) + 4096;
      }
      v23 = (float *)(v22 - 4);
      v24 = sub_18F42203C((uint64_t)v15, v14, (uint64_t)v20, v19, (uint64_t)v5, (float *)(v22 - 4));
      v25 = *v14;
      if (*v14 >= *v21)
        break;
LABEL_19:
      v28 = v14 + 1;
      v29 = *(float **)v15;
      v30 = *(float **)v15;
      v31 = v15;
      if ((float *)((char *)v14 - *(_QWORD *)v15 + 4) == (float *)4096)
      {
        v31 = v15 + 8;
        v30 = (float *)*((_QWORD *)v15 + 1);
        v28 = v30;
      }
      if (v31 < v5 || v31 == v5 && v28 < v23)
      {
        while (1)
        {
          v32 = *v21;
          while (1)
          {
            v33 = *v28;
            if (*v28 >= v32)
              break;
            if ((char *)++v28 - (char *)v30 == 4096)
            {
              v34 = (float *)*((_QWORD *)v31 + 1);
              v31 += 8;
              v30 = v34;
              v28 = v34;
            }
          }
          v35 = *(float **)v5;
          do
          {
            if (v23 == v35)
            {
              v36 = (float *)*((_QWORD *)v5 - 1);
              v5 -= 8;
              v35 = v36;
              v23 = v36 + 1024;
            }
            v37 = *--v23;
            v38 = v37;
          }
          while (v37 >= v32);
          if (v31 >= v5 && (v31 != v5 || v28 >= v23))
            break;
          v39 = v21 == v28;
          *v28++ = v38;
          *v23 = v33;
          ++v24;
          if (v39)
            v21 = v23;
          if ((char *)v28 - (char *)v30 == 4096)
          {
            v40 = (float *)*((_QWORD *)v31 + 1);
            v31 += 8;
            v30 = v40;
            v28 = v40;
          }
        }
      }
      v5 = v91;
      if (v28 != v21)
      {
        v41 = *v28;
        if (*v21 < *v28)
        {
          *v28 = *v21;
          *v21 = v41;
          ++v24;
        }
      }
      if (v28 == v11)
        goto LABEL_124;
      if (!v24)
      {
        if (v31 > v12 || (v43 = v30, v44 = v28, v45 = v31, v28 > v11) && (v43 = v30, v44 = v28, v45 = v31, v31 == v12))
        {
          v46 = v14;
          v47 = v15;
          while (1)
          {
            v48 = v46 + 1;
            if ((char *)(v46 + 1) - (char *)v29 == 4096)
            {
              v49 = (float *)*((_QWORD *)v47 + 1);
              v47 += 8;
              v29 = v49;
              v48 = v49;
            }
            if (v48 == v28)
              break;
            v50 = *v48 < *v46;
            v46 = v48;
            if (v50)
              goto LABEL_44;
          }
        }
        else
        {
          while (1)
          {
            v51 = v44 + 1;
            if ((char *)(v44 + 1) - (char *)v43 == 4096)
            {
              v52 = (float *)*((_QWORD *)v45 + 1);
              v45 += 8;
              v43 = v52;
              v51 = v52;
            }
            if (v51 == (float *)v4)
              break;
            v50 = *v51 < *v44;
            v44 = v51;
            if (v50)
              goto LABEL_44;
          }
        }
        goto LABEL_124;
      }
LABEL_44:
      if (v31 <= v12)
      {
        if (v28 <= v11 || v31 != v12)
        {
          v42 = v28 + 1;
          if ((char *)(v28 + 1) - (char *)v30 == 4096)
          {
            v70 = (float *)*((_QWORD *)v31 + 1);
            v31 += 8;
            v42 = v70;
          }
          v15 = v31;
LABEL_94:
          v14 = v42;
          goto LABEL_95;
        }
        v42 = v14;
        v4 = (uint64_t)v28;
        v5 = v12;
      }
      else
      {
        v42 = v14;
        v4 = (uint64_t)v28;
        v5 = v31;
      }
LABEL_95:
      v13 = v14;
      v14 = v42;
      if ((float *)v4 == v11)
        goto LABEL_124;
    }
    v26 = *(float **)v5;
    while (1)
    {
      if (v23 == v26)
      {
        v27 = (float *)*((_QWORD *)v5 - 1);
        v5 -= 8;
        v26 = v27;
        v23 = v27 + 1024;
      }
      if (v14 == --v23)
        break;
      if (*v23 < *v21)
      {
        *v14 = *v23;
        *v23 = v25;
        ++v24;
        goto LABEL_19;
      }
    }
    v42 = v14 + 1;
    v53 = *(float **)v15;
    if ((float *)((char *)v14 - *(_QWORD *)v15 + 4) == (float *)4096)
    {
      v54 = (float *)*((_QWORD *)v15 + 1);
      v15 += 8;
      v53 = v54;
      v42 = v54;
    }
    v5 = v91;
    v55 = *(float **)v91;
    v56 = v91;
    v57 = v4;
    if (v4 == *(_QWORD *)v91)
    {
      v56 = v91 - 8;
      v55 = (float *)*((_QWORD *)v91 - 1);
      v57 = (uint64_t)(v55 + 1024);
    }
    v59 = *(float *)(v57 - 4);
    v58 = (float *)(v57 - 4);
    v60 = v59;
    if (v25 >= v59)
    {
      while (v42 != v58)
      {
        v68 = *v42;
        if (v25 < *v42)
        {
          *v42++ = v60;
          *v58 = v68;
          if ((char *)v42 - (char *)v53 == 4096)
          {
            v71 = (float *)*((_QWORD *)v15 + 1);
            v15 += 8;
            v53 = v71;
            v42 = v71;
          }
          goto LABEL_70;
        }
        if ((char *)++v42 - (char *)v53 == 4096)
        {
          v69 = (float *)*((_QWORD *)v15 + 1);
          v15 += 8;
          v53 = v69;
          v42 = v69;
        }
      }
      goto LABEL_124;
    }
LABEL_70:
    if (v42 == v58)
      goto LABEL_124;
    while (1)
    {
      v61 = *v14;
      while (1)
      {
        v62 = *v42;
        if (v61 < *v42)
          break;
        if ((char *)++v42 - (char *)v53 == 4096)
        {
          v63 = (float *)*((_QWORD *)v15 + 1);
          v15 += 8;
          v53 = v63;
          v42 = v63;
        }
      }
      do
      {
        if (v58 == v55)
        {
          v64 = (float *)*((_QWORD *)v56 - 1);
          v56 -= 8;
          v55 = v64;
          v58 = v64 + 1024;
        }
        v65 = *--v58;
        v66 = v65;
      }
      while (v61 < v65);
      if (v15 >= v56 && (v15 != v56 || v42 >= v58))
        break;
      *v42++ = v66;
      *v58 = v62;
      if ((char *)v42 - (char *)v53 == 4096)
      {
        v67 = (float *)*((_QWORD *)v15 + 1);
        v15 += 8;
        v53 = v67;
        v42 = v67;
      }
    }
    if (v15 > v12 || v42 > v11 && v15 == v12)
      goto LABEL_124;
    goto LABEL_94;
  }
LABEL_124:
  if ((v90 & 0x8000000000000001) == 1)
    return *v11;
  if (v6 != v11)
  {
    v87 = *(float **)v7;
    v88 = v6;
    while (1)
    {
      if ((char *)++v88 - (char *)v87 == 4096)
      {
        v89 = (float *)*((_QWORD *)v7 + 1);
        v7 += 8;
        v87 = v89;
        v88 = v89;
      }
      if (v88 == v11)
        break;
      if (*v6 < *v88)
        v6 = v88;
    }
  }
  return *v6 + (float)((float)(*v11 - *v6) * 0.5);
}

_QWORD *sub_18F421FE8(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = a3 + ((a2 - *result) >> 2);
    if (v3 < 1)
      result -= (unint64_t)(1023 - v3) >> 10;
    else
      result += (unint64_t)v3 >> 10;
  }
  return result;
}

uint64_t sub_18F42203C(uint64_t a1, float *a2, uint64_t a3, float *a4, uint64_t a5, float *a6)
{
  float v6;
  float v7;
  float v8;
  float v9;

  v6 = *a4;
  v7 = *a2;
  v8 = *a6;
  if (*a4 < *a2)
  {
    if (v8 < v6)
    {
      *a2 = v8;
      *a6 = v7;
      return 1;
    }
    *a2 = v6;
    *a4 = v7;
    if (*a6 >= v7)
      return 1;
    *a4 = *a6;
    *a6 = v7;
    return 2;
  }
  if (v8 < v6)
  {
    *a4 = v8;
    *a6 = v6;
    v9 = *a2;
    if (*a4 >= *a2)
      return 1;
    *a2 = *a4;
    *a4 = v9;
    return 2;
  }
  return 0;
}

void sub_18F4220C4(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int64_t v14;
  void *v15;

  v2 = a1[2];
  v3 = a1[1];
  v4 = (_BYTE *)a1[3] - (_BYTE *)*a1;
  v5 = (v2 - v3) >> 3;
  if (v5 < v4 >> 3)
  {
    if (v2 == v3)
    {
      v9 = 0;
      v6 = 0;
    }
    else
    {
      v6 = (char *)sub_18F340E0C(v5);
      v7 = a1[1];
      v2 = a1[2];
      v9 = &v6[8 * v8];
      v10 = v2 - v7;
      if (v2 != v7)
      {
        v11 = 0;
        v12 = 8 * (v10 >> 3);
        do
        {
          *(_QWORD *)&v6[v11] = *(_QWORD *)&v7[v11];
          v11 += 8;
        }
        while (v12 != v11);
        v2 = a1[1];
        v13 = a1[2];
        goto LABEL_9;
      }
    }
    v13 = v2;
LABEL_9:
    v14 = v13 - v2;
    v15 = *a1;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v14];
    a1[3] = v9;
    if (v15)
      operator delete(v15);
  }
}

uint64_t sub_18F422180(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_18F1EB148((uint64_t)a1);
}

void sub_18F422214(uint64_t a1, char a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3 < 0x100)
    a2 = 1;
  if (v3 > 0x1FF || (a2 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 256;
  }
}

void sub_18F42226C(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  int64_t v14;
  void *v15;

  v2 = a1[2];
  v3 = a1[1];
  v4 = (_BYTE *)a1[3] - (_BYTE *)*a1;
  v5 = (v2 - v3) >> 3;
  if (v5 < v4 >> 3)
  {
    if (v2 == v3)
    {
      v9 = 0;
      v6 = 0;
    }
    else
    {
      v6 = (char *)sub_18F340E0C(v5);
      v7 = a1[1];
      v2 = a1[2];
      v9 = &v6[8 * v8];
      v10 = v2 - v7;
      if (v2 != v7)
      {
        v11 = 0;
        v12 = 8 * (v10 >> 3);
        do
        {
          *(_QWORD *)&v6[v11] = *(_QWORD *)&v7[v11];
          v11 += 8;
        }
        while (v12 != v11);
        v2 = a1[1];
        v13 = a1[2];
        goto LABEL_9;
      }
    }
    v13 = v2;
LABEL_9:
    v14 = v13 - v2;
    v15 = *a1;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v14];
    a1[3] = v9;
    if (v15)
      operator delete(v15);
  }
}

uint64_t **sub_18F422328(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_18F3BE62C(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t sub_18F4223F0(unint64_t a1)
{
  if (a1 > 0x42)
    return 4;
  else
    return qword_18F508010[a1];
}

uint64_t sub_18F422410(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;

  v5 = (void *)MEMORY[0x1E0CB35C8];
  v6 = *(_QWORD *)(a1 + 40);
  v7 = objc_msgSend_integerValue(*(void **)(a1 + 32), a2, a3, a4, a5);
  v9 = objc_msgSend_errorWithDomain_code_userInfo_(v5, v8, (uint64_t)CFSTR("CMErrorDomain"), v7, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v6, 0, v9);
}

uint64_t sub_18F422470(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 40);
  v8[0] = *(_QWORD *)(a1 + 32);
  v6 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], a2, (uint64_t)v8, 1, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(v5, v6, 0);
}

uint64_t sub_18F4224EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;

  v5 = (void *)MEMORY[0x1E0CB35C8];
  v6 = *(_QWORD *)(a1 + 40);
  v7 = objc_msgSend_integerValue(*(void **)(a1 + 32), a2, a3, a4, a5);
  v9 = objc_msgSend_errorWithDomain_code_userInfo_(v5, v8, (uint64_t)CFSTR("CMErrorDomain"), v7, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v6, 0, v9);
}

void sub_18F42254C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  NSSet *v12;
  void *DictionaryOfClasses;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  _QWORD *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  _QWORD block[5];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[5];

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 144) && !*(_BYTE *)(v2 + 152))
  {
    v5 = (void *)MEMORY[0x1E0C99E60];
    v6 = objc_opt_class();
    v7 = objc_opt_class();
    v8 = objc_opt_class();
    v12 = (NSSet *)objc_msgSend_setWithObjects_(v5, v9, v6, v10, v11, v7, v8, 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v12);
    v17 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 32) + 144));
    if (DictionaryOfClasses)
    {
      if (objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v14, (uint64_t)CFSTR("CMErrorMessage"), v15, v16))
      {
        v21 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
        v30[0] = MEMORY[0x1E0C809B0];
        v30[1] = 3221225472;
        v30[2] = sub_18F422918;
        v30[3] = &unk_1E2955B38;
        v30[4] = DictionaryOfClasses;
        v30[5] = v17;
        v22 = v30;
      }
      else if (objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v18, (uint64_t)CFSTR("CMPedometerEventKey"), v19, v20))
      {
        v26 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v23, (uint64_t)CFSTR("CMPedometerEventKey"), v24, v25);
        v27 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
        v29[0] = MEMORY[0x1E0C809B0];
        v29[1] = 3221225472;
        v29[2] = sub_18F422B48;
        v29[3] = &unk_1E2955B60;
        v29[4] = v26;
        v29[5] = v17;
        v22 = v29;
        v21 = v27;
      }
      else
      {
        v21 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = sub_18F422B5C;
        block[3] = &unk_1E2955B10;
        block[4] = v17;
        v22 = block;
      }
    }
    else
    {
      v21 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v31[2] = sub_18F422750;
      v31[3] = &unk_1E2955B10;
      v31[4] = v17;
      v22 = v31;
    }
    dispatch_async(v21, v22);
    _Block_release(v17);
  }
}

uint64_t sub_18F422750(uint64_t a1, const char *a2)
{
  NSObject *v3;
  char *v5;
  uint8_t buf[1640];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  if (qword_1EE16D478 != -1)
    dispatch_once(&qword_1EE16D478, &unk_1E2943B30);
  v3 = qword_1EE16D470;
  if (os_log_type_enabled((os_log_t)qword_1EE16D470, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_FAULT, "nil pedometer event dictionary received", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D478 != -1)
      dispatch_once(&qword_1EE16D478, &unk_1E2943B30);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMPedometerProxy init]_block_invoke", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_18F422918(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint8_t buf[4];
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x1E0CB35C8];
  v7 = (void *)objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), a2, (uint64_t)CFSTR("CMErrorMessage"), a4, a5);
  v12 = objc_msgSend_integerValue(v7, v8, v9, v10, v11);
  objc_msgSend_errorWithDomain_code_userInfo_(v6, v13, (uint64_t)CFSTR("CMErrorDomain"), v12, 0);
  if (qword_1EE16D478 != -1)
    dispatch_once(&qword_1EE16D478, &unk_1E2943B30);
  v14 = qword_1EE16D470;
  if (os_log_type_enabled((os_log_t)qword_1EE16D470, OS_LOG_TYPE_ERROR))
  {
    v18 = (void *)objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v15, (uint64_t)CFSTR("CMErrorMessage"), v16, v17);
    *(_DWORD *)buf = 134349056;
    v34 = objc_msgSend_integerValue(v18, v19, v20, v21, v22);
    _os_log_impl(&dword_18F1DC000, v14, OS_LOG_TYPE_ERROR, "Error pedometer event, %{public}ld", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D478 != -1)
      dispatch_once(&qword_1EE16D478, &unk_1E2943B30);
    v27 = (void *)objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 32), v24, (uint64_t)CFSTR("CMErrorMessage"), v25, v26);
    objc_msgSend_integerValue(v27, v28, v29, v30, v31);
    v32 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMPedometerProxy init]_block_invoke", "CoreLocation: %s\n", v32);
    if (v32 != (char *)buf)
      free(v32);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_18F422B48(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F422B5C(uint64_t a1, const char *a2)
{
  NSObject *v3;
  char *v5;
  uint8_t buf[1640];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  if (qword_1EE16D478 != -1)
    dispatch_once(&qword_1EE16D478, &unk_1E2943B30);
  v3 = qword_1EE16D470;
  if (os_log_type_enabled((os_log_t)qword_1EE16D470, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_FAULT, "Unrecognizable pedometer event dictionary", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D478 != -1)
      dispatch_once(&qword_1EE16D478, &unk_1E2943B30);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMPedometerProxy init]_block_invoke", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_18F422D24(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ExecutablePathFromPid;
  uint64_t v7;
  NSObject *v8;
  pid_t v9;
  uint64_t v10;
  char *v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  pid_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = getpid();
  ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2, v4, v5);
  if (ExecutablePathFromPid)
  {
    v7 = ExecutablePathFromPid;
    if (qword_1EE16D478 != -1)
      dispatch_once(&qword_1EE16D478, &unk_1E2943B30);
    v8 = qword_1EE16D470;
    if (os_log_type_enabled((os_log_t)qword_1EE16D470, OS_LOG_TYPE_INFO))
    {
      v9 = getpid();
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      v13 = v7;
      v14 = 1024;
      v15 = v9;
      v16 = 2048;
      v17 = v10;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_INFO, "CMPedometer client connection interrupt, %@, %d, %p", buf, 0x1Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D478 != -1)
        dispatch_once(&qword_1EE16D478, &unk_1E2943B30);
      getpid();
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMPedometerProxy init]_block_invoke", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
}

uint64_t sub_18F422F8C(uint64_t a1, const char *a2)
{
  return objc_msgSend__internalQueryPedometerDataFromDate_toDate_onQueue_withHandler_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), *(_QWORD *)(a1 + 56));
}

uint64_t sub_18F422FA0(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 104, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F422FEC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

uint64_t sub_18F423000(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_18F423014(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;

  v5 = (void *)MEMORY[0x1E0CB35C8];
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = objc_msgSend_integerValue(*(void **)(a1 + 40), a2, a3, a4, a5);
  v10 = objc_msgSend_errorWithDomain_code_userInfo_(v5, v9, (uint64_t)CFSTR("CMErrorDomain"), v8, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 16))(v7, 0, v6, v10);
}

uint64_t sub_18F42307C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 16))(v2, 0, v3, v4);
}

void sub_18F4232A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F423324(uint64_t a1, const char *a2)
{
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  const __CFString *v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v14 = CFSTR("CMPedometerDataObject");
  v15[0] = v2;
  v13 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v15, (uint64_t)&v14, 1);
  sub_18F352D1C("kCLConnectionMessageStepCountRecordQuery", &v13, &v11);
  v10 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  CLConnectionClient::sendMessage();
  if (v10)
  {
    v5 = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_18F4234A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F4234C4(uint64_t a1, const char *a2)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = *(void **)(a1 + 32);
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  v10 = *(_QWORD *)a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  objc_msgSend__handleRecordQueryResponse_withHandler_shouldStartUpdates_(v3, a2, (uint64_t)&v10, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_18F423554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F2A8438((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F423794(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F4237E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = (void *)MEMORY[0x1E0CB35C8];
  v8 = objc_msgSend_integerValue(*(void **)(a1 + 32), a2, a3, a4, a5);
  v10 = objc_msgSend_errorWithDomain_code_userInfo_(v7, v9, (uint64_t)CFSTR("CMErrorDomain"), v8, 0);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v6, 0, v10);
  if (*(_BYTE *)(a1 + 56))
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 40), sel__subscribeToCumulativePedometerUpdates_, *(_QWORD *)(a1 + 48), v12, v13);
  return result;
}

unint64_t sub_18F423868(uint64_t a1)
{
  unint64_t result;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  if (*(_BYTE *)(a1 + 56))
  {
    v7 = objc_msgSend_count(*(void **)(a1 + 32), v3, v4, v5, v6);
    v12 = (void *)objc_msgSend_maxPedometerEntries(CMPedometerData, v8, v9, v10, v11);
    result = objc_msgSend_unsignedIntegerValue(v12, v13, v14, v15, v16);
    if (v7 < result)
      return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 40), sel__subscribeToCumulativePedometerUpdates_, *(_QWORD *)(a1 + 48), v17, v18);
  }
  return result;
}

uint64_t sub_18F4238D4(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v3, 0, v4);
  if (*(_BYTE *)(a1 + 48))
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__subscribeToCumulativePedometerUpdates_, *(_QWORD *)(a1 + 40), v6, v7);
  return result;
}

void sub_18F423998(uint64_t a1, const char *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  const __CFString *v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v14 = CFSTR("kCLConnectionMessageSubscribeKey");
  v15[0] = MEMORY[0x1E0C9AAB0];
  v13 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v15, (uint64_t)&v14, 1);
  sub_18F41EBF4("kCLConnectionMessagePedometerEvent", &v13, &v11);
  v10 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  CLConnectionClient::sendMessage();
  if (v10)
  {
    v5 = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 144) = _Block_copy(*(const void **)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 152) = 0;
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_18F423AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_18F2A8438((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F423B74(uint64_t a1, const char *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  const __CFString *v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v14 = CFSTR("kCLConnectionMessageSubscribeKey");
  v15[0] = MEMORY[0x1E0C9AAA0];
  v13 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v15, (uint64_t)&v14, 1);
  sub_18F41EBF4("kCLConnectionMessagePedometerEvent", &v13, &v11);
  v10 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  CLConnectionClient::sendMessage();
  if (v10)
  {
    v5 = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 152) = 1;
  v7 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_18F423CC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F423FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F4243CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_18F2A8438((uint64_t)&a21);
  sub_18F2A8438((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_18F4243F8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v2 + 16))(v2, 0, 0, v3);
}

void sub_18F424448(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  _QWORD *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD v23[5];
  __int16 v24;
  _QWORD block[7];
  _QWORD v26[6];
  uint8_t buf[1640];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v7 = objc_msgSend_objectForKeyedSubscript_(a2, (const char *)a2, (uint64_t)CFSTR("CMErrorMessage"), a4, a5);
    v11 = objc_msgSend_objectForKeyedSubscript_(a2, v8, (uint64_t)CFSTR("CMPedometerCalibrationBins"), v9, v10);
    v15 = objc_msgSend_objectForKeyedSubscript_(a2, v12, (uint64_t)CFSTR("CLMotionSyncStoreLastUpdate"), v13, v14);
    v16 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
    if (v7)
    {
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3221225472;
      v26[2] = sub_18F4246F0;
      v26[3] = &unk_1E2955B60;
      v17 = *(_QWORD *)(a1 + 40);
      v26[4] = v7;
      v26[5] = v17;
      v18 = v26;
    }
    else
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = sub_18F424754;
      block[3] = &unk_1E2957580;
      v21 = *(_QWORD *)(a1 + 40);
      block[5] = v15;
      block[6] = v21;
      block[4] = v11;
      v18 = block;
    }
  }
  else
  {
    if (qword_1EE16D478 != -1)
      dispatch_once(&qword_1EE16D478, &unk_1E2943B30);
    v19 = qword_1EE16D470;
    if (os_log_type_enabled((os_log_t)qword_1EE16D470, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v19, OS_LOG_TYPE_ERROR, "Unable to parse message when checking for availability!", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D478 != -1)
        dispatch_once(&qword_1EE16D478, &unk_1E2943B30);
      v24 = 0;
      v22 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMPedometerProxy _queryPedometerCalibrationBinsWithHandler:forType:forRemote:]_block_invoke", "CoreLocation: %s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
    v20 = *(_QWORD *)(a1 + 40);
    v16 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = sub_18F42476C;
    v23[3] = &unk_1E2955B10;
    v23[4] = v20;
    v18 = v23;
  }
  dispatch_async(v16, v18);
}

uint64_t sub_18F4246F0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;

  v5 = (void *)MEMORY[0x1E0CB35C8];
  v6 = *(_QWORD *)(a1 + 40);
  v7 = objc_msgSend_integerValue(*(void **)(a1 + 32), a2, a3, a4, a5);
  v9 = objc_msgSend_errorWithDomain_code_userInfo_(v5, v8, (uint64_t)CFSTR("CMErrorDomain"), v7, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v6 + 16))(v6, 0, 0, v9);
}

uint64_t sub_18F424754(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

uint64_t sub_18F42476C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v2 + 16))(v2, 0, 0, v3);
}

uint64_t sub_18F424994(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  _QWORD v11[5];

  v6 = (void *)objc_msgSend_pedometerProxy(*(void **)(a1 + 32), a2, a3, a4, a5);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_18F424A00;
  v11[3] = &unk_1E2957620;
  v11[4] = *(_QWORD *)(a1 + 56);
  return objc_msgSend__queryPedometerDataFromDate_toDate_withHandler_(v6, v9, v7, v8, (uint64_t)v11);
}

uint64_t sub_18F424A00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_18F424B48(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 32);
  v10 = objc_msgSend_pedometerProxy(*(void **)(a1 + 40), a2, a3, a4, a5);
  if (v6)
    v11 = *(_QWORD *)(a1 + 32);
  else
    v11 = objc_msgSend__pedometerDataWithRecordID_(*(void **)(a1 + 40), v7, 0, v8, v9);
  return MEMORY[0x1E0DE7D20](v10, sel__startPedometerUpdatesSinceDataRecord_withHandler_, v11, *(_QWORD *)(a1 + 48), v9);
}

uint64_t sub_18F424E10(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = objc_msgSend_isAuthorizedForEntitlement_(CMMotionUtils, a2, (uint64_t)CFSTR("com.apple.locationd.activity"), a4, a5);
  qword_1ECEDF960 = result;
  return result;
}

uint64_t sub_18F424EF0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = objc_msgSend_pedometerProxy(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v6, sel__startPedometerEventUpdatesWithHandler_, *(_QWORD *)(a1 + 40), v7, v8);
}

uint64_t sub_18F424F74(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = objc_msgSend_pedometerProxy(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v5, sel__stopPedometerEventUpdates, v6, v7, v8);
}

uint64_t sub_18F425C30(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  v6 = objc_msgSend_pedometerProxy(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v6, sel__queryPedometerCalibrationBinsWithHandler_forType_forRemote_, *(_QWORD *)(a1 + 40), 0, 0);
}

uint64_t sub_18F425CBC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  v6 = objc_msgSend_pedometerProxy(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v6, sel__queryPedometerCalibrationBinsWithHandler_forType_forRemote_, *(_QWORD *)(a1 + 40), 0, 1);
}

uint64_t sub_18F425D48(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  v6 = objc_msgSend_pedometerProxy(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v6, sel__queryPedometerCalibrationBinsWithHandler_forType_forRemote_, *(_QWORD *)(a1 + 40), 1, 0);
}

uint64_t sub_18F425DD4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  v6 = objc_msgSend_pedometerProxy(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v6, sel__queryPedometerCalibrationBinsWithHandler_forType_forRemote_, *(_QWORD *)(a1 + 40), 1, 1);
}

os_log_t sub_18F425E04()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1EE16D3D0 = (uint64_t)result;
  return result;
}

os_log_t sub_18F425E30()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Pedometer");
  qword_1EE16D470 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F425E5C@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F425EBC(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F425EA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F425EBC(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F425F1C((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F425F08(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F425F1C(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F425F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CLMotionActivity::remapActivityTypeForWheelchairUsers(uint64_t result)
{
  if (result <= 0x3E && ((1 << result) & 0x6000020000000110) != 0)
    return 11805;
  return result;
}

uint64_t CLMotionActivity::isMoving(CLMotionActivity *this)
{
  return (this->type > 0xBu) | (0x3F8u >> this->type) & 1;
}

uint64_t CLMotionActivity::isStaticNotFrozen(CLMotionActivity *this)
{
  return (this->type < 0xCu) & (0x804u >> this->type);
}

BOOL CLMotionActivity::isWalking(CLMotionActivity *this)
{
  return this->type == 4 || this->type == 41;
}

BOOL CLMotionActivity::isTypeWalking(int a1)
{
  return a1 == 4 || a1 == 41;
}

BOOL CLMotionActivity::isRunning(CLMotionActivity *this)
{
  return this->type == 8;
}

uint64_t CLMotionActivity::isDriving(CLMotionActivity *this)
{
  return (this->type < 0x39uLL) & (0x110000000000020uLL >> this->type);
}

uint64_t CLMotionActivity::isTypeDriving(unsigned int a1)
{
  return (a1 < 0x39) & (0x110000000000020uLL >> a1);
}

uint64_t CLMotionActivity::isInVehicle(CLMotionActivity *this)
{
  int type;
  unsigned int v2;

  type = this->type;
  v2 = 1;
  if (this->type > 51)
  {
    if (type == 52 || type == 56)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (!type)
    return 0;
  if (type != 5)
LABEL_7:
    v2 = 0;
LABEL_8:
  if ((type & 0xFFFFFFFE) == 0xA)
    return 1;
  else
    return v2;
}

BOOL CLMotionActivity::isVehicularHighConfidence(CLMotionActivity *this)
{
  return this[1].conservativeMountedState > 1;
}

BOOL CLMotionActivity::isVehicularHighConfidence(int a1)
{
  return a1 > 1;
}

BOOL CLMotionActivity::isMounted(int a1)
{
  return a1 == 1;
}

BOOL CLMotionActivity::isCycling(CLMotionActivity *this)
{
  return this->type == 6;
}

BOOL CLMotionActivity::isTypeCycling(int a1)
{
  return a1 == 6;
}

uint64_t CLMotionActivity::isUnclassifiedMoving(CLMotionActivity *this)
{
  return (this->type < 0xAu) & (0x289u >> this->type);
}

uint64_t CLMotionActivity::isTypeUnclassifiedMoving(unsigned int a1)
{
  return (a1 < 0xA) & (0x289u >> a1);
}

BOOL CLMotionActivity::isTypeStationaryCycling(int a1)
{
  return a1 == 2010;
}

BOOL CLMotionActivity::isTypeElliptical(int a1)
{
  return a1 == 2048;
}

BOOL CLMotionActivity::isTypeRowing(int a1)
{
  return a1 == 2071;
}

BOOL CLMotionActivity::isTypeDancing(int a1)
{
  return a1 == 3015;
}

BOOL CLMotionActivity::isTypeFunctionalStrength(int a1)
{
  return a1 == 2022;
}

BOOL CLMotionActivity::isTypeCoolDown(int a1)
{
  return a1 == 2101;
}

BOOL CLMotionActivity::isTypeCoreTraining(int a1)
{
  return a1 == 2024;
}

BOOL CLMotionActivity::isTypeTaiChi(int a1)
{
  return a1 == 15670;
}

BOOL CLMotionActivity::isTypePilates(int a1)
{
  return a1 == 2105;
}

BOOL CLMotionActivity::isTypeKickboxing(int a1)
{
  return a1 == 15110;
}

BOOL CLMotionActivity::isTypeScubaDiving(int a1)
{
  return a1 == 18200;
}

BOOL CLMotionActivity::isTypeStairClimbing(int a1)
{
  return a1 == 2065;
}

BOOL CLMotionActivity::isTypeSwimming(int a1)
{
  return a1 == 18240;
}

BOOL CLMotionActivity::isTypePushingWheelchair(int a1)
{
  return a1 == 11805;
}

BOOL CLMotionActivity::isTypeOutdoorWheelchair(int a1)
{
  return a1 == 90603;
}

BOOL CLMotionActivity::isTypeWheelchairPush(int a1)
{
  return a1 == 11805 || a1 == 90603;
}

uint64_t CLMotionActivity::isTypeIndoorActivity(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 <= 2100)
  {
    if (((a1 - 2010) > 0x3D || ((1 << (a1 + 38)) & 0x2088004000005001) == 0)
      && a1 != 64)
    {
      return 0;
    }
  }
  else if (a1 <= 12149)
  {
    if (((a1 - 2101) > 0x31 || ((1 << (a1 - 53)) & 0x2000000000011) == 0)
      && a1 != 3015)
    {
      return 0;
    }
  }
  else
  {
    if (a1 <= 15359)
    {
      if (a1 == 12150)
        return result;
      v3 = 15110;
    }
    else
    {
      if (a1 == 15360 || a1 == 17150)
        return result;
      v3 = 19030;
    }
    if (a1 != v3)
      return 0;
  }
  return result;
}

BOOL CLMotionActivity::isTypeCalisthenics(int a1)
{
  return a1 == 2020;
}

BOOL CLMotionActivity::isTypeGolfing(int a1)
{
  return a1 == 15255;
}

BOOL CLMotionActivity::isTypeDownhillSkiing(int a1)
{
  return a1 == 19150;
}

BOOL CLMotionActivity::isTypeOutdoorRowing(int a1)
{
  return a1 == 18050;
}

BOOL CLMotionActivity::isTypeCrossCountrySkiing(int a1)
{
  return a1 == 19090;
}

BOOL CLMotionActivity::isTypeSnowboarding(int a1)
{
  return a1 == 519150;
}

BOOL CLMotionActivity::isTypePaddleSports(int a1)
{
  return a1 == 18100;
}

BOOL CLMotionActivity::isTypeOutdoorSoccer(int a1)
{
  return a1 == 15610;
}

BOOL CLMotionActivity::isTypeIndoorSoccer(int a1)
{
  return a1 == 64;
}

BOOL CLMotionActivity::isTypeAustralianFootball(int a1)
{
  return a1 == 65;
}

BOOL CLMotionActivity::isTypeAmericanFootball(int a1)
{
  return a1 == 15230;
}

BOOL CLMotionActivity::isTypeDiscSports(int a1)
{
  return a1 == 15250;
}

BOOL CLMotionActivity::isTypeRugby(int a1)
{
  return a1 == 15560;
}

BOOL CLMotionActivity::isTypeLacrosse(int a1)
{
  return a1 == 15460;
}

BOOL CLMotionActivity::isTypeOutdoorSkatingSports(int a1)
{
  return a1 == 15592;
}

BOOL CLMotionActivity::isTypeIndoorSkatingSports(int a1)
{
  return a1 == 19030;
}

BOOL CLMotionActivity::isTypeIndoorHockey(int a1)
{
  return a1 == 15360;
}

BOOL CLMotionActivity::isTypeOutdoorHockey(int a1)
{
  return a1 == 15350;
}

BOOL CLMotionActivity::isTypeBasketball(int a1)
{
  return a1 == 15055;
}

BOOL CLMotionActivity::isTypeTennis(int a1)
{
  return a1 == 15675;
}

BOOL CLMotionActivity::isTypeBadminton(int a1)
{
  return a1 == 15030;
}

BOOL CLMotionActivity::isTypeRacquetball(int a1)
{
  return a1 == 515652;
}

BOOL CLMotionActivity::isTypePickleball(int a1)
{
  return a1 == 66;
}

BOOL CLMotionActivity::isTypeVolleyball(int a1)
{
  return a1 == 15711;
}

BOOL CLMotionActivity::isTypeSquash(int a1)
{
  return a1 == 15652;
}

BOOL CLMotionActivity::isTypeHandball(int a1)
{
  return a1 == 15330;
}

BOOL CLMotionActivity::isTypeTrackAndField(int a1)
{
  return a1 == 15733;
}

BOOL CLMotionActivity::isTypeSoftball(int a1)
{
  return a1 == 15620;
}

BOOL CLMotionActivity::isTypeBaseball(int a1)
{
  return a1 == 515621;
}

BOOL CLMotionActivity::isTypeCricket(int a1)
{
  return a1 == 15150;
}

BOOL CLMotionActivity::isTypeTableTennis(int a1)
{
  return a1 == 15660;
}

BOOL CLMotionActivity::isTypeJumpRope(int a1)
{
  return a1 == 2068;
}

BOOL CLMotionActivity::isTypeBoxing(int a1)
{
  return a1 == 15100;
}

BOOL CLMotionActivity::isTypeStepTraining(int a1)
{
  return a1 == 3016;
}

uint64_t CLMotionActivity::indexToActivityType(CLMotionActivity *this)
{
  if (this <= 0xA)
    return ((_DWORD)this + 1);
  if (((_DWORD)this - 11) > 0x3B)
    return 0;
  return dword_18F508278[(int)this - 11];
}

uint64_t CLMotionActivity::activityTypeToIndex(int a1)
{
  uint64_t result;
  BOOL v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;

  result = 0xFFFFFFFFLL;
  if (a1 <= 12149)
  {
    if (a1 > 99)
    {
      if (a1 > 2067)
      {
        if (a1 == 11805)
          v21 = 25;
        else
          v21 = -1;
        if (a1 == 3016)
          v6 = 70;
        else
          v6 = v21;
        if (a1 == 3015)
          v22 = 24;
        else
          v22 = -1;
        if (a1 == 2150)
          v23 = 23;
        else
          v23 = v22;
        if (a1 <= 3015)
          v6 = v23;
        if (a1 == 2105)
          v24 = 36;
        else
          v24 = -1;
        if (a1 == 2101)
          v10 = 33;
        else
          v10 = v24;
        if (a1 == 2071)
          v25 = 22;
        else
          v25 = -1;
        if (a1 == 2068)
          v26 = 68;
        else
          v26 = v25;
        if (a1 <= 2100)
          v10 = v26;
        v13 = a1 <= 2149;
      }
      else
      {
        if (a1 == 2065)
          v5 = 21;
        else
          v5 = -1;
        if (a1 == 2061)
          v6 = 20;
        else
          v6 = v5;
        if (a1 == 2048)
          v7 = 19;
        else
          v7 = -1;
        if (a1 == 2024)
          v8 = 34;
        else
          v8 = v7;
        if (a1 <= 2060)
          v6 = v8;
        if (a1 == 2022)
          v9 = 32;
        else
          v9 = -1;
        if (a1 == 2020)
          v10 = 18;
        else
          v10 = v9;
        if (a1 == 2010)
          v11 = 17;
        else
          v11 = -1;
        if (a1 == 100)
          v12 = 16;
        else
          v12 = v11;
        if (a1 <= 2019)
          v10 = v12;
        v13 = a1 <= 2023;
      }
      if (v13)
        return v10;
      else
        return v6;
    }
    else if ((a1 - 1) >= 0xB)
    {
      switch(a1)
      {
        case '4':
          result = 12;
          break;
        case '5':
        case '6':
        case '7':
        case '9':
        case ':':
        case ';':
        case '<':
          return result;
        case '8':
          result = 13;
          break;
        case '=':
          result = 14;
          break;
        case '>':
          result = 15;
          break;
        case '?':
          result = 37;
          break;
        case '@':
          result = 45;
          break;
        case 'A':
          result = 46;
          break;
        case 'B':
          result = 59;
          break;
        default:
          v3 = a1 == 41;
          v4 = 11;
          goto LABEL_144;
      }
    }
    else
    {
      return (a1 - 1);
    }
    return result;
  }
  if (a1 <= 15651)
  {
    if (a1 <= 15254)
    {
      if (a1 > 15109)
      {
        v14 = 15229;
        if (a1 == 15250)
          v30 = 48;
        else
          v30 = -1;
        if (a1 == 15230)
          v16 = 47;
        else
          v16 = v30;
        v17 = 15110;
        v18 = 39;
        v19 = a1 == 15150;
        v20 = 66;
      }
      else
      {
        v14 = 15054;
        if (a1 == 15100)
          v15 = 69;
        else
          v15 = -1;
        if (a1 == 15055)
          v16 = 55;
        else
          v16 = v15;
        v17 = 12150;
        v18 = 26;
        v19 = a1 == 15030;
        v20 = 57;
      }
    }
    else
    {
      if (a1 > 15459)
      {
        if (a1 > 15591)
        {
          if (a1 == 15592)
            return 51;
          if (a1 == 15610)
            return 44;
          v3 = a1 == 15620;
          v4 = 64;
          goto LABEL_144;
        }
        v32 = 15460;
        v33 = 50;
        v34 = a1 == 15560;
        v35 = 49;
        goto LABEL_134;
      }
      v14 = 15349;
      if (a1 == 15360)
        v28 = 53;
      else
        v28 = -1;
      if (a1 == 15350)
        v16 = 54;
      else
        v16 = v28;
      v17 = 15255;
      v18 = 27;
      v19 = a1 == 15330;
      v20 = 62;
    }
  }
  else if (a1 > 18199)
  {
    if (a1 > 19149)
    {
      if (a1 > 515620)
      {
        if (a1 == 515621)
          return 65;
        if (a1 == 515652)
          return 58;
        v3 = a1 == 519150;
        v4 = 42;
        goto LABEL_144;
      }
      v32 = 19150;
      v33 = 31;
      v34 = a1 == 90603;
      v35 = 30;
LABEL_134:
      if (!v34)
        v35 = -1;
      if (a1 == v32)
        return v33;
      else
        return v35;
    }
    v14 = 19029;
    if (a1 == 19090)
      v29 = 41;
    else
      v29 = -1;
    if (a1 == 19030)
      v16 = 52;
    else
      v16 = v29;
    v17 = 18200;
    v18 = 38;
    v19 = a1 == 18240;
    v20 = 29;
  }
  else
  {
    if (a1 > 15710)
    {
      if (a1 > 17149)
      {
        if (a1 == 17150)
          return 28;
        if (a1 == 18050)
          return 40;
        v3 = a1 == 18100;
        v4 = 43;
LABEL_144:
        if (v3)
          return v4;
        else
          return 0xFFFFFFFFLL;
      }
      v32 = 15711;
      v33 = 60;
      v34 = a1 == 15733;
      v35 = 63;
      goto LABEL_134;
    }
    v14 = 15669;
    if (a1 == 15675)
      v27 = 56;
    else
      v27 = -1;
    if (a1 == 15670)
      v16 = 35;
    else
      v16 = v27;
    v17 = 15652;
    v18 = 61;
    v19 = a1 == 15660;
    v20 = 67;
  }
  if (!v19)
    v20 = -1;
  if (a1 == v17)
    v31 = v18;
  else
    v31 = v20;
  if (a1 <= v14)
    return v31;
  else
    return v16;
}

const char *CLMotionActivity::activityTypeToString(int a1)
{
  const char *result;
  int v3;
  const char *v4;
  BOOL v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  BOOL v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  int v17;
  const char *v18;
  const char *v19;
  const char *v20;
  BOOL v21;
  const char *v22;
  int v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;

  result = "frozen";
  if (a1 <= 11804)
  {
    if (a1 > 99)
    {
      if (a1 <= 2064)
      {
        v7 = "Elliptical";
        v12 = "Cross Training";
        if (a1 != 2061)
          v12 = "frozen";
        if (a1 != 2048)
          v7 = v12;
        v13 = "Functional Strength Training";
        v14 = "Core Training";
        if (a1 != 2024)
          v14 = "frozen";
        if (a1 != 2022)
          v13 = v14;
        if (a1 <= 2047)
          v7 = v13;
        v9 = "cycling leg";
        v15 = "Stationary Cycling";
        v16 = "Calisthenics";
        if (a1 != 2020)
          v16 = "frozen";
        if (a1 != 2010)
          v15 = v16;
        if (a1 != 100)
          v9 = v15;
        v11 = a1 <= 2021;
      }
      else if (a1 > 2104)
      {
        v7 = "Dancing";
        v25 = "Step Training";
        if (a1 != 3016)
          v25 = "frozen";
        if (a1 != 3015)
          v7 = v25;
        v9 = "Pilates";
        v26 = "Yoga";
        if (a1 != 2150)
          v26 = "frozen";
        if (a1 != 2105)
          v9 = v26;
        v11 = a1 <= 3014;
      }
      else
      {
        v7 = "Rowing";
        v8 = "Cool Down";
        if (a1 != 2101)
          v8 = "frozen";
        if (a1 != 2071)
          v7 = v8;
        v9 = "Stair Climbing";
        v10 = "Jump Rope";
        if (a1 != 2068)
          v10 = "frozen";
        if (a1 != 2065)
          v9 = v10;
        v11 = a1 <= 2070;
      }
      if (v11)
        return v9;
      else
        return v7;
    }
    else
    {
      switch(a1)
      {
        case 0:
LABEL_28:
          result = "Unknown";
          break;
        case 1:
          return result;
        case 2:
          result = "static";
          break;
        case 3:
          result = "moving";
          break;
        case 4:
          result = "walking";
          break;
        case 5:
          result = "driving";
          break;
        case 6:
          result = "cycling";
          break;
        case 7:
          result = "semi-stationary";
          break;
        case 8:
          result = "running";
          break;
        case 9:
          result = "moving coarse";
          break;
        case 10:
          result = "in vehicle frozen";
          break;
        case 11:
          result = "in vehicle static";
          break;
        default:
          switch(a1)
          {
            case '4':
              result = "vehicular in hand";
              break;
            case '5':
            case '6':
            case '7':
            case '9':
            case ':':
            case ';':
            case '<':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
              return result;
            case '8':
              result = "driving other";
              break;
            case '=':
            case '>':
            case 'G':
              goto LABEL_28;
            case '?':
              result = "Multi Sport Transition";
              break;
            case '@':
              result = "Indoor Soccer";
              break;
            case 'A':
              result = "Australian Football";
              break;
            case 'B':
              result = "Pickleball";
              break;
            default:
              if (a1 == 41)
                result = "walking slow";
              break;
          }
          break;
      }
    }
    return result;
  }
  if (a1 > 15651)
  {
    if (a1 > 18199)
    {
      if (a1 > 19149)
      {
        if (a1 <= 515620)
        {
          v3 = 19150;
          v4 = "DownhillSkiing";
          v5 = a1 == 90603;
          v6 = "Outdoor Wheelchair Activity";
        }
        else
        {
          if (a1 == 515621)
            return "Baseball";
          v3 = 515652;
          v4 = "Racquetball";
          v5 = a1 == 519150;
          v6 = "Snowboarding";
        }
        goto LABEL_101;
      }
      v17 = 19029;
      v28 = "Cross Country Skiing";
      if (a1 != 19090)
        v28 = "frozen";
      if (a1 == 19030)
        v19 = "Indoor Skating Sports";
      else
        v19 = v28;
      v20 = "Scuba Diving";
      v21 = a1 == 18240;
      v22 = "Swimming";
      v23 = 18200;
    }
    else
    {
      if (a1 > 15710)
      {
        if (a1 <= 17149)
        {
          v3 = 15711;
          v4 = "Volleyball";
          v5 = a1 == 15733;
          v6 = "Track and Field";
        }
        else
        {
          if (a1 == 17150)
            return "Indoor Walking";
          v3 = 18050;
          v4 = "Outdoor Rowing";
          v5 = a1 == 18100;
          v6 = "Paddle Sports";
        }
        goto LABEL_101;
      }
      v17 = 15669;
      v24 = "Tennis";
      if (a1 != 15675)
        v24 = "frozen";
      if (a1 == 15670)
        v19 = "Tai Chi";
      else
        v19 = v24;
      v20 = "Squash";
      v21 = a1 == 15660;
      v22 = "Table Tennis";
      v23 = 15652;
    }
  }
  else if (a1 > 15254)
  {
    if (a1 > 15459)
    {
      if (a1 <= 15591)
      {
        v3 = 15460;
        v4 = "Lacrosse";
        v5 = a1 == 15560;
        v6 = "Rugby";
      }
      else
      {
        if (a1 == 15592)
          return "Outdoor Skating Sports";
        v3 = 15610;
        v4 = "Outdoor Soccer";
        v5 = a1 == 15620;
        v6 = "Softball";
      }
      goto LABEL_101;
    }
    v17 = 15349;
    v27 = "Indoor Hockey";
    if (a1 != 15360)
      v27 = "frozen";
    if (a1 == 15350)
      v19 = "Outdoor Hockey";
    else
      v19 = v27;
    v20 = "Golfing";
    v21 = a1 == 15330;
    v22 = "Handball";
    v23 = 15255;
  }
  else
  {
    if (a1 > 15099)
    {
      if (a1 <= 15149)
      {
        v3 = 15100;
        v4 = "Boxing";
        v5 = a1 == 15110;
        v6 = "Kickboxing";
      }
      else
      {
        if (a1 == 15150)
          return "Cricket";
        v3 = 15230;
        v4 = "American Football";
        v5 = a1 == 15250;
        v6 = "Disc Sports";
      }
LABEL_101:
      if (!v5)
        v6 = "frozen";
      if (a1 == v3)
        return v4;
      else
        return v6;
    }
    v17 = 15029;
    v18 = "Basketball";
    if (a1 != 15055)
      v18 = "frozen";
    if (a1 == 15030)
      v19 = "Badminton";
    else
      v19 = v18;
    v20 = "Pushing Wheelchair";
    v21 = a1 == 12150;
    v22 = "Indoor Running";
    v23 = 11805;
  }
  if (!v21)
    v22 = "frozen";
  if (a1 != v23)
    v20 = v22;
  if (a1 <= v17)
    return v20;
  else
    return v19;
}

const char *CLMotionActivity::activityConfidenceToString(unsigned int a1)
{
  if (a1 > 2)
    return "unknown";
  else
    return off_1E2957660[a1];
}

void sub_18F426F6C(uint64_t a1, int *a2, double a3)
{
  double v5;
  NSObject *v7;
  int v8;
  NSObject *v9;
  double v10;
  double v11;
  float v12;
  NSObject *v13;
  _OWORD *v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  char *v18;
  char *v19;
  float v20;
  _BYTE v21[22];
  uint8_t buf[4];
  double v23;
  __int16 v24;
  double v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = *(double *)a1;
  if (*(double *)a1 <= 0.0 || (*(_WORD *)(a1 + 82) & 0x100) == 0)
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953868);
    v7 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_DEBUG, "Device motion not initialized, returning", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953868);
      *(_WORD *)v21 = 0;
      v18 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLSensorFusionService_Predict::applyConstantRotationRate(CFTimeInterval, CLSensorFusionService::Sample &, CMError &)", "CoreLocation: %s\n", v18);
      if (v18 != (char *)buf)
        free(v18);
    }
    v8 = 109;
    goto LABEL_25;
  }
  if (v5 > a3)
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953868);
    v9 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
    {
      v10 = *(double *)a1;
      *(_DWORD *)buf = 134218240;
      v23 = v10;
      v24 = 2048;
      v25 = a3;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_INFO, "Target prediction timestamp must be in the future,lastSample.timestamp,%f,targetTimestamp,%f", buf, 0x16u);
    }
    if (!sub_18F1FCA08(115, 2))
      goto LABEL_24;
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953868);
    v11 = *(double *)a1;
    *(_DWORD *)v21 = 134218240;
    *(double *)&v21[4] = v11;
    *(_WORD *)&v21[12] = 2048;
    *(double *)&v21[14] = a3;
LABEL_34:
    v19 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLSensorFusionService_Predict::applyConstantRotationRate(CFTimeInterval, CLSensorFusionService::Sample &, CMError &)", "CoreLocation: %s\n", v19);
    if (v19 != (char *)buf)
      free(v19);
LABEL_24:
    v8 = 107;
LABEL_25:
    *a2 = v8;
    return;
  }
  v12 = a3 - v5;
  if (v12 > 2.0)
  {
    v20 = a3 - v5;
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953868);
    v13 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218240;
      v23 = v20;
      v24 = 2048;
      v25 = 2.0;
      _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_INFO, "Prediction interval above limit,interval,%f,limit,%f", buf, 0x16u);
    }
    if (!sub_18F1FCA08(115, 2))
      goto LABEL_24;
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953868);
    *(_DWORD *)v21 = 134218240;
    *(double *)&v21[4] = v20;
    *(_WORD *)&v21[12] = 2048;
    *(_QWORD *)&v21[14] = 0x4000000000000000;
    goto LABEL_34;
  }
  v14 = (_OWORD *)(a1 + 8);
  v15 = *(float *)(a1 + 44) * v12;
  *(float32x2_t *)v21 = vmul_n_f32(*(float32x2_t *)(a1 + 36), v12);
  *(float *)&v21[8] = v15;
  *(double *)v16.i64 = sub_18F3D3AA8((float32x4_t *)buf, (float *)v21);
  *(double *)v17.i64 = sub_18F3D3764((uint64_t)buf, (float *)(a1 + 8), (float32x4_t *)v21, v16);
  sub_18F1FFE94((float32x4_t *)v21, v17);
  *(double *)a1 = a3;
  *v14 = *(_OWORD *)v21;
}

void sub_18F427528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  MEMORY[0x194001438](v19, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_18F427564(uint64_t a1, CLConnectionMessage **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  char *v21;
  uint8_t buf[4];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v3, v6, v4, v7, v8, v5, 0);
  if (*a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9)) != 0
    && (v14 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, (uint64_t)CFSTR("CMErrorMessage"), v12, v13)) != 0)
  {
    v19 = objc_msgSend_intValue(v14, v15, v16, v17, v18);
  }
  else
  {
    v19 = 103;
  }
  if (qword_1EE16D6A0 != -1)
    dispatch_once(&qword_1EE16D6A0, &unk_1E29550C8);
  v20 = qword_1EE16D6A8;
  if (os_log_type_enabled((os_log_t)qword_1EE16D6A8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v23 = v19;
    _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_FAULT, "Failed with CMError code %{public}d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D6A0 != -1)
      dispatch_once(&qword_1EE16D6A0, &unk_1E29550C8);
    v21 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMBikeSensorInternal init]_block_invoke", "CoreLocation: %s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
  }
}

void sub_18F427778(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ExecutablePathFromPid;
  uint64_t v7;
  NSObject *v8;
  pid_t v9;
  uint64_t v10;
  char *v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  pid_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = getpid();
  ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2, v4, v5);
  if (ExecutablePathFromPid)
  {
    v7 = ExecutablePathFromPid;
    if (qword_1EE16D6A0 != -1)
      dispatch_once(&qword_1EE16D6A0, &unk_1E29550C8);
    v8 = qword_1EE16D6A8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6A8, OS_LOG_TYPE_INFO))
    {
      v9 = getpid();
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      v13 = v7;
      v14 = 1024;
      v15 = v9;
      v16 = 2048;
      v17 = v10;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_INFO, "CMBikeSensor client connection interrupt, %@, %d, %p", buf, 0x1Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6A0 != -1)
        dispatch_once(&qword_1EE16D6A0, &unk_1E29550C8);
      getpid();
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMBikeSensorInternal init]_block_invoke", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
}

void sub_18F427ABC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  const __CFString *v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x1E0C99E60];
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  objc_msgSend_setWithObjects_(v2, v5, v3, v6, v7, v4, 0);
  v8 = *(_QWORD *)(a1 + 32);
  v21 = CFSTR("CMFitnessMachineDataRecord");
  v22[0] = v8;
  v20 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v9, (uint64_t)v22, (uint64_t)&v21, 1);
  sub_18F3667C8("kCLConnectionMessageFitnessMachineData", &v20, &v18);
  v17 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  CLConnectionClient::sendMessage();
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_18F427C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F427C90(uint64_t a1, CLConnectionMessage **a2)
{
  void *DictionaryOfClasses;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  char *v17;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!*a2)
  {
    if (qword_1EE16D6A0 != -1)
      dispatch_once(&qword_1EE16D6A0, &unk_1E29550C8);
    v15 = qword_1EE16D6A8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_ERROR, "Error feeding external fitness data: the response is nill", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
      goto LABEL_24;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D6A0 == -1)
    {
LABEL_26:
      v17 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMBikeSensorInternal _feedBikeSensorData:]_block_invoke", "CoreLocation: %s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
      goto LABEL_24;
    }
LABEL_28:
    dispatch_once(&qword_1EE16D6A0, &unk_1E29550C8);
    goto LABEL_26;
  }
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, *(NSSet **)(a1 + 32));
  if (!DictionaryOfClasses)
  {
    if (qword_1EE16D6A0 != -1)
      dispatch_once(&qword_1EE16D6A0, &unk_1E29550C8);
    v16 = qword_1EE16D6A8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v16, OS_LOG_TYPE_ERROR, "Error feeding external fitness data content. There is not any expected classes (NSString, CMFitnessMachineData).", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
      goto LABEL_24;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D6A0 == -1)
      goto LABEL_26;
    goto LABEL_28;
  }
  v7 = DictionaryOfClasses;
  if (objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v4, (uint64_t)CFSTR("CMErrorMessage"), v5, v6))
  {
    if (qword_1EE16D6A0 != -1)
      dispatch_once(&qword_1EE16D6A0, &unk_1E29550C8);
    v8 = qword_1EE16D6A8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v19 = objc_msgSend_objectForKeyedSubscript_(v7, v9, (uint64_t)CFSTR("CMErrorMessage"), v10, v11);
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_ERROR, "Error feeding external fitness data, %@", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6A0 != -1)
        dispatch_once(&qword_1EE16D6A0, &unk_1E29550C8);
      objc_msgSend_objectForKeyedSubscript_(v7, v12, (uint64_t)CFSTR("CMErrorMessage"), v13, v14);
      goto LABEL_26;
    }
  }
LABEL_24:

}

uint64_t sub_18F42812C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend__teardown(*(void **)(a1 + 32), a2, a3, a4, a5);
}

uint64_t sub_18F4283C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = objc_msgSend_isAuthorizedForEntitlement_(CMMotionUtils, a2, (uint64_t)CFSTR("com.apple.locationd.activity"), a4, a5);
  qword_1ECEDF970 = result;
  return result;
}

os_log_t sub_18F4283F8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Calorimetry");
  qword_1EE16D6A8 = (uint64_t)result;
  return result;
}

uint64_t sub_18F428424(uint64_t a1, _QWORD *a2)
{
  float v3;
  double v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 8) = *a2;
  v3 = 1.0 / *(double *)a2;
  *(float *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 23) = 0;
  *(_QWORD *)(a1 + 32) = &off_1E2949650;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E294B4B8;
  *(_DWORD *)(a1 + 56) = 256;
  *(_BYTE *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 64) = &off_1E2949650;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = &off_1E2949650;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = &off_1E2949650;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E2949650;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = &off_1E2949670;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = &off_1E2949650;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 220) = 0;
  *(_QWORD *)(a1 + 228) = 0;
  *(_BYTE *)(a1 + 244) = 0;
  *(_QWORD *)(a1 + 256) = &off_1E2949650;
  *(_QWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = &off_1E2949650;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 320) = 3;
  *(_WORD *)(a1 + 332) = 0;
  *(_QWORD *)(a1 + 324) = 0;
  *(_QWORD *)(a1 + 336) = &off_1E2949048;
  *(_QWORD *)(a1 + 344) = &off_1E2949650;
  *(_QWORD *)(a1 + 352) = 1065353216;
  *(_DWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = &off_1E2949650;
  *(_QWORD *)(a1 + 376) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = &off_1E2949650;
  *(_QWORD *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 408) = 1065353216;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 448) = &off_1E2949650;
  *(_QWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = &off_1E2949650;
  *(_QWORD *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = &off_1E2949650;
  *(_QWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  v4 = v3;
  v5 = vcvtad_u64_f64(v4 * 0.125);
  *(_QWORD *)(a1 + 536) = &off_1E294A890;
  *(_QWORD *)(a1 + 544) = v5;
  *(_QWORD *)(a1 + 552) = &off_1E294AC98;
  *(_QWORD *)(a1 + 560) = v5;
  *(_QWORD *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 624) = &off_1E294AC98;
  *(_QWORD *)(a1 + 632) = v5;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 696) = &off_1E294AC98;
  *(_QWORD *)(a1 + 704) = v5;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_QWORD *)(a1 + 760) = 0;
  v6 = vcvtad_u64_f64(v4 * 0.625);
  *(_QWORD *)(a1 + 768) = &off_1E294A890;
  *(_QWORD *)(a1 + 776) = v6;
  *(_QWORD *)(a1 + 784) = &off_1E294AC98;
  *(_QWORD *)(a1 + 792) = v6;
  *(_QWORD *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_QWORD *)(a1 + 856) = &off_1E294AC98;
  *(_QWORD *)(a1 + 864) = v6;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_QWORD *)(a1 + 920) = 0;
  *(_QWORD *)(a1 + 928) = &off_1E294AC98;
  *(_QWORD *)(a1 + 936) = v6;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  v7 = vcvtad_u64_f64(*(float *)(a1 + 16) * 0.75);
  *(_QWORD *)(a1 + 1008) = &off_1E294AC98;
  *(_QWORD *)(a1 + 1016) = v7;
  *(_QWORD *)(a1 + 1072) = 0;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_QWORD *)(a1 + 1080) = &off_1E294AC98;
  *(_QWORD *)(a1 + 1088) = v7;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_QWORD *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1152) = &off_1E294AC98;
  *(_QWORD *)(a1 + 1160) = v7;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1212) = 0u;
  *(_QWORD *)(a1 + 1232) = &off_1E294A890;
  *(_QWORD *)(a1 + 1240) = 2;
  *(_QWORD *)(a1 + 1248) = &off_1E294AC98;
  *(_QWORD *)(a1 + 1256) = 2;
  *(_QWORD *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_QWORD *)(a1 + 1320) = &off_1E294AC98;
  *(_QWORD *)(a1 + 1328) = 2;
  *(_QWORD *)(a1 + 1384) = 0;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_QWORD *)(a1 + 1392) = &off_1E294AC98;
  *(_QWORD *)(a1 + 1400) = 2;
  *(_OWORD *)(a1 + 1452) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  v8 = operator new[]();
  *(_QWORD *)(a1 + 1560) = v8;
  *(_QWORD *)(a1 + 1552) = v8;
  *(_QWORD *)(a1 + 1544) = v8 + 36;
  *(_QWORD *)(a1 + 1568) = operator new[]();
  *(_QWORD *)(a1 + 1576) = operator new[]();
  *(_QWORD *)(a1 + 1584) = operator new[]();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return a1;
}

void sub_18F4287C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v6 = v5;
  sub_18F1EB0F0(v4);
  v1[144] = v6;
  sub_18F3CBA50(v1 + 147);
  v1[135] = v6;
  sub_18F3CBA50(v1 + 138);
  v1[126] = v6;
  sub_18F3CBA50(v1 + 129);
  sub_18F1EB0F0(v3);
  sub_18F1EB0F0(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F42881C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &off_1E294B4B8;
  v2 = a1[195];
  if (v2)
    MEMORY[0x194001420](v2, 0x1000C8052888210);
  v3 = a1[196];
  if (v3)
    MEMORY[0x194001420](v3, 0x1000C8052888210);
  v4 = a1[197];
  if (v4)
    MEMORY[0x194001420](v4, 0x1000C8052888210);
  v5 = a1[198];
  if (v5)
    MEMORY[0x194001420](v5, 0x1000C8052888210);
  sub_18F1EB0F0(a1 + 154);
  a1[144] = &off_1E294AC98;
  sub_18F3CBA50(a1 + 147);
  a1[135] = &off_1E294AC98;
  sub_18F3CBA50(a1 + 138);
  a1[126] = &off_1E294AC98;
  sub_18F3CBA50(a1 + 129);
  sub_18F1EB0F0(a1 + 96);
  sub_18F1EB0F0(a1 + 67);
  return a1;
}

void sub_18F428900(_QWORD *a1)
{
  sub_18F42881C(a1);
  JUMPOUT(0x194001438);
}

float sub_18F428924(uint64_t a1)
{
  NSObject *v2;
  float result;
  char *v4;
  uint8_t buf[1640];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 1000))
  {
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v2 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_FAULT, "RotationStability buffer not set.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v4 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CLAttitudeDependentKFCalibrator::init()", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  *(_DWORD *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 228) = 0;
  if (!*(_BYTE *)(a1 + 333))
  {
    *(_DWORD *)(a1 + 248) = 0;
    *(_DWORD *)(a1 + 232) = 0;
    *(_WORD *)(a1 + 184) = 0;
    *(_BYTE *)(a1 + 220) = 0;
    *(_DWORD *)(a1 + 224) = 0;
    *(_DWORD *)(a1 + 324) = 0;
    *(_DWORD *)(a1 + 1608) = 0;
    sub_18F1E6174((_QWORD *)(a1 + 1080));
    sub_18F1E6174((_QWORD *)(a1 + 1008));
    sub_18F1E6174((_QWORD *)(a1 + 1152));
    sub_18F1E6174((_QWORD *)(a1 + 1248));
    sub_18F1E6174((_QWORD *)(a1 + 1320));
    sub_18F1E6174((_QWORD *)(a1 + 1392));
    *(_DWORD *)(a1 + 1224) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    *(_DWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    *(_DWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    *(_WORD *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 328) = 0;
  }
  *(_BYTE *)(a1 + 244) = 0;
  sub_18F1E6174((_QWORD *)(a1 + 552));
  sub_18F1E6174((_QWORD *)(a1 + 624));
  sub_18F1E6174((_QWORD *)(a1 + 696));
  sub_18F1E6174((_QWORD *)(a1 + 784));
  sub_18F1E6174((_QWORD *)(a1 + 856));
  sub_18F1E6174((_QWORD *)(a1 + 928));
  result = *(double *)(a1 + 1536);
  *(float32x2_t *)(a1 + 144) = vcvt_f32_f64(*(float64x2_t *)(a1 + 1520));
  *(float *)(a1 + 152) = result;
  *(_QWORD *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(_WORD *)(a1 + 59) = 0;
  return result;
}

void sub_18F428B98(_QWORD *a1)
{
  sub_18F1E6174(a1 + 2);
  sub_18F1E6174(a1 + 11);
  sub_18F1E6174(a1 + 20);
}

float sub_18F428BC8(float64x2_t *a1, float *a2, int *a3, float *a4, double *a5)
{
  NSObject *v10;
  double v11;
  double v12;
  double v13;
  int v14;
  float v15;
  float v16;
  float v17;
  NSObject *v18;
  float result;
  char *v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float64_t v28;
  char *v29;
  uint8_t buf[4];
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a5 && *a3 > 0)
  {
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v10 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
    {
      v11 = a2[2];
      v12 = a2[3];
      v13 = a2[4];
      v14 = *a3;
      *(_DWORD *)buf = 134218752;
      v31 = v11;
      v32 = 2048;
      v33 = v12;
      v34 = 2048;
      v35 = v13;
      v36 = 1024;
      v37 = v14;
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_DEBUG, "setting bias (%.3f/%.3f/%.3f) level (%d)", buf, 0x26u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v29 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::setBias(const CLVector3d<float> &, const CLMotionTypeCompassCalibrationLevel &, const CLVector3d<float> &, const CLClientQuaternion *)", "CoreLocation: %s\n", v29);
      if (v29 != (char *)buf)
        free(v29);
    }
    BYTE5(a1[20].f64[1]) = 0;
    BYTE1(a1[3].f64[1]) = 0;
    LOBYTE(a1[1].f64[1]) = 1;
    BYTE4(a1[15].f64[1]) = 0;
    sub_18F4290E0((float32x2_t *)&a1[21], a5);
    if (&a1[4] == (float64x2_t *)a2)
    {
      v16 = *((float *)&a1[4].f64[1] + 1);
      v17 = *(float *)a1[5].f64;
      v15 = *(float *)&a1[4].f64[1];
    }
    else
    {
      v15 = a2[2];
      *(float *)&a1[4].f64[1] = v15;
      v16 = a2[3];
      *((float *)&a1[4].f64[1] + 1) = v16;
      v17 = a2[4];
      *(float *)a1[5].f64 = v17;
    }
    v21 = *a3;
    HIDWORD(a1[1].f64[0]) = *a3;
    a1[6].f64[0] = 0.0;
    LODWORD(a1[6].f64[1]) = 0;
    v22 = a4[4] - v17;
    v23 = a4[2] - v15;
    v24 = a4[3] - v16;
    v25 = (float)((float)(v24 * *(float *)a1[24].f64) + (float)(v23 * *(float *)&a1[22].f64[1]))
        + (float)(v22 * *(float *)&a1[25].f64[1]);
    *(float32x2_t *)&a1[7].f64[1] = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)&a1[23].f64[1], v24), *(float32x2_t *)&a1[22].f64[0], v23), *(float32x2_t *)&a1[25].f64[0], v22);
    *(float *)a1[8].f64 = v25;
    *(_QWORD *)&a1[10].f64[1] = 0x100000001;
    LODWORD(a1[11].f64[0]) = 1;
    HIDWORD(a1[1].f64[1]) = v21;
    *(float *)&a1[32].f64[1] = v15;
    *((float *)&a1[32].f64[1] + 1) = v16;
    *(float *)a1[33].f64 = v17;
    HIDWORD(a1[20].f64[0]) = 0;
    bzero(&a1[92], 0x48uLL);
    v26 = *(float *)a1[5].f64;
    a1[92] = vcvtq_f64_f32(*(float32x2_t *)&a1[4].f64[1]);
    a1[93].f64[0] = v26;
    a1[95] = vcvtq_f64_f32(*(float32x2_t *)&a1[7].f64[1]);
    a1[96].f64[0] = *(float *)a1[8].f64;
    bzero(*(void **)&a1[98].f64[0], 0x144uLL);
    v27 = 9.0 / (float)*a3;
    v28 = a1[98].f64[0];
    **(float **)&v28 = v27;
    *(float *)(*(_QWORD *)&v28 + 40) = v27;
    *(float *)(*(_QWORD *)&v28 + 80) = v27;
    *(_DWORD *)(*(_QWORD *)&v28 + 120) = 869711765;
    *(_DWORD *)(*(_QWORD *)&v28 + 160) = 869711765;
    *(_DWORD *)(*(_QWORD *)&v28 + 200) = 869711765;
    *(float *)(*(_QWORD *)&v28 + 240) = v27;
    *(float *)(*(_QWORD *)&v28 + 280) = v27;
    *(float *)(*(_QWORD *)&v28 + 320) = v27;
    if (LOBYTE(a1[3].f64[1]))
    {
      LOBYTE(a1[3].f64[1]) = 0;
      BYTE4(a1[20].f64[1]) = 0;
    }
    sub_18F428924((uint64_t)a1);
    sub_18F429180((uint64_t)a1, 0);
    sub_18F1FD65C((uint64_t)&a1[78], (float *)&a1[4].f64[1]);
    sub_18F1FD65C((uint64_t)&a1[82].f64[1], (float *)&a1[4].f64[1] + 1);
    return sub_18F1FD65C((uint64_t)&a1[87], (float *)&a1[5]);
  }
  else
  {
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v18 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_FAULT, "Could not set bias retrieved from database", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v20 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual void CLAttitudeDependentKFCalibrator::setBias(const CLVector3d<float> &, const CLMotionTypeCompassCalibrationLevel &, const CLVector3d<float> &, const CLClientQuaternion *)", "CoreLocation: %s\n", v20);
      if (v20 != (char *)buf)
        free(v20);
    }
  }
  return result;
}

float32_t sub_18F4290E0(float32x2_t *a1, double *a2)
{
  float32_t result;
  float32_t v4;
  float32_t v5;
  float64x2_t v6;
  double v7;
  float64x2_t v8;
  double v9;
  float64x2_t v10;
  double v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  sub_18F3EEB60(v6.f64, a2);
  result = v11;
  v4 = v9;
  v5 = v7;
  a1[2] = vcvt_f32_f64(v6);
  a1[3].f32[0] = v5;
  a1[5] = vcvt_f32_f64(v8);
  a1[6].f32[0] = v4;
  a1[8] = vcvt_f32_f64(v10);
  a1[9].f32[0] = result;
  return result;
}

void sub_18F429180(uint64_t a1, int a2)
{
  float v4;
  float v5;
  float v6;
  NSObject *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  uint8_t buf[4];
  double v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = *(float *)(a1 + 120);
  v5 = *(float *)(a1 + 124);
  *(float *)(a1 + 200) = v4;
  *(float *)(a1 + 204) = v5;
  v6 = *(float *)(a1 + 128);
  *(float *)(a1 + 208) = v6;
  *(float *)(a1 + 216) = sqrtf((float)((float)(v5 * v5) + (float)(v4 * v4)) + (float)(v6 * v6));
  if (qword_1EE16D698 != -1)
    dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
  v7 = qword_1EE16D690;
  if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(float *)(a1 + 200);
    v9 = *(float *)(a1 + 204);
    v10 = *(float *)(a1 + 208);
    v11 = *(_DWORD *)(a1 + 20);
    v12 = *(_DWORD *)(a1 + 224);
    v13 = *(_DWORD *)(a1 + 168);
    v14 = *(_DWORD *)(a1 + 172);
    v15 = *(_DWORD *)(a1 + 176);
    v16 = *(_DWORD *)(a1 + 236);
    v17 = *(_DWORD *)(a1 + 240);
    *(_DWORD *)buf = 134220544;
    v21 = v8;
    v22 = 2048;
    v23 = v9;
    v24 = 2048;
    v25 = v10;
    v26 = 1024;
    v27 = v11;
    v28 = 1024;
    v29 = v12;
    v30 = 1024;
    v31 = v13;
    v32 = 1024;
    v33 = v14;
    v34 = 1024;
    v35 = v15;
    v36 = 1024;
    v37 = v16;
    v38 = 1024;
    v39 = v17;
    v40 = 1024;
    v41 = a2;
    _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_DEBUG, "set coasting vector (%.3f/%.3f/%.3f), levels (%d %d) conv(%d %d %d) age (%d) syncAge (%d) DueTo (%d)", buf, 0x50u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v19 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::setCoastingVector(BOOL)", "CoreLocation: %s\n", v19);
    if (v19 != (char *)buf)
      free(v19);
  }
  *(_DWORD *)(a1 + 240) = 0;
  v18 = *(_DWORD *)(a1 + 20);
  if ((a2 & 1) != 0)
  {
    *(_DWORD *)(a1 + 224) = v18;
    sub_18F1E6174((_QWORD *)(a1 + 1080));
    sub_18F1E6174((_QWORD *)(a1 + 1008));
    sub_18F1E6174((_QWORD *)(a1 + 1152));
    *(_BYTE *)(a1 + 59) = 1;
  }
  else
  {
    if (v18 > *(_DWORD *)(a1 + 224))
    {
      *(_DWORD *)(a1 + 236) = 0;
      *(_DWORD *)(a1 + 1608) = 0;
    }
    *(_QWORD *)(a1 + 264) = 0;
    *(_DWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    *(_DWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    *(_WORD *)(a1 + 312) = 0;
    *(_DWORD *)(a1 + 224) = v18;
    sub_18F1E6174((_QWORD *)(a1 + 1080));
    sub_18F1E6174((_QWORD *)(a1 + 1008));
    sub_18F1E6174((_QWORD *)(a1 + 1152));
  }
}

float sub_18F4294D4(uint64_t a1, float *a2, float *a3, float *a4)
{
  sub_18F1FD65C(a1 + 16, a2);
  sub_18F1FD65C(a1 + 88, a3);
  return sub_18F1FD65C(a1 + 160, a4);
}

void sub_18F42951C(float64x2_t *a1, float *a2, float32x2_t *a3, int a4)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float64x2_t *v10;
  float32x2_t v11;
  float v12;
  int v13;
  float64_t v14;
  NSObject *v15;
  int v16;
  int v17;
  char *v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  double v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  BYTE5(a1[20].f64[1]) = 1;
  BYTE1(a1[3].f64[1]) = 0;
  LODWORD(a1[91].f64[1]) = a4;
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = (float)((float)(a3[6].f32[0] * v7) + (float)(v6 * a3[3].f32[0])) + (float)(v8 * a3[9].f32[0]);
  v10 = a1 + 92;
  v11 = vmla_n_f32(vmla_n_f32(vmul_n_f32(a3[5], v7), a3[2], v6), a3[8], v8);
  bzero(&a1[92], 0x48uLL);
  a1[92] = vcvtq_f64_f32(*(float32x2_t *)&a1[4].f64[1]);
  a1[93].f64[0] = *(float *)a1[5].f64;
  *(float64x2_t *)((char *)v10 + 24) = vcvtq_f64_f32(*(float32x2_t *)&a1[6].f64[0]);
  a1[94].f64[1] = *(float *)&a1[6].f64[1];
  a1[95] = vcvtq_f64_f32(v11);
  a1[96].f64[0] = v9;
  bzero(*(void **)&a1[98].f64[0], 0x144uLL);
  v12 = 9.0;
  if ((*(unsigned int (**)(float64x2_t *))(*(_QWORD *)&a1->f64[0] + 72))(a1))
  {
    v13 = HIDWORD(a1[1].f64[0]);
    if (!LOBYTE(a1[1].f64[1]))
      v13 *= v13;
    v12 = 9.0 / (float)v13;
  }
  v14 = a1[98].f64[0];
  **(float **)&v14 = v12;
  *(float *)(*(_QWORD *)&v14 + 40) = v12;
  *(float *)(*(_QWORD *)&v14 + 80) = v12;
  *(_DWORD *)(*(_QWORD *)&v14 + 120) = 869711765;
  *(_DWORD *)(*(_QWORD *)&v14 + 160) = 869711765;
  *(_DWORD *)(*(_QWORD *)&v14 + 200) = 869711765;
  *(float *)(*(_QWORD *)&v14 + 240) = v12;
  *(float *)(*(_QWORD *)&v14 + 280) = v12;
  *(float *)(*(_QWORD *)&v14 + 320) = v12;
  a1[32].f64[1] = a1[4].f64[1];
  LODWORD(a1[33].f64[0]) = LODWORD(a1[5].f64[0]);
  sub_18F428924((uint64_t)a1);
  if (qword_1EE16D698 != -1)
    dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
  v15 = qword_1EE16D690;
  if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
  {
    v16 = HIDWORD(a1[1].f64[0]);
    v17 = LOBYTE(a1[1].f64[1]);
    *(_DWORD *)buf = 67109888;
    v20 = v16;
    v21 = 1024;
    v22 = a4;
    v23 = 1024;
    v24 = v17;
    v25 = 2048;
    v26 = v12;
    _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_DEBUG, "reset internal. levels-data(%d %d %d), pScale=%.3f ", buf, 0x1Eu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v18 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::resetInternal(const CLVector3d<float> &, const CLMatrix3d<float> &, CLMotionTypeCompassCalibrationLevel)", "CoreLocation: %s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
}

void sub_18F429844(uint64_t a1)
{
  _DWORD *v2;
  NSObject *v3;
  char *v4;
  uint8_t buf[1640];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 320) = 3;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  bzero(*(void **)(a1 + 1576), 0x6CuLL);
  v2 = *(_DWORD **)(a1 + 1576);
  *v2 = 1065353216;
  v2[4] = 1065353216;
  v2[8] = 1065353216;
  *(_BYTE *)(a1 + 25) = 0;
  if (qword_1EE16D698 != -1)
    dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
  v3 = qword_1EE16D690;
  if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEBUG, "compass calibrator reset", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v4 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::reset()", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
}

void sub_18F429A18(uint64_t a1, int a2, int a3, int a4, float *a5, float *a6, float a7, float a8, float a9, float a10, float a11, float a12, float a13)
{
  int v19;
  float v20;
  float v21;
  double v22;
  unint64_t v23;
  float v24;
  float v25;
  double v26;
  unint64_t v27;
  double v28;
  unint64_t v29;
  float v30;
  double v31;
  float v32;
  double v33;
  float v34;
  NSObject *v35;
  int v36;
  int v37;
  BOOL v38;
  float v40;
  float v42;
  float v45;
  _BOOL4 v46;
  _BOOL4 v47;
  double v48;
  int v49;
  float v50;
  float v51;
  float v52;
  float v53;
  NSObject *v54;
  unint64_t v55;
  double v56;
  double v57;
  float v58;
  float v59;
  unint64_t v60;
  float v61;
  int v62;
  int v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  unint64_t v70;
  double v71;
  float v72;
  double v73;
  float v74;
  int v75;
  int v76;
  int v77;
  float v78;
  NSObject *v79;
  unint64_t v80;
  double v81;
  double v82;
  float v83;
  unint64_t v84;
  float v85;
  int v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  unint64_t v96;
  double v97;
  float v98;
  int v99;
  int v100;
  double v101;
  int v102;
  NSObject *v103;
  int v104;
  int v105;
  NSObject *v106;
  NSObject *v107;
  int v108;
  int v109;
  char *v110;
  char *v111;
  char *v112;
  uint8_t buf[4];
  _BYTE v116[210];
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  double v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v19 = *(_DWORD *)(a1 + 240);
  v20 = (float)v19;
  v21 = *(float *)(a1 + 16);
  v22 = 0.0;
  if ((float)(v21 * 10.0) < (float)v19)
    v22 = 1.0;
  v23 = *(_QWORD *)(a1 + 1072);
  v24 = 0.0;
  v25 = 0.0;
  if (v23)
    v25 = *(float *)(a1 + 1024) / (float)v23;
  v26 = a7;
  v27 = *(_QWORD *)(a1 + 1216);
  if (v27)
    v24 = *(float *)(a1 + 1168) / (float)v27;
  v28 = v22 * 0.1 + v26 * 0.16;
  v29 = *(_QWORD *)(a1 + 1144);
  if (v29)
    v30 = *(float *)(a1 + 1096) / (float)v29;
  else
    v30 = 0.0;
  v31 = (double)*(int *)(a1 + 232);
  v32 = v28;
  v33 = v21;
  if (round(v21 * 20.0) < v31)
  {
    v34 = 0.1875;
    if (v32 >= 0.1875)
      v34 = v32;
    if (v30 > v34 && *(float *)(a1 + 1224) < 13.75 && v25 < 27.5 && a2 && a4 && a3 && a11 < 78.0 && v25 * 0.9 < v24)
    {
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v35 = qword_1EE16D690;
      if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
      {
        v36 = *(_DWORD *)(a1 + 232);
        v37 = *(_DWORD *)(a1 + 240);
        *(_DWORD *)buf = 134219776;
        *(double *)v116 = v30;
        *(_WORD *)&v116[8] = 2048;
        *(double *)&v116[10] = v24;
        *(_WORD *)&v116[18] = 2048;
        *(double *)&v116[20] = a9;
        *(_WORD *)&v116[28] = 2048;
        *(double *)&v116[30] = a13;
        *(_WORD *)&v116[38] = 2048;
        *(double *)&v116[40] = a12;
        *(_WORD *)&v116[48] = 2048;
        *(double *)&v116[50] = a11;
        *(_WORD *)&v116[58] = 1024;
        *(_DWORD *)&v116[60] = v36;
        *(_WORD *)&v116[64] = 1024;
        *(_DWORD *)&v116[66] = v37;
        _os_log_impl(&dword_18F1DC000, v35, OS_LOG_TYPE_DEBUG, "Resync after long coasting with mag drift. mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), Age(%d,%d)", buf, 0x4Au);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        v112 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::resync(float, BOOL, BOOL, BOOL, float, float, float, const CLVector3d<float> &, float, float, float, const CLVector3d<float> &)", "CoreLocation: %s\n", v112);
        if (v112 != (char *)buf)
          free(v112);
      }
      *(_BYTE *)(a1 + 185) = 1;
      if (!*(_BYTE *)(a1 + 333))
        sub_18F42951C((float64x2_t *)a1, a5, (float32x2_t *)(a1 + 336), 3);
      return;
    }
  }
  if (a9 <= 5.0 && *(float *)(a1 + 1224) <= 13.75)
    goto LABEL_155;
  if (v25 <= 4.0 || !a3)
    goto LABEL_155;
  v38 = v30 >= v32 || a4 == 0;
  if (v38 || a2 == 0)
    goto LABEL_155;
  v40 = v26 * 2.0 + 4.0;
  if (v40 >= a10 && v24 <= v40)
  {
    v45 = *(float *)(a1 + 1224);
    goto LABEL_57;
  }
  v42 = v21 + v21;
  v46 = v30 < 0.1 && v42 < v20 || (float)(v21 * 10.0) < v20 || *(_BYTE *)(a1 + 184) != 0;
  v45 = *(float *)(a1 + 1224);
  v47 = v45 >= 27.5;
  if (vabds_f32(v45, a9) < 5.0)
    v47 = 0;
  if ((!v46 || v47)
    && (v25 * 0.9 >= v24 || v42 >= v20 && (v21 >= v20 || a9 * 0.95 >= a10) || v25 <= v45 || v45 >= 27.5))
  {
LABEL_155:
    if ((-858993459 * *(_DWORD *)(a1 + 324) + 429496729) > 0x33333332)
      return;
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v79 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
    {
      v80 = *(_QWORD *)(a1 + 1072);
      v81 = 0.0;
      v82 = 0.0;
      if (v80 >= 2)
      {
        v83 = (float)((float)v80 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
        v82 = 0.0;
        if (v83 >= 0.0)
          v82 = (float)(v83 / (float)((v80 - 1) * v80));
      }
      v84 = *(_QWORD *)(a1 + 1144);
      if (v84 >= 2)
      {
        v85 = (float)((float)v84 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
        if (v85 >= 0.0)
          v81 = (float)(v85 / (float)((v84 - 1) * v84));
      }
      v86 = *(_DWORD *)(a1 + 248);
      v87 = *(float *)(a1 + 200);
      v88 = *(float *)(a1 + 204);
      v89 = *(float *)(a1 + 208);
      v90 = a6[2];
      v91 = a6[3];
      v92 = a6[4];
      v93 = a5[2];
      v94 = a5[3];
      v95 = a5[4];
      v96 = *(_QWORD *)(a1 + 1216);
      v97 = 0.0;
      if (v96 >= 2)
      {
        v98 = (float)((float)v96 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
        if (v98 >= 0.0)
          v97 = (float)(v98 / (float)((v96 - 1) * v96));
      }
      v100 = *(_DWORD *)(a1 + 236);
      v99 = *(_DWORD *)(a1 + 240);
      v101 = *(float *)(a1 + 216);
      v102 = *(_DWORD *)(a1 + 232);
      *(_DWORD *)buf = 67115008;
      *(_DWORD *)v116 = v86;
      *(_WORD *)&v116[4] = 2048;
      *(double *)&v116[6] = a8;
      *(_WORD *)&v116[14] = 2048;
      *(double *)&v116[16] = v87;
      *(_WORD *)&v116[24] = 2048;
      *(double *)&v116[26] = v88;
      *(_WORD *)&v116[34] = 2048;
      *(double *)&v116[36] = v89;
      *(_WORD *)&v116[44] = 2048;
      *(double *)&v116[46] = v90;
      *(_WORD *)&v116[54] = 2048;
      *(double *)&v116[56] = v91;
      *(_WORD *)&v116[64] = 2048;
      *(double *)&v116[66] = v92;
      *(_WORD *)&v116[74] = 2048;
      *(double *)&v116[76] = v93;
      *(_WORD *)&v116[84] = 2048;
      *(double *)&v116[86] = v94;
      *(_WORD *)&v116[94] = 2048;
      *(double *)&v116[96] = v95;
      *(_WORD *)&v116[104] = 2048;
      *(double *)&v116[106] = v25;
      *(_WORD *)&v116[114] = 2048;
      *(double *)&v116[116] = v82;
      *(_WORD *)&v116[124] = 2048;
      *(double *)&v116[126] = v30;
      *(_WORD *)&v116[134] = 2048;
      *(double *)&v116[136] = v81;
      *(_WORD *)&v116[144] = 2048;
      *(double *)&v116[146] = v24;
      *(_WORD *)&v116[154] = 2048;
      *(double *)&v116[156] = v97;
      *(_WORD *)&v116[164] = 2048;
      *(double *)&v116[166] = a9;
      *(_WORD *)&v116[174] = 2048;
      *(double *)&v116[176] = a13;
      *(_WORD *)&v116[184] = 2048;
      *(double *)&v116[186] = (float)(a11 - a12);
      *(_WORD *)&v116[194] = 2048;
      *(double *)&v116[196] = v101;
      *(_WORD *)&v116[204] = 1024;
      *(_DWORD *)&v116[206] = v100;
      v117 = 1024;
      v118 = v99;
      v119 = 1024;
      v120 = v102;
      _os_log_impl(&dword_18F1DC000, v79, OS_LOG_TYPE_DEBUG, "numBad(%d), delH(%.3f), coastVec(%.3f/%.3f/%.3f), expectedVec(%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d)", buf, 0xE2u);
    }
    if (!sub_18F1FCA08(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 != -1)
      goto LABEL_150;
    goto LABEL_144;
  }
LABEL_57:
  if (v45 >= 27.5 && v45 >= a9)
  {
    v48 = 0.0;
    if (v33 * 3.0 < v31)
      v48 = 1.0;
    if (v45 >= (float)(a9 * 4.0) || v48 * 10.0 + 80.0 <= v45)
    {
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v103 = qword_1EE16D690;
      if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
      {
        v104 = *(unsigned __int8 *)(a1 + 312);
        v105 = *(_DWORD *)(a1 + 240);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v116 = v104;
        *(_WORD *)&v116[4] = 1024;
        *(_DWORD *)&v116[6] = v105;
        _os_log_impl(&dword_18F1DC000, v103, OS_LOG_TYPE_DEBUG, "fBackupInfoSet(%d), syncAge(%d)", buf, 0xEu);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        v110 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::resync(float, BOOL, BOOL, BOOL, float, float, float, const CLVector3d<float> &, float, float, float, const CLVector3d<float> &)", "CoreLocation: %s\n", v110);
        if (v110 != (char *)buf)
          free(v110);
      }
      if (!*(_BYTE *)(a1 + 312)
        || *(float *)(a1 + 16) * 1.5 <= (double)*(int *)(a1 + 240)
        || *(float *)(a1 + 1224) <= 80.0
        || a12 <= 78.0
        || *(int *)(a1 + 248) < 5)
      {
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        v107 = qword_1EE16D690;
        if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
        {
          v108 = *(_DWORD *)(a1 + 248);
          v109 = *(_DWORD *)(a1 + 240);
          *(_DWORD *)buf = 67110912;
          *(_DWORD *)v116 = v108;
          *(_WORD *)&v116[4] = 2048;
          *(double *)&v116[6] = v30;
          *(_WORD *)&v116[14] = 2048;
          *(double *)&v116[16] = v24;
          *(_WORD *)&v116[24] = 2048;
          *(double *)&v116[26] = a9;
          *(_WORD *)&v116[34] = 2048;
          *(double *)&v116[36] = a13;
          *(_WORD *)&v116[44] = 2048;
          *(double *)&v116[46] = a12;
          *(_WORD *)&v116[54] = 2048;
          *(double *)&v116[56] = a11;
          *(_WORD *)&v116[64] = 1024;
          *(_DWORD *)&v116[66] = v109;
          _os_log_impl(&dword_18F1DC000, v107, OS_LOG_TYPE_DEBUG, "RESYNC Rejected. numBad=%d,mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), syncAge(%d)", buf, 0x4Au);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D698 == -1)
            goto LABEL_144;
          goto LABEL_150;
        }
        return;
      }
      *(_BYTE *)(a1 + 185) = 1;
      *(_BYTE *)(a1 + 313) = 1;
      *(_DWORD *)(a1 + 248) = 0;
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v106 = qword_1EE16D690;
      if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v106, OS_LOG_TYPE_DEBUG, "Likely bad resync. Backup.", buf, 2u);
      }
      if (!sub_18F1FCA08(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        goto LABEL_150;
LABEL_144:
      v111 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::resync(float, BOOL, BOOL, BOOL, float, float, float, const CLVector3d<float> &, float, float, float, const CLVector3d<float> &)", "CoreLocation: %s\n", v111);
      if (v111 != (char *)buf)
        free(v111);
      return;
    }
  }
  *(_BYTE *)(a1 + 185) = 1;
  if (!*(_BYTE *)(a1 + 333) && *(_BYTE *)(a1 + 184) && v25 < 27.5 && v30 < 0.15 && v24 < 5.0)
  {
    sub_18F42951C((float64x2_t *)a1, a5, (float32x2_t *)(a1 + 336), 3);
    v19 = *(_DWORD *)(a1 + 240);
    v33 = *(float *)(a1 + 16);
  }
  if (v33 * 1.5 >= (double)v19 && ((v49 = *(_DWORD *)(a1 + 304)) != 0 || *(_BYTE *)(a1 + 312)))
  {
    v50 = *(float *)(a1 + 308);
    v51 = fabsf(v50);
    v52 = v50 + a8;
    *(float *)(a1 + 308) = v52;
    v53 = fabsf(v52);
    if (v53 > (float)(v51 + 5.0))
    {
      *(_DWORD *)(a1 + 304) = v49 + 1;
      if (v49 >= 1 && v53 < (float)((float)(v49 + 1) * 5.0))
      {
        *(_QWORD *)(a1 + 264) = 0;
        *(_DWORD *)(a1 + 272) = 0;
        *(_QWORD *)(a1 + 288) = 0;
        *(_DWORD *)(a1 + 296) = 0;
        *(_QWORD *)(a1 + 304) = 0;
        *(_WORD *)(a1 + 312) = 0;
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a1 + 200);
    *(_DWORD *)(a1 + 296) = *(_DWORD *)(a1 + 208);
    *(_DWORD *)(a1 + 316) = *(_DWORD *)(a1 + 324);
    *(_DWORD *)(a1 + 304) = 0;
    *(_WORD *)(a1 + 312) = 1;
    *(float *)(a1 + 308) = a8;
  }
  if (qword_1EE16D698 != -1)
    dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
  v54 = qword_1EE16D690;
  if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
  {
    v55 = *(_QWORD *)(a1 + 1072);
    v56 = 0.0;
    v57 = 0.0;
    if (v55 >= 2)
    {
      v58 = (float)((float)v55 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
      v57 = 0.0;
      if (v58 >= 0.0)
        v57 = (float)(v58 / (float)((v55 - 1) * v55));
    }
    v59 = a5[4];
    v60 = *(_QWORD *)(a1 + 1144);
    if (v60 >= 2)
    {
      v61 = (float)((float)v60 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
      if (v61 >= 0.0)
        v56 = (float)(v61 / (float)((v60 - 1) * v60));
    }
    v62 = *(_DWORD *)(a1 + 248);
    v63 = *(_DWORD *)(a1 + 304);
    v64 = *(float *)(a1 + 308);
    v65 = a6[2];
    v66 = a6[3];
    v67 = a6[4];
    v68 = a5[2];
    v69 = a5[3];
    v70 = *(_QWORD *)(a1 + 1216);
    v71 = 0.0;
    if (v70 >= 2)
    {
      v72 = (float)((float)v70 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
      if (v72 >= 0.0)
        v71 = (float)(v72 / (float)((v70 - 1) * v70));
    }
    v73 = *(float *)(a1 + 216);
    v74 = (float)(*(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 316));
    v76 = *(_DWORD *)(a1 + 236);
    v75 = *(_DWORD *)(a1 + 240);
    v77 = *(_DWORD *)(a1 + 232);
    *(_DWORD *)buf = 67115520;
    v78 = *(float *)(a1 + 16);
    *(_DWORD *)v116 = v62;
    *(_WORD *)&v116[4] = 2048;
    *(double *)&v116[6] = v26;
    *(_WORD *)&v116[14] = 2048;
    *(double *)&v116[16] = a8;
    *(_WORD *)&v116[24] = 1024;
    *(_DWORD *)&v116[26] = v63;
    *(_WORD *)&v116[30] = 2048;
    *(double *)&v116[32] = v64;
    *(_WORD *)&v116[40] = 2048;
    *(double *)&v116[42] = v65;
    *(_WORD *)&v116[50] = 2048;
    *(double *)&v116[52] = v66;
    *(_WORD *)&v116[60] = 2048;
    *(double *)&v116[62] = v67;
    *(_WORD *)&v116[70] = 2048;
    *(double *)&v116[72] = v68;
    *(_WORD *)&v116[80] = 2048;
    *(double *)&v116[82] = v69;
    *(_WORD *)&v116[90] = 2048;
    *(double *)&v116[92] = v59;
    *(_WORD *)&v116[100] = 2048;
    *(double *)&v116[102] = v25;
    *(_WORD *)&v116[110] = 2048;
    *(double *)&v116[112] = v57;
    *(_WORD *)&v116[120] = 2048;
    *(double *)&v116[122] = v30;
    *(_WORD *)&v116[130] = 2048;
    *(double *)&v116[132] = v56;
    *(_WORD *)&v116[140] = 2048;
    *(double *)&v116[142] = v24;
    *(_WORD *)&v116[150] = 2048;
    *(double *)&v116[152] = v71;
    *(_WORD *)&v116[160] = 2048;
    *(double *)&v116[162] = a9;
    *(_WORD *)&v116[170] = 2048;
    *(double *)&v116[172] = a13;
    *(_WORD *)&v116[180] = 2048;
    *(double *)&v116[182] = (float)(a11 - a12);
    *(_WORD *)&v116[190] = 2048;
    *(double *)&v116[192] = a12;
    *(_WORD *)&v116[200] = 2048;
    *(double *)&v116[202] = v73;
    v117 = 1024;
    v118 = v76;
    v119 = 1024;
    v120 = v75;
    v121 = 1024;
    v122 = v77;
    v123 = 2048;
    v124 = (float)(v74 / v78);
    _os_log_impl(&dword_18F1DC000, v54, OS_LOG_TYPE_DEBUG, "DRIFT DETECTED. numBad=%d,s=%.3f,delH(%.3f,%d,%.3f), expectedVec (%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d),deltaTime(%.3f)", buf, 0xF2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 == -1)
      goto LABEL_144;
LABEL_150:
    dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    goto LABEL_144;
  }
}

void sub_18F42AF94(uint64_t a1)
{
  float v1;
  float v2;
  float v3;
  NSObject *v4;
  char *v5;
  uint8_t buf[1640];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 184) = 1;
  if (!*(_BYTE *)(a1 + 333) && *(_BYTE *)(a1 + 57))
  {
    v1 = *(float *)(a1 + 200);
    v2 = *(float *)(a1 + 204);
    *(float *)(a1 + 120) = v1;
    *(float *)(a1 + 124) = v2;
    v3 = *(float *)(a1 + 208);
    *(float *)(a1 + 128) = v3;
    *(double *)(a1 + 1520) = v1;
    *(double *)(a1 + 1528) = v2;
    *(double *)(a1 + 1536) = v3;
  }
  if (qword_1EE16D698 != -1)
    dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
  v4 = qword_1EE16D690;
  if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEBUG, "enters coasting", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::enterCoasting()", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
}

float sub_18F42B158(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = sqrtf((float)((float)(v3 * v3) + (float)(v2 * v2)) + (float)(v4 * v4));
  if (v5 > 0.0
    && (v6 = a2[2],
        v7 = a2[3],
        v8 = a2[4],
        v9 = sqrtf((float)((float)(v7 * v7) + (float)(v6 * v6)) + (float)(v8 * v8)),
        v9 > 0.0)
    && (v10 = (float)((float)((float)((float)(v3 * v7) + (float)(v6 * v2)) + (float)(v8 * v4)) / v5) / v9, v10 <= 1.0))
  {
    return acosf(v10);
  }
  else
  {
    return 0.0;
  }
}

void sub_18F42B1C4(uint64_t a1)
{
  NSObject *v1;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  if (qword_1EE16D698 != -1)
    dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
  v1 = qword_1EE16D690;
  if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v1, OS_LOG_TYPE_DEBUG, "exits coasting", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::exitCoasting()", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
}

uint64_t sub_18F42B350(uint64_t result)
{
  unint64_t v1;
  double v2;
  double v3;
  unint64_t v4;
  unint64_t v5;
  double v6;

  v1 = *(_QWORD *)(result + 1312);
  v2 = 0.0;
  v3 = 0.0;
  if (v1)
    v3 = (float)(*(float *)(result + 1264) / (float)v1);
  v4 = *(_QWORD *)(result + 1384);
  v5 = *(_QWORD *)(result + 1456);
  *(double *)(result + 1472) = v3;
  if (v4)
    v2 = (float)(*(float *)(result + 1336) / (float)v4);
  *(double *)(result + 1480) = v2;
  if (v5)
    v6 = (float)(*(float *)(result + 1408) / (float)v5);
  else
    v6 = 0.0;
  *(double *)(result + 1488) = v6;
  *(_DWORD *)(result + 236) = 0;
  *(_BYTE *)(result + 244) = 1;
  return result;
}

void sub_18F42B3C4(uint64_t a1, float *a2)
{
  NSObject *v4;
  char *v5;
  uint8_t buf[1640];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D698 != -1)
    dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
  v4 = qword_1EE16D690;
  if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEBUG, "Divergence!!! Resetting.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::handleDivergence(const CLVector3d<float> &)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  sub_18F1E6174((_QWORD *)(a1 + 1248));
  sub_18F1E6174((_QWORD *)(a1 + 1320));
  sub_18F1E6174((_QWORD *)(a1 + 1392));
  if (*(_BYTE *)(a1 + 24))
  {
    sub_18F1FD65C(a1 + 1248, (float *)(a1 + 72));
    sub_18F1FD65C(a1 + 1320, (float *)(a1 + 76));
    sub_18F1FD65C(a1 + 1392, (float *)(a1 + 80));
  }
  sub_18F42951C((float64x2_t *)a1, a2, (float32x2_t *)(a1 + 336), *(_DWORD *)(a1 + 20));
}

BOOL sub_18F42B5CC(uint64_t a1, unsigned int *a2, int a3, float *a4)
{
  unint64_t v8;
  float v9;
  float v10;
  float v11;
  unint64_t v12;
  float v13;
  unint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  NSObject *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  float v25;
  char *v27;
  uint8_t buf[4];
  unsigned int v29;
  __int16 v30;
  unsigned int v31;
  __int16 v32;
  unsigned int v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  *a4 = 0.0;
  v8 = *(_QWORD *)(a1 + 1312);
  v9 = 0.0;
  v10 = 0.0;
  if (v8 >= 2)
  {
    v11 = (float)((float)v8 * *(float *)(a1 + 1268)) - (float)(*(float *)(a1 + 1264) * *(float *)(a1 + 1264));
    if (v11 >= 0.0)
      v10 = v11 / (float)((v8 - 1) * v8);
  }
  v12 = *(_QWORD *)(a1 + 1384);
  if (v12 >= 2)
  {
    v13 = (float)((float)v12 * *(float *)(a1 + 1340)) - (float)(*(float *)(a1 + 1336) * *(float *)(a1 + 1336));
    if (v13 >= 0.0)
      v9 = v13 / (float)((v12 - 1) * v12);
  }
  v14 = *(_QWORD *)(a1 + 1456);
  v15 = 0.0;
  if (v14 >= 2)
  {
    v16 = (float)((float)v14 * *(float *)(a1 + 1412)) - (float)(*(float *)(a1 + 1408) * *(float *)(a1 + 1408));
    if (v16 >= 0.0)
      v15 = v16 / (float)((v14 - 1) * v14);
  }
  v17 = (float)(v9 * (float)a2[1]) + (float)((float)*a2 * v10);
  v18 = (float)a2[2];
  if (qword_1EE16D698 != -1)
    dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
  v19 = v17 + (float)(v18 * v15);
  v20 = qword_1EE16D690;
  if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
  {
    v21 = *a2;
    v22 = a2[1];
    v23 = a2[2];
    v24 = *(_QWORD *)(a1 + 1312);
    *(_DWORD *)buf = 67111168;
    v29 = v21;
    v30 = 1024;
    v31 = v22;
    v32 = 1024;
    v33 = v23;
    v34 = 2048;
    v35 = v10;
    v36 = 2048;
    v37 = v9;
    v38 = 2048;
    v39 = v15;
    v40 = 2048;
    v41 = v19;
    v42 = 1024;
    v43 = a3;
    v44 = 1024;
    v45 = v24;
    _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_DEBUG, "new estimates calculated, converged(%d %d %d) Var (%.3f %.3f %.3f), remain (%.3f), level (%d), num=%d ", buf, 0x48u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v27 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::sanityCheck(unsigned int *, CLMotionTypeCompassCalibrationLevel, float &)", "CoreLocation: %s\n", v27);
    if (v27 != (char *)buf)
      free(v27);
  }
  v25 = 100.0 / (float)a3;
  if (v19 > v25)
    *a4 = (float)(v19 - v25) / v25;
  return v19 <= v25;
}

float sub_18F42B974(uint64_t a1, float a2, float a3, float a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  float v9;
  float v10;
  float v11;

  v10 = a3;
  v11 = a2;
  v9 = a4;
  if (!*(_BYTE *)(a1 + 24))
    *(_BYTE *)(a1 + 57) = 1;
  *(_BYTE *)(a1 + 333) = 0;
  v5 = a1 + 1248;
  sub_18F1E6174((_QWORD *)(a1 + 1248));
  v6 = a1 + 1320;
  sub_18F1E6174((_QWORD *)(a1 + 1320));
  v7 = (_QWORD *)(a1 + 1392);
  sub_18F1E6174(v7);
  sub_18F1FD65C(v5, &v11);
  sub_18F1FD65C(v6, &v10);
  return sub_18F1FD65C((uint64_t)v7, &v9);
}

void sub_18F42BA04(uint64_t a1, int a2, int *a3)
{
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  char *v14;
  uint8_t buf[4];
  double v16;
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 60) = a2;
  if (a2)
  {
    v4 = *a3;
    *(_DWORD *)(a1 + 120) = *a3;
    v5 = a3[1];
    *(_DWORD *)(a1 + 124) = v5;
    v6 = a3[2];
    *(_DWORD *)(a1 + 128) = v6;
    *(_DWORD *)(a1 + 200) = v4;
    *(_DWORD *)(a1 + 204) = v5;
    *(_DWORD *)(a1 + 208) = v6;
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v7 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(float *)(a1 + 200);
      v9 = *(float *)(a1 + 204);
      v10 = *(float *)(a1 + 208);
      v11 = *(float *)(a1 + 120);
      v12 = *(float *)(a1 + 124);
      v13 = *(float *)(a1 + 128);
      *(_DWORD *)buf = 134219264;
      v16 = v8;
      v17 = 2048;
      v18 = v9;
      v19 = 2048;
      v20 = v10;
      v21 = 2048;
      v22 = v11;
      v23 = 2048;
      v24 = v12;
      v25 = 2048;
      v26 = v13;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_DEBUG, "fCoastingVecPrint: %.3f, %.3f, %.3f, %.3f, %.3f, %.3f", buf, 0x3Eu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v14 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::referenceAttitudeChanged(BOOL, const CLMotionTypeMagneticField &)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
  }
}

void sub_18F42BC7C(uint64_t a1, float *a2, double *a3)
{
  float v6;
  double v7;
  unint64_t v8;
  float v9;
  float v10;
  unint64_t v11;
  float v12;
  unint64_t v13;
  float v14;
  NSObject *v15;
  NSObject *v16;
  char *v17;
  float v18;
  int v19;
  float v20;
  unint64_t v21;
  float v22;
  unint64_t v23;
  float v24;
  float v25;
  int v26;
  float v27;
  NSObject *v28;
  NSObject *v29;
  float v30;
  double v31;
  double v32;
  NSObject *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  float v38;
  NSObject *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  _DWORD *v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  _BOOL4 v52;
  _BOOL4 v53;
  unint64_t v54;
  unint64_t v55;
  float v56;
  float v57;
  unint64_t v58;
  float32_t v59;
  NSObject *v60;
  int *v61;
  int v62;
  float v63;
  float v64;
  NSObject *v65;
  unint64_t v66;
  NSObject *v67;
  int v68;
  _BOOL4 v69;
  int v70;
  BOOL v71;
  float v72;
  int v73;
  char v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  NSObject *v81;
  unint64_t v82;
  NSObject *v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  NSObject *v90;
  uint64_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  float v101;
  float v102;
  double v103;
  NSObject *v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  float v109;
  double v110;
  double v111;
  int v112;
  int v113;
  double v114;
  uint64_t v115;
  int v116;
  double v117;
  double v118;
  uint64_t v119;
  uint64_t i;
  uint64_t j;
  float v122;
  float v123;
  uint64_t v124;
  uint64_t v125;
  float *v126;
  float v127;
  float *v128;
  uint64_t k;
  float v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  float *v134;
  uint64_t v135;
  float *v136;
  uint64_t v137;
  float *v138;
  unint64_t m;
  unint64_t v140;
  uint64_t v141;
  float *v142;
  uint64_t n;
  uint64_t v144;
  float v145;
  uint64_t ii;
  float v147;
  float v148;
  float v149;
  int v150;
  float v151;
  float v152;
  float v153;
  float v154;
  _OWORD *v155;
  float v156;
  float v157;
  float v158;
  uint64_t v159;
  float *v160;
  float v161;
  float v162;
  unint64_t v163;
  float v164;
  float v165;
  float v166;
  float v167;
  unint64_t v168;
  float v169;
  float v170;
  unint64_t v171;
  float v172;
  float v173;
  float v174;
  float v175;
  uint64_t v176;
  int v177;
  float v178;
  int v179;
  float v180;
  int v181;
  float v182;
  float v183;
  float v184;
  float v185;
  unsigned int v186;
  unsigned int v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  float v193;
  unint64_t v194;
  float v195;
  float v196;
  float v197;
  unint64_t v198;
  float v199;
  unint64_t v200;
  float v201;
  float v202;
  float v203;
  float v204;
  NSObject *v205;
  int v206;
  unint64_t v207;
  float v208;
  NSObject *v209;
  NSObject *v210;
  double v211;
  double v212;
  double v213;
  double v214;
  double v215;
  unint64_t v216;
  double v217;
  float v218;
  uint64_t v219;
  int v220;
  double v221;
  double v222;
  double v223;
  double v224;
  double v225;
  unint64_t v226;
  double v227;
  float v228;
  int v229;
  int v230;
  int v231;
  uint64_t v232;
  int v233;
  float v234;
  int v235;
  NSObject *v236;
  int v237;
  int v238;
  double v239;
  double v240;
  double v241;
  double v242;
  float v243;
  unint64_t v244;
  float v245;
  float v246;
  double v247;
  unint64_t v248;
  double v249;
  double v250;
  float v251;
  float v252;
  float v253;
  int v254;
  NSObject *v255;
  int v256;
  int v257;
  float v258;
  NSObject *v259;
  char *v260;
  int v261;
  int v262;
  int v263;
  int v264;
  float v265;
  float v266;
  float v267;
  float v268;
  NSObject *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  int v274;
  int v275;
  int v276;
  float v277;
  float v278;
  float v279;
  int v280;
  int v281;
  BOOL v282;
  NSObject *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  float v287;
  float v288;
  float v289;
  NSObject *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  int v295;
  int v296;
  int v297;
  float v298;
  float v299;
  float v300;
  NSObject *v301;
  int v302;
  NSObject *v303;
  int v304;
  int v305;
  int v306;
  double v307;
  double v308;
  double v309;
  double v310;
  double v311;
  double v312;
  double v313;
  float v314;
  float v315;
  float v316;
  float v317;
  float v318;
  NSObject *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  double v327;
  double v328;
  __int128 v329;
  float v330;
  float v331;
  float v332;
  _BOOL4 v333;
  int v334;
  float v335;
  float v336;
  float v337;
  NSObject *v338;
  int v339;
  int v340;
  int v341;
  char *v342;
  NSObject *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  int v347;
  float v348;
  float v349;
  float v350;
  uint64_t v351;
  float v352;
  unsigned int v353;
  NSObject *v354;
  int v355;
  float v356;
  NSObject *v357;
  int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  NSObject *v363;
  int v364;
  int v365;
  NSObject *v366;
  int v367;
  int v368;
  int v369;
  float v370;
  NSObject *v371;
  _BOOL4 v372;
  float v373;
  int v374;
  NSObject *v375;
  int v376;
  int v377;
  int v378;
  NSObject *v379;
  char *v380;
  BOOL v381;
  int v382;
  float v383;
  NSObject *v384;
  char *v385;
  int v386;
  char *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  double v395;
  double v396;
  char *v397;
  char *v398;
  char *v399;
  int v400;
  char *v401;
  double v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  char *v410;
  char *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  int v416;
  int v417;
  int v418;
  char *v419;
  int v420;
  int v421;
  char *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  int v426;
  int v427;
  int v428;
  int v429;
  char *v430;
  float v431;
  char *v432;
  char *v433;
  float v434;
  char *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  int v439;
  char *v440;
  char *v441;
  int v442;
  char *v443;
  char *v444;
  char *v445;
  char *v446;
  float v447;
  float v448;
  float v449;
  float v450;
  float v451;
  float32x2_t *v452;
  float v453;
  float v454;
  double v455[4];
  float64x2_t v456;
  double v457;
  uint64_t v458;
  uint64_t (**v459)();
  float v460;
  float v461;
  float v462;
  uint64_t (**v463)();
  float v464;
  int v465;
  int v466;
  float v467;
  _BYTE v468[74];
  double v469;
  __int16 v470;
  double v471;
  __int16 v472;
  double v473;
  __int16 v474;
  int v475;
  float v476;
  float v477;
  float v478;
  uint64_t v479;
  float v480;
  int8x8_t v481;
  int v482;
  _BYTE buf[74];
  double v484;
  __int16 v485;
  double v486;
  __int16 v487;
  double v488;
  __int16 v489;
  int v490;
  uint64_t v491;

  v491 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v16 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v16, OS_LOG_TYPE_FAULT, "Attitude data not set.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      *(_WORD *)v468 = 0;
      v17 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "CoreLocation: %s\n", v17);
      goto LABEL_332;
    }
    return;
  }
  ++*(_DWORD *)(a1 + 324);
  if (!*(_BYTE *)(a1 + 184))
    goto LABEL_76;
  v6 = *(float *)(a1 + 16);
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 1144);
  if (v6 * 8.0 >= (double)*(int *)(a1 + 248))
    goto LABEL_698;
  v9 = 0.0;
  if (v8 >= 2)
  {
    v10 = (float)((float)v8 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
    if (v10 >= 0.0)
      v9 = v10 / (float)((v8 - 1) * v8);
  }
  if (v9 >= 0.01
    || (v11 = *(_QWORD *)(a1 + 1072), v11 >= 2)
    && (v12 = (float)((float)v11 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024)),
        v12 >= 0.0)
    && (float)(v12 / (float)((v11 - 1) * v11)) >= 20.0
    || (v13 = *(_QWORD *)(a1 + 1216), v13 >= 2)
    && (v14 = (float)((float)v13 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168)),
        v14 >= 0.0)
    && (float)(v14 / (float)((v13 - 1) * v13)) >= 10.0)
  {
LABEL_698:
    if (v8)
    {
      v18 = *(float *)(a1 + 1096);
      if ((float)(v18 / (float)v8) >= 1.0)
      {
        v26 = *(_DWORD *)(a1 + 232);
        if (roundf(v6 * 120.0) >= (float)v26
          || v8 >= 2
          && (v27 = (float)((float)v8 * *(float *)(a1 + 1100)) - (float)(v18 * v18), v27 >= 0.0)
          && (float)(v27 / (float)((v8 - 1) * v8)) >= 0.04)
        {
          if (round(v7 * 360.0) >= (double)v26)
            goto LABEL_76;
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          if (qword_1EE16D698 != -1)
            dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
          v29 = qword_1EE16D690;
          if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F1DC000, v29, OS_LOG_TYPE_DEBUG, "Coasting for too long. Exit coasting.", buf, 2u);
          }
          if (!sub_18F1FCA08(115, 2))
            goto LABEL_76;
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D698 != -1)
            goto LABEL_690;
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          if (qword_1EE16D698 != -1)
            dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
          v28 = qword_1EE16D690;
          if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F1DC000, v28, OS_LOG_TYPE_DEBUG, "Waiting too long for high magnitude interference to go away. Exit coasting.", buf, 2u);
          }
          if (!sub_18F1FCA08(115, 2))
            goto LABEL_76;
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D698 != -1)
            goto LABEL_690;
        }
LABEL_619:
        *(_WORD *)v468 = 0;
        v399 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::resetAfterCoasting()", "CoreLocation: %s\n", v399);
        if (v399 != buf)
          free(v399);
        goto LABEL_76;
      }
    }
    v19 = *(_DWORD *)(a1 + 232);
    if (roundf(v6 * 120.0) <= (float)v19)
      goto LABEL_71;
    if (!*(_BYTE *)(a1 + 333))
      goto LABEL_76;
    if (round(v7 * 30.0) > (double)v19)
      goto LABEL_76;
    if (*(float *)(a1 + 1224) <= 30.0)
      goto LABEL_76;
    if (v8 >= 2)
    {
      v20 = (float)((float)v8 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
      if (v20 >= 0.0 && (float)(v20 / (float)((v8 - 1) * v8)) >= 0.01)
        goto LABEL_76;
    }
    v21 = *(_QWORD *)(a1 + 1072);
    if (v21 >= 2)
    {
      v22 = (float)((float)v21 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
      if (v22 >= 0.0 && (float)(v22 / (float)((v21 - 1) * v21)) >= 200.0)
        goto LABEL_76;
    }
    v23 = *(_QWORD *)(a1 + 1216);
    if (v23 >= 2)
    {
      v25 = (float)v23;
      v24 = *(float *)(a1 + 1168);
      v30 = (float)((float)v23 * *(float *)(a1 + 1172)) - (float)(v24 * v24);
      if (v30 >= 0.0 && (float)(v30 / (float)((v23 - 1) * v23)) >= 100.0)
        goto LABEL_76;
    }
    else
    {
      if (!v23)
      {
        v31 = 0.0;
LABEL_67:
        if (v21)
          v32 = (float)(*(float *)(a1 + 1024) / (float)v21) * 0.9;
        else
          v32 = 0.0;
        if (v32 <= v31)
          goto LABEL_76;
LABEL_71:
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        v33 = qword_1EE16D690;
        if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v33, OS_LOG_TYPE_DEBUG, "Waiting too long for internal re-calibration. Prompt user.", buf, 2u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D698 == -1)
            goto LABEL_619;
          goto LABEL_690;
        }
        goto LABEL_76;
      }
      v24 = *(float *)(a1 + 1168);
      v25 = 1.0;
    }
    v31 = (float)(v24 / v25);
    goto LABEL_67;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (qword_1EE16D698 != -1)
    dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
  v15 = qword_1EE16D690;
  if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_DEBUG, "Bad heading divergence for too long. Prompt user to re-calibrate.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 == -1)
      goto LABEL_619;
LABEL_690:
    dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    goto LABEL_619;
  }
LABEL_76:
  *(_BYTE *)(a1 + 59) = 0;
  *(_BYTE *)(a1 + 25) = 0;
  v452 = (float32x2_t *)(a1 + 336);
  sub_18F4290E0((float32x2_t *)(a1 + 336), a3);
  v34 = a3[3];
  v35 = a3[2] + a3[2];
  v36 = *a3;
  v37 = a3[1];
  v38 = v34 * (v37 + v37) - *a3 * v35;
  *(float *)&v35 = -(v34 * (v36 + v36)) - v37 * v35;
  *(float *)&v34 = v36 * (v36 + v36) + -1.0 + v37 * (v37 + v37);
  v463 = &off_1E2949650;
  v464 = v38;
  v465 = LODWORD(v35);
  v466 = LODWORD(v34);
  if (*(_BYTE *)(a1 + 56))
  {
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v39 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v39, OS_LOG_TYPE_INFO, "Resetting calibrator states.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      *(_WORD *)v468 = 0;
      v385 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::resetCalibration(const CLVector3d<float> &, const CLMatrix3d<float> &)", "CoreLocation: %s\n", v385);
      if (v385 != buf)
        free(v385);
    }
    *(_WORD *)(a1 + 332) = 1;
    *(_BYTE *)(a1 + 57) = 1;
    *(_BYTE *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 236) = 0;
    *(_DWORD *)(a1 + 240) = 0;
    *(_DWORD *)(a1 + 216) = 0;
    *(_DWORD *)(a1 + 20) = 0;
    *(_DWORD *)(a1 + 28) = 0;
    *(_QWORD *)(a1 + 320) = 3;
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_DWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 200) = 0;
    *(_DWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 520) = 0;
    *(_DWORD *)(a1 + 528) = 0;
    v41 = a2[3];
    v40 = a2[4];
    v42 = a2[2];
    v43 = (float)((float)(*(float *)(a1 + 384) * v41) + (float)(v42 * *(float *)(a1 + 360)))
        + (float)(v40 * *(float *)(a1 + 408));
    *(float32x2_t *)(a1 + 120) = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(a1 + 376), v41), *(float32x2_t *)(a1 + 352), v42), *(float32x2_t *)(a1 + 400), v40);
    *(float *)(a1 + 128) = v43;
    bzero((void *)(a1 + 1472), 0x48uLL);
    *(float64x2_t *)(a1 + 1520) = vcvtq_f64_f32(*(float32x2_t *)(a1 + 120));
    *(double *)(a1 + 1536) = *(float *)(a1 + 128);
    bzero(*(void **)(a1 + 1568), 0x144uLL);
    v44 = *(_DWORD **)(a1 + 1568);
    *v44 = 1091567616;
    v44[10] = 1091567616;
    v44[20] = 1091567616;
    v44[30] = 869711765;
    v44[40] = 869711765;
    v44[50] = 869711765;
    v44[60] = 1091567616;
    v44[70] = 1091567616;
    v44[80] = 1091567616;
    sub_18F428924(a1);
    v45 = *((_OWORD *)a3 + 1);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 432) = v45;
    if ((float *)(a1 + 448) != a2)
    {
      *(_QWORD *)(a1 + 456) = *((_QWORD *)a2 + 1);
      *(float *)(a1 + 464) = a2[4];
    }
    *(_BYTE *)(a1 + 332) = 1;
    *(_BYTE *)(a1 + 56) = 0;
  }
  else if (!*(_BYTE *)(a1 + 332))
  {
    goto LABEL_88;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
    *(_BYTE *)(a1 + 332) = 0;
LABEL_88:
  *(int32x2_t *)(a1 + 236) = vadd_s32(*(int32x2_t *)(a1 + 236), (int32x2_t)0x100000001);
  v46 = *(_QWORD *)(a1 + 1000);
  v47 = *(_QWORD *)(v46 + 64);
  v454 = 0.0;
  v48 = 0.0;
  v49 = 0.0;
  if (v47)
  {
    v50 = *(float *)(v46 + 16);
    v48 = v50 / (float)v47;
    if (v47 != 1)
    {
      v51 = (float)((float)v47 * *(float *)(v46 + 20)) - (float)(v50 * v50);
      if (v51 >= 0.0)
        v49 = v51 / (float)((v47 - 1) * v47);
    }
  }
  v52 = v49 <= 6.0 && v48 <= 4.7124;
  v53 = v49 <= 0.8 && v48 <= 1.5708;
  sub_18F1FD65C(a1 + 552, a2 + 2);
  sub_18F1FD65C(a1 + 624, a2 + 3);
  sub_18F1FD65C(a1 + 696, a2 + 4);
  v54 = *(_QWORD *)(a1 + 616);
  if (v54)
    v454 = *(float *)(a1 + 568) / (float)v54;
  v55 = *(_QWORD *)(a1 + 688);
  v56 = 0.0;
  v57 = 0.0;
  if (v55)
    v57 = *(float *)(a1 + 640) / (float)v55;
  v58 = *(_QWORD *)(a1 + 760);
  if (v58)
    v56 = *(float *)(a1 + 712) / (float)v58;
  v459 = &off_1E2949650;
  v460 = v454;
  v461 = v57;
  v453 = v57;
  v462 = v56;
  v59 = sub_18F431150((float32x2_t *)a1, (float32x2_t *)&v459);
  if (!(*(unsigned int (**)(uint64_t, float32_t))(*(_QWORD *)a1 + 72))(a1, v59))
    goto LABEL_160;
  if (*(_BYTE *)(a1 + 60))
  {
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v60 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "Compass-withFusion";
      _os_log_impl(&dword_18F1DC000, v60, OS_LOG_TYPE_DEBUG, "Type,%s,Updating reference frame.", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      *(_DWORD *)v468 = 136315138;
      *(_QWORD *)&v468[4] = "Compass-withFusion";
      v387 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "CoreLocation: %s\n", v387);
      if (v387 != buf)
        free(v387);
    }
    *(_BYTE *)(a1 + 60) = 0;
  }
  v61 = (int *)(a1 + 20);
  if (*(int *)(a1 + 20) <= 3)
    v62 = 3;
  else
    v62 = *(_DWORD *)(a1 + 20);
  v63 = *(float *)(a1 + 216);
  if (v63 <= 0.0)
  {
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v65 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v65, OS_LOG_TYPE_FAULT, "Coasting vector not set.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      *(_WORD *)v468 = 0;
      v398 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v398);
      if (v398 != buf)
        free(v398);
    }
    goto LABEL_124;
  }
  *(float *)v455 = vabds_f32(v63, sqrtf((float)((float)(v461 * v461) + (float)(v460 * v460)) + (float)(v462 * v462)))
                 / v63;
  sub_18F1FD65C(a1 + 1080, (float *)v455);
  v64 = (double)(5 - v62) * 0.25 + 1.5;
  if (*(float *)v455 > (float)((float)(v64 * 10.0) * 0.1875))
  {
    if (*(_BYTE *)(a1 + 184))
      ++*(_DWORD *)(a1 + 232);
    else
      sub_18F42AF94(a1);
    v207 = *(_QWORD *)(a1 + 1144);
    if (v207)
    {
      if ((v208 = *(float *)(a1 + 1096) / (float)v207, v208 > 5.0)
        && roundf(*(float *)(a1 + 16) * 30.0) < (float)*(int *)(a1 + 232)
        || v208 > 10.0 && roundf(*(float *)(a1 + 16) * 10.0) < (float)*(int *)(a1 + 232))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        v209 = qword_1EE16D690;
        if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v209, OS_LOG_TYPE_DEBUG, "Prolonged high magDiff. Likely bad calibration. Resetting.", buf, 2u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D698 != -1)
            dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
          *(_WORD *)v468 = 0;
          v411 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v411);
          if (v411 != buf)
            free(v411);
        }
      }
    }
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v210 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
    {
      v211 = sqrtf((float)((float)(v461 * v461) + (float)(v460 * v460)) + (float)(v462 * v462));
      v212 = *(float *)(a1 + 200);
      v213 = *(float *)(a1 + 204);
      v214 = *(float *)(a1 + 208);
      v215 = (float)((float)*(int *)(a1 + 232) / *(float *)(a1 + 16));
      v216 = *(_QWORD *)(a1 + 1144);
      v217 = 0.0;
      if (v216 >= 2)
      {
        v218 = (float)((float)v216 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
        v219 = (v216 - 1) * v216;
        if (v218 >= 0.0)
          v217 = (float)(v218 / (float)(unint64_t)v219);
        else
          v217 = 0.0;
      }
      v220 = *(unsigned __int8 *)(a1 + 333);
      *(_DWORD *)buf = 134220544;
      *(double *)&buf[4] = *(float *)v455;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v211;
      *(_WORD *)&buf[22] = 2048;
      *(double *)&buf[24] = v460;
      *(_WORD *)&buf[32] = 2048;
      *(double *)&buf[34] = v461;
      *(_WORD *)&buf[42] = 2048;
      *(double *)&buf[44] = v462;
      *(_WORD *)&buf[52] = 2048;
      *(double *)&buf[54] = v212;
      *(_WORD *)&buf[62] = 2048;
      *(double *)&buf[64] = v213;
      *(_WORD *)&buf[72] = 2048;
      v484 = v214;
      v485 = 2048;
      v486 = v215;
      v487 = 2048;
      v488 = v217;
      v489 = 1024;
      v490 = v220;
      _os_log_impl(&dword_18F1DC000, v210, OS_LOG_TYPE_DEBUG, "Extremely high magnitude.  magDiff (%.3f), magnitude (%.3f), calibrated (%.3f/%.3f/%.3f), coastVector (%.3f/%.3f/%.3f),coastingTime,%.3f,magDiffVar,%.3f,resetInternal,%d", buf, 0x6Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v221 = sqrtf((float)((float)(v461 * v461) + (float)(v460 * v460)) + (float)(v462 * v462));
      v222 = *(float *)(a1 + 200);
      v223 = *(float *)(a1 + 204);
      v224 = *(float *)(a1 + 208);
      v225 = (float)((float)*(int *)(a1 + 232) / *(float *)(a1 + 16));
      v226 = *(_QWORD *)(a1 + 1144);
      v227 = 0.0;
      if (v226 >= 2)
      {
        v228 = (float)((float)v226 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
        if (v228 >= 0.0)
          v227 = (float)(v228 / (float)((v226 - 1) * v226));
      }
      v229 = *(unsigned __int8 *)(a1 + 333);
      *(_DWORD *)v468 = 134220544;
      *(double *)&v468[4] = *(float *)v455;
      *(_WORD *)&v468[12] = 2048;
      *(double *)&v468[14] = v221;
      *(_WORD *)&v468[22] = 2048;
      *(double *)&v468[24] = v460;
      *(_WORD *)&v468[32] = 2048;
      *(double *)&v468[34] = v461;
      *(_WORD *)&v468[42] = 2048;
      *(double *)&v468[44] = v462;
      *(_WORD *)&v468[52] = 2048;
      *(double *)&v468[54] = v222;
      *(_WORD *)&v468[62] = 2048;
      *(double *)&v468[64] = v223;
      *(_WORD *)&v468[72] = 2048;
      v469 = v224;
      v470 = 2048;
      v471 = v225;
      v472 = 2048;
      v473 = v227;
      v474 = 1024;
      v475 = v229;
      v17 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v17);
LABEL_332:
      if (v17 != buf)
        free(v17);
      return;
    }
    return;
  }
  v183 = *(float *)(a1 + 200);
  v184 = *(float *)(a1 + 204);
  v185 = *(float *)(a1 + 208);
  *(float *)&v186 = (float)((float)(v184 * *(float *)(a1 + 356)) + (float)(v183 * *(float *)(a1 + 352)))
                  + (float)(v185 * *(float *)(a1 + 360));
  *(float *)&v187 = (float)((float)(v184 * *(float *)(a1 + 380)) + (float)(v183 * *(float *)(a1 + 376)))
                  + (float)(v185 * *(float *)(a1 + 384));
  v188 = (float)((float)(v184 * *(float *)(a1 + 404)) + (float)(v183 * *(float *)(a1 + 400)))
       + (float)(v185 * *(float *)(a1 + 408));
  *(_QWORD *)&v456.f64[0] = &off_1E2949650;
  *(_QWORD *)&v456.f64[1] = __PAIR64__(v187, v186);
  *(float *)&v457 = v188;
  v481.i32[0] = 0;
  *(float *)v481.i32 = sub_18F42B158((float *)&v459, (float *)&v456) * 57.296;
  v189 = 90.0 - sub_18F42B158((float *)&v459, (float *)&v463) * 57.2957795;
  v190 = 90.0 - sub_18F42B158((float *)&v456, (float *)&v463) * 57.2957795;
  LODWORD(v479) = vabds_f32(v189, v190);
  sub_18F1FD65C(a1 + 1008, (float *)&v481);
  sub_18F1FD65C(a1 + 1152, (float *)&v479);
  *(_DWORD *)(a1 + 1224) = 0;
  v476 = 0.0;
  v467 = 0.0;
  v191 = 0.0;
  if (sub_18F438FFC((float *)&v456, (float *)&v463, &v467))
  {
    if (sub_18F438FFC((float *)&v459, (float *)&v463, &v476))
    {
      v191 = v476 - v467;
      v192 = vabds_f32(v476, v467);
      *(float *)(a1 + 1224) = v192;
      if (v192 > 180.0)
      {
        v193 = 360.0 - v192;
        *(float *)(a1 + 1224) = v193;
        if (v191 < 0.0)
          v191 = -v193;
        else
          v191 = v193;
      }
    }
  }
  if (*v61 < 2 || !v53 && (v52 & (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1)) != 1)
    goto LABEL_591;
  *(_BYTE *)(a1 + 185) = 0;
  v194 = *(_QWORD *)(a1 + 1216);
  v195 = 0.0;
  v196 = 0.0;
  if (v194 >= 2)
  {
    v197 = (float)((float)v194 * *(float *)(a1 + 1172)) - (float)(*(float *)(a1 + 1168) * *(float *)(a1 + 1168));
    if (v197 >= 0.0)
      v196 = v197 / (float)((v194 - 1) * v194);
  }
  v198 = *(_QWORD *)(a1 + 1072);
  if (v198 >= 2)
  {
    v199 = (float)((float)v198 * *(float *)(a1 + 1028)) - (float)(*(float *)(a1 + 1024) * *(float *)(a1 + 1024));
    if (v199 >= 0.0)
      v195 = v199 / (float)((v198 - 1) * v198);
  }
  v200 = *(_QWORD *)(a1 + 1144);
  v201 = 0.0;
  if (v200 >= 2)
  {
    v202 = (float)((float)v200 * *(float *)(a1 + 1100)) - (float)(*(float *)(a1 + 1096) * *(float *)(a1 + 1096));
    if (v202 >= 0.0)
      v201 = v202 / (float)((v200 - 1) * v200);
  }
  v204 = *(float *)(a1 + 1224);
  if (*(_BYTE *)(a1 + 252))
  {
    if (v204 > 27.5)
    {
      v203 = v64 * 0.0032;
      if (v201 <= v203 && (!v200 || (float)(*(float *)(a1 + 1096) / (float)v200) < 0.45))
      {
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        v205 = qword_1EE16D690;
        if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v205, OS_LOG_TYPE_DEBUG, "Likely bad database lookup. Resetting. ", buf, 2u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D698 != -1)
            dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
          *(_WORD *)v468 = 0;
          v433 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v433);
          if (v433 != buf)
            free(v433);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        return;
      }
    }
  }
  v230 = *(_DWORD *)(a1 + 248);
  if (v204 <= 80.0)
  {
    if (v230 < 1)
      goto LABEL_351;
    v231 = -1;
  }
  else
  {
    v231 = 1;
  }
  *(_DWORD *)(a1 + 248) = v231 + v230;
LABEL_351:
  v449 = v196;
  v450 = v189;
  v448 = v201;
  v447 = v64 * 0.0032;
  if (qword_1EE16D698 != -1)
    dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
  v451 = v64 * 13.0;
  v236 = qword_1EE16D690;
  if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
  {
    v237 = *(_DWORD *)(a1 + 236);
    v238 = *(_DWORD *)(a1 + 248);
    *(_DWORD *)buf = 134219776;
    *(double *)&buf[4] = v64;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v237;
    *(_WORD *)&buf[18] = 2048;
    *(double *)&buf[20] = *(float *)v455;
    *(_WORD *)&buf[28] = 2048;
    *(double *)&buf[30] = v191;
    *(_WORD *)&buf[38] = 2048;
    *(double *)&buf[40] = *(float *)v481.i32;
    *(_WORD *)&buf[48] = 1024;
    *(_DWORD *)&buf[50] = v238;
    *(_WORD *)&buf[54] = 2048;
    *(double *)&buf[56] = v189;
    *(_WORD *)&buf[64] = 1024;
    *(_DWORD *)&buf[66] = v449 < v451;
    _os_log_impl(&dword_18F1DC000, v236, OS_LOG_TYPE_DEBUG, "******* scale(%.3f),cAge(%d), magDiff(%.3f), dHeading(%.3f), deltaAngle(%.3f), numBad(%d), calInc(%.3f), incDiffIsStable(%d)", buf, 0x46u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v420 = *(_DWORD *)(a1 + 236);
    v421 = *(_DWORD *)(a1 + 248);
    *(_DWORD *)v468 = 134219776;
    *(double *)&v468[4] = v64;
    *(_WORD *)&v468[12] = 1024;
    *(_DWORD *)&v468[14] = v420;
    *(_WORD *)&v468[18] = 2048;
    *(double *)&v468[20] = *(float *)v455;
    *(_WORD *)&v468[28] = 2048;
    *(double *)&v468[30] = v191;
    *(_WORD *)&v468[38] = 2048;
    *(double *)&v468[40] = *(float *)v481.i32;
    *(_WORD *)&v468[48] = 1024;
    *(_DWORD *)&v468[50] = v421;
    *(_WORD *)&v468[54] = 2048;
    *(double *)&v468[56] = v189;
    *(_WORD *)&v468[64] = 1024;
    *(_DWORD *)&v468[66] = v449 < v451;
    v422 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v422);
    if (v422 != buf)
      free(v422);
  }
  v239 = v451;
  v240 = v195;
  v241 = v451 * 1.5;
  if (!v53
    || *(float *)(a1 + 16) >= (float)(*(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 328))
    || (LODWORD(v239) = *(_DWORD *)(a1 + 1216),
        round((double)*(unint64_t *)(a1 + 1160) * 0.5) >= (double)*(unint64_t *)&v239)
    || (v242 = v240,
        *(_DWORD *)(a1 + 328) = 0,
        sub_18F429A18(a1, v449 < v451, v241 > v240, v448 <= v447, (float *)&v459, (float *)&v456, v64, v191, *(float *)v481.i32, *(float *)&v479, v450, v190, *(float *)v455), v240 = v242, !*(_BYTE *)(a1 + 313)))
  {
    v243 = *(float *)(a1 + 16);
    v244 = *(_QWORD *)(a1 + 1072);
    v245 = 0.0;
    v246 = 0.0;
    if (v244)
      v246 = *(float *)(a1 + 1024) / (float)v244;
    v247 = v243;
    v248 = *(_QWORD *)(a1 + 1144);
    if (v248)
      v245 = *(float *)(a1 + 1096) / (float)v248;
    v249 = (double)*(int *)(a1 + 236);
    v250 = v247 * 2.0 + 40.0;
    if (*(_BYTE *)(a1 + 185))
    {
      if (!*(_BYTE *)(a1 + 184))
        goto LABEL_591;
      v251 = v64 * 13.75;
      v252 = v64 * 0.1875;
      goto LABEL_375;
    }
    v253 = *(float *)(a1 + 1224);
    if (v253 > 80.0
      && v190 > 78.0
      && v243 < (float)*(int *)(a1 + 248)
      && v246 > 13.75
      && v245 < 0.45
      && (v247 * 3.5 < (double)*(int *)(a1 + 240) || v250 >= v249))
    {
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v375 = qword_1EE16D690;
      if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v375, OS_LOG_TYPE_DEBUG, "Steep inclination. Likely bad interference or bad database lookup. Resetting. ", buf, 2u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        *(_WORD *)v468 = 0;
        v444 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v444);
        if (v444 != buf)
          free(v444);
      }
      *(_DWORD *)(a1 + 248) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      return;
    }
    v251 = v64 * 13.75;
    v252 = v64 * 0.1875;
    if (*(_BYTE *)(a1 + 184))
    {
LABEL_375:
      v254 = *(_DWORD *)(a1 + 232) + 1;
      *(_DWORD *)(a1 + 232) = v254;
      if (v245 > v252 || v448 > v447 || v246 > v251 && *(float *)(a1 + 1224) >= v251 || v241 <= v240)
      {
        if (*(_BYTE *)(a1 + 333))
          goto LABEL_591;
        if (roundf(v243 * 10.0) >= (float)v254
          && v250 < v249
          && (v450 >= 78.0 || v449 >= v451 || v245 >= 0.45 || v246 <= v251 || *(float *)(a1 + 1224) <= 80.0))
        {
          return;
        }
        sub_18F428B98((_QWORD *)(a1 + 1232));
        v256 = 1;
      }
      else
      {
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        v255 = qword_1EE16D690;
        if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v255, OS_LOG_TYPE_DEBUG, "Interference is gone.", buf, 2u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D698 != -1)
            dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
          *(_WORD *)v468 = 0;
          v441 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v441);
          if (v441 != buf)
            free(v441);
        }
        sub_18F42B1C4(a1);
        if (!*(_BYTE *)(a1 + 333) || *(int *)(a1 + 1592) > 2)
          goto LABEL_591;
        v256 = 0;
        v61 = (int *)(a1 + 1464);
      }
      sub_18F42951C((float64x2_t *)a1, (float *)&v459, v452, *v61);
      v257 = v256;
      if (*(_BYTE *)(a1 + 333))
        goto LABEL_591;
LABEL_590:
      if (v257)
        return;
LABEL_591:
      if (!*(_BYTE *)(a1 + 333) && *(_BYTE *)(a1 + 184) && *(float *)v455 > (float)((float)(v64 + 1.0) * 0.1875))
        return;
      goto LABEL_124;
    }
    if (v253 <= 13.75 && *(float *)v455 <= 0.45)
    {
LABEL_541:
      v257 = 0;
      goto LABEL_551;
    }
    v370 = v64 + 0.8;
    if (*(float *)v481.i32 < (float)(v370 * 13.75)
      && (*(float *)v481.i32 <= 13.75 || *(float *)v455 < (float)(v370 * 0.1875)))
    {
      v376 = *(float *)v455 > v252 || v53;
      v377 = *(_DWORD *)(a1 + 228);
      if (*(float *)v481.i32 <= v251 || !v376)
      {
        _VF = __OFSUB__(v377, 1);
        v386 = v377 - 1;
        if (v386 < 0 == _VF)
        {
          v257 = 0;
          *(_DWORD *)(a1 + 228) = v386;
          goto LABEL_551;
        }
        goto LABEL_541;
      }
      *(_DWORD *)(a1 + 228) = v377 + 1;
      v378 = *(unsigned __int8 *)(a1 + 333);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v379 = qword_1EE16D690;
      if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218752;
        *(double *)&buf[4] = *(float *)v481.i32;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v191;
        *(_WORD *)&buf[22] = 2048;
        *(double *)&buf[24] = *(float *)v455;
        *(_WORD *)&buf[32] = 2048;
        *(double *)&buf[34] = *(float *)&v479;
        _os_log_impl(&dword_18F1DC000, v379, OS_LOG_TYPE_DEBUG, "**INTERFERENCE-0 dAngle=%.3f,dHeading=%.3f,magDiff=%.3f,incDiff=%.3f", buf, 0x2Au);
      }
      v257 = v378 ^ 1;
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        *(_DWORD *)v468 = 134218752;
        *(double *)&v468[4] = *(float *)v481.i32;
        *(_WORD *)&v468[12] = 2048;
        *(double *)&v468[14] = v191;
        *(_WORD *)&v468[22] = 2048;
        *(double *)&v468[24] = *(float *)v455;
        *(_WORD *)&v468[32] = 2048;
        *(double *)&v468[34] = *(float *)&v479;
        v380 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v380);
        if (v380 != buf)
          free(v380);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 228) += 5;
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v371 = qword_1EE16D690;
      if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218752;
        *(double *)&buf[4] = *(float *)v481.i32;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v191;
        *(_WORD *)&buf[22] = 2048;
        *(double *)&buf[24] = *(float *)v455;
        *(_WORD *)&buf[32] = 2048;
        *(double *)&buf[34] = *(float *)&v479;
        _os_log_impl(&dword_18F1DC000, v371, OS_LOG_TYPE_DEBUG, "**INTERFERENCE-1 dAngle=%.3f,dHeading=%.3f,magDiff=%.3f,incDiff=%.3f", buf, 0x2Au);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        *(_DWORD *)v468 = 134218752;
        *(double *)&v468[4] = *(float *)v481.i32;
        *(_WORD *)&v468[12] = 2048;
        *(double *)&v468[14] = v191;
        *(_WORD *)&v468[22] = 2048;
        *(double *)&v468[24] = *(float *)v455;
        *(_WORD *)&v468[32] = 2048;
        *(double *)&v468[34] = *(float *)&v479;
        v445 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v445);
        if (v445 != buf)
          free(v445);
      }
      v257 = 1;
    }
LABEL_551:
    v372 = 0;
    v373 = (float)(v64 * 4.0) * 13.75;
    v374 = *(_DWORD *)(a1 + 228);
    if (*(_BYTE *)(a1 + 24) && v374 >= 2)
      v372 = (*(float *)v481.i32 > v373 || *(float *)(a1 + 1224) > 32.0) && *(float *)v455 < 1.12499997;
    if (v374 > 40 || *(float *)v481.i32 > v373 || v372)
    {
      v381 = !v372;
      if (*(_BYTE *)(a1 + 24))
        v381 = 0;
      if (v381
        || (v382 = *(_DWORD *)(a1 + 236), v383 = *(float *)(a1 + 16), v383 * 0.25 <= (double)v382)
        && ((float)(v383 * 10.0) <= (float)v382 || v383 >= (float)*(int *)(a1 + 248) || v450 >= 78.0 || v449 >= v451))
      {
        sub_18F42AF94(a1);
        *(_DWORD *)(a1 + 228) = 0;
        return;
      }
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v384 = qword_1EE16D690;
      if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v384, OS_LOG_TYPE_DEBUG, "Likely bad database lookup. Resetting. ", buf, 2u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        *(_WORD *)v468 = 0;
        v446 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "BOOL CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, BOOL, BOOL)", "CoreLocation: %s\n", v446);
        if (v446 != buf)
          free(v446);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    }
    goto LABEL_590;
  }
LABEL_124:
  if (*(_BYTE *)(a1 + 184))
  {
    HIDWORD(v66) = -858993459 * *(_DWORD *)(a1 + 324) + 429496728;
    LODWORD(v66) = HIDWORD(v66);
    if ((v66 >> 1) <= 0x19999998)
    {
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v67 = qword_1EE16D690;
      if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
      {
        v68 = *(unsigned __int8 *)(a1 + 333);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v68;
        _os_log_impl(&dword_18F1DC000, v67, OS_LOG_TYPE_DEBUG, "Updating during coasting, fIsResetInternal(%d)", buf, 8u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        v400 = *(unsigned __int8 *)(a1 + 333);
        *(_DWORD *)v468 = 67109120;
        *(_DWORD *)&v468[4] = v400;
        v401 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "CoreLocation: %s\n", v401);
        if (v401 != buf)
          free(v401);
      }
    }
  }
  if (*(_BYTE *)(a1 + 185))
    v69 = v53;
  else
    v69 = 0;
  if (v69)
  {
    v70 = *(_DWORD *)(a1 + 324);
    v71 = v48 > 0.15;
    if (v49 >= 0.01)
      v71 = 0;
    if (*(_BYTE *)(a1 + 313))
      goto LABEL_146;
    v72 = fabsf(*(float *)(a1 + 308));
    v73 = *(_DWORD *)(a1 + 304);
    if (v73 >= 2 && v72 > (float)((float)((float)(v70 - *(_DWORD *)(a1 + 316)) / *(float *)(a1 + 16)) * 40.0))
      goto LABEL_146;
    if (v73 >= 6 && v72 > 100.0)
      goto LABEL_146;
    v74 = !v71;
    if (v73 < 7)
      v74 = 1;
    if ((v74 & 1) != 0 || v72 <= 70.0)
    {
      v258 = (float)((float)(*(float *)(a1 + 384) * v461) + (float)(v460 * *(float *)(a1 + 360)))
           + (float)(v462 * *(float *)(a1 + 408));
      *(float32x2_t *)(a1 + 120) = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(a1 + 376), v461), *(float32x2_t *)(a1 + 352), v460), *(float32x2_t *)(a1 + 400), v462);
      *(float *)(a1 + 128) = v258;
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v259 = qword_1EE16D690;
      if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218240;
        *(double *)&buf[4] = v48;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v49;
        _os_log_impl(&dword_18F1DC000, v259, OS_LOG_TYPE_DEBUG, "resync coasting vector. rotM,%.3f,rotV,%.3f", buf, 0x16u);
      }
      if (!sub_18F1FCA08(115, 2))
        goto LABEL_153;
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      *(_DWORD *)v468 = 134218240;
      *(double *)&v468[4] = v48;
      *(_WORD *)&v468[12] = 2048;
      *(double *)&v468[14] = v49;
      v260 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "CoreLocation: %s\n", v260);
    }
    else
    {
LABEL_146:
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 264);
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 272);
      v75 = *(float *)(a1 + 288);
      v76 = *(float *)(a1 + 292);
      *(float *)(a1 + 120) = v75;
      *(float *)(a1 + 124) = v76;
      v77 = *(float *)(a1 + 296);
      *(float *)(a1 + 128) = v77;
      *(_DWORD *)(a1 + 328) = v70;
      *(_QWORD *)(a1 + 264) = 0;
      *(_DWORD *)(a1 + 272) = 0;
      *(_QWORD *)(a1 + 288) = 0;
      *(_DWORD *)(a1 + 296) = 0;
      *(_QWORD *)(a1 + 304) = 0;
      *(_WORD *)(a1 + 312) = 0;
      if (!*(_BYTE *)(a1 + 333))
      {
        v78 = (float)((float)(v76 * *(float *)(a1 + 356)) + (float)(v75 * *(float *)(a1 + 352)))
            + (float)(v77 * *(float *)(a1 + 360));
        v79 = (float)((float)(v76 * *(float *)(a1 + 380)) + (float)(v75 * *(float *)(a1 + 376)))
            + (float)(v77 * *(float *)(a1 + 384));
        v80 = (float)((float)(v76 * *(float *)(a1 + 404)) + (float)(v75 * *(float *)(a1 + 400)))
            + (float)(v77 * *(float *)(a1 + 408));
        *(_QWORD *)buf = &off_1E2949650;
        *(float *)&buf[8] = v78;
        *(float *)&buf[12] = v79;
        *(float *)&buf[16] = v80;
        sub_18F42951C((float64x2_t *)a1, (float *)buf, v452, 3);
      }
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v81 = qword_1EE16D690;
      if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v81, OS_LOG_TYPE_DEBUG, "BACKUP resync coasting vector", buf, 2u);
      }
      if (!sub_18F1FCA08(115, 2))
        goto LABEL_153;
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      *(_WORD *)v468 = 0;
      v260 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "CoreLocation: %s\n", v260);
    }
    if (v260 != buf)
      free(v260);
LABEL_153:
    sub_18F429180(a1, 1);
    goto LABEL_160;
  }
  HIDWORD(v82) = -858993459 * *(_DWORD *)(a1 + 324) + 429496728;
  LODWORD(v82) = HIDWORD(v82);
  if ((v82 >> 1) <= 0x19999998)
  {
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v83 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
    {
      v84 = *a3;
      v85 = *((_QWORD *)a3 + 1);
      v86 = *((_QWORD *)a3 + 2);
      v87 = *((_QWORD *)a3 + 3);
      *(_DWORD *)buf = 67110912;
      *(_DWORD *)&buf[4] = v52;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v53;
      *(_WORD *)&buf[14] = 2048;
      *(double *)&buf[16] = v48;
      *(_WORD *)&buf[24] = 2048;
      *(double *)&buf[26] = v49;
      *(_WORD *)&buf[34] = 2048;
      *(double *)&buf[36] = v84;
      *(_WORD *)&buf[44] = 2048;
      *(_QWORD *)&buf[46] = v85;
      *(_WORD *)&buf[54] = 2048;
      *(_QWORD *)&buf[56] = v86;
      *(_WORD *)&buf[64] = 2048;
      *(_QWORD *)&buf[66] = v87;
      _os_log_impl(&dword_18F1DC000, v83, OS_LOG_TYPE_DEBUG, "device status: (smooth static) = (%d %d), rotM,%.3f,rotV,%.3f, q.x,%.3f,q.y,%.3f,q.z,%.3f,q.w,%.3f)", buf, 0x4Au);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v402 = *a3;
      v403 = *((_QWORD *)a3 + 1);
      v404 = *((_QWORD *)a3 + 2);
      v405 = *((_QWORD *)a3 + 3);
      *(_DWORD *)v468 = 67110912;
      *(_DWORD *)&v468[4] = v52;
      *(_WORD *)&v468[8] = 1024;
      *(_DWORD *)&v468[10] = v53;
      *(_WORD *)&v468[14] = 2048;
      *(double *)&v468[16] = v48;
      *(_WORD *)&v468[24] = 2048;
      *(double *)&v468[26] = v49;
      *(_WORD *)&v468[34] = 2048;
      *(double *)&v468[36] = v402;
      *(_WORD *)&v468[44] = 2048;
      *(_QWORD *)&v468[46] = v403;
      *(_WORD *)&v468[54] = 2048;
      *(_QWORD *)&v468[56] = v404;
      *(_WORD *)&v468[64] = 2048;
      *(_QWORD *)&v468[66] = v405;
      v406 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "CoreLocation: %s\n", v406);
      if (v406 != buf)
        free(v406);
    }
  }
LABEL_160:
  v88 = *(unsigned __int8 *)(a1 + 57);
  if (!*(_BYTE *)(a1 + 57) || *(_DWORD *)(a1 + 20) != 5 || !*(_BYTE *)(a1 + 220))
  {
    v456 = vnegq_f64(*(float64x2_t *)(a1 + 416));
    v91 = *(_QWORD *)(a1 + 440);
    v457 = -*(double *)(a1 + 432);
    v458 = v91;
    sub_18F2010A8(v455, v456.f64, a3);
    v93 = v455[0];
    v92 = v455[1];
    v95 = v455[2];
    v94 = v455[3];
    __asm { FMOV            V8.2S, #1.0 }
    if (_NF)
    {
      v101 = vaddv_f32(vabs_f32(vdiv_f32(vsub_f32((float32x2_t)__PAIR64__(LODWORD(v453), LODWORD(v454)), *(float32x2_t *)(a1 + 456)), (float32x2_t)vbsl_s8((int8x8_t)vceqz_f32((float32x2_t)__PAIR64__(LODWORD(v453), LODWORD(v454))), _D8, (int8x8_t)__PAIR64__(LODWORD(v453), LODWORD(v454))))));
      v102 = 1.0;
      if (v56 != 0.0)
        v102 = v56;
      v103 = (float)(v101 + fabsf((float)(v56 - *(float *)(a1 + 464)) / v102));
      if (v103 > 0.2)
      {
        ++*(_DWORD *)(a1 + 472);
        --*(_DWORD *)(a1 + 236);
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        v104 = qword_1EE16D690;
        if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
        {
          v105 = *(_DWORD *)(a1 + 472);
          *(_DWORD *)buf = 67110400;
          *(_DWORD *)&buf[4] = v105;
          *(_WORD *)&buf[8] = 2048;
          *(double *)&buf[10] = v93;
          *(_WORD *)&buf[18] = 2048;
          *(double *)&buf[20] = v92;
          *(_WORD *)&buf[28] = 2048;
          *(double *)&buf[30] = v95;
          *(_WORD *)&buf[38] = 2048;
          *(double *)&buf[40] = v94;
          *(_WORD *)&buf[48] = 2048;
          *(double *)&buf[50] = v103;
          _os_log_impl(&dword_18F1DC000, v104, OS_LOG_TYPE_DEBUG, "numSamplesSkipped (%d), deltaQ (%.3f/%.3f/%.3f/%.3f), deltaReadingM (%.3f)", buf, 0x3Au);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D698 != -1)
            dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
          v106 = *(_DWORD *)(a1 + 472);
          *(_DWORD *)v468 = 67110400;
          *(_DWORD *)&v468[4] = v106;
          *(_WORD *)&v468[8] = 2048;
          *(double *)&v468[10] = v93;
          *(_WORD *)&v468[18] = 2048;
          *(double *)&v468[20] = v92;
          *(_WORD *)&v468[28] = 2048;
          *(double *)&v468[30] = v95;
          *(_WORD *)&v468[38] = 2048;
          *(double *)&v468[40] = v94;
          *(_WORD *)&v468[48] = 2048;
          *(double *)&v468[50] = v103;
          v17 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "CoreLocation: %s\n", v17);
          goto LABEL_332;
        }
        return;
      }
    }
    if (v88 && *(_DWORD *)(a1 + 20) == 5)
    {
      if (!v53)
      {
        ++*(_DWORD *)(a1 + 472);
        --*(_DWORD *)(a1 + 236);
        return;
      }
      if (!*(_BYTE *)(a1 + 184)
        && !*(_BYTE *)(a1 + 220)
        && (float)(*(float *)(a1 + 16) * 4.0) <= (float)*(int *)(a1 + 236))
      {
        *(_BYTE *)(a1 + 220) = 1;
      }
    }
    v107 = 0;
    v108 = *(_QWORD *)(a1 + 1568);
    v109 = 0.0;
    do
    {
      v109 = v109 + *(float *)(v108 + v107);
      v107 += 40;
    }
    while (v107 != 360);
    v110 = exp(v109 * 5.0) * 15.0;
    if (v110 > 5000.0)
      v110 = 5000.0;
    if (v110 < 300.0)
      v110 = 300.0;
    v111 = exp(-1.0 / *(float *)(a1 + 16) / v110);
    v112 = *(_DWORD *)(a1 + 472);
    if (v112 < 2)
    {
      v114 = v111;
    }
    else
    {
      v113 = v112 - 1;
      v114 = v111;
      do
      {
        v114 = v111 * v114;
        --v113;
      }
      while (v113);
    }
    v115 = 0;
    v116 = *(_DWORD *)(a1 + 20);
    *(float64x2_t *)(a1 + 1520) = vmlaq_n_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 144)), 1.0 - v114), *(float64x2_t *)(a1 + 1520), v114);
    *(double *)(a1 + 1536) = (1.0 - v114) * *(float *)(a1 + 152) + v114 * *(double *)(a1 + 1536);
    v117 = v114 * v114;
    v118 = (1.0 - v114 * v114) * 6.25;
    v119 = v108 + 240;
    for (i = 6; i != 9; ++i)
    {
      for (j = 0; j != 108; j += 36)
      {
        v122 = v117 * *(float *)(v119 + j);
        if (v115 == j)
        {
          v123 = v118 + v122;
          v122 = v123;
        }
        *(float *)(v119 + j) = v122;
      }
      v115 += 36;
      v119 += 4;
    }
    sub_18F3D65E8((void **)(a1 + 1544), v108, 9);
    v124 = 0;
    v125 = *(_QWORD *)(a1 + 1576);
    *(float *)(v125 + 36) = -v454;
    *(float *)(v125 + 52) = -v453;
    *(float *)(v125 + 68) = -v56;
    *(_DWORD *)(v125 + 72) = *(_DWORD *)(a1 + 352);
    *(_DWORD *)(v125 + 84) = *(_DWORD *)(a1 + 356);
    *(_DWORD *)(v125 + 96) = *(_DWORD *)(a1 + 360);
    *(_DWORD *)(v125 + 76) = *(_DWORD *)(a1 + 376);
    *(_DWORD *)(v125 + 88) = *(_DWORD *)(a1 + 380);
    *(_DWORD *)(v125 + 100) = *(_DWORD *)(a1 + 384);
    *(_DWORD *)(v125 + 80) = *(_DWORD *)(a1 + 400);
    *(_DWORD *)(v125 + 92) = *(_DWORD *)(a1 + 404);
    *(_DWORD *)(v125 + 104) = *(_DWORD *)(a1 + 408);
    v481 = _D8;
    v482 = 1065353216;
    v480 = 0.0;
    v479 = 0;
    v126 = (float *)v125;
    do
    {
      v127 = *((float *)&v479 + v124);
      v128 = v126;
      for (k = 1472; k != 1544; k += 8)
      {
        v130 = *v128;
        v128 += 3;
        v127 = v127 + v130 * *(double *)(a1 + k);
      }
      *((float *)&v479 + v124++) = v127;
      ++v126;
    }
    while (v124 != 3);
    v476 = v454 - *(float *)&v479;
    v477 = v453 - *((float *)&v479 + 1);
    v478 = v56 - v480;
    sub_18F1F5B7C(buf, (uint64_t *)(a1 + 1544), v125, (uint64_t)&v481, (uint64_t)&v476, 9, 3, (uint64_t)v468);
    v131 = *(void **)(a1 + 1568);
    bzero(*(void **)(a1 + 1584), 0x144uLL);
    bzero(v131, 0x144uLL);
    v132 = 0;
    v133 = *(_QWORD *)(a1 + 1552);
    v134 = *(float **)(a1 + 1584);
    v135 = *(_QWORD *)(a1 + 1544);
    v136 = v134;
    do
    {
      v134[10 * v132] = *(float *)(v133 + 4 * v132);
      if (v132)
      {
        v137 = 0;
        v138 = v136;
        do
        {
          *v138 = *(float *)(v133 + 4 * v132) * *(float *)(v135 + 4 * (((int)v132 - 1) * (int)v132 / 2) + 4 * v137);
          v138 += 9;
          ++v137;
        }
        while (v132 != v137);
      }
      ++v132;
      ++v136;
    }
    while (v132 != 9);
    for (m = 0; m != 9; ++m)
    {
      v140 = 0;
      v141 = *(_QWORD *)(a1 + 1544);
      v142 = v134;
      do
      {
        if (m <= v140)
          LODWORD(n) = v140;
        else
          LODWORD(n) = m;
        v144 = 9 * v140;
        if (m >= v140)
        {
          v145 = v134[v144 + (int)n] + 0.0;
          LODWORD(n) = n + 1;
        }
        else
        {
          v145 = 0.0;
        }
        if ((int)n <= 8)
        {
          for (n = n; n != 9; ++n)
            v145 = v145 + (float)(*(float *)(v141 + 4 * (m + ((int)n - 1) * (int)n / 2)) * v142[n]);
        }
        *((float *)v131 + v144 + m) = v145;
        ++v140;
        v142 += 9;
      }
      while (v140 != 9);
    }
    for (ii = 0; ii != 72; ii += 8)
      *(double *)(a1 + ii + 1472) = *(double *)&buf[ii] + *(double *)(a1 + ii + 1472);
    v147 = *(double *)(a1 + 1520);
    v148 = *(double *)(a1 + 1528);
    v149 = *(double *)(a1 + 1536);
    *(float *)(a1 + 144) = v147;
    *(float *)(a1 + 148) = v148;
    *(float *)(a1 + 152) = v149;
    if (v116 > 0)
    {
      v150 = *(_DWORD *)(a1 + 504) + 1;
      *(_DWORD *)(a1 + 504) = v150;
      v151 = *(float *)(a1 + 488) + v147;
      *(float *)(a1 + 488) = v151;
      v152 = *(float *)(a1 + 492) + v148;
      *(float *)(a1 + 492) = v152;
      v153 = *(float *)(a1 + 496) + v149;
      *(float *)(a1 + 496) = v153;
      v154 = 1.0 / (double)v150;
      *(float *)(a1 + 144) = v151 * v154;
      *(float *)(a1 + 148) = v152 * v154;
      *(float *)(a1 + 152) = v153 * v154;
    }
    *(_QWORD *)(a1 + 1592) = 0;
    *(_QWORD *)(a1 + 1600) = 0;
    v155 = (_OWORD *)(a1 + 1592);
    v156 = *(double *)(a1 + 1472);
    *(float *)buf = v156;
    v157 = *(double *)(a1 + 1480);
    *(float *)v468 = v157;
    v158 = *(double *)(a1 + 1488);
    *(float *)v481.i32 = v158;
    sub_18F1FD65C(a1 + 784, (float *)buf);
    sub_18F1FD65C(a1 + 856, (float *)v468);
    sub_18F1FD65C(a1 + 928, (float *)&v481);
    v159 = 0;
    v160 = *(float **)(a1 + 1568);
    v161 = 0.0;
    do
    {
      v162 = *v160;
      v160 += 10;
      *(float *)&v481.i32[v159] = v162;
      v161 = v161 + v162;
      ++v159;
    }
    while (v159 != 3);
    v163 = *(_QWORD *)(a1 + 848);
    v164 = 0.0;
    v165 = 0.0;
    if (v163 >= 2)
    {
      v166 = (float)((float)v163 * *(float *)(a1 + 804)) - (float)(*(float *)(a1 + 800) * *(float *)(a1 + 800));
      v165 = 0.0;
      if (v166 >= 0.0)
        v165 = v166 / (float)((v163 - 1) * v163);
    }
    v167 = sqrtf(v165);
    *(float *)&v479 = v167;
    v168 = *(_QWORD *)(a1 + 920);
    if (v168 >= 2)
    {
      v169 = (float)((float)v168 * *(float *)(a1 + 876)) - (float)(*(float *)(a1 + 872) * *(float *)(a1 + 872));
      if (v169 >= 0.0)
        v164 = v169 / (float)((v168 - 1) * v168);
    }
    v170 = sqrtf(v164);
    *((float *)&v479 + 1) = v170;
    v171 = *(_QWORD *)(a1 + 992);
    v172 = 0.0;
    if (v171 >= 2)
    {
      v173 = (float)((float)v171 * *(float *)(a1 + 948)) - (float)(*(float *)(a1 + 944) * *(float *)(a1 + 944));
      if (v173 >= 0.0)
        v172 = v173 / (float)((v171 - 1) * v171);
    }
    v480 = sqrtf(v172);
    v174 = (float)(v167 + v170) + v480;
    if (v174 > 1000.0)
    {
LABEL_247:
      sub_18F42B3C4(a1, (float *)&v459);
      goto LABEL_466;
    }
    if (*(int *)(a1 + 20) < 3 || *(_BYTE *)(a1 + 24))
      v175 = 0.08;
    else
      v175 = 0.04;
    v176 = 0;
    v177 = 0;
    v178 = 0.0;
    do
    {
      v179 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
      v180 = *(float *)&v481.i32[v176];
      if (v180 <= 0.02)
        v181 = v179;
      else
        v181 = 0;
      if (v181 == 1 && *(float *)((char *)&v479 + v176 * 4) > 10.0)
        goto LABEL_247;
      if (v180 > v178)
        v178 = *(float *)&v481.i32[v176];
      if (v180 <= v175 && *(float *)((char *)&v479 + v176 * 4) <= 1.0)
      {
        *(_DWORD *)(a1 + v176 * 4 + 1596) = 1;
        ++v177;
      }
      ++v176;
    }
    while (v176 != 3);
    if (v161 <= 0.125
      && (v177 == 3
       || (v206 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1), v174 < 15.0)
       && v206 != 1
       && v178 <= 0.08))
    {
      *v155 = xmmword_18F5083F0;
      *(_DWORD *)(a1 + 320) = -1;
      v182 = v453;
      if (v161 <= 0.06)
        *(_DWORD *)v155 = 5;
    }
    else
    {
      v182 = v453;
      if (v174 <= 1.0 && v177 >= 1)
      {
        if (v161 <= 0.6)
        {
          *(_DWORD *)v155 = 3;
          if (v177 <= 1)
          {
            v232 = 0;
            v233 = -1;
            v234 = 9.0;
            do
            {
              if (!*(_DWORD *)(a1 + 1596 + 4 * v232) && *(float *)&v481.i32[v232] < v234)
              {
                v233 = v232;
                v234 = *(float *)&v481.i32[v232];
              }
              ++v232;
            }
            while (v232 != 3);
            *(_DWORD *)(a1 + 4 * v233 + 1596) = 1;
          }
        }
        else if (v177 >= 2)
        {
          *(_DWORD *)v155 = v177;
        }
        if (*(_DWORD *)(a1 + 1596))
        {
          *(_DWORD *)(a1 + 320) = 0;
        }
        else
        {
          if (*(_DWORD *)(a1 + 1600))
            v235 = 1;
          else
            v235 = 2;
          *(_DWORD *)(a1 + 320) = v235;
        }
      }
    }
    v467 = 0.0;
    if (*(_BYTE *)(a1 + 57))
    {
      v261 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
      v262 = *(_DWORD *)(a1 + 1592);
      v263 = *(_DWORD *)(a1 + 20);
      if (v262 >= v263)
        v264 = v261;
      else
        v264 = 0;
      if (v264 == 1)
      {
        v182 = v453;
        if (v262 <= v263)
        {
          v265 = *(float *)(a1 + 72) - *(double *)(a1 + 1472);
          v266 = *(float *)(a1 + 76) - *(double *)(a1 + 1480);
          v267 = *(float *)(a1 + 80) - *(double *)(a1 + 1488);
          v268 = (float)(fabsf(v265) + fabsf(v266)) + fabsf(v267);
          if (10.0 / (double)v263 >= v268)
          {
            if (v268 <= 1.0)
              goto LABEL_467;
            if (qword_1EE16D698 != -1)
              dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
            v343 = qword_1EE16D690;
            if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
            {
              v344 = *(_QWORD *)(a1 + 1472);
              v345 = *(_QWORD *)(a1 + 1480);
              v346 = *(_QWORD *)(a1 + 1488);
              v347 = *(_DWORD *)(a1 + 1608);
              *(_DWORD *)buf = 134218752;
              *(_QWORD *)&buf[4] = v344;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v345;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = v346;
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v347;
              _os_log_impl(&dword_18F1DC000, v343, OS_LOG_TYPE_DEBUG, "estimates improved.(%.3f/%.3f/%.3f), numImprov=%d ", buf, 0x26u);
            }
            if (sub_18F1FCA08(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE16D698 != -1)
                dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
              v436 = *(_QWORD *)(a1 + 1472);
              v437 = *(_QWORD *)(a1 + 1480);
              v438 = *(_QWORD *)(a1 + 1488);
              v439 = *(_DWORD *)(a1 + 1608);
              *(_DWORD *)v468 = 134218752;
              *(_QWORD *)&v468[4] = v436;
              *(_WORD *)&v468[12] = 2048;
              *(_QWORD *)&v468[14] = v437;
              *(_WORD *)&v468[22] = 2048;
              *(_QWORD *)&v468[24] = v438;
              *(_WORD *)&v468[32] = 1024;
              *(_DWORD *)&v468[34] = v439;
              v440 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v440);
              if (v440 != buf)
                free(v440);
            }
            v348 = *(double *)(a1 + 1472);
            *(float *)buf = v348;
            v349 = *(double *)(a1 + 1480);
            *(float *)v468 = v349;
            v350 = *(double *)(a1 + 1488);
            v476 = v350;
            sub_18F4294D4(a1 + 1232, (float *)buf, (float *)v468, &v476);
            v351 = 0;
            v352 = 0.0;
            do
            {
              v352 = v352 + (float)((float)*(unsigned int *)(a1 + v351 * 4 + 1596) * *(float *)&v481.i32[v351]);
              ++v351;
            }
            while (v351 != 3);
            v182 = v453;
            if (v352 >= 0.03 || (v353 = *(_DWORD *)(a1 + 1608) + 1, *(_DWORD *)(a1 + 1608) = v353, v353 < 2))
            {
              *(_BYTE *)(a1 + 244) = 1;
              goto LABEL_467;
            }
            if (qword_1EE16D698 != -1)
              dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
            v354 = qword_1EE16D690;
            if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
            {
              v355 = *(unsigned __int8 *)(a1 + 184);
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v355;
              _os_log_impl(&dword_18F1DC000, v354, OS_LOG_TYPE_DEBUG, "new estimates needed, fIsCoasting (%d)", buf, 8u);
            }
            if (sub_18F1FCA08(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE16D698 != -1)
                dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
              v442 = *(unsigned __int8 *)(a1 + 184);
              *(_DWORD *)v468 = 67109120;
              *(_DWORD *)&v468[4] = v442;
              v443 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v443);
              if (v443 != buf)
                free(v443);
            }
            sub_18F42951C((float64x2_t *)a1, (float *)&v459, v452, *(_DWORD *)(a1 + 1592));
            *(_DWORD *)(a1 + 1608) = 0;
LABEL_466:
            v182 = v453;
LABEL_467:
            if (*(_BYTE *)(a1 + 244))
            {
              v305 = *(_DWORD *)(a1 + 20);
              v306 = *(_DWORD *)(a1 + 1592);
              if (v305 >= 2)
              {
                if (v305 != v306)
                  goto LABEL_471;
                v307 = *(double *)(a1 + 1472);
                v308 = vabdd_f64(*(float *)(a1 + 520), v307);
                LODWORD(v307) = *(_DWORD *)(a1 + 1596);
                v309 = *(double *)(a1 + 1480);
                v310 = vabdd_f64(*(float *)(a1 + 524), v309);
                LODWORD(v309) = *(_DWORD *)(a1 + 1600);
                v311 = v310 * (double)*(unint64_t *)&v309 + v308 * (double)*(unint64_t *)&v307;
                v312 = *(double *)(a1 + 1488);
                v313 = vabdd_f64(*(float *)(a1 + 528), v312);
                LODWORD(v312) = *(_DWORD *)(a1 + 1604);
                *(float *)&v311 = v311 + v313 * (double)*(unint64_t *)&v312;
                v306 = *(_DWORD *)(a1 + 20);
                if (*(float *)&v311 > 2.5)
LABEL_471:
                  *(_BYTE *)(a1 + 25) = 1;
              }
              v314 = *(double *)(a1 + 1472);
              v315 = *(double *)(a1 + 1480);
              v316 = *(double *)(a1 + 1488);
              *(float *)(a1 + 72) = v314;
              *(float *)(a1 + 76) = v315;
              *(float *)(a1 + 80) = v316;
              v317 = *(double *)(a1 + 1512);
              *(float32x2_t *)(a1 + 96) = vcvt_f32_f64(*(float64x2_t *)(a1 + 1496));
              *(float *)(a1 + 104) = v317;
              v318 = *(double *)(a1 + 1536);
              *(float32x2_t *)(a1 + 120) = vcvt_f32_f64(*(float64x2_t *)(a1 + 1520));
              *(float *)(a1 + 128) = v318;
              *(_DWORD *)(a1 + 20) = v306;
              *(_QWORD *)(a1 + 168) = *(_QWORD *)(a1 + 1596);
              *(_DWORD *)(a1 + 176) = *(_DWORD *)(a1 + 1604);
              if (*(_BYTE *)(a1 + 25))
              {
                *(float *)(a1 + 520) = v314;
                *(float *)(a1 + 524) = v315;
                *(float *)(a1 + 528) = v316;
              }
              *(_BYTE *)(a1 + 24) = 0;
              *(_BYTE *)(a1 + 252) = 0;
              if (qword_1EE16D698 != -1)
                dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
              v319 = qword_1EE16D690;
              if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
              {
                v320 = *(_QWORD *)(a1 + 1472);
                v321 = *(_QWORD *)(a1 + 1480);
                v322 = *(_QWORD *)(a1 + 1488);
                v323 = *(_QWORD *)(a1 + 1496);
                v324 = *(_QWORD *)(a1 + 1504);
                v325 = *(_QWORD *)(a1 + 1512);
                v326 = *(_QWORD *)(a1 + 1520);
                v327 = *(double *)(a1 + 1528);
                v328 = *(double *)(a1 + 1536);
                *(_DWORD *)buf = 134220032;
                *(_QWORD *)&buf[4] = v320;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v321;
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&buf[24] = v322;
                *(_WORD *)&buf[32] = 2048;
                *(_QWORD *)&buf[34] = v323;
                *(_WORD *)&buf[42] = 2048;
                *(_QWORD *)&buf[44] = v324;
                *(_WORD *)&buf[52] = 2048;
                *(_QWORD *)&buf[54] = v325;
                *(_WORD *)&buf[62] = 2048;
                *(_QWORD *)&buf[64] = v326;
                *(_WORD *)&buf[72] = 2048;
                v484 = v327;
                v485 = 2048;
                v486 = v328;
                _os_log_impl(&dword_18F1DC000, v319, OS_LOG_TYPE_DEBUG, "bias.x,%.3f,bias.y,%.3f,bias.z,%.3f,scale.x,%.5f,scale.y,%.5f,scale.z,%.5f,extF.x,%.3f,extF.y,%.3f,extF.z,%.3f", buf, 0x5Cu);
              }
              if (sub_18F1FCA08(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE16D698 != -1)
                  dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
                v388 = *(_QWORD *)(a1 + 1472);
                v389 = *(_QWORD *)(a1 + 1480);
                v390 = *(_QWORD *)(a1 + 1488);
                v391 = *(_QWORD *)(a1 + 1496);
                v392 = *(_QWORD *)(a1 + 1504);
                v393 = *(_QWORD *)(a1 + 1512);
                v394 = *(_QWORD *)(a1 + 1520);
                v395 = *(double *)(a1 + 1528);
                v396 = *(double *)(a1 + 1536);
                *(_DWORD *)v468 = 134220032;
                *(_QWORD *)&v468[4] = v388;
                *(_WORD *)&v468[12] = 2048;
                *(_QWORD *)&v468[14] = v389;
                *(_WORD *)&v468[22] = 2048;
                *(_QWORD *)&v468[24] = v390;
                *(_WORD *)&v468[32] = 2048;
                *(_QWORD *)&v468[34] = v391;
                *(_WORD *)&v468[42] = 2048;
                *(_QWORD *)&v468[44] = v392;
                *(_WORD *)&v468[52] = 2048;
                *(_QWORD *)&v468[54] = v393;
                *(_WORD *)&v468[62] = 2048;
                *(_QWORD *)&v468[64] = v394;
                *(_WORD *)&v468[72] = 2048;
                v469 = v395;
                v470 = 2048;
                v471 = v396;
                v397 = (char *)_os_log_send_and_compose_impl();
                sub_18F419700("Generic", 1, 0, 2, "void CLAttitudeDependentKFCalibrator::setCalibrationValues()", "CoreLocation: %s\n", v397);
                if (v397 != buf)
                  free(v397);
              }
              sub_18F429180(a1, 0);
              *(_BYTE *)(a1 + 244) = 0;
              *(_BYTE *)(a1 + 220) = 0;
              v182 = v453;
            }
            *(_DWORD *)(a1 + 472) = 0;
            v329 = *((_OWORD *)a3 + 1);
            *(_OWORD *)(a1 + 416) = *(_OWORD *)a3;
            *(_OWORD *)(a1 + 432) = v329;
            *(float *)(a1 + 456) = v454;
            *(float *)(a1 + 460) = v182;
            *(float *)(a1 + 464) = v56;
            return;
          }
        }
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        v269 = qword_1EE16D690;
        if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
        {
          v270 = *(_QWORD *)(a1 + 1472);
          v271 = *(_QWORD *)(a1 + 1480);
          v272 = *(_QWORD *)(a1 + 1488);
          v273 = *(_DWORD *)(a1 + 1596);
          v274 = *(_DWORD *)(a1 + 1600);
          v275 = *(_DWORD *)(a1 + 1604);
          v276 = *(_DWORD *)(a1 + 1592);
          *(_DWORD *)buf = 134219776;
          *(_QWORD *)&buf[4] = v270;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v271;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v272;
          *(_WORD *)&buf[32] = 2048;
          *(double *)&buf[34] = v161;
          *(_WORD *)&buf[42] = 1024;
          *(_DWORD *)&buf[44] = v273;
          *(_WORD *)&buf[48] = 1024;
          *(_DWORD *)&buf[50] = v274;
          *(_WORD *)&buf[54] = 1024;
          *(_DWORD *)&buf[56] = v275;
          *(_WORD *)&buf[60] = 1024;
          *(_DWORD *)&buf[62] = v276;
          _os_log_impl(&dword_18F1DC000, v269, OS_LOG_TYPE_DEBUG, "calibrated, first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)", buf, 0x42u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D698 != -1)
            dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
          v412 = *(_QWORD *)(a1 + 1472);
          v413 = *(_QWORD *)(a1 + 1480);
          v414 = *(_QWORD *)(a1 + 1488);
          v415 = *(_DWORD *)(a1 + 1596);
          v416 = *(_DWORD *)(a1 + 1600);
          v417 = *(_DWORD *)(a1 + 1604);
          v418 = *(_DWORD *)(a1 + 1592);
          *(_DWORD *)v468 = 134219776;
          *(_QWORD *)&v468[4] = v412;
          *(_WORD *)&v468[12] = 2048;
          *(_QWORD *)&v468[14] = v413;
          *(_WORD *)&v468[22] = 2048;
          *(_QWORD *)&v468[24] = v414;
          *(_WORD *)&v468[32] = 2048;
          *(double *)&v468[34] = v161;
          *(_WORD *)&v468[42] = 1024;
          *(_DWORD *)&v468[44] = v415;
          *(_WORD *)&v468[48] = 1024;
          *(_DWORD *)&v468[50] = v416;
          *(_WORD *)&v468[54] = 1024;
          *(_DWORD *)&v468[56] = v417;
          *(_WORD *)&v468[60] = 1024;
          *(_DWORD *)&v468[62] = v418;
          v419 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v419);
          if (v419 != buf)
            free(v419);
        }
        v277 = *(double *)(a1 + 1472);
        *(float *)buf = v277;
        v278 = *(double *)(a1 + 1480);
        *(float *)v468 = v278;
        v279 = *(double *)(a1 + 1488);
        v476 = v279;
        sub_18F1FD65C(a1 + 1248, (float *)buf);
        sub_18F1FD65C(a1 + 1320, (float *)v468);
        sub_18F1FD65C(a1 + 1392, &v476);
        *(_QWORD *)v468 = *(_QWORD *)(a1 + 168);
        *(_DWORD *)&v468[8] = *(_DWORD *)(a1 + 176);
        if (!sub_18F42B5CC(a1, (unsigned int *)v468, *(_DWORD *)(a1 + 1592), &v467))
        {
          if (qword_1EE16D698 != -1)
            dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
          v301 = qword_1EE16D690;
          if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
          {
            v302 = *(unsigned __int8 *)(a1 + 184);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v302;
            _os_log_impl(&dword_18F1DC000, v301, OS_LOG_TYPE_DEBUG, "new estimates denied, fIsCoasting (%d)", buf, 8u);
          }
          if (sub_18F1FCA08(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE16D698 != -1)
              dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
            LODWORD(v431) = *(unsigned __int8 *)(a1 + 184);
            v476 = 1.5047e-36;
            v477 = v431;
            v432 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v432);
            if (v432 != buf)
              free(v432);
          }
          sub_18F42951C((float64x2_t *)a1, (float *)&v459, v452, *(_DWORD *)(a1 + 1592));
          goto LABEL_466;
        }
        if ((*(_DWORD *)(a1 + 172) + *(_DWORD *)(a1 + 168) + *(_DWORD *)(a1 + 176)) <= 2
          && (float)(*(float *)(a1 + 16) * 180.0) < (float)*(int *)(a1 + 236))
        {
          v280 = *(_DWORD *)(a1 + 1592);
          if (v280 >= 4 && v280 > *(_DWORD *)(a1 + 20))
          {
            sub_18F42951C((float64x2_t *)a1, (float *)&v459, v452, v280);
            goto LABEL_466;
          }
        }
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        v303 = qword_1EE16D690;
        if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
        {
          v304 = *(unsigned __int8 *)(a1 + 184);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v304;
          _os_log_impl(&dword_18F1DC000, v303, OS_LOG_TYPE_DEBUG, "taking new estimates, fIsCoasting (%d)", buf, 8u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D698 != -1)
            dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
          LODWORD(v434) = *(unsigned __int8 *)(a1 + 184);
          v476 = 1.5047e-36;
          v477 = v434;
          v435 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v435);
          if (v435 != buf)
            free(v435);
        }
      }
      else
      {
        v182 = v453;
        if (v262 <= v263)
          goto LABEL_467;
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        v290 = qword_1EE16D690;
        if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
        {
          v291 = *(_QWORD *)(a1 + 1472);
          v292 = *(_QWORD *)(a1 + 1480);
          v293 = *(_QWORD *)(a1 + 1488);
          v294 = *(_DWORD *)(a1 + 1596);
          v295 = *(_DWORD *)(a1 + 1600);
          v296 = *(_DWORD *)(a1 + 1604);
          v297 = *(_DWORD *)(a1 + 1592);
          *(_DWORD *)buf = 134219776;
          *(_QWORD *)&buf[4] = v291;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v292;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v293;
          *(_WORD *)&buf[32] = 2048;
          *(double *)&buf[34] = v161;
          *(_WORD *)&buf[42] = 1024;
          *(_DWORD *)&buf[44] = v294;
          *(_WORD *)&buf[48] = 1024;
          *(_DWORD *)&buf[50] = v295;
          *(_WORD *)&buf[54] = 1024;
          *(_DWORD *)&buf[56] = v296;
          *(_WORD *)&buf[60] = 1024;
          *(_DWORD *)&buf[62] = v297;
          _os_log_impl(&dword_18F1DC000, v290, OS_LOG_TYPE_DEBUG, "first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)", buf, 0x42u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D698 != -1)
            dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
          v423 = *(_QWORD *)(a1 + 1472);
          v424 = *(_QWORD *)(a1 + 1480);
          v425 = *(_QWORD *)(a1 + 1488);
          v426 = *(_DWORD *)(a1 + 1596);
          v427 = *(_DWORD *)(a1 + 1600);
          v428 = *(_DWORD *)(a1 + 1604);
          v429 = *(_DWORD *)(a1 + 1592);
          *(_DWORD *)v468 = 134219776;
          *(_QWORD *)&v468[4] = v423;
          *(_WORD *)&v468[12] = 2048;
          *(_QWORD *)&v468[14] = v424;
          *(_WORD *)&v468[22] = 2048;
          *(_QWORD *)&v468[24] = v425;
          *(_WORD *)&v468[32] = 2048;
          *(double *)&v468[34] = v161;
          *(_WORD *)&v468[42] = 1024;
          *(_DWORD *)&v468[44] = v426;
          *(_WORD *)&v468[48] = 1024;
          *(_DWORD *)&v468[50] = v427;
          *(_WORD *)&v468[54] = 1024;
          *(_DWORD *)&v468[56] = v428;
          *(_WORD *)&v468[60] = 1024;
          *(_DWORD *)&v468[62] = v429;
          v430 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v430);
          if (v430 != buf)
            free(v430);
        }
        sub_18F1E6174((_QWORD *)(a1 + 1248));
        sub_18F1E6174((_QWORD *)(a1 + 1320));
        sub_18F1E6174((_QWORD *)(a1 + 1392));
        v298 = *(double *)(a1 + 1472);
        *(float *)buf = v298;
        v299 = *(double *)(a1 + 1480);
        *(float *)v468 = v299;
        v300 = *(double *)(a1 + 1488);
        v476 = v300;
        sub_18F1FD65C(a1 + 1248, (float *)buf);
        sub_18F1FD65C(a1 + 1320, (float *)v468);
        sub_18F1FD65C(a1 + 1392, &v476);
      }
      *(_BYTE *)(a1 + 244) = 1;
      goto LABEL_466;
    }
    if (!*(_BYTE *)(a1 + 333) || *(_DWORD *)(a1 + 1592) < *(_DWORD *)(a1 + 1464))
    {
      if (!*(_BYTE *)(a1 + 24)
        || (v281 = *(_DWORD *)(a1 + 1592), v281 < *(_DWORD *)(a1 + 20)) && (v177 < 2 || v281 <= 2))
      {
        if (!*(_BYTE *)(a1 + 184))
          goto LABEL_467;
        v282 = roundf(*(float *)(a1 + 16) * 20.0) >= (float)*(int *)(a1 + 232) || v177 < 2;
        if (v282 || *(int *)v155 < 3)
          goto LABEL_467;
      }
    }
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v283 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
    {
      v284 = *(_QWORD *)(a1 + 1472);
      v285 = *(_QWORD *)(a1 + 1480);
      v286 = *(_QWORD *)(a1 + 1488);
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = v284;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v285;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v286;
      _os_log_impl(&dword_18F1DC000, v283, OS_LOG_TYPE_DEBUG, "new internal estimates (%.3f %.3f %.3f)", buf, 0x20u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v407 = *(_QWORD *)(a1 + 1472);
      v408 = *(_QWORD *)(a1 + 1480);
      v409 = *(_QWORD *)(a1 + 1488);
      *(_DWORD *)v468 = 134218496;
      *(_QWORD *)&v468[4] = v407;
      *(_WORD *)&v468[12] = 2048;
      *(_QWORD *)&v468[14] = v408;
      *(_WORD *)&v468[22] = 2048;
      *(_QWORD *)&v468[24] = v409;
      v410 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v410);
      if (v410 != buf)
        free(v410);
    }
    *(_BYTE *)(a1 + 57) = 1;
    if (!*(_BYTE *)(a1 + 333))
    {
      v330 = *(double *)(a1 + 1472);
      *(float *)buf = v330;
      v331 = *(double *)(a1 + 1480);
      *(float *)v468 = v331;
      v332 = *(double *)(a1 + 1488);
      v476 = v332;
      sub_18F1FD65C(a1 + 1248, (float *)buf);
      sub_18F1FD65C(a1 + 1320, (float *)v468);
      sub_18F1FD65C(a1 + 1392, &v476);
      v333 = sub_18F42B5CC(a1, (unsigned int *)(a1 + 1596), *(_DWORD *)(a1 + 1592), &v467);
      v334 = *(_DWORD *)(a1 + 1592);
      if (v333)
      {
        if (v334 == 3 && *(int *)(a1 + 20) >= 4)
        {
          sub_18F4294D4(a1 + 1232, (float *)(a1 + 72), (float *)(a1 + 76), (float *)(a1 + 80));
          goto LABEL_466;
        }
        sub_18F42B350(a1);
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        v366 = qword_1EE16D690;
        if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
        {
          v367 = *(_DWORD *)v155;
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v367;
          _os_log_impl(&dword_18F1DC000, v366, OS_LOG_TYPE_DEBUG, "taking new estimates, reached database. (%d)", buf, 8u);
        }
        v368 = sub_18F1FCA08(115, 2);
        v182 = v453;
        if (!v368)
          goto LABEL_467;
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        v369 = *(_DWORD *)v155;
        *(_DWORD *)v468 = 67109120;
        *(_DWORD *)&v468[4] = v369;
        v342 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v342);
      }
      else
      {
        sub_18F42951C((float64x2_t *)a1, (float *)&v459, v452, v334);
        v356 = v467;
        if (v467 > 25.0 && !*(_BYTE *)(a1 + 184))
          *(_BYTE *)(a1 + 252) = 1;
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        v357 = qword_1EE16D690;
        if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
        {
          v358 = *(_DWORD *)(a1 + 1592);
          v359 = *(unsigned __int8 *)(a1 + 252);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&buf[4] = v358;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v359;
          *(_WORD *)&buf[14] = 2048;
          *(double *)&buf[16] = v356;
          _os_log_impl(&dword_18F1DC000, v357, OS_LOG_TYPE_DEBUG, "new esitmates disagree with database. (%d,%d,%.3f)", buf, 0x18u);
        }
        v360 = sub_18F1FCA08(115, 2);
        v182 = v453;
        if (!v360)
          goto LABEL_467;
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D698 != -1)
          dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
        v361 = *(_DWORD *)(a1 + 1592);
        v362 = *(unsigned __int8 *)(a1 + 252);
        *(_DWORD *)v468 = 67109632;
        *(_DWORD *)&v468[4] = v361;
        *(_WORD *)&v468[8] = 1024;
        *(_DWORD *)&v468[10] = v362;
        *(_WORD *)&v468[14] = 2048;
        *(double *)&v468[16] = v356;
        v342 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v342);
      }
LABEL_536:
      if (v342 != buf)
        free(v342);
      goto LABEL_466;
    }
    v287 = *(double *)(a1 + 1472);
    *(float *)buf = v287;
    v288 = *(double *)(a1 + 1480);
    *(float *)v468 = v288;
    v289 = *(double *)(a1 + 1488);
    v476 = v289;
    sub_18F1FD65C(a1 + 1248, (float *)buf);
    sub_18F1FD65C(a1 + 1320, (float *)v468);
    sub_18F1FD65C(a1 + 1392, &v476);
    if (*(_QWORD *)(a1 + 1312) < *(_QWORD *)(a1 + 1256))
    {
      sub_18F42951C((float64x2_t *)a1, (float *)&v459, v452, *(_DWORD *)(a1 + 1464));
      goto LABEL_466;
    }
    if (sub_18F42B5CC(a1, (unsigned int *)(a1 + 1596), *(_DWORD *)(a1 + 1464), &v467))
    {
      sub_18F42B350(a1);
      v335 = *(double *)(a1 + 1472);
      v336 = *(double *)(a1 + 1480);
      v337 = *(double *)(a1 + 1488);
      sub_18F42B974(a1, v335, v336, v337);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v338 = qword_1EE16D690;
      if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
      {
        v339 = *(unsigned __int8 *)(a1 + 184);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v339;
        _os_log_impl(&dword_18F1DC000, v338, OS_LOG_TYPE_DEBUG, "taking new estimates, Internal. fIsCoasting (%d)", buf, 8u);
      }
      v340 = sub_18F1FCA08(115, 2);
      v182 = v453;
      if (!v340)
        goto LABEL_467;
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 == -1)
        goto LABEL_493;
    }
    else
    {
      sub_18F42951C((float64x2_t *)a1, (float *)&v459, v452, *(_DWORD *)(a1 + 1592));
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      v363 = qword_1EE16D690;
      if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
      {
        v364 = *(unsigned __int8 *)(a1 + 184);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v364;
        _os_log_impl(&dword_18F1DC000, v363, OS_LOG_TYPE_DEBUG, "new estimates denied, fIsCoasting (%d)", buf, 8u);
      }
      v365 = sub_18F1FCA08(115, 2);
      v182 = v453;
      if (!v365)
        goto LABEL_467;
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 == -1)
        goto LABEL_493;
    }
    dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
LABEL_493:
    v341 = *(unsigned __int8 *)(a1 + 184);
    *(_DWORD *)v468 = 67109120;
    *(_DWORD *)&v468[4] = v341;
    v342 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)", "CoreLocation: %s\n", v342);
    goto LABEL_536;
  }
  HIDWORD(v89) = -858993459 * *(_DWORD *)(a1 + 324) + 429496728;
  LODWORD(v89) = HIDWORD(v89);
  if ((v89 >> 2) <= 0xCCCCCCC)
  {
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
    v90 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v90, OS_LOG_TYPE_DEBUG, "coasting vector is mature, no more updating", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E29538A8);
      *(_WORD *)v468 = 0;
      v17 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)", "CoreLocation: %s\n", v17);
      goto LABEL_332;
    }
  }
}

float32_t sub_18F431150(float32x2_t *a1, float32x2_t *a2)
{
  float32_t result;
  float32_t v5;
  float32x2_t v11;

  if ((*(unsigned int (**)(float32x2_t *))(*(_QWORD *)a1 + 72))(a1))
  {
    v5 = (a1[13].f32[0] + 1.0) * a2[2].f32[0];
    a2[2].f32[0] = v5;
    result = v5 - a1[10].f32[0];
    __asm { FMOV            V2.2D, #1.0 }
    v11 = vcvt_f32_f64(vmulq_f64(vaddq_f64(vcvtq_f64_f32(a1[12]), _Q2), vcvtq_f64_f32(a2[1])));
    a2[1] = v11;
    a2[1] = vsub_f32(v11, a1[9]);
    a2[2].f32[0] = result;
  }
  return result;
}

float32_t sub_18F4311E0(float32x2_t *a1, float *a2, float32x2_t *a3, double *a4)
{
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;

  sub_18F4290E0(a1 + 42, a4);
  v7 = a1[48].f32[0];
  v8 = a1[47].f32[0];
  v9 = a1[47].f32[1];
  v10 = 51;
  if (!a1[23].i8[0])
    v10 = 31;
  v11 = 25;
  if (!a1[23].i8[0])
    v11 = 15;
  v12 = 26;
  if (!a1[23].i8[0])
    v12 = 16;
  v13 = a1[v12].f32[0];
  v14 = a1[v11].f32[0];
  v15 = a1->f32[v10];
  v16 = (float)((float)(a1[50].f32[1] * v15) + (float)(v14 * a1[50].f32[0])) + (float)(v13 * a1[51].f32[0]);
  a2[2] = (float)((float)(a1[44].f32[1] * v15) + (float)(v14 * a1[44].f32[0])) + (float)(v13 * a1[45].f32[0]);
  a2[3] = (float)((float)(v9 * v15) + (float)(v14 * v8)) + (float)(v13 * v7);
  a2[4] = v16;
  return sub_18F431150(a1, a3);
}

float32_t sub_18F4312A8(float32x2_t *a1, float32x2_t *a2, double *a3)
{
  float v5;
  float v6;
  float v7;
  float32_t v8;
  float32_t v9;
  float32_t result;

  if (!a1[23].i8[0])
    return sub_18F431150(a1, a2);
  sub_18F4290E0(a1 + 42, a3);
  v6 = a1[25].f32[1];
  v5 = a1[26].f32[0];
  v7 = a1[25].f32[0];
  v8 = (float)((float)(v6 * a1[50].f32[1]) + (float)(v7 * a1[50].f32[0])) + (float)(v5 * a1[51].f32[0]);
  v9 = (float)((float)(v6 * a1[47].f32[1]) + (float)(v7 * a1[47].f32[0])) + (float)(v5 * a1[48].f32[0]);
  result = (float)((float)(v6 * a1[44].f32[1]) + (float)(v7 * a1[44].f32[0])) + (float)(v5 * a1[45].f32[0]);
  a2[1].f32[0] = result;
  a2[1].f32[1] = v9;
  a2[2].f32[0] = v8;
  return result;
}

float sub_18F431348(uint64_t a1, _QWORD *a2)
{
  float result;

  *(_QWORD *)(a1 + 8) = *a2;
  result = 1.0 / *(double *)a2;
  *(float *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 23) = 0;
  return result;
}

float sub_18F43137C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  float result;

  *(_QWORD *)a2 = *(_QWORD *)(a1 + 72);
  result = *(float *)(a1 + 80);
  *(float *)(a2 + 8) = result;
  *a3 = *(_DWORD *)(a1 + 20);
  return result;
}

BOOL sub_18F431398(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) > 0;
}

BOOL sub_18F4313A8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) > 3;
}

uint64_t sub_18F4313B8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 25);
}

uint64_t sub_18F4313C0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_18F4313C8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 332);
}

uint64_t sub_18F4313D0()
{
  return 5;
}

uint64_t sub_18F4313D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 59);
}

void sub_18F4313E0()
{
  JUMPOUT(0x194001438);
}

void sub_18F4313F4()
{
  JUMPOUT(0x194001438);
}

void sub_18F431408()
{
  JUMPOUT(0x194001438);
}

void sub_18F43141C(int a1, uint64_t a2)
{
  NSObject *v3;
  char *v4;
  unsigned int *v6;
  NSObject *v7;
  const __CFString *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint8_t buf[4];
  const __CFString *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v3 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67174657;
      LODWORD(v15) = a1;
      _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Received unsupported event %{private}d from AudioAccessoryInterface", buf, 8u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
      v4 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CLAccessoryDeviceMotion::onAudioAccessoryInterfaceCallback(CLAudioAccessoryInterface::Event)", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  else
  {
    *(_DWORD *)(a2 + 284) = sub_18F4A2BCC();
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v6 = (unsigned int *)(a2 + 284);
    v7 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
    {
      v8 = sub_18F4A2B2C(*v6);
      *(_DWORD *)buf = 138543362;
      v15 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Received InEar status update from AudioAccessoryInterface - %{public}@", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
      sub_18F4A2B2C(*v6);
      v13 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::onAudioAccessoryInterfaceCallback(CLAudioAccessoryInterface::Event)", "CoreLocation: %s\n", v13);
      if (v13 != (char *)buf)
        free(v13);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
    v9 = *(_DWORD *)(a2 + 284);
    if (v9 == 4 || v9 == 2)
    {
      v10 = a2 + 96;
      v11 = 4;
    }
    else
    {
      v10 = a2 + 96;
      v11 = 5;
    }
    sub_18F4E7CF0(v10, v11, (uint64_t)buf);
    v12 = mach_absolute_time();
    sub_18F1FD20C(v12);
    sub_18F1FD2C8(a2, 3, a2 + 284, 4);
    if (!*(_DWORD *)(a2 + 48))
      *(_BYTE *)(a2 + 30) = 0;
  }
}

uint64_t sub_18F4317A8()
{
  if (qword_1ECEDF990 != -1)
    dispatch_once(&qword_1ECEDF990, &unk_1E29538C8);
  return qword_1ECEDF988;
}

_QWORD *sub_18F4317E8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = operator new();
  sub_18F1E61EC(v0, (uint64_t)"CLAccessoryDeviceMotion", 4);
  *(_WORD *)(v0 + 28) = 256;
  *(_BYTE *)(v0 + 30) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 56) = 0x110000FF0CLL;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = &unk_1E2945380;
  *(_QWORD *)(v0 + 104) = 13;
  *(_WORD *)(v0 + 112) = 512;
  *(_QWORD *)v0 = &off_1E294AED8;
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = 0x3F80000000000000;
  *(_WORD *)(v0 + 172) = 0;
  *(_DWORD *)(v0 + 264) = 0;
  *(_QWORD *)(v0 + 272) = 0;
  *(_QWORD *)(v0 + 280) = 0x100000002;
  *(_BYTE *)(v0 + 288) = 1;
  *(_QWORD *)(v0 + 360) = 0;
  *(_DWORD *)(v0 + 368) = 0;
  *(_QWORD *)(v0 + 376) = 0;
  *(_DWORD *)(v0 + 384) = 0;
  *(_QWORD *)(v0 + 480) = 0x3FF0000000000000;
  *(_QWORD *)(v0 + 488) = 0;
  qword_1ECEDF988 = v0;
  v1 = sub_18F4D6638();
  return sub_18F4D9864(v1, (uint64_t (*)(_QWORD, uint64_t))sub_18F43141C, qword_1ECEDF988);
}

void sub_18F4318D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x10F1C40A0B8E96ALL);
  _Unwind_Resume(a1);
}

void sub_18F4318F8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  unint64_t v4;
  const __CFString *v5;
  uint64_t v6;
  char *v7;
  _BYTE buf[24];
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1)
    v1 = a1 - 96;
  else
    v1 = 0;
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
  v2 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(v1 + 272);
    v4 = *(char *)(v1 + 112);
    if (v4 > 3)
      v5 = CFSTR("?");
    else
      v5 = off_1E29576C8[v4];
    *(_DWORD *)buf = 134349314;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v5;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Setting update interval to %{public}f. State=%{public}@", buf, 0x16u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::enable(const T *) [T = CLAccessoryDeviceMotion::ETempestMode]", "CoreLocation: %s\n", v7);
    if (v7 != buf)
      free(v7);
  }
  v6 = sub_18F204AE4();
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = sub_18F436828;
  v9 = &unk_1E2955738;
  v10 = v1;
  sub_18F1F5E28(v6, (uint64_t)buf);
}

BOOL sub_18F431B4C(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = a1 - 96;
  if (!a1)
    v1 = 0;
  if (!*(_BYTE *)(v1 + 288))
    return 1;
  v2 = *(_DWORD *)(v1 + 284);
  return v2 == 2 || v2 == 4;
}

void sub_18F431B7C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  unint64_t v4;
  const __CFString *v5;
  uint64_t v6;
  char *v7;
  _BYTE buf[24];
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1)
    v1 = a1 - 96;
  else
    v1 = 0;
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
  v2 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(v1 + 272);
    v4 = *(char *)(v1 + 112);
    if (v4 > 3)
      v5 = CFSTR("?");
    else
      v5 = off_1E29576C8[v4];
    *(_DWORD *)buf = 134349314;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v5;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Setting update interval to %{public}f. State=%{public}@", buf, 0x16u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::enable(const T *) [T = CLAccessoryDeviceMotion::EMotionAPIMode]", "CoreLocation: %s\n", v7);
    if (v7 != buf)
      free(v7);
  }
  v6 = sub_18F204AE4();
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = sub_18F436854;
  v9 = &unk_1E2955738;
  v10 = v1;
  sub_18F1F5E28(v6, (uint64_t)buf);
}

BOOL sub_18F431DD0(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = a1 - 96;
  if (!a1)
    v1 = 0;
  if (!*(_BYTE *)(v1 + 288))
    return 0;
  v2 = *(_DWORD *)(v1 + 284);
  return v2 != 2 && v2 != 4;
}

void sub_18F431E04(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  unint64_t v3;
  const __CFString *v4;
  uint64_t v5;
  char *v6;
  __int128 buf;
  uint64_t (*v8)(uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1)
    v1 = a1 - 96;
  else
    v1 = 0;
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
  v2 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(char *)(v1 + 112);
    if (v3 > 3)
      v4 = CFSTR("?");
    else
      v4 = off_1E29576C8[v3];
    LODWORD(buf) = 138543362;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Setting update interval to 0.0. State=%{public}@", (uint8_t *)&buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::disable(const T *) [T = CLAccessoryDeviceMotion::EDisable]", "CoreLocation: %s\n", v6);
    if (v6 != (char *)&buf)
      free(v6);
  }
  v5 = sub_18F204AE4();
  *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
  *((_QWORD *)&buf + 1) = 3221225472;
  v8 = sub_18F436880;
  v9 = &unk_1E2955738;
  v10 = v1;
  sub_18F1F5E28(v5, (uint64_t)&buf);
}

void sub_18F432038(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  unint64_t v3;
  const __CFString *v4;
  uint64_t v5;
  char *v6;
  __int128 buf;
  uint64_t (*v8)(uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1)
    v1 = a1 - 96;
  else
    v1 = 0;
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
  v2 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(char *)(v1 + 112);
    if (v3 > 3)
      v4 = CFSTR("?");
    else
      v4 = off_1E29576C8[v3];
    LODWORD(buf) = 138543362;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Setting update interval to 0.0. State=%{public}@", (uint8_t *)&buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::disable(const T *) [T = CLAccessoryDeviceMotion::EMotionAPIMode]", "CoreLocation: %s\n", v6);
    if (v6 != (char *)&buf)
      free(v6);
  }
  v5 = sub_18F204AE4();
  *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
  *((_QWORD *)&buf + 1) = 3221225472;
  v8 = sub_18F436898;
  v9 = &unk_1E2955738;
  v10 = v1;
  sub_18F1F5E28(v5, (uint64_t)&buf);
}

void sub_18F43226C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  unint64_t v4;
  const __CFString *v5;
  uint64_t v6;
  char *v7;
  _BYTE buf[24];
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1)
    v1 = a1 - 96;
  else
    v1 = 0;
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
  v2 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(v1 + 272);
    v4 = *(char *)(v1 + 112);
    if (v4 > 3)
      v5 = CFSTR("?");
    else
      v5 = off_1E29576C8[v4];
    *(_DWORD *)buf = 134349314;
    *(_QWORD *)&buf[4] = v3;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v5;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Setting update interval to %{public}f. State=%{public}@", buf, 0x16u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::enable(const T *) [T = CLAccessoryDeviceMotion::EInEar]", "CoreLocation: %s\n", v7);
    if (v7 != buf)
      free(v7);
  }
  v6 = sub_18F204AE4();
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = sub_18F4368B0;
  v9 = &unk_1E2955738;
  v10 = v1;
  sub_18F1F5E28(v6, (uint64_t)buf);
}

BOOL sub_18F4324C0(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = a1 - 96;
  if (!a1)
    v1 = 0;
  if (!*(_BYTE *)(v1 + 288))
    return 0;
  v2 = *(_DWORD *)(v1 + 284);
  return v2 != 2 && v2 != 4;
}

void sub_18F4324F0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  unint64_t v3;
  const __CFString *v4;
  uint64_t v5;
  char *v6;
  __int128 buf;
  uint64_t (*v8)(uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1)
    v1 = a1 - 96;
  else
    v1 = 0;
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
  v2 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(char *)(v1 + 112);
    if (v3 > 3)
      v4 = CFSTR("?");
    else
      v4 = off_1E29576C8[v3];
    LODWORD(buf) = 138543362;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Setting update interval to 0.0. State=%{public}@", (uint8_t *)&buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::disable(const T *) [T = CLAccessoryDeviceMotion::EOutOfEar]", "CoreLocation: %s\n", v6);
    if (v6 != (char *)&buf)
      free(v6);
  }
  v5 = sub_18F204AE4();
  *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
  *((_QWORD *)&buf + 1) = 3221225472;
  v8 = sub_18F4368DC;
  v9 = &unk_1E2955738;
  v10 = v1;
  sub_18F1F5E28(v5, (uint64_t)&buf);
}

void sub_18F432728(_QWORD *a1)
{
  sub_18F4A2ABC(a1);
  JUMPOUT(0x194001438);
}

double sub_18F43274C(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  char *v6;
  double v9;
  double v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  int v16;
  const char *v17;
  double v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  const char *v22;
  const char *v23;
  NSObject *v24;
  const char *v26;
  int v27;
  char *v28;
  char *v29;
  char *v30;
  char v31;
  int v32;
  const char *v33;
  __int16 v34;
  int v35;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    sub_18F4A461C(a1);
    v9 = *a3;
    *(double *)(a1 + 272) = *a3;
    if (v9 <= 0.00001)
    {
      if (*(_BYTE *)(a1 + 29))
        (*(void (**)(_QWORD, const __CFString *, void *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), CFSTR("MaxFIFOEvents"), &unk_1E298C428);
      v13 = sub_18F4D6638();
      sub_18F4D8170(v13, a1);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
      v14 = qword_1ECEDEE30;
      if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v14, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Low latency mode and time sync reset", buf, 2u);
      }
      if (!sub_18F1FCA08(115, 2))
      {
LABEL_38:
        v18 = *(double *)(a1 + 272);
        v19 = a1 + 96;
        if (v18 < 0.00001)
        {
          sub_18F4E7CF0(v19, 3, (uint64_t)&v31);
          if (qword_1ECEDEE38 != -1)
            dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
          v20 = qword_1ECEDEE30;
          if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Disabling", buf, 2u);
          }
          if (sub_18F1FCA08(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1ECEDEE38 != -1)
              dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
            LOWORD(v32) = 0;
            v29 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v29);
            if (v29 != (char *)buf)
              free(v29);
          }
          sub_18F433024(a1 + 296);
          return *(double *)(a1 + 272);
        }
        if (v18 <= 0.0200100001)
        {
          sub_18F4E7CF0(v19, 1, (uint64_t)&v31);
          if (qword_1ECEDEE38 != -1)
            dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
          v24 = qword_1ECEDEE30;
          if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F1DC000, v24, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Entering Tempest Mode", buf, 2u);
          }
          if (!sub_18F1FCA08(115, 2))
            goto LABEL_59;
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE38 != -1)
            dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
          LOWORD(v32) = 0;
        }
        else
        {
          sub_18F4E7CF0(v19, 2, (uint64_t)&v31);
          if (qword_1ECEDEE38 != -1)
            dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
          v21 = qword_1ECEDEE30;
          if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
          {
            v22 = *(const char **)(a1 + 272);
            *(_DWORD *)buf = 134349056;
            v37 = v22;
            _os_log_impl(&dword_18F1DC000, v21, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Entering Motion API mode with rate: %{public}f", buf, 0xCu);
          }
          if (!sub_18F1FCA08(115, 2))
            goto LABEL_59;
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE38 != -1)
            dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
          v23 = *(const char **)(a1 + 272);
          v32 = 134349056;
          v33 = v23;
        }
        v30 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v30);
        if (v30 != (char *)buf)
          free(v30);
LABEL_59:
        sub_18F433170(a1 + 296, *(_DWORD *)(a1 + 52), *(double *)(a1 + 272));
        return *(double *)(a1 + 272);
      }
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
      LOWORD(v32) = 0;
LABEL_68:
      v28 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v28);
      if (v28 != (char *)buf)
        free(v28);
      goto LABEL_38;
    }
    *(_BYTE *)(a1 + 30) = 0;
    *(_DWORD *)(a1 + 220) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_DWORD *)(a1 + 228) = 0;
    if (*(_BYTE *)(a1 + 28))
    {
      if (*(_BYTE *)(a1 + 29))
      {
        (*(void (**)(_QWORD, const __CFString *, void *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), CFSTR("MaxFIFOEvents"), &unk_1E298C410);
        v10 = *(double *)(a1 + 272);
        v11 = sub_18F4D6638();
        if (v10 <= 0.0200100001)
        {
          sub_18F4D8088(v11, a1, 1);
          v12 = 2;
LABEL_30:
          *(_DWORD *)(a1 + 264) = v12;
          if (qword_1ECEDEE38 != -1)
            dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
          v15 = qword_1ECEDEE30;
          if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
          {
            v16 = *(_DWORD *)(a1 + 264);
            if (*(_BYTE *)(a1 + 28))
              v17 = "YES";
            else
              v17 = "NO";
            *(_DWORD *)buf = 136446466;
            v37 = v17;
            v38 = 1026;
            v39 = v16;
            _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Low latency mode: %{public}s. TimeSync type: %{public}d", buf, 0x12u);
          }
          if (!sub_18F1FCA08(115, 2))
            goto LABEL_38;
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE38 != -1)
            dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
          if (*(_BYTE *)(a1 + 28))
            v26 = "YES";
          else
            v26 = "NO";
          v27 = *(_DWORD *)(a1 + 264);
          v32 = 136446466;
          v33 = v26;
          v34 = 1026;
          v35 = v27;
          goto LABEL_68;
        }
LABEL_29:
        sub_18F4D8088(v11, a1, 0);
        v12 = 1;
        goto LABEL_30;
      }
    }
    else if (*(_BYTE *)(a1 + 29))
    {
      (*(void (**)(_QWORD, const __CFString *, void *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), CFSTR("MaxFIFOEvents"), &unk_1E298C428);
    }
    v11 = sub_18F4D6638();
    goto LABEL_29;
  }
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
  v4 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v37) = a2;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "[AccessoryDeviceMotion] Unrecognized interval notification %{public}d", buf, 8u);
  }
  v5 = 0.0;
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v32 = 67240192;
    LODWORD(v33) = a2;
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  return v5;
}

void sub_18F433024(uint64_t a1)
{
  __CFRunLoopTimer *v2;
  uint64_t v3;
  double v4;
  uint64_t v6;

  sub_18F4360A8(a1);
  v2 = *(__CFRunLoopTimer **)(a1 + 192);
  if (v2)
  {
    CFRunLoopTimerInvalidate(v2);
    CFRelease(*(CFTypeRef *)(a1 + 192));
    *(_QWORD *)(a1 + 192) = 0;
  }
  v3 = mach_absolute_time();
  v4 = sub_18F1FD20C(v3);
  if (*(double *)(a1 + 80) >= 0.00001 && v4 - *(double *)a1 >= 5.0)
  {
    v6 = 64;
    if (!*(_BYTE *)(a1 + 92))
      v6 = 68;
    sub_18F4A2B04(*(_DWORD *)(a1 + v6));
    AnalyticsSendEventLazy();
  }
  *(_QWORD *)(a1 + 80) = 0;
}

void sub_18F433170(uint64_t a1, int a2, double a3)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  CFRunLoopTimerRef v9;
  CFAbsoluteTime Current;
  CFRunLoopTimerContext context;

  v6 = *(double *)(a1 + 80);
  if (v6 != a3 && v6 > 0.00001)
    sub_18F433024(a1);
  *(double *)(a1 + 80) = a3;
  v7 = mach_absolute_time();
  *(double *)a1 = sub_18F1FD20C(v7);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = a2;
  *(_WORD *)(a1 + 94) = 0;
  if (qword_1ECEDF990 != -1)
    dispatch_once(&qword_1ECEDF990, &unk_1E29538C8);
  *(_BYTE *)(a1 + 92) = !sub_18F4A2BA0(qword_1ECEDF988);
  if (qword_1ECEDF990 != -1)
    dispatch_once(&qword_1ECEDF990, &unk_1E29538C8);
  *(_BYTE *)(a1 + 93) = sub_18F4A2BCC() == 4;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 124) = 0;
  *(_QWORD *)(a1 + 116) = 0;
  *(_OWORD *)(a1 + 152) = xmmword_18F5084B0;
  *(_QWORD *)(a1 + 168) = 0;
  context.version = 0;
  context.info = (void *)a1;
  memset(&context.retain, 0, 24);
  v9 = CFRunLoopTimerCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1.79769313e308, 1.79769313e308, 0, 0, (CFRunLoopTimerCallBack)sub_18F436034, &context);
  *(_QWORD *)(a1 + 192) = v9;
  if (v9)
  {
    sub_18F204AE4();
    CFRunLoopAddTimer(*(CFRunLoopRef *)qword_1ECEDFE08, *(CFRunLoopTimerRef *)(a1 + 192), (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  }
  *(_QWORD *)(a1 + 184) = 0x3FF0000000000000;
  Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a1 + 176) = Current;
  CFRunLoopTimerSetNextFireDate(*(CFRunLoopTimerRef *)(a1 + 192), Current + *(double *)(a1 + 184));
}

BOOL sub_18F433328(_BOOL8 result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = result;
    sub_18F4A461C(result);
    result = sub_18F4A2BA0(v3);
    *(_DWORD *)(v3 + 280) = result;
  }
  return result;
}

uint64_t sub_18F433358(uint64_t a1)
{
  _BOOL4 v2;
  int v3;
  uint64_t result;
  int *v5;
  NSObject *v6;
  const __CFString *v7;
  uint64_t v8;
  char *v9;
  uint8_t buf[4];
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = sub_18F4A2BA0(a1);
  v3 = *(_DWORD *)(a1 + 280);
  result = sub_18F4A2BA0(a1);
  if (v3 != (_DWORD)result)
  {
    v5 = (int *)(a1 + 280);
    *(_DWORD *)(a1 + 280) = v2;
    if (v2 <= 1)
    {
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
      v6 = qword_1ECEDEE30;
      if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
      {
        v7 = sub_18F4A2B50(*v5);
        *(_DWORD *)buf = 138543362;
        v11 = v7;
        _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] sending accessory status to clients: %{public}@", buf, 0xCu);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE38 != -1)
          dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
        sub_18F4A2B50(*v5);
        v9 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual void CLAccessoryDeviceMotion::sendAccessoryStatus()", "CoreLocation: %s\n", v9);
        if (v9 != (char *)buf)
          free(v9);
      }
      v8 = mach_absolute_time();
      sub_18F1FD20C(v8);
      return sub_18F1FD2C8(a1, 2, a1 + 280, 4);
    }
  }
  return result;
}

_QWORD *sub_18F433560()
{
  _QWORD *result;

  dword_1ECEDFAC0 = 0;
  sub_18F270374(&xmmword_1ECEDFAC8, "N/A");
  result = sub_18F270374(&xmmword_1ECEDFAE0, "N/A");
  qword_1ECEDFAF8 = 0;
  unk_1ECEDFB00 = 0;
  dword_1ECEDFB08 = 1065353216;
  *(_QWORD *)&xmmword_1ECEDFB10 = 0;
  *((_QWORD *)&xmmword_1ECEDFB10 + 1) = 0x3F80000000000000;
  return result;
}

void sub_18F4335C0(_Unwind_Exception *exception_object)
{
  if (byte_1ECEDFADF < 0)
    operator delete((void *)xmmword_1ECEDFAC8);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F4335E4(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_18F433624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *DataValue;
  uint64_t IntegerValue;
  BOOL v8;
  uint64_t v9;
  unint64_t TimeStamp;
  const __CFArray *v11;
  const char *v12;
  float32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  double v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  char v55;
  unsigned __int8 v56;
  NSObject *v57;
  NSObject *v58;
  char *v59;
  int v60;
  float v61;
  float v62;
  unsigned int v63;
  int v64;
  __int16 v65;
  int v66;
  BOOL v68;
  int v69;
  double v70;
  double v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  double v75;
  double v76;
  NSObject *v77;
  int v78;
  uint64_t v79;
  NSObject *v80;
  int v81;
  uint64_t v82;
  NSObject *v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  char *v88;
  NSObject *v89;
  int v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  NSObject *v96;
  NSObject *v97;
  unsigned __int8 v98;
  char v99;
  __IOHIDServiceClient *v100;
  NSObject *v101;
  float32x4_t v102;
  char *v103;
  NSObject *v104;
  NSObject *v105;
  unsigned __int8 v106;
  NSObject *v107;
  char *v108;
  int v109;
  int v110;
  unsigned __int8 v111;
  unsigned __int8 v112;
  unsigned __int8 v113;
  unsigned __int8 v114;
  unsigned __int8 v115;
  unsigned __int8 v116;
  unsigned __int8 v117;
  unsigned __int8 v118;
  unsigned __int8 v119;
  unsigned __int8 v120;
  unsigned __int8 v121;
  __int128 *v122;
  int v123;
  int v124;
  NSObject *v125;
  const __CFString *v126;
  const __CFString *v127;
  __int128 *v128;
  __int128 *v129;
  char *v130;
  char *v131;
  char *v132;
  const __CFString *v133;
  const __CFString *v134;
  __int128 *v135;
  __int128 *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  char v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  float v146;
  unsigned __int16 v147;
  __int128 v148;
  double v149;
  uint64_t v150;
  float v151;
  __int128 v152;
  _OWORD v153[2];
  int v154;
  uint64_t v155;
  int v156;
  _WORD v157[30];
  double v158;
  __int16 v159;
  double v160;
  __int16 v161;
  double v162;
  __int16 v163;
  double v164;
  __int16 v165;
  double v166;
  __int16 v167;
  double v168;
  __int16 v169;
  double v170;
  __int16 v171;
  double v172;
  __int16 v173;
  double v174;
  __int16 v175;
  double v176;
  __int16 v177;
  int v178;
  __int16 v179;
  double v180;
  __int16 v181;
  int v182;
  int16x4_t v183;
  _BYTE buf[102];
  __int16 v185;
  double v186;
  __int16 v187;
  double v188;
  __int16 v189;
  double v190;
  __int16 v191;
  double v192;
  __int16 v193;
  double v194;
  __int16 v195;
  double v196;
  __int16 v197;
  int v198;
  __int16 v199;
  double v200;
  __int16 v201;
  int v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  DataValue = (unsigned __int8 *)IOHIDEventGetDataValue();
  IntegerValue = IOHIDEventGetIntegerValue();
  if (DataValue)
    v8 = IntegerValue == 0;
  else
    v8 = 1;
  if (v8)
    return;
  v9 = IntegerValue;
  *(_QWORD *)&v143 = 0;
  *((_QWORD *)&v143 + 1) = 0x3F80000000000000;
  v147 = 0;
  v148 = 0uLL;
  TimeStamp = IOHIDEventGetTimeStamp();
  v149 = sub_18F1FD20C(TimeStamp);
  v152 = 0u;
  memset(v153, 0, sizeof(v153));
  v154 = 0;
  v142 = 0;
  v11 = sub_18F4E4168(a4, &v142);
  v12 = (const char *)v11;
  *(_QWORD *)((char *)v153 + 4) = v11;
  v13.i32[1] = HIDWORD(v149);
  *((double *)&v148 + 1) = v149;
  if (v142 && v11)
  {
    if (*(double *)(a1 + 304) < 0.00001)
      *(double *)(a1 + 304) = v149;
    v14 = sub_18F4D6638();
    v18 = sub_18F4D8974(v14, v12, v15, v16, v17);
    v19 = v18;
    if (v18)
    {
      v20 = sub_18F1FD20C(v18);
      v21 = v149 - v20;
      if (v149 - v20 > -3600.0 && v21 < 3600.0)
      {
        *(double *)((char *)v153 + 12) = v149 - v20;
        *((double *)&v148 + 1) = v20;
        LODWORD(v153[0]) = *(_DWORD *)(a1 + 264);
        if (v21 <= 0.100000001)
        {
          if (v21 > 0.0)
          {
            if (qword_1ECEDEE38 != -1)
              dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
            v32 = qword_1ECEDEE30;
            if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEBUG))
            {
              v33 = *(_QWORD *)((char *)v153 + 4);
              v34 = IOHIDEventGetTimeStamp();
              *(_DWORD *)buf = 134349824;
              *(_QWORD *)&buf[4] = v33;
              *(_WORD *)&buf[12] = 2050;
              *(_QWORD *)&buf[14] = v34;
              *(_WORD *)&buf[22] = 2050;
              *(_QWORD *)&buf[24] = v19;
              *(_WORD *)&buf[32] = 2050;
              *(_QWORD *)&buf[34] = (uint64_t)(*(double *)((char *)v153 + 12) * 1000000000.0);
              _os_log_impl(&dword_18F1DC000, v32, OS_LOG_TYPE_DEBUG, "[AccessoryDeviceMotion] W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remote->local latency(ns):%{public}lld", buf, 0x2Au);
            }
            if (!sub_18F1FCA08(115, 2))
              goto LABEL_47;
            bzero(buf, 0x65CuLL);
            if (qword_1ECEDEE38 != -1)
              dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
            v35 = *(_QWORD *)((char *)v153 + 4);
            v36 = IOHIDEventGetTimeStamp();
            v156 = 134349824;
            *(_QWORD *)v157 = v35;
            v157[4] = 2050;
            *(_QWORD *)&v157[5] = v36;
            v157[9] = 2050;
            *(_QWORD *)&v157[10] = v19;
            v157[14] = 2050;
            *(_QWORD *)&v157[15] = (uint64_t)(*(double *)((char *)v153 + 12) * 1000000000.0);
            v37 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 2, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v37);
            goto LABEL_268;
          }
          if (qword_1ECEDEE38 != -1)
            dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
          v38 = qword_1ECEDEE30;
          if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_ERROR))
          {
            v39 = *(_QWORD *)((char *)v153 + 4);
            v40 = IOHIDEventGetTimeStamp();
            *(_DWORD *)buf = 134349824;
            *(_QWORD *)&buf[4] = v39;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = v40;
            *(_WORD *)&buf[22] = 2050;
            *(_QWORD *)&buf[24] = v19;
            *(_WORD *)&buf[32] = 2050;
            *(_QWORD *)&buf[34] = (uint64_t)(*(double *)((char *)v153 + 12) * 1000000000.0);
            _os_log_impl(&dword_18F1DC000, v38, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Zero or Negative TimeSync Latency! W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remote->local latency(ns):%{public}lld", buf, 0x2Au);
          }
          if (!sub_18F1FCA08(115, 0))
            goto LABEL_47;
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE38 == -1)
          {
LABEL_267:
            v138 = *(_QWORD *)((char *)v153 + 4);
            v139 = IOHIDEventGetTimeStamp();
            v156 = 134349824;
            *(_QWORD *)v157 = v138;
            v157[4] = 2050;
            *(_QWORD *)&v157[5] = v139;
            v157[9] = 2050;
            *(_QWORD *)&v157[10] = v19;
            v157[14] = 2050;
            *(_QWORD *)&v157[15] = (uint64_t)(*(double *)((char *)v153 + 12) * 1000000000.0);
            v37 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 0, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v37);
LABEL_268:
            if (v37 != buf)
              free(v37);
LABEL_47:
            v41 = v149;
            v13.i64[0] = *(_QWORD *)((char *)v153 + 12);
            ++*(_DWORD *)(a1 + 392);
            if (*(double *)(a1 + 312) < 0.00001)
              *(double *)(a1 + 312) = v41;
            v42 = *(double *)(a1 + 320);
            if (v42 >= 0.00001)
            {
              v43 = *(double *)(a1 + 328);
              v44 = *(double *)(a1 + 336);
              if (v43 > *(double *)v13.i64)
                v43 = *(double *)v13.i64;
              if (v44 < *(double *)v13.i64)
                v44 = *(double *)v13.i64;
              *(double *)(a1 + 328) = v43;
              *(double *)(a1 + 336) = v44;
            }
            else
            {
              *(_QWORD *)(a1 + 328) = v13.i64[0];
              *(_QWORD *)(a1 + 336) = v13.i64[0];
            }
            *(double *)(a1 + 320) = *(double *)v13.i64 + v42;
            if (*(double *)v13.i64 > 0.100000001)
              ++*(_DWORD *)(a1 + 400);
            goto LABEL_58;
          }
        }
        else
        {
          if (qword_1ECEDEE38 != -1)
            dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
          v22 = qword_1ECEDEE30;
          if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_ERROR))
          {
            v23 = *(_QWORD *)((char *)v153 + 4);
            v24 = IOHIDEventGetTimeStamp();
            *(_DWORD *)buf = 134349824;
            *(_QWORD *)&buf[4] = v23;
            *(_WORD *)&buf[12] = 2050;
            *(_QWORD *)&buf[14] = v24;
            *(_WORD *)&buf[22] = 2050;
            *(_QWORD *)&buf[24] = v19;
            *(_WORD *)&buf[32] = 2050;
            *(_QWORD *)&buf[34] = (uint64_t)(*(double *)((char *)v153 + 12) * 1000000000.0);
            _os_log_impl(&dword_18F1DC000, v22, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] High TimeSync Latency! W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remote->local latency(ns):%{public}lld", buf, 0x2Au);
          }
          if (!sub_18F1FCA08(115, 0))
            goto LABEL_47;
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE38 == -1)
            goto LABEL_267;
        }
        dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
        goto LABEL_267;
      }
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
      v26 = qword_1ECEDEE30;
      if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_ERROR))
      {
        v27 = *(_QWORD *)((char *)v153 + 4);
        v28 = IOHIDEventGetTimeStamp();
        *(_DWORD *)buf = 134349824;
        *(_QWORD *)&buf[4] = v27;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v28;
        *(_WORD *)&buf[22] = 2050;
        *(_QWORD *)&buf[24] = v19;
        *(_WORD *)&buf[32] = 2050;
        *(_QWORD *)&buf[34] = (uint64_t)(*(double *)((char *)v153 + 12) * 1000000000.0);
        _os_log_impl(&dword_18F1DC000, v26, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Abnormal TimeSync Latency! W2 btclk(ns):%{public}llu local abs:%{public}llu Synced ts:%{public}llu remote->local latency(ns):%{public}lld", buf, 0x2Au);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE38 != -1)
          dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
        v29 = *(_QWORD *)((char *)v153 + 4);
        v30 = IOHIDEventGetTimeStamp();
        v156 = 134349824;
        *(_QWORD *)v157 = v29;
        v157[4] = 2050;
        *(_QWORD *)&v157[5] = v30;
        v157[9] = 2050;
        *(_QWORD *)&v157[10] = v19;
        v157[14] = 2050;
        *(_QWORD *)&v157[15] = (uint64_t)(*(double *)((char *)v153 + 12) * 1000000000.0);
        v31 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v31);
        if (v31 != buf)
          free(v31);
      }
    }
    else
    {
      v13.i64[0] = *(_QWORD *)(a1 + 312);
      if (*(double *)v13.i64 > 0.00001)
        ++*(_DWORD *)(a1 + 396);
    }
  }
  else if (!v142)
  {
    LODWORD(v153[0]) = *(_DWORD *)(a1 + 264);
    v25 = mach_absolute_time();
    *(double *)v13.i64 = sub_18F1FD20C(v25);
    v149 = *(double *)v13.i64;
  }
LABEL_58:
  v45 = *DataValue;
  if ((v45 < 4 || v9 != 47) && (v45 != 3 || v9 != 49))
  {
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v58 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v9;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v45;
      _os_log_impl(&dword_18F1DC000, v58, OS_LOG_TYPE_FAULT, "[AccessoryDeviceMotion] Invalid accessory device motion packet size %{public}ld and version %{public}d", buf, 0x12u);
    }
    if (!sub_18F1FCA08(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v156 = 134349312;
    *(_QWORD *)v157 = v9;
    v157[4] = 1026;
    *(_DWORD *)&v157[5] = v45;
    v59 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v59);
LABEL_185:
    if (v59 != buf)
      free(v59);
    return;
  }
  v46 = *(unsigned __int16 *)(DataValue + 45);
  DWORD2(v152) = v46;
  if ((DataValue[1] & 0x80) != 0)
  {
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v57 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v57, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Invalid IMU error on accessory", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
      LOWORD(v156) = 0;
      v130 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v130);
      if (v130 != buf)
        free(v130);
    }
    *(_BYTE *)(a1 + 391) = 1;
    return;
  }
  v47 = *(_QWORD *)(DataValue + 3);
  *(_QWORD *)&v148 = v47;
  v48 = (float)*(__int16 *)(DataValue + 13) / 32767.0;
  v49 = (float)*(__int16 *)(DataValue + 15) / 32767.0;
  *(float *)buf = (float)*(__int16 *)(DataValue + 11) / 32767.0;
  *(float *)&buf[4] = v48;
  v13.f32[0] = sqrtf(fmaxf((float)((float)(1.0 - (float)(*(float *)buf * *(float *)buf)) - (float)(v48 * v48))- (float)(v49 * v49), 0.0));
  *(float *)&buf[8] = v49;
  *(_DWORD *)&buf[12] = v13.i32[0];
  sub_18F1FFE94((float32x4_t *)buf, v13);
  v143 = *(_OWORD *)buf;
  v50 = (float)*(__int16 *)(DataValue + 31) * 0.00097656;
  v51 = (float)*(__int16 *)(DataValue + 33) * 0.00097656;
  *((float *)&v145 + 2) = (float)*(__int16 *)(DataValue + 29) * 0.00097656;
  *((float *)&v145 + 3) = v50;
  v146 = v51;
  v52 = (float)*(__int16 *)(DataValue + 17) * 0.0019531;
  v53 = (float)*(__int16 *)(DataValue + 21);
  v54 = (float)*(__int16 *)(DataValue + 19) * 0.0019531;
  *(float *)&v144 = v52;
  *((float *)&v144 + 1) = v54;
  *((float *)&v144 + 2) = v53 * 0.0019531;
  if (v45 < 5)
  {
    *(_WORD *)((char *)&v154 + 1) = 0;
    LOWORD(v52) = *(_WORD *)(DataValue + 23);
    LOWORD(v54) = *(_WORD *)(DataValue + 25);
    LOWORD(v53) = *(_WORD *)(DataValue + 27);
    *((float *)&v144 + 3) = (float)LODWORD(v52) * 0.00000011921;
    *(float *)&v145 = (float)LODWORD(v54) * 0.00000011921;
    *((float *)&v145 + 1) = (float)LODWORD(v53) * 0.00000011921;
  }
  else
  {
    LOWORD(v52) = *(_WORD *)(DataValue + 23);
    *((float *)&v144 + 3) = (float)LODWORD(v52) * 0.00000011921;
    *(float *)&v145 = *((float *)&v144 + 3);
    *((float *)&v145 + 1) = *((float *)&v144 + 3);
    if (v45 == 5)
    {
      v55 = 0;
      v56 = 0;
    }
    else
    {
      v56 = DataValue[25];
      v55 = 1;
    }
    BYTE2(v154) = v55;
    BYTE1(v154) = v56;
    if (DataValue[26] || DataValue[27] || (LOBYTE(v60) = DataValue[28], (_BYTE)v60))
      v60 = (*(unsigned __int16 *)(DataValue + 1) >> 9) & 1;
    LOBYTE(v154) = v60;
    *((float *)&v153[1] + 1) = (float)(char)DataValue[26] / 127.0;
    *((float *)&v153[1] + 2) = (float)(char)DataValue[27] / 127.0;
    *((float *)&v153[1] + 3) = (float)(char)DataValue[28] / 127.0;
  }
  v61 = (float)*(__int16 *)(DataValue + 37) * 0.00097656;
  v62 = (float)*(__int16 *)(DataValue + 39) * 0.00097656;
  *(float *)&v150 = (float)*(__int16 *)(DataValue + 35) * 0.00097656;
  *((float *)&v150 + 1) = v61;
  v151 = v62;
  LODWORD(v152) = *(_DWORD *)(DataValue + 41);
  v63 = *(unsigned __int16 *)(DataValue + 1);
  v64 = (v63 >> 14) & 2;
  if ((v63 & 0x4000) != 0)
    v64 = 1;
  DWORD1(v152) = v64;
  v65 = v63 & 0x3FFF;
  v147 = v63 & 0x3FFF;
  v66 = *(_DWORD *)(a1 + 284);
  v68 = v66 == 4 || v66 == 2;
  HIBYTE(v154) = v68;
  v69 = v153[0];
  v70 = *(double *)((char *)v153 + 12);
  *(_WORD *)(a1 + 424) = v46;
  *(_QWORD *)(a1 + 432) = v47;
  *(_DWORD *)(a1 + 420) = v69;
  *(_WORD *)(a1 + 426) = v65;
  *(_BYTE *)(a1 + 440) = v45;
  ++*(_DWORD *)(a1 + 412);
  if (v69)
  {
    ++*(_DWORD *)(a1 + 416);
    v71 = *(double *)(a1 + 456);
    if (v71 > v70)
      v71 = v70;
    *(double *)(a1 + 448) = v70 + *(double *)(a1 + 448);
    *(double *)(a1 + 456) = v71;
    if (*(double *)(a1 + 464) >= v70)
      v70 = *(double *)(a1 + 464);
    *(double *)(a1 + 464) = v70;
  }
  v72 = *(_DWORD *)(a1 + 228);
  v73 = *(_DWORD *)(a1 + 220);
  if (v69)
  {
    if (v69 == v72)
    {
      v74 = v46 - v73;
      if (v46 > v73)
      {
        v75 = (*((double *)&v148 + 1) - *(double *)(a1 + 184)) / (double)v74;
        v76 = *(double *)(a1 + 344);
        if (v75 < v76)
          v76 = (*((double *)&v148 + 1) - *(double *)(a1 + 184)) / (double)v74;
        if (*(double *)(a1 + 352) >= v75)
          v75 = *(double *)(a1 + 352);
        *(double *)(a1 + 344) = v76;
        *(double *)(a1 + 352) = v75;
      }
    }
  }
  if (!v46 || v46 != v73)
  {
    if (v46 < 3 || v46 >= v73)
    {
      if (v47 < 0xC351 || v47 >= *(_QWORD *)(a1 + 176))
      {
        if (v69 && v72 && *((double *)&v148 + 1) < *(double *)(a1 + 184))
        {
          ++*(_DWORD *)(a1 + 404);
          if (qword_1ECEDEE38 != -1)
            dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
          v89 = qword_1ECEDEE30;
          if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_ERROR))
          {
            v90 = *(_DWORD *)(a1 + 220);
            v91 = *(_QWORD *)(a1 + 184);
            *(_DWORD *)buf = 67240960;
            *(_DWORD *)&buf[4] = v90;
            *(_WORD *)&buf[8] = 2050;
            *(_QWORD *)&buf[10] = v91;
            *(_WORD *)&buf[18] = 1026;
            *(_DWORD *)&buf[20] = DWORD2(v152);
            *(_WORD *)&buf[24] = 2050;
            *(_QWORD *)&buf[26] = *((_QWORD *)&v148 + 1);
            _os_log_impl(&dword_18F1DC000, v89, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] TimeSynced timestamp went backward: lastSeq,%{public}d,lastTimestamp,%{public}.3f,currSeq,%{public}d,currTimestamp,%{public}.3f", buf, 0x22u);
          }
          if (sub_18F1FCA08(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1ECEDEE38 != -1)
              dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
            v140 = *(_DWORD *)(a1 + 220);
            v141 = *(_QWORD *)(a1 + 184);
            v156 = 67240960;
            *(_DWORD *)v157 = v140;
            v157[2] = 2050;
            *(_QWORD *)&v157[3] = v141;
            v157[7] = 1026;
            *(_DWORD *)&v157[8] = DWORD2(v152);
            v157[10] = 2050;
            *(_QWORD *)&v157[11] = *((_QWORD *)&v148 + 1);
            v88 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 0, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v88);
            goto LABEL_136;
          }
        }
        goto LABEL_146;
      }
      ++*(_DWORD *)(a1 + 404);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
      v83 = qword_1ECEDEE30;
      if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_ERROR))
      {
        v84 = *(_DWORD *)(a1 + 220);
        v85 = *(_QWORD *)(a1 + 176);
        *(_DWORD *)buf = 67240960;
        *(_DWORD *)&buf[4] = v84;
        *(_WORD *)&buf[8] = 2050;
        *(_QWORD *)&buf[10] = v85;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = DWORD2(v152);
        *(_WORD *)&buf[24] = 2050;
        *(_QWORD *)&buf[26] = v148;
        _os_log_impl(&dword_18F1DC000, v83, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Received backward W2 GTB timestamp: lastSeq,%{public}d,lastSensorTime,%{public}llu,currSeq,%{public}d,currSensorTime,%{public}llu", buf, 0x22u);
      }
      if (!sub_18F1FCA08(115, 0))
        goto LABEL_146;
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 == -1)
      {
LABEL_135:
        v86 = *(_DWORD *)(a1 + 220);
        v87 = *(_QWORD *)(a1 + 176);
        v156 = 67240960;
        *(_DWORD *)v157 = v86;
        v157[2] = 2050;
        *(_QWORD *)&v157[3] = v87;
        v157[7] = 1026;
        *(_DWORD *)&v157[8] = DWORD2(v152);
        v157[10] = 2050;
        *(_QWORD *)&v157[11] = v148;
        v88 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v88);
LABEL_136:
        if (v88 != buf)
          free(v88);
        goto LABEL_146;
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 404);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
      v80 = qword_1ECEDEE30;
      if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_ERROR))
      {
        v81 = *(_DWORD *)(a1 + 220);
        v82 = *(_QWORD *)(a1 + 176);
        *(_DWORD *)buf = 67240960;
        *(_DWORD *)&buf[4] = v81;
        *(_WORD *)&buf[8] = 2050;
        *(_QWORD *)&buf[10] = v82;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = DWORD2(v152);
        *(_WORD *)&buf[24] = 2050;
        *(_QWORD *)&buf[26] = v148;
        _os_log_impl(&dword_18F1DC000, v80, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Received backward sequence number: lastSeq,%{public}d,lastSensorTime,%{public}llu,currSeq,%{public}d,currSensorTime,%{public}llu", buf, 0x22u);
      }
      if (!sub_18F1FCA08(115, 0))
        goto LABEL_146;
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 == -1)
        goto LABEL_135;
    }
LABEL_307:
    dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    goto LABEL_135;
  }
  ++*(_DWORD *)(a1 + 408);
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
  v77 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_ERROR))
  {
    v78 = *(_DWORD *)(a1 + 220);
    v79 = *(_QWORD *)(a1 + 176);
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)&buf[4] = v78;
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = v79;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = DWORD2(v152);
    *(_WORD *)&buf[24] = 2050;
    *(_QWORD *)&buf[26] = v148;
    _os_log_impl(&dword_18F1DC000, v77, OS_LOG_TYPE_ERROR, "[AccessoryDeviceMotion] Received duplicate packets: lastSeq,%{public}d,lastSensorTime,%{public}llu,currSeq,%{public}d,currSensorTime,%{public}llu", buf, 0x22u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 == -1)
      goto LABEL_135;
    goto LABEL_307;
  }
LABEL_146:
  if ((__int128 *)(a1 + 120) != &v143)
    *(_OWORD *)(a1 + 120) = v143;
  v92 = v145;
  *(_OWORD *)(a1 + 136) = v144;
  *(_OWORD *)(a1 + 152) = v92;
  *(float *)(a1 + 168) = v146;
  *(_WORD *)(a1 + 172) = v147;
  *(_OWORD *)(a1 + 176) = v148;
  *(double *)(a1 + 192) = v149;
  *(_QWORD *)(a1 + 200) = v150;
  *(float *)(a1 + 208) = v151;
  v93 = v152;
  v94 = v153[0];
  v95 = v153[1];
  *(_DWORD *)(a1 + 260) = v154;
  *(_OWORD *)(a1 + 244) = v95;
  *(_OWORD *)(a1 + 228) = v94;
  *(_OWORD *)(a1 + 212) = v93;
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
  v96 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67241216;
    *(_DWORD *)&buf[4] = DWORD2(v152);
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = v148;
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = *((_QWORD *)&v148 + 1);
    *(_WORD *)&buf[28] = 1026;
    *(_DWORD *)&buf[30] = v153[0];
    *(_WORD *)&buf[34] = 2050;
    *(_QWORD *)&buf[36] = *(_QWORD *)((char *)v153 + 12);
    _os_log_impl(&dword_18F1DC000, v96, OS_LOG_TYPE_INFO, "[AccessoryDeviceMotion] seq,%{public}d,sensorTime,%{public}llu,timestamp,%{public}20.20f,TimeSyncStatus,%{public}u,latency,%{public}20.20f", buf, 0x2Cu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v156 = 67241216;
    *(_DWORD *)v157 = DWORD2(v152);
    v157[2] = 2050;
    *(_QWORD *)&v157[3] = v148;
    v157[7] = 2050;
    *(_QWORD *)&v157[8] = *((_QWORD *)&v148 + 1);
    v157[12] = 1026;
    *(_DWORD *)&v157[13] = v153[0];
    v157[15] = 2050;
    *(_QWORD *)&v157[16] = *(_QWORD *)((char *)v153 + 12);
    v131 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v131);
    if (v131 != buf)
      free(v131);
  }
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
  v97 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134353664;
    *(double *)&buf[4] = *(float *)&v143;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = *((float *)&v143 + 1);
    *(_WORD *)&buf[22] = 2050;
    *(double *)&buf[24] = *((float *)&v143 + 2);
    *(_WORD *)&buf[32] = 2050;
    *(double *)&buf[34] = *((float *)&v143 + 3);
    *(_WORD *)&buf[42] = 2050;
    *(double *)&buf[44] = *(float *)&v144;
    *(_WORD *)&buf[52] = 2050;
    *(double *)&buf[54] = *((float *)&v144 + 1);
    *(_WORD *)&buf[62] = 2050;
    *(double *)&buf[64] = *((float *)&v144 + 2);
    *(_WORD *)&buf[72] = 2050;
    *(double *)&buf[74] = *((float *)&v144 + 3);
    *(_WORD *)&buf[82] = 2050;
    *(double *)&buf[84] = *(float *)&v145;
    *(_WORD *)&buf[92] = 2050;
    *(double *)&buf[94] = *((float *)&v145 + 1);
    v185 = 2050;
    v186 = *((float *)&v145 + 2);
    v187 = 2050;
    v188 = *((float *)&v145 + 3);
    v189 = 2050;
    v190 = v146;
    v191 = 2050;
    v192 = *(float *)&v150;
    v193 = 2050;
    v194 = *((float *)&v150 + 1);
    v195 = 2050;
    v196 = v151;
    v197 = 1026;
    v198 = v147;
    v199 = 2050;
    v200 = *(float *)&v152;
    v201 = 1026;
    v202 = DWORD1(v152);
    _os_log_impl(&dword_18F1DC000, v97, OS_LOG_TYPE_DEBUG, "[AccessoryDeviceMotion] q.x,%{public}20.20f,q.y,%{public}20.20f,q.z,%{public}20.20f,q.w,%{public}20.20f,rotationRate.x,%{public}20.20f,rotationRate.y,%{public}20.20f,rotationRate.z,%{public}20.20f,variance.x,%{public}20.20f,variance.y,%{public}20.20f,variance.z,%{public}20.20f,userAccel.x,%{public}20.20f,userAccel.y,%{public}20.20f,userAccel.z,%{public}20.20f,filteredAccel.x,%{public}20.20f,filteredAccel.y,%{public}20.20f,filteredAccel.z,%{public}20.20f,status,%{public}04x,quiescentNoise,%{public}20.20f,quiescentMode,%{public}d", buf, 0xB8u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v156 = 134353664;
    *(double *)v157 = *(float *)&v143;
    v157[4] = 2050;
    *(double *)&v157[5] = *((float *)&v143 + 1);
    v157[9] = 2050;
    *(double *)&v157[10] = *((float *)&v143 + 2);
    v157[14] = 2050;
    *(double *)&v157[15] = *((float *)&v143 + 3);
    v157[19] = 2050;
    *(double *)&v157[20] = *(float *)&v144;
    v157[24] = 2050;
    *(double *)&v157[25] = *((float *)&v144 + 1);
    v157[29] = 2050;
    v158 = *((float *)&v144 + 2);
    v159 = 2050;
    v160 = *((float *)&v144 + 3);
    v161 = 2050;
    v162 = *(float *)&v145;
    v163 = 2050;
    v164 = *((float *)&v145 + 1);
    v165 = 2050;
    v166 = *((float *)&v145 + 2);
    v167 = 2050;
    v168 = *((float *)&v145 + 3);
    v169 = 2050;
    v170 = v146;
    v171 = 2050;
    v172 = *(float *)&v150;
    v173 = 2050;
    v174 = *((float *)&v150 + 1);
    v175 = 2050;
    v176 = v151;
    v177 = 1026;
    v178 = v147;
    v179 = 2050;
    v180 = *(float *)&v152;
    v181 = 1026;
    v182 = DWORD1(v152);
    v132 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual void CLAccessoryDeviceMotion::onEventData(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v132);
    if (v132 != buf)
      free(v132);
  }
  v155 = *((_QWORD *)&v148 + 1);
  v98 = atomic_load((unsigned __int8 *)&qword_1ECEDF9F0);
  if ((v98 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF9F0))
  {
    sub_18F433560();
    __cxa_atexit((void (*)(void *))sub_18F4335E4, &dword_1ECEDFAC0, &dword_18F1DC000);
    __cxa_guard_release(&qword_1ECEDF9F0);
  }
  if (*(_BYTE *)(a1 + 30))
    goto LABEL_160;
  *(_BYTE *)(a1 + 30) = 1;
  *(_DWORD *)buf = 0;
  sub_18F270374(&buf[8], "N/A");
  sub_18F270374(&buf[32], "N/A");
  *(_QWORD *)&buf[56] = 0;
  *(_QWORD *)&buf[64] = 0;
  *(_DWORD *)&buf[72] = 1065353216;
  buf[76] = 0;
  *(_QWORD *)&buf[80] = 0;
  *(_QWORD *)&buf[88] = 0x3F80000000000000;
  dword_1ECEDFAC0 = *(_DWORD *)buf;
  if (byte_1ECEDFADF < 0)
    operator delete((void *)xmmword_1ECEDFAC8);
  v99 = 0;
  xmmword_1ECEDFAC8 = *(_OWORD *)&buf[8];
  unk_1ECEDFAD8 = *(_QWORD *)&buf[24];
  buf[31] = 0;
  buf[8] = 0;
  if (byte_1ECEDFAF7 < 0)
  {
    operator delete((void *)xmmword_1ECEDFAE0);
    v99 = buf[31];
  }
  xmmword_1ECEDFAE0 = *(_OWORD *)&buf[32];
  unk_1ECEDFAF0 = *(_QWORD *)&buf[48];
  buf[55] = 0;
  buf[32] = 0;
  LODWORD(qword_1ECEDFAF8) = *(_DWORD *)&buf[56];
  *(_OWORD *)((char *)&qword_1ECEDFAF8 + 4) = *(_OWORD *)&buf[60];
  byte_1ECEDFB0C = buf[76];
  xmmword_1ECEDFB10 = *(_OWORD *)&buf[80];
  if (v99 < 0)
    operator delete(*(void **)&buf[8]);
  if (!sub_18F4A4B24((const char *)a1, &dword_1ECEDFAC0))
  {
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v104 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v104, OS_LOG_TYPE_FAULT, "[AccessoryDeviceMotion] Service not found!", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    LOWORD(v156) = 0;
    v59 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)", "CoreLocation: %s\n", v59);
    goto LABEL_185;
  }
  v100 = (__IOHIDServiceClient *)sub_18F1FBD7C(*(_QWORD *)(a1 + 32));
  if (sub_18F4E4C90(&v183, v100, CFSTR("H2HTransformation"), 8uLL))
  {
    byte_1ECEDFB0C = 1;
    *(float32x4_t *)buf = vmulq_f32(vcvtq_f32_s32(vmovl_s16(v183)), (float32x4_t)vdupq_n_s32(0x38000100u));
    sub_18F1FFE94((float32x4_t *)buf, *(float32x4_t *)buf);
    xmmword_1ECEDFB10 = *(_OWORD *)buf;
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v101 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349824;
      *(double *)&buf[4] = *(float *)&xmmword_1ECEDFB10;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = *((float *)&xmmword_1ECEDFB10 + 1);
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = *((float *)&xmmword_1ECEDFB10 + 2);
      *(_WORD *)&buf[32] = 2050;
      *(double *)&buf[34] = *((float *)&xmmword_1ECEDFB10 + 3);
      _os_log_impl(&dword_18F1DC000, v101, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Received headset to head transformation {%{public}f, %{public}f, %{public}f, %{public}f} from IORegistry", buf, 0x2Au);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
      v156 = 134349824;
      *(double *)v157 = *(float *)&xmmword_1ECEDFB10;
      v157[4] = 2050;
      *(double *)&v157[5] = *((float *)&xmmword_1ECEDFB10 + 1);
      v157[9] = 2050;
      *(double *)&v157[10] = *((float *)&xmmword_1ECEDFB10 + 2);
      v157[14] = 2050;
      *(double *)&v157[15] = *((float *)&xmmword_1ECEDFB10 + 3);
      v103 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)", "CoreLocation: %s\n", v103);
LABEL_273:
      if (v103 != buf)
        free(v103);
    }
  }
  else
  {
    byte_1ECEDFB0C = 0;
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v105 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v105, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Warning! Headset to Head transformation is not available from the accessory.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
      LOWORD(v156) = 0;
      v103 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)", "CoreLocation: %s\n", v103);
      goto LABEL_273;
    }
  }
  if (byte_1ECEDFB0C)
  {
    v106 = atomic_load((unsigned __int8 *)&qword_1ECEDF9F8);
    if ((v106 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF9F8))
    {
      xmmword_1ECEDFAB0 = xmmword_18F5084C0;
      sub_18F1FFE94((float32x4_t *)&xmmword_1ECEDFAB0, (float32x4_t)xmmword_18F5084C0);
      __cxa_guard_release(&qword_1ECEDF9F8);
    }
    sub_18F3D3764((uint64_t)&xmmword_1ECEDFB10, (float *)&xmmword_1ECEDFAB0, (float32x4_t *)buf, v102);
    *(_OWORD *)((char *)&qword_1ECEDFAF8 + 4) = *(_OWORD *)buf;
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v107 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349824;
      *(double *)&buf[4] = *((float *)&qword_1ECEDFAF8 + 1);
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = unk_1ECEDFB00;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = *(float *)&dword_1ECEDFB04;
      *(_WORD *)&buf[32] = 2050;
      *(double *)&buf[34] = *(float *)&dword_1ECEDFB08;
      _os_log_impl(&dword_18F1DC000, v107, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] Derived device frame orientation {%{public}f, %{public}f, %{public}f, %{public}f} from IORegistry", buf, 0x2Au);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE38 != -1)
        dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
      v156 = 134349824;
      *(double *)v157 = *((float *)&qword_1ECEDFAF8 + 1);
      v157[4] = 2050;
      *(double *)&v157[5] = unk_1ECEDFB00;
      v157[9] = 2050;
      *(double *)&v157[10] = *(float *)&dword_1ECEDFB04;
      v157[14] = 2050;
      *(double *)&v157[15] = *(float *)&dword_1ECEDFB08;
      v108 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)", "CoreLocation: %s\n", v108);
      if (v108 != buf)
        free(v108);
    }
  }
  else
  {
    v109 = qword_1ECEDFAF8;
    v110 = dword_1ECEDFAC0;
    v111 = atomic_load((unsigned __int8 *)&qword_1ECEDF998);
    if ((v111 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF998))
    {
      xmmword_1ECEDFA00 = xmmword_18F505C20;
      sub_18F1FFE94((float32x4_t *)&xmmword_1ECEDFA00, (float32x4_t)xmmword_18F505C20);
      __cxa_guard_release(&qword_1ECEDF998);
    }
    v112 = atomic_load((unsigned __int8 *)&qword_1ECEDF9A0);
    if ((v112 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF9A0))
    {
      xmmword_1ECEDFA10 = xmmword_18F5084D0;
      sub_18F1FFE94((float32x4_t *)&xmmword_1ECEDFA10, (float32x4_t)xmmword_18F5084D0);
      __cxa_guard_release(&qword_1ECEDF9A0);
    }
    v113 = atomic_load((unsigned __int8 *)&qword_1ECEDF9A8);
    if ((v113 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF9A8))
    {
      xmmword_1ECEDFA20 = xmmword_18F5084E0;
      sub_18F1FFE94((float32x4_t *)&xmmword_1ECEDFA20, (float32x4_t)xmmword_18F5084E0);
      __cxa_guard_release(&qword_1ECEDF9A8);
    }
    v114 = atomic_load((unsigned __int8 *)&qword_1ECEDF9B0);
    if ((v114 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF9B0))
    {
      xmmword_1ECEDFA30 = xmmword_18F5084F0;
      sub_18F1FFE94((float32x4_t *)&xmmword_1ECEDFA30, (float32x4_t)xmmword_18F5084F0);
      __cxa_guard_release(&qword_1ECEDF9B0);
    }
    v115 = atomic_load((unsigned __int8 *)&qword_1ECEDF9B8);
    if ((v115 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF9B8))
    {
      xmmword_1ECEDFA40 = xmmword_18F508500;
      sub_18F1FFE94((float32x4_t *)&xmmword_1ECEDFA40, (float32x4_t)xmmword_18F508500);
      __cxa_guard_release(&qword_1ECEDF9B8);
    }
    v116 = atomic_load((unsigned __int8 *)&qword_1ECEDF9C0);
    if ((v116 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF9C0))
    {
      xmmword_1ECEDFA50 = xmmword_18F508510;
      sub_18F1FFE94((float32x4_t *)&xmmword_1ECEDFA50, (float32x4_t)xmmword_18F508510);
      __cxa_guard_release(&qword_1ECEDF9C0);
    }
    v117 = atomic_load((unsigned __int8 *)&qword_1ECEDF9C8);
    if ((v117 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF9C8))
    {
      xmmword_1ECEDFA60 = xmmword_18F508520;
      sub_18F1FFE94((float32x4_t *)&xmmword_1ECEDFA60, (float32x4_t)xmmword_18F508520);
      __cxa_guard_release(&qword_1ECEDF9C8);
    }
    v118 = atomic_load((unsigned __int8 *)&qword_1ECEDF9D0);
    if ((v118 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF9D0))
    {
      xmmword_1ECEDFA70 = xmmword_18F508530;
      sub_18F1FFE94((float32x4_t *)&xmmword_1ECEDFA70, (float32x4_t)xmmword_18F508530);
      __cxa_guard_release(&qword_1ECEDF9D0);
    }
    v119 = atomic_load((unsigned __int8 *)&qword_1ECEDF9D8);
    if ((v119 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF9D8))
    {
      xmmword_1ECEDFA80 = xmmword_18F5084D0;
      sub_18F1FFE94((float32x4_t *)&xmmword_1ECEDFA80, (float32x4_t)xmmword_18F5084D0);
      __cxa_guard_release(&qword_1ECEDF9D8);
    }
    v120 = atomic_load((unsigned __int8 *)&qword_1ECEDF9E0);
    if ((v120 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF9E0))
    {
      xmmword_1ECEDFA90 = xmmword_18F5084E0;
      sub_18F1FFE94((float32x4_t *)&xmmword_1ECEDFA90, (float32x4_t)xmmword_18F5084E0);
      __cxa_guard_release(&qword_1ECEDF9E0);
    }
    v121 = atomic_load((unsigned __int8 *)&qword_1ECEDF9E8);
    if ((v121 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDF9E8))
    {
      xmmword_1ECEDFAA0 = xmmword_18F508540;
      sub_18F1FFE94((float32x4_t *)&xmmword_1ECEDFAA0, (float32x4_t)xmmword_18F508540);
      __cxa_guard_release(&qword_1ECEDF9E8);
    }
    switch(v109)
    {
      case 1:
        v122 = &xmmword_1ECEDFA10;
        goto LABEL_219;
      case 2:
        v122 = &xmmword_1ECEDFA30;
        break;
      case 3:
        v122 = &xmmword_1ECEDFA40;
        goto LABEL_219;
      case 4:
        v122 = &xmmword_1ECEDFA60;
        goto LABEL_219;
      case 5:
        v122 = &xmmword_1ECEDFA80;
LABEL_219:
        if (v110 != 2)
          ++v122;
        break;
      case 6:
        v122 = &xmmword_1ECEDFAA0;
        break;
      default:
        v122 = &xmmword_1ECEDFA00;
        break;
    }
    *(_OWORD *)((char *)&qword_1ECEDFAF8 + 4) = *v122;
  }
  v123 = dword_1ECEDFAC0;
  if (qword_1ECEDFAF8 > 8)
  {
    v124 = 0;
  }
  else
  {
    v124 = 1;
    if (((1 << qword_1ECEDFAF8) & 0x1BB) != 0)
    {
      if (dword_1ECEDFAC0 == 2)
        v124 = 1;
      else
        v124 = 2;
    }
  }
  dword_1ECEDF980 = v124;
  *(_DWORD *)(a1 + 360) = qword_1ECEDFAF8;
  *(_DWORD *)(a1 + 368) = v123;
  *(_BYTE *)(a1 + 390) = 1;
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
  v125 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
  {
    v126 = sub_18F4A2B04(qword_1ECEDFAF8);
    v127 = sub_18F4A2B7C(dword_1ECEDF980);
    if (byte_1ECEDFADF >= 0)
      v128 = &xmmword_1ECEDFAC8;
    else
      v128 = (__int128 *)xmmword_1ECEDFAC8;
    if (byte_1ECEDFAF7 >= 0)
      v129 = &xmmword_1ECEDFAE0;
    else
      v129 = (__int128 *)xmmword_1ECEDFAE0;
    *(_DWORD *)buf = 138479107;
    *(_QWORD *)&buf[4] = v126;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v127;
    *(_WORD *)&buf[22] = 1026;
    *(_DWORD *)&buf[24] = dword_1ECEDFAC0;
    *(_WORD *)&buf[28] = 2081;
    *(_QWORD *)&buf[30] = v128;
    *(_WORD *)&buf[38] = 2081;
    *(_QWORD *)&buf[40] = v129;
    *(_WORD *)&buf[48] = 1026;
    *(_DWORD *)&buf[50] = qword_1ECEDFAF8;
    _os_log_impl(&dword_18F1DC000, v125, OS_LOG_TYPE_DEFAULT, "[AccessoryDeviceMotion] config,%{private}@,location,%{public}@,side,%{public}d,configuration,%{private}s,serialNumber,%{private}s,hardwareModel,%{public}d", buf, 0x36u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E2955448);
    v133 = sub_18F4A2B04(qword_1ECEDFAF8);
    v134 = sub_18F4A2B7C(dword_1ECEDF980);
    if (byte_1ECEDFADF >= 0)
      v135 = &xmmword_1ECEDFAC8;
    else
      v135 = (__int128 *)xmmword_1ECEDFAC8;
    if (byte_1ECEDFAF7 >= 0)
      v136 = &xmmword_1ECEDFAE0;
    else
      v136 = (__int128 *)xmmword_1ECEDFAE0;
    v156 = 138479107;
    *(_QWORD *)v157 = v133;
    v157[4] = 2114;
    *(_QWORD *)&v157[5] = v134;
    v157[9] = 1026;
    *(_DWORD *)&v157[10] = dword_1ECEDFAC0;
    v157[12] = 2081;
    *(_QWORD *)&v157[13] = v135;
    v157[17] = 2081;
    *(_QWORD *)&v157[18] = v136;
    v157[22] = 1026;
    *(_DWORD *)&v157[23] = qword_1ECEDFAF8;
    v137 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLAccessoryDeviceMotion::onDeviceMotionData(AudioAccessorySample &, CLMotionTypeTimestamp)", "CoreLocation: %s\n", v137);
    if (v137 != buf)
      free(v137);
  }
  sub_18F1FD2C8(a1, 1, (uint64_t)&dword_1ECEDFAC0, 96);
  if (*(_BYTE *)(a1 + 30))
  {
LABEL_160:
    HIDWORD(v152) = dword_1ECEDF980;
    sub_18F1FD2C8(a1, 0, (uint64_t)&v143, 144);
  }
}

