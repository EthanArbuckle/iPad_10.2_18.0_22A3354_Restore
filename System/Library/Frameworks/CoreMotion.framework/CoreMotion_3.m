uint64_t sub_18F2F1F94(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F284908(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F215C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F2F2178(_QWORD *result)
{
  *result = &off_1E2950AC8;
  result[1] = 0;
  return result;
}

void sub_18F2F2188(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950AC8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2F21C8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950AC8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F221C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F226C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F28B47C(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F2434(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F2F2450(_QWORD *result)
{
  *result = &off_1E2951548;
  result[1] = 0;
  return result;
}

void sub_18F2F2460(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2951548;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2F24A0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2951548;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F24F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F2544(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F29383C(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F270C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F2F2728(_QWORD *result)
{
  *result = &off_1E29504E0;
  result[1] = 0;
  return result;
}

void sub_18F2F2738(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E29504E0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2F2778(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E29504E0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F27CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F281C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F2A2334(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F29E4(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F2F2A00(_QWORD *result)
{
  *result = &off_1E2943AD0;
  result[1] = 0;
  return result;
}

void sub_18F2F2A10(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2943AD0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2F2A50(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2943AD0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F2AA4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F2AF4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F2A5770(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F2CBC(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F2F2CD8(_QWORD *result)
{
  *result = &off_1E2951580;
  result[1] = 0;
  return result;
}

void sub_18F2F2CE8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2951580;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2F2D28(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2951580;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F2D7C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F2DCC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F2244B0(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F2F94(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_18F2F2FB0(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950F98;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F2F2FC8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F2FEC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "walkingHeartRateAverage", *(double *)(a1 + 16));
    if ((*(_BYTE *)(a1 + 28) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "restingHeartRate", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "workoutActivityType");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F307C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  for (i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)this + 24))
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 28) |= 2u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_47:
        v2 = *((_QWORD *)this + 1) + 8;
        *((_QWORD *)this + 1) = v2;
        goto LABEL_53;
      }
    }
    else
    {
      if ((_DWORD)v20 != 2)
      {
        if ((_DWORD)v20 == 1)
        {
          *(_BYTE *)(a1 + 28) |= 4u;
          v21 = *((_QWORD *)this + 1);
          v2 = *((_QWORD *)this + 2);
          v22 = *(_QWORD *)this;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
          {
            v28 = 0;
            v29 = 0;
            v25 = 0;
            if (v2 <= v21)
              v2 = *((_QWORD *)this + 1);
            while (1)
            {
              if (v2 == v21)
              {
                LODWORD(v25) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_52;
              }
              v30 = v21++;
              v31 = *(_BYTE *)(v22 + v30);
              *((_QWORD *)this + 1) = v21;
              v25 |= (unint64_t)(v31 & 0x7F) << v28;
              if ((v31 & 0x80) == 0)
                break;
              v28 += 7;
              v14 = v29++ > 8;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_51;
              }
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v25) = 0;
LABEL_51:
            v2 = v30 + 1;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v2 = v21 + 1;
              *((_QWORD *)this + 1) = v21 + 1;
              v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0)
                break;
              v23 += 7;
              v21 = v2;
              v14 = v24++ > 8;
              if (v14)
              {
                LODWORD(v25) = 0;
                break;
              }
            }
          }
LABEL_52:
          *(_DWORD *)(a1 + 24) = v25;
        }
        else
        {
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
        }
        goto LABEL_53;
      }
      *(_BYTE *)(a1 + 28) |= 1u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
        goto LABEL_47;
      }
    }
    *((_BYTE *)this + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)this + 2);
  }
  return i == 0;
}

uint64_t sub_18F2F3348(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 16));
    }
  }
  else if ((*(_BYTE *)(result + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

_QWORD *sub_18F2F33C0(_QWORD *result)
{
  *result = &off_1E2950518;
  result[1] = 0;
  return result;
}

void sub_18F2F33D0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950518;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2F3410(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950518;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F3464(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F34B4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F30C1D0(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F367C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F2F3698(_QWORD *result)
{
  *result = &off_1E2950D30;
  result[1] = 0;
  return result;
}

void sub_18F2F36A8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950D30;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2F36E8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950D30;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F373C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F378C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F2F9BAC(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F3954(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F2F3970(_QWORD *result)
{
  *result = &off_1E29502B0;
  result[1] = 0;
  return result;
}

void sub_18F2F3980(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E29502B0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2F39C0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E29502B0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F3A14(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F3A64(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F30BAE4(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F3C2C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F2F3C48(_QWORD *result)
{
  *result = &off_1E29502E8;
  result[1] = 0;
  return result;
}

void sub_18F2F3C58(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E29502E8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2F3C98(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E29502E8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F3CEC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F3D3C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F31F8C0(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F3F04(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F2F3F20(_QWORD *result)
{
  *result = &off_1E2950D68;
  result[1] = 0;
  return result;
}

void sub_18F2F3F30(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950D68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2F3F70(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950D68;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F3FC4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F4014(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F329760(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F41DC(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F2F41F8(_QWORD *result)
{
  *result = &off_1E29515B8;
  result[1] = 0;
  return result;
}

void sub_18F2F4208(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E29515B8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2F4248(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E29515B8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F429C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F42EC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_1E294E8A8;
        v20[10] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F44C0(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F2F44DC(_QWORD *result)
{
  *result = &off_1E2951970;
  result[1] = 0;
  return result;
}

void sub_18F2F44EC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2951970;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2F452C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2951970;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F4580(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F45D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_1E29504A8;
        v20[4] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F47A4(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F2F47C0(_QWORD *result)
{
  *result = &off_1E29512E0;
  result[1] = 0;
  return result;
}

void sub_18F2F47D0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E29512E0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2F4810(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E29512E0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F4864(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F48B4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_QWORD *)operator new();
        *v20 = off_1E294DED0;
        v20[1] = 0;
        v20[2] = 0;
        v20[3] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F4A88(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F2F4AA4(_QWORD *result)
{
  *result = &off_1E2950DA0;
  result[1] = 0;
  return result;
}

void sub_18F2F4AB4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950DA0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2F4AF4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950DA0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F4B48(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F4B98(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_1E294D140;
        v20[16] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F4D6C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F2F4D88(_QWORD *result)
{
  *result = &off_1E2951698;
  result[1] = 0;
  return result;
}

void sub_18F2F4D98(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2951698;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2F4DD8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2951698;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F4E2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F4E7C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_QWORD *)operator new();
        *v20 = off_1E294F5C8;
        v20[1] = 0;
        v20[2] = 0;
        v20[3] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

_QWORD *sub_18F2F5050(_QWORD *result)
{
  *result = off_1E294F5C8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_18F2F5064(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

void sub_18F2F5080(void **a1)
{
  void **v2;

  *a1 = off_1E294F5C8;
  v2 = a1 + 1;
  sub_18F26F770(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_18F2F50C8(void **a1)
{
  void **v3;

  *a1 = off_1E294F5C8;
  v3 = a1 + 1;
  sub_18F26F770(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x194001438]();
}

uint64_t sub_18F2F5124(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "workoutPriors");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F5190(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
      {
        sub_18F2F5330(v8);
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F5330(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E2950240;
  *(_DWORD *)(v2 + 32) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_18F26F8C0();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_18F26F8D4(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_18F26FBC0((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_18F2F5468(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F2F5484(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5))
    v5 = *v2++;
  return result;
}

_QWORD *sub_18F2F54CC(_QWORD *result)
{
  *result = &off_1E29500B8;
  result[1] = 0;
  return result;
}

void sub_18F2F54DC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E29500B8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2F551C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E29500B8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F5570(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F55C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        v21 = sub_18F281E90(v20);
        v22 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t, double))(*(_QWORD *)v22 + 8))(v22, v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F5788(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_18F2F57A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char v14;
  id v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  id v20;
  char v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], a2, a3, a4, a5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(char *)(a1 + 23) >= 0)
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, a1, v7, v8);
  else
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, *(_QWORD *)a1, v7, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = 0;
  if ((objc_msgSend_fileExistsAtPath_isDirectory_(v9, v11, (uint64_t)v10, (uint64_t)&v21, v12) & 1) != 0)
  {
    if (!v21)
    {
LABEL_15:
      v17 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v20 = 0;
    v14 = objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(v9, v13, (uint64_t)v10, 1, 0, &v20);
    v15 = v20;
    v16 = v15;
    if ((v14 & 1) == 0)
    {
      if (qword_1EE16E710 != -1)
        dispatch_once(&qword_1EE16E710, &unk_1E2952C48);
      v18 = qword_1EE16E708;
      if (os_log_type_enabled((os_log_t)qword_1EE16E708, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138543618;
        v23 = v10;
        v24 = 2114;
        v25 = v16;
        _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_INFO, "Unable to create directory at path: %{public}@, error, %{public}@", buf, 0x16u);
      }

      goto LABEL_15;
    }

  }
  v17 = 1;
LABEL_16:

  return v17;
}

void sub_18F2F5928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F2F5950(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  id v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  id v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  void *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  _BOOL4 v40;
  id v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  const void **v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  id v57;
  char v58;
  _BYTE v59[128];
  _BYTE buf[12];
  __int16 v61;
  id v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], (const char *)a2, a3, a4, a5);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)MEMORY[0x1E0C99E98];
  if (*(char *)(a1 + 23) >= 0)
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v9, a1, v10, v11);
  else
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v9, *(_QWORD *)a1, v10, v11);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fileURLWithPath_(v13, v15, (uint64_t)v14, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v57 = 0;
  objc_msgSend_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(v12, v19, (uint64_t)v18, 0, 4, &v57);
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = v57;

  if (v20)
  {
    if (qword_1EE16E710 != -1)
      dispatch_once(&qword_1EE16E710, &unk_1E2952C48);
    v24 = qword_1EE16E708;
    if (os_log_type_enabled((os_log_t)qword_1EE16E708, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 23) >= 0)
        v25 = a1;
      else
        v25 = *(_QWORD *)a1;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v25;
      v61 = 2114;
      v62 = v20;
      _os_log_impl(&dword_18F1DC000, v24, OS_LOG_TYPE_INFO, "Unable to list files at path: %{public}s, error, %{public}@", buf, 0x16u);
    }
  }
  else
  {
    if (*(char *)(a2 + 23) >= 0)
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v21, a2, v22, v23);
    else
      objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v21, *(_QWORD *)a2, v22, v23);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v27 = v52;
    v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)&v53, (uint64_t)v59, 16);
    if (v33)
    {
      v34 = *(_QWORD *)v54;
      do
      {
        for (i = 0; i != v33; ++i)
        {
          if (*(_QWORD *)v54 != v34)
            objc_enumerationMutation(v27);
          v36 = *(void **)(*((_QWORD *)&v53 + 1) + 8 * i);
          objc_msgSend_pathExtension(v36, v29, v30, v31, v32);
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          v40 = objc_msgSend_compare_options_(v37, v38, (uint64_t)v26, 1, v39) == 0;

          if (v40)
          {
            v41 = objc_retainAutorelease(v36);
            v46 = (char *)objc_msgSend_fileSystemRepresentation(v41, v42, v43, v44, v45);
            *(_QWORD *)buf = v46;
            v47 = a6[1];
            if (v47 >= a6[2])
            {
              v48 = sub_18F2F5E9C(a6, (char **)buf);
            }
            else
            {
              sub_18F270374((_QWORD *)a6[1], v46);
              v48 = v47 + 24;
              a6[1] = v47 + 24;
            }
            a6[1] = v48;
          }
        }
        v33 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v29, (uint64_t)&v53, (uint64_t)v59, 16);
      }
      while (v33);
    }

    v49 = (const void **)a6[1];
    v50 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v49 - *a6) >> 3));
    if (v49 == (const void **)*a6)
      v51 = 0;
    else
      v51 = v50;
    sub_18F2F5FA0(*a6, v49, (uint64_t)&v58, v51, 1);

  }
}

void sub_18F2F5C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;

  *(_QWORD *)(v12 - 128) = v10;
  sub_18F2AA514((void ***)(v12 - 128));
  _Unwind_Resume(a1);
}

void sub_18F2F5CEC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  char v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  id v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], a2, a3, a4, a5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(char *)(a1 + 23) >= 0)
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, a1, v7, v8);
  else
    objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v6, *(_QWORD *)a1, v7, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = 0;
  v13 = objc_msgSend_removeItemAtPath_error_(v9, v11, (uint64_t)v10, (uint64_t)&v17, v12);
  v14 = v17;

  if ((v13 & 1) == 0)
  {
    if (qword_1EE16E710 != -1)
      dispatch_once(&qword_1EE16E710, &unk_1E2952C48);
    v15 = qword_1EE16E708;
    if (os_log_type_enabled((os_log_t)qword_1EE16E708, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 23) >= 0)
        v16 = a1;
      else
        v16 = *(_QWORD *)a1;
      *(_DWORD *)buf = 136446466;
      v19 = v16;
      v20 = 2114;
      v21 = v14;
      _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_INFO, "Unable to delete file %{public}s, error, %{public}@", buf, 0x16u);
    }
  }

}

void sub_18F2F5E48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F2F5E6C()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MotionSensorLogging", "MSL");
  v1 = (void *)qword_1EE16E708;
  qword_1EE16E708 = (uint64_t)v0;

}

uint64_t sub_18F2F5E9C(uint64_t *a1, char **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_18F26F8C0();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_18F2AC910(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v15 = v14;
  v16 = &v10[24 * v9];
  sub_18F270374(v14, *a2);
  v15 = v14 + 24;
  sub_18F2B0E70(a1, &v13);
  v11 = a1[1];
  sub_18F2B0FF8((uint64_t)&v13);
  return v11;
}

void sub_18F2F5F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F2B0FF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F2F5FA0(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
  const void **v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void **v16;
  uint64_t v17;
  const void **v18;
  const void **v19;
  const void **v20;
  __int128 v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  const void *v28;
  const void *v29;

LABEL_1:
  v9 = a2 - 3;
  v10 = (const void **)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_18F2B46A0(a3, a2 - 3, v10))
        {
          v29 = v10[2];
          v27 = *(_OWORD *)v10;
          v25 = *(_OWORD *)v9;
          v10[2] = *(a2 - 1);
          *(_OWORD *)v10 = v25;
          *(_OWORD *)v9 = v27;
          *(a2 - 1) = v29;
        }
        return;
      case 3uLL:
        sub_18F2F6568(v10, v10 + 3, a2 - 3, a3);
        return;
      case 4uLL:
        sub_18F2F6BFC((uint64_t)v10, v10 + 3, v10 + 6, (__int128 *)(a2 - 3), a3);
        return;
      case 5uLL:
        sub_18F2F6CE4((uint64_t)v10, v10 + 3, v10 + 6, (__int128 *)(v10 + 9), (__int128 *)(a2 - 3), a3);
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0)
            sub_18F2F6344((uint64_t)v10, a2, a3);
          else
            sub_18F2F6464(v10, a2, a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          if ((unint64_t)v13 < 0xC01)
          {
            sub_18F2F6568(&v10[3 * v15], v10, a2 - 3, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_18F2F6568(v10, &v10[3 * v15], a2 - 3, a3);
            v17 = 3 * v15;
            v18 = &v10[3 * v15 - 3];
            sub_18F2F6568(v10 + 3, v18, a2 - 6, a3);
            v19 = v10 + 6;
            v20 = &v10[v17 + 3];
            sub_18F2F6568(v19, v20, a2 - 9, a3);
            sub_18F2F6568(v18, v16, v20, a3);
            v28 = *(const void **)(a1 + 16);
            v26 = *(_OWORD *)a1;
            v21 = *(_OWORD *)v16;
            *(_QWORD *)(a1 + 16) = v16[2];
            *(_OWORD *)a1 = v21;
            v16[2] = v28;
            *(_OWORD *)v16 = v26;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (!sub_18F2B46A0(a3, (const void **)(a1 - 24), (const void **)a1))
          {
            v10 = sub_18F2F66B0((const void **)a1, (unint64_t)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v22 = sub_18F2F6840((__int128 *)a1, a2, a3);
          if ((v23 & 1) == 0)
            goto LABEL_14;
          v24 = sub_18F2F69CC(a1, v22, a3);
          v10 = (const void **)(v22 + 24);
          if (!sub_18F2F69CC(v22 + 24, (uint64_t)a2, a3))
          {
            v11 = v12 + 1;
            if (v24)
              continue;
LABEL_14:
            sub_18F2F5FA0(a1, v22, a3, -v12, a5 & 1);
            v10 = (const void **)(v22 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (const void **)v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          sub_18F2F6E04((uint64_t)v10, (__int128 *)a2, (__int128 *)a2, a3);
        return;
    }
  }
}

  v10 = a2 - 24;
  v167 = (__int128 *)(a2 - 72);
  v168 = (__int128 *)(a2 - 48);
  v11 = a1;
  v170 = a2;
  while (2)
  {
    a1 = v11;
    v12 = a2 - v11;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v11) >> 3);
    switch(v13)
    {
      case 0:
      case 1:
        return;
      case 2:
        v82 = *a3;
        v83 = *(_QWORD *)(a2 - 8);
        v178 = *(_OWORD *)(a2 - 24);
        v179 = v83;
        v84 = *(_QWORD *)(a1 + 16);
        v176 = *(_OWORD *)a1;
        v177 = v84;
        if (v82(&v178, &v176))
        {
          v85 = *(_OWORD *)a1;
          v203 = *(_QWORD *)(a1 + 16);
          v202 = v85;
          v86 = *(_OWORD *)v10;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(v10 + 16);
          *(_OWORD *)a1 = v86;
          v87 = v202;
          *(_DWORD *)(v10 + 16) = v203;
          *(_OWORD *)v10 = v87;
        }
        return;
      case 3:
        sub_18F3591A8((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)v10, a3);
        return;
      case 4:
        sub_18F3595D4(a1, a1 + 24, a1 + 48, (__int128 *)v10, a3);
        return;
      case 5:
        sub_18F35971C(a1, a1 + 24, a1 + 48, a1 + 72, (__int128 *)v10, a3);
        return;
      default:
        if (v12 <= 575)
        {
          v88 = a1 + 24;
          v89 = a1 == a2 || v88 == a2;
          v90 = v89;
          if ((a5 & 1) != 0)
          {
            if ((v90 & 1) == 0)
            {
              v91 = 0;
              v92 = a1;
              do
              {
                v93 = v92;
                v92 = v88;
                v94 = *a3;
                v95 = *(_QWORD *)(v92 + 16);
                v202 = *(_OWORD *)v92;
                v203 = v95;
                v96 = *(_QWORD *)(v93 + 16);
                v200 = *(_OWORD *)v93;
                v201 = v96;
                if (v94(&v202, &v200))
                {
                  v97 = *(_OWORD *)v92;
                  v199 = *(_QWORD *)(v92 + 16);
                  v198 = v97;
                  v98 = v91;
                  while (1)
                  {
                    v99 = a1 + v98;
                    *(_OWORD *)(v99 + 24) = *(_OWORD *)(a1 + v98);
                    *(_DWORD *)(v99 + 40) = *(_DWORD *)(a1 + v98 + 16);
                    if (!v98)
                      break;
                    v100 = *a3;
                    v196 = v198;
                    v197 = v199;
                    v101 = *(_QWORD *)(v99 - 8);
                    v194 = *(_OWORD *)(v99 - 24);
                    v195 = v101;
                    v98 -= 24;
                    if (!v100(&v196, &v194))
                    {
                      v102 = a1 + v98 + 24;
                      goto LABEL_74;
                    }
                  }
                  v102 = a1;
LABEL_74:
                  v103 = v198;
                  *(_DWORD *)(v102 + 16) = v199;
                  *(_OWORD *)v102 = v103;
                  a2 = v170;
                }
                v88 = v92 + 24;
                v91 += 24;
              }
              while (v92 + 24 != a2);
            }
          }
          else if ((v90 & 1) == 0)
          {
            do
            {
              v156 = a1;
              a1 = v88;
              v157 = *a3;
              v158 = *(_QWORD *)(a1 + 16);
              v202 = *(_OWORD *)a1;
              v203 = v158;
              v159 = *(_QWORD *)(v156 + 16);
              v200 = *(_OWORD *)v156;
              v201 = v159;
              if (v157(&v202, &v200))
              {
                v160 = *(_OWORD *)a1;
                v199 = *(_QWORD *)(a1 + 16);
                v198 = v160;
                v161 = a1;
                do
                {
                  v162 = v161 - 24;
                  *(_OWORD *)v161 = *(_OWORD *)(v161 - 24);
                  *(_DWORD *)(v161 + 16) = *(_DWORD *)(v161 - 8);
                  v163 = *a3;
                  v196 = v198;
                  v197 = v199;
                  v164 = *(_QWORD *)(v161 - 32);
                  v194 = *(_OWORD *)(v161 - 48);
                  v195 = v164;
                  v165 = v163(&v196, &v194);
                  v161 = v162;
                }
                while (v165);
                v166 = v198;
                *(_DWORD *)(v162 + 16) = v199;
                *(_OWORD *)v162 = v166;
                a2 = v170;
              }
              v88 = a1 + 24;
            }
            while (a1 + 24 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v104 = (unint64_t)(v13 - 2) >> 1;
            v169 = v104;
            do
            {
              v105 = v104;
              if (v169 >= v104)
              {
                v106 = (2 * v104) | 1;
                v107 = a1 + 24 * v106;
                if (2 * v104 + 2 < v13)
                {
                  v108 = *a3;
                  v109 = *(_QWORD *)(v107 + 16);
                  v202 = *(_OWORD *)v107;
                  v203 = v109;
                  v110 = *(_QWORD *)(v107 + 40);
                  v200 = *(_OWORD *)(v107 + 24);
                  v201 = v110;
                  if (v108(&v202, &v200))
                  {
                    v107 += 24;
                    v106 = 2 * v105 + 2;
                  }
                }
                v111 = a1 + 24 * v105;
                v112 = *a3;
                v113 = *(_QWORD *)(v107 + 16);
                v198 = *(_OWORD *)v107;
                v199 = v113;
                v114 = *(_QWORD *)(v111 + 16);
                v196 = *(_OWORD *)v111;
                v197 = v114;
                if (!v112(&v198, &v196))
                {
                  v115 = *(_OWORD *)v111;
                  v195 = *(_QWORD *)(v111 + 16);
                  v194 = v115;
                  do
                  {
                    v116 = v107;
                    v117 = *(_OWORD *)v107;
                    *(_DWORD *)(v111 + 16) = *(_DWORD *)(v107 + 16);
                    *(_OWORD *)v111 = v117;
                    if (v169 < v106)
                      break;
                    v118 = (2 * v106) | 1;
                    v107 = a1 + 24 * v118;
                    v119 = 2 * v106 + 2;
                    if (v119 < v13)
                    {
                      v120 = *a3;
                      v121 = *(_QWORD *)(v107 + 16);
                      v192 = *(_OWORD *)v107;
                      v193 = v121;
                      v122 = *(_QWORD *)(v107 + 40);
                      v190 = *(_OWORD *)(v107 + 24);
                      v191 = v122;
                      if (v120(&v192, &v190))
                      {
                        v107 += 24;
                        v118 = v119;
                      }
                    }
                    v123 = *a3;
                    v124 = *(_QWORD *)(v107 + 16);
                    v188 = *(_OWORD *)v107;
                    v189 = v124;
                    v186 = v194;
                    v187 = v195;
                    v111 = v116;
                    v106 = v118;
                  }
                  while (!v123(&v188, &v186));
                  v125 = v194;
                  *(_DWORD *)(v116 + 16) = v195;
                  *(_OWORD *)v116 = v125;
                }
              }
              v104 = v105 - 1;
            }
            while (v105);
            v126 = v12 / 0x18uLL;
            v127 = (_OWORD *)v170;
            do
            {
              v171 = v127;
              v128 = 0;
              v129 = *(_OWORD *)a1;
              v193 = *(_QWORD *)(a1 + 16);
              v192 = v129;
              v130 = v126 - 2;
              if (v126 < 2)
                v130 = v126 - 1;
              v131 = v130 >> 1;
              v132 = a1;
              do
              {
                v133 = v132 + 24 * v128 + 24;
                v134 = (2 * v128) | 1;
                v135 = 2 * v128 + 2;
                if (v135 < v126)
                {
                  v136 = *a3;
                  v137 = *(_QWORD *)(v133 + 16);
                  v202 = *(_OWORD *)v133;
                  v203 = v137;
                  v138 = *(_QWORD *)(v133 + 40);
                  v200 = *(_OWORD *)(v133 + 24);
                  v201 = v138;
                  if (v136(&v202, &v200))
                  {
                    v133 += 24;
                    v134 = v135;
                  }
                }
                v139 = *(_OWORD *)v133;
                *(_DWORD *)(v132 + 16) = *(_DWORD *)(v133 + 16);
                *(_OWORD *)v132 = v139;
                v132 = v133;
                v128 = v134;
              }
              while (v134 <= v131);
              v127 = (_OWORD *)((char *)v171 - 24);
              if ((_OWORD *)v133 == (_OWORD *)((char *)v171 - 24))
              {
                v154 = v192;
                *(_DWORD *)(v133 + 16) = v193;
                *(_OWORD *)v133 = v154;
              }
              else
              {
                v140 = *v127;
                *(_DWORD *)(v133 + 16) = *((_DWORD *)v171 - 2);
                *(_OWORD *)v133 = v140;
                v141 = v192;
                *((_DWORD *)v171 - 2) = v193;
                *v127 = v141;
                v142 = v133 - a1 + 24;
                if (v142 >= 25)
                {
                  v143 = (v142 / 0x18uLL - 2) >> 1;
                  v144 = a1 + 24 * v143;
                  v145 = *a3;
                  v146 = *(_QWORD *)(v144 + 16);
                  v202 = *(_OWORD *)v144;
                  v203 = v146;
                  v147 = *(_QWORD *)(v133 + 16);
                  v200 = *(_OWORD *)v133;
                  v201 = v147;
                  if (v145(&v202, &v200))
                  {
                    v148 = *(_OWORD *)v133;
                    v199 = *(_QWORD *)(v133 + 16);
                    v198 = v148;
                    do
                    {
                      v149 = v144;
                      v150 = *(_OWORD *)v144;
                      *(_DWORD *)(v133 + 16) = *(_DWORD *)(v144 + 16);
                      *(_OWORD *)v133 = v150;
                      if (!v143)
                        break;
                      v143 = (v143 - 1) >> 1;
                      v144 = a1 + 24 * v143;
                      v151 = *a3;
                      v152 = *(_QWORD *)(v144 + 16);
                      v196 = *(_OWORD *)v144;
                      v197 = v152;
                      v194 = v198;
                      v195 = v199;
                      v133 = v149;
                    }
                    while (v151(&v196, &v194));
                    v153 = v198;
                    *(_DWORD *)(v149 + 16) = v199;
                    *(_OWORD *)v149 = v153;
                  }
                }
                v127 = (_OWORD *)((char *)v171 - 24);
              }
            }
            while (v126-- > 2);
          }
          return;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = a1 + 24 * ((unint64_t)v13 >> 1);
        if ((unint64_t)v12 < 0xC01)
        {
          sub_18F3591A8((__int128 *)v15, (__int128 *)a1, (__int128 *)v10, a3);
        }
        else
        {
          sub_18F3591A8((__int128 *)a1, (__int128 *)v15, (__int128 *)v10, a3);
          v16 = 3 * v14;
          sub_18F3591A8((__int128 *)(a1 + 24), (__int128 *)(a1 + 8 * v16 - 24), v168, a3);
          sub_18F3591A8((__int128 *)(a1 + 48), (__int128 *)(a1 + 24 + 8 * v16), v167, a3);
          sub_18F3591A8((__int128 *)(a1 + 8 * v16 - 24), (__int128 *)v15, (__int128 *)(a1 + 24 + 8 * v16), a3);
          v17 = *(_OWORD *)a1;
          v203 = *(_QWORD *)(a1 + 16);
          v202 = v17;
          v18 = *(_DWORD *)(v15 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v15;
          *(_DWORD *)(a1 + 16) = v18;
          v19 = v202;
          *(_DWORD *)(v15 + 16) = v203;
          *(_OWORD *)v15 = v19;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v20 = *a3;
          v21 = *(_QWORD *)(a1 - 8);
          v174 = *(_OWORD *)(a1 - 24);
          v175 = v21;
          v22 = *(_QWORD *)(a1 + 16);
          v172 = *(_OWORD *)a1;
          v173 = v22;
          if (!v20(&v174, &v172))
          {
            v52 = *(_OWORD *)a1;
            v201 = *(_QWORD *)(a1 + 16);
            v200 = v52;
            v53 = *a3;
            v54 = *(_QWORD *)(a1 + 16);
            v198 = *(_OWORD *)a1;
            v199 = v54;
            v55 = *(_QWORD *)(v10 + 16);
            v196 = *(_OWORD *)v10;
            v197 = v55;
            v56 = v53(&v198, &v196);
            v57 = a1;
            a2 = v170;
            if (v56)
            {
              do
              {
                v11 = v57 + 24;
                v58 = *a3;
                v194 = v200;
                v195 = v201;
                v59 = *(_QWORD *)(v57 + 40);
                v192 = *(_OWORD *)(v57 + 24);
                v193 = v59;
                v60 = v58(&v194, &v192);
                v57 = v11;
              }
              while (!v60);
            }
            else
            {
              v61 = a1 + 24;
              do
              {
                v11 = v61;
                if (v61 >= v170)
                  break;
                v62 = *a3;
                v194 = v200;
                v195 = v201;
                v63 = *(_QWORD *)(v11 + 16);
                v192 = *(_OWORD *)v11;
                v193 = v63;
                v64 = v62(&v194, &v192);
                v61 = v11 + 24;
              }
              while (!v64);
            }
            v65 = v170;
            if (v11 < v170)
            {
              v66 = v170;
              do
              {
                v65 = v66 - 24;
                v67 = *a3;
                v190 = v200;
                v191 = v201;
                v68 = *(_QWORD *)(v66 - 8);
                v188 = *(_OWORD *)(v66 - 24);
                v189 = v68;
                v69 = v67(&v190, &v188);
                v66 = v65;
              }
              while (v69);
            }
            while (v11 < v65)
            {
              v70 = *(_OWORD *)v11;
              v203 = *(_QWORD *)(v11 + 16);
              v202 = v70;
              v71 = *(_OWORD *)v65;
              *(_DWORD *)(v11 + 16) = *(_DWORD *)(v65 + 16);
              *(_OWORD *)v11 = v71;
              v72 = v202;
              *(_DWORD *)(v65 + 16) = v203;
              *(_OWORD *)v65 = v72;
              do
              {
                v186 = v200;
                v187 = v201;
                v73 = *(_QWORD *)(v11 + 40);
                v74 = *(_OWORD *)(v11 + 24);
                v11 += 24;
                v75 = *a3;
                v184 = v74;
                v185 = v73;
              }
              while (!v75(&v186, &v184));
              do
              {
                v182 = v200;
                v183 = v201;
                v76 = *(_QWORD *)(v65 - 8);
                v77 = *(_OWORD *)(v65 - 24);
                v65 -= 24;
                v78 = *a3;
                v180 = v77;
                v181 = v76;
              }
              while (v78(&v182, &v180));
            }
            v79 = (__int128 *)(v11 - 24);
            if (v11 - 24 != a1)
            {
              v80 = *v79;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(v11 - 8);
              *(_OWORD *)a1 = v80;
            }
            a5 = 0;
            v81 = v200;
            *(_DWORD *)(v11 - 8) = v201;
            *v79 = v81;
            continue;
          }
        }
        v23 = 0;
        v24 = *(_OWORD *)a1;
        v201 = *(_QWORD *)(a1 + 16);
        v200 = v24;
        do
        {
          v25 = *a3;
          v26 = *(_QWORD *)(a1 + v23 + 40);
          v198 = *(_OWORD *)(a1 + v23 + 24);
          v199 = v26;
          v196 = v200;
          v197 = v201;
          v23 += 24;
        }
        while (v25(&v198, &v196));
        v27 = a1 + v23;
        v28 = v170;
        v89 = v23 == 24;
        a2 = v170;
        if (v89)
        {
          v33 = v170;
          while (v27 < v33)
          {
            v34 = *a3;
            v29 = v33 - 24;
            v35 = *(_QWORD *)(v33 - 8);
            v194 = *(_OWORD *)(v33 - 24);
            v195 = v35;
            v192 = v200;
            v193 = v201;
            v36 = v34(&v194, &v192);
            v33 = v29;
            if (v36)
              goto LABEL_20;
          }
          v29 = v33;
        }
        else
        {
          do
          {
            v29 = v28 - 24;
            v30 = *a3;
            v31 = *(_QWORD *)(v28 - 8);
            v194 = *(_OWORD *)(v28 - 24);
            v195 = v31;
            v192 = v200;
            v193 = v201;
            v32 = v30(&v194, &v192);
            v28 = v29;
          }
          while (!v32);
        }
LABEL_20:
        if (v27 >= v29)
        {
          v48 = v27 - 24;
        }
        else
        {
          v37 = v27;
          v38 = (__int128 *)v29;
          do
          {
            v39 = *(_OWORD *)v37;
            v203 = *(_QWORD *)(v37 + 16);
            v202 = v39;
            v40 = *v38;
            *(_DWORD *)(v37 + 16) = *((_DWORD *)v38 + 4);
            *(_OWORD *)v37 = v40;
            v41 = v202;
            *((_DWORD *)v38 + 4) = v203;
            *v38 = v41;
            do
            {
              v42 = *(_QWORD *)(v37 + 40);
              v43 = *(_OWORD *)(v37 + 24);
              v37 += 24;
              v44 = *a3;
              v190 = v43;
              v191 = v42;
              v188 = v200;
              v189 = v201;
            }
            while (v44(&v190, &v188));
            do
            {
              v45 = *((_QWORD *)v38 - 1);
              v46 = *(__int128 *)((char *)v38 - 24);
              v38 = (__int128 *)((char *)v38 - 24);
              v47 = *a3;
              v186 = v46;
              v187 = v45;
              v184 = v200;
              v185 = v201;
            }
            while (!v47(&v186, &v184));
          }
          while (v37 < (unint64_t)v38);
          v48 = v37 - 24;
        }
        if (v48 != a1)
        {
          v49 = *(_OWORD *)v48;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(v48 + 16);
          *(_OWORD *)a1 = v49;
        }
        v50 = v200;
        *(_DWORD *)(v48 + 16) = v201;
        *(_OWORD *)v48 = v50;
        if (v27 < v29)
        {
LABEL_33:
          sub_18F358594(a1, v48, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v48 + 24;
          continue;
        }
        v51 = sub_18F359388(a1, v48, a3);
        v11 = v48 + 24;
        if (!sub_18F359388(v48 + 24, v170, a3))
        {
          if (v51)
            continue;
          goto LABEL_33;
        }
        a2 = v48;
        if (!v51)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v39 = *(float *)(a2 - 24);
        v38 = a2 - 24;
        if (v39 < *(float *)v8)
        {
          v98 = *(_QWORD *)(v8 + 16);
          v90 = *(_OWORD *)v8;
          v40 = *(_OWORD *)v38;
          *(_QWORD *)(v8 + 16) = *(_QWORD *)(v38 + 16);
          *(_OWORD *)v8 = v40;
          *(_QWORD *)(v38 + 16) = v98;
          *(_OWORD *)v38 = v90;
        }
        return;
      case 3:
        sub_18F4709B0((__int128 *)v8, (__int128 *)(v8 + 24), (__int128 *)(a2 - 24));
        return;
      case 4:
        sub_18F470C84(v8, v8 + 24, v8 + 48, a2 - 24);
        return;
      case 5:
        sub_18F470D50((__n128 *)v8, (__n128 *)(v8 + 24), (__n128 *)(v8 + 48), (__n128 *)(v8 + 72), (__n128 *)(a2 - 24));
        return;
      default:
        if (v9 <= 575)
        {
          v41 = v8 + 24;
          v43 = v8 == a2 || v41 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = v8;
              do
              {
                v46 = v41;
                v47 = *(float *)(v45 + 24);
                if (v47 < *(float *)v45)
                {
                  v91 = *(_OWORD *)(v45 + 28);
                  v99 = *(_DWORD *)(v45 + 44);
                  v48 = v44;
                  while (1)
                  {
                    v49 = v8 + v48;
                    *(_OWORD *)(v49 + 24) = *(_OWORD *)(v8 + v48);
                    *(_QWORD *)(v49 + 40) = *(_QWORD *)(v8 + v48 + 16);
                    if (!v48)
                      break;
                    v48 -= 24;
                    if (v47 >= *(float *)(v49 - 24))
                    {
                      v50 = v8 + v48 + 24;
                      goto LABEL_71;
                    }
                  }
                  v50 = v8;
LABEL_71:
                  *(float *)v50 = v47;
                  *(_DWORD *)(v50 + 20) = v99;
                  *(_OWORD *)(v50 + 4) = v91;
                }
                v41 = v46 + 24;
                v44 += 24;
                v45 = v46;
              }
              while (v46 + 24 != a2);
            }
          }
          else if (!v43)
          {
            do
            {
              v77 = v41;
              v78 = *(float *)(a1 + 24);
              if (v78 < *(float *)a1)
              {
                v94 = *(_OWORD *)(a1 + 28);
                v102 = *(_DWORD *)(a1 + 44);
                v79 = v41;
                do
                {
                  *(_OWORD *)v79 = *(_OWORD *)(v79 - 24);
                  *(_QWORD *)(v79 + 16) = *(_QWORD *)(v79 - 8);
                  v80 = *(float *)(v79 - 48);
                  v79 -= 24;
                }
                while (v78 < v80);
                *(float *)v79 = v78;
                *(_DWORD *)(v79 + 20) = v102;
                *(_OWORD *)(v79 + 4) = v94;
              }
              v41 += 24;
              a1 = v77;
            }
            while (v77 + 24 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            do
            {
              v53 = v52;
              if (v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = v8 + 24 * v54;
                if (2 * v53 + 2 < v10 && *(float *)v55 < *(float *)(v55 + 24))
                {
                  v55 += 24;
                  v54 = 2 * v53 + 2;
                }
                v56 = v8 + 24 * v53;
                v57 = *(float *)v56;
                if (*(float *)v55 >= *(float *)v56)
                {
                  v100 = *(_DWORD *)(v56 + 20);
                  v92 = *(_OWORD *)(v56 + 4);
                  do
                  {
                    v58 = v56;
                    v56 = v55;
                    v59 = *(_OWORD *)v55;
                    *(_QWORD *)(v58 + 16) = *(_QWORD *)(v55 + 16);
                    *(_OWORD *)v58 = v59;
                    if (v51 < v54)
                      break;
                    v60 = 2 * v54;
                    v54 = (2 * v54) | 1;
                    v55 = v8 + 24 * v54;
                    v61 = v60 + 2;
                    if (v61 < v10 && *(float *)v55 < *(float *)(v55 + 24))
                    {
                      v55 += 24;
                      v54 = v61;
                    }
                  }
                  while (*(float *)v55 >= v57);
                  *(float *)v56 = v57;
                  *(_DWORD *)(v56 + 20) = v100;
                  *(_OWORD *)(v56 + 4) = v92;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            v62 = v9 / 0x18uLL;
            do
            {
              v63 = 0;
              v101 = *(_QWORD *)(v8 + 16);
              v93 = *(_OWORD *)v8;
              v64 = v8;
              do
              {
                v65 = v64;
                v64 += 24 * v63 + 24;
                v66 = 2 * v63;
                v63 = (2 * v63) | 1;
                v67 = v66 + 2;
                if (v67 < v62 && *(float *)v64 < *(float *)(v64 + 24))
                {
                  v64 += 24;
                  v63 = v67;
                }
                v68 = *(_OWORD *)v64;
                *(_QWORD *)(v65 + 16) = *(_QWORD *)(v64 + 16);
                *(_OWORD *)v65 = v68;
              }
              while (v63 <= (uint64_t)((unint64_t)(v62 - 2) >> 1));
              a2 -= 24;
              if (v64 == a2)
              {
                *(_QWORD *)(v64 + 16) = v101;
                *(_OWORD *)v64 = v93;
              }
              else
              {
                v69 = *(_OWORD *)a2;
                *(_QWORD *)(v64 + 16) = *(_QWORD *)(a2 + 16);
                *(_OWORD *)v64 = v69;
                *(_QWORD *)(a2 + 16) = v101;
                *(_OWORD *)a2 = v93;
                v70 = v64 - v8 + 24;
                if (v70 >= 25)
                {
                  v71 = (v70 / 0x18uLL - 2) >> 1;
                  v72 = v8 + 24 * v71;
                  v73 = *(float *)v64;
                  if (*(float *)v72 < *(float *)v64)
                  {
                    v86 = *(_DWORD *)(v64 + 20);
                    v83 = *(_OWORD *)(v64 + 4);
                    do
                    {
                      v74 = v64;
                      v64 = v72;
                      v75 = *(_OWORD *)v72;
                      *(_QWORD *)(v74 + 16) = *(_QWORD *)(v72 + 16);
                      *(_OWORD *)v74 = v75;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = v8 + 24 * v71;
                    }
                    while (*(float *)v72 < v73);
                    *(float *)v64 = v73;
                    *(_DWORD *)(v64 + 20) = v86;
                    *(_OWORD *)(v64 + 4) = v83;
                  }
                }
              }
            }
            while (v62-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          sub_18F4709B0((__int128 *)(a1 + 24 * v11), (__int128 *)a1, (__int128 *)(a2 - 24));
        }
        else
        {
          sub_18F4709B0((__int128 *)a1, (__int128 *)(a1 + 24 * v11), (__int128 *)(a2 - 24));
          v13 = 3 * v11;
          v14 = (__int128 *)(a1 + 24 * v11 - 24);
          sub_18F4709B0((__int128 *)(a1 + 24), v14, (__int128 *)(a2 - 48));
          v15 = (__int128 *)(a1 + 24 + 8 * v13);
          sub_18F4709B0((__int128 *)(a1 + 48), v15, (__int128 *)(a2 - 72));
          sub_18F4709B0(v14, (__int128 *)v12, v15);
          v95 = *(_QWORD *)(a1 + 16);
          v87 = *(_OWORD *)a1;
          v16 = *(_QWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = v16;
          *(_QWORD *)(v12 + 16) = v95;
          *(_OWORD *)v12 = v87;
        }
        --a3;
        v17 = *(float *)a1;
        if ((a4 & 1) == 0 && *(float *)(a1 - 24) >= v17)
        {
          v85 = *(_DWORD *)(a1 + 20);
          v82 = *(_OWORD *)(a1 + 4);
          if (v17 >= *(float *)(a2 - 24))
          {
            v31 = a1 + 24;
            do
            {
              v8 = v31;
              if (v31 >= a2)
                break;
              v31 += 24;
            }
            while (v17 >= *(float *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v30 = *(float *)(v8 + 24);
              v8 += 24;
            }
            while (v17 >= v30);
          }
          v32 = a2;
          if (v8 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(float *)(v32 - 24);
              v32 -= 24;
            }
            while (v17 < v33);
          }
          while (v8 < v32)
          {
            v97 = *(_QWORD *)(v8 + 16);
            v89 = *(_OWORD *)v8;
            v34 = *(_OWORD *)v32;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v32 + 16);
            *(_OWORD *)v8 = v34;
            *(_QWORD *)(v32 + 16) = v97;
            *(_OWORD *)v32 = v89;
            do
            {
              v35 = *(float *)(v8 + 24);
              v8 += 24;
            }
            while (v17 >= v35);
            do
            {
              v36 = *(float *)(v32 - 24);
              v32 -= 24;
            }
            while (v17 < v36);
          }
          if (v8 - 24 != a1)
          {
            v37 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)a1 = v37;
          }
          a4 = 0;
          *(float *)(v8 - 24) = v17;
          *(_DWORD *)(v8 - 4) = v85;
          *(_OWORD *)(v8 - 20) = v82;
          continue;
        }
        v18 = 0;
        v84 = *(_DWORD *)(a1 + 20);
        v81 = *(_OWORD *)(a1 + 4);
        do
        {
          v19 = *(float *)(a1 + v18 + 24);
          v18 += 24;
        }
        while (v19 < v17);
        v20 = a1 + v18;
        v21 = a2;
        if (v18 == 24)
        {
          v21 = a2;
          do
          {
            if (v20 >= v21)
              break;
            v23 = *(float *)(v21 - 24);
            v21 -= 24;
          }
          while (v23 >= v17);
        }
        else
        {
          do
          {
            v22 = *(float *)(v21 - 24);
            v21 -= 24;
          }
          while (v22 >= v17);
        }
        v8 = a1 + v18;
        if (v20 < v21)
        {
          v24 = v21;
          do
          {
            v96 = *(_QWORD *)(v8 + 16);
            v88 = *(_OWORD *)v8;
            v25 = *(_OWORD *)v24;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v24 + 16);
            *(_OWORD *)v8 = v25;
            *(_QWORD *)(v24 + 16) = v96;
            *(_OWORD *)v24 = v88;
            do
            {
              v26 = *(float *)(v8 + 24);
              v8 += 24;
            }
            while (v26 < v17);
            do
            {
              v27 = *(float *)(v24 - 24);
              v24 -= 24;
            }
            while (v27 >= v17);
          }
          while (v8 < v24);
        }
        if (v8 - 24 != a1)
        {
          v28 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)a1 = v28;
        }
        *(float *)(v8 - 24) = v17;
        *(_DWORD *)(v8 - 4) = v84;
        *(_OWORD *)(v8 - 20) = v81;
        if (v20 < v21)
        {
LABEL_29:
          sub_18F470128(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = sub_18F470AA0(a1, v8 - 24);
        if (!sub_18F470AA0(v8, a2))
        {
          if (v29)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 24;
        if (!v29)
          goto LABEL_1;
        return;
    }
  }
}

void sub_18F2F6344(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const void **v7;
  uint64_t v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;

  if ((const void **)a1 != a2)
  {
    v19 = v3;
    v20 = v4;
    v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      v9 = 0;
      v10 = (const void **)a1;
      do
      {
        v11 = v10;
        v10 = v7;
        if (sub_18F2B46A0(a3, v7, v11))
        {
          v17 = *(_OWORD *)v10;
          v18 = v10[2];
          v10[1] = 0;
          v10[2] = 0;
          *v10 = 0;
          v12 = v9;
          do
          {
            v13 = a1 + v12;
            v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0)
              operator delete(*v14);
            *(_OWORD *)v14 = *(_OWORD *)v13;
            *(_QWORD *)(a1 + v12 + 40) = *(_QWORD *)(v13 + 16);
            *(_BYTE *)(v13 + 23) = 0;
            *(_BYTE *)v13 = 0;
            if (!v12)
            {
              v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (sub_18F2B46A0(a3, (const void **)&v17, (const void **)(v12 + a1)));
          v15 = *(char *)(a1 + v12 + 47);
          v16 = a1 + v12 + 24;
          if (v15 < 0)
            operator delete(*(void **)v16);
LABEL_13:
          *(_OWORD *)v16 = v17;
          *(_QWORD *)(v16 + 16) = v18;
        }
        v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void sub_18F2F6464(const void **a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const void **v6;
  const void **v7;
  const void **v9;
  const void **v10;
  const void **v11;
  void **v12;
  BOOL v13;
  int v14;
  const void **v15;
  __int128 v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v18 = v3;
    v19 = v4;
    v6 = a1;
    v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      v9 = a1 - 3;
      do
      {
        v10 = v6;
        v6 = v7;
        if (sub_18F2B46A0(a3, v7, v10))
        {
          v16 = *(_OWORD *)v6;
          v17 = v6[2];
          v6[1] = 0;
          v6[2] = 0;
          *v6 = 0;
          v11 = v9;
          do
          {
            v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0)
              operator delete(*v12);
            *(_OWORD *)v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((_BYTE *)v11 + 47) = 0;
            *((_BYTE *)v11 + 24) = 0;
            v13 = sub_18F2B46A0(a3, (const void **)&v16, v11);
            v11 -= 3;
          }
          while (v13);
          v14 = *((char *)v11 + 71);
          v15 = v11 + 6;
          if (v14 < 0)
            operator delete((void *)*v15);
          *(_OWORD *)v15 = v16;
          v15[2] = v17;
        }
        v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t sub_18F2F6568(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8;
  uint64_t result;
  const void *v10;
  __int128 v11;
  const void *v12;
  const void *v13;
  __int128 v14;
  const void *v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  __int128 v23;
  const void *v24;

  v8 = sub_18F2B46A0(a4, a2, a1);
  result = sub_18F2B46A0(a4, a3, a2);
  if (!v8)
  {
    if (!(_DWORD)result)
      return result;
    v13 = a2[2];
    v14 = *(_OWORD *)a2;
    v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!sub_18F2B46A0(a4, a2, a1))
      return 1;
    v16 = a1[2];
    v17 = *(_OWORD *)a1;
    v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v19 = a1[2];
    v20 = *(_OWORD *)a1;
    v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!sub_18F2B46A0(a4, a3, a2))
      return 1;
    v22 = a2[2];
    v23 = *(_OWORD *)a2;
    v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  v10 = a1[2];
  v11 = *(_OWORD *)a1;
  v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **sub_18F2F66B0(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  const void **v6;
  const void **v7;
  _BOOL4 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  const void *v17;
  __int128 v18;
  const void *v19;

  v4 = a2;
  v16 = *(_OWORD *)a1;
  v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (sub_18F2B46A0(a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    v6 = a1;
    do
      v6 += 3;
    while (!sub_18F2B46A0(a3, (const void **)&v16, v6));
  }
  else
  {
    v7 = a1 + 3;
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= v4)
        break;
      v8 = sub_18F2B46A0(a3, (const void **)&v16, v7);
      v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (sub_18F2B46A0(a3, (const void **)&v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    v9 = *(_OWORD *)v6;
    v19 = v6[2];
    v18 = v9;
    v10 = *(_OWORD *)v4;
    v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)v6 = v10;
    v11 = v18;
    *(_QWORD *)(v4 + 16) = v19;
    *(_OWORD *)v4 = v11;
    do
      v6 += 3;
    while (!sub_18F2B46A0(a3, (const void **)&v16, v6));
    do
      v4 -= 24;
    while (sub_18F2B46A0(a3, (const void **)&v16, (const void **)v4));
  }
  v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0)
      operator delete(*v12);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete((void *)*a1);
    v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((_BYTE *)v6 - 1) = 0;
    *((_BYTE *)v6 - 24) = 0;
  }
  v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)v12 = v14;
  return v6;
}

unint64_t sub_18F2F6840(__int128 *a1, const void **a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void **v9;
  __int128 v10;
  const void *v11;
  const void *v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  const void *v20;

  v6 = 0;
  v17 = *a1;
  v18 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  do
    v6 += 24;
  while (sub_18F2B46A0(a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2)
        break;
      a2 -= 3;
    }
    while (!sub_18F2B46A0(a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!sub_18F2B46A0(a3, a2, (const void **)&v17));
  }
  v8 = (unint64_t)a1 + v6;
  if (v7 < (unint64_t)a2)
  {
    v9 = a2;
    do
    {
      v19 = *(_OWORD *)v8;
      v10 = v19;
      v20 = *(const void **)(v8 + 16);
      v11 = v20;
      v12 = v9[2];
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 16) = v12;
      v9[2] = v11;
      *(_OWORD *)v9 = v10;
      do
        v8 += 24;
      while (sub_18F2B46A0(a3, (const void **)v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!sub_18F2B46A0(a3, v9, (const void **)&v17));
    }
    while (v8 < (unint64_t)v9);
  }
  v13 = (void **)(v8 - 24);
  if ((__int128 *)(v8 - 24) == a1)
  {
    if (*(char *)(v8 - 1) < 0)
      operator delete(*v13);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete(*(void **)a1);
    v14 = *(_OWORD *)v13;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v8 - 8);
    *a1 = v14;
    *(_BYTE *)(v8 - 1) = 0;
    *(_BYTE *)(v8 - 24) = 0;
  }
  v15 = v17;
  *(_QWORD *)(v8 - 8) = v18;
  *(_OWORD *)v13 = v15;
  return v8 - 24;
}

BOOL sub_18F2F69CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 24;
      if (sub_18F2B46A0(a3, (const void **)(a2 - 24), (const void **)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_QWORD *)(a1 + 16) = v11;
        *(_OWORD *)v8 = v10;
        *(_QWORD *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      sub_18F2F6568((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_18F2F6BFC(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      sub_18F2F6CE4(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a1 + 72), (__int128 *)(a2 - 24), a3);
      return 1;
    default:
      v12 = (const void **)(a1 + 48);
      sub_18F2F6568((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if (sub_18F2B46A0(a3, (const void **)v13, v12))
    {
      v22 = *(_OWORD *)v13;
      v23 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = 0;
      v16 = v14;
      do
      {
        v17 = a1 + v16;
        v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0)
          operator delete(*v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 48);
        *(_QWORD *)(a1 + v16 + 88) = *(_QWORD *)(v17 + 64);
        *(_BYTE *)(v17 + 71) = 0;
        *(_BYTE *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          v21 = a1;
          goto LABEL_15;
        }
        v19 = sub_18F2B46A0(a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      v20 = *(char *)(a1 + v16 + 95);
      v21 = a1 + v16 + 72;
      if (v20 < 0)
        operator delete(*(void **)v21);
LABEL_15:
      *(_OWORD *)v21 = v22;
      *(_QWORD *)(v21 + 16) = v23;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

__n128 sub_18F2F6BFC(uint64_t a1, const void **a2, const void **a3, __int128 *a4, uint64_t a5)
{
  __n128 result;
  const void *v11;
  __int128 v12;
  const void *v13;
  const void *v14;
  __int128 v15;
  const void *v16;
  const void *v17;
  const void *v18;

  sub_18F2F6568((const void **)a1, a2, a3, a5);
  if (sub_18F2B46A0(a5, (const void **)a4, a3))
  {
    v11 = a3[2];
    v12 = *(_OWORD *)a3;
    v13 = (const void *)*((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((_QWORD *)a4 + 2) = v11;
    if (sub_18F2B46A0(a5, a3, a2))
    {
      v14 = a2[2];
      v15 = *(_OWORD *)a2;
      v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (sub_18F2B46A0(a5, a2, (const void **)a1))
      {
        v17 = *(const void **)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 sub_18F2F6CE4(uint64_t a1, const void **a2, const void **a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  const void *v23;

  sub_18F2F6BFC(a1, a2, a3, a4, a6);
  if (sub_18F2B46A0(a6, (const void **)a5, (const void **)a4))
  {
    v13 = *((_QWORD *)a4 + 2);
    v14 = *a4;
    v15 = *((_QWORD *)a5 + 2);
    *a4 = *a5;
    *((_QWORD *)a4 + 2) = v15;
    *a5 = v14;
    *((_QWORD *)a5 + 2) = v13;
    if (sub_18F2B46A0(a6, (const void **)a4, a3))
    {
      v16 = a3[2];
      v17 = *(_OWORD *)a3;
      v18 = (const void *)*((_QWORD *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((_QWORD *)a4 + 2) = v16;
      if (sub_18F2B46A0(a6, a3, a2))
      {
        v19 = a2[2];
        v20 = *(_OWORD *)a2;
        v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (sub_18F2B46A0(a6, a2, (const void **)a1))
        {
          v22 = *(const void **)(a1 + 16);
          result = *(__n128 *)a1;
          v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

__int128 *sub_18F2F6E04(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int64_t v18;
  __int128 *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  _BYTE v28[15];

  if ((__int128 *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        sub_18F2F704C(a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (sub_18F2B46A0(a4, (const void **)v14, (const void **)a1))
        {
          v15 = *((_QWORD *)v14 + 2);
          v16 = *v14;
          v17 = *(_QWORD *)(a1 + 16);
          *v14 = *(_OWORD *)a1;
          *((_QWORD *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(_QWORD *)(a1 + 16) = v15;
          sub_18F2F704C(a1, a4, v9, (__n128 *)a1);
        }
        v14 = (__int128 *)((char *)v14 + 24);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      v19 = (__int128 *)((char *)a2 - 24);
      do
      {
        v20 = *(_QWORD *)a1;
        *(_QWORD *)v28 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v28[7] = *(_QWORD *)(a1 + 15);
        v21 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v22 = sub_18F2F71E0(a1, a4, v18);
        v23 = v22;
        v24 = *(char *)(v22 + 23);
        if (v19 == (__int128 *)v22)
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          *(_QWORD *)v23 = v20;
          *(_QWORD *)(v23 + 8) = *(_QWORD *)v28;
          *(_QWORD *)(v23 + 15) = *(_QWORD *)&v28[7];
          *(_BYTE *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          v25 = *v19;
          *(_QWORD *)(v23 + 16) = *((_QWORD *)v19 + 2);
          *(_OWORD *)v23 = v25;
          *(_QWORD *)v19 = v20;
          *((_QWORD *)v19 + 1) = *(_QWORD *)v28;
          *(_QWORD *)((char *)v19 + 15) = *(_QWORD *)&v28[7];
          *((_BYTE *)v19 + 23) = v21;
          sub_18F2F72B8(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        v19 = (__int128 *)((char *)v19 - 24);
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_18F2F7034(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_18F2F704C(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 result;
  __n128 *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22 = v4;
    v23 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = a1 + 24 * v12;
      v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_18F2B46A0(a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        v12 = v14;
      }
      if (!sub_18F2B46A0(a2, (const void **)v13, (const void **)v7))
      {
        v20 = *v7;
        v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0)
            operator delete((void *)v7->n128_u64[0]);
          v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(_QWORD *)(v13 + 16);
          *v7 = v17;
          *(_BYTE *)(v13 + 23) = 0;
          *(_BYTE *)v13 = 0;
          if (v9 < v12)
            break;
          v18 = (2 * v12) | 1;
          v13 = a1 + 24 * v18;
          v19 = 2 * v12 + 2;
          if (v19 < a3 && sub_18F2B46A0(a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            v18 = v19;
          }
          v7 = v16;
          v12 = v18;
          if (sub_18F2B46A0(a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0)
              operator delete((void *)v16->n128_u64[0]);
            break;
          }
        }
        result = v20;
        v16[1].n128_u64[0] = v21;
        *v16 = result;
      }
    }
  }
  return result;
}

uint64_t sub_18F2F71E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 24 * v6 + 24;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_18F2B46A0(a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v12 = *(_OWORD *)v9;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(_BYTE *)(v9 + 23) = 0;
    *(_BYTE *)v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double sub_18F2F72B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  double result;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a4 >= 2)
  {
    v16 = v4;
    v17 = v5;
    v8 = (unint64_t)(a4 - 2) >> 1;
    v9 = (__int128 *)(a1 + 24 * v8);
    v10 = (__int128 *)(a2 - 24);
    if (sub_18F2B46A0(a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      v14 = *v10;
      v15 = *((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)v10 = 0;
      while (1)
      {
        v12 = v9;
        if (*((char *)v10 + 23) < 0)
          operator delete(*(void **)v10);
        v13 = *v9;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v9 + 2);
        *v10 = v13;
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)v9 = 0;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__int128 *)(a1 + 24 * v8);
        v10 = v12;
        if (!sub_18F2B46A0(a3, (const void **)v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0)
            operator delete(*(void **)v12);
          break;
        }
      }
      result = *(double *)&v14;
      *v12 = v14;
      *((_QWORD *)v12 + 2) = v15;
    }
  }
  return result;
}

uint64_t sub_18F2F73B4(uint64_t result)
{
  *(_QWORD *)result = &off_1E294DD80;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F2F73CC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F73F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "state");
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "timestampGestureBegin", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F7480(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  for (i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)this + 24))
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 28) |= 2u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 4u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_52;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_51;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_51:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_52:
        *(_DWORD *)(a1 + 24) = v25;
        goto LABEL_53;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        goto LABEL_53;
      }
      *(_BYTE *)(a1 + 28) |= 1u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_47:
        v2 = *((_QWORD *)this + 1) + 8;
        *((_QWORD *)this + 1) = v2;
        goto LABEL_53;
      }
    }
    *((_BYTE *)this + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)this + 2);
  }
  return i == 0;
}

uint64_t sub_18F2F774C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 16));
    }
  }
  else if ((*(_BYTE *)(result + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_18F2F77C4(uint64_t result)
{
  *(_QWORD *)result = &off_1E294EFA8;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_18F2F77DC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F7800(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "classificationType");
    v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "intervalSleepBeginToSleepDetected", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "intervalSleepDetectedToGazeDetected", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "intervalSleepDetectedToWakeDetected", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "intervalWakeBeginToWakeDetected", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "intervalWakeDetectedToGazeDetected", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "intervalWakeDetectedToSleepDetected", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "shouldNotify");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "shouldNotifyStats");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "sleepType");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_WORD *)(a1 + 64) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(this, "state");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 2) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "timestampGestureBegin", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F79D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_39;
            case 2u:
              *(_WORD *)(a1 + 64) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 60) = v22;
              goto LABEL_117;
            case 3u:
              *(_WORD *)(a1 + 64) |= 0x400u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_106;
                  }
                  v45 = v23++;
                  v46 = *(_BYTE *)(v24 + v45);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_105:
                    v2 = v45 + 1;
                    goto LABEL_106;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_105;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_106;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_106:
              *(_DWORD *)(a1 + 56) = v27;
              goto LABEL_117;
            case 4u:
              *(_WORD *)(a1 + 64) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_39:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_101;
            case 5u:
              *(_WORD *)(a1 + 64) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 61) = v30;
              goto LABEL_117;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 8u:
              *(_WORD *)(a1 + 64) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 9u:
              *(_WORD *)(a1 + 64) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_100:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_101:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_59:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_117;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 4u;
              v31 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v32 = *(_QWORD *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v35 = 0;
                if (v2 <= v31)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_111;
                  }
                  v49 = v31++;
                  v50 = *(_BYTE *)(v32 + v49);
                  *((_QWORD *)this + 1) = v31;
                  v35 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_110:
                    v2 = v49 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v35) = 0;
                goto LABEL_110;
              }
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v2 = v31 + 1;
                *((_QWORD *)this + 1) = v31 + 1;
                v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0)
                  goto LABEL_111;
                v33 += 7;
                v31 = v2;
                v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_111:
              *(_DWORD *)(a1 + 24) = v35;
              goto LABEL_117;
            case 0xDu:
              *(_WORD *)(a1 + 64) |= 0x200u;
              v37 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v38 = *(_QWORD *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v41 = 0;
                if (v2 <= v37)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_116;
                  }
                  v53 = v37++;
                  v54 = *(_BYTE *)(v38 + v53);
                  *((_QWORD *)this + 1) = v37;
                  v41 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_115:
                    v2 = v53 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v41) = 0;
                goto LABEL_115;
              }
              v39 = 0;
              v40 = 0;
              v41 = 0;
              do
              {
                v2 = v37 + 1;
                *((_QWORD *)this + 1) = v37 + 1;
                v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0)
                  goto LABEL_116;
                v39 += 7;
                v37 = v2;
                v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_116:
              *(_DWORD *)(a1 + 52) = v41;
LABEL_117:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_117;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F2F8060(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 64);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(result + 64) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 64) & 0x200) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F2F81F0(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E1A8;
  *(_DWORD *)(result + 100) = 0;
  return result;
}

void sub_18F2F8208(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F822C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitude", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 100);
    if ((v5 & 0x400) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(a1 + 100) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidence");
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "course", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "locationLoggingEnabled");
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "speedAccuracy", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(this, "type");
    if ((*(_WORD *)(a1 + 100) & 0x200) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x1000) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 0x200) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "verticalAccuracy", *(double *)(a1 + 80));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F83FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 100) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 2u:
              *(_WORD *)(a1 + 100) |= 0x1000u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_102;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_101:
                    v2 = v41 + 1;
                    goto LABEL_102;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_101;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_102;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_102:
              *(_DWORD *)(a1 + 96) = v25;
              goto LABEL_113;
            case 3u:
              *(_WORD *)(a1 + 100) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 4u:
              *(_WORD *)(a1 + 100) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 5u:
              *(_WORD *)(a1 + 100) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 6u:
              *(_WORD *)(a1 + 100) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 7u:
              *(_WORD *)(a1 + 100) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 8u:
              *(_WORD *)(a1 + 100) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 9u:
              *(_WORD *)(a1 + 100) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xAu:
              *(_WORD *)(a1 + 100) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_60;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xBu:
              *(_WORD *)(a1 + 100) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_97:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_60:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_113;
            case 0xCu:
              *(_WORD *)(a1 + 100) |= 0x400u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_107;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_106:
                    v2 = v45 + 1;
                    goto LABEL_107;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_106;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_107;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_107:
              *(_DWORD *)(a1 + 88) = v31;
              goto LABEL_113;
            case 0xDu:
              *(_WORD *)(a1 + 100) |= 0x800u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_112;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_111:
                    v2 = v49 + 1;
                    goto LABEL_112;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_111;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_112;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_112:
              *(_DWORD *)(a1 + 92) = v37;
LABEL_113:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_113;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F2F8A6C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 100);
  if ((v4 & 0x100) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 72));
    v4 = *(_WORD *)(v3 + 100);
    if ((v4 & 0x1000) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(result + 100) & 0x1000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 100) & 0x800) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F2F8BFC(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E1E0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_18F2F8C14(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F8C38(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "lockScreen");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F8C84(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F8E10(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this);
  return result;
}

_QWORD *sub_18F2F8E30(_QWORD *result)
{
  *result = &off_1E2951190;
  result[1] = 0;
  return result;
}

void sub_18F2F8E40(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2951190;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2F8E80(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2951190;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F8ED4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F8F24(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F2883B8(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F90EC(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_18F2F9108(uint64_t result)
{
  *(_QWORD *)result = &off_1E294DDB8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F2F9120(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F9144(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F91AC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v26 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v27 = *(_QWORD *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v37 = 0;
          v38 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v39 = v26++;
            v40 = *(_BYTE *)(v27 + v39);
            *((_QWORD *)this + 1) = v26;
            v30 |= (unint64_t)(v40 & 0x7F) << v37;
            if ((v40 & 0x80) == 0)
              break;
            v37 += 7;
            v14 = v38++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v39 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)this + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 16) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v33 = 0;
          v34 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v35 = v20++;
            v36 = *(_BYTE *)(v21 + v35);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0)
              break;
            v33 += 7;
            v14 = v34++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_59:
          v3 = v35 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v3 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v3;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F94D4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F2F952C(uint64_t result)
{
  *(_QWORD *)result = &off_1E294FE88;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_18F2F9540(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E294FE88;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_18F26F7EC((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

void sub_18F2F9580(PB::Base *a1)
{
  sub_18F2F9540(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F95A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "accessoryType");
    v5 = *(_BYTE *)(a1 + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "isAttached");
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F9624(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t result;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;
  uint64_t v43;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((v12 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v25 = *((_QWORD *)this + 1);
        if (v25 >= *((_QWORD *)this + 2))
        {
          v28 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v26 = v25 + 1;
          v27 = *(unsigned __int8 *)(*(_QWORD *)this + v25);
          *((_QWORD *)this + 1) = v26;
          v28 = v27 != 0;
        }
        *(_BYTE *)(a1 + 20) = v28;
      }
      else if ((_DWORD)v21 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v29 = *((_QWORD *)this + 1);
        v30 = *((_QWORD *)this + 2);
        v31 = *(_QWORD *)this;
        if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v30)
        {
          v38 = 0;
          v39 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_52;
            }
            v40 = v29 + 1;
            v41 = *(_BYTE *)(v31 + v29);
            *((_QWORD *)this + 1) = v40;
            v34 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v29 = v40;
            v15 = v39++ > 8;
            if (v15)
            {
LABEL_48:
              LODWORD(v34) = 0;
              goto LABEL_52;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v34) = 0;
        }
        else
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          while (1)
          {
            v35 = v29 + 1;
            *((_QWORD *)this + 1) = v29 + 1;
            v36 = *(_BYTE *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0)
              break;
            v32 += 7;
            v29 = v35;
            v15 = v33++ > 8;
            if (v15)
              goto LABEL_48;
          }
        }
LABEL_52:
        *(_DWORD *)(a1 + 16) = v34;
      }
      else if ((_DWORD)v21 == 1)
      {
        v22 = (_QWORD *)operator new();
        v22[1] = 0;
        v22[2] = 0;
        *v22 = 0;
        v43 = 0;
        v23 = *v8;
        *v8 = (uint64_t)v22;
        if (v23)
        {
          sub_18F26F7EC((uint64_t)v8, v23);
          v24 = v43;
          v43 = 0;
          if (v24)
            sub_18F26F7EC((uint64_t)&v43, v24);
        }
        PB::Reader::read();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F990C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  if (*(_QWORD *)(result + 8))
    result = PB::Writer::write();
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F2F9978(uint64_t result)
{
  *(_QWORD *)result = &off_1E294FEC0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_18F2F9990(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F99B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "isCharging");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F9A00(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2F9B8C(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F2F9BAC(uint64_t result)
{
  *(_QWORD *)result = &off_1E294CFB8;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_18F2F9BC4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2F9BE8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location");
    v5 = *(_BYTE *)(a1 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 36) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 28));
    if ((*(_BYTE *)(a1 + 36) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2F9CD8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 36) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_55;
            case 2u:
              *(_BYTE *)(a1 + 36) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_54;
            case 3u:
              *(_BYTE *)(a1 + 36) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_54;
            case 4u:
              *(_BYTE *)(a1 + 36) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_54;
            case 5u:
              *(_BYTE *)(a1 + 36) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_54:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_55:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_38:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_61;
            case 6u:
              *(_BYTE *)(a1 + 36) |= 2u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_60;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_59:
                    v2 = v29 + 1;
                    goto LABEL_60;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_59;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_60;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_60:
              *(_DWORD *)(a1 + 16) = v25;
LABEL_61:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_61;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F2FA060(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 36);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 36) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_18F2FA12C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E2944DD8;
  *(_DWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

void sub_18F2FA15C(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E2944DD8;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

void sub_18F2FA1CC(PB::Base *a1)
{
  sub_18F2FA15C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2FA1F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 32);
  v6 = *(float **)(a1 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "biasEst", v7);
  }
  v8 = *(float **)(a1 + 8);
  v9 = *(float **)(a1 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "biasEstVar", v10);
  }
  v11 = *(float **)(a1 + 56);
  v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "residual", v13);
  }
  v14 = *(float **)(a1 + 80);
  v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(this, "temperature", v16);
  }
  if ((*(_BYTE *)(a1 + 112) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 104));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F2FA2FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  _DWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  _DWORD *v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  char *v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  int v117;
  char *v118;
  int v119;
  char *v120;
  int v121;
  char *v122;
  int v123;
  unint64_t v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 56);
    v9 = (void **)(a1 + 80);
    v128 = a1 + 96;
    v129 = a1 + 72;
    v10 = (void **)(a1 + 8);
    v11 = (void **)(a1 + 32);
    v126 = a1 + 48;
    v127 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 112) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_196;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v25);
          v26 = *((_QWORD *)this + 1) + 8;
          goto LABEL_198;
        case 2u:
          if (v24 != 2)
          {
            v84 = *(char **)(a1 + 40);
            v83 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v84 >= v83)
            {
              v92 = (char *)*v11;
              v93 = (v84 - (_BYTE *)*v11) >> 2;
              v94 = v93 + 1;
              if ((unint64_t)(v93 + 1) >> 62)
LABEL_207:
                sub_18F26F8C0();
              v95 = v83 - (_QWORD)v92;
              if (v95 >> 1 > v94)
                v94 = v95 >> 1;
              if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
                v96 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v96 = v94;
              if (v96)
              {
                v97 = (char *)sub_18F26FB8C(v126, v96);
                v92 = *(char **)(a1 + 32);
                v84 = *(char **)(a1 + 40);
              }
              else
              {
                v97 = 0;
              }
              v116 = &v97[4 * v93];
              *(_DWORD *)v116 = 0;
              v85 = v116 + 4;
              while (v84 != v92)
              {
                v117 = *((_DWORD *)v84 - 1);
                v84 -= 4;
                *((_DWORD *)v116 - 1) = v117;
                v116 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v116;
              *(_QWORD *)(a1 + 40) = v85;
              *(_QWORD *)(a1 + 48) = &v97[4 * v96];
              if (v92)
                operator delete(v92);
            }
            else
            {
              *(_DWORD *)v84 = 0;
              v85 = v84 + 4;
            }
            *(_QWORD *)(a1 + 40) = v85;
            goto LABEL_194;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          while (v27 < v28 && !*((_BYTE *)this + 24))
          {
            v30 = *(char **)(a1 + 40);
            v29 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v11;
              v33 = (v30 - (_BYTE *)*v11) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_207;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_18F26FB8C(v126, v36);
                v32 = *(char **)(a1 + 32);
                v30 = *(char **)(a1 + 40);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v38;
              *(_QWORD *)(a1 + 40) = v31;
              *(_QWORD *)(a1 + 48) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *(_QWORD *)(a1 + 40) = v31;
            v40 = *((_QWORD *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
              goto LABEL_124;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)this + v40);
            v28 = *((_QWORD *)this + 2);
            v27 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v27;
          }
          goto LABEL_125;
        case 3u:
          if (v24 != 2)
          {
            v87 = *(char **)(a1 + 16);
            v86 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v87 >= v86)
            {
              v98 = (char *)*v10;
              v99 = (v87 - (_BYTE *)*v10) >> 2;
              v100 = v99 + 1;
              if ((unint64_t)(v99 + 1) >> 62)
LABEL_208:
                sub_18F26F8C0();
              v101 = v86 - (_QWORD)v98;
              if (v101 >> 1 > v100)
                v100 = v101 >> 1;
              if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
                v102 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v102 = v100;
              if (v102)
              {
                v103 = (char *)sub_18F26FB8C(v127, v102);
                v98 = *(char **)(a1 + 8);
                v87 = *(char **)(a1 + 16);
              }
              else
              {
                v103 = 0;
              }
              v118 = &v103[4 * v99];
              *(_DWORD *)v118 = 0;
              v85 = v118 + 4;
              while (v87 != v98)
              {
                v119 = *((_DWORD *)v87 - 1);
                v87 -= 4;
                *((_DWORD *)v118 - 1) = v119;
                v118 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v118;
              *(_QWORD *)(a1 + 16) = v85;
              *(_QWORD *)(a1 + 24) = &v103[4 * v102];
              if (v98)
                operator delete(v98);
            }
            else
            {
              *(_DWORD *)v87 = 0;
              v85 = v87 + 4;
            }
            *(_QWORD *)(a1 + 16) = v85;
            goto LABEL_194;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          while (v41 < v42 && !*((_BYTE *)this + 24))
          {
            v44 = *(char **)(a1 + 16);
            v43 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v10;
              v47 = (v44 - (_BYTE *)*v10) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                goto LABEL_208;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_18F26FB8C(v127, v50);
                v46 = *(char **)(a1 + 8);
                v44 = *(char **)(a1 + 16);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v52;
              *(_QWORD *)(a1 + 16) = v45;
              *(_QWORD *)(a1 + 24) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *(_QWORD *)(a1 + 16) = v45;
            v54 = *((_QWORD *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
              goto LABEL_124;
            *(v45 - 1) = *(_DWORD *)(*(_QWORD *)this + v54);
            v42 = *((_QWORD *)this + 2);
            v41 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v41;
          }
          goto LABEL_125;
        case 4u:
          if (v24 != 2)
          {
            v89 = *(char **)(a1 + 88);
            v88 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v89 >= v88)
            {
              v104 = (char *)*v9;
              v105 = (v89 - (_BYTE *)*v9) >> 2;
              v106 = v105 + 1;
              if ((unint64_t)(v105 + 1) >> 62)
LABEL_209:
                sub_18F26F8C0();
              v107 = v88 - (_QWORD)v104;
              if (v107 >> 1 > v106)
                v106 = v107 >> 1;
              if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
                v108 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v108 = v106;
              if (v108)
              {
                v109 = (char *)sub_18F26FB8C(v128, v108);
                v104 = *(char **)(a1 + 80);
                v89 = *(char **)(a1 + 88);
              }
              else
              {
                v109 = 0;
              }
              v120 = &v109[4 * v105];
              *(_DWORD *)v120 = 0;
              v85 = v120 + 4;
              while (v89 != v104)
              {
                v121 = *((_DWORD *)v89 - 1);
                v89 -= 4;
                *((_DWORD *)v120 - 1) = v121;
                v120 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v120;
              *(_QWORD *)(a1 + 88) = v85;
              *(_QWORD *)(a1 + 96) = &v109[4 * v108];
              if (v104)
                operator delete(v104);
            }
            else
            {
              *(_DWORD *)v89 = 0;
              v85 = v89 + 4;
            }
            *(_QWORD *)(a1 + 88) = v85;
            goto LABEL_194;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v55 = *((_QWORD *)this + 1);
          v56 = *((_QWORD *)this + 2);
          while (v55 < v56 && !*((_BYTE *)this + 24))
          {
            v58 = *(char **)(a1 + 88);
            v57 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v58 >= v57)
            {
              v60 = (char *)*v9;
              v61 = (v58 - (_BYTE *)*v9) >> 2;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 62)
                goto LABEL_209;
              v63 = v57 - (_QWORD)v60;
              if (v63 >> 1 > v62)
                v62 = v63 >> 1;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                v64 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v64 = v62;
              if (v64)
              {
                v65 = (char *)sub_18F26FB8C(v128, v64);
                v60 = *(char **)(a1 + 80);
                v58 = *(char **)(a1 + 88);
              }
              else
              {
                v65 = 0;
              }
              v66 = &v65[4 * v61];
              *(_DWORD *)v66 = 0;
              v59 = v66 + 4;
              while (v58 != v60)
              {
                v67 = *((_DWORD *)v58 - 1);
                v58 -= 4;
                *((_DWORD *)v66 - 1) = v67;
                v66 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v66;
              *(_QWORD *)(a1 + 88) = v59;
              *(_QWORD *)(a1 + 96) = &v65[4 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_DWORD *)v58 = 0;
              v59 = v58 + 4;
            }
            *(_QWORD *)(a1 + 88) = v59;
            v68 = *((_QWORD *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
              goto LABEL_124;
            *(v59 - 1) = *(_DWORD *)(*(_QWORD *)this + v68);
            v56 = *((_QWORD *)this + 2);
            v55 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v55;
          }
          goto LABEL_125;
        case 5u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v69 = *((_QWORD *)this + 1);
            v70 = *((_QWORD *)this + 2);
            while (v69 < v70 && !*((_BYTE *)this + 24))
            {
              v72 = *(char **)(a1 + 64);
              v71 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v72 >= v71)
              {
                v74 = (char *)*v8;
                v75 = (v72 - (_BYTE *)*v8) >> 2;
                v76 = v75 + 1;
                if ((unint64_t)(v75 + 1) >> 62)
                  goto LABEL_210;
                v77 = v71 - (_QWORD)v74;
                if (v77 >> 1 > v76)
                  v76 = v77 >> 1;
                if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
                  v78 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v78 = v76;
                if (v78)
                {
                  v79 = (char *)sub_18F26FB8C(v129, v78);
                  v74 = *(char **)(a1 + 56);
                  v72 = *(char **)(a1 + 64);
                }
                else
                {
                  v79 = 0;
                }
                v80 = &v79[4 * v75];
                *(_DWORD *)v80 = 0;
                v73 = v80 + 4;
                while (v72 != v74)
                {
                  v81 = *((_DWORD *)v72 - 1);
                  v72 -= 4;
                  *((_DWORD *)v80 - 1) = v81;
                  v80 -= 4;
                }
                *(_QWORD *)(a1 + 56) = v80;
                *(_QWORD *)(a1 + 64) = v73;
                *(_QWORD *)(a1 + 72) = &v79[4 * v78];
                if (v74)
                  operator delete(v74);
              }
              else
              {
                *(_DWORD *)v72 = 0;
                v73 = v72 + 4;
              }
              *(_QWORD *)(a1 + 64) = v73;
              v82 = *((_QWORD *)this + 1);
              if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)this + 2))
              {
LABEL_124:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v73 - 1) = *(_DWORD *)(*(_QWORD *)this + v82);
              v70 = *((_QWORD *)this + 2);
              v69 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v69;
            }
LABEL_125:
            PB::Reader::recallMark();
          }
          else
          {
            v91 = *(char **)(a1 + 64);
            v90 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v91 >= v90)
            {
              v110 = (char *)*v8;
              v111 = (v91 - (_BYTE *)*v8) >> 2;
              v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 62)
LABEL_210:
                sub_18F26F8C0();
              v113 = v90 - (_QWORD)v110;
              if (v113 >> 1 > v112)
                v112 = v113 >> 1;
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL)
                v114 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v114 = v112;
              if (v114)
              {
                v115 = (char *)sub_18F26FB8C(v129, v114);
                v110 = *(char **)(a1 + 56);
                v91 = *(char **)(a1 + 64);
              }
              else
              {
                v115 = 0;
              }
              v122 = &v115[4 * v111];
              *(_DWORD *)v122 = 0;
              v85 = v122 + 4;
              while (v91 != v110)
              {
                v123 = *((_DWORD *)v91 - 1);
                v91 -= 4;
                *((_DWORD *)v122 - 1) = v123;
                v122 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v122;
              *(_QWORD *)(a1 + 64) = v85;
              *(_QWORD *)(a1 + 72) = &v115[4 * v114];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *(_DWORD *)v91 = 0;
              v85 = v91 + 4;
            }
            *(_QWORD *)(a1 + 64) = v85;
LABEL_194:
            v124 = *((_QWORD *)this + 1);
            if (v124 <= 0xFFFFFFFFFFFFFFFBLL && v124 + 4 <= *((_QWORD *)this + 2))
            {
              *(v85 - 1) = *(_DWORD *)(*(_QWORD *)this + v124);
              v26 = *((_QWORD *)this + 1) + 4;
LABEL_198:
              *((_QWORD *)this + 1) = v26;
            }
            else
            {
LABEL_196:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_199:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_199;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2FABEC(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 112) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 104));
  v4 = (float *)v3[4];
  v5 = (float *)v3[5];
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = (float *)v3[1];
  v8 = (float *)v3[2];
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = (float *)v3[10];
  v11 = (float *)v3[11];
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12);
  }
  v14 = (float *)v3[7];
  v13 = (float *)v3[8];
  while (v14 != v13)
  {
    v15 = *v14++;
    result = PB::Writer::write(this, v15);
  }
  return result;
}

uint64_t sub_18F2FACAC(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E6B0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_18F2FACC4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2FACE8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "exitingSaturation");
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "extendedSaturation");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "shiftInSaturation");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "timeSinceLastRemag");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 44) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "timeSinceLastRemagTrigger");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 8) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "triggerCount");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2FADF8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_97;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_86;
                  }
                  v47 = v21++;
                  v48 = *(_BYTE *)(v22 + v47);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_85:
                    v2 = v47 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_85;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_86;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_86:
              *(_QWORD *)(a1 + 16) = v25;
              goto LABEL_97;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_90:
                    v2 = v51 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_90;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_91;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_91:
              *(_QWORD *)(a1 + 8) = v31;
              goto LABEL_97;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_96;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_95:
                    v2 = v55 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v37 = 0;
                goto LABEL_95;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_96;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_96:
              *(_QWORD *)(a1 + 32) = v37;
LABEL_97:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 42) = v40;
              goto LABEL_97;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v42 = v41 != 0;
              }
              *(_BYTE *)(a1 + 40) = v42;
              goto LABEL_97;
            case 7u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v44 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v43 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v44 = v43 != 0;
              }
              *(_BYTE *)(a1 + 41) = v44;
              goto LABEL_97;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_97;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F2FB33C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_14:
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F2FB424(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E6E8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F2FB43C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2FB460(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "isAppleMapsRoutingActive");
    v5 = *(_WORD *)(a1 + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isBicycleRouting");
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "isBicycleRoutingActive");
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "isPedestrianRouting");
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "isPedestrianRoutingActive");
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "isStepTypeBicycle");
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "isVehicularRouting");
    if ((*(_WORD *)(a1 + 20) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "isStepTypePedestrian");
  v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x80) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "isVehicularRoutingActive");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2FB5B0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 20) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v21 = v20 != 0;
              }
              *(_BYTE *)(a1 + 15) = v21;
              goto LABEL_60;
            case 2u:
              *(_WORD *)(a1 + 20) |= 2u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 9) = v24;
              goto LABEL_60;
            case 3u:
              *(_WORD *)(a1 + 20) |= 8u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v26 = v25 != 0;
              }
              *(_BYTE *)(a1 + 11) = v26;
              goto LABEL_60;
            case 4u:
              *(_WORD *)(a1 + 20) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 13) = v28;
              goto LABEL_60;
            case 5u:
              *(_WORD *)(a1 + 20) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 14) = v30;
              goto LABEL_60;
            case 6u:
              *(_WORD *)(a1 + 20) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v32 = v31 != 0;
              }
              *(_BYTE *)(a1 + 12) = v32;
              goto LABEL_60;
            case 7u:
              *(_WORD *)(a1 + 20) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 16) = v34;
              goto LABEL_60;
            case 8u:
              *(_WORD *)(a1 + 20) |= 4u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v36 = v35 != 0;
              }
              *(_BYTE *)(a1 + 10) = v36;
              goto LABEL_60;
            case 9u:
              *(_WORD *)(a1 + 20) |= 1u;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              if (v2 >= v3)
              {
                v38 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v37 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v38 = v37 != 0;
              }
              *(_BYTE *)(a1 + 8) = v38;
              goto LABEL_60;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
LABEL_60:
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F2FB978(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 20);
  if ((v4 & 0x80) != 0)
  {
    result = PB::Writer::write(this);
    v4 = *(_WORD *)(v3 + 20);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_18:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 20) & 1) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F2FBA98(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951F60;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F2FBAB0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2FBAD4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "mets", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "metsDiff", *(float *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "metsWR", *(float *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 28) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "metsHR", *(float *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "source");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2FBBA4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_42;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_42;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_42;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_56;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_55;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_56;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *(_DWORD *)(a1 + 24) = v25;
LABEL_57:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_51:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_42:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_57;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_57;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F2FBEEC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 12));
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 12));
  return result;
}

_QWORD *sub_18F2FBF9C(_QWORD *result)
{
  *result = &off_1E294EFE0;
  result[23] = 0;
  return result;
}

void sub_18F2FBFB4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2FBFD8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryPercentage", *(float *)(a1 + 32));
    v5 = *(_QWORD *)(a1 + 184);
    if ((v5 & 0x8000000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_50;
    }
  }
  else if ((v5 & 0x8000000000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "asymmetryPercentageIsValid");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "asymmetryPercentageRejectionStatus");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "boundaryType");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "cycleTimeEntropy", *(float *)(a1 + 44));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "cycleTimeMean", *(float *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "cycleTimePoincareSD1", *(float *)(a1 + 52));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "cycleTimePoincareSD2", *(float *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "deviceSide");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_12;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "doubleSupportPercentage", *(float *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "doubleSupportPercentageIsValid");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0)
      goto LABEL_14;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "doubleSupportPercentageRejectionStatus");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_16;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "invalidGradePercentage", *(double *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_17;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "isHeightSet");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "isWeightSet");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "numGaitMetrics");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "rejectionStatus");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "segmentsRejectedByIsCadenceConcordant");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "segmentsRejectedByIsFeasibleWalkingSpeed");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "segmentsRejectedByIsNotRunning");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v5 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "segmentsRejectedByIsPendular");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v5 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "segmentsRejectedByIsSufficientVerticalTwist");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v5 & 4) == 0)
      goto LABEL_26;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "segmentsRejectedByIsSwingStanceCycle");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 4) == 0)
  {
LABEL_26:
    if ((v5 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x200000) == 0)
  {
LABEL_27:
    if ((v5 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "stepCount");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x400000) == 0)
  {
LABEL_28:
    if ((v5 & 0x800000) == 0)
      goto LABEL_29;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityAP", *(float *)(a1 + 108));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x800000) == 0)
  {
LABEL_29:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_30;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityML", *(float *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityVT", *(float *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_32;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "stepLength", *(float *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_33;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "stepLengthEntropy", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_34;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "stepLengthIsValid");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_35;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "stepLengthPoincareSD1", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_36;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "stepLengthPoincareSD2", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_37;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "stepLengthRejectionStatus");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityAP", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_39;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityML", *(float *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_40;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityVT", *(float *)(a1 + 148));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_41;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "terminationReason");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_42;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "userHeight", *(float *)(a1 + 156));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_43;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "userWeight", *(float *)(a1 + 160));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_44;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "walkingSpeed", *(float *)(a1 + 164));
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_45;
LABEL_91:
    PB::TextFormatter::format(this, "walkingSpeedRejectionStatus");
    if ((*(_QWORD *)(a1 + 184) & 0x4000000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_46;
  }
LABEL_90:
  PB::TextFormatter::format(this, "walkingSpeedIsValid");
  v5 = *(_QWORD *)(a1 + 184);
  if ((v5 & 0x2000000000) != 0)
    goto LABEL_91;
LABEL_45:
  if ((v5 & 0x4000000000) != 0)
LABEL_46:
    PB::TextFormatter::format(this, "workoutType");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2FC5A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  int v176;
  BOOL v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  int v181;
  BOOL v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  char v186;
  unsigned int v187;
  uint64_t v188;
  unint64_t v189;
  char v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  char v204;
  unsigned int v205;
  unint64_t v206;
  char v207;
  char v208;
  unsigned int v209;
  unint64_t v210;
  char v211;
  char v212;
  unsigned int v213;
  unint64_t v214;
  char v215;
  char v216;
  unsigned int v217;
  unint64_t v218;
  char v219;
  char v220;
  unsigned int v221;
  unint64_t v222;
  char v223;
  char v224;
  unsigned int v225;
  unint64_t v226;
  char v227;
  char v228;
  unsigned int v229;
  unint64_t v230;
  char v231;
  char v232;
  unsigned int v233;
  unint64_t v234;
  char v235;
  char v236;
  unsigned int v237;
  unint64_t v238;
  char v239;
  char v240;
  unsigned int v241;
  unint64_t v242;
  char v243;
  char v244;
  unsigned int v245;
  unint64_t v246;
  char v247;
  char v248;
  unsigned int v249;
  unint64_t v250;
  char v251;
  char v252;
  unsigned int v253;
  unint64_t v254;
  char v255;
  char v256;
  unsigned int v257;
  unint64_t v258;
  char v259;
  char v260;
  unsigned int v261;
  unint64_t v262;
  char v263;
  char v264;
  unsigned int v265;
  unint64_t v266;
  char v267;
  char v268;
  unsigned int v269;
  unint64_t v270;
  char v271;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)(a1 + 184) |= 4uLL;
          v20 = *((_QWORD *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v20);
          goto LABEL_62;
        case 2u:
          *(_QWORD *)(a1 + 184) |= 1uLL;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v22);
          goto LABEL_62;
        case 3u:
          *(_QWORD *)(a1 + 184) |= 0x200000uLL;
          v23 = *((_QWORD *)this + 1);
          v24 = *((_QWORD *)this + 2);
          v25 = *(_QWORD *)this;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            do
            {
              v29 = v23 + 1;
              *((_QWORD *)this + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                goto LABEL_364;
              v26 += 7;
              v23 = v29;
              v14 = v27++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v28) = 0;
            goto LABEL_364;
          }
          v204 = 0;
          v205 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v206 = v23 + 1;
              v207 = *(_BYTE *)(v25 + v23);
              *((_QWORD *)this + 1) = v206;
              v28 |= (unint64_t)(v207 & 0x7F) << v204;
              if (v207 < 0)
              {
                v204 += 7;
                v23 = v206;
                v14 = v205++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v28) = 0;
            }
            break;
          }
LABEL_364:
          *(_DWORD *)(a1 + 104) = v28;
          goto LABEL_356;
        case 4u:
          *(_QWORD *)(a1 + 184) |= 0x1000000000uLL;
          v31 = *((_QWORD *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(_QWORD *)this + v31);
          goto LABEL_354;
        case 5u:
          *(_QWORD *)(a1 + 184) |= 0x100000000000uLL;
          v32 = *((_QWORD *)this + 1);
          if (v32 >= *((_QWORD *)this + 2))
          {
            v35 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v33 = v32 + 1;
            v34 = *(unsigned __int8 *)(*(_QWORD *)this + v32);
            *((_QWORD *)this + 1) = v33;
            v35 = v34 != 0;
          }
          *(_BYTE *)(a1 + 181) = v35;
          goto LABEL_356;
        case 6u:
          *(_QWORD *)(a1 + 184) |= 0x800uLL;
          v36 = *((_QWORD *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v36);
          goto LABEL_354;
        case 7u:
          *(_QWORD *)(a1 + 184) |= 0x10000000000uLL;
          v37 = *((_QWORD *)this + 1);
          if (v37 >= *((_QWORD *)this + 2))
          {
            v40 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v38 = v37 + 1;
            v39 = *(unsigned __int8 *)(*(_QWORD *)this + v37);
            *((_QWORD *)this + 1) = v38;
            v40 = v39 != 0;
          }
          *(_BYTE *)(a1 + 177) = v40;
          goto LABEL_356;
        case 8u:
          *(_QWORD *)(a1 + 184) |= 0x2000000uLL;
          v41 = *((_QWORD *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v41);
          goto LABEL_354;
        case 9u:
          *(_QWORD *)(a1 + 184) |= 0x80000000000uLL;
          v42 = *((_QWORD *)this + 1);
          if (v42 >= *((_QWORD *)this + 2))
          {
            v45 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v43 = v42 + 1;
            v44 = *(unsigned __int8 *)(*(_QWORD *)this + v42);
            *((_QWORD *)this + 1) = v43;
            v45 = v44 != 0;
          }
          *(_BYTE *)(a1 + 180) = v45;
          goto LABEL_356;
        case 0xAu:
          *(_QWORD *)(a1 + 184) |= 0x4000uLL;
          v46 = *((_QWORD *)this + 1);
          v47 = *((_QWORD *)this + 2);
          v48 = *(_QWORD *)this;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            v49 = 0;
            v50 = 0;
            v51 = 0;
            do
            {
              v52 = v46 + 1;
              *((_QWORD *)this + 1) = v46 + 1;
              v53 = *(_BYTE *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0)
                goto LABEL_368;
              v49 += 7;
              v46 = v52;
              v14 = v50++ > 8;
            }
            while (!v14);
LABEL_241:
            LODWORD(v51) = 0;
            goto LABEL_368;
          }
          v208 = 0;
          v209 = 0;
          v51 = 0;
          if (v47 <= v46)
            v47 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v47 == v46)
            {
              LODWORD(v51) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v210 = v46 + 1;
              v211 = *(_BYTE *)(v48 + v46);
              *((_QWORD *)this + 1) = v210;
              v51 |= (unint64_t)(v211 & 0x7F) << v208;
              if (v211 < 0)
              {
                v208 += 7;
                v46 = v210;
                v14 = v209++ > 8;
                if (v14)
                  goto LABEL_241;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v51) = 0;
            }
            break;
          }
LABEL_368:
          *(_DWORD *)(a1 + 76) = v51;
          goto LABEL_356;
        case 0xBu:
          *(_QWORD *)(a1 + 184) |= 2uLL;
          v54 = *((_QWORD *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v54);
LABEL_62:
          v55 = *((_QWORD *)this + 1) + 8;
          goto LABEL_355;
        case 0xCu:
          *(_QWORD *)(a1 + 184) |= 8uLL;
          v56 = *((_QWORD *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v56);
          goto LABEL_354;
        case 0xDu:
          *(_QWORD *)(a1 + 184) |= 0x8000000000uLL;
          v57 = *((_QWORD *)this + 1);
          if (v57 >= *((_QWORD *)this + 2))
          {
            v60 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v58 = v57 + 1;
            v59 = *(unsigned __int8 *)(*(_QWORD *)this + v57);
            *((_QWORD *)this + 1) = v58;
            v60 = v59 != 0;
          }
          *(_BYTE *)(a1 + 176) = v60;
          goto LABEL_356;
        case 0xEu:
          *(_QWORD *)(a1 + 184) |= 0x2000uLL;
          v61 = *((_QWORD *)this + 1);
          v62 = *((_QWORD *)this + 2);
          v63 = *(_QWORD *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            do
            {
              v67 = v61 + 1;
              *((_QWORD *)this + 1) = v61 + 1;
              v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0)
                goto LABEL_372;
              v64 += 7;
              v61 = v67;
              v14 = v65++ > 8;
            }
            while (!v14);
LABEL_250:
            LODWORD(v66) = 0;
            goto LABEL_372;
          }
          v212 = 0;
          v213 = 0;
          v66 = 0;
          if (v62 <= v61)
            v62 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v214 = v61 + 1;
              v215 = *(_BYTE *)(v63 + v61);
              *((_QWORD *)this + 1) = v214;
              v66 |= (unint64_t)(v215 & 0x7F) << v212;
              if (v215 < 0)
              {
                v212 += 7;
                v61 = v214;
                v14 = v213++ > 8;
                if (v14)
                  goto LABEL_250;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v66) = 0;
            }
            break;
          }
LABEL_372:
          *(_DWORD *)(a1 + 72) = v66;
          goto LABEL_356;
        case 0xFu:
          *(_QWORD *)(a1 + 184) |= 0x200000000uLL;
          v69 = *((_QWORD *)this + 1);
          v70 = *((_QWORD *)this + 2);
          v71 = *(_QWORD *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)this + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_376;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_257:
            LODWORD(v74) = 0;
            goto LABEL_376;
          }
          v216 = 0;
          v217 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v218 = v69 + 1;
              v219 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)this + 1) = v218;
              v74 |= (unint64_t)(v219 & 0x7F) << v216;
              if (v219 < 0)
              {
                v216 += 7;
                v69 = v218;
                v14 = v217++ > 8;
                if (v14)
                  goto LABEL_257;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_376:
          *(_DWORD *)(a1 + 152) = v74;
          goto LABEL_356;
        case 0x10u:
          *(_QWORD *)(a1 + 184) |= 0x4000000000uLL;
          v77 = *((_QWORD *)this + 1);
          v78 = *((_QWORD *)this + 2);
          v79 = *(_QWORD *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)this + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_380;
              v80 += 7;
              v77 = v83;
              v14 = v81++ > 8;
            }
            while (!v14);
LABEL_264:
            LODWORD(v82) = 0;
            goto LABEL_380;
          }
          v220 = 0;
          v221 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v222 = v77 + 1;
              v223 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)this + 1) = v222;
              v82 |= (unint64_t)(v223 & 0x7F) << v220;
              if (v223 < 0)
              {
                v220 += 7;
                v77 = v222;
                v14 = v221++ > 8;
                if (v14)
                  goto LABEL_264;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v82) = 0;
            }
            break;
          }
LABEL_380:
          *(_DWORD *)(a1 + 172) = v82;
          goto LABEL_356;
        case 0x11u:
          *(_QWORD *)(a1 + 184) |= 0x100000uLL;
          v85 = *((_QWORD *)this + 1);
          v86 = *((_QWORD *)this + 2);
          v87 = *(_QWORD *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)this + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_384;
              v88 += 7;
              v85 = v91;
              v14 = v89++ > 8;
            }
            while (!v14);
LABEL_271:
            LODWORD(v90) = 0;
            goto LABEL_384;
          }
          v224 = 0;
          v225 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v226 = v85 + 1;
              v227 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)this + 1) = v226;
              v90 |= (unint64_t)(v227 & 0x7F) << v224;
              if (v227 < 0)
              {
                v224 += 7;
                v85 = v226;
                v14 = v225++ > 8;
                if (v14)
                  goto LABEL_271;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v90) = 0;
            }
            break;
          }
LABEL_384:
          *(_DWORD *)(a1 + 100) = v90;
          goto LABEL_356;
        case 0x12u:
          *(_QWORD *)(a1 + 184) |= 0x20000uLL;
          v93 = *((_QWORD *)this + 1);
          v94 = *((_QWORD *)this + 2);
          v95 = *(_QWORD *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)this + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_388;
              v96 += 7;
              v93 = v99;
              v14 = v97++ > 8;
            }
            while (!v14);
LABEL_278:
            LODWORD(v98) = 0;
            goto LABEL_388;
          }
          v228 = 0;
          v229 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v230 = v93 + 1;
              v231 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)this + 1) = v230;
              v98 |= (unint64_t)(v231 & 0x7F) << v228;
              if (v231 < 0)
              {
                v228 += 7;
                v93 = v230;
                v14 = v229++ > 8;
                if (v14)
                  goto LABEL_278;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v98) = 0;
            }
            break;
          }
LABEL_388:
          *(_DWORD *)(a1 + 88) = v98;
          goto LABEL_356;
        case 0x13u:
          *(_QWORD *)(a1 + 184) |= 0x10000uLL;
          v101 = *((_QWORD *)this + 1);
          v102 = *((_QWORD *)this + 2);
          v103 = *(_QWORD *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            do
            {
              v107 = v101 + 1;
              *((_QWORD *)this + 1) = v101 + 1;
              v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0)
                goto LABEL_392;
              v104 += 7;
              v101 = v107;
              v14 = v105++ > 8;
            }
            while (!v14);
LABEL_285:
            LODWORD(v106) = 0;
            goto LABEL_392;
          }
          v232 = 0;
          v233 = 0;
          v106 = 0;
          if (v102 <= v101)
            v102 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v234 = v101 + 1;
              v235 = *(_BYTE *)(v103 + v101);
              *((_QWORD *)this + 1) = v234;
              v106 |= (unint64_t)(v235 & 0x7F) << v232;
              if (v235 < 0)
              {
                v232 += 7;
                v101 = v234;
                v14 = v233++ > 8;
                if (v14)
                  goto LABEL_285;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v106) = 0;
            }
            break;
          }
LABEL_392:
          *(_DWORD *)(a1 + 84) = v106;
          goto LABEL_356;
        case 0x14u:
          *(_QWORD *)(a1 + 184) |= 0x40000uLL;
          v109 = *((_QWORD *)this + 1);
          v110 = *((_QWORD *)this + 2);
          v111 = *(_QWORD *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v109 + 1;
              *((_QWORD *)this + 1) = v109 + 1;
              v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0)
                goto LABEL_396;
              v112 += 7;
              v109 = v115;
              v14 = v113++ > 8;
            }
            while (!v14);
LABEL_292:
            LODWORD(v114) = 0;
            goto LABEL_396;
          }
          v236 = 0;
          v237 = 0;
          v114 = 0;
          if (v110 <= v109)
            v110 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v238 = v109 + 1;
              v239 = *(_BYTE *)(v111 + v109);
              *((_QWORD *)this + 1) = v238;
              v114 |= (unint64_t)(v239 & 0x7F) << v236;
              if (v239 < 0)
              {
                v236 += 7;
                v109 = v238;
                v14 = v237++ > 8;
                if (v14)
                  goto LABEL_292;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v114) = 0;
            }
            break;
          }
LABEL_396:
          *(_DWORD *)(a1 + 92) = v114;
          goto LABEL_356;
        case 0x15u:
          *(_QWORD *)(a1 + 184) |= 0x80000uLL;
          v117 = *((_QWORD *)this + 1);
          v118 = *((_QWORD *)this + 2);
          v119 = *(_QWORD *)this;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            v120 = 0;
            v121 = 0;
            v122 = 0;
            do
            {
              v123 = v117 + 1;
              *((_QWORD *)this + 1) = v117 + 1;
              v124 = *(_BYTE *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0)
                goto LABEL_400;
              v120 += 7;
              v117 = v123;
              v14 = v121++ > 8;
            }
            while (!v14);
LABEL_299:
            LODWORD(v122) = 0;
            goto LABEL_400;
          }
          v240 = 0;
          v241 = 0;
          v122 = 0;
          if (v118 <= v117)
            v118 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v242 = v117 + 1;
              v243 = *(_BYTE *)(v119 + v117);
              *((_QWORD *)this + 1) = v242;
              v122 |= (unint64_t)(v243 & 0x7F) << v240;
              if (v243 < 0)
              {
                v240 += 7;
                v117 = v242;
                v14 = v241++ > 8;
                if (v14)
                  goto LABEL_299;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v122) = 0;
            }
            break;
          }
LABEL_400:
          *(_DWORD *)(a1 + 96) = v122;
          goto LABEL_356;
        case 0x16u:
          *(_QWORD *)(a1 + 184) |= 0x8000uLL;
          v125 = *((_QWORD *)this + 1);
          v126 = *((_QWORD *)this + 2);
          v127 = *(_QWORD *)this;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            v128 = 0;
            v129 = 0;
            v130 = 0;
            do
            {
              v131 = v125 + 1;
              *((_QWORD *)this + 1) = v125 + 1;
              v132 = *(_BYTE *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0)
                goto LABEL_404;
              v128 += 7;
              v125 = v131;
              v14 = v129++ > 8;
            }
            while (!v14);
LABEL_306:
            LODWORD(v130) = 0;
            goto LABEL_404;
          }
          v244 = 0;
          v245 = 0;
          v130 = 0;
          if (v126 <= v125)
            v126 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v246 = v125 + 1;
              v247 = *(_BYTE *)(v127 + v125);
              *((_QWORD *)this + 1) = v246;
              v130 |= (unint64_t)(v247 & 0x7F) << v244;
              if (v247 < 0)
              {
                v244 += 7;
                v125 = v246;
                v14 = v245++ > 8;
                if (v14)
                  goto LABEL_306;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v130) = 0;
            }
            break;
          }
LABEL_404:
          *(_DWORD *)(a1 + 80) = v130;
          goto LABEL_356;
        case 0x17u:
          *(_QWORD *)(a1 + 184) |= 0x400uLL;
          v133 = *((_QWORD *)this + 1);
          v134 = *((_QWORD *)this + 2);
          v135 = *(_QWORD *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            v136 = 0;
            v137 = 0;
            v138 = 0;
            do
            {
              v139 = v133 + 1;
              *((_QWORD *)this + 1) = v133 + 1;
              v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0)
                goto LABEL_408;
              v136 += 7;
              v133 = v139;
              v14 = v137++ > 8;
            }
            while (!v14);
LABEL_313:
            LODWORD(v138) = 0;
            goto LABEL_408;
          }
          v248 = 0;
          v249 = 0;
          v138 = 0;
          if (v134 <= v133)
            v134 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v250 = v133 + 1;
              v251 = *(_BYTE *)(v135 + v133);
              *((_QWORD *)this + 1) = v250;
              v138 |= (unint64_t)(v251 & 0x7F) << v248;
              if (v251 < 0)
              {
                v248 += 7;
                v133 = v250;
                v14 = v249++ > 8;
                if (v14)
                  goto LABEL_313;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v138) = 0;
            }
            break;
          }
LABEL_408:
          *(_DWORD *)(a1 + 60) = v138;
          goto LABEL_356;
        case 0x18u:
          *(_QWORD *)(a1 + 184) |= 0x2000000000uLL;
          v141 = *((_QWORD *)this + 1);
          v142 = *((_QWORD *)this + 2);
          v143 = *(_QWORD *)this;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            v144 = 0;
            v145 = 0;
            v146 = 0;
            do
            {
              v147 = v141 + 1;
              *((_QWORD *)this + 1) = v141 + 1;
              v148 = *(_BYTE *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0)
                goto LABEL_412;
              v144 += 7;
              v141 = v147;
              v14 = v145++ > 8;
            }
            while (!v14);
LABEL_320:
            LODWORD(v146) = 0;
            goto LABEL_412;
          }
          v252 = 0;
          v253 = 0;
          v146 = 0;
          if (v142 <= v141)
            v142 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v254 = v141 + 1;
              v255 = *(_BYTE *)(v143 + v141);
              *((_QWORD *)this + 1) = v254;
              v146 |= (unint64_t)(v255 & 0x7F) << v252;
              if (v255 < 0)
              {
                v252 += 7;
                v141 = v254;
                v14 = v253++ > 8;
                if (v14)
                  goto LABEL_320;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v146) = 0;
            }
            break;
          }
LABEL_412:
          *(_DWORD *)(a1 + 168) = v146;
          goto LABEL_356;
        case 0x19u:
          *(_QWORD *)(a1 + 184) |= 0x1000uLL;
          v149 = *((_QWORD *)this + 1);
          v150 = *((_QWORD *)this + 2);
          v151 = *(_QWORD *)this;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            v152 = 0;
            v153 = 0;
            v154 = 0;
            do
            {
              v155 = v149 + 1;
              *((_QWORD *)this + 1) = v149 + 1;
              v156 = *(_BYTE *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0)
                goto LABEL_416;
              v152 += 7;
              v149 = v155;
              v14 = v153++ > 8;
            }
            while (!v14);
LABEL_327:
            LODWORD(v154) = 0;
            goto LABEL_416;
          }
          v256 = 0;
          v257 = 0;
          v154 = 0;
          if (v150 <= v149)
            v150 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v258 = v149 + 1;
              v259 = *(_BYTE *)(v151 + v149);
              *((_QWORD *)this + 1) = v258;
              v154 |= (unint64_t)(v259 & 0x7F) << v256;
              if (v259 < 0)
              {
                v256 += 7;
                v149 = v258;
                v14 = v257++ > 8;
                if (v14)
                  goto LABEL_327;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v154) = 0;
            }
            break;
          }
LABEL_416:
          *(_DWORD *)(a1 + 68) = v154;
          goto LABEL_356;
        case 0x1Au:
          *(_QWORD *)(a1 + 184) |= 0x20000000uLL;
          v157 = *((_QWORD *)this + 1);
          v158 = *((_QWORD *)this + 2);
          v159 = *(_QWORD *)this;
          if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
          {
            v160 = 0;
            v161 = 0;
            v162 = 0;
            do
            {
              v163 = v157 + 1;
              *((_QWORD *)this + 1) = v157 + 1;
              v164 = *(_BYTE *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0)
                goto LABEL_420;
              v160 += 7;
              v157 = v163;
              v14 = v161++ > 8;
            }
            while (!v14);
LABEL_334:
            LODWORD(v162) = 0;
            goto LABEL_420;
          }
          v260 = 0;
          v261 = 0;
          v162 = 0;
          if (v158 <= v157)
            v158 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v262 = v157 + 1;
              v263 = *(_BYTE *)(v159 + v157);
              *((_QWORD *)this + 1) = v262;
              v162 |= (unint64_t)(v263 & 0x7F) << v260;
              if (v263 < 0)
              {
                v260 += 7;
                v157 = v262;
                v14 = v261++ > 8;
                if (v14)
                  goto LABEL_334;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v162) = 0;
            }
            break;
          }
LABEL_420:
          *(_DWORD *)(a1 + 136) = v162;
          goto LABEL_356;
        case 0x1Bu:
          *(_QWORD *)(a1 + 184) |= 0x10uLL;
          v165 = *((_QWORD *)this + 1);
          v166 = *((_QWORD *)this + 2);
          v167 = *(_QWORD *)this;
          if (v165 <= 0xFFFFFFFFFFFFFFF5 && v165 + 10 <= v166)
          {
            v168 = 0;
            v169 = 0;
            v170 = 0;
            do
            {
              v171 = v165 + 1;
              *((_QWORD *)this + 1) = v165 + 1;
              v172 = *(_BYTE *)(v167 + v165);
              v170 |= (unint64_t)(v172 & 0x7F) << v168;
              if ((v172 & 0x80) == 0)
                goto LABEL_424;
              v168 += 7;
              v165 = v171;
              v14 = v169++ > 8;
            }
            while (!v14);
LABEL_341:
            LODWORD(v170) = 0;
            goto LABEL_424;
          }
          v264 = 0;
          v265 = 0;
          v170 = 0;
          if (v166 <= v165)
            v166 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v166 == v165)
            {
              LODWORD(v170) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v266 = v165 + 1;
              v267 = *(_BYTE *)(v167 + v165);
              *((_QWORD *)this + 1) = v266;
              v170 |= (unint64_t)(v267 & 0x7F) << v264;
              if (v267 < 0)
              {
                v264 += 7;
                v165 = v266;
                v14 = v265++ > 8;
                if (v14)
                  goto LABEL_341;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v170) = 0;
            }
            break;
          }
LABEL_424:
          *(_DWORD *)(a1 + 36) = v170;
          goto LABEL_356;
        case 0x1Cu:
          *(_QWORD *)(a1 + 184) |= 0x400000000uLL;
          v173 = *((_QWORD *)this + 1);
          if (v173 > 0xFFFFFFFFFFFFFFFBLL || v173 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v173);
          goto LABEL_354;
        case 0x1Du:
          *(_QWORD *)(a1 + 184) |= 0x20000000000uLL;
          v174 = *((_QWORD *)this + 1);
          if (v174 >= *((_QWORD *)this + 2))
          {
            v177 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v175 = v174 + 1;
            v176 = *(unsigned __int8 *)(*(_QWORD *)this + v174);
            *((_QWORD *)this + 1) = v175;
            v177 = v176 != 0;
          }
          *(_BYTE *)(a1 + 178) = v177;
          goto LABEL_356;
        case 0x1Eu:
          *(_QWORD *)(a1 + 184) |= 0x800000000uLL;
          v178 = *((_QWORD *)this + 1);
          if (v178 > 0xFFFFFFFFFFFFFFFBLL || v178 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(_QWORD *)this + v178);
          goto LABEL_354;
        case 0x1Fu:
          *(_QWORD *)(a1 + 184) |= 0x40000000000uLL;
          v179 = *((_QWORD *)this + 1);
          if (v179 >= *((_QWORD *)this + 2))
          {
            v182 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v180 = v179 + 1;
            v181 = *(unsigned __int8 *)(*(_QWORD *)this + v179);
            *((_QWORD *)this + 1) = v180;
            v182 = v181 != 0;
          }
          *(_BYTE *)(a1 + 179) = v182;
          goto LABEL_356;
        case 0x20u:
          *(_QWORD *)(a1 + 184) |= 0x20uLL;
          v183 = *((_QWORD *)this + 1);
          v184 = *((_QWORD *)this + 2);
          v185 = *(_QWORD *)this;
          if (v183 <= 0xFFFFFFFFFFFFFFF5 && v183 + 10 <= v184)
          {
            v186 = 0;
            v187 = 0;
            v188 = 0;
            do
            {
              v189 = v183 + 1;
              *((_QWORD *)this + 1) = v183 + 1;
              v190 = *(_BYTE *)(v185 + v183);
              v188 |= (unint64_t)(v190 & 0x7F) << v186;
              if ((v190 & 0x80) == 0)
                goto LABEL_428;
              v186 += 7;
              v183 = v189;
              v14 = v187++ > 8;
            }
            while (!v14);
LABEL_352:
            LODWORD(v188) = 0;
            goto LABEL_428;
          }
          v268 = 0;
          v269 = 0;
          v188 = 0;
          if (v184 <= v183)
            v184 = *((_QWORD *)this + 1);
          break;
        case 0x21u:
          *(_QWORD *)(a1 + 184) |= 0x80uLL;
          v191 = *((_QWORD *)this + 1);
          if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v191);
          goto LABEL_354;
        case 0x22u:
          *(_QWORD *)(a1 + 184) |= 0x4000000uLL;
          v192 = *((_QWORD *)this + 1);
          if (v192 > 0xFFFFFFFFFFFFFFFBLL || v192 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v192);
          goto LABEL_354;
        case 0x23u:
          *(_QWORD *)(a1 + 184) |= 0x8000000uLL;
          v193 = *((_QWORD *)this + 1);
          if (v193 > 0xFFFFFFFFFFFFFFFBLL || v193 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v193);
          goto LABEL_354;
        case 0x24u:
          *(_QWORD *)(a1 + 184) |= 0x10000000uLL;
          v194 = *((_QWORD *)this + 1);
          if (v194 > 0xFFFFFFFFFFFFFFFBLL || v194 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v194);
          goto LABEL_354;
        case 0x25u:
          *(_QWORD *)(a1 + 184) |= 0x40uLL;
          v195 = *((_QWORD *)this + 1);
          if (v195 > 0xFFFFFFFFFFFFFFFBLL || v195 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v195);
          goto LABEL_354;
        case 0x26u:
          *(_QWORD *)(a1 + 184) |= 0x100uLL;
          v196 = *((_QWORD *)this + 1);
          if (v196 > 0xFFFFFFFFFFFFFFFBLL || v196 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v196);
          goto LABEL_354;
        case 0x27u:
          *(_QWORD *)(a1 + 184) |= 0x200uLL;
          v197 = *((_QWORD *)this + 1);
          if (v197 > 0xFFFFFFFFFFFFFFFBLL || v197 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v197);
          goto LABEL_354;
        case 0x28u:
          *(_QWORD *)(a1 + 184) |= 0x400000uLL;
          v198 = *((_QWORD *)this + 1);
          if (v198 > 0xFFFFFFFFFFFFFFFBLL || v198 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v198);
          goto LABEL_354;
        case 0x29u:
          *(_QWORD *)(a1 + 184) |= 0x800000uLL;
          v199 = *((_QWORD *)this + 1);
          if (v199 > 0xFFFFFFFFFFFFFFFBLL || v199 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v199);
          goto LABEL_354;
        case 0x2Au:
          *(_QWORD *)(a1 + 184) |= 0x1000000uLL;
          v200 = *((_QWORD *)this + 1);
          if (v200 > 0xFFFFFFFFFFFFFFFBLL || v200 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v200);
          goto LABEL_354;
        case 0x2Bu:
          *(_QWORD *)(a1 + 184) |= 0x40000000uLL;
          v201 = *((_QWORD *)this + 1);
          if (v201 > 0xFFFFFFFFFFFFFFFBLL || v201 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v201);
          goto LABEL_354;
        case 0x2Cu:
          *(_QWORD *)(a1 + 184) |= 0x80000000uLL;
          v202 = *((_QWORD *)this + 1);
          if (v202 > 0xFFFFFFFFFFFFFFFBLL || v202 + 4 > *((_QWORD *)this + 2))
            goto LABEL_221;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v202);
          goto LABEL_354;
        case 0x2Du:
          *(_QWORD *)(a1 + 184) |= 0x100000000uLL;
          v203 = *((_QWORD *)this + 1);
          if (v203 <= 0xFFFFFFFFFFFFFFFBLL && v203 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v203);
LABEL_354:
            v55 = *((_QWORD *)this + 1) + 4;
LABEL_355:
            *((_QWORD *)this + 1) = v55;
          }
          else
          {
LABEL_221:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_356;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_356;
      }
      while (1)
      {
        if (v184 == v183)
        {
          LODWORD(v188) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_428;
        }
        v270 = v183 + 1;
        v271 = *(_BYTE *)(v185 + v183);
        *((_QWORD *)this + 1) = v270;
        v188 |= (unint64_t)(v271 & 0x7F) << v268;
        if ((v271 & 0x80) == 0)
          break;
        v268 += 7;
        v183 = v270;
        v14 = v269++ > 8;
        if (v14)
          goto LABEL_352;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v188) = 0;
LABEL_428:
      *(_DWORD *)(a1 + 40) = v188;
LABEL_356:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2FDD10(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 184);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_QWORD *)(v3 + 184);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0)
        goto LABEL_4;
      goto LABEL_49;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_5;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_6;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 164));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_8;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_9;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_10;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x4000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_14;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_16;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_17;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x100000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400) == 0)
      goto LABEL_24;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x400) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_25;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x1000) == 0)
      goto LABEL_26;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x1000) == 0)
  {
LABEL_26:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_27;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10) == 0)
      goto LABEL_28;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10) == 0)
  {
LABEL_28:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_29;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_30;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::write(this, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_31;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_32;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::write(this, *(float *)(v3 + 160));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x20) == 0)
      goto LABEL_33;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x20) == 0)
  {
LABEL_33:
    if ((v4 & 0x80) == 0)
      goto LABEL_34;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80) == 0)
  {
LABEL_34:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_80;
  }
LABEL_79:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_36;
    goto LABEL_81;
  }
LABEL_80:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_37;
    goto LABEL_82;
  }
LABEL_81:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x40) == 0)
      goto LABEL_38;
    goto LABEL_83;
  }
LABEL_82:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40) == 0)
  {
LABEL_38:
    if ((v4 & 0x100) == 0)
      goto LABEL_39;
    goto LABEL_84;
  }
LABEL_83:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x100) == 0)
  {
LABEL_39:
    if ((v4 & 0x200) == 0)
      goto LABEL_40;
    goto LABEL_85;
  }
LABEL_84:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x200) == 0)
  {
LABEL_40:
    if ((v4 & 0x400000) == 0)
      goto LABEL_41;
    goto LABEL_86;
  }
LABEL_85:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x400000) == 0)
  {
LABEL_41:
    if ((v4 & 0x800000) == 0)
      goto LABEL_42;
    goto LABEL_87;
  }
LABEL_86:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x800000) == 0)
  {
LABEL_42:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_43;
    goto LABEL_88;
  }
LABEL_87:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_44;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_44:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 184);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x100000000) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 148));
  }
LABEL_90:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  if ((*(_QWORD *)(v3 + 184) & 0x100000000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 148));
  return result;
}

uint64_t sub_18F2FE220(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944A90;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_18F2FE238(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2FE25C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryProbability", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cycleTime", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "distance", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "doubleSupportPercentage", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "stepLength", *(float *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 40) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "walkingSpeed", *(float *)(a1 + 36));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2FE36C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_47;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 5u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 6u:
          *(_BYTE *)(a1 + 40) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 7u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_46:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_47:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_44:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2FE678(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 16));
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 40) & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16));
  return result;
}

_QWORD *sub_18F2FE760(_QWORD *result)
{
  *result = &off_1E29514D8;
  result[1] = 0;
  return result;
}

void sub_18F2FE770(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E29514D8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2FE7B0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E29514D8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2FE804(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2FE854(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F2883B8(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2FEA1C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_18F2FEA38(uint64_t result)
{
  *(_QWORD *)result = &off_1E294D7D0;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_18F2FEA50(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2FEA74(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "confidence");
    v5 = *(_DWORD *)(a1 + 116);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_32;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "drivingArmLikelihoodSum", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "drivingStowedLikelihoodSum", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "estExitTime", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x100000) == 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "exitState");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100000) == 0)
  {
LABEL_7:
    if ((v5 & 0x200000) == 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "isStanding");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200000) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "isVehicleConnected");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "mountedConfidence");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "mountedState");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "rawConfidence");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "rawType");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "source");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "ssLikelihoodSum", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "tilt", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "type");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "typeYouth");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "vehicularBasebandHint");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "vehicularBtHint");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "vehicularConfidence");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "vehicularGpsHint");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "vehicularMotionHint");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v5 & 8) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "vehicularWifiHint");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_26:
    if ((v5 & 0x80000) == 0)
      goto LABEL_27;
LABEL_55:
    PB::TextFormatter::format(this, "workoutDetectionType");
    if ((*(_DWORD *)(a1 + 116) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_28;
  }
LABEL_54:
  PB::TextFormatter::format(this, "workoutDetectionTime", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80000) != 0)
    goto LABEL_55;
LABEL_27:
  if ((v5 & 0x10) != 0)
LABEL_28:
    PB::TextFormatter::format(this, "workoutEscalationTime");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2FEE04(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  BOOL v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  BOOL v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  BOOL v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  BOOL v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  BOOL v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v149;
  unsigned int v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  char v154;
  unsigned int v155;
  unint64_t v156;
  char v157;
  char v158;
  unsigned int v159;
  unint64_t v160;
  char v161;
  char v162;
  unsigned int v163;
  unint64_t v164;
  char v165;
  char v166;
  unsigned int v167;
  unint64_t v168;
  char v169;
  char v170;
  unsigned int v171;
  unint64_t v172;
  char v173;
  char v174;
  unsigned int v175;
  unint64_t v176;
  char v177;
  char v178;
  unsigned int v179;
  unint64_t v180;
  char v181;
  char v182;
  unsigned int v183;
  unint64_t v184;
  char v185;
  char v186;
  unsigned int v187;
  unint64_t v188;
  char v189;
  char v190;
  unsigned int v191;
  unint64_t v192;
  char v193;
  char v194;
  unsigned int v195;
  unint64_t v196;
  char v197;
  char v198;
  unsigned int v199;
  unint64_t v200;
  char v201;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 116) |= 0x10000u;
          v20 = *((_QWORD *)this + 1);
          v21 = *((_QWORD *)this + 2);
          v22 = *(_QWORD *)this;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
          {
            v154 = 0;
            v155 = 0;
            v25 = 0;
            if (v21 <= v20)
              v21 = *((_QWORD *)this + 1);
            do
            {
              if (v21 == v20)
              {
                LODWORD(v25) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_251;
              }
              v156 = v20 + 1;
              v157 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)this + 1) = v156;
              v25 |= (unint64_t)(v157 & 0x7F) << v154;
              if ((v157 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_251;
              }
              v154 += 7;
              v20 = v156;
              v14 = v155++ > 8;
            }
            while (!v14);
LABEL_153:
            LODWORD(v25) = 0;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v26 = v20 + 1;
              *((_QWORD *)this + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                break;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
              if (v14)
                goto LABEL_153;
            }
          }
LABEL_251:
          *(_DWORD *)(a1 + 92) = v25;
          goto LABEL_296;
        case 2u:
          *(_DWORD *)(a1 + 116) |= 0x200u;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_255;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_160:
            LODWORD(v34) = 0;
            goto LABEL_255;
          }
          v158 = 0;
          v159 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v160 = v29 + 1;
              v161 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v160;
              v34 |= (unint64_t)(v161 & 0x7F) << v158;
              if (v161 < 0)
              {
                v158 += 7;
                v29 = v160;
                v14 = v159++ > 8;
                if (v14)
                  goto LABEL_160;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_255:
          *(_DWORD *)(a1 + 64) = v34;
          goto LABEL_296;
        case 3u:
          *(_DWORD *)(a1 + 116) |= 0x20u;
          v37 = *((_QWORD *)this + 1);
          v38 = *((_QWORD *)this + 2);
          v39 = *(_QWORD *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_259;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_167:
            LODWORD(v42) = 0;
            goto LABEL_259;
          }
          v162 = 0;
          v163 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v164 = v37 + 1;
              v165 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)this + 1) = v164;
              v42 |= (unint64_t)(v165 & 0x7F) << v162;
              if (v165 < 0)
              {
                v162 += 7;
                v37 = v164;
                v14 = v163++ > 8;
                if (v14)
                  goto LABEL_167;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v42) = 0;
            }
            break;
          }
LABEL_259:
          *(_DWORD *)(a1 + 48) = v42;
          goto LABEL_296;
        case 4u:
          *(_DWORD *)(a1 + 116) |= 0x400u;
          v45 = *((_QWORD *)this + 1);
          v46 = *((_QWORD *)this + 2);
          v47 = *(_QWORD *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)this + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_263;
              v48 += 7;
              v45 = v51;
              v14 = v49++ > 8;
            }
            while (!v14);
LABEL_174:
            LODWORD(v50) = 0;
            goto LABEL_263;
          }
          v166 = 0;
          v167 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v168 = v45 + 1;
              v169 = *(_BYTE *)(v47 + v45);
              *((_QWORD *)this + 1) = v168;
              v50 |= (unint64_t)(v169 & 0x7F) << v166;
              if (v169 < 0)
              {
                v166 += 7;
                v45 = v168;
                v14 = v167++ > 8;
                if (v14)
                  goto LABEL_174;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v50) = 0;
            }
            break;
          }
LABEL_263:
          *(_DWORD *)(a1 + 68) = v50;
          goto LABEL_296;
        case 5u:
          *(_DWORD *)(a1 + 116) |= 0x100000u;
          v53 = *((_QWORD *)this + 1);
          if (v53 >= *((_QWORD *)this + 2))
          {
            v56 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v54 = v53 + 1;
            v55 = *(unsigned __int8 *)(*(_QWORD *)this + v53);
            *((_QWORD *)this + 1) = v54;
            v56 = v55 != 0;
          }
          *(_BYTE *)(a1 + 108) = v56;
          goto LABEL_296;
        case 6u:
          *(_DWORD *)(a1 + 116) |= 0x8000u;
          v57 = *((_QWORD *)this + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v57);
          goto LABEL_115;
        case 7u:
          *(_DWORD *)(a1 + 116) |= 4u;
          v58 = *((_QWORD *)this + 1);
          if (v58 > 0xFFFFFFFFFFFFFFF7 || v58 + 8 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v58);
          goto LABEL_246;
        case 8u:
          *(_DWORD *)(a1 + 116) |= 0x200000u;
          v59 = *((_QWORD *)this + 1);
          if (v59 >= *((_QWORD *)this + 2))
          {
            v62 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v60 = v59 + 1;
            v61 = *(unsigned __int8 *)(*(_QWORD *)this + v59);
            *((_QWORD *)this + 1) = v60;
            v62 = v61 != 0;
          }
          *(_BYTE *)(a1 + 109) = v62;
          goto LABEL_296;
        case 9u:
          *(_DWORD *)(a1 + 116) |= 0x100u;
          v63 = *((_QWORD *)this + 1);
          v64 = *((_QWORD *)this + 2);
          v65 = *(_QWORD *)this;
          if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
          {
            v66 = 0;
            v67 = 0;
            v68 = 0;
            do
            {
              v69 = v63 + 1;
              *((_QWORD *)this + 1) = v63 + 1;
              v70 = *(_BYTE *)(v65 + v63);
              v68 |= (unint64_t)(v70 & 0x7F) << v66;
              if ((v70 & 0x80) == 0)
                goto LABEL_267;
              v66 += 7;
              v63 = v69;
              v14 = v67++ > 8;
            }
            while (!v14);
LABEL_185:
            LODWORD(v68) = 0;
            goto LABEL_267;
          }
          v170 = 0;
          v171 = 0;
          v68 = 0;
          if (v64 <= v63)
            v64 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v64 == v63)
            {
              LODWORD(v68) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v172 = v63 + 1;
              v173 = *(_BYTE *)(v65 + v63);
              *((_QWORD *)this + 1) = v172;
              v68 |= (unint64_t)(v173 & 0x7F) << v170;
              if (v173 < 0)
              {
                v170 += 7;
                v63 = v172;
                v14 = v171++ > 8;
                if (v14)
                  goto LABEL_185;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v68) = 0;
            }
            break;
          }
LABEL_267:
          *(_DWORD *)(a1 + 60) = v68;
          goto LABEL_296;
        case 0xAu:
          *(_DWORD *)(a1 + 116) |= 1u;
          v71 = *((_QWORD *)this + 1);
          if (v71 > 0xFFFFFFFFFFFFFFF7 || v71 + 8 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v71);
          goto LABEL_246;
        case 0xBu:
          *(_DWORD *)(a1 + 116) |= 2u;
          v72 = *((_QWORD *)this + 1);
          if (v72 > 0xFFFFFFFFFFFFFFF7 || v72 + 8 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v72);
          goto LABEL_246;
        case 0xCu:
          *(_DWORD *)(a1 + 116) |= 0x1000u;
          v73 = *((_QWORD *)this + 1);
          v74 = *((_QWORD *)this + 2);
          v75 = *(_QWORD *)this;
          if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
          {
            v76 = 0;
            v77 = 0;
            v78 = 0;
            do
            {
              v79 = v73 + 1;
              *((_QWORD *)this + 1) = v73 + 1;
              v80 = *(_BYTE *)(v75 + v73);
              v78 |= (unint64_t)(v80 & 0x7F) << v76;
              if ((v80 & 0x80) == 0)
                goto LABEL_271;
              v76 += 7;
              v73 = v79;
              v14 = v77++ > 8;
            }
            while (!v14);
LABEL_192:
            LODWORD(v78) = 0;
            goto LABEL_271;
          }
          v174 = 0;
          v175 = 0;
          v78 = 0;
          if (v74 <= v73)
            v74 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v74 == v73)
            {
              LODWORD(v78) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v176 = v73 + 1;
              v177 = *(_BYTE *)(v75 + v73);
              *((_QWORD *)this + 1) = v176;
              v78 |= (unint64_t)(v177 & 0x7F) << v174;
              if (v177 < 0)
              {
                v174 += 7;
                v73 = v176;
                v14 = v175++ > 8;
                if (v14)
                  goto LABEL_192;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v78) = 0;
            }
            break;
          }
LABEL_271:
          *(_DWORD *)(a1 + 76) = v78;
          goto LABEL_296;
        case 0xDu:
          *(_DWORD *)(a1 + 116) |= 0x800u;
          v81 = *((_QWORD *)this + 1);
          v82 = *((_QWORD *)this + 2);
          v83 = *(_QWORD *)this;
          if (v81 <= 0xFFFFFFFFFFFFFFF5 && v81 + 10 <= v82)
          {
            v84 = 0;
            v85 = 0;
            v86 = 0;
            do
            {
              v87 = v81 + 1;
              *((_QWORD *)this + 1) = v81 + 1;
              v88 = *(_BYTE *)(v83 + v81);
              v86 |= (unint64_t)(v88 & 0x7F) << v84;
              if ((v88 & 0x80) == 0)
                goto LABEL_275;
              v84 += 7;
              v81 = v87;
              v14 = v85++ > 8;
            }
            while (!v14);
LABEL_199:
            LODWORD(v86) = 0;
            goto LABEL_275;
          }
          v178 = 0;
          v179 = 0;
          v86 = 0;
          if (v82 <= v81)
            v82 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v82 == v81)
            {
              LODWORD(v86) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v180 = v81 + 1;
              v181 = *(_BYTE *)(v83 + v81);
              *((_QWORD *)this + 1) = v180;
              v86 |= (unint64_t)(v181 & 0x7F) << v178;
              if (v181 < 0)
              {
                v178 += 7;
                v81 = v180;
                v14 = v179++ > 8;
                if (v14)
                  goto LABEL_199;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v86) = 0;
            }
            break;
          }
LABEL_275:
          *(_DWORD *)(a1 + 72) = v86;
          goto LABEL_296;
        case 0xEu:
          *(_DWORD *)(a1 + 116) |= 0x2000000u;
          v89 = *((_QWORD *)this + 1);
          if (v89 >= *((_QWORD *)this + 2))
          {
            v92 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v90 = v89 + 1;
            v91 = *(unsigned __int8 *)(*(_QWORD *)this + v89);
            *((_QWORD *)this + 1) = v90;
            v92 = v91 != 0;
          }
          *(_BYTE *)(a1 + 113) = v92;
          goto LABEL_296;
        case 0xFu:
          *(_DWORD *)(a1 + 116) |= 0x1000000u;
          v93 = *((_QWORD *)this + 1);
          if (v93 >= *((_QWORD *)this + 2))
          {
            v96 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v94 = v93 + 1;
            v95 = *(unsigned __int8 *)(*(_QWORD *)this + v93);
            *((_QWORD *)this + 1) = v94;
            v96 = v95 != 0;
          }
          *(_BYTE *)(a1 + 112) = v96;
          goto LABEL_296;
        case 0x10u:
          *(_DWORD *)(a1 + 116) |= 0x400000u;
          v97 = *((_QWORD *)this + 1);
          if (v97 >= *((_QWORD *)this + 2))
          {
            v100 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v98 = v97 + 1;
            v99 = *(unsigned __int8 *)(*(_QWORD *)this + v97);
            *((_QWORD *)this + 1) = v98;
            v100 = v99 != 0;
          }
          *(_BYTE *)(a1 + 110) = v100;
          goto LABEL_296;
        case 0x11u:
          *(_DWORD *)(a1 + 116) |= 0x4000000u;
          v101 = *((_QWORD *)this + 1);
          if (v101 >= *((_QWORD *)this + 2))
          {
            v104 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v102 = v101 + 1;
            v103 = *(unsigned __int8 *)(*(_QWORD *)this + v101);
            *((_QWORD *)this + 1) = v102;
            v104 = v103 != 0;
          }
          *(_BYTE *)(a1 + 114) = v104;
          goto LABEL_296;
        case 0x12u:
          *(_DWORD *)(a1 + 116) |= 0x800000u;
          v105 = *((_QWORD *)this + 1);
          if (v105 >= *((_QWORD *)this + 2))
          {
            v108 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v106 = v105 + 1;
            v107 = *(unsigned __int8 *)(*(_QWORD *)this + v105);
            *((_QWORD *)this + 1) = v106;
            v108 = v107 != 0;
          }
          *(_BYTE *)(a1 + 111) = v108;
          goto LABEL_296;
        case 0x13u:
          *(_DWORD *)(a1 + 116) |= 0x40000u;
          v109 = *((_QWORD *)this + 1);
          v110 = *((_QWORD *)this + 2);
          v111 = *(_QWORD *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v109 + 1;
              *((_QWORD *)this + 1) = v109 + 1;
              v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0)
                goto LABEL_279;
              v112 += 7;
              v109 = v115;
              v14 = v113++ > 8;
            }
            while (!v14);
LABEL_216:
            LODWORD(v114) = 0;
            goto LABEL_279;
          }
          v182 = 0;
          v183 = 0;
          v114 = 0;
          if (v110 <= v109)
            v110 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v184 = v109 + 1;
              v185 = *(_BYTE *)(v111 + v109);
              *((_QWORD *)this + 1) = v184;
              v114 |= (unint64_t)(v185 & 0x7F) << v182;
              if (v185 < 0)
              {
                v182 += 7;
                v109 = v184;
                v14 = v183++ > 8;
                if (v14)
                  goto LABEL_216;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v114) = 0;
            }
            break;
          }
LABEL_279:
          *(_DWORD *)(a1 + 100) = v114;
          goto LABEL_296;
        case 0x14u:
          *(_DWORD *)(a1 + 116) |= 0x80u;
          v117 = *((_QWORD *)this + 1);
          if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v117);
          goto LABEL_115;
        case 0x15u:
          *(_DWORD *)(a1 + 116) |= 0x40u;
          v118 = *((_QWORD *)this + 1);
          if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v118);
          goto LABEL_115;
        case 0x16u:
          *(_DWORD *)(a1 + 116) |= 0x4000u;
          v119 = *((_QWORD *)this + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v119);
LABEL_115:
          v120 = *((_QWORD *)this + 1) + 4;
          goto LABEL_247;
        case 0x17u:
          *(_DWORD *)(a1 + 116) |= 0x80000u;
          v121 = *((_QWORD *)this + 1);
          v122 = *((_QWORD *)this + 2);
          v123 = *(_QWORD *)this;
          if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
          {
            v124 = 0;
            v125 = 0;
            v126 = 0;
            do
            {
              v127 = v121 + 1;
              *((_QWORD *)this + 1) = v121 + 1;
              v128 = *(_BYTE *)(v123 + v121);
              v126 |= (unint64_t)(v128 & 0x7F) << v124;
              if ((v128 & 0x80) == 0)
                goto LABEL_283;
              v124 += 7;
              v121 = v127;
              v14 = v125++ > 8;
            }
            while (!v14);
LABEL_223:
            LODWORD(v126) = 0;
            goto LABEL_283;
          }
          v186 = 0;
          v187 = 0;
          v126 = 0;
          if (v122 <= v121)
            v122 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v122 == v121)
            {
              LODWORD(v126) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v188 = v121 + 1;
              v189 = *(_BYTE *)(v123 + v121);
              *((_QWORD *)this + 1) = v188;
              v126 |= (unint64_t)(v189 & 0x7F) << v186;
              if (v189 < 0)
              {
                v186 += 7;
                v121 = v188;
                v14 = v187++ > 8;
                if (v14)
                  goto LABEL_223;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v126) = 0;
            }
            break;
          }
LABEL_283:
          *(_DWORD *)(a1 + 104) = v126;
          goto LABEL_296;
        case 0x18u:
          *(_DWORD *)(a1 + 116) |= 8u;
          v129 = *((_QWORD *)this + 1);
          if (v129 <= 0xFFFFFFFFFFFFFFF7 && v129 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v129);
LABEL_246:
            v120 = *((_QWORD *)this + 1) + 8;
LABEL_247:
            *((_QWORD *)this + 1) = v120;
          }
          else
          {
LABEL_125:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_296;
        case 0x19u:
          *(_DWORD *)(a1 + 116) |= 0x10u;
          v130 = *((_QWORD *)this + 1);
          v131 = *((_QWORD *)this + 2);
          v132 = *(_QWORD *)this;
          if (v130 <= 0xFFFFFFFFFFFFFFF5 && v130 + 10 <= v131)
          {
            v133 = 0;
            v134 = 0;
            v135 = 0;
            do
            {
              v136 = v130 + 1;
              *((_QWORD *)this + 1) = v130 + 1;
              v137 = *(_BYTE *)(v132 + v130);
              v135 |= (unint64_t)(v137 & 0x7F) << v133;
              if ((v137 & 0x80) == 0)
                goto LABEL_287;
              v133 += 7;
              v130 = v136;
              v14 = v134++ > 8;
            }
            while (!v14);
LABEL_230:
            v135 = 0;
            goto LABEL_287;
          }
          v190 = 0;
          v191 = 0;
          v135 = 0;
          if (v131 <= v130)
            v131 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v131 == v130)
            {
              v135 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v192 = v130 + 1;
              v193 = *(_BYTE *)(v132 + v130);
              *((_QWORD *)this + 1) = v192;
              v135 |= (unint64_t)(v193 & 0x7F) << v190;
              if (v193 < 0)
              {
                v190 += 7;
                v130 = v192;
                v14 = v191++ > 8;
                if (v14)
                  goto LABEL_230;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v135 = 0;
            }
            break;
          }
LABEL_287:
          *(_QWORD *)(a1 + 40) = v135;
          goto LABEL_296;
        case 0x1Au:
          *(_DWORD *)(a1 + 116) |= 0x20000u;
          v138 = *((_QWORD *)this + 1);
          v139 = *((_QWORD *)this + 2);
          v140 = *(_QWORD *)this;
          if (v138 <= 0xFFFFFFFFFFFFFFF5 && v138 + 10 <= v139)
          {
            v141 = 0;
            v142 = 0;
            v143 = 0;
            do
            {
              v144 = v138 + 1;
              *((_QWORD *)this + 1) = v138 + 1;
              v145 = *(_BYTE *)(v140 + v138);
              v143 |= (unint64_t)(v145 & 0x7F) << v141;
              if ((v145 & 0x80) == 0)
                goto LABEL_291;
              v141 += 7;
              v138 = v144;
              v14 = v142++ > 8;
            }
            while (!v14);
LABEL_237:
            LODWORD(v143) = 0;
            goto LABEL_291;
          }
          v194 = 0;
          v195 = 0;
          v143 = 0;
          if (v139 <= v138)
            v139 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v139 == v138)
            {
              LODWORD(v143) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v196 = v138 + 1;
              v197 = *(_BYTE *)(v140 + v138);
              *((_QWORD *)this + 1) = v196;
              v143 |= (unint64_t)(v197 & 0x7F) << v194;
              if (v197 < 0)
              {
                v194 += 7;
                v138 = v196;
                v14 = v195++ > 8;
                if (v14)
                  goto LABEL_237;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v143) = 0;
            }
            break;
          }
LABEL_291:
          *(_DWORD *)(a1 + 96) = v143;
          goto LABEL_296;
        case 0x1Bu:
          *(_DWORD *)(a1 + 116) |= 0x2000u;
          v146 = *((_QWORD *)this + 1);
          v147 = *((_QWORD *)this + 2);
          v148 = *(_QWORD *)this;
          if (v146 <= 0xFFFFFFFFFFFFFFF5 && v146 + 10 <= v147)
          {
            v149 = 0;
            v150 = 0;
            v151 = 0;
            do
            {
              v152 = v146 + 1;
              *((_QWORD *)this + 1) = v146 + 1;
              v153 = *(_BYTE *)(v148 + v146);
              v151 |= (unint64_t)(v153 & 0x7F) << v149;
              if ((v153 & 0x80) == 0)
                goto LABEL_295;
              v149 += 7;
              v146 = v152;
              v14 = v150++ > 8;
            }
            while (!v14);
LABEL_244:
            LODWORD(v151) = 0;
            goto LABEL_295;
          }
          v198 = 0;
          v199 = 0;
          v151 = 0;
          if (v147 <= v146)
            v147 = *((_QWORD *)this + 1);
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_296;
      }
      while (1)
      {
        if (v147 == v146)
        {
          LODWORD(v151) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_295;
        }
        v200 = v146 + 1;
        v201 = *(_BYTE *)(v148 + v146);
        *((_QWORD *)this + 1) = v200;
        v151 |= (unint64_t)(v201 & 0x7F) << v198;
        if ((v201 & 0x80) == 0)
          break;
        v198 += 7;
        v146 = v200;
        v14 = v199++ > 8;
        if (v14)
          goto LABEL_244;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v151) = 0;
LABEL_295:
      *(_DWORD *)(a1 + 80) = v151;
LABEL_296:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2FFE1C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 116);
  if ((v4 & 0x10000) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x200000) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x800000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_24:
    if ((v4 & 8) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_25:
    if ((v4 & 0x10) == 0)
      goto LABEL_26;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_26:
    if ((v4 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_27:
    if ((v4 & 0x2000) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 116) & 0x2000) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F300134(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F478;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_18F30014C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F300170(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "outdoorCyclingStateMachineFrom");
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "outdoorCyclingStateMachineTo");
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "workoutLocationType");
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "workoutPause");
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "workoutResume");
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "workoutStop");
    if ((*(_WORD *)(a1 + 36) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "workoutStart");
  v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x100) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x10) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "workoutType");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F3002C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 36) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_120;
            case 2u:
              *(_WORD *)(a1 + 36) |= 0x10u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_104;
                  }
                  v55 = v20++;
                  v56 = *(_BYTE *)(v21 + v55);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
LABEL_103:
                    v2 = v55 + 1;
                    goto LABEL_104;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
                goto LABEL_103;
              }
              v22 = 0;
              v23 = 0;
              v24 = 0;
              do
              {
                v2 = v20 + 1;
                *((_QWORD *)this + 1) = v20 + 1;
                v25 = *(_BYTE *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0)
                  goto LABEL_104;
                v22 += 7;
                v20 = v2;
                v14 = v23++ > 8;
              }
              while (!v14);
              LODWORD(v24) = 0;
LABEL_104:
              *(_DWORD *)(a1 + 28) = v24;
              goto LABEL_120;
            case 3u:
              *(_WORD *)(a1 + 36) |= 8u;
              v26 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v27 = *(_QWORD *)this;
              if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v30 = 0;
                if (v2 <= v26)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v26)
                  {
                    LODWORD(v30) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  v59 = v26++;
                  v60 = *(_BYTE *)(v27 + v59);
                  *((_QWORD *)this + 1) = v26;
                  v30 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v30) = 0;
LABEL_108:
                    v2 = v59 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v30) = 0;
                goto LABEL_108;
              }
              v28 = 0;
              v29 = 0;
              v30 = 0;
              do
              {
                v2 = v26 + 1;
                *((_QWORD *)this + 1) = v26 + 1;
                v31 = *(_BYTE *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0)
                  goto LABEL_109;
                v28 += 7;
                v26 = v2;
                v14 = v29++ > 8;
              }
              while (!v14);
              LODWORD(v30) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 24) = v30;
              goto LABEL_120;
            case 0xAu:
              *(_WORD *)(a1 + 36) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 34) = v34;
              goto LABEL_120;
            case 0xBu:
              *(_WORD *)(a1 + 36) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v36 = v35 != 0;
              }
              *(_BYTE *)(a1 + 35) = v36;
              goto LABEL_120;
            case 0xCu:
              *(_WORD *)(a1 + 36) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v38 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v37 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v38 = v37 != 0;
              }
              *(_BYTE *)(a1 + 32) = v38;
              goto LABEL_120;
            case 0xDu:
              *(_WORD *)(a1 + 36) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 33) = v40;
              goto LABEL_120;
            case 0x15u:
              *(_WORD *)(a1 + 36) |= 2u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_114;
                  }
                  v63 = v41++;
                  v64 = *(_BYTE *)(v42 + v63);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_113:
                    v2 = v63 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_113;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_114;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_114:
              *(_DWORD *)(a1 + 16) = v45;
              goto LABEL_120;
            case 0x16u:
              *(_WORD *)(a1 + 36) |= 4u;
              v47 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v48 = *(_QWORD *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_119;
                  }
                  v67 = v47++;
                  v68 = *(_BYTE *)(v48 + v67);
                  *((_QWORD *)this + 1) = v47;
                  v51 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_118:
                    v2 = v67 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v51) = 0;
                goto LABEL_118;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_119;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_119:
              *(_DWORD *)(a1 + 20) = v51;
LABEL_120:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_120;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F300934(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 36);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 36);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 36) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_18F300A54(_QWORD *result)
{
  *result = &off_1E294FA98;
  result[1] = 0;
  result[3] = 0;
  return result;
}

void sub_18F300A68(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294FA98;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F300AA8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294FA98;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F300AFC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "impulse");
  v6 = *(_BYTE *)(a1 + 28);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state");
    v6 = *(_BYTE *)(a1 + 28);
  }
  if ((v6 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F300B84(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  _DWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        v29 = (_DWORD *)operator new();
        *(_QWORD *)v29 = &off_1E294CA40;
        v29[5] = 0;
        v30 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v29;
        if (v30)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          v29 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v29 + 16))(v29, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 1u;
        v31 = *((_QWORD *)this + 1);
        if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v31);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 28) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        v23 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v33 = 0;
          v34 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_52;
            }
            v35 = v21 + 1;
            v36 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)this + 1) = v35;
            v26 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0)
              break;
            v33 += 7;
            v21 = v35;
            v14 = v34++ > 8;
            if (v14)
            {
LABEL_47:
              LODWORD(v26) = 0;
              goto LABEL_52;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v14 = v25++ > 8;
            if (v14)
              goto LABEL_47;
          }
        }
LABEL_52:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F300EA4(uint64_t result)
{
  *(_QWORD *)result = &off_1E294CA40;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_18F300EB8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 28);
  }
  if ((v4 & 1) != 0)
    result = PB::Writer::write(this, *(double *)(v3 + 16));
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(this, v5);
  return result;
}

_QWORD *sub_18F300F24(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!result[1])
  {
    v1 = result;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E294CA40;
    *(_DWORD *)(v2 + 20) = 0;
    result = (_QWORD *)v1[1];
    v1[1] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

uint64_t sub_18F300F94(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E720;
  *(_QWORD *)(result + 112) = 0;
  *(_DWORD *)(result + 180) = 0;
  return result;
}

void sub_18F300FAC(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E294E720;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F300FF0(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E294E720;
  v2 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F301048(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;
  uint64_t v6;
  int v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitude", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 180);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "course", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "deltaDistance", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "deltaDistanceAccuracy", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x4000) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "demConfidence", *(float *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "demNumContiguousFlatPoints");
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "gnssModesOfOperation");
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x20000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "horzUncSemiMaj", *(float *)(a1 + 140));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "horzUncSemiMajAz", *(float *)(a1 + 144));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x80000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "horzUncSemiMin", *(float *)(a1 + 148));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x40) == 0)
  {
LABEL_14:
    if ((v5 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x80) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x100000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "notificationType");
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x100) == 0)
  {
LABEL_17:
    if ((v5 & 0x200000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "odometer", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x200000) == 0)
  {
LABEL_18:
    if ((v5 & 0x400000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "originDevice");
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x400000) == 0)
  {
LABEL_19:
    if ((v5 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "roadClass");
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x200) == 0)
  {
LABEL_20:
    if ((v5 & 0x400) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x400) == 0)
  {
LABEL_21:
    if ((v5 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "speedAccuracy", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x800) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_53:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 96));
  if ((*(_DWORD *)(a1 + 180) & 0x1000) != 0)
LABEL_23:
    PB::TextFormatter::format(this, "timestampGps", *(double *)(a1 + 104));
LABEL_24:
  v6 = *(_QWORD *)(a1 + 112);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "trackRunData");
  v7 = *(_DWORD *)(a1 + 180);
  if ((v7 & 0x800000) != 0)
  {
    PB::TextFormatter::format(this, "type");
    v7 = *(_DWORD *)(a1 + 180);
    if ((v7 & 0x1000000) == 0)
    {
LABEL_28:
      if ((v7 & 0x2000000) == 0)
        goto LABEL_29;
      goto LABEL_57;
    }
  }
  else if ((v7 & 0x1000000) == 0)
  {
    goto LABEL_28;
  }
  PB::TextFormatter::format(this, "undulation", *(float *)(a1 + 168));
  v7 = *(_DWORD *)(a1 + 180);
  if ((v7 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v7 & 0x2000) == 0)
      goto LABEL_30;
LABEL_58:
    PB::TextFormatter::format(this, "verticalAccuracy", *(double *)(a1 + 120));
    if ((*(_DWORD *)(a1 + 180) & 0x4000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_31;
  }
LABEL_57:
  PB::TextFormatter::format(this, "undulationModel");
  v7 = *(_DWORD *)(a1 + 180);
  if ((v7 & 0x2000) != 0)
    goto LABEL_58;
LABEL_30:
  if ((v7 & 0x4000000) != 0)
LABEL_31:
    PB::TextFormatter::format(this, "wayForm");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F3013F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  unint64_t v106;
  char v107;
  unsigned int v108;
  unint64_t v109;
  char v110;
  char v111;
  unsigned int v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  unint64_t v117;
  char v118;
  char v119;
  unsigned int v120;
  unint64_t v121;
  char v122;
  char v123;
  unsigned int v124;
  unint64_t v125;
  char v126;
  char v127;
  unsigned int v128;
  unint64_t v129;
  char v130;
  char v131;
  unsigned int v132;
  unint64_t v133;
  char v134;
  char v135;
  unsigned int v136;
  unint64_t v137;
  char v138;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_DWORD *)(a1 + 180) |= 0x800u;
        v20 = *((_QWORD *)this + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v20);
        goto LABEL_92;
      case 2u:
        *(_DWORD *)(a1 + 180) |= 0x40u;
        v22 = *((_QWORD *)this + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v22);
        goto LABEL_92;
      case 3u:
        *(_DWORD *)(a1 + 180) |= 0x80u;
        v23 = *((_QWORD *)this + 1);
        if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v23);
        goto LABEL_92;
      case 4u:
        *(_DWORD *)(a1 + 180) |= 0x200u;
        v24 = *((_QWORD *)this + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v24);
        goto LABEL_92;
      case 5u:
        *(_DWORD *)(a1 + 180) |= 0x400u;
        v25 = *((_QWORD *)this + 1);
        if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v25);
        goto LABEL_92;
      case 6u:
        *(_DWORD *)(a1 + 180) |= 0x20u;
        v26 = *((_QWORD *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v26);
        goto LABEL_92;
      case 7u:
        *(_DWORD *)(a1 + 180) |= 2u;
        v27 = *((_QWORD *)this + 1);
        if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v27);
        goto LABEL_92;
      case 8u:
        *(_DWORD *)(a1 + 180) |= 4u;
        v28 = *((_QWORD *)this + 1);
        if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v28);
        goto LABEL_92;
      case 9u:
        *(_DWORD *)(a1 + 180) |= 1u;
        v29 = *((_QWORD *)this + 1);
        if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v29);
        goto LABEL_92;
      case 0xAu:
        *(_DWORD *)(a1 + 180) |= 0x2000u;
        v30 = *((_QWORD *)this + 1);
        if (v30 > 0xFFFFFFFFFFFFFFF7 || v30 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v30);
        goto LABEL_92;
      case 0xBu:
        *(_DWORD *)(a1 + 180) |= 0x800000u;
        v31 = *((_QWORD *)this + 1);
        v32 = *((_QWORD *)this + 2);
        v33 = *(_QWORD *)this;
        if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
        {
          v34 = 0;
          v35 = 0;
          v36 = 0;
          do
          {
            v37 = v31 + 1;
            *((_QWORD *)this + 1) = v31 + 1;
            v38 = *(_BYTE *)(v33 + v31);
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if ((v38 & 0x80) == 0)
              goto LABEL_217;
            v34 += 7;
            v31 = v37;
            v14 = v35++ > 8;
          }
          while (!v14);
LABEL_149:
          LODWORD(v36) = 0;
          goto LABEL_217;
        }
        v107 = 0;
        v108 = 0;
        v36 = 0;
        if (v32 <= v31)
          v32 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v32 == v31)
          {
            LODWORD(v36) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v109 = v31 + 1;
            v110 = *(_BYTE *)(v33 + v31);
            *((_QWORD *)this + 1) = v109;
            v36 |= (unint64_t)(v110 & 0x7F) << v107;
            if (v110 < 0)
            {
              v107 += 7;
              v31 = v109;
              v14 = v108++ > 8;
              if (v14)
                goto LABEL_149;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v36) = 0;
          }
          break;
        }
LABEL_217:
        *(_DWORD *)(a1 + 164) = v36;
        goto LABEL_202;
      case 0xCu:
        *(_DWORD *)(a1 + 180) |= 0x1000u;
        v39 = *((_QWORD *)this + 1);
        if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v39);
        goto LABEL_92;
      case 0xDu:
        *(_DWORD *)(a1 + 180) |= 0x1000000u;
        v40 = *((_QWORD *)this + 1);
        if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v40);
        goto LABEL_200;
      case 0xEu:
        *(_DWORD *)(a1 + 180) |= 0x2000000u;
        v41 = *((_QWORD *)this + 1);
        v42 = *((_QWORD *)this + 2);
        v43 = *(_QWORD *)this;
        if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
        {
          v44 = 0;
          v45 = 0;
          v46 = 0;
          do
          {
            v47 = v41 + 1;
            *((_QWORD *)this + 1) = v41 + 1;
            v48 = *(_BYTE *)(v43 + v41);
            v46 |= (unint64_t)(v48 & 0x7F) << v44;
            if ((v48 & 0x80) == 0)
              goto LABEL_220;
            v44 += 7;
            v41 = v47;
            v14 = v45++ > 8;
          }
          while (!v14);
LABEL_156:
          LODWORD(v46) = 0;
          goto LABEL_220;
        }
        v111 = 0;
        v112 = 0;
        v46 = 0;
        if (v42 <= v41)
          v42 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v42 == v41)
          {
            LODWORD(v46) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v113 = v41 + 1;
            v114 = *(_BYTE *)(v43 + v41);
            *((_QWORD *)this + 1) = v113;
            v46 |= (unint64_t)(v114 & 0x7F) << v111;
            if (v114 < 0)
            {
              v111 += 7;
              v41 = v113;
              v14 = v112++ > 8;
              if (v14)
                goto LABEL_156;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v46) = 0;
          }
          break;
        }
LABEL_220:
        *(_DWORD *)(a1 + 172) = v46;
        goto LABEL_202;
      case 0xFu:
        *(_DWORD *)(a1 + 180) |= 0x20000u;
        v49 = *((_QWORD *)this + 1);
        if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v49);
        goto LABEL_200;
      case 0x10u:
        *(_DWORD *)(a1 + 180) |= 0x80000u;
        v50 = *((_QWORD *)this + 1);
        if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v50);
        goto LABEL_200;
      case 0x11u:
        *(_DWORD *)(a1 + 180) |= 0x40000u;
        v51 = *((_QWORD *)this + 1);
        if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v51);
        goto LABEL_200;
      case 0x12u:
        *(_DWORD *)(a1 + 180) |= 0x100u;
        v52 = *((_QWORD *)this + 1);
        if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v52);
        goto LABEL_92;
      case 0x13u:
        *(_DWORD *)(a1 + 180) |= 8u;
        v53 = *((_QWORD *)this + 1);
        if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v53);
        goto LABEL_92;
      case 0x14u:
        *(_DWORD *)(a1 + 180) |= 0x10u;
        v54 = *((_QWORD *)this + 1);
        if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)this + 2))
          goto LABEL_142;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v54);
LABEL_92:
        v55 = *((_QWORD *)this + 1) + 8;
        goto LABEL_201;
      case 0x15u:
        *(_DWORD *)(a1 + 180) |= 0x200000u;
        v56 = *((_QWORD *)this + 1);
        v57 = *((_QWORD *)this + 2);
        v58 = *(_QWORD *)this;
        if (v56 <= 0xFFFFFFFFFFFFFFF5 && v56 + 10 <= v57)
        {
          v59 = 0;
          v60 = 0;
          v61 = 0;
          do
          {
            v62 = v56 + 1;
            *((_QWORD *)this + 1) = v56 + 1;
            v63 = *(_BYTE *)(v58 + v56);
            v61 |= (unint64_t)(v63 & 0x7F) << v59;
            if ((v63 & 0x80) == 0)
              goto LABEL_223;
            v59 += 7;
            v56 = v62;
            v14 = v60++ > 8;
          }
          while (!v14);
LABEL_163:
          LODWORD(v61) = 0;
          goto LABEL_223;
        }
        v115 = 0;
        v116 = 0;
        v61 = 0;
        if (v57 <= v56)
          v57 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v57 == v56)
          {
            LODWORD(v61) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v117 = v56 + 1;
            v118 = *(_BYTE *)(v58 + v56);
            *((_QWORD *)this + 1) = v117;
            v61 |= (unint64_t)(v118 & 0x7F) << v115;
            if (v118 < 0)
            {
              v115 += 7;
              v56 = v117;
              v14 = v116++ > 8;
              if (v14)
                goto LABEL_163;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v61) = 0;
          }
          break;
        }
LABEL_223:
        *(_DWORD *)(a1 + 156) = v61;
        goto LABEL_202;
      case 0x16u:
        *(_DWORD *)(a1 + 180) |= 0x4000000u;
        v64 = *((_QWORD *)this + 1);
        v65 = *((_QWORD *)this + 2);
        v66 = *(_QWORD *)this;
        if (v64 <= 0xFFFFFFFFFFFFFFF5 && v64 + 10 <= v65)
        {
          v67 = 0;
          v68 = 0;
          v69 = 0;
          do
          {
            v70 = v64 + 1;
            *((_QWORD *)this + 1) = v64 + 1;
            v71 = *(_BYTE *)(v66 + v64);
            v69 |= (unint64_t)(v71 & 0x7F) << v67;
            if ((v71 & 0x80) == 0)
              goto LABEL_226;
            v67 += 7;
            v64 = v70;
            v14 = v68++ > 8;
          }
          while (!v14);
LABEL_170:
          LODWORD(v69) = 0;
          goto LABEL_226;
        }
        v119 = 0;
        v120 = 0;
        v69 = 0;
        if (v65 <= v64)
          v65 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v65 == v64)
          {
            LODWORD(v69) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v121 = v64 + 1;
            v122 = *(_BYTE *)(v66 + v64);
            *((_QWORD *)this + 1) = v121;
            v69 |= (unint64_t)(v122 & 0x7F) << v119;
            if (v122 < 0)
            {
              v119 += 7;
              v64 = v121;
              v14 = v120++ > 8;
              if (v14)
                goto LABEL_170;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v69) = 0;
          }
          break;
        }
LABEL_226:
        *(_DWORD *)(a1 + 176) = v69;
        goto LABEL_202;
      case 0x17u:
        *(_DWORD *)(a1 + 180) |= 0x400000u;
        v72 = *((_QWORD *)this + 1);
        v73 = *((_QWORD *)this + 2);
        v74 = *(_QWORD *)this;
        if (v72 <= 0xFFFFFFFFFFFFFFF5 && v72 + 10 <= v73)
        {
          v75 = 0;
          v76 = 0;
          v77 = 0;
          do
          {
            v78 = v72 + 1;
            *((_QWORD *)this + 1) = v72 + 1;
            v79 = *(_BYTE *)(v74 + v72);
            v77 |= (unint64_t)(v79 & 0x7F) << v75;
            if ((v79 & 0x80) == 0)
              goto LABEL_229;
            v75 += 7;
            v72 = v78;
            v14 = v76++ > 8;
          }
          while (!v14);
LABEL_177:
          LODWORD(v77) = 0;
          goto LABEL_229;
        }
        v123 = 0;
        v124 = 0;
        v77 = 0;
        if (v73 <= v72)
          v73 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v73 == v72)
          {
            LODWORD(v77) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v125 = v72 + 1;
            v126 = *(_BYTE *)(v74 + v72);
            *((_QWORD *)this + 1) = v125;
            v77 |= (unint64_t)(v126 & 0x7F) << v123;
            if (v126 < 0)
            {
              v123 += 7;
              v72 = v125;
              v14 = v124++ > 8;
              if (v14)
                goto LABEL_177;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v77) = 0;
          }
          break;
        }
LABEL_229:
        *(_DWORD *)(a1 + 160) = v77;
        goto LABEL_202;
      case 0x18u:
        *(_DWORD *)(a1 + 180) |= 0x10000u;
        v80 = *((_QWORD *)this + 1);
        v81 = *((_QWORD *)this + 2);
        v82 = *(_QWORD *)this;
        if (v80 <= 0xFFFFFFFFFFFFFFF5 && v80 + 10 <= v81)
        {
          v83 = 0;
          v84 = 0;
          v85 = 0;
          do
          {
            v86 = v80 + 1;
            *((_QWORD *)this + 1) = v80 + 1;
            v87 = *(_BYTE *)(v82 + v80);
            v85 |= (unint64_t)(v87 & 0x7F) << v83;
            if ((v87 & 0x80) == 0)
              goto LABEL_232;
            v83 += 7;
            v80 = v86;
            v14 = v84++ > 8;
          }
          while (!v14);
LABEL_184:
          LODWORD(v85) = 0;
          goto LABEL_232;
        }
        v127 = 0;
        v128 = 0;
        v85 = 0;
        if (v81 <= v80)
          v81 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v81 == v80)
          {
            LODWORD(v85) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v129 = v80 + 1;
            v130 = *(_BYTE *)(v82 + v80);
            *((_QWORD *)this + 1) = v129;
            v85 |= (unint64_t)(v130 & 0x7F) << v127;
            if (v130 < 0)
            {
              v127 += 7;
              v80 = v129;
              v14 = v128++ > 8;
              if (v14)
                goto LABEL_184;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v85) = 0;
          }
          break;
        }
LABEL_232:
        *(_DWORD *)(a1 + 136) = v85;
        goto LABEL_202;
      case 0x19u:
        *(_DWORD *)(a1 + 180) |= 0x100000u;
        v88 = *((_QWORD *)this + 1);
        v89 = *((_QWORD *)this + 2);
        v90 = *(_QWORD *)this;
        if (v88 <= 0xFFFFFFFFFFFFFFF5 && v88 + 10 <= v89)
        {
          v91 = 0;
          v92 = 0;
          v93 = 0;
          do
          {
            v94 = v88 + 1;
            *((_QWORD *)this + 1) = v88 + 1;
            v95 = *(_BYTE *)(v90 + v88);
            v93 |= (unint64_t)(v95 & 0x7F) << v91;
            if ((v95 & 0x80) == 0)
              goto LABEL_235;
            v91 += 7;
            v88 = v94;
            v14 = v92++ > 8;
          }
          while (!v14);
LABEL_191:
          LODWORD(v93) = 0;
          goto LABEL_235;
        }
        v131 = 0;
        v132 = 0;
        v93 = 0;
        if (v89 <= v88)
          v89 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v89 == v88)
          {
            LODWORD(v93) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v133 = v88 + 1;
            v134 = *(_BYTE *)(v90 + v88);
            *((_QWORD *)this + 1) = v133;
            v93 |= (unint64_t)(v134 & 0x7F) << v131;
            if (v134 < 0)
            {
              v131 += 7;
              v88 = v133;
              v14 = v132++ > 8;
              if (v14)
                goto LABEL_191;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v93) = 0;
          }
          break;
        }
LABEL_235:
        *(_DWORD *)(a1 + 152) = v93;
        goto LABEL_202;
      case 0x1Au:
        v96 = operator new();
        sub_18F2DE298(v96);
        v97 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v96;
        if (v97)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
          v96 = *(_QWORD *)(a1 + 112);
        }
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v96 + 16))(v96, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_202:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      case 0x1Bu:
        *(_DWORD *)(a1 + 180) |= 0x8000u;
        v98 = *((_QWORD *)this + 1);
        v99 = *((_QWORD *)this + 2);
        v100 = *(_QWORD *)this;
        if (v98 <= 0xFFFFFFFFFFFFFFF5 && v98 + 10 <= v99)
        {
          v101 = 0;
          v102 = 0;
          v103 = 0;
          do
          {
            v104 = v98 + 1;
            *((_QWORD *)this + 1) = v98 + 1;
            v105 = *(_BYTE *)(v100 + v98);
            v103 |= (unint64_t)(v105 & 0x7F) << v101;
            if ((v105 & 0x80) == 0)
              goto LABEL_238;
            v101 += 7;
            v98 = v104;
            v14 = v102++ > 8;
          }
          while (!v14);
LABEL_198:
          LODWORD(v103) = 0;
          goto LABEL_238;
        }
        v135 = 0;
        v136 = 0;
        v103 = 0;
        if (v99 <= v98)
          v99 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v99 == v98)
          {
            LODWORD(v103) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v137 = v98 + 1;
            v138 = *(_BYTE *)(v100 + v98);
            *((_QWORD *)this + 1) = v137;
            v103 |= (unint64_t)(v138 & 0x7F) << v135;
            if (v138 < 0)
            {
              v135 += 7;
              v98 = v137;
              v14 = v136++ > 8;
              if (v14)
                goto LABEL_198;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v103) = 0;
          }
          break;
        }
LABEL_238:
        *(_DWORD *)(a1 + 132) = v103;
        goto LABEL_202;
      case 0x1Cu:
        *(_DWORD *)(a1 + 180) |= 0x4000u;
        v106 = *((_QWORD *)this + 1);
        if (v106 <= 0xFFFFFFFFFFFFFFFBLL && v106 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v106);
LABEL_200:
          v55 = *((_QWORD *)this + 1) + 4;
LABEL_201:
          *((_QWORD *)this + 1) = v55;
        }
        else
        {
LABEL_142:
          *((_BYTE *)this + 24) = 1;
        }
        goto LABEL_202;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_202;
    }
  }
}

uint64_t sub_18F302164(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  const PB::Base *v5;
  int v6;

  v3 = result;
  v4 = *(_DWORD *)(result + 180);
  if ((v4 & 0x800) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 96));
    v4 = *(_DWORD *)(v3 + 180);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x800000) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 168));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x80000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 148));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x40000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 8) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 8) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x400000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x10000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 180) & 0x100000) != 0)
LABEL_26:
    result = PB::Writer::writeVarInt(this);
LABEL_27:
  v5 = *(const PB::Base **)(v3 + 112);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = *(_DWORD *)(v3 + 180);
  if ((v6 & 0x8000) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v6 = *(_DWORD *)(v3 + 180);
  }
  if ((v6 & 0x4000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 128));
  return result;
}

uint64_t sub_18F30248C(uint64_t result)
{
  *(_QWORD *)result = &off_1E294C9D0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_18F3024A4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3024C8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 24) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "event");
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "value");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F302558(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 4u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_61:
          v2 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *(_DWORD *)(a1 + 20) = v25;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_67;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_66:
          v2 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v2 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v2;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *(_DWORD *)(a1 + 16) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F3028D8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      return PB::Writer::writeVarInt(this);
    }
  }
  else if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 24) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F302950(uint64_t result)
{
  *(_QWORD *)result = &off_1E294D808;
  *(_DWORD *)(result + 220) = 0;
  return result;
}

void sub_18F302968(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F30298C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitude", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 220);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "course", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "deltaDistance", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "deltaDistanceAccuracy", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "groundAltitude", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "groundAltitudeUncertainty", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x200000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "horzUncSemiMaj", *(float *)(a1 + 176));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x400000) == 0)
  {
LABEL_11:
    if ((v5 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "horzUncSemiMajAz", *(float *)(a1 + 180));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x800000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "horzUncSemiMin", *(float *)(a1 + 184));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "isPrefilteredLocation");
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "matchQuality");
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "maxAbsSlope", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "odometer", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "originDevice");
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x1000) == 0)
  {
LABEL_20:
    if ((v5 & 0x2000) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "rawAltitude", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x2000) == 0)
  {
LABEL_21:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "rawUndulation", *(double *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "rawUndulationModel");
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "rawVerticalAccuracy", *(double *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x8000) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "signalEnvironment");
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x8000) == 0)
  {
LABEL_25:
    if ((v5 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "slope", *(double *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x10000) == 0)
  {
LABEL_26:
    if ((v5 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 136));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x20000) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "speedAccuracy", *(double *)(a1 + 144));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x40000) == 0)
  {
LABEL_28:
    if ((v5 & 0x80000) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 152));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x80000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "timestampGps", *(double *)(a1 + 160));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "type");
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_32;
LABEL_65:
    PB::TextFormatter::format(this, "undulationModel");
    if ((*(_DWORD *)(a1 + 220) & 0x100000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_33;
  }
LABEL_64:
  PB::TextFormatter::format(this, "undulation", *(float *)(a1 + 208));
  v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x40000000) != 0)
    goto LABEL_65;
LABEL_32:
  if ((v5 & 0x100000) != 0)
LABEL_33:
    PB::TextFormatter::format(this, "verticalAccuracy", *(double *)(a1 + 168));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F302DBC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  int v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 220) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 2u:
              *(_DWORD *)(a1 + 220) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 3u:
              *(_DWORD *)(a1 + 220) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 4u:
              *(_DWORD *)(a1 + 220) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 5u:
              *(_DWORD *)(a1 + 220) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 6u:
              *(_DWORD *)(a1 + 220) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 7u:
              *(_DWORD *)(a1 + 220) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 8u:
              *(_DWORD *)(a1 + 220) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 9u:
              *(_DWORD *)(a1 + 220) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0xAu:
              *(_DWORD *)(a1 + 220) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 168) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0xBu:
              *(_DWORD *)(a1 + 220) |= 0x10000000u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_200;
                  }
                  v61 = v21++;
                  v62 = *(_BYTE *)(v22 + v61);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_199:
                    v2 = v61 + 1;
                    goto LABEL_200;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_199;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_200;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_200:
              *(_DWORD *)(a1 + 204) = v25;
              goto LABEL_191;
            case 0xCu:
              *(_DWORD *)(a1 + 220) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0xDu:
              *(_DWORD *)(a1 + 220) |= 0x20000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_DWORD *)(a1 + 208) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 0xEu:
              *(_DWORD *)(a1 + 220) |= 0x40000000u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_205;
                  }
                  v65 = v27++;
                  v66 = *(_BYTE *)(v28 + v65);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_204:
                    v2 = v65 + 1;
                    goto LABEL_205;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_204;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_205;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_205:
              *(_DWORD *)(a1 + 212) = v31;
              goto LABEL_191;
            case 0xFu:
              *(_DWORD *)(a1 + 220) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 0x10u:
              *(_DWORD *)(a1 + 220) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 0x11u:
              *(_DWORD *)(a1 + 220) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_83:
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_190;
            case 0x12u:
              *(_DWORD *)(a1 + 220) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x13u:
              *(_DWORD *)(a1 + 220) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x14u:
              *(_DWORD *)(a1 + 220) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x15u:
              *(_DWORD *)(a1 + 220) |= 0x2000000u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_210;
                  }
                  v69 = v33++;
                  v70 = *(_BYTE *)(v34 + v69);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_209:
                    v2 = v69 + 1;
                    goto LABEL_210;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_209;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_210;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_210:
              *(_DWORD *)(a1 + 192) = v37;
              goto LABEL_191;
            case 0x16u:
              *(_DWORD *)(a1 + 220) |= 0x8000000u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_215;
                  }
                  v73 = v39++;
                  v74 = *(_BYTE *)(v40 + v73);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_214:
                    v2 = v73 + 1;
                    goto LABEL_215;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_214;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_215;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_215:
              *(_DWORD *)(a1 + 200) = v43;
              goto LABEL_191;
            case 0x17u:
              *(_DWORD *)(a1 + 220) |= 0x1000000u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_220;
                  }
                  v77 = v45++;
                  v78 = *(_BYTE *)(v46 + v77);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_219:
                    v2 = v77 + 1;
                    goto LABEL_220;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_219;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_220;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_220:
              *(_DWORD *)(a1 + 188) = v49;
              goto LABEL_191;
            case 0x18u:
              *(_DWORD *)(a1 + 220) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x19u:
              *(_DWORD *)(a1 + 220) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x1Au:
              *(_DWORD *)(a1 + 220) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x1Bu:
              *(_DWORD *)(a1 + 220) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x1Cu:
              *(_DWORD *)(a1 + 220) |= 0x80000000;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v52 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v51 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v52 = v51 != 0;
              }
              *(_BYTE *)(a1 + 216) = v52;
              goto LABEL_191;
            case 0x1Du:
              *(_DWORD *)(a1 + 220) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x1Eu:
              *(_DWORD *)(a1 + 220) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_136;
              *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_189;
            case 0x1Fu:
              *(_DWORD *)(a1 + 220) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_189:
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_190:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_136:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_191;
            case 0x20u:
              *(_DWORD *)(a1 + 220) |= 0x4000000u;
              v53 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v54 = *(_QWORD *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_225;
                  }
                  v81 = v53++;
                  v82 = *(_BYTE *)(v54 + v81);
                  *((_QWORD *)this + 1) = v53;
                  v57 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_224:
                    v2 = v81 + 1;
                    goto LABEL_225;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v57) = 0;
                goto LABEL_224;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)this + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_225;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              LODWORD(v57) = 0;
LABEL_225:
              *(_DWORD *)(a1 + 196) = v57;
LABEL_191:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_191;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F303AA0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 220);
  if ((v4 & 0x40000) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 152));
    v4 = *(_DWORD *)(v3 + 220);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0)
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000) == 0)
      goto LABEL_6;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(double *)(v3 + 168));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(double *)(v3 + 160));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 208));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x200000) == 0)
  {
LABEL_16:
    if ((v4 & 0x800000) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 176));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x800000) == 0)
  {
LABEL_17:
    if ((v4 & 0x400000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 184));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x400000) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 180));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 8) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(double *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 8) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x20) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20) == 0)
  {
LABEL_25:
    if ((v4 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x40) == 0)
  {
LABEL_26:
    if ((v4 & 0x8000) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x8000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(double *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x1000) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x1000) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x4000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x2000) == 0)
  {
LABEL_32:
    if ((v4 & 0x4000000) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_64:
  result = PB::Writer::write(this, *(double *)(v3 + 112));
  if ((*(_DWORD *)(v3 + 220) & 0x4000000) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_18F303E44(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E2944828;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_18F303E64(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2944828;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F303EB4(PB::Base *a1)
{
  sub_18F303E64(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F303ED8(_QWORD *a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(this, a3);
  v5 = (double *)a1[1];
  v6 = (double *)a1[2];
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "loiAltitude", v7);
  }
  v8 = (double *)a1[4];
  v9 = (double *)a1[5];
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "loiVerticalUncertainty", v10);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F303F70(_QWORD *a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  _QWORD *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 4);
    v9 = (uint64_t)(a1 + 6);
    v10 = (void **)(a1 + 1);
    v11 = (uint64_t)(a1 + 3);
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v15 >> 3) == 2)
        break;
      if ((v15 >> 3) == 1)
      {
        if (v24 != 2)
        {
          v54 = (char *)a1[2];
          v53 = a1[3];
          if ((unint64_t)v54 >= v53)
          {
            v58 = (char *)*v10;
            v59 = (v54 - (_BYTE *)*v10) >> 3;
            v60 = v59 + 1;
            if ((unint64_t)(v59 + 1) >> 61)
LABEL_122:
              sub_18F26F8C0();
            v61 = v53 - (_QWORD)v58;
            if (v61 >> 2 > v60)
              v60 = v61 >> 2;
            if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
              v62 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v62 = v60;
            if (v62)
            {
              v63 = (char *)sub_18F26F8D4(v11, v62);
              v58 = (char *)a1[1];
              v54 = (char *)a1[2];
            }
            else
            {
              v63 = 0;
            }
            v70 = &v63[8 * v59];
            *(_QWORD *)v70 = 0;
            v55 = v70 + 8;
            while (v54 != v58)
            {
              v71 = *((_QWORD *)v54 - 1);
              v54 -= 8;
              *((_QWORD *)v70 - 1) = v71;
              v70 -= 8;
            }
            a1[1] = v70;
            a1[2] = v55;
            a1[3] = &v63[8 * v62];
            if (v58)
              operator delete(v58);
          }
          else
          {
            *(_QWORD *)v54 = 0;
            v55 = v54 + 8;
          }
          a1[2] = v55;
LABEL_110:
          v74 = *((_QWORD *)this + 1);
          if (v74 <= 0xFFFFFFFFFFFFFFF7 && v74 + 8 <= *((_QWORD *)this + 2))
          {
            *(v55 - 1) = *(_QWORD *)(*(_QWORD *)this + v74);
            *((_QWORD *)this + 1) += 8;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_114;
        }
        if ((PB::Reader::placeMark() & 1) != 0)
          return 0;
        v25 = *((_QWORD *)this + 1);
        v26 = *((_QWORD *)this + 2);
        while (v25 < v26 && !*((_BYTE *)this + 24))
        {
          v28 = (char *)a1[2];
          v27 = a1[3];
          if ((unint64_t)v28 >= v27)
          {
            v30 = (char *)*v10;
            v31 = (v28 - (_BYTE *)*v10) >> 3;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61)
              goto LABEL_122;
            v33 = v27 - (_QWORD)v30;
            if (v33 >> 2 > v32)
              v32 = v33 >> 2;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
              v34 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v34 = v32;
            if (v34)
            {
              v35 = (char *)sub_18F26F8D4(v11, v34);
              v30 = (char *)a1[1];
              v28 = (char *)a1[2];
            }
            else
            {
              v35 = 0;
            }
            v36 = &v35[8 * v31];
            *(_QWORD *)v36 = 0;
            v29 = v36 + 8;
            while (v28 != v30)
            {
              v37 = *((_QWORD *)v28 - 1);
              v28 -= 8;
              *((_QWORD *)v36 - 1) = v37;
              v36 -= 8;
            }
            a1[1] = v36;
            a1[2] = v29;
            a1[3] = &v35[8 * v34];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_QWORD *)v28 = 0;
            v29 = v28 + 8;
          }
          a1[2] = v29;
          v38 = *((_QWORD *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)this + 2))
            goto LABEL_78;
          *(v29 - 1) = *(_QWORD *)(*(_QWORD *)this + v38);
          v26 = *((_QWORD *)this + 2);
          v25 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v25;
        }
LABEL_79:
        PB::Reader::recallMark();
        goto LABEL_114;
      }
      if ((PB::Reader::skip(this) & 1) == 0)
        return 0;
LABEL_114:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    if (v24 != 2)
    {
      v57 = (char *)a1[5];
      v56 = a1[6];
      if ((unint64_t)v57 >= v56)
      {
        v64 = (char *)*v8;
        v65 = (v57 - (_BYTE *)*v8) >> 3;
        v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 61)
LABEL_123:
          sub_18F26F8C0();
        v67 = v56 - (_QWORD)v64;
        if (v67 >> 2 > v66)
          v66 = v67 >> 2;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68)
        {
          v69 = (char *)sub_18F26F8D4(v9, v68);
          v64 = (char *)a1[4];
          v57 = (char *)a1[5];
        }
        else
        {
          v69 = 0;
        }
        v72 = &v69[8 * v65];
        *(_QWORD *)v72 = 0;
        v55 = v72 + 8;
        while (v57 != v64)
        {
          v73 = *((_QWORD *)v57 - 1);
          v57 -= 8;
          *((_QWORD *)v72 - 1) = v73;
          v72 -= 8;
        }
        a1[4] = v72;
        a1[5] = v55;
        a1[6] = &v69[8 * v68];
        if (v64)
          operator delete(v64);
      }
      else
      {
        *(_QWORD *)v57 = 0;
        v55 = v57 + 8;
      }
      a1[5] = v55;
      goto LABEL_110;
    }
    if ((PB::Reader::placeMark() & 1) != 0)
      return 0;
    v39 = *((_QWORD *)this + 1);
    v40 = *((_QWORD *)this + 2);
    while (v39 < v40 && !*((_BYTE *)this + 24))
    {
      v42 = (char *)a1[5];
      v41 = a1[6];
      if ((unint64_t)v42 >= v41)
      {
        v44 = (char *)*v8;
        v45 = (v42 - (_BYTE *)*v8) >> 3;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 61)
          goto LABEL_123;
        v47 = v41 - (_QWORD)v44;
        if (v47 >> 2 > v46)
          v46 = v47 >> 2;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
          v48 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        if (v48)
        {
          v49 = (char *)sub_18F26F8D4(v9, v48);
          v44 = (char *)a1[4];
          v42 = (char *)a1[5];
        }
        else
        {
          v49 = 0;
        }
        v50 = &v49[8 * v45];
        *(_QWORD *)v50 = 0;
        v43 = v50 + 8;
        while (v42 != v44)
        {
          v51 = *((_QWORD *)v42 - 1);
          v42 -= 8;
          *((_QWORD *)v50 - 1) = v51;
          v50 -= 8;
        }
        a1[4] = v50;
        a1[5] = v43;
        a1[6] = &v49[8 * v48];
        if (v44)
          operator delete(v44);
      }
      else
      {
        *(_QWORD *)v42 = 0;
        v43 = v42 + 8;
      }
      a1[5] = v43;
      v52 = *((_QWORD *)this + 1);
      if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)this + 2))
      {
LABEL_78:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_79;
      }
      *(v43 - 1) = *(_QWORD *)(*(_QWORD *)this + v52);
      v40 = *((_QWORD *)this + 2);
      v39 = *((_QWORD *)this + 1) + 8;
      *((_QWORD *)this + 1) = v39;
    }
    goto LABEL_79;
  }
  return v4 == 0;
}

uint64_t sub_18F3044A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = result;
  v4 = *(double **)(result + 8);
  v5 = *(double **)(result + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v8 = *(double **)(v3 + 32);
  v7 = *(double **)(v3 + 40);
  while (v8 != v7)
  {
    v9 = *v8++;
    result = PB::Writer::write(this, v9);
  }
  return result;
}

uint64_t sub_18F304508(uint64_t result)
{
  *(_QWORD *)result = &off_1E294D450;
  *(_DWORD *)(result + 84) = -1;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_18F304528(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F30454C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "arrivalDate", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 92);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(a1 + 92) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidence");
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "confidenceOfGeoLocation", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "departureDate", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "distanceToLoi", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "hashedLatLong");
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(this, "uncertaintyOfGeoLocation", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 92) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(this, "type");
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x80) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x100) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "withinDistance", *(double *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F3046FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 92) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 2u:
              *(_WORD *)(a1 + 92) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 3u:
              *(_WORD *)(a1 + 92) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 4u:
              *(_WORD *)(a1 + 92) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 5u:
              *(_WORD *)(a1 + 92) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 6u:
              *(_WORD *)(a1 + 92) |= 0x200u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_89;
                  }
                  v37 = v21++;
                  v38 = *(_BYTE *)(v22 + v37);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_88:
                    v2 = v37 + 1;
                    goto LABEL_89;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_88;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_89;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_89:
              *(_DWORD *)(a1 + 80) = v25;
              goto LABEL_95;
            case 7u:
              *(_WORD *)(a1 + 92) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 8u:
              *(_WORD *)(a1 + 92) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 9u:
              *(_WORD *)(a1 + 92) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 0xAu:
              *(_WORD *)(a1 + 92) |= 0x400u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_94;
                  }
                  v41 = v27++;
                  v42 = *(_BYTE *)(v28 + v41);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_93:
                    v2 = v41 + 1;
                    goto LABEL_94;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_93;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_94;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_94:
              *(_DWORD *)(a1 + 84) = v31;
LABEL_95:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xBu:
              *(_WORD *)(a1 + 92) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_84:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_95;
            case 0xCu:
              *(_WORD *)(a1 + 92) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 88) = v34;
              goto LABEL_95;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_95;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F304C8C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 92);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 56));
    v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  if ((*(_WORD *)(v3 + 92) & 0x800) != 0)
    return PB::Writer::write(this);
  return result;
}

_QWORD *sub_18F304E00(_QWORD *result)
{
  *result = &off_1E294E758;
  result[4] = 0;
  result[24] = 0;
  return result;
}

void sub_18F304E18(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E294E758;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F304E5C(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E294E758;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F304EB4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "alsLux");
    v5 = *(_QWORD *)(a1 + 192);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_46;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "caltype");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "confidence");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "drivingArmLikelihoodSum", *(float *)(a1 + 76));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "drivingStowedLikelihoodSum", *(float *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "exitState");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "hidTimestamp", *(double *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "isMoving");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "isVehicular");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "machineFrequency", *(float *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000) == 0)
      goto LABEL_13;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "motionType");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x10000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "mounted");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x20000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "mountedConfidence");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "now");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "rawConfidence");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x80000) == 0)
  {
LABEL_17:
    if ((v5 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "rawIsVehicular");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x100000) == 0)
  {
LABEL_18:
    if ((v5 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "rawMotionType");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x200000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "rowStrokeAmplitude", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "rowStrokeFrequency", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_22;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "rowStrokePower", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_23;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "seq");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_24;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "ssLikelihoodSum", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_24:
    if ((v5 & 4) == 0)
      goto LABEL_25;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "standing");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 4) == 0)
  {
LABEL_25:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_26;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "startTime");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_27;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "turn");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_28;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "typeYouth");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_29;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "vectorMagnitude", *(float *)(a1 + 156));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "vehicleExitState");
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_31;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean0", *(float *)(a1 + 164));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_32;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean1", *(float *)(a1 + 168));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_33;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean2", *(float *)(a1 + 172));
  v5 = *(_QWORD *)(a1 + 192);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_35;
    goto LABEL_34;
  }
LABEL_75:
  PB::TextFormatter::format(this, "vehicleType");
  if ((*(_QWORD *)(a1 + 192) & 0x800000000) != 0)
LABEL_34:
    PB::TextFormatter::format(this, "vehicularConfidence");
LABEL_35:
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "vehicularFlags");
  v7 = *(_QWORD *)(a1 + 192);
  if ((v7 & 8) != 0)
  {
    PB::TextFormatter::format(this, "wallStartTime", *(double *)(a1 + 40));
    v7 = *(_QWORD *)(a1 + 192);
    if ((v7 & 0x10) == 0)
    {
LABEL_39:
      if ((v7 & 0x1000000000) == 0)
        goto LABEL_40;
      goto LABEL_79;
    }
  }
  else if ((v7 & 0x10) == 0)
  {
    goto LABEL_39;
  }
  PB::TextFormatter::format(this, "workoutDetectionTime");
  v7 = *(_QWORD *)(a1 + 192);
  if ((v7 & 0x1000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x20) == 0)
      goto LABEL_41;
LABEL_80:
    PB::TextFormatter::format(this, "workoutEscalationTime");
    if ((*(_QWORD *)(a1 + 192) & 0x2000000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_42;
  }
LABEL_79:
  PB::TextFormatter::format(this, "workoutDetectionType");
  v7 = *(_QWORD *)(a1 + 192);
  if ((v7 & 0x20) != 0)
    goto LABEL_80;
LABEL_41:
  if ((v7 & 0x2000000000) != 0)
LABEL_42:
    PB::TextFormatter::format(this, "youthClassificationReason");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F3053C4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  char v176;
  unsigned int v177;
  uint64_t v178;
  unint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  char v189;
  unsigned int v190;
  uint64_t v191;
  unint64_t v192;
  char v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  char v197;
  unsigned int v198;
  uint64_t v199;
  unint64_t v200;
  char v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  char v205;
  unsigned int v206;
  uint64_t v207;
  unint64_t v208;
  char v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  char v213;
  unsigned int v214;
  uint64_t v215;
  unint64_t v216;
  char v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  char v221;
  unsigned int v222;
  uint64_t v223;
  unint64_t v224;
  char v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  char v232;
  unsigned int v233;
  uint64_t v234;
  unint64_t v235;
  char v236;
  char v237;
  unsigned int v238;
  unint64_t v239;
  char v240;
  char v241;
  unsigned int v242;
  unint64_t v243;
  char v244;
  char v245;
  unsigned int v246;
  unint64_t v247;
  char v248;
  char v249;
  unsigned int v250;
  unint64_t v251;
  char v252;
  char v253;
  unsigned int v254;
  unint64_t v255;
  char v256;
  char v257;
  unsigned int v258;
  unint64_t v259;
  char v260;
  char v261;
  unsigned int v262;
  unint64_t v263;
  char v264;
  char v265;
  unsigned int v266;
  unint64_t v267;
  char v268;
  char v269;
  unsigned int v270;
  unint64_t v271;
  char v272;
  char v273;
  unsigned int v274;
  unint64_t v275;
  char v276;
  char v277;
  unsigned int v278;
  unint64_t v279;
  char v280;
  char v281;
  unsigned int v282;
  unint64_t v283;
  char v284;
  char v285;
  unsigned int v286;
  unint64_t v287;
  char v288;
  char v289;
  unsigned int v290;
  unint64_t v291;
  char v292;
  char v293;
  unsigned int v294;
  unint64_t v295;
  char v296;
  char v297;
  unsigned int v298;
  unint64_t v299;
  char v300;
  char v301;
  unsigned int v302;
  unint64_t v303;
  char v304;
  char v305;
  unsigned int v306;
  unint64_t v307;
  char v308;
  char v309;
  unsigned int v310;
  unint64_t v311;
  char v312;
  char v313;
  unsigned int v314;
  unint64_t v315;
  char v316;
  char v317;
  unsigned int v318;
  unint64_t v319;
  char v320;
  char v321;
  unsigned int v322;
  unint64_t v323;
  char v324;
  char v325;
  unsigned int v326;
  unint64_t v327;
  char v328;
  char v329;
  unsigned int v330;
  unint64_t v331;
  char v332;
  char v333;
  unsigned int v334;
  unint64_t v335;
  char v336;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_QWORD *)(a1 + 192) |= 0x8000uLL;
        v20 = *((_QWORD *)this + 1);
        v21 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          v237 = 0;
          v238 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)this + 1);
          do
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_449;
            }
            v239 = v20 + 1;
            v240 = *(_BYTE *)(v22 + v20);
            *((_QWORD *)this + 1) = v239;
            v25 |= (unint64_t)(v240 & 0x7F) << v237;
            if ((v240 & 0x80) == 0)
            {
              if (*((_BYTE *)this + 24))
                LODWORD(v25) = 0;
              goto LABEL_449;
            }
            v237 += 7;
            v20 = v239;
            v14 = v238++ > 8;
          }
          while (!v14);
LABEL_250:
          LODWORD(v25) = 0;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v26 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v27 = *(_BYTE *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0)
              break;
            v23 += 7;
            v20 = v26;
            v14 = v24++ > 8;
            if (v14)
              goto LABEL_250;
          }
        }
LABEL_449:
        *(_DWORD *)(a1 + 100) = v25;
        goto LABEL_522;
      case 2u:
        *(_QWORD *)(a1 + 192) |= 0x100uLL;
        v29 = *((_QWORD *)this + 1);
        v30 = *((_QWORD *)this + 2);
        v31 = *(_QWORD *)this;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          do
          {
            v35 = v29 + 1;
            *((_QWORD *)this + 1) = v29 + 1;
            v36 = *(_BYTE *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0)
              goto LABEL_452;
            v32 += 7;
            v29 = v35;
            v14 = v33++ > 8;
          }
          while (!v14);
LABEL_257:
          LODWORD(v34) = 0;
          goto LABEL_452;
        }
        v241 = 0;
        v242 = 0;
        v34 = 0;
        if (v30 <= v29)
          v30 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v243 = v29 + 1;
            v244 = *(_BYTE *)(v31 + v29);
            *((_QWORD *)this + 1) = v243;
            v34 |= (unint64_t)(v244 & 0x7F) << v241;
            if (v244 < 0)
            {
              v241 += 7;
              v29 = v243;
              v14 = v242++ > 8;
              if (v14)
                goto LABEL_257;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v34) = 0;
          }
          break;
        }
LABEL_452:
        *(_DWORD *)(a1 + 72) = v34;
        goto LABEL_522;
      case 3u:
        *(_QWORD *)(a1 + 192) |= 0x10000uLL;
        v37 = *((_QWORD *)this + 1);
        v38 = *((_QWORD *)this + 2);
        v39 = *(_QWORD *)this;
        if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
        {
          v40 = 0;
          v41 = 0;
          v42 = 0;
          do
          {
            v43 = v37 + 1;
            *((_QWORD *)this + 1) = v37 + 1;
            v44 = *(_BYTE *)(v39 + v37);
            v42 |= (unint64_t)(v44 & 0x7F) << v40;
            if ((v44 & 0x80) == 0)
              goto LABEL_455;
            v40 += 7;
            v37 = v43;
            v14 = v41++ > 8;
          }
          while (!v14);
LABEL_264:
          LODWORD(v42) = 0;
          goto LABEL_455;
        }
        v245 = 0;
        v246 = 0;
        v42 = 0;
        if (v38 <= v37)
          v38 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v38 == v37)
          {
            LODWORD(v42) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v247 = v37 + 1;
            v248 = *(_BYTE *)(v39 + v37);
            *((_QWORD *)this + 1) = v247;
            v42 |= (unint64_t)(v248 & 0x7F) << v245;
            if (v248 < 0)
            {
              v245 += 7;
              v37 = v247;
              v14 = v246++ > 8;
              if (v14)
                goto LABEL_264;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v42) = 0;
          }
          break;
        }
LABEL_455:
        *(_DWORD *)(a1 + 104) = v42;
        goto LABEL_522;
      case 4u:
        *(_QWORD *)(a1 + 192) |= 0x20000uLL;
        v45 = *((_QWORD *)this + 1);
        v46 = *((_QWORD *)this + 2);
        v47 = *(_QWORD *)this;
        if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
        {
          v48 = 0;
          v49 = 0;
          v50 = 0;
          do
          {
            v51 = v45 + 1;
            *((_QWORD *)this + 1) = v45 + 1;
            v52 = *(_BYTE *)(v47 + v45);
            v50 |= (unint64_t)(v52 & 0x7F) << v48;
            if ((v52 & 0x80) == 0)
              goto LABEL_458;
            v48 += 7;
            v45 = v51;
            v14 = v49++ > 8;
          }
          while (!v14);
LABEL_271:
          LODWORD(v50) = 0;
          goto LABEL_458;
        }
        v249 = 0;
        v250 = 0;
        v50 = 0;
        if (v46 <= v45)
          v46 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v46 == v45)
          {
            LODWORD(v50) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v251 = v45 + 1;
            v252 = *(_BYTE *)(v47 + v45);
            *((_QWORD *)this + 1) = v251;
            v50 |= (unint64_t)(v252 & 0x7F) << v249;
            if (v252 < 0)
            {
              v249 += 7;
              v45 = v251;
              v14 = v250++ > 8;
              if (v14)
                goto LABEL_271;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v50) = 0;
          }
          break;
        }
LABEL_458:
        *(_DWORD *)(a1 + 108) = v50;
        goto LABEL_522;
      case 5u:
        *(_QWORD *)(a1 + 192) |= 0x800uLL;
        v53 = *((_QWORD *)this + 1);
        v54 = *((_QWORD *)this + 2);
        v55 = *(_QWORD *)this;
        if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
        {
          v56 = 0;
          v57 = 0;
          v58 = 0;
          do
          {
            v59 = v53 + 1;
            *((_QWORD *)this + 1) = v53 + 1;
            v60 = *(_BYTE *)(v55 + v53);
            v58 |= (unint64_t)(v60 & 0x7F) << v56;
            if ((v60 & 0x80) == 0)
              goto LABEL_461;
            v56 += 7;
            v53 = v59;
            v14 = v57++ > 8;
          }
          while (!v14);
LABEL_278:
          LODWORD(v58) = 0;
          goto LABEL_461;
        }
        v253 = 0;
        v254 = 0;
        v58 = 0;
        if (v54 <= v53)
          v54 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v54 == v53)
          {
            LODWORD(v58) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v255 = v53 + 1;
            v256 = *(_BYTE *)(v55 + v53);
            *((_QWORD *)this + 1) = v255;
            v58 |= (unint64_t)(v256 & 0x7F) << v253;
            if (v256 < 0)
            {
              v253 += 7;
              v53 = v255;
              v14 = v254++ > 8;
              if (v14)
                goto LABEL_278;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v58) = 0;
          }
          break;
        }
LABEL_461:
        *(_DWORD *)(a1 + 84) = v58;
        goto LABEL_522;
      case 6u:
        *(_QWORD *)(a1 + 192) |= 0x8000000uLL;
        v61 = *((_QWORD *)this + 1);
        v62 = *((_QWORD *)this + 2);
        v63 = *(_QWORD *)this;
        if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
        {
          v64 = 0;
          v65 = 0;
          v66 = 0;
          do
          {
            v67 = v61 + 1;
            *((_QWORD *)this + 1) = v61 + 1;
            v68 = *(_BYTE *)(v63 + v61);
            v66 |= (unint64_t)(v68 & 0x7F) << v64;
            if ((v68 & 0x80) == 0)
              goto LABEL_464;
            v64 += 7;
            v61 = v67;
            v14 = v65++ > 8;
          }
          while (!v14);
LABEL_285:
          LODWORD(v66) = 0;
          goto LABEL_464;
        }
        v257 = 0;
        v258 = 0;
        v66 = 0;
        if (v62 <= v61)
          v62 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v62 == v61)
          {
            LODWORD(v66) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v259 = v61 + 1;
            v260 = *(_BYTE *)(v63 + v61);
            *((_QWORD *)this + 1) = v259;
            v66 |= (unint64_t)(v260 & 0x7F) << v257;
            if (v260 < 0)
            {
              v257 += 7;
              v61 = v259;
              v14 = v258++ > 8;
              if (v14)
                goto LABEL_285;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v66) = 0;
          }
          break;
        }
LABEL_464:
        *(_DWORD *)(a1 + 148) = v66;
        goto LABEL_522;
      case 7u:
        *(_QWORD *)(a1 + 192) |= 0x2000uLL;
        v69 = *((_QWORD *)this + 1);
        v70 = *((_QWORD *)this + 2);
        v71 = *(_QWORD *)this;
        if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
        {
          v72 = 0;
          v73 = 0;
          v74 = 0;
          do
          {
            v75 = v69 + 1;
            *((_QWORD *)this + 1) = v69 + 1;
            v76 = *(_BYTE *)(v71 + v69);
            v74 |= (unint64_t)(v76 & 0x7F) << v72;
            if ((v76 & 0x80) == 0)
              goto LABEL_467;
            v72 += 7;
            v69 = v75;
            v14 = v73++ > 8;
          }
          while (!v14);
LABEL_292:
          LODWORD(v74) = 0;
          goto LABEL_467;
        }
        v261 = 0;
        v262 = 0;
        v74 = 0;
        if (v70 <= v69)
          v70 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v70 == v69)
          {
            LODWORD(v74) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v263 = v69 + 1;
            v264 = *(_BYTE *)(v71 + v69);
            *((_QWORD *)this + 1) = v263;
            v74 |= (unint64_t)(v264 & 0x7F) << v261;
            if (v264 < 0)
            {
              v261 += 7;
              v69 = v263;
              v14 = v262++ > 8;
              if (v14)
                goto LABEL_292;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v74) = 0;
          }
          break;
        }
LABEL_467:
        *(_DWORD *)(a1 + 92) = v74;
        goto LABEL_522;
      case 8u:
        *(_QWORD *)(a1 + 192) |= 0x1000uLL;
        v77 = *((_QWORD *)this + 1);
        v78 = *((_QWORD *)this + 2);
        v79 = *(_QWORD *)this;
        if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
        {
          v80 = 0;
          v81 = 0;
          v82 = 0;
          do
          {
            v83 = v77 + 1;
            *((_QWORD *)this + 1) = v77 + 1;
            v84 = *(_BYTE *)(v79 + v77);
            v82 |= (unint64_t)(v84 & 0x7F) << v80;
            if ((v84 & 0x80) == 0)
              goto LABEL_470;
            v80 += 7;
            v77 = v83;
            v14 = v81++ > 8;
          }
          while (!v14);
LABEL_299:
          LODWORD(v82) = 0;
          goto LABEL_470;
        }
        v265 = 0;
        v266 = 0;
        v82 = 0;
        if (v78 <= v77)
          v78 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v78 == v77)
          {
            LODWORD(v82) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v267 = v77 + 1;
            v268 = *(_BYTE *)(v79 + v77);
            *((_QWORD *)this + 1) = v267;
            v82 |= (unint64_t)(v268 & 0x7F) << v265;
            if (v268 < 0)
            {
              v265 += 7;
              v77 = v267;
              v14 = v266++ > 8;
              if (v14)
                goto LABEL_299;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v82) = 0;
          }
          break;
        }
LABEL_470:
        *(_DWORD *)(a1 + 88) = v82;
        goto LABEL_522;
      case 9u:
        *(_QWORD *)(a1 + 192) |= 0x1000000uLL;
        v85 = *((_QWORD *)this + 1);
        v86 = *((_QWORD *)this + 2);
        v87 = *(_QWORD *)this;
        if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
        {
          v88 = 0;
          v89 = 0;
          v90 = 0;
          do
          {
            v91 = v85 + 1;
            *((_QWORD *)this + 1) = v85 + 1;
            v92 = *(_BYTE *)(v87 + v85);
            v90 |= (unint64_t)(v92 & 0x7F) << v88;
            if ((v92 & 0x80) == 0)
              goto LABEL_473;
            v88 += 7;
            v85 = v91;
            v14 = v89++ > 8;
          }
          while (!v14);
LABEL_306:
          LODWORD(v90) = 0;
          goto LABEL_473;
        }
        v269 = 0;
        v270 = 0;
        v90 = 0;
        if (v86 <= v85)
          v86 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v86 == v85)
          {
            LODWORD(v90) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v271 = v85 + 1;
            v272 = *(_BYTE *)(v87 + v85);
            *((_QWORD *)this + 1) = v271;
            v90 |= (unint64_t)(v272 & 0x7F) << v269;
            if (v272 < 0)
            {
              v269 += 7;
              v85 = v271;
              v14 = v270++ > 8;
              if (v14)
                goto LABEL_306;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v90) = 0;
          }
          break;
        }
LABEL_473:
        *(_DWORD *)(a1 + 136) = v90;
        goto LABEL_522;
      case 0xAu:
        *(_QWORD *)(a1 + 192) |= 8uLL;
        v93 = *((_QWORD *)this + 1);
        if (v93 > 0xFFFFFFFFFFFFFFF7 || v93 + 8 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v93);
        goto LABEL_93;
      case 0xBu:
        *(_QWORD *)(a1 + 192) |= 1uLL;
        v94 = *((_QWORD *)this + 1);
        if (v94 > 0xFFFFFFFFFFFFFFF7 || v94 + 8 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v94);
LABEL_93:
        v95 = *((_QWORD *)this + 1) + 8;
        goto LABEL_421;
      case 0xCu:
        *(_QWORD *)(a1 + 192) |= 4uLL;
        v96 = *((_QWORD *)this + 1);
        v97 = *((_QWORD *)this + 2);
        v98 = *(_QWORD *)this;
        if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
        {
          v99 = 0;
          v100 = 0;
          v101 = 0;
          do
          {
            v102 = v96 + 1;
            *((_QWORD *)this + 1) = v96 + 1;
            v103 = *(_BYTE *)(v98 + v96);
            v101 |= (unint64_t)(v103 & 0x7F) << v99;
            if ((v103 & 0x80) == 0)
              goto LABEL_476;
            v99 += 7;
            v96 = v102;
            v14 = v100++ > 8;
          }
          while (!v14);
LABEL_313:
          v101 = 0;
          goto LABEL_476;
        }
        v273 = 0;
        v274 = 0;
        v101 = 0;
        if (v97 <= v96)
          v97 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v97 == v96)
          {
            v101 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v275 = v96 + 1;
            v276 = *(_BYTE *)(v98 + v96);
            *((_QWORD *)this + 1) = v275;
            v101 |= (unint64_t)(v276 & 0x7F) << v273;
            if (v276 < 0)
            {
              v273 += 7;
              v96 = v275;
              v14 = v274++ > 8;
              if (v14)
                goto LABEL_313;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v101 = 0;
          }
          break;
        }
LABEL_476:
        *(_QWORD *)(a1 + 24) = v101;
        goto LABEL_522;
      case 0xDu:
        *(_QWORD *)(a1 + 192) |= 2uLL;
        v104 = *((_QWORD *)this + 1);
        v105 = *((_QWORD *)this + 2);
        v106 = *(_QWORD *)this;
        if (v104 <= 0xFFFFFFFFFFFFFFF5 && v104 + 10 <= v105)
        {
          v107 = 0;
          v108 = 0;
          v109 = 0;
          do
          {
            v110 = v104 + 1;
            *((_QWORD *)this + 1) = v104 + 1;
            v111 = *(_BYTE *)(v106 + v104);
            v109 |= (unint64_t)(v111 & 0x7F) << v107;
            if ((v111 & 0x80) == 0)
              goto LABEL_479;
            v107 += 7;
            v104 = v110;
            v14 = v108++ > 8;
          }
          while (!v14);
LABEL_320:
          v109 = 0;
          goto LABEL_479;
        }
        v277 = 0;
        v278 = 0;
        v109 = 0;
        if (v105 <= v104)
          v105 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v105 == v104)
          {
            v109 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v279 = v104 + 1;
            v280 = *(_BYTE *)(v106 + v104);
            *((_QWORD *)this + 1) = v279;
            v109 |= (unint64_t)(v280 & 0x7F) << v277;
            if (v280 < 0)
            {
              v277 += 7;
              v104 = v279;
              v14 = v278++ > 8;
              if (v14)
                goto LABEL_320;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v109 = 0;
          }
          break;
        }
LABEL_479:
        *(_QWORD *)(a1 + 16) = v109;
        goto LABEL_522;
      case 0xEu:
        *(_QWORD *)(a1 + 192) |= 0x80uLL;
        v112 = *((_QWORD *)this + 1);
        v113 = *((_QWORD *)this + 2);
        v114 = *(_QWORD *)this;
        if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v113)
        {
          v115 = 0;
          v116 = 0;
          v117 = 0;
          do
          {
            v118 = v112 + 1;
            *((_QWORD *)this + 1) = v112 + 1;
            v119 = *(_BYTE *)(v114 + v112);
            v117 |= (unint64_t)(v119 & 0x7F) << v115;
            if ((v119 & 0x80) == 0)
              goto LABEL_482;
            v115 += 7;
            v112 = v118;
            v14 = v116++ > 8;
          }
          while (!v14);
LABEL_327:
          LODWORD(v117) = 0;
          goto LABEL_482;
        }
        v281 = 0;
        v282 = 0;
        v117 = 0;
        if (v113 <= v112)
          v113 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v113 == v112)
          {
            LODWORD(v117) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v283 = v112 + 1;
            v284 = *(_BYTE *)(v114 + v112);
            *((_QWORD *)this + 1) = v283;
            v117 |= (unint64_t)(v284 & 0x7F) << v281;
            if (v284 < 0)
            {
              v281 += 7;
              v112 = v283;
              v14 = v282++ > 8;
              if (v14)
                goto LABEL_327;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v117) = 0;
          }
          break;
        }
LABEL_482:
        *(_DWORD *)(a1 + 68) = v117;
        goto LABEL_522;
      case 0xFu:
        *(_QWORD *)(a1 + 192) |= 0x20000000uLL;
        v120 = *((_QWORD *)this + 1);
        if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v120);
        goto LABEL_420;
      case 0x10u:
        *(_QWORD *)(a1 + 192) |= 0x4000000uLL;
        v121 = *((_QWORD *)this + 1);
        v122 = *((_QWORD *)this + 2);
        v123 = *(_QWORD *)this;
        if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
        {
          v124 = 0;
          v125 = 0;
          v126 = 0;
          do
          {
            v127 = v121 + 1;
            *((_QWORD *)this + 1) = v121 + 1;
            v128 = *(_BYTE *)(v123 + v121);
            v126 |= (unint64_t)(v128 & 0x7F) << v124;
            if ((v128 & 0x80) == 0)
              goto LABEL_485;
            v124 += 7;
            v121 = v127;
            v14 = v125++ > 8;
          }
          while (!v14);
LABEL_334:
          LODWORD(v126) = 0;
          goto LABEL_485;
        }
        v285 = 0;
        v286 = 0;
        v126 = 0;
        if (v122 <= v121)
          v122 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v122 == v121)
          {
            LODWORD(v126) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v287 = v121 + 1;
            v288 = *(_BYTE *)(v123 + v121);
            *((_QWORD *)this + 1) = v287;
            v126 |= (unint64_t)(v288 & 0x7F) << v285;
            if (v288 < 0)
            {
              v285 += 7;
              v121 = v287;
              v14 = v286++ > 8;
              if (v14)
                goto LABEL_334;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v126) = 0;
          }
          break;
        }
LABEL_485:
        *(_DWORD *)(a1 + 144) = v126;
        goto LABEL_522;
      case 0x11u:
        *(_QWORD *)(a1 + 192) |= 0x4000uLL;
        v129 = *((_QWORD *)this + 1);
        if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v129);
        goto LABEL_420;
      case 0x12u:
        *(_QWORD *)(a1 + 192) |= 0x400000uLL;
        v130 = *((_QWORD *)this + 1);
        if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v130);
        goto LABEL_420;
      case 0x13u:
        *(_QWORD *)(a1 + 192) |= 0x200000uLL;
        v131 = *((_QWORD *)this + 1);
        if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v131);
        goto LABEL_420;
      case 0x14u:
        *(_QWORD *)(a1 + 192) |= 0x800000uLL;
        v132 = *((_QWORD *)this + 1);
        if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v132);
        goto LABEL_420;
      case 0x15u:
        *(_QWORD *)(a1 + 192) |= 0x10uLL;
        v133 = *((_QWORD *)this + 1);
        v134 = *((_QWORD *)this + 2);
        v135 = *(_QWORD *)this;
        if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
        {
          v136 = 0;
          v137 = 0;
          v138 = 0;
          do
          {
            v139 = v133 + 1;
            *((_QWORD *)this + 1) = v133 + 1;
            v140 = *(_BYTE *)(v135 + v133);
            v138 |= (unint64_t)(v140 & 0x7F) << v136;
            if ((v140 & 0x80) == 0)
              goto LABEL_488;
            v136 += 7;
            v133 = v139;
            v14 = v137++ > 8;
          }
          while (!v14);
LABEL_341:
          v138 = 0;
          goto LABEL_488;
        }
        v289 = 0;
        v290 = 0;
        v138 = 0;
        if (v134 <= v133)
          v134 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v134 == v133)
          {
            v138 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v291 = v133 + 1;
            v292 = *(_BYTE *)(v135 + v133);
            *((_QWORD *)this + 1) = v291;
            v138 |= (unint64_t)(v292 & 0x7F) << v289;
            if (v292 < 0)
            {
              v289 += 7;
              v133 = v291;
              v14 = v290++ > 8;
              if (v14)
                goto LABEL_341;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v138 = 0;
          }
          break;
        }
LABEL_488:
        *(_QWORD *)(a1 + 48) = v138;
        goto LABEL_522;
      case 0x16u:
        *(_QWORD *)(a1 + 192) |= 0x800000000uLL;
        v141 = *((_QWORD *)this + 1);
        v142 = *((_QWORD *)this + 2);
        v143 = *(_QWORD *)this;
        if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
        {
          v144 = 0;
          v145 = 0;
          v146 = 0;
          do
          {
            v147 = v141 + 1;
            *((_QWORD *)this + 1) = v141 + 1;
            v148 = *(_BYTE *)(v143 + v141);
            v146 |= (unint64_t)(v148 & 0x7F) << v144;
            if ((v148 & 0x80) == 0)
              goto LABEL_491;
            v144 += 7;
            v141 = v147;
            v14 = v145++ > 8;
          }
          while (!v14);
LABEL_348:
          LODWORD(v146) = 0;
          goto LABEL_491;
        }
        v293 = 0;
        v294 = 0;
        v146 = 0;
        if (v142 <= v141)
          v142 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v142 == v141)
          {
            LODWORD(v146) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v295 = v141 + 1;
            v296 = *(_BYTE *)(v143 + v141);
            *((_QWORD *)this + 1) = v295;
            v146 |= (unint64_t)(v296 & 0x7F) << v293;
            if (v296 < 0)
            {
              v293 += 7;
              v141 = v295;
              v14 = v294++ > 8;
              if (v14)
                goto LABEL_348;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v146) = 0;
          }
          break;
        }
LABEL_491:
        *(_DWORD *)(a1 + 180) = v146;
        goto LABEL_522;
      case 0x17u:
        *(_QWORD *)(a1 + 192) |= 0x40000000uLL;
        v149 = *((_QWORD *)this + 1);
        v150 = *((_QWORD *)this + 2);
        v151 = *(_QWORD *)this;
        if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
        {
          v152 = 0;
          v153 = 0;
          v154 = 0;
          do
          {
            v155 = v149 + 1;
            *((_QWORD *)this + 1) = v149 + 1;
            v156 = *(_BYTE *)(v151 + v149);
            v154 |= (unint64_t)(v156 & 0x7F) << v152;
            if ((v156 & 0x80) == 0)
              goto LABEL_494;
            v152 += 7;
            v149 = v155;
            v14 = v153++ > 8;
          }
          while (!v14);
LABEL_355:
          LODWORD(v154) = 0;
          goto LABEL_494;
        }
        v297 = 0;
        v298 = 0;
        v154 = 0;
        if (v150 <= v149)
          v150 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v150 == v149)
          {
            LODWORD(v154) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v299 = v149 + 1;
            v300 = *(_BYTE *)(v151 + v149);
            *((_QWORD *)this + 1) = v299;
            v154 |= (unint64_t)(v300 & 0x7F) << v297;
            if (v300 < 0)
            {
              v297 += 7;
              v149 = v299;
              v14 = v298++ > 8;
              if (v14)
                goto LABEL_355;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v154) = 0;
          }
          break;
        }
LABEL_494:
        *(_DWORD *)(a1 + 160) = v154;
        goto LABEL_522;
      case 0x18u:
        *(_QWORD *)(a1 + 192) |= 0x100000uLL;
        v157 = *((_QWORD *)this + 1);
        v158 = *((_QWORD *)this + 2);
        v159 = *(_QWORD *)this;
        if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
        {
          v160 = 0;
          v161 = 0;
          v162 = 0;
          do
          {
            v163 = v157 + 1;
            *((_QWORD *)this + 1) = v157 + 1;
            v164 = *(_BYTE *)(v159 + v157);
            v162 |= (unint64_t)(v164 & 0x7F) << v160;
            if ((v164 & 0x80) == 0)
              goto LABEL_497;
            v160 += 7;
            v157 = v163;
            v14 = v161++ > 8;
          }
          while (!v14);
LABEL_362:
          LODWORD(v162) = 0;
          goto LABEL_497;
        }
        v301 = 0;
        v302 = 0;
        v162 = 0;
        if (v158 <= v157)
          v158 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v158 == v157)
          {
            LODWORD(v162) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v303 = v157 + 1;
            v304 = *(_BYTE *)(v159 + v157);
            *((_QWORD *)this + 1) = v303;
            v162 |= (unint64_t)(v304 & 0x7F) << v301;
            if (v304 < 0)
            {
              v301 += 7;
              v157 = v303;
              v14 = v302++ > 8;
              if (v14)
                goto LABEL_362;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v162) = 0;
          }
          break;
        }
LABEL_497:
        *(_DWORD *)(a1 + 120) = v162;
        goto LABEL_522;
      case 0x19u:
        *(_QWORD *)(a1 + 192) |= 0x80000uLL;
        v165 = *((_QWORD *)this + 1);
        v166 = *((_QWORD *)this + 2);
        v167 = *(_QWORD *)this;
        if (v165 <= 0xFFFFFFFFFFFFFFF5 && v165 + 10 <= v166)
        {
          v168 = 0;
          v169 = 0;
          v170 = 0;
          do
          {
            v171 = v165 + 1;
            *((_QWORD *)this + 1) = v165 + 1;
            v172 = *(_BYTE *)(v167 + v165);
            v170 |= (unint64_t)(v172 & 0x7F) << v168;
            if ((v172 & 0x80) == 0)
              goto LABEL_500;
            v168 += 7;
            v165 = v171;
            v14 = v169++ > 8;
          }
          while (!v14);
LABEL_369:
          LODWORD(v170) = 0;
          goto LABEL_500;
        }
        v305 = 0;
        v306 = 0;
        v170 = 0;
        if (v166 <= v165)
          v166 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v166 == v165)
          {
            LODWORD(v170) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v307 = v165 + 1;
            v308 = *(_BYTE *)(v167 + v165);
            *((_QWORD *)this + 1) = v307;
            v170 |= (unint64_t)(v308 & 0x7F) << v305;
            if (v308 < 0)
            {
              v305 += 7;
              v165 = v307;
              v14 = v306++ > 8;
              if (v14)
                goto LABEL_369;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v170) = 0;
          }
          break;
        }
LABEL_500:
        *(_DWORD *)(a1 + 116) = v170;
        goto LABEL_522;
      case 0x1Au:
        *(_QWORD *)(a1 + 192) |= 0x40000uLL;
        v173 = *((_QWORD *)this + 1);
        v174 = *((_QWORD *)this + 2);
        v175 = *(_QWORD *)this;
        if (v173 <= 0xFFFFFFFFFFFFFFF5 && v173 + 10 <= v174)
        {
          v176 = 0;
          v177 = 0;
          v178 = 0;
          do
          {
            v179 = v173 + 1;
            *((_QWORD *)this + 1) = v173 + 1;
            v180 = *(_BYTE *)(v175 + v173);
            v178 |= (unint64_t)(v180 & 0x7F) << v176;
            if ((v180 & 0x80) == 0)
              goto LABEL_503;
            v176 += 7;
            v173 = v179;
            v14 = v177++ > 8;
          }
          while (!v14);
LABEL_376:
          LODWORD(v178) = 0;
          goto LABEL_503;
        }
        v309 = 0;
        v310 = 0;
        v178 = 0;
        if (v174 <= v173)
          v174 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v174 == v173)
          {
            LODWORD(v178) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v311 = v173 + 1;
            v312 = *(_BYTE *)(v175 + v173);
            *((_QWORD *)this + 1) = v311;
            v178 |= (unint64_t)(v312 & 0x7F) << v309;
            if (v312 < 0)
            {
              v309 += 7;
              v173 = v311;
              v14 = v310++ > 8;
              if (v14)
                goto LABEL_376;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v178) = 0;
          }
          break;
        }
LABEL_503:
        *(_DWORD *)(a1 + 112) = v178;
        goto LABEL_522;
      case 0x1Bu:
        v181 = operator new();
        sub_18F2E3F5C(v181);
        v182 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v181;
        if (v182)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v182 + 8))(v182);
          v181 = *(_QWORD *)(a1 + 32);
        }
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v181 + 16))(v181, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_522:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      case 0x1Cu:
        *(_QWORD *)(a1 + 192) |= 0x400uLL;
        v183 = *((_QWORD *)this + 1);
        if (v183 > 0xFFFFFFFFFFFFFFFBLL || v183 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v183);
        goto LABEL_420;
      case 0x1Du:
        *(_QWORD *)(a1 + 192) |= 0x200uLL;
        v184 = *((_QWORD *)this + 1);
        if (v184 > 0xFFFFFFFFFFFFFFFBLL || v184 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v184);
        goto LABEL_420;
      case 0x1Eu:
        *(_QWORD *)(a1 + 192) |= 0x2000000uLL;
        v185 = *((_QWORD *)this + 1);
        if (v185 > 0xFFFFFFFFFFFFFFFBLL || v185 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v185);
        goto LABEL_420;
      case 0x1Fu:
        *(_QWORD *)(a1 + 192) |= 0x1000000000uLL;
        v186 = *((_QWORD *)this + 1);
        v187 = *((_QWORD *)this + 2);
        v188 = *(_QWORD *)this;
        if (v186 <= 0xFFFFFFFFFFFFFFF5 && v186 + 10 <= v187)
        {
          v189 = 0;
          v190 = 0;
          v191 = 0;
          do
          {
            v192 = v186 + 1;
            *((_QWORD *)this + 1) = v186 + 1;
            v193 = *(_BYTE *)(v188 + v186);
            v191 |= (unint64_t)(v193 & 0x7F) << v189;
            if ((v193 & 0x80) == 0)
              goto LABEL_506;
            v189 += 7;
            v186 = v192;
            v14 = v190++ > 8;
          }
          while (!v14);
LABEL_383:
          LODWORD(v191) = 0;
          goto LABEL_506;
        }
        v313 = 0;
        v314 = 0;
        v191 = 0;
        if (v187 <= v186)
          v187 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v187 == v186)
          {
            LODWORD(v191) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v315 = v186 + 1;
            v316 = *(_BYTE *)(v188 + v186);
            *((_QWORD *)this + 1) = v315;
            v191 |= (unint64_t)(v316 & 0x7F) << v313;
            if (v316 < 0)
            {
              v313 += 7;
              v186 = v315;
              v14 = v314++ > 8;
              if (v14)
                goto LABEL_383;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v191) = 0;
          }
          break;
        }
LABEL_506:
        *(_DWORD *)(a1 + 184) = v191;
        goto LABEL_522;
      case 0x20u:
        *(_QWORD *)(a1 + 192) |= 0x20uLL;
        v194 = *((_QWORD *)this + 1);
        v195 = *((_QWORD *)this + 2);
        v196 = *(_QWORD *)this;
        if (v194 <= 0xFFFFFFFFFFFFFFF5 && v194 + 10 <= v195)
        {
          v197 = 0;
          v198 = 0;
          v199 = 0;
          do
          {
            v200 = v194 + 1;
            *((_QWORD *)this + 1) = v194 + 1;
            v201 = *(_BYTE *)(v196 + v194);
            v199 |= (unint64_t)(v201 & 0x7F) << v197;
            if ((v201 & 0x80) == 0)
              goto LABEL_509;
            v197 += 7;
            v194 = v200;
            v14 = v198++ > 8;
          }
          while (!v14);
LABEL_390:
          v199 = 0;
          goto LABEL_509;
        }
        v317 = 0;
        v318 = 0;
        v199 = 0;
        if (v195 <= v194)
          v195 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v195 == v194)
          {
            v199 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v319 = v194 + 1;
            v320 = *(_BYTE *)(v196 + v194);
            *((_QWORD *)this + 1) = v319;
            v199 |= (unint64_t)(v320 & 0x7F) << v317;
            if (v320 < 0)
            {
              v317 += 7;
              v194 = v319;
              v14 = v318++ > 8;
              if (v14)
                goto LABEL_390;
              continue;
            }
            if (*((_BYTE *)this + 24))
              v199 = 0;
          }
          break;
        }
LABEL_509:
        *(_QWORD *)(a1 + 56) = v199;
        goto LABEL_522;
      case 0x21u:
        *(_QWORD *)(a1 + 192) |= 0x10000000uLL;
        v202 = *((_QWORD *)this + 1);
        v203 = *((_QWORD *)this + 2);
        v204 = *(_QWORD *)this;
        if (v202 <= 0xFFFFFFFFFFFFFFF5 && v202 + 10 <= v203)
        {
          v205 = 0;
          v206 = 0;
          v207 = 0;
          do
          {
            v208 = v202 + 1;
            *((_QWORD *)this + 1) = v202 + 1;
            v209 = *(_BYTE *)(v204 + v202);
            v207 |= (unint64_t)(v209 & 0x7F) << v205;
            if ((v209 & 0x80) == 0)
              goto LABEL_512;
            v205 += 7;
            v202 = v208;
            v14 = v206++ > 8;
          }
          while (!v14);
LABEL_397:
          LODWORD(v207) = 0;
          goto LABEL_512;
        }
        v321 = 0;
        v322 = 0;
        v207 = 0;
        if (v203 <= v202)
          v203 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v203 == v202)
          {
            LODWORD(v207) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v323 = v202 + 1;
            v324 = *(_BYTE *)(v204 + v202);
            *((_QWORD *)this + 1) = v323;
            v207 |= (unint64_t)(v324 & 0x7F) << v321;
            if (v324 < 0)
            {
              v321 += 7;
              v202 = v323;
              v14 = v322++ > 8;
              if (v14)
                goto LABEL_397;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v207) = 0;
          }
          break;
        }
LABEL_512:
        *(_DWORD *)(a1 + 152) = v207;
        goto LABEL_522;
      case 0x22u:
        *(_QWORD *)(a1 + 192) |= 0x2000000000uLL;
        v210 = *((_QWORD *)this + 1);
        v211 = *((_QWORD *)this + 2);
        v212 = *(_QWORD *)this;
        if (v210 <= 0xFFFFFFFFFFFFFFF5 && v210 + 10 <= v211)
        {
          v213 = 0;
          v214 = 0;
          v215 = 0;
          do
          {
            v216 = v210 + 1;
            *((_QWORD *)this + 1) = v210 + 1;
            v217 = *(_BYTE *)(v212 + v210);
            v215 |= (unint64_t)(v217 & 0x7F) << v213;
            if ((v217 & 0x80) == 0)
              goto LABEL_515;
            v213 += 7;
            v210 = v216;
            v14 = v214++ > 8;
          }
          while (!v14);
LABEL_404:
          LODWORD(v215) = 0;
          goto LABEL_515;
        }
        v325 = 0;
        v326 = 0;
        v215 = 0;
        if (v211 <= v210)
          v211 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v211 == v210)
          {
            LODWORD(v215) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v327 = v210 + 1;
            v328 = *(_BYTE *)(v212 + v210);
            *((_QWORD *)this + 1) = v327;
            v215 |= (unint64_t)(v328 & 0x7F) << v325;
            if (v328 < 0)
            {
              v325 += 7;
              v210 = v327;
              v14 = v326++ > 8;
              if (v14)
                goto LABEL_404;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v215) = 0;
          }
          break;
        }
LABEL_515:
        *(_DWORD *)(a1 + 188) = v215;
        goto LABEL_522;
      case 0x23u:
        *(_QWORD *)(a1 + 192) |= 0x40uLL;
        v218 = *((_QWORD *)this + 1);
        v219 = *((_QWORD *)this + 2);
        v220 = *(_QWORD *)this;
        if (v218 <= 0xFFFFFFFFFFFFFFF5 && v218 + 10 <= v219)
        {
          v221 = 0;
          v222 = 0;
          v223 = 0;
          do
          {
            v224 = v218 + 1;
            *((_QWORD *)this + 1) = v218 + 1;
            v225 = *(_BYTE *)(v220 + v218);
            v223 |= (unint64_t)(v225 & 0x7F) << v221;
            if ((v225 & 0x80) == 0)
              goto LABEL_518;
            v221 += 7;
            v218 = v224;
            v14 = v222++ > 8;
          }
          while (!v14);
LABEL_411:
          LODWORD(v223) = 0;
          goto LABEL_518;
        }
        v329 = 0;
        v330 = 0;
        v223 = 0;
        if (v219 <= v218)
          v219 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v219 == v218)
          {
            LODWORD(v223) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v331 = v218 + 1;
            v332 = *(_BYTE *)(v220 + v218);
            *((_QWORD *)this + 1) = v331;
            v223 |= (unint64_t)(v332 & 0x7F) << v329;
            if (v332 < 0)
            {
              v329 += 7;
              v218 = v331;
              v14 = v330++ > 8;
              if (v14)
                goto LABEL_411;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v223) = 0;
          }
          break;
        }
LABEL_518:
        *(_DWORD *)(a1 + 64) = v223;
        goto LABEL_522;
      case 0x24u:
        *(_QWORD *)(a1 + 192) |= 0x80000000uLL;
        v226 = *((_QWORD *)this + 1);
        if (v226 > 0xFFFFFFFFFFFFFFFBLL || v226 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(_QWORD *)this + v226);
        goto LABEL_420;
      case 0x25u:
        *(_QWORD *)(a1 + 192) |= 0x100000000uLL;
        v227 = *((_QWORD *)this + 1);
        if (v227 > 0xFFFFFFFFFFFFFFFBLL || v227 + 4 > *((_QWORD *)this + 2))
          goto LABEL_236;
        *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v227);
        goto LABEL_420;
      case 0x26u:
        *(_QWORD *)(a1 + 192) |= 0x200000000uLL;
        v228 = *((_QWORD *)this + 1);
        if (v228 <= 0xFFFFFFFFFFFFFFFBLL && v228 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v228);
LABEL_420:
          v95 = *((_QWORD *)this + 1) + 4;
LABEL_421:
          *((_QWORD *)this + 1) = v95;
        }
        else
        {
LABEL_236:
          *((_BYTE *)this + 24) = 1;
        }
        goto LABEL_522;
      case 0x27u:
        *(_QWORD *)(a1 + 192) |= 0x400000000uLL;
        v229 = *((_QWORD *)this + 1);
        v230 = *((_QWORD *)this + 2);
        v231 = *(_QWORD *)this;
        if (v229 <= 0xFFFFFFFFFFFFFFF5 && v229 + 10 <= v230)
        {
          v232 = 0;
          v233 = 0;
          v234 = 0;
          do
          {
            v235 = v229 + 1;
            *((_QWORD *)this + 1) = v229 + 1;
            v236 = *(_BYTE *)(v231 + v229);
            v234 |= (unint64_t)(v236 & 0x7F) << v232;
            if ((v236 & 0x80) == 0)
              goto LABEL_521;
            v232 += 7;
            v229 = v235;
            v14 = v233++ > 8;
          }
          while (!v14);
LABEL_418:
          LODWORD(v234) = 0;
          goto LABEL_521;
        }
        v333 = 0;
        v334 = 0;
        v234 = 0;
        if (v230 <= v229)
          v230 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v230 == v229)
          {
            LODWORD(v234) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v335 = v229 + 1;
            v336 = *(_BYTE *)(v231 + v229);
            *((_QWORD *)this + 1) = v335;
            v234 |= (unint64_t)(v336 & 0x7F) << v333;
            if (v336 < 0)
            {
              v333 += 7;
              v229 = v335;
              v14 = v334++ > 8;
              if (v14)
                goto LABEL_418;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v234) = 0;
          }
          break;
        }
LABEL_521:
        *(_DWORD *)(a1 + 176) = v234;
        goto LABEL_522;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_522;
    }
  }
}

uint64_t sub_18F306F48(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;
  const PB::Base *v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD *)(result + 192);
  if ((v4 & 0x8000) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_QWORD *)(v3 + 192);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0)
        goto LABEL_4;
      goto LABEL_45;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x20000) == 0)
      goto LABEL_5;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x20000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_7;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_10;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0)
      goto LABEL_12;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      goto LABEL_13;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 4) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_16;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_17;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x4000) == 0)
  {
LABEL_18:
    if ((v4 & 0x400000) == 0)
      goto LABEL_19;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x400000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200000) == 0)
      goto LABEL_20;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x200000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x10) == 0)
      goto LABEL_22;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x10) == 0)
  {
LABEL_22:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_23;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_24;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x100000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 192);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 0x40000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_67:
  result = PB::Writer::writeVarInt(this);
  if ((*(_QWORD *)(v3 + 192) & 0x40000) != 0)
LABEL_27:
    result = PB::Writer::writeVarInt(this);
LABEL_28:
  v5 = *(const PB::Base **)(v3 + 32);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x400) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 80));
    v6 = *(_QWORD *)(v3 + 192);
    if ((v6 & 0x200) == 0)
    {
LABEL_32:
      if ((v6 & 0x2000000) == 0)
        goto LABEL_33;
      goto LABEL_71;
    }
  }
  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_32;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x20) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::writeVarInt(this);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x20) == 0)
  {
LABEL_35:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::writeVarInt(this);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_37;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::writeVarInt(this);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x40) == 0)
      goto LABEL_38;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::writeVarInt(this);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x40) == 0)
  {
LABEL_38:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::writeVarInt(this);
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_40;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::write(this, *(float *)(v3 + 164));
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x100000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_41;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::write(this, *(float *)(v3 + 168));
  v6 = *(_QWORD *)(v3 + 192);
  if ((v6 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x400000000) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_79:
  result = PB::Writer::write(this, *(float *)(v3 + 172));
  if ((*(_QWORD *)(v3 + 192) & 0x400000000) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F3073A8(uint64_t result)
{
  *(_QWORD *)result = &off_1E294FAD0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_18F3073C0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3073E4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "isWifiAssociated");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F307430(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F3075BC(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this);
  return result;
}

_QWORD *sub_18F3075DC(_QWORD *result)
{
  *result = &off_1E294EBB8;
  result[1] = 0;
  return result;
}

void sub_18F3075EC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294EBB8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F30762C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294EBB8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F307680(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F3076D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E294E720;
        *(_QWORD *)(v20 + 112) = 0;
        *(_DWORD *)(v20 + 180) = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F3078A8(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_18F3078C4(uint64_t result)
{
  *(_QWORD *)result = &off_1E294D488;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_18F3078DC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F307900(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "walkingVariable01", *(float *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F30794C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F307AE4(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this, *(float *)(result + 8));
  return result;
}

double sub_18F307B00(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E29511C8;
  *(_DWORD *)(a1 + 76) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_18F307B24(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E29511C8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F307B74(PB::Base *a1)
{
  sub_18F307B24(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F307B98(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  char v11;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "accel", v7);
  }
  if ((*(_BYTE *)(a1 + 76) & 1) != 0)
    PB::TextFormatter::format(this, "adjustedTimestamp", *(double *)(a1 + 56));
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "gravity", v10);
  }
  v11 = *(_BYTE *)(a1 + 76);
  if ((v11 & 4) != 0)
  {
    PB::TextFormatter::format(this, "rawProjectedSignal", *(float *)(a1 + 72));
    v11 = *(_BYTE *)(a1 + 76);
  }
  if ((v11 & 2) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F307C84(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _DWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  unint64_t v63;
  char v64;
  unsigned int v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  char *v69;
  _DWORD *v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  int v86;
  char *v87;
  int v88;
  unint64_t v89;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 76) |= 2u;
          v25 = *((_QWORD *)this + 1);
          v26 = *((_QWORD *)this + 2);
          v27 = *(_QWORD *)this;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            do
            {
              v31 = v25 + 1;
              *((_QWORD *)this + 1) = v25 + 1;
              v32 = *(_BYTE *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0)
                goto LABEL_118;
              v28 += 7;
              v25 = v31;
              v18 = v29++ > 8;
            }
            while (!v18);
LABEL_92:
            v30 = 0;
            goto LABEL_118;
          }
          v64 = 0;
          v65 = 0;
          v30 = 0;
          if (v26 <= v25)
            v26 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v26 == v25)
            {
              v30 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v66 = v25 + 1;
              v67 = *(_BYTE *)(v27 + v25);
              *((_QWORD *)this + 1) = v66;
              v30 |= (unint64_t)(v67 & 0x7F) << v64;
              if (v67 < 0)
              {
                v64 += 7;
                v25 = v66;
                v18 = v65++ > 8;
                if (v18)
                  goto LABEL_92;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v30 = 0;
            }
            break;
          }
LABEL_118:
          *(_QWORD *)(a1 + 64) = v30;
          goto LABEL_139;
        case 2u:
          *(_BYTE *)(a1 + 76) |= 1u;
          v33 = *((_QWORD *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((_QWORD *)this + 2))
            goto LABEL_135;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v33);
          v34 = *((_QWORD *)this + 1) + 8;
          goto LABEL_138;
        case 3u:
          *(_BYTE *)(a1 + 76) |= 4u;
          v35 = *((_QWORD *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)this + 2))
            goto LABEL_135;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v35);
          goto LABEL_137;
        case 4u:
          if (v24 != 2)
          {
            v69 = *(char **)(a1 + 40);
            v68 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v69 >= v68)
            {
              v73 = (char *)*v10;
              v74 = (v69 - (_BYTE *)*v10) >> 2;
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 62)
LABEL_149:
                sub_18F26F8C0();
              v76 = v68 - (_QWORD)v73;
              if (v76 >> 1 > v75)
                v75 = v76 >> 1;
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
                v77 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v77 = v75;
              if (v77)
              {
                v78 = (char *)sub_18F26FB8C(v11, v77);
                v73 = *(char **)(a1 + 32);
                v69 = *(char **)(a1 + 40);
              }
              else
              {
                v78 = 0;
              }
              v85 = &v78[4 * v74];
              *(_DWORD *)v85 = 0;
              v70 = v85 + 4;
              while (v69 != v73)
              {
                v86 = *((_DWORD *)v69 - 1);
                v69 -= 4;
                *((_DWORD *)v85 - 1) = v86;
                v85 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v85;
              *(_QWORD *)(a1 + 40) = v70;
              *(_QWORD *)(a1 + 48) = &v78[4 * v77];
              if (v73)
                operator delete(v73);
            }
            else
            {
              *(_DWORD *)v69 = 0;
              v70 = v69 + 4;
            }
            *(_QWORD *)(a1 + 40) = v70;
            goto LABEL_133;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v36 = *((_QWORD *)this + 1);
          v37 = *((_QWORD *)this + 2);
          while (v36 < v37 && !*((_BYTE *)this + 24))
          {
            v39 = *(char **)(a1 + 40);
            v38 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v39 >= v38)
            {
              v41 = (char *)*v10;
              v42 = (v39 - (_BYTE *)*v10) >> 2;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62)
                goto LABEL_149;
              v44 = v38 - (_QWORD)v41;
              if (v44 >> 1 > v43)
                v43 = v44 >> 1;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                v45 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v46 = (char *)sub_18F26FB8C(v11, v45);
                v41 = *(char **)(a1 + 32);
                v39 = *(char **)(a1 + 40);
              }
              else
              {
                v46 = 0;
              }
              v47 = &v46[4 * v42];
              *(_DWORD *)v47 = 0;
              v40 = v47 + 4;
              while (v39 != v41)
              {
                v48 = *((_DWORD *)v39 - 1);
                v39 -= 4;
                *((_DWORD *)v47 - 1) = v48;
                v47 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v47;
              *(_QWORD *)(a1 + 40) = v40;
              *(_QWORD *)(a1 + 48) = &v46[4 * v45];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_DWORD *)v39 = 0;
              v40 = v39 + 4;
            }
            *(_QWORD *)(a1 + 40) = v40;
            v49 = *((_QWORD *)this + 1);
            if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
              goto LABEL_97;
            *(v40 - 1) = *(_DWORD *)(*(_QWORD *)this + v49);
            v37 = *((_QWORD *)this + 2);
            v36 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v36;
          }
          goto LABEL_98;
        case 5u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v50 = *((_QWORD *)this + 1);
            v51 = *((_QWORD *)this + 2);
            while (v50 < v51 && !*((_BYTE *)this + 24))
            {
              v53 = *(char **)(a1 + 16);
              v52 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v53 >= v52)
              {
                v55 = (char *)*v8;
                v56 = (v53 - (_BYTE *)*v8) >> 2;
                v57 = v56 + 1;
                if ((unint64_t)(v56 + 1) >> 62)
                  goto LABEL_150;
                v58 = v52 - (_QWORD)v55;
                if (v58 >> 1 > v57)
                  v57 = v58 >> 1;
                if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
                  v59 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v59 = v57;
                if (v59)
                {
                  v60 = (char *)sub_18F26FB8C(v9, v59);
                  v55 = *(char **)(a1 + 8);
                  v53 = *(char **)(a1 + 16);
                }
                else
                {
                  v60 = 0;
                }
                v61 = &v60[4 * v56];
                *(_DWORD *)v61 = 0;
                v54 = v61 + 4;
                while (v53 != v55)
                {
                  v62 = *((_DWORD *)v53 - 1);
                  v53 -= 4;
                  *((_DWORD *)v61 - 1) = v62;
                  v61 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v61;
                *(_QWORD *)(a1 + 16) = v54;
                *(_QWORD *)(a1 + 24) = &v60[4 * v59];
                if (v55)
                  operator delete(v55);
              }
              else
              {
                *(_DWORD *)v53 = 0;
                v54 = v53 + 4;
              }
              *(_QWORD *)(a1 + 16) = v54;
              v63 = *((_QWORD *)this + 1);
              if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)this + 2))
              {
LABEL_97:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v54 - 1) = *(_DWORD *)(*(_QWORD *)this + v63);
              v51 = *((_QWORD *)this + 2);
              v50 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v50;
            }
LABEL_98:
            PB::Reader::recallMark();
          }
          else
          {
            v72 = *(char **)(a1 + 16);
            v71 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v72 >= v71)
            {
              v79 = (char *)*v8;
              v80 = (v72 - (_BYTE *)*v8) >> 2;
              v81 = v80 + 1;
              if ((unint64_t)(v80 + 1) >> 62)
LABEL_150:
                sub_18F26F8C0();
              v82 = v71 - (_QWORD)v79;
              if (v82 >> 1 > v81)
                v81 = v82 >> 1;
              if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
                v83 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v83 = v81;
              if (v83)
              {
                v84 = (char *)sub_18F26FB8C(v9, v83);
                v79 = *(char **)(a1 + 8);
                v72 = *(char **)(a1 + 16);
              }
              else
              {
                v84 = 0;
              }
              v87 = &v84[4 * v80];
              *(_DWORD *)v87 = 0;
              v70 = v87 + 4;
              while (v72 != v79)
              {
                v88 = *((_DWORD *)v72 - 1);
                v72 -= 4;
                *((_DWORD *)v87 - 1) = v88;
                v87 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v87;
              *(_QWORD *)(a1 + 16) = v70;
              *(_QWORD *)(a1 + 24) = &v84[4 * v83];
              if (v79)
                operator delete(v79);
            }
            else
            {
              *(_DWORD *)v72 = 0;
              v70 = v72 + 4;
            }
            *(_QWORD *)(a1 + 16) = v70;
LABEL_133:
            v89 = *((_QWORD *)this + 1);
            if (v89 <= 0xFFFFFFFFFFFFFFFBLL && v89 + 4 <= *((_QWORD *)this + 2))
            {
              *(v70 - 1) = *(_DWORD *)(*(_QWORD *)this + v89);
LABEL_137:
              v34 = *((_QWORD *)this + 1) + 4;
LABEL_138:
              *((_QWORD *)this + 1) = v34;
            }
            else
            {
LABEL_135:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_139:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_139;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F30832C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  v3 = result;
  v4 = *(_BYTE *)(result + 76);
  if ((v4 & 2) == 0)
  {
    if ((*(_BYTE *)(result + 76) & 1) == 0)
      goto LABEL_3;
LABEL_13:
    result = PB::Writer::write(this, *(double *)(v3 + 56));
    if ((*(_BYTE *)(v3 + 76) & 4) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 76);
  if ((v4 & 1) != 0)
    goto LABEL_13;
LABEL_3:
  if ((v4 & 4) != 0)
LABEL_4:
    result = PB::Writer::write(this, *(float *)(v3 + 72));
LABEL_5:
  v5 = *(float **)(v3 + 32);
  v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v9 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v9 != v8)
  {
    v10 = *v9++;
    result = PB::Writer::write(this, v10);
  }
  return result;
}

uint64_t sub_18F3083E8(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F018;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_18F308400(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F308424(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "cadence", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "horizontalRotationRateFiltered", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "sample", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "verticalUserAcceleration", *(float *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 40) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "verticalRotationRateFiltered", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "walkSpeedFilteredSample", *(float *)(a1 + 36));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F308534(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_47;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 5u:
          *(_BYTE *)(a1 + 40) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 6u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 7u:
          *(_BYTE *)(a1 + 40) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_46:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_47:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_44:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F308840(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 28));
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 40) & 0x10) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 28));
  return result;
}

uint64_t sub_18F308928(uint64_t result)
{
  *(_QWORD *)result = &off_1E294CC70;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_18F308940(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F308964(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "activityType");
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "duration", *(double *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "fGpsAvailability");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "fractionalGrade", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "gradeType");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "hrmin", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "isStanding");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "metSource");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "rawGradeType");
    if ((*(_WORD *)(a1 + 68) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "mets", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x10) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F308AF4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  int v47;
  BOOL v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_68;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x20u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  v51 = v21++;
                  v52 = *(_BYTE *)(v22 + v51);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    v2 = v51 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_108;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_109;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 48) = v25;
              goto LABEL_125;
            case 3u:
              *(_WORD *)(a1 + 68) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 65) = v28;
              goto LABEL_125;
            case 4u:
              *(_WORD *)(a1 + 68) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_68;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_114;
                  }
                  v55 = v29++;
                  v56 = *(_BYTE *)(v30 + v55);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_113:
                    v2 = v55 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_113;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_114;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_114:
              *(_DWORD *)(a1 + 52) = v33;
              goto LABEL_125;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_119;
                  }
                  v59 = v35++;
                  v60 = *(_BYTE *)(v36 + v59);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_118:
                    v2 = v59 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_118;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_119;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_119:
              *(_DWORD *)(a1 + 60) = v39;
              goto LABEL_125;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_124;
                  }
                  v63 = v41++;
                  v64 = *(_BYTE *)(v42 + v63);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_123:
                    v2 = v63 + 1;
                    goto LABEL_124;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_123;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_124;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_124:
              *(_DWORD *)(a1 + 56) = v45;
LABEL_125:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 8u:
              *(_WORD *)(a1 + 68) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_68;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 9u:
              *(_WORD *)(a1 + 68) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_68;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_104:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_68:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_125;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v48 = v47 != 0;
              }
              *(_BYTE *)(a1 + 64) = v48;
              goto LABEL_125;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_125;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F3091C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 68);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40));
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_WORD *)(v3 + 68) & 0x200) != 0)
    return PB::Writer::write(this);
  return result;
}

double sub_18F309318(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294E218;
  *(_DWORD *)(a1 + 180) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  return result;
}

void sub_18F30935C(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)this = &off_1E294E218;
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 10);
  if (v5)
  {
    *((_QWORD *)this + 11) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 7);
  if (v6)
  {
    *((_QWORD *)this + 8) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 4);
  if (v7)
  {
    *((_QWORD *)this + 5) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 2) = v8;
    operator delete(v8);
  }
  PB::Base::~Base(this);
}

void sub_18F3093FC(PB::Base *a1)
{
  sub_18F30935C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F309420(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  float *v14;
  float v15;
  float *v16;
  float *v17;
  float v18;
  float *v19;
  float *v20;
  float v21;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  while (v5 != v6)
  {
    v5 += 4;
    PB::TextFormatter::format(this, "error");
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  while (v7 != v8)
  {
    v7 += 4;
    PB::TextFormatter::format(this, "errorX");
  }
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  while (v9 != v10)
  {
    v9 += 4;
    PB::TextFormatter::format(this, "errorY");
  }
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  while (v11 != v12)
  {
    v11 += 4;
    PB::TextFormatter::format(this, "errorZ");
  }
  v13 = *(float **)(a1 + 104);
  v14 = *(float **)(a1 + 112);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(this, "intercept", v15);
  }
  if ((*(_BYTE *)(a1 + 180) & 1) != 0)
    PB::TextFormatter::format(this, "overlap", *(float *)(a1 + 176));
  v16 = *(float **)(a1 + 128);
  v17 = *(float **)(a1 + 136);
  while (v16 != v17)
  {
    v18 = *v16++;
    PB::TextFormatter::format(this, "slope", v18);
  }
  v19 = *(float **)(a1 + 152);
  v20 = *(float **)(a1 + 160);
  while (v19 != v20)
  {
    v21 = *v19++;
    PB::TextFormatter::format(this, "temperature", v21);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F3095B0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  _DWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  BOOL v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  char v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char v150;
  unsigned int v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  char v155;
  unsigned int v156;
  uint64_t v157;
  unint64_t v158;
  char v159;
  unint64_t v160;
  char *v161;
  _DWORD *v162;
  unint64_t v163;
  char *v164;
  unint64_t v165;
  char *v166;
  unint64_t v167;
  char *v168;
  _DWORD *v169;
  unint64_t v170;
  char *v171;
  unint64_t v172;
  char *v173;
  unint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  char *v218;
  int v219;
  char *v220;
  int v221;
  char *v222;
  int v223;
  unint64_t v224;
  char *v225;
  int v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  char v230;
  unsigned int v231;
  unint64_t v233;
  char v234;
  uint64_t v235;
  unint64_t v236;
  char v237;
  char *v238;
  int v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  char v243;
  unsigned int v244;
  unint64_t v246;
  char v247;
  unint64_t v248;
  char v249;
  char *v250;
  int v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  char v255;
  unsigned int v256;
  unint64_t v258;
  char v259;
  unint64_t v260;
  char v261;
  char *v262;
  int v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  char v267;
  unsigned int v268;
  unint64_t v270;
  char v271;
  unint64_t v272;
  char v273;
  void **v276;
  void **v277;
  void **v278;
  void **v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  void **v283;
  void **v284;
  void **v285;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (_QWORD *)(a1 + 72);
    v277 = (void **)(a1 + 32);
    v278 = (void **)(a1 + 56);
    v9 = (_QWORD *)(a1 + 48);
    v276 = (void **)(a1 + 8);
    v10 = (_QWORD *)(a1 + 24);
    v11 = (_QWORD *)(a1 + 96);
    v285 = (void **)(a1 + 152);
    v282 = a1 + 168;
    v284 = (void **)(a1 + 104);
    v281 = a1 + 120;
    v283 = (void **)(a1 + 128);
    v279 = (void **)(a1 + 80);
    v280 = a1 + 144;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v80 = v14++ > 8;
        if (v80)
          goto LABEL_20;
      }
LABEL_21:
      v23 = v15 & 7;
      if (v23 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          if (v23 != 2)
          {
            v161 = *(char **)(a1 + 136);
            v160 = *(_QWORD *)(a1 + 144);
            if ((unint64_t)v161 >= v160)
            {
              v176 = (char *)*v283;
              v177 = (v161 - (_BYTE *)*v283) >> 2;
              v178 = v177 + 1;
              if ((unint64_t)(v177 + 1) >> 62)
LABEL_482:
                sub_18F26F8C0();
              v179 = v160 - (_QWORD)v176;
              if (v179 >> 1 > v178)
                v178 = v179 >> 1;
              if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL)
                v180 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v180 = v178;
              if (v180)
              {
                v181 = (char *)sub_18F26FB8C(v280, v180);
                v176 = *(char **)(a1 + 128);
                v161 = *(char **)(a1 + 136);
              }
              else
              {
                v181 = 0;
              }
              v218 = &v181[4 * v177];
              *(_DWORD *)v218 = 0;
              v162 = v218 + 4;
              while (v161 != v176)
              {
                v219 = *((_DWORD *)v161 - 1);
                v161 -= 4;
                *((_DWORD *)v218 - 1) = v219;
                v218 -= 4;
              }
              *(_QWORD *)(a1 + 128) = v218;
              *(_QWORD *)(a1 + 136) = v162;
              *(_QWORD *)(a1 + 144) = &v181[4 * v180];
              if (v176)
                operator delete(v176);
            }
            else
            {
              *(_DWORD *)v161 = 0;
              v162 = v161 + 4;
            }
            *(_QWORD *)(a1 + 136) = v162;
            goto LABEL_374;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v24 = *((_QWORD *)this + 1);
          v25 = *((_QWORD *)this + 2);
          while (v24 < v25 && !*((_BYTE *)this + 24))
          {
            v27 = *(char **)(a1 + 136);
            v26 = *(_QWORD *)(a1 + 144);
            if ((unint64_t)v27 >= v26)
            {
              v29 = (char *)*v283;
              v30 = (v27 - (_BYTE *)*v283) >> 2;
              v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62)
                goto LABEL_482;
              v32 = v26 - (_QWORD)v29;
              if (v32 >> 1 > v31)
                v31 = v32 >> 1;
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                v33 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v33 = v31;
              if (v33)
              {
                v34 = (char *)sub_18F26FB8C(v280, v33);
                v29 = *(char **)(a1 + 128);
                v27 = *(char **)(a1 + 136);
              }
              else
              {
                v34 = 0;
              }
              v35 = &v34[4 * v30];
              *(_DWORD *)v35 = 0;
              v28 = v35 + 4;
              while (v27 != v29)
              {
                v36 = *((_DWORD *)v27 - 1);
                v27 -= 4;
                *((_DWORD *)v35 - 1) = v36;
                v35 -= 4;
              }
              *(_QWORD *)(a1 + 128) = v35;
              *(_QWORD *)(a1 + 136) = v28;
              *(_QWORD *)(a1 + 144) = &v34[4 * v33];
              if (v29)
                operator delete(v29);
            }
            else
            {
              *(_DWORD *)v27 = 0;
              v28 = v27 + 4;
            }
            *(_QWORD *)(a1 + 136) = v28;
            v37 = *((_QWORD *)this + 1);
            if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)this + 2))
              goto LABEL_295;
            *(v28 - 1) = *(_DWORD *)(*(_QWORD *)this + v37);
            v25 = *((_QWORD *)this + 2);
            v24 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v24;
          }
          goto LABEL_296;
        case 2u:
          if (v23 != 2)
          {
            v164 = *(char **)(a1 + 112);
            v163 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v164 >= v163)
            {
              v182 = (char *)*v284;
              v183 = (v164 - (_BYTE *)*v284) >> 2;
              v184 = v183 + 1;
              if ((unint64_t)(v183 + 1) >> 62)
LABEL_483:
                sub_18F26F8C0();
              v185 = v163 - (_QWORD)v182;
              if (v185 >> 1 > v184)
                v184 = v185 >> 1;
              if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFFCLL)
                v186 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v186 = v184;
              if (v186)
              {
                v187 = (char *)sub_18F26FB8C(v281, v186);
                v182 = *(char **)(a1 + 104);
                v164 = *(char **)(a1 + 112);
              }
              else
              {
                v187 = 0;
              }
              v220 = &v187[4 * v183];
              *(_DWORD *)v220 = 0;
              v162 = v220 + 4;
              while (v164 != v182)
              {
                v221 = *((_DWORD *)v164 - 1);
                v164 -= 4;
                *((_DWORD *)v220 - 1) = v221;
                v220 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v220;
              *(_QWORD *)(a1 + 112) = v162;
              *(_QWORD *)(a1 + 120) = &v187[4 * v186];
              if (v182)
                operator delete(v182);
            }
            else
            {
              *(_DWORD *)v164 = 0;
              v162 = v164 + 4;
            }
            *(_QWORD *)(a1 + 112) = v162;
            goto LABEL_374;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v38 = *((_QWORD *)this + 1);
          v39 = *((_QWORD *)this + 2);
          while (v38 < v39 && !*((_BYTE *)this + 24))
          {
            v41 = *(char **)(a1 + 112);
            v40 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v41 >= v40)
            {
              v43 = (char *)*v284;
              v44 = (v41 - (_BYTE *)*v284) >> 2;
              v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 62)
                goto LABEL_483;
              v46 = v40 - (_QWORD)v43;
              if (v46 >> 1 > v45)
                v45 = v46 >> 1;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
                v47 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v47 = v45;
              if (v47)
              {
                v48 = (char *)sub_18F26FB8C(v281, v47);
                v43 = *(char **)(a1 + 104);
                v41 = *(char **)(a1 + 112);
              }
              else
              {
                v48 = 0;
              }
              v49 = &v48[4 * v44];
              *(_DWORD *)v49 = 0;
              v42 = v49 + 4;
              while (v41 != v43)
              {
                v50 = *((_DWORD *)v41 - 1);
                v41 -= 4;
                *((_DWORD *)v49 - 1) = v50;
                v49 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v49;
              *(_QWORD *)(a1 + 112) = v42;
              *(_QWORD *)(a1 + 120) = &v48[4 * v47];
              if (v43)
                operator delete(v43);
            }
            else
            {
              *(_DWORD *)v41 = 0;
              v42 = v41 + 4;
            }
            *(_QWORD *)(a1 + 112) = v42;
            v51 = *((_QWORD *)this + 1);
            if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
              goto LABEL_295;
            *(v42 - 1) = *(_DWORD *)(*(_QWORD *)this + v51);
            v39 = *((_QWORD *)this + 2);
            v38 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v38;
          }
          goto LABEL_296;
        case 3u:
          if (v23 != 2)
          {
            v166 = *(char **)(a1 + 160);
            v165 = *(_QWORD *)(a1 + 168);
            if ((unint64_t)v166 >= v165)
            {
              v188 = (char *)*v285;
              v189 = (v166 - (_BYTE *)*v285) >> 2;
              v190 = v189 + 1;
              if ((unint64_t)(v189 + 1) >> 62)
LABEL_484:
                sub_18F26F8C0();
              v191 = v165 - (_QWORD)v188;
              if (v191 >> 1 > v190)
                v190 = v191 >> 1;
              if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFFCLL)
                v192 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v192 = v190;
              if (v192)
              {
                v193 = (char *)sub_18F26FB8C(v282, v192);
                v188 = *(char **)(a1 + 152);
                v166 = *(char **)(a1 + 160);
              }
              else
              {
                v193 = 0;
              }
              v222 = &v193[4 * v189];
              *(_DWORD *)v222 = 0;
              v162 = v222 + 4;
              while (v166 != v188)
              {
                v223 = *((_DWORD *)v166 - 1);
                v166 -= 4;
                *((_DWORD *)v222 - 1) = v223;
                v222 -= 4;
              }
              *(_QWORD *)(a1 + 152) = v222;
              *(_QWORD *)(a1 + 160) = v162;
              *(_QWORD *)(a1 + 168) = &v193[4 * v192];
              if (v188)
                operator delete(v188);
            }
            else
            {
              *(_DWORD *)v166 = 0;
              v162 = v166 + 4;
            }
            *(_QWORD *)(a1 + 160) = v162;
LABEL_374:
            v224 = *((_QWORD *)this + 1);
            if (v224 <= 0xFFFFFFFFFFFFFFFBLL && v224 + 4 <= *((_QWORD *)this + 2))
            {
              *(v162 - 1) = *(_DWORD *)(*(_QWORD *)this + v224);
LABEL_378:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_376:
              *((_BYTE *)this + 24) = 1;
            }
            goto LABEL_472;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v52 = *((_QWORD *)this + 1);
          v53 = *((_QWORD *)this + 2);
          while (v52 < v53 && !*((_BYTE *)this + 24))
          {
            v55 = *(char **)(a1 + 160);
            v54 = *(_QWORD *)(a1 + 168);
            if ((unint64_t)v55 >= v54)
            {
              v57 = (char *)*v285;
              v58 = (v55 - (_BYTE *)*v285) >> 2;
              v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 62)
                goto LABEL_484;
              v60 = v54 - (_QWORD)v57;
              if (v60 >> 1 > v59)
                v59 = v60 >> 1;
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
                v61 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v61 = v59;
              if (v61)
              {
                v62 = (char *)sub_18F26FB8C(v282, v61);
                v57 = *(char **)(a1 + 152);
                v55 = *(char **)(a1 + 160);
              }
              else
              {
                v62 = 0;
              }
              v63 = &v62[4 * v58];
              *(_DWORD *)v63 = 0;
              v56 = v63 + 4;
              while (v55 != v57)
              {
                v64 = *((_DWORD *)v55 - 1);
                v55 -= 4;
                *((_DWORD *)v63 - 1) = v64;
                v63 -= 4;
              }
              *(_QWORD *)(a1 + 152) = v63;
              *(_QWORD *)(a1 + 160) = v56;
              *(_QWORD *)(a1 + 168) = &v62[4 * v61];
              if (v57)
                operator delete(v57);
            }
            else
            {
              *(_DWORD *)v55 = 0;
              v56 = v55 + 4;
            }
            *(_QWORD *)(a1 + 160) = v56;
            v65 = *((_QWORD *)this + 1);
            if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)this + 2))
            {
LABEL_295:
              *((_BYTE *)this + 24) = 1;
              goto LABEL_296;
            }
            *(v56 - 1) = *(_DWORD *)(*(_QWORD *)this + v65);
            v53 = *((_QWORD *)this + 2);
            v52 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v52;
          }
          goto LABEL_296;
        case 4u:
          *(_BYTE *)(a1 + 180) |= 1u;
          v66 = *((_QWORD *)this + 1);
          if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)this + 2))
            goto LABEL_376;
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v66);
          goto LABEL_378;
        case 5u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v67 = *(char **)(a1 + 88);
              do
              {
                if ((unint64_t)v67 >= *v11)
                {
                  v68 = (char *)*v279;
                  v69 = (v67 - (_BYTE *)*v279) >> 2;
                  v70 = v69 + 1;
                  if ((unint64_t)(v69 + 1) >> 62)
                    goto LABEL_485;
                  v71 = *v11 - (_QWORD)v68;
                  if (v71 >> 1 > v70)
                    v70 = v71 >> 1;
                  if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
                    v72 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v72 = v70;
                  if (v72)
                  {
                    v73 = (char *)sub_18F26FB8C((uint64_t)v11, v72);
                    v68 = *(char **)(a1 + 80);
                    v67 = *(char **)(a1 + 88);
                  }
                  else
                  {
                    v73 = 0;
                  }
                  v74 = &v73[4 * v69];
                  *(_DWORD *)v74 = 0;
                  v75 = v74 + 4;
                  while (v67 != v68)
                  {
                    v76 = *((_DWORD *)v67 - 1);
                    v67 -= 4;
                    *((_DWORD *)v74 - 1) = v76;
                    v74 -= 4;
                  }
                  *(_QWORD *)(a1 + 80) = v74;
                  *(_QWORD *)(a1 + 88) = v75;
                  *(_QWORD *)(a1 + 96) = &v73[4 * v72];
                  if (v68)
                    operator delete(v68);
                  v67 = v75;
                }
                else
                {
                  *(_DWORD *)v67 = 0;
                  v67 += 4;
                }
                *(_QWORD *)(a1 + 88) = v67;
                v78 = *((_QWORD *)this + 1);
                v77 = *((_QWORD *)this + 2);
                v79 = *(_QWORD *)this;
                v80 = v78 > 0xFFFFFFFFFFFFFFF5 || v78 + 10 > v77;
                if (v80)
                {
                  v81 = 0;
                  v82 = 0;
                  v88 = 0;
                  if (v77 <= v78)
                    v83 = *((_QWORD *)this + 1);
                  else
                    v83 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v83 == v78)
                      goto LABEL_280;
                    v84 = v78++;
                    v85 = *(_BYTE *)(v79 + v84);
                    *((_QWORD *)this + 1) = v78;
                    v88 |= (unint64_t)(v85 & 0x7F) << v81;
                    if ((v85 & 0x80) == 0)
                      break;
                    v81 += 7;
                    v80 = v82++ > 8;
                    if (v80)
                    {
                      LODWORD(v88) = 0;
                      goto LABEL_141;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v88) = 0;
LABEL_141:
                  v89 = v84 + 1;
                }
                else
                {
                  v86 = 0;
                  v87 = 0;
                  v88 = 0;
                  while (1)
                  {
                    v89 = v78 + 1;
                    *((_QWORD *)this + 1) = v78 + 1;
                    v90 = *(_BYTE *)(v79 + v78);
                    v88 |= (unint64_t)(v90 & 0x7F) << v86;
                    if ((v90 & 0x80) == 0)
                      break;
                    v86 += 7;
                    v78 = v89;
                    v80 = v87++ > 8;
                    if (v80)
                    {
                      LODWORD(v88) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v67 - 1) = v88;
              }
              while (v89 < v77 && !*((_BYTE *)this + 24));
            }
            goto LABEL_296;
          }
          v168 = *(char **)(a1 + 88);
          v167 = *(_QWORD *)(a1 + 96);
          if ((unint64_t)v168 >= v167)
          {
            v194 = (char *)*v279;
            v195 = (v168 - (_BYTE *)*v279) >> 2;
            v196 = v195 + 1;
            if ((unint64_t)(v195 + 1) >> 62)
LABEL_485:
              sub_18F26F8C0();
            v197 = v167 - (_QWORD)v194;
            if (v197 >> 1 > v196)
              v196 = v197 >> 1;
            if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL)
              v198 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v198 = v196;
            if (v198)
            {
              v199 = (char *)sub_18F26FB8C((uint64_t)v11, v198);
              v194 = *(char **)(a1 + 80);
              v168 = *(char **)(a1 + 88);
            }
            else
            {
              v199 = 0;
            }
            v225 = &v199[4 * v195];
            *(_DWORD *)v225 = 0;
            v169 = v225 + 4;
            while (v168 != v194)
            {
              v226 = *((_DWORD *)v168 - 1);
              v168 -= 4;
              *((_DWORD *)v225 - 1) = v226;
              v225 -= 4;
            }
            *(_QWORD *)(a1 + 80) = v225;
            *(_QWORD *)(a1 + 88) = v169;
            *(_QWORD *)(a1 + 96) = &v199[4 * v198];
            if (v194)
              operator delete(v194);
          }
          else
          {
            *(_DWORD *)v168 = 0;
            v169 = v168 + 4;
          }
          *(_QWORD *)(a1 + 88) = v169;
          v227 = *((_QWORD *)this + 1);
          v228 = *((_QWORD *)this + 2);
          v229 = *(_QWORD *)this;
          v230 = 0;
          v231 = 0;
          if (v227 <= 0xFFFFFFFFFFFFFFF5 && v227 + 10 <= v228)
          {
            v235 = 0;
            while (1)
            {
              v236 = v227 + 1;
              *((_QWORD *)this + 1) = v227 + 1;
              v237 = *(_BYTE *)(v229 + v227);
              v235 |= (unint64_t)(v237 & 0x7F) << v230;
              if ((v237 & 0x80) == 0)
                goto LABEL_471;
              v230 += 7;
              v227 = v236;
              v80 = v231++ > 8;
              if (v80)
                goto LABEL_470;
            }
          }
          v235 = 0;
          if (v228 <= v227)
            v228 = *((_QWORD *)this + 1);
          while (v228 != v227)
          {
            v233 = v227 + 1;
            v234 = *(_BYTE *)(v229 + v227);
            *((_QWORD *)this + 1) = v233;
            v235 |= (unint64_t)(v234 & 0x7F) << v230;
            if ((v234 & 0x80) == 0)
              goto LABEL_464;
            v230 += 7;
            v227 = v233;
            v80 = v231++ > 8;
            if (v80)
              goto LABEL_470;
          }
          goto LABEL_463;
        case 6u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v67 = *(char **)(a1 + 16);
              do
              {
                if ((unint64_t)v67 >= *v10)
                {
                  v91 = (char *)*v276;
                  v92 = (v67 - (_BYTE *)*v276) >> 2;
                  v93 = v92 + 1;
                  if ((unint64_t)(v92 + 1) >> 62)
                    goto LABEL_486;
                  v94 = *v10 - (_QWORD)v91;
                  if (v94 >> 1 > v93)
                    v93 = v94 >> 1;
                  if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
                    v95 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v95 = v93;
                  if (v95)
                  {
                    v96 = (char *)sub_18F26FB8C((uint64_t)v10, v95);
                    v91 = *(char **)(a1 + 8);
                    v67 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    v96 = 0;
                  }
                  v97 = &v96[4 * v92];
                  *(_DWORD *)v97 = 0;
                  v98 = v97 + 4;
                  while (v67 != v91)
                  {
                    v99 = *((_DWORD *)v67 - 1);
                    v67 -= 4;
                    *((_DWORD *)v97 - 1) = v99;
                    v97 -= 4;
                  }
                  *(_QWORD *)(a1 + 8) = v97;
                  *(_QWORD *)(a1 + 16) = v98;
                  *(_QWORD *)(a1 + 24) = &v96[4 * v95];
                  if (v91)
                    operator delete(v91);
                  v67 = v98;
                }
                else
                {
                  *(_DWORD *)v67 = 0;
                  v67 += 4;
                }
                *(_QWORD *)(a1 + 16) = v67;
                v101 = *((_QWORD *)this + 1);
                v100 = *((_QWORD *)this + 2);
                v102 = *(_QWORD *)this;
                if (v101 > 0xFFFFFFFFFFFFFFF5 || v101 + 10 > v100)
                {
                  v104 = 0;
                  v105 = 0;
                  v111 = 0;
                  if (v100 <= v101)
                    v106 = *((_QWORD *)this + 1);
                  else
                    v106 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v106 == v101)
                      goto LABEL_280;
                    v107 = v101++;
                    v108 = *(_BYTE *)(v102 + v107);
                    *((_QWORD *)this + 1) = v101;
                    v111 |= (unint64_t)(v108 & 0x7F) << v104;
                    if ((v108 & 0x80) == 0)
                      break;
                    v104 += 7;
                    v80 = v105++ > 8;
                    if (v80)
                    {
                      LODWORD(v111) = 0;
                      goto LABEL_186;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v111) = 0;
LABEL_186:
                  v112 = v107 + 1;
                }
                else
                {
                  v109 = 0;
                  v110 = 0;
                  v111 = 0;
                  while (1)
                  {
                    v112 = v101 + 1;
                    *((_QWORD *)this + 1) = v101 + 1;
                    v113 = *(_BYTE *)(v102 + v101);
                    v111 |= (unint64_t)(v113 & 0x7F) << v109;
                    if ((v113 & 0x80) == 0)
                      break;
                    v109 += 7;
                    v101 = v112;
                    v80 = v110++ > 8;
                    if (v80)
                    {
                      LODWORD(v111) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v67 - 1) = v111;
              }
              while (v112 < v100 && !*((_BYTE *)this + 24));
            }
            goto LABEL_296;
          }
          v171 = *(char **)(a1 + 16);
          v170 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v171 >= v170)
          {
            v200 = (char *)*v276;
            v201 = (v171 - (_BYTE *)*v276) >> 2;
            v202 = v201 + 1;
            if ((unint64_t)(v201 + 1) >> 62)
LABEL_486:
              sub_18F26F8C0();
            v203 = v170 - (_QWORD)v200;
            if (v203 >> 1 > v202)
              v202 = v203 >> 1;
            if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFFCLL)
              v204 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v204 = v202;
            if (v204)
            {
              v205 = (char *)sub_18F26FB8C((uint64_t)v10, v204);
              v200 = *(char **)(a1 + 8);
              v171 = *(char **)(a1 + 16);
            }
            else
            {
              v205 = 0;
            }
            v238 = &v205[4 * v201];
            *(_DWORD *)v238 = 0;
            v169 = v238 + 4;
            while (v171 != v200)
            {
              v239 = *((_DWORD *)v171 - 1);
              v171 -= 4;
              *((_DWORD *)v238 - 1) = v239;
              v238 -= 4;
            }
            *(_QWORD *)(a1 + 8) = v238;
            *(_QWORD *)(a1 + 16) = v169;
            *(_QWORD *)(a1 + 24) = &v205[4 * v204];
            if (v200)
              operator delete(v200);
          }
          else
          {
            *(_DWORD *)v171 = 0;
            v169 = v171 + 4;
          }
          *(_QWORD *)(a1 + 16) = v169;
          v240 = *((_QWORD *)this + 1);
          v241 = *((_QWORD *)this + 2);
          v242 = *(_QWORD *)this;
          v243 = 0;
          v244 = 0;
          if (v240 <= 0xFFFFFFFFFFFFFFF5 && v240 + 10 <= v241)
          {
            v235 = 0;
            while (1)
            {
              v248 = v240 + 1;
              *((_QWORD *)this + 1) = v240 + 1;
              v249 = *(_BYTE *)(v242 + v240);
              v235 |= (unint64_t)(v249 & 0x7F) << v243;
              if ((v249 & 0x80) == 0)
                goto LABEL_471;
              v243 += 7;
              v240 = v248;
              v80 = v244++ > 8;
              if (v80)
                goto LABEL_470;
            }
          }
          v235 = 0;
          if (v241 <= v240)
            v241 = *((_QWORD *)this + 1);
          while (v241 != v240)
          {
            v246 = v240 + 1;
            v247 = *(_BYTE *)(v242 + v240);
            *((_QWORD *)this + 1) = v246;
            v235 |= (unint64_t)(v247 & 0x7F) << v243;
            if ((v247 & 0x80) == 0)
              goto LABEL_464;
            v243 += 7;
            v240 = v246;
            v80 = v244++ > 8;
            if (v80)
              goto LABEL_470;
          }
          goto LABEL_463;
        case 7u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v67 = *(char **)(a1 + 40);
              do
              {
                if ((unint64_t)v67 >= *v9)
                {
                  v114 = (char *)*v277;
                  v115 = (v67 - (_BYTE *)*v277) >> 2;
                  v116 = v115 + 1;
                  if ((unint64_t)(v115 + 1) >> 62)
                    goto LABEL_487;
                  v117 = *v9 - (_QWORD)v114;
                  if (v117 >> 1 > v116)
                    v116 = v117 >> 1;
                  if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL)
                    v118 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v118 = v116;
                  if (v118)
                  {
                    v119 = (char *)sub_18F26FB8C((uint64_t)v9, v118);
                    v114 = *(char **)(a1 + 32);
                    v67 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    v119 = 0;
                  }
                  v120 = &v119[4 * v115];
                  *(_DWORD *)v120 = 0;
                  v121 = v120 + 4;
                  while (v67 != v114)
                  {
                    v122 = *((_DWORD *)v67 - 1);
                    v67 -= 4;
                    *((_DWORD *)v120 - 1) = v122;
                    v120 -= 4;
                  }
                  *(_QWORD *)(a1 + 32) = v120;
                  *(_QWORD *)(a1 + 40) = v121;
                  *(_QWORD *)(a1 + 48) = &v119[4 * v118];
                  if (v114)
                    operator delete(v114);
                  v67 = v121;
                }
                else
                {
                  *(_DWORD *)v67 = 0;
                  v67 += 4;
                }
                *(_QWORD *)(a1 + 40) = v67;
                v124 = *((_QWORD *)this + 1);
                v123 = *((_QWORD *)this + 2);
                v125 = *(_QWORD *)this;
                if (v124 > 0xFFFFFFFFFFFFFFF5 || v124 + 10 > v123)
                {
                  v127 = 0;
                  v128 = 0;
                  v134 = 0;
                  if (v123 <= v124)
                    v129 = *((_QWORD *)this + 1);
                  else
                    v129 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v129 == v124)
                      goto LABEL_280;
                    v130 = v124++;
                    v131 = *(_BYTE *)(v125 + v130);
                    *((_QWORD *)this + 1) = v124;
                    v134 |= (unint64_t)(v131 & 0x7F) << v127;
                    if ((v131 & 0x80) == 0)
                      break;
                    v127 += 7;
                    v80 = v128++ > 8;
                    if (v80)
                    {
                      LODWORD(v134) = 0;
                      goto LABEL_231;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v134) = 0;
LABEL_231:
                  v135 = v130 + 1;
                }
                else
                {
                  v132 = 0;
                  v133 = 0;
                  v134 = 0;
                  while (1)
                  {
                    v135 = v124 + 1;
                    *((_QWORD *)this + 1) = v124 + 1;
                    v136 = *(_BYTE *)(v125 + v124);
                    v134 |= (unint64_t)(v136 & 0x7F) << v132;
                    if ((v136 & 0x80) == 0)
                      break;
                    v132 += 7;
                    v124 = v135;
                    v80 = v133++ > 8;
                    if (v80)
                    {
                      LODWORD(v134) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v67 - 1) = v134;
              }
              while (v135 < v123 && !*((_BYTE *)this + 24));
            }
            goto LABEL_296;
          }
          v173 = *(char **)(a1 + 40);
          v172 = *(_QWORD *)(a1 + 48);
          if ((unint64_t)v173 >= v172)
          {
            v206 = (char *)*v277;
            v207 = (v173 - (_BYTE *)*v277) >> 2;
            v208 = v207 + 1;
            if ((unint64_t)(v207 + 1) >> 62)
LABEL_487:
              sub_18F26F8C0();
            v209 = v172 - (_QWORD)v206;
            if (v209 >> 1 > v208)
              v208 = v209 >> 1;
            if ((unint64_t)v209 >= 0x7FFFFFFFFFFFFFFCLL)
              v210 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v210 = v208;
            if (v210)
            {
              v211 = (char *)sub_18F26FB8C((uint64_t)v9, v210);
              v206 = *(char **)(a1 + 32);
              v173 = *(char **)(a1 + 40);
            }
            else
            {
              v211 = 0;
            }
            v250 = &v211[4 * v207];
            *(_DWORD *)v250 = 0;
            v169 = v250 + 4;
            while (v173 != v206)
            {
              v251 = *((_DWORD *)v173 - 1);
              v173 -= 4;
              *((_DWORD *)v250 - 1) = v251;
              v250 -= 4;
            }
            *(_QWORD *)(a1 + 32) = v250;
            *(_QWORD *)(a1 + 40) = v169;
            *(_QWORD *)(a1 + 48) = &v211[4 * v210];
            if (v206)
              operator delete(v206);
          }
          else
          {
            *(_DWORD *)v173 = 0;
            v169 = v173 + 4;
          }
          *(_QWORD *)(a1 + 40) = v169;
          v252 = *((_QWORD *)this + 1);
          v253 = *((_QWORD *)this + 2);
          v254 = *(_QWORD *)this;
          v255 = 0;
          v256 = 0;
          if (v252 <= 0xFFFFFFFFFFFFFFF5 && v252 + 10 <= v253)
          {
            v235 = 0;
            while (1)
            {
              v260 = v252 + 1;
              *((_QWORD *)this + 1) = v252 + 1;
              v261 = *(_BYTE *)(v254 + v252);
              v235 |= (unint64_t)(v261 & 0x7F) << v255;
              if ((v261 & 0x80) == 0)
                goto LABEL_471;
              v255 += 7;
              v252 = v260;
              v80 = v256++ > 8;
              if (v80)
                goto LABEL_470;
            }
          }
          v235 = 0;
          if (v253 <= v252)
            v253 = *((_QWORD *)this + 1);
          while (v253 != v252)
          {
            v258 = v252 + 1;
            v259 = *(_BYTE *)(v254 + v252);
            *((_QWORD *)this + 1) = v258;
            v235 |= (unint64_t)(v259 & 0x7F) << v255;
            if ((v259 & 0x80) == 0)
              goto LABEL_464;
            v255 += 7;
            v252 = v258;
            v80 = v256++ > 8;
            if (v80)
              goto LABEL_470;
          }
          goto LABEL_463;
        case 8u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v67 = *(char **)(a1 + 64);
              do
              {
                if ((unint64_t)v67 >= *v8)
                {
                  v137 = (char *)*v278;
                  v138 = (v67 - (_BYTE *)*v278) >> 2;
                  v139 = v138 + 1;
                  if ((unint64_t)(v138 + 1) >> 62)
                    goto LABEL_488;
                  v140 = *v8 - (_QWORD)v137;
                  if (v140 >> 1 > v139)
                    v139 = v140 >> 1;
                  if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL)
                    v141 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v141 = v139;
                  if (v141)
                  {
                    v142 = (char *)sub_18F26FB8C((uint64_t)v8, v141);
                    v137 = *(char **)(a1 + 56);
                    v67 = *(char **)(a1 + 64);
                  }
                  else
                  {
                    v142 = 0;
                  }
                  v143 = &v142[4 * v138];
                  *(_DWORD *)v143 = 0;
                  v144 = v143 + 4;
                  while (v67 != v137)
                  {
                    v145 = *((_DWORD *)v67 - 1);
                    v67 -= 4;
                    *((_DWORD *)v143 - 1) = v145;
                    v143 -= 4;
                  }
                  *(_QWORD *)(a1 + 56) = v143;
                  *(_QWORD *)(a1 + 64) = v144;
                  *(_QWORD *)(a1 + 72) = &v142[4 * v141];
                  if (v137)
                    operator delete(v137);
                  v67 = v144;
                }
                else
                {
                  *(_DWORD *)v67 = 0;
                  v67 += 4;
                }
                *(_QWORD *)(a1 + 64) = v67;
                v147 = *((_QWORD *)this + 1);
                v146 = *((_QWORD *)this + 2);
                v148 = *(_QWORD *)this;
                if (v147 <= 0xFFFFFFFFFFFFFFF5 && v147 + 10 <= v146)
                {
                  v155 = 0;
                  v156 = 0;
                  v157 = 0;
                  while (1)
                  {
                    v158 = v147 + 1;
                    *((_QWORD *)this + 1) = v147 + 1;
                    v159 = *(_BYTE *)(v148 + v147);
                    v157 |= (unint64_t)(v159 & 0x7F) << v155;
                    if ((v159 & 0x80) == 0)
                      goto LABEL_277;
                    v155 += 7;
                    v147 = v158;
                    v80 = v156++ > 8;
                    if (v80)
                    {
                      LODWORD(v157) = 0;
                      goto LABEL_277;
                    }
                  }
                }
                v150 = 0;
                v151 = 0;
                v157 = 0;
                if (v146 <= v147)
                  v152 = *((_QWORD *)this + 1);
                else
                  v152 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v152 == v147)
                  {
LABEL_280:
                    *((_BYTE *)this + 24) = 1;
                    *((_DWORD *)v67 - 1) = 0;
                    goto LABEL_296;
                  }
                  v153 = v147++;
                  v154 = *(_BYTE *)(v148 + v153);
                  *((_QWORD *)this + 1) = v147;
                  v157 |= (unint64_t)(v154 & 0x7F) << v150;
                  if ((v154 & 0x80) == 0)
                    break;
                  v150 += 7;
                  v80 = v151++ > 8;
                  if (v80)
                  {
                    LODWORD(v157) = 0;
                    goto LABEL_276;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v157) = 0;
LABEL_276:
                v158 = v153 + 1;
LABEL_277:
                *((_DWORD *)v67 - 1) = v157;
              }
              while (v158 < v146 && !*((_BYTE *)this + 24));
            }
LABEL_296:
            PB::Reader::recallMark();
          }
          else
          {
            v175 = *(char **)(a1 + 64);
            v174 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v175 >= v174)
            {
              v212 = (char *)*v278;
              v213 = (v175 - (_BYTE *)*v278) >> 2;
              v214 = v213 + 1;
              if ((unint64_t)(v213 + 1) >> 62)
LABEL_488:
                sub_18F26F8C0();
              v215 = v174 - (_QWORD)v212;
              if (v215 >> 1 > v214)
                v214 = v215 >> 1;
              if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFFCLL)
                v216 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v216 = v214;
              if (v216)
              {
                v217 = (char *)sub_18F26FB8C((uint64_t)v8, v216);
                v212 = *(char **)(a1 + 56);
                v175 = *(char **)(a1 + 64);
              }
              else
              {
                v217 = 0;
              }
              v262 = &v217[4 * v213];
              *(_DWORD *)v262 = 0;
              v169 = v262 + 4;
              while (v175 != v212)
              {
                v263 = *((_DWORD *)v175 - 1);
                v175 -= 4;
                *((_DWORD *)v262 - 1) = v263;
                v262 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v262;
              *(_QWORD *)(a1 + 64) = v169;
              *(_QWORD *)(a1 + 72) = &v217[4 * v216];
              if (v212)
                operator delete(v212);
            }
            else
            {
              *(_DWORD *)v175 = 0;
              v169 = v175 + 4;
            }
            *(_QWORD *)(a1 + 64) = v169;
            v264 = *((_QWORD *)this + 1);
            v265 = *((_QWORD *)this + 2);
            v266 = *(_QWORD *)this;
            v267 = 0;
            v268 = 0;
            if (v264 > 0xFFFFFFFFFFFFFFF5 || v264 + 10 > v265)
            {
              v235 = 0;
              if (v265 <= v264)
                v265 = *((_QWORD *)this + 1);
              while (v265 != v264)
              {
                v270 = v264 + 1;
                v271 = *(_BYTE *)(v266 + v264);
                *((_QWORD *)this + 1) = v270;
                v235 |= (unint64_t)(v271 & 0x7F) << v267;
                if ((v271 & 0x80) == 0)
                {
LABEL_464:
                  if (*((_BYTE *)this + 24))
                    LODWORD(v235) = 0;
                  goto LABEL_471;
                }
                v267 += 7;
                v264 = v270;
                v80 = v268++ > 8;
                if (v80)
                {
LABEL_470:
                  LODWORD(v235) = 0;
                  goto LABEL_471;
                }
              }
LABEL_463:
              LODWORD(v235) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v235 = 0;
              while (1)
              {
                v272 = v264 + 1;
                *((_QWORD *)this + 1) = v264 + 1;
                v273 = *(_BYTE *)(v266 + v264);
                v235 |= (unint64_t)(v273 & 0x7F) << v267;
                if ((v273 & 0x80) == 0)
                  break;
                v267 += 7;
                v264 = v272;
                v80 = v268++ > 8;
                if (v80)
                  goto LABEL_470;
              }
            }
LABEL_471:
            *(v169 - 1) = v235;
          }
LABEL_472:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_472;
      }
    }
    v18 = 0;
    v19 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v20;
      v15 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_21;
      v18 += 7;
      v2 = v20;
      if (v19++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F30A970(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result;
  v4 = *(float **)(result + 128);
  v5 = *(float **)(result + 136);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(float **)(v3 + 104);
  v8 = *(float **)(v3 + 112);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(float **)(v3 + 152);
  v11 = *(float **)(v3 + 160);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12);
  }
  if ((*(_BYTE *)(v3 + 180) & 1) != 0)
    result = PB::Writer::write(this, *(float *)(v3 + 176));
  v13 = *(_QWORD *)(v3 + 80);
  v14 = *(_QWORD *)(v3 + 88);
  while (v13 != v14)
  {
    v13 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v15 = *(_QWORD *)(v3 + 8);
  v16 = *(_QWORD *)(v3 + 16);
  while (v15 != v16)
  {
    v15 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v17 = *(_QWORD *)(v3 + 32);
  v18 = *(_QWORD *)(v3 + 40);
  while (v17 != v18)
  {
    v17 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v20 = *(_QWORD *)(v3 + 56);
  v19 = *(_QWORD *)(v3 + 64);
  while (v20 != v19)
  {
    v20 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_18F30AA90(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951DD8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_18F30AAA8(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2951DD8;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_18F30AAE8(PB::Base *a1)
{
  sub_18F30AAA8(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F30AB0C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "pose", v7);
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F30AB94(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    do
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v17 = 0;
        v18 = 0;
        v13 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v10 + v2);
          *((_QWORD *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0)
            goto LABEL_21;
          v17 += 7;
          v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            v13 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 2)
      {
        if ((v13 & 7) != 2)
        {
          v38 = *(char **)(a1 + 16);
          v37 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v38 >= v37)
          {
            v40 = (char *)*v8;
            v41 = (v38 - (_BYTE *)*v8) >> 3;
            v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 61)
LABEL_84:
              sub_18F26F8C0();
            v43 = v37 - (_QWORD)v40;
            if (v43 >> 2 > v42)
              v42 = v43 >> 2;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
              v44 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v44 = v42;
            if (v44)
            {
              v45 = (char *)sub_18F26F8D4(v9, v44);
              v40 = *(char **)(a1 + 8);
              v38 = *(char **)(a1 + 16);
            }
            else
            {
              v45 = 0;
            }
            v46 = &v45[8 * v41];
            *(_QWORD *)v46 = 0;
            v39 = v46 + 8;
            while (v38 != v40)
            {
              v47 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *((_QWORD *)v46 - 1) = v47;
              v46 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v46;
            *(_QWORD *)(a1 + 16) = v39;
            *(_QWORD *)(a1 + 24) = &v45[8 * v44];
            if (v40)
              operator delete(v40);
          }
          else
          {
            *(_QWORD *)v38 = 0;
            v39 = v38 + 8;
          }
          *(_QWORD *)(a1 + 16) = v39;
          v48 = *((_QWORD *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((_QWORD *)this + 2))
          {
LABEL_73:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_76;
          }
          *(v39 - 1) = *(_QWORD *)(*(_QWORD *)this + v48);
          goto LABEL_75;
        }
        if ((PB::Reader::placeMark() & 1) != 0)
          return 0;
        v23 = *((_QWORD *)this + 1);
        v24 = *((_QWORD *)this + 2);
        while (v23 < v24 && !*((_BYTE *)this + 24))
        {
          v26 = *(char **)(a1 + 16);
          v25 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v26 >= v25)
          {
            v28 = (char *)*v8;
            v29 = (v26 - (_BYTE *)*v8) >> 3;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 61)
              goto LABEL_84;
            v31 = v25 - (_QWORD)v28;
            if (v31 >> 2 > v30)
              v30 = v31 >> 2;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
              v32 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v32 = v30;
            if (v32)
            {
              v33 = (char *)sub_18F26F8D4(v9, v32);
              v28 = *(char **)(a1 + 8);
              v26 = *(char **)(a1 + 16);
            }
            else
            {
              v33 = 0;
            }
            v34 = &v33[8 * v29];
            *(_QWORD *)v34 = 0;
            v27 = v34 + 8;
            while (v26 != v28)
            {
              v35 = *((_QWORD *)v26 - 1);
              v26 -= 8;
              *((_QWORD *)v34 - 1) = v35;
              v34 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v34;
            *(_QWORD *)(a1 + 16) = v27;
            *(_QWORD *)(a1 + 24) = &v33[8 * v32];
            if (v28)
              operator delete(v28);
          }
          else
          {
            *(_QWORD *)v26 = 0;
            v27 = v26 + 8;
          }
          *(_QWORD *)(a1 + 16) = v27;
          v36 = *((_QWORD *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFF7 || v36 + 8 > *((_QWORD *)this + 2))
          {
            *((_BYTE *)this + 24) = 1;
            break;
          }
          *(v27 - 1) = *(_QWORD *)(*(_QWORD *)this + v36);
          v24 = *((_QWORD *)this + 2);
          v23 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v23;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if ((v13 >> 3) == 1)
        {
          *(_BYTE *)(a1 + 40) |= 1u;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_73;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v22);
LABEL_75:
          *((_QWORD *)this + 1) += 8;
          goto LABEL_76;
        }
        if ((PB::Reader::skip(this) & 1) == 0)
          return 0;
      }
LABEL_76:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_18F30AF44(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;

  v3 = result;
  if ((*(_BYTE *)(result + 40) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 32));
  v5 = *(double **)(v3 + 8);
  v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    v6 = *v5++;
    result = PB::Writer::write(this, v6);
  }
  return result;
}

uint64_t sub_18F30AFA4(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951F98;
  *(_DWORD *)(result + 100) = 0;
  return result;
}

void sub_18F30AFBC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F30AFE0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "accuracy", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 100);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((*(_WORD *)(a1 + 100) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "batchedLocationFixType");
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "distance", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "gpsAltitude", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "gpsSpeedAccuracy", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "odometer", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "originDevice");
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "quality");
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "rawSpeed", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(this, "trackRunOdometerHasBeenCorrected");
    if ((*(_WORD *)(a1 + 100) & 0x1000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(this, "timestampGps", *(double *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x2000) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x1000) != 0)
LABEL_15:
    PB::TextFormatter::format(this, "type");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F30B1D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  int v45;
  BOOL v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 100) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 2u:
              *(_WORD *)(a1 + 100) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 3u:
              *(_WORD *)(a1 + 100) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 4u:
              *(_WORD *)(a1 + 100) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 5u:
              *(_WORD *)(a1 + 100) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 6u:
              *(_WORD *)(a1 + 100) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 7u:
              *(_WORD *)(a1 + 100) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 8u:
              *(_WORD *)(a1 + 100) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_50;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_112;
            case 9u:
              *(_WORD *)(a1 + 100) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_112:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_50:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_133;
            case 0xAu:
              *(_WORD *)(a1 + 100) |= 0x400u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_117;
                  }
                  v49 = v21++;
                  v50 = *(_BYTE *)(v22 + v49);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_116:
                    v2 = v49 + 1;
                    goto LABEL_117;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_116;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_117;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_117:
              *(_DWORD *)(a1 + 84) = v25;
              goto LABEL_133;
            case 0xBu:
              *(_WORD *)(a1 + 100) |= 0x800u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_122;
                  }
                  v53 = v27++;
                  v54 = *(_BYTE *)(v28 + v53);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_121:
                    v2 = v53 + 1;
                    goto LABEL_122;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_121;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_122;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_122:
              *(_DWORD *)(a1 + 88) = v31;
              goto LABEL_133;
            case 0xCu:
              *(_WORD *)(a1 + 100) |= 0x1000u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_127;
                  }
                  v57 = v33++;
                  v58 = *(_BYTE *)(v34 + v57);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_126:
                    v2 = v57 + 1;
                    goto LABEL_127;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_126;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_127;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_127:
              *(_DWORD *)(a1 + 92) = v37;
              goto LABEL_133;
            case 0xDu:
              *(_WORD *)(a1 + 100) |= 0x200u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_132;
                  }
                  v61 = v39++;
                  v62 = *(_BYTE *)(v40 + v61);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_131:
                    v2 = v61 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_131;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_132;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_132:
              *(_DWORD *)(a1 + 80) = v43;
LABEL_133:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xEu:
              *(_WORD *)(a1 + 100) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v46 = v45 != 0;
              }
              *(_BYTE *)(a1 + 96) = v46;
              goto LABEL_133;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_133;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F30B938(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 100);
  if ((v4 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 64));
    v4 = *(_WORD *)(v3 + 100);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 100) & 0x2000) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F30BAE4(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F4B0;
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_18F30BAFC(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E294F4B0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F30BB40(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E294F4B0;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F30BB98(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "gpsCourseAccuracy", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(a1 + 80) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "gpsCourseRadians", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "groundAltitude", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "groundAltitudeUncertainty", *(double *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "maxAbsSlope", *(double *)(a1 + 40));
  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
LABEL_18:
    PB::TextFormatter::format(this, "smoothedGPSAltitude", *(double *)(a1 + 56));
    if ((*(_BYTE *)(a1 + 80) & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(this, "slope", *(double *)(a1 + 48));
  v5 = *(_BYTE *)(a1 + 80);
  if ((v5 & 0x40) != 0)
    goto LABEL_18;
LABEL_8:
  if ((v5 & 0x80) == 0)
    goto LABEL_9;
LABEL_19:
  PB::TextFormatter::format(this, "smoothedGPSAltitudeUncertainty", *(double *)(a1 + 64));
LABEL_9:
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F30BCE8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              v20 = (_DWORD *)operator new();
              *(_QWORD *)v20 = &off_1E2951F98;
              v20[25] = 0;
              v21 = *(_QWORD *)(a1 + 72);
              *(_QWORD *)(a1 + 72) = v20;
              if (v21)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
                v20 = *(_DWORD **)(a1 + 72);
              }
              if (PB::Reader::placeMark()
                && ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) != 0)
              {
                PB::Reader::recallMark();
                goto LABEL_55;
              }
              return 0;
            case 2u:
              *(_BYTE *)(a1 + 80) |= 4u;
              v23 = *((_QWORD *)this + 1);
              if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
                goto LABEL_52;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v23);
              goto LABEL_54;
            case 3u:
              *(_BYTE *)(a1 + 80) |= 8u;
              v24 = *((_QWORD *)this + 1);
              if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
                goto LABEL_52;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v24);
              goto LABEL_54;
            case 4u:
              *(_BYTE *)(a1 + 80) |= 0x40u;
              v25 = *((_QWORD *)this + 1);
              if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
                goto LABEL_52;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v25);
              goto LABEL_54;
            case 5u:
              *(_BYTE *)(a1 + 80) |= 0x80u;
              v26 = *((_QWORD *)this + 1);
              if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
                goto LABEL_52;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v26);
              goto LABEL_54;
            case 6u:
              *(_BYTE *)(a1 + 80) |= 2u;
              v27 = *((_QWORD *)this + 1);
              if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((_QWORD *)this + 2))
                goto LABEL_52;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v27);
              goto LABEL_54;
            case 7u:
              *(_BYTE *)(a1 + 80) |= 1u;
              v28 = *((_QWORD *)this + 1);
              if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)this + 2))
                goto LABEL_52;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v28);
              goto LABEL_54;
            case 8u:
              *(_BYTE *)(a1 + 80) |= 0x20u;
              v29 = *((_QWORD *)this + 1);
              if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((_QWORD *)this + 2))
                goto LABEL_52;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v29);
              goto LABEL_54;
            case 9u:
              *(_BYTE *)(a1 + 80) |= 0x10u;
              v30 = *((_QWORD *)this + 1);
              if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v30);
LABEL_54:
                *((_QWORD *)this + 1) += 8;
              }
              else
              {
LABEL_52:
                *((_BYTE *)this + 24) = 1;
              }
LABEL_55:
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              goto LABEL_55;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F30C0B8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = result;
  v4 = *(const PB::Base **)(result + 72);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 24));
    v5 = *(_BYTE *)(v3 + 80);
    if ((v5 & 8) == 0)
    {
LABEL_5:
      if ((v5 & 0x40) == 0)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(v3 + 80) & 8) == 0)
  {
    goto LABEL_5;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v5 = *(_BYTE *)(v3 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 40));
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  if ((*(_BYTE *)(v3 + 80) & 0x10) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40));
  return result;
}

uint64_t sub_18F30C1D0(uint64_t result)
{
  *(_QWORD *)result = &off_1E294EBF0;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_18F30C1E8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F30C20C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "confidence", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "context");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "dataSource");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "error");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "heartRate", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "interpolation");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 4) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "mode");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
    if ((*(_WORD *)(a1 + 68) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(this, "sinceLastGood", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x10) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F30C37C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_105;
                  }
                  v49 = v20++;
                  v50 = *(_BYTE *)(v21 + v49);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_104;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_104:
                v2 = v49 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_105;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_105:
              *(_DWORD *)(a1 + 52) = v24;
              goto LABEL_121;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_110;
                  }
                  v53 = v27++;
                  v54 = *(_BYTE *)(v28 + v53);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_109:
                    v2 = v53 + 1;
                    goto LABEL_110;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_109;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_110;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_110:
              *(_DWORD *)(a1 + 56) = v31;
              goto LABEL_121;
            case 3u:
              *(_WORD *)(a1 + 68) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_54;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 4u:
              *(_WORD *)(a1 + 68) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_54;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 64) = v34;
              goto LABEL_121;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_54;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 7u:
              *(_WORD *)(a1 + 68) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_54;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_100;
            case 8u:
              *(_WORD *)(a1 + 68) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_100:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_54:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_121;
            case 9u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_115;
                  }
                  v57 = v35++;
                  v58 = *(_BYTE *)(v36 + v57);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_114:
                    v2 = v57 + 1;
                    goto LABEL_115;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_114;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_115;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_115:
              *(_DWORD *)(a1 + 60) = v39;
              goto LABEL_121;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_120;
                  }
                  v61 = v41++;
                  v62 = *(_BYTE *)(v42 + v61);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_119:
                    v2 = v61 + 1;
                    goto LABEL_120;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_119;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_120;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_120:
              *(_DWORD *)(a1 + 48) = v45;
LABEL_121:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_121;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F30CA04(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 68);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 68) & 0x20) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F30CB40(uint64_t result)
{
  *(_QWORD *)result = &off_1E294CCA8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F30CB58(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F30CB7C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "orientation");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F30CBE4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F30CE70(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_18F30CEC8(_QWORD *result)
{
  *result = &off_1E294CA08;
  result[1] = 0;
  return result;
}

void sub_18F30CEDC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F30CF00(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "type");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F30CF4C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F30D180(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F30D1A0(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F4E8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F30D1B8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F30D1DC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F30D28C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F30D4F0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_18F30D584(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950E80;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F30D59C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F30D5C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F30D670(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F30D8D4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_18F30D968(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950400;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F30D980(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F30D9A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F30DA54(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F30DCB8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

double sub_18F30DD4C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E2944B38;
  *(_DWORD *)(a1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_18F30DD70(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2944B38;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F30DDC0(PB::Base *a1)
{
  sub_18F30DD70(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F30DDE4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  char v11;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "dotVector", v7);
  }
  if ((*(_BYTE *)(a1 + 72) & 4) != 0)
    PB::TextFormatter::format(this, "hasValidTNBFrame");
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "headingVector", v10);
  }
  v11 = *(_BYTE *)(a1 + 72);
  if ((v11 & 8) == 0)
  {
    if ((*(_BYTE *)(a1 + 72) & 1) == 0)
      goto LABEL_9;
LABEL_13:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
    if ((*(_BYTE *)(a1 + 72) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
  PB::TextFormatter::format(this, "isPedestrian");
  v11 = *(_BYTE *)(a1 + 72);
  if ((v11 & 1) != 0)
    goto LABEL_13;
LABEL_9:
  if ((v11 & 2) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "uncertainty", *(float *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F30DEF8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  BOOL v63;
  unint64_t v64;
  char *v65;
  _DWORD *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  int v82;
  char *v83;
  int v84;
  unint64_t v85;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 72) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v25);
          v26 = *((_QWORD *)this + 1) + 8;
          goto LABEL_128;
        case 2u:
          if (v24 != 2)
          {
            v65 = *(char **)(a1 + 16);
            v64 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v65 >= v64)
            {
              v69 = (char *)*v10;
              v70 = (v65 - (_BYTE *)*v10) >> 2;
              v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 62)
LABEL_137:
                sub_18F26F8C0();
              v72 = v64 - (_QWORD)v69;
              if (v72 >> 1 > v71)
                v71 = v72 >> 1;
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
                v73 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v73 = v71;
              if (v73)
              {
                v74 = (char *)sub_18F26FB8C(v11, v73);
                v69 = *(char **)(a1 + 8);
                v65 = *(char **)(a1 + 16);
              }
              else
              {
                v74 = 0;
              }
              v81 = &v74[4 * v70];
              *(_DWORD *)v81 = 0;
              v66 = v81 + 4;
              while (v65 != v69)
              {
                v82 = *((_DWORD *)v65 - 1);
                v65 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v81;
              *(_QWORD *)(a1 + 16) = v66;
              *(_QWORD *)(a1 + 24) = &v74[4 * v73];
              if (v69)
                operator delete(v69);
            }
            else
            {
              *(_DWORD *)v65 = 0;
              v66 = v65 + 4;
            }
            *(_QWORD *)(a1 + 16) = v66;
            goto LABEL_123;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          while (v27 < v28 && !*((_BYTE *)this + 24))
          {
            v30 = *(char **)(a1 + 16);
            v29 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v10;
              v33 = (v30 - (_BYTE *)*v10) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_137;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_18F26FB8C(v11, v36);
                v32 = *(char **)(a1 + 8);
                v30 = *(char **)(a1 + 16);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v38;
              *(_QWORD *)(a1 + 16) = v31;
              *(_QWORD *)(a1 + 24) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *(_QWORD *)(a1 + 16) = v31;
            v40 = *((_QWORD *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
              goto LABEL_91;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)this + v40);
            v28 = *((_QWORD *)this + 2);
            v27 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v27;
          }
          goto LABEL_92;
        case 3u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v41 = *((_QWORD *)this + 1);
            v42 = *((_QWORD *)this + 2);
            while (v41 < v42 && !*((_BYTE *)this + 24))
            {
              v44 = *(char **)(a1 + 40);
              v43 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v44 >= v43)
              {
                v46 = (char *)*v8;
                v47 = (v44 - (_BYTE *)*v8) >> 2;
                v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) >> 62)
                  goto LABEL_138;
                v49 = v43 - (_QWORD)v46;
                if (v49 >> 1 > v48)
                  v48 = v49 >> 1;
                if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                  v50 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v50 = v48;
                if (v50)
                {
                  v51 = (char *)sub_18F26FB8C(v9, v50);
                  v46 = *(char **)(a1 + 32);
                  v44 = *(char **)(a1 + 40);
                }
                else
                {
                  v51 = 0;
                }
                v52 = &v51[4 * v47];
                *(_DWORD *)v52 = 0;
                v45 = v52 + 4;
                while (v44 != v46)
                {
                  v53 = *((_DWORD *)v44 - 1);
                  v44 -= 4;
                  *((_DWORD *)v52 - 1) = v53;
                  v52 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v52;
                *(_QWORD *)(a1 + 40) = v45;
                *(_QWORD *)(a1 + 48) = &v51[4 * v50];
                if (v46)
                  operator delete(v46);
              }
              else
              {
                *(_DWORD *)v44 = 0;
                v45 = v44 + 4;
              }
              *(_QWORD *)(a1 + 40) = v45;
              v54 = *((_QWORD *)this + 1);
              if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
              {
LABEL_91:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v45 - 1) = *(_DWORD *)(*(_QWORD *)this + v54);
              v42 = *((_QWORD *)this + 2);
              v41 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v41;
            }
LABEL_92:
            PB::Reader::recallMark();
          }
          else
          {
            v68 = *(char **)(a1 + 40);
            v67 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v68 >= v67)
            {
              v75 = (char *)*v8;
              v76 = (v68 - (_BYTE *)*v8) >> 2;
              v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62)
LABEL_138:
                sub_18F26F8C0();
              v78 = v67 - (_QWORD)v75;
              if (v78 >> 1 > v77)
                v77 = v78 >> 1;
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
                v79 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v79 = v77;
              if (v79)
              {
                v80 = (char *)sub_18F26FB8C(v9, v79);
                v75 = *(char **)(a1 + 32);
                v68 = *(char **)(a1 + 40);
              }
              else
              {
                v80 = 0;
              }
              v83 = &v80[4 * v76];
              *(_DWORD *)v83 = 0;
              v66 = v83 + 4;
              while (v68 != v75)
              {
                v84 = *((_DWORD *)v68 - 1);
                v68 -= 4;
                *((_DWORD *)v83 - 1) = v84;
                v83 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v83;
              *(_QWORD *)(a1 + 40) = v66;
              *(_QWORD *)(a1 + 48) = &v80[4 * v79];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_DWORD *)v68 = 0;
              v66 = v68 + 4;
            }
            *(_QWORD *)(a1 + 40) = v66;
LABEL_123:
            v85 = *((_QWORD *)this + 1);
            if (v85 <= 0xFFFFFFFFFFFFFFFBLL && v85 + 4 <= *((_QWORD *)this + 2))
            {
              *(v66 - 1) = *(_DWORD *)(*(_QWORD *)this + v85);
LABEL_127:
              v26 = *((_QWORD *)this + 1) + 4;
LABEL_128:
              *((_QWORD *)this + 1) = v26;
            }
            else
            {
LABEL_125:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_129:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 72) |= 2u;
          v55 = *((_QWORD *)this + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)this + 2))
            goto LABEL_125;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v55);
          goto LABEL_127;
        case 5u:
          *(_BYTE *)(a1 + 72) |= 8u;
          v56 = *((_QWORD *)this + 1);
          if (v56 >= *((_QWORD *)this + 2))
          {
            v59 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v57 = v56 + 1;
            v58 = *(unsigned __int8 *)(*(_QWORD *)this + v56);
            *((_QWORD *)this + 1) = v57;
            v59 = v58 != 0;
          }
          *(_BYTE *)(a1 + 69) = v59;
          goto LABEL_129;
        case 6u:
          *(_BYTE *)(a1 + 72) |= 4u;
          v60 = *((_QWORD *)this + 1);
          if (v60 >= *((_QWORD *)this + 2))
          {
            v63 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v61 = v60 + 1;
            v62 = *(unsigned __int8 *)(*(_QWORD *)this + v60);
            *((_QWORD *)this + 1) = v61;
            v63 = v62 != 0;
          }
          *(_BYTE *)(a1 + 68) = v63;
          goto LABEL_129;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_129;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F30E548(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  char v10;

  v3 = result;
  if ((*(_BYTE *)(result + 72) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 56));
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(_BYTE *)(v3 + 72);
  if ((v10 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 64));
    v10 = *(_BYTE *)(v3 + 72);
    if ((v10 & 8) == 0)
    {
LABEL_11:
      if ((v10 & 4) == 0)
        return result;
      return PB::Writer::write(this);
    }
  }
  else if ((*(_BYTE *)(v3 + 72) & 8) == 0)
  {
    goto LABEL_11;
  }
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 72) & 4) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F30E624(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944A20;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F30E63C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F30E660(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dotMeasurement", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotMeasurementUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F30E710(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F30E974(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_18F30EA08(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950C50;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F30EA20(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F30EA44(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F30EAF4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F30ED58(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_18F30EDEC(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944DA0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_18F30EE04(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F30EE28(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "dotDeltaBufferMaxAbs", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotDeltaBufferVar", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "dotErrorEstimate", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "dotRelativeChangeOverBuffer", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "headingRelativeChangeOverBuffer", *(float *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 40) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "headingDeltaBufferVar", *(float *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x40) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 1) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F30EF38(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_47;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 5u:
          *(_BYTE *)(a1 + 40) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 6u:
          *(_BYTE *)(a1 + 40) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 7u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_46:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_47:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_44:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F30F244(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24));
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 40) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24));
  return result;
}

uint64_t sub_18F30F32C(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944BA8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_18F30F344(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2944BA8;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_18F30F384(PB::Base *a1)
{
  sub_18F30F344(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F30F3A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
    PB::TextFormatter::format(this, "placementFiltered");
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "placementProbabilityFiltered", v7);
  }
  v8 = *(_BYTE *)(a1 + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
    v8 = *(_BYTE *)(a1 + 52);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F30F468(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  char *v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  unint64_t v62;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_95;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v22);
          goto LABEL_60;
        case 2u:
          *(_BYTE *)(a1 + 52) |= 4u;
          v23 = *((_QWORD *)this + 1);
          v24 = *((_QWORD *)this + 2);
          v25 = *(_QWORD *)this;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            do
            {
              v29 = v23 + 1;
              *((_QWORD *)this + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                goto LABEL_84;
              v26 += 7;
              v23 = v29;
              v16 = v27++ > 8;
            }
            while (!v16);
LABEL_70:
            LODWORD(v28) = 0;
            goto LABEL_84;
          }
          v47 = 0;
          v48 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v49 = v23 + 1;
              v50 = *(_BYTE *)(v25 + v23);
              *((_QWORD *)this + 1) = v49;
              v28 |= (unint64_t)(v50 & 0x7F) << v47;
              if (v50 < 0)
              {
                v47 += 7;
                v23 = v49;
                v16 = v48++ > 8;
                if (v16)
                  goto LABEL_70;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v28) = 0;
            }
            break;
          }
LABEL_84:
          *(_DWORD *)(a1 + 48) = v28;
          goto LABEL_96;
        case 3u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v31 = *((_QWORD *)this + 1);
            v32 = *((_QWORD *)this + 2);
            while (v31 < v32 && !*((_BYTE *)this + 24))
            {
              v34 = *(char **)(a1 + 16);
              v33 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v34 >= v33)
              {
                v36 = (char *)*v8;
                v37 = (v34 - (_BYTE *)*v8) >> 2;
                v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 62)
                  goto LABEL_107;
                v39 = v33 - (_QWORD)v36;
                if (v39 >> 1 > v38)
                  v38 = v39 >> 1;
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
                  v40 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v40 = v38;
                if (v40)
                {
                  v41 = (char *)sub_18F26FB8C(v9, v40);
                  v36 = *(char **)(a1 + 8);
                  v34 = *(char **)(a1 + 16);
                }
                else
                {
                  v41 = 0;
                }
                v42 = &v41[4 * v37];
                *(_DWORD *)v42 = 0;
                v35 = v42 + 4;
                while (v34 != v36)
                {
                  v43 = *((_DWORD *)v34 - 1);
                  v34 -= 4;
                  *((_DWORD *)v42 - 1) = v43;
                  v42 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v42;
                *(_QWORD *)(a1 + 16) = v35;
                *(_QWORD *)(a1 + 24) = &v41[4 * v40];
                if (v36)
                  operator delete(v36);
              }
              else
              {
                *(_DWORD *)v34 = 0;
                v35 = v34 + 4;
              }
              *(_QWORD *)(a1 + 16) = v35;
              v44 = *((_QWORD *)this + 1);
              if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v35 - 1) = *(_DWORD *)(*(_QWORD *)this + v44);
              v32 = *((_QWORD *)this + 2);
              v31 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v31;
            }
            PB::Reader::recallMark();
          }
          else
          {
            v52 = *(char **)(a1 + 16);
            v51 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v52 >= v51)
            {
              v54 = (char *)*v8;
              v55 = (v52 - (_BYTE *)*v8) >> 2;
              v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 62)
LABEL_107:
                sub_18F26F8C0();
              v57 = v51 - (_QWORD)v54;
              if (v57 >> 1 > v56)
                v56 = v57 >> 1;
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
                v58 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v58 = v56;
              if (v58)
              {
                v59 = (char *)sub_18F26FB8C(v9, v58);
                v54 = *(char **)(a1 + 8);
                v52 = *(char **)(a1 + 16);
              }
              else
              {
                v59 = 0;
              }
              v60 = &v59[4 * v55];
              *(_DWORD *)v60 = 0;
              v53 = v60 + 4;
              while (v52 != v54)
              {
                v61 = *((_DWORD *)v52 - 1);
                v52 -= 4;
                *((_DWORD *)v60 - 1) = v61;
                v60 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v60;
              *(_QWORD *)(a1 + 16) = v53;
              *(_QWORD *)(a1 + 24) = &v59[4 * v58];
              if (v54)
                operator delete(v54);
            }
            else
            {
              *(_DWORD *)v52 = 0;
              v53 = v52 + 4;
            }
            *(_QWORD *)(a1 + 16) = v53;
            v62 = *((_QWORD *)this + 1);
            if (v62 <= 0xFFFFFFFFFFFFFFFBLL && v62 + 4 <= *((_QWORD *)this + 2))
            {
              *(v53 - 1) = *(_DWORD *)(*(_QWORD *)this + v62);
              v46 = *((_QWORD *)this + 1) + 4;
LABEL_61:
              *((_QWORD *)this + 1) = v46;
            }
            else
            {
LABEL_95:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_96:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 52) |= 2u;
          v45 = *((_QWORD *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((_QWORD *)this + 2))
            goto LABEL_95;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v45);
LABEL_60:
          v46 = *((_QWORD *)this + 1) + 8;
          goto LABEL_61;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_96;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F30F958(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 52);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 52);
  }
  if ((v4 & 4) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40));
  return result;
}

uint64_t sub_18F30F9F4(uint64_t result)
{
  *(_QWORD *)result = &off_1E294CCE0;
  *(_DWORD *)(result + 108) = 0;
  return result;
}

void sub_18F30FA0C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F30FA30(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "pitchMean", *(float *)(a1 + 24));
    v5 = *(_DWORD *)(a1 + 108);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "pitchStd", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "rollMeanAbs", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "rollStd", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpXYHigh", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpXYPed", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpZHigh", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpZPed", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "rotRateInerXYMean", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "rotRateInerXYStd", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "rotRateInerZMean", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "rotRateInerZStd", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpXYHigh", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpXYPed", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpZHigh", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpZPed", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "userAccelInerXYMean", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "userAccelInerXYStd", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
LABEL_47:
    PB::TextFormatter::format(this, "userAccelInerZStd", *(float *)(a1 + 100));
    if ((*(_DWORD *)(a1 + 108) & 0x400000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_24;
  }
LABEL_46:
  PB::TextFormatter::format(this, "userAccelInerZMean", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200000) != 0)
    goto LABEL_47;
LABEL_23:
  if ((v5 & 0x400000) != 0)
LABEL_24:
    PB::TextFormatter::format(this, "yawStd", *(float *)(a1 + 104));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F30FD40(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 108) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_88;
        case 2u:
          *(_DWORD *)(a1 + 108) |= 0x40000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 3u:
          *(_DWORD *)(a1 + 108) |= 0x100000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 4u:
          *(_DWORD *)(a1 + 108) |= 0x80000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 5u:
          *(_DWORD *)(a1 + 108) |= 0x200000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 6u:
          *(_DWORD *)(a1 + 108) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 7u:
          *(_DWORD *)(a1 + 108) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 8u:
          *(_DWORD *)(a1 + 108) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 9u:
          *(_DWORD *)(a1 + 108) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0xAu:
          *(_DWORD *)(a1 + 108) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0xBu:
          *(_DWORD *)(a1 + 108) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0xCu:
          *(_DWORD *)(a1 + 108) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0xDu:
          *(_DWORD *)(a1 + 108) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0xEu:
          *(_DWORD *)(a1 + 108) |= 0x400000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0xFu:
          *(_DWORD *)(a1 + 108) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x10u:
          *(_DWORD *)(a1 + 108) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x11u:
          *(_DWORD *)(a1 + 108) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x12u:
          *(_DWORD *)(a1 + 108) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x13u:
          *(_DWORD *)(a1 + 108) |= 0x8000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x14u:
          *(_DWORD *)(a1 + 108) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x15u:
          *(_DWORD *)(a1 + 108) |= 0x20000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_95;
        case 0x16u:
          *(_DWORD *)(a1 + 108) |= 0x10000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_95:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_96;
        case 0x17u:
          *(_DWORD *)(a1 + 108) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_93:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_88:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_96:
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F3103CC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 108);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_DWORD *)(v3 + 108);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 0x100000) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200000) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20) == 0)
  {
LABEL_14:
    if ((v4 & 0x400000) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400000) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  if ((*(_DWORD *)(v3 + 108) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_18F310674(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E790;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F31068C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3106B0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "radius", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F310718(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          goto LABEL_28;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
        v2 = *((_QWORD *)this + 1) + 4;
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_33;
        }
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
        v2 = *((_QWORD *)this + 1) + 8;
      }
      *((_QWORD *)this + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_18F3108F8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16));
  return result;
}

uint64_t sub_18F310950(uint64_t result)
{
  *(_QWORD *)result = &off_1E294D4C0;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_18F310968(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31098C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(this, "didExceedRadius");
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "fenceID");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "positionRefX", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "positionRefY", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "positionRefZ", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "positionUncX", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "positionUncY", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "positionUncZ", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "positionX", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "positionY", *(float *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_WORD *)(a1 + 68) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(this, "positionZ", *(float *)(a1 + 60));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 1) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 2) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F310B5C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_50;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 3u:
              *(_WORD *)(a1 + 68) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 4u:
              *(_WORD *)(a1 + 68) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 8u:
              *(_WORD *)(a1 + 68) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 64) = v22;
              goto LABEL_84;
            case 9u:
              *(_WORD *)(a1 + 68) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_50:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_78;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 0xCu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_77:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_78:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_59:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_84;
            case 0xDu:
              *(_WORD *)(a1 + 68) |= 4u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_83;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_82:
                    v2 = v31 + 1;
                    goto LABEL_83;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_82;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_83;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_83:
              *(_DWORD *)(a1 + 24) = v27;
LABEL_84:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_84;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F311078(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 68);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(result + 68) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  if ((*(_WORD *)(v3 + 68) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

void sub_18F31120C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F311230(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "type");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F311298(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F311524(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

uint64_t sub_18F31157C(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950EB8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_18F311594(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2950EB8;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_18F3115D4(PB::Base *a1)
{
  sub_18F311594(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3115F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
    PB::TextFormatter::format(this, "isPedestrian");
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "pedestrianClassProbability", v7);
  }
  v8 = *(_BYTE *)(a1 + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
    v8 = *(_BYTE *)(a1 + 52);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F3116B8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_81;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v22);
          goto LABEL_55;
        case 2u:
          *(_BYTE *)(a1 + 52) |= 4u;
          v23 = *((_QWORD *)this + 1);
          if (v23 >= *((_QWORD *)this + 2))
          {
            v26 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v24 = v23 + 1;
            v25 = *(unsigned __int8 *)(*(_QWORD *)this + v23);
            *((_QWORD *)this + 1) = v24;
            v26 = v25 != 0;
          }
          *(_BYTE *)(a1 + 48) = v26;
          goto LABEL_82;
        case 3u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v27 = *((_QWORD *)this + 1);
            v28 = *((_QWORD *)this + 2);
            while (v27 < v28 && !*((_BYTE *)this + 24))
            {
              v30 = *(char **)(a1 + 16);
              v29 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v30 >= v29)
              {
                v32 = (char *)*v8;
                v33 = (v30 - (_BYTE *)*v8) >> 2;
                v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 62)
                  goto LABEL_91;
                v35 = v29 - (_QWORD)v32;
                if (v35 >> 1 > v34)
                  v34 = v35 >> 1;
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                  v36 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v36 = v34;
                if (v36)
                {
                  v37 = (char *)sub_18F26FB8C(v9, v36);
                  v32 = *(char **)(a1 + 8);
                  v30 = *(char **)(a1 + 16);
                }
                else
                {
                  v37 = 0;
                }
                v38 = &v37[4 * v33];
                *(_DWORD *)v38 = 0;
                v31 = v38 + 4;
                while (v30 != v32)
                {
                  v39 = *((_DWORD *)v30 - 1);
                  v30 -= 4;
                  *((_DWORD *)v38 - 1) = v39;
                  v38 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v38;
                *(_QWORD *)(a1 + 16) = v31;
                *(_QWORD *)(a1 + 24) = &v37[4 * v36];
                if (v32)
                  operator delete(v32);
              }
              else
              {
                *(_DWORD *)v30 = 0;
                v31 = v30 + 4;
              }
              *(_QWORD *)(a1 + 16) = v31;
              v40 = *((_QWORD *)this + 1);
              if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v31 - 1) = *(_DWORD *)(*(_QWORD *)this + v40);
              v28 = *((_QWORD *)this + 2);
              v27 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v27;
            }
            PB::Reader::recallMark();
          }
          else
          {
            v44 = *(char **)(a1 + 16);
            v43 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v8;
              v47 = (v44 - (_BYTE *)*v8) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
LABEL_91:
                sub_18F26F8C0();
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_18F26FB8C(v9, v50);
                v46 = *(char **)(a1 + 8);
                v44 = *(char **)(a1 + 16);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v52;
              *(_QWORD *)(a1 + 16) = v45;
              *(_QWORD *)(a1 + 24) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *(_QWORD *)(a1 + 16) = v45;
            v54 = *((_QWORD *)this + 1);
            if (v54 <= 0xFFFFFFFFFFFFFFFBLL && v54 + 4 <= *((_QWORD *)this + 2))
            {
              *(v45 - 1) = *(_DWORD *)(*(_QWORD *)this + v54);
              v42 = *((_QWORD *)this + 1) + 4;
LABEL_56:
              *((_QWORD *)this + 1) = v42;
            }
            else
            {
LABEL_81:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_82:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 52) |= 2u;
          v41 = *((_QWORD *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((_QWORD *)this + 2))
            goto LABEL_81;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v41);
LABEL_55:
          v42 = *((_QWORD *)this + 1) + 8;
          goto LABEL_56;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_82;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F311B08(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 52);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 52);
  }
  if ((v4 & 4) != 0)
    result = PB::Writer::write(this);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40));
  return result;
}

uint64_t sub_18F311BA4(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950C88;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_18F311BBC(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2950C88;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_18F311BFC(PB::Base *a1)
{
  sub_18F311BBC(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F311C20(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
    PB::TextFormatter::format(this, "placement");
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "placementProbability", v7);
  }
  v8 = *(_BYTE *)(a1 + 52);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
    v8 = *(_BYTE *)(a1 + 52);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F311CE0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  char *v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  unint64_t v62;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_95;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v22);
          goto LABEL_60;
        case 2u:
          *(_BYTE *)(a1 + 52) |= 4u;
          v23 = *((_QWORD *)this + 1);
          v24 = *((_QWORD *)this + 2);
          v25 = *(_QWORD *)this;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            do
            {
              v29 = v23 + 1;
              *((_QWORD *)this + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                goto LABEL_84;
              v26 += 7;
              v23 = v29;
              v16 = v27++ > 8;
            }
            while (!v16);
LABEL_70:
            LODWORD(v28) = 0;
            goto LABEL_84;
          }
          v47 = 0;
          v48 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v49 = v23 + 1;
              v50 = *(_BYTE *)(v25 + v23);
              *((_QWORD *)this + 1) = v49;
              v28 |= (unint64_t)(v50 & 0x7F) << v47;
              if (v50 < 0)
              {
                v47 += 7;
                v23 = v49;
                v16 = v48++ > 8;
                if (v16)
                  goto LABEL_70;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v28) = 0;
            }
            break;
          }
LABEL_84:
          *(_DWORD *)(a1 + 48) = v28;
          goto LABEL_96;
        case 3u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v31 = *((_QWORD *)this + 1);
            v32 = *((_QWORD *)this + 2);
            while (v31 < v32 && !*((_BYTE *)this + 24))
            {
              v34 = *(char **)(a1 + 16);
              v33 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v34 >= v33)
              {
                v36 = (char *)*v8;
                v37 = (v34 - (_BYTE *)*v8) >> 2;
                v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 62)
                  goto LABEL_107;
                v39 = v33 - (_QWORD)v36;
                if (v39 >> 1 > v38)
                  v38 = v39 >> 1;
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
                  v40 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v40 = v38;
                if (v40)
                {
                  v41 = (char *)sub_18F26FB8C(v9, v40);
                  v36 = *(char **)(a1 + 8);
                  v34 = *(char **)(a1 + 16);
                }
                else
                {
                  v41 = 0;
                }
                v42 = &v41[4 * v37];
                *(_DWORD *)v42 = 0;
                v35 = v42 + 4;
                while (v34 != v36)
                {
                  v43 = *((_DWORD *)v34 - 1);
                  v34 -= 4;
                  *((_DWORD *)v42 - 1) = v43;
                  v42 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v42;
                *(_QWORD *)(a1 + 16) = v35;
                *(_QWORD *)(a1 + 24) = &v41[4 * v40];
                if (v36)
                  operator delete(v36);
              }
              else
              {
                *(_DWORD *)v34 = 0;
                v35 = v34 + 4;
              }
              *(_QWORD *)(a1 + 16) = v35;
              v44 = *((_QWORD *)this + 1);
              if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v35 - 1) = *(_DWORD *)(*(_QWORD *)this + v44);
              v32 = *((_QWORD *)this + 2);
              v31 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v31;
            }
            PB::Reader::recallMark();
          }
          else
          {
            v52 = *(char **)(a1 + 16);
            v51 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v52 >= v51)
            {
              v54 = (char *)*v8;
              v55 = (v52 - (_BYTE *)*v8) >> 2;
              v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 62)
LABEL_107:
                sub_18F26F8C0();
              v57 = v51 - (_QWORD)v54;
              if (v57 >> 1 > v56)
                v56 = v57 >> 1;
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
                v58 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v58 = v56;
              if (v58)
              {
                v59 = (char *)sub_18F26FB8C(v9, v58);
                v54 = *(char **)(a1 + 8);
                v52 = *(char **)(a1 + 16);
              }
              else
              {
                v59 = 0;
              }
              v60 = &v59[4 * v55];
              *(_DWORD *)v60 = 0;
              v53 = v60 + 4;
              while (v52 != v54)
              {
                v61 = *((_DWORD *)v52 - 1);
                v52 -= 4;
                *((_DWORD *)v60 - 1) = v61;
                v60 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v60;
              *(_QWORD *)(a1 + 16) = v53;
              *(_QWORD *)(a1 + 24) = &v59[4 * v58];
              if (v54)
                operator delete(v54);
            }
            else
            {
              *(_DWORD *)v52 = 0;
              v53 = v52 + 4;
            }
            *(_QWORD *)(a1 + 16) = v53;
            v62 = *((_QWORD *)this + 1);
            if (v62 <= 0xFFFFFFFFFFFFFFFBLL && v62 + 4 <= *((_QWORD *)this + 2))
            {
              *(v53 - 1) = *(_DWORD *)(*(_QWORD *)this + v62);
              v46 = *((_QWORD *)this + 1) + 4;
LABEL_61:
              *((_QWORD *)this + 1) = v46;
            }
            else
            {
LABEL_95:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_96:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 52) |= 2u;
          v45 = *((_QWORD *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((_QWORD *)this + 2))
            goto LABEL_95;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v45);
LABEL_60:
          v46 = *((_QWORD *)this + 1) + 8;
          goto LABEL_61;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_96;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F3121D0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 52);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 52);
  }
  if ((v4 & 4) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  if ((*(_BYTE *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40));
  return result;
}

uint64_t sub_18F31226C(uint64_t result)
{
  *(_QWORD *)result = &off_1E294FEF8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F312284(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3122A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "speed", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "speedUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F312358(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F3125BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_18F312650(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950CC0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F312668(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31268C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "speed", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "speedUnc", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F31273C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_33;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_36;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_38:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_39:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F3129A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_18F312A34(uint64_t result)
{
  *(_QWORD *)result = &off_1E29506A0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_18F312A4C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F312A70(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "velocityUncX", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "velocityUncY", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "velocityUncZ", *(float *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
LABEL_16:
    PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 48) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
LABEL_17:
    PB::TextFormatter::format(this, "velocityZ", *(float *)(a1 + 44));
    return PB::TextFormatter::endObject(this);
  }
LABEL_15:
  PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 36));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x40) != 0)
    goto LABEL_16;
LABEL_8:
  if (v5 < 0)
    goto LABEL_17;
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F312BA0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 48) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 2u:
          *(_BYTE *)(a1 + 48) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_50;
        case 3u:
          *(_BYTE *)(a1 + 48) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_50;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_50;
        case 5u:
          *(_BYTE *)(a1 + 48) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_50;
        case 6u:
          *(_BYTE *)(a1 + 48) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_50;
        case 7u:
          *(_BYTE *)(a1 + 48) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_48;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_50:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_51;
        case 8u:
          *(_BYTE *)(a1 + 48) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_48:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_43:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_51:
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F312EE4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 48);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 48) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  if ((*(_BYTE *)(v3 + 48) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

_QWORD *sub_18F312FE8(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E29444A8;
  return result;
}

void sub_18F312FFC(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E29444A8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

void sub_18F31305C(PB::Base *a1)
{
  sub_18F312FFC(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F313080(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "signalEnvironment");
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F3130F0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v20 = operator new();
        sub_18F2CC0CC((_QWORD *)v20);
        v22 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v20 = *(_QWORD *)(a1 + 8);
        }
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_31;
        }
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E294E1A8;
        *(_DWORD *)(v20 + 100) = 0;
        v21 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 16);
        }
      }
      if (!PB::Reader::placeMark()
        || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
      {
        return 0;
      }
      PB::Reader::recallMark();
LABEL_31:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_18F31330C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;

  v3 = result;
  v4 = *(const PB::Base **)(result + 16);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    return PB::Writer::writeSubmessage(this, v5);
  return result;
}

uint64_t sub_18F31335C(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944860;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_18F313374(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2944860;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F3133B8(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2944860;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F313410(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "course", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_15:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 32));
  if ((*(_BYTE *)(a1 + 64) & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 40));
LABEL_7:
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "signalEnvironment");
  if ((*(_BYTE *)(a1 + 64) & 0x20) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F31351C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      if (v10++ > 8)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 64) |= 0x20u;
        v20 = *((_QWORD *)this + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
          goto LABEL_41;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v20);
        goto LABEL_48;
      case 2u:
        *(_BYTE *)(a1 + 64) |= 8u;
        v22 = *((_QWORD *)this + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
          goto LABEL_41;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v22);
        goto LABEL_48;
      case 3u:
        *(_BYTE *)(a1 + 64) |= 0x10u;
        v23 = *((_QWORD *)this + 1);
        if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((_QWORD *)this + 2))
          goto LABEL_41;
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v23);
        goto LABEL_48;
      case 4u:
        *(_BYTE *)(a1 + 64) |= 4u;
        v24 = *((_QWORD *)this + 1);
        if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
          goto LABEL_41;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v24);
        goto LABEL_48;
      case 5u:
        *(_BYTE *)(a1 + 64) |= 1u;
        v25 = *((_QWORD *)this + 1);
        if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
          goto LABEL_41;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v25);
        goto LABEL_48;
      case 6u:
        *(_BYTE *)(a1 + 64) |= 2u;
        v26 = *((_QWORD *)this + 1);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v26);
LABEL_48:
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
LABEL_41:
          *((_BYTE *)this + 24) = 1;
        }
        goto LABEL_49;
      case 7u:
        v27 = (_QWORD *)operator new();
        sub_18F2CC0CC(v27);
        v28 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v27;
        if (v28)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v27 = *(_QWORD **)(a1 + 48);
        }
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(_QWORD *, PB::Reader *))(*v27 + 16))(v27, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_49:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          continue;
        }
        return 0;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_49;
    }
  }
}

uint64_t sub_18F313870(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;

  v3 = result;
  v4 = *(_BYTE *)(result + 64);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 56));
    v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 64) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 64) & 2) != 0)
LABEL_7:
    result = PB::Writer::write(this, *(double *)(v3 + 16));
LABEL_8:
  v5 = *(const PB::Base **)(v3 + 48);
  if (v5)
    return PB::Writer::writeSubmessage(this, v5);
  return result;
}

_QWORD *sub_18F313954(_QWORD *result)
{
  *result = &off_1E2944710;
  result[1] = 0;
  return result;
}

void sub_18F313964(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2944710;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F3139A4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2944710;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3139F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F313A48(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E2944860;
        *(_QWORD *)(v20 + 48) = 0;
        *(_DWORD *)(v20 + 64) = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F313C20(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F313C3C(_QWORD *result)
{
  *result = &off_1E2944898;
  result[1] = 0;
  return result;
}

void sub_18F313C4C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2944898;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F313C8C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2944898;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F313CE0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F313D30(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E2944860;
        *(_QWORD *)(v20 + 48) = 0;
        *(_DWORD *)(v20 + 64) = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F313F08(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_18F313F24(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E250;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_18F313F3C(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E294E250;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_18F313F7C(PB::Base *a1)
{
  sub_18F313F3C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F313FA0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "velocity", v7);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F314020(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    do
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v17 = 0;
        v18 = 0;
        v13 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v10 + v2);
          *((_QWORD *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0)
            goto LABEL_21;
          v17 += 7;
          v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            v13 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 2)
      {
        if ((v13 & 7) != 2)
        {
          v38 = *(char **)(a1 + 16);
          v37 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v38 >= v37)
          {
            v40 = (char *)*v8;
            v41 = (v38 - (_BYTE *)*v8) >> 3;
            v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 61)
LABEL_84:
              sub_18F26F8C0();
            v43 = v37 - (_QWORD)v40;
            if (v43 >> 2 > v42)
              v42 = v43 >> 2;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
              v44 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v44 = v42;
            if (v44)
            {
              v45 = (char *)sub_18F26F8D4(v9, v44);
              v40 = *(char **)(a1 + 8);
              v38 = *(char **)(a1 + 16);
            }
            else
            {
              v45 = 0;
            }
            v46 = &v45[8 * v41];
            *(_QWORD *)v46 = 0;
            v39 = v46 + 8;
            while (v38 != v40)
            {
              v47 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *((_QWORD *)v46 - 1) = v47;
              v46 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v46;
            *(_QWORD *)(a1 + 16) = v39;
            *(_QWORD *)(a1 + 24) = &v45[8 * v44];
            if (v40)
              operator delete(v40);
          }
          else
          {
            *(_QWORD *)v38 = 0;
            v39 = v38 + 8;
          }
          *(_QWORD *)(a1 + 16) = v39;
          v48 = *((_QWORD *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((_QWORD *)this + 2))
          {
LABEL_73:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_76;
          }
          *(v39 - 1) = *(_QWORD *)(*(_QWORD *)this + v48);
          goto LABEL_75;
        }
        if ((PB::Reader::placeMark() & 1) != 0)
          return 0;
        v23 = *((_QWORD *)this + 1);
        v24 = *((_QWORD *)this + 2);
        while (v23 < v24 && !*((_BYTE *)this + 24))
        {
          v26 = *(char **)(a1 + 16);
          v25 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v26 >= v25)
          {
            v28 = (char *)*v8;
            v29 = (v26 - (_BYTE *)*v8) >> 3;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 61)
              goto LABEL_84;
            v31 = v25 - (_QWORD)v28;
            if (v31 >> 2 > v30)
              v30 = v31 >> 2;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
              v32 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v32 = v30;
            if (v32)
            {
              v33 = (char *)sub_18F26F8D4(v9, v32);
              v28 = *(char **)(a1 + 8);
              v26 = *(char **)(a1 + 16);
            }
            else
            {
              v33 = 0;
            }
            v34 = &v33[8 * v29];
            *(_QWORD *)v34 = 0;
            v27 = v34 + 8;
            while (v26 != v28)
            {
              v35 = *((_QWORD *)v26 - 1);
              v26 -= 8;
              *((_QWORD *)v34 - 1) = v35;
              v34 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v34;
            *(_QWORD *)(a1 + 16) = v27;
            *(_QWORD *)(a1 + 24) = &v33[8 * v32];
            if (v28)
              operator delete(v28);
          }
          else
          {
            *(_QWORD *)v26 = 0;
            v27 = v26 + 8;
          }
          *(_QWORD *)(a1 + 16) = v27;
          v36 = *((_QWORD *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFF7 || v36 + 8 > *((_QWORD *)this + 2))
          {
            *((_BYTE *)this + 24) = 1;
            break;
          }
          *(v27 - 1) = *(_QWORD *)(*(_QWORD *)this + v36);
          v24 = *((_QWORD *)this + 2);
          v23 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v23;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if ((v13 >> 3) == 1)
        {
          *(_BYTE *)(a1 + 40) |= 1u;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_73;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v22);
LABEL_75:
          *((_QWORD *)this + 1) += 8;
          goto LABEL_76;
        }
        if ((PB::Reader::skip(this) & 1) == 0)
          return 0;
      }
LABEL_76:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_18F3143D0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;

  v3 = result;
  if ((*(_BYTE *)(result + 40) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 32));
  v5 = *(double **)(v3 + 8);
  v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    v6 = *v5++;
    result = PB::Writer::write(this, v6);
  }
  return result;
}

double sub_18F314430(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294D4F8;
  *(_DWORD *)(a1 + 124) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

void sub_18F31445C(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E294D4F8;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_18F3144BC(PB::Base *a1)
{
  sub_18F31445C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3144E0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  __int16 v12;
  float *v13;
  float *v14;
  float v15;
  __int16 v16;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 124);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "distance", *(float *)(a1 + 88));
    v5 = *(_WORD *)(a1 + 124);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "focalLength", *(float *)(a1 + 92));
  v5 = *(_WORD *)(a1 + 124);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_25:
  PB::TextFormatter::format(this, "height", *(float *)(a1 + 96));
  if ((*(_WORD *)(a1 + 124) & 0x10) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "orientation");
LABEL_6:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "origin", v8);
  }
  if ((*(_WORD *)(a1 + 124) & 0x20) != 0)
    PB::TextFormatter::format(this, "pitch", *(float *)(a1 + 104));
  v9 = *(float **)(a1 + 32);
  v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "principlePoint", v11);
  }
  v12 = *(_WORD *)(a1 + 124);
  if ((v12 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "roll", *(float *)(a1 + 108));
    v12 = *(_WORD *)(a1 + 124);
  }
  if ((v12 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 80));
  v13 = *(float **)(a1 + 56);
  v14 = *(float **)(a1 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(this, "transform", v15);
  }
  v16 = *(_WORD *)(a1 + 124);
  if ((v16 & 0x80) == 0)
  {
    if ((*(_WORD *)(a1 + 124) & 0x100) == 0)
      goto LABEL_20;
LABEL_28:
    PB::TextFormatter::format(this, "width", *(float *)(a1 + 116));
    if ((*(_WORD *)(a1 + 124) & 0x200) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_21;
  }
  PB::TextFormatter::format(this, "type");
  v16 = *(_WORD *)(a1 + 124);
  if ((v16 & 0x100) != 0)
    goto LABEL_28;
LABEL_20:
  if ((v16 & 0x200) != 0)
LABEL_21:
    PB::TextFormatter::format(this, "yaw", *(float *)(a1 + 120));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F3146D8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _DWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  _DWORD *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  _DWORD *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  int v91;
  unint64_t v92;
  char v93;
  unsigned int v94;
  unint64_t v95;
  char v96;
  char v97;
  unsigned int v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  char *v102;
  _DWORD *v103;
  unint64_t v104;
  char *v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  int v127;
  char *v128;
  int v129;
  char *v130;
  int v131;
  unint64_t v132;
  uint64_t v135;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 56);
    v135 = a1 + 72;
    v9 = (void **)(a1 + 32);
    v10 = a1 + 48;
    v11 = (void **)(a1 + 8);
    v12 = a1 + 24;
    while (1)
    {
      v13 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v18 = *(_BYTE *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v2 = v17;
        v19 = v15++ > 8;
        if (v19)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v16 & 7;
      if (v25 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 124) |= 1u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v26);
          v27 = *((_QWORD *)this + 1) + 8;
          goto LABEL_215;
        case 2u:
          *(_WORD *)(a1 + 124) |= 0x40u;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v28);
          goto LABEL_214;
        case 3u:
          *(_WORD *)(a1 + 124) |= 0x20u;
          v29 = *((_QWORD *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v29);
          goto LABEL_214;
        case 4u:
          *(_WORD *)(a1 + 124) |= 0x200u;
          v30 = *((_QWORD *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v30);
          goto LABEL_214;
        case 5u:
          *(_WORD *)(a1 + 124) |= 2u;
          v31 = *((_QWORD *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v31);
          goto LABEL_214;
        case 6u:
          *(_WORD *)(a1 + 124) |= 0x80u;
          v32 = *((_QWORD *)this + 1);
          v33 = *((_QWORD *)this + 2);
          v34 = *(_QWORD *)this;
          if (v32 <= 0xFFFFFFFFFFFFFFF5 && v32 + 10 <= v33)
          {
            v35 = 0;
            v36 = 0;
            v37 = 0;
            do
            {
              v38 = v32 + 1;
              *((_QWORD *)this + 1) = v32 + 1;
              v39 = *(_BYTE *)(v34 + v32);
              v37 |= (unint64_t)(v39 & 0x7F) << v35;
              if ((v39 & 0x80) == 0)
                goto LABEL_185;
              v35 += 7;
              v32 = v38;
              v19 = v36++ > 8;
            }
            while (!v19);
LABEL_141:
            LODWORD(v37) = 0;
            goto LABEL_185;
          }
          v93 = 0;
          v94 = 0;
          v37 = 0;
          if (v33 <= v32)
            v33 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v33 == v32)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v95 = v32 + 1;
              v96 = *(_BYTE *)(v34 + v32);
              *((_QWORD *)this + 1) = v95;
              v37 |= (unint64_t)(v96 & 0x7F) << v93;
              if (v96 < 0)
              {
                v93 += 7;
                v32 = v95;
                v19 = v94++ > 8;
                if (v19)
                  goto LABEL_141;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v37) = 0;
            }
            break;
          }
LABEL_185:
          *(_DWORD *)(a1 + 112) = v37;
          goto LABEL_216;
        case 7u:
          *(_WORD *)(a1 + 124) |= 0x10u;
          v40 = *((_QWORD *)this + 1);
          v41 = *((_QWORD *)this + 2);
          v42 = *(_QWORD *)this;
          if (v40 <= 0xFFFFFFFFFFFFFFF5 && v40 + 10 <= v41)
          {
            v43 = 0;
            v44 = 0;
            v45 = 0;
            do
            {
              v46 = v40 + 1;
              *((_QWORD *)this + 1) = v40 + 1;
              v47 = *(_BYTE *)(v42 + v40);
              v45 |= (unint64_t)(v47 & 0x7F) << v43;
              if ((v47 & 0x80) == 0)
                goto LABEL_188;
              v43 += 7;
              v40 = v46;
              v19 = v44++ > 8;
            }
            while (!v19);
LABEL_148:
            LODWORD(v45) = 0;
            goto LABEL_188;
          }
          v97 = 0;
          v98 = 0;
          v45 = 0;
          if (v41 <= v40)
            v41 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v41 == v40)
            {
              LODWORD(v45) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v99 = v40 + 1;
              v100 = *(_BYTE *)(v42 + v40);
              *((_QWORD *)this + 1) = v99;
              v45 |= (unint64_t)(v100 & 0x7F) << v97;
              if (v100 < 0)
              {
                v97 += 7;
                v40 = v99;
                v19 = v98++ > 8;
                if (v19)
                  goto LABEL_148;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v45) = 0;
            }
            break;
          }
LABEL_188:
          *(_DWORD *)(a1 + 100) = v45;
          goto LABEL_216;
        case 8u:
          if (v25 != 2)
          {
            v102 = *(char **)(a1 + 16);
            v101 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v102 >= v101)
            {
              v108 = (char *)*v11;
              v109 = (v102 - (_BYTE *)*v11) >> 2;
              v110 = v109 + 1;
              if ((unint64_t)(v109 + 1) >> 62)
LABEL_226:
                sub_18F26F8C0();
              v111 = v101 - (_QWORD)v108;
              if (v111 >> 1 > v110)
                v110 = v111 >> 1;
              if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL)
                v112 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v112 = v110;
              if (v112)
              {
                v113 = (char *)sub_18F26FB8C(v12, v112);
                v108 = *(char **)(a1 + 8);
                v102 = *(char **)(a1 + 16);
              }
              else
              {
                v113 = 0;
              }
              v126 = &v113[4 * v109];
              *(_DWORD *)v126 = 0;
              v103 = v126 + 4;
              while (v102 != v108)
              {
                v127 = *((_DWORD *)v102 - 1);
                v102 -= 4;
                *((_DWORD *)v126 - 1) = v127;
                v126 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v126;
              *(_QWORD *)(a1 + 16) = v103;
              *(_QWORD *)(a1 + 24) = &v113[4 * v112];
              if (v108)
                operator delete(v108);
            }
            else
            {
              *(_DWORD *)v102 = 0;
              v103 = v102 + 4;
            }
            *(_QWORD *)(a1 + 16) = v103;
            goto LABEL_210;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v48 = *((_QWORD *)this + 1);
          v49 = *((_QWORD *)this + 2);
          while (v48 < v49 && !*((_BYTE *)this + 24))
          {
            v51 = *(char **)(a1 + 16);
            v50 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v51 >= v50)
            {
              v53 = (char *)*v11;
              v54 = (v51 - (_BYTE *)*v11) >> 2;
              v55 = v54 + 1;
              if ((unint64_t)(v54 + 1) >> 62)
                goto LABEL_226;
              v56 = v50 - (_QWORD)v53;
              if (v56 >> 1 > v55)
                v55 = v56 >> 1;
              if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
                v57 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v57 = v55;
              if (v57)
              {
                v58 = (char *)sub_18F26FB8C(v12, v57);
                v53 = *(char **)(a1 + 8);
                v51 = *(char **)(a1 + 16);
              }
              else
              {
                v58 = 0;
              }
              v59 = &v58[4 * v54];
              *(_DWORD *)v59 = 0;
              v52 = v59 + 4;
              while (v51 != v53)
              {
                v60 = *((_DWORD *)v51 - 1);
                v51 -= 4;
                *((_DWORD *)v59 - 1) = v60;
                v59 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v59;
              *(_QWORD *)(a1 + 16) = v52;
              *(_QWORD *)(a1 + 24) = &v58[4 * v57];
              if (v53)
                operator delete(v53);
            }
            else
            {
              *(_DWORD *)v51 = 0;
              v52 = v51 + 4;
            }
            *(_QWORD *)(a1 + 16) = v52;
            v61 = *((_QWORD *)this + 1);
            if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)this + 2))
              goto LABEL_155;
            *(v52 - 1) = *(_DWORD *)(*(_QWORD *)this + v61);
            v49 = *((_QWORD *)this + 2);
            v48 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v48;
          }
          goto LABEL_156;
        case 9u:
          *(_WORD *)(a1 + 124) |= 8u;
          v62 = *((_QWORD *)this + 1);
          if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v62);
          goto LABEL_214;
        case 0xAu:
          *(_WORD *)(a1 + 124) |= 0x100u;
          v63 = *((_QWORD *)this + 1);
          if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v63);
          goto LABEL_214;
        case 0xBu:
          *(_WORD *)(a1 + 124) |= 4u;
          v64 = *((_QWORD *)this + 1);
          if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((_QWORD *)this + 2))
            goto LABEL_212;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v64);
          goto LABEL_214;
        case 0xCu:
          if (v25 != 2)
          {
            v105 = *(char **)(a1 + 40);
            v104 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v105 >= v104)
            {
              v114 = (char *)*v9;
              v115 = (v105 - (_BYTE *)*v9) >> 2;
              v116 = v115 + 1;
              if ((unint64_t)(v115 + 1) >> 62)
LABEL_227:
                sub_18F26F8C0();
              v117 = v104 - (_QWORD)v114;
              if (v117 >> 1 > v116)
                v116 = v117 >> 1;
              if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL)
                v118 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v118 = v116;
              if (v118)
              {
                v119 = (char *)sub_18F26FB8C(v10, v118);
                v114 = *(char **)(a1 + 32);
                v105 = *(char **)(a1 + 40);
              }
              else
              {
                v119 = 0;
              }
              v128 = &v119[4 * v115];
              *(_DWORD *)v128 = 0;
              v103 = v128 + 4;
              while (v105 != v114)
              {
                v129 = *((_DWORD *)v105 - 1);
                v105 -= 4;
                *((_DWORD *)v128 - 1) = v129;
                v128 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v128;
              *(_QWORD *)(a1 + 40) = v103;
              *(_QWORD *)(a1 + 48) = &v119[4 * v118];
              if (v114)
                operator delete(v114);
            }
            else
            {
              *(_DWORD *)v105 = 0;
              v103 = v105 + 4;
            }
            *(_QWORD *)(a1 + 40) = v103;
            goto LABEL_210;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v65 = *((_QWORD *)this + 1);
          v66 = *((_QWORD *)this + 2);
          while (v65 < v66 && !*((_BYTE *)this + 24))
          {
            v68 = *(char **)(a1 + 40);
            v67 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v68 >= v67)
            {
              v70 = (char *)*v9;
              v71 = (v68 - (_BYTE *)*v9) >> 2;
              v72 = v71 + 1;
              if ((unint64_t)(v71 + 1) >> 62)
                goto LABEL_227;
              v73 = v67 - (_QWORD)v70;
              if (v73 >> 1 > v72)
                v72 = v73 >> 1;
              if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
                v74 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v74 = v72;
              if (v74)
              {
                v75 = (char *)sub_18F26FB8C(v10, v74);
                v70 = *(char **)(a1 + 32);
                v68 = *(char **)(a1 + 40);
              }
              else
              {
                v75 = 0;
              }
              v76 = &v75[4 * v71];
              *(_DWORD *)v76 = 0;
              v69 = v76 + 4;
              while (v68 != v70)
              {
                v77 = *((_DWORD *)v68 - 1);
                v68 -= 4;
                *((_DWORD *)v76 - 1) = v77;
                v76 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v76;
              *(_QWORD *)(a1 + 40) = v69;
              *(_QWORD *)(a1 + 48) = &v75[4 * v74];
              if (v70)
                operator delete(v70);
            }
            else
            {
              *(_DWORD *)v68 = 0;
              v69 = v68 + 4;
            }
            *(_QWORD *)(a1 + 40) = v69;
            v78 = *((_QWORD *)this + 1);
            if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)this + 2))
              goto LABEL_155;
            *(v69 - 1) = *(_DWORD *)(*(_QWORD *)this + v78);
            v66 = *((_QWORD *)this + 2);
            v65 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v65;
          }
          goto LABEL_156;
        case 0xDu:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v79 = *((_QWORD *)this + 1);
            v80 = *((_QWORD *)this + 2);
            while (v79 < v80 && !*((_BYTE *)this + 24))
            {
              v82 = *(char **)(a1 + 64);
              v81 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v82 >= v81)
              {
                v84 = (char *)*v8;
                v85 = (v82 - (_BYTE *)*v8) >> 2;
                v86 = v85 + 1;
                if ((unint64_t)(v85 + 1) >> 62)
                  goto LABEL_228;
                v87 = v81 - (_QWORD)v84;
                if (v87 >> 1 > v86)
                  v86 = v87 >> 1;
                if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                  v88 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v88 = v86;
                if (v88)
                {
                  v89 = (char *)sub_18F26FB8C(v135, v88);
                  v84 = *(char **)(a1 + 56);
                  v82 = *(char **)(a1 + 64);
                }
                else
                {
                  v89 = 0;
                }
                v90 = &v89[4 * v85];
                *(_DWORD *)v90 = 0;
                v83 = v90 + 4;
                while (v82 != v84)
                {
                  v91 = *((_DWORD *)v82 - 1);
                  v82 -= 4;
                  *((_DWORD *)v90 - 1) = v91;
                  v90 -= 4;
                }
                *(_QWORD *)(a1 + 56) = v90;
                *(_QWORD *)(a1 + 64) = v83;
                *(_QWORD *)(a1 + 72) = &v89[4 * v88];
                if (v84)
                  operator delete(v84);
              }
              else
              {
                *(_DWORD *)v82 = 0;
                v83 = v82 + 4;
              }
              *(_QWORD *)(a1 + 64) = v83;
              v92 = *((_QWORD *)this + 1);
              if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((_QWORD *)this + 2))
              {
LABEL_155:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v83 - 1) = *(_DWORD *)(*(_QWORD *)this + v92);
              v80 = *((_QWORD *)this + 2);
              v79 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v79;
            }
LABEL_156:
            PB::Reader::recallMark();
          }
          else
          {
            v107 = *(char **)(a1 + 64);
            v106 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v107 >= v106)
            {
              v120 = (char *)*v8;
              v121 = (v107 - (_BYTE *)*v8) >> 2;
              v122 = v121 + 1;
              if ((unint64_t)(v121 + 1) >> 62)
LABEL_228:
                sub_18F26F8C0();
              v123 = v106 - (_QWORD)v120;
              if (v123 >> 1 > v122)
                v122 = v123 >> 1;
              if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
                v124 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v124 = v122;
              if (v124)
              {
                v125 = (char *)sub_18F26FB8C(v135, v124);
                v120 = *(char **)(a1 + 56);
                v107 = *(char **)(a1 + 64);
              }
              else
              {
                v125 = 0;
              }
              v130 = &v125[4 * v121];
              *(_DWORD *)v130 = 0;
              v103 = v130 + 4;
              while (v107 != v120)
              {
                v131 = *((_DWORD *)v107 - 1);
                v107 -= 4;
                *((_DWORD *)v130 - 1) = v131;
                v130 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v130;
              *(_QWORD *)(a1 + 64) = v103;
              *(_QWORD *)(a1 + 72) = &v125[4 * v124];
              if (v120)
                operator delete(v120);
            }
            else
            {
              *(_DWORD *)v107 = 0;
              v103 = v107 + 4;
            }
            *(_QWORD *)(a1 + 64) = v103;
LABEL_210:
            v132 = *((_QWORD *)this + 1);
            if (v132 <= 0xFFFFFFFFFFFFFFFBLL && v132 + 4 <= *((_QWORD *)this + 2))
            {
              *(v103 - 1) = *(_DWORD *)(*(_QWORD *)this + v132);
LABEL_214:
              v27 = *((_QWORD *)this + 1) + 4;
LABEL_215:
              *((_QWORD *)this + 1) = v27;
            }
            else
            {
LABEL_212:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_216:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_216;
      }
    }
    v20 = 0;
    v21 = 0;
    v16 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v22 = v2 + 1;
      v23 = *(_BYTE *)(v13 + v2);
      *((_QWORD *)this + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v16 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F315188(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;
  float *v9;
  float *v10;
  float v11;
  float *v12;
  float *v13;
  float v14;

  v3 = result;
  v4 = *(_WORD *)(result + 124);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 80));
    v4 = *(_WORD *)(v3 + 124);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
LABEL_28:
    result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 124) & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x80) != 0)
    goto LABEL_28;
LABEL_7:
  if ((v4 & 0x10) != 0)
LABEL_8:
    result = PB::Writer::writeVarInt(this);
LABEL_9:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 8) == 0)
  {
    if ((*(_WORD *)(v3 + 124) & 0x100) == 0)
      goto LABEL_14;
LABEL_31:
    result = PB::Writer::write(this, *(float *)(v3 + 116));
    if ((*(_WORD *)(v3 + 124) & 4) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 0x100) != 0)
    goto LABEL_31;
LABEL_14:
  if ((v8 & 4) != 0)
LABEL_15:
    result = PB::Writer::write(this, *(float *)(v3 + 92));
LABEL_16:
  v9 = *(float **)(v3 + 32);
  v10 = *(float **)(v3 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    result = PB::Writer::write(this, v11);
  }
  v13 = *(float **)(v3 + 56);
  v12 = *(float **)(v3 + 64);
  while (v13 != v12)
  {
    v14 = *v13++;
    result = PB::Writer::write(this, v14);
  }
  return result;
}

uint64_t sub_18F315328(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951430;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_18F315340(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F315364(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "batchedLocationFixType");
    v5 = *(_BYTE *)(a1 + 56);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 56) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "distOdom", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "distPed", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "isValid");
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "timeStop", *(double *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 56) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "timeStart", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 8) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x10) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "uncOdom", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F315474(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 56) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_58;
            case 2u:
              *(_BYTE *)(a1 + 56) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_58;
            case 3u:
              *(_BYTE *)(a1 + 56) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_58;
            case 4u:
              *(_BYTE *)(a1 + 56) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_58;
            case 5u:
              *(_BYTE *)(a1 + 56) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_58:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_38:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_64;
            case 6u:
              *(_BYTE *)(a1 + 56) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 52) = v22;
              goto LABEL_64;
            case 7u:
              *(_BYTE *)(a1 + 56) |= 0x20u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_63;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_62:
                    v2 = v31 + 1;
                    goto LABEL_63;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_62;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_63;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_63:
              *(_DWORD *)(a1 + 48) = v27;
LABEL_64:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_64;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F315838(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 56);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 56) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_14:
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 56) & 0x20) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F315920(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944BE0;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_18F315938(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31595C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "activeTime", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 116);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "currentPace", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "distance", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "duration", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "firstStepTime", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "gradeType");
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "isIndoor");
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "isMotionOverrideSet");
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "metsWR", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "rawDistance", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "steps");
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "stepsDuration", *(double *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x400) == 0)
      goto LABEL_16;
LABEL_33:
    PB::TextFormatter::format(this, "truthMetsStrollerCorrected", *(double *)(a1 + 88));
    if ((*(_WORD *)(a1 + 116) & 0x800) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_17;
  }
LABEL_32:
  PB::TextFormatter::format(this, "truthMetsGradeCorrected", *(double *)(a1 + 80));
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x400) != 0)
    goto LABEL_33;
LABEL_16:
  if ((v5 & 0x800) != 0)
LABEL_17:
    PB::TextFormatter::format(this, "verticalSpeed", *(double *)(a1 + 96));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F315B8C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 116) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 2u:
              *(_WORD *)(a1 + 116) |= 0x2000u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_102;
                  }
                  v39 = v21++;
                  v40 = *(_BYTE *)(v22 + v39);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_101:
                    v2 = v39 + 1;
                    goto LABEL_102;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_101;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_102;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_102:
              *(_DWORD *)(a1 + 108) = v25;
              goto LABEL_108;
            case 3u:
              *(_WORD *)(a1 + 116) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 4u:
              *(_WORD *)(a1 + 116) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 5u:
              *(_WORD *)(a1 + 116) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 6u:
              *(_WORD *)(a1 + 116) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 7u:
              *(_WORD *)(a1 + 116) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 8u:
              *(_WORD *)(a1 + 116) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 9u:
              *(_WORD *)(a1 + 116) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xAu:
              *(_WORD *)(a1 + 116) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xBu:
              *(_WORD *)(a1 + 116) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xCu:
              *(_WORD *)(a1 + 116) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_66;
              *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xDu:
              *(_WORD *)(a1 + 116) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_97:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_66:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_108;
            case 0xEu:
              *(_WORD *)(a1 + 116) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 113) = v28;
              goto LABEL_108;
            case 0xFu:
              *(_WORD *)(a1 + 116) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 112) = v30;
              goto LABEL_108;
            case 0x10u:
              *(_WORD *)(a1 + 116) |= 0x1000u;
              v31 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v32 = *(_QWORD *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                v41 = 0;
                v42 = 0;
                v35 = 0;
                if (v2 <= v31)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_107;
                  }
                  v43 = v31++;
                  v44 = *(_BYTE *)(v32 + v43);
                  *((_QWORD *)this + 1) = v31;
                  v35 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0)
                    break;
                  v41 += 7;
                  v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_106:
                    v2 = v43 + 1;
                    goto LABEL_107;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v35) = 0;
                goto LABEL_106;
              }
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v2 = v31 + 1;
                *((_QWORD *)this + 1) = v31 + 1;
                v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0)
                  goto LABEL_107;
                v33 += 7;
                v31 = v2;
                v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_107:
              *(_DWORD *)(a1 + 104) = v35;
LABEL_108:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_108;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F316208(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 116);
  if ((v4 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 64));
    v4 = *(_WORD *)(v3 + 116);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((*(_WORD *)(result + 116) & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(double *)(v3 + 96));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_32:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 116) & 0x1000) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_18F3163EC(_QWORD *a1)
{
  double result;

  *a1 = &off_1E294F050;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)((char *)a1 + 28) = 0xFFFFFFFFLL;
  return result;
}

void sub_18F316408(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31642C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "radius", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestampSet", *(double *)(a1 + 16));
      if ((*(_BYTE *)(a1 + 32) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestampExit", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "userResponse");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F3164DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_33;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_30;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_33;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_30:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_49;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_49:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_33:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_55;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_54;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_53:
                    v2 = v29 + 1;
                    goto LABEL_54;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_53;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_54;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_54:
              *(_DWORD *)(a1 + 28) = v25;
LABEL_55:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_55;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F3167F4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F316888(uint64_t result)
{
  *(_QWORD *)result = &off_1E29506D8;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_18F3168A0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3168C4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "complexHandMotionPercentage", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidence", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "straightnessMetric", *(double *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 56) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 56);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "walkPercentage", *(double *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F3169B4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 56) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 2u:
          *(_BYTE *)(a1 + 56) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 3u:
          *(_BYTE *)(a1 + 56) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 4u:
          *(_BYTE *)(a1 + 56) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 5u:
          *(_BYTE *)(a1 + 56) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 6u:
          *(_BYTE *)(a1 + 56) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_43:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_41:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F316C80(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 56);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8));
  }
LABEL_12:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  if ((*(_BYTE *)(v3 + 56) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

uint64_t sub_18F316D4C(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944EB8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F316D64(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F316D88(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "motionState");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F316DF0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F31707C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_18F3170D4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E2944748;
  *(_DWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_18F3170F4(PB::Base *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E2944748;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F31714C(PB::Base *a1)
{
  sub_18F3170F4(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F317170(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  uint64_t v8;
  char v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "gyroBias", v7);
  }
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "super");
  v9 = *(_BYTE *)(a1 + 48);
  if ((v9 & 1) != 0)
  {
    PB::TextFormatter::format(this, "temperatureGyro", *(float *)(a1 + 40));
    v9 = *(_BYTE *)(a1 + 48);
  }
  if ((v9 & 2) != 0)
    PB::TextFormatter::format(this, "temperatureGyroBias", *(float *)(a1 + 44));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F317234(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _DWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  unint64_t v52;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          v22 = operator new();
          v23 = sub_18F2835B0(v22);
          v24 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v22;
          if (v24)
          {
            (*(void (**)(uint64_t, double))(*(_QWORD *)v24 + 8))(v24, v23);
            v22 = *(_QWORD *)(a1 + 32);
          }
          if (PB::Reader::placeMark()
            && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, this) & 1) != 0)
          {
            goto LABEL_27;
          }
          return 0;
        case 2u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v25 = *((_QWORD *)this + 1);
            v26 = *((_QWORD *)this + 2);
            while (v25 < v26 && !*((_BYTE *)this + 24))
            {
              v28 = *(char **)(a1 + 16);
              v27 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v28 >= v27)
              {
                v30 = (char *)*v8;
                v31 = (v28 - (_BYTE *)*v8) >> 2;
                v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 62)
                  goto LABEL_90;
                v33 = v27 - (_QWORD)v30;
                if (v33 >> 1 > v32)
                  v32 = v33 >> 1;
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
                  v34 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v34 = v32;
                if (v34)
                {
                  v35 = (char *)sub_18F26FB8C(v9, v34);
                  v30 = *(char **)(a1 + 8);
                  v28 = *(char **)(a1 + 16);
                }
                else
                {
                  v35 = 0;
                }
                v36 = &v35[4 * v31];
                *(_DWORD *)v36 = 0;
                v29 = v36 + 4;
                while (v28 != v30)
                {
                  v37 = *((_DWORD *)v28 - 1);
                  v28 -= 4;
                  *((_DWORD *)v36 - 1) = v37;
                  v36 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v36;
                *(_QWORD *)(a1 + 16) = v29;
                *(_QWORD *)(a1 + 24) = &v35[4 * v34];
                if (v30)
                  operator delete(v30);
              }
              else
              {
                *(_DWORD *)v28 = 0;
                v29 = v28 + 4;
              }
              *(_QWORD *)(a1 + 16) = v29;
              v38 = *((_QWORD *)this + 1);
              if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v29 - 1) = *(_DWORD *)(*(_QWORD *)this + v38);
              v26 = *((_QWORD *)this + 2);
              v25 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v25;
            }
LABEL_27:
            PB::Reader::recallMark();
          }
          else
          {
            v42 = *(char **)(a1 + 16);
            v41 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v42 >= v41)
            {
              v44 = (char *)*v8;
              v45 = (v42 - (_BYTE *)*v8) >> 2;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62)
LABEL_90:
                sub_18F26F8C0();
              v47 = v41 - (_QWORD)v44;
              if (v47 >> 1 > v46)
                v46 = v47 >> 1;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                v48 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                v49 = (char *)sub_18F26FB8C(v9, v48);
                v44 = *(char **)(a1 + 8);
                v42 = *(char **)(a1 + 16);
              }
              else
              {
                v49 = 0;
              }
              v50 = &v49[4 * v45];
              *(_DWORD *)v50 = 0;
              v43 = v50 + 4;
              while (v42 != v44)
              {
                v51 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *((_DWORD *)v50 - 1) = v51;
                v50 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v50;
              *(_QWORD *)(a1 + 16) = v43;
              *(_QWORD *)(a1 + 24) = &v49[4 * v48];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *(_DWORD *)v42 = 0;
              v43 = v42 + 4;
            }
            *(_QWORD *)(a1 + 16) = v43;
            v52 = *((_QWORD *)this + 1);
            if (v52 <= 0xFFFFFFFFFFFFFFFBLL && v52 + 4 <= *((_QWORD *)this + 2))
            {
              *(v43 - 1) = *(_DWORD *)(*(_QWORD *)this + v52);
LABEL_81:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_79:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_82:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 3u:
          *(_BYTE *)(a1 + 48) |= 2u;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
            goto LABEL_79;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v39);
          goto LABEL_81;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 1u;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
            goto LABEL_79;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v40);
          goto LABEL_81;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_82;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F3176A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  float *v5;
  float *v6;
  float v7;
  char v8;

  v3 = result;
  v4 = *(const PB::Base **)(result + 32);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(_BYTE *)(v3 + 48);
  if ((v8 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 44));
    v8 = *(_BYTE *)(v3 + 48);
  }
  if ((v8 & 1) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 40));
  return result;
}

uint64_t sub_18F317738(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944C50;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_18F317750(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F317774(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "firstRingSensorTimeStampMicroSeconds");
    v5 = *(_BYTE *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "lastRingSensorTimeStampMicroSeconds");
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "medianBufferNumSamples");
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "medianNorthAlignmentEstimateRad", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "newNorthAlignmentEstimateRad", *(double *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(this, "timeElapsedSinceLastUpdateMicroSeconds");
    if ((*(_BYTE *)(a1 + 64) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(this, "numRingSensorSamples");
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 0x10) != 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 0x20) != 0)
LABEL_9:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F3178A4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 64) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 64) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 64) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_104:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_32:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_130;
            case 4u:
              *(_BYTE *)(a1 + 64) |= 0x40u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  v53 = v21++;
                  v54 = *(_BYTE *)(v22 + v53);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    v2 = v53 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_108;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_109;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 56) = v25;
              goto LABEL_130;
            case 5u:
              *(_BYTE *)(a1 + 64) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_114;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_113:
                    v2 = v57 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_113;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_114;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_114:
              *(_QWORD *)(a1 + 40) = v31;
              goto LABEL_130;
            case 6u:
              *(_BYTE *)(a1 + 64) |= 1u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_119;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_118:
                    v2 = v61 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v37 = 0;
                goto LABEL_118;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_119;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_119:
              *(_QWORD *)(a1 + 8) = v37;
              goto LABEL_130;
            case 7u:
              *(_BYTE *)(a1 + 64) |= 2u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    v43 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_124;
                  }
                  v65 = v39++;
                  v66 = *(_BYTE *)(v40 + v65);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v43 = 0;
LABEL_123:
                    v2 = v65 + 1;
                    goto LABEL_124;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v43 = 0;
                goto LABEL_123;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_124;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              v43 = 0;
LABEL_124:
              *(_QWORD *)(a1 + 16) = v43;
              goto LABEL_130;
            case 8u:
              *(_BYTE *)(a1 + 64) |= 0x80u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_129;
                  }
                  v69 = v45++;
                  v70 = *(_BYTE *)(v46 + v69);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_128:
                    v2 = v69 + 1;
                    goto LABEL_129;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_128;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_129;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_129:
              *(_DWORD *)(a1 + 60) = v49;
LABEL_130:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_130;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F317F64(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 64);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 48));
    v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 64) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 64) & 0x80) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F318068(uint64_t result)
{
  *(_QWORD *)result = &off_1E29449B0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_18F318084(PB::Base *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E29449B0;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F3180DC(PB::Base *a1)
{
  sub_18F318084(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F318100(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  double *v6;
  double *v7;
  double v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "lastAuxTimeStampMicroSeconds");
    v5 = *(_BYTE *)(a1 + 64);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "lastRingSensorTimeStampMicroSeconds");
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "qSP", v8);
  }
  v9 = *(_QWORD *)(a1 + 48);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, this, "super");
  if ((*(_BYTE *)(a1 + 64) & 4) != 0)
    PB::TextFormatter::format(this, "timeStampMicroSeconds");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F3181E0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  char *v67;
  _QWORD *v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          v22 = (_DWORD *)operator new();
          *(_QWORD *)v22 = &off_1E2944780;
          v22[19] = 0;
          v23 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v22;
          if (v23)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            v22 = *(_DWORD **)(a1 + 48);
          }
          if (PB::Reader::placeMark()
            && ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, this) & 1) != 0)
          {
            goto LABEL_27;
          }
          return 0;
        case 2u:
          *(_BYTE *)(a1 + 64) |= 4u;
          v24 = *((_QWORD *)this + 1);
          v25 = *((_QWORD *)this + 2);
          v26 = *(_QWORD *)this;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = v24 + 1;
              *((_QWORD *)this + 1) = v24 + 1;
              v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0)
                goto LABEL_111;
              v27 += 7;
              v24 = v30;
              v16 = v28++ > 8;
            }
            while (!v16);
LABEL_81:
            v29 = 0;
            goto LABEL_111;
          }
          v62 = 0;
          v63 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v25 == v24)
            {
              v29 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v64 = v24 + 1;
              v65 = *(_BYTE *)(v26 + v24);
              *((_QWORD *)this + 1) = v64;
              v29 |= (unint64_t)(v65 & 0x7F) << v62;
              if (v65 < 0)
              {
                v62 += 7;
                v24 = v64;
                v16 = v63++ > 8;
                if (v16)
                  goto LABEL_81;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v29 = 0;
            }
            break;
          }
LABEL_111:
          *(_QWORD *)(a1 + 56) = v29;
          goto LABEL_129;
        case 3u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v32 = *((_QWORD *)this + 1);
            v33 = *((_QWORD *)this + 2);
            while (v32 < v33 && !*((_BYTE *)this + 24))
            {
              v35 = *(char **)(a1 + 16);
              v34 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v35 >= v34)
              {
                v37 = (char *)*v8;
                v38 = (v35 - (_BYTE *)*v8) >> 3;
                v39 = v38 + 1;
                if ((unint64_t)(v38 + 1) >> 61)
                  goto LABEL_139;
                v40 = v34 - (_QWORD)v37;
                if (v40 >> 2 > v39)
                  v39 = v40 >> 2;
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
                  v41 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v41 = v39;
                if (v41)
                {
                  v42 = (char *)sub_18F26F8D4(v9, v41);
                  v37 = *(char **)(a1 + 8);
                  v35 = *(char **)(a1 + 16);
                }
                else
                {
                  v42 = 0;
                }
                v43 = &v42[8 * v38];
                *(_QWORD *)v43 = 0;
                v36 = v43 + 8;
                while (v35 != v37)
                {
                  v44 = *((_QWORD *)v35 - 1);
                  v35 -= 8;
                  *((_QWORD *)v43 - 1) = v44;
                  v43 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v43;
                *(_QWORD *)(a1 + 16) = v36;
                *(_QWORD *)(a1 + 24) = &v42[8 * v41];
                if (v37)
                  operator delete(v37);
              }
              else
              {
                *(_QWORD *)v35 = 0;
                v36 = v35 + 8;
              }
              *(_QWORD *)(a1 + 16) = v36;
              v45 = *((_QWORD *)this + 1);
              if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v36 - 1) = *(_QWORD *)(*(_QWORD *)this + v45);
              v33 = *((_QWORD *)this + 2);
              v32 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v32;
            }
LABEL_27:
            PB::Reader::recallMark();
          }
          else
          {
            v67 = *(char **)(a1 + 16);
            v66 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v67 >= v66)
            {
              v77 = (char *)*v8;
              v78 = (v67 - (_BYTE *)*v8) >> 3;
              v79 = v78 + 1;
              if ((unint64_t)(v78 + 1) >> 61)
LABEL_139:
                sub_18F26F8C0();
              v80 = v66 - (_QWORD)v77;
              if (v80 >> 2 > v79)
                v79 = v80 >> 2;
              if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
                v81 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v81 = v79;
              if (v81)
              {
                v82 = (char *)sub_18F26F8D4(v9, v81);
                v77 = *(char **)(a1 + 8);
                v67 = *(char **)(a1 + 16);
              }
              else
              {
                v82 = 0;
              }
              v83 = &v82[8 * v78];
              *(_QWORD *)v83 = 0;
              v68 = v83 + 8;
              while (v67 != v77)
              {
                v84 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v83 - 1) = v84;
                v83 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v83;
              *(_QWORD *)(a1 + 16) = v68;
              *(_QWORD *)(a1 + 24) = &v82[8 * v81];
              if (v77)
                operator delete(v77);
            }
            else
            {
              *(_QWORD *)v67 = 0;
              v68 = v67 + 8;
            }
            *(_QWORD *)(a1 + 16) = v68;
            v85 = *((_QWORD *)this + 1);
            if (v85 <= 0xFFFFFFFFFFFFFFF7 && v85 + 8 <= *((_QWORD *)this + 2))
            {
              *(v68 - 1) = *(_QWORD *)(*(_QWORD *)this + v85);
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_129:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 64) |= 1u;
          v46 = *((_QWORD *)this + 1);
          v47 = *((_QWORD *)this + 2);
          v48 = *(_QWORD *)this;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            v49 = 0;
            v50 = 0;
            v51 = 0;
            do
            {
              v52 = v46 + 1;
              *((_QWORD *)this + 1) = v46 + 1;
              v53 = *(_BYTE *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0)
                goto LABEL_114;
              v49 += 7;
              v46 = v52;
              v16 = v50++ > 8;
            }
            while (!v16);
LABEL_90:
            v51 = 0;
            goto LABEL_114;
          }
          v69 = 0;
          v70 = 0;
          v51 = 0;
          if (v47 <= v46)
            v47 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v47 == v46)
            {
              v51 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v71 = v46 + 1;
              v72 = *(_BYTE *)(v48 + v46);
              *((_QWORD *)this + 1) = v71;
              v51 |= (unint64_t)(v72 & 0x7F) << v69;
              if (v72 < 0)
              {
                v69 += 7;
                v46 = v71;
                v16 = v70++ > 8;
                if (v16)
                  goto LABEL_90;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v51 = 0;
            }
            break;
          }
LABEL_114:
          *(_QWORD *)(a1 + 32) = v51;
          goto LABEL_129;
        case 5u:
          *(_BYTE *)(a1 + 64) |= 2u;
          v54 = *((_QWORD *)this + 1);
          v55 = *((_QWORD *)this + 2);
          v56 = *(_QWORD *)this;
          if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
          {
            v57 = 0;
            v58 = 0;
            v59 = 0;
            do
            {
              v60 = v54 + 1;
              *((_QWORD *)this + 1) = v54 + 1;
              v61 = *(_BYTE *)(v56 + v54);
              v59 |= (unint64_t)(v61 & 0x7F) << v57;
              if ((v61 & 0x80) == 0)
                goto LABEL_117;
              v57 += 7;
              v54 = v60;
              v16 = v58++ > 8;
            }
            while (!v16);
LABEL_97:
            v59 = 0;
            goto LABEL_117;
          }
          v73 = 0;
          v74 = 0;
          v59 = 0;
          if (v55 <= v54)
            v55 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v55 == v54)
            {
              v59 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v75 = v54 + 1;
              v76 = *(_BYTE *)(v56 + v54);
              *((_QWORD *)this + 1) = v75;
              v59 |= (unint64_t)(v76 & 0x7F) << v73;
              if (v76 < 0)
              {
                v73 += 7;
                v54 = v75;
                v16 = v74++ > 8;
                if (v16)
                  goto LABEL_97;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v59 = 0;
            }
            break;
          }
LABEL_117:
          *(_QWORD *)(a1 + 40) = v59;
          goto LABEL_129;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_129;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F318894(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944780;
  *(_DWORD *)(result + 76) = 0;
  return result;
}

uint64_t sub_18F3188A8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;
  char v8;

  v3 = result;
  v4 = *(const PB::Base **)(result + 48);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  if ((*(_BYTE *)(v3 + 64) & 4) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(_BYTE *)(v3 + 64);
  if ((v8 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v8 = *(_BYTE *)(v3 + 64);
  }
  if ((v8 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

void sub_18F31895C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F318980(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitudeAngle", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 76);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "azimuthAngle", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "estimated");
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "estimationUpdateIndex");
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "rollAngle", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "y", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 76) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "x", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x40) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x80) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "z", *(double *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F318AD0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 76) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_64;
            case 2u:
              *(_WORD *)(a1 + 76) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_64;
            case 3u:
              *(_WORD *)(a1 + 76) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_64;
            case 4u:
              *(_WORD *)(a1 + 76) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_64;
            case 5u:
              *(_WORD *)(a1 + 76) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_64;
            case 6u:
              *(_WORD *)(a1 + 76) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_64;
            case 7u:
              *(_WORD *)(a1 + 76) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_64:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_44:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_70;
            case 8u:
              *(_WORD *)(a1 + 76) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_69;
                  }
                  v31 = v21++;
                  v32 = *(_BYTE *)(v22 + v31);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_68:
                    v2 = v31 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_68;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_69;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_69:
              *(_QWORD *)(a1 + 24) = v25;
LABEL_70:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 9u:
              *(_WORD *)(a1 + 76) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 72) = v28;
              goto LABEL_70;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_70;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F318F04(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 76);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40));
    v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 76) & 0x100) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F319024(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944E10;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F319040(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F319064(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "avgRelOmegaRps", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
      if ((*(_BYTE *)(a1 + 32) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "ringSensorTrustModelMode");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "trustPencilRingSensorBool");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F319114(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_38;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_49;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 28) = v22;
              goto LABEL_55;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_54;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_53:
                    v2 = v31 + 1;
                    goto LABEL_54;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_53;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_54;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_54:
              *(_DWORD *)(a1 + 24) = v27;
LABEL_55:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_49:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_38:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_55;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_55;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F319430(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8));
  }
LABEL_8:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

uint64_t sub_18F3194C4(uint64_t result)
{
  *(_QWORD *)result = &off_1E294D840;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_18F3194DC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F319500(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "tipForce", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F319568(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          goto LABEL_28;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_33;
        }
        *(_BYTE *)(a1 + 24) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      v2 = *((_QWORD *)this + 1) + 8;
      *((_QWORD *)this + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_18F319740(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_18F319798(uint64_t result)
{
  *(_QWORD *)result = &off_1E294CD18;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_18F3197B0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3197D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitudeAngle", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "altitudeAngleConfidence", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "azimuthAngle", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "azimuthAngleConfidence", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "pathFlags");
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "pathStage");
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "positionConfidence", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "y", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 88) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "x", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x100) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "z", *(double *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F319964(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 88) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 2u:
              *(_WORD *)(a1 + 88) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 3u:
              *(_WORD *)(a1 + 88) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 4u:
              *(_WORD *)(a1 + 88) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 5u:
              *(_WORD *)(a1 + 88) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 6u:
              *(_WORD *)(a1 + 88) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 7u:
              *(_WORD *)(a1 + 88) |= 0x400u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_85;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_84:
                    v2 = v35 + 1;
                    goto LABEL_85;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_84;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_85;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_85:
              *(_DWORD *)(a1 + 84) = v25;
              goto LABEL_91;
            case 8u:
              *(_WORD *)(a1 + 88) |= 0x200u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_90;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_89:
                    v2 = v39 + 1;
                    goto LABEL_90;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_89;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_90;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_90:
              *(_DWORD *)(a1 + 80) = v31;
LABEL_91:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 9u:
              *(_WORD *)(a1 + 88) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 0xAu:
              *(_WORD *)(a1 + 88) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_80;
            case 0xBu:
              *(_WORD *)(a1 + 88) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_80:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_91;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_91;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F319EB0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 88);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 48));
    v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 40));
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  if ((*(_WORD *)(v3 + 88) & 0x10) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40));
  return result;
}

uint64_t sub_18F31A008(uint64_t result)
{
  *(_QWORD *)result = &off_1E29447B8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F31A020(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31A044(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "sampleTime", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "activityType");
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "wrMets", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F31A0D4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  for (i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)this + 24))
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 28) |= 4u;
      v21 = *((_QWORD *)this + 1);
      v2 = *((_QWORD *)this + 2);
      v22 = *(_QWORD *)this;
      if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
      {
        v28 = 0;
        v29 = 0;
        v25 = 0;
        if (v2 <= v21)
          v2 = *((_QWORD *)this + 1);
        while (1)
        {
          if (v2 == v21)
          {
            LODWORD(v25) = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_52;
          }
          v30 = v21++;
          v31 = *(_BYTE *)(v22 + v30);
          *((_QWORD *)this + 1) = v21;
          v25 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0)
            break;
          v28 += 7;
          v14 = v29++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_51;
          }
        }
        if (*((_BYTE *)this + 24))
          LODWORD(v25) = 0;
LABEL_51:
        v2 = v30 + 1;
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        while (1)
        {
          v2 = v21 + 1;
          *((_QWORD *)this + 1) = v21 + 1;
          v26 = *(_BYTE *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0)
            break;
          v23 += 7;
          v21 = v2;
          v14 = v24++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            break;
          }
        }
      }
LABEL_52:
      *(_DWORD *)(a1 + 24) = v25;
      goto LABEL_53;
    }
    if ((_DWORD)v20 == 2)
    {
      *(_BYTE *)(a1 + 28) |= 2u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        goto LABEL_53;
      }
      *(_BYTE *)(a1 + 28) |= 1u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_47:
        v2 = *((_QWORD *)this + 1) + 8;
        *((_QWORD *)this + 1) = v2;
        goto LABEL_53;
      }
    }
    *((_BYTE *)this + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)this + 2);
  }
  return i == 0;
}

uint64_t sub_18F31A3A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      return PB::Writer::writeVarInt(this);
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F31A418(uint64_t result)
{
  *(_QWORD *)result = &off_1E29447F0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_18F31A430(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31A454(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "activityType");
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "algorithmVersion");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "endDate", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "sampleStopReason");
    if ((*(_BYTE *)(a1 + 44) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "mets", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 4) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "startDate", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F31A544(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_76;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_76;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_76:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_32:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_92;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_81;
                  }
                  v41 = v21++;
                  v42 = *(_BYTE *)(v22 + v41);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_80:
                    v2 = v41 + 1;
                    goto LABEL_81;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_80;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_81;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_81:
              *(_DWORD *)(a1 + 32) = v25;
              goto LABEL_92;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_86;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_85:
                    v2 = v45 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_85;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_86;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_86:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_92;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_90:
                    v2 = v49 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_90;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_91;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 40) = v37;
LABEL_92:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_92;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F31AA2C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F31AAF8(uint64_t result)
{
  *(_QWORD *)result = &off_1E294FB08;
  *(_DWORD *)(result + 84) = 0;
  return result;
}

void sub_18F31AB10(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31AB34(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "ambient", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 84);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(_WORD *)(a1 + 84) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "baselineAccuracy", *(float *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "flags", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "header");
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "intensity", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "intensityBaselineDelta", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "intensityCalDelta", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "pocketFlag");
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "temperature", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 84) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "pocketProbability", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x40) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x80) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "ts", *(double *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F31ACC4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 84) |= 0x200u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_76;
                  }
                  v31 = v20++;
                  v32 = *(_BYTE *)(v21 + v31);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_75;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_75:
                v2 = v31 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_76;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_76:
              *(_DWORD *)(a1 + 76) = v24;
              goto LABEL_77;
            case 2u:
              *(_WORD *)(a1 + 84) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 3u:
              *(_WORD *)(a1 + 84) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 4u:
              *(_WORD *)(a1 + 84) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 5u:
              *(_WORD *)(a1 + 84) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 6u:
              *(_WORD *)(a1 + 84) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 7u:
              *(_WORD *)(a1 + 84) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 8u:
              *(_WORD *)(a1 + 84) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 80) = v28;
              goto LABEL_77;
            case 9u:
              *(_WORD *)(a1 + 84) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_70;
            case 0xAu:
              *(_WORD *)(a1 + 84) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_59;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_71;
            case 0xBu:
              *(_WORD *)(a1 + 84) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_70:
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_71:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_59:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_77;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_77:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F31B170(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 84);
  if ((v4 & 0x200) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 84);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 56));
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  if ((*(_WORD *)(v3 + 84) & 0x40) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 56));
  return result;
}

double sub_18F31B2C8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E2951B68;
  *(_DWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_18F31B2EC(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2951B68;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F31B33C(PB::Base *a1)
{
  sub_18F31B2EC(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31B360(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "attitude", v7);
  }
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "position", v10);
  }
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F31B414(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
        break;
      if ((_DWORD)v25 == 2)
      {
        if (v24 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          while (v41 < v42 && !*((_BYTE *)this + 24))
          {
            v44 = *(char **)(a1 + 16);
            v43 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v10;
              v47 = (v44 - (_BYTE *)*v10) >> 3;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 61)
                goto LABEL_128;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 2 > v48)
                v48 = v49 >> 2;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
                v50 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_18F26F8D4(v11, v50);
                v46 = *(char **)(a1 + 8);
                v44 = *(char **)(a1 + 16);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[8 * v47];
              *(_QWORD *)v52 = 0;
              v45 = v52 + 8;
              while (v44 != v46)
              {
                v53 = *((_QWORD *)v44 - 1);
                v44 -= 8;
                *((_QWORD *)v52 - 1) = v53;
                v52 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v52;
              *(_QWORD *)(a1 + 16) = v45;
              *(_QWORD *)(a1 + 24) = &v51[8 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_QWORD *)v44 = 0;
              v45 = v44 + 8;
            }
            *(_QWORD *)(a1 + 16) = v45;
            v54 = *((_QWORD *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)this + 2))
              goto LABEL_82;
            *(v45 - 1) = *(_QWORD *)(*(_QWORD *)this + v54);
            v42 = *((_QWORD *)this + 2);
            v41 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v41;
          }
          goto LABEL_83;
        }
        v59 = *(char **)(a1 + 16);
        v58 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v59 >= v58)
        {
          v66 = (char *)*v10;
          v67 = (v59 - (_BYTE *)*v10) >> 3;
          v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 61)
LABEL_128:
            sub_18F26F8C0();
          v69 = v58 - (_QWORD)v66;
          if (v69 >> 2 > v68)
            v68 = v69 >> 2;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
            v70 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v70 = v68;
          if (v70)
          {
            v71 = (char *)sub_18F26F8D4(v11, v70);
            v66 = *(char **)(a1 + 8);
            v59 = *(char **)(a1 + 16);
          }
          else
          {
            v71 = 0;
          }
          v74 = &v71[8 * v67];
          *(_QWORD *)v74 = 0;
          v57 = v74 + 8;
          while (v59 != v66)
          {
            v75 = *((_QWORD *)v59 - 1);
            v59 -= 8;
            *((_QWORD *)v74 - 1) = v75;
            v74 -= 8;
          }
          *(_QWORD *)(a1 + 8) = v74;
          *(_QWORD *)(a1 + 16) = v57;
          *(_QWORD *)(a1 + 24) = &v71[8 * v70];
          if (v66)
            operator delete(v66);
        }
        else
        {
          *(_QWORD *)v59 = 0;
          v57 = v59 + 8;
        }
        *(_QWORD *)(a1 + 16) = v57;
LABEL_114:
        v76 = *((_QWORD *)this + 1);
        if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((_QWORD *)this + 2))
        {
LABEL_116:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_119;
        }
        *(v57 - 1) = *(_QWORD *)(*(_QWORD *)this + v76);
        goto LABEL_118;
      }
      if ((_DWORD)v25 == 1)
      {
        *(_BYTE *)(a1 + 64) |= 1u;
        v26 = *((_QWORD *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
          goto LABEL_116;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v26);
LABEL_118:
        *((_QWORD *)this + 1) += 8;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(this) & 1) == 0)
        return 0;
LABEL_119:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    if (v24 == 2)
    {
      if ((PB::Reader::placeMark() & 1) != 0)
        return 0;
      v27 = *((_QWORD *)this + 1);
      v28 = *((_QWORD *)this + 2);
      while (v27 < v28 && !*((_BYTE *)this + 24))
      {
        v30 = *(char **)(a1 + 40);
        v29 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)v30 >= v29)
        {
          v32 = (char *)*v8;
          v33 = (v30 - (_BYTE *)*v8) >> 3;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61)
            goto LABEL_127;
          v35 = v29 - (_QWORD)v32;
          if (v35 >> 2 > v34)
            v34 = v35 >> 2;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v34;
          if (v36)
          {
            v37 = (char *)sub_18F26F8D4(v9, v36);
            v32 = *(char **)(a1 + 32);
            v30 = *(char **)(a1 + 40);
          }
          else
          {
            v37 = 0;
          }
          v38 = &v37[8 * v33];
          *(_QWORD *)v38 = 0;
          v31 = v38 + 8;
          while (v30 != v32)
          {
            v39 = *((_QWORD *)v30 - 1);
            v30 -= 8;
            *((_QWORD *)v38 - 1) = v39;
            v38 -= 8;
          }
          *(_QWORD *)(a1 + 32) = v38;
          *(_QWORD *)(a1 + 40) = v31;
          *(_QWORD *)(a1 + 48) = &v37[8 * v36];
          if (v32)
            operator delete(v32);
        }
        else
        {
          *(_QWORD *)v30 = 0;
          v31 = v30 + 8;
        }
        *(_QWORD *)(a1 + 40) = v31;
        v40 = *((_QWORD *)this + 1);
        if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((_QWORD *)this + 2))
        {
LABEL_82:
          *((_BYTE *)this + 24) = 1;
          break;
        }
        *(v31 - 1) = *(_QWORD *)(*(_QWORD *)this + v40);
        v28 = *((_QWORD *)this + 2);
        v27 = *((_QWORD *)this + 1) + 8;
        *((_QWORD *)this + 1) = v27;
      }
LABEL_83:
      PB::Reader::recallMark();
      goto LABEL_119;
    }
    v56 = *(char **)(a1 + 40);
    v55 = *(_QWORD *)(a1 + 48);
    if ((unint64_t)v56 >= v55)
    {
      v60 = (char *)*v8;
      v61 = (v56 - (_BYTE *)*v8) >> 3;
      v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 61)
LABEL_127:
        sub_18F26F8C0();
      v63 = v55 - (_QWORD)v60;
      if (v63 >> 2 > v62)
        v62 = v63 >> 2;
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
        v64 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v64 = v62;
      if (v64)
      {
        v65 = (char *)sub_18F26F8D4(v9, v64);
        v60 = *(char **)(a1 + 32);
        v56 = *(char **)(a1 + 40);
      }
      else
      {
        v65 = 0;
      }
      v72 = &v65[8 * v61];
      *(_QWORD *)v72 = 0;
      v57 = v72 + 8;
      while (v56 != v60)
      {
        v73 = *((_QWORD *)v56 - 1);
        v56 -= 8;
        *((_QWORD *)v72 - 1) = v73;
        v72 -= 8;
      }
      *(_QWORD *)(a1 + 32) = v72;
      *(_QWORD *)(a1 + 40) = v57;
      *(_QWORD *)(a1 + 48) = &v65[8 * v64];
      if (v60)
        operator delete(v60);
    }
    else
    {
      *(_QWORD *)v56 = 0;
      v57 = v56 + 8;
    }
    *(_QWORD *)(a1 + 40) = v57;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t sub_18F31B984(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 64) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 56));
  v4 = (double *)v3[1];
  v5 = (double *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v8 = (double *)v3[4];
  v7 = (double *)v3[5];
  while (v8 != v7)
  {
    v9 = *v8++;
    result = PB::Writer::write(this, v9);
  }
  return result;
}

double sub_18F31BA04(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E2952190;
  *(_DWORD *)(a1 + 44) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_18F31BA24(PB::Base *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E2952190;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F31BA7C(PB::Base *a1)
{
  sub_18F31BA24(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31BAA0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "pose");
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "velocity", v8);
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    PB::TextFormatter::format(this, "wasCorrected");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F31BB48(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v17 = 0;
        v18 = 0;
        v13 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v10 + v2);
          *((_QWORD *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0)
            goto LABEL_21;
          v17 += 7;
          v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            v13 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v22 = v13 >> 3;
      if ((v13 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 44) |= 1u;
        v25 = *((_QWORD *)this + 1);
        if (v25 >= *((_QWORD *)this + 2))
        {
          v28 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v26 = v25 + 1;
          v27 = *(unsigned __int8 *)(*(_QWORD *)this + v25);
          *((_QWORD *)this + 1) = v26;
          v28 = v27 != 0;
        }
        *(_BYTE *)(a1 + 40) = v28;
        goto LABEL_81;
      }
      if ((_DWORD)v22 == 2)
        break;
      if ((_DWORD)v22 == 1)
      {
        v23 = operator new();
        *(_QWORD *)v23 = &off_1E2951B68;
        *(_DWORD *)(v23 + 64) = 0;
        *(_OWORD *)(v23 + 8) = 0u;
        *(_OWORD *)(v23 + 24) = 0u;
        *(_OWORD *)(v23 + 40) = 0u;
        v24 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v23;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v23 = *(_QWORD *)(a1 + 32);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v23 + 16))(v23, this) & 1) == 0)
        {
          return 0;
        }
LABEL_29:
        PB::Reader::recallMark();
        goto LABEL_81;
      }
      if ((PB::Reader::skip(this) & 1) == 0)
        return 0;
LABEL_81:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    if ((v13 & 7) != 2)
    {
      v44 = *(char **)(a1 + 16);
      v43 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v44 >= v43)
      {
        v46 = (char *)*v8;
        v47 = (v44 - (_BYTE *)*v8) >> 3;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 61)
LABEL_89:
          sub_18F26F8C0();
        v49 = v43 - (_QWORD)v46;
        if (v49 >> 2 > v48)
          v48 = v49 >> 2;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          v51 = (char *)sub_18F26F8D4(v9, v50);
          v46 = *(char **)(a1 + 8);
          v44 = *(char **)(a1 + 16);
        }
        else
        {
          v51 = 0;
        }
        v52 = &v51[8 * v47];
        *(_QWORD *)v52 = 0;
        v45 = v52 + 8;
        while (v44 != v46)
        {
          v53 = *((_QWORD *)v44 - 1);
          v44 -= 8;
          *((_QWORD *)v52 - 1) = v53;
          v52 -= 8;
        }
        *(_QWORD *)(a1 + 8) = v52;
        *(_QWORD *)(a1 + 16) = v45;
        *(_QWORD *)(a1 + 24) = &v51[8 * v50];
        if (v46)
          operator delete(v46);
      }
      else
      {
        *(_QWORD *)v44 = 0;
        v45 = v44 + 8;
      }
      *(_QWORD *)(a1 + 16) = v45;
      v54 = *((_QWORD *)this + 1);
      if (v54 <= 0xFFFFFFFFFFFFFFF7 && v54 + 8 <= *((_QWORD *)this + 2))
      {
        *(v45 - 1) = *(_QWORD *)(*(_QWORD *)this + v54);
        *((_QWORD *)this + 1) += 8;
      }
      else
      {
        *((_BYTE *)this + 24) = 1;
      }
      goto LABEL_81;
    }
    if ((PB::Reader::placeMark() & 1) != 0)
      return 0;
    v29 = *((_QWORD *)this + 1);
    v30 = *((_QWORD *)this + 2);
    while (v29 < v30 && !*((_BYTE *)this + 24))
    {
      v32 = *(char **)(a1 + 16);
      v31 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v32 >= v31)
      {
        v34 = (char *)*v8;
        v35 = (v32 - (_BYTE *)*v8) >> 3;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61)
          goto LABEL_89;
        v37 = v31 - (_QWORD)v34;
        if (v37 >> 2 > v36)
          v36 = v37 >> 2;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
          v38 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          v39 = (char *)sub_18F26F8D4(v9, v38);
          v34 = *(char **)(a1 + 8);
          v32 = *(char **)(a1 + 16);
        }
        else
        {
          v39 = 0;
        }
        v40 = &v39[8 * v35];
        *(_QWORD *)v40 = 0;
        v33 = v40 + 8;
        while (v32 != v34)
        {
          v41 = *((_QWORD *)v32 - 1);
          v32 -= 8;
          *((_QWORD *)v40 - 1) = v41;
          v40 -= 8;
        }
        *(_QWORD *)(a1 + 8) = v40;
        *(_QWORD *)(a1 + 16) = v33;
        *(_QWORD *)(a1 + 24) = &v39[8 * v38];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *(_QWORD *)v32 = 0;
        v33 = v32 + 8;
      }
      *(_QWORD *)(a1 + 16) = v33;
      v42 = *((_QWORD *)this + 1);
      if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((_QWORD *)this + 2))
      {
        *((_BYTE *)this + 24) = 1;
        goto LABEL_29;
      }
      *(v33 - 1) = *(_QWORD *)(*(_QWORD *)this + v42);
      v30 = *((_QWORD *)this + 2);
      v29 = *((_QWORD *)this + 1) + 8;
      *((_QWORD *)this + 1) = v29;
    }
    goto LABEL_29;
  }
  return v4 == 0;
}

uint64_t sub_18F31BF98(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;

  v3 = result;
  v4 = *(const PB::Base **)(result + 32);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
    return PB::Writer::write(this);
  return result;
}

double sub_18F31C018(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E2944400;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

void sub_18F31C03C(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2944400;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F31C08C(PB::Base *a1)
{
  sub_18F31C03C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31C0B0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
    PB::TextFormatter::format(this, "jointName");
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "rotation", v7);
  }
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "translation", v10);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F31C164(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  _QWORD *v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 60) |= 1u;
        v40 = *((_QWORD *)this + 1);
        v41 = *((_QWORD *)this + 2);
        v42 = *(_QWORD *)this;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v41)
        {
          v65 = 0;
          v66 = 0;
          v45 = 0;
          if (v41 <= v40)
            v41 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v41 == v40)
            {
              LODWORD(v45) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_114;
            }
            v67 = v40 + 1;
            v68 = *(_BYTE *)(v42 + v40);
            *((_QWORD *)this + 1) = v67;
            v45 |= (unint64_t)(v68 & 0x7F) << v65;
            if ((v68 & 0x80) == 0)
              break;
            v65 += 7;
            v40 = v67;
            v18 = v66++ > 8;
            if (v18)
            {
LABEL_90:
              LODWORD(v45) = 0;
              goto LABEL_114;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v45) = 0;
        }
        else
        {
          v43 = 0;
          v44 = 0;
          v45 = 0;
          while (1)
          {
            v46 = v40 + 1;
            *((_QWORD *)this + 1) = v40 + 1;
            v47 = *(_BYTE *)(v42 + v40);
            v45 |= (unint64_t)(v47 & 0x7F) << v43;
            if ((v47 & 0x80) == 0)
              break;
            v43 += 7;
            v40 = v46;
            v18 = v44++ > 8;
            if (v18)
              goto LABEL_90;
          }
        }
LABEL_114:
        *(_DWORD *)(a1 + 56) = v45;
        goto LABEL_133;
      }
      if ((_DWORD)v25 == 2)
        break;
      if ((_DWORD)v25 == 1)
      {
        if (v24 != 2)
        {
          v63 = *(char **)(a1 + 16);
          v62 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v63 >= v62)
          {
            v71 = (char *)*v10;
            v72 = (v63 - (_BYTE *)*v10) >> 3;
            v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 61)
LABEL_143:
              sub_18F26F8C0();
            v74 = v62 - (_QWORD)v71;
            if (v74 >> 2 > v73)
              v73 = v74 >> 2;
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
              v75 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v75 = v73;
            if (v75)
            {
              v76 = (char *)sub_18F26F8D4(v11, v75);
              v71 = *(char **)(a1 + 8);
              v63 = *(char **)(a1 + 16);
            }
            else
            {
              v76 = 0;
            }
            v83 = &v76[8 * v72];
            *(_QWORD *)v83 = 0;
            v64 = v83 + 8;
            while (v63 != v71)
            {
              v84 = *((_QWORD *)v63 - 1);
              v63 -= 8;
              *((_QWORD *)v83 - 1) = v84;
              v83 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v83;
            *(_QWORD *)(a1 + 16) = v64;
            *(_QWORD *)(a1 + 24) = &v76[8 * v75];
            if (v71)
              operator delete(v71);
          }
          else
          {
            *(_QWORD *)v63 = 0;
            v64 = v63 + 8;
          }
          *(_QWORD *)(a1 + 16) = v64;
LABEL_129:
          v87 = *((_QWORD *)this + 1);
          if (v87 <= 0xFFFFFFFFFFFFFFF7 && v87 + 8 <= *((_QWORD *)this + 2))
          {
            *(v64 - 1) = *(_QWORD *)(*(_QWORD *)this + v87);
            *((_QWORD *)this + 1) += 8;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_133;
        }
        if ((PB::Reader::placeMark() & 1) != 0)
          return 0;
        v26 = *((_QWORD *)this + 1);
        v27 = *((_QWORD *)this + 2);
        while (v26 < v27 && !*((_BYTE *)this + 24))
        {
          v29 = *(char **)(a1 + 16);
          v28 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v29 >= v28)
          {
            v31 = (char *)*v10;
            v32 = (v29 - (_BYTE *)*v10) >> 3;
            v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 61)
              goto LABEL_143;
            v34 = v28 - (_QWORD)v31;
            if (v34 >> 2 > v33)
              v33 = v34 >> 2;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
              v35 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v35 = v33;
            if (v35)
            {
              v36 = (char *)sub_18F26F8D4(v11, v35);
              v31 = *(char **)(a1 + 8);
              v29 = *(char **)(a1 + 16);
            }
            else
            {
              v36 = 0;
            }
            v37 = &v36[8 * v32];
            *(_QWORD *)v37 = 0;
            v30 = v37 + 8;
            while (v29 != v31)
            {
              v38 = *((_QWORD *)v29 - 1);
              v29 -= 8;
              *((_QWORD *)v37 - 1) = v38;
              v37 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v37;
            *(_QWORD *)(a1 + 16) = v30;
            *(_QWORD *)(a1 + 24) = &v36[8 * v35];
            if (v31)
              operator delete(v31);
          }
          else
          {
            *(_QWORD *)v29 = 0;
            v30 = v29 + 8;
          }
          *(_QWORD *)(a1 + 16) = v30;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)this + 2))
            goto LABEL_93;
          *(v30 - 1) = *(_QWORD *)(*(_QWORD *)this + v39);
          v27 = *((_QWORD *)this + 2);
          v26 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v26;
        }
LABEL_94:
        PB::Reader::recallMark();
        goto LABEL_133;
      }
      if ((PB::Reader::skip(this) & 1) == 0)
        return 0;
LABEL_133:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    if (v24 != 2)
    {
      v70 = *(char **)(a1 + 40);
      v69 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v70 >= v69)
      {
        v77 = (char *)*v8;
        v78 = (v70 - (_BYTE *)*v8) >> 3;
        v79 = v78 + 1;
        if ((unint64_t)(v78 + 1) >> 61)
LABEL_144:
          sub_18F26F8C0();
        v80 = v69 - (_QWORD)v77;
        if (v80 >> 2 > v79)
          v79 = v80 >> 2;
        if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
          v81 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v81 = v79;
        if (v81)
        {
          v82 = (char *)sub_18F26F8D4(v9, v81);
          v77 = *(char **)(a1 + 32);
          v70 = *(char **)(a1 + 40);
        }
        else
        {
          v82 = 0;
        }
        v85 = &v82[8 * v78];
        *(_QWORD *)v85 = 0;
        v64 = v85 + 8;
        while (v70 != v77)
        {
          v86 = *((_QWORD *)v70 - 1);
          v70 -= 8;
          *((_QWORD *)v85 - 1) = v86;
          v85 -= 8;
        }
        *(_QWORD *)(a1 + 32) = v85;
        *(_QWORD *)(a1 + 40) = v64;
        *(_QWORD *)(a1 + 48) = &v82[8 * v81];
        if (v77)
          operator delete(v77);
      }
      else
      {
        *(_QWORD *)v70 = 0;
        v64 = v70 + 8;
      }
      *(_QWORD *)(a1 + 40) = v64;
      goto LABEL_129;
    }
    if ((PB::Reader::placeMark() & 1) != 0)
      return 0;
    v48 = *((_QWORD *)this + 1);
    v49 = *((_QWORD *)this + 2);
    while (v48 < v49 && !*((_BYTE *)this + 24))
    {
      v51 = *(char **)(a1 + 40);
      v50 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v51 >= v50)
      {
        v53 = (char *)*v8;
        v54 = (v51 - (_BYTE *)*v8) >> 3;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 61)
          goto LABEL_144;
        v56 = v50 - (_QWORD)v53;
        if (v56 >> 2 > v55)
          v55 = v56 >> 2;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
          v57 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (v57)
        {
          v58 = (char *)sub_18F26F8D4(v9, v57);
          v53 = *(char **)(a1 + 32);
          v51 = *(char **)(a1 + 40);
        }
        else
        {
          v58 = 0;
        }
        v59 = &v58[8 * v54];
        *(_QWORD *)v59 = 0;
        v52 = v59 + 8;
        while (v51 != v53)
        {
          v60 = *((_QWORD *)v51 - 1);
          v51 -= 8;
          *((_QWORD *)v59 - 1) = v60;
          v59 -= 8;
        }
        *(_QWORD *)(a1 + 32) = v59;
        *(_QWORD *)(a1 + 40) = v52;
        *(_QWORD *)(a1 + 48) = &v58[8 * v57];
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v51 = 0;
        v52 = v51 + 8;
      }
      *(_QWORD *)(a1 + 40) = v52;
      v61 = *((_QWORD *)this + 1);
      if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((_QWORD *)this + 2))
      {
LABEL_93:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_94;
      }
      *(v52 - 1) = *(_QWORD *)(*(_QWORD *)this + v61);
      v49 = *((_QWORD *)this + 2);
      v48 = *((_QWORD *)this + 1) + 8;
      *((_QWORD *)this + 1) = v48;
    }
    goto LABEL_94;
  }
  return v4 == 0;
}

uint64_t sub_18F31C780(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = result;
  v4 = *(double **)(result + 8);
  v5 = *(double **)(result + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(double **)(v3 + 32);
  v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  if ((*(_BYTE *)(v3 + 60) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_18F31C80C(_QWORD *result)
{
  *result = off_1E29444E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_18F31C820(void **a1)
{
  void **v2;

  *a1 = off_1E29444E0;
  v2 = a1 + 1;
  sub_18F26F770(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_18F31C868(void **a1)
{
  void **v3;

  *a1 = off_1E29444E0;
  v3 = a1 + 1;
  sub_18F26F770(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x194001438]();
}

uint64_t sub_18F31C8C4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "joint");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F31C930(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        sub_18F31CAD0(v8);
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F31CAD0(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E2944400;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 56) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_18F26F8C0();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_18F26F8D4(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_18F26FBC0((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_18F31CC18(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F31CC34(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5))
    v5 = *v2++;
  return result;
}

uint64_t sub_18F31CC7C(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950CF8;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_18F31CC94(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31CCB8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    PB::TextFormatter::format(this, "userActivity");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F31CD04(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F31CF38(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F31CF58(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944AC8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_18F31CF70(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31CF94(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F31CFFC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          goto LABEL_28;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_33;
        }
        *(_BYTE *)(a1 + 24) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      v2 = *((_QWORD *)this + 1) + 8;
      *((_QWORD *)this + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_18F31D1D4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

uint64_t sub_18F31D22C(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944B00;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_18F31D244(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31D268(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "inlierCount");
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isOutlierCurrentSample");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "isValidMeasurement");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "range", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "rangeShift", *(float *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 40) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "rangeFrequency", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 2) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F31D378(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_43;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_30;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_43;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_30:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_61;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_66;
                  }
                  v33 = v21++;
                  v34 = *(_BYTE *)(v22 + v33);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_65:
                    v2 = v33 + 1;
                    goto LABEL_66;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_65;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_66;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_66:
              *(_DWORD *)(a1 + 24) = v25;
LABEL_67:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_43;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_60;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_60:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_61:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_43:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_67;
            case 6u:
              *(_BYTE *)(a1 + 40) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 36) = v28;
              goto LABEL_67;
            case 7u:
              *(_BYTE *)(a1 + 40) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 37) = v30;
              goto LABEL_67;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_67;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F31D750(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_14:
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 40) & 0x40) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F31D838(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944C88;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F31D850(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31D874(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "isStart");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F31D8DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F31DAC0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F31DB18(uint64_t result)
{
  *(_QWORD *)result = &off_1E29448D0;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_18F31DB30(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31DB54(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x200) != 0)
  {
    PB::TextFormatter::format(this, "distanceFromParticleFilter", *(float *)(a1 + 80));
    v5 = *(_WORD *)(a1 + 92);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "horizontalAngle", *(double *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "horizontalAngleUncertainty", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "horizontalAngleUncertaintyUnfiltered", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "isConverged");
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "isDistanceValid");
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "positionX", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "positionY", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "positionZ", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "revokeReason");
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_12:
    if ((v5 & 0x80) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(this, "velocityX", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 92) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x80) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 0x100) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "velocityY", *(double *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F31DD24(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 92) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 2u:
              *(_WORD *)(a1 + 92) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 3u:
              *(_WORD *)(a1 + 92) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 4u:
              *(_WORD *)(a1 + 92) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 5u:
              *(_WORD *)(a1 + 92) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 6u:
              *(_WORD *)(a1 + 92) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 7u:
              *(_WORD *)(a1 + 92) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 8u:
              *(_WORD *)(a1 + 92) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_77;
            case 9u:
              *(_WORD *)(a1 + 92) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 88) = v22;
              goto LABEL_84;
            case 0xAu:
              *(_WORD *)(a1 + 92) |= 0x400u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_83;
                  }
                  v33 = v23++;
                  v34 = *(_BYTE *)(v24 + v33);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_82:
                    v2 = v33 + 1;
                    goto LABEL_83;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_82;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_83;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_83:
              *(_DWORD *)(a1 + 84) = v27;
LABEL_84:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xBu:
              *(_WORD *)(a1 + 92) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_78;
            case 0xCu:
              *(_WORD *)(a1 + 92) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 89) = v30;
              goto LABEL_84;
            case 0xDu:
              *(_WORD *)(a1 + 92) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_77:
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_78:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_84;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_84;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F31E24C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 92);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 56));
    v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x800) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 48));
  }
LABEL_26:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 92) & 0x20) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 48));
  return result;
}

uint64_t sub_18F31E3DC(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944CC0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_18F31E3F4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31E418(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "noiseVelocityX", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "noiseVelocityY", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "speed", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "speedUncertainty", *(float *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
LABEL_16:
    PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 44) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
LABEL_17:
    PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 40));
    return PB::TextFormatter::endObject(this);
  }
LABEL_15:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x40) != 0)
    goto LABEL_16;
LABEL_8:
  if (v5 < 0)
    goto LABEL_17;
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F31E548(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 44) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_50;
        case 2u:
          *(_BYTE *)(a1 + 44) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 3u:
          *(_BYTE *)(a1 + 44) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 4u:
          *(_BYTE *)(a1 + 44) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 5u:
          *(_BYTE *)(a1 + 44) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 6u:
          *(_BYTE *)(a1 + 44) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 7u:
          *(_BYTE *)(a1 + 44) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_49;
        case 8u:
          *(_BYTE *)(a1 + 44) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          {
LABEL_47:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_49:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_50:
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F31E88C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24));
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 44) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24));
  return result;
}

uint64_t sub_18F31E990(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944B70;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_18F31E9A8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31E9CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "fractionAboveThreshold", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "horizontalDistance", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "isAboveBelow");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "isAboveBelowMessageShowing");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "isConverged");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "likelihoodAboveThreshold", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
    if ((*(_WORD *)(a1 + 60) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "relativeAltitude", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x20) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "verticalDistance", *(double *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F31EB1C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 60) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_43;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 2u:
          *(_WORD *)(a1 + 60) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_43;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 3u:
          *(_WORD *)(a1 + 60) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_43;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 4u:
          *(_WORD *)(a1 + 60) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_43;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 5u:
          *(_WORD *)(a1 + 60) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_43;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_55;
        case 6u:
          *(_WORD *)(a1 + 60) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_55:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_43:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        case 7u:
          *(_WORD *)(a1 + 60) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v24 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v24 = v23 != 0;
          }
          *(_BYTE *)(a1 + 58) = v24;
          break;
        case 8u:
          *(_WORD *)(a1 + 60) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v21 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v21 = v20 != 0;
          }
          *(_BYTE *)(a1 + 56) = v21;
          break;
        case 9u:
          *(_WORD *)(a1 + 60) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v26 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v26 = v25 != 0;
          }
          *(_BYTE *)(a1 + 57) = v26;
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F31EEB4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 60);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40));
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_18:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 60) & 0x80) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F31EFD4(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951078;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_18F31EFEC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31F010(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "lastStateTimestamp", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 80);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "qStartW", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "qStartX", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "qStartY", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "qStartZ", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "qStopW", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "qStopX", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "qStopY", *(float *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "qStopZ", *(float *)(a1 + 60));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "rBoresightX", *(float *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "rBoresightY", *(float *)(a1 + 68));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "rBoresightZ", *(float *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 4) == 0)
      goto LABEL_15;
LABEL_31:
    PB::TextFormatter::format(this, "targetTimestamp", *(double *)(a1 + 24));
    if ((*(_WORD *)(a1 + 80) & 0x4000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_16;
  }
LABEL_30:
  PB::TextFormatter::format(this, "srcTimestamp", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 4) != 0)
    goto LABEL_31;
LABEL_15:
  if ((v5 & 0x4000) != 0)
LABEL_16:
    PB::TextFormatter::format(this, "useForwardPrediction");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F31F220(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 80) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_65;
        case 2u:
          *(_WORD *)(a1 + 80) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_65;
        case 3u:
          *(_WORD *)(a1 + 80) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 4u:
          *(_WORD *)(a1 + 80) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 5u:
          *(_WORD *)(a1 + 80) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 6u:
          *(_WORD *)(a1 + 80) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 7u:
          *(_WORD *)(a1 + 80) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 8u:
          *(_WORD *)(a1 + 80) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 9u:
          *(_WORD *)(a1 + 80) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 0xAu:
          *(_WORD *)(a1 + 80) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 0xBu:
          *(_WORD *)(a1 + 80) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 0xCu:
          *(_WORD *)(a1 + 80) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_72;
        case 0xDu:
          *(_WORD *)(a1 + 80) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_68;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_72:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_73;
        case 0xEu:
          *(_WORD *)(a1 + 80) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v22 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v22 = v21 != 0;
          }
          *(_BYTE *)(a1 + 76) = v22;
          break;
        case 0xFu:
          *(_WORD *)(a1 + 80) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_68:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_65:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_73:
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F31F6F8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 80);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_30:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 80) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_18F31F8C0(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951FD0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_18F31F8D8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31F8FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 4) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 24) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "pressure", *(float *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 4) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 1) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F31F98C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_36:
        v2 = *((_QWORD *)this + 1) + 4;
        goto LABEL_37;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        goto LABEL_38;
      }
      *(_BYTE *)(a1 + 24) |= 1u;
      v2 = *((_QWORD *)this + 1);
      if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
      {
LABEL_32:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_38;
      }
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
      v2 = *((_QWORD *)this + 1) + 8;
LABEL_37:
      *((_QWORD *)this + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 24) |= 4u;
    v2 = *((_QWORD *)this + 1);
    if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
      goto LABEL_32;
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t sub_18F31FBAC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      return PB::Writer::write(this, *(float *)(v3 + 20));
    }
  }
  else if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 24) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 20));
  return result;
}

uint64_t sub_18F31FC24(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F088;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F31FC3C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F31FC60(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "inertialX", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "inertialY", *(float *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "inertialZ", *(float *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "medTocFactoryTemp", *(float *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 32) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "maxTemp", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "medianToc", *(float *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F31FD50(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 5u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_41;
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 6u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_43:
            v2 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_41:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F32001C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 28));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 16));
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 12));
  if ((*(_BYTE *)(v3 + 32) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16));
  return result;
}

_QWORD *sub_18F3200E8(_QWORD *result)
{
  *result = &off_1E294F0C0;
  result[1] = 0;
  return result;
}

void sub_18F3200F8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294F0C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F320138(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294F0C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F32018C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F3201DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_1E2951FD0;
        v20[6] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F3203B0(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F3203CC(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!result[1])
  {
    v1 = result;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E2951FD0;
    *(_DWORD *)(v2 + 24) = 0;
    result = (_QWORD *)v1[1];
    v1[1] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *sub_18F32043C(_QWORD *result)
{
  *result = &off_1E294E288;
  result[1] = 0;
  return result;
}

void sub_18F32044C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294E288;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F32048C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294E288;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3204E0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F320530(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_1E2951FD0;
        v20[6] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F320704(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_18F320720(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950940;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_18F320738(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2950940;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F32077C(PB::Base *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E2950940;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3207D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F320840(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        v21 = (_DWORD *)operator new();
        *(_QWORD *)v21 = &off_1E29510B0;
        v21[5] = 0;
        v22 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v21;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v21 = *(_DWORD **)(a1 + 16);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v20 = *((_QWORD *)this + 1);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v20);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F320A74(uint64_t result)
{
  *(_QWORD *)result = &off_1E29510B0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_18F320A88(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  if ((*(_BYTE *)(result + 24) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 8));
  v4 = *(const PB::Base **)(v3 + 16);
  if (v4)
    return PB::Writer::writeSubmessage(this, v4);
  return result;
}

void sub_18F320AE0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F320B04(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "pressure", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F320B6C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F320DF8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16));
  return result;
}

_QWORD *sub_18F320E50(_QWORD *result)
{
  *result = &off_1E294CD50;
  result[1] = 0;
  return result;
}

void sub_18F320E60(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294CD50;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F320EA0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294CD50;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F320EF4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F320F44(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_1E2951FD0;
        v20[6] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F321118(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F321134(_QWORD *result)
{
  *result = &off_1E294E2C0;
  result[1] = 0;
  return result;
}

void sub_18F321144(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294E2C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F321184(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294E2C0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3211D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F321228(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_1E2951FD0;
        v20[6] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F3213FC(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_18F321418(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E2F8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_18F321434(PB::Base *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E294E2F8;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F32148C(PB::Base *a1)
{
  sub_18F321434(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3214B0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    PB::TextFormatter::format(this, "originalTimestamp", *(double *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "pose");
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "velocity", v8);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F321550(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v17 = 0;
        v18 = 0;
        v13 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v10 + v2);
          *((_QWORD *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0)
            goto LABEL_21;
          v17 += 7;
          v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            v13 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v22 = v13 >> 3;
      if ((v13 >> 3) == 3)
        break;
      if ((_DWORD)v22 == 2)
      {
        if ((v13 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          while (v26 < v27 && !*((_BYTE *)this + 24))
          {
            v29 = *(char **)(a1 + 16);
            v28 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v8;
              v32 = (v29 - (_BYTE *)*v8) >> 3;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61)
                goto LABEL_89;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 2 > v33)
                v33 = v34 >> 2;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                v35 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_18F26F8D4(v9, v35);
                v31 = *(char **)(a1 + 8);
                v29 = *(char **)(a1 + 16);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[8 * v32];
              *(_QWORD *)v37 = 0;
              v30 = v37 + 8;
              while (v29 != v31)
              {
                v38 = *((_QWORD *)v29 - 1);
                v29 -= 8;
                *((_QWORD *)v37 - 1) = v38;
                v37 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v37;
              *(_QWORD *)(a1 + 16) = v30;
              *(_QWORD *)(a1 + 24) = &v36[8 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_QWORD *)v29 = 0;
              v30 = v29 + 8;
            }
            *(_QWORD *)(a1 + 16) = v30;
            v39 = *((_QWORD *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)this + 2))
            {
              *((_BYTE *)this + 24) = 1;
              break;
            }
            *(v30 - 1) = *(_QWORD *)(*(_QWORD *)this + v39);
            v27 = *((_QWORD *)this + 2);
            v26 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v26;
          }
LABEL_29:
          PB::Reader::recallMark();
          goto LABEL_81;
        }
        v41 = *(char **)(a1 + 16);
        v40 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v41 >= v40)
        {
          v43 = (char *)*v8;
          v44 = (v41 - (_BYTE *)*v8) >> 3;
          v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 61)
LABEL_89:
            sub_18F26F8C0();
          v46 = v40 - (_QWORD)v43;
          if (v46 >> 2 > v45)
            v45 = v46 >> 2;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
            v47 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v47 = v45;
          if (v47)
          {
            v48 = (char *)sub_18F26F8D4(v9, v47);
            v43 = *(char **)(a1 + 8);
            v41 = *(char **)(a1 + 16);
          }
          else
          {
            v48 = 0;
          }
          v49 = &v48[8 * v44];
          *(_QWORD *)v49 = 0;
          v42 = v49 + 8;
          while (v41 != v43)
          {
            v50 = *((_QWORD *)v41 - 1);
            v41 -= 8;
            *((_QWORD *)v49 - 1) = v50;
            v49 -= 8;
          }
          *(_QWORD *)(a1 + 8) = v49;
          *(_QWORD *)(a1 + 16) = v42;
          *(_QWORD *)(a1 + 24) = &v48[8 * v47];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *(_QWORD *)v41 = 0;
          v42 = v41 + 8;
        }
        *(_QWORD *)(a1 + 16) = v42;
        v51 = *((_QWORD *)this + 1);
        if (v51 > 0xFFFFFFFFFFFFFFF7 || v51 + 8 > *((_QWORD *)this + 2))
        {
LABEL_78:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_81;
        }
        *(v42 - 1) = *(_QWORD *)(*(_QWORD *)this + v51);
        goto LABEL_80;
      }
      if ((_DWORD)v22 == 1)
      {
        v23 = operator new();
        *(_QWORD *)v23 = &off_1E2951B68;
        *(_DWORD *)(v23 + 64) = 0;
        *(_OWORD *)(v23 + 8) = 0u;
        *(_OWORD *)(v23 + 24) = 0u;
        *(_OWORD *)(v23 + 40) = 0u;
        v24 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v23;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v23 = *(_QWORD *)(a1 + 40);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v23 + 16))(v23, this) & 1) == 0)
        {
          return 0;
        }
        goto LABEL_29;
      }
      if ((PB::Reader::skip(this) & 1) == 0)
        return 0;
LABEL_81:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 48) |= 1u;
    v25 = *((_QWORD *)this + 1);
    if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
      goto LABEL_78;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v25);
LABEL_80:
    *((_QWORD *)this + 1) += 8;
    goto LABEL_81;
  }
  return v4 == 0;
}

uint64_t sub_18F321994(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;

  v3 = result;
  v4 = *(const PB::Base **)(result + 40);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  if ((*(_BYTE *)(v3 + 48) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 32));
  return result;
}

uint64_t sub_18F321A14(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951BA0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F321A2C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F321A50(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "detectionMask");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F321AB8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F321D44(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F321D9C(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950978;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_18F321DB4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F321DD8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "baselineError", *(float *)(a1 + 16));
    v5 = *(_DWORD *)(a1 + 88);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "covariancePostMeasurement00", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "covariancePostMeasurement01", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "covariancePostMeasurement11", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "covariancePreMeasurement00", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "covariancePreMeasurement01", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "covariancePreMeasurement11", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "estimate", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "factoryXTalk", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "gain", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "intensity", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "measurement", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x40000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "possibleObstructed");
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "proxBufferMax", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "proxBufferVariance", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "sensitivityCal", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
LABEL_39:
    PB::TextFormatter::format(this, "temperatureCalError", *(float *)(a1 + 80));
    if ((*(_DWORD *)(a1 + 88) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_20;
  }
LABEL_38:
  PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x20000) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v5 & 1) != 0)
LABEL_20:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F322068(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 88) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_104;
                  }
                  v31 = v20++;
                  v32 = *(_BYTE *)(v21 + v31);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_103:
                v2 = v31 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_104;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_104:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_95;
            case 2u:
              *(_DWORD *)(a1 + 88) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 3u:
              *(_DWORD *)(a1 + 88) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 4u:
              *(_DWORD *)(a1 + 88) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 5u:
              *(_DWORD *)(a1 + 88) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 6u:
              *(_DWORD *)(a1 + 88) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 7u:
              *(_DWORD *)(a1 + 88) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 8u:
              *(_DWORD *)(a1 + 88) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 84) = v28;
              goto LABEL_95;
            case 9u:
              *(_DWORD *)(a1 + 88) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xAu:
              *(_DWORD *)(a1 + 88) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xBu:
              *(_DWORD *)(a1 + 88) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xCu:
              *(_DWORD *)(a1 + 88) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xDu:
              *(_DWORD *)(a1 + 88) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xEu:
              *(_DWORD *)(a1 + 88) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0xFu:
              *(_DWORD *)(a1 + 88) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0x10u:
              *(_DWORD *)(a1 + 88) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0x11u:
              *(_DWORD *)(a1 + 88) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0x12u:
              *(_DWORD *)(a1 + 88) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_83;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_94;
            case 0x13u:
              *(_DWORD *)(a1 + 88) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_94:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_83:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_95;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_95:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F3226CC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 88);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 88);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x4000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 4) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_16:
    if ((v4 & 8) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 48));
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  if ((*(_DWORD *)(v3 + 88) & 0x200) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 48));
  return result;
}

double sub_18F322904(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294DDF0;
  *(_DWORD *)(a1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_18F322928(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E294DDF0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F322978(PB::Base *a1)
{
  sub_18F322928(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F32299C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  char v12;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 72);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "bC150RXAVE", *(float *)(a1 + 56));
    v5 = *(_BYTE *)(a1 + 72);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "gC0RXAVE", *(float *)(a1 + 60));
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "ntcRamp", v8);
  }
  v9 = *(float **)(a1 + 32);
  v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "rxXT", v11);
  }
  v12 = *(_BYTE *)(a1 + 72);
  if ((v12 & 4) != 0)
  {
    PB::TextFormatter::format(this, "versionPxCL");
    v12 = *(_BYTE *)(a1 + 72);
  }
  if ((v12 & 8) != 0)
    PB::TextFormatter::format(this, "versionPxTC");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F322AA4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  int v69;
  unint64_t v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  char *v80;
  _DWORD *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  int v97;
  char *v98;
  int v99;
  unint64_t v100;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 72) |= 2u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)this + 2))
            goto LABEL_154;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v25);
          goto LABEL_31;
        case 2u:
          *(_BYTE *)(a1 + 72) |= 1u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)this + 2))
            goto LABEL_154;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v26);
LABEL_31:
          *((_QWORD *)this + 1) += 4;
          goto LABEL_156;
        case 3u:
          *(_BYTE *)(a1 + 72) |= 4u;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          v29 = *(_QWORD *)this;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v33 = v27 + 1;
              *((_QWORD *)this + 1) = v27 + 1;
              v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0)
                goto LABEL_134;
              v30 += 7;
              v27 = v33;
              v18 = v31++ > 8;
            }
            while (!v18);
LABEL_100:
            LODWORD(v32) = 0;
            goto LABEL_134;
          }
          v71 = 0;
          v72 = 0;
          v32 = 0;
          if (v28 <= v27)
            v28 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v28 == v27)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v73 = v27 + 1;
              v74 = *(_BYTE *)(v29 + v27);
              *((_QWORD *)this + 1) = v73;
              v32 |= (unint64_t)(v74 & 0x7F) << v71;
              if (v74 < 0)
              {
                v71 += 7;
                v27 = v73;
                v18 = v72++ > 8;
                if (v18)
                  goto LABEL_100;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v32) = 0;
            }
            break;
          }
LABEL_134:
          *(_DWORD *)(a1 + 64) = v32;
          goto LABEL_156;
        case 4u:
          *(_BYTE *)(a1 + 72) |= 8u;
          v35 = *((_QWORD *)this + 1);
          v36 = *((_QWORD *)this + 2);
          v37 = *(_QWORD *)this;
          if (v35 <= 0xFFFFFFFFFFFFFFF5 && v35 + 10 <= v36)
          {
            v38 = 0;
            v39 = 0;
            v40 = 0;
            do
            {
              v41 = v35 + 1;
              *((_QWORD *)this + 1) = v35 + 1;
              v42 = *(_BYTE *)(v37 + v35);
              v40 |= (unint64_t)(v42 & 0x7F) << v38;
              if ((v42 & 0x80) == 0)
                goto LABEL_137;
              v38 += 7;
              v35 = v41;
              v18 = v39++ > 8;
            }
            while (!v18);
LABEL_107:
            LODWORD(v40) = 0;
            goto LABEL_137;
          }
          v75 = 0;
          v76 = 0;
          v40 = 0;
          if (v36 <= v35)
            v36 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v36 == v35)
            {
              LODWORD(v40) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v77 = v35 + 1;
              v78 = *(_BYTE *)(v37 + v35);
              *((_QWORD *)this + 1) = v77;
              v40 |= (unint64_t)(v78 & 0x7F) << v75;
              if (v78 < 0)
              {
                v75 += 7;
                v35 = v77;
                v18 = v76++ > 8;
                if (v18)
                  goto LABEL_107;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v40) = 0;
            }
            break;
          }
LABEL_137:
          *(_DWORD *)(a1 + 68) = v40;
          goto LABEL_156;
        case 5u:
          if (v24 != 2)
          {
            v80 = *(char **)(a1 + 16);
            v79 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v80 >= v79)
            {
              v84 = (char *)*v10;
              v85 = (v80 - (_BYTE *)*v10) >> 2;
              v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 62)
LABEL_166:
                sub_18F26F8C0();
              v87 = v79 - (_QWORD)v84;
              if (v87 >> 1 > v86)
                v86 = v87 >> 1;
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                v88 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v88 = v86;
              if (v88)
              {
                v89 = (char *)sub_18F26FB8C(v11, v88);
                v84 = *(char **)(a1 + 8);
                v80 = *(char **)(a1 + 16);
              }
              else
              {
                v89 = 0;
              }
              v96 = &v89[4 * v85];
              *(_DWORD *)v96 = 0;
              v81 = v96 + 4;
              while (v80 != v84)
              {
                v97 = *((_DWORD *)v80 - 1);
                v80 -= 4;
                *((_DWORD *)v96 - 1) = v97;
                v96 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v96;
              *(_QWORD *)(a1 + 16) = v81;
              *(_QWORD *)(a1 + 24) = &v89[4 * v88];
              if (v84)
                operator delete(v84);
            }
            else
            {
              *(_DWORD *)v80 = 0;
              v81 = v80 + 4;
            }
            *(_QWORD *)(a1 + 16) = v81;
            goto LABEL_152;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v43 = *((_QWORD *)this + 1);
          v44 = *((_QWORD *)this + 2);
          while (v43 < v44 && !*((_BYTE *)this + 24))
          {
            v46 = *(char **)(a1 + 16);
            v45 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v46 >= v45)
            {
              v48 = (char *)*v10;
              v49 = (v46 - (_BYTE *)*v10) >> 2;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                goto LABEL_166;
              v51 = v45 - (_QWORD)v48;
              if (v51 >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)sub_18F26FB8C(v11, v52);
                v48 = *(char **)(a1 + 8);
                v46 = *(char **)(a1 + 16);
              }
              else
              {
                v53 = 0;
              }
              v54 = &v53[4 * v49];
              *(_DWORD *)v54 = 0;
              v47 = v54 + 4;
              while (v46 != v48)
              {
                v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v54;
              *(_QWORD *)(a1 + 16) = v47;
              *(_QWORD *)(a1 + 24) = &v53[4 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *(_DWORD *)v46 = 0;
              v47 = v46 + 4;
            }
            *(_QWORD *)(a1 + 16) = v47;
            v56 = *((_QWORD *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
              goto LABEL_112;
            *(v47 - 1) = *(_DWORD *)(*(_QWORD *)this + v56);
            v44 = *((_QWORD *)this + 2);
            v43 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v43;
          }
          goto LABEL_113;
        case 6u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v57 = *((_QWORD *)this + 1);
            v58 = *((_QWORD *)this + 2);
            while (v57 < v58 && !*((_BYTE *)this + 24))
            {
              v60 = *(char **)(a1 + 40);
              v59 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v60 >= v59)
              {
                v62 = (char *)*v8;
                v63 = (v60 - (_BYTE *)*v8) >> 2;
                v64 = v63 + 1;
                if ((unint64_t)(v63 + 1) >> 62)
                  goto LABEL_167;
                v65 = v59 - (_QWORD)v62;
                if (v65 >> 1 > v64)
                  v64 = v65 >> 1;
                if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
                  v66 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v66 = v64;
                if (v66)
                {
                  v67 = (char *)sub_18F26FB8C(v9, v66);
                  v62 = *(char **)(a1 + 32);
                  v60 = *(char **)(a1 + 40);
                }
                else
                {
                  v67 = 0;
                }
                v68 = &v67[4 * v63];
                *(_DWORD *)v68 = 0;
                v61 = v68 + 4;
                while (v60 != v62)
                {
                  v69 = *((_DWORD *)v60 - 1);
                  v60 -= 4;
                  *((_DWORD *)v68 - 1) = v69;
                  v68 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v68;
                *(_QWORD *)(a1 + 40) = v61;
                *(_QWORD *)(a1 + 48) = &v67[4 * v66];
                if (v62)
                  operator delete(v62);
              }
              else
              {
                *(_DWORD *)v60 = 0;
                v61 = v60 + 4;
              }
              *(_QWORD *)(a1 + 40) = v61;
              v70 = *((_QWORD *)this + 1);
              if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
              {
LABEL_112:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v61 - 1) = *(_DWORD *)(*(_QWORD *)this + v70);
              v58 = *((_QWORD *)this + 2);
              v57 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v57;
            }
LABEL_113:
            PB::Reader::recallMark();
          }
          else
          {
            v83 = *(char **)(a1 + 40);
            v82 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v83 >= v82)
            {
              v90 = (char *)*v8;
              v91 = (v83 - (_BYTE *)*v8) >> 2;
              v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62)
LABEL_167:
                sub_18F26F8C0();
              v93 = v82 - (_QWORD)v90;
              if (v93 >> 1 > v92)
                v92 = v93 >> 1;
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
                v94 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v94 = v92;
              if (v94)
              {
                v95 = (char *)sub_18F26FB8C(v9, v94);
                v90 = *(char **)(a1 + 32);
                v83 = *(char **)(a1 + 40);
              }
              else
              {
                v95 = 0;
              }
              v98 = &v95[4 * v91];
              *(_DWORD *)v98 = 0;
              v81 = v98 + 4;
              while (v83 != v90)
              {
                v99 = *((_DWORD *)v83 - 1);
                v83 -= 4;
                *((_DWORD *)v98 - 1) = v99;
                v98 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v98;
              *(_QWORD *)(a1 + 40) = v81;
              *(_QWORD *)(a1 + 48) = &v95[4 * v94];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *(_DWORD *)v83 = 0;
              v81 = v83 + 4;
            }
            *(_QWORD *)(a1 + 40) = v81;
LABEL_152:
            v100 = *((_QWORD *)this + 1);
            if (v100 <= 0xFFFFFFFFFFFFFFFBLL && v100 + 4 <= *((_QWORD *)this + 2))
            {
              *(v81 - 1) = *(_DWORD *)(*(_QWORD *)this + v100);
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_154:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_156:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_156;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F323238(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  v3 = result;
  v4 = *(_BYTE *)(result + 72);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 60));
    v4 = *(_BYTE *)(v3 + 72);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
LABEL_15:
      result = PB::Writer::writeVarInt(this);
      if ((*(_BYTE *)(v3 + 72) & 8) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(result + 72) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_BYTE *)(v3 + 72);
  if ((v4 & 4) != 0)
    goto LABEL_15;
LABEL_4:
  if ((v4 & 8) != 0)
LABEL_5:
    result = PB::Writer::writeVarInt(this);
LABEL_6:
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v9 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v9 != v8)
  {
    v10 = *v9++;
    result = PB::Writer::write(this, v10);
  }
  return result;
}

uint64_t sub_18F323310(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951E10;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_18F323328(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F32334C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "ambient", *(float *)(a1 + 16));
    v5 = *(_WORD *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "baselineConfidence", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "intensity", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "intensityBaselineDelta", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "intensityCalDelta", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "pocketFlag");
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "pocketProbability", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(this, "scanFlags");
    if ((*(_WORD *)(a1 + 48) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(this, "rxNtcC", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x200) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 1) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F3234BC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 48) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_73;
                  }
                  v33 = v20++;
                  v34 = *(_BYTE *)(v21 + v33);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_72:
                v2 = v33 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_73;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_73:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_74;
            case 2u:
              *(_WORD *)(a1 + 48) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_68;
            case 3u:
              *(_WORD *)(a1 + 48) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_68;
            case 4u:
              *(_WORD *)(a1 + 48) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_68;
            case 5u:
              *(_WORD *)(a1 + 48) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_68;
            case 6u:
              *(_WORD *)(a1 + 48) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_68;
            case 7u:
              *(_WORD *)(a1 + 48) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_68;
            case 8u:
              *(_WORD *)(a1 + 48) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_68:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_51:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_74;
            case 9u:
              *(_WORD *)(a1 + 48) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 45) = v28;
              goto LABEL_74;
            case 0xAu:
              *(_WORD *)(a1 + 48) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 44) = v30;
              goto LABEL_74;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_74:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F323934(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 48);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_20:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 48) & 0x100) != 0)
    return PB::Writer::write(this);
  return result;
}

_QWORD *sub_18F323A70(_QWORD *result)
{
  *result = &off_1E2952008;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_18F323A84(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2952008;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_18F323AC4(PB::Base *a1)
{
  sub_18F323A84(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F323AE8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  while (v5 != v6)
  {
    v5 += 4;
    PB::TextFormatter::format(this, "volts");
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F323B4C(_QWORD *a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  unint64_t v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  char v66;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 1);
    v9 = a1 + 3;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v34 = v12++ > 8;
        if (v34)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 1)
      {
        if ((v13 & 7) == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
          {
            v21 = (char *)a1[2];
            do
            {
              if ((unint64_t)v21 >= *v9)
              {
                v22 = (char *)*v8;
                v23 = (v21 - (_BYTE *)*v8) >> 2;
                v24 = v23 + 1;
                if ((unint64_t)(v23 + 1) >> 62)
                  goto LABEL_118;
                v25 = *v9 - (_QWORD)v22;
                if (v25 >> 1 > v24)
                  v24 = v25 >> 1;
                if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
                  v26 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v26 = v24;
                if (v26)
                {
                  v27 = (char *)sub_18F26FB8C((uint64_t)v9, v26);
                  v22 = (char *)a1[1];
                  v21 = (char *)a1[2];
                }
                else
                {
                  v27 = 0;
                }
                v28 = &v27[4 * v23];
                *(_DWORD *)v28 = 0;
                v29 = v28 + 4;
                while (v21 != v22)
                {
                  v30 = *((_DWORD *)v21 - 1);
                  v21 -= 4;
                  *((_DWORD *)v28 - 1) = v30;
                  v28 -= 4;
                }
                a1[1] = v28;
                a1[2] = v29;
                a1[3] = &v27[4 * v26];
                if (v22)
                  operator delete(v22);
                v21 = v29;
              }
              else
              {
                *(_DWORD *)v21 = 0;
                v21 += 4;
              }
              a1[2] = v21;
              v32 = *((_QWORD *)this + 1);
              v31 = *((_QWORD *)this + 2);
              v33 = *(_QWORD *)this;
              v34 = v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v31;
              if (!v34)
              {
                v40 = 0;
                v41 = 0;
                v42 = 0;
                while (1)
                {
                  v43 = v32 + 1;
                  *((_QWORD *)this + 1) = v32 + 1;
                  v44 = *(_BYTE *)(v33 + v32);
                  v42 |= (unint64_t)(v44 & 0x7F) << v40;
                  if ((v44 & 0x80) == 0)
                    goto LABEL_65;
                  v40 += 7;
                  v32 = v43;
                  v34 = v41++ > 8;
                  if (v34)
                  {
                    LODWORD(v42) = 0;
                    goto LABEL_65;
                  }
                }
              }
              v35 = 0;
              v36 = 0;
              v42 = 0;
              if (v31 <= v32)
                v37 = *((_QWORD *)this + 1);
              else
                v37 = *((_QWORD *)this + 2);
              while (1)
              {
                if (v37 == v32)
                {
                  *((_BYTE *)this + 24) = 1;
                  *((_DWORD *)v21 - 1) = 0;
                  goto LABEL_81;
                }
                v38 = v32++;
                v39 = *(_BYTE *)(v33 + v38);
                *((_QWORD *)this + 1) = v32;
                v42 |= (unint64_t)(v39 & 0x7F) << v35;
                if ((v39 & 0x80) == 0)
                  break;
                v35 += 7;
                v34 = v36++ > 8;
                if (v34)
                {
                  LODWORD(v42) = 0;
                  goto LABEL_64;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v42) = 0;
LABEL_64:
              v43 = v38 + 1;
LABEL_65:
              *((_DWORD *)v21 - 1) = v42;
            }
            while (v43 < v31 && !*((_BYTE *)this + 24));
          }
LABEL_81:
          PB::Reader::recallMark();
        }
        else
        {
          v46 = (char *)a1[2];
          v45 = a1[3];
          if ((unint64_t)v46 >= v45)
          {
            v48 = (char *)*v8;
            v49 = (v46 - (_BYTE *)*v8) >> 2;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 62)
LABEL_118:
              sub_18F26F8C0();
            v51 = v45 - (_QWORD)v48;
            if (v51 >> 1 > v50)
              v50 = v51 >> 1;
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
              v52 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v52 = v50;
            if (v52)
            {
              v53 = (char *)sub_18F26FB8C((uint64_t)v9, v52);
              v48 = (char *)a1[1];
              v46 = (char *)a1[2];
            }
            else
            {
              v53 = 0;
            }
            v54 = &v53[4 * v49];
            *(_DWORD *)v54 = 0;
            v47 = v54 + 4;
            while (v46 != v48)
            {
              v55 = *((_DWORD *)v46 - 1);
              v46 -= 4;
              *((_DWORD *)v54 - 1) = v55;
              v54 -= 4;
            }
            a1[1] = v54;
            a1[2] = v47;
            a1[3] = &v53[4 * v52];
            if (v48)
              operator delete(v48);
          }
          else
          {
            *(_DWORD *)v46 = 0;
            v47 = v46 + 4;
          }
          a1[2] = v47;
          v56 = *((_QWORD *)this + 1);
          v57 = *((_QWORD *)this + 2);
          v58 = *(_QWORD *)this;
          v59 = 0;
          v60 = 0;
          if (v56 > 0xFFFFFFFFFFFFFFF5 || v56 + 10 > v57)
          {
            v64 = 0;
            if (v57 <= v56)
              v57 = *((_QWORD *)this + 1);
            while (1)
            {
              if (v57 == v56)
              {
                LODWORD(v64) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_107;
              }
              v62 = v56 + 1;
              v63 = *(_BYTE *)(v58 + v56);
              *((_QWORD *)this + 1) = v62;
              v64 |= (unint64_t)(v63 & 0x7F) << v59;
              if ((v63 & 0x80) == 0)
                break;
              v59 += 7;
              v56 = v62;
              v34 = v60++ > 8;
              if (v34)
              {
LABEL_103:
                LODWORD(v64) = 0;
                goto LABEL_107;
              }
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v64) = 0;
          }
          else
          {
            v64 = 0;
            while (1)
            {
              v65 = v56 + 1;
              *((_QWORD *)this + 1) = v56 + 1;
              v66 = *(_BYTE *)(v58 + v56);
              v64 |= (unint64_t)(v66 & 0x7F) << v59;
              if ((v66 & 0x80) == 0)
                break;
              v59 += 7;
              v56 = v65;
              v34 = v60++ > 8;
              if (v34)
                goto LABEL_103;
            }
          }
LABEL_107:
          *(v47 - 1) = v64;
        }
      }
      else if ((PB::Reader::skip(this) & 1) == 0)
      {
        return 0;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v18;
      v13 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F323FF8(uint64_t result, PB::Writer *this)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(result + 8);
  for (i = *(_QWORD *)(result + 16); v2 != i; result = PB::Writer::writeVarInt(this))
    v2 += 4;
  return result;
}

uint64_t sub_18F324040(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F0F8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_18F324054(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E294F0F8;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_18F26F7EC((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

void sub_18F324094(PB::Base *a1)
{
  sub_18F324054(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3240B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format();
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    PB::TextFormatter::format(this, "value", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F32411C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v24 = *((_QWORD *)this + 1);
        if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v24);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((v12 >> 3) == 1)
      {
        v21 = (_QWORD *)operator new();
        v21[1] = 0;
        v21[2] = 0;
        *v21 = 0;
        v26 = 0;
        v22 = *v8;
        *v8 = (uint64_t)v21;
        if (v22)
        {
          sub_18F26F7EC((uint64_t)v8, v22);
          v23 = v26;
          v26 = 0;
          if (v23)
            sub_18F26F7EC((uint64_t)&v26, v23);
        }
        PB::Reader::read();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F324320(uint64_t result, PB::Writer *this)
{
  uint64_t v3;

  v3 = result;
  if (*(_QWORD *)(result + 8))
    result = PB::Writer::write();
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

_QWORD *sub_18F324374(_QWORD *result)
{
  *result = &off_1E29517B0;
  *(_QWORD *)((char *)result + 188) = 0;
  return result;
}

void sub_18F32438C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F3243B0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "auxHorizontalRotation", *(float *)(a1 + 16));
    v5 = *(_QWORD *)(a1 + 188);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_55;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "auxHorizontalTranslation", *(float *)(a1 + 20));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "auxOmegaInertial_X", *(float *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "auxOmegaInertial_Y", *(float *)(a1 + 28));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "auxOmegaInertial_Z", *(float *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "auxUserAccelInertial_X", *(float *)(a1 + 36));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "auxUserAccelInertial_Y", *(float *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "auxUserAccelInertial_Z", *(float *)(a1 + 44));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "auxVerticalRotation", *(float *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_12;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "auxVerticalTranslation", *(float *)(a1 + 52));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "blockHeadTurnFalsePositive");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "bodyTurnDetectionVerticalRotationSrc", *(float *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "bodyTurnMaximaBaseline", *(float *)(a1 + 60));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_16;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "counterBodyTurnAboveBaseline");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "hasRecentHeadTurn");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "horizontalRotationSimilarity", *(float *)(a1 + 68));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "horizontalRotationSimilarityBaseline", *(float *)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "horizontalRotationSimilarityThreshold", *(float *)(a1 + 76));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "horizontalTranslationSimilarity", *(float *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "horizontalTranslationSimilarityBaseline", *(float *)(a1 + 84));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_23;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "horizontalTranslationSimilarityThreshold", *(float *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_24;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "inBodyTurn");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_25;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "inComplexTransitionState");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "inStrongBodyTurn");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_26:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_27;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "longBodyTurnCounter");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_28;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "longBodyTurnState");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x1000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x200000) == 0)
      goto LABEL_29;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "overrideHeadTurn");
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_29:
    if ((v5 & 0x400000) == 0)
      goto LABEL_30;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "srcHorizontalRotation", *(float *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "srcHorizontalTranslation", *(float *)(a1 + 100));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_31:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_32;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "srcOmegaInertial_X", *(float *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_33;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "srcOmegaInertial_Y", *(float *)(a1 + 108));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_34;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "srcOmegaInertial_Z", *(float *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_35;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "srcUserAccelInertial_X", *(float *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_36;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "srcUserAccelInertial_Y", *(float *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_37;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "srcUserAccelInertial_Z", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_38;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "srcVertToHrzRotRatio", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "srcVerticalRotation", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_40;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "srcVerticalTranslation", *(float *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_41;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "srcYawRotationExtremaBuffer", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v5 & 1) == 0)
      goto LABEL_42;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "srcYawRotationMaximaBaseline", *(float *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 1) == 0)
  {
LABEL_42:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_43;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_44;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(this, "verticalRotationSimilarity", *(float *)(a1 + 148));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_45;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(this, "verticalRotationSimilarityBaseline", *(float *)(a1 + 152));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_46;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(this, "verticalRotationSimilarityThreshold", *(float *)(a1 + 156));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_46:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_47;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(this, "verticalTranslationSimilarity", *(float *)(a1 + 160));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_48;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(this, "verticalTranslationSimilarityBaseline", *(float *)(a1 + 164));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_49;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(this, "verticalTranslationSimilarityThreshold", *(float *)(a1 + 168));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_50;
LABEL_101:
    PB::TextFormatter::format(this, "yawRateSimilarity200ms", *(float *)(a1 + 176));
    if ((*(_QWORD *)(a1 + 188) & 0x2000000000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_51;
  }
LABEL_100:
  PB::TextFormatter::format(this, "yawRateSimilarity1000ms", *(float *)(a1 + 172));
  v5 = *(_QWORD *)(a1 + 188);
  if ((v5 & 0x20000000000) != 0)
    goto LABEL_101;
LABEL_50:
  if ((v5 & 0x2000000000000) != 0)
LABEL_51:
    PB::TextFormatter::format(this, "yawRateSimilarityState");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F324A20(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  BOOL v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  BOOL v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  BOOL v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  BOOL v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  BOOL v109;
  char v110;
  unsigned int v111;
  unint64_t v112;
  char v113;
  char v114;
  unsigned int v115;
  unint64_t v116;
  char v117;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)(a1 + 188) |= 1uLL;
          v20 = *((_QWORD *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v20);
          v21 = *((_QWORD *)this + 1) + 8;
          goto LABEL_206;
        case 2u:
          *(_QWORD *)(a1 + 188) |= 0x800000uLL;
          v23 = *((_QWORD *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v23);
          goto LABEL_205;
        case 3u:
          *(_QWORD *)(a1 + 188) |= 0x1000000uLL;
          v24 = *((_QWORD *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v24);
          goto LABEL_205;
        case 4u:
          *(_QWORD *)(a1 + 188) |= 0x2000000uLL;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v25);
          goto LABEL_205;
        case 5u:
          *(_QWORD *)(a1 + 188) |= 8uLL;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v26);
          goto LABEL_205;
        case 6u:
          *(_QWORD *)(a1 + 188) |= 0x10uLL;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v27);
          goto LABEL_205;
        case 7u:
          *(_QWORD *)(a1 + 188) |= 0x20uLL;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v28);
          goto LABEL_205;
        case 8u:
          *(_QWORD *)(a1 + 188) |= 0x40000000uLL;
          v29 = *((_QWORD *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v29);
          goto LABEL_205;
        case 9u:
          *(_QWORD *)(a1 + 188) |= 0x200uLL;
          v30 = *((_QWORD *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v30);
          goto LABEL_205;
        case 0xAu:
          *(_QWORD *)(a1 + 188) |= 0x200000uLL;
          v31 = *((_QWORD *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v31);
          goto LABEL_205;
        case 0xBu:
          *(_QWORD *)(a1 + 188) |= 2uLL;
          v32 = *((_QWORD *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v32);
          goto LABEL_205;
        case 0xCu:
          *(_QWORD *)(a1 + 188) |= 0x4000000uLL;
          v33 = *((_QWORD *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v33);
          goto LABEL_205;
        case 0xDu:
          *(_QWORD *)(a1 + 188) |= 0x8000000uLL;
          v34 = *((_QWORD *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v34);
          goto LABEL_205;
        case 0xEu:
          *(_QWORD *)(a1 + 188) |= 0x10000000uLL;
          v35 = *((_QWORD *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v35);
          goto LABEL_205;
        case 0xFu:
          *(_QWORD *)(a1 + 188) |= 0x40uLL;
          v36 = *((_QWORD *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v36);
          goto LABEL_205;
        case 0x10u:
          *(_QWORD *)(a1 + 188) |= 0x80uLL;
          v37 = *((_QWORD *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v37);
          goto LABEL_205;
        case 0x11u:
          *(_QWORD *)(a1 + 188) |= 0x100uLL;
          v38 = *((_QWORD *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v38);
          goto LABEL_205;
        case 0x12u:
          *(_QWORD *)(a1 + 188) |= 0x80000000uLL;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v39);
          goto LABEL_205;
        case 0x13u:
          *(_QWORD *)(a1 + 188) |= 0x400uLL;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v40);
          goto LABEL_205;
        case 0x14u:
          *(_QWORD *)(a1 + 188) |= 0x400000uLL;
          v41 = *((_QWORD *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v41);
          goto LABEL_205;
        case 0x15u:
          *(_QWORD *)(a1 + 188) |= 4uLL;
          v42 = *((_QWORD *)this + 1);
          if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v42);
          goto LABEL_205;
        case 0x16u:
          *(_QWORD *)(a1 + 188) |= 0x400000000uLL;
          v43 = *((_QWORD *)this + 1);
          if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v43);
          goto LABEL_205;
        case 0x17u:
          *(_QWORD *)(a1 + 188) |= 0x4000uLL;
          v44 = *((_QWORD *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v44);
          goto LABEL_205;
        case 0x18u:
          *(_QWORD *)(a1 + 188) |= 0x2000000000uLL;
          v45 = *((_QWORD *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(_QWORD *)this + v45);
          goto LABEL_205;
        case 0x19u:
          *(_QWORD *)(a1 + 188) |= 0x20000uLL;
          v46 = *((_QWORD *)this + 1);
          if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v46);
          goto LABEL_205;
        case 0x1Au:
          *(_QWORD *)(a1 + 188) |= 0x800000000uLL;
          v47 = *((_QWORD *)this + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v47);
          goto LABEL_205;
        case 0x1Bu:
          *(_QWORD *)(a1 + 188) |= 0x8000uLL;
          v48 = *((_QWORD *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v48);
          goto LABEL_205;
        case 0x1Cu:
          *(_QWORD *)(a1 + 188) |= 0x4000000000uLL;
          v49 = *((_QWORD *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(_QWORD *)this + v49);
          goto LABEL_205;
        case 0x1Du:
          *(_QWORD *)(a1 + 188) |= 0x40000uLL;
          v50 = *((_QWORD *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v50);
          goto LABEL_205;
        case 0x1Eu:
          *(_QWORD *)(a1 + 188) |= 0x1000000000uLL;
          v51 = *((_QWORD *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v51);
          goto LABEL_205;
        case 0x1Fu:
          *(_QWORD *)(a1 + 188) |= 0x10000uLL;
          v52 = *((_QWORD *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v52);
          goto LABEL_205;
        case 0x20u:
          *(_QWORD *)(a1 + 188) |= 0x8000000000uLL;
          v53 = *((_QWORD *)this + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v53);
          goto LABEL_205;
        case 0x21u:
          *(_QWORD *)(a1 + 188) |= 0x80000uLL;
          v54 = *((_QWORD *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v54);
          goto LABEL_205;
        case 0x22u:
          *(_QWORD *)(a1 + 188) |= 0x200000000000uLL;
          v55 = *((_QWORD *)this + 1);
          if (v55 >= *((_QWORD *)this + 2))
          {
            v58 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v56 = v55 + 1;
            v57 = *(unsigned __int8 *)(*(_QWORD *)this + v55);
            *((_QWORD *)this + 1) = v56;
            v58 = v57 != 0;
          }
          *(_BYTE *)(a1 + 183) = v58;
          goto LABEL_207;
        case 0x23u:
          *(_QWORD *)(a1 + 188) |= 0x800uLL;
          v59 = *((_QWORD *)this + 1);
          if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v59);
          goto LABEL_205;
        case 0x24u:
          *(_QWORD *)(a1 + 188) |= 0x1000uLL;
          v60 = *((_QWORD *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v60);
          goto LABEL_205;
        case 0x25u:
          *(_QWORD *)(a1 + 188) |= 0x100000000000uLL;
          v61 = *((_QWORD *)this + 1);
          if (v61 >= *((_QWORD *)this + 2))
          {
            v64 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v62 = v61 + 1;
            v63 = *(unsigned __int8 *)(*(_QWORD *)this + v61);
            *((_QWORD *)this + 1) = v62;
            v64 = v63 != 0;
          }
          *(_BYTE *)(a1 + 182) = v64;
          goto LABEL_207;
        case 0x26u:
          *(_QWORD *)(a1 + 188) |= 0x400000000000uLL;
          v65 = *((_QWORD *)this + 1);
          if (v65 >= *((_QWORD *)this + 2))
          {
            v68 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v66 = v65 + 1;
            v67 = *(unsigned __int8 *)(*(_QWORD *)this + v65);
            *((_QWORD *)this + 1) = v66;
            v68 = v67 != 0;
          }
          *(_BYTE *)(a1 + 184) = v68;
          goto LABEL_207;
        case 0x27u:
          *(_QWORD *)(a1 + 188) |= 0x2000uLL;
          v69 = *((_QWORD *)this + 1);
          v70 = *((_QWORD *)this + 2);
          v71 = *(_QWORD *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)this + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_219;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_186:
            LODWORD(v74) = 0;
            goto LABEL_219;
          }
          v110 = 0;
          v111 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v112 = v69 + 1;
              v113 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)this + 1) = v112;
              v74 |= (unint64_t)(v113 & 0x7F) << v110;
              if (v113 < 0)
              {
                v110 += 7;
                v69 = v112;
                v14 = v111++ > 8;
                if (v14)
                  goto LABEL_186;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_219:
          *(_DWORD *)(a1 + 64) = v74;
          goto LABEL_207;
        case 0x28u:
          *(_QWORD *)(a1 + 188) |= 0x100000000uLL;
          v77 = *((_QWORD *)this + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v77);
          goto LABEL_205;
        case 0x29u:
          *(_QWORD *)(a1 + 188) |= 0x200000000uLL;
          v78 = *((_QWORD *)this + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v78);
          goto LABEL_205;
        case 0x2Au:
          *(_QWORD *)(a1 + 188) |= 0x1000000000000uLL;
          v79 = *((_QWORD *)this + 1);
          if (v79 >= *((_QWORD *)this + 2))
          {
            v82 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v80 = v79 + 1;
            v81 = *(unsigned __int8 *)(*(_QWORD *)this + v79);
            *((_QWORD *)this + 1) = v80;
            v82 = v81 != 0;
          }
          *(_BYTE *)(a1 + 186) = v82;
          goto LABEL_207;
        case 0x2Bu:
          *(_QWORD *)(a1 + 188) |= 0x80000000000uLL;
          v83 = *((_QWORD *)this + 1);
          if (v83 >= *((_QWORD *)this + 2))
          {
            v86 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v84 = v83 + 1;
            v85 = *(unsigned __int8 *)(*(_QWORD *)this + v83);
            *((_QWORD *)this + 1) = v84;
            v86 = v85 != 0;
          }
          *(_BYTE *)(a1 + 181) = v86;
          goto LABEL_207;
        case 0x2Cu:
          *(_QWORD *)(a1 + 188) |= 0x40000000000uLL;
          v87 = *((_QWORD *)this + 1);
          if (v87 >= *((_QWORD *)this + 2))
          {
            v90 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v88 = v87 + 1;
            v89 = *(unsigned __int8 *)(*(_QWORD *)this + v87);
            *((_QWORD *)this + 1) = v88;
            v90 = v89 != 0;
          }
          *(_BYTE *)(a1 + 180) = v90;
          goto LABEL_207;
        case 0x2Du:
          *(_QWORD *)(a1 + 188) |= 0x20000000uLL;
          v91 = *((_QWORD *)this + 1);
          if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v91);
          goto LABEL_205;
        case 0x2Eu:
          *(_QWORD *)(a1 + 188) |= 0x20000000000uLL;
          v92 = *((_QWORD *)this + 1);
          if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((_QWORD *)this + 2))
            goto LABEL_162;
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v92);
          goto LABEL_205;
        case 0x2Fu:
          *(_QWORD *)(a1 + 188) |= 0x10000000000uLL;
          v93 = *((_QWORD *)this + 1);
          if (v93 <= 0xFFFFFFFFFFFFFFFBLL && v93 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v93);
LABEL_205:
            v21 = *((_QWORD *)this + 1) + 4;
LABEL_206:
            *((_QWORD *)this + 1) = v21;
          }
          else
          {
LABEL_162:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_207;
        case 0x30u:
          *(_QWORD *)(a1 + 188) |= 0x100000uLL;
          v94 = *((_QWORD *)this + 1);
          v95 = *((_QWORD *)this + 2);
          v96 = *(_QWORD *)this;
          if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
          {
            v97 = 0;
            v98 = 0;
            v99 = 0;
            do
            {
              v100 = v94 + 1;
              *((_QWORD *)this + 1) = v94 + 1;
              v101 = *(_BYTE *)(v96 + v94);
              v99 |= (unint64_t)(v101 & 0x7F) << v97;
              if ((v101 & 0x80) == 0)
                goto LABEL_216;
              v97 += 7;
              v94 = v100;
              v14 = v98++ > 8;
            }
            while (!v14);
LABEL_199:
            LODWORD(v99) = 0;
            goto LABEL_216;
          }
          v114 = 0;
          v115 = 0;
          v99 = 0;
          if (v95 <= v94)
            v95 = *((_QWORD *)this + 1);
          break;
        case 0x31u:
          *(_QWORD *)(a1 + 188) |= 0x800000000000uLL;
          v102 = *((_QWORD *)this + 1);
          if (v102 >= *((_QWORD *)this + 2))
          {
            v105 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v103 = v102 + 1;
            v104 = *(unsigned __int8 *)(*(_QWORD *)this + v102);
            *((_QWORD *)this + 1) = v103;
            v105 = v104 != 0;
          }
          *(_BYTE *)(a1 + 185) = v105;
          goto LABEL_207;
        case 0x32u:
          *(_QWORD *)(a1 + 188) |= 0x2000000000000uLL;
          v106 = *((_QWORD *)this + 1);
          if (v106 >= *((_QWORD *)this + 2))
          {
            v109 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v107 = v106 + 1;
            v108 = *(unsigned __int8 *)(*(_QWORD *)this + v106);
            *((_QWORD *)this + 1) = v107;
            v109 = v108 != 0;
          }
          *(_BYTE *)(a1 + 187) = v109;
          goto LABEL_207;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_207;
      }
      while (1)
      {
        if (v95 == v94)
        {
          LODWORD(v99) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_216;
        }
        v116 = v94 + 1;
        v117 = *(_BYTE *)(v96 + v94);
        *((_QWORD *)this + 1) = v116;
        v99 |= (unint64_t)(v117 & 0x7F) << v114;
        if ((v117 & 0x80) == 0)
          break;
        v114 += 7;
        v94 = v116;
        v14 = v115++ > 8;
        if (v14)
          goto LABEL_199;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v99) = 0;
LABEL_216:
      *(_DWORD *)(a1 + 92) = v99;
LABEL_207:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F325870(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 188);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_QWORD *)(v3 + 188);
    if ((v4 & 0x800000) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000000) == 0)
        goto LABEL_4;
      goto LABEL_54;
    }
  }
  else if ((v4 & 0x800000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_5;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_9;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_13;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_14;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_15;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40) == 0)
      goto LABEL_16;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_16:
    if ((v4 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0)
      goto LABEL_22;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_23;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::write(this, *(float *)(v3 + 148));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_25;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000) == 0)
      goto LABEL_26;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::write(this, *(float *)(v3 + 160));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_26:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_27;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0)
      goto LABEL_28;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::write(this, *(float *)(v3 + 152));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_29;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x40000) == 0)
      goto LABEL_30;
    goto LABEL_80;
  }
LABEL_79:
  result = PB::Writer::write(this, *(float *)(v3 + 164));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_31;
    goto LABEL_81;
  }
LABEL_80:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x10000) == 0)
      goto LABEL_32;
    goto LABEL_82;
  }
LABEL_81:
  result = PB::Writer::write(this, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_33;
    goto LABEL_83;
  }
LABEL_82:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x80000) == 0)
      goto LABEL_34;
    goto LABEL_84;
  }
LABEL_83:
  result = PB::Writer::write(this, *(float *)(v3 + 168));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_35;
    goto LABEL_85;
  }
LABEL_84:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x800) == 0)
      goto LABEL_36;
    goto LABEL_86;
  }
LABEL_85:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_36:
    if ((v4 & 0x1000) == 0)
      goto LABEL_37;
    goto LABEL_87;
  }
LABEL_86:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_37:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_38;
    goto LABEL_88;
  }
LABEL_87:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_39;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x2000) == 0)
      goto LABEL_40;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_40:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_41;
    goto LABEL_91;
  }
LABEL_90:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_42;
    goto LABEL_92;
  }
LABEL_91:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_43;
    goto LABEL_93;
  }
LABEL_92:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_44;
    goto LABEL_94;
  }
LABEL_93:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_44:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_45;
    goto LABEL_95;
  }
LABEL_94:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_46;
    goto LABEL_96;
  }
LABEL_95:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_47;
    goto LABEL_97;
  }
LABEL_96:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_47:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_48;
    goto LABEL_98;
  }
LABEL_97:
  result = PB::Writer::write(this, *(float *)(v3 + 176));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x100000) == 0)
      goto LABEL_49;
    goto LABEL_99;
  }
LABEL_98:
  result = PB::Writer::write(this, *(float *)(v3 + 172));
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_49:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_50;
    goto LABEL_100;
  }
LABEL_99:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 188);
  if ((v4 & 0x800000000000) == 0)
  {
LABEL_50:
    if ((v4 & 0x2000000000000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_100:
  result = PB::Writer::write(this);
  if ((*(_QWORD *)(v3 + 188) & 0x2000000000000) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F325E0C(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951708;
  *(_DWORD *)(result + 128) = 0;
  return result;
}

void sub_18F325E24(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F325E48(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "auxAvgOmegaAroundGrav2s", *(float *)(a1 + 32));
    v5 = *(_DWORD *)(a1 + 128);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "auxAvgOmegaAroundGravLong", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "auxAvgOmegaAroundGravShort", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "auxAvgOmegaLong", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "auxAvgOmegaShort", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "auxHistoricalOmegaStdMax", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "auxOverSrcYawDiffSum", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "dotRotGrav", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "hasUnCorrelatedSrcMotion");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "inHeadTurnState");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "inLikelySlowBodyTurnPed");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "isInCorrelatedActivity");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "isInCorrelatedMotion");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 1) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "lastHeadTurnStartTime", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "lastHeadTurnStopTime", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "lastHeadTurnYawRadians", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "likelyOnGymMachine");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "relOmegaMeanLong", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "relOmegaVarLong", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "relOmegaVarShort", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "srcAccumulatedYaw4s", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000) == 0)
  {
LABEL_23:
    if ((v5 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "srcAvgOmegaAroundGrav2s", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000) == 0)
  {
LABEL_24:
    if ((v5 & 0x40000) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "srcAvgOmegaAroundGravLong", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000) == 0)
  {
LABEL_25:
    if ((v5 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "srcAvgOmegaAroundGravShort", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80000) == 0)
  {
LABEL_26:
    if ((v5 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "srcAvgOmegaLong", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100000) == 0)
  {
LABEL_27:
    if ((v5 & 0x200000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "srcAvgOmegaShort", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200000) == 0)
  {
LABEL_28:
    if ((v5 & 0x400000) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "srcAvgYawBufferSum", *(float *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400000) == 0)
  {
LABEL_29:
    if ((v5 & 0x800000) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "srcHistoricalOmegaStdMax", *(float *)(a1 + 108));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800000) == 0)
  {
LABEL_30:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "srcRotationAxisAlignment", *(float *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_32;
LABEL_65:
    PB::TextFormatter::format(this, "steadyStatePedestrian");
    if ((*(_DWORD *)(a1 + 128) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_33;
  }
LABEL_64:
  PB::TextFormatter::format(this, "srcYawBufferLongStd", *(float *)(a1 + 116));
  v5 = *(_DWORD *)(a1 + 128);
  if (v5 < 0)
    goto LABEL_65;
LABEL_32:
  if ((v5 & 4) != 0)
LABEL_33:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F326278(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 128) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_102;
        case 2u:
          *(_DWORD *)(a1 + 128) |= 0x100000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 3u:
          *(_DWORD *)(a1 + 128) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 4u:
          *(_DWORD *)(a1 + 128) |= 0x80000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 5u:
          *(_DWORD *)(a1 + 128) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 6u:
          *(_DWORD *)(a1 + 128) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 7u:
          *(_DWORD *)(a1 + 128) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 8u:
          *(_DWORD *)(a1 + 128) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 9u:
          *(_DWORD *)(a1 + 128) |= 0x800000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0xAu:
          *(_DWORD *)(a1 + 128) |= 0x20000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v22 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v22 = v21 != 0;
          }
          *(_BYTE *)(a1 + 124) = v22;
          break;
        case 0xBu:
          *(_DWORD *)(a1 + 128) |= 0x2000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v24 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v24 = v23 != 0;
          }
          *(_BYTE *)(a1 + 120) = v24;
          break;
        case 0xCu:
          *(_DWORD *)(a1 + 128) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0xDu:
          *(_DWORD *)(a1 + 128) |= 0x10000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v26 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v26 = v25 != 0;
          }
          *(_BYTE *)(a1 + 123) = v26;
          break;
        case 0xEu:
          *(_DWORD *)(a1 + 128) |= 0x40000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v28 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v28 = v27 != 0;
          }
          *(_BYTE *)(a1 + 125) = v28;
          break;
        case 0xFu:
          *(_DWORD *)(a1 + 128) |= 0x40000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x10u:
          *(_DWORD *)(a1 + 128) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x11u:
          *(_DWORD *)(a1 + 128) |= 0x20000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x12u:
          *(_DWORD *)(a1 + 128) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x13u:
          *(_DWORD *)(a1 + 128) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x14u:
          *(_DWORD *)(a1 + 128) |= 0x400000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x15u:
          *(_DWORD *)(a1 + 128) |= 0x80000000;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v30 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v30 = v29 != 0;
          }
          *(_BYTE *)(a1 + 126) = v30;
          break;
        case 0x16u:
          *(_DWORD *)(a1 + 128) |= 0x10000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x17u:
          *(_DWORD *)(a1 + 128) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x18u:
          *(_DWORD *)(a1 + 128) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x19u:
          *(_DWORD *)(a1 + 128) |= 0x200000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x1Au:
          *(_DWORD *)(a1 + 128) |= 0x4000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v32 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v31 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v32 = v31 != 0;
          }
          *(_BYTE *)(a1 + 121) = v32;
          break;
        case 0x1Bu:
          *(_DWORD *)(a1 + 128) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x1Cu:
          *(_DWORD *)(a1 + 128) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_102;
        case 0x1Du:
          *(_DWORD *)(a1 + 128) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_102:
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_130;
        case 0x1Eu:
          *(_DWORD *)(a1 + 128) |= 0x1000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_113;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_129;
        case 0x1Fu:
          *(_DWORD *)(a1 + 128) |= 0x8000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          {
LABEL_113:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_129:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_130:
            *((_QWORD *)this + 1) = v2;
          }
          break;
        case 0x20u:
          *(_DWORD *)(a1 + 128) |= 0x8000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v34 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v34 = v33 != 0;
          }
          *(_BYTE *)(a1 + 122) = v34;
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F326B6C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 128);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0)
      goto LABEL_5;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000) == 0)
      goto LABEL_10;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_11;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_12;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_14;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_15;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 0x200) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_25:
    if ((v4 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_26:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x800) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_28:
    if ((v4 & 1) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 1) == 0)
  {
LABEL_29:
    if ((v4 & 2) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x8000) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  if ((*(_DWORD *)(v3 + 128) & 0x8000000) != 0)
    return PB::Writer::write(this);
  return result;
}

double sub_18F326F10(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E2950EF0;
  *(_DWORD *)(a1 + 164) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_18F326F34(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2950EF0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F326F84(PB::Base *a1)
{
  sub_18F326F34(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F326FA8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;
  float *v6;
  float *v7;
  float v8;
  int v9;
  float *v10;
  float *v11;
  float v12;
  int v13;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x400000) != 0)
  {
    PB::TextFormatter::format(this, "btz");
    v5 = *(_DWORD *)(a1 + 164);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0)
        goto LABEL_4;
      goto LABEL_43;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "btzDisturbanceDuration", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "btzIsCurrentlyQuiescent");
  v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "btzQuiescentDurationLoose", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "btzQuiescentDurationStrict", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_8;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "btzStaticPoseDuration", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_9;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "centeredBoresight");
  v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "centeredBoresightInHighDynamics");
  v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_49:
  PB::TextFormatter::format(this, "clientMode");
  if ((*(_DWORD *)(a1 + 164) & 0x4000000) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "inComplexTransitionState");
LABEL_12:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "noiseVariance", v8);
  }
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x8000000) != 0)
  {
    PB::TextFormatter::format(this, "pinnedBoresight");
    v9 = *(_DWORD *)(a1 + 164);
    if ((v9 & 0x80) == 0)
    {
LABEL_16:
      if ((v9 & 0x100) == 0)
        goto LABEL_17;
      goto LABEL_53;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(this, "qHat_W", *(float *)(a1 + 92));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x100) == 0)
  {
LABEL_17:
    if ((v9 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "qHat_X", *(float *)(a1 + 96));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x200) == 0)
  {
LABEL_18:
    if ((v9 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "qHat_Y", *(float *)(a1 + 100));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x400) == 0)
  {
LABEL_19:
    if ((v9 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "qHat_Z", *(float *)(a1 + 104));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x800) == 0)
  {
LABEL_20:
    if ((v9 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "rBoresight_X", *(float *)(a1 + 108));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x1000) == 0)
  {
LABEL_21:
    if ((v9 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "rBoresight_Y", *(float *)(a1 + 112));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x2000) == 0)
  {
LABEL_22:
    if ((v9 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "rBoresight_Z", *(float *)(a1 + 116));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x4000) == 0)
  {
LABEL_23:
    if ((v9 & 0x8000) == 0)
      goto LABEL_24;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "rHat_X", *(float *)(a1 + 120));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x8000) == 0)
  {
LABEL_24:
    if ((v9 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "rHat_Y", *(float *)(a1 + 124));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x10000) == 0)
  {
LABEL_25:
    if ((v9 & 0x10000000) == 0)
      goto LABEL_26;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "rHat_Z", *(float *)(a1 + 128));
  v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x10000000) == 0)
  {
LABEL_26:
    if ((v9 & 1) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_62:
  PB::TextFormatter::format(this, "requestingCamera");
  if ((*(_DWORD *)(a1 + 164) & 1) != 0)
LABEL_27:
    PB::TextFormatter::format(this, "srcTimestamp", *(double *)(a1 + 56));
LABEL_28:
  v10 = *(float **)(a1 + 32);
  v11 = *(float **)(a1 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(this, "stateVariance", v12);
  }
  v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 2) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 64));
    v13 = *(_DWORD *)(a1 + 164);
    if ((v13 & 0x20000000) == 0)
    {
LABEL_32:
      if ((v13 & 0x20000) == 0)
        goto LABEL_33;
      goto LABEL_66;
    }
  }
  else if ((v13 & 0x20000000) == 0)
  {
    goto LABEL_32;
  }
  PB::TextFormatter::format(this, "tracking1IMU");
  v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x20000) == 0)
  {
LABEL_33:
    if ((v13 & 0x40000000) == 0)
      goto LABEL_34;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "trackingBehavior");
  v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x40000000) == 0)
  {
LABEL_34:
    if ((v13 & 0x40000) == 0)
      goto LABEL_35;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "trackingDisabled");
  v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x40000) == 0)
  {
LABEL_35:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "trackingScheme");
  v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v13 & 0x80000) == 0)
      goto LABEL_37;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "useRelaxedQuiescenceBounds");
  v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x80000) == 0)
  {
LABEL_37:
    if ((v13 & 0x100000) == 0)
      goto LABEL_38;
LABEL_71:
    PB::TextFormatter::format(this, "vHat_Y", *(float *)(a1 + 144));
    if ((*(_DWORD *)(a1 + 164) & 0x200000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_39;
  }
LABEL_70:
  PB::TextFormatter::format(this, "vHat_X", *(float *)(a1 + 140));
  v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x100000) != 0)
    goto LABEL_71;
LABEL_38:
  if ((v13 & 0x200000) != 0)
LABEL_39:
    PB::TextFormatter::format(this, "vHat_Z", *(float *)(a1 + 148));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F327440(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _DWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _DWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  BOOL v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  BOOL v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  BOOL v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  BOOL v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  BOOL v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  BOOL v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  BOOL v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  BOOL v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  BOOL v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  BOOL v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  unint64_t v137;
  char *v138;
  _DWORD *v139;
  unint64_t v140;
  char *v141;
  char v142;
  unsigned int v143;
  unint64_t v144;
  char v145;
  char v146;
  unsigned int v147;
  unint64_t v148;
  char v149;
  char v150;
  unsigned int v151;
  unint64_t v152;
  char v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  int v167;
  char *v168;
  int v169;
  unint64_t v170;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 164) |= 2u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_153;
        case 2u:
          *(_DWORD *)(a1 + 164) |= 0x800u;
          v26 = *((_QWORD *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v26);
          goto LABEL_265;
        case 3u:
          *(_DWORD *)(a1 + 164) |= 0x1000u;
          v27 = *((_QWORD *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v27);
          goto LABEL_265;
        case 4u:
          *(_DWORD *)(a1 + 164) |= 0x2000u;
          v28 = *((_QWORD *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v28);
          goto LABEL_265;
        case 5u:
          *(_DWORD *)(a1 + 164) |= 0x4000u;
          v29 = *((_QWORD *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v29);
          goto LABEL_265;
        case 6u:
          *(_DWORD *)(a1 + 164) |= 0x8000u;
          v30 = *((_QWORD *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v30);
          goto LABEL_265;
        case 7u:
          *(_DWORD *)(a1 + 164) |= 0x10000u;
          v31 = *((_QWORD *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v31);
          goto LABEL_265;
        case 8u:
          *(_DWORD *)(a1 + 164) |= 0x80000u;
          v32 = *((_QWORD *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v32);
          goto LABEL_265;
        case 9u:
          *(_DWORD *)(a1 + 164) |= 0x100000u;
          v33 = *((_QWORD *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v33);
          goto LABEL_265;
        case 0xAu:
          *(_DWORD *)(a1 + 164) |= 0x200000u;
          v34 = *((_QWORD *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v34);
          goto LABEL_265;
        case 0xBu:
          *(_DWORD *)(a1 + 164) |= 0x100u;
          v35 = *((_QWORD *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v35);
          goto LABEL_265;
        case 0xCu:
          *(_DWORD *)(a1 + 164) |= 0x200u;
          v36 = *((_QWORD *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v36);
          goto LABEL_265;
        case 0xDu:
          *(_DWORD *)(a1 + 164) |= 0x400u;
          v37 = *((_QWORD *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v37);
          goto LABEL_265;
        case 0xEu:
          *(_DWORD *)(a1 + 164) |= 0x80u;
          v38 = *((_QWORD *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v38);
          goto LABEL_265;
        case 0xFu:
          if (v24 != 2)
          {
            v138 = *(char **)(a1 + 40);
            v137 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v138 >= v137)
            {
              v154 = (char *)*v10;
              v155 = (v138 - (_BYTE *)*v10) >> 2;
              v156 = v155 + 1;
              if ((unint64_t)(v155 + 1) >> 62)
LABEL_277:
                sub_18F26F8C0();
              v157 = v137 - (_QWORD)v154;
              if (v157 >> 1 > v156)
                v156 = v157 >> 1;
              if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFFCLL)
                v158 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v158 = v156;
              if (v158)
              {
                v159 = (char *)sub_18F26FB8C(v11, v158);
                v154 = *(char **)(a1 + 32);
                v138 = *(char **)(a1 + 40);
              }
              else
              {
                v159 = 0;
              }
              v166 = &v159[4 * v155];
              *(_DWORD *)v166 = 0;
              v139 = v166 + 4;
              while (v138 != v154)
              {
                v167 = *((_DWORD *)v138 - 1);
                v138 -= 4;
                *((_DWORD *)v166 - 1) = v167;
                v166 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v166;
              *(_QWORD *)(a1 + 40) = v139;
              *(_QWORD *)(a1 + 48) = &v159[4 * v158];
              if (v154)
                operator delete(v154);
            }
            else
            {
              *(_DWORD *)v138 = 0;
              v139 = v138 + 4;
            }
            *(_QWORD *)(a1 + 40) = v139;
            goto LABEL_261;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v39 = *((_QWORD *)this + 1);
          v40 = *((_QWORD *)this + 2);
          while (v39 < v40 && !*((_BYTE *)this + 24))
          {
            v42 = *(char **)(a1 + 40);
            v41 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v42 >= v41)
            {
              v44 = (char *)*v10;
              v45 = (v42 - (_BYTE *)*v10) >> 2;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62)
                goto LABEL_277;
              v47 = v41 - (_QWORD)v44;
              if (v47 >> 1 > v46)
                v46 = v47 >> 1;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                v48 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                v49 = (char *)sub_18F26FB8C(v11, v48);
                v44 = *(char **)(a1 + 32);
                v42 = *(char **)(a1 + 40);
              }
              else
              {
                v49 = 0;
              }
              v50 = &v49[4 * v45];
              *(_DWORD *)v50 = 0;
              v43 = v50 + 4;
              while (v42 != v44)
              {
                v51 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *((_DWORD *)v50 - 1) = v51;
                v50 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v50;
              *(_QWORD *)(a1 + 40) = v43;
              *(_QWORD *)(a1 + 48) = &v49[4 * v48];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *(_DWORD *)v42 = 0;
              v43 = v42 + 4;
            }
            *(_QWORD *)(a1 + 40) = v43;
            v52 = *((_QWORD *)this + 1);
            if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)this + 2))
              goto LABEL_217;
            *(v43 - 1) = *(_DWORD *)(*(_QWORD *)this + v52);
            v40 = *((_QWORD *)this + 2);
            v39 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v39;
          }
          goto LABEL_218;
        case 0x10u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v53 = *((_QWORD *)this + 1);
            v54 = *((_QWORD *)this + 2);
            while (v53 < v54 && !*((_BYTE *)this + 24))
            {
              v56 = *(char **)(a1 + 16);
              v55 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v56 >= v55)
              {
                v58 = (char *)*v8;
                v59 = (v56 - (_BYTE *)*v8) >> 2;
                v60 = v59 + 1;
                if ((unint64_t)(v59 + 1) >> 62)
                  goto LABEL_278;
                v61 = v55 - (_QWORD)v58;
                if (v61 >> 1 > v60)
                  v60 = v61 >> 1;
                if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                  v62 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v62 = v60;
                if (v62)
                {
                  v63 = (char *)sub_18F26FB8C(v9, v62);
                  v58 = *(char **)(a1 + 8);
                  v56 = *(char **)(a1 + 16);
                }
                else
                {
                  v63 = 0;
                }
                v64 = &v63[4 * v59];
                *(_DWORD *)v64 = 0;
                v57 = v64 + 4;
                while (v56 != v58)
                {
                  v65 = *((_DWORD *)v56 - 1);
                  v56 -= 4;
                  *((_DWORD *)v64 - 1) = v65;
                  v64 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v64;
                *(_QWORD *)(a1 + 16) = v57;
                *(_QWORD *)(a1 + 24) = &v63[4 * v62];
                if (v58)
                  operator delete(v58);
              }
              else
              {
                *(_DWORD *)v56 = 0;
                v57 = v56 + 4;
              }
              *(_QWORD *)(a1 + 16) = v57;
              v66 = *((_QWORD *)this + 1);
              if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)this + 2))
              {
LABEL_217:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v57 - 1) = *(_DWORD *)(*(_QWORD *)this + v66);
              v54 = *((_QWORD *)this + 2);
              v53 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v53;
            }
LABEL_218:
            PB::Reader::recallMark();
          }
          else
          {
            v141 = *(char **)(a1 + 16);
            v140 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v141 >= v140)
            {
              v160 = (char *)*v8;
              v161 = (v141 - (_BYTE *)*v8) >> 2;
              v162 = v161 + 1;
              if ((unint64_t)(v161 + 1) >> 62)
LABEL_278:
                sub_18F26F8C0();
              v163 = v140 - (_QWORD)v160;
              if (v163 >> 1 > v162)
                v162 = v163 >> 1;
              if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFFCLL)
                v164 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v164 = v162;
              if (v164)
              {
                v165 = (char *)sub_18F26FB8C(v9, v164);
                v160 = *(char **)(a1 + 8);
                v141 = *(char **)(a1 + 16);
              }
              else
              {
                v165 = 0;
              }
              v168 = &v165[4 * v161];
              *(_DWORD *)v168 = 0;
              v139 = v168 + 4;
              while (v141 != v160)
              {
                v169 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v168 - 1) = v169;
                v168 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v168;
              *(_QWORD *)(a1 + 16) = v139;
              *(_QWORD *)(a1 + 24) = &v165[4 * v164];
              if (v160)
                operator delete(v160);
            }
            else
            {
              *(_DWORD *)v141 = 0;
              v139 = v141 + 4;
            }
            *(_QWORD *)(a1 + 16) = v139;
LABEL_261:
            v170 = *((_QWORD *)this + 1);
            if (v170 <= 0xFFFFFFFFFFFFFFFBLL && v170 + 4 <= *((_QWORD *)this + 2))
            {
              *(v139 - 1) = *(_DWORD *)(*(_QWORD *)this + v170);
LABEL_265:
              v116 = *((_QWORD *)this + 1) + 4;
LABEL_266:
              *((_QWORD *)this + 1) = v116;
            }
            else
            {
LABEL_263:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_267:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 0x11u:
          *(_DWORD *)(a1 + 164) |= 0x8000000u;
          v67 = *((_QWORD *)this + 1);
          if (v67 >= *((_QWORD *)this + 2))
          {
            v70 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v68 = v67 + 1;
            v69 = *(unsigned __int8 *)(*(_QWORD *)this + v67);
            *((_QWORD *)this + 1) = v68;
            v70 = v69 != 0;
          }
          *(_BYTE *)(a1 + 157) = v70;
          goto LABEL_267;
        case 0x12u:
          *(_DWORD *)(a1 + 164) |= 0x400000u;
          v71 = *((_QWORD *)this + 1);
          if (v71 >= *((_QWORD *)this + 2))
          {
            v74 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v72 = v71 + 1;
            v73 = *(unsigned __int8 *)(*(_QWORD *)this + v71);
            *((_QWORD *)this + 1) = v72;
            v74 = v73 != 0;
          }
          *(_BYTE *)(a1 + 152) = v74;
          goto LABEL_267;
        case 0x13u:
          *(_DWORD *)(a1 + 164) |= 0x1000000u;
          v75 = *((_QWORD *)this + 1);
          if (v75 >= *((_QWORD *)this + 2))
          {
            v78 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v76 = v75 + 1;
            v77 = *(unsigned __int8 *)(*(_QWORD *)this + v75);
            *((_QWORD *)this + 1) = v76;
            v78 = v77 != 0;
          }
          *(_BYTE *)(a1 + 154) = v78;
          goto LABEL_267;
        case 0x14u:
          *(_DWORD *)(a1 + 164) |= 0x10u;
          v79 = *((_QWORD *)this + 1);
          if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v79);
          goto LABEL_265;
        case 0x15u:
          *(_DWORD *)(a1 + 164) |= 8u;
          v80 = *((_QWORD *)this + 1);
          if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v80);
          goto LABEL_265;
        case 0x16u:
          *(_DWORD *)(a1 + 164) |= 4u;
          v81 = *((_QWORD *)this + 1);
          if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v81);
          goto LABEL_265;
        case 0x17u:
          *(_DWORD *)(a1 + 164) |= 0x20000000u;
          v82 = *((_QWORD *)this + 1);
          if (v82 >= *((_QWORD *)this + 2))
          {
            v85 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v83 = v82 + 1;
            v84 = *(unsigned __int8 *)(*(_QWORD *)this + v82);
            *((_QWORD *)this + 1) = v83;
            v85 = v84 != 0;
          }
          *(_BYTE *)(a1 + 159) = v85;
          goto LABEL_267;
        case 0x18u:
          *(_DWORD *)(a1 + 164) |= 0x80000000;
          v86 = *((_QWORD *)this + 1);
          if (v86 >= *((_QWORD *)this + 2))
          {
            v89 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v87 = v86 + 1;
            v88 = *(unsigned __int8 *)(*(_QWORD *)this + v86);
            *((_QWORD *)this + 1) = v87;
            v89 = v88 != 0;
          }
          *(_BYTE *)(a1 + 161) = v89;
          goto LABEL_267;
        case 0x19u:
          *(_DWORD *)(a1 + 164) |= 0x800000u;
          v90 = *((_QWORD *)this + 1);
          if (v90 >= *((_QWORD *)this + 2))
          {
            v93 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v91 = v90 + 1;
            v92 = *(unsigned __int8 *)(*(_QWORD *)this + v90);
            *((_QWORD *)this + 1) = v91;
            v93 = v92 != 0;
          }
          *(_BYTE *)(a1 + 153) = v93;
          goto LABEL_267;
        case 0x1Au:
          *(_DWORD *)(a1 + 164) |= 0x20u;
          v94 = *((_QWORD *)this + 1);
          if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v94);
          goto LABEL_265;
        case 0x1Bu:
          *(_DWORD *)(a1 + 164) |= 0x40000u;
          v95 = *((_QWORD *)this + 1);
          v96 = *((_QWORD *)this + 2);
          v97 = *(_QWORD *)this;
          if (v95 <= 0xFFFFFFFFFFFFFFF5 && v95 + 10 <= v96)
          {
            v98 = 0;
            v99 = 0;
            v100 = 0;
            do
            {
              v101 = v95 + 1;
              *((_QWORD *)this + 1) = v95 + 1;
              v102 = *(_BYTE *)(v97 + v95);
              v100 |= (unint64_t)(v102 & 0x7F) << v98;
              if ((v102 & 0x80) == 0)
                goto LABEL_240;
              v98 += 7;
              v95 = v101;
              v18 = v99++ > 8;
            }
            while (!v18);
LABEL_194:
            LODWORD(v100) = 0;
            goto LABEL_240;
          }
          v142 = 0;
          v143 = 0;
          v100 = 0;
          if (v96 <= v95)
            v96 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v96 == v95)
            {
              LODWORD(v100) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v144 = v95 + 1;
              v145 = *(_BYTE *)(v97 + v95);
              *((_QWORD *)this + 1) = v144;
              v100 |= (unint64_t)(v145 & 0x7F) << v142;
              if (v145 < 0)
              {
                v142 += 7;
                v95 = v144;
                v18 = v143++ > 8;
                if (v18)
                  goto LABEL_194;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v100) = 0;
            }
            break;
          }
LABEL_240:
          *(_DWORD *)(a1 + 136) = v100;
          goto LABEL_267;
        case 0x1Cu:
          *(_DWORD *)(a1 + 164) |= 0x10000000u;
          v103 = *((_QWORD *)this + 1);
          if (v103 >= *((_QWORD *)this + 2))
          {
            v106 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v104 = v103 + 1;
            v105 = *(unsigned __int8 *)(*(_QWORD *)this + v103);
            *((_QWORD *)this + 1) = v104;
            v106 = v105 != 0;
          }
          *(_BYTE *)(a1 + 158) = v106;
          goto LABEL_267;
        case 0x1Du:
          *(_DWORD *)(a1 + 164) |= 0x4000000u;
          v107 = *((_QWORD *)this + 1);
          if (v107 >= *((_QWORD *)this + 2))
          {
            v110 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v108 = v107 + 1;
            v109 = *(unsigned __int8 *)(*(_QWORD *)this + v107);
            *((_QWORD *)this + 1) = v108;
            v110 = v109 != 0;
          }
          *(_BYTE *)(a1 + 156) = v110;
          goto LABEL_267;
        case 0x1Eu:
          *(_DWORD *)(a1 + 164) |= 0x40000000u;
          v111 = *((_QWORD *)this + 1);
          if (v111 >= *((_QWORD *)this + 2))
          {
            v114 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v112 = v111 + 1;
            v113 = *(unsigned __int8 *)(*(_QWORD *)this + v111);
            *((_QWORD *)this + 1) = v112;
            v114 = v113 != 0;
          }
          *(_BYTE *)(a1 + 160) = v114;
          goto LABEL_267;
        case 0x1Fu:
          *(_DWORD *)(a1 + 164) |= 1u;
          v115 = *((_QWORD *)this + 1);
          if (v115 > 0xFFFFFFFFFFFFFFF7 || v115 + 8 > *((_QWORD *)this + 2))
            goto LABEL_263;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v115);
LABEL_153:
          v116 = *((_QWORD *)this + 1) + 8;
          goto LABEL_266;
        case 0x20u:
          *(_DWORD *)(a1 + 164) |= 0x40u;
          v117 = *((_QWORD *)this + 1);
          v118 = *((_QWORD *)this + 2);
          v119 = *(_QWORD *)this;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            v120 = 0;
            v121 = 0;
            v122 = 0;
            do
            {
              v123 = v117 + 1;
              *((_QWORD *)this + 1) = v117 + 1;
              v124 = *(_BYTE *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0)
                goto LABEL_243;
              v120 += 7;
              v117 = v123;
              v18 = v121++ > 8;
            }
            while (!v18);
LABEL_207:
            LODWORD(v122) = 0;
            goto LABEL_243;
          }
          v146 = 0;
          v147 = 0;
          v122 = 0;
          if (v118 <= v117)
            v118 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v148 = v117 + 1;
              v149 = *(_BYTE *)(v119 + v117);
              *((_QWORD *)this + 1) = v148;
              v122 |= (unint64_t)(v149 & 0x7F) << v146;
              if (v149 < 0)
              {
                v146 += 7;
                v117 = v148;
                v18 = v147++ > 8;
                if (v18)
                  goto LABEL_207;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v122) = 0;
            }
            break;
          }
LABEL_243:
          *(_DWORD *)(a1 + 88) = v122;
          goto LABEL_267;
        case 0x21u:
          *(_DWORD *)(a1 + 164) |= 0x2000000u;
          v125 = *((_QWORD *)this + 1);
          if (v125 >= *((_QWORD *)this + 2))
          {
            v128 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v126 = v125 + 1;
            v127 = *(unsigned __int8 *)(*(_QWORD *)this + v125);
            *((_QWORD *)this + 1) = v126;
            v128 = v127 != 0;
          }
          *(_BYTE *)(a1 + 155) = v128;
          goto LABEL_267;
        case 0x22u:
          *(_DWORD *)(a1 + 164) |= 0x20000u;
          v129 = *((_QWORD *)this + 1);
          v130 = *((_QWORD *)this + 2);
          v131 = *(_QWORD *)this;
          if (v129 <= 0xFFFFFFFFFFFFFFF5 && v129 + 10 <= v130)
          {
            v132 = 0;
            v133 = 0;
            v134 = 0;
            do
            {
              v135 = v129 + 1;
              *((_QWORD *)this + 1) = v129 + 1;
              v136 = *(_BYTE *)(v131 + v129);
              v134 |= (unint64_t)(v136 & 0x7F) << v132;
              if ((v136 & 0x80) == 0)
                goto LABEL_246;
              v132 += 7;
              v129 = v135;
              v18 = v133++ > 8;
            }
            while (!v18);
LABEL_216:
            LODWORD(v134) = 0;
            goto LABEL_246;
          }
          v150 = 0;
          v151 = 0;
          v134 = 0;
          if (v130 <= v129)
            v130 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v130 == v129)
            {
              LODWORD(v134) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v152 = v129 + 1;
              v153 = *(_BYTE *)(v131 + v129);
              *((_QWORD *)this + 1) = v152;
              v134 |= (unint64_t)(v153 & 0x7F) << v150;
              if (v153 < 0)
              {
                v150 += 7;
                v129 = v152;
                v18 = v151++ > 8;
                if (v18)
                  goto LABEL_216;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v134) = 0;
            }
            break;
          }
LABEL_246:
          *(_DWORD *)(a1 + 132) = v134;
          goto LABEL_267;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_267;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F328350(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  int v11;

  v3 = result;
  v4 = *(_DWORD *)(result + 164);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 64));
    v4 = *(_DWORD *)(v3 + 164);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000) == 0)
        goto LABEL_4;
      goto LABEL_43;
    }
  }
  else if ((v4 & 0x800) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0)
      goto LABEL_7;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000) == 0)
      goto LABEL_9;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 148));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
LABEL_53:
    result = PB::Writer::write(this, *(float *)(v3 + 104));
    if ((*(_DWORD *)(v3 + 164) & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x400) != 0)
    goto LABEL_53;
LABEL_14:
  if ((v4 & 0x80) != 0)
LABEL_15:
    result = PB::Writer::write(this, *(float *)(v3 + 92));
LABEL_16:
  v5 = *(float **)(v3 + 32);
  v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(float **)(v3 + 8);
  v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10);
  }
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x8000000) != 0)
  {
    result = PB::Writer::write(this);
    v11 = *(_DWORD *)(v3 + 164);
    if ((v11 & 0x400000) == 0)
    {
LABEL_24:
      if ((v11 & 0x1000000) == 0)
        goto LABEL_25;
      goto LABEL_57;
    }
  }
  else if ((v11 & 0x400000) == 0)
  {
    goto LABEL_24;
  }
  result = PB::Writer::write(this);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v11 & 0x10) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x10) == 0)
  {
LABEL_26:
    if ((v11 & 8) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 8) == 0)
  {
LABEL_27:
    if ((v11 & 4) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 4) == 0)
  {
LABEL_28:
    if ((v11 & 0x20000000) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x20000000) == 0)
  {
LABEL_29:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v11 & 0x800000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x800000) == 0)
  {
LABEL_31:
    if ((v11 & 0x20) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x20) == 0)
  {
LABEL_32:
    if ((v11 & 0x40000) == 0)
      goto LABEL_33;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40000) == 0)
  {
LABEL_33:
    if ((v11 & 0x10000000) == 0)
      goto LABEL_34;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::writeVarInt(this);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x10000000) == 0)
  {
LABEL_34:
    if ((v11 & 0x4000000) == 0)
      goto LABEL_35;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::write(this);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v11 & 0x40000000) == 0)
      goto LABEL_36;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::write(this);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40000000) == 0)
  {
LABEL_36:
    if ((v11 & 1) == 0)
      goto LABEL_37;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::write(this);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 1) == 0)
  {
LABEL_37:
    if ((v11 & 0x40) == 0)
      goto LABEL_38;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40) == 0)
  {
LABEL_38:
    if ((v11 & 0x2000000) == 0)
      goto LABEL_39;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::writeVarInt(this);
  v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x2000000) == 0)
  {
LABEL_39:
    if ((v11 & 0x20000) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_71:
  result = PB::Writer::write(this);
  if ((*(_DWORD *)(v3 + 164) & 0x20000) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F328740(uint64_t result)
{
  *(_QWORD *)result = &off_1E29509B0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_18F328758(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F32877C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "avgRotationMax", *(float *)(a1 + 16));
    v5 = *(_WORD *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "historicalDisturbanceDuration", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "historicalQuiescenceDuration", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "instAccelMagDiff", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "instRotationMax", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "isAvgGrav");
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "measNoiseVar", *(float *)(a1 + 40));
    if ((*(_WORD *)(a1 + 48) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "lpfAccelMagDiff", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x80) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 1) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F3288CC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 48) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_54;
        case 2u:
          *(_WORD *)(a1 + 48) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_53;
        case 3u:
          *(_WORD *)(a1 + 48) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_53;
        case 4u:
          *(_WORD *)(a1 + 48) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_53;
        case 5u:
          *(_WORD *)(a1 + 48) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_53;
        case 6u:
          *(_WORD *)(a1 + 48) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_53;
        case 7u:
          *(_WORD *)(a1 + 48) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v21 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v21 = v20 != 0;
          }
          *(_BYTE *)(a1 + 44) = v21;
          break;
        case 8u:
          *(_WORD *)(a1 + 48) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_47;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_53;
        case 9u:
          *(_WORD *)(a1 + 48) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_53:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_54:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_47:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F328C54(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 48);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 20));
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  if ((*(_WORD *)(v3 + 48) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 20));
  return result;
}

uint64_t sub_18F328D74(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950710;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F328D88(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950710;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F328DC8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950710;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F328E1C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    PB::TextFormatter::format(this, "isAvgGrav");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F328E88(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v23 = *((_QWORD *)this + 1);
        if (v23 >= *((_QWORD *)this + 2))
        {
          v26 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v24 = v23 + 1;
          v25 = *(unsigned __int8 *)(*(_QWORD *)this + v23);
          *((_QWORD *)this + 1) = v24;
          v26 = v25 != 0;
        }
        *(_BYTE *)(a1 + 16) = v26;
      }
      else if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        v21 = sub_18F281E90(v20);
        v22 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t, double))(*(_QWORD *)v22 + 8))(v22, v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F3290A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F3290F4(uint64_t result)
{
  *(_QWORD *)result = &off_1E29509E8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_18F32910C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F329130(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "activeGnssSession");
    v5 = *(_BYTE *)(a1 + 24);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "currentModesOfOperation");
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "hasSubscribedRhythmicClient");
    if ((*(_BYTE *)(a1 + 24) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "gnssModeOfOperation");
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "rhythmicMode");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F329200(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  int v41;
  BOOL v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)this + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 24) |= 2u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_81;
                  }
                  v45 = v20++;
                  v46 = *(_BYTE *)(v21 + v45);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_80;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_80:
                v3 = v45 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v3 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_81;
                  v22 += 7;
                  v20 = v3;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_81:
              *(_DWORD *)(a1 + 12) = v24;
              goto LABEL_92;
            case 2u:
              *(_BYTE *)(a1 + 24) |= 8u;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              if (v3 >= v2)
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v3++);
                *((_QWORD *)this + 1) = v3;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 20) = v28;
              goto LABEL_92;
            case 3u:
              *(_BYTE *)(a1 + 24) |= 4u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_86;
                  }
                  v49 = v29++;
                  v50 = *(_BYTE *)(v30 + v49);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_85:
                    v3 = v49 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_85;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v3 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_86;
                v31 += 7;
                v29 = v3;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_86:
              *(_DWORD *)(a1 + 16) = v33;
              goto LABEL_92;
            case 4u:
              *(_BYTE *)(a1 + 24) |= 1u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  v53 = v35++;
                  v54 = *(_BYTE *)(v36 + v53);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_90:
                    v3 = v53 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_90;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v3 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_91;
                v37 += 7;
                v35 = v3;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 8) = v39;
LABEL_92:
              v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 24) |= 0x10u;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              if (v3 >= v2)
              {
                v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)this + v3++);
                *((_QWORD *)this + 1) = v3;
                v42 = v41 != 0;
              }
              *(_BYTE *)(a1 + 21) = v42;
              goto LABEL_92;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              goto LABEL_92;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F3296B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 24) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 24) & 0x10) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F329760(uint64_t result)
{
  *(_QWORD *)result = &off_1E294CFF0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F329778(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F32979C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "y", *(float *)(a1 + 20));
      if ((*(_BYTE *)(a1 + 28) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F32984C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 28) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 28) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 28) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 28) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_38:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F329AB0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24));
  return result;
}

uint64_t sub_18F329B44(uint64_t result)
{
  *(_QWORD *)result = &off_1E294FF30;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_18F329B5C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F329B80(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "cadence", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "swingAccelX", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "swingAccelXStandardized", *(double *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "swingAccelZ", *(double *)(a1 + 48));
    if ((*(_BYTE *)(a1 + 64) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "swingAccelY", *(double *)(a1 + 40));
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F329C90(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 64) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 2u:
          *(_BYTE *)(a1 + 64) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 3u:
          *(_BYTE *)(a1 + 64) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 5u:
          *(_BYTE *)(a1 + 64) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 6u:
          *(_BYTE *)(a1 + 64) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 7u:
          *(_BYTE *)(a1 + 64) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_44;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_46;
        case 8u:
          *(_BYTE *)(a1 + 64) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_44:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_46:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F329F94(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 64);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 64) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 32));
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  if ((*(_BYTE *)(v3 + 64) & 8) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 32));
  return result;
}

uint64_t sub_18F32A07C(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951200;
  *(_DWORD *)(result + 120) = 0;
  return result;
}

void sub_18F32A094(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F32A0B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "centerOfMassPrefiltAccelX", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 120);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "centerOfMassPrefiltAccelY", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "centerOfMassPrefiltAccelZ", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "centripetalAccelX", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "centripetalAccelY", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "centripetalAccelZ", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "centripetalRotationRateX", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "centripetalRotationRateY", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "centripetalRotationRateZ", *(double *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 80));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "swingVelocityX", *(double *)(a1 + 88));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(this, "swingVelocityZ", *(double *)(a1 + 104));
    if ((*(_WORD *)(a1 + 120) & 0x2000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(this, "swingVelocityY", *(double *)(a1 + 96));
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x1000) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x2000) != 0)
LABEL_15:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 112));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F32A2A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 120) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 2u:
          *(_WORD *)(a1 + 120) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 3u:
          *(_WORD *)(a1 + 120) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 4u:
          *(_WORD *)(a1 + 120) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 5u:
          *(_WORD *)(a1 + 120) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 6u:
          *(_WORD *)(a1 + 120) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 7u:
          *(_WORD *)(a1 + 120) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 8u:
          *(_WORD *)(a1 + 120) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 9u:
          *(_WORD *)(a1 + 120) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 0xAu:
          *(_WORD *)(a1 + 120) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 0xBu:
          *(_WORD *)(a1 + 120) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 0xCu:
          *(_WORD *)(a1 + 120) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 0xDu:
          *(_WORD *)(a1 + 120) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_65;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_67;
        case 0xEu:
          *(_WORD *)(a1 + 120) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_65:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_67:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F32A734(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 120);
  if ((v4 & 0x200) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 80));
    v4 = *(_WORD *)(v3 + 120);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(result + 120) & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 112));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 96));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 104));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 24));
  }
LABEL_28:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  if ((*(_WORD *)(v3 + 120) & 4) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 24));
  return result;
}

_QWORD *sub_18F32A8E0(_QWORD *result)
{
  *result = &off_1E294EC28;
  result[28] = 0;
  return result;
}

void sub_18F32A8F8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F32A91C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "emptyField0", *(double *)(a1 + 8));
    v5 = *(_QWORD *)(a1 + 224);
    if ((v5 & 0x20000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0)
        goto LABEL_4;
      goto LABEL_40;
    }
  }
  else if ((v5 & 0x20000000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "emptyField1");
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "emptyField2");
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "groundContactTimeCadence", *(double *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_8;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "groundContactTimeGrade", *(double *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_9;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "groundContactTimeGradeSource");
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_10;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "groundContactTimeGradeType");
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "groundContactTimeIsValid");
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x10) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "groundContactTimePace", *(double *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0)
      goto LABEL_13;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "groundContactTimeReportingStatus");
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x20) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "groundContactTimeUnsmoothed", *(double *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x40) == 0)
  {
LABEL_14:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "groundContactTimeWindowEndTime", *(double *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_16;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "isFlat");
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "isFormBasedStrideLength");
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x80) == 0)
  {
LABEL_17:
    if ((v5 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "strideLength", *(double *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x100) == 0)
  {
LABEL_18:
    if ((v5 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "strideLengthCadence", *(double *)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x200) == 0)
  {
LABEL_19:
    if ((v5 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "strideLengthGrade", *(double *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x400) == 0)
  {
LABEL_20:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_21;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "strideLengthGradeType", *(double *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v5 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "strideLengthIsValid");
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x800) == 0)
  {
LABEL_22:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_23;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "strideLengthPace", *(double *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000) == 0)
      goto LABEL_24;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "strideLengthReportingStatus");
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x1000) == 0)
  {
LABEL_24:
    if ((v5 & 0x2000) == 0)
      goto LABEL_25;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "strideLengthUncalibrated", *(double *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x2000) == 0)
  {
LABEL_25:
    if ((v5 & 0x4000) == 0)
      goto LABEL_26;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "strideLengthUnsmoothed", *(double *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x4000) == 0)
  {
LABEL_26:
    if ((v5 & 0x8000) == 0)
      goto LABEL_27;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "strideLengthWindowEndTime", *(double *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x8000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000) == 0)
      goto LABEL_28;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x10000) == 0)
  {
LABEL_28:
    if ((v5 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "verticalOscCadence", *(double *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x20000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000) == 0)
      goto LABEL_30;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "verticalOscPace", *(double *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x40000) == 0)
  {
LABEL_30:
    if ((v5 & 0x80000) == 0)
      goto LABEL_31;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "verticalOscWindowEndTime", *(double *)(a1 + 152));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x80000) == 0)
  {
LABEL_31:
    if ((v5 & 0x100000) == 0)
      goto LABEL_32;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "verticalOscillation", *(double *)(a1 + 160));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x100000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000) == 0)
      goto LABEL_33;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "verticalOscillationGrade", *(double *)(a1 + 168));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x200000) == 0)
  {
LABEL_33:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_34;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "verticalOscillationGradeType", *(double *)(a1 + 176));
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_35;
LABEL_71:
    PB::TextFormatter::format(this, "verticalOscillationReportingStatus");
    if ((*(_QWORD *)(a1 + 224) & 0x400000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_36;
  }
LABEL_70:
  PB::TextFormatter::format(this, "verticalOscillationIsValid");
  v5 = *(_QWORD *)(a1 + 224);
  if ((v5 & 0x10000000) != 0)
    goto LABEL_71;
LABEL_35:
  if ((v5 & 0x400000) != 0)
LABEL_36:
    PB::TextFormatter::format(this, "verticalOscillationUnsmoothed", *(double *)(a1 + 184));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F32ADAC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  char v66;
  int v67;
  BOOL v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  unint64_t v87;
  char v88;
  char v89;
  unsigned int v90;
  unint64_t v91;
  char v92;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_QWORD *)(a1 + 224) |= 0x40uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 2u:
              *(_QWORD *)(a1 + 224) |= 0x80uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 3u:
              *(_QWORD *)(a1 + 224) |= 0x200000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 220) = v22;
              goto LABEL_203;
            case 4u:
              *(_QWORD *)(a1 + 224) |= 2uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 5u:
              *(_QWORD *)(a1 + 224) |= 0x40000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 217) = v24;
              goto LABEL_203;
            case 6u:
              *(_QWORD *)(a1 + 224) |= 0x80000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 7u:
              *(_QWORD *)(a1 + 224) |= 0x400000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v26 = v25 != 0;
              }
              *(_BYTE *)(a1 + 221) = v26;
              goto LABEL_203;
            case 8u:
              *(_QWORD *)(a1 + 224) |= 1uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 9u:
              *(_QWORD *)(a1 + 224) |= 0x20000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 216) = v28;
              goto LABEL_203;
            case 0xAu:
              *(_QWORD *)(a1 + 224) |= 0x80000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 218) = v30;
              goto LABEL_203;
            case 0xBu:
              *(_QWORD *)(a1 + 224) |= 0x8000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0xCu:
              *(_QWORD *)(a1 + 224) |= 0x40000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0xDu:
              *(_QWORD *)(a1 + 224) |= 0x4000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0xEu:
              *(_QWORD *)(a1 + 224) |= 0x8000000uLL;
              v31 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v32 = *(_QWORD *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v35 = 0;
                if (v2 <= v31)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_212;
                  }
                  v71 = v31++;
                  v72 = *(_BYTE *)(v32 + v71);
                  *((_QWORD *)this + 1) = v31;
                  v35 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_211:
                    v2 = v71 + 1;
                    goto LABEL_212;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v35) = 0;
                goto LABEL_211;
              }
              v33 = 0;
              v34 = 0;
              v35 = 0;
              do
              {
                v2 = v31 + 1;
                *((_QWORD *)this + 1) = v31 + 1;
                v36 = *(_BYTE *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0)
                  goto LABEL_212;
                v33 += 7;
                v31 = v2;
                v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_212:
              *(_DWORD *)(a1 + 208) = v35;
              goto LABEL_203;
            case 0xFu:
              *(_QWORD *)(a1 + 224) |= 0x4000000uLL;
              v37 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v38 = *(_QWORD *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v41 = 0;
                if (v2 <= v37)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_217;
                  }
                  v75 = v37++;
                  v76 = *(_BYTE *)(v38 + v75);
                  *((_QWORD *)this + 1) = v37;
                  v41 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_216:
                    v2 = v75 + 1;
                    goto LABEL_217;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v41) = 0;
                goto LABEL_216;
              }
              v39 = 0;
              v40 = 0;
              v41 = 0;
              do
              {
                v2 = v37 + 1;
                *((_QWORD *)this + 1) = v37 + 1;
                v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0)
                  goto LABEL_217;
                v39 += 7;
                v37 = v2;
                v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_217:
              *(_DWORD *)(a1 + 204) = v41;
              goto LABEL_203;
            case 0x10u:
              *(_QWORD *)(a1 + 224) |= 0x10000000uLL;
              v43 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v44 = *(_QWORD *)this;
              if (v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v47 = 0;
                if (v2 <= v43)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v43)
                  {
                    LODWORD(v47) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_222;
                  }
                  v79 = v43++;
                  v80 = *(_BYTE *)(v44 + v79);
                  *((_QWORD *)this + 1) = v43;
                  v47 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v47) = 0;
LABEL_221:
                    v2 = v79 + 1;
                    goto LABEL_222;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v47) = 0;
                goto LABEL_221;
              }
              v45 = 0;
              v46 = 0;
              v47 = 0;
              do
              {
                v2 = v43 + 1;
                *((_QWORD *)this + 1) = v43 + 1;
                v48 = *(_BYTE *)(v44 + v43);
                v47 |= (unint64_t)(v48 & 0x7F) << v45;
                if ((v48 & 0x80) == 0)
                  goto LABEL_222;
                v45 += 7;
                v43 = v2;
                v14 = v46++ > 8;
              }
              while (!v14);
              LODWORD(v47) = 0;
LABEL_222:
              *(_DWORD *)(a1 + 212) = v47;
              goto LABEL_203;
            case 0x11u:
              *(_QWORD *)(a1 + 224) |= 0x800000uLL;
              v49 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v50 = *(_QWORD *)this;
              if (v49 > 0xFFFFFFFFFFFFFFF5 || v49 + 10 > v2)
              {
                v81 = 0;
                v82 = 0;
                v53 = 0;
                if (v2 <= v49)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v49)
                  {
                    LODWORD(v53) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_227;
                  }
                  v83 = v49++;
                  v84 = *(_BYTE *)(v50 + v83);
                  *((_QWORD *)this + 1) = v49;
                  v53 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0)
                    break;
                  v81 += 7;
                  v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v53) = 0;
LABEL_226:
                    v2 = v83 + 1;
                    goto LABEL_227;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v53) = 0;
                goto LABEL_226;
              }
              v51 = 0;
              v52 = 0;
              v53 = 0;
              do
              {
                v2 = v49 + 1;
                *((_QWORD *)this + 1) = v49 + 1;
                v54 = *(_BYTE *)(v50 + v49);
                v53 |= (unint64_t)(v54 & 0x7F) << v51;
                if ((v54 & 0x80) == 0)
                  goto LABEL_227;
                v51 += 7;
                v49 = v2;
                v14 = v52++ > 8;
              }
              while (!v14);
              LODWORD(v53) = 0;
LABEL_227:
              *(_DWORD *)(a1 + 192) = v53;
              goto LABEL_203;
            case 0x12u:
              *(_QWORD *)(a1 + 224) |= 0x1000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x13u:
              *(_QWORD *)(a1 + 224) |= 0x2000000uLL;
              v55 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v56 = *(_QWORD *)this;
              if (v55 > 0xFFFFFFFFFFFFFFF5 || v55 + 10 > v2)
              {
                v85 = 0;
                v86 = 0;
                v59 = 0;
                if (v2 <= v55)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v55)
                  {
                    LODWORD(v59) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_232;
                  }
                  v87 = v55++;
                  v88 = *(_BYTE *)(v56 + v87);
                  *((_QWORD *)this + 1) = v55;
                  v59 |= (unint64_t)(v88 & 0x7F) << v85;
                  if ((v88 & 0x80) == 0)
                    break;
                  v85 += 7;
                  v14 = v86++ > 8;
                  if (v14)
                  {
                    LODWORD(v59) = 0;
LABEL_231:
                    v2 = v87 + 1;
                    goto LABEL_232;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v59) = 0;
                goto LABEL_231;
              }
              v57 = 0;
              v58 = 0;
              v59 = 0;
              do
              {
                v2 = v55 + 1;
                *((_QWORD *)this + 1) = v55 + 1;
                v60 = *(_BYTE *)(v56 + v55);
                v59 |= (unint64_t)(v60 & 0x7F) << v57;
                if ((v60 & 0x80) == 0)
                  goto LABEL_232;
                v57 += 7;
                v55 = v2;
                v14 = v58++ > 8;
              }
              while (!v14);
              LODWORD(v59) = 0;
LABEL_232:
              *(_DWORD *)(a1 + 200) = v59;
              goto LABEL_203;
            case 0x14u:
              *(_QWORD *)(a1 + 224) |= 0x1000000uLL;
              v61 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v62 = *(_QWORD *)this;
              if (v61 > 0xFFFFFFFFFFFFFFF5 || v61 + 10 > v2)
              {
                v89 = 0;
                v90 = 0;
                v65 = 0;
                if (v2 <= v61)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v61)
                  {
                    LODWORD(v65) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_237;
                  }
                  v91 = v61++;
                  v92 = *(_BYTE *)(v62 + v91);
                  *((_QWORD *)this + 1) = v61;
                  v65 |= (unint64_t)(v92 & 0x7F) << v89;
                  if ((v92 & 0x80) == 0)
                    break;
                  v89 += 7;
                  v14 = v90++ > 8;
                  if (v14)
                  {
                    LODWORD(v65) = 0;
LABEL_236:
                    v2 = v91 + 1;
                    goto LABEL_237;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v65) = 0;
                goto LABEL_236;
              }
              v63 = 0;
              v64 = 0;
              v65 = 0;
              do
              {
                v2 = v61 + 1;
                *((_QWORD *)this + 1) = v61 + 1;
                v66 = *(_BYTE *)(v62 + v61);
                v65 |= (unint64_t)(v66 & 0x7F) << v63;
                if ((v66 & 0x80) == 0)
                  goto LABEL_237;
                v63 += 7;
                v61 = v2;
                v14 = v64++ > 8;
              }
              while (!v14);
              LODWORD(v65) = 0;
LABEL_237:
              *(_DWORD *)(a1 + 196) = v65;
LABEL_203:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x15u:
              *(_QWORD *)(a1 + 224) |= 8uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x16u:
              *(_QWORD *)(a1 + 224) |= 4uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x17u:
              *(_QWORD *)(a1 + 224) |= 0x10uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x18u:
              *(_QWORD *)(a1 + 224) |= 0x100000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v68 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v67 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v68 = v67 != 0;
              }
              *(_BYTE *)(a1 + 219) = v68;
              goto LABEL_203;
            case 0x19u:
              *(_QWORD *)(a1 + 224) |= 0x100uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x1Au:
              *(_QWORD *)(a1 + 224) |= 0x800uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x1Bu:
              *(_QWORD *)(a1 + 224) |= 0x10000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x1Cu:
              *(_QWORD *)(a1 + 224) |= 0x20000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x1Du:
              *(_QWORD *)(a1 + 224) |= 0x20uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x1Eu:
              *(_QWORD *)(a1 + 224) |= 0x400000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 184) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x1Fu:
              *(_QWORD *)(a1 + 224) |= 0x2000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x20u:
              *(_QWORD *)(a1 + 224) |= 0x100000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 168) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x21u:
              *(_QWORD *)(a1 + 224) |= 0x200uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x22u:
              *(_QWORD *)(a1 + 224) |= 0x200000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_146;
              *(_QWORD *)(a1 + 176) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_202;
            case 0x23u:
              *(_QWORD *)(a1 + 224) |= 0x400uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_202:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_146:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_203;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_203;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F32BB80(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 224);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 56));
    v4 = *(_QWORD *)(v3 + 224);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000000) == 0)
        goto LABEL_4;
      goto LABEL_39;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_6;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80000) == 0)
      goto LABEL_7;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x80000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_8;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 160));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_10;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(double *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x40000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(double *)(v3 + 152));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_15;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(double *)(v3 + 120));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_16;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_17;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x800000) == 0)
      goto LABEL_18;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x800000) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0)
      goto LABEL_19;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_20;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(double *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_21;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0)
      goto LABEL_22;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 4) == 0)
      goto LABEL_23;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 4) == 0)
  {
LABEL_23:
    if ((v4 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_25;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0)
      goto LABEL_26;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000) == 0)
      goto LABEL_28;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(double *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x10000) == 0)
  {
LABEL_28:
    if ((v4 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(double *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x20000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20) == 0)
      goto LABEL_30;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(double *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x20) == 0)
  {
LABEL_30:
    if ((v4 & 0x400000) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x400000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000) == 0)
      goto LABEL_32;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::write(this, *(double *)(v3 + 184));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x2000) == 0)
  {
LABEL_32:
    if ((v4 & 0x100000) == 0)
      goto LABEL_33;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::write(this, *(double *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x100000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200) == 0)
      goto LABEL_34;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::write(this, *(double *)(v3 + 168));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x200) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000) == 0)
      goto LABEL_35;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_QWORD *)(v3 + 224);
  if ((v4 & 0x200000) == 0)
  {
LABEL_35:
    if ((v4 & 0x400) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 88));
  }
LABEL_70:
  result = PB::Writer::write(this, *(double *)(v3 + 176));
  if ((*(_QWORD *)(v3 + 224) & 0x400) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 88));
  return result;
}

uint64_t sub_18F32BF78(uint64_t result)
{
  *(_QWORD *)result = &off_1E294D028;
  *(_DWORD *)(result + 128) = 0;
  return result;
}

void sub_18F32BF90(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F32BFB4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(this, "activityType");
    v5 = *(_DWORD *)(a1 + 128);
    if ((v5 & 0x2000) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v5 & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "activityTypeWithoutOverride");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "currentCadence", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "currentPace", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "elevationSource");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "eta", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "grade", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "gradeOnsetCounter");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "horizSpeed", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "isArmConstrainedStateValid");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000) == 0)
  {
LABEL_12:
    if ((v5 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "isGradeOnsetEscalated");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "isRunning");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100000) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "isValid");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100000) == 0)
  {
LABEL_15:
    if ((v5 & 0x200000) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "isWeightSet");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "isWorkoutSelected");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "powerWattage", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80) == 0)
  {
LABEL_19:
    if ((v5 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "userHeight", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100) == 0)
  {
LABEL_20:
    if ((v5 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "userWeight", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200) == 0)
  {
LABEL_21:
    if ((v5 & 0x400) == 0)
      goto LABEL_22;
LABEL_45:
    PB::TextFormatter::format(this, "wLoad", *(double *)(a1 + 88));
    if ((*(_DWORD *)(a1 + 128) & 0x800) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_23;
  }
LABEL_44:
  PB::TextFormatter::format(this, "verticalSpeed", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400) != 0)
    goto LABEL_45;
LABEL_22:
  if ((v5 & 0x800) != 0)
LABEL_23:
    PB::TextFormatter::format(this, "workrateMETs", *(double *)(a1 + 96));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F32C2A4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  int v47;
  BOOL v48;
  int v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 128) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 2u:
              *(_DWORD *)(a1 + 128) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 3u:
              *(_DWORD *)(a1 + 128) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 4u:
              *(_DWORD *)(a1 + 128) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 124) = v22;
              goto LABEL_162;
            case 5u:
              *(_DWORD *)(a1 + 128) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 6u:
              *(_DWORD *)(a1 + 128) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 7u:
              *(_DWORD *)(a1 + 128) |= 0x2000u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_146;
                  }
                  v59 = v23++;
                  v60 = *(_BYTE *)(v24 + v59);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_145:
                    v2 = v59 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_145;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_146;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_146:
              *(_DWORD *)(a1 + 108) = v27;
              goto LABEL_162;
            case 8u:
              *(_DWORD *)(a1 + 128) |= 0x1000u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_151;
                  }
                  v63 = v29++;
                  v64 = *(_BYTE *)(v30 + v63);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_150:
                    v2 = v63 + 1;
                    goto LABEL_151;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_150;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_151;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_151:
              *(_DWORD *)(a1 + 104) = v33;
              goto LABEL_162;
            case 9u:
              *(_DWORD *)(a1 + 128) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 0xAu:
              *(_DWORD *)(a1 + 128) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 0xBu:
              *(_DWORD *)(a1 + 128) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 0xCu:
              *(_DWORD *)(a1 + 128) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v36 = v35 != 0;
              }
              *(_BYTE *)(a1 + 123) = v36;
              goto LABEL_162;
            case 0xDu:
              *(_DWORD *)(a1 + 128) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 0xEu:
              *(_DWORD *)(a1 + 128) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 0xFu:
              *(_DWORD *)(a1 + 128) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_141;
            case 0x10u:
              *(_DWORD *)(a1 + 128) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_141:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_77:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_162;
            case 0x11u:
              *(_DWORD *)(a1 + 128) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v38 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v37 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v38 = v37 != 0;
              }
              *(_BYTE *)(a1 + 125) = v38;
              goto LABEL_162;
            case 0x12u:
              *(_DWORD *)(a1 + 128) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 121) = v40;
              goto LABEL_162;
            case 0x13u:
              *(_DWORD *)(a1 + 128) |= 0x8000u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_156;
                  }
                  v67 = v41++;
                  v68 = *(_BYTE *)(v42 + v67);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_155:
                    v2 = v67 + 1;
                    goto LABEL_156;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_155;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_156;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_156:
              *(_DWORD *)(a1 + 116) = v45;
              goto LABEL_162;
            case 0x14u:
              *(_DWORD *)(a1 + 128) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v48 = v47 != 0;
              }
              *(_BYTE *)(a1 + 120) = v48;
              goto LABEL_162;
            case 0x15u:
              *(_DWORD *)(a1 + 128) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v50 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v49 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v50 = v49 != 0;
              }
              *(_BYTE *)(a1 + 122) = v50;
              goto LABEL_162;
            case 0x16u:
              *(_DWORD *)(a1 + 128) |= 0x4000u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_161;
                  }
                  v71 = v51++;
                  v72 = *(_BYTE *)(v52 + v71);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_160:
                    v2 = v71 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v55) = 0;
                goto LABEL_160;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_161;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_161:
              *(_DWORD *)(a1 + 112) = v55;
LABEL_162:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_162;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F32CC08(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 128);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 56));
    v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 0x100000) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(double *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 1) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 1) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_44:
  result = PB::Writer::write(this);
  if ((*(_DWORD *)(v3 + 128) & 0x4000) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F32CE94(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F130;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_18F32CEAC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F32CED0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "primaryAxisX", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "primaryAxisY", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 48) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "primaryAxisZ", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F32CFA0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 48) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 2u:
          *(_BYTE *)(a1 + 48) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 3u:
          *(_BYTE *)(a1 + 48) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 5u:
          *(_BYTE *)(a1 + 48) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_40:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_38:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F32D234(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 48);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 48) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 24));
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 48) & 4) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 24));
  return result;
}

uint64_t sub_18F32D2E4(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F520;
  *(_DWORD *)(result + 188) = 0;
  return result;
}

void sub_18F32D2FC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F32D320(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "algDelay", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 188);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_33;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "biasFactor", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "deltaCalibratedPedometerDistance", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "deltaOdometerDistance", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "deltaOdometerTime", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "deltaPedometerTime", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "deltaRawPedometerDistance", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "gestureState");
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_11:
    if ((v5 & 0x800000) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "gestureType");
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "interruptFlag");
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "isTrackRunOdometer");
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "isValidOdometerSpeed");
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "isValidPedometerSpeed");
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "isValidRunningSpeed");
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x100) == 0)
  {
LABEL_17:
    if ((v5 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "kalmanEpsOdometer", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x200) == 0)
  {
LABEL_18:
    if ((v5 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "kalmanEpsPedometer", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "kalmanGainOdometer", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "kalmanGainPedometer", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "kalmanMeasurementNoiseOdometer", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "kalmanMeasurementNoisePedometer", *(double *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "kalmanProcessNoise", *(double *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "kalmanStateCovariance", *(double *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x10000) == 0)
      goto LABEL_26;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "odometerQuality");
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_26:
    if ((v5 & 0x20000) == 0)
      goto LABEL_27;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "odometerSpeed", *(double *)(a1 + 136));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000) == 0)
      goto LABEL_28;
LABEL_57:
    PB::TextFormatter::format(this, "runningSpeed", *(double *)(a1 + 152));
    if ((*(_DWORD *)(a1 + 188) & 0x80000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_29;
  }
LABEL_56:
  PB::TextFormatter::format(this, "pedometerSpeed", *(double *)(a1 + 144));
  v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x40000) != 0)
    goto LABEL_57;
LABEL_28:
  if ((v5 & 0x80000) != 0)
LABEL_29:
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 160));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F32D6D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  int v45;
  BOOL v46;
  int v47;
  BOOL v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 188) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 2u:
              *(_DWORD *)(a1 + 188) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 3u:
              *(_DWORD *)(a1 + 188) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 4u:
              *(_DWORD *)(a1 + 188) |= 0x8000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 184) = v22;
              goto LABEL_148;
            case 5u:
              *(_DWORD *)(a1 + 188) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 6u:
              *(_DWORD *)(a1 + 188) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 7u:
              *(_DWORD *)(a1 + 188) |= 0x2000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 182) = v24;
              goto LABEL_148;
            case 8u:
              *(_DWORD *)(a1 + 188) |= 0x4000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v26 = v25 != 0;
              }
              *(_BYTE *)(a1 + 183) = v26;
              goto LABEL_148;
            case 9u:
              *(_DWORD *)(a1 + 188) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0xAu:
              *(_DWORD *)(a1 + 188) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0xBu:
              *(_DWORD *)(a1 + 188) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0xCu:
              *(_DWORD *)(a1 + 188) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0xDu:
              *(_DWORD *)(a1 + 188) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0xEu:
              *(_DWORD *)(a1 + 188) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0xFu:
              *(_DWORD *)(a1 + 188) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0x10u:
              *(_DWORD *)(a1 + 188) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0x11u:
              *(_DWORD *)(a1 + 188) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0x12u:
              *(_DWORD *)(a1 + 188) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0x13u:
              *(_DWORD *)(a1 + 188) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0x14u:
              *(_DWORD *)(a1 + 188) |= 0x400000u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_157;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_156:
                    v2 = v51 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_156;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_157;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_157:
              *(_DWORD *)(a1 + 176) = v31;
              goto LABEL_148;
            case 0x15u:
              *(_DWORD *)(a1 + 188) |= 0x100000u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_162;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_161:
                    v2 = v55 + 1;
                    goto LABEL_162;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_161;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_162;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_162:
              *(_DWORD *)(a1 + 168) = v37;
              goto LABEL_148;
            case 0x16u:
              *(_DWORD *)(a1 + 188) |= 0x200000u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_167;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_166:
                    v2 = v59 + 1;
                    goto LABEL_167;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_166;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_167;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_167:
              *(_DWORD *)(a1 + 172) = v43;
LABEL_148:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x17u:
              *(_DWORD *)(a1 + 188) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v46 = v45 != 0;
              }
              *(_BYTE *)(a1 + 180) = v46;
              goto LABEL_148;
            case 0x18u:
              *(_DWORD *)(a1 + 188) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0x19u:
              *(_DWORD *)(a1 + 188) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0x1Au:
              *(_DWORD *)(a1 + 188) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_147;
            case 0x1Bu:
              *(_DWORD *)(a1 + 188) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_147:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_112:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_148;
            case 0x1Cu:
              *(_DWORD *)(a1 + 188) |= 0x1000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v48 = v47 != 0;
              }
              *(_BYTE *)(a1 + 181) = v48;
              goto LABEL_148;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_148;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F32E0E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 188);
  if ((v4 & 0x80000) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 160));
    v4 = *(_DWORD *)(v3 + 188);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x40000) == 0)
        goto LABEL_4;
      goto LABEL_32;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_5;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 152));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 2) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_15:
    if ((v4 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 4) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 0x2000) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(double *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x800) == 0)
      goto LABEL_28;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_28:
    if ((v4 & 0x1000000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_56:
  result = PB::Writer::write(this, *(double *)(v3 + 96));
  if ((*(_DWORD *)(v3 + 188) & 0x1000000) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F32E418(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F168;
  *(_DWORD *)(result + 136) = 0;
  return result;
}

void sub_18F32E430(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F32E454(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x8000) != 0)
  {
    PB::TextFormatter::format(this, "algorithmType");
    v5 = *(_DWORD *)(a1 + 136);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "alpha", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "cadence", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "formBasedStartTime", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "grade", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "heightCM", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "horizontalAccelMagnitudeMeanSqrt", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "isValid");
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "rotationRateGravityProjectionMax", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "rotationRateMagnitudeMin", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "speedBasedStartTime", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "strideLength", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "strideLengthFormBasedCalibrated", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0)
      goto LABEL_17;
LABEL_35:
    PB::TextFormatter::format(this, "strideLengthSpeedBased", *(double *)(a1 + 112));
    if ((*(_DWORD *)(a1 + 136) & 0x4000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_18;
  }
LABEL_34:
  PB::TextFormatter::format(this, "strideLengthFormBasedUncalibrated", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x2000) != 0)
    goto LABEL_35;
LABEL_17:
  if ((v5 & 0x4000) != 0)
LABEL_18:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 120));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F32E6A4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 136) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 2u:
              *(_DWORD *)(a1 + 136) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 3u:
              *(_DWORD *)(a1 + 136) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 4u:
              *(_DWORD *)(a1 + 136) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 5u:
              *(_DWORD *)(a1 + 136) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 6u:
              *(_DWORD *)(a1 + 136) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 7u:
              *(_DWORD *)(a1 + 136) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 8u:
              *(_DWORD *)(a1 + 136) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 9u:
              *(_DWORD *)(a1 + 136) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xAu:
              *(_DWORD *)(a1 + 136) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xBu:
              *(_DWORD *)(a1 + 136) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xCu:
              *(_DWORD *)(a1 + 136) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xDu:
              *(_DWORD *)(a1 + 136) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xEu:
              *(_DWORD *)(a1 + 136) |= 0x8000u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v31 = v21++;
                  v32 = *(_BYTE *)(v22 + v31);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_92:
                    v2 = v31 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_92;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_93;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 128) = v25;
LABEL_94:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xFu:
              *(_DWORD *)(a1 + 136) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 132) = v28;
              goto LABEL_94;
            case 0x10u:
              *(_DWORD *)(a1 + 136) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0x11u:
              *(_DWORD *)(a1 + 136) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_88:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_77:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_94;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_94;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F32EC98(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 136);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_DWORD *)(v3 + 136);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x4000) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  if ((*(_DWORD *)(v3 + 136) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_18F32EE98(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950A20;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_18F32EEB0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F32EED4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "displacement", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 40) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F32EF84(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F32F1E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_8:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 40) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_18F32F274(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951A50;
  *(_DWORD *)(result + 212) = 0;
  return result;
}

void sub_18F32F28C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F32F2B0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "centerOfMassAccelZAmplitudeBackwards", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 212);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "height", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "integratedAngleYg", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "integratedAngleYgBackwards", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "integratedCenterOfAccelZMaxBackwards", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "integratedRotationAxisWZ", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "integratedRotationAxisWZForwards", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "integratedRotationRateYBackwards", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "integratedUserAccelTForwards", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "integratedUserAccelY", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "integratedVelocityZ", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "integratedVelocityZBackwards", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "integratedVelocityZForwards", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "isValidPeak");
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "medianCadence", *(double *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "peakTime", *(double *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "rotationAxisWTAmplitudeXForwards", *(double *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "rotationRateMaxZForwards", *(double *)(a1 + 136));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "rotationTMaxZForwards", *(double *)(a1 + 144));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 152));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "strideLengthCadence", *(double *)(a1 + 160));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "swingAccelAmplitudeYBackwards", *(double *)(a1 + 168));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x200000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "swingAccelMeanXBackwards", *(double *)(a1 + 176));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x800000) == 0)
      goto LABEL_26;
LABEL_53:
    PB::TextFormatter::format(this, "userAccelTMeanXBackards", *(double *)(a1 + 192));
    if ((*(_DWORD *)(a1 + 212) & 0x1000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_27;
  }
LABEL_52:
  PB::TextFormatter::format(this, "swingAccelTZMean", *(double *)(a1 + 184));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x800000) != 0)
    goto LABEL_53;
LABEL_26:
  if ((v5 & 0x1000000) != 0)
LABEL_27:
    PB::TextFormatter::format(this, "weight", *(double *)(a1 + 200));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F32F620(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 212) |= 0x40000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 2u:
          *(_DWORD *)(a1 + 212) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 3u:
          *(_DWORD *)(a1 + 212) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 4u:
          *(_DWORD *)(a1 + 212) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 5u:
          *(_DWORD *)(a1 + 212) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 6u:
          *(_DWORD *)(a1 + 212) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 7u:
          *(_DWORD *)(a1 + 212) |= 0x1000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 200) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 8u:
          *(_DWORD *)(a1 + 212) |= 0x200000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 9u:
          *(_DWORD *)(a1 + 212) |= 0x100000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 168) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0xAu:
          *(_DWORD *)(a1 + 212) |= 0x20000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0xBu:
          *(_DWORD *)(a1 + 212) |= 0x8000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0xCu:
          *(_DWORD *)(a1 + 212) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0xDu:
          *(_DWORD *)(a1 + 212) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0xEu:
          *(_DWORD *)(a1 + 212) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0xFu:
          *(_DWORD *)(a1 + 212) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x10u:
          *(_DWORD *)(a1 + 212) |= 0x800000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 192) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x11u:
          *(_DWORD *)(a1 + 212) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x12u:
          *(_DWORD *)(a1 + 212) |= 0x2000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x13u:
          *(_DWORD *)(a1 + 212) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x14u:
          *(_DWORD *)(a1 + 212) |= 0x10000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x15u:
          *(_DWORD *)(a1 + 212) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x16u:
          *(_DWORD *)(a1 + 212) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x17u:
          *(_DWORD *)(a1 + 212) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x18u:
          *(_DWORD *)(a1 + 212) |= 0x400000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 184) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_104;
        case 0x19u:
          *(_DWORD *)(a1 + 212) |= 0x80000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_100:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_104:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          break;
        case 0x1Au:
          *(_DWORD *)(a1 + 212) |= 0x2000000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v21 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v21 = v20 != 0;
          }
          *(_BYTE *)(a1 + 208) = v21;
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F32FD5C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 212);
  if ((v4 & 0x40000) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 152));
    v4 = *(_DWORD *)(v3 + 212);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(double *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x200000) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 200));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 176));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 168));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(double *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 8) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 8) == 0)
  {
LABEL_16:
    if ((v4 & 0x800000) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x800000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(double *)(v3 + 192));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x2000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(double *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(double *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x80) == 0)
  {
LABEL_22:
    if ((v4 & 4) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 4) == 0)
  {
LABEL_23:
    if ((v4 & 1) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 1) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x400000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(double *)(v3 + 184));
  v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 0x2000000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_52:
  result = PB::Writer::write(this, *(double *)(v3 + 160));
  if ((*(_DWORD *)(v3 + 212) & 0x2000000) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F330058(uint64_t a1)
{
  NSObject *v2;
  char *v4;
  uint8_t buf[1640];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *(_WORD *)a1 = 1;
  *(_BYTE *)(a1 + 2) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 20) = 1065353216;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
  v2 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_INFO, "[CMAnchorMotionCorrespondence] Created the anchor-motion correspondence.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
    v4 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CMAnchorMotionCorrespondence::CMAnchorMotionCorrespondence()", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  sub_18F330220(a1);
  return a1;
}

void sub_18F330220(uint64_t a1)
{
  NSObject *v1;
  char *v2;
  uint8_t buf[1640];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  *(_WORD *)a1 = 1;
  *(_BYTE *)(a1 + 2) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
  v1 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v1, OS_LOG_TYPE_DEFAULT, "[CMAnchorMotionCorrespondence] Reset is called.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
    v2 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::reset()", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
}

void sub_18F3303B8(uint64_t a1, float32x2_t *a2, float *a3, uint64_t a4, double a5)
{
  float *v10;
  float32x2_t v11;
  float v12;
  float v13;
  float v14;
  __int32 v15;
  NSObject *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  float32x4_t v21;
  NSObject *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  NSObject *v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  NSObject *v32;
  int v33;
  int v34;
  NSObject *v35;
  int v36;
  int v37;
  double v38;
  double v39;
  double v40;
  double v41;
  char *v42;
  double v43;
  double v44;
  double v45;
  double v46;
  char *v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  float v51;
  char *v52;
  int v53;
  int v54;
  char *v55;
  int v56;
  int v57;
  char *v58;
  float32x4_t v59;
  int v60;
  _BYTE v61[10];
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  _BYTE buf[22];
  __int16 v68;
  double v69;
  __int16 v70;
  double v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = (float *)(a1 + 24);
    v11.f32[0] = sub_18F3D39F4((float *)(a1 + 24), *a3, a3[1], a3[2]);
    v13 = a5;
    v14 = (float)(a2[1].f32[0] - v12) * v13;
    v11.i32[1] = v15;
    *(float32x2_t *)buf = vmul_n_f32(vsub_f32(*a2, v11), v13);
    *(float *)&buf[8] = v14;
    sub_18F3D3AA8(&v59, (float *)buf);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
    v16 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(float *)(a1 + 24);
      v18 = *(float *)(a1 + 28);
      v19 = *(float *)(a1 + 32);
      v20 = *(float *)(a1 + 36);
      *(_DWORD *)buf = 134218752;
      *(double *)&buf[4] = v17;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v18;
      v68 = 2048;
      v69 = v19;
      v70 = 2048;
      v71 = v20;
      _os_log_impl(&dword_18F1DC000, v16, OS_LOG_TYPE_DEBUG, "[CMAnchorMotionCorrespondence] Before pose update fPredictedRelativeAttitude %f %f %f %f.", buf, 0x2Au);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
      v38 = *(float *)(a1 + 24);
      v39 = *(float *)(a1 + 28);
      v40 = *(float *)(a1 + 32);
      v41 = *(float *)(a1 + 36);
      v60 = 134218752;
      *(double *)v61 = v38;
      *(_WORD *)&v61[8] = 2048;
      v62 = v39;
      v63 = 2048;
      v64 = v40;
      v65 = 2048;
      v66 = v41;
      v42 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::propagatePredictedRelativeAttitude(const CMVector3d &, const CMVector3d &, double)", "CoreLocation: %s\n", v42);
      if (v42 != buf)
        free(v42);
    }
    sub_18F3D3764((uint64_t)&v59, v10, (float32x4_t *)buf, v21);
    *(_OWORD *)v10 = *(_OWORD *)buf;
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
    v22 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
    {
      v23 = *(float *)(a1 + 24);
      v24 = *(float *)(a1 + 28);
      v25 = *(float *)(a1 + 32);
      v26 = *(float *)(a1 + 36);
      *(_DWORD *)buf = 134218752;
      *(double *)&buf[4] = v23;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v24;
      v68 = 2048;
      v69 = v25;
      v70 = 2048;
      v71 = v26;
      _os_log_impl(&dword_18F1DC000, v22, OS_LOG_TYPE_DEBUG, "[CMAnchorMotionCorrespondence] After pose update fPredictedRelativeAttitude %f %f %f %f.", buf, 0x2Au);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
      v43 = *(float *)(a1 + 24);
      v44 = *(float *)(a1 + 28);
      v45 = *(float *)(a1 + 32);
      v46 = *(float *)(a1 + 36);
      v60 = 134218752;
      *(double *)v61 = v43;
      *(_WORD *)&v61[8] = 2048;
      v62 = v44;
      v63 = 2048;
      v64 = v45;
      v65 = 2048;
      v66 = v46;
      v47 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::propagatePredictedRelativeAttitude(const CMVector3d &, const CMVector3d &, double)", "CoreLocation: %s\n", v47);
      if (v47 != buf)
        free(v47);
    }
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
    v27 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
    {
      v28 = 0;
      v29 = 0.0;
      do
      {
        v29 = v29 + (float)(a2->f32[v28] * a2->f32[v28]);
        ++v28;
      }
      while (v28 != 3);
      v30 = 0;
      v31 = 0.0;
      do
      {
        v31 = v31 + (float)(a3[v30] * a3[v30]);
        ++v30;
      }
      while (v30 != 3);
      *(_DWORD *)buf = 134218496;
      *(double *)&buf[4] = sqrtf(v29);
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = sqrtf(v31);
      v68 = 2048;
      v69 = a5;
      _os_log_impl(&dword_18F1DC000, v27, OS_LOG_TYPE_DEBUG, "[CMAnchorMotionCorrespondence] Pose update done with src %f aux %f dt %f.", buf, 0x20u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
      v48 = 0;
      v49 = 0.0;
      do
      {
        v49 = v49 + (float)(a2->f32[v48] * a2->f32[v48]);
        ++v48;
      }
      while (v48 != 3);
      v50 = 0;
      v51 = 0.0;
      do
      {
        v51 = v51 + (float)(a3[v50] * a3[v50]);
        ++v50;
      }
      while (v50 != 3);
      v60 = 134218496;
      *(double *)v61 = sqrtf(v49);
      *(_WORD *)&v61[8] = 2048;
      v62 = sqrtf(v51);
      v63 = 2048;
      v64 = a5;
      v52 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::feedIMU(const CMRelDM::IMUData &, const CMRelDM::IMUData &, double, uint64_t)", "CoreLocation: %s\n", v52);
      if (v52 != buf)
        free(v52);
    }
    if (*(_BYTE *)(a1 + 1) && !*(_BYTE *)(a1 + 2))
    {
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
      v32 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
      {
        v33 = *(unsigned __int8 *)(a1 + 1);
        v34 = *(unsigned __int8 *)(a1 + 2);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v33;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v34;
        _os_log_impl(&dword_18F1DC000, v32, OS_LOG_TYPE_DEBUG, "[CMAnchorMotionCorrespondence] Anchor sensor state changed from %d to %d.", buf, 0xEu);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
        v56 = *(unsigned __int8 *)(a1 + 1);
        v57 = *(unsigned __int8 *)(a1 + 2);
        v60 = 67109376;
        *(_DWORD *)v61 = v56;
        *(_WORD *)&v61[4] = 1024;
        *(_DWORD *)&v61[6] = v57;
        v58 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::feedIMU(const CMRelDM::IMUData &, const CMRelDM::IMUData &, double, uint64_t)", "CoreLocation: %s\n", v58);
        if (v58 != buf)
          free(v58);
      }
      *(_OWORD *)v10 = *(_OWORD *)(a1 + 8);
    }
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
    v35 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
    {
      v36 = *(unsigned __int8 *)(a1 + 1);
      v37 = *(unsigned __int8 *)(a1 + 2);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v36;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v37;
      _os_log_impl(&dword_18F1DC000, v35, OS_LOG_TYPE_DEBUG, "[CMAnchorMotionCorrespondence] Anchor sensor states %d to %d.", buf, 0xEu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
      v53 = *(unsigned __int8 *)(a1 + 1);
      v54 = *(unsigned __int8 *)(a1 + 2);
      v60 = 67109376;
      *(_DWORD *)v61 = v53;
      *(_WORD *)&v61[4] = 1024;
      *(_DWORD *)&v61[6] = v54;
      v55 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::feedIMU(const CMRelDM::IMUData &, const CMRelDM::IMUData &, double, uint64_t)", "CoreLocation: %s\n", v55);
      if (v55 != buf)
        free(v55);
    }
    *(_BYTE *)(a1 + 1) = *(_BYTE *)(a1 + 2);
    *(_QWORD *)(a1 + 48) = a4;
  }
}

void sub_18F330CFC(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  NSObject *v6;
  float32x4_t v7;
  uint64_t v8;
  float v9;
  int v10;
  float32x4_t v11;
  float v12;
  uint64_t v13;
  int v14;
  int v15;
  float v16;
  NSObject *v17;
  double v18;
  NSObject *v19;
  int v20;
  _OWORD *v21;
  NSObject *v22;
  char *v23;
  char *v24;
  double v25;
  char *v26;
  int v27;
  char *v28;
  int v29;
  double v30;
  __int16 v31;
  int v32;
  int v33;
  double v34;
  _BYTE buf[12];
  _DWORD v36[407];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
  v6 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEBUG, "[CMAnchorMotionCorrespondence] Feed anchor", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
    LOWORD(v29) = 0;
    v23 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::feedAnchor(const CMOQuaternion &, uint64_t)", "CoreLocation: %s\n", v23);
    if (v23 != buf)
      free(v23);
  }
  v8 = *(_QWORD *)(a1 + 40);
  if (!v8)
  {
    v21 = (_OWORD *)(a1 + 8);
    if ((_OWORD *)(a1 + 8) != a2)
      *v21 = *a2;
    *(_OWORD *)(a1 + 24) = *v21;
    goto LABEL_26;
  }
  v9 = (float)(unint64_t)(a3 - v8) * 0.000001;
  if (v9 > 0.0)
  {
    if (v9 > 2.0)
    {
      v10 = *(_DWORD *)(a1 + 36);
      v7.f32[0] = -*(float *)(a1 + 32);
      *(float32x2_t *)buf = vneg_f32(*(float32x2_t *)(a1 + 24));
      *(_DWORD *)&buf[8] = v7.i32[0];
      v36[0] = v10;
      v11 = sub_18F1FFE94((float32x4_t *)buf, v7);
      sub_18F3D3764((uint64_t)a2, (float *)buf, (float32x4_t *)&v29, v11);
      v12 = sub_18F3D3B4C((float32x4_t *)&v29);
      v13 = 0;
      *(float *)buf = v12;
      *(_DWORD *)&buf[4] = v14;
      *(_DWORD *)&buf[8] = v15;
      v16 = 0.0;
      do
      {
        v16 = v16 + (float)(*(float *)&buf[v13] * *(float *)&buf[v13]);
        v13 += 4;
      }
      while (v13 != 12);
      *(float *)(a1 + 4) = sqrtf(v16) * 57.296;
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
      v17 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
      {
        v18 = *(float *)(a1 + 4);
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = v18;
        _os_log_impl(&dword_18F1DC000, v17, OS_LOG_TYPE_DEBUG, "[CMAnchorMotionCorrespondence] dThetaNorm %f.", buf, 0xCu);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
        v25 = *(float *)(a1 + 4);
        v33 = 134217984;
        v34 = v25;
        v26 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::anchorCorrespondence(const CMOQuaternion &, const float)", "CoreLocation: %s\n", v26);
        if (v26 != buf)
          free(v26);
      }
      *(_BYTE *)a1 = *(float *)(a1 + 4) < (float)(v9 * 1.5);
      *(_QWORD *)(a1 + 56) = a3;
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
      v19 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
      {
        v20 = *(unsigned __int8 *)(a1 + 2);
        *(_DWORD *)buf = 134218240;
        *(double *)&buf[4] = v9;
        LOWORD(v36[0]) = 1024;
        *(_DWORD *)((char *)v36 + 2) = v20;
        _os_log_impl(&dword_18F1DC000, v19, OS_LOG_TYPE_DEBUG, "[CMAnchorMotionCorrespondence] dtSeconds %f, Anchor sensor state probably changed from 0 to %d.", buf, 0x12u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
        v27 = *(unsigned __int8 *)(a1 + 2);
        v29 = 134218240;
        v30 = v9;
        v31 = 1024;
        v32 = v27;
        v28 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::feedAnchor(const CMOQuaternion &, uint64_t)", "CoreLocation: %s\n", v28);
        if (v28 != buf)
          free(v28);
      }
    }
    if ((_OWORD *)(a1 + 8) != a2)
      *(_OWORD *)(a1 + 8) = *a2;
LABEL_26:
    *(_QWORD *)(a1 + 40) = a3;
    return;
  }
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
  v22 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v22, OS_LOG_TYPE_DEBUG, "[CMAnchorMotionCorrespondence] dtSeconds == 0", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952C68);
    LOWORD(v29) = 0;
    v24 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::feedAnchor(const CMOQuaternion &, uint64_t)", "CoreLocation: %s\n", v24);
    if (v24 != buf)
      free(v24);
  }
}

os_log_t sub_18F331384()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1EE16D820 = (uint64_t)result;
  return result;
}

void sub_18F33162C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  MEMORY[0x194001438](v24, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_18F331670(uint64_t a1, CLConnectionMessage **a2)
{
  void *Dictionary;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  char *v13;
  uint8_t buf[4];
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*a2
    && (Dictionary = (void *)CLConnectionMessage::getDictionary(*a2)) != 0
    && (v6 = (void *)objc_msgSend_objectForKeyedSubscript_(Dictionary, v3, (uint64_t)CFSTR("CMErrorMessage"), v4, v5)) != 0)
  {
    v11 = objc_msgSend_intValue(v6, v7, v8, v9, v10);
  }
  else
  {
    v11 = 103;
  }
  if (qword_1EE16D938 != -1)
    dispatch_once(&qword_1EE16D938, &unk_1E29559A8);
  v12 = qword_1EE16D940;
  if (os_log_type_enabled((os_log_t)qword_1EE16D940, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v15 = v11;
    _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_FAULT, "CMHistoricalDatastore, Failed with CMError code %{public}d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D938 != -1)
      dispatch_once(&qword_1EE16D938, &unk_1E29559A8);
    v13 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMHistoricalDataStore init]_block_invoke", "CoreLocation: %s\n", v13);
    if (v13 != (char *)buf)
      free(v13);
  }
}

void sub_18F331848(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ExecutablePathFromPid;
  void *v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = getpid();
  ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2, v4, v5);
  if (ExecutablePathFromPid)
  {
    v7 = (void *)ExecutablePathFromPid;
    if (qword_1EE16D938 != -1)
      dispatch_once(&qword_1EE16D938, &unk_1E29559A8);
    v8 = qword_1EE16D940;
    if (os_log_type_enabled((os_log_t)qword_1EE16D940, OS_LOG_TYPE_INFO))
    {
      v13 = objc_msgSend_UTF8String(v7, v9, v10, v11, v12);
      v14 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446722;
      v21 = v13;
      v22 = 1026;
      v23 = v2;
      v24 = 2050;
      v25 = v14;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_INFO, "CMHistoricalDatastore, Client connection interrupt, %{public}s, %{public}d, %{public}p", buf, 0x1Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D938 != -1)
        dispatch_once(&qword_1EE16D938, &unk_1E29559A8);
      objc_msgSend_UTF8String(v7, v15, v16, v17, v18);
      v19 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMHistoricalDataStore init]_block_invoke", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
  }
}

uint64_t sub_18F331ACC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x194001018]();
    JUMPOUT(0x194001438);
  }
  return result;
}

void sub_18F33208C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_18F2A8438((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F332978(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  const __CFString *v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint8_t buf[4];
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (a5)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), 0, a4);
  if (qword_1EE16D938 != -1)
    dispatch_once(&qword_1EE16D938, &unk_1E29559A8);
  v10 = qword_1EE16D940;
  if (os_log_type_enabled((os_log_t)qword_1EE16D940, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v51 = objc_msgSend_count(a2, v11, v12, v13, v14);
    v52 = 2048;
    v53 = a3;
    v54 = 2048;
    v55 = a4;
    _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_DEFAULT, "[HistoricalFetch] Received %lu samples, cardio datatype %lu, state %lu", buf, 0x20u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D938 != -1)
      dispatch_once(&qword_1EE16D938, &unk_1E29559A8);
    v44 = 134218496;
    v45 = objc_msgSend_count(a2, v35, v36, v37, v38);
    v46 = 2048;
    v47 = a3;
    v48 = 2048;
    v49 = a4;
    v39 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMHistoricalDataStore fetchCardioSamplesFrom:to:queryToken:withHandler:]_block_invoke", "CoreLocation: %s\n", v39);
    if (v39 != (char *)buf)
      free(v39);
  }
  switch(a3)
  {
    case 0:
      objc_msgSend_setPedestrianGrade_(*(void **)(a1 + 32), v15, (uint64_t)a2, v16, v17);
      goto LABEL_23;
    case 1:
      objc_msgSend_setRecoveryHeartRate_(*(void **)(a1 + 32), v15, (uint64_t)a2, v16, v17);
      goto LABEL_23;
    case 2:
      objc_msgSend_setRecoveryWorkRate_(*(void **)(a1 + 32), v15, (uint64_t)a2, v16, v17);
      goto LABEL_23;
    case 3:
      objc_msgSend_setRecoverySessions_(*(void **)(a1 + 32), v15, (uint64_t)a2, v16, v17);
      goto LABEL_23;
    case 4:
      objc_msgSend_setCardioFitnessInputs_(*(void **)(a1 + 32), v15, (uint64_t)a2, v16, v17);
      goto LABEL_23;
    case 5:
      objc_msgSend_setCardioFitnessResults_(*(void **)(a1 + 32), v15, (uint64_t)a2, v16, v17);
      goto LABEL_23;
    case 6:
      objc_msgSend_setCardioSessionMetrics_(*(void **)(a1 + 32), v15, (uint64_t)a2, v16, v17);
      goto LABEL_23;
    case 7:
      objc_msgSend_setCardioFitnessSummary_(*(void **)(a1 + 32), v15, (uint64_t)a2, v16, v17);
LABEL_23:
      v28 = objc_msgSend_count(a2, v18, v19, v20, v21);
      v29 = *(_QWORD *)(a1 + 48);
      if (v28)
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v29 + 16))(v29, *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), a4, 0);
        if ((result & 1) == 0)
        {
          if (qword_1EE16D938 != -1)
            dispatch_once(&qword_1EE16D938, &unk_1E29559A8);
          v30 = qword_1EE16D940;
          if (os_log_type_enabled((os_log_t)qword_1EE16D940, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F1DC000, v30, OS_LOG_TYPE_DEFAULT, "[HistoricalFetch] Received interrupt from client", buf, 2u);
          }
          if (sub_18F1FCA08(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE16D938 != -1)
              dispatch_once(&qword_1EE16D938, &unk_1E29559A8);
            LOWORD(v44) = 0;
            v40 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 2, "-[CMHistoricalDataStore fetchCardioSamplesFrom:to:queryToken:withHandler:]_block_invoke", "CoreLocation: %s\n", v40);
            if (v40 != (char *)buf)
              free(v40);
          }
          result = objc_msgSend_closeDBConnection(*(void **)(a1 + 40), v31, v32, v33, v34);
        }
      }
      else
      {
        v27 = *(uint64_t (**)(void))(v29 + 16);
LABEL_32:
        result = v27();
      }
      break;
    default:
      if (qword_1EE16D938 != -1)
        dispatch_once(&qword_1EE16D938, &unk_1E29559A8);
      v22 = qword_1EE16D940;
      if (os_log_type_enabled((os_log_t)qword_1EE16D940, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        v51 = a3;
        _os_log_impl(&dword_18F1DC000, v22, OS_LOG_TYPE_ERROR, "[HistoricalFetch] Unexpected datatype: %lu", buf, 0xCu);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D938 != -1)
          dispatch_once(&qword_1EE16D938, &unk_1E29559A8);
        v44 = 134217984;
        v45 = a3;
        v41 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "-[CMHistoricalDataStore fetchCardioSamplesFrom:to:queryToken:withHandler:]_block_invoke", "CoreLocation: %s\n", v41);
        if (v41 != (char *)buf)
          free(v41);
      }
      v42 = *MEMORY[0x1E0CB2D50];
      v43 = CFSTR("Unexpected internal error.");
      v24 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v23, (uint64_t)&v43, (uint64_t)&v42, 1);
      objc_msgSend_CMErrorWithCode_userInfo_(CMErrorUtils, v25, 103, v24, v26);
      v27 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16);
      goto LABEL_32;
  }
  return result;
}

uint64_t sub_18F3336A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a5)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), 0, a4);
  if (qword_1EE16D938 != -1)
    dispatch_once(&qword_1EE16D938, &unk_1E29559A8);
  v10 = qword_1EE16D940;
  if (os_log_type_enabled((os_log_t)qword_1EE16D940, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    v33 = objc_msgSend_count(a2, v11, v12, v13, v14);
    v34 = 2048;
    v35 = a3;
    v36 = 2048;
    v37 = a4;
    _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_DEFAULT, "[HistoricalFetch] Received %lu samples, mobility datatype %lu, state %lu", buf, 0x20u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D938 != -1)
      dispatch_once(&qword_1EE16D938, &unk_1E29559A8);
    objc_msgSend_count(a2, v26, v27, v28, v29);
    v30 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMHistoricalDataStore fetchMobilitySamplesFrom:to:queryToken:withHandler:]_block_invoke", "CoreLocation: %s\n", v30);
    if (v30 != (char *)buf)
      free(v30);
  }
  switch(a3)
  {
    case 0:
      objc_msgSend_setWalkingBoutMobility_(*(void **)(a1 + 32), v15, (uint64_t)a2, v17, v18);
      break;
    case 1:
      objc_msgSend_setPredictedDistanceBouts_(*(void **)(a1 + 32), v15, (uint64_t)a2, v17, v18);
      break;
    case 2:
      objc_msgSend_setGaitMetrics_(*(void **)(a1 + 32), v15, (uint64_t)a2, v17, v18);
      break;
    case 3:
      objc_msgSend_setPredictedDistanceBoutsMobilityCalibration_(*(void **)(a1 + 32), v15, (uint64_t)a2, v17, v18);
      break;
    case 4:
      objc_msgSend_setStrideCalEntries_(*(void **)(a1 + 32), v15, (uint64_t)a2, v17, v18);
      break;
    default:
      break;
  }
  v19 = objc_msgSend_count(a2, v15, v16, v17, v18);
  v20 = *(_QWORD *)(a1 + 48);
  if (!v19)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v20 + 16))(v20, 0, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), 1, 0);
  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v20 + 16))(v20, *(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), a4, 0);
  if ((result & 1) == 0)
  {
    if (qword_1EE16D938 != -1)
      dispatch_once(&qword_1EE16D938, &unk_1E29559A8);
    v21 = qword_1EE16D940;
    if (os_log_type_enabled((os_log_t)qword_1EE16D940, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v21, OS_LOG_TYPE_DEFAULT, "[HistoricalFetch] Received interrupt from client", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D938 != -1)
        dispatch_once(&qword_1EE16D938, &unk_1E29559A8);
      v31 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMHistoricalDataStore fetchMobilitySamplesFrom:to:queryToken:withHandler:]_block_invoke", "CoreLocation: %s\n", v31);
      if (v31 != (char *)buf)
        free(v31);
    }
    return objc_msgSend_closeDBConnection(*(void **)(a1 + 40), v22, v23, v24, v25);
  }
  return result;
}

uint64_t sub_18F3349B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_18F3349C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

os_log_t sub_18F33792C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
  qword_1EE16D940 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F337958@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = sub_18F3379B0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18F33799C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F3379B0(_QWORD *a1, char *__s)
{
  char v4;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F337A4C((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_18F3379F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F337A0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2952688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18F337A1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2952688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194001438);
}

void sub_18F337A4C(int a1, uint64_t a2, char *__s)
{
  void *__p[2];
  char v5;

  sub_18F270374(__p, __s);
  MEMORY[0x194001030](a2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_18F337A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F337BDC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend__disconnect(*(void **)(a1 + 32), a2, a3, a4, a5);
}

uint64_t sub_18F337DC0(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id Weak;
  void *v7;

  objc_storeWeak((id *)(*(_QWORD *)(a1 + 32) + 24), *(id *)(a1 + 40));
  Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 24));
  v7 = *(void **)(a1 + 32);
  if (Weak)
    return objc_msgSend__connect(v7, v2, v3, v4, v5);
  else
    return objc_msgSend__disconnect(v7, v2, v3, v4, v5);
}

void sub_18F337E64(uint64_t a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  sub_18F338C98("kCLConnectionMessageCheckInNoMovementLatestStateRequest", &v10);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
  {
    v9 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v3 = __ldxr(p_shared_owners);
      while (__stxr(v3 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v9)
    {
      v4 = (unint64_t *)&v9->__shared_owners_;
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_18F337F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F3382C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  id *v28;

  sub_18F2A8438((uint64_t)&a14);
  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18F33834C(uint64_t a1, uint64_t *a2)
{
  id *Weak;
  id *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  Weak = (id *)objc_loadWeak((id *)(a1 + 32));
  if (Weak)
  {
    v4 = Weak;
    if (objc_loadWeak(Weak + 3))
    {
      v8 = (std::__shared_weak_count *)a2[1];
      v14 = *a2;
      v15 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      objc_msgSend__handleMessage_(v4, v5, (uint64_t)&v14, v6, v7);
      v11 = v15;
      if (v15)
      {
        v12 = (unint64_t *)&v15->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
}

void sub_18F3383F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F2A8438((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18F338404()
{
  NSObject *v0;
  char *v1;
  uint8_t buf[1640];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D968 != -1)
    dispatch_once(&qword_1EE16D968, &unk_1E2955068);
  v0 = qword_1EE16D970;
  if (os_log_type_enabled((os_log_t)qword_1EE16D970, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v0, OS_LOG_TYPE_DEFAULT, "[CMNoMovementManager] interruption with locationd occurred", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D968 != -1)
      dispatch_once(&qword_1EE16D968, &unk_1E2955068);
    v1 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMNoMovementManager _connect]_block_invoke", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf)
      free(v1);
  }
}

void sub_18F338808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F2A8438((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F338C04(uint64_t a1)
{
  id Weak;
  uint64_t v3;
  uint64_t v4;

  Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 24));
  return MEMORY[0x1E0DE7D20](Weak, sel_didStateUpdate_, *(_QWORD *)(a1 + 40), v3, v4);
}

os_log_t sub_18F338C6C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "CheckIn");
  qword_1EE16D970 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F338C98@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = sub_18F338CF0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18F338CDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F338CF0(_QWORD *a1, char *__s)
{
  char v4;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F338D4C((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_18F338D38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F338D4C(int a1, uint64_t a2, char *__s)
{
  void *__p[2];
  char v5;

  sub_18F270374(__p, __s);
  MEMORY[0x194001030](a2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_18F338D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F338DB4(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  void *__p[2];
  char v6;

  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2952688;
  sub_18F270374(__p, "kCLConnectionMessageCheckInNoMovementSubscription");
  MEMORY[0x19400103C](v4 + 3, __p, *a2);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_18F338E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_18F339294(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend__disconnect(*(void **)(a1 + 32), a2, a3, a4, a5);
}

uint64_t sub_18F33946C(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id Weak;
  void *v7;

  objc_storeWeak((id *)(*(_QWORD *)(a1 + 32) + 24), *(id *)(a1 + 40));
  Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 24));
  v7 = *(void **)(a1 + 32);
  if (Weak)
    return objc_msgSend__connect(v7, v2, v3, v4, v5);
  else
    return objc_msgSend__disconnect(v7, v2, v3, v4, v5);
}

void sub_18F339948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  id *v28;

  sub_18F2A8438((uint64_t)&a11);
  sub_18F2A8438((uint64_t)&__p);
  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18F3399C8(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  id *Weak;
  id *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  NSObject *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  __int16 v22;
  uint8_t buf[1640];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E29552A8);
  v4 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_INFO, "[HeadphoneUsage] CMAudioAccessoryUsageManager - Calling default handler", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E29552A8);
    v22 = 0;
    v18 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMAudioAccessoryUsageManager _connect]_block_invoke", "CoreLocation: %s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
  Weak = (id *)objc_loadWeak((id *)(a1 + 32));
  v6 = Weak;
  if (!Weak)
  {
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E29552A8);
    v16 = qword_1ECEDEE30;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v16, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] CMAudioAccessoryUsageManager: strongSelf missing!", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 == -1)
    {
LABEL_34:
      v22 = 0;
      v19 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMAudioAccessoryUsageManager _connect]_block_invoke", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
      return;
    }
LABEL_36:
    dispatch_once(&qword_1ECEDEE38, &unk_1E29552A8);
    goto LABEL_34;
  }
  if (objc_loadWeak(Weak + 3))
  {
    v10 = (std::__shared_weak_count *)a2[1];
    v20 = *a2;
    v21 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    objc_msgSend__handleMessage_(v6, v7, (uint64_t)&v20, v8, v9);
    v13 = v21;
    if (v21)
    {
      v14 = (unint64_t *)&v21->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    return;
  }
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E29552A8);
  v17 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v17, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] No delegate set", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 == -1)
      goto LABEL_34;
    goto LABEL_36;
  }
}

void sub_18F339E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F2A8438((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F339E44()
{
  NSObject *v0;
  char *v1;
  uint8_t buf[1640];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE38 != -1)
    dispatch_once(&qword_1ECEDEE38, &unk_1E29552A8);
  v0 = qword_1ECEDEE30;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE30, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v0, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] CMAudioAccessoryUsageManager - interruptionHandler", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE38 != -1)
      dispatch_once(&qword_1ECEDEE38, &unk_1E29552A8);
    v1 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMAudioAccessoryUsageManager _connect]_block_invoke", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf)
      free(v1);
  }
}

uint64_t sub_18F33A810(uint64_t a1)
{
  id Weak;
  uint64_t v3;
  uint64_t v4;

  Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 24));
  return MEMORY[0x1E0DE7D20](Weak, sel_errorOccurred_, *(_QWORD *)(a1 + 40), v3, v4);
}

uint64_t sub_18F33A83C(uint64_t a1)
{
  id Weak;
  uint64_t v3;
  uint64_t v4;

  Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 24));
  return MEMORY[0x1E0DE7D20](Weak, sel_didReceiveUsageMetrics_, *(_QWORD *)(a1 + 40), v3, v4);
}

uint64_t sub_18F33A868(uint64_t a1)
{
  id Weak;
  uint64_t v3;
  uint64_t v4;

  Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 24));
  return MEMORY[0x1E0DE7D20](Weak, sel_errorOccurred_, *(_QWORD *)(a1 + 40), v3, v4);
}

void sub_18F33AC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_18F2A8438((uint64_t)va);
  _Unwind_Resume(a1);
}

os_log_t sub_18F33AE18()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Accessory");
  qword_1ECEDEE30 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F33AE44@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F33AEA4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F33AE90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F33AEA4(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F33AF04((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F33AEF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F33AF04(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F33AF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F33AF74(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 52) = 0x1900000000;
  *(_QWORD *)(a1 + 360) = 0x1900000000;
  *(_QWORD *)(a1 + 668) = 0x1900000000;
  *(_QWORD *)(a1 + 976) = 0x1900000000;
  *(_QWORD *)(a1 + 1284) = 0x1900000000;
  *(_QWORD *)(a1 + 1392) = 0x1900000000;
  *(_QWORD *)(a1 + 1500) = 0x1900000000;
  *(_QWORD *)(a1 + 1608) = 0x1900000000;
  *(_QWORD *)(a1 + 1716) = 0x1900000000;
  *(_QWORD *)(a1 + 1824) = 0x1900000000;
  *(_QWORD *)(a1 + 1932) = 0x1900000000;
  *(_QWORD *)(a1 + 2040) = 0x1900000000;
  *(_QWORD *)(a1 + 2148) = 0xB200000000;
  *(_OWORD *)(a1 + 5056) = 0u;
  *(_DWORD *)(a1 + 5080) = 0;
  *(_QWORD *)(a1 + 5072) = 0;
  *(_DWORD *)(a1 + 5096) = 0;
  *(_QWORD *)(a1 + 5088) = 0;
  *(_WORD *)(a1 + 5100) = 1;
  *(_OWORD *)(a1 + 5104) = 0u;
  *(_OWORD *)(a1 + 5120) = 0u;
  *(_OWORD *)(a1 + 5136) = 0u;
  *(_OWORD *)(a1 + 5152) = 0u;
  *(_OWORD *)(a1 + 5168) = 0u;
  *(_OWORD *)(a1 + 5184) = 0u;
  *(_BYTE *)(a1 + 5200) = 1;
  *(_QWORD *)(a1 + 5212) = 0;
  *(_QWORD *)(a1 + 5220) = 0;
  *(_QWORD *)(a1 + 5228) = 0x3C00000000;
  *(_BYTE *)(a1 + 5476) = 1;
  *(_QWORD *)(a1 + 5488) = 0;
  *(_QWORD *)(a1 + 5496) = 0;
  *(_QWORD *)(a1 + 5504) = 0x3C00000000;
  *(_BYTE *)(a1 + 5752) = 1;
  *(_QWORD *)(a1 + 5772) = 0;
  *(_QWORD *)(a1 + 5764) = 0;
  *(_QWORD *)(a1 + 5780) = 0xB00000000;
  *(_DWORD *)(a1 + 5832) = 1057360530;
  *(_DWORD *)(a1 + 5856) = 0;
  *(_QWORD *)(a1 + 5840) = 0;
  *(_QWORD *)(a1 + 5847) = 0;
  *(_BYTE *)(a1 + 5860) = 1;
  *(_QWORD *)(a1 + 5880) = 0;
  *(_QWORD *)(a1 + 5872) = 0;
  *(_QWORD *)(a1 + 5888) = 0xF00000000;
  *(_DWORD *)(a1 + 5980) = 0;
  *(_BYTE *)(a1 + 5984) = 0;
  *(_QWORD *)(a1 + 6032) = 0;
  *(_DWORD *)(a1 + 5956) = 0;
  *(_DWORD *)(a1 + 5959) = 0;
  *(_QWORD *)(a1 + 5969) = 0;
  *(_QWORD *)(a1 + 5964) = 0;
  *(_BYTE *)(a1 + 6024) = 0;
  *(_OWORD *)(a1 + 5992) = 0u;
  *(_OWORD *)(a1 + 6008) = 0u;
  sub_18F33B17C(a1);
  return a1;
}

void sub_18F33B124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  void **v10;
  void **v11;
  void **v12;

  v12 = v11;
  a10 = v10 + 647;
  sub_18F33FA2C(&a10);
  a10 = v10 + 644;
  sub_18F33FA2C(&a10);
  a10 = v10 + 641;
  sub_18F33FA2C(&a10);
  a10 = v12;
  sub_18F33FA2C(&a10);
  _Unwind_Resume(a1);
}

double sub_18F33B17C(uint64_t a1)
{
  *(_BYTE *)(a1 + 1) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 668) = 0;
  *(_DWORD *)(a1 + 976) = 0;
  *(_DWORD *)(a1 + 1284) = 0;
  *(_DWORD *)(a1 + 1392) = 0;
  *(_DWORD *)(a1 + 1500) = 0;
  *(_DWORD *)(a1 + 1608) = 0;
  *(_DWORD *)(a1 + 1716) = 0;
  *(_DWORD *)(a1 + 1824) = 0;
  *(_DWORD *)(a1 + 1932) = 0;
  *(_DWORD *)(a1 + 2040) = 0;
  *(_DWORD *)(a1 + 2148) = 0;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_DWORD *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 5004) = 0u;
  *(_OWORD *)(a1 + 5020) = 0u;
  *(_OWORD *)(a1 + 5036) = 0u;
  *(_BYTE *)(a1 + 5052) = 0;
  *(_DWORD *)(a1 + 5080) = 0;
  *(_QWORD *)(a1 + 5072) = 0;
  *(_OWORD *)(a1 + 5056) = 0u;
  *(_QWORD *)(a1 + 5088) = 0;
  *(_DWORD *)(a1 + 5096) = 0;
  *(_WORD *)(a1 + 5100) = 1;
  return sub_18F33B3DC(a1);
}

void sub_18F33B1F8(_BYTE *a1, int a2)
{
  NSObject *v4;
  int v5;
  char *v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*a1 != a2)
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952CE8);
    v4 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_INFO))
    {
      v5 = *a1;
      *(_DWORD *)buf = 67109376;
      v8 = v5;
      v9 = 1024;
      v10 = a2;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_INFO, "[CMComplexTransition] Changed tracking behavior from %d to %d.", buf, 0xEu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952CE8);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CMComplexTransition::setTrackingBehavior(CMRelDM::TrackingBehavior)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    sub_18F33B17C((uint64_t)a1);
    *a1 = a2;
  }
}

double sub_18F33B3DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = a1 + 5752;
  v3 = a1 + 5200;
  sub_18F33EEC4((unint64_t *)a1);
  *(_QWORD *)(a1 + 5496) = 0;
  *(_QWORD *)(a1 + 5488) = 0;
  *(_DWORD *)(a1 + 5504) = 0;
  *(_BYTE *)(a1 + 5476) = 1;
  *(_DWORD *)(a1 + 5228) = 0;
  *(_QWORD *)(v3 + 20) = 0;
  *(_QWORD *)(v3 + 12) = 0;
  *(_BYTE *)v3 = 1;
  *(_DWORD *)(a1 + 5780) = 0;
  *(_QWORD *)(v2 + 20) = 0;
  *(_QWORD *)(v2 + 12) = 0;
  *(_BYTE *)v2 = 1;
  *(_DWORD *)(a1 + 5832) = 1057360530;
  *(_DWORD *)(a1 + 5856) = 0;
  *(_QWORD *)(a1 + 5880) = 0;
  *(_QWORD *)(a1 + 5872) = 0;
  *(_DWORD *)(a1 + 5888) = 0;
  *(_QWORD *)(a1 + 5847) = 0;
  *(_QWORD *)(a1 + 5840) = 0;
  *(_BYTE *)(v2 + 108) = 1;
  *(_DWORD *)(a1 + 5980) = 0;
  *(_BYTE *)(v2 + 232) = 0;
  *(_QWORD *)(a1 + 6032) = 0;
  *(_DWORD *)(a1 + 5956) = 0;
  *(_DWORD *)(a1 + 5959) = 0;
  *(_QWORD *)(a1 + 5964) = 0;
  *(_QWORD *)(a1 + 5969) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 5992) = 0u;
  *(_OWORD *)(a1 + 6008) = 0u;
  *(_BYTE *)(a1 + 6024) = 0;
  return result;
}

void sub_18F33B4C0(unsigned __int8 *a1, float32x2_t *a2, float32x2_t *a3, unsigned __int8 a4, unsigned __int8 a5, __int128 *a6, unint64_t a7, float32x4_t a8, float a9)
{
  float32x4_t *v13;
  __int128 v14;
  __int32 v15;
  float32x4_t v16;
  __int32 v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float *v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  int v55;
  unint64_t v56;
  int v57;
  float *v58;
  float *v59;
  float *v60;
  float *v61;
  unsigned int v62;
  float *v63;
  float *v64;
  float *v65;
  float *v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  float32x4_t *v76;
  _WORD *v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  float v83;
  float v84;
  float v85;
  BOOL v86;
  float v87;
  float v88;
  float v89;
  BOOL v90;
  float v91;
  float v92;
  unint64_t v93;
  unint64_t v94;
  BOOL v96;
  unint64_t v97;
  float v98;
  float v99;
  int32x4_t v100;
  float v101;
  BOOL v103;
  float v104;
  unsigned int v106;
  _BYTE *v107;
  float v108;
  unint64_t v109;
  unint64_t v110;
  float v111;
  uint64_t v112;
  float v113;
  float32x4_t v114;
  unint64_t i;
  float v116;
  unint64_t j;
  float v118;
  float v119;
  float32x2_t v120;
  float v121;
  float v122;
  float v123;
  float v124;
  BOOL v125;
  _BOOL4 v126;
  _BOOL4 v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  float v137;
  unint64_t v138;
  unint64_t v139;
  float v140;
  int v141;
  float v142;
  float v143;
  float v144;
  unsigned int v145;
  BOOL v146;
  int v147;
  NSObject *v148;
  double v149;
  int v150;
  int v151;
  double v152;
  int v153;
  double v154;
  int v155;
  int v156;
  double v157;
  int v158;
  char *v159;
  float v160;
  int v161;
  int v162;
  float v163;
  char v164;
  unint64_t v165;
  float v166;
  unint64_t v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  float v173;
  float v174;
  float v175;
  unint64_t v176;
  float v177;
  unint64_t v178;
  float v179;
  float v180;
  float *v181;
  float v182;
  int v183;
  _BOOL4 v184;
  int v185;
  float v186;
  float v187;
  _BOOL4 v188;
  _BOOL4 v189;
  int v190;
  _BOOL4 v191;
  float v192;
  int v193;
  _BOOL4 v194;
  int v196;
  int v197;
  NSObject *v198;
  double v199;
  double v200;
  double v201;
  double v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  double v211;
  double v212;
  double v213;
  double v214;
  char *v215;
  char v216;
  uint64_t v217;
  float v218;
  uint64_t v219;
  unsigned int v220;
  unsigned int v221;
  float v222;
  float v223;
  uint64_t v224;
  unsigned int v225;
  unsigned int v226;
  float v227;
  _BOOL4 v228;
  unint64_t v230;
  unint64_t v231;
  _BOOL4 v232;
  BOOL v233;
  float v234;
  float v235;
  float v236;
  BOOL v237;
  float v238;
  float v239;
  float v240;
  BOOL v241;
  __int8 v242;
  double v243;
  uint64_t v244;
  double v245;
  NSObject *v246;
  double v247;
  double v248;
  double v249;
  double v250;
  double v251;
  double v252;
  double v253;
  double v254;
  unint64_t v255;
  BOOL v256;
  _BOOL4 v257;
  float v258;
  unint64_t v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  double v267;
  double v268;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  NSObject *v275;
  char *v276;
  float32x4_t *v277;
  unsigned __int16 *v278;
  unint64_t v279;
  unint64_t v280;
  float v281;
  unsigned __int16 *v282;
  float32x4_t v283;
  float32x4_t v284;
  int v285;
  uint64_t v286;
  __int16 v287;
  double v288;
  __int16 v289;
  _BYTE v290[10];
  _BYTE v291[10];
  double v292;
  _BYTE v293[10];
  __int16 v294;
  double v295;
  __int16 v296;
  double v297;
  __int16 v298;
  double v299;
  __int16 v300;
  unint64_t v301;
  uint8_t buf[4];
  double v303;
  __int16 v304;
  double v305;
  __int16 v306;
  _BYTE v307[10];
  _BYTE v308[10];
  double v309;
  _BYTE v310[10];
  __int16 v311;
  double v312;
  __int16 v313;
  double v314;
  __int16 v315;
  double v316;
  __int16 v317;
  unint64_t v318;
  uint64_t v319;

  v319 = *MEMORY[0x1E0C80C00];
  v13 = (float32x4_t *)(a1 + 5020);
  if (*a1 == 1)
  {
    a1[5101] = a5;
    v14 = *a6;
    *(_OWORD *)(a1 + 6009) = *(__int128 *)((char *)a6 + 9);
    *((_OWORD *)a1 + 375) = v14;
    *((_DWORD *)a1 + 1508) = a8.i32[0];
    *((float *)a1 + 1509) = a9;
  }
  a1[5100] = a4;
  v15 = a2[8].i32[1];
  a8.f32[0] = -a2[8].f32[0];
  *(float32x2_t *)v284.f32 = vneg_f32(a2[7]);
  v284.i64[1] = __PAIR64__(v15, a8.u32[0]);
  v16 = sub_18F1FFE94(&v284, a8);
  v17 = a3[8].i32[1];
  v16.f32[0] = -a3[8].f32[0];
  *(float32x2_t *)v283.f32 = vneg_f32(a3[7]);
  v283.i64[1] = __PAIR64__(v17, v16.u32[0]);
  sub_18F1FFE94(&v283, v16);
  v18 = sub_18F3D39F4(v284.f32, a2->f32[0], a2->f32[1], a2[1].f32[0]);
  v20 = v19;
  v281 = v21;
  v22 = sub_18F3D39F4(v283.f32, a3->f32[0], a3->f32[1], a3[1].f32[0]);
  v24 = v23;
  v26 = v25;
  v27 = sub_18F33D290((float *)a2);
  v30 = sub_18F3D39F4(v284.f32, v27, v28, v29);
  v32 = v31;
  v34 = v33;
  v35 = sub_18F33D290((float *)a3);
  v38 = sub_18F3D39F4(v283.f32, v35, v36, v37);
  v39 = v18 + *((float *)a1 + 1);
  v40 = v20 + *((float *)a1 + 2);
  v41 = v281 + *((float *)a1 + 3);
  v42 = v22 + *((float *)a1 + 4);
  v43 = v24 + *((float *)a1 + 5);
  v44 = (float *)(a1 + 24);
  v45 = v26 + *((float *)a1 + 6);
  v46 = v30 + *((float *)a1 + 7);
  v47 = v32 + *((float *)a1 + 8);
  v48 = v34 + *((float *)a1 + 9);
  v49 = v38 + *((float *)a1 + 10);
  v50 = *((float *)a1 + 12);
  v52 = v51 + *((float *)a1 + 11);
  *((float *)a1 + 1) = v39;
  *((float *)a1 + 2) = v40;
  *((float *)a1 + 3) = v41;
  *((float *)a1 + 4) = v42;
  *((float *)a1 + 5) = v43;
  *((float *)a1 + 6) = v45;
  *((float *)a1 + 7) = v46;
  *((float *)a1 + 8) = v47;
  *((float *)a1 + 9) = v48;
  *((float *)a1 + 10) = v49;
  *((float *)a1 + 11) = v52;
  v54 = v53 + v50;
  *((float *)a1 + 12) = v54;
  v55 = ++a1[1];
  if (v55 == 4)
  {
    *((float *)a1 + 1) = v39 * 0.25;
    *((float *)a1 + 2) = v40 * 0.25;
    *((float *)a1 + 3) = v41 * 0.25;
    *((float *)a1 + 4) = v42 * 0.25;
    *((float *)a1 + 5) = v43 * 0.25;
    *((float *)a1 + 6) = v45 * 0.25;
    *((float *)a1 + 7) = v46 * 0.25;
    *((float *)a1 + 8) = v47 * 0.25;
    *((float *)a1 + 9) = v48 * 0.25;
    *((float *)a1 + 10) = v49 * 0.25;
    *((float *)a1 + 11) = v52 * 0.25;
    *((float *)a1 + 12) = v54 * 0.25;
    if (*a1 == 1)
    {
      v277 = v13;
      v279 = a7;
      v56 = 0;
      v57 = 1;
      do
      {
        v58 = *(float **)(*((_QWORD *)a1 + 638) + 8 * v56);
        v59 = (float *)sub_18F33D3D0((uint64_t)(a1 + 4), v56);
        LODWORD(v58) = sub_18F33F604(v58, *v59);
        v60 = *(float **)(*((_QWORD *)a1 + 641) + 8 * v56);
        v61 = (float *)sub_18F33D3D0((uint64_t)(a1 + 16), v56);
        v62 = v58 & sub_18F33F604(v60, *v61);
        v63 = *(float **)(*((_QWORD *)a1 + 644) + 8 * v56);
        v64 = (float *)sub_18F33D3D0((uint64_t)(a1 + 28), v56);
        LODWORD(v63) = sub_18F33F604(v63, *v64);
        v65 = *(float **)(*((_QWORD *)a1 + 647) + 8 * v56);
        v66 = (float *)sub_18F33D3D0((uint64_t)(a1 + 40), v56);
        v57 &= v62 & v63 & sub_18F33F604(v65, *v66);
        ++v56;
      }
      while (v56 != 3);
      v67 = 0;
      if ((v57 & 1) != 0)
      {
        v13 = v277;
        a7 = v279;
        v44 = (float *)(a1 + 24);
        do
        {
          v68 = *(_QWORD *)(*((_QWORD *)a1 + 638) + 8 * v67);
          v69 = *(_DWORD *)(v68 + 4 * *(_QWORD *)(v68 + 8) + 16);
          *(_DWORD *)sub_18F33D3D0((uint64_t)(a1 + 4), v67) = v69;
          v70 = *(_QWORD *)(*((_QWORD *)a1 + 641) + 8 * v67);
          v71 = *(_DWORD *)(v70 + 4 * *(_QWORD *)(v70 + 8) + 16);
          *(_DWORD *)sub_18F33D3D0((uint64_t)(a1 + 16), v67) = v71;
          v72 = *(_QWORD *)(*((_QWORD *)a1 + 644) + 8 * v67);
          v73 = *(_DWORD *)(v72 + 4 * *(_QWORD *)(v72 + 8) + 16);
          *(_DWORD *)sub_18F33D3D0((uint64_t)(a1 + 28), v67) = v73;
          v74 = *(_QWORD *)(*((_QWORD *)a1 + 647) + 8 * v67);
          v75 = *(_DWORD *)(v74 + 4 * *(_QWORD *)(v74 + 8) + 16);
          *(_DWORD *)sub_18F33D3D0((uint64_t)(a1 + 40), v67++) = v75;
        }
        while (v67 != 3);
      }
      else
      {
        v13 = v277;
        a7 = v279;
        v44 = (float *)(a1 + 24);
        do
        {
          *(_DWORD *)sub_18F33D3D0((uint64_t)(a1 + 4), v67) = 0;
          *(_DWORD *)sub_18F33D3D0((uint64_t)(a1 + 16), v67) = 0;
          *(_DWORD *)sub_18F33D3D0((uint64_t)(a1 + 28), v67) = 0;
          *(_DWORD *)sub_18F33D3D0((uint64_t)(a1 + 40), v67++) = 0;
        }
        while (v67 != 3);
      }
    }
    sub_18F33FACC((unsigned __int16 *)a1 + 26, (uint64_t)(a1 + 4));
    sub_18F33FACC((unsigned __int16 *)a1 + 180, (uint64_t)(a1 + 16));
    sub_18F33FACC((unsigned __int16 *)a1 + 334, (uint64_t)(a1 + 28));
    sub_18F33FACC((unsigned __int16 *)a1 + 488, (uint64_t)(a1 + 40));
    if (*a1 == 1)
    {
      sub_18F33D300((uint64_t)(a1 + 5476), v44);
      sub_18F33D300((uint64_t)v13[11].i64 + 4, (float *)a1 + 3);
      if (*((_DWORD *)a1 + 1308) == *((unsigned __int16 *)a1 + 2615))
      {
        if (v13[11].i8[4])
          sub_18F33FB38((uint64_t)v13[11].i64 + 4);
        *(_DWORD *)buf = fabsf(*((float *)a1 + 1301) * 1.2);
        sub_18F33D300((uint64_t)(a1 + 5752), (float *)buf);
      }
    }
    a1[1] = 0;
    *(_OWORD *)(a1 + 4) = 0u;
    *(_OWORD *)(a1 + 20) = 0u;
    *(_OWORD *)(a1 + 36) = 0u;
    if (*((_DWORD *)a1 + 14) == *((unsigned __int16 *)a1 + 27)
      && *((_DWORD *)a1 + 91) == *((unsigned __int16 *)a1 + 181)
      && *((_DWORD *)a1 + 168) == *((unsigned __int16 *)a1 + 335)
      && *((_DWORD *)a1 + 245) == *((unsigned __int16 *)a1 + 489))
    {
      sub_18F33D5A8((unsigned __int16 *)a1 + 26, (unsigned __int16 *)a1 + 642, (unsigned __int16 *)a1 + 750);
      sub_18F33D5A8((unsigned __int16 *)a1 + 180, (unsigned __int16 *)a1 + 696, (unsigned __int16 *)a1 + 804);
      sub_18F33D5A8((unsigned __int16 *)a1 + 334, (unsigned __int16 *)a1 + 858, (unsigned __int16 *)a1 + 966);
      sub_18F33D5A8((unsigned __int16 *)a1 + 488, (unsigned __int16 *)a1 + 912, (unsigned __int16 *)a1 + 1020);
    }
    if ((*a1 != 1 || *((_DWORD *)a1 + 1446) == *((unsigned __int16 *)a1 + 2891))
      && *((_DWORD *)a1 + 322) == *((unsigned __int16 *)a1 + 643)
      && *((_DWORD *)a1 + 349) == *((unsigned __int16 *)a1 + 697)
      && *((_DWORD *)a1 + 376) == *((unsigned __int16 *)a1 + 751)
      && *((_DWORD *)a1 + 403) == *((unsigned __int16 *)a1 + 805)
      && *((_DWORD *)a1 + 430) == *((unsigned __int16 *)a1 + 859)
      && *((_DWORD *)a1 + 457) == *((unsigned __int16 *)a1 + 913)
      && *((_DWORD *)a1 + 484) == *((unsigned __int16 *)a1 + 967)
      && *((_DWORD *)a1 + 511) == *((unsigned __int16 *)a1 + 1021))
    {
      v76 = v13;
      v280 = a7;
      *((float *)a1 + 1251) = (float)(sub_18F33D634((unsigned __int16 *)a1 + 642, (unsigned __int16 *)a1 + 696) * 3282.8)
                            / 25.0;
      v282 = (unsigned __int16 *)(a1 + 1500);
      *((float *)a1 + 1252) = (float)(sub_18F33D634((unsigned __int16 *)a1 + 750, (unsigned __int16 *)a1 + 804) * 3282.8)
                            / 25.0;
      *((float *)a1 + 1253) = (float)(sub_18F33D634((unsigned __int16 *)a1 + 858, (unsigned __int16 *)a1 + 912) * 96.17)
                            / 25.0;
      *((float *)a1 + 1254) = (float)(sub_18F33D634((unsigned __int16 *)a1 + 966, (unsigned __int16 *)a1 + 1020) * 96.17)
                            / 25.0;
      v77 = a1 + 2148;
      v78 = *((unsigned int *)a1 + 538);
      v79 = *((unsigned __int16 *)a1 + 1074) + (unint64_t)*((unsigned __int16 *)a1 + 1075);
      if (v79 < v78)
        v78 = 0;
      *(_OWORD *)&v77[8 * (v79 - v78) + 4] = *(_OWORD *)(a1 + 5004);
      v80 = *((unsigned __int16 *)a1 + 1075);
      v81 = *((unsigned int *)a1 + 538);
      if (v81 <= v80)
      {
        v82 = (unsigned __int16)*v77 + 1;
        if (v82 < v81)
          LOWORD(v81) = 0;
        *v77 = v82 - v81;
      }
      else
      {
        *((_WORD *)a1 + 1075) = v80 + 1;
      }
      v83 = sub_18F33D88C((unsigned __int16 *)a1 + 642);
      v84 = sub_18F340160((unsigned __int16 *)a1 + 642, *((unsigned __int16 *)a1 + 643));
      v85 = -v83;
      if (v83 > 0.0)
        v85 = v83;
      v86 = v85 < 0.17453;
      if (v84 >= 0.0076154)
        v86 = 0;
      v13[4].i8[13] = v86;
      v87 = sub_18F33D88C((unsigned __int16 *)a1 + 696);
      v88 = sub_18F340160((unsigned __int16 *)a1 + 696, *((unsigned __int16 *)a1 + 697));
      v89 = -v87;
      if (v87 > 0.0)
        v89 = v87;
      v90 = v89 < 0.17453;
      if (v88 >= 0.0076154)
        v90 = 0;
      v13[4].i8[14] = v90;
      sub_18F33DA38((unsigned __int16 *)a1 + 334);
      v92 = -v91;
      if (v91 > 0.0)
        v92 = v91;
      if (v92 <= 0.25)
      {
        v94 = *((_QWORD *)a1 + 636);
        v93 = a7;
      }
      else
      {
        v93 = a7;
        *((_QWORD *)a1 + 636) = a7;
        v94 = a7;
      }
      v96 = (float)((float)(v93 - v94) * 0.000001) < 0.5 && v94 != 0;
      v13[4].i8[15] = v96;
      if (v13[4].i8[13] || v13[4].i8[14])
      {
        v97 = 0;
      }
      else
      {
        v126 = sub_18F33DEA8((unsigned __int16 *)a1 + 26, 0.2618, 0.2618);
        v127 = sub_18F33DEA8((unsigned __int16 *)a1 + 180, 0.17453, 0.17453);
        v128 = sub_18F33D88C((unsigned __int16 *)a1 + 642);
        v129 = sub_18F33D88C((unsigned __int16 *)a1 + 696);
        v130 = v128 - v129;
        if ((float)(v128 - v129) <= 0.0)
          v130 = -(float)(v128 - v129);
        v131 = -v128;
        if (v128 > 0.0)
          v131 = v128;
        if (v129 <= 0.0)
          v129 = -v129;
        if (v131 < v129)
          v129 = v131;
        if (v130 >= (float)(v129 * 0.2) || !v127 || (v97 = a7, !v126))
        {
LABEL_63:
          v98 = sub_18F33D88C((unsigned __int16 *)a1 + 642);
          v99 = sub_18F33D88C((unsigned __int16 *)a1 + 696);
          *(float *)v100.i32 = -v99;
          if (v99 > 0.0)
            *(float *)v100.i32 = v99;
          v101 = -v98;
          if (v98 > 0.0)
            v101 = v98;
          if (v101 < 0.087266)
            v101 = 0.087266;
          v103 = (float)(*(float *)v100.i32 / v101) > 3.0 && v13[4].i8[14] == 0;
          v104 = v99 - v98;
          if (v104 <= 0.0)
            v104 = -v104;
          if (v104 > 0.5236 && v13[5].i8[0] == 0)
            v103 = 1;
          v13[4].i8[12] = v103;
          if (v103)
          {
            v106 = *((_DWORD *)a1 + 1270) + 1;
            *((_DWORD *)a1 + 1270) = v106;
            if (v106 >= 4)
              *((_QWORD *)a1 + 634) = a7;
          }
          else
          {
            *((_DWORD *)a1 + 1270) = 0;
          }
          v107 = a1 + 5752;
          if (v13[2].i8[0])
          {
            *(_DWORD *)v77 = 0;
            v108 = 1.0;
          }
          else
          {
            v109 = *((unsigned __int16 *)a1 + 1075);
            if (v109 < 0x1A
              || (v110 = v109 - 25,
                  *((float *)a1 + 1255) = sub_18F33D6A8((unsigned __int16 *)a1 + 1074, v109 - 25, 0),
                  *((float *)a1 + 1256) = sub_18F33D6A8((unsigned __int16 *)a1 + 1074, v110, 1uLL),
                  *((float *)a1 + 1257) = sub_18F33D6A8((unsigned __int16 *)a1 + 1074, v110, 2uLL),
                  *((float *)a1 + 1258) = sub_18F33D6A8((unsigned __int16 *)a1 + 1074, v110, 3uLL),
                  v108 = 1.0,
                  !v13[2].i8[0]))
            {
              v108 = 1.0;
              if (!v13[4].i8[15])
              {
                v111 = sub_18F33D88C((unsigned __int16 *)a1 + 642);
                if (v111 <= 0.0)
                  v111 = -v111;
                if (v111 < 0.5236)
                {
                  v112 = *((_QWORD *)a1 + 634);
                  if (v112)
                  {
                    if ((float)((float)(v280 - v112) * 0.000001) >= 3.0)
                      v108 = 1.0;
                    else
                      v108 = 3.0;
                  }
                }
              }
            }
          }
          v113 = 0.25;
          if (!v13[2].i8[0])
            v113 = 0.5;
          *(float *)v100.i32 = v108 * v113;
          v114 = vaddq_f32(*v13, (float32x4_t)xmmword_18F503F90);
          *(float *)&v100.i32[1] = v113;
          v13[1] = vmulq_f32((float32x4_t)vzip1q_s32(v100, vrev64q_s32(v100)), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_18F503FA0, v114), (int8x16_t)xmmword_18F503FA0, (int8x16_t)v114));
          v278 = (unsigned __int16 *)(a1 + 1392);
          if (*a1 != 1)
          {
LABEL_221:
            v184 = fabsf(sub_18F33D88C((unsigned __int16 *)a1 + 642)) > 0.17453 || v13[2].i8[0] != 0;
            v185 = *a1;
            v186 = *((float *)a1 + 1251);
            v187 = *((float *)a1 + 1259);
            v188 = v186 > v187;
            if (*a1 && v186 <= v187)
            {
              v188 = a1[5854] != 0;
            }
            else
            {
              v189 = 1;
              if (!*a1)
              {
LABEL_232:
                v190 = v184 && v188 && v189;
                v191 = fabsf(sub_18F33D88C(v282)) > 0.087266 || v13[2].i8[0] != 0;
                v192 = *((float *)a1 + 1252);
                if (v192 <= *((float *)a1 + 1260))
                  v191 = 0;
                if (v185)
                {
                  if ((v190 & 1) != 0)
                  {
                    v193 = 1;
                  }
                  else if (v13[5].i8[1])
                  {
                    v193 = 0;
                  }
                  else
                  {
                    v193 = v191;
                  }
                  v194 = *((float *)a1 + 1254) > *((float *)a1 + 1262)
                      || *((float *)a1 + 1253) > *((float *)a1 + 1261) && v13[5].i8[1] == 0;
                }
                else
                {
                  v193 = v190 | v191;
                  v194 = *((float *)a1 + 1254) > *((float *)a1 + 1262);
                  if (*((float *)a1 + 1253) > *((float *)a1 + 1261))
                    v194 = 1;
                }
                if (!v13[2].i8[0])
                {
                  v197 = v193 & v194;
                  v13[2].i8[0] = v197;
                  if (v197 != 1)
                    return;
                  if (sub_18F33DBE8((uint64_t)a1, v280)
                    || v185
                    && ((sub_18F33DBE8((uint64_t)a1, v280) & 1) != 0
                     || a1[5962]
                     || (float)((float)*((unint64_t *)a1 + 749) + 200000.0) >= (float)v280))
                  {
                    v13[2].i8[0] = 0;
                    return;
                  }
                  *((_QWORD *)a1 + 632) = 0;
                  if (qword_1EE16D818 != -1)
                    dispatch_once(&qword_1EE16D818, &unk_1E2952CE8);
                  v198 = qword_1EE16D820;
                  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
                  {
                    v199 = *((float *)a1 + 1251);
                    v200 = *((float *)a1 + 1252);
                    v201 = *((float *)a1 + 1253);
                    v202 = *((float *)a1 + 1254);
                    v203 = *((float *)a1 + 1255);
                    v204 = *((float *)a1 + 1256);
                    v205 = *((float *)a1 + 1257);
                    v206 = *((float *)a1 + 1258);
                    *(_DWORD *)buf = 134220288;
                    v303 = *(double *)&v280;
                    v304 = 2048;
                    v305 = v199;
                    v306 = 2048;
                    *(double *)v307 = v200;
                    *(_WORD *)&v307[8] = 2048;
                    *(double *)v308 = v201;
                    *(_WORD *)&v308[8] = 2048;
                    v309 = v202;
                    *(_WORD *)v310 = 2048;
                    *(double *)&v310[2] = v203;
                    v311 = 2048;
                    v312 = v204;
                    v313 = 2048;
                    v314 = v205;
                    v315 = 2048;
                    v316 = v206;
                    v317 = 2048;
                    v318 = 0xBFF0000000000000;
                    _os_log_impl(&dword_18F1DC000, v198, OS_LOG_TYPE_DEFAULT, "[CMComplexTransition][Entering Complex Transition] Timestamp: %llu, VrtRotSim: %.2f, HrzRotSim: %.2f, VrtTrnSim: %.2f, HrzTrnSim: %.2f, VrtRotSimBln: %.2f, HrzRotSimBln: %.2f, VrtTrnSimBln: %.2f, HrzTrnSimBln: %.2f, TimeSincePureYawRot: %0.1f", buf, 0x66u);
                  }
                  if (!sub_18F1FCA08(115, 2))
                    goto LABEL_332;
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE16D818 != -1)
                    dispatch_once(&qword_1EE16D818, &unk_1E2952CE8);
                  v207 = *((float *)a1 + 1251);
                  v208 = *((float *)a1 + 1252);
                  v209 = *((float *)a1 + 1253);
                  v210 = *((float *)a1 + 1254);
                  v211 = *((float *)a1 + 1255);
                  v212 = *((float *)a1 + 1256);
                  v213 = *((float *)a1 + 1257);
                  v214 = *((float *)a1 + 1258);
                  v285 = 134220288;
                  v286 = v280;
                  v287 = 2048;
                  v288 = v207;
                  v289 = 2048;
                  *(double *)v290 = v208;
                  *(_WORD *)&v290[8] = 2048;
                  *(double *)v291 = v209;
                  *(_WORD *)&v291[8] = 2048;
                  v292 = v210;
                  *(_WORD *)v293 = 2048;
                  *(double *)&v293[2] = v211;
                  v294 = 2048;
                  v295 = v212;
                  v296 = 2048;
                  v297 = v213;
                  v298 = 2048;
                  v299 = v214;
                  v300 = 2048;
                  v301 = 0xBFF0000000000000;
                  v215 = (char *)_os_log_send_and_compose_impl();
                  sub_18F419700("Generic", 1, 0, 2, "void CMComplexTransition::logEnteringComplexTransition(const uint64_t) const", "CoreLocation: %s\n", v215);
LABEL_356:
                  if (v215 != (char *)buf)
                    free(v215);
LABEL_332:
                  sub_18F33E12C((unsigned __int16 *)a1);
                  return;
                }
                if (*((float *)a1 + 1251) <= 100.0)
                {
                  if (v192 <= 100.0)
                    v216 = 1;
                  else
                    v216 = v193;
                  if ((v216 & 1) != 0)
                  {
                    LOBYTE(v196) = 0;
                    goto LABEL_302;
                  }
                }
                else if ((v193 & 1) != 0)
                {
                  LOBYTE(v196) = 0;
                  goto LABEL_303;
                }
                v217 = *((_QWORD *)a1 + 633);
                v218 = sub_18F3403AC((unsigned __int16 *)a1 + 26, 0, *((unsigned __int16 *)a1 + 27));
                v219 = 0;
                *(float *)buf = v218;
                v303 = COERCE_DOUBLE(__PAIR64__(v221, v220));
                v222 = 0.0;
                do
                {
                  v222 = v222 + (float)(*(float *)&buf[v219] * *(float *)&buf[v219]);
                  v219 += 4;
                }
                while (v219 != 12);
                v223 = sub_18F3403AC((unsigned __int16 *)a1 + 180, 0, *((unsigned __int16 *)a1 + 181));
                v224 = 0;
                *(float *)buf = v223;
                v303 = COERCE_DOUBLE(__PAIR64__(v226, v225));
                v227 = 0.0;
                do
                {
                  v227 = v227 + (float)(*(float *)&buf[v224] * *(float *)&buf[v224]);
                  v224 += 4;
                }
                while (v224 != 12);
                v228 = sqrtf(v222) > 0.05236;
                if (sqrtf(v227) > 0.05236)
                  v228 = 1;
                v196 = ((float)((float)(v280 - v217) * 0.000001) <= 5.0 || v217 == 0) && v228;
                if (v185)
                {
                  if (v13[5].i8[1])
                  {
                    v230 = *((unsigned __int16 *)a1 + 2890) + (unint64_t)*((unsigned __int16 *)a1 + 2891) - 1;
                    v231 = *((unsigned int *)a1 + 1446);
                    if (v230 < v231)
                      v231 = 0;
                    v232 = *(float *)&a1[4 * (v230 - v231) + 5788] > 0.17453;
                  }
                  else
                  {
                    v232 = 1;
                  }
                  v196 &= v232;
                }
                if (!*((_QWORD *)a1 + 633) && v196)
                {
                  *((double *)a1 + 633) = *(double *)&v280;
                  LOBYTE(v196) = 1;
                }
LABEL_302:
                if (!v193)
                {
LABEL_304:
                  if (v13[5].i8[0])
                    v233 = 0;
                  else
                    v233 = v13[4].i8[12] != 0;
                  v234 = sub_18F33D88C((unsigned __int16 *)a1 + 642);
                  v235 = sub_18F340160((unsigned __int16 *)a1 + 642, *((unsigned __int16 *)a1 + 643));
                  v236 = -v234;
                  if (v234 > 0.0)
                    v236 = v234;
                  v237 = v235 < 0.0076154 && v236 < 0.087266;
                  v238 = sub_18F33D88C(v278);
                  v239 = sub_18F340160(v278, *((unsigned __int16 *)a1 + 697));
                  v240 = -v238;
                  if (v238 > 0.0)
                    v240 = v238;
                  v241 = v240 < 0.087266 && v237;
                  if (v239 >= 0.0076154)
                    v241 = 0;
                  v242 = (v193 | v196) & ~(v233 || v241);
                  v76[2].i8[0] = v242;
                  if (v185 && a1[5852] && *((float *)a1 + 1492) < 1.7453)
                  {
                    v76[2].i8[0] = 0;
                    v243 = *(double *)&v280;
                    *((double *)a1 + 749) = *(double *)&v280;
                  }
                  else
                  {
                    v243 = *(double *)&v280;
                    if ((v242 & 1) != 0)
                      return;
                  }
                  *((_QWORD *)a1 + 633) = 0;
                  v244 = *((_QWORD *)a1 + 632);
                  if (v244)
                    v245 = (float)((float)(unint64_t)(*(_QWORD *)&v243 - v244) * 0.000001);
                  else
                    v245 = -1.0;
                  if (qword_1EE16D818 != -1)
                    dispatch_once(&qword_1EE16D818, &unk_1E2952CE8);
                  v246 = qword_1EE16D820;
                  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
                  {
                    v247 = *((float *)a1 + 1251);
                    v248 = *((float *)a1 + 1252);
                    v249 = *((float *)a1 + 1253);
                    v250 = *((float *)a1 + 1254);
                    v251 = *((float *)a1 + 1255);
                    v252 = *((float *)a1 + 1256);
                    v253 = *((float *)a1 + 1257);
                    v254 = *((float *)a1 + 1258);
                    *(_DWORD *)buf = 134220288;
                    v303 = v243;
                    v304 = 2048;
                    v305 = v247;
                    v306 = 2048;
                    *(double *)v307 = v248;
                    *(_WORD *)&v307[8] = 2048;
                    *(double *)v308 = v249;
                    *(_WORD *)&v308[8] = 2048;
                    v309 = v250;
                    *(_WORD *)v310 = 2048;
                    *(double *)&v310[2] = v251;
                    v311 = 2048;
                    v312 = v252;
                    v313 = 2048;
                    v314 = v253;
                    v315 = 2048;
                    v316 = v254;
                    v317 = 2048;
                    v318 = *(_QWORD *)&v245;
                    _os_log_impl(&dword_18F1DC000, v246, OS_LOG_TYPE_DEFAULT, "[CMComplexTransition][Exiting Complex Transition] Timestamp: %llu, VrtRotSim: %.2f, HrzRotRim: %.2f, VrtTrnSim: %.2f, HrzTrnSim: %.2f, VrtRotSimBln: %.2f, HrzRotSimBln: %.2f, VrtTrnSimBln: %.2f, HrzTrnSimBln: %.2f, TimeSincePureYawRot: %0.1f", buf, 0x66u);
                  }
                  if (!sub_18F1FCA08(115, 2))
                    goto LABEL_332;
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE16D818 != -1)
                    dispatch_once(&qword_1EE16D818, &unk_1E2952CE8);
                  v267 = *((float *)a1 + 1251);
                  v268 = *((float *)a1 + 1252);
                  v269 = *((float *)a1 + 1253);
                  v270 = *((float *)a1 + 1254);
                  v271 = *((float *)a1 + 1255);
                  v272 = *((float *)a1 + 1256);
                  v273 = *((float *)a1 + 1257);
                  v274 = *((float *)a1 + 1258);
                  v285 = 134220288;
                  v286 = v280;
                  v287 = 2048;
                  v288 = v267;
                  v289 = 2048;
                  *(double *)v290 = v268;
                  *(_WORD *)&v290[8] = 2048;
                  *(double *)v291 = v269;
                  *(_WORD *)&v291[8] = 2048;
                  v292 = v270;
                  *(_WORD *)v293 = 2048;
                  *(double *)&v293[2] = v271;
                  v294 = 2048;
                  v295 = v272;
                  v296 = 2048;
                  v297 = v273;
                  v298 = 2048;
                  v299 = v274;
                  v300 = 2048;
                  v301 = *(_QWORD *)&v245;
                  v215 = (char *)_os_log_send_and_compose_impl();
                  sub_18F419700("Generic", 1, 0, 2, "void CMComplexTransition::logExitingComplexTransition(const uint64_t) const", "CoreLocation: %s\n", v215);
                  goto LABEL_356;
                }
LABEL_303:
                *((_QWORD *)a1 + 633) = 0;
                goto LABEL_304;
              }
              v188 = 1;
            }
            if (v13[5].i8[1])
              v189 = a1[5853] != 0;
            else
              v189 = 1;
            goto LABEL_232;
          }
          *((_QWORD *)a1 + 746) = 0;
          if (*((_DWORD *)a1 + 1377) == *((unsigned __int16 *)a1 + 2753)
            && *((_DWORD *)a1 + 1308) == *((unsigned __int16 *)a1 + 2615))
          {
            for (i = 50; i != 60; ++i)
            {
              v116 = *(float *)sub_18F3410E0((unsigned __int16 *)a1 + 2752, i);
              *((float *)a1 + 1492) = *((float *)a1 + 1492)
                                    + (float)(v116 * *(float *)sub_18F3410E0((unsigned __int16 *)a1 + 2614, i));
            }
            for (j = 10; j != 60; ++j)
            {
              v118 = *(float *)sub_18F3410E0((unsigned __int16 *)a1 + 2752, j);
              v119 = *((float *)a1 + 1493) + (float)(v118 * *(float *)sub_18F3410E0((unsigned __int16 *)a1 + 2614, j));
              *((float *)a1 + 1493) = v119;
            }
            v120.i32[0] = *((_DWORD *)a1 + 1492);
            v120.f32[1] = v119;
            *((int8x8_t *)a1 + 746) = vbsl_s8((int8x8_t)vcgez_f32(v120), (int8x8_t)vsqrt_f32(v120), (int8x8_t)vneg_f32(vsqrt_f32(vneg_f32(v120))));
            v121 = sub_18F33D88C((unsigned __int16 *)a1 + 642);
            v122 = sub_18F33D88C(v282);
            v123 = fabsf(v121);
            if (v122 < 0.17453)
              v122 = 0.17453;
            v124 = v123 / v122;
            *((float *)a1 + 1491) = v124;
            if (a1[5976])
            {
              v125 = *((float *)a1 + 1492) > 3.4907;
LABEL_112:
              a1[5976] = v125;
              goto LABEL_127;
            }
            if (v124 >= 4.0 && *((float *)a1 + 1493) >= 12.217)
            {
              v125 = 1;
              goto LABEL_112;
            }
          }
LABEL_127:
          if (a1[5984])
          {
            v132 = fabsf(*((float *)a1 + 1509));
            a1[5984] = v132 > 0.17453;
            if (v132 <= 0.17453)
              *((_DWORD *)a1 + 1495) = 0;
          }
          else
          {
            v133 = fabsf(*((float *)a1 + 1508));
            v134 = *((_DWORD *)a1 + 1495);
            v135 = v134 - 5;
            if (v134 < 5)
              v135 = 0;
            if (v133 > 0.2618)
              v136 = v134 + 1;
            else
              v136 = v135;
            *((_DWORD *)a1 + 1495) = v136;
            a1[5984] = v136 > 0x31;
          }
          v137 = *(float *)sub_18F3410E0((unsigned __int16 *)a1 + 2890, 6uLL);
          v138 = *((unsigned __int16 *)a1 + 2890) + (unint64_t)*((unsigned __int16 *)a1 + 2891) - 1;
          v139 = *((unsigned int *)a1 + 1446);
          if (v138 < v139)
            v139 = 0;
          v140 = *(float *)&a1[4 * (v138 - v139) + 5788];
          v141 = *((_DWORD *)a1 + 1464);
          if (v141)
            v142 = 0.0;
          else
            v142 = 0.087266;
          v143 = *((float *)a1 + 1458);
          v144 = v143 + v142;
          if ((v141 + 1) < 0x1F4)
            v145 = v141 + 1;
          else
            v145 = 500;
          if (v140 <= v144)
            v145 = 0;
          *((_DWORD *)a1 + 1464) = v145;
          if (a1[5853]
            || (v140 <= (float)(v143 + 0.34907) ? (v146 = v145 > 0x19) : (v146 = 1),
                !v146 ? (v147 = 0) : (v147 = 1),
                a1[5853] = v147,
                v147 != 1))
          {
            v160 = *(float *)sub_18F3410E0((unsigned __int16 *)a1 + 2890, 6uLL);
            if (vabds_f32(v160, sub_18F3412D8((unsigned __int16 *)a1 + 2890, (unsigned int (*)(float, float))sub_18F3414D4, 0)) >= 0.0000001)goto LABEL_170;
            if (*v107)
              sub_18F33FB38((uint64_t)(a1 + 5752));
            if (vabds_f32(v160, *((float *)a1 + 1439)) >= 0.0000001)
            {
              v162 = 0;
              v161 = 1;
            }
            else
            {
              if (vabds_f32(v160, sub_18F3412D8((unsigned __int16 *)a1 + 2890, (unsigned int (*)(float, float))sub_18F3414E0, 0)) >= 0.0000001)goto LABEL_171;
LABEL_170:
              if (*v107)
                sub_18F33FB38((uint64_t)(a1 + 5752));
              if (vabds_f32(v160, *((float *)a1 + 1439)) >= 0.0000001)
              {
                v161 = 0;
                v162 = 1;
              }
              else
              {
LABEL_171:
                v161 = 0;
                v162 = 0;
              }
            }
            if (a1[5853])
            {
              v163 = *((float *)a1 + 1458);
              a1[5854] = v140 > (float)(v163 + 0.69813);
              v164 = v161 ^ 1;
              if (a1[5852])
                v164 = 1;
              if ((v164 & 1) != 0)
              {
                if (!a1[5852])
                  goto LABEL_190;
                if ((float)(*((float *)a1 + 1462) - v140) <= fmaxf(*((float *)a1 + 1462) * 0.5, 0.5236))
                  v162 = 0;
                if (v162 == 1)
                {
                  sub_18F33F6A4((uint64_t)a1, v280);
                  goto LABEL_190;
                }
              }
              else
              {
                *((float *)a1 + 1462) = v137;
                a1[5852] = 1;
              }
              a1[5853] = v140 > (float)(v163 + 0.0);
              a1[5854] = v140 > (float)(v163 + 0.087266);
              if (v140 > (float)(v163 + 0.0))
                goto LABEL_190;
              sub_18F33F6A4((uint64_t)a1, v280);
            }
            if (*((_DWORD *)a1 + 1446) == *((unsigned __int16 *)a1 + 2891))
            {
              if (v161)
              {
                v165 = *((_QWORD *)a1 + 730);
                v166 = fmaxf(v137, 0.17453) + (float)((float)v165++ * *((float *)a1 + 1458));
                *((float *)a1 + 1458) = v166 / (float)v165;
                *((_QWORD *)a1 + 730) = v165;
              }
            }
            else
            {
              *((_QWORD *)a1 + 730) = 0;
              *((_DWORD *)a1 + 1458) = 1057360530;
            }
          }
          else
          {
            *((float *)a1 + 1462) = v137;
            a1[5852] = 0;
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2952CE8);
            v148 = qword_1EE16D820;
            if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
            {
              v149 = *((float *)a1 + 1458);
              v150 = *((_DWORD *)a1 + 1464);
              v151 = a1[5854];
              v152 = *((float *)a1 + 1462);
              v153 = a1[5852];
              *(_DWORD *)buf = 134219520;
              v303 = v140;
              v304 = 2048;
              v305 = v149;
              v306 = 1024;
              *(_DWORD *)v307 = v150;
              *(_WORD *)&v307[4] = 1024;
              *(_DWORD *)&v307[6] = v151;
              *(_WORD *)v308 = 2048;
              *(double *)&v308[2] = v152;
              LOWORD(v309) = 1024;
              *(_DWORD *)((char *)&v309 + 2) = v153;
              HIWORD(v309) = 2048;
              *(_QWORD *)v310 = v280;
              _os_log_impl(&dword_18F1DC000, v148, OS_LOG_TYPE_DEFAULT, "[CMComplexTransition] Entering body turn, body turn signal: %.2f, fBodyTurnMaximaBaseline: %0.2f, fCounterBodyTurnAboveBaseline: %d, fInStrongBodyTurn: %d, fLastInBodyTurnMaxima: %0.2f, fLastInBodyTurnFallingEdge: %d, timestamp: %llu", buf, 0x3Cu);
            }
            if (sub_18F1FCA08(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE16D818 != -1)
                dispatch_once(&qword_1EE16D818, &unk_1E2952CE8);
              v154 = *((float *)a1 + 1458);
              v155 = *((_DWORD *)a1 + 1464);
              v156 = a1[5854];
              v157 = *((float *)a1 + 1462);
              v158 = a1[5852];
              v285 = 134219520;
              *(double *)&v286 = v140;
              v287 = 2048;
              v288 = v154;
              v289 = 1024;
              *(_DWORD *)v290 = v155;
              *(_WORD *)&v290[4] = 1024;
              *(_DWORD *)&v290[6] = v156;
              *(_WORD *)v291 = 2048;
              *(double *)&v291[2] = v157;
              LOWORD(v292) = 1024;
              *(_DWORD *)((char *)&v292 + 2) = v158;
              HIWORD(v292) = 2048;
              *(_QWORD *)v293 = v280;
              v159 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 2, "void CMComplexTransition::updateInBodyTurnState(const uint64_t)", "CoreLocation: %s\n", v159);
              if (v159 != (char *)buf)
                free(v159);
            }
          }
LABEL_190:
          *(_WORD *)(a1 + 5961) = 0;
          v167 = *((_QWORD *)a1 + 750);
          if (v167 && (float)(*((float *)a1 + 1508) + *((float *)a1 + 1508)) <= 0.7854)
          {
            if (a1[5984])
              goto LABEL_195;
            if (!a1[5976])
            {
              if (!a1[6024])
                v167 = *((_QWORD *)a1 + 751);
              v256 = v280 >= v167;
              v255 = v280 - v167;
              if (v256)
              {
                v256 = !a1[6024] && v255 >= 0x1E8481;
                v257 = !v256;
                a1[5961] = v257;
                if (v257)
                {
                  v258 = 0.0;
                  v259 = 20;
                  v260 = 0.0;
                  do
                  {
                    v261 = v258;
                    v262 = *(float *)sub_18F3410E0((unsigned __int16 *)a1 + 2614, v259) - v260;
                    v258 = v261 + v262;
                    v260 = (float)((float)(v261 + v262) - v261) - v262;
                    ++v259;
                  }
                  while (v259 != 60);
                  v263 = fabsf(*((float *)a1 + 1504));
                  v264 = fabsf((float)((float)(v258 / 40.0) * 40.0) / 50.0);
                  v265 = v263 * 0.5;
                  v146 = v263 <= 2.618;
                  v266 = 1.309;
                  if (v146)
                    v266 = v265;
                  a1[5962] = v264 < v266;
                }
              }
            }
          }
          if (!a1[5984])
          {
LABEL_196:
            if (a1[5852])
            {
              a1[5960] = 0;
            }
            else
            {
              v168 = sub_18F33D88C((unsigned __int16 *)a1 + 642);
              v169 = *((float *)a1 + 1489);
              v170 = fmaxf(v169, 0.2618);
              v171 = fabsf(v168);
              if (a1[5960])
              {
                v172 = v170 + 0.17453;
              }
              else
              {
                v173 = fmaxf(v169, 0.5236);
                v174 = 1.5;
                if (!a1[5962])
                  v174 = 1.0;
                v172 = v170 + (float)(v174 * v173);
              }
              a1[5960] = v171 > v172;
              if (v171 > v172)
              {
                *((_QWORD *)a1 + 735) = 0;
                *((_QWORD *)a1 + 734) = 0;
                *((_DWORD *)a1 + 1472) = 0;
                a1[5860] = 1;
LABEL_217:
                if (a1[5976])
                  v183 = 1;
                else
                  v183 = a1[5984];
                a1[5853] = (v183 | a1[5853]) != 0;
                goto LABEL_221;
              }
            }
            v175 = *(float *)sub_18F33EB28((unsigned __int16 *)a1 + 642, 0xCuLL);
            v176 = sub_18F340824((unsigned __int16 *)a1 + 642, 0, *((unsigned __int16 *)a1 + 643), 0);
            v177 = *(float *)sub_18F33FD6C((unsigned __int16 *)a1 + 642, v176);
            v178 = sub_18F340C08((unsigned __int16 *)a1 + 642, 0, *((unsigned __int16 *)a1 + 643), 0);
            v179 = *(float *)sub_18F33FD6C((unsigned __int16 *)a1 + 642, v178);
            v180 = sub_18F340EA8((unsigned __int16 *)a1 + 642, 0, *((unsigned __int16 *)a1 + 643), 0);
            if (vabds_f32(v175, v177) < 0.0000001 && vabds_f32(v175, v180) >= 0.0000001
              || vabds_f32(v175, v179) < 0.0000001 && vabds_f32(v175, v180) >= 0.0000001)
            {
              if (*((unsigned __int16 *)a1 + 643) <= 0xCu)
              {
                if (qword_1ECEDEE88 != -1)
                  dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
                v275 = off_1ECEDEE80;
                if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
                {
                  *(_DWORD *)buf = 134217984;
                  *(_QWORD *)&v303 = 12;
                  _os_log_impl(&dword_18F1DC000, v275, OS_LOG_TYPE_FAULT, "Assertion failed: i < size(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 39,out of buffer range %zu.", buf, 0xCu);
                }
                if (sub_18F1FCA08(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1ECEDEE88 != -1)
                    dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
                  v285 = 134217984;
                  v286 = 12;
                  v276 = (char *)_os_log_send_and_compose_impl();
                  sub_18F419700("Generic", 1, 0, 0, "Element &CMVectorBufferBase<float, 1>::operator[](const size_t) [T = float, N = 1]", "CoreLocation: %s\n", v276);
                  if (v276 != (char *)buf)
                    free(v276);
                }
              }
              v181 = (float *)sub_18F33FD6C((unsigned __int16 *)a1 + 642, 0xCuLL);
              v182 = *v181;
              if (*v181 > (float)(*((float *)a1 + 1489) + 0.17453))
              {
                *((_QWORD *)a1 + 735) = 0;
                *((_QWORD *)a1 + 734) = 0;
                *((_DWORD *)a1 + 1472) = 0;
                a1[5860] = 1;
              }
              *(_DWORD *)buf = fabsf(v182);
              sub_18F33D300((uint64_t)(a1 + 5860), (float *)buf);
            }
            if (*((_WORD *)a1 + 2945))
            {
              if (a1[5860])
                sub_18F33FB38((uint64_t)(a1 + 5860));
              *((_DWORD *)a1 + 1489) = *((_DWORD *)a1 + 1466);
            }
            goto LABEL_217;
          }
LABEL_195:
          a1[5960] = 1;
          goto LABEL_196;
        }
      }
      *((_QWORD *)a1 + 632) = v97;
      goto LABEL_63;
    }
  }
}

float sub_18F33D290(float *a1)
{
  float v2;
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v9[3];

  v2 = sub_18F200A14(a1 + 14);
  v3 = 0;
  v5 = a1[4] + v4;
  v7 = v6 + a1[5];
  v9[0] = a1[3] + v2;
  v9[1] = v5;
  v9[2] = v7;
  do
  {
    v9[v3] = -v9[v3];
    ++v3;
  }
  while (v3 != 3);
  return v9[0];
}

unsigned __int16 *sub_18F33D300(uint64_t a1, float *a2)
{
  unsigned __int16 *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  unsigned __int16 *result;

  v3 = (unsigned __int16 *)(a1 + 28);
  if (*(_DWORD *)(a1 + 32) == *(unsigned __int16 *)(a1 + 30))
  {
    v4 = *(float *)(a1 + 28 + 4 * *(unsigned __int16 *)(a1 + 28) + 8);
    v5 = *(float *)(a1 + 12);
    v6 = (float)(*a2 - v4) - *(float *)(a1 + 16);
    *(float *)(a1 + 12) = v5 + v6;
    *(float *)(a1 + 16) = (float)((float)(v5 + v6) - v5) - v6;
    v7 = *(float *)(a1 + 20);
    v8 = (float)((float)(*a2 * *a2) - (float)(v4 * v4)) - *(float *)(a1 + 24);
  }
  else
  {
    v9 = *(float *)(a1 + 12);
    v10 = *a2 - *(float *)(a1 + 16);
    *(float *)(a1 + 12) = v9 + v10;
    *(float *)(a1 + 16) = (float)((float)(v9 + v10) - v9) - v10;
    v7 = *(float *)(a1 + 20);
    v8 = (float)(*a2 * *a2) - *(float *)(a1 + 24);
  }
  *(float *)(a1 + 20) = v7 + v8;
  *(float *)(a1 + 24) = (float)((float)(v7 + v8) - v7) - v8;
  result = sub_18F201BDC(v3, a2);
  *(_BYTE *)a1 = 1;
  return result;
}

uint64_t sub_18F33D3D0(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2 >= 3)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v8 = a2;
      v9 = 2048;
      v10 = 3;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMVector.h, line 277,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T &CMVector<float, 3>::operator[](const size_t) [T = float, N = 3]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return a1 + 4 * a2;
}

unsigned __int16 *sub_18F33D5A8(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v10;
  float v11;

  v5 = sub_18F340578(a1, 0, a1[1]);
  v7 = v6;
  v11 = v8 * 0.02;
  sub_18F3407C4(a2, &v11);
  v10 = sqrtf((float)(v5 * v5) + (float)(v7 * v7)) * 0.02;
  return sub_18F3407C4(a3, &v10);
}

float sub_18F33D634(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unint64_t v4;
  float v5;
  float *v6;

  v4 = 0;
  v5 = 0.0;
  do
  {
    v6 = (float *)sub_18F33EB28(a1, v4);
    v5 = v5 + (float)(*v6 * *(float *)sub_18F33EB28(a2, v4++));
  }
  while (v4 != 25);
  return v5;
}

float sub_18F33D6A8(unsigned __int16 *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6;
  float v7;
  uint64_t v8;
  NSObject *v10;
  char *v11;
  uint8_t buf[1640];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1[1])
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v10 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 104,mean() on empty buffer.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T CMVectorBufferBase<float, 4>::mean(size_t, size_t, size_t) const [T = float, N = 4]", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  v6 = 0;
  v7 = 0.0;
  do
  {
    v8 = sub_18F33FB74(a1, v6);
    v7 = v7 + sub_18F33ECEC(v8, a3);
    ++v6;
  }
  while (a2 != v6);
  return v7 / (float)a2;
}

float sub_18F33D88C(unsigned __int16 *a1)
{
  NSObject *v3;
  char *v4;
  uint8_t buf[1640];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (!a1[1])
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v3 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 145,back() on empty buffer.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v4 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "Element CMVectorBufferBase<float, 1>::back() const [T = float, N = 1]", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  return *(float *)sub_18F33FD6C(a1, a1[1] - 1);
}

float sub_18F33DA38(unsigned __int16 *a1)
{
  NSObject *v3;
  char *v4;
  uint8_t buf[1640];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (!a1[1])
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v3 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 145,back() on empty buffer.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v4 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "Element CMVectorBufferBase<float, 3>::back() const [T = float, N = 3]", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  return *(float *)sub_18F33FF64(a1, a1[1] - 1);
}

uint64_t sub_18F33DBE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  _BOOL4 v9;
  NSObject *v10;
  int v11;
  int v12;
  char *v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  double v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 5052;
  if (*(_BYTE *)(a1 + 5052))
  {
    v4 = *(_QWORD *)(a1 + 5056);
    if (v4 && (float)((float)(unint64_t)(a2 - v4) * 0.000001) < 3.0)
      return 1;
    v5 = *(_QWORD *)(a1 + 5072);
    if (v5)
      v6 = (float)(unint64_t)(a2 - v5) * 0.000001;
    else
      v6 = -1.0;
    if (*(_BYTE *)(a1 + 5099))
      goto LABEL_17;
    v7 = sub_18F33D88C((unsigned __int16 *)(a1 + 1284));
    if (v7 <= 0.0)
      v7 = -v7;
    if (v7 >= 0.5236)
LABEL_17:
      v9 = 0;
    else
      v9 = v6 < 0.5 && *(_QWORD *)(a1 + 5072) != 0;
    if (!*(_BYTE *)(v2 + 48))
    {
      if (*(_BYTE *)(v2 + 44))
        v9 = 1;
      if (v9)
      {
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2952CE8);
        v10 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
        {
          v11 = *(unsigned __int8 *)(v2 + 44);
          v12 = *(_DWORD *)(a1 + 5080);
          *(_DWORD *)buf = 67109632;
          v16 = v11;
          v17 = 1024;
          v18 = v12;
          v19 = 2048;
          v20 = v6;
          _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_DEFAULT, "[CMComplexTransition][Head Turn Blocked CT] fInstantaneousHeadTurn: %d, fSustainedHeadTurnCounter: %d, time elapsed: %0.2f", buf, 0x18u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2952CE8);
          v14 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "BOOL CMComplexTransition::checkFalsePositiveSuppression(const uint64_t) const", "CoreLocation: %s\n", v14);
          if (v14 != (char *)buf)
            free(v14);
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL sub_18F33DEA8(unsigned __int16 *a1, float a2, float a3)
{
  unsigned __int8 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  double v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  _BOOL4 v26;
  float v28;
  _BYTE v29[4];
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = atomic_load((unsigned __int8 *)&qword_1ECEDEF38);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ECEDEF38))
  {
    qword_1ECEDEF40 = 0;
    dword_1ECEDEF48 = 1065353216;
    __cxa_guard_release(&qword_1ECEDEF38);
  }
  v7 = 0;
  v29[0] = 1;
  v33 = 0;
  v32 = 0;
  v34 = 0x1900000000;
  do
  {
    v8 = sub_18F340600(a1, v7);
    v9 = 0;
    v10 = 0.0;
    do
    {
      v10 = v10 + (float)(*(float *)(v8 + v9) * *(float *)(v8 + v9));
      v9 += 4;
    }
    while (v9 != 12);
    if (sqrtf(v10) >= 0.000001)
    {
      v11 = (float *)sub_18F340600(a1, v7);
      v12 = sub_18F340600(a1, v7);
      v13 = 0;
      v14 = 0.0;
      do
      {
        v14 = v14 + (float)(*(float *)(v12 + v13) * *(float *)(v12 + v13));
        v13 += 4;
      }
      while (v13 != 12);
      v15 = sqrtf(v14);
      v16 = (float)((float)((float)(v11[2] / v15) * *(float *)&dword_1ECEDEF48)
                  + (float)((float)(v11[1] / v15) * *((float *)&qword_1ECEDEF40 + 1)))
          + (float)((float)(*v11 / v15) * *(float *)&qword_1ECEDEF40);
      v17 = 1.0;
      if (v16 <= 1.0)
      {
        v17 = -1.0;
        if (v16 >= -1.0)
          v17 = v16;
      }
      v18 = acosf(v17);
      if (v18 <= 0.0)
        v18 = -v18;
      v19 = 3.14159265 - v18;
      if (v19 <= v18)
        v18 = v19;
      v28 = v18;
      sub_18F33D300((uint64_t)v29, &v28);
    }
    else
    {
      v28 = 0.0;
      sub_18F33D300((uint64_t)v29, &v28);
    }
    ++v7;
  }
  while (v7 != 25);
  if (v29[0])
  {
    sub_18F33FB38((uint64_t)v29);
    v20 = v31;
    if (v31 < 0.0)
      v20 = 0.0;
    v21 = sqrtf(v20);
    if (v29[0])
      sub_18F33FB38((uint64_t)v29);
  }
  else
  {
    v22 = v31;
    if (v31 < 0.0)
      v22 = 0.0;
    v21 = sqrtf(v22);
  }
  v23 = v30;
  sub_18F3403AC(a1, 0, a1[1]);
  v25 = -v24;
  if (v24 > 0.0)
    v25 = v24;
  v26 = v25 > 0.087266;
  if (v21 >= a3)
    v26 = 0;
  return v23 < a2 && v26;
}

void sub_18F33E12C(unsigned __int16 *a1)
{
  NSObject *v2;
  unint64_t v3;
  double v4;
  double v5;
  unint64_t v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  unint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  double v15;
  double v16;
  double v17;
  float v18;
  char *v19;
  char *v20;
  uint8_t buf[4];
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2952CE8);
  v2 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    v3 = sub_18F340824(a1 + 642, 0, a1[643], 0);
    v4 = (float)(*(float *)sub_18F33FD6C(a1 + 642, v3) * 57.296);
    v5 = (float)(sub_18F340A28(a1 + 642, a1[643]) * 57.296);
    v6 = sub_18F340C08(a1 + 642, 0, a1[643], 0);
    v7 = (float)(*(float *)sub_18F33FD6C(a1 + 642, v6) * 57.296);
    v8 = (float)(sub_18F33E980(a1 + 642) * 57.296);
    v9 = (float)(*(float *)sub_18F33EB28(a1 + 642, 0xCuLL) * 57.296);
    *(_DWORD *)buf = 134219264;
    v22 = v4;
    v23 = 2048;
    v24 = v5;
    v25 = 2048;
    v26 = v7;
    v27 = 2048;
    v28 = v8;
    v29 = 2048;
    v30 = v9;
    v31 = 2048;
    v32 = (float)(sub_18F33D88C(a1 + 642) * 57.296);
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "[CMComplexTransition] Src inertial-Z rot rate buffer stats (dps): Min: %.2f, Mean: %.2f, Max: %.2f, First: %.2f, Mid: %.2f, Last: %.2f ", buf, 0x3Eu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952CE8);
    sub_18F33E734(a1 + 642);
    sub_18F340A28(a1 + 642, a1[643]);
    sub_18F33E944(a1 + 642);
    sub_18F33E980(a1 + 642);
    sub_18F33EB28(a1 + 642, 0xCuLL);
    sub_18F33D88C(a1 + 642);
    v19 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMComplexTransition::logVerticalRotationBufferStats(const uint64_t) const", "CoreLocation: %s\n", v19);
    if (v19 != (char *)buf)
      free(v19);
  }
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2952CE8);
  v10 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    v11 = sub_18F340824(a1 + 696, 0, a1[697], 0);
    v12 = (float)(*(float *)sub_18F33FD6C(a1 + 696, v11) * 57.296);
    v13 = (float)(sub_18F340A28(a1 + 696, a1[697]) * 57.296);
    v14 = sub_18F340C08(a1 + 696, 0, a1[697], 0);
    v15 = (float)(*(float *)sub_18F33FD6C(a1 + 696, v14) * 57.296);
    v16 = (float)(sub_18F33E980(a1 + 696) * 57.296);
    v17 = (float)(*(float *)sub_18F33EB28(a1 + 696, 0xCuLL) * 57.296);
    v18 = sub_18F33D88C(a1 + 696);
    *(_DWORD *)buf = 134219264;
    v22 = v12;
    v23 = 2048;
    v24 = v13;
    v25 = 2048;
    v26 = v15;
    v27 = 2048;
    v28 = v16;
    v29 = 2048;
    v30 = v17;
    v31 = 2048;
    v32 = (float)(v18 * 57.296);
    _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_DEFAULT, "[CMComplexTransition] Aux inertial-Z rot rate buffer stats (dps): Min: %.2f, Mean: %.2f, Max: %.2f, First: %.2f, Mid: %.2f, Last: %.2f ", buf, 0x3Eu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952CE8);
    sub_18F33E734(a1 + 696);
    sub_18F340A28(a1 + 696, a1[697]);
    sub_18F33E944(a1 + 696);
    sub_18F33E980(a1 + 696);
    sub_18F33EB28(a1 + 696, 0xCuLL);
    sub_18F33D88C(a1 + 696);
    v20 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMComplexTransition::logVerticalRotationBufferStats(const uint64_t) const", "CoreLocation: %s\n", v20);
    if (v20 != (char *)buf)
      free(v20);
  }
}

float sub_18F33E734(unsigned __int16 *a1)
{
  unint64_t v2;

  v2 = sub_18F340824(a1, 0, a1[1], 0);
  return *(float *)sub_18F33FD6C(a1, v2);
}

float sub_18F33E770(uint64_t a1, uint64_t a2)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v8 = a2;
      v9 = 2048;
      v10 = 1;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMVector.h, line 271,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMVector<float, 1>::operator[](const size_t) const [T = float, N = 1]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return *(float *)(a1 + 4 * a2);
}

float sub_18F33E944(unsigned __int16 *a1)
{
  unint64_t v2;

  v2 = sub_18F340C08(a1, 0, a1[1], 0);
  return *(float *)sub_18F33FD6C(a1, v2);
}

float sub_18F33E980(unsigned __int16 *a1)
{
  NSObject *v3;
  char *v4;
  uint8_t buf[1640];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (!a1[1])
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v3 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 139,front() on empty buffer.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v4 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "Element CMVectorBufferBase<float, 1>::front() const [T = float, N = 1]", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  return *(float *)sub_18F33FD6C(a1, 0);
}

uint64_t sub_18F33EB28(unsigned __int16 *a1, unint64_t a2)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1[1] <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      v8 = a2;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < size(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 45,out of buffer range %zu.", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const Element &CMVectorBufferBase<float, 1>::operator[](const size_t) const [T = float, N = 1]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return sub_18F33FD6C(a1, a2);
}

float sub_18F33ECEC(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2 >= 4)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v8 = a2;
      v9 = 2048;
      v10 = 4;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMVector.h, line 271,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMVector<float, 4>::operator[](const size_t) const [T = float, N = 4]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return *(float *)(a1 + 4 * a2);
}

uint64_t sub_18F33EEC4(unint64_t *a1)
{
  unint64_t *v2;
  unint64_t *v3;
  uint64_t **v4;
  int i;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t j;
  int v10;
  uint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t k;
  int v28;
  uint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t m;
  int v46;
  uint64_t *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  __int128 v58;
  unint64_t v59;
  uint64_t result;
  uint64_t v61;
  int *v62;
  uint64_t n;
  int v64;
  uint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  __int128 v76;
  unint64_t v77;
  uint64_t **v78;
  unint64_t *v79;
  unint64_t v80;
  __int128 v81;
  unint64_t v82;
  unint64_t *v83;

  v2 = a1 + 641;
  v3 = a1 + 638;
  sub_18F33FA6C((uint64_t)(a1 + 638), (_QWORD *)a1[638]);
  v79 = v3;
  sub_18F33F554(v3);
  sub_18F33FA6C((uint64_t)v2, (_QWORD *)a1[641]);
  sub_18F33F554(v2);
  sub_18F33FA6C((uint64_t)(a1 + 644), (_QWORD *)a1[644]);
  v78 = (uint64_t **)(a1 + 644);
  sub_18F33F554(a1 + 644);
  v4 = (uint64_t **)(a1 + 647);
  sub_18F33FA6C((uint64_t)(a1 + 647), (_QWORD *)a1[647]);
  sub_18F33F554(a1 + 647);
  for (i = 0; i != 3; ++i)
  {
    v6 = operator new();
    v7 = v6;
    *(_OWORD *)v6 = xmmword_18F503FB0;
    v8 = &dword_18F503FC0;
    for (j = 52; j != 32; j -= 4)
    {
      v10 = *v8++;
      *(_DWORD *)(v6 + j) = v10;
    }
    *(float *)(v6 + 40) = -*(float *)(v6 + 40);
    *(float *)(v6 + 48) = -*(float *)(v6 + 48);
    *(_OWORD *)(v6 + 56) = *(_OWORD *)(v6 + 36);
    v11 = (uint64_t *)a1[639];
    v12 = a1[640];
    if ((unint64_t)v11 >= v12)
    {
      v14 = (uint64_t *)*v79;
      v15 = (uint64_t)((uint64_t)v11 - *v79) >> 3;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
        sub_18F26F8C0();
      v17 = v12 - (_QWORD)v14;
      if (v17 >> 2 > v16)
        v16 = v17 >> 2;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      v83 = a1 + 640;
      if (v18)
      {
        v18 = (unint64_t)sub_18F340E0C(v18);
        v11 = (uint64_t *)a1[639];
        v14 = (uint64_t *)a1[638];
      }
      else
      {
        v19 = 0;
      }
      v20 = (uint64_t *)(v18 + 8 * v15);
      v80 = v18;
      *(_QWORD *)&v81 = v20;
      v82 = v18 + 8 * v19;
      *v20 = v7;
      *((_QWORD *)&v81 + 1) = v20 + 1;
      if (v11 == v14)
      {
        v13 = v20 + 1;
      }
      else
      {
        do
        {
          v21 = *--v11;
          *v11 = 0;
          *--v20 = v21;
        }
        while (v11 != v14);
        v13 = (_QWORD *)*((_QWORD *)&v81 + 1);
      }
      v22 = *((_OWORD *)a1 + 319);
      a1[638] = (unint64_t)v20;
      a1[639] = (unint64_t)v13;
      v81 = v22;
      v23 = a1[640];
      a1[640] = v82;
      v82 = v23;
      v80 = v22;
      sub_18F340E40((uint64_t)&v80);
    }
    else
    {
      *v11 = v6;
      v13 = v11 + 1;
      a1[639] = (unint64_t)v13;
    }
    a1[639] = (unint64_t)v13;
    v24 = operator new();
    v25 = v24;
    *(_OWORD *)v24 = xmmword_18F503FB0;
    v26 = &dword_18F503FC0;
    for (k = 52; k != 32; k -= 4)
    {
      v28 = *v26++;
      *(_DWORD *)(v24 + k) = v28;
    }
    *(float *)(v24 + 40) = -*(float *)(v24 + 40);
    *(float *)(v24 + 48) = -*(float *)(v24 + 48);
    *(_OWORD *)(v24 + 56) = *(_OWORD *)(v24 + 36);
    v29 = (uint64_t *)a1[642];
    v30 = a1[643];
    if ((unint64_t)v29 >= v30)
    {
      v32 = *v2;
      v33 = (uint64_t)((uint64_t)v29 - *v2) >> 3;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 61)
        sub_18F26F8C0();
      v35 = v30 - v32;
      if (v35 >> 2 > v34)
        v34 = v35 >> 2;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      v83 = a1 + 643;
      if (v36)
      {
        v36 = (unint64_t)sub_18F340E0C(v36);
        v29 = (uint64_t *)a1[642];
        v32 = a1[641];
      }
      else
      {
        v37 = 0;
      }
      v38 = (uint64_t *)(v36 + 8 * v33);
      v80 = v36;
      *(_QWORD *)&v81 = v38;
      v82 = v36 + 8 * v37;
      *v38 = v25;
      *((_QWORD *)&v81 + 1) = v38 + 1;
      if (v29 == (uint64_t *)v32)
      {
        v31 = v38 + 1;
      }
      else
      {
        do
        {
          v39 = *--v29;
          *v29 = 0;
          *--v38 = v39;
        }
        while (v29 != (uint64_t *)v32);
        v31 = (_QWORD *)*((_QWORD *)&v81 + 1);
      }
      v40 = *(_OWORD *)v2;
      a1[641] = (unint64_t)v38;
      a1[642] = (unint64_t)v31;
      v81 = v40;
      v41 = a1[643];
      a1[643] = v82;
      v82 = v41;
      v80 = v40;
      sub_18F340E40((uint64_t)&v80);
    }
    else
    {
      *v29 = v24;
      v31 = v29 + 1;
      a1[642] = (unint64_t)v31;
    }
    a1[642] = (unint64_t)v31;
    v42 = operator new();
    v43 = v42;
    *(_OWORD *)v42 = xmmword_18F503FB0;
    v44 = &dword_18F503FC0;
    for (m = 52; m != 32; m -= 4)
    {
      v46 = *v44++;
      *(_DWORD *)(v42 + m) = v46;
    }
    *(float *)(v42 + 40) = -*(float *)(v42 + 40);
    *(float *)(v42 + 48) = -*(float *)(v42 + 48);
    *(_OWORD *)(v42 + 56) = *(_OWORD *)(v42 + 36);
    v47 = (uint64_t *)a1[645];
    v48 = a1[646];
    if ((unint64_t)v47 >= v48)
    {
      v50 = *v78;
      v51 = v47 - *v78;
      v52 = v51 + 1;
      if ((unint64_t)(v51 + 1) >> 61)
        sub_18F26F8C0();
      v53 = v48 - (_QWORD)v50;
      if (v53 >> 2 > v52)
        v52 = v53 >> 2;
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
        v54 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v54 = v52;
      v83 = a1 + 646;
      if (v54)
      {
        v54 = (unint64_t)sub_18F340E0C(v54);
        v47 = (uint64_t *)a1[645];
        v50 = (uint64_t *)a1[644];
      }
      else
      {
        v55 = 0;
      }
      v56 = (uint64_t *)(v54 + 8 * v51);
      v80 = v54;
      *(_QWORD *)&v81 = v56;
      v82 = v54 + 8 * v55;
      *v56 = v43;
      *((_QWORD *)&v81 + 1) = v56 + 1;
      if (v47 == v50)
      {
        v49 = v56 + 1;
      }
      else
      {
        do
        {
          v57 = *--v47;
          *v47 = 0;
          *--v56 = v57;
        }
        while (v47 != v50);
        v49 = (_QWORD *)*((_QWORD *)&v81 + 1);
      }
      v58 = *((_OWORD *)a1 + 322);
      a1[644] = (unint64_t)v56;
      a1[645] = (unint64_t)v49;
      v81 = v58;
      v59 = a1[646];
      a1[646] = v82;
      v82 = v59;
      v80 = v58;
      sub_18F340E40((uint64_t)&v80);
    }
    else
    {
      *v47 = v42;
      v49 = v47 + 1;
      a1[645] = (unint64_t)v49;
    }
    a1[645] = (unint64_t)v49;
    result = operator new();
    v61 = result;
    *(_OWORD *)result = xmmword_18F503FB0;
    v62 = &dword_18F503FC0;
    for (n = 52; n != 32; n -= 4)
    {
      v64 = *v62++;
      *(_DWORD *)(result + n) = v64;
    }
    *(float *)(result + 40) = -*(float *)(result + 40);
    *(float *)(result + 48) = -*(float *)(result + 48);
    *(_OWORD *)(result + 56) = *(_OWORD *)(result + 36);
    v65 = (uint64_t *)a1[648];
    v66 = a1[649];
    if ((unint64_t)v65 >= v66)
    {
      v68 = *v4;
      v69 = v65 - *v4;
      v70 = v69 + 1;
      if ((unint64_t)(v69 + 1) >> 61)
        sub_18F26F8C0();
      v71 = v66 - (_QWORD)v68;
      if (v71 >> 2 > v70)
        v70 = v71 >> 2;
      if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
        v72 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v72 = v70;
      v83 = a1 + 649;
      if (v72)
      {
        v72 = (unint64_t)sub_18F340E0C(v72);
        v65 = (uint64_t *)a1[648];
        v68 = (uint64_t *)a1[647];
      }
      else
      {
        v73 = 0;
      }
      v74 = (uint64_t *)(v72 + 8 * v69);
      v80 = v72;
      *(_QWORD *)&v81 = v74;
      v82 = v72 + 8 * v73;
      *v74 = v61;
      *((_QWORD *)&v81 + 1) = v74 + 1;
      if (v65 == v68)
      {
        v67 = v74 + 1;
      }
      else
      {
        do
        {
          v75 = *--v65;
          *v65 = 0;
          *--v74 = v75;
        }
        while (v65 != v68);
        v67 = (_QWORD *)*((_QWORD *)&v81 + 1);
      }
      v76 = *(_OWORD *)v4;
      a1[647] = (unint64_t)v74;
      a1[648] = (unint64_t)v67;
      v81 = v76;
      v77 = a1[649];
      a1[649] = v82;
      v82 = v77;
      v80 = v76;
      result = sub_18F340E40((uint64_t)&v80);
    }
    else
    {
      *v65 = result;
      v67 = v65 + 1;
      a1[648] = (unint64_t)v67;
    }
    a1[648] = (unint64_t)v67;
  }
  return result;
}

void sub_18F33F514(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x1000C40FF89C88ELL);
  _Unwind_Resume(a1);
}

unint64_t *sub_18F33F554(unint64_t *result)
{
  unint64_t v1;
  unint64_t v2;
  int64x2_t *v3;
  _QWORD *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  int64x2_t v11;
  unint64_t v12;
  unint64_t *v13;

  v1 = result[2];
  v2 = *result;
  if (v1 - *result <= 0x17)
  {
    v3 = (int64x2_t *)result;
    v4 = (_QWORD *)result[1];
    v13 = result + 2;
    v5 = (char *)operator new(0x18uLL);
    v6 = &v5[((unint64_t)v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    if (v4 == (_QWORD *)v2)
    {
      v9 = vdupq_n_s64(v2);
      v7 = &v5[((unint64_t)v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v7 = &v5[((unint64_t)v4 - v2) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v8 = *--v4;
        *v4 = 0;
        *((_QWORD *)v7 - 1) = v8;
        v7 -= 8;
      }
      while (v4 != (_QWORD *)v2);
      v9 = *v3;
      v1 = v3[1].u64[0];
    }
    v3->i64[0] = (uint64_t)v7;
    v3->i64[1] = (uint64_t)v6;
    v11 = v9;
    v3[1].i64[0] = (uint64_t)(v5 + 24);
    v12 = v1;
    v10 = v9.i64[0];
    return (unint64_t *)sub_18F340E40((uint64_t)&v10);
  }
  return result;
}

BOOL sub_18F33F604(float *a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v3 = *((_QWORD *)a1 + 1);
    if ((unint64_t)(v3 + 1) <= 4)
      v4 = v3 + 1;
    else
      v4 = 0;
    a1[v4 + 4] = a2;
    if ((unint64_t)(v4 + 1) <= 4)
      v5 = v4 + 1;
    else
      v5 = 0;
    *(_QWORD *)a1 = v2 - 1;
  }
  else
  {
    v6 = 0;
    v7 = *((_QWORD *)a1 + 1);
    if ((unint64_t)(v7 + 1) <= 4)
      v8 = v7 + 1;
    else
      v8 = 0;
    a1[v8 + 4] = a2;
    a2 = 0.0;
    do
    {
      a2 = a2 + (float)(a1[v6 + 13 - v8] * a1[v6 + 4]);
      ++v6;
    }
    while (v6 != 5);
    if ((unint64_t)(v8 + 1) <= 4)
      v5 = v8 + 1;
    else
      v5 = 0;
  }
  *((_QWORD *)a1 + 1) = v5;
  a1[v5 + 4] = a2;
  return v2 == 0;
}

void sub_18F33F6A4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  NSObject *v5;
  unint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  int v10;
  double v11;
  int v12;
  char *v13;
  uint8_t buf[4];
  double v15;
  __int16 v16;
  double v17;
  __int16 v18;
  int v19;
  __int16 v20;
  double v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)(a1 + 5852);
  *(_DWORD *)(a1 + 5856) = 0;
  *(_DWORD *)(a1 + 5848) = 0;
  *(_DWORD *)(a1 + 5851) = 0;
  *(_QWORD *)(a1 + 5840) >>= 1;
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2952CE8);
  v5 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(unsigned __int16 *)(a1 + 5780) + (unint64_t)*(unsigned __int16 *)(a1 + 5782) - 1;
    v7 = *(unsigned int *)(a1 + 5784);
    if (v6 < v7)
      v7 = 0;
    v8 = *(float *)(a1 + 5780 + 4 * (v6 - v7) + 8);
    v9 = *(float *)(a1 + 5832);
    v10 = *(_DWORD *)(a1 + 5856);
    v11 = *(float *)(a1 + 5848);
    v12 = *v4;
    *(_DWORD *)buf = 134219264;
    v15 = v8;
    v16 = 2048;
    v17 = v9;
    v18 = 1024;
    v19 = v10;
    v20 = 2048;
    v21 = v11;
    v22 = 1024;
    v23 = v12;
    v24 = 2048;
    v25 = a2;
    _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_DEFAULT, "[CMComplexTransition] Exiting body turn, body turn signal: %.2f, fBodyTurnMaximaBaseline: %0.2f, fCounterBodyTurnAboveBaseline: %d, fLastInBodyTurnMaxima: %0.2f, fLastInBodyTurnFallingEdge: %d, timestamp: %llu", buf, 0x36u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952CE8);
    v13 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMComplexTransition::onBodyTurnStateExit(const uint64_t)", "CoreLocation: %s\n", v13);
    if (v13 != (char *)buf)
      free(v13);
  }
}

float sub_18F33F978(uint64_t a1, int a2, int a3)
{
  unsigned __int16 *v4;
  unint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  float v10;

  if (a3 < 1)
  {
    v10 = 0.0;
  }
  else
  {
    v4 = (unsigned __int16 *)(a1 + 28);
    v5 = a2;
    v6 = 0.0;
    v7 = 0.0;
    v8 = a3;
    do
    {
      v9 = *(float *)sub_18F3410E0(v4, v5) - v7;
      v10 = v6 + v9;
      v7 = (float)((float)(v6 + v9) - v6) - v9;
      ++v5;
      v6 = v6 + v9;
      --v8;
    }
    while (v8);
  }
  return v10 / (float)a3;
}

os_log_t sub_18F33FA00()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1EE16D820 = (uint64_t)result;
  return result;
}

void sub_18F33FA2C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_18F33FA6C((uint64_t)v2, *v2);
    operator delete(**a1);
  }
}

uint64_t sub_18F33FA6C(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v5 = *--v4;
    result = v5;
    *v4 = 0;
    if (v5)
      result = MEMORY[0x194001438](result, 0x1000C40FF89C88ELL);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

unsigned __int16 *sub_18F33FACC(unsigned __int16 *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  v4 = &result[6 * (v3 - v2)];
  v5 = *(_DWORD *)(a2 + 8);
  *((_QWORD *)v4 + 1) = *(_QWORD *)a2;
  *((_DWORD *)v4 + 4) = v5;
  v6 = result[1];
  v7 = *((unsigned int *)result + 1);
  if (v7 <= v6)
  {
    v8 = *result + 1;
    if (v8 < v7)
      LOWORD(v7) = 0;
    *result = v8 - v7;
  }
  else
  {
    result[1] = v6 + 1;
  }
  return result;
}

uint64_t sub_18F33FB38(uint64_t result)
{
  unsigned int v1;
  float v2;
  float v3;
  float v4;

  v1 = *(unsigned __int16 *)(result + 30);
  if (v1 > 1)
  {
    v4 = *(float *)(result + 12);
    v2 = v4 / (float)v1;
    v3 = (float)(*(float *)(result + 20) - (float)(v4 * v2)) / (float)v1;
  }
  else
  {
    v2 = *(float *)(result + 12);
    v3 = 0.0;
  }
  *(float *)(result + 4) = v2;
  *(float *)(result + 8) = v3;
  *(_BYTE *)result = 0;
  return result;
}

uint64_t sub_18F33FB74(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v11 = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T &CMQueue<CMVector<float, 4>>::operator[](const size_t) const [T = CMVector<float, 4>]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[8 * (v4 - v5) + 4];
}

uint64_t sub_18F33FD6C(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v11 = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T &CMQueue<CMVector<float, 1>>::operator[](const size_t) const [T = CMVector<float, 1>]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[2 * (v4 - v5) + 4];
}

uint64_t sub_18F33FF64(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v11 = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T &CMQueue<CMVector<float, 3>>::operator[](const size_t) const [T = CMVector<float, 3>]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[6 * (v4 - v5) + 4];
}

float sub_18F340160(unsigned __int16 *a1, unint64_t a2)
{
  float v4;
  float v5;
  float v6;
  unint64_t v7;
  float v8;
  unint64_t v9;
  float *v10;
  NSObject *v12;
  char *v13;
  uint8_t buf[1640];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a1[1])
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v12 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 210,variance() on empty buffer.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v13 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const CMVector<T, N> CMVectorBufferBase<float, 1>::variance(size_t, size_t) const [T = float, N = 1]", "CoreLocation: %s\n", v13);
      if (v13 != (char *)buf)
        free(v13);
    }
  }
  v4 = 1.0 / (float)a2;
  v5 = *(float *)sub_18F33FD6C(a1, 0);
  v6 = v4 * v5;
  if (a2 < 2)
    return v4 * (float)((float)(v5 - v6) * (float)(v5 - v6));
  v7 = 1;
  do
    v6 = v6 + (float)(v4 * *(float *)sub_18F33FD6C(a1, v7++));
  while (a2 != v7);
  v8 = v4 * (float)((float)(v5 - v6) * (float)(v5 - v6));
  v9 = 1;
  do
  {
    v10 = (float *)sub_18F33FD6C(a1, v9);
    v8 = v8 + (float)(v4 * (float)((float)(*v10 - v6) * (float)(*v10 - v6)));
    ++v9;
  }
  while (a2 != v9);
  return v8;
}

float sub_18F3403AC(unsigned __int16 *a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  char *v8;
  uint8_t buf[1640];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!a1[1])
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 93,mean() on empty buffer.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const Element CMVectorBufferBase<float, 3>::mean(size_t, size_t) const [T = float, N = 3]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  return sub_18F340578(a1, a2, a3) / (float)(a3 - a2);
}

float sub_18F340578(unsigned __int16 *a1, unint64_t a2, unint64_t a3)
{
  float v3;
  float v4;
  float v5;
  unint64_t v7;
  float *v9;

  v3 = 0.0;
  v4 = 0.0;
  v5 = 0.0;
  if (a2 < a3)
  {
    v7 = a2;
    do
    {
      v9 = (float *)sub_18F33FF64(a1, v7);
      v3 = v3 + *v9;
      v4 = v4 + v9[1];
      v5 = v5 + v9[2];
      ++v7;
    }
    while (a3 != v7);
  }
  return v3;
}

uint64_t sub_18F340600(unsigned __int16 *a1, unint64_t a2)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1[1] <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      v8 = a2;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < size(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 45,out of buffer range %zu.", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const Element &CMVectorBufferBase<float, 3>::operator[](const size_t) const [T = float, N = 3]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return sub_18F33FF64(a1, a2);
}

unsigned __int16 *sub_18F3407C4(unsigned __int16 *result, _DWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  *(_DWORD *)&result[2 * (v3 - v2) + 4] = *a2;
  v4 = result[1];
  v5 = *((unsigned int *)result + 1);
  if (v5 <= v4)
  {
    v6 = *result + 1;
    if (v6 < v5)
      LOWORD(v5) = 0;
    *result = v6 - v5;
  }
  else
  {
    result[1] = v4 + 1;
  }
  return result;
}

unint64_t sub_18F340824(unsigned __int16 *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  NSObject *v13;
  char *v14;
  uint8_t buf[1640];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1[1])
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v13 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 183,minElement() on empty buffer.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v14 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "size_t CMVectorBufferBase<float, 1>::minElement(size_t, size_t, size_t) const [T = float, N = 1]", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
  }
  v8 = a2 + 1;
  if (a2 + 1 < a3)
  {
    do
    {
      v9 = sub_18F33FD6C(a1, v8);
      v10 = sub_18F33E770(v9, a4);
      v11 = sub_18F33FD6C(a1, a2);
      if (v10 < sub_18F33E770(v11, a4))
        a2 = v8;
      ++v8;
    }
    while (a3 != v8);
  }
  return a2;
}

float sub_18F340A28(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  float v5;
  NSObject *v7;
  char *v8;
  uint8_t buf[1640];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!a1[1])
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 93,mean() on empty buffer.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const Element CMVectorBufferBase<float, 1>::mean(size_t, size_t) const [T = float, N = 1]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  if (a2)
  {
    v4 = 0;
    v5 = 0.0;
    do
      v5 = v5 + *(float *)sub_18F33FD6C(a1, v4++);
    while (a2 != v4);
  }
  else
  {
    v5 = 0.0;
  }
  return v5 / (float)a2;
}

unint64_t sub_18F340C08(unsigned __int16 *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  NSObject *v13;
  char *v14;
  uint8_t buf[1640];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1[1])
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v13 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 161,maxElement() on empty buffer.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v14 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "size_t CMVectorBufferBase<float, 1>::maxElement(size_t, size_t, size_t) const [T = float, N = 1]", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
  }
  v8 = a2 + 1;
  if (a2 + 1 < a3)
  {
    do
    {
      v9 = sub_18F33FD6C(a1, v8);
      v10 = sub_18F33E770(v9, a4);
      v11 = sub_18F33FD6C(a1, a2);
      if (v10 > sub_18F33E770(v11, a4))
        a2 = v8;
      ++v8;
    }
    while (a3 != v8);
  }
  return a2;
}

void *sub_18F340E0C(unint64_t a1)
{
  if (a1 >> 61)
    sub_18F26F97C();
  return operator new(8 * a1);
}

uint64_t sub_18F340E40(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      MEMORY[0x194001438](v4, 0x1000C40FF89C88ELL);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

float sub_18F340EA8(unsigned __int16 *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  NSObject *v9;
  char *v10;
  uint8_t buf[1640];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!a1[1])
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v9 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 104,mean() on empty buffer.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T CMVectorBufferBase<float, 1>::mean(size_t, size_t, size_t) const [T = float, N = 1]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  return sub_18F341074(a1, a2, a3, a4) / (float)(a3 - a2);
}

float sub_18F341074(unsigned __int16 *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  float v4;
  unint64_t v7;
  uint64_t v9;

  v4 = 0.0;
  if (a2 < a3)
  {
    v7 = a2;
    do
    {
      v9 = sub_18F33FD6C(a1, v7);
      v4 = v4 + sub_18F33E770(v9, a4);
      ++v7;
    }
    while (a3 != v7);
  }
  return v4;
}

uint64_t sub_18F3410E0(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v11 = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T &CMQueue<float>::operator[](const size_t) const [T = float]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[2 * (v4 - v5) + 4];
}

float sub_18F3412D8(unsigned __int16 *a1, unsigned int (*a2)(float, float), unint64_t a3)
{
  unint64_t v6;
  float v7;
  float *v8;
  float v9;
  NSObject *v11;
  char *v12;
  uint8_t buf[1640];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = a1[1];
  if (!a1[1])
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
    v11 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v11, OS_LOG_TYPE_FAULT, "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 179,.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954A28);
      v12 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMQueue<float>::getComparison(int (*)(const T, const T), size_t) const [T = float]", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
  v7 = *(float *)sub_18F3410E0(a1, a3);
  if (v6 > a3)
  {
    do
    {
      v8 = (float *)sub_18F3410E0(a1, a3);
      v9 = *v8;
      if (a2(*v8, v7))
        v7 = v9;
      ++a3;
    }
    while (v6 != a3);
  }
  return v7;
}

BOOL sub_18F3414D4(float a1, float a2)
{
  return a2 < a1;
}

BOOL sub_18F3414E0(float a1, float a2)
{
  return a1 < a2;
}

void sub_18F341974(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x1080C40C3C00EEFLL);
  _Unwind_Resume(a1);
}

void sub_18F342038(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F342090(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
    return MEMORY[0x1E0DE7D20](a2, sel_feedSourceDeviceIMU_, result, a4, a5);
  return result;
}

uint64_t sub_18F3420A4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
    return MEMORY[0x1E0DE7D20](a2, sel_feedAccessoryConfig_, result, a4, a5);
  return result;
}

uint64_t sub_18F3420B8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
    return MEMORY[0x1E0DE7D20](a2, sel_feedAudioAccessoryIMU_, result, a4, a5);
  return result;
}

void sub_18F342540(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F342AE0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x194001438](v2, 0x1080C40C3C00EEFLL);
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F342B14(_QWORD **a1, _QWORD *a2)
{
  _QWORD *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_18F3C3E9C(result);
    JUMPOUT(0x194001438);
  }
  return result;
}

void sub_18F34340C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x10A0C40538029D6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F3434CC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 40));
}

uint64_t sub_18F343574(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, double, double, double, double))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(double *)(*(_QWORD *)(a1 + 40) + 24), *(double *)(*(_QWORD *)(a1 + 40) + 32), 0.0, *(float *)(*(_QWORD *)(a1 + 40) + 44));
}

uint64_t sub_18F34362C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_18F343C30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F34423C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F344848(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F345370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_18F2B9670((PB::Base *)&a43);
  sub_18F346934((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_18F346218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  void *v19;

  objc_sync_exit(v19);
  _Unwind_Resume(a1);
}

void sub_18F3465EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_18F2B9670((PB::Base *)va);
  sub_18F346934(v4 - 144);
  _Unwind_Resume(a1);
}

void sub_18F346760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_18F2B9670((PB::Base *)va);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  _Unwind_Resume(a1);
}

os_log_t sub_18F346908()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "MotionContext");
  qword_1EE16D8E0 = (uint64_t)result;
  return result;
}

uint64_t sub_18F346934(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 17))
  {
    if (*(_BYTE *)(a1 + 16))
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    else
      (*(void (**)(void))(**(_QWORD **)a1 + 24))();
    *(_BYTE *)(a1 + 17) = 0;
  }
  return a1;
}

char *sub_18F346988(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_18F26F880(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_15:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_15;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_17:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *v12 = &v9[v17];
  return result;
}

void sub_18F346A80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v3 = 480;
    while (1)
    {
      v4 = *(_QWORD *)(a2 + v3);
      *(_QWORD *)(a2 + v3) = 0;
      if (v4)
        MEMORY[0x194001438](v4, 0x1000C40FF89C88ELL);
      v3 -= 8;
      if (v3 == 464)
      {
        v5 = *(_QWORD *)(a2 + 464);
        *(_QWORD *)(a2 + 464) = 0;
        if (v5)
          MEMORY[0x194001438](v5, 0x1000C40FF89C88ELL);
        v6 = 248;
        while (1)
        {
          v7 = *(_QWORD *)(a2 + v6);
          *(_QWORD *)(a2 + v6) = 0;
          if (v7)
            MEMORY[0x194001438](v7, 0x1000C40FF89C88ELL);
          v6 -= 8;
          if (v6 == 232)
            JUMPOUT(0x194001438);
        }
      }
    }
  }
}

void sub_18F346B38(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (uint64_t *)(a1 + 8);
  if (!*(_QWORD *)(a1 + 8))
  {
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    v3 = *v1;
    *v1 = (uint64_t)v2;
    if (v3)
      sub_18F26F7EC((uint64_t)v1, v3);
  }
}

void sub_18F346B98(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (uint64_t *)(a1 + 16);
  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    v3 = *v1;
    *v1 = (uint64_t)v2;
    if (v3)
      sub_18F26F7EC((uint64_t)v1, v3);
  }
}

void sub_18F346BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v3 = 184;
    while (1)
    {
      v4 = *(_QWORD *)(a2 + v3);
      *(_QWORD *)(a2 + v3) = 0;
      if (v4)
        MEMORY[0x194001438](v4, 0x1000C40FF89C88ELL);
      v3 -= 8;
      if (v3 == 168)
        JUMPOUT(0x194001438);
    }
  }
}

void sub_18F346C60(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v3 = 480;
    while (1)
    {
      v4 = *(_QWORD *)(a2 + v3);
      *(_QWORD *)(a2 + v3) = 0;
      if (v4)
        MEMORY[0x194001438](v4, 0x1000C40FF89C88ELL);
      v3 -= 8;
      if (v3 == 464)
      {
        v5 = *(_QWORD *)(a2 + 464);
        *(_QWORD *)(a2 + 464) = 0;
        if (v5)
          MEMORY[0x194001438](v5, 0x1000C40FF89C88ELL);
        v6 = 248;
        while (1)
        {
          v7 = *(_QWORD *)(a2 + v6);
          *(_QWORD *)(a2 + v6) = 0;
          if (v7)
            MEMORY[0x194001438](v7, 0x1000C40FF89C88ELL);
          v6 -= 8;
          if (v6 == 232)
            JUMPOUT(0x194001438);
        }
      }
    }
  }
}

void sub_18F346D28(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F346D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_18F346D5C(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F346D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

uint64_t *sub_18F346D8C(uint64_t **a1, uint64_t *a2)
{
  uint64_t *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_18F362674(result);
    JUMPOUT(0x194001438);
  }
  return result;
}

uint64_t sub_18F346DC8(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

double sub_18F346E2C()
{
  return -1.0;
}

_QWORD *sub_18F346E34@<X0>(int *a1@<X1>, int *a2@<X2>, char *a3@<X3>, uint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xC0uLL);
  result = sub_18F346EAC(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_18F346E98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F346EAC(_QWORD *a1, int *a2, int *a3, char *a4, uint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E29526C0;
  sub_18F1EA230((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5);
  return a1;
}

void sub_18F346EF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F346F04(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29526C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18F346F14(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E29526C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F346F44(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *sub_18F346F54(uint64_t *a1, char *a2, char *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;
  __int128 buf;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *__p;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  sub_18F1E8C74((uint64_t)(a1 + 1), "CameraWorkoutLoggerMutex", 0, 1);
  if (qword_1EE16D878 != -1)
    dispatch_once(&qword_1EE16D878, &unk_1E2952D28);
  v6 = qword_1EE16D880;
  if (os_log_type_enabled((os_log_t)qword_1EE16D880, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEFAULT, "[CMCameraWorkoutLogger] Starting up.", (uint8_t *)&buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1EE16D878 != -1)
      dispatch_once(&qword_1EE16D878, &unk_1E2952D28);
    LOWORD(v12) = 0;
    v11 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CMCameraWorkoutLogger::CMCameraWorkoutLogger(const char *, const char *)", "CoreLocation: %s\n", v11);
    if (v11 != (char *)&buf)
      free(v11);
  }
  *(_QWORD *)&buf = 1048576000;
  *((_QWORD *)&buf + 1) = 0x6400015180;
  sub_18F270374(&v14, a3);
  sub_18F270374(&v16, a2);
  sub_18F270374(&__p, "msl");
  v20 = 4;
  v21 = -1;
  sub_18F34724C(&buf, &v12);
  v7 = v12;
  v12 = 0;
  sub_18F2701F0(a1, v7);
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    v9 = sub_18F2A9374();
    MEMORY[0x194001438](v9, 0x1032C4044EE41C5);
  }
  if (v19 < 0)
    operator delete(__p);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  return a1;
}

void sub_18F3471DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t *v26;
  uint64_t v27;

  sub_18F37143C(v27);
  sub_18F2701F0(v26, 0);
  _Unwind_Resume(a1);
}

void sub_18F347244()
{
  JUMPOUT(0x18F347230);
}

void sub_18F34724C(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 __p;
  uint64_t v11;
  __int128 v12;

  v4 = operator new();
  v5 = *a1;
  if (*((char *)a1 + 39) < 0)
  {
    sub_18F26F9A4(&v6, *((void **)a1 + 2), *((_QWORD *)a1 + 3));
  }
  else
  {
    v6 = a1[1];
    v7 = *((_QWORD *)a1 + 4);
  }
  if (*((char *)a1 + 63) < 0)
  {
    sub_18F26F9A4(&v8, *((void **)a1 + 5), *((_QWORD *)a1 + 6));
  }
  else
  {
    v8 = *(__int128 *)((char *)a1 + 40);
    v9 = *((_QWORD *)a1 + 7);
  }
  if (*((char *)a1 + 87) < 0)
  {
    sub_18F26F9A4(&__p, *((void **)a1 + 8), *((_QWORD *)a1 + 9));
  }
  else
  {
    __p = a1[4];
    v11 = *((_QWORD *)a1 + 10);
  }
  v12 = *(__int128 *)((char *)a1 + 88);
  sub_18F2A92C0(v4, &v5);
  *a2 = v4;
  if (SHIBYTE(v11) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v9) < 0)
    operator delete((void *)v8);
  if (SHIBYTE(v7) < 0)
    operator delete((void *)v6);
}

void sub_18F347378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a22 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  MEMORY[0x194001438](v22, 0x1032C4044EE41C5);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F3473DC(uint64_t *a1)
{
  NSObject *v2;
  char *v4;
  uint8_t buf[1640];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (*a1)
  {
    if (qword_1EE16D878 != -1)
      dispatch_once(&qword_1EE16D878, &unk_1E2952D28);
    v2 = qword_1EE16D880;
    if (os_log_type_enabled((os_log_t)qword_1EE16D880, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "[CMCameraWorkoutLogger] Sync'ing MSL file.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D878 != -1)
        dispatch_once(&qword_1EE16D878, &unk_1E2952D28);
      v4 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "CMCameraWorkoutLogger::~CMCameraWorkoutLogger()", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
    (*(void (**)(uint64_t *))(a1[1] + 16))(a1 + 1);
    sub_18F2AA0C4(*a1);
    (*(void (**)(uint64_t *))(a1[1] + 24))(a1 + 1);
  }
  sub_18F37143C((uint64_t)(a1 + 1));
  sub_18F2701F0(a1, 0);
  return a1;
}

void sub_18F3475B8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_18F213574(a1);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F3475C8(uint64_t *result, _QWORD *a2)
{
  uint64_t v3;
  CFAbsoluteTime Current;
  uint64_t v5;
  int64x2_t *v6;
  uint64_t v7;
  int64x2_t *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  char v31;
  int64x2_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  char *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  int v52;
  char v53[8];
  void *__p;
  char *v55;
  char *v56;
  int v57;
  int v58;
  char v59;
  char v60;
  _QWORD v61[362];
  int64x2_t *v62;
  char v63;
  _QWORD *v64;
  __int16 v65;
  uint64_t v66;
  int64x2_t v67;
  char *v68;
  int64x2_t *v69;

  if (*result)
  {
    v51 = result;
    v3 = result[1];
    v64 = result + 1;
    v50 = result + 1;
    (*(void (**)(void))(v3 + 16))();
    v65 = 256;
    sub_18F2B6BD0(v61);
    Current = CFAbsoluteTimeGetCurrent();
    v63 |= 1u;
    *(CFAbsoluteTime *)&v61[77] = Current;
    sub_18F2C6BF0(v61);
    v5 = 0;
    v6 = v62;
    v7 = *a2;
    v62[3].i8[0] |= 2u;
    v6[2].i64[1] = v7;
    v8 = v62;
    v9 = a2[1];
    v62[3].i8[0] |= 1u;
    v8->i64[1] = v9;
    do
    {
      sub_18F2CE554((uint64_t)v53);
      v60 |= 2u;
      v58 = v5;
      v11 = v55;
      v10 = v56;
      if (v55 >= v56)
      {
        v52 = a2[v5 + 2];
        v13 = (char *)__p;
        v14 = (v55 - (_BYTE *)__p) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          sub_18F26F8C0();
        v16 = v56 - (_BYTE *)__p;
        if ((v56 - (_BYTE *)__p) >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)sub_18F26FB8C((uint64_t)&v56, v17);
          v13 = (char *)__p;
          v11 = v55;
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[4 * v14];
        *(_DWORD *)v19 = v52;
        v12 = v19 + 4;
        while (v11 != v13)
        {
          v20 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        v10 = &v18[4 * v17];
        __p = v19;
        v55 = v12;
        v56 = v10;
        if (v13)
        {
          operator delete(v13);
          v10 = v56;
        }
      }
      else
      {
        *(_DWORD *)v55 = a2[v5 + 2];
        v12 = v11 + 4;
      }
      v55 = v12;
      v21 = HIDWORD(a2[v5 + 2]);
      if (v12 >= v10)
      {
        v23 = (char *)__p;
        v24 = (v12 - (_BYTE *)__p) >> 2;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 62)
          sub_18F26F8C0();
        v26 = v10 - (_BYTE *)__p;
        if (v26 >> 1 > v25)
          v25 = v26 >> 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)sub_18F26FB8C((uint64_t)&v56, v27);
          v23 = (char *)__p;
          v12 = v55;
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[4 * v24];
        *(_DWORD *)v29 = v21;
        v22 = v29 + 4;
        while (v12 != v23)
        {
          v30 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v29 - 1) = v30;
          v29 -= 4;
        }
        __p = v29;
        v55 = v22;
        v56 = &v28[4 * v27];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_DWORD *)v12 = v21;
        v22 = v12 + 4;
      }
      v55 = v22;
      v57 = *((_DWORD *)a2 + v5 + 42);
      v31 = *((_BYTE *)a2 + v5 + 244);
      v60 |= 5u;
      v59 = v31;
      v32 = v62;
      v33 = operator new();
      sub_18F2CE680(v33, (uint64_t)v53);
      v34 = v32[2].u64[0];
      v35 = (uint64_t *)v32[1].i64[1];
      if ((unint64_t)v35 >= v34)
      {
        v37 = v32[1].i64[0];
        v38 = ((uint64_t)v35 - v37) >> 3;
        if ((unint64_t)(v38 + 1) >> 61)
          sub_18F26F8C0();
        v39 = v34 - v37;
        v40 = v39 >> 2;
        if (v39 >> 2 <= (unint64_t)(v38 + 1))
          v40 = v38 + 1;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v41 = v40;
        v69 = v32 + 2;
        if (v41)
          v42 = (char *)sub_18F26F8D4((uint64_t)v32[2].i64, v41);
        else
          v42 = 0;
        v43 = (uint64_t *)&v42[8 * v38];
        v44 = &v42[8 * v41];
        v68 = v44;
        *v43 = v33;
        v36 = v43 + 1;
        v67.i64[1] = (uint64_t)(v43 + 1);
        v46 = (_QWORD *)v32[1].i64[0];
        v45 = (_QWORD *)v32[1].i64[1];
        if (v45 == v46)
        {
          v48 = vdupq_n_s64((unint64_t)v45);
        }
        else
        {
          do
          {
            v47 = *--v45;
            *v45 = 0;
            *--v43 = v47;
          }
          while (v45 != v46);
          v48 = v32[1];
          v36 = (_QWORD *)v67.i64[1];
          v44 = v68;
        }
        v32[1].i64[0] = (uint64_t)v43;
        v32[1].i64[1] = (uint64_t)v36;
        v67 = v48;
        v49 = v32[2].i64[0];
        v32[2].i64[0] = (uint64_t)v44;
        v68 = (char *)v49;
        v66 = v48.i64[0];
        sub_18F26FBC0((uint64_t)&v66);
      }
      else
      {
        *v35 = v33;
        v36 = v35 + 1;
      }
      v32[1].i64[1] = (uint64_t)v36;
      sub_18F2CE5AC((PB::Base *)v53);
      ++v5;
    }
    while (v5 != 19);
    sub_18F2A9EF0(*v51, (uint64_t)v61);
    sub_18F2B9670((PB::Base *)v61);
    return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v50 + 24))(v50);
  }
  return result;
}

void sub_18F3479A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_18F2B9670((PB::Base *)va);
  sub_18F346934(v13 - 168);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F3479F8(uint64_t *result, uint64_t *a2)
{
  uint64_t v3;
  CFAbsoluteTime Current;
  uint64_t v5;
  int64x2_t *v6;
  uint64_t v7;
  int64x2_t *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  __int128 v12;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int64x2_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t *v56;
  char *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  int64x2_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  int v65;
  char v66[8];
  void *__p;
  char *v68;
  char *v69;
  int v70;
  char v71;
  _QWORD v72[364];
  int64x2_t *v73;
  char v74;
  _QWORD *v75;
  __int16 v76;
  uint64_t v77;
  int64x2_t v78;
  char *v79;
  int64x2_t *v80;

  if (*result)
  {
    v64 = result;
    v3 = result[1];
    v75 = result + 1;
    v63 = result + 1;
    (*(void (**)(void))(v3 + 16))();
    v76 = 256;
    sub_18F2B6BD0(v72);
    Current = CFAbsoluteTimeGetCurrent();
    v74 |= 1u;
    *(CFAbsoluteTime *)&v72[77] = Current;
    sub_18F2C6CB8(v72);
    v5 = 0;
    v6 = v73;
    v7 = *a2;
    v73[3].i8[0] |= 2u;
    v6[2].i64[1] = v7;
    v8 = v73;
    v9 = a2[1];
    v73[3].i8[0] |= 1u;
    v8->i64[1] = v9;
    do
    {
      v10 = &a2[2 * v5];
      sub_18F2CF6D0((uint64_t)v66);
      v12 = *((_OWORD *)v10 + 1);
      v11 = v10 + 2;
      v13 = v12;
      v71 |= 1u;
      v70 = v5;
      v15 = v68;
      v14 = v69;
      if (v68 >= v69)
      {
        v65 = v13;
        v17 = (char *)__p;
        v18 = (v68 - (_BYTE *)__p) >> 2;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62)
          sub_18F26F8C0();
        v20 = v69 - (_BYTE *)__p;
        if ((v69 - (_BYTE *)__p) >> 1 > v19)
          v19 = v20 >> 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)sub_18F26FB8C((uint64_t)&v69, v21);
          v17 = (char *)__p;
          v15 = v68;
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[4 * v18];
        *(_DWORD *)v23 = v65;
        v16 = v23 + 4;
        while (v15 != v17)
        {
          v24 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        v14 = &v22[4 * v21];
        __p = v23;
        v68 = v16;
        v69 = v14;
        if (v17)
        {
          operator delete(v17);
          v14 = v69;
        }
      }
      else
      {
        *(_DWORD *)v68 = v13;
        v16 = v15 + 4;
      }
      v68 = v16;
      v25 = *((_DWORD *)v11 + 1);
      if (v16 >= v14)
      {
        v27 = (char *)__p;
        v28 = (v16 - (_BYTE *)__p) >> 2;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62)
          sub_18F26F8C0();
        v30 = v14 - (_BYTE *)__p;
        if (v30 >> 1 > v29)
          v29 = v30 >> 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
          v31 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          v32 = (char *)sub_18F26FB8C((uint64_t)&v69, v31);
          v27 = (char *)__p;
          v16 = v68;
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[4 * v28];
        *(_DWORD *)v33 = v25;
        v26 = v33 + 4;
        while (v16 != v27)
        {
          v34 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v33 - 1) = v34;
          v33 -= 4;
        }
        v14 = &v32[4 * v31];
        __p = v33;
        v68 = v26;
        v69 = v14;
        if (v27)
        {
          operator delete(v27);
          v14 = v69;
        }
      }
      else
      {
        *(_DWORD *)v16 = v25;
        v26 = v16 + 4;
      }
      v68 = v26;
      v35 = *((_DWORD *)v11 + 2);
      if (v26 >= v14)
      {
        v37 = (char *)__p;
        v38 = (v26 - (_BYTE *)__p) >> 2;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          sub_18F26F8C0();
        v40 = v14 - (_BYTE *)__p;
        if (v40 >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)sub_18F26FB8C((uint64_t)&v69, v41);
          v37 = (char *)__p;
          v26 = v68;
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[4 * v38];
        *(_DWORD *)v43 = v35;
        v36 = v43 + 4;
        while (v26 != v37)
        {
          v44 = *((_DWORD *)v26 - 1);
          v26 -= 4;
          *((_DWORD *)v43 - 1) = v44;
          v43 -= 4;
        }
        __p = v43;
        v68 = v36;
        v69 = &v42[4 * v41];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *(_DWORD *)v26 = v35;
        v36 = v26 + 4;
      }
      v68 = v36;
      v45 = v73;
      v46 = operator new();
      sub_18F2CF7C0(v46, (uint64_t)v66);
      v47 = v45[2].u64[0];
      v48 = (uint64_t *)v45[1].i64[1];
      if ((unint64_t)v48 >= v47)
      {
        v50 = v45[1].i64[0];
        v51 = ((uint64_t)v48 - v50) >> 3;
        if ((unint64_t)(v51 + 1) >> 61)
          sub_18F26F8C0();
        v52 = v47 - v50;
        v53 = v52 >> 2;
        if (v52 >> 2 <= (unint64_t)(v51 + 1))
          v53 = v51 + 1;
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
          v54 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v54 = v53;
        v80 = v45 + 2;
        if (v54)
          v55 = (char *)sub_18F26F8D4((uint64_t)v45[2].i64, v54);
        else
          v55 = 0;
        v56 = (uint64_t *)&v55[8 * v51];
        v57 = &v55[8 * v54];
        v79 = v57;
        *v56 = v46;
        v49 = v56 + 1;
        v78.i64[1] = (uint64_t)(v56 + 1);
        v59 = (_QWORD *)v45[1].i64[0];
        v58 = (_QWORD *)v45[1].i64[1];
        if (v58 == v59)
        {
          v61 = vdupq_n_s64((unint64_t)v58);
        }
        else
        {
          do
          {
            v60 = *--v58;
            *v58 = 0;
            *--v56 = v60;
          }
          while (v58 != v59);
          v61 = v45[1];
          v49 = (_QWORD *)v78.i64[1];
          v57 = v79;
        }
        v45[1].i64[0] = (uint64_t)v56;
        v45[1].i64[1] = (uint64_t)v49;
        v78 = v61;
        v62 = v45[2].i64[0];
        v45[2].i64[0] = (uint64_t)v57;
        v79 = (char *)v62;
        v77 = v61.i64[0];
        sub_18F26FBC0((uint64_t)&v77);
      }
      else
      {
        *v48 = v46;
        v49 = v48 + 1;
      }
      v45[1].i64[1] = (uint64_t)v49;
      sub_18F2CF728((PB::Base *)v66);
      ++v5;
    }
    while (v5 != 17);
    sub_18F2A9EF0(*v64, (uint64_t)v72);
    sub_18F2B9670((PB::Base *)v72);
    return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v63 + 24))(v63);
  }
  return result;
}

void sub_18F347E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  sub_18F2B9670((PB::Base *)va);
  sub_18F346934(v13 - 168);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F347EB0(uint64_t *result, uint64_t *a2)
{
  uint64_t v3;
  CFAbsoluteTime Current;
  uint64_t v5;
  int64x2_t *v6;
  uint64_t v7;
  int64x2_t *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  __int128 v12;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  int v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  uint64_t *v45;
  int v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  int v57;
  _DWORD *v58;
  int v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  int v68;
  int v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  int v78;
  int v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  int v88;
  int64x2_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t *v100;
  char *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  int64x2_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t *v108;
  int v109;
  char v110[8];
  void *__p;
  char *v112;
  char *v113;
  void *v114;
  char *v115;
  char *v116;
  int v117;
  char v118;
  _QWORD v119[365];
  int64x2_t *v120;
  char v121;
  _QWORD *v122;
  __int16 v123;
  uint64_t v124;
  int64x2_t v125;
  char *v126;
  int64x2_t *v127;

  if (*result)
  {
    v108 = result;
    v3 = result[1];
    v122 = result + 1;
    v107 = result + 1;
    (*(void (**)(void))(v3 + 16))();
    v123 = 256;
    sub_18F2B6BD0(v119);
    Current = CFAbsoluteTimeGetCurrent();
    v121 |= 1u;
    *(CFAbsoluteTime *)&v119[77] = Current;
    sub_18F2C6C54(v119);
    v5 = 0;
    v6 = v120;
    v7 = *a2;
    v120[3].i8[0] |= 2u;
    v6[2].i64[1] = v7;
    v8 = v120;
    v9 = a2[1];
    v120[3].i8[0] |= 1u;
    v8->i64[1] = v9;
    do
    {
      v10 = &a2[2 * v5];
      sub_18F2D0130((uint64_t)v110);
      v12 = *((_OWORD *)v10 + 1);
      v11 = v10 + 2;
      v13 = v12;
      v118 |= 1u;
      v117 = v5;
      v15 = v112;
      v14 = v113;
      if (v112 >= v113)
      {
        v109 = v13;
        v17 = (char *)__p;
        v18 = (v112 - (_BYTE *)__p) >> 2;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62)
          sub_18F26F8C0();
        v20 = v113 - (_BYTE *)__p;
        if ((v113 - (_BYTE *)__p) >> 1 > v19)
          v19 = v20 >> 1;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
          v21 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)sub_18F26FB8C((uint64_t)&v113, v21);
          v17 = (char *)__p;
          v15 = v112;
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[4 * v18];
        *(_DWORD *)v23 = v109;
        v16 = v23 + 4;
        while (v15 != v17)
        {
          v24 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        v14 = &v22[4 * v21];
        __p = v23;
        v112 = v16;
        v113 = v14;
        if (v17)
        {
          operator delete(v17);
          v14 = v113;
        }
      }
      else
      {
        *(_DWORD *)v112 = v13;
        v16 = v15 + 4;
      }
      v112 = v16;
      v25 = *((_DWORD *)v11 + 1);
      if (v16 >= v14)
      {
        v27 = (char *)__p;
        v28 = (v16 - (_BYTE *)__p) >> 2;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62)
          sub_18F26F8C0();
        v30 = v14 - (_BYTE *)__p;
        if (v30 >> 1 > v29)
          v29 = v30 >> 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
          v31 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          v32 = (char *)sub_18F26FB8C((uint64_t)&v113, v31);
          v27 = (char *)__p;
          v16 = v112;
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[4 * v28];
        *(_DWORD *)v33 = v25;
        v26 = v33 + 4;
        while (v16 != v27)
        {
          v34 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v33 - 1) = v34;
          v33 -= 4;
        }
        v14 = &v32[4 * v31];
        __p = v33;
        v112 = v26;
        v113 = v14;
        if (v27)
        {
          operator delete(v27);
          v14 = v113;
        }
      }
      else
      {
        *(_DWORD *)v16 = v25;
        v26 = v16 + 4;
      }
      v112 = v26;
      v35 = *((_DWORD *)v11 + 2);
      if (v26 >= v14)
      {
        v37 = (char *)__p;
        v38 = (v26 - (_BYTE *)__p) >> 2;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62)
          sub_18F26F8C0();
        v40 = v14 - (_BYTE *)__p;
        if (v40 >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)sub_18F26FB8C((uint64_t)&v113, v41);
          v37 = (char *)__p;
          v26 = v112;
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[4 * v38];
        *(_DWORD *)v43 = v35;
        v36 = v43 + 4;
        while (v26 != v37)
        {
          v44 = *((_DWORD *)v26 - 1);
          v26 -= 4;
          *((_DWORD *)v43 - 1) = v44;
          v43 -= 4;
        }
        __p = v43;
        v112 = v36;
        v113 = &v42[4 * v41];
        if (v37)
          operator delete(v37);
      }
      else
      {
        *(_DWORD *)v26 = v35;
        v36 = v26 + 4;
      }
      v112 = v36;
      v45 = &a2[2 * v5];
      v46 = *((_DWORD *)v45 + 104);
      v48 = v115;
      v47 = v116;
      if (v115 >= v116)
      {
        v50 = (char *)v114;
        v51 = (v115 - (_BYTE *)v114) >> 2;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62)
          sub_18F26F8C0();
        v53 = v116 - (_BYTE *)v114;
        if ((v116 - (_BYTE *)v114) >> 1 > v52)
          v52 = v53 >> 1;
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
          v54 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v54 = v52;
        if (v54)
        {
          v55 = (char *)sub_18F26FB8C((uint64_t)&v116, v54);
          v50 = (char *)v114;
          v48 = v115;
        }
        else
        {
          v55 = 0;
        }
        v56 = &v55[4 * v51];
        *(_DWORD *)v56 = v46;
        v49 = v56 + 4;
        while (v48 != v50)
        {
          v57 = *((_DWORD *)v48 - 1);
          v48 -= 4;
          *((_DWORD *)v56 - 1) = v57;
          v56 -= 4;
        }
        v47 = &v55[4 * v54];
        v114 = v56;
        v115 = v49;
        v116 = v47;
        if (v50)
        {
          operator delete(v50);
          v47 = v116;
        }
      }
      else
      {
        *(_DWORD *)v115 = v46;
        v49 = v48 + 4;
      }
      v58 = v45 + 52;
      v115 = v49;
      v59 = v58[1];
      if (v49 >= v47)
      {
        v61 = (char *)v114;
        v62 = (v49 - (_BYTE *)v114) >> 2;
        v63 = v62 + 1;
        if ((unint64_t)(v62 + 1) >> 62)
          sub_18F26F8C0();
        v64 = v47 - (_BYTE *)v114;
        if (v64 >> 1 > v63)
          v63 = v64 >> 1;
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
          v65 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v65 = v63;
        if (v65)
        {
          v66 = (char *)sub_18F26FB8C((uint64_t)&v116, v65);
          v61 = (char *)v114;
          v49 = v115;
        }
        else
        {
          v66 = 0;
        }
        v67 = &v66[4 * v62];
        *(_DWORD *)v67 = v59;
        v60 = v67 + 4;
        while (v49 != v61)
        {
          v68 = *((_DWORD *)v49 - 1);
          v49 -= 4;
          *((_DWORD *)v67 - 1) = v68;
          v67 -= 4;
        }
        v47 = &v66[4 * v65];
        v114 = v67;
        v115 = v60;
        v116 = v47;
        if (v61)
        {
          operator delete(v61);
          v47 = v116;
        }
      }
      else
      {
        *(_DWORD *)v49 = v59;
        v60 = v49 + 4;
      }
      v115 = v60;
      v69 = v58[2];
      if (v60 >= v47)
      {
        v71 = (char *)v114;
        v72 = (v60 - (_BYTE *)v114) >> 2;
        v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 62)
          sub_18F26F8C0();
        v74 = v47 - (_BYTE *)v114;
        if (v74 >> 1 > v73)
          v73 = v74 >> 1;
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
          v75 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v75 = v73;
        if (v75)
        {
          v76 = (char *)sub_18F26FB8C((uint64_t)&v116, v75);
          v71 = (char *)v114;
          v60 = v115;
        }
        else
        {
          v76 = 0;
        }
        v77 = &v76[4 * v72];
        *(_DWORD *)v77 = v69;
        v70 = v77 + 4;
        while (v60 != v71)
        {
          v78 = *((_DWORD *)v60 - 1);
          v60 -= 4;
          *((_DWORD *)v77 - 1) = v78;
          v77 -= 4;
        }
        v47 = &v76[4 * v75];
        v114 = v77;
        v115 = v70;
        v116 = v47;
        if (v71)
        {
          operator delete(v71);
          v47 = v116;
        }
      }
      else
      {
        *(_DWORD *)v60 = v69;
        v70 = v60 + 4;
      }
      v115 = v70;
      v79 = v58[3];
      if (v70 >= v47)
      {
        v81 = (char *)v114;
        v82 = (v70 - (_BYTE *)v114) >> 2;
        v83 = v82 + 1;
        if ((unint64_t)(v82 + 1) >> 62)
          sub_18F26F8C0();
        v84 = v47 - (_BYTE *)v114;
        if (v84 >> 1 > v83)
          v83 = v84 >> 1;
        if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
          v85 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v85 = v83;
        if (v85)
        {
          v86 = (char *)sub_18F26FB8C((uint64_t)&v116, v85);
          v81 = (char *)v114;
          v70 = v115;
        }
        else
        {
          v86 = 0;
        }
        v87 = &v86[4 * v82];
        *(_DWORD *)v87 = v79;
        v80 = v87 + 4;
        while (v70 != v81)
        {
          v88 = *((_DWORD *)v70 - 1);
          v70 -= 4;
          *((_DWORD *)v87 - 1) = v88;
          v87 -= 4;
        }
        v114 = v87;
        v115 = v80;
        v116 = &v86[4 * v85];
        if (v81)
          operator delete(v81);
      }
      else
      {
        *(_DWORD *)v70 = v79;
        v80 = v70 + 4;
      }
      v115 = v80;
      v89 = v120;
      v90 = operator new();
      sub_18F2D0254(v90, (uint64_t)v110);
      v91 = v89[2].u64[0];
      v92 = (uint64_t *)v89[1].i64[1];
      if ((unint64_t)v92 >= v91)
      {
        v94 = v89[1].i64[0];
        v95 = ((uint64_t)v92 - v94) >> 3;
        if ((unint64_t)(v95 + 1) >> 61)
          sub_18F26F8C0();
        v96 = v91 - v94;
        v97 = v96 >> 2;
        if (v96 >> 2 <= (unint64_t)(v95 + 1))
          v97 = v95 + 1;
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
          v98 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v98 = v97;
        v127 = v89 + 2;
        if (v98)
          v99 = (char *)sub_18F26F8D4((uint64_t)v89[2].i64, v98);
        else
          v99 = 0;
        v100 = (uint64_t *)&v99[8 * v95];
        v101 = &v99[8 * v98];
        v126 = v101;
        *v100 = v90;
        v93 = v100 + 1;
        v125.i64[1] = (uint64_t)(v100 + 1);
        v103 = (_QWORD *)v89[1].i64[0];
        v102 = (_QWORD *)v89[1].i64[1];
        if (v102 == v103)
        {
          v105 = vdupq_n_s64((unint64_t)v102);
        }
        else
        {
          do
          {
            v104 = *--v102;
            *v102 = 0;
            *--v100 = v104;
          }
          while (v102 != v103);
          v105 = v89[1];
          v93 = (_QWORD *)v125.i64[1];
          v101 = v126;
        }
        v89[1].i64[0] = (uint64_t)v100;
        v89[1].i64[1] = (uint64_t)v93;
        v125 = v105;
        v106 = v89[2].i64[0];
        v89[2].i64[0] = (uint64_t)v101;
        v126 = (char *)v106;
        v124 = v105.i64[0];
        sub_18F26FBC0((uint64_t)&v124);
      }
      else
      {
        *v92 = v90;
        v93 = v92 + 1;
      }
      v89[1].i64[1] = (uint64_t)v93;
      sub_18F2D01A0((PB::Base *)v110);
      ++v5;
    }
    while (v5 != 25);
    sub_18F2A9EF0(*v108, (uint64_t)v119);
    sub_18F2B9670((PB::Base *)v119);
    return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v107 + 24))(v107);
  }
  return result;
}

void sub_18F3485CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  sub_18F2B9670((PB::Base *)va);
  sub_18F346934(v15 - 168);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F34864C(uint64_t *result, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t *v9;
  uint64_t v10;
  CFAbsoluteTime Current;
  double *v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[115];
  double *v49;
  char v50;
  _QWORD *v51;
  pthread_mutex_t *v52;
  __int16 v53;

  if (*result)
  {
    v9 = result;
    v10 = result[1];
    v51 = result + 1;
    (*(void (**)(void))(v10 + 16))();
    v53 = 256;
    sub_18F2B6BD0(v48);
    Current = CFAbsoluteTimeGetCurrent();
    v50 |= 1u;
    *(CFAbsoluteTime *)&v48[77] = Current;
    sub_18F2C6DE4(v48);
    v12 = v49;
    *((_BYTE *)v49 + 32) |= 2u;
    v12[2] = a4;
    v13 = v49;
    *((_BYTE *)v49 + 32) |= 1u;
    v13[1] = a5;
    sub_18F2A7CE4(v49);
    v14 = *((_QWORD *)v49 + 3);
    v15 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(v14 + 136) |= 2u;
    *(_QWORD *)(v14 + 16) = v15;
    v16 = *((_QWORD *)v49 + 3);
    v17 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(v16 + 136) |= 0x2000000u;
    *(_DWORD *)(v16 + 116) = v17;
    v18 = *((_QWORD *)v49 + 3);
    v19 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(v18 + 136) |= 0x10000u;
    *(_DWORD *)(v18 + 80) = v19;
    v20 = *((_QWORD *)v49 + 3);
    *(float *)&v15 = *(double *)(a2 + 32);
    *(_DWORD *)(v20 + 136) |= 0x80000u;
    *(_DWORD *)(v20 + 92) = v15;
    v21 = *((_QWORD *)v49 + 3);
    *(float *)&v15 = *(double *)(a2 + 40);
    *(_DWORD *)(v21 + 136) |= 0x100000u;
    *(_DWORD *)(v21 + 96) = v15;
    v22 = *((_QWORD *)v49 + 3);
    *(float *)&v15 = *(double *)(a2 + 48);
    *(_DWORD *)(v22 + 136) |= 0x200000u;
    *(_DWORD *)(v22 + 100) = v15;
    v23 = *((_QWORD *)v49 + 3);
    *(float *)&v15 = *(double *)(a2 + 24);
    *(_DWORD *)(v23 + 136) |= 0x40000u;
    *(_DWORD *)(v23 + 88) = v15;
    v24 = *((_QWORD *)v49 + 3);
    LODWORD(v15) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(v24 + 136) |= 0x4000000u;
    *(_DWORD *)(v24 + 120) = v15;
    v25 = *((_QWORD *)v49 + 3);
    LODWORD(v15) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(v25 + 136) |= 0x8000000u;
    *(_DWORD *)(v25 + 124) = v15;
    v26 = *((_QWORD *)v49 + 3);
    LODWORD(v15) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(v26 + 136) |= 0x10000000u;
    *(_DWORD *)(v26 + 128) = v15;
    v27 = *((_QWORD *)v49 + 3);
    LODWORD(v15) = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(v27 + 136) |= 0x8000u;
    *(_DWORD *)(v27 + 76) = v15;
    v28 = *((_QWORD *)v49 + 3);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(v28 + 136) |= 0x20u;
    *(_DWORD *)(v28 + 36) = v15;
    v29 = *((_QWORD *)v49 + 3);
    LODWORD(v15) = *(_DWORD *)(a2 + 76);
    *(_DWORD *)(v29 + 136) |= 0x400u;
    *(_DWORD *)(v29 + 56) = v15;
    v30 = *((_QWORD *)v49 + 3);
    LODWORD(v15) = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(v30 + 136) |= 4u;
    *(_DWORD *)(v30 + 24) = v15;
    v31 = *((_QWORD *)v49 + 3);
    LODWORD(v15) = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(v31 + 136) |= 0x10u;
    *(_DWORD *)(v31 + 32) = v15;
    v32 = *((_QWORD *)v49 + 3);
    LODWORD(v15) = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(v32 + 136) |= 0x80u;
    *(_DWORD *)(v32 + 44) = v15;
    v33 = *((_QWORD *)v49 + 3);
    LODWORD(v15) = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(v33 + 136) |= 0x100u;
    *(_DWORD *)(v33 + 48) = v15;
    v34 = *((_QWORD *)v49 + 3);
    LODWORD(v15) = *(_DWORD *)(a2 + 100);
    *(_DWORD *)(v34 + 136) |= 0x200u;
    *(_DWORD *)(v34 + 52) = v15;
    v35 = *((_QWORD *)v49 + 3);
    LODWORD(v15) = *(_DWORD *)(a2 + 104);
    *(_DWORD *)(v35 + 136) |= 0x800u;
    *(_DWORD *)(v35 + 60) = v15;
    v36 = *((_QWORD *)v49 + 3);
    LODWORD(v15) = *(_DWORD *)(a2 + 108);
    *(_DWORD *)(v36 + 136) |= 0x1000u;
    *(_DWORD *)(v36 + 64) = v15;
    v37 = *((_QWORD *)v49 + 3);
    LODWORD(v15) = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(v37 + 136) |= 0x2000u;
    *(_DWORD *)(v37 + 68) = v15;
    v38 = *((_QWORD *)v49 + 3);
    LODWORD(v15) = *(_DWORD *)(a2 + 116);
    *(_DWORD *)(v38 + 136) |= 0x400000u;
    *(_DWORD *)(v38 + 104) = v15;
    v39 = *((_QWORD *)v49 + 3);
    LODWORD(v15) = *(_DWORD *)(a2 + 120);
    *(_DWORD *)(v39 + 136) |= 0x800000u;
    *(_DWORD *)(v39 + 108) = v15;
    v40 = *((_QWORD *)v49 + 3);
    LODWORD(v15) = *(_DWORD *)(a2 + 124);
    *(_DWORD *)(v40 + 136) |= 0x1000000u;
    *(_DWORD *)(v40 + 112) = v15;
    v41 = *((_QWORD *)v49 + 3);
    LOBYTE(v19) = *(_BYTE *)(a3 + 5);
    *(_DWORD *)(v41 + 136) |= 0x20000000u;
    *(_BYTE *)(v41 + 132) = v19;
    v42 = *((_QWORD *)v49 + 3);
    v43 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(v42 + 136) |= 0x40u;
    *(_DWORD *)(v42 + 40) = v43;
    v44 = *((_QWORD *)v49 + 3);
    LOBYTE(v43) = *(_BYTE *)(a3 + 4);
    *(_DWORD *)(v44 + 136) |= 0x40000000u;
    *(_BYTE *)(v44 + 133) = v43;
    v45 = *((_QWORD *)v49 + 3);
    LODWORD(v15) = *(_DWORD *)a3;
    *(_DWORD *)(v45 + 136) |= 8u;
    *(_DWORD *)(v45 + 28) = v15;
    v46 = *((_QWORD *)v49 + 3);
    v47 = *(_QWORD *)(a3 + 16);
    *(_DWORD *)(v46 + 136) |= 1u;
    *(_QWORD *)(v46 + 8) = v47;
    sub_18F2A9EF0(*v9, (uint64_t)v48);
    result = (uint64_t *)sub_18F2B9670((PB::Base *)v48);
    if (HIBYTE(v53))
    {
      if ((_BYTE)v53)
        return (uint64_t *)pthread_mutex_unlock(v52);
      else
        return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v51 + 24))(v51);
    }
  }
  return result;
}

void sub_18F348A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 72);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F348AA0(uint64_t *result, float a2, double a3, double a4)
{
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  CFAbsoluteTime Current;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[421];
  uint64_t v15;
  char v16;
  _QWORD *v17;
  __int16 v18;

  if (*result)
  {
    v7 = result;
    v9 = result + 1;
    v8 = result[1];
    v17 = result + 1;
    (*(void (**)(uint64_t *))(v8 + 16))(result + 1);
    v18 = 256;
    sub_18F2B6BD0(v14);
    Current = CFAbsoluteTimeGetCurrent();
    v16 |= 1u;
    *(CFAbsoluteTime *)&v14[77] = Current;
    sub_18F2C6E48(v14);
    v11 = v15;
    *(_BYTE *)(v15 + 28) |= 2u;
    *(double *)(v11 + 16) = a3;
    v12 = v15;
    *(_BYTE *)(v15 + 28) |= 1u;
    *(double *)(v12 + 8) = a4;
    v13 = v15;
    *(_BYTE *)(v15 + 28) |= 4u;
    *(float *)(v13 + 24) = a2;
    sub_18F2A9EF0(*v7, (uint64_t)v14);
    sub_18F2B9670((PB::Base *)v14);
    return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v9 + 24))(v9);
  }
  return result;
}

void sub_18F348B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 88);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F348BB4(uint64_t *result, float a2, double a3, double a4)
{
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  CFAbsoluteTime Current;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[422];
  uint64_t v15;
  char v16;
  _QWORD *v17;
  __int16 v18;

  if (*result)
  {
    v7 = result;
    v9 = result + 1;
    v8 = result[1];
    v17 = result + 1;
    (*(void (**)(uint64_t *))(v8 + 16))(result + 1);
    v18 = 256;
    sub_18F2B6BD0(v14);
    Current = CFAbsoluteTimeGetCurrent();
    v16 |= 1u;
    *(CFAbsoluteTime *)&v14[77] = Current;
    sub_18F2C6EAC(v14);
    v11 = v15;
    *(_BYTE *)(v15 + 28) |= 2u;
    *(double *)(v11 + 16) = a3;
    v12 = v15;
    *(_BYTE *)(v15 + 28) |= 1u;
    *(double *)(v12 + 8) = a4;
    v13 = v15;
    *(_BYTE *)(v15 + 28) |= 4u;
    *(float *)(v13 + 24) = a2;
    sub_18F2A9EF0(*v7, (uint64_t)v14);
    sub_18F2B9670((PB::Base *)v14);
    return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v9 + 24))(v9);
  }
  return result;
}

void sub_18F348CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 88);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F348CC8(uint64_t *result, float a2, float a3, double a4, double a5)
{
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  CFAbsoluteTime Current;
  double *v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[424];
  double *v23;
  char v24;
  _QWORD *v25;
  __int16 v26;

  if (*result)
  {
    v9 = result;
    v11 = result + 1;
    v10 = result[1];
    v25 = result + 1;
    (*(void (**)(uint64_t *))(v10 + 16))(result + 1);
    v26 = 256;
    Current = CFAbsoluteTimeGetCurrent();
    sub_18F2B6BD0(v22);
    v24 |= 1u;
    *(CFAbsoluteTime *)&v22[77] = Current;
    sub_18F2C6D80(v22);
    v13 = v23;
    *((_BYTE *)v23 + 32) |= 2u;
    v13[2] = a4;
    v14 = v23;
    *((_BYTE *)v23 + 32) |= 1u;
    v14[1] = a5;
    sub_18F2EE94C(v23);
    v15 = *((_QWORD *)v23 + 3);
    *(_WORD *)(v15 + 68) |= 0x10u;
    *(double *)(v15 + 40) = a4;
    v16 = *((_QWORD *)v23 + 3);
    *(_WORD *)(v16 + 68) |= 8u;
    *(CFAbsoluteTime *)(v16 + 32) = Current;
    v17 = *((_QWORD *)v23 + 3);
    *(_WORD *)(v17 + 68) |= 0x40u;
    *(_DWORD *)(v17 + 52) = 3;
    v18 = *((_QWORD *)v23 + 3);
    *(_WORD *)(v18 + 68) |= 2u;
    *(double *)(v18 + 16) = a2;
    v19 = *((_QWORD *)v23 + 3);
    *(_WORD *)(v19 + 68) |= 4u;
    *(_QWORD *)(v19 + 24) = 0;
    v20 = *((_QWORD *)v23 + 3);
    *(_WORD *)(v20 + 68) |= 1u;
    *(double *)(v20 + 8) = a3;
    v21 = *((_QWORD *)v23 + 3);
    *(_WORD *)(v21 + 68) |= 0x80u;
    *(_DWORD *)(v21 + 56) = 2;
    sub_18F2A9EF0(*v9, (uint64_t)v22);
    sub_18F2B9670((PB::Base *)v22);
    return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v11 + 24))(v11);
  }
  return result;
}

void sub_18F348E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18F346934(v1 - 104);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F348EA0(uint64_t *result, _QWORD *a2, double a3, double a4)
{
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  CFAbsoluteTime Current;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t *v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  int64x2_t v32;
  char *v33;
  char v34[8];
  int v35;
  int v36;
  char v37;
  _QWORD v38[111];
  uint64_t v39;
  char v40;
  _QWORD *v41;
  __int16 v42;
  uint64_t v43;
  int64x2_t v44;
  char *v45;
  _QWORD *v46;

  if (*result)
  {
    v7 = result;
    v9 = result + 1;
    v8 = result[1];
    v41 = result + 1;
    (*(void (**)(uint64_t *))(v8 + 16))(result + 1);
    v42 = 256;
    sub_18F2B6BD0(v38);
    Current = CFAbsoluteTimeGetCurrent();
    v40 |= 1u;
    *(CFAbsoluteTime *)&v38[77] = Current;
    sub_18F2C6998(v38);
    v11 = v39;
    *(_BYTE *)(v39 + 48) |= 2u;
    *(double *)(v11 + 40) = a3;
    v12 = v39;
    *(_BYTE *)(v39 + 48) |= 1u;
    *(double *)(v12 + 32) = a4;
    if (a2[1] != *a2)
    {
      v13 = 0;
      do
      {
        sub_18F2A4E0C((uint64_t)v34);
        v14 = v37;
        v37 |= 1u;
        v35 = v13;
        if (v13 >= (uint64_t)(a2[1] - *a2) >> 2)
          sub_18F34AE58();
        v15 = *(_DWORD *)(*a2 + 4 * v13);
        v37 = v14 | 3;
        v36 = v15;
        v16 = (_QWORD *)v39;
        v17 = operator new();
        sub_18F2A4E4C(v17, (uint64_t)v34);
        v18 = v16[3];
        v19 = (uint64_t *)v16[2];
        if ((unint64_t)v19 >= v18)
        {
          v21 = v16[1];
          v22 = ((uint64_t)v19 - v21) >> 3;
          if ((unint64_t)(v22 + 1) >> 61)
            sub_18F26F8C0();
          v23 = v18 - v21;
          v24 = v23 >> 2;
          if (v23 >> 2 <= (unint64_t)(v22 + 1))
            v24 = v22 + 1;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v24;
          v46 = v16 + 3;
          if (v25)
            v26 = (char *)sub_18F26F8D4((uint64_t)(v16 + 3), v25);
          else
            v26 = 0;
          v27 = (uint64_t *)&v26[8 * v22];
          v28 = &v26[8 * v25];
          v45 = v28;
          *v27 = v17;
          v20 = v27 + 1;
          v44.i64[1] = (uint64_t)(v27 + 1);
          v30 = (_QWORD *)v16[1];
          v29 = (_QWORD *)v16[2];
          if (v29 == v30)
          {
            v32 = vdupq_n_s64((unint64_t)v29);
          }
          else
          {
            do
            {
              v31 = *--v29;
              *v29 = 0;
              *--v27 = v31;
            }
            while (v29 != v30);
            v32 = *(int64x2_t *)(v16 + 1);
            v20 = (_QWORD *)v44.i64[1];
            v28 = v45;
          }
          v16[1] = v27;
          v16[2] = v20;
          v44 = v32;
          v33 = (char *)v16[3];
          v16[3] = v28;
          v45 = v33;
          v43 = v32.i64[0];
          sub_18F26FBC0((uint64_t)&v43);
        }
        else
        {
          *v19 = v17;
          v20 = v19 + 1;
        }
        v16[2] = v20;
        PB::Base::~Base((PB::Base *)v34);
        ++v13;
      }
      while (v13 < (uint64_t)(a2[1] - *a2) >> 2);
    }
    sub_18F2A9EF0(*v7, (uint64_t)v38);
    sub_18F2B9670((PB::Base *)v38);
    return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v9 + 24))(v9);
  }
  return result;
}

void sub_18F34910C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_18F2B9670((PB::Base *)va);
  sub_18F346934(v5 - 168);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F349158(uint64_t *result)
{
  uint64_t *v1;
  _QWORD *v2;

  if (*result)
  {
    v1 = result;
    v2 = result + 1;
    (*(void (**)(uint64_t *))(result[1] + 16))(result + 1);
    sub_18F2AA0C4(*v1);
    return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  }
  return result;
}

void sub_18F3491C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F346934((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F3491D4(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  _QWORD v14[66];
  uint64_t v15;
  CFAbsoluteTime v16;
  char v17;
  _QWORD *v18;
  __int16 v19;

  if (*result)
  {
    v3 = result;
    v5 = result + 1;
    v4 = result[1];
    v18 = result + 1;
    (*(void (**)(uint64_t *))(v4 + 16))(result + 1);
    v19 = 256;
    sub_18F2B6BD0(v14);
    sub_18F2C735C(v14);
    Current = CFAbsoluteTimeGetCurrent();
    v17 |= 1u;
    v16 = Current;
    v7 = v15;
    LODWORD(Current) = *(_DWORD *)(a2 + 8);
    *(_WORD *)(v15 + 64) |= 0x20u;
    *(_DWORD *)(v7 + 28) = LODWORD(Current);
    v8 = v15;
    LODWORD(Current) = *(_DWORD *)(a2 + 12);
    *(_WORD *)(v15 + 64) |= 0x1000u;
    *(_DWORD *)(v8 + 56) = LODWORD(Current);
    v9 = v15;
    LODWORD(Current) = *(_DWORD *)(a2 + 20);
    *(_WORD *)(v15 + 64) |= 2u;
    *(_DWORD *)(v9 + 12) = LODWORD(Current);
    v10 = v15;
    v11 = *(_BYTE *)(a2 + 48);
    *(_WORD *)(v15 + 64) |= 0x2000u;
    *(_BYTE *)(v10 + 60) = v11;
    v12 = v15;
    v13 = *(_DWORD *)(a2 + 4);
    *(_WORD *)(v15 + 64) |= 4u;
    *(_DWORD *)(v12 + 16) = v13;
    sub_18F2A9EF0(*v3, (uint64_t)v14);
    sub_18F2B9670((PB::Base *)v14);
    return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v5 + 24))(v5);
  }
  return result;
}

void sub_18F3492F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F34930C(uint64_t *result, void *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  float v28;
  unint64_t v29;
  float *v30;
  float *v31;
  float *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  float *v37;
  char *v38;
  int v39;
  _QWORD *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  float v51;
  unint64_t v52;
  float *v53;
  float *v54;
  float *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  float *v60;
  char *v61;
  int v62;
  _QWORD *v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  float v74;
  unint64_t v75;
  float *v76;
  float *v77;
  float *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  float *v83;
  char *v84;
  int v85;
  _QWORD *v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  float v97;
  unint64_t v98;
  float *v99;
  float *v100;
  float *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  float *v106;
  char *v107;
  int v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  float v115;
  unint64_t v116;
  float *v117;
  float *v118;
  float *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  float *v124;
  char *v125;
  int v126;
  _QWORD *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  float v133;
  unint64_t v134;
  float *v135;
  float *v136;
  float *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  float *v142;
  char *v143;
  int v144;
  _QWORD *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  double v150;
  float v151;
  unint64_t v152;
  float *v153;
  float *v154;
  float *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  float *v160;
  char *v161;
  int v162;
  _QWORD *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  double v168;
  float v169;
  unint64_t v170;
  float *v171;
  float *v172;
  float *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  float *v178;
  char *v179;
  int v180;
  _QWORD *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  double v186;
  float v187;
  unint64_t v188;
  float *v189;
  float *v190;
  float *v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  char *v195;
  float *v196;
  char *v197;
  int v198;
  _QWORD *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  double v204;
  float v205;
  unint64_t v206;
  float *v207;
  float *v208;
  float *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  char *v213;
  float *v214;
  char *v215;
  int v216;
  _QWORD *v217;
  int v218;
  _QWORD v219[46];
  _QWORD *v220;
  CFAbsoluteTime v221;
  char v222;
  _QWORD *v223;
  __int16 v224;

  if (*result)
  {
    v3 = result;
    v5 = result + 1;
    v4 = result[1];
    v223 = result + 1;
    (*(void (**)(uint64_t *))(v4 + 16))(result + 1);
    v224 = 256;
    sub_18F2B6BD0(v219);
    Current = CFAbsoluteTimeGetCurrent();
    v222 |= 1u;
    v221 = Current;
    sub_18F2C6740(v219);
    sub_18F28379C(v220);
    v7 = v220[9];
    objc_msgSend_timestamp(a2, v8, v9, v10, v11);
    *(_BYTE *)(v7 + 152) |= 2u;
    *(_QWORD *)(v7 + 136) = v12;
    v13 = (_QWORD *)v220[9];
    v18 = (void *)objc_msgSend_attitude(a2, v14, v15, v16, v17);
    objc_msgSend_quaternion(v18, v19, v20, v21, v22);
    v28 = v27;
    v29 = v13[9];
    v30 = (float *)v13[8];
    if ((unint64_t)v30 >= v29)
    {
      v32 = (float *)v13[7];
      v33 = v30 - v32;
      if ((unint64_t)(v33 + 1) >> 62)
        sub_18F26F8C0();
      v34 = v29 - (_QWORD)v32;
      v35 = (uint64_t)(v29 - (_QWORD)v32) >> 1;
      if (v35 <= v33 + 1)
        v35 = v33 + 1;
      if (v34 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v35;
      if (v23)
      {
        v36 = (char *)sub_18F26FB8C((uint64_t)(v13 + 9), v23);
        v32 = (float *)v13[7];
        v30 = (float *)v13[8];
      }
      else
      {
        v36 = 0;
      }
      v37 = (float *)&v36[4 * v33];
      v38 = &v36[4 * v23];
      *v37 = v28;
      v31 = v37 + 1;
      while (v30 != v32)
      {
        v39 = *((_DWORD *)v30-- - 1);
        *((_DWORD *)v37-- - 1) = v39;
      }
      v13[7] = v37;
      v13[8] = v31;
      v13[9] = v38;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *v30 = v28;
      v31 = v30 + 1;
    }
    v13[8] = v31;
    v40 = (_QWORD *)v220[9];
    v41 = (void *)objc_msgSend_attitude(a2, (const char *)v23, v24, v25, v26);
    objc_msgSend_quaternion(v41, v42, v43, v44, v45);
    v51 = v50;
    v52 = v40[9];
    v53 = (float *)v40[8];
    if ((unint64_t)v53 >= v52)
    {
      v55 = (float *)v40[7];
      v56 = v53 - v55;
      if ((unint64_t)(v56 + 1) >> 62)
        sub_18F26F8C0();
      v57 = v52 - (_QWORD)v55;
      v58 = (uint64_t)(v52 - (_QWORD)v55) >> 1;
      if (v58 <= v56 + 1)
        v58 = v56 + 1;
      if (v57 >= 0x7FFFFFFFFFFFFFFCLL)
        v46 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v46 = v58;
      if (v46)
      {
        v59 = (char *)sub_18F26FB8C((uint64_t)(v40 + 9), v46);
        v55 = (float *)v40[7];
        v53 = (float *)v40[8];
      }
      else
      {
        v59 = 0;
      }
      v60 = (float *)&v59[4 * v56];
      v61 = &v59[4 * v46];
      *v60 = v51;
      v54 = v60 + 1;
      while (v53 != v55)
      {
        v62 = *((_DWORD *)v53-- - 1);
        *((_DWORD *)v60-- - 1) = v62;
      }
      v40[7] = v60;
      v40[8] = v54;
      v40[9] = v61;
      if (v55)
        operator delete(v55);
    }
    else
    {
      *v53 = v51;
      v54 = v53 + 1;
    }
    v40[8] = v54;
    v63 = (_QWORD *)v220[9];
    v64 = (void *)objc_msgSend_attitude(a2, (const char *)v46, v47, v48, v49);
    objc_msgSend_quaternion(v64, v65, v66, v67, v68);
    v74 = v73;
    v75 = v63[9];
    v76 = (float *)v63[8];
    if ((unint64_t)v76 >= v75)
    {
      v78 = (float *)v63[7];
      v79 = v76 - v78;
      if ((unint64_t)(v79 + 1) >> 62)
        sub_18F26F8C0();
      v80 = v75 - (_QWORD)v78;
      v81 = (uint64_t)(v75 - (_QWORD)v78) >> 1;
      if (v81 <= v79 + 1)
        v81 = v79 + 1;
      if (v80 >= 0x7FFFFFFFFFFFFFFCLL)
        v69 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v69 = v81;
      if (v69)
      {
        v82 = (char *)sub_18F26FB8C((uint64_t)(v63 + 9), v69);
        v78 = (float *)v63[7];
        v76 = (float *)v63[8];
      }
      else
      {
        v82 = 0;
      }
      v83 = (float *)&v82[4 * v79];
      v84 = &v82[4 * v69];
      *v83 = v74;
      v77 = v83 + 1;
      while (v76 != v78)
      {
        v85 = *((_DWORD *)v76-- - 1);
        *((_DWORD *)v83-- - 1) = v85;
      }
      v63[7] = v83;
      v63[8] = v77;
      v63[9] = v84;
      if (v78)
        operator delete(v78);
    }
    else
    {
      *v76 = v74;
      v77 = v76 + 1;
    }
    v63[8] = v77;
    v86 = (_QWORD *)v220[9];
    v87 = (void *)objc_msgSend_attitude(a2, (const char *)v69, v70, v71, v72);
    objc_msgSend_quaternion(v87, v88, v89, v90, v91);
    v97 = v96;
    v98 = v86[9];
    v99 = (float *)v86[8];
    if ((unint64_t)v99 >= v98)
    {
      v101 = (float *)v86[7];
      v102 = v99 - v101;
      if ((unint64_t)(v102 + 1) >> 62)
        sub_18F26F8C0();
      v103 = v98 - (_QWORD)v101;
      v104 = (uint64_t)(v98 - (_QWORD)v101) >> 1;
      if (v104 <= v102 + 1)
        v104 = v102 + 1;
      if (v103 >= 0x7FFFFFFFFFFFFFFCLL)
        v92 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v92 = v104;
      if (v92)
      {
        v105 = (char *)sub_18F26FB8C((uint64_t)(v86 + 9), v92);
        v101 = (float *)v86[7];
        v99 = (float *)v86[8];
      }
      else
      {
        v105 = 0;
      }
      v106 = (float *)&v105[4 * v102];
      v107 = &v105[4 * v92];
      *v106 = v97;
      v100 = v106 + 1;
      while (v99 != v101)
      {
        v108 = *((_DWORD *)v99-- - 1);
        *((_DWORD *)v106-- - 1) = v108;
      }
      v86[7] = v106;
      v86[8] = v100;
      v86[9] = v107;
      if (v101)
        operator delete(v101);
    }
    else
    {
      *v99 = v97;
      v100 = v99 + 1;
    }
    v86[8] = v100;
    v109 = (_QWORD *)v220[9];
    objc_msgSend_rotationRate(a2, (const char *)v92, v93, v94, v95);
    v115 = v114;
    v116 = v109[12];
    v117 = (float *)v109[11];
    if ((unint64_t)v117 >= v116)
    {
      v119 = (float *)v109[10];
      v120 = v117 - v119;
      if ((unint64_t)(v120 + 1) >> 62)
        sub_18F26F8C0();
      v121 = v116 - (_QWORD)v119;
      v122 = (uint64_t)(v116 - (_QWORD)v119) >> 1;
      if (v122 <= v120 + 1)
        v122 = v120 + 1;
      if (v121 >= 0x7FFFFFFFFFFFFFFCLL)
        v110 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v110 = v122;
      if (v110)
      {
        v123 = (char *)sub_18F26FB8C((uint64_t)(v109 + 12), v110);
        v119 = (float *)v109[10];
        v117 = (float *)v109[11];
      }
      else
      {
        v123 = 0;
      }
      v124 = (float *)&v123[4 * v120];
      v125 = &v123[4 * v110];
      *v124 = v115;
      v118 = v124 + 1;
      while (v117 != v119)
      {
        v126 = *((_DWORD *)v117-- - 1);
        *((_DWORD *)v124-- - 1) = v126;
      }
      v109[10] = v124;
      v109[11] = v118;
      v109[12] = v125;
      if (v119)
        operator delete(v119);
    }
    else
    {
      *v117 = v115;
      v118 = v117 + 1;
    }
    v109[11] = v118;
    v127 = (_QWORD *)v220[9];
    objc_msgSend_rotationRate(a2, (const char *)v110, v111, v112, v113);
    v133 = v132;
    v134 = v127[12];
    v135 = (float *)v127[11];
    if ((unint64_t)v135 >= v134)
    {
      v137 = (float *)v127[10];
      v138 = v135 - v137;
      if ((unint64_t)(v138 + 1) >> 62)
        sub_18F26F8C0();
      v139 = v134 - (_QWORD)v137;
      v140 = (uint64_t)(v134 - (_QWORD)v137) >> 1;
      if (v140 <= v138 + 1)
        v140 = v138 + 1;
      if (v139 >= 0x7FFFFFFFFFFFFFFCLL)
        v128 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v128 = v140;
      if (v128)
      {
        v141 = (char *)sub_18F26FB8C((uint64_t)(v127 + 12), v128);
        v137 = (float *)v127[10];
        v135 = (float *)v127[11];
      }
      else
      {
        v141 = 0;
      }
      v142 = (float *)&v141[4 * v138];
      v143 = &v141[4 * v128];
      *v142 = v133;
      v136 = v142 + 1;
      while (v135 != v137)
      {
        v144 = *((_DWORD *)v135-- - 1);
        *((_DWORD *)v142-- - 1) = v144;
      }
      v127[10] = v142;
      v127[11] = v136;
      v127[12] = v143;
      if (v137)
        operator delete(v137);
    }
    else
    {
      *v135 = v133;
      v136 = v135 + 1;
    }
    v127[11] = v136;
    v145 = (_QWORD *)v220[9];
    objc_msgSend_rotationRate(a2, (const char *)v128, v129, v130, v131);
    v151 = v150;
    v152 = v145[12];
    v153 = (float *)v145[11];
    if ((unint64_t)v153 >= v152)
    {
      v155 = (float *)v145[10];
      v156 = v153 - v155;
      if ((unint64_t)(v156 + 1) >> 62)
        sub_18F26F8C0();
      v157 = v152 - (_QWORD)v155;
      v158 = (uint64_t)(v152 - (_QWORD)v155) >> 1;
      if (v158 <= v156 + 1)
        v158 = v156 + 1;
      if (v157 >= 0x7FFFFFFFFFFFFFFCLL)
        v146 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v146 = v158;
      if (v146)
      {
        v159 = (char *)sub_18F26FB8C((uint64_t)(v145 + 12), v146);
        v155 = (float *)v145[10];
        v153 = (float *)v145[11];
      }
      else
      {
        v159 = 0;
      }
      v160 = (float *)&v159[4 * v156];
      v161 = &v159[4 * v146];
      *v160 = v151;
      v154 = v160 + 1;
      while (v153 != v155)
      {
        v162 = *((_DWORD *)v153-- - 1);
        *((_DWORD *)v160-- - 1) = v162;
      }
      v145[10] = v160;
      v145[11] = v154;
      v145[12] = v161;
      if (v155)
        operator delete(v155);
    }
    else
    {
      *v153 = v151;
      v154 = v153 + 1;
    }
    v145[11] = v154;
    v163 = (_QWORD *)v220[9];
    objc_msgSend_userAcceleration(a2, (const char *)v146, v147, v148, v149);
    v169 = v168;
    v170 = v163[15];
    v171 = (float *)v163[14];
    if ((unint64_t)v171 >= v170)
    {
      v173 = (float *)v163[13];
      v174 = v171 - v173;
      if ((unint64_t)(v174 + 1) >> 62)
        sub_18F26F8C0();
      v175 = v170 - (_QWORD)v173;
      v176 = (uint64_t)(v170 - (_QWORD)v173) >> 1;
      if (v176 <= v174 + 1)
        v176 = v174 + 1;
      if (v175 >= 0x7FFFFFFFFFFFFFFCLL)
        v164 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v164 = v176;
      if (v164)
      {
        v177 = (char *)sub_18F26FB8C((uint64_t)(v163 + 15), v164);
        v173 = (float *)v163[13];
        v171 = (float *)v163[14];
      }
      else
      {
        v177 = 0;
      }
      v178 = (float *)&v177[4 * v174];
      v179 = &v177[4 * v164];
      *v178 = v169;
      v172 = v178 + 1;
      while (v171 != v173)
      {
        v180 = *((_DWORD *)v171-- - 1);
        *((_DWORD *)v178-- - 1) = v180;
      }
      v163[13] = v178;
      v163[14] = v172;
      v163[15] = v179;
      if (v173)
        operator delete(v173);
    }
    else
    {
      *v171 = v169;
      v172 = v171 + 1;
    }
    v163[14] = v172;
    v181 = (_QWORD *)v220[9];
    objc_msgSend_userAcceleration(a2, (const char *)v164, v165, v166, v167);
    v187 = v186;
    v188 = v181[15];
    v189 = (float *)v181[14];
    if ((unint64_t)v189 >= v188)
    {
      v191 = (float *)v181[13];
      v192 = v189 - v191;
      if ((unint64_t)(v192 + 1) >> 62)
        sub_18F26F8C0();
      v193 = v188 - (_QWORD)v191;
      v194 = (uint64_t)(v188 - (_QWORD)v191) >> 1;
      if (v194 <= v192 + 1)
        v194 = v192 + 1;
      if (v193 >= 0x7FFFFFFFFFFFFFFCLL)
        v182 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v182 = v194;
      if (v182)
      {
        v195 = (char *)sub_18F26FB8C((uint64_t)(v181 + 15), v182);
        v191 = (float *)v181[13];
        v189 = (float *)v181[14];
      }
      else
      {
        v195 = 0;
      }
      v196 = (float *)&v195[4 * v192];
      v197 = &v195[4 * v182];
      *v196 = v187;
      v190 = v196 + 1;
      while (v189 != v191)
      {
        v198 = *((_DWORD *)v189-- - 1);
        *((_DWORD *)v196-- - 1) = v198;
      }
      v181[13] = v196;
      v181[14] = v190;
      v181[15] = v197;
      if (v191)
        operator delete(v191);
    }
    else
    {
      *v189 = v187;
      v190 = v189 + 1;
    }
    v181[14] = v190;
    v199 = (_QWORD *)v220[9];
    objc_msgSend_userAcceleration(a2, (const char *)v182, v183, v184, v185);
    v205 = v204;
    v206 = v199[15];
    v207 = (float *)v199[14];
    if ((unint64_t)v207 >= v206)
    {
      v209 = (float *)v199[13];
      v210 = v207 - v209;
      if ((unint64_t)(v210 + 1) >> 62)
        sub_18F26F8C0();
      v211 = v206 - (_QWORD)v209;
      v212 = (uint64_t)(v206 - (_QWORD)v209) >> 1;
      if (v212 <= v210 + 1)
        v212 = v210 + 1;
      if (v211 >= 0x7FFFFFFFFFFFFFFCLL)
        v200 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v200 = v212;
      if (v200)
      {
        v213 = (char *)sub_18F26FB8C((uint64_t)(v199 + 15), v200);
        v209 = (float *)v199[13];
        v207 = (float *)v199[14];
      }
      else
      {
        v213 = 0;
      }
      v214 = (float *)&v213[4 * v210];
      v215 = &v213[4 * v200];
      *v214 = v205;
      v208 = v214 + 1;
      while (v207 != v209)
      {
        v216 = *((_DWORD *)v207-- - 1);
        *((_DWORD *)v214-- - 1) = v216;
      }
      v199[13] = v214;
      v199[14] = v208;
      v199[15] = v215;
      if (v209)
        operator delete(v209);
    }
    else
    {
      *v207 = v205;
      v208 = v207 + 1;
    }
    v199[14] = v208;
    v217 = v220;
    if (objc_msgSend_sensorLocation(a2, (const char *)v200, v201, v202, v203) == 2)
      v218 = 1;
    else
      v218 = 2;
    *((_WORD *)v217 + 58) |= 0x10u;
    *((_DWORD *)v217 + 22) = v218;
    sub_18F2A9EF0(*v3, (uint64_t)v219);
    sub_18F2B9670((PB::Base *)v219);
    return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v5 + 24))(v5);
  }
  return result;
}

void sub_18F349C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 88);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F349C84(uint64_t *result, int a2, double a3)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  CFAbsoluteTime Current;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _QWORD v12[23];
  uint64_t v13;
  CFAbsoluteTime v14;
  char v15;
  _QWORD *v16;
  __int16 v17;

  if (*result)
  {
    v5 = result;
    v7 = result + 1;
    v6 = result[1];
    v16 = result + 1;
    (*(void (**)(uint64_t *))(v6 + 16))(result + 1);
    v17 = 256;
    sub_18F2B6BD0(v12);
    Current = CFAbsoluteTimeGetCurrent();
    v15 |= 1u;
    v14 = Current;
    sub_18F2C76E0(v12);
    v9 = v13;
    *(_BYTE *)(v13 + 16) |= 1u;
    *(_DWORD *)(v9 + 8) = a2;
    v10 = v13;
    v11 = a3;
    *(_BYTE *)(v13 + 16) |= 2u;
    *(float *)(v10 + 12) = v11;
    sub_18F2A9EF0(*v5, (uint64_t)v12);
    sub_18F2B9670((PB::Base *)v12);
    return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v7 + 24))(v7);
  }
  return result;
}

void sub_18F349D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 72);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F349D7C(uint64_t *result, int *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  char *v16;
  unint64_t v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  _QWORD *v28;
  int v29;
  char *v30;
  unint64_t v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  _QWORD *v42;
  int v43;
  char *v44;
  unint64_t v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  int v55;
  _QWORD *v56;
  int v57;
  char *v58;
  unint64_t v59;
  _DWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  int v69;
  _QWORD v70[17];
  _QWORD *v71;
  CFAbsoluteTime v72;
  char v73;
  _QWORD *v74;
  __int16 v75;

  if (*result)
  {
    v3 = result;
    v5 = result + 1;
    v4 = result[1];
    v74 = result + 1;
    (*(void (**)(uint64_t *))(v4 + 16))(result + 1);
    v75 = 256;
    sub_18F2B6BD0(v70);
    Current = CFAbsoluteTimeGetCurrent();
    v73 |= 1u;
    v72 = Current;
    sub_18F2C7618(v70);
    sub_18F2767B0(v71);
    v7 = v71[4];
    v8 = *a2;
    *(_BYTE *)(v7 + 32) |= 2u;
    *(_DWORD *)(v7 + 28) = v8;
    v9 = v71[4];
    sub_18F346B38(v9);
    std::string::operator=(*(std::string **)(v9 + 8), (const std::string *)(a2 + 2));
    v10 = v71[4];
    sub_18F346B98(v10);
    std::string::operator=(*(std::string **)(v10 + 16), (const std::string *)(a2 + 8));
    v11 = v71[4];
    v12 = a2[14];
    *(_BYTE *)(v11 + 32) |= 1u;
    *(_DWORD *)(v11 + 24) = v12;
    v13 = v71;
    LOBYTE(v12) = *((_BYTE *)a2 + 76);
    *((_BYTE *)v71 + 44) |= 1u;
    *((_BYTE *)v13 + 40) = v12;
    v14 = v71;
    v15 = a2[20];
    v16 = (char *)v71[2];
    v17 = v71[3];
    if ((unint64_t)v16 >= v17)
    {
      v19 = (char *)v71[1];
      v20 = (v16 - v19) >> 2;
      if ((unint64_t)(v20 + 1) >> 62)
        sub_18F26F8C0();
      v21 = v17 - (_QWORD)v19;
      v22 = (uint64_t)(v17 - (_QWORD)v19) >> 1;
      if (v22 <= v20 + 1)
        v22 = v20 + 1;
      if (v21 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
      {
        v24 = (char *)sub_18F26FB8C((uint64_t)(v71 + 3), v23);
        v19 = (char *)v14[1];
        v16 = (char *)v14[2];
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[4 * v20];
      v26 = &v24[4 * v23];
      *(_DWORD *)v25 = v15;
      v18 = v25 + 4;
      while (v16 != v19)
      {
        v27 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v25 - 1) = v27;
        v25 -= 4;
      }
      v14[1] = v25;
      v14[2] = v18;
      v14[3] = v26;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_DWORD *)v16 = v15;
      v18 = v16 + 4;
    }
    v14[2] = v18;
    v28 = v71;
    v29 = a2[21];
    v30 = (char *)v71[2];
    v31 = v71[3];
    if ((unint64_t)v30 >= v31)
    {
      v33 = (char *)v71[1];
      v34 = (v30 - v33) >> 2;
      if ((unint64_t)(v34 + 1) >> 62)
        sub_18F26F8C0();
      v35 = v31 - (_QWORD)v33;
      v36 = (uint64_t)(v31 - (_QWORD)v33) >> 1;
      if (v36 <= v34 + 1)
        v36 = v34 + 1;
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
      {
        v38 = (char *)sub_18F26FB8C((uint64_t)(v71 + 3), v37);
        v33 = (char *)v28[1];
        v30 = (char *)v28[2];
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[4 * v34];
      v40 = &v38[4 * v37];
      *(_DWORD *)v39 = v29;
      v32 = v39 + 4;
      while (v30 != v33)
      {
        v41 = *((_DWORD *)v30 - 1);
        v30 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      v28[1] = v39;
      v28[2] = v32;
      v28[3] = v40;
      if (v33)
        operator delete(v33);
    }
    else
    {
      *(_DWORD *)v30 = v29;
      v32 = v30 + 4;
    }
    v28[2] = v32;
    v42 = v71;
    v43 = a2[22];
    v44 = (char *)v71[2];
    v45 = v71[3];
    if ((unint64_t)v44 >= v45)
    {
      v47 = (char *)v71[1];
      v48 = (v44 - v47) >> 2;
      if ((unint64_t)(v48 + 1) >> 62)
        sub_18F26F8C0();
      v49 = v45 - (_QWORD)v47;
      v50 = (uint64_t)(v45 - (_QWORD)v47) >> 1;
      if (v50 <= v48 + 1)
        v50 = v48 + 1;
      if (v49 >= 0x7FFFFFFFFFFFFFFCLL)
        v51 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v51 = v50;
      if (v51)
      {
        v52 = (char *)sub_18F26FB8C((uint64_t)(v71 + 3), v51);
        v47 = (char *)v42[1];
        v44 = (char *)v42[2];
      }
      else
      {
        v52 = 0;
      }
      v53 = &v52[4 * v48];
      v54 = &v52[4 * v51];
      *(_DWORD *)v53 = v43;
      v46 = v53 + 4;
      while (v44 != v47)
      {
        v55 = *((_DWORD *)v44 - 1);
        v44 -= 4;
        *((_DWORD *)v53 - 1) = v55;
        v53 -= 4;
      }
      v42[1] = v53;
      v42[2] = v46;
      v42[3] = v54;
      if (v47)
        operator delete(v47);
    }
    else
    {
      *(_DWORD *)v44 = v43;
      v46 = v44 + 4;
    }
    v42[2] = v46;
    v56 = v71;
    v57 = a2[23];
    v58 = (char *)v71[2];
    v59 = v71[3];
    if ((unint64_t)v58 >= v59)
    {
      v61 = (char *)v71[1];
      v62 = (v58 - v61) >> 2;
      if ((unint64_t)(v62 + 1) >> 62)
        sub_18F26F8C0();
      v63 = v59 - (_QWORD)v61;
      v64 = (uint64_t)(v59 - (_QWORD)v61) >> 1;
      if (v64 <= v62 + 1)
        v64 = v62 + 1;
      if (v63 >= 0x7FFFFFFFFFFFFFFCLL)
        v65 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v65 = v64;
      if (v65)
      {
        v66 = (char *)sub_18F26FB8C((uint64_t)(v71 + 3), v65);
        v61 = (char *)v56[1];
        v58 = (char *)v56[2];
      }
      else
      {
        v66 = 0;
      }
      v67 = &v66[4 * v62];
      v68 = &v66[4 * v65];
      *(_DWORD *)v67 = v57;
      v60 = v67 + 4;
      while (v58 != v61)
      {
        v69 = *((_DWORD *)v58 - 1);
        v58 -= 4;
        *((_DWORD *)v67 - 1) = v69;
        v67 -= 4;
      }
      v56[1] = v67;
      v56[2] = v60;
      v56[3] = v68;
      if (v61)
        operator delete(v61);
    }
    else
    {
      *(_DWORD *)v58 = v57;
      v60 = v58 + 4;
    }
    v56[2] = v60;
    sub_18F2A9EF0(*v3, (uint64_t)v70);
    sub_18F2B9670((PB::Base *)v70);
    return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v5 + 24))(v5);
  }
  return result;
}

void sub_18F34A1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 88);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F34A1FC(uint64_t *result, double *a2, int a3)
{
  uint64_t *v5;
  uint64_t v6;
  CFAbsoluteTime Current;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[93];
  uint64_t v38;
  char v39;
  _QWORD *v40;
  pthread_mutex_t *v41;
  __int16 v42;

  if (*result)
  {
    v5 = result;
    v6 = result[1];
    v40 = result + 1;
    (*(void (**)(void))(v6 + 16))();
    v42 = 256;
    sub_18F2B6BD0(v37);
    sub_18F2C72F8(v37);
    Current = CFAbsoluteTimeGetCurrent();
    v39 |= 1u;
    *(CFAbsoluteTime *)&v37[77] = Current;
    v8 = v38;
    v9 = *a2;
    *(_DWORD *)(v38 + 124) |= 0x10u;
    *(double *)(v8 + 40) = v9;
    v10 = v38;
    *(float *)&v9 = a2[2];
    *(_DWORD *)(v38 + 124) |= 2u;
    *(double *)(v10 + 16) = *(float *)&v9;
    v11 = v38;
    *(float *)&v9 = a2[3];
    *(_DWORD *)(v38 + 124) |= 4u;
    *(double *)(v11 + 24) = *(float *)&v9;
    v12 = v38;
    *(float *)&v9 = a2[4];
    *(_DWORD *)(v38 + 124) |= 8u;
    *(double *)(v12 + 32) = *(float *)&v9;
    v13 = v38;
    *(float *)&v9 = a2[1];
    *(_DWORD *)(v38 + 124) |= 1u;
    *(double *)(v13 + 8) = *(float *)&v9;
    v14 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 10);
    *(_DWORD *)(v38 + 124) |= 0x40000u;
    *(_DWORD *)(v14 + 100) = LODWORD(v9);
    v15 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 11);
    *(_DWORD *)(v38 + 124) |= 0x80000u;
    *(_DWORD *)(v15 + 104) = LODWORD(v9);
    v16 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 12);
    *(_DWORD *)(v38 + 124) |= 0x100000u;
    *(_DWORD *)(v16 + 108) = LODWORD(v9);
    v17 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 13);
    *(_DWORD *)(v38 + 124) |= 0x2000u;
    *(_DWORD *)(v17 + 80) = LODWORD(v9);
    v18 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 14);
    *(_DWORD *)(v38 + 124) |= 0x4000u;
    *(_DWORD *)(v18 + 84) = LODWORD(v9);
    v19 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 15);
    *(_DWORD *)(v38 + 124) |= 0x8000u;
    *(_DWORD *)(v19 + 88) = LODWORD(v9);
    v20 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 16);
    *(_DWORD *)(v38 + 124) |= 0x100u;
    *(_DWORD *)(v20 + 60) = LODWORD(v9);
    v21 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 17);
    *(_DWORD *)(v38 + 124) |= 0x200u;
    *(_DWORD *)(v21 + 64) = LODWORD(v9);
    v22 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 18);
    *(_DWORD *)(v38 + 124) |= 0x400u;
    *(_DWORD *)(v22 + 68) = LODWORD(v9);
    v23 = v38;
    v24 = *((_DWORD *)a2 + 19);
    *(_DWORD *)(v38 + 124) |= 0x80u;
    *(_DWORD *)(v23 + 56) = v24;
    v25 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 21);
    *(_DWORD *)(v38 + 124) |= 0x800u;
    *(_DWORD *)(v25 + 72) = LODWORD(v9);
    v26 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 24);
    *(_DWORD *)(v38 + 124) |= 0x20u;
    *(_DWORD *)(v26 + 48) = LODWORD(v9);
    v27 = v38;
    *(_DWORD *)(v38 + 124) |= 0x200000u;
    *(_DWORD *)(v27 + 112) = a3;
    v28 = v38;
    *(_DWORD *)(v38 + 124) |= 0x20000u;
    *(_DWORD *)(v28 + 96) = -1082130432;
    v29 = v38;
    v30 = *((unsigned __int8 *)a2 + 108);
    *(_DWORD *)(v38 + 124) |= 0x1000u;
    *(_DWORD *)(v29 + 76) = v30;
    v31 = v38;
    v32 = *((_DWORD *)a2 + 26);
    *(_DWORD *)(v38 + 124) |= 0x40u;
    *(_DWORD *)(v31 + 52) = v32;
    v33 = v38;
    v34 = *((unsigned __int16 *)a2 + 55);
    *(_DWORD *)(v38 + 124) |= 0x10000u;
    *(_DWORD *)(v33 + 92) = v34;
    v35 = v38;
    *(_DWORD *)(v38 + 124) |= 0x800000u;
    *(_BYTE *)(v35 + 120) = 1;
    v36 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 28);
    *(_DWORD *)(v38 + 124) |= 0x400000u;
    *(_DWORD *)(v36 + 116) = LODWORD(v9);
    sub_18F2A9EF0(*v5, (uint64_t)v37);
    result = (uint64_t *)sub_18F2B9670((PB::Base *)v37);
    if (HIBYTE(v42))
    {
      if ((_BYTE)v42)
        return (uint64_t *)pthread_mutex_unlock(v41);
      else
        return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v40 + 24))(v40);
    }
  }
  return result;
}

void sub_18F34A514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F34A530(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD v10[3];
  uint64_t v11;
  CFAbsoluteTime v12;
  char v13;
  _QWORD *v14;
  __int16 v15;

  if (*result)
  {
    v3 = result;
    v5 = result + 1;
    v4 = result[1];
    v14 = result + 1;
    (*(void (**)(uint64_t *))(v4 + 16))(result + 1);
    v15 = 256;
    sub_18F2B6BD0(v10);
    sub_18F2C6F10(v10);
    Current = CFAbsoluteTimeGetCurrent();
    v13 |= 1u;
    v12 = Current;
    v7 = v11;
    v8 = *a2;
    v9 = *(_BYTE *)(v11 + 32);
    *(_BYTE *)(v11 + 32) = v9 | 1;
    *(_QWORD *)(v7 + 8) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 2);
    *(_BYTE *)(v7 + 32) = v9 | 5;
    *(_DWORD *)(v7 + 20) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 3);
    *(_BYTE *)(v7 + 32) = v9 | 0xD;
    *(_DWORD *)(v7 + 24) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 4);
    *(_BYTE *)(v7 + 32) = v9 | 0x1D;
    *(_DWORD *)(v7 + 28) = v8;
    sub_18F2A9EF0(*v3, (uint64_t)v10);
    sub_18F2B9670((PB::Base *)v10);
    return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v5 + 24))(v5);
  }
  return result;
}

void sub_18F34A628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F34A644(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[143];
  uint64_t v19;
  char v20;
  _QWORD *v21;
  __int16 v22;

  if (*result)
  {
    v3 = result;
    v5 = result + 1;
    v4 = result[1];
    v21 = result + 1;
    (*(void (**)(uint64_t *))(v4 + 16))(result + 1);
    v22 = 256;
    sub_18F2B6BD0(v18);
    sub_18F2C6F74(v18);
    Current = CFAbsoluteTimeGetCurrent();
    v20 |= 1u;
    *(CFAbsoluteTime *)&v18[77] = Current;
    v7 = v19;
    v8 = *a2;
    *(_WORD *)(v19 + 44) |= 1u;
    *(_QWORD *)(v7 + 8) = v8;
    v9 = v19;
    LODWORD(v8) = *((_DWORD *)a2 + 2);
    *(_WORD *)(v19 + 44) |= 0x10u;
    *(_DWORD *)(v9 + 28) = v8;
    v10 = v19;
    LODWORD(v8) = *((_DWORD *)a2 + 3);
    *(_WORD *)(v19 + 44) |= 0x20u;
    *(_DWORD *)(v10 + 32) = v8;
    v11 = v19;
    LODWORD(v8) = *((_DWORD *)a2 + 4);
    *(_WORD *)(v19 + 44) |= 0x40u;
    *(_DWORD *)(v11 + 36) = v8;
    v12 = v19;
    *(_WORD *)(v19 + 44) |= 8u;
    *(_DWORD *)(v12 + 24) = 0;
    v13 = v19;
    v14 = HIWORD(*(_DWORD *)(v19 + 24));
    *(_WORD *)(v19 + 44) |= 4u;
    *(_DWORD *)(v13 + 20) = (unsigned __int16)v14 % 3u;
    v15 = v19;
    LOBYTE(v14) = *(_BYTE *)(v19 + 25) & 1;
    *(_WORD *)(v19 + 44) |= 0x80u;
    *(_BYTE *)(v15 + 40) = v14;
    v16 = v19;
    v17 = (*(_DWORD *)(v19 + 24) >> 9) & 1;
    *(_WORD *)(v19 + 44) |= 0x100u;
    *(_BYTE *)(v16 + 41) = v17;
    sub_18F2A9EF0(*v3, (uint64_t)v18);
    sub_18F2B9670((PB::Base *)v18);
    return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v5 + 24))(v5);
  }
  return result;
}

void sub_18F34A7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F34A7EC(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  _QWORD v8[158];
  uint64_t v9;
  char v10;
  _QWORD *v11;
  __int16 v12;

  if (*result)
  {
    v3 = result;
    v5 = result + 1;
    v4 = result[1];
    v11 = result + 1;
    (*(void (**)(uint64_t *))(v4 + 16))(result + 1);
    v12 = 256;
    sub_18F2B6BD0(v8);
    sub_18F2C6FD8(v8);
    Current = CFAbsoluteTimeGetCurrent();
    v10 |= 1u;
    *(CFAbsoluteTime *)&v8[77] = Current;
    v7 = v9;
    LODWORD(Current) = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(v9 + 16) |= 2u;
    *(_DWORD *)(v7 + 12) = LODWORD(Current);
    sub_18F2A9EF0(*v3, (uint64_t)v8);
    sub_18F2B9670((PB::Base *)v8);
    return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v5 + 24))(v5);
  }
  return result;
}

void sub_18F34A8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F34A8C4(uint64_t *result, unsigned int a2, double a3, double a4)
{
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  CFAbsoluteTime Current;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[165];
  uint64_t v15;
  char v16;
  _QWORD *v17;
  __int16 v18;

  if (*result)
  {
    v7 = result;
    v9 = result + 1;
    v8 = result[1];
    v17 = result + 1;
    (*(void (**)(uint64_t *))(v8 + 16))(result + 1);
    v18 = 256;
    sub_18F2B6BD0(v14);
    sub_18F2C6B8C(v14);
    Current = CFAbsoluteTimeGetCurrent();
    v16 |= 1u;
    *(CFAbsoluteTime *)&v14[77] = Current;
    v11 = v15;
    *(_BYTE *)(v15 + 32) |= 4u;
    *(double *)(v11 + 24) = a3;
    v12 = v15;
    *(_BYTE *)(v15 + 32) |= 2u;
    *(double *)(v12 + 16) = a4;
    v13 = v15;
    *(_BYTE *)(v15 + 32) |= 1u;
    *(_QWORD *)(v13 + 8) = a2;
    sub_18F2A9EF0(*v7, (uint64_t)v14);
    sub_18F2B9670((PB::Base *)v14);
    return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v9 + 24))(v9);
  }
  return result;
}

void sub_18F34A9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 72);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F34A9D4(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[429];
  uint64_t v19;
  char v20;
  _QWORD *v21;
  __int16 v22;

  if (*result)
  {
    v3 = result;
    v5 = result + 1;
    v4 = result[1];
    v21 = result + 1;
    (*(void (**)(uint64_t *))(v4 + 16))(result + 1);
    v22 = 256;
    sub_18F2B6BD0(v18);
    Current = CFAbsoluteTimeGetCurrent();
    v20 |= 1u;
    *(CFAbsoluteTime *)&v18[77] = Current;
    sub_18F2C73C0(v18);
    v7 = v19;
    v8 = a2[3];
    *(_WORD *)(v19 + 64) |= 2u;
    *(_QWORD *)(v7 + 16) = v8;
    v9 = v19;
    v10 = *a2;
    *(_WORD *)(v19 + 64) |= 8u;
    *(_QWORD *)(v9 + 32) = v10;
    v11 = v19;
    *(_WORD *)(v19 + 64) |= 1u;
    *(_QWORD *)(v11 + 8) = 0;
    v12 = v19;
    v13 = a2[2];
    *(_WORD *)(v19 + 64) |= 0x10u;
    *(_DWORD *)(v12 + 40) = v13;
    v14 = v19;
    v15 = a2[14];
    *(_WORD *)(v19 + 64) |= 0x200u;
    *(_DWORD *)(v14 + 60) = v15;
    v16 = v19;
    *(_WORD *)(v19 + 64) |= 0x80u;
    *(_DWORD *)(v16 + 52) = 0;
    v17 = v19;
    *(_WORD *)(v19 + 64) |= 0x100u;
    *(_DWORD *)(v17 + 56) = 0;
    sub_18F2A9EF0(*v3, (uint64_t)v18);
    sub_18F2B9670((PB::Base *)v18);
    return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v5 + 24))(v5);
  }
  return result;
}

void sub_18F34AB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t *sub_18F34AB30(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  CFAbsoluteTime Current;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[129];
  uint64_t v35;
  char v36;
  _QWORD *v37;
  pthread_mutex_t *v38;
  __int16 v39;

  if (*result)
  {
    v3 = result;
    v4 = result[1];
    v37 = result + 1;
    (*(void (**)(void))(v4 + 16))();
    v39 = 256;
    sub_18F2B6BD0(v34);
    Current = CFAbsoluteTimeGetCurrent();
    v36 |= 1u;
    *(CFAbsoluteTime *)&v34[77] = Current;
    sub_18F2C6D1C(v34);
    v6 = v35;
    v7 = *a2;
    *(_DWORD *)(v35 + 112) |= 4u;
    *(_QWORD *)(v6 + 24) = v7;
    v8 = v35;
    v9 = a2[1];
    *(_DWORD *)(v35 + 112) |= 2u;
    *(_QWORD *)(v8 + 16) = v9;
    v10 = v35;
    v11 = a2[2];
    *(_DWORD *)(v35 + 112) |= 1u;
    *(_QWORD *)(v10 + 8) = v11;
    v12 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 6);
    *(_DWORD *)(v35 + 112) |= 0x400u;
    *(_DWORD *)(v12 + 60) = v11;
    v13 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 7);
    *(_DWORD *)(v35 + 112) |= 0x400000u;
    *(_DWORD *)(v13 + 108) = v11;
    v14 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 8);
    *(_DWORD *)(v35 + 112) |= 0x2000u;
    *(_DWORD *)(v14 + 72) = v11;
    v15 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 9);
    *(_DWORD *)(v35 + 112) |= 0x100u;
    *(_DWORD *)(v15 + 52) = v11;
    v16 = v35;
    v17 = *((_DWORD *)a2 + 10);
    *(_DWORD *)(v35 + 112) |= 0x800u;
    *(_DWORD *)(v16 + 64) = v17;
    v18 = v35;
    v19 = *((_DWORD *)a2 + 11);
    *(_DWORD *)(v35 + 112) |= 0x100000u;
    *(_DWORD *)(v18 + 100) = v19;
    v20 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 12);
    *(_DWORD *)(v35 + 112) |= 0x200000u;
    *(_DWORD *)(v20 + 104) = v11;
    v21 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 13);
    *(_DWORD *)(v35 + 112) |= 0x40000u;
    *(_DWORD *)(v21 + 92) = v11;
    v22 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 14);
    *(_DWORD *)(v35 + 112) |= 0x80u;
    *(_DWORD *)(v22 + 48) = v11;
    v23 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 15);
    *(_DWORD *)(v35 + 112) |= 0x10000u;
    *(_DWORD *)(v23 + 84) = v11;
    v24 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 16);
    *(_DWORD *)(v35 + 112) |= 0x20u;
    *(_DWORD *)(v24 + 40) = v11;
    v25 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 17);
    *(_DWORD *)(v35 + 112) |= 0x200u;
    *(_DWORD *)(v25 + 56) = v11;
    v26 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 18);
    *(_DWORD *)(v35 + 112) |= 0x1000u;
    *(_DWORD *)(v26 + 68) = v11;
    v27 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 19);
    *(_DWORD *)(v35 + 112) |= 0x80000u;
    *(_DWORD *)(v27 + 96) = v11;
    v28 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 20);
    *(_DWORD *)(v35 + 112) |= 0x20000u;
    *(_DWORD *)(v28 + 88) = v11;
    v29 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 21);
    *(_DWORD *)(v35 + 112) |= 0x40u;
    *(_DWORD *)(v29 + 44) = v11;
    v30 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 22);
    *(_DWORD *)(v35 + 112) |= 0x4000u;
    *(_DWORD *)(v30 + 76) = v11;
    v31 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 23);
    *(_DWORD *)(v35 + 112) |= 8u;
    *(_DWORD *)(v31 + 32) = v11;
    v32 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 24);
    *(_DWORD *)(v35 + 112) |= 0x8000u;
    *(_DWORD *)(v32 + 80) = v11;
    v33 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 25);
    *(_DWORD *)(v35 + 112) |= 0x10u;
    *(_DWORD *)(v33 + 36) = v11;
    sub_18F2A9EF0(*v3, (uint64_t)v34);
    result = (uint64_t *)sub_18F2B9670((PB::Base *)v34);
    if (HIBYTE(v39))
    {
      if ((_BYTE)v39)
        return (uint64_t *)pthread_mutex_unlock(v38);
      else
        return (uint64_t *)(*(uint64_t (**)(_QWORD *))(*v37 + 24))(v37);
    }
  }
  return result;
}

void sub_18F34AE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2B9670((PB::Base *)&a9);
  sub_18F346934(v9 - 56);
  _Unwind_Resume(a1);
}

os_log_t sub_18F34AE2C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Workout");
  qword_1EE16D880 = (uint64_t)result;
  return result;
}

void sub_18F34AE58()
{
  sub_18F34AE6C("vector");
}

void sub_18F34AE6C(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_18F34AEBC(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E2942B48, MEMORY[0x1E0DE42E0]);
}

void sub_18F34AEA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_18F34AEBC(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

uint64_t sub_18F34AEE0(uint64_t a1)
{
  _OWORD *v2;
  char *v3;
  int v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;

  *(_OWORD *)a1 = xmmword_18F504210;
  *(_OWORD *)(a1 + 16) = xmmword_18F504210;
  *(_OWORD *)(a1 + 32) = xmmword_18F504210;
  *(_OWORD *)(a1 + 48) = xmmword_18F504210;
  *(_OWORD *)(a1 + 64) = xmmword_18F504210;
  *(_OWORD *)(a1 + 80) = xmmword_18F504210;
  *(_OWORD *)(a1 + 96) = xmmword_18F504210;
  *(_OWORD *)(a1 + 112) = xmmword_18F504210;
  *(_OWORD *)(a1 + 128) = xmmword_18F504210;
  *(_OWORD *)(a1 + 144) = xmmword_18F504210;
  *(_OWORD *)(a1 + 160) = xmmword_18F504210;
  *(_OWORD *)(a1 + 176) = xmmword_18F504210;
  *(_OWORD *)(a1 + 192) = xmmword_18F504210;
  *(_OWORD *)(a1 + 208) = xmmword_18F504210;
  *(_OWORD *)(a1 + 224) = xmmword_18F504210;
  *(_OWORD *)(a1 + 240) = xmmword_18F504210;
  *(_OWORD *)(a1 + 256) = xmmword_18F504210;
  *(_OWORD *)(a1 + 272) = xmmword_18F504210;
  *(_OWORD *)(a1 + 288) = xmmword_18F504210;
  *(_OWORD *)(a1 + 304) = xmmword_18F504210;
  *(_OWORD *)(a1 + 320) = xmmword_18F504210;
  *(_OWORD *)(a1 + 336) = xmmword_18F504210;
  *(_OWORD *)(a1 + 352) = xmmword_18F504210;
  *(_OWORD *)(a1 + 368) = xmmword_18F504210;
  *(_OWORD *)(a1 + 384) = xmmword_18F504210;
  *(_OWORD *)(a1 + 400) = xmmword_18F504210;
  *(_OWORD *)(a1 + 416) = xmmword_18F504210;
  *(_OWORD *)(a1 + 432) = xmmword_18F504010;
  *(_QWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 464) = xmmword_18F504010;
  *(_QWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 496) = xmmword_18F504010;
  *(_QWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 528) = xmmword_18F504010;
  *(_QWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 560) = xmmword_18F504010;
  *(_QWORD *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 592) = xmmword_18F504010;
  *(_QWORD *)(a1 + 608) = 0;
  *(_DWORD *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 624) = xmmword_18F504010;
  *(_QWORD *)(a1 + 640) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 656) = xmmword_18F504010;
  *(_QWORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 688) = xmmword_18F504010;
  *(_QWORD *)(a1 + 704) = 0;
  *(_DWORD *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 720) = xmmword_18F504010;
  *(_QWORD *)(a1 + 736) = 0;
  *(_DWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 752) = xmmword_18F504010;
  *(_QWORD *)(a1 + 768) = 0;
  *(_DWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 784) = xmmword_18F504010;
  *(_QWORD *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 816) = xmmword_18F504010;
  *(_QWORD *)(a1 + 832) = 0;
  *(_DWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 848) = xmmword_18F504010;
  *(_QWORD *)(a1 + 864) = 0;
  *(_DWORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 880) = xmmword_18F504010;
  *(_QWORD *)(a1 + 896) = 0;
  *(_DWORD *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 912) = xmmword_18F504010;
  *(_QWORD *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 936) = 0;
  *(_OWORD *)(a1 + 944) = xmmword_18F504010;
  *(_QWORD *)(a1 + 960) = 0;
  *(_DWORD *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 976) = xmmword_18F504010;
  *(_QWORD *)(a1 + 992) = 0;
  *(_DWORD *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 1008) = xmmword_18F504010;
  *(_QWORD *)(a1 + 1024) = 0;
  *(_DWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1040) = xmmword_18F504010;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_DWORD *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1072) = xmmword_18F504010;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_DWORD *)(a1 + 1096) = 0;
  *(_OWORD *)(a1 + 1104) = xmmword_18F504010;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_DWORD *)(a1 + 1128) = 0;
  *(_OWORD *)(a1 + 1136) = xmmword_18F504010;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_DWORD *)(a1 + 1160) = 0;
  *(_OWORD *)(a1 + 1168) = xmmword_18F504010;
  *(_QWORD *)(a1 + 1184) = 0;
  *(_DWORD *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1200) = xmmword_18F504010;
  *(_QWORD *)(a1 + 1216) = 0;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1360) = xmmword_18F504220;
  *(_QWORD *)(a1 + 1376) = 0;
  *(_DWORD *)(a1 + 1384) = -1;
  *(_OWORD *)(a1 + 1388) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_DWORD *)(a1 + 1488) = -1;
  *(_WORD *)(a1 + 1492) = 0;
  *(_QWORD *)(a1 + 1496) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 1504) = 0;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_QWORD *)(a1 + 1528) = 0;
  v2 = operator new(0x58uLL);
  *(_QWORD *)(a1 + 1512) = v2;
  *(_QWORD *)(a1 + 1528) = (char *)v2 + 88;
  v2[2] = xmmword_18F5042B8;
  v2[3] = unk_18F5042C8;
  v2[4] = xmmword_18F5042D8;
  *((_QWORD *)v2 + 10) = 0x408F400000000000;
  *v2 = xmmword_18F504298;
  v2[1] = unk_18F5042A8;
  *(_QWORD *)(a1 + 1520) = (char *)v2 + 88;
  *(_QWORD *)(a1 + 1472) = 0;
  v3 = (char *)operator new(0x70uLL);
  v4 = 0;
  *(_QWORD *)(a1 + 1464) = v3;
  *(_QWORD *)(a1 + 1472) = v3;
  *(_QWORD *)(a1 + 1480) = v3 + 112;
  do
  {
    v5 = *(_QWORD *)(a1 + 1480);
    if ((unint64_t)v3 < v5)
    {
      *(_OWORD *)v3 = xmmword_18F504210;
      v6 = v3 + 16;
      goto LABEL_17;
    }
    v7 = *(char **)(a1 + 1464);
    v8 = (v3 - v7) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      sub_18F26F8C0();
    v10 = v5 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11 >> 60)
      sub_18F26F97C();
    v12 = (char *)operator new(16 * v11);
    v13 = &v12[16 * v8];
    v14 = &v12[16 * v11];
    *(_OWORD *)v13 = xmmword_18F504210;
    v6 = v13 + 16;
    if (v3 == v7)
    {
      *(_QWORD *)(a1 + 1464) = v13;
      *(_QWORD *)(a1 + 1472) = v6;
      v7 = v3;
      *(_QWORD *)(a1 + 1480) = v14;
LABEL_16:
      operator delete(v7);
      goto LABEL_17;
    }
    do
    {
      *((_OWORD *)v13 - 1) = *((_OWORD *)v3 - 1);
      v13 -= 16;
      v3 -= 16;
    }
    while (v3 != v7);
    *(_QWORD *)(a1 + 1464) = v13;
    *(_QWORD *)(a1 + 1472) = v6;
    *(_QWORD *)(a1 + 1480) = v14;
    if (v7)
      goto LABEL_16;
LABEL_17:
    *(_QWORD *)(a1 + 1472) = v6;
    ++v4;
    v3 = v6;
  }
  while (v4 != 7);
  return a1;
}

void sub_18F34B264(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    v1[190] = v4;
    operator delete(v4);
  }
  v5 = (void *)v1[183];
  if (v5)
  {
    v1[184] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_18F34B2A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v5;
  uint64_t i;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double v12;
  float v13;
  __CFString *v14;
  uint64_t v15;

  v5 = (__int16)a2;
  for (i = 0; i != 6; ++i)
  {
    if (i)
      v8 = (unsigned __int16)aPdx[(i - 1)];
    else
      v8 = 0;
    if (v8 < a2 && (unsigned __int16)aPdx[i] >= a2)
      break;
  }
  v9 = *(int *)(a1 + 1488);
  if ((_DWORD)v9 != (_DWORD)i)
  {
    *(_DWORD *)(a1 + 1488) = i;
    if ((_DWORD)v9 != -1)
    {
      v10 = *(_QWORD *)(a1 + 1464);
      v11 = (double *)(v10 + 16 * v9);
      v12 = *v11;
      if (*v11 > 0.0)
      {
        sub_18F408688(v11, &stru_1E295ADC8);
        v10 = *(_QWORD *)(a1 + 1464);
      }
      LOWORD(v12) = *(_WORD *)(a1 + 1492);
      v13 = *(float *)(a1 + 1496) + (double)*(unint64_t *)&v12 * *(double *)(v10 + 16 * v9 + 8);
      *(float *)(a1 + 1496) = v13;
    }
    if ((_DWORD)i == 6)
    {
      v14 = CFSTR("JBLAccumulatedEventMetric_OverLimit");
      v15 = 6;
    }
    else
    {
      v15 = (int)i;
      v14 = (__CFString *)objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("JBLAccumulatedEventMetric_%d"), a4, a5, (unsigned __int16)aPdx[(int)i]);
    }
    sub_18F4084AC((double *)(*(_QWORD *)(a1 + 1464) + 16 * v15), v14);
    *(_WORD *)(a1 + 1492) = v5;
  }
}

void sub_18F34B3C8(uint64_t a1)
{
  double *v2;
  double *i;
  NSObject *v4;
  int v5;
  NSObject *v6;
  char *v7;
  char *v8;
  uint8_t buf[4];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(double *)a1 > 0.0)
    sub_18F408688((double *)a1, &stru_1E295ADC8);
  if (*(double *)(a1 + 16) > 0.0)
    sub_18F408688((double *)(a1 + 16), &stru_1E295ADC8);
  if (*(double *)(a1 + 32) > 0.0)
    sub_18F408688((double *)(a1 + 32), &stru_1E295ADC8);
  if (*(double *)(a1 + 48) > 0.0)
    sub_18F408688((double *)(a1 + 48), &stru_1E295ADC8);
  if (*(double *)(a1 + 64) > 0.0)
    sub_18F408688((double *)(a1 + 64), &stru_1E295ADC8);
  if (*(double *)(a1 + 80) > 0.0)
    sub_18F408688((double *)(a1 + 80), &stru_1E295ADC8);
  if (*(double *)(a1 + 96) > 0.0)
    sub_18F408688((double *)(a1 + 96), &stru_1E295ADC8);
  if (*(double *)(a1 + 112) > 0.0)
    sub_18F408688((double *)(a1 + 112), &stru_1E295ADC8);
  if (*(double *)(a1 + 128) > 0.0)
    sub_18F408688((double *)(a1 + 128), &stru_1E295ADC8);
  if (*(double *)(a1 + 144) > 0.0)
    sub_18F408688((double *)(a1 + 144), &stru_1E295ADC8);
  if (*(double *)(a1 + 160) > 0.0)
    sub_18F408688((double *)(a1 + 160), &stru_1E295ADC8);
  if (*(double *)(a1 + 176) > 0.0)
    sub_18F408688((double *)(a1 + 176), &stru_1E295ADC8);
  if (*(double *)(a1 + 192) > 0.0)
    sub_18F408688((double *)(a1 + 192), &stru_1E295ADC8);
  if (*(double *)(a1 + 208) > 0.0)
    sub_18F408688((double *)(a1 + 208), &stru_1E295ADC8);
  if (*(double *)(a1 + 224) > 0.0)
    sub_18F408688((double *)(a1 + 224), &stru_1E295ADC8);
  if (*(double *)(a1 + 240) > 0.0)
    sub_18F408688((double *)(a1 + 240), &stru_1E295ADC8);
  if (*(double *)(a1 + 256) > 0.0)
    sub_18F408688((double *)(a1 + 256), &stru_1E295ADC8);
  if (*(double *)(a1 + 272) > 0.0)
    sub_18F408688((double *)(a1 + 272), &stru_1E295ADC8);
  if (*(double *)(a1 + 288) > 0.0)
    sub_18F408688((double *)(a1 + 288), &stru_1E295ADC8);
  if (*(double *)(a1 + 304) > 0.0)
    sub_18F408688((double *)(a1 + 304), &stru_1E295ADC8);
  if (*(double *)(a1 + 320) > 0.0)
    sub_18F408688((double *)(a1 + 320), &stru_1E295ADC8);
  if (*(double *)(a1 + 336) > 0.0)
    sub_18F408688((double *)(a1 + 336), &stru_1E295ADC8);
  if (*(double *)(a1 + 352) > 0.0)
    sub_18F408688((double *)(a1 + 352), &stru_1E295ADC8);
  if (*(double *)(a1 + 368) > 0.0)
    sub_18F408688((double *)(a1 + 368), &stru_1E295ADC8);
  if (*(double *)(a1 + 384) > 0.0)
    sub_18F408688((double *)(a1 + 384), &stru_1E295ADC8);
  if (*(double *)(a1 + 400) > 0.0)
    sub_18F408688((double *)(a1 + 400), &stru_1E295ADC8);
  if (*(double *)(a1 + 416) > 0.0)
    sub_18F408688((double *)(a1 + 416), &stru_1E295ADC8);
  v2 = *(double **)(a1 + 1464);
  for (i = *(double **)(a1 + 1472); v2 != i; v2 += 2)
  {
    if (*v2 > 0.0)
      sub_18F408688(v2, &stru_1E295ADC8);
  }
  if (fabs(*(double *)(a1 + 8)) <= 0.0001)
  {
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952D48);
    v6 = qword_1EE16D820;
    if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_ERROR, "[CMMediaSessionAnalyticsTracker] Trying to send analytics but the session duration was 0.0, not sending.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952D48);
      v7 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CMMediaSessionAnalyticsTracker::send()", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
  }
  else
  {
    if (*(int *)(a1 + 1400) >= 1)
    {
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952D48);
      v4 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
      {
        v5 = *(_DWORD *)(a1 + 1400);
        *(_DWORD *)buf = 67240192;
        v10 = v5;
        _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_ERROR, "[CMMediaSessionAnalyticsTracker] We've already sent analytics for this instance, was this intended? sent: %{public}d", buf, 8u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2952D48);
        v8 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "void CMMediaSessionAnalyticsTracker::send()", "CoreLocation: %s\n", v8);
        if (v8 != (char *)buf)
          free(v8);
      }
    }
    AnalyticsSendEventLazy();
    ++*(_DWORD *)(a1 + 1400);
  }
}

uint64_t sub_18F34BAC4(uint64_t a1)
{
  uint64_t v2;
  const __CFString *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const __CFString *v12;
  unint64_t v13;
  double v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  NSObject *v56;
  char *v58;
  uint8_t buf[4];
  uint64_t v60;
  _QWORD v61[12];
  _QWORD v62[13];

  v62[12] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = sub_18F4A2B04(*(_DWORD *)(v2 + 1392));
  v61[0] = CFSTR("sessionDuration");
  v8 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v4, v5, v6, v7, *(double *)(v2 + 8));
  v12 = CFSTR("unknown");
  if (v3)
    v12 = v3;
  v62[0] = v8;
  v62[1] = v12;
  v61[1] = CFSTR("accessoryHardwareModel");
  v61[2] = CFSTR("accessoryBudLocation");
  v62[2] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v9, *(unsigned int *)(v2 + 1396), v10, v11);
  v61[3] = CFSTR("percentageOfSrcSamplesThatAreVeryEarly_shortSession");
  LODWORD(v13) = *(_DWORD *)(v2 + 1280);
  v14 = (double)v13 / *(double *)(a1 + 40);
  *(float *)&v14 = v14;
  v62[3] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v15, v16, v17, v18, v14);
  v61[4] = CFSTR("percentageOfSrcSamplesThatAreVeryLate_shortSession");
  LODWORD(v19) = *(_DWORD *)(v2 + 1284);
  v20 = (double)v19 / *(double *)(a1 + 40);
  *(float *)&v20 = v20;
  v62[4] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v21, v22, v23, v24, v20);
  v61[5] = CFSTR("percentageOfAuxSamplesWithLargeGaps_shortSession");
  v25 = (double)*(unint64_t *)(v2 + 1432) / *(double *)(a1 + 48);
  *(float *)&v25 = v25;
  v62[5] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v26, v27, v28, v29, v25);
  v61[6] = CFSTR("percentageOfAuxSamplesFailedToFindSource_shortSession");
  v30 = (double)*(unint64_t *)(v2 + 1440) / *(double *)(a1 + 48);
  *(float *)&v30 = v30;
  v62[6] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v31, v32, v33, v34, v30);
  v61[7] = CFSTR("percentageOfAuxSamplesIndexUnchanged_shortSession");
  v35 = (double)*(unint64_t *)(v2 + 1448) / *(double *)(a1 + 48);
  *(float *)&v35 = v35;
  v62[7] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v36, v37, v38, v39, v35);
  v61[8] = CFSTR("percentageOfAuxSamplesSourceDataMissing_shortSession");
  v40 = (double)*(unint64_t *)(v2 + 1456) / *(double *)(a1 + 48);
  *(float *)&v40 = v40;
  v62[8] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v41, v42, v43, v44, v40);
  v61[9] = CFSTR("trackingClientMode");
  v62[9] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v45, *(unsigned int *)(v2 + 1500), v46, v47);
  v61[10] = CFSTR("hasDistractedViewing");
  v62[10] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v48, *(unsigned __int8 *)(a1 + 56), v49, v50);
  v61[11] = CFSTR("hasJBLOverLimit");
  v62[11] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v51, *(unsigned __int8 *)(a1 + 57), v52, v53);
  v55 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v54, (uint64_t)v62, (uint64_t)v61, 12);
  if (qword_1EE16D818 != -1)
    dispatch_once(&qword_1EE16D818, &unk_1E2952D48);
  v56 = qword_1EE16D820;
  if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    v60 = v55;
    _os_log_impl(&dword_18F1DC000, v56, OS_LOG_TYPE_DEFAULT, "[CMMediaSessionAnalyticsTracker] Sending basic analytics: \n%{private}@", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D818 != -1)
      dispatch_once(&qword_1EE16D818, &unk_1E2952D48);
    v58 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CMMediaSessionAnalyticsTracker::send()_block_invoke", "CoreLocation: %s\n", v58);
    if (v58 != (char *)buf)
      free(v58);
  }
  return v55;
}

void *sub_18F34BE4C(uint64_t a1)
{
  uint64_t v2;
  const __CFString *v3;
  float v4;
  double v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const __CFString *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  float v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  float v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  double v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  double v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  float v140;
  double v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  double v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  double v157;
  double v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  double v163;
  int v164;
  double v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  float v177;
  double v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  double v195;
  const char *v196;
  uint64_t v197;
  uint64_t v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  const char *v205;
  uint64_t v206;
  uint64_t v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  float v212;
  double v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  double v218;
  float v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  float v224;
  double v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  const char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  double v233;
  const char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  double v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int v242;
  unsigned int v243;
  uint64_t v244;
  const char *v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int v248;
  double *v249;
  double *v250;
  double v251;
  double *v252;
  double v253;
  const char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  const char *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  float v262;
  double v263;
  const char *v264;
  uint64_t v265;
  uint64_t v266;
  const char *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  double v271;
  const char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  double v276;
  const char *v277;
  uint64_t v278;
  uint64_t v279;
  const char *v280;
  uint64_t v281;
  const char *v282;
  uint64_t v283;
  uint64_t v284;
  const char *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  double v289;
  uint64_t v290;
  const char *v291;
  uint64_t v292;
  uint64_t v293;
  const char *v294;
  uint64_t v295;
  const char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  const char *v302;
  uint64_t v303;
  uint64_t v304;
  const char *v305;
  uint64_t v306;
  const char *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  const char *v313;
  uint64_t v314;
  double v315;
  uint64_t v316;
  const char *v317;
  uint64_t v318;
  const char *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  double v324;
  uint64_t v325;
  const char *v326;
  uint64_t v327;
  double v328;
  const char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  const char *v334;
  uint64_t v335;
  double v336;
  double v337;
  uint64_t v338;
  const char *v339;
  uint64_t v340;
  const char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  double v346;
  double v347;
  uint64_t v348;
  const char *v349;
  uint64_t v350;
  double v351;
  const char *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  const char *v357;
  uint64_t v358;
  double v359;
  double v360;
  uint64_t v361;
  const char *v362;
  uint64_t v363;
  const char *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  int v368;
  double v369;
  double v370;
  uint64_t v371;
  const char *v372;
  uint64_t v373;
  double v374;
  const char *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  const char *v380;
  uint64_t v381;
  double v382;
  double v383;
  uint64_t v384;
  const char *v385;
  uint64_t v386;
  const char *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  int v391;
  double v392;
  double v393;
  uint64_t v394;
  const char *v395;
  uint64_t v396;
  double v397;
  const char *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  const char *v403;
  uint64_t v404;
  uint64_t v405;
  const char *v406;
  uint64_t v407;
  const char *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  int v412;
  uint64_t v413;
  const char *v414;
  uint64_t v415;
  const char *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  const char *v421;
  uint64_t v422;
  double v423;
  double v424;
  uint64_t v425;
  const char *v426;
  uint64_t v427;
  const char *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  double v433;
  double v434;
  uint64_t v435;
  const char *v436;
  uint64_t v437;
  double v438;
  const char *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  const char *v444;
  uint64_t v445;
  double v446;
  uint64_t v447;
  const char *v448;
  uint64_t v449;
  const char *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  int v454;
  double v455;
  uint64_t v456;
  const char *v457;
  uint64_t v458;
  double v459;
  const char *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  const char *v465;
  uint64_t v466;
  double v467;
  uint64_t v468;
  const char *v469;
  uint64_t v470;
  double v471;
  const char *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  const char *v477;
  uint64_t v478;
  unint64_t v479;
  double v480;
  const char *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  const char *v486;
  uint64_t v487;
  double v488;
  uint64_t v489;
  const char *v490;
  uint64_t v491;
  double v492;
  const char *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  const char *v498;
  uint64_t v499;
  const char *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  int v504;
  double v505;
  uint64_t v506;
  const char *v507;
  uint64_t v508;
  double v509;
  uint64_t v510;
  const char *v511;
  uint64_t v512;
  double v513;
  const char *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  const char *v519;
  uint64_t v520;
  const char *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  int v525;
  double v526;
  uint64_t v527;
  const char *v528;
  uint64_t v529;
  double v530;
  uint64_t v531;
  const char *v532;
  uint64_t v533;
  double v534;
  const char *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  const char *v540;
  uint64_t v541;
  const char *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  int v546;
  double v547;
  uint64_t v548;
  const char *v549;
  uint64_t v550;
  double v551;
  uint64_t v552;
  const char *v553;
  uint64_t v554;
  double v555;
  const char *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  const char *v561;
  uint64_t v562;
  const char *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  int v567;
  double v568;
  uint64_t v569;
  const char *v570;
  uint64_t v571;
  double v572;
  uint64_t v573;
  const char *v574;
  uint64_t v575;
  double v576;
  const char *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  const char *v582;
  uint64_t v583;
  const char *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  int v588;
  double v589;
  uint64_t v590;
  const char *v591;
  uint64_t v592;
  double v593;
  uint64_t v594;
  const char *v595;
  uint64_t v596;
  double v597;
  const char *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  const char *v603;
  uint64_t v604;
  const char *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  int v609;
  double v610;
  uint64_t v611;
  const char *v612;
  uint64_t v613;
  double v614;
  uint64_t v615;
  const char *v616;
  uint64_t v617;
  double v618;
  const char *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  const char *v624;
  uint64_t v625;
  const char *v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  int v630;
  double v631;
  uint64_t v632;
  const char *v633;
  uint64_t v634;
  double v635;
  uint64_t v636;
  const char *v637;
  uint64_t v638;
  double v639;
  const char *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  const char *v645;
  uint64_t v646;
  const char *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  int v651;
  double v652;
  uint64_t v653;
  const char *v654;
  uint64_t v655;
  double v656;
  uint64_t v657;
  const char *v658;
  uint64_t v659;
  double v660;
  const char *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  const char *v666;
  uint64_t v667;
  const char *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  double v672;
  int v673;
  uint64_t v674;
  const char *v675;
  uint64_t v676;
  double v677;
  uint64_t v678;
  const char *v679;
  uint64_t v680;
  double v681;
  const char *v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  const char *v687;
  uint64_t v688;
  const char *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  double v693;
  int v694;
  uint64_t v695;
  const char *v696;
  uint64_t v697;
  double v698;
  uint64_t v699;
  const char *v700;
  uint64_t v701;
  double v702;
  const char *v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  const char *v708;
  uint64_t v709;
  const char *v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  double v714;
  int v715;
  uint64_t v716;
  const char *v717;
  uint64_t v718;
  double v719;
  uint64_t v720;
  const char *v721;
  uint64_t v722;
  double v723;
  const char *v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  const char *v729;
  uint64_t v730;
  const char *v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  double v735;
  int v736;
  uint64_t v737;
  const char *v738;
  uint64_t v739;
  int32x4_t v740;
  double v741;
  uint64_t v742;
  const char *v743;
  uint64_t v744;
  const char *v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  double v749;
  int v750;
  uint64_t v751;
  const char *v752;
  uint64_t v753;
  unsigned int v754;
  unsigned int v755;
  BOOL v756;
  unsigned int v757;
  uint64_t v758;
  const char *v759;
  uint64_t v760;
  double v761;
  const char *v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  const char *v767;
  uint64_t v768;
  double v769;
  const char *v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  const char *v775;
  uint64_t v776;
  unsigned int v777;
  uint64_t v778;
  const char *v779;
  uint64_t v780;
  double v781;
  const char *v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  const char *v787;
  uint64_t v788;
  double v789;
  const char *v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  const char *v795;
  uint64_t v796;
  double v797;
  const char *v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  const char *v803;
  uint64_t v804;
  double v805;
  const char *v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  const char *v811;
  uint64_t v812;
  double v813;
  double v814;
  const char *v815;
  uint64_t v816;
  uint64_t v817;
  const __CFString *v818;
  const __CFString *v819;
  const __CFString *v820;
  const __CFString *v821;
  const __CFString *v822;
  const __CFString *v823;
  unint64_t v824;
  double v825;
  const char *v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  const char *v831;
  uint64_t v832;
  double v833;
  const char *v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  const char *v839;
  uint64_t v840;
  double v841;
  const char *v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  const char *v847;
  uint64_t v848;
  double v849;
  const char *v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  const char *v855;
  uint64_t v856;
  double v857;
  const char *v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  const char *v863;
  uint64_t v864;
  const char *v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  double v869;
  uint64_t v870;
  double v871;
  uint64_t v872;
  const char *v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  const char *v877;
  uint64_t v878;
  uint64_t v879;
  const char *v880;
  uint64_t v881;
  const char *v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  void *v886;
  const char *v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  NSObject *v893;
  const char *v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  const char *v898;
  const char *v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  char *v903;
  uint64_t v904;
  void *v906;
  __int128 v907;
  __int128 v908;
  __int128 v909;
  __int128 v910;
  int v911;
  uint64_t v912;
  __int16 v913;
  uint64_t v914;
  uint8_t buf[4];
  uint64_t v916;
  __int16 v917;
  uint64_t v918;
  _BYTE v919[128];
  _QWORD v920[62];
  _QWORD v921[64];

  v921[62] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = sub_18F4A2B04(*(_DWORD *)(v2 + 1392));
  v4 = *(double *)(v2 + 8);
  v5 = *(double *)(v2 + 280);
  v906 = (void *)objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v6, v7, v8, v9);
  v920[0] = CFSTR("trackingClientMode");
  v921[0] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v10, *(unsigned int *)(v2 + 1500), v11, v12);
  v920[1] = CFSTR("sessionDuration");
  v921[1] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v13, v14, v15, v16, *(double *)(v2 + 8));
  v920[2] = CFSTR("sessionDurationType");
  v20 = *(double *)(v2 + 8);
  if (v20 <= 60.0)
  {
    v21 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v17, 0, v18, v19);
  }
  else if (v20 <= 300.0)
  {
    v21 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v17, 1, v18, v19);
  }
  else if (v20 <= 600.0)
  {
    v21 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v17, 2, v18, v19);
  }
  else if (v20 <= 1200.0)
  {
    v21 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v17, 3, v18, v19);
  }
  else if (v20 <= 1800.0)
  {
    v21 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v17, 4, v18, v19);
  }
  else if (v20 <= 2400.0)
  {
    v21 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v17, 5, v18, v19);
  }
  else if (v20 <= 3000.0)
  {
    v21 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v17, 6, v18, v19);
  }
  else if (v20 <= 3600.0)
  {
    v21 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v17, 7, v18, v19);
  }
  else if (v20 <= 7200.0)
  {
    v21 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v17, 8, v18, v19);
  }
  else if (v20 <= 10800.0)
  {
    v21 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v17, 9, v18, v19);
  }
  else
  {
    v21 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v17, 10, v18, v19);
  }
  v25 = CFSTR("unknown");
  if (v3)
    v25 = v3;
  v921[2] = v21;
  v921[3] = v25;
  v920[3] = CFSTR("accessoryHardwareModel");
  v920[4] = CFSTR("accessoryBudLocation");
  v921[4] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v22, *(unsigned int *)(v2 + 1396), v23, v24);
  v920[5] = CFSTR("percentSessionInBTZ");
  v30 = 0.0;
  v31 = 0.0;
  if (v4 >= 0.001)
    v31 = *(double *)(v2 + 24) / v4;
  v921[5] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v26, v27, v28, v29, v31);
  v920[6] = CFSTR("percentSourceActivityStateStatic");
  if (v4 >= 0.001)
    v30 = *(double *)(v2 + 40) / v4;
  v921[6] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v32, v33, v34, v35, v30);
  v920[7] = CFSTR("percentSourceActivityStateVehicular");
  v40 = 0.0;
  v41 = 0.0;
  if (v4 >= 0.001)
    v41 = *(double *)(v2 + 56) / v4;
  v921[7] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v36, v37, v38, v39, v41);
  v920[8] = CFSTR("percentSourceActivityStatePedestrian");
  if (v4 >= 0.001)
    v40 = *(double *)(v2 + 72) / v4;
  v921[8] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v42, v43, v44, v45, v40);
  v920[9] = CFSTR("timeBeforeFirstAuxSample");
  v921[9] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v46, v47, v48, v49, *(double *)(v2 + 1408));
  v920[10] = CFSTR("percent2IMUInVehicle");
  v54 = *(double *)(v2 + 56);
  v55 = 0.0;
  v56 = 0.0;
  if (v54 >= 0.001)
    v56 = *(double *)(v2 + 88) / v54;
  v921[10] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v50, v51, v52, v53, v56);
  v920[11] = CFSTR("percent2IMUWhilePedestrian");
  v61 = *(double *)(v2 + 72);
  if (v61 >= 0.001)
    v55 = *(double *)(v2 + 104) / v61;
  v921[11] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v57, v58, v59, v60, v55);
  v920[12] = CFSTR("percent1IMU");
  v66 = 0.0;
  v67 = 0.0;
  if (v4 >= 0.001)
    v67 = *(double *)(v2 + 120) / v4;
  v921[12] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v62, v63, v64, v65, v67);
  v920[13] = CFSTR("trackingModeSwitchCount");
  v921[13] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v68, *(unsigned int *)(v2 + 1248), v69, v70);
  v920[14] = CFSTR("percentSessionInCT");
  if (v4 >= 0.001)
  {
    v75 = *(double *)(v2 + 136) / v4;
    v66 = v75;
  }
  *(float *)&v75 = v66;
  v921[14] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v71, v72, v73, v74, v75);
  v920[15] = CFSTR("percentSessionInCTIn1IMU");
  v80 = 0.0;
  LODWORD(v81) = 0;
  if (v4 >= 0.001)
  {
    v81 = *(double *)(v2 + 152) / v4;
    *(float *)&v81 = v81;
  }
  v921[15] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v76, v77, v78, v79, v81);
  v920[16] = CFSTR("percentSessionInCTInVehicle");
  if (v4 >= 0.001)
  {
    v86 = *(double *)(v2 + 168) / v4;
    v80 = v86;
  }
  *(float *)&v86 = v80;
  v921[16] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v82, v83, v84, v85, v86);
  v920[17] = CFSTR("percentSessionInCTInPedestrian");
  v91 = 0.0;
  LODWORD(v92) = 0;
  if (v4 >= 0.001)
  {
    v92 = *(double *)(v2 + 184) / v4;
    *(float *)&v92 = v92;
  }
  v921[17] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v87, v88, v89, v90, v92);
  v920[18] = CFSTR("numberOfCTEvents");
  v921[18] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v93, *(unsigned int *)(v2 + 1232), v94, v95);
  v920[19] = CFSTR("numberOfCTEventsIn1IMU");
  v921[19] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v96, *(unsigned int *)(v2 + 1236), v97, v98);
  v920[20] = CFSTR("numberOfCTEventsInVehicle");
  v921[20] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v99, *(unsigned int *)(v2 + 1240), v100, v101);
  v920[21] = CFSTR("numberOfCTEventsInPedestrian");
  v921[21] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v102, *(unsigned int *)(v2 + 1244), v103, v104);
  v920[22] = CFSTR("distractedViewingCount");
  v921[22] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v105, *(unsigned int *)(v2 + 1252), v106, v107);
  v920[23] = CFSTR("trackingReEnabledViaTouchCount");
  v921[23] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v108, *(unsigned int *)(v2 + 1256), v109, v110);
  v920[24] = CFSTR("trackingReEnabledViaSrcPickUpCount");
  v921[24] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v111, *(unsigned int *)(v2 + 1260), v112, v113);
  v920[25] = CFSTR("trackingReEnabledViaAuxStaticCount");
  v921[25] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v114, *(unsigned int *)(v2 + 1264), v115, v116);
  v920[26] = CFSTR("trackingReEnabledViaStandToSitCount");
  v921[26] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v117, *(unsigned int *)(v2 + 1268), v118, v119);
  v920[27] = CFSTR("trackingReEnabledViaJBLUnderLimitCount");
  v921[27] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v120, *(unsigned int *)(v2 + 1272), v121, v122);
  v920[28] = CFSTR("trackingReEnabledViaFaceDetectCount");
  v921[28] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v123, *(unsigned int *)(v2 + 1276), v124, v125);
  v920[29] = CFSTR("timeBeforeFirstValidPose");
  v126 = *(double *)(v2 + 1416);
  *(float *)&v126 = v126;
  v921[29] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v127, v128, v129, v130, v126);
  v920[30] = CFSTR("percentSessionSrcMoving");
  if (v4 >= 0.001)
  {
    v135 = *(double *)(v2 + 216) / v4;
    v91 = v135;
  }
  *(float *)&v135 = v91;
  v921[30] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v131, v132, v133, v134, v135);
  v920[31] = CFSTR("percentSessionAuxMoving");
  v140 = 0.0;
  LODWORD(v141) = 0;
  if (v4 >= 0.001)
  {
    v141 = *(double *)(v2 + 200) / v4;
    *(float *)&v141 = v141;
  }
  v921[31] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v136, v137, v138, v139, v141);
  v920[32] = CFSTR("percentSessionAuxAndSrcMoving");
  if (v4 >= 0.001)
  {
    v146 = *(double *)(v2 + 232) / v4;
    v140 = v146;
  }
  *(float *)&v146 = v140;
  v921[32] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v142, v143, v144, v145, v146);
  v920[33] = CFSTR("percentSessionAuxAndSrcQuiescent");
  LODWORD(v151) = 0;
  if (v4 >= 0.001)
  {
    v151 = *(double *)(v2 + 248) / v4;
    *(float *)&v151 = v151;
  }
  v921[33] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v147, v148, v149, v150, v151);
  v920[34] = CFSTR("percentFeedAuxSuccess");
  v156 = *(_DWORD *)(v2 + 712);
  v157 = 0.0;
  v158 = 0.0;
  if (v156 >= 1)
    v158 = *(double *)(v2 + 704) / (double)v156;
  *(float *)&v158 = v158;
  v921[34] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v152, v153, v154, v155, v158);
  v920[35] = CFSTR("percentRecentPoseAvailable");
  v164 = *(_DWORD *)(v2 + 744);
  if (v164 >= 1)
  {
    v163 = *(double *)(v2 + 736);
    v157 = v163 / (double)v164;
  }
  *(float *)&v163 = v157;
  v921[35] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v159, v160, v161, v162, v163);
  v920[36] = CFSTR("auxGyroBiasConvergenceDuration");
  v165 = *(double *)(v2 + 264);
  *(float *)&v165 = v165;
  v921[36] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v166, v167, v168, v169, v165);
  v920[37] = CFSTR("JBLOverLimitCount");
  v921[37] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v170, *(unsigned int *)(v2 + 1292), v171, v172);
  v920[38] = CFSTR("percentSessionSteadyStatePedestrian");
  v177 = 0.0;
  LODWORD(v178) = 0;
  if (v4 >= 0.001)
  {
    v178 = *(double *)(v2 + 280) / v4;
    *(float *)&v178 = v178;
  }
  v921[38] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v173, v174, v175, v176, v178);
  v920[39] = CFSTR("trackingDisabledViaWalkingCount");
  v921[39] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v179, *(unsigned int *)(v2 + 1296), v180, v181);
  v920[40] = CFSTR("trackingDisabledViaSitToStandWalkingCount");
  v921[40] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v182, *(unsigned int *)(v2 + 1300), v183, v184);
  v920[41] = CFSTR("trackingDisabledViaJBLCount");
  v921[41] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v185, *(unsigned int *)(v2 + 1304), v186, v187);
  v920[42] = CFSTR("keepBoresightCenteredDueToDynamicsCount");
  v921[42] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v188, *(unsigned int *)(v2 + 1308), v189, v190);
  v920[43] = CFSTR("percentSessionKeepBoresightCentered");
  if (v4 >= 0.001)
  {
    v195 = *(double *)(v2 + 296) / v4;
    v177 = v195;
  }
  *(float *)&v195 = v177;
  v921[43] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v191, v192, v193, v194, v195);
  v920[44] = CFSTR("hasDistractedViewing");
  v921[44] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v196, *(unsigned __int8 *)(a1 + 56), v197, v198);
  v920[45] = CFSTR("hasJBLOverLimit");
  v921[45] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v199, *(unsigned __int8 *)(a1 + 57), v200, v201);
  v920[46] = CFSTR("sitCount");
  v921[46] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v202, *(unsigned int *)(v2 + 1312), v203, v204);
  v920[47] = CFSTR("standCount");
  v921[47] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v205, *(unsigned int *)(v2 + 1316), v206, v207);
  v920[48] = CFSTR("percentSessionDisabledDueToWalking");
  v212 = 0.0;
  LODWORD(v213) = 0;
  if (v4 >= 0.001)
  {
    v213 = *(double *)(v2 + 312) / v4;
    *(float *)&v213 = v213;
  }
  v921[48] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v208, v209, v210, v211, v213);
  v920[49] = CFSTR("percentSessionDisabledDueToJBL");
  if (v4 >= 0.001)
  {
    v218 = *(double *)(v2 + 328) / v4;
    v212 = v218;
  }
  v219 = v5;
  *(float *)&v218 = v212;
  v921[49] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v214, v215, v216, v217, v218);
  v920[50] = CFSTR("percentSessionHeadtracked");
  v224 = 0.0;
  LODWORD(v225) = 0;
  if (v4 >= 0.001)
  {
    v225 = *(double *)(v2 + 344) / v4;
    *(float *)&v225 = v225;
  }
  v921[50] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v220, v221, v222, v223, v225);
  v920[51] = CFSTR("sessionEnvironmentType");
  v921[51] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v226, *(unsigned int *)(v2 + 1504), v227, v228);
  v920[52] = CFSTR("percentSteadyStatePedestrianCTBodyTurn");
  if (v219 >= 0.001)
  {
    v233 = *(double *)(v2 + 360) / v219;
    v224 = v233;
  }
  *(float *)&v233 = v224;
  v921[52] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v229, v230, v231, v232, v233);
  v920[53] = CFSTR("percentSteadyStatePedestrianHeadTurn");
  LODWORD(v238) = 0;
  if (v219 >= 0.001)
  {
    v238 = *(double *)(v2 + 376) / v219;
    *(float *)&v238 = v238;
  }
  v921[53] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v234, v235, v236, v237, v238);
  v920[54] = CFSTR("maxJBLDisablesPerMinute");
  v242 = *(_DWORD *)(v2 + 1376);
  v243 = *(_DWORD *)(v2 + 1388);
  if (v242 <= v243)
    v244 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v239, v243, v240, v241);
  else
    v244 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v239, v242, v240, v241);
  v921[54] = v244;
  v920[55] = CFSTR("bucketedMaxJBLDisablesPerMinute");
  v248 = *(_DWORD *)(v2 + 1388);
  if (*(_DWORD *)(v2 + 1376) > v248)
    v248 = *(_DWORD *)(v2 + 1376);
  v249 = *(double **)(v2 + 1512);
  v250 = *(double **)(v2 + 1520);
  if (v249 == v250)
  {
    v252 = *(double **)(v2 + 1512);
  }
  else
  {
    v251 = (double)v248;
    v252 = *(double **)(v2 + 1512);
    while (*v252 <= v251)
    {
      if (++v252 == v250)
      {
        v252 = *(double **)(v2 + 1520);
        break;
      }
    }
  }
  v921[55] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v245, (unint64_t)((char *)v252 - (char *)v249) >> 3, v246, v247);
  v920[56] = CFSTR("cameraOnDuration");
  v253 = *(double *)(v2 + 392);
  *(float *)&v253 = v253;
  v921[56] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v254, v255, v256, v257, v253);
  v920[57] = CFSTR("percentageOfSessionCameraOn");
  v262 = 0.0;
  LODWORD(v263) = 0;
  if (v4 >= 0.001)
  {
    v263 = *(double *)(v2 + 392) / v4;
    *(float *)&v263 = v263;
  }
  v921[57] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v258, v259, v260, v261, v263);
  v920[58] = CFSTR("numberOfCameraRequest");
  v921[58] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v264, *(unsigned int *)(v2 + 1320), v265, v266);
  v920[59] = CFSTR("percentageOfSessionInLockScreen");
  if (v4 >= 0.001)
  {
    v271 = *(double *)(v2 + 408) / v4;
    v262 = v271;
  }
  *(float *)&v271 = v262;
  v921[59] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v267, v268, v269, v270, v271);
  v920[60] = CFSTR("percentageOfSessionWithExternalScreen");
  LODWORD(v276) = 0;
  if (v4 >= 0.001)
  {
    v276 = *(double *)(v2 + 424) / v4;
    *(float *)&v276 = v276;
  }
  v921[60] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v272, v273, v274, v275, v276);
  v920[61] = CFSTR("numberOfExternalScreens");
  v921[61] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v277, *(unsigned int *)(v2 + 1324), v278, v279);
  v281 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v280, (uint64_t)v921, (uint64_t)v920, 62);
  objc_msgSend_setDictionary_(v906, v282, v281, v283, v284);
  v289 = *(double *)(v2 + 1424);
  if (v289 > 0.0)
  {
    *(float *)&v289 = v289;
    v290 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v289);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v291, v290, (uint64_t)CFSTR("timeToFirstFaceposeInSession"), v292);
  }
  if (*(double *)(v2 + 432) != 1.79769313e308)
  {
    v293 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, *(double *)(v2 + 440));
    objc_msgSend_setObject_forKeyedSubscript_(v906, v294, v293, (uint64_t)CFSTR("maxGapBetweenAuxSamples"), v295);
    v300 = *(_DWORD *)(v2 + 456);
    if (v300 < 1)
      v301 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v296, v297, v298, v299, 0.0);
    else
      v301 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v296, v297, v298, v299, *(double *)(v2 + 448) / (double)v300);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v302, v301, (uint64_t)CFSTR("avgGapBetweenAuxSamples"), v303);
  }
  if (*(double *)(v2 + 464) != 1.79769313e308)
  {
    v304 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, *(double *)(v2 + 472));
    objc_msgSend_setObject_forKeyedSubscript_(v906, v305, v304, (uint64_t)CFSTR("maxGapBetweenBTZ"), v306);
    v311 = *(_DWORD *)(v2 + 488);
    if (v311 < 1)
      v312 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v307, v308, v309, v310, 0.0);
    else
      v312 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v307, v308, v309, v310, *(double *)(v2 + 480) / (double)v311);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v313, v312, (uint64_t)CFSTR("avgGapBetweenBTZ"), v314);
  }
  v315 = *(double *)(v2 + 496);
  if (v315 != 1.79769313e308)
  {
    *(float *)&v315 = v315;
    v316 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v315);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v317, v316, (uint64_t)CFSTR("minGapBetweenCTSeconds"), v318);
    v323 = *(_DWORD *)(v2 + 520);
    if (v323 < 1)
      v324 = 0.0;
    else
      v324 = *(double *)(v2 + 512) / (double)v323;
    *(float *)&v324 = v324;
    v325 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v319, v320, v321, v322, v324);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v326, v325, (uint64_t)CFSTR("avgGapBetweenCTSeconds"), v327);
    v328 = *(double *)(v2 + 504);
    *(float *)&v328 = v328;
    v333 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v329, v330, v331, v332, v328);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v334, v333, (uint64_t)CFSTR("maxGapBetweenCTSeconds"), v335);
  }
  v336 = *(double *)(v2 + 528);
  if (v336 != 1.79769313e308)
  {
    v337 = v336 * 57.2957802;
    *(float *)&v337 = v337;
    v338 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v337);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v339, v338, (uint64_t)CFSTR("minCTBTZCorrectionAngleDeg"), v340);
    v345 = *(_DWORD *)(v2 + 552);
    if (v345 < 1)
      v346 = 0.0;
    else
      v346 = *(double *)(v2 + 544) / (double)v345;
    v347 = v346 * 57.2957802;
    *(float *)&v347 = v347;
    v348 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v341, v342, v343, v344, v347);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v349, v348, (uint64_t)CFSTR("avgCTBTZCorrectionAngleDeg"), v350);
    v351 = *(double *)(v2 + 536) * 57.2957802;
    *(float *)&v351 = v351;
    v356 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v352, v353, v354, v355, v351);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v357, v356, (uint64_t)CFSTR("maxCTBTZCorrectionAngleDeg"), v358);
  }
  v359 = *(double *)(v2 + 560);
  if (v359 != 1.79769313e308)
  {
    v360 = v359 * 57.2957802;
    *(float *)&v360 = v360;
    v361 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v360);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v362, v361, (uint64_t)CFSTR("minCTSrcYawRateDps"), v363);
    v368 = *(_DWORD *)(v2 + 584);
    if (v368 < 1)
      v369 = 0.0;
    else
      v369 = *(double *)(v2 + 576) / (double)v368;
    v370 = v369 * 57.2957802;
    *(float *)&v370 = v370;
    v371 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v364, v365, v366, v367, v370);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v372, v371, (uint64_t)CFSTR("avgCTSrcYawRateDps"), v373);
    v374 = *(double *)(v2 + 568) * 57.2957802;
    *(float *)&v374 = v374;
    v379 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v375, v376, v377, v378, v374);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v380, v379, (uint64_t)CFSTR("maxCTSrcYawRateDps"), v381);
  }
  v382 = *(double *)(v2 + 592);
  if (v382 != 1.79769313e308)
  {
    v383 = v382 * 57.2957802;
    *(float *)&v383 = v383;
    v384 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v383);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v385, v384, (uint64_t)CFSTR("minCTAuxYawRateDps"), v386);
    v391 = *(_DWORD *)(v2 + 616);
    if (v391 < 1)
      v392 = 0.0;
    else
      v392 = *(double *)(v2 + 608) / (double)v391;
    v393 = v392 * 57.2957802;
    *(float *)&v393 = v393;
    v394 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v387, v388, v389, v390, v393);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v395, v394, (uint64_t)CFSTR("avgCTAuxYawRateDps"), v396);
    v397 = *(double *)(v2 + 600) * 57.2957802;
    *(float *)&v397 = v397;
    v402 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v398, v399, v400, v401, v397);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v403, v402, (uint64_t)CFSTR("maxCTAuxYawRateDps"), v404);
  }
  if (*(double *)(v2 + 624) != 1.79769313e308)
  {
    v405 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v406, v405, (uint64_t)CFSTR("minDistractedViewingDuration"), v407);
    v412 = *(_DWORD *)(v2 + 648);
    if (v412 < 1)
      v413 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v408, v409, v410, v411, 0.0);
    else
      v413 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v408, v409, v410, v411, *(double *)(v2 + 640) / (double)v412);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v414, v413, (uint64_t)CFSTR("avgDistractedViewingDuration"), v415);
    v420 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v416, v417, v418, v419, *(double *)(v2 + 632));
    objc_msgSend_setObject_forKeyedSubscript_(v906, v421, v420, (uint64_t)CFSTR("maxDistractedViewingDuration"), v422);
  }
  v423 = *(double *)(v2 + 656);
  if (v423 != 1.79769313e308)
  {
    v424 = v423 * 57.2957802;
    *(float *)&v424 = v424;
    v425 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v424);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v426, v425, (uint64_t)CFSTR("minBTZCorrectionAngleDeg"), v427);
    v432 = *(_DWORD *)(v2 + 680);
    if (v432 < 1)
      v433 = 0.0;
    else
      v433 = *(double *)(v2 + 672) / (double)v432;
    v434 = v433 * 57.2957802;
    *(float *)&v434 = v434;
    v435 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v428, v429, v430, v431, v434);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v436, v435, (uint64_t)CFSTR("avgBTZCorrectionAngleDeg"), v437);
    v438 = *(double *)(v2 + 664) * 57.2957802;
    *(float *)&v438 = v438;
    v443 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v439, v440, v441, v442, v438);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v444, v443, (uint64_t)CFSTR("maxBTZCorrectionAngleDeg"), v445);
  }
  v446 = *(double *)(v2 + 752);
  if (v446 != 1.79769313e308)
  {
    *(float *)&v446 = v446;
    v447 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v446);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v448, v447, (uint64_t)CFSTR("minAuxMotionToPoseLatency"), v449);
    v454 = *(_DWORD *)(v2 + 776);
    if (v454 < 1)
      v455 = 0.0;
    else
      v455 = *(double *)(v2 + 768) / (double)v454;
    *(float *)&v455 = v455;
    v456 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v450, v451, v452, v453, v455);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v457, v456, (uint64_t)CFSTR("avgAuxMotionToPoseLatency"), v458);
    v459 = *(double *)(v2 + 760);
    *(float *)&v459 = v459;
    v464 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v460, v461, v462, v463, v459);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v465, v464, (uint64_t)CFSTR("maxAuxMotionToPoseLatency"), v466);
  }
  v467 = *(double *)(v2 + 784);
  if (v467 != 1.79769313e308)
  {
    *(float *)&v467 = v467;
    v468 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v467);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v469, v468, (uint64_t)CFSTR("minJBL"), v470);
    v471 = *(double *)(v2 + 792);
    *(float *)&v471 = v471;
    v476 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v472, v473, v474, v475, v471);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v477, v476, (uint64_t)CFSTR("maxJBL"), v478);
    LOWORD(v479) = *(_WORD *)(v2 + 1492);
    v480 = *(float *)(v2 + 1496) + (double)v479 * *(double *)(*(_QWORD *)(v2 + 1464) + 16 * *(int *)(v2 + 1488) + 8);
    *(float *)&v480 = v480;
    *(_DWORD *)(v2 + 1496) = LODWORD(v480);
    *(float *)&v480 = *(float *)&v480 / v4;
    v485 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v481, v482, v483, v484, v480);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v486, v485, (uint64_t)CFSTR("avgJBL"), v487);
  }
  v488 = *(double *)(v2 + 816);
  if (v488 != 1.79769313e308)
  {
    *(float *)&v488 = v488;
    v489 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v488);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v490, v489, (uint64_t)CFSTR("timeBetweenStandAndWalkingEventSecondsMin"), v491);
    v492 = *(double *)(v2 + 824);
    *(float *)&v492 = v492;
    v497 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v493, v494, v495, v496, v492);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v498, v497, (uint64_t)CFSTR("timeBetweenStandAndWalkingEventSecondsMax"), v499);
    v504 = *(_DWORD *)(v2 + 840);
    if (v504 < 1)
      v505 = 0.0;
    else
      v505 = *(double *)(v2 + 832) / (double)v504;
    *(float *)&v505 = v505;
    v506 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v500, v501, v502, v503, v505);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v507, v506, (uint64_t)CFSTR("timeBetweenStandAndWalkingEventSecondsAverage"), v508);
  }
  v509 = *(double *)(v2 + 848);
  if (v509 != 1.79769313e308)
  {
    *(float *)&v509 = v509;
    v510 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v509);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v511, v510, (uint64_t)CFSTR("timeBetweenSitAndWalkingEventSecondsMin"), v512);
    v513 = *(double *)(v2 + 856);
    *(float *)&v513 = v513;
    v518 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v514, v515, v516, v517, v513);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v519, v518, (uint64_t)CFSTR("timeBetweenSitAndWalkingEventSecondsMax"), v520);
    v525 = *(_DWORD *)(v2 + 872);
    if (v525 < 1)
      v526 = 0.0;
    else
      v526 = *(double *)(v2 + 864) / (double)v525;
    *(float *)&v526 = v526;
    v527 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v521, v522, v523, v524, v526);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v528, v527, (uint64_t)CFSTR("timeBetweenSitAndWalkingEventSecondsAverage"), v529);
  }
  v530 = *(double *)(v2 + 880);
  if (v530 != 1.79769313e308)
  {
    *(float *)&v530 = v530;
    v531 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v530);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v532, v531, (uint64_t)CFSTR("timeBetweenStandingAndSittingSecondsMin"), v533);
    v534 = *(double *)(v2 + 888);
    *(float *)&v534 = v534;
    v539 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v535, v536, v537, v538, v534);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v540, v539, (uint64_t)CFSTR("timeBetweenStandingAndSittingSecondsMax"), v541);
    v546 = *(_DWORD *)(v2 + 904);
    if (v546 < 1)
      v547 = 0.0;
    else
      v547 = *(double *)(v2 + 896) / (double)v546;
    *(float *)&v547 = v547;
    v548 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v542, v543, v544, v545, v547);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v549, v548, (uint64_t)CFSTR("timeBetweenStandingAndSittingSecondsAverage"), v550);
  }
  v551 = *(double *)(v2 + 912);
  if (v551 != 1.79769313e308)
  {
    *(float *)&v551 = v551;
    v552 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v551);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v553, v552, (uint64_t)CFSTR("timeBetweenSittingAndStandingSecondsMin"), v554);
    v555 = *(double *)(v2 + 920);
    *(float *)&v555 = v555;
    v560 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v556, v557, v558, v559, v555);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v561, v560, (uint64_t)CFSTR("timeBetweenSittingAndStandingSecondsMax"), v562);
    v567 = *(_DWORD *)(v2 + 936);
    if (v567 < 1)
      v568 = 0.0;
    else
      v568 = *(double *)(v2 + 928) / (double)v567;
    *(float *)&v568 = v568;
    v569 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v563, v564, v565, v566, v568);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v570, v569, (uint64_t)CFSTR("timeBetweenSittingAndStandingSecondsAverage"), v571);
  }
  v572 = *(double *)(v2 + 944);
  if (v572 != 1.79769313e308)
  {
    *(float *)&v572 = v572;
    v573 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v572);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v574, v573, (uint64_t)CFSTR("timeBetweenStandAndDisableSecondsMin"), v575);
    v576 = *(double *)(v2 + 952);
    *(float *)&v576 = v576;
    v581 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v577, v578, v579, v580, v576);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v582, v581, (uint64_t)CFSTR("timeBetweenStandAndDisableSecondsMax"), v583);
    v588 = *(_DWORD *)(v2 + 968);
    if (v588 < 1)
      v589 = 0.0;
    else
      v589 = *(double *)(v2 + 960) / (double)v588;
    *(float *)&v589 = v589;
    v590 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v584, v585, v586, v587, v589);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v591, v590, (uint64_t)CFSTR("timeBetweenStandAndDisableSecondsAverage"), v592);
  }
  v593 = *(double *)(v2 + 976);
  if (v593 != 1.79769313e308)
  {
    *(float *)&v593 = v593;
    v594 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v593);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v595, v594, (uint64_t)CFSTR("timeBetweenEnableAndDisableTrackingMin"), v596);
    v597 = *(double *)(v2 + 984);
    *(float *)&v597 = v597;
    v602 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v598, v599, v600, v601, v597);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v603, v602, (uint64_t)CFSTR("timeBetweenEnableAndDisableTrackingMax"), v604);
    v609 = *(_DWORD *)(v2 + 1000);
    if (v609 < 1)
      v610 = 0.0;
    else
      v610 = *(double *)(v2 + 992) / (double)v609;
    *(float *)&v610 = v610;
    v611 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v605, v606, v607, v608, v610);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v612, v611, (uint64_t)CFSTR("timeBetweenEnableAndDisableTrackingAverage"), v613);
  }
  v614 = *(double *)(v2 + 1008);
  if (v614 != 1.79769313e308)
  {
    *(float *)&v614 = v614;
    v615 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v614);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v616, v615, (uint64_t)CFSTR("minTimeBetweenCameraRequest"), v617);
    v618 = *(double *)(v2 + 1016);
    *(float *)&v618 = v618;
    v623 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v619, v620, v621, v622, v618);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v624, v623, (uint64_t)CFSTR("maxTimeBetweenCameraRequest"), v625);
    v630 = *(_DWORD *)(v2 + 1032);
    if (v630 < 1)
      v631 = 0.0;
    else
      v631 = *(double *)(v2 + 1024) / (double)v630;
    *(float *)&v631 = v631;
    v632 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v626, v627, v628, v629, v631);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v633, v632, (uint64_t)CFSTR("avgTimeBetweenCameraRequest"), v634);
  }
  v635 = *(double *)(v2 + 1040);
  if (v635 != 1.79769313e308)
  {
    *(float *)&v635 = v635;
    v636 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v635);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v637, v636, (uint64_t)CFSTR("minLidAngle"), v638);
    v639 = *(double *)(v2 + 1048);
    *(float *)&v639 = v639;
    v644 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v640, v641, v642, v643, v639);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v645, v644, (uint64_t)CFSTR("maxLidAngle"), v646);
    v651 = *(_DWORD *)(v2 + 1064);
    if (v651 < 1)
      v652 = 0.0;
    else
      v652 = *(double *)(v2 + 1056) / (double)v651;
    *(float *)&v652 = v652;
    v653 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v647, v648, v649, v650, v652);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v654, v653, (uint64_t)CFSTR("avgLidAngle"), v655);
  }
  v656 = *(double *)(v2 + 1072);
  if (v656 != 1.79769313e308)
  {
    *(float *)&v656 = v656;
    v657 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v656);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v658, v657, (uint64_t)CFSTR("minDurationBetweenUserMovementForCameraController"), v659);
    v660 = *(double *)(v2 + 1080);
    *(float *)&v660 = v660;
    v665 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v661, v662, v663, v664, v660);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v666, v665, (uint64_t)CFSTR("maxDurationBetweenUserMovementForCameraController"), v667);
    v673 = *(_DWORD *)(v2 + 1096);
    if (v673 < 1)
    {
      LODWORD(v672) = 0;
    }
    else
    {
      v672 = *(double *)(v2 + 1088) / (double)v673;
      *(float *)&v672 = v672;
    }
    v674 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v668, v669, v670, v671, v672);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v675, v674, (uint64_t)CFSTR("avgDurationBetweenUserMovementForCameraController"), v676);
  }
  v677 = *(double *)(v2 + 1104);
  if (v677 != 1.79769313e308)
  {
    *(float *)&v677 = v677;
    v678 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v677);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v679, v678, (uint64_t)CFSTR("minUserMotionDurationForCameraController"), v680);
    v681 = *(double *)(v2 + 1112);
    *(float *)&v681 = v681;
    v686 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v682, v683, v684, v685, v681);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v687, v686, (uint64_t)CFSTR("maxUserMotionDurationForCameraController"), v688);
    v694 = *(_DWORD *)(v2 + 1128);
    if (v694 < 1)
    {
      LODWORD(v693) = 0;
    }
    else
    {
      v693 = *(double *)(v2 + 1120) / (double)v694;
      *(float *)&v693 = v693;
    }
    v695 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v689, v690, v691, v692, v693);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v696, v695, (uint64_t)CFSTR("avgUserMotionDurationForCameraController"), v697);
  }
  v698 = *(double *)(v2 + 1136);
  if (v698 != 1.79769313e308)
  {
    *(float *)&v698 = v698;
    v699 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v698);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v700, v699, (uint64_t)CFSTR("minUserStaticPoseAfterDisturbanceDurationForCameraController"), v701);
    v702 = *(double *)(v2 + 1144);
    *(float *)&v702 = v702;
    v707 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v703, v704, v705, v706, v702);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v708, v707, (uint64_t)CFSTR("maxUserStaticPoseAfterDisturbanceDurationForCameraController"), v709);
    v715 = *(_DWORD *)(v2 + 1160);
    if (v715 < 1)
    {
      LODWORD(v714) = 0;
    }
    else
    {
      v714 = *(double *)(v2 + 1152) / (double)v715;
      *(float *)&v714 = v714;
    }
    v716 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v710, v711, v712, v713, v714);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v717, v716, (uint64_t)CFSTR("avgUserStaticPoseAfterDisturbanceDurationForCameraController"), v718);
  }
  v719 = *(double *)(v2 + 1168);
  if (v719 != 1.79769313e308)
  {
    *(float *)&v719 = v719;
    v720 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v719);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v721, v720, (uint64_t)CFSTR("minTimeToFirstFaceposeInCameraRequest"), v722);
    v723 = *(double *)(v2 + 1176);
    *(float *)&v723 = v723;
    v728 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v724, v725, v726, v727, v723);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v729, v728, (uint64_t)CFSTR("maxTimeToFirstFaceposeInCameraRequest"), v730);
    v736 = *(_DWORD *)(v2 + 1192);
    if (v736 < 1)
    {
      LODWORD(v735) = 0;
    }
    else
    {
      v735 = *(double *)(v2 + 1184) / (double)v736;
      *(float *)&v735 = v735;
    }
    v737 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v731, v732, v733, v734, v735);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v738, v737, (uint64_t)CFSTR("avgTimeToFirstFaceposeInCameraRequest"), v739);
  }
  v740.i64[0] = *(_QWORD *)(v2 + 1200);
  if (*(double *)v740.i64 != 1.79769313e308)
  {
    v741 = *(double *)(v2 + 1208);
    *(float *)&v741 = v741;
    v742 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v741);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v743, v742, (uint64_t)CFSTR("maxFaceposeLatencySec"), v744);
    v750 = *(_DWORD *)(v2 + 1224);
    if (v750 < 1)
    {
      LODWORD(v749) = 0;
    }
    else
    {
      v749 = *(double *)(v2 + 1216) / (double)v750;
      *(float *)&v749 = v749;
    }
    v751 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v745, v746, v747, v748, v749);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v752, v751, (uint64_t)CFSTR("avgFaceposeLatencySec"), v753);
  }
  v754 = *(_DWORD *)(v2 + 1328);
  if (v754)
  {
    v755 = *(_DWORD *)(v2 + 1336) + *(_DWORD *)(v2 + 1332);
    v756 = v754 >= v755;
    v757 = v754 - v755;
    if (v756)
    {
      *(float *)v740.i32 = (float)v757 / (float)v754;
      v758 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, *(double *)v740.i64);
      objc_msgSend_setObject_forKeyedSubscript_(v906, v759, v758, (uint64_t)CFSTR("percentageOfFaceposeAnchorValid"), v760);
      *(float *)&v761 = (float)*(unsigned int *)(v2 + 1332) / (float)*(unsigned int *)(v2 + 1328);
      v766 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v762, v763, v764, v765, v761);
      objc_msgSend_setObject_forKeyedSubscript_(v906, v767, v766, (uint64_t)CFSTR("percentageOfFaceposeAnchorInvalidDueToFaceposeFailure"), v768);
      *(float *)&v769 = (float)*(unsigned int *)(v2 + 1336) / (float)*(unsigned int *)(v2 + 1328);
      v774 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v770, v771, v772, v773, v769);
      objc_msgSend_setObject_forKeyedSubscript_(v906, v775, v774, (uint64_t)CFSTR("percentageOfFaceposeAnchorInvalidDueToConfidence"), v776);
    }
  }
  v777 = *(_DWORD *)(v2 + 1320);
  if (v777)
  {
    v740 = *(int32x4_t *)(v2 + 1340);
    if (vaddvq_s32(v740) + *(_DWORD *)(v2 + 1356) <= v777)
    {
      *(float *)v740.i32 = (float)v740.u32[0] / (float)v777;
      v778 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, *(double *)v740.i64);
      objc_msgSend_setObject_forKeyedSubscript_(v906, v779, v778, (uint64_t)CFSTR("percentageOfCameraRequestDueToMaxDutyCycleStatic"), v780);
      *(float *)&v781 = (float)*(unsigned int *)(v2 + 1344) / (float)*(unsigned int *)(v2 + 1320);
      v786 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v782, v783, v784, v785, v781);
      objc_msgSend_setObject_forKeyedSubscript_(v906, v787, v786, (uint64_t)CFSTR("percentageOfCameraRequestDueToMaxDutyCycleMoving"), v788);
      *(float *)&v789 = (float)*(unsigned int *)(v2 + 1348) / (float)*(unsigned int *)(v2 + 1320);
      v794 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v790, v791, v792, v793, v789);
      objc_msgSend_setObject_forKeyedSubscript_(v906, v795, v794, (uint64_t)CFSTR("percentageOfCameraRequestDueToAuxAndSrcMotion"), v796);
      *(float *)&v797 = (float)*(unsigned int *)(v2 + 1352) / (float)*(unsigned int *)(v2 + 1320);
      v802 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v798, v799, v800, v801, v797);
      objc_msgSend_setObject_forKeyedSubscript_(v906, v803, v802, (uint64_t)CFSTR("percentageOfCameraRequestDueToAuxMotion"), v804);
      *(float *)&v805 = (float)*(unsigned int *)(v2 + 1356) / (float)*(unsigned int *)(v2 + 1320);
      v810 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v806, v807, v808, v809, v805);
      objc_msgSend_setObject_forKeyedSubscript_(v906, v811, v810, (uint64_t)CFSTR("percentageOfCameraRequestDueToSrcMotion"), v812);
    }
  }
  v813 = *(double *)(v2 + 8);
  v740.i32[0] = *(_DWORD *)(v2 + 1280);
  v814 = (double)v740.u64[0] / *(double *)(a1 + 40);
  *(float *)&v814 = v814;
  v816 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v285, v286, v287, v288, v814);
  if (v813 <= 60.0)
    v818 = CFSTR("percentageOfSrcSamplesThatAreVeryEarly_shortSession");
  else
    v818 = CFSTR("percentageOfSrcSamplesThatAreVeryEarly");
  if (v813 <= 60.0)
    v819 = CFSTR("percentageOfSrcSamplesThatAreVeryLate_shortSession");
  else
    v819 = CFSTR("percentageOfSrcSamplesThatAreVeryLate");
  if (v813 <= 60.0)
    v820 = CFSTR("percentageOfAuxSamplesWithLargeGaps_shortSession");
  else
    v820 = CFSTR("percentageOfAuxSamplesWithLargeGaps");
  if (v813 <= 60.0)
    v821 = CFSTR("percentageOfAuxSamplesFailedToFindSource_shortSession");
  else
    v821 = CFSTR("percentageOfAuxSamplesFailedToFindSource");
  if (v813 <= 60.0)
    v822 = CFSTR("percentageOfAuxSamplesIndexUnchanged_shortSession");
  else
    v822 = CFSTR("percentageOfAuxSamplesIndexUnchanged");
  if (v813 <= 60.0)
    v823 = CFSTR("percentageOfAuxSamplesSourceDataMissing_shortSession");
  else
    v823 = CFSTR("percentageOfAuxSamplesSourceDataMissing");
  objc_msgSend_setObject_forKeyedSubscript_(v906, v815, v816, (uint64_t)v818, v817);
  LODWORD(v824) = *(_DWORD *)(v2 + 1284);
  v825 = (double)v824 / *(double *)(a1 + 40);
  *(float *)&v825 = v825;
  v830 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v826, v827, v828, v829, v825);
  objc_msgSend_setObject_forKeyedSubscript_(v906, v831, v830, (uint64_t)v819, v832);
  v833 = (double)*(unint64_t *)(v2 + 1432) / *(double *)(a1 + 48);
  *(float *)&v833 = v833;
  v838 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v834, v835, v836, v837, v833);
  objc_msgSend_setObject_forKeyedSubscript_(v906, v839, v838, (uint64_t)v820, v840);
  v841 = (double)*(unint64_t *)(v2 + 1440) / *(double *)(a1 + 48);
  *(float *)&v841 = v841;
  v846 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v842, v843, v844, v845, v841);
  objc_msgSend_setObject_forKeyedSubscript_(v906, v847, v846, (uint64_t)v821, v848);
  v849 = (double)*(unint64_t *)(v2 + 1448) / *(double *)(a1 + 48);
  *(float *)&v849 = v849;
  v854 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v850, v851, v852, v853, v849);
  objc_msgSend_setObject_forKeyedSubscript_(v906, v855, v854, (uint64_t)v822, v856);
  v857 = (double)*(unint64_t *)(v2 + 1456) / *(double *)(a1 + 48);
  *(float *)&v857 = v857;
  v862 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v858, v859, v860, v861, v857);
  objc_msgSend_setObject_forKeyedSubscript_(v906, v863, v862, (uint64_t)v823, v864);
  v870 = 0;
  v871 = v4;
  do
  {
    LODWORD(v869) = 0;
    if (v4 >= 0.001)
    {
      v869 = *(double *)(*(_QWORD *)(v2 + 1464) + 4 * v870 + 8) / v871;
      *(float *)&v869 = v869;
    }
    v872 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v865, v866, v867, v868, v869);
    v876 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v873, (uint64_t)CFSTR("percentSessionJBL%d"), v874, v875, (unsigned __int16)aPdx[v870]);
    objc_msgSend_setObject_forKeyedSubscript_(v906, v877, v872, v876, v878);
    ++v870;
  }
  while (v870 != 6);
  LODWORD(v869) = 0;
  if (v4 >= 0.001)
  {
    v869 = *(double *)(*(_QWORD *)(v2 + 1464) + 104) / v871;
    *(float *)&v869 = v869;
  }
  v879 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v865, v866, v867, v868, v869);
  objc_msgSend_setObject_forKeyedSubscript_(v906, v880, v879, (uint64_t)CFSTR("percentSessionJBLOverLimit"), v881);
  v909 = 0u;
  v910 = 0u;
  v907 = 0u;
  v908 = 0u;
  v886 = (void *)objc_msgSend_allKeys(v906, v882, v883, v884, v885);
  v888 = objc_msgSend_countByEnumeratingWithState_objects_count_(v886, v887, (uint64_t)&v907, (uint64_t)v919, 16);
  if (v888)
  {
    v889 = v888;
    v890 = *(_QWORD *)v908;
    do
    {
      v891 = 0;
      do
      {
        if (*(_QWORD *)v908 != v890)
          objc_enumerationMutation(v886);
        v892 = *(_QWORD *)(*((_QWORD *)&v907 + 1) + 8 * v891);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2952D48);
        v893 = qword_1EE16D820;
        if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEFAULT))
        {
          v897 = objc_msgSend_objectForKey_(v906, v894, v892, v895, v896);
          *(_DWORD *)buf = 138478083;
          v916 = v892;
          v917 = 2113;
          v918 = v897;
          _os_log_impl(&dword_18F1DC000, v893, OS_LOG_TYPE_DEFAULT, "[CMMediaSessionAnalyticsTracker] %{private}@ -> %{private}@", buf, 0x16u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2952D48);
          v902 = objc_msgSend_objectForKey_(v906, v899, v892, v900, v901);
          v911 = 138478083;
          v912 = v892;
          v913 = 2113;
          v914 = v902;
          v903 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "void CMMediaSessionAnalyticsTracker::send()_block_invoke", "CoreLocation: %s\n", v903);
          if (v903 != (char *)buf)
            free(v903);
        }
        ++v891;
      }
      while (v889 != v891);
      v904 = objc_msgSend_countByEnumeratingWithState_objects_count_(v886, v898, (uint64_t)&v907, (uint64_t)v919, 16);
      v889 = v904;
    }
    while (v904);
  }
  return v906;
}

os_log_t sub_18F34DE38()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1EE16D820 = (uint64_t)result;
  return result;
}

void sub_18F34DF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x194001438](v15, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_18F34DF7C(uint64_t a1, CLConnectionMessage **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  NSSet *v9;
  void *DictionaryOfClasses;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  char *v21;
  uint8_t buf[4];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v9 = (NSSet *)objc_msgSend_setWithObjects_(v3, v6, v4, v7, v8, v5, 0);
  if (*a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v9)) != 0
    && (v14 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v11, (uint64_t)CFSTR("CMErrorMessage"), v12, v13)) != 0)
  {
    v19 = objc_msgSend_intValue(v14, v15, v16, v17, v18);
  }
  else
  {
    v19 = 103;
  }
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
  v20 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v23 = v19;
    _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_FAULT, "SedentaryAlarm,Error response,%{public}d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
    v21 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMSedentaryTimer_Internal init]_block_invoke", "CoreLocation: %s\n", v21);
    if (v21 != (char *)buf)
      free(v21);
  }
}

void sub_18F34E3E8(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int isTimerArmed;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  int v53;
  int v54;
  uint8_t buf[4];
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
  v2 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm _isActive dispatch sync.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
    LOWORD(v51) = 0;
    v42 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMSedentaryTimer_Internal _isActive]_block_invoke", "CoreLocation: %s\n", v42);
    if (v42 != (char *)buf)
      free(v42);
  }
  sub_18F3514A0("kCLConnectionMessageSedentaryTimerIsArmed", &v51);
  v3 = (void *)MEMORY[0x1E0C99E60];
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  v11 = objc_msgSend_setWithObjects_(v3, v7, v4, v8, v9, v5, v6, 0);
  v49 = v51;
  v50 = v52;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = objc_msgSend_sendMessage_withReplyClassesSync_(CMMotionUtils, v10, (uint64_t)&v49, v11, v12);
  v19 = (void *)v15;
  v20 = v50;
  if (!v50)
    goto LABEL_13;
  v21 = (unint64_t *)&v50->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_13:
    if (!v15)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (v19)
  {
LABEL_14:
    v23 = *(void **)(a1 + 32);
    v24 = (void *)objc_msgSend_objectForKeyedSubscript_(v19, v16, (uint64_t)CFSTR("CMSedentaryTimerIsArmed"), v17, v18);
    v29 = objc_msgSend_BOOLValue(v24, v25, v26, v27, v28);
    objc_msgSend_setTimerArmed_(v23, v30, v29, v31, v32);
  }
LABEL_15:
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
  v33 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
  {
    isTimerArmed = objc_msgSend_isTimerArmed(*(void **)(a1 + 32), v34, v35, v36, v37);
    *(_DWORD *)buf = 67240192;
    v56 = isTimerArmed;
    _os_log_impl(&dword_18F1DC000, v33, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm _isActive, timer is %{public}d.", buf, 8u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
    v47 = objc_msgSend_isTimerArmed(*(void **)(a1 + 32), v43, v44, v45, v46);
    v53 = 67240192;
    v54 = v47;
    v48 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMSedentaryTimer_Internal _isActive]_block_invoke", "CoreLocation: %s\n", v48);
    if (v48 != (char *)buf)
      free(v48);
  }
  v39 = v52;
  if (v52)
  {
    v40 = (unint64_t *)&v52->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
}

void sub_18F34E80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_18F2A8438((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F34F04C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  uint8_t buf[1640];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
  v2 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm _handleStartStopTimerResponse calling handler.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMSedentaryTimer_Internal _handleStartStopTimerResponse:withHandler:]_block_invoke", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v3, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v4, v5);
}

uint64_t sub_18F34F210(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint8_t buf[4];
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3, a4, a5) != 100)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
    v10 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_ERROR))
    {
      v15 = objc_msgSend_intValue(*(void **)(a1 + 32), v11, v12, v13, v14);
      *(_DWORD *)buf = 67240192;
      v28 = v15;
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_ERROR, "SedentaryAlarm,Error start / stop response,%{public}d", buf, 8u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
      objc_msgSend_intValue(*(void **)(a1 + 32), v22, v23, v24, v25);
      v26 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMSedentaryTimer_Internal _handleStartStopTimerResponse:withHandler:]_block_invoke", "CoreLocation: %s\n", v26);
      if (v26 != (char *)buf)
        free(v26);
    }
  }
  v16 = (void *)MEMORY[0x1E0CB35C8];
  v17 = *(_QWORD *)(a1 + 40);
  v18 = objc_msgSend_integerValue(*(void **)(a1 + 32), v6, v7, v8, v9);
  v20 = objc_msgSend_errorWithDomain_code_userInfo_(v16, v19, (uint64_t)CFSTR("CMErrorDomain"), v18, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v17, v20);
}

uint64_t sub_18F34F41C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v2, v3);
}

uint64_t sub_18F34FB1C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  uint8_t buf[1640];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
  v2 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm _handleAlarmDataResponse nil response calling handler.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMSedentaryTimer_Internal _handleAlarmDataResponse:withHandler:]_block_invoke", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v3, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v4, 0, v5);
}

uint64_t sub_18F34FCE4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint8_t buf[4];
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3, a4, a5) != 100)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
    v6 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_ERROR))
    {
      v11 = objc_msgSend_intValue(*(void **)(a1 + 32), v7, v8, v9, v10);
      *(_DWORD *)buf = 67240192;
      v30 = v11;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_ERROR, "SedentaryAlarm,Error query response,%{public}d", buf, 8u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
      objc_msgSend_intValue(*(void **)(a1 + 32), v24, v25, v26, v27);
      v28 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMSedentaryTimer_Internal _handleAlarmDataResponse:withHandler:]_block_invoke", "CoreLocation: %s\n", v28);
      if (v28 != (char *)buf)
        free(v28);
    }
  }
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
  v12 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm _handleAlarmDataResponse error dispatching.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
    v23 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMSedentaryTimer_Internal _handleAlarmDataResponse:withHandler:]_block_invoke", "CoreLocation: %s\n", v23);
    if (v23 != (char *)buf)
      free(v23);
  }
  v17 = (void *)MEMORY[0x1E0CB35C8];
  v18 = *(_QWORD *)(a1 + 40);
  v19 = objc_msgSend_integerValue(*(void **)(a1 + 32), v13, v14, v15, v16);
  v21 = objc_msgSend_errorWithDomain_code_userInfo_(v17, v20, (uint64_t)CFSTR("CMErrorDomain"), v19, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v18 + 16))(v18, 0, v21);
}

uint64_t sub_18F35001C(uint64_t a1)
{
  NSObject *v2;
  char *v4;
  uint8_t buf[1640];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
  v2 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm _handleAlarmDataResponse alarmDataArray dispatching.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
    v4 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMSedentaryTimer_Internal _handleAlarmDataResponse:withHandler:]_block_invoke", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_18F3501BC(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  uint8_t buf[1640];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
  v2 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm _handleAlarmDataResponse else dispatching.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMSedentaryTimer_Internal _handleAlarmDataResponse:withHandler:]_block_invoke", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v3, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v4, 0, v5);
}

void sub_18F35057C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F3505A0(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  __int16 v17;
  uint8_t buf[1640];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
  v4 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm _registerForAlarmsWithHandler, setting handler for message.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2955BF8);
    v17 = 0;
    v14 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMSedentaryTimer_Internal _registerForAlarmsWithHandler:]_block_invoke", "CoreLocation: %s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
  }
  v7 = *(void **)(a1 + 32);
  v8 = (std::__shared_weak_count *)a2[1];
  v15 = *a2;
  v16 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  objc_msgSend__handleAlarmDataResponse_withHandler_(v7, v5, (uint64_t)&v15, *(_QWORD *)(a1 + 40), v6);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_18F35079C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

void sub_18F3509E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  _QWORD v38[4];
  _QWORD v39[5];

  v39[4] = *MEMORY[0x1E0C80C00];
  v38[0] = CFSTR("CMSedentaryTimerStartTime");
  v6 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_timeIntervalSinceReferenceDate(*(void **)(a1 + 32), a2, a3, a4, a5);
  v39[0] = objc_msgSend_numberWithDouble_(v6, v7, v8, v9, v10);
  v38[1] = CFSTR("CMSedentaryTimerPeriodInterval");
  v39[1] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v11, v12, v13, v14, *(double *)(a1 + 56));
  v38[2] = CFSTR("CMSedentaryTimerReminderInterval");
  v39[2] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v15, v16, v17, v18, *(double *)(a1 + 64));
  v38[3] = CFSTR("CMSedentaryTimerAutoReschedule");
  v39[3] = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v19, *(unsigned __int8 *)(a1 + 72), v20, v21);
  v37 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v22, (uint64_t)v39, (uint64_t)v38, 4);
  sub_18F3515BC("kCLConnectionMessageSedentaryTimerStart", &v37, &v35);
  objc_msgSend__internal(*(void **)(a1 + 40), v23, v24, v25, v26);
  v34 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
  }
  CLConnectionClient::sendMessage();
  if (v34)
  {
    v29 = (unint64_t *)&v34->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v31 = v36;
  if (v36)
  {
    v32 = (unint64_t *)&v36->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_18F350BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F350C00(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v7 = (void *)objc_msgSend__internal(*(void **)(a1 + 32), a2, a3, a4, a5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  v16 = *(_QWORD *)a2;
  v17 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  objc_msgSend__handleStartStopTimerResponse_withHandler_(v7, v8, (uint64_t)&v16, *(_QWORD *)(a1 + 40), v9);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_18F350C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F2A8438((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18F350D60(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  sub_18F3516EC("kCLConnectionMessageSedentaryTimerStop", &v14);
  objc_msgSend__internal(*(void **)(a1 + 32), v2, v3, v4, v5);
  v13 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  CLConnectionClient::sendMessage();
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_18F350E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438(v8 - 40);
  _Unwind_Resume(a1);
}

void sub_18F350E98(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v7 = (void *)objc_msgSend__internal(*(void **)(a1 + 32), a2, a3, a4, a5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  v16 = *(_QWORD *)a2;
  v17 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  objc_msgSend__handleStartStopTimerResponse_withHandler_(v7, v8, (uint64_t)&v16, *(_QWORD *)(a1 + 40), v9);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_18F350F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F2A8438((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18F351000(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  const __CFString *v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v27 = CFSTR("CMSedentaryTimerStartTime");
  v6 = (void *)MEMORY[0x1E0CB37E8];
  objc_msgSend_timeIntervalSinceReferenceDate(*(void **)(a1 + 32), a2, a3, a4, a5);
  v28[0] = objc_msgSend_numberWithDouble_(v6, v7, v8, v9, v10);
  v26 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v11, (uint64_t)v28, (uint64_t)&v27, 1);
  sub_18F3515BC("kCLConnectionMessageSedentaryTimerQuery", &v26, &v24);
  objc_msgSend__internal(*(void **)(a1 + 40), v12, v13, v14, v15);
  v23 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  CLConnectionClient::sendMessage();
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v20 = v25;
  if (v25)
  {
    v21 = (unint64_t *)&v25->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_18F35118C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F3511B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v7 = (void *)objc_msgSend__internal(*(void **)(a1 + 32), a2, a3, a4, a5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  v16 = *(_QWORD *)a2;
  v17 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  objc_msgSend__handleAlarmDataResponse_withHandler_(v7, v8, (uint64_t)&v16, *(_QWORD *)(a1 + 40), v9);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_18F35124C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F2A8438((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18F351318(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  const __CFString *v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v5 = a1 + 32;
  v6 = (void *)objc_msgSend__internal(*(void **)(a1 + 32), a2, a3, a4, a5);
  objc_msgSend__registerForAlarmsWithHandler_(v6, v7, *(_QWORD *)(v5 + 8), v8, v9);
  v26 = CFSTR("kCLConnectionMessageSubscribeKey");
  v27[0] = MEMORY[0x1E0C9AAB0];
  v25 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v10, (uint64_t)v27, (uint64_t)&v26, 1);
  sub_18F3515BC("kCLConnectionMessageSedentaryTimerAlarm", &v25, &v23);
  objc_msgSend__internal(*(void **)v5, v11, v12, v13, v14);
  v22 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  CLConnectionClient::sendMessage();
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v19 = v24;
  if (v24)
  {
    v20 = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_18F35146C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F3514A0@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = sub_18F3514F8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18F3514E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F3514F8(_QWORD *a1, char *__s)
{
  char v4;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F351554((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_18F351540(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F351554(int a1, uint64_t a2, char *__s)
{
  void *__p[2];
  char v5;

  sub_18F270374(__p, __s);
  MEMORY[0x194001030](a2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_18F3515A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18F3515BC@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F35161C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F351608(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F35161C(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F35167C((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F351668(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F35167C(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F3516D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18F3516EC@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = sub_18F351744(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18F351730(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F351744(_QWORD *a1, char *__s)
{
  char v4;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F3517A0((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_18F35178C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F3517A0(int a1, uint64_t a2, char *__s)
{
  void *__p[2];
  char v5;

  sub_18F270374(__p, __s);
  MEMORY[0x194001030](a2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_18F3517EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F351814(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F351860(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

uint64_t sub_18F3518AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;

  v5 = (void *)MEMORY[0x1E0CB35C8];
  v6 = *(_QWORD *)(a1 + 40);
  v7 = objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3, a4, a5);
  v9 = objc_msgSend_errorWithDomain_code_userInfo_(v5, v8, (uint64_t)CFSTR("CMErrorDomain"), v7, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v6, 0, v9);
}

uint64_t sub_18F35190C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 103, 0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v2, 0, v3);
}

void sub_18F351A54(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  NSObject *v3;
  _QWORD block[4];
  __int128 v5;
  uint64_t v6;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_OWORD *)(a1 + 32);
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
  block[2] = sub_18F351AB8;
  block[3] = &unk_1E2955C70;
  v6 = v1;
  v5 = v2;
  dispatch_async(v3, block);
}

id sub_18F351AB8(uint64_t a1, const char *a2)
{
  const void *v3;
  void *v4;
  id *v5;
  uint64_t v6;
  id result;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  const __CFString *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v3 = *(const void **)(*(_QWORD *)(a1 + 32) + 24);
  if (v3)
  {
    _Block_release(v3);

  }
  else
  {
    v19 = CFSTR("kCLConnectionMessageSubscribeKey");
    v20[0] = MEMORY[0x1E0C9AAB0];
    v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v20, (uint64_t)&v19, 1);
    sub_18F352E4C(&v16, &v18);
    v15 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v15)
    {
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v12 = v17;
    if (v17)
    {
      v13 = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v4 = _Block_copy(*(const void **)(a1 + 48));
  v6 = *(_QWORD *)(a1 + 32);
  v5 = (id *)(a1 + 32);
  *(_QWORD *)(v6 + 24) = v4;
  result = v5[1];
  *((_QWORD *)*v5 + 4) = result;
  return result;
}

void sub_18F351C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_18F2A8438((uint64_t)&a9);
  sub_18F2A8438((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_18F351CAC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F351D04;
  block[3] = &unk_1E2955938;
  block[4] = v1;
  dispatch_async(v2, block);
}

void sub_18F351D04(uint64_t a1, const char *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  const __CFString *v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24))
  {
    v14 = CFSTR("kCLConnectionMessageSubscribeKey");
    v15[0] = MEMORY[0x1E0C9AAA0];
    v13 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v15, (uint64_t)&v14, 1);
    sub_18F352E4C(&v11, &v13);
    v10 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v10)
    {
      v5 = (unint64_t *)&v10->__shared_owners_;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    _Block_release(*(const void **)(*(_QWORD *)(a1 + 32) + 24));
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = 0;

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = 0;
    v7 = v12;
    if (v12)
    {
      v8 = (unint64_t *)&v12->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_18F351E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_18F2A8438((uint64_t)&a9);
  sub_18F2A8438((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_18F3521EC(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  NSObject *v3;
  _QWORD block[4];
  __int128 v5;
  uint64_t v6;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_OWORD *)(a1 + 32);
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
  block[2] = sub_18F352250;
  block[3] = &unk_1E2955C70;
  v6 = v1;
  v5 = v2;
  dispatch_async(v3, block);
}

id sub_18F352250(uint64_t a1, const char *a2)
{
  const void *v3;
  void *v4;
  id *v5;
  uint64_t v6;
  id result;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  const __CFString *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v3 = *(const void **)(*(_QWORD *)(a1 + 32) + 24);
  if (v3)
  {
    _Block_release(v3);

  }
  else
  {
    v19 = CFSTR("kCLConnectionMessageSubscribeKey");
    v20[0] = MEMORY[0x1E0C9AAB0];
    v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v20, (uint64_t)&v19, 1);
    sub_18F352F00(&v16, &v18);
    v15 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v15)
    {
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v12 = v17;
    if (v17)
    {
      v13 = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v4 = _Block_copy(*(const void **)(a1 + 48));
  v6 = *(_QWORD *)(a1 + 32);
  v5 = (id *)(a1 + 32);
  *(_QWORD *)(v6 + 24) = v4;
  result = v5[1];
  *((_QWORD *)*v5 + 4) = result;
  return result;
}

void sub_18F3523C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_18F2A8438((uint64_t)&a9);
  sub_18F2A8438((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_18F352694(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F3526EC;
  block[3] = &unk_1E2955938;
  block[4] = v1;
  dispatch_async(v2, block);
}

void sub_18F3526EC(uint64_t a1, const char *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  const __CFString *v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24))
  {
    v14 = CFSTR("kCLConnectionMessageSubscribeKey");
    v15[0] = MEMORY[0x1E0C9AAA0];
    v13 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v15, (uint64_t)&v14, 1);
    sub_18F352F00(&v11, &v13);
    v10 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v10)
    {
      v5 = (unint64_t *)&v10->__shared_owners_;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    _Block_release(*(const void **)(*(_QWORD *)(a1 + 32) + 24));
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = 0;

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = 0;
    v7 = v12;
    if (v12)
    {
      v8 = (unint64_t *)&v12->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_18F352854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_18F2A8438((uint64_t)&a9);
  sub_18F2A8438((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_18F352A10(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v6)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD v14[2];
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v6 = *(void (**)(void))(*(_QWORD *)(a1 + 56) + 16);
LABEL_3:
    v6();
    return;
  }
  if (a2 && objc_msgSend_count(a2, a2, 0, a4, a5))
  {
    objc_msgSend_filterActivities_withAttribute_(*(void **)(a1 + 48), a2, (uint64_t)a2, *(_QWORD *)(a1 + 64), v8);
    v6 = *(void (**)(void))(*(_QWORD *)(a1 + 56) + 16);
    goto LABEL_3;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], a2, (uint64_t)CFSTR("CMErrorDomain"), 107, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 16))(v9, 0, v10);
  if (qword_1EE16D6E0 != -1)
    dispatch_once(&qword_1EE16D6E0, &unk_1E2952D88);
  v11 = qword_1EE16D6E8;
  if (os_log_type_enabled((os_log_t)qword_1EE16D6E8, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 40);
    v14[0] = 68289539;
    v14[1] = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2113;
    v18 = v12;
    v19 = 2113;
    v20 = v13;
    _os_log_impl(&dword_18F1DC000, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Query out-of-bounds of available data\", \"start\":%{private, location:escape_only}@, \"end\":%{private, location:escape_only}@}", (uint8_t *)v14, 0x26u);
  }
}

os_log_t sub_18F352BC0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Activity");
  qword_1EE16D6E8 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F352BEC@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F352C4C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F352C38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F352C4C(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F352CAC((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F352C98(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F352CAC(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F352D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18F352D1C@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F352D7C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F352D68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F352D7C(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F352DDC((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F352DC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F352DDC(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F352E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F352E4C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  void *__p[2];
  char v6;

  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2952688;
  sub_18F270374(__p, "kCLConnectionMessageMotionActivityPeriodicUpdate");
  MEMORY[0x19400103C](v4 + 3, __p, *a2);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_18F352ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_18F352F00(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  void *__p[2];
  char v6;

  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2952688;
  sub_18F270374(__p, "MotionActivityLite/kCLConnectionMessageMotionActivityUpdate");
  MEMORY[0x19400103C](v4 + 3, __p, *a2);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_18F352F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F352FB4(_QWORD *a1)
{
  *a1 = off_1E294B038;
  sub_18F1EAC4C(a1);
  sub_18F209DDC(a1);
  sub_18F352FF8(a1);
  return a1;
}

_QWORD *sub_18F352FF8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *(*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (result[7])
  {
    v1 = result;
    v2 = sub_18F2009D4();
    v3 = v1[7];
    v4 = sub_18F204AE4();
    v5 = MEMORY[0x1E0C809B0];
    v10 = MEMORY[0x1E0C809B0];
    v11 = 3221225472;
    v12 = sub_18F1F5EE0;
    v13 = &unk_1E2956E98;
    v16 = 0;
    v14 = v2;
    v15 = v3;
    sub_18F1F5E28(v4, (uint64_t)&v10);
    v6 = v1[7];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v1[7] = 0;
    v7 = sub_18F2009D4();
    v8 = v1[8];
    v9 = sub_18F204AE4();
    v10 = v5;
    v11 = 3221225472;
    v12 = sub_18F1F5EE0;
    v13 = &unk_1E2956E98;
    v16 = 1;
    v14 = v7;
    v15 = v8;
    sub_18F1F5E28(v9, (uint64_t)&v10);
    result = (_QWORD *)v1[8];
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    v1[8] = 0;
  }
  return result;
}

uint64_t sub_18F3530F0(uint64_t result, double a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  if (!*(_QWORD *)(result + 56))
  {
    v3 = result;
    v4 = (_QWORD *)operator new();
    *v4 = off_1E294C238;
    *v4 = &off_1E294C2E0;
    v4[1] = 0;
    v4[2] = sub_18F353204;
    v4[3] = v3;
    *(_QWORD *)(v3 + 56) = v4;
    v5 = sub_18F2009D4();
    sub_18F1F4F0C(v5, 0, *(_QWORD *)(v3 + 56), a2);
    v6 = (_QWORD *)operator new();
    *v6 = off_1E294C238;
    *v6 = &off_1E294C858;
    v6[1] = 0;
    v6[2] = sub_18F35321C;
    v6[3] = v3;
    *(_QWORD *)(v3 + 64) = v6;
    v7 = sub_18F2009D4();
    result = sub_18F1F4F0C(v7, 1, *(_QWORD *)(v3 + 64), -1.0);
    *(_BYTE *)(v3 + 72) = 0;
  }
  return result;
}

void sub_18F3531DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F353204(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1);
}

_BYTE *sub_18F35321C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 72) = *result;
  return result;
}

void sub_18F35323C(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F353260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_18F353270(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F353294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

uint64_t sub_18F354BB8(uint64_t a1)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD __src[25];

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0x3200000000;
  *(_QWORD *)(a1 + 1216) = 0x3200000000;
  *(_QWORD *)(a1 + 2424) = 0x3200000000;
  *(_QWORD *)(a1 + 3632) = 0x9600000000;
  *(_QWORD *)(a1 + 4240) = 0x3200000000;
  *(_QWORD *)(a1 + 4448) = 0x3200000000;
  *(_QWORD *)(a1 + 4656) = 0x700000000;
  *(_QWORD *)(a1 + 4720) = 0x700000000;
  *(_QWORD *)(a1 + 4816) = 0x7FF8000000000000;
  *(int32x2_t *)(a1 + 4824) = vdup_n_s32(0x7FC00000u);
  *(_QWORD *)(a1 + 4832) = 2143289344;
  *(_QWORD *)(a1 + 4840) = 0;
  *(_QWORD *)(a1 + 4848) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 4856) = 0;
  *(_DWORD *)(a1 + 4864) = 0;
  *(_QWORD *)(a1 + 4872) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 4880) = 0;
  *(_DWORD *)(a1 + 4888) = 0;
  *(_QWORD *)(a1 + 4896) = 0;
  *(_QWORD *)(a1 + 4904) = 0x300000000;
  *(_QWORD *)(a1 + 4936) = 0x300000000;
  *(_QWORD *)(a1 + 4968) = 0;
  *(_QWORD *)(a1 + 4976) = 0x3F80000000000000;
  v2 = (_OWORD *)(a1 + 4984);
  v18 = a1 + 5040;
  v17 = a1 + 5096;
  v16 = a1 + 5152;
  v15 = a1 + 5224;
  v14 = a1 + 5296;
  v13 = a1 + 5360;
  v12 = a1 + 5376;
  v3 = a1 + 5392;
  v4 = a1 + 5448;
  v5 = a1 + 5504;
  v6 = a1 + 5560;
  v7 = a1 + 5632;
  v8 = a1 + 5704;
  v9 = a1 + 5768;
  v10 = a1 + 5784;
  *(_OWORD *)(a1 + 5928) = 0u;
  *(_QWORD *)(a1 + 5944) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 5952) = 0;
  __src[0] = xmmword_18F5044E0;
  __src[1] = unk_18F5044F0;
  __src[2] = xmmword_18F504500;
  *(_QWORD *)&__src[3] = 0x3FE1532617C1BDA5;
  *((_QWORD *)&__src[6] + 1) = 0;
  *(_OWORD *)((char *)&__src[3] + 8) = xmmword_18F504518;
  *(_OWORD *)((char *)&__src[4] + 8) = unk_18F504528;
  *(_OWORD *)((char *)&__src[5] + 8) = xmmword_18F504538;
  __src[8] = unk_18F504560;
  __src[9] = xmmword_18F504570;
  __src[7] = xmmword_18F504550;
  *(_QWORD *)&__src[10] = 0;
  *((_QWORD *)&__src[14] + 1) = 0;
  *(_OWORD *)((char *)&__src[13] + 8) = unk_18F5045B8;
  *(_OWORD *)((char *)&__src[12] + 8) = xmmword_18F5045A8;
  *(_OWORD *)((char *)&__src[11] + 8) = unk_18F504598;
  *(_OWORD *)((char *)&__src[10] + 8) = xmmword_18F504588;
  *(_QWORD *)&__src[19] = 0;
  __src[17] = xmmword_18F5045F0;
  __src[18] = unk_18F504600;
  __src[15] = xmmword_18F5045D0;
  __src[16] = unk_18F5045E0;
  *(_OWORD *)((char *)&__src[21] + 8) = xmmword_18F504638;
  *(_OWORD *)((char *)&__src[22] + 8) = unk_18F504648;
  *(_OWORD *)((char *)&__src[19] + 8) = xmmword_18F504618;
  *(_OWORD *)((char *)&__src[20] + 8) = unk_18F504628;
  memcpy((void *)(a1 + 4984), __src, 0x178uLL);
  *(_OWORD *)(a1 + 5360) = xmmword_18F504490;
  *(_OWORD *)(a1 + 5376) = xmmword_18F5044A0;
  *(_OWORD *)(a1 + 5392) = xmmword_18F504658;
  *(_OWORD *)(a1 + 5408) = unk_18F504668;
  *(_OWORD *)(a1 + 5424) = xmmword_18F504678;
  *(_QWORD *)(a1 + 5440) = 0x7FEFFFFFFFFFFFFFLL;
  v2[29] = xmmword_18F504690;
  v2[30] = unk_18F5046A0;
  v2[31] = xmmword_18F5046B0;
  *(_QWORD *)(a1 + 5496) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 5552) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 5536) = xmmword_18F5046E8;
  *(_OWORD *)(a1 + 5520) = unk_18F5046D8;
  *(_OWORD *)(a1 + 5504) = xmmword_18F5046C8;
  *(_QWORD *)(a1 + 5624) = 0x7FEFFFFFFFFFFFFFLL;
  v2[38] = xmmword_18F504720;
  v2[39] = unk_18F504730;
  v2[36] = xmmword_18F504700;
  v2[37] = unk_18F504710;
  *(_OWORD *)(a1 + 5632) = xmmword_18F504700;
  *(_QWORD *)(a1 + 5696) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 5680) = unk_18F504730;
  *(_OWORD *)(a1 + 5664) = xmmword_18F504720;
  *(_OWORD *)(a1 + 5648) = unk_18F504710;
  v2[47] = xmmword_18F504768;
  v2[48] = unk_18F504778;
  v2[45] = xmmword_18F504748;
  v2[46] = unk_18F504758;
  *(_QWORD *)(a1 + 5768) = 0x3F1A36E2EB1C432DLL;
  *(_OWORD *)(a1 + 5776) = xmmword_18F5044B0;
  *(_QWORD *)(a1 + 5792) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 5800) = v2;
  *(_QWORD *)(a1 + 5808) = v18;
  *(_QWORD *)(a1 + 5816) = v17;
  *(_QWORD *)(a1 + 5824) = v16;
  *(_QWORD *)(a1 + 5832) = v15;
  *(_QWORD *)(a1 + 5840) = v14;
  *(_QWORD *)(a1 + 5848) = v13;
  *(_QWORD *)(a1 + 5856) = v12;
  *(_QWORD *)(a1 + 5864) = v3;
  *(_QWORD *)(a1 + 5872) = v4;
  *(_QWORD *)(a1 + 5880) = v5;
  *(_QWORD *)(a1 + 5888) = v6;
  *(_QWORD *)(a1 + 5896) = v7;
  *(_QWORD *)(a1 + 5904) = v8;
  *(_QWORD *)(a1 + 5912) = v9;
  *(_QWORD *)(a1 + 5920) = v10;
  return a1;
}

void sub_18F354F54(unsigned __int8 *a1)
{
  void (*v2)(_QWORD);
  uint64_t v3;
  int v4;

  v2 = (void (*)(_QWORD))*((_QWORD *)a1 + 741);
  if (v2 && *((_QWORD *)a1 + 742))
    v2(*a1);
  v3 = *((_QWORD *)a1 + 744);
  v4 = *a1;
  if (v3 && v4 != a1[2])
  {
    sub_18F365458(v3, v4 != 0);
    LOBYTE(v4) = *a1;
  }
  a1[2] = v4;
}

uint64_t sub_18F354FB4(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954EE8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v11 = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954EE8);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T &CMQueue<CMAccessoryStepDetector::AggAccelSample>::operator[](const size_t) const [T = CMAccessoryStepDetector::AggAccelSample]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

float sub_18F3551B0(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2 >= 3)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954EE8);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v8 = a2;
      v9 = 2048;
      v10 = 3;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMVector.h, line 271,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954EE8);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMVector<float, 3>::operator[](const size_t) const [T = float, N = 3]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return *(float *)(a1 + 4 * a2);
}

BOOL sub_18F355388(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 16) > *(float *)(a2 + 16);
}

unsigned __int16 *sub_18F35539C(unsigned __int16 *result, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int16 *v4;
  __int128 v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *((unsigned int *)result + 1);
  v3 = *result + (unint64_t)result[1];
  if (v3 < v2)
    v2 = 0;
  v4 = &result[12 * (v3 - v2)];
  v5 = *a2;
  *((_QWORD *)v4 + 3) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v4 + 4) = v5;
  v6 = result[1];
  v7 = *((unsigned int *)result + 1);
  if (v7 <= v6)
  {
    v8 = *result + 1;
    if (v8 < v7)
      LOWORD(v7) = 0;
    *result = v8 - v7;
  }
  else
  {
    result[1] = v6 + 1;
  }
  return result;
}

uint64_t sub_18F355408(uint64_t result, _DWORD *a2, _DWORD *a3, double a4, double a5)
{
  uint64_t v9;
  unint64_t v10;
  unsigned __int16 *v11;
  double v12;
  double v13;

  *a2 = 0;
  *a3 = 0;
  if (*(_WORD *)(result + 10))
  {
    v9 = result;
    v10 = 0;
    v11 = (unsigned __int16 *)(result + 8);
    v12 = INFINITY;
    do
    {
      v13 = vabdd_f64(a4, *(double *)sub_18F354FB4(v11, v10));
      if (v13 < v12)
      {
        *a2 = v10;
        v12 = v13;
      }
      result = sub_18F354FB4(v11, v10);
      if (vabdd_f64(*(double *)result, a5) <= 0.000001)
        *a3 = v10;
      ++v10;
    }
    while (v10 < *(unsigned __int16 *)(v9 + 10));
  }
  return result;
}

uint64_t sub_18F3554D0(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954EE8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v11 = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954EE8);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T &CMQueue<CMAccessoryStepDetector::VectorSample>::operator[](const size_t) const [T = CMAccessoryStepDetector::VectorSample]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

uint64_t sub_18F3556CC(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954EE8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v11 = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954EE8);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T &CMQueue<CMAccessoryStepDetector::FaceRotationRateSample>::operator[](const size_t) const [T = CMAccessoryStepDetector::FaceRotationRateSample]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

uint64_t sub_18F3558C8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  char *v8;
  NSObject *v9;
  char *v10;
  uint8_t buf[4];
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 3)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954EE8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a2;
      v13 = 2048;
      v14 = 3;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 77,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954EE8);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T &CMMatrix<float, 3>::operator()(size_t, size_t) [T = float, M = 3, N = 3]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  if (a3 >= 3)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954EE8);
    v9 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v12 = a3;
      v13 = 2048;
      v14 = 3;
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 78,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954EE8);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T &CMMatrix<float, 3>::operator()(size_t, size_t) [T = float, M = 3, N = 3]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  return a1 + 4 * (3 * a3 + a2);
}

unsigned __int16 *sub_18F355C24(unsigned __int16 *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result[1];
  v3 = *((unsigned int *)result + 1);
  v4 = *result;
  if (v4 + v2 >= v3)
    v5 = *((unsigned int *)result + 1);
  else
    v5 = 0;
  *(_QWORD *)&result[4 * (v4 + v2 - v5) + 4] = *a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3)
      LOWORD(v3) = 0;
    *result = v4 + 1 - v3;
  }
  else
  {
    result[1] = v2 + 1;
  }
  return result;
}

uint64_t sub_18F355C78(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  NSObject *v7;
  int v8;
  char *v9;
  uint8_t buf[4];
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954EE8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      v11 = a2;
      v12 = 1024;
      v13 = v8;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954EE8);
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "const T &CMQueue<double>::operator[](const size_t) const [T = double]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  v4 = *a1 + a2;
  v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5)
    v5 = 0;
  return (uint64_t)&a1[4 * (v4 - v5) + 4];
}

void sub_18F355E70(char *a1)
{
  uint64_t v2;
  char v3;

  *((_DWORD *)a1 + 1164) = 0;
  *((_DWORD *)a1 + 1226) = 0;
  *((_QWORD *)a1 + 612) = 0x7FF8000000000000;
  *a1 = 0;
  v2 = *((_QWORD *)a1 + 744);
  if (v2)
  {
    v3 = a1[2];
    if (v3)
    {
      sub_18F365458(v2, 0);
      v3 = *a1;
    }
  }
  else
  {
    v3 = 0;
  }
  a1[2] = v3;
}

double sub_18F355EC8(uint64_t a1, float32x2_t *a2, double a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  __int32 v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  _WORD *v20;
  float v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  double *v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  __int32 v39;
  float32x4_t v40;
  int v41;
  _WORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  float v48;
  int v49;
  int v50;
  unsigned __int16 *v51;
  _WORD *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  unint64_t v58;
  int v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  float *v64;
  float v65;
  double v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  float v70;
  float v71;
  double v72;
  float v73;
  double *v74;
  unint64_t v75;
  float v76;
  float v77;
  NSObject *v78;
  uint64_t v79;
  float v80;
  _BOOL4 v81;
  double v82;
  int v83;
  int v84;
  int v85;
  char v86;
  uint64_t v87;
  float v88;
  double v89;
  unint64_t v90;
  unint64_t v91;
  NSObject *v92;
  int v93;
  double v94;
  double v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  double v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unsigned __int16 *v107;
  uint64_t v108;
  NSObject *v109;
  NSObject *v110;
  unint64_t v111;
  unint64_t v112;
  double v113;
  float v114;
  double *v115;
  double v116;
  double *v117;
  double v118;
  float v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  float32x2_t v123;
  float32x2_t v124;
  _BOOL4 v125;
  uint64_t i;
  _BYTE *v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  float v136;
  int v137;
  unint64_t v138;
  uint64_t v139;
  float32x2_t v140;
  float v141;
  float32x2_t v142;
  float32x2_t v143;
  double v144;
  double v145;
  uint64_t v146;
  float32x2_t v147;
  float v148;
  float32x2_t v149;
  float32x2_t *v150;
  float32x2_t v151;
  double v152;
  unsigned int v153;
  float v154;
  unint64_t v155;
  unint64_t v156;
  float v157;
  float v158;
  uint64_t v159;
  float v160;
  int v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  float v165;
  unint64_t v166;
  uint64_t v167;
  float v168;
  int v169;
  int v170;
  float v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  double v175;
  float v176;
  double v177;
  double v178;
  double v179;
  uint64_t v180;
  NSObject *v181;
  double v182;
  double v183;
  int v184;
  unint64_t v185;
  unint64_t v186;
  double v187;
  NSObject *v188;
  uint64_t v189;
  float v190;
  float v191;
  unint64_t v192;
  uint64_t v193;
  NSObject *v194;
  uint64_t v195;
  unsigned __int16 *v196;
  unint64_t v197;
  float32x2_t v198;
  float v199;
  float v200;
  float v201;
  unsigned int v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  float *v206;
  float v207;
  float v208;
  double v209;
  unsigned int v210;
  float v211;
  int v212;
  unint64_t v213;
  float v214;
  unint64_t v215;
  float v216;
  float v217;
  uint64_t v218;
  int32x2_t v219;
  unint64_t v220;
  float32x2_t v221;
  float v222;
  float32x2_t *v223;
  float v224;
  unint64_t j;
  int v226;
  int v227;
  int v228;
  double v229;
  double v230;
  _BOOL4 v231;
  double v232;
  int v233;
  NSObject *v234;
  int v235;
  char v236;
  double v238;
  NSObject *v239;
  NSObject *v240;
  char *v241;
  uint64_t v242;
  char *v243;
  char *v244;
  char *v245;
  NSObject *v246;
  char *v247;
  char *v248;
  uint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  double v257;
  double v258;
  double v259;
  int v260;
  float v261;
  double v262;
  float64x2_t v263;
  int v264;
  float32x2_t v265;
  double v266;
  float v267;
  double v268;
  float v269;
  double v270;
  double v271;
  unsigned __int16 *v272;
  float v273;
  __int128 v275;
  float v276;
  float v277[9];
  _DWORD *v278;
  float *v279;
  _DWORD v280[3];
  _BYTE v281[48];
  __int128 v282;
  _BYTE buf[42];
  __int16 v284;
  _BYTE v285[18];
  __int16 v286;
  float64_t v287;
  __int16 v288;
  double v289;
  __int16 v290;
  double v291;
  __int16 v292;
  double v293;
  __int16 v294;
  double v295;
  __int16 v296;
  double v297;
  __int16 v298;
  double v299;
  _BYTE v300[22];
  __int16 v301;
  double v302;
  __int16 v303;
  _BYTE v304[10];
  _BYTE v305[18];
  __int16 v306;
  float64_t v307;
  __int16 v308;
  double v309;
  __int16 v310;
  double v311;
  __int16 v312;
  double v313;
  __int16 v314;
  double v315;
  __int16 v316;
  double v317;
  __int16 v318;
  double v319;
  uint64_t v320;

  v320 = *MEMORY[0x1E0C80C00];
  v5 = a2[1].f32[1] - sub_18F200A14((float *)&a2[7]);
  v7 = a2[2].f32[0] - v6;
  v9 = a2[2].f32[1] - v8;
  v10 = a2[8].i32[1];
  v11.f32[0] = -a2[8].f32[0];
  *(float32x2_t *)buf = vneg_f32(a2[7]);
  *(_DWORD *)&buf[8] = v11.i32[0];
  *(_DWORD *)&buf[12] = v10;
  sub_18F1FFE94((float32x4_t *)buf, v11);
  v12.f32[0] = sub_18F3D39F4((float *)buf, v5, v7, v9);
  v15 = v12.f32[0];
  v16 = v13;
  v17 = v14;
  v18 = 0;
  v19 = 0.0;
  do
  {
    v19 = v19 + (float)(a2->f32[v18] * a2->f32[v18]);
    ++v18;
  }
  while (v18 != 3);
  v20 = (_WORD *)(a1 + 3632);
  v21 = sqrtf(v19);
  v22 = *(unsigned __int16 *)(a1 + 3634);
  v23 = *(unsigned int *)(a1 + 3636);
  v24 = *(unsigned __int16 *)(a1 + 3632);
  if (v24 + v22 >= v23)
    v25 = *(unsigned int *)(a1 + 3636);
  else
    v25 = 0;
  *(float *)&v20[2 * (v24 + v22 - v25) + 4] = v21;
  if (v23 <= v22)
  {
    if (v24 + 1 < v23)
      LOWORD(v23) = 0;
    *v20 = v24 + 1 - v23;
  }
  else
  {
    *(_WORD *)(a1 + 3634) = v22 + 1;
  }
  v26 = (_WORD *)(a1 + 1216);
  v27 = *(unsigned int *)(a1 + 1220);
  v28 = *(unsigned __int16 *)(a1 + 1216) + (unint64_t)*(unsigned __int16 *)(a1 + 1218);
  if (v28 >= v27)
    v29 = *(unsigned int *)(a1 + 1220);
  else
    v29 = 0;
  v30 = (double *)&v26[12 * (v28 - v29)];
  v30[1] = a3;
  *((float *)v30 + 4) = -v12.f32[0];
  *((float *)v30 + 5) = -v13;
  *((float *)v30 + 6) = -v14;
  v31 = *(unsigned __int16 *)(a1 + 1218);
  if (v27 <= v31)
  {
    v32 = (unsigned __int16)*v26 + 1;
    if (v32 < v27)
      LOWORD(v27) = 0;
    *v26 = v32 - v27;
  }
  else
  {
    *(_WORD *)(a1 + 1218) = v31 + 1;
  }
  if (*(_WORD *)(a1 + 10))
  {
    v33 = *(unsigned __int16 *)(a1 + 10) + (unint64_t)*(unsigned __int16 *)(a1 + 8) - 1;
    v34 = *(unsigned int *)(a1 + 12);
    if (v33 < v34)
      v34 = 0;
    v35 = (float *)(a1 + 8 + 24 * (v33 - v34));
    v36 = v35[4];
    v37 = v35[5];
    v38 = v35[6];
  }
  else
  {
    v36 = 0.0;
    v37 = 0.0;
    v38 = 0.0;
  }
  v39 = a2[8].i32[1];
  v12.f32[0] = -a2[8].f32[0];
  *(float32x2_t *)buf = vneg_f32(a2[7]);
  *(_DWORD *)&buf[8] = v12.i32[0];
  *(_DWORD *)&buf[12] = v39;
  sub_18F1FFE94((float32x4_t *)buf, v12);
  sub_18F3D39F4((float *)buf, a2->f32[0], a2->f32[1], a2[1].f32[0]);
  v42 = (_WORD *)(a1 + 4448);
  v43 = *(unsigned __int16 *)(a1 + 4450);
  v44 = *(unsigned int *)(a1 + 4452);
  v45 = *(unsigned __int16 *)(a1 + 4448);
  if (v45 + v43 >= v44)
    v46 = *(unsigned int *)(a1 + 4452);
  else
    v46 = 0;
  *(_DWORD *)&v42[2 * (v45 + v43 - v46) + 4] = v41;
  if (v44 <= v43)
  {
    if (v45 + 1 < v44)
      LOWORD(v44) = 0;
    *v42 = v45 + 1 - v44;
  }
  else
  {
    *(_WORD *)(a1 + 4450) = v43 + 1;
  }
  v40.f32[0] = -*(float *)(a1 + 4976);
  v47 = *(_DWORD *)(a1 + 4980);
  *(float32x2_t *)buf = vneg_f32(*(float32x2_t *)(a1 + 4968));
  *(_DWORD *)&buf[8] = v40.i32[0];
  *(_DWORD *)&buf[12] = v47;
  sub_18F1FFE94((float32x4_t *)buf, v40);
  v48 = sub_18F3D39F4((float *)buf, a2->f32[0], a2->f32[1], a2[1].f32[0]);
  v51 = (unsigned __int16 *)(a1 + 8);
  v52 = (_WORD *)(a1 + 2424);
  v53 = *(unsigned int *)(a1 + 2428);
  v54 = *(unsigned __int16 *)(a1 + 2424) + (unint64_t)*(unsigned __int16 *)(a1 + 2426);
  if (v54 >= v53)
    v55 = *(unsigned int *)(a1 + 2428);
  else
    v55 = 0;
  v56 = a1 + 24 * (v54 - v55);
  *(double *)(v56 + 2432) = a3;
  *(float *)(v56 + 2440) = v48;
  *(_DWORD *)(v56 + 2444) = v49;
  *(_DWORD *)(v56 + 2448) = v50;
  v57 = *(unsigned __int16 *)(a1 + 2426);
  if (v53 <= v57)
  {
    v58 = (unsigned __int16)*v52 + 1;
    if (v58 < v53)
      LOWORD(v53) = 0;
    *v52 = v58 - v53;
  }
  else
  {
    *(_WORD *)(a1 + 2426) = v57 + 1;
  }
  *(double *)&v275 = a3;
  *((float *)&v275 + 2) = v36 - v15;
  *((float *)&v275 + 3) = v37 - v16;
  v276 = v38 - v17;
  sub_18F35539C((unsigned __int16 *)(a1 + 8), &v275);
  v59 = *(_DWORD *)(a1 + 4836);
  if (v59)
    v60 = v59 == 2 && *(_DWORD *)(a1 + 4844) == 0;
  else
    v60 = 1;
  *(_BYTE *)(a1 + 3) = v60;
  v61 = *(unsigned __int16 *)(a1 + 8) + (unint64_t)*(unsigned __int16 *)(a1 + 10) - 1;
  v62 = *(unsigned int *)(a1 + 12);
  if (v61 >= v62)
    v63 = *(unsigned int *)(a1 + 12);
  else
    v63 = 0;
  v64 = (float *)(a1 + 8 + 24 * (v61 - v63));
  v65 = vabds_f32(v64[6], *(float *)(a1 + 4832));
  v66 = sqrtf((float)(v64[5] * v64[5]) + (float)(v64[4] * v64[4]))
      - sqrtf((float)(*(float *)(a1 + 4828) * *(float *)(a1 + 4828))+ (float)(*(float *)(a1 + 4824) * *(float *)(a1 + 4824)));
  if (v66 < 0.0)
    v66 = -v66;
  if (v65 <= 0.125 || v66 < 0.0)
  {
    v90 = *(unsigned __int16 *)(a1 + 4656) + (unint64_t)*(unsigned __int16 *)(a1 + 4658) - 1;
    v91 = *(unsigned int *)(a1 + 4660);
    if (v90 < v91)
      v91 = 0;
    if (*(double *)(a1 + 4656 + 8 * (v90 - v91) + 8) + 5.0 <= a3)
    {
      *(_BYTE *)a1 = 0;
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
      v92 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v92, OS_LOG_TYPE_DEBUG, "[AccessoryStepDetector] No spatial sample for 5s. Set detectedSteps = false", buf, 2u);
      }
      v93 = sub_18F1FCA08(115, 2);
      v94 = a3;
      if (v93)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
        *(_WORD *)v300 = 0;
        v241 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "CMAccessoryStepDetector::Impulse CMAccessoryStepDetector::feedImuData(const CMRelDM::IMUData *const, const double)", "CoreLocation: %s\n", v241);
        if (v241 != buf)
          free(v241);
        v94 = a3;
      }
      if (*(double *)(a1 + 5944) + 2.5 < v94)
      {
        sub_18F354F54((unsigned __int8 *)a1);
        *(double *)(a1 + 5944) = a3;
      }
    }
  }
  else
  {
    v67 = a1 + 16;
    if (v61 < v62)
      v62 = 0;
    v68 = v67 + 24 * (v61 - v62);
    v69 = *(_QWORD *)v68;
    *(_QWORD *)(a1 + 4824) = *(_QWORD *)(v68 + 8);
    *(_DWORD *)(a1 + 4832) = *(_DWORD *)(v68 + 16);
    *(_QWORD *)(a1 + 4816) = v69;
    sub_18F355C24((unsigned __int16 *)(a1 + 4656), (_QWORD *)(a1 + 4816));
    sub_18F33FACC((unsigned __int16 *)(a1 + 4720), a1 + 4824);
    if (*(_DWORD *)(a1 + 4660) == *(unsigned __int16 *)(a1 + 4658))
    {
      v70 = *(float *)(sub_18F33FF64((unsigned __int16 *)(a1 + 4720), 0) + 8);
      v71 = *(float *)(sub_18F33FF64((unsigned __int16 *)(a1 + 4720), 3uLL) + 8);
      LODWORD(v72) = *(_DWORD *)(sub_18F33FF64((unsigned __int16 *)(a1 + 4720), 3uLL) + 8);
      v73 = *(float *)(sub_18F33FF64((unsigned __int16 *)(a1 + 4720), 6uLL) + 8);
      v74 = (double *)sub_18F355C78((unsigned __int16 *)(a1 + 4656), 0);
      v272 = (unsigned __int16 *)(a1 + 8);
      if (*(_WORD *)(a1 + 10))
      {
        v75 = 0;
        v76 = v70 - v71;
        v77 = *(float *)&v72 - v73;
        v72 = *v74;
        while (*(double *)sub_18F354FB4((unsigned __int16 *)(a1 + 8), v75) < v72)
        {
          if (++v75 >= *(unsigned __int16 *)(a1 + 10))
            goto LABEL_59;
        }
        if ((v75 & 0x80000000) == 0 && v75 < *(unsigned __int16 *)(a1 + 1218))
        {
          v81 = v77 < 0.0 && v76 > 0.0;
          if (v81)
          {
            v104 = *(unsigned __int16 *)(a1 + 10);
            if (!*(_WORD *)(a1 + 10))
            {
              if (qword_1ECEDEE88 != -1)
                dispatch_once(&qword_1ECEDEE88, &unk_1E2954EE8);
              v246 = off_1ECEDEE80;
              if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18F1DC000, v246, OS_LOG_TYPE_FAULT, "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 179,.", buf, 2u);
              }
              v51 = (unsigned __int16 *)(a1 + 8);
              if (sub_18F1FCA08(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1ECEDEE88 != -1)
                  dispatch_once(&qword_1ECEDEE88, &unk_1E2954EE8);
                *(_WORD *)v300 = 0;
                v247 = (char *)_os_log_send_and_compose_impl();
                sub_18F419700("Generic", 1, 0, 0, "T CMQueue<CMAccessoryStepDetector::AggAccelSample>::getComparison(int (*)(const T, const T), size_t) const [T = CMAccessoryStepDetector::AggAccelSample]", "CoreLocation: %s\n", v247);
                if (v247 != buf)
                  free(v247);
                v51 = (unsigned __int16 *)(a1 + 8);
              }
            }
            v105 = sub_18F354FB4(v51, v75);
            v82 = *(double *)v105;
            v83 = *(_DWORD *)(v105 + 8);
            v84 = *(_DWORD *)(v105 + 12);
            v80 = *(float *)(v105 + 16);
            if (v75 < v104)
            {
              v106 = v75;
              v107 = (unsigned __int16 *)(a1 + 8);
              do
              {
                v108 = sub_18F354FB4(v107, v106);
                if (*(float *)(v108 + 16) < v80)
                {
                  v83 = *(_DWORD *)(v108 + 8);
                  v84 = *(_DWORD *)(v108 + 12);
                  v80 = *(float *)(v108 + 16);
                  v82 = *(double *)v108;
                }
                ++v106;
                v107 = (unsigned __int16 *)(a1 + 8);
              }
              while (v104 != v106);
            }
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
            v109 = qword_1EE16D820;
            if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134218496;
              *(double *)&buf[4] = a3;
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = v82;
              *(_WORD *)&buf[22] = 2048;
              *(double *)&buf[24] = v80;
              _os_log_impl(&dword_18F1DC000, v109, OS_LOG_TYPE_DEBUG, "[AccessoryStepDetector] downInflectionDetected,time,%f,minTime,%f,minAggAccel,%f", buf, 0x20u);
            }
            if (sub_18F1FCA08(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE16D818 != -1)
                dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
              *(_DWORD *)v300 = 134218496;
              *(double *)&v300[4] = a3;
              *(_WORD *)&v300[12] = 2048;
              *(double *)&v300[14] = v82;
              v301 = 2048;
              v302 = v80;
              v248 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 2, "void CMAccessoryStepDetector::detectInflection(double, BOOL &, AggAccelSample &, BOOL &, AggAccelSample &) const", "CoreLocation: %s\n", v248);
              if (v248 != buf)
                free(v248);
            }
            v81 = 1;
          }
          else
          {
            v84 = 0;
            v82 = NAN;
            v83 = 0;
            v80 = 0.0;
          }
          if (v76 < 0.0 && v77 > 0.0)
          {
            if (*(_WORD *)(a1 + 10) && v75 < *(unsigned __int16 *)(a1 + 10))
            {
              v125 = v81;
              *(_QWORD *)buf = 0x3200000000;
              do
              {
                for (i = 0; i != 72; i += 24)
                {
                  v127 = &v300[i];
                  *(_QWORD *)v127 = 0x7FF8000000000000;
                  *((_QWORD *)v127 + 1) = 0;
                  *((_DWORD *)v127 + 4) = 0;
                }
                if (v75)
                  v128 = (v75 - 1);
                else
                  v128 = 0;
                *(_DWORD *)&v300[16] = *(_DWORD *)(sub_18F354FB4(v272, v128) + 16);
                *(_QWORD *)v300 = *(_QWORD *)sub_18F354FB4(v272, v128);
                *(_DWORD *)&v304[6] = *(_DWORD *)(sub_18F354FB4(v272, v75) + 16);
                v302 = *(double *)sub_18F354FB4(v272, v75);
                v129 = v75 + 1;
                v130 = *(unsigned __int16 *)(a1 + 10);
                if (v75 + 1 >= v130)
                {
                  v132 = v130 + *(unsigned __int16 *)(a1 + 8) - 1;
                  v133 = *(unsigned int *)(a1 + 12);
                  if (v132 < v133)
                    v133 = 0;
                  v131 = v67 + 24 * (v132 - v133);
                  LODWORD(v307) = *(_DWORD *)(v131 + 16);
                }
                else
                {
                  LODWORD(v307) = *(_DWORD *)(sub_18F354FB4(v272, v75 + 1) + 16);
                  v131 = sub_18F354FB4(v272, v75 + 1);
                }
                *(_QWORD *)&v305[4] = *(_QWORD *)v131;
                *(_QWORD *)v281 = sub_18F355388;
                sub_18F358594((uint64_t)v300, (unint64_t)&v308, (uint64_t (**)(__int128 *, __int128 *))v281, 2, 1);
                v302 = *(double *)sub_18F354FB4(v272, v75);
                sub_18F35539C((unsigned __int16 *)buf, (__int128 *)&v302);
                ++v75;
              }
              while (v129 < *(unsigned __int16 *)(a1 + 10));
              v134 = *(unsigned __int16 *)&buf[2] - 1;
              if (v134 < 2)
              {
                v137 = 1;
              }
              else
              {
                v135 = 1;
                v136 = -INFINITY;
                v137 = 1;
                do
                {
                  if (v136 <= *(float *)(sub_18F354FB4((unsigned __int16 *)buf, v135) + 16))
                  {
                    v136 = *(float *)(sub_18F354FB4((unsigned __int16 *)buf, v135) + 16);
                    v137 = v135;
                  }
                  ++v135;
                  v134 = *(unsigned __int16 *)&buf[2] - 1;
                }
                while (v134 > v135);
              }
              if (v134 >= v137 + 1)
                v192 = v137 + 1;
              else
                v192 = v134;
              v193 = sub_18F354FB4((unsigned __int16 *)buf, v192);
              v72 = *(double *)v193;
              v87 = *(_QWORD *)(v193 + 8);
              v190 = *(float *)(v193 + 16);
            }
            else
            {
              v125 = v81;
              if (qword_1EE16D818 != -1)
                dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
              v188 = qword_1EE16D820;
              if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
              {
                v189 = *(unsigned __int16 *)(a1 + 10);
                *(_DWORD *)buf = 134349312;
                *(_QWORD *)&buf[4] = v189;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v75;
                _os_log_impl(&dword_18F1DC000, v188, OS_LOG_TYPE_ERROR, "[AccessoryStepDetector] Error: queue size: %{public}zu start: %{public}d", buf, 0x12u);
              }
              v87 = 0;
              if (sub_18F1FCA08(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE16D818 != -1)
                  dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
                v253 = *(unsigned __int16 *)(a1 + 10);
                *(_DWORD *)v300 = 134349312;
                *(_QWORD *)&v300[4] = v253;
                *(_WORD *)&v300[12] = 1026;
                *(_DWORD *)&v300[14] = v75;
                v254 = (char *)_os_log_send_and_compose_impl();
                sub_18F419700("Generic", 1, 0, 0, "CMAccessoryStepDetector::AggAccelSample CMAccessoryStepDetector::calculateMaxFilteredMedianValue(const CMQueue<CMAccessoryStepDetector::AggAccelSample> &, const int) const", "CoreLocation: %s\n", v254);
                if (v254 != buf)
                  free(v254);
              }
              v190 = 0.0;
              v72 = NAN;
            }
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
            v88 = v190;
            v194 = qword_1EE16D820;
            if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
            {
              v195 = *(unsigned __int16 *)(a1 + 10);
              *(_DWORD *)buf = 134218752;
              *(double *)&buf[4] = a3;
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = v88;
              *(_WORD *)&buf[22] = 2048;
              *(double *)&buf[24] = v72;
              *(_WORD *)&buf[32] = 2048;
              *(_QWORD *)&buf[34] = v195;
              _os_log_impl(&dword_18F1DC000, v194, OS_LOG_TYPE_DEBUG, "[AccessoryStepDetector] upInflectionDetected,time,%f,maxMedianValue,%f,maxMedianTime,%f,bufSize,%zu", buf, 0x2Au);
            }
            if (sub_18F1FCA08(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE16D818 != -1)
                dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
              v249 = *(unsigned __int16 *)(a1 + 10);
              *(_DWORD *)v300 = 134218752;
              *(double *)&v300[4] = a3;
              *(_WORD *)&v300[12] = 2048;
              *(double *)&v300[14] = v88;
              v301 = 2048;
              v302 = v72;
              v303 = 2048;
              *(_QWORD *)v304 = v249;
              v250 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 2, "void CMAccessoryStepDetector::detectInflection(double, BOOL &, AggAccelSample &, BOOL &, AggAccelSample &) const", "CoreLocation: %s\n", v250);
              if (v250 != buf)
                free(v250);
            }
            v85 = *(_DWORD *)(a1 + 4836);
            v86 = 1;
            v89 = v72;
            v81 = v125;
            goto LABEL_68;
          }
LABEL_66:
          v85 = *(_DWORD *)(a1 + 4836);
          if (!v81)
          {
            *(_DWORD *)(a1 + 4840) = v85;
            v95 = a3;
            if (v85)
            {
              v96 = *(unsigned __int16 *)(a1 + 4938);
              if (*(_WORD *)(a1 + 4938))
              {
                v97 = v96 + *(unsigned __int16 *)(a1 + 4936) - 1;
                v98 = *(unsigned int *)(a1 + 4940);
                if (v97 < v98)
                  v98 = 0;
                v99 = *(double *)(a1 + 4936 + 8 * (v97 - v98) + 8);
                if (*(_WORD *)(a1 + 4906))
                {
                  v100 = *(unsigned __int16 *)(a1 + 4906) + (unint64_t)*(unsigned __int16 *)(a1 + 4904) - 1;
                  v101 = *(unsigned int *)(a1 + 4908);
                  if (v100 < v101)
                    v101 = 0;
                  v102 = a1 + 4904 + 8 * (v100 - v101);
                  if (v99 < *(double *)(v102 + 8))
                    v99 = *(double *)(v102 + 8);
                }
                if (a3 - v99 > 1.5)
                {
                  if (v85 == 2)
                    *(_WORD *)(a1 + 4938) = v96 - 1;
                  *(_DWORD *)(a1 + 4836) = 0;
                  *(_DWORD *)(a1 + 4844) = v85;
                  *(_BYTE *)a1 = 0;
                  sub_18F354F54((unsigned __int8 *)a1);
                  v95 = a3;
                  *(double *)(a1 + 5944) = a3;
                }
              }
            }
            if (*(double *)(a1 + 5944) + 2.5 < v95 && *(_BYTE *)a1 == 0)
            {
              sub_18F354F54((unsigned __int8 *)a1);
              *(double *)(a1 + 5944) = a3;
            }
            goto LABEL_282;
          }
          v86 = 0;
          v87 = 0;
          v88 = 0.0;
          v89 = NAN;
LABEL_68:
          if (v85 != 2)
          {
            if (v85 == 1)
            {
              if ((v86 & 1) == 0 && v82 > *(double *)(a1 + 4848) && v82 - *(double *)(a1 + 4872) > 0.25)
              {
                *(_DWORD *)(a1 + 4836) = 2;
                *(_DWORD *)(a1 + 4844) = 1;
                *(double *)(a1 + 4872) = v82;
                *(_DWORD *)(a1 + 4880) = v83;
                *(_DWORD *)(a1 + 4884) = v84;
                *(float *)(a1 + 4888) = v80;
                sub_18F355C24((unsigned __int16 *)(a1 + 4936), (_QWORD *)(a1 + 4872));
                goto LABEL_130;
              }
            }
            else
            {
              if (v85)
                __assert_rtn("updateFSM", "CMAccessoryStepDetector.m", 722, "false");
              if ((v86 & 1) == 0)
              {
                *(_DWORD *)(a1 + 4836) = 2;
                *(_DWORD *)(a1 + 4844) = 0;
                *(double *)(a1 + 4872) = v82;
                *(_DWORD *)(a1 + 4880) = v83;
                *(_DWORD *)(a1 + 4884) = v84;
                *(float *)(a1 + 4888) = v80;
                sub_18F355C24((unsigned __int16 *)(a1 + 4936), (_QWORD *)(a1 + 4872));
LABEL_130:
                if (qword_1EE16D818 != -1)
                  dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
                v110 = qword_1EE16D820;
                if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 134217984;
                  *(double *)&buf[4] = v82;
                  _os_log_impl(&dword_18F1DC000, v110, OS_LOG_TYPE_DEBUG, "[AccessoryStepDetector] startImpulse,time,%f", buf, 0xCu);
                }
                if (sub_18F1FCA08(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE16D818 != -1)
                    dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
                  *(_DWORD *)v300 = 134217984;
                  *(double *)&v300[4] = v82;
                  v244 = (char *)_os_log_send_and_compose_impl();
                  sub_18F419700("Generic", 1, 0, 2, "CMAccessoryStepDetector::Impulse CMAccessoryStepDetector::feedImuData(const CMRelDM::IMUData *const, const double)", "CoreLocation: %s\n", v244);
                  if (v244 != buf)
                    free(v244);
                }
                goto LABEL_283;
              }
            }
LABEL_282:
            v82 = NAN;
LABEL_283:
            *(_WORD *)a1 = 0;
            return v82;
          }
          if (v81)
          {
            if (vabdd_f64(*(double *)(a1 + 4872), v82) > 0.000001)
            {
              *(double *)(a1 + 4872) = v82;
              *(_DWORD *)(a1 + 4880) = v83;
              *(_DWORD *)(a1 + 4884) = v84;
              *(float *)(a1 + 4888) = v80;
              if (*(_WORD *)(a1 + 4938))
                --*(_WORD *)(a1 + 4938);
              sub_18F355C24((unsigned __int16 *)(a1 + 4936), (_QWORD *)(a1 + 4872));
              goto LABEL_130;
            }
            goto LABEL_282;
          }
          v261 = v88;
          v256 = v87;
          *(_BYTE *)(a1 + 1) = 1;
          if (!*(_WORD *)(a1 + 4906) || *(_BYTE *)(a1 + 3))
            goto LABEL_141;
          v111 = *(unsigned __int16 *)(a1 + 4906) + (unint64_t)*(unsigned __int16 *)(a1 + 4904) - 1;
          v112 = *(unsigned int *)(a1 + 4908);
          if (v111 < v112)
            v112 = 0;
          v113 = *(double *)(a1 + 4904 + 8 * (v111 - v112) + 8);
          if (v89 - v113 > 1.0)
LABEL_141:
            v113 = v89 + -1.0;
          v262 = v89;
          v258 = v89 - *(double *)(a1 + 4872);
          v259 = v89 - *(double *)(a1 + 4848);
          *(double *)v281 = v259;
          *(double *)&v281[8] = v258;
          v277[0] = 0.0;
          LODWORD(v278) = 0;
          v114 = *(float *)(a1 + 4888);
          v115 = (double *)sub_18F354FB4(v272, *(unsigned __int16 *)(a1 + 10) - 1);
          v116 = *(double *)(a1 + 4872);
          if (*v115 > v116)
          {
            sub_18F355408(a1, v277, &v278, v116, 0.0);
            v114 = *(float *)(sub_18F354FB4(v272, SLODWORD(v277[0])) + 16);
          }
          v117 = (double *)sub_18F354FB4(v272, *(unsigned __int16 *)(a1 + 10) - 1);
          v118 = v262;
          v119 = v88;
          if (*v117 > v262)
          {
            v277[0] = 0.0;
            sub_18F355408(a1, v277, &v278, v262, 0.0);
            v119 = *(float *)(sub_18F354FB4(v272, SLODWORD(v277[0])) + 16);
            v118 = v262;
          }
          v257 = v119 - v114;
          *(double *)&v281[16] = v257;
          *(_DWORD *)buf = 0;
          *(_DWORD *)v300 = 0;
          sub_18F355408(a1, buf, v300, v113, v118);
          if (*(int *)buf <= 1)
            v120 = 1;
          else
            v120 = *(unsigned int *)buf;
          v121 = (v120 - 1);
          v122 = *(_DWORD *)v300;
          v264 = *(_DWORD *)v300;
          v260 = v120;
          if ((int)v121 <= *(int *)v300)
          {
            v138 = v120 - 1;
            v139 = *(unsigned int *)v300 + 1;
            v140 = 0;
            v141 = 0.0;
            v142 = (float32x2_t)vdup_n_s32(0x411CE80Au);
            v124 = 0;
            v143 = 0;
            do
            {
              v144 = 0.02;
              if (v138)
              {
                v145 = *(double *)sub_18F3554D0((unsigned __int16 *)(a1 + 1216), v138);
                v144 = v145 - *(double *)sub_18F3554D0((unsigned __int16 *)(a1 + 1216), v138 - 1);
              }
              v146 = sub_18F3556CC((unsigned __int16 *)(a1 + 2424), v138);
              v147.i32[0] = *(_DWORD *)(v146 + 16);
              v148 = v144;
              v147.i32[1] = *(_DWORD *)(v146 + 8);
              v265 = v147;
              v269 = v148;
              LODWORD(v72) = *(_DWORD *)sub_18F3410E0((unsigned __int16 *)(a1 + 4448), v138);
              v149 = *(float32x2_t *)(sub_18F3554D0((unsigned __int16 *)(a1 + 1216), v138) + 8);
              v150 = (float32x2_t *)sub_18F3554D0((unsigned __int16 *)(a1 + 1216), v138);
              v140 = vadd_f32(v140, vmul_n_f32(v265, v269));
              v141 = v141 + *(float *)&v72 * v144;
              v151 = vmul_n_f32(v143, v269);
              v143 = vadd_f32(v143, vmul_n_f32(vmul_f32(v149, v142), v269));
              v124 = vadd_f32(v124, vadd_f32(v151, vmul_n_f32(vmul_n_f32(vmul_f32(vmul_f32(v150[1], (float32x2_t)0x3F0000003F000000), v142), v269), v269)));
              ++v138;
            }
            while (v139 != v138);
            v123 = vmul_f32(v140, (float32x2_t)vdup_n_s32(0x42652EE1u));
            v268 = (float)(v141 * 57.296);
            v122 = v264;
          }
          else
          {
            v123 = 0;
            v268 = 0.0;
            v124 = 0;
          }
          v270 = *(double *)sub_18F3554D0((unsigned __int16 *)(a1 + 1216), v122);
          v152 = *(double *)sub_18F3554D0((unsigned __int16 *)(a1 + 1216), v121);
          v263 = vcvtq_f64_f32(vabs_f32(v123));
          *(float64x2_t *)&v281[24] = v263;
          v266 = sqrtf(vaddv_f32(vmul_f32(v124, v124)));
          *(double *)&v281[40] = v266;
          buf[0] = 1;
          *(_QWORD *)&buf[20] = 0;
          *(_QWORD *)&buf[12] = 0;
          *(_QWORD *)&buf[28] = 0x400000000;
          v153 = *(unsigned __int16 *)(a1 + 1218);
          v154 = 1.0;
          if (*(_DWORD *)(a1 + 1220) == v153)
          {
            v154 = 0.0;
            if (v153 >= 2)
            {
              v155 = 1;
              do
              {
                *(_DWORD *)v300 = 0;
                LODWORD(v72) = *(_DWORD *)(sub_18F3554D0((unsigned __int16 *)(a1 + 1216), v155) + 16);
                v156 = v155 - 1;
                *(float *)v300 = *(float *)&v72 - *(float *)(sub_18F3554D0((unsigned __int16 *)(a1 + 1216), v156) + 16);
                sub_18F33D300((uint64_t)buf, (float *)v300);
                if (buf[0])
                  sub_18F33FB38((uint64_t)buf);
                v157 = *(float *)&buf[8];
                if (*(float *)&buf[8] < 0.0)
                  v157 = 0.0;
                if (v157 <= 0.003)
                  v158 = 0.0;
                else
                  v158 = v157 + -0.003;
                v154 = v154 + v158;
                v155 = v156 + 2;
              }
              while (v155 < *(unsigned __int16 *)(a1 + 1218));
            }
          }
          v159 = *(unsigned __int16 *)(a1 + 3634);
          v160 = 0.0;
          v161 = v264;
          if (*(_DWORD *)(a1 + 3636) == (_DWORD)v159 && (unint64_t)(v159 - 17) <= 0xFFFFFFFFFFFFFFF6)
          {
            v162 = 0;
            v163 = 8;
            v164 = 9;
            do
            {
              v165 = *(float *)sub_18F3410E0((unsigned __int16 *)(a1 + 3632), v163);
              v166 = v164;
              v167 = 7;
              while (1)
              {
                v168 = 0.0;
                if (v165 < *(float *)sub_18F3410E0((unsigned __int16 *)(a1 + 3632), v162 + v167)
                  || v165 < *(float *)sub_18F3410E0((unsigned __int16 *)(a1 + 3632), v166))
                {
                  break;
                }
                --v167;
                ++v166;
                if (v167 == 3)
                {
                  v169 = 0;
                  v170 = 0;
                  v171 = v165 + -0.5;
                  v172 = v164;
                  v173 = 7;
                  while (1)
                  {
                    v170 |= v171 > *(float *)sub_18F3410E0((unsigned __int16 *)(a1 + 3632), v162 + v173);
                    v169 |= v171 > *(float *)sub_18F3410E0((unsigned __int16 *)(a1 + 3632), v172);
                    if ((v170 & v169 & 1) != 0)
                      break;
                    --v173;
                    ++v172;
                    if (v173 == -1)
                      goto LABEL_202;
                  }
                  v168 = v165;
                  break;
                }
              }
LABEL_202:
              v161 = v264;
              v160 = v160 + v168;
              ++v163;
              ++v164;
              ++v162;
            }
            while (v163 < (unint64_t)*(unsigned __int16 *)(a1 + 3634) - 8);
          }
          v174 = 0;
          v175 = (double)(v161 - v260 + 2) / (v270 - v152);
          v176 = -1.0;
          if (v154 < 1.0)
            v176 = v160;
          v177 = v154;
          v178 = v176;
          *(double *)&v282 = v154;
          *((double *)&v282 + 1) = v176;
          v179 = 1.0;
          do
          {
            LOBYTE(v180) = 0;
            while (1)
            {
              v180 = v180;
              if (*(double *)(*(_QWORD *)(a1 + 8 * v174 + 5864) + 8 * v180) > *(double *)&v281[8 * v174])
                break;
              LOBYTE(v180) = v180 + 1;
              if (dword_18F504788[v174] <= (int)v180)
              {
                v180 = v180;
                break;
              }
            }
            v179 = v179 * *(double *)(*(_QWORD *)(a1 + 8 * v174++ + 5800) + 8 * v180);
          }
          while (v174 != 8);
          if (qword_1EE16D818 != -1)
            dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
          v181 = qword_1EE16D820;
          if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134221056;
            *(double *)&buf[4] = a3;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v179;
            *(_WORD *)&buf[22] = 2048;
            *(double *)&buf[24] = v259;
            *(_WORD *)&buf[32] = 2048;
            *(double *)&buf[34] = v258;
            v284 = 2048;
            *(double *)v285 = v257;
            *(_WORD *)&v285[8] = 2048;
            *(float64_t *)&v285[10] = v263.f64[0];
            v286 = 2048;
            v287 = v263.f64[1];
            v288 = 2048;
            v289 = v266;
            v290 = 2048;
            v291 = v268;
            v292 = 2048;
            v293 = a3;
            v294 = 2048;
            v295 = v175;
            v296 = 2048;
            v297 = v177;
            v298 = 2048;
            v299 = v178;
            _os_log_impl(&dword_18F1DC000, v181, OS_LOG_TYPE_DEBUG, "[AccessoryStepDetector] stepLLR,%f,llr,%f,kTimeSinceLastStepSec,%f,kImpulseDurationSec,%f,kDeltaInertialZVel,%f,kThetaRollFaceDegrees,%f,kThetaPitchFaceDegrees,%f,kHorizontalDisplacement,%f,yawRotationAmountDegrees,%f,sensorTime,%f,bufferSampleRate,%f,peakiness,%f,bobbiness,%f\n", buf, 0x84u);
          }
          if (sub_18F1FCA08(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
            *(_DWORD *)v300 = 134221056;
            *(double *)&v300[4] = a3;
            *(_WORD *)&v300[12] = 2048;
            *(double *)&v300[14] = v179;
            v301 = 2048;
            v302 = v259;
            v303 = 2048;
            *(double *)v304 = v258;
            *(_WORD *)&v304[8] = 2048;
            *(double *)v305 = v257;
            *(_WORD *)&v305[8] = 2048;
            *(float64_t *)&v305[10] = v263.f64[0];
            v306 = 2048;
            v307 = v263.f64[1];
            v308 = 2048;
            v309 = v266;
            v310 = 2048;
            v311 = v268;
            v312 = 2048;
            v313 = a3;
            v314 = 2048;
            v315 = v175;
            v316 = 2048;
            v317 = v177;
            v318 = 2048;
            v319 = v178;
            v245 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 2, "double CMAccessoryStepDetector::computeStepLikelihood(const AggAccelSample &, const double, const double, const double) const", "CoreLocation: %s\n", v245);
            if (v245 != buf)
              free(v245);
          }
          if (v179 > 1.0)
          {
            v182 = v262;
            if (*(_BYTE *)(a1 + 3))
            {
              v183 = vabdd_f64(v261, *(float *)(a1 + 4888));
              if (v183 <= 0.4)
                v184 = -1;
              else
                v184 = 2;
              *(_QWORD *)v300 = 0x3200000000;
              if (*(_WORD *)(a1 + 4938))
              {
                v185 = *(unsigned __int16 *)(a1 + 4938) + (unint64_t)*(unsigned __int16 *)(a1 + 4936) - 1;
                v186 = *(unsigned int *)(a1 + 4940);
                if (v185 < v186)
                  v186 = 0;
                v187 = *(double *)(a1 + 4936 + 8 * (v185 - v186) + 8);
              }
              else
              {
                v187 = 0.0;
              }
              v196 = (unsigned __int16 *)(a1 + 8);
              v271 = v183;
              if (*(_WORD *)(a1 + 10))
              {
                v197 = 0;
                v198 = 0;
                v199 = 0.0;
                do
                {
                  if (v187 + -0.4 <= *(double *)sub_18F354FB4(v196, v197)
                    && *(double *)sub_18F354FB4(v272, v197) <= v187)
                  {
                    v196 = (unsigned __int16 *)(a1 + 8);
                    v200 = *(float *)(sub_18F354FB4(v272, v197) + 8);
                    v201 = *(float *)(sub_18F354FB4(v272, v197) + 12);
                    *(_QWORD *)buf = __PAIR64__(*(_DWORD *)(sub_18F354FB4(v272, v197) + 16), COERCE_UNSIGNED_INT(sqrtf((float)(v200 * v200) + (float)(v201 * v201))));
                    *(_DWORD *)&buf[8] = 0;
                    sub_18F33FACC((unsigned __int16 *)v300, (uint64_t)buf);
                    v198 = vadd_f32(v198, *(float32x2_t *)buf);
                    v199 = v199 + *(float *)&buf[8];
                  }
                  else
                  {
                    v196 = (unsigned __int16 *)(a1 + 8);
                  }
                  ++v197;
                }
                while (v197 < *(unsigned __int16 *)(a1 + 10));
                v202 = *(unsigned __int16 *)&v300[2];
                v203 = *(unsigned __int16 *)v300;
                v204 = *(unsigned int *)&v300[4];
                LODWORD(v72) = *(_DWORD *)&v300[12 * *(unsigned __int16 *)v300 + 8];
              }
              else
              {
                v202 = 0;
                v203 = 0;
                v198 = 0;
                v199 = 0.0;
                v204 = 50;
              }
              v205 = v203 + v202 - 1;
              if (v205 < v204)
                v204 = 0;
              v206 = (float *)&v300[12 * (v205 - v204) + 8];
              v208 = *v206;
              v207 = v206[1];
              v273 = *(float *)&v300[12 * v203 + 12];
              v209 = 0.0;
              v210 = v202;
              if (v202 >= 2)
              {
                v267 = *v206;
                v211 = v206[1];
                v212 = LODWORD(v72);
                v213 = 1;
                do
                {
                  v214 = *(float *)sub_18F33FF64((unsigned __int16 *)v300, v213);
                  v215 = v213 - 1;
                  v216 = *(float *)sub_18F33FF64((unsigned __int16 *)v300, v215++);
                  v217 = *(float *)(sub_18F33FF64((unsigned __int16 *)v300, v215--) + 4);
                  v218 = sub_18F33FF64((unsigned __int16 *)v300, v215);
                  v209 = v209
                       + sqrt((float)(v214 - v216) * (float)(v214 - v216)+ (float)(v217 - *(float *)(v218 + 4)) * (float)(v217 - *(float *)(v218 + 4)));
                  v210 = *(unsigned __int16 *)&v300[2];
                  v213 = v215 + 2;
                }
                while (v213 < *(unsigned __int16 *)&v300[2]);
                LODWORD(v72) = v212;
                v207 = v211;
                v208 = v267;
              }
              v219.i32[1] = 0;
              memset(v281, 0, 36);
              if (v210)
              {
                v220 = 0;
                *(float *)v219.i32 = (float)v202;
                v221 = vdiv_f32(v198, (float32x2_t)vdup_lane_s32(v219, 0));
                v222 = v199 / (float)v202;
                do
                {
                  v223 = (float32x2_t *)sub_18F33FF64((unsigned __int16 *)v300, v220);
                  v224 = v223[1].f32[0] - v222;
                  v278 = (_DWORD *)vsub_f32(*v223, v221);
                  *(float *)&v279 = v224;
                  sub_18F3598C4((uint64_t)&v278, (uint64_t)buf);
                  for (j = 0; j != 9; ++j)
                    *(float *)&v281[4 * j] = sub_18F359948((uint64_t)buf, j) + *(float *)&v281[4 * j];
                  ++v220;
                }
                while (v220 < *(unsigned __int16 *)&v300[2]);
              }
              *(_OWORD *)buf = *(_OWORD *)v281;
              *(_OWORD *)&buf[16] = *(_OWORD *)&v281[16];
              *(_DWORD *)&buf[32] = *(_DWORD *)&v281[32];
              sub_18F359B20((uint64_t)buf, (uint64_t)v277);
              v280[0] = v226;
              v280[1] = v227;
              v280[2] = v228;
              v278 = v280;
              v279 = v277;
              sub_18F35A13C((uint64_t *)&v278, 0, 1uLL);
              sub_18F35A13C((uint64_t *)&v278, 0, 2uLL);
              sub_18F35A13C((uint64_t *)&v278, 1uLL, 2uLL);
              v229 = sqrtf((float)((float)(v208 - *(float *)&v72) * (float)(v208 - *(float *)&v72))+ (float)((float)(v207 - v273) * (float)(v207 - v273)));
              v230 = fabsf(atanf(v277[1] / v277[0]));
              v231 = v209 / v229 >= 1.22;
              if (v230 >= 0.785398157)
                v231 = 1;
              v232 = v271;
              v233 = v271 <= 0.35 || v231;
              if (!v233)
                v184 = 1;
              if (qword_1EE16D818 != -1)
                dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
              v234 = qword_1EE16D820;
              if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134219264;
                *(double *)&buf[4] = v209;
                *(_WORD *)&buf[12] = 2048;
                *(double *)&buf[14] = v229;
                *(_WORD *)&buf[22] = 2048;
                *(double *)&buf[24] = v230 * 57.2957802;
                *(_WORD *)&buf[32] = 2048;
                *(double *)&buf[34] = v271;
                v284 = 1024;
                *(_DWORD *)v285 = v184;
                *(_WORD *)&v285[4] = 2048;
                *(double *)&v285[6] = a3;
                _os_log_impl(&dword_18F1DC000, v234, OS_LOG_TYPE_DEBUG, "[AccessoryStepDetector] arcLength,%f,curveDistance,%f,firstLoftAngleDegrees,%f,aggAccelZDelta,%f,isFirstStep, %d,sensorTime,%f\n", buf, 0x3Au);
              }
              v235 = sub_18F1FCA08(115, 2);
              v182 = v262;
              if (v235)
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EE16D818 != -1)
                  dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
                *(_DWORD *)v281 = 134219264;
                *(double *)&v281[4] = v209;
                *(_WORD *)&v281[12] = 2048;
                *(double *)&v281[14] = v229;
                *(_WORD *)&v281[22] = 2048;
                *(double *)&v281[24] = v230 * 57.2957802;
                *(_WORD *)&v281[32] = 2048;
                *(double *)&v281[34] = v271;
                *(_WORD *)&v281[42] = 1024;
                *(_DWORD *)&v281[44] = v184;
                LOWORD(v282) = 2048;
                *(double *)((char *)&v282 + 2) = a3;
                v252 = (char *)_os_log_send_and_compose_impl();
                sub_18F419700("Generic", 1, 0, 2, "int CMAccessoryStepDetector::isFirstStep(const double, const double, const double) const", "CoreLocation: %s\n", v252);
                if (v252 != buf)
                  free(v252);
                v182 = v262;
                v232 = v271;
              }
              v236 = v233 ^ 1;
              *(_DWORD *)(a1 + 4844) = 2;
              if (v232 > 0.4)
                v236 = 1;
              v191 = v261;
              if ((v236 & 1) == 0)
                goto LABEL_280;
            }
            else
            {
              *(_DWORD *)(a1 + 4844) = 2;
              v191 = v261;
            }
            *(_DWORD *)(a1 + 4836) = 1;
            *(double *)(a1 + 4848) = v182;
            *(_QWORD *)(a1 + 4856) = v256;
            *(float *)(a1 + 4864) = v191;
            *(double *)(a1 + 4896) = v182;
            sub_18F355C24((unsigned __int16 *)(a1 + 4904), (_QWORD *)(a1 + 4896));
            if (*(_DWORD *)(a1 + 4908) == *(unsigned __int16 *)(a1 + 4906))
            {
              v238 = *(double *)(a1 + 4896) - *(double *)(a1 + 4904 + 8 * *(unsigned __int16 *)(a1 + 4904) + 8);
              if (v238 < 0.0)
              {
                if (qword_1EE16D818 != -1)
                  dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
                v239 = qword_1EE16D820;
                if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_18F1DC000, v239, OS_LOG_TYPE_ERROR, "[AccessoryStepDetector] Steps in _endImpulseTimestampHistory have times going backwards", buf, 2u);
                }
                if (sub_18F1FCA08(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EE16D818 != -1)
                    dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
                  *(_WORD *)v300 = 0;
                  v255 = (char *)_os_log_send_and_compose_impl();
                  sub_18F419700("Generic", 1, 0, 0, "CMAccessoryStepDetector::Impulse CMAccessoryStepDetector::feedImuData(const CMRelDM::IMUData *const, const double)", "CoreLocation: %s\n", v255);
                  if (v255 != buf)
                    free(v255);
                }
              }
              if (v238 <= 5.0)
              {
                *(_BYTE *)a1 = 1;
                sub_18F354F54((unsigned __int8 *)a1);
                *(double *)(a1 + 5944) = a3;
              }
            }
            if (qword_1EE16D818 != -1)
              dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
            v240 = qword_1EE16D820;
            if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134217984;
              *(double *)&buf[4] = v262;
              _os_log_impl(&dword_18F1DC000, v240, OS_LOG_TYPE_DEBUG, "[AccessoryStepDetector] endImpulse,time,%f", buf, 0xCu);
            }
            if (sub_18F1FCA08(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1EE16D818 != -1)
                dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
              *(_DWORD *)v300 = 134217984;
              *(double *)&v300[4] = v262;
              v251 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 2, "CMAccessoryStepDetector::Impulse CMAccessoryStepDetector::feedImuData(const CMRelDM::IMUData *const, const double)", "CoreLocation: %s\n", v251);
              if (v251 != buf)
                free(v251);
            }
            v82 = NAN;
            goto LABEL_283;
          }
          *(_DWORD *)(a1 + 4844) = 2;
LABEL_280:
          *(_DWORD *)(a1 + 4836) = 0;
          if (*(_WORD *)(a1 + 4938))
            --*(_WORD *)(a1 + 4938);
          goto LABEL_282;
        }
      }
      else
      {
LABEL_59:
        LODWORD(v75) = -1;
      }
      if (qword_1EE16D818 != -1)
        dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
      v78 = qword_1EE16D820;
      if (os_log_type_enabled((os_log_t)qword_1EE16D820, OS_LOG_TYPE_ERROR))
      {
        v79 = *(unsigned __int16 *)(a1 + 1218);
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)&buf[4] = v75;
        *(_WORD *)&buf[8] = 2050;
        *(_QWORD *)&buf[10] = v79;
        _os_log_impl(&dword_18F1DC000, v78, OS_LOG_TYPE_ERROR, "[AccessoryStepDetector] Error: Spatial sample buffer is starting at the end of the inertial buffer. startIndex:%{public}d size:%{public}zu", buf, 0x12u);
      }
      v80 = 0.0;
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D818 != -1)
          dispatch_once(&qword_1EE16D818, &unk_1E2952DC8);
        v242 = *(unsigned __int16 *)(a1 + 1218);
        *(_DWORD *)v300 = 67240448;
        *(_DWORD *)&v300[4] = v75;
        *(_WORD *)&v300[8] = 2050;
        *(_QWORD *)&v300[10] = v242;
        v243 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "void CMAccessoryStepDetector::detectInflection(double, BOOL &, AggAccelSample &, BOOL &, AggAccelSample &) const", "CoreLocation: %s\n", v243);
        if (v243 != buf)
          free(v243);
      }
      v81 = 0;
      v82 = NAN;
      v83 = 0;
      v84 = 0;
      goto LABEL_66;
    }
  }
  return NAN;
}

os_log_t sub_18F358568()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1EE16D820 = (uint64_t)result;
  return result;
}

void sub_18F358594(uint64_t a1, unint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  __int128 v19;
  uint64_t (*v20)(__int128 *, __int128 *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t (*v25)(__int128 *, __int128 *);
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t (*v30)(__int128 *, __int128 *);
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t (*v34)(__int128 *, __int128 *);
  uint64_t v35;
  int v36;
  unint64_t v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t (*v44)(__int128 *, __int128 *);
  uint64_t v45;
  __int128 v46;
  uint64_t (*v47)(__int128 *, __int128 *);
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  BOOL v51;
  __int128 v52;
  uint64_t (*v53)(__int128 *, __int128 *);
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t (*v58)(__int128 *, __int128 *);
  uint64_t v59;
  int v60;
  unint64_t v61;
  uint64_t (*v62)(__int128 *, __int128 *);
  uint64_t v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t (*v67)(__int128 *, __int128 *);
  uint64_t v68;
  int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t (*v75)(__int128 *, __int128 *);
  uint64_t v76;
  __int128 v77;
  uint64_t (*v78)(__int128 *, __int128 *);
  __int128 *v79;
  __int128 v80;
  __int128 v81;
  uint64_t (*v82)(__int128 *, __int128 *);
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  BOOL v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(__int128 *, __int128 *);
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(__int128 *, __int128 *);
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  int64_t v104;
  int64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (*v108)(__int128 *, __int128 *);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(__int128 *, __int128 *);
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(__int128 *, __int128 *);
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)(__int128 *, __int128 *);
  uint64_t v124;
  __int128 v125;
  int64_t v126;
  _OWORD *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t (*v136)(__int128 *, __int128 *);
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t (*v145)(__int128 *, __int128 *);
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  __int128 v150;
  uint64_t (*v151)(__int128 *, __int128 *);
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  uint64_t v156;
  uint64_t (*v157)(__int128 *, __int128 *);
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t (*v163)(__int128 *, __int128 *);
  uint64_t v164;
  int v165;
  __int128 v166;
  __int128 *v167;
  __int128 *v168;
  int64_t v169;
  unint64_t v170;
  _OWORD *v171;
  __int128 v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  __int128 v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  __int128 v202;
  uint64_t v203;

uint64_t sub_18F3591A8(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  uint64_t (*v8)(__int128 *, __int128 *);
  int v9;
  uint64_t (*v10)(__int128 *, __int128 *);
  uint64_t result;
  __int128 v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t (*v18)(__int128 *, __int128 *);
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t (*v26)(__int128 *, __int128 *);
  __int128 v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;

  v8 = *a4;
  v47 = *a2;
  v48 = *((_QWORD *)a2 + 2);
  v45 = *a1;
  v46 = *((_QWORD *)a1 + 2);
  v9 = v8(&v47, &v45);
  v10 = *a4;
  if (v9)
  {
    v35 = *a3;
    v36 = *((_QWORD *)a3 + 2);
    v33 = *a2;
    v34 = *((_QWORD *)a2 + 2);
    result = v10(&v35, &v33);
    if ((_DWORD)result)
    {
      v12 = *a1;
      v13 = *((_QWORD *)a1 + 2);
      v14 = *((_DWORD *)a3 + 4);
      *a1 = *a3;
      *((_DWORD *)a1 + 4) = v14;
    }
    else
    {
      v23 = *a1;
      v24 = *((_QWORD *)a1 + 2);
      v25 = *((_DWORD *)a2 + 4);
      *a1 = *a2;
      *((_DWORD *)a1 + 4) = v25;
      *((_DWORD *)a2 + 4) = v24;
      *a2 = v23;
      v26 = *a4;
      v32 = *((_QWORD *)a3 + 2);
      v31 = *a3;
      v27 = *a2;
      v30 = *((_QWORD *)a2 + 2);
      v29 = v27;
      result = v26(&v31, &v29);
      if (!(_DWORD)result)
        return result;
      v12 = *a2;
      v13 = *((_QWORD *)a2 + 2);
      v28 = *((_DWORD *)a3 + 4);
      *a2 = *a3;
      *((_DWORD *)a2 + 4) = v28;
    }
    *((_DWORD *)a3 + 4) = v13;
    *a3 = v12;
  }
  else
  {
    v43 = *a3;
    v44 = *((_QWORD *)a3 + 2);
    v41 = *a2;
    v42 = *((_QWORD *)a2 + 2);
    result = v10(&v43, &v41);
    if ((_DWORD)result)
    {
      v15 = *a2;
      v16 = *((_QWORD *)a2 + 2);
      v17 = *((_DWORD *)a3 + 4);
      *a2 = *a3;
      *((_DWORD *)a2 + 4) = v17;
      *((_DWORD *)a3 + 4) = v16;
      *a3 = v15;
      v18 = *a4;
      v40 = *((_QWORD *)a2 + 2);
      v39 = *a2;
      v19 = *a1;
      v38 = *((_QWORD *)a1 + 2);
      v37 = v19;
      result = v18(&v39, &v37);
      if ((_DWORD)result)
      {
        v20 = *a1;
        v21 = *((_QWORD *)a1 + 2);
        v22 = *((_DWORD *)a2 + 4);
        *a1 = *a2;
        *((_DWORD *)a1 + 4) = v22;
        *((_DWORD *)a2 + 4) = v21;
        *a2 = v20;
      }
    }
  }
  return result;
}

BOOL sub_18F359388(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t (*v8)(__int128 *, __int128 *);
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t (*v17)(__int128 *, __int128 *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(__int128 *, __int128 *);
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *a3;
      v35 = *(_OWORD *)(a2 - 24);
      v36 = *(_QWORD *)(a2 - 8);
      v33 = *(_OWORD *)a1;
      v34 = *(_QWORD *)(a1 + 16);
      if (v8(&v35, &v33))
      {
        v9 = a2 - 24;
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(a1 + 16);
        v12 = *(_DWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(a1 + 16) = v12;
        *(_DWORD *)(v9 + 16) = v11;
        *(_OWORD *)v9 = v10;
      }
      return 1;
    case 3uLL:
      sub_18F3591A8((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_18F3595D4(a1, a1 + 24, a1 + 48, (__int128 *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      sub_18F35971C(a1, a1 + 24, a1 + 48, a1 + 72, (__int128 *)(a2 - 24), a3);
      return 1;
    default:
      v13 = a1 + 48;
      sub_18F3591A8((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a3);
      v14 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v17 = *a3;
    v31 = *(_OWORD *)v14;
    v32 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v13 + 16);
    v29 = *(_OWORD *)v13;
    v30 = v18;
    if (v17(&v31, &v29))
    {
      v27 = *(_OWORD *)v14;
      v28 = *(_QWORD *)(v14 + 16);
      v19 = v15;
      while (1)
      {
        v20 = a1 + v19;
        *(_OWORD *)(v20 + 72) = *(_OWORD *)(a1 + v19 + 48);
        *(_DWORD *)(v20 + 88) = *(_DWORD *)(a1 + v19 + 64);
        if (v19 == -48)
          break;
        v21 = *a3;
        v25 = v27;
        v26 = v28;
        v23 = *(_OWORD *)(v20 + 24);
        v24 = *(_QWORD *)(v20 + 40);
        v19 -= 24;
        if (!v21(&v25, &v23))
        {
          v22 = a1 + v19 + 72;
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      *(_OWORD *)v22 = v27;
      *(_DWORD *)(v22 + 16) = v28;
      if (++v16 == 8)
        return v14 + 24 == a2;
    }
    v13 = v14;
    v15 += 24;
    v14 += 24;
    if (v14 == a2)
      return 1;
  }
}

__n128 sub_18F3595D4(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  uint64_t (*v10)(__int128 *, __int128 *);
  __n128 result;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t (*v15)(__int128 *, __int128 *);
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t (*v20)(__int128 *, __int128 *);
  __int128 v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;

  sub_18F3591A8((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  v10 = *a5;
  v34 = *a4;
  v35 = *((_QWORD *)a4 + 2);
  v32 = *(_OWORD *)a3;
  v33 = *(_QWORD *)(a3 + 16);
  if (v10(&v34, &v32))
  {
    v12 = *(_OWORD *)a3;
    v13 = *(_QWORD *)(a3 + 16);
    v14 = *((_DWORD *)a4 + 4);
    *(_OWORD *)a3 = *a4;
    *(_DWORD *)(a3 + 16) = v14;
    *((_DWORD *)a4 + 4) = v13;
    *a4 = v12;
    v15 = *a5;
    v31 = *(_QWORD *)(a3 + 16);
    v30 = *(_OWORD *)a3;
    v16 = *(_OWORD *)a2;
    v29 = *(_QWORD *)(a2 + 16);
    v28 = v16;
    if (v15(&v30, &v28))
    {
      v17 = *(_OWORD *)a2;
      v18 = *(_QWORD *)(a2 + 16);
      v19 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v19;
      *(_DWORD *)(a3 + 16) = v18;
      *(_OWORD *)a3 = v17;
      v20 = *a5;
      v27 = *(_QWORD *)(a2 + 16);
      v26 = *(_OWORD *)a2;
      v21 = *(_OWORD *)a1;
      v25 = *(_QWORD *)(a1 + 16);
      v24 = v21;
      if (v20(&v26, &v24))
      {
        result = *(__n128 *)a1;
        v22 = *(_QWORD *)(a1 + 16);
        v23 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v23;
        *(_DWORD *)(a2 + 16) = v22;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_18F35971C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  uint64_t (*v12)(__int128 *, __int128 *);
  __n128 result;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t (*v17)(__int128 *, __int128 *);
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t (*v22)(__int128 *, __int128 *);
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  int v26;
  uint64_t (*v27)(__int128 *, __int128 *);
  __n128 v28;
  uint64_t v29;
  int v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;

  sub_18F3595D4(a1, a2, a3, (__int128 *)a4, a6);
  v12 = *a6;
  v45 = *a5;
  v46 = *((_QWORD *)a5 + 2);
  v43 = *(_OWORD *)a4;
  v44 = *(_QWORD *)(a4 + 16);
  if (v12(&v45, &v43))
  {
    v14 = *(_OWORD *)a4;
    v15 = *(_QWORD *)(a4 + 16);
    v16 = *((_DWORD *)a5 + 4);
    *(_OWORD *)a4 = *a5;
    *(_DWORD *)(a4 + 16) = v16;
    *((_DWORD *)a5 + 4) = v15;
    *a5 = v14;
    v17 = *a6;
    v42 = *(_QWORD *)(a4 + 16);
    v41 = *(_OWORD *)a4;
    v18 = *(_OWORD *)a3;
    v40 = *(_QWORD *)(a3 + 16);
    v39 = v18;
    if (v17(&v41, &v39))
    {
      v19 = *(_OWORD *)a3;
      v20 = *(_QWORD *)(a3 + 16);
      v21 = *(_DWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_DWORD *)(a3 + 16) = v21;
      *(_DWORD *)(a4 + 16) = v20;
      *(_OWORD *)a4 = v19;
      v22 = *a6;
      v38 = *(_QWORD *)(a3 + 16);
      v37 = *(_OWORD *)a3;
      v23 = *(__n128 *)a2;
      v36 = *(_QWORD *)(a2 + 16);
      v35 = v23;
      if (v22(&v37, (__int128 *)&v35))
      {
        v24 = *(__n128 *)a2;
        v25 = *(_QWORD *)(a2 + 16);
        v26 = *(_DWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_DWORD *)(a2 + 16) = v26;
        *(_DWORD *)(a3 + 16) = v25;
        *(__n128 *)a3 = v24;
        v27 = *a6;
        v34 = *(_QWORD *)(a2 + 16);
        v33 = *(__n128 *)a2;
        v28 = *(__n128 *)a1;
        v32 = *(_QWORD *)(a1 + 16);
        v31 = v28;
        if (v27((__int128 *)&v33, (__int128 *)&v31))
        {
          result = *(__n128 *)a1;
          v29 = *(_QWORD *)(a1 + 16);
          v30 = *(_DWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_DWORD *)(a1 + 16) = v30;
          *(_DWORD *)(a2 + 16) = v29;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

float *sub_18F3598C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t i;
  unint64_t j;
  float v6;
  float v7;
  float *result;

  for (i = 0; i != 3; ++i)
  {
    for (j = 0; j != 3; ++j)
    {
      v6 = sub_18F3551B0(a1, i);
      v7 = v6 * sub_18F3551B0(a1, j);
      result = (float *)sub_18F3558C8(a2, i, j);
      *result = v7;
    }
  }
  return result;
}

float sub_18F359948(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  char *v6;
  uint8_t buf[4];
  unint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954EE8);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v8 = a2;
      v9 = 2048;
      v10 = 9;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: ldx < M*N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 84,invalid element %zu >= %zu.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954EE8);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "T CMMatrix<float, 3>::operator[](size_t) const [T = float, M = 3, N = 3]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return *(float *)(a1 + 4 * a2);
}

float *sub_18F359B20(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  char v10;
  char v11;
  unint64_t v12;
  float v13;
  float *result;
  float v15;
  float v16;
  char v17;
  unint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float *v30;
  float v31;
  float v32;
  float *v33;
  float v34;
  float v35;
  float *v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float *v45;
  float v46;
  float v47;
  BOOL v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float v58;
  float *v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  unint64_t i;
  float v67;
  float v68;
  BOOL v69;
  unint64_t v70;
  float32x2_t v71;
  float v72;
  float32x2_t v73;
  float v74;
  float32x2_t v75;
  float v76;

  v4 = 0;
  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  do
  {
    *(_DWORD *)sub_18F3558C8(a2, v4, v4) = 1065353216;
    v5 = *(_DWORD *)sub_18F3558C8(a1, v4, v4);
    *(_DWORD *)sub_18F33D3D0((uint64_t)&v75, v4) = v5;
    v6 = *(_DWORD *)sub_18F3558C8(a1, v4, v4);
    *(_DWORD *)sub_18F33D3D0((uint64_t)&v73, v4) = v6;
    *(_DWORD *)sub_18F33D3D0((uint64_t)&v71, v4++) = 0;
  }
  while (v4 != 3);
  v7 = 0;
  do
  {
    v8 = 0;
    v9 = 0.0;
    v10 = 1;
    do
    {
      v11 = v10;
      v12 = v8 + 1;
      do
      {
        v13 = *(float *)sub_18F3558C8(a1, v8, v12);
        result = (float *)sub_18F3558C8(a1, v8, v12);
        v15 = *result;
        if (v13 < 0.0)
          v15 = -*result;
        v9 = v9 + v15;
        ++v12;
      }
      while (v12 != 3);
      v10 = 0;
      v8 = 1;
    }
    while ((v11 & 1) != 0);
    if (v9 == 0.0)
      break;
    v16 = 0.0;
    if (v7 <= 2)
      v16 = (float)(v9 * 0.2) / 9.0;
    v17 = 0;
    v18 = 0;
    v70 = v7 + 1;
    v19 = 1;
    do
    {
      v20 = v19;
      v21 = v18 + 1;
      do
      {
        v22 = *(float *)sub_18F3558C8(a1, v18, v21);
        v23 = (float *)sub_18F3558C8(a1, v18, v21);
        v24 = *v23;
        if (v22 < 0.0)
          v24 = -*v23;
        v25 = v24 * 100.0;
        if (v7 < 4)
          goto LABEL_31;
        v26 = v25 + *(float *)sub_18F33D3D0((uint64_t)&v75, v18);
        v27 = (float *)sub_18F33D3D0((uint64_t)&v75, v18);
        if (v26 >= 0.0)
          v28 = v25 + *v27;
        else
          v28 = -(float)(v25 + *v27);
        v29 = *(float *)sub_18F33D3D0((uint64_t)&v75, v18);
        v30 = (float *)sub_18F33D3D0((uint64_t)&v75, v18);
        v31 = *v30;
        if (v29 < 0.0)
          v31 = -*v30;
        if (v28 != v31)
          goto LABEL_31;
        v32 = v25 + *(float *)sub_18F33D3D0((uint64_t)&v75, v21);
        v33 = (float *)sub_18F33D3D0((uint64_t)&v75, v21);
        if (v32 >= 0.0)
          v34 = v25 + *v33;
        else
          v34 = -(float)(v25 + *v33);
        v35 = *(float *)sub_18F33D3D0((uint64_t)&v75, v21);
        v36 = (float *)sub_18F33D3D0((uint64_t)&v75, v21);
        v37 = *v36;
        if (v35 < 0.0)
          v37 = -*v36;
        if (v34 == v37)
        {
          result = (float *)sub_18F3558C8(a1, v18, v21);
          *result = 0.0;
        }
        else
        {
LABEL_31:
          v38 = *(float *)sub_18F3558C8(a1, v18, v21);
          result = (float *)sub_18F3558C8(a1, v18, v21);
          v39 = *result;
          if (v38 < 0.0)
            v39 = -*result;
          if (v39 > v16)
          {
            v40 = *(float *)sub_18F33D3D0((uint64_t)&v75, v21);
            v41 = v40 - *(float *)sub_18F33D3D0((uint64_t)&v75, v18);
            v42 = v25 + v41;
            if ((float)(v25 + v41) < 0.0)
              v42 = -(float)(v25 + v41);
            v43 = -v41;
            if (v41 >= 0.0)
              v43 = v41;
            if (v42 == v43)
            {
              v44 = *(float *)sub_18F3558C8(a1, v18, v21) / v41;
            }
            else
            {
              v45 = (float *)sub_18F3558C8(a1, v18, v21);
              v46 = (float)(v41 * 0.5) / *v45;
              v47 = -v46;
              v48 = v46 < 0.0;
              if (v46 >= 0.0)
                v47 = (float)(v41 * 0.5) / *v45;
              v49 = 1.0 / (float)(v47 + sqrtf((float)(v46 * v46) + 1.0));
              if (v48)
                v44 = -v49;
              else
                v44 = v49;
            }
            v50 = 1.0 / sqrtf((float)(v44 * v44) + 1.0);
            v51 = v44 * v50;
            v52 = (float)(v44 * v50) / (float)(v50 + 1.0);
            v53 = v44 * *(float *)sub_18F3558C8(a1, v18, v21);
            v54 = (float *)sub_18F33D3D0((uint64_t)&v71, v18);
            *v54 = *v54 - v53;
            v55 = (float *)sub_18F33D3D0((uint64_t)&v71, v21);
            *v55 = v53 + *v55;
            v56 = (float *)sub_18F33D3D0((uint64_t)&v75, v18);
            *v56 = *v56 - v53;
            v57 = (float *)sub_18F33D3D0((uint64_t)&v75, v21);
            *v57 = v53 + *v57;
            *(_DWORD *)sub_18F3558C8(a1, v18, v21) = 0;
            if ((v17 & 1) != 0)
            {
              v58 = *(float *)(a1 + 12);
              v59 = (float *)sub_18F3558C8(a1, 0, v21);
              v60 = *v59;
              *(float *)(a1 + 12) = v58 - (float)(v51 * (float)(*v59 + (float)(v58 * v52)));
              *(float *)sub_18F3558C8(a1, 0, v21) = v60 + (float)(v51 * (float)(v58 - (float)(v60 * v52)));
            }
            v61 = -v51;
            if (v18 + 1 < v21)
            {
              v62 = *(float *)sub_18F3558C8(a1, v18, 1uLL);
              v63 = *(float *)(a1 + 28);
              *(float *)sub_18F3558C8(a1, v18, 1uLL) = v62 + (float)(v61 * (float)(v63 + (float)(v62 * v52)));
              *(float *)(a1 + 28) = v63 + (float)(v51 * (float)(v62 - (float)(v63 * v52)));
            }
            if (v21 < 2)
            {
              v64 = *(float *)sub_18F3558C8(a1, v18, 2uLL);
              v65 = *(float *)(a1 + 28);
              *(float *)sub_18F3558C8(a1, v18, 2uLL) = v64 + (float)(v61 * (float)(v65 + (float)(v64 * v52)));
              *(float *)(a1 + 28) = v65 + (float)(v51 * (float)(v64 - (float)(v65 * v52)));
            }
            for (i = 0; i != 3; ++i)
            {
              v67 = *(float *)sub_18F3558C8(a2, i, v18);
              v68 = *(float *)sub_18F3558C8(a2, i, v21);
              *(float *)sub_18F3558C8(a2, i, v18) = v67 + (float)(v61 * (float)(v68 + (float)(v67 * v52)));
              result = (float *)sub_18F3558C8(a2, i, v21);
              *result = v68 + (float)(v51 * (float)(v67 - (float)(v68 * v52)));
            }
          }
        }
        v69 = v21 == 2;
        v21 = 2;
      }
      while (!v69);
      v19 = 0;
      v17 = 1;
      v18 = 1;
    }
    while ((v20 & 1) != 0);
    v73 = vadd_f32(v71, v73);
    v74 = v72 + v74;
    v75 = v73;
    v76 = v74;
    v72 = 0.0;
    v71 = 0;
    ++v7;
  }
  while (v70 != 10);
  return result;
}

int *sub_18F35A13C(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  float v6;
  int *result;
  int *v8;
  int *v9;
  int v10;
  int *v11;
  int *v12;
  int v13;
  int *v14;
  int *v15;
  int v16;
  int *v17;
  int v18;

  v6 = *(float *)sub_18F33D3D0(*a1, a2);
  result = (int *)sub_18F33D3D0(*a1, a3);
  if (v6 < *(float *)result)
  {
    v8 = (int *)sub_18F33D3D0(*a1, a2);
    v9 = (int *)sub_18F33D3D0(*a1, a3);
    v10 = *v8;
    *v8 = *v9;
    *v9 = v10;
    v11 = (int *)sub_18F3558C8(a1[1], 0, a2);
    v12 = (int *)sub_18F3558C8(a1[1], 0, a3);
    v13 = *v11;
    *v11 = *v12;
    *v12 = v13;
    v14 = (int *)sub_18F3558C8(a1[1], 1uLL, a2);
    v15 = (int *)sub_18F3558C8(a1[1], 1uLL, a3);
    v16 = *v14;
    *v14 = *v15;
    *v15 = v16;
    v17 = (int *)sub_18F3558C8(a1[1], 2uLL, a2);
    result = (int *)sub_18F3558C8(a1[1], 2uLL, a3);
    v18 = *v17;
    *v17 = *result;
    *result = v18;
  }
  return result;
}

void sub_18F35A25C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char v6;
  char v7;
  unint64_t *v8;
  unint64_t v9;

  if (sub_18F1DFF3C())
  {
    v0 = operator new();
    sub_18F1E61EC(v0, (uint64_t)"CLFilteredPressure", 1);
    *(_QWORD *)v0 = &off_1E294A950;
    *(_QWORD *)(v0 + 32) = 0;
    *(_BYTE *)(v0 + 40) = 0;
    *(_QWORD *)(v0 + 48) = 0;
    *(_QWORD *)(v0 + 56) = 0;
    *(_QWORD *)(v0 + 64) = 3212836864;
    *(_QWORD *)(v0 + 72) = 0;
    *(_QWORD *)(v0 + 80) = 0x3D23D70A3F800000;
    *(_DWORD *)(v0 + 92) = 0;
    *(_QWORD *)(v0 + 96) = 1055840934;
    *(_QWORD *)(v0 + 104) = 0xA400000000;
    *(_QWORD *)(v0 + 768) = 0;
    *(_DWORD *)(v0 + 776) = 0;
    *(_OWORD *)(v0 + 784) = 0u;
    *(_OWORD *)(v0 + 800) = 0u;
    *(_OWORD *)(v0 + 809) = 0u;
    *(_DWORD *)(v0 + 832) = 1070315493;
    *(_QWORD *)(v0 + 840) = 1591549;
    *(_QWORD *)(v0 + 848) = 0x300000000;
    *(_QWORD *)(v0 + 880) = 0x300000000;
    v1 = sub_18F204AE4();
    v2 = *(_QWORD *)(v1 + 24);
    v3 = *(std::__shared_weak_count **)(v1 + 32);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v6 = sub_18F1EE944(v2, "LogFilteredPressure", (BOOL *)(v0 + 40));
    v7 = v6;
    if (!v3)
      goto LABEL_9;
    v8 = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if ((v7 & 1) != 0)
        goto LABEL_11;
    }
    else
    {
LABEL_9:
      if ((v6 & 1) != 0)
      {
LABEL_11:
        qword_1EE16E928 = v0;
        return;
      }
    }
    *(_BYTE *)(v0 + 40) = 0;
    goto LABEL_11;
  }
}

void sub_18F35A3D0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_18F3DB8A0(v1);
  MEMORY[0x194001438](v1, 0x10F1C40AB944815);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F35A440(_QWORD *a1)
{
  *a1 = &off_1E294A950;
  return sub_18F3DB8A0(a1);
}

void sub_18F35A450(_QWORD *a1)
{
  *a1 = &off_1E294A950;
  sub_18F3DB8A0(a1);
  JUMPOUT(0x194001438);
}

os_log_t sub_18F35A480()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Pressure");
  qword_1EE16D6C0 = (uint64_t)result;
  return result;
}

void sub_18F35B2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_18F2A8438((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_18F35B6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_18F2A8438((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_18F35BA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F2A8438((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F35BC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F2A8438((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F35BDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_18F2A8438((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18F35C0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_18F2A8438((uint64_t)va);
  _Unwind_Resume(a1);
}

os_log_t sub_18F35C0FC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Activity");
  qword_1EE16D6E8 = (uint64_t)result;
  return result;
}

_QWORD *sub_18F35C128@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_18F35C188(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_18F35C174(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F35C188(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F35C1E8((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_18F35C1D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F35C1E8(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_18F270374(__p, __s);
  MEMORY[0x19400103C](a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_18F35C23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18F35C258@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = sub_18F35C2B0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18F35C29C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F35C2B0(_QWORD *a1, char *__s)
{
  char v4;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F35C30C((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_18F35C2F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F35C30C(int a1, uint64_t a2, char *__s)
{
  void *__p[2];
  char v5;

  sub_18F270374(__p, __s);
  MEMORY[0x194001030](a2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_18F35C358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_18F35C374@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = sub_18F35C3CC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18F35C3B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F35C3CC(_QWORD *a1, char *__s)
{
  char v4;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E2952688;
  sub_18F35C428((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_18F35C414(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18F35C428(int a1, uint64_t a2, char *__s)
{
  void *__p[2];
  char v5;

  sub_18F270374(__p, __s);
  MEMORY[0x194001030](a2, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_18F35C474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F35C490(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  xpc_object_t reply;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  xpc_object_t v26;
  id v27;

  v27 = a4;
  if (a1)
  {
    v7 = a3;
    reply = xpc_dictionary_create_reply(a2);
    v9 = objc_retainAutorelease(v7);
    v14 = (const char *)objc_msgSend_UTF8String(v9, v10, v11, v12, v13);

    xpc_dictionary_set_string(reply, "kRMConnectionMessageNameKey", v14);
    if (v27)
    {
      v15 = objc_retainAutorelease(v27);
      v20 = (const void *)objc_msgSend_bytes(v15, v16, v17, v18, v19);
      v25 = objc_msgSend_length(v15, v21, v22, v23, v24);
      v26 = xpc_data_create(v20, v25);
      xpc_dictionary_set_value(reply, "kRMConnectionMessageDataKey", v26);

    }
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 56), reply);

  }
}

id sub_18F35C570()
{
  if (qword_1EE16DD18 != -1)
    dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
  return (id)qword_1EE16DD20;
}

void sub_18F35C5B0(uint64_t a1, void *a2, void *a3)
{
  NSObject *v5;
  void (**v6)(id, void *, void *);
  void *v7;
  const char *string;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  const void *bytes_ptr;
  uint64_t v16;
  id v17;
  size_t length;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  _xpc_endpoint_s *v27;
  NSObject *v28;
  id v29;
  uint64_t v30;
  const char *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint32_t v34;
  id v35;
  xpc_connection_t v36;
  void *v37;
  _xpc_connection_s *v38;
  id v39;
  NSObject *v40;
  _xpc_connection_s *v41;
  xpc_object_t v42;
  id v43;
  xpc_object_t v44;
  id v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  NSObject *v49;
  const char *v50;
  _xpc_connection_s *v51;
  NSObject *v52;
  xpc_object_t reply;
  NSObject *v54;
  NSObject *v55;
  const char *v56;
  void **p_vtable;
  NSObject *v58;
  const char *v59;
  NSObject *v60;
  void *v61;
  id v62;
  const char *v63;
  void *v64;
  void (**v65)(id, void *, void *);
  void *v66;
  id v67;
  NSObject *v68;
  const char *v69;
  uint64_t v70;
  NSObject *v71;
  NSObject *v72;
  id v73;
  void **v74;
  _xpc_connection_s *connection;
  void (**v76)(id, void *, void *);
  int shouldStartStreamingDataToReceiver;
  void *v78;
  void *v79;
  id WeakRetained;
  _QWORD v81[5];
  NSObject *v82;
  id v83;
  _QWORD handler[5];
  uint8_t v85[4];
  const char *v86;
  _BYTE buf[40];
  id v88;
  xpc_object_t values;
  char *keys[4];

  keys[1] = *(char **)MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (a1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    v7 = (void *)MEMORY[0x1E0CB3940];
    string = xpc_dictionary_get_string(v5, "kRMConnectionMessageNameKey");
    objc_msgSend_stringWithUTF8String_(v7, v9, (uint64_t)string, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    xpc_dictionary_get_value(v5, "kRMConnectionMessageDataKey");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (v13 && (bytes_ptr = xpc_data_get_bytes_ptr(v13)) != 0)
    {
      v16 = (uint64_t)bytes_ptr;
      v17 = objc_alloc(MEMORY[0x1E0C99D50]);
      length = xpc_data_get_length(v14);
      v79 = (void *)objc_msgSend_initWithBytes_length_(v17, v19, v16, length, v20);
    }
    else
    {
      v79 = 0;
    }
    xpc_dictionary_get_value(v5, "kRMConnectionRequestSteamingKey");
    v21 = objc_claimAutoreleasedReturnValue();
    v25 = (void *)v21;
    if (v12)
    {
      if (!v21)
      {
        if (v6)
        {
          v6[2](v6, v12, v79);
          goto LABEL_61;
        }
        if (objc_msgSend_isEqualToString_(v12, v22, (uint64_t)CFSTR("kRMConnectionMessagePriorityBoost"), v23, v24))
        {
          if (qword_1EE16DD18 != -1)
            dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
          v52 = qword_1EE16DD20;
          if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138477827;
            *(_QWORD *)&buf[4] = v12;
            _os_log_impl(&dword_18F1DC000, v52, OS_LOG_TYPE_INFO, "Creating reply to hold onto priority boost: %{private}@", buf, 0xCu);
          }
          reply = xpc_dictionary_create_reply(v5);
          v54 = *(NSObject **)(a1 + 64);
          *(_QWORD *)(a1 + 64) = reply;
        }
        else
        {
          if ((objc_opt_respondsToSelector() & 1) == 0)
          {
            if (qword_1EE16DD18 != -1)
              dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
            v70 = qword_1EE16DD20;
            if (!os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_FAULT))
              goto LABEL_61;
            *(_WORD *)buf = 0;
            v31 = "Message received but the handler doesn't implement the selector 'endpoint:didReceiveMessage:withData:replyBlock:'";
            v32 = v70;
            v33 = OS_LOG_TYPE_FAULT;
            v34 = 2;
            goto LABEL_18;
          }
          v81[0] = MEMORY[0x1E0C809B0];
          v81[1] = 3221225472;
          v81[2] = sub_18F35D068;
          v81[3] = &unk_1E2955D08;
          v81[4] = a1;
          v82 = v5;
          objc_msgSend_endpoint_didReceiveMessage_withData_replyBlock_(WeakRetained, v69, a1, (uint64_t)v12, (uint64_t)v79, v81);
          v54 = v82;
        }

        goto LABEL_61;
      }
      if ((objc_msgSend_conformsToProtocol_(WeakRetained, v22, (uint64_t)&unk_1EE187598, v23, v24) & 1) != 0)
      {
        objc_msgSend_endpoint_didReceiveStreamingRequest_withData_(WeakRetained, v26, a1, (uint64_t)v12, (uint64_t)v79);
        v27 = v25;
        if (MEMORY[0x194002440]() == MEMORY[0x1E0C81308])
        {
          v35 = objc_loadWeakRetained((id *)(a1 + 24));
          v36 = xpc_connection_create_from_endpoint(v27);
          v78 = v35;
          if (v36)
          {
            connection = v36;
            v76 = v6;
            v74 = (void **)(a1 + 32);
            objc_storeStrong((id *)(a1 + 32), v36);
            v37 = v35;
            v38 = *(_xpc_connection_s **)(a1 + 32);
            handler[0] = MEMORY[0x1E0C809B0];
            handler[1] = 3221225472;
            handler[2] = sub_18F35D858;
            handler[3] = &unk_1E2955D30;
            handler[4] = a1;
            v39 = v37;
            xpc_connection_set_event_handler(v38, handler);
            v40 = *(NSObject **)(a1 + 8);
            v41 = (_xpc_connection_s *)*(id *)(a1 + 32);
            xpc_connection_set_target_queue(v41, v40);

            xpc_connection_resume(*(xpc_connection_t *)(a1 + 32));
            v42 = xpc_string_create("kRMConnectionMessageDataStream");
            keys[0] = "kRMConnectionMessageNameKey";
            v43 = v42;
            values = v43;
            v44 = xpc_dictionary_create((const char *const *)keys, &values, 1uLL);
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = sub_18F35DBF8;
            *(_QWORD *)&buf[24] = &unk_1E2955D58;
            *(_QWORD *)&buf[32] = a1;
            v45 = v44;
            v88 = v45;
            shouldStartStreamingDataToReceiver = objc_msgSend_endpoint_shouldStartStreamingDataToReceiver_(v39, v46, a1, (uint64_t)buf, v47);
            v73 = v39;

            v48 = v43;
            if (qword_1EE16DD18 != -1)
              dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
            v49 = qword_1EE16DD20;
            v6 = v76;
            if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_DEBUG))
            {
              v50 = "NO";
              if (shouldStartStreamingDataToReceiver)
                v50 = "YES";
              *(_DWORD *)v85 = 136315138;
              v86 = v50;
              _os_log_impl(&dword_18F1DC000, v49, OS_LOG_TYPE_DEBUG, "shouldStartStreamingDataToReceiver returned : %s", v85, 0xCu);
            }

            if ((shouldStartStreamingDataToReceiver & 1) != 0)
            {
              v29 = 0;
              v51 = connection;
            }
            else
            {
              p_vtable = &OBJC_METACLASS___CMCardioFitnessSummary.vtable;
              if (qword_1EE16DD18 != -1)
              {
                dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
                p_vtable = (void **)(&OBJC_METACLASS___CMCardioFitnessSummary + 24);
              }
              v58 = p_vtable[420];
              if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)&buf[4] = v73;
                _os_log_impl(&dword_18F1DC000, v58, OS_LOG_TYPE_ERROR, "Failed to start the streaming with handler %@", buf, 0xCu);
              }
              objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v59, (uint64_t)CFSTR("RMConnectionStreaming"), -2, 0);
              v29 = (id)objc_claimAutoreleasedReturnValue();
              if (qword_1EE16DD18 != -1)
                dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
              v60 = qword_1EE16DD20;
              if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18F1DC000, v60, OS_LOG_TYPE_DEFAULT, "Cancelling the streaming connection", buf, 2u);
              }
              v51 = connection;
              xpc_connection_cancel(connection);
              v61 = *v74;
              *v74 = 0;

            }
          }
          else
          {
            v51 = 0;
            if (qword_1EE16DD18 != -1)
              dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
            v55 = qword_1EE16DD20;
            if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v27;
              _os_log_impl(&dword_18F1DC000, v55, OS_LOG_TYPE_ERROR, "Failed to create connection from endpoint %@", buf, 0xCu);
            }
            objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v56, (uint64_t)CFSTR("RMConnectionStreaming"), -1, 0);
            v29 = (id)objc_claimAutoreleasedReturnValue();
          }

        }
        else
        {
          if (qword_1EE16DD18 != -1)
            dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
          v28 = qword_1EE16DD20;
          if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F1DC000, v28, OS_LOG_TYPE_ERROR, "The client did not send streaming endpoint correctly", buf, 2u);
          }
          v29 = 0;
        }

        v62 = v29;
        if (v62)
        {
          v64 = v62;
          v83 = v62;
          objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(MEMORY[0x1E0CB36F8], v63, (uint64_t)v62, 1, (uint64_t)&v83);
          v65 = v6;
          v66 = (void *)objc_claimAutoreleasedReturnValue();
          v67 = v83;

          sub_18F35C490(a1, v5, CFSTR("kRMConnectionMessageError"), v66);
          v6 = v65;

        }
        else
        {
          if (qword_1EE16DD18 != -1)
            dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
          v68 = qword_1EE16DD20;
          if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F1DC000, v68, OS_LOG_TYPE_INFO, "Streaming session started, sending acknowledgement", buf, 2u);
          }
          sub_18F35C490(a1, v5, CFSTR("kRMConnectionMessageSuccess"), 0);
        }
        goto LABEL_61;
      }
      sub_18F35C570();
      v71 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v71, OS_LOG_TYPE_FAULT))
      {
        *(_QWORD *)buf = 68289539;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "assert";
        *(_WORD *)&buf[28] = 2081;
        *(_QWORD *)&buf[30] = "[handler conformsToProtocol:@protocol(RMConnectionStreamProducingDelegate)]";
        _os_log_impl(&dword_18F1DC000, v71, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Start streaming requested but the handler doesn't conform to the RMConnectionStreamProducingDelegate delegate\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      sub_18F35C570();
      v72 = objc_claimAutoreleasedReturnValue();
      if (os_signpost_enabled(v72))
      {
        *(_QWORD *)buf = 68289539;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "assert";
        *(_WORD *)&buf[28] = 2081;
        *(_QWORD *)&buf[30] = "[handler conformsToProtocol:@protocol(RMConnectionStreamProducingDelegate)]";
        _os_signpost_emit_with_name_impl(&dword_18F1DC000, v72, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Start streaming requested but the handler doesn't conform to the RMConnectionStreamProducingDelegate delegate", "{\"msg%{public}.0s\":\"Start streaming requested but the handler doesn't conform to the RMConnectionStreamProducingDelegate delegate\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      sub_18F35C570();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_QWORD *)buf = 68289539;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "assert";
        *(_WORD *)&buf[28] = 2081;
        *(_QWORD *)&buf[30] = "[handler conformsToProtocol:@protocol(RMConnectionStreamProducingDelegate)]";
        _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Start streaming requested but the handler doesn't conform to the RMConnectionStreamProducingDelegate delegate\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      abort_report_np();
    }
    else if (qword_1EE16DD18 == -1)
    {
LABEL_16:
      v30 = qword_1EE16DD20;
      if (!os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_ERROR))
      {
LABEL_61:

        goto LABEL_62;
      }
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "kRMConnectionMessageNameKey";
      v31 = "XPC message missing key \"%s\"";
      v32 = v30;
      v33 = OS_LOG_TYPE_ERROR;
      v34 = 12;
LABEL_18:
      _os_log_impl(&dword_18F1DC000, v32, v33, v31, buf, v34);
      goto LABEL_61;
    }
    dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
    goto LABEL_16;
  }
LABEL_62:

}

void sub_18F35D068(uint64_t a1, void *a2, void *a3)
{
  sub_18F35C490(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), a2, a3);
}

id *sub_18F35D07C(void *a1, void *a2, void *a3)
{
  _xpc_connection_s *v6;
  NSObject *v7;
  id *v8;
  id *v9;
  id *v10;
  _QWORD handler[4];
  id *v13;
  objc_super v14;

  v6 = a2;
  v7 = a3;
  if (a1
    && (v14.receiver = a1,
        v14.super_class = (Class)RMConnectionEndpoint,
        (v8 = (id *)objc_msgSendSuper2(&v14, sel_init)) != 0))
  {
    v9 = v8;
    objc_storeStrong(v8 + 7, a2);
    objc_storeStrong(v9 + 1, a3);
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = sub_18F35D174;
    handler[3] = &unk_1E2955D30;
    v10 = v9;
    v13 = v10;
    xpc_connection_set_event_handler(v6, handler);
    xpc_connection_set_target_queue(v6, v7);

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_18F35D174(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[16];
  uint8_t v10[16];

  v3 = a2;
  v4 = MEMORY[0x194002440]();
  if (v4 == MEMORY[0x1E0C81310])
  {
    if (v3 == (id)MEMORY[0x1E0C81258])
    {
      if (qword_1EE16DD18 != -1)
        dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
      v7 = qword_1EE16DD20;
      if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_DEBUG, "#Warning Connection interrupted!", v10, 2u);
      }
      sub_18F35D354(*(_QWORD *)(a1 + 32));
    }
    else if (v3 == (id)MEMORY[0x1E0C81260])
    {
      if (qword_1EE16DD18 != -1)
        dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
      v6 = qword_1EE16DD20;
      if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEBUG, "#Warning Connection invalidated!", buf, 2u);
      }
      sub_18F35D398(*(_QWORD *)(a1 + 32));
    }
  }
  else if (v4 == MEMORY[0x1E0C812F8])
  {
    sub_18F35C5B0(*(_QWORD *)(a1 + 32), v3, 0);
  }
  else
  {
    if (qword_1EE16DD18 != -1)
      dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
    v5 = qword_1EE16DD20;
    if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_ERROR, "Got unexpected xpc event", v8, 2u);
    }
  }

}

void sub_18F35D354(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  id WeakRetained;

  if (a1)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
    objc_msgSend_endpointWasInterrupted_(WeakRetained, v2, a1, v3, v4);

  }
}

void sub_18F35D398(uint64_t a1)
{
  void *v2;
  _xpc_connection_s *v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  id WeakRetained;

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    v2 = *(void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;

    if (*(_QWORD *)(a1 + 32))
      sub_18F35D984(a1);
    if (*(_QWORD *)(a1 + 40))
      sub_18F35E0B8(a1);
    v3 = *(_xpc_connection_s **)(a1 + 56);
    if (v3)
    {
      xpc_connection_cancel(v3);
      v4 = *(void **)(a1 + 56);
      *(_QWORD *)(a1 + 56) = 0;

    }
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
    objc_msgSend_endpointWasInvalidated_(WeakRetained, v5, a1, v6, v7);

  }
}

void sub_18F35D428(uint64_t a1)
{
  id v2;
  id WeakRetained;
  id v4;

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    v2 = *(id *)(a1 + 56);
    if (!v2)
      __assert_rtn("-[RMConnectionEndpoint start]", "RMConnectionEndpoint.m", 212, "self.messagingConnection");

    WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    if (!WeakRetained)
      __assert_rtn("-[RMConnectionEndpoint start]", "RMConnectionEndpoint.m", 213, "self.dataDelegate");

    v4 = objc_loadWeakRetained((id *)(a1 + 16));
    if (!v4)
      __assert_rtn("-[RMConnectionEndpoint start]", "RMConnectionEndpoint.m", 214, "self.connectionDelegate");

    xpc_connection_resume(*(xpc_connection_t *)(a1 + 56));
  }
}

void sub_18F35D4F0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  v5 = a3;
  if (a1)
  {
    if (!*(_QWORD *)(a1 + 56))
    {
      sub_18F35C570();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289539;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        v15 = 2082;
        v16 = "assert";
        v17 = 2081;
        v18 = "self.messagingConnection";
        _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Trying to send a message while no connection is in place\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      sub_18F35C570();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_signpost_enabled(v8))
      {
        *(_DWORD *)buf = 68289539;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        v15 = 2082;
        v16 = "assert";
        v17 = 2081;
        v18 = "self.messagingConnection";
        _os_signpost_emit_with_name_impl(&dword_18F1DC000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Trying to send a message while no connection is in place", "{\"msg%{public}.0s\":\"Trying to send a message while no connection is in place\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      sub_18F35C570();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289539;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        v15 = 2082;
        v16 = "assert";
        v17 = 2081;
        v18 = "self.messagingConnection";
        _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Trying to send a message while no connection is in place\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      abort_report_np();
    }
    sub_18F35D734(v10, v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 56), v6);

  }
}

id sub_18F35D734(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  xpc_object_t v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  xpc_object_t v22;
  size_t v23;
  id v24;
  id v25;
  xpc_object_t v26;
  uint64_t i;
  xpc_object_t v29[2];
  char *keys[2];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_retainAutorelease(a1);
  v9 = (const char *)objc_msgSend_UTF8String(v4, v5, v6, v7, v8);
  v10 = xpc_string_create(v9);
  if (v3)
  {
    v11 = objc_retainAutorelease(v3);
    v16 = (const void *)objc_msgSend_bytes(v11, v12, v13, v14, v15);
    v21 = objc_msgSend_length(v11, v17, v18, v19, v20);
    v22 = xpc_data_create(v16, v21);
    v23 = 2;
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
  *(_OWORD *)keys = xmmword_1E2955DC0;
  v24 = v10;
  v29[0] = v24;
  v25 = v22;
  v29[1] = v25;
  v26 = xpc_dictionary_create((const char *const *)keys, v29, v23);
  for (i = 1; i != -1; --i)

  return v26;
}

void sub_18F35D858(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  __int16 v7;
  uint8_t buf[2];

  if (MEMORY[0x194002440](a2) == MEMORY[0x1E0C81310])
  {
    if (a2 == MEMORY[0x1E0C81258])
    {
      if (qword_1EE16DD18 != -1)
        dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
      v4 = qword_1EE16DD20;
      if (!os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_DEBUG))
        goto LABEL_13;
      *(_WORD *)buf = 0;
      v5 = "#Warning Streaming connection interrupted!";
      v6 = buf;
    }
    else
    {
      if (a2 != MEMORY[0x1E0C81260])
        return;
      if (qword_1EE16DD18 != -1)
        dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
      v4 = qword_1EE16DD20;
      if (!os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_DEBUG))
        goto LABEL_13;
      v7 = 0;
      v5 = "#Warning Streaming connection invalidated!";
      v6 = (uint8_t *)&v7;
    }
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEBUG, v5, v6, 2u);
LABEL_13:
    sub_18F35D984(*(_QWORD *)(a1 + 32));
  }
}

void sub_18F35D984(uint64_t a1)
{
  _xpc_connection_s *v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  id WeakRetained;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    v2 = *(_xpc_connection_s **)(a1 + 32);
    if (v2)
    {
      xpc_connection_set_event_handler(v2, &unk_1E2952E28);
      xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
      v3 = *(void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;

      WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
      objc_msgSend_endpointShouldStopStreamingData_(WeakRetained, v4, a1, v5, v6);

    }
    else
    {
      sub_18F35C570();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289539;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        v15 = 2082;
        v16 = "assert";
        v17 = 2081;
        v18 = "self.streamingServerConnection";
        _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Asked to stop a stream while no streaming is in progress\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      sub_18F35C570();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_signpost_enabled(v8))
      {
        *(_DWORD *)buf = 68289539;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        v15 = 2082;
        v16 = "assert";
        v17 = 2081;
        v18 = "self.streamingServerConnection";
        _os_signpost_emit_with_name_impl(&dword_18F1DC000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Asked to stop a stream while no streaming is in progress", "{\"msg%{public}.0s\":\"Asked to stop a stream while no streaming is in progress\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      sub_18F35C570();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289539;
        v12 = 0;
        v13 = 2082;
        v14 = "";
        v15 = 2082;
        v16 = "assert";
        v17 = 2081;
        v18 = "self.streamingServerConnection";
        _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Asked to stop a stream while no streaming is in progress\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      abort_report_np();
    }
  }
}

void sub_18F35DBF8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  _xpc_connection_s *v18;
  id v19;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 && *(_QWORD *)(v4 + 32))
  {
    v5 = *(void **)(a1 + 40);
    v19 = v3;
    v6 = objc_retainAutorelease(v3);
    v11 = (const void *)objc_msgSend_bytes(v6, v7, v8, v9, v10);
    v16 = objc_msgSend_length(v6, v12, v13, v14, v15);
    xpc_dictionary_set_data(v5, "kRMConnectionMessageDataStreamKey", v11, v16);
    v17 = *(_QWORD *)(a1 + 32);
    if (v17)
      v18 = *(_xpc_connection_s **)(v17 + 32);
    else
      v18 = 0;
    xpc_connection_send_message(v18, *(xpc_object_t *)(a1 + 40));
    v3 = v19;
  }

}

void sub_18F35DC94(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(id, void *);
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  void *v12;
  _BYTE v13[24];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (!a1)
    goto LABEL_22;
  if (v5 == (id)MEMORY[0x1E0C81258])
  {
    if (qword_1EE16DD18 != -1)
      dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
    v10 = qword_1EE16DD20;
    if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v13 = 0;
      v11 = "#Warning Streaming connection interrupted";
LABEL_19:
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_DEFAULT, v11, v13, 2u);
    }
LABEL_20:
    v9 = -3;
    if (!v6)
      goto LABEL_22;
LABEL_21:
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v8, (uint64_t)CFSTR("RMConnectionStreaming"), v9, 0, *(_QWORD *)v13);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v6[2](v6, v12);

    goto LABEL_22;
  }
  if (v5 == (id)MEMORY[0x1E0C81260])
  {
    if (qword_1EE16DD18 != -1)
      dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
    v10 = qword_1EE16DD20;
    if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v13 = 0;
      v11 = "#Warning Streaming connection dropped";
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  if (v5 != (id)MEMORY[0x1E0C81288])
  {
    if (qword_1EE16DD18 != -1)
      dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
    v7 = qword_1EE16DD20;
    if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v13 = 138412290;
      *(_QWORD *)&v13[4] = v5;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_ERROR, "Unknown xpc error received %@", v13, 0xCu);
    }
    v9 = -4;
    if (v6)
      goto LABEL_21;
  }
LABEL_22:

}

void sub_18F35DEB8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  const void *bytes_ptr;
  uint64_t v10;
  id v11;
  size_t length;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id WeakRetained;
  const char *v21;
  uint64_t v22;
  uint8_t v23[16];
  uint8_t buf[16];

  v3 = a2;
  v4 = MEMORY[0x194002440]();
  if (v4 == MEMORY[0x1E0C81310])
  {
    if (qword_1EE16DD18 != -1)
      dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
    v8 = qword_1EE16DD20;
    if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_DEBUG, "Error received on the streaming connection", buf, 2u);
    }
    sub_18F35DC94(*(_QWORD *)(a1 + 32), v3, *(void **)(a1 + 40));
    sub_18F35E0B8(*(_QWORD *)(a1 + 32));
  }
  else if (v4 == MEMORY[0x1E0C812F8])
  {
    xpc_dictionary_get_value(v3, "kRMConnectionMessageDataStreamKey");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)v5;
    if (v5
      && MEMORY[0x194002440](v5) == MEMORY[0x1E0C812E8]
      && (bytes_ptr = xpc_data_get_bytes_ptr(v6)) != 0
      && (v10 = (uint64_t)bytes_ptr,
          v11 = objc_alloc(MEMORY[0x1E0C99D50]),
          length = xpc_data_get_length(v6),
          (v15 = objc_msgSend_initWithBytes_length_(v11, v13, v10, length, v14)) != 0))
    {
      v18 = (void *)v15;
      v19 = *(_QWORD *)(a1 + 32);
      if (v19)
      {
        WeakRetained = objc_loadWeakRetained((id *)(v19 + 24));
        objc_msgSend_endpoint_didReceiveStreamedData_(WeakRetained, v21, *(_QWORD *)(a1 + 32), (uint64_t)v18, v22);
      }
      else
      {
        WeakRetained = 0;
        objc_msgSend_endpoint_didReceiveStreamedData_(0, v16, 0, v15, v17);
      }

    }
    else
    {
      if (qword_1EE16DD18 != -1)
        dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
      v7 = qword_1EE16DD20;
      if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_ERROR, "Message without a payload received from the stream connection", v23, 2u);
      }
    }

  }
}

void sub_18F35E0B8(uint64_t a1)
{
  _xpc_connection_s *v2;
  void *v3;
  _xpc_connection_s *v4;
  void *v5;

  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    v2 = *(_xpc_connection_s **)(a1 + 40);
    if (v2)
    {
      xpc_connection_suspend(v2);
      xpc_connection_set_event_handler(*(xpc_connection_t *)(a1 + 40), &unk_1E2955428);
      xpc_connection_resume(*(xpc_connection_t *)(a1 + 40));
      xpc_connection_cancel(*(xpc_connection_t *)(a1 + 40));
      v3 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;

    }
    v4 = *(_xpc_connection_s **)(a1 + 48);
    if (v4)
    {
      xpc_connection_cancel(v4);
      v5 = *(void **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0;

    }
  }
}

void sub_18F35E13C(uint64_t a1, void *a2, void *a3, void *a4)
{
  char *v7;
  xpc_endpoint_t v8;
  char *v9;
  NSObject *v10;
  xpc_connection_t v11;
  void *v12;
  uint64_t v13;
  _xpc_connection_s *v14;
  char *v15;
  const char *v16;
  char *v17;
  void *v18;
  NSObject *v19;
  _xpc_connection_s *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  _xpc_endpoint_s *v25;
  _QWORD v26[5];
  char *v27;
  _QWORD handler[5];
  char *v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (!a1)
    goto LABEL_7;
  if (*(_QWORD *)(a1 + 48))
  {
    sub_18F35C570();
    v22 = objc_claimAutoreleasedReturnValue();
    v17 = "";
    v9 = "assert";
    v16 = "!self.streamingClientListener";
    if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v31 = 0;
      v32 = 2082;
      v33 = "";
      v34 = 2082;
      v35 = "assert";
      v36 = 2081;
      v37 = "!self.streamingClientListener";
      _os_log_impl(&dword_18F1DC000, v22, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Request already in progress\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    sub_18F35C570();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_signpost_enabled(v23))
    {
      *(_DWORD *)buf = 68289539;
      v31 = 0;
      v32 = 2082;
      v33 = "";
      v34 = 2082;
      v35 = "assert";
      v36 = 2081;
      v37 = "!self.streamingClientListener";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v23, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Request already in progress", "{\"msg%{public}.0s\":\"Request already in progress\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    sub_18F35C570();
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v31 = 0;
      v32 = 2082;
      v33 = "";
      v34 = 2082;
      v35 = "assert";
      v36 = 2081;
      v37 = "!self.streamingClientListener";
      _os_log_impl(&dword_18F1DC000, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Request already in progress\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    abort_report_np();
    goto LABEL_15;
  }
  v10 = *(id *)(a1 + 8);
  v11 = xpc_connection_create(0, v10);
  v12 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v11;

  v13 = MEMORY[0x1E0C809B0];
  v14 = *(_xpc_connection_s **)(a1 + 48);
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = sub_18F35E508;
  handler[3] = &unk_1E2955DA0;
  handler[4] = a1;
  v15 = v9;
  v29 = v15;
  xpc_connection_set_event_handler(v14, handler);
  v16 = v7;
  v25 = v8;
  sub_18F35D734(v7, v8);
  v17 = (char *)objc_claimAutoreleasedReturnValue();
  xpc_connection_activate(*(xpc_connection_t *)(a1 + 48));
  v8 = xpc_endpoint_create(*(xpc_connection_t *)(a1 + 48));
  xpc_dictionary_set_value(v17, "kRMConnectionRequestSteamingKey", v8);
  v18 = *(void **)(a1 + 56);
  v19 = *(NSObject **)(a1 + 8);
  v26[0] = v13;
  v26[1] = 3221225472;
  v26[2] = sub_18F35E864;
  v26[3] = &unk_1E2955DA0;
  v26[4] = a1;
  v27 = v15;
  v20 = v18;
  xpc_connection_send_message_with_reply(v20, v17, v19, v26);

  if (qword_1EE16DD18 != -1)
LABEL_15:
    dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
  v21 = qword_1EE16DD20;
  v7 = (char *)v16;
  if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v21, OS_LOG_TYPE_DEFAULT, "Streaming request sent", buf, 2u);
  }

  v8 = v25;
LABEL_7:

}

void sub_18F35E508(uint64_t a1, void *a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  _xpc_connection_s *v8;
  void *v9;
  uint64_t v10;
  _xpc_connection_s *v11;
  id v12;
  id WeakRetained;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _xpc_connection_s *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  uint8_t buf[8];
  _BYTE v23[32];
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  if (MEMORY[0x194002440]() == MEMORY[0x1E0C812E0])
  {
    if (qword_1EE16DD18 != -1)
      dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
    v5 = qword_1EE16DD20;
    if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_DEFAULT, "Peer connection detected", buf, 2u);
    }
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
      v7 = *(NSObject **)(v6 + 8);
    else
      v7 = 0;
    v8 = (_xpc_connection_s *)v4;
    xpc_connection_set_target_queue(v8, v7);
    v10 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(a1 + 40);
    v11 = v8;
    v12 = v9;
    if (v10)
    {
      WeakRetained = objc_loadWeakRetained((id *)(v10 + 24));
      v17 = objc_msgSend_conformsToProtocol_(WeakRetained, v14, (uint64_t)&unk_1EE172540, v15, v16);

      if ((v17 & 1) == 0)
      {
        sub_18F35C570();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v23 = 2082;
          *(_QWORD *)&v23[2] = "";
          *(_WORD *)&v23[10] = 2082;
          *(_QWORD *)&v23[12] = "assert";
          *(_WORD *)&v23[20] = 2081;
          *(_QWORD *)&v23[22] = "[self.dataDelegate conformsToProtocol:@protocol(RMConnectionStreamConsumingDelegate)]";
          _os_log_impl(&dword_18F1DC000, v19, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"The MessageHandler MUST conform to RMConnectionStreamConsumingDelegate\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }

        sub_18F35C570();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_signpost_enabled(v20))
        {
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v23 = 2082;
          *(_QWORD *)&v23[2] = "";
          *(_WORD *)&v23[10] = 2082;
          *(_QWORD *)&v23[12] = "assert";
          *(_WORD *)&v23[20] = 2081;
          *(_QWORD *)&v23[22] = "[self.dataDelegate conformsToProtocol:@protocol(RMConnectionStreamConsumingDelegate)]";
          _os_signpost_emit_with_name_impl(&dword_18F1DC000, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The MessageHandler MUST conform to RMConnectionStreamConsumingDelegate", "{\"msg%{public}.0s\":\"The MessageHandler MUST conform to RMConnectionStreamConsumingDelegate\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }

        sub_18F35C570();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v23 = 2082;
          *(_QWORD *)&v23[2] = "";
          *(_WORD *)&v23[10] = 2082;
          *(_QWORD *)&v23[12] = "assert";
          *(_WORD *)&v23[20] = 2081;
          *(_QWORD *)&v23[22] = "[self.dataDelegate conformsToProtocol:@protocol(RMConnectionStreamConsumingDelegate)]";
          _os_log_impl(&dword_18F1DC000, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"The MessageHandler MUST conform to RMConnectionStreamConsumingDelegate\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }

        abort_report_np();
      }
      objc_storeStrong((id *)(v10 + 40), a2);
      v18 = *(_xpc_connection_s **)(v10 + 40);
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)v23 = 3221225472;
      *(_QWORD *)&v23[8] = sub_18F35DEB8;
      *(_QWORD *)&v23[16] = &unk_1E2955DA0;
      *(_QWORD *)&v23[24] = v10;
      v24 = v12;
      xpc_connection_set_event_handler(v18, buf);
      xpc_connection_activate(*(xpc_connection_t *)(v10 + 40));

    }
  }

}

void sub_18F35E864(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void (**v6)(id, void *);
  void *v7;
  id v8;
  const char *string;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *bytes_ptr;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  void *v30;
  id v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  id v35;
  size_t length;
  const char *v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *v40;
  id v41;
  uint8_t buf[4];
  id v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = MEMORY[0x194002440]();
  if (v4 == MEMORY[0x1E0C81310])
  {
    if (qword_1EE16DD18 != -1)
      dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
    v33 = qword_1EE16DD20;
    if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v33, OS_LOG_TYPE_DEFAULT, "Error received while trying to start the streaming connection", buf, 2u);
    }
    sub_18F35DC94(*(_QWORD *)(a1 + 32), v3, *(void **)(a1 + 40));
    sub_18F35E0B8(*(_QWORD *)(a1 + 32));
  }
  else if (v4 == MEMORY[0x1E0C812F8])
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (void (**)(id, void *))*(id *)(a1 + 40);
    if (v5)
    {
      v7 = (void *)MEMORY[0x1E0CB3940];
      v8 = v3;
      string = xpc_dictionary_get_string(v8, "kRMConnectionMessageNameKey");
      objc_msgSend_stringWithUTF8String_(v7, v10, (uint64_t)string, v11, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      xpc_dictionary_get_value(v8, "kRMConnectionMessageError");
      v14 = (void *)objc_claimAutoreleasedReturnValue();

      if (v14 && MEMORY[0x194002440](v14) == MEMORY[0x1E0C812E8])
      {
        bytes_ptr = (void *)xpc_data_get_bytes_ptr(v14);
        if (bytes_ptr)
        {
          v35 = objc_alloc(MEMORY[0x1E0C99D50]);
          length = xpc_data_get_length(v14);
          bytes_ptr = (void *)objc_msgSend_initWithBytes_length_(v35, v37, (uint64_t)bytes_ptr, length, v38);
        }
      }
      else
      {
        bytes_ptr = 0;
      }
      if (objc_msgSend_isEqualToString_(v13, v15, (uint64_t)CFSTR("kRMConnectionMessageError"), v16, v17))
      {
        if (bytes_ptr)
        {
          v22 = (void *)MEMORY[0x1E0CB3710];
          v23 = (void *)MEMORY[0x1E0C99E60];
          v24 = objc_opt_class();
          objc_msgSend_setWithObject_(v23, v25, v24, v26, v27);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v41 = 0;
          objc_msgSend_unarchivedObjectOfClasses_fromData_error_(v22, v29, (uint64_t)v28, (uint64_t)bytes_ptr, (uint64_t)&v41);
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = v41;

          if (v30)
          {
            if (qword_1EE16DD18 != -1)
              dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
            v32 = qword_1EE16DD20;
            if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v43 = v30;
              _os_log_impl(&dword_18F1DC000, v32, OS_LOG_TYPE_ERROR, "Error while receiving a stream : %@", buf, 0xCu);
            }
            if (v6)
              v6[2](v6, v30);
          }
          else
          {
            if (qword_1EE16DD18 != -1)
              dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
            v40 = qword_1EE16DD20;
            if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 138412290;
              v43 = v31;
              _os_log_impl(&dword_18F1DC000, v40, OS_LOG_TYPE_FAULT, "Can't decode the error returned to the streaming request. Unarchiver error: %@", buf, 0xCu);
            }
          }

        }
        else
        {
          if (qword_1EE16DD18 != -1)
            dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
          v39 = qword_1EE16DD20;
          if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 138412290;
            v43 = v13;
            _os_log_impl(&dword_18F1DC000, v39, OS_LOG_TYPE_FAULT, "No data in error message: %@", buf, 0xCu);
          }
        }
        sub_18F35E0B8(v5);
      }
      else if (objc_msgSend_isEqualToString_(v13, v19, (uint64_t)CFSTR("kRMConnectionMessageSuccess"), v20, v21))
      {
        if (qword_1EE16DD18 != -1)
          dispatch_once(&qword_1EE16DD18, &unk_1E2944EE0);
        v34 = qword_1EE16DD20;
        if (os_log_type_enabled((os_log_t)qword_1EE16DD20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v34, OS_LOG_TYPE_DEFAULT, "Streaming connection acknowledged from remote endpoint", buf, 2u);
        }
      }

    }
  }

}

BOOL sub_18F35ECC8(_BOOL8 result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(result + 8));
    return *(_QWORD *)(v1 + 56) != 0;
  }
  return result;
}

id *sub_18F35ECFC(id *a1)
{
  if (a1)
    a1 = (id *)a1[7];
  return a1;
}

void sub_18F35ED88()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.RelativeMotion", "IPC");
  v1 = (void *)qword_1EE16DD20;
  qword_1EE16DD20 = (uint64_t)v0;

}

void sub_18F35EEBC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  _QWORD v20[11];
  void *__p;
  std::__shared_weak_count *v22;
  char v23;
  void *v24[2];
  char v25;
  const __CFString *v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 16);
  if (v3 != *(void **)(a1 + 40) || !*(_BYTE *)(v2 + 40))
  {

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = objc_msgSend_copy(*(void **)(a1 + 40), v4, v5, v6, v7);
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
    {
      v8 = operator new();
      sub_18F270374(v24, "com.apple.locationd.registration");
      MEMORY[0x19400100C](v8, v24, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = v8;
      if (v25 < 0)
        operator delete(v24[0]);
      sub_18F270374(&__p, "kCLConnectionMessageProxPDPUpdate");
      v9 = MEMORY[0x1E0C809B0];
      v20[6] = MEMORY[0x1E0C809B0];
      v20[7] = 3221225472;
      v20[8] = sub_18F35F1EC;
      v20[9] = &unk_1E2955DD8;
      v20[10] = *(_QWORD *)(a1 + 32);
      CLConnectionClient::setHandlerForMessage();
      if (v23 < 0)
        operator delete(__p);
      CLConnectionClient::setDefaultMessageHandler();
      v10 = *(_QWORD *)(a1 + 32);
      v20[1] = v9;
      v20[2] = 3221225472;
      v20[3] = sub_18F35F514;
      v20[4] = &unk_1E2955938;
      v20[5] = v10;
      CLConnectionClient::setInterruptionHandler();
      CLConnectionClient::start(*(CLConnectionClient **)(*(_QWORD *)(a1 + 32) + 8));
      v26 = CFSTR("kCLConnectionMessageSubscribeKey");
      v27[0] = MEMORY[0x1E0C9AAB0];
      v20[0] = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v11, (uint64_t)v27, (uint64_t)&v26, 1);
      sub_18F36022C("kCLConnectionMessageProxPDPUpdate", v20, &__p);
      v19 = v22;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      CLConnectionClient::sendMessage();
      if (v19)
      {
        v14 = (unint64_t *)&v19->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 40) = 1;
      v16 = v22;
      if (v22)
      {
        v17 = (unint64_t *)&v22->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
}

void sub_18F35F178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_18F2A8438((uint64_t)&a10);
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void *sub_18F35F1EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *result;
  uint64_t (**v8)(id, _QWORD, uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  NSSet *v16;
  void *DictionaryOfClasses;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;

  result = *(void **)(*(_QWORD *)(a1 + 32) + 16);
  if (result)
  {
    v8 = (uint64_t (**)(id, _QWORD, uint64_t))(id)objc_msgSend_copy(result, a2, a3, a4, a5);
    v9 = (void *)MEMORY[0x1E0C99E60];
    v10 = objc_opt_class();
    v11 = objc_opt_class();
    v12 = objc_opt_class();
    v16 = (NSSet *)objc_msgSend_setWithObjects_(v9, v13, v10, v14, v15, v11, v12, 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v16);
    v21 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v18, (uint64_t)CFSTR("CMErrorMessage"), v19, v20);
    result = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v22, (uint64_t)CFSTR("CMProxPDPObject"), v23, v24);
    if (v21)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 40) = 0;
      v29 = (void *)MEMORY[0x1E0CB35C8];
      v30 = objc_msgSend_integerValue(v21, v25, v26, v27, v28);
      v32 = objc_msgSend_errorWithDomain_code_userInfo_(v29, v31, (uint64_t)CFSTR("CMErrorDomain"), v30, 0);
      return (void *)v8[2](v8, 0, v32);
    }
    else if (result)
    {
      return (void *)((uint64_t (**)(id, void *, uint64_t))v8)[2](v8, result, 0);
    }
  }
  return result;
}

void sub_18F35F338(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1EE16D438 != -1)
    dispatch_once(&qword_1EE16D438, &unk_1E2955128);
  v3 = off_1EE16D428;
  if (os_log_type_enabled((os_log_t)off_1EE16D428, OS_LOG_TYPE_DEBUG))
  {
    v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0)
      v5 = v4;
    else
      v5 = *(_QWORD *)v4;
    *(_DWORD *)buf = 136446210;
    v8 = v5;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEBUG, "Default handler received message %{public}s", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D438 != -1)
      dispatch_once(&qword_1EE16D438, &unk_1E2955128);
    CLConnectionMessage::name(*a2);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "-[CMProxPDPAndALSPhoneManagerInternal _startPDPUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
}

void sub_18F35F514(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ExecutablePathFromPid;
  uint64_t v7;
  NSObject *v8;
  pid_t v9;
  uint64_t v10;
  char *v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  pid_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = getpid();
  ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2, v4, v5);
  if (ExecutablePathFromPid)
  {
    v7 = ExecutablePathFromPid;
    if (qword_1EE16D438 != -1)
      dispatch_once(&qword_1EE16D438, &unk_1E2955128);
    v8 = off_1EE16D428;
    if (os_log_type_enabled((os_log_t)off_1EE16D428, OS_LOG_TYPE_DEFAULT))
    {
      v9 = getpid();
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138478339;
      v13 = v7;
      v14 = 1025;
      v15 = v9;
      v16 = 2049;
      v17 = v10;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_DEFAULT, "Client connection interrupt, %{private}@, %{private}d, %{private}p", buf, 0x1Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D438 != -1)
        dispatch_once(&qword_1EE16D438, &unk_1E2955128);
      getpid();
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMProxPDPAndALSPhoneManagerInternal _startPDPUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
}

void sub_18F35F778(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  const __CFString *v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 24);
  if (v3 != *(void **)(a1 + 40) || !*(_BYTE *)(v2 + 41))
  {

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = objc_msgSend_copy(*(void **)(a1 + 40), v4, v5, v6, v7);
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
    {
      v8 = operator new();
      sub_18F270374(__p, "com.apple.locationd.registration");
      MEMORY[0x19400100C](v8, __p, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = v8;
      if (v19 < 0)
        operator delete(__p[0]);
      sub_18F270374(v20, "kCLConnectionMessageALSPhoneUpdate");
      CLConnectionClient::setHandlerForMessage();
      if (v21 < 0)
        operator delete(v20[0]);
      CLConnectionClient::setDefaultMessageHandler();
      CLConnectionClient::setInterruptionHandler();
      CLConnectionClient::start(*(CLConnectionClient **)(*(_QWORD *)(a1 + 32) + 8));
      v22 = CFSTR("kCLConnectionMessageSubscribeKey");
      v23[0] = MEMORY[0x1E0C9AAB0];
      v10 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v9, (uint64_t)v23, (uint64_t)&v22, 1);
      v11 = (std::__shared_weak_count *)operator new(0x70uLL);
      v11->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      v11->__shared_weak_owners_ = 0;
      v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2952688;
      sub_18F270374(v20, "kCLConnectionMessageALSPhoneUpdate");
      MEMORY[0x19400103C](&v11[1], v20, v10);
      if (v21 < 0)
        operator delete(v20[0]);
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      CLConnectionClient::sendMessage();
      if (v11)
      {
        v14 = (unint64_t *)&v11->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 41) = 1;
      if (v11)
      {
        v16 = (unint64_t *)&v11->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
}

void sub_18F35FA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_18F2A8438((uint64_t)&a10);
  sub_18F2A8438((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void *sub_18F35FB08(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *result;
  uint64_t (**v8)(id, _QWORD, uint64_t);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  NSSet *v16;
  void *DictionaryOfClasses;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;

  result = *(void **)(*(_QWORD *)(a1 + 32) + 24);
  if (result)
  {
    v8 = (uint64_t (**)(id, _QWORD, uint64_t))(id)objc_msgSend_copy(result, a2, a3, a4, a5);
    v9 = (void *)MEMORY[0x1E0C99E60];
    v10 = objc_opt_class();
    v11 = objc_opt_class();
    v12 = objc_opt_class();
    v16 = (NSSet *)objc_msgSend_setWithObjects_(v9, v13, v10, v14, v15, v11, v12, 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v16);
    v21 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v18, (uint64_t)CFSTR("CMErrorMessage"), v19, v20);
    result = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v22, (uint64_t)CFSTR("CMALSPhoneObject"), v23, v24);
    if (v21)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 41) = 0;
      v29 = (void *)MEMORY[0x1E0CB35C8];
      v30 = objc_msgSend_integerValue(v21, v25, v26, v27, v28);
      v32 = objc_msgSend_errorWithDomain_code_userInfo_(v29, v31, (uint64_t)CFSTR("CMErrorDomain"), v30, 0);
      return (void *)v8[2](v8, 0, v32);
    }
    else if (result)
    {
      return (void *)((uint64_t (**)(id, void *, uint64_t))v8)[2](v8, result, 0);
    }
  }
  return result;
}

