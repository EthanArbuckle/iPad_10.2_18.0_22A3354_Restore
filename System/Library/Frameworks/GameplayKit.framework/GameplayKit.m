void sub_227B57C34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B57D3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B57D50(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)(v2 + 24));
  MEMORY[0x22E2A50A0](v2, 0x10A0C40EBF3C9F8);

  _Unwind_Resume(a1);
}

void sub_227B57E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B57F20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<NSObject * {__strong}>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  void *v24;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
  {
    if (a2 >> 61)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v4 = *(char **)(a1 + 8);
    v5 = 8 * a2;
    v6 = (char *)operator new(8 * a2);
    v7 = &v6[v5];
    v8 = v4 - v2;
    v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v7;
LABEL_19:
      if (v2)
        operator delete(v2);
      return;
    }
    v10 = v8 - 8;
    if ((unint64_t)(v8 - 8) >= 0x78)
    {
      v12 = (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9
         || &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4;
      v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
      if (v12)
      {
        v13 = v8 >> 3;
        v14 = (v10 >> 3) + 1;
        v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
        v11 = (char *)(v9 - v15);
        v16 = &v4[-v15];
        v17 = v4 - 16;
        v18 = &v6[8 * v13 - 16];
        v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v21 = *((_OWORD *)v17 - 1);
          v20 = *(_OWORD *)v17;
          *((_OWORD *)v17 - 1) = 0uLL;
          *(_OWORD *)v17 = 0uLL;
          *((_OWORD *)v18 - 1) = v21;
          *(_OWORD *)v18 = v20;
          v17 -= 32;
          v18 -= 32;
          v19 -= 4;
        }
        while (v19);
        v4 = v16;
        if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_16:
          v23 = *(char **)a1;
          v2 = *(char **)(a1 + 8);
          *(_QWORD *)a1 = v11;
          *(_QWORD *)(a1 + 8) = v9;
          *(_QWORD *)(a1 + 16) = v7;
          if (v2 != v23)
          {
            do
            {
              v24 = (void *)*((_QWORD *)v2 - 1);
              v2 -= 8;

            }
            while (v2 != v23);
            v2 = v23;
          }
          goto LABEL_19;
        }
      }
    }
    else
    {
      v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      v22 = *((_QWORD *)v4 - 1);
      v4 -= 8;
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v11 - 1) = v22;
      v11 -= 8;
    }
    while (v4 != v2);
    goto LABEL_16;
  }
}

void **std::vector<NSObject * {__strong}>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 1);
        v3 -= 8;

      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **_ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(void **a1)
{
  id *v2;
  id *v3;
  void *v4;

  v2 = (id *)*a1;
  if (*a1)
  {
    v3 = (id *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v3 - 4);
        v3 -= 7;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void _ZN12GKCRTreeNodeI8NSObjectDv2_fE12InsertObjectEPS0_S1_S1_21GKCRTreeSplitStrategy(float32x2_t *a1, void *a2, uint64_t a3, float32x2_t a4, float32x2_t a5)
{
  id v9;
  float32x2_t *v10;
  float32x2_t v11;
  unint64_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t *v15;
  float v16;
  float32x2_t v17;
  BOOL v18;
  int8x8_t v19;
  float32x2_t v20;
  float32x2_t v21;

  v9 = a2;
  v20 = a5;
  v21 = a4;
  v10 = (float32x2_t *)a1[3];
  v11 = a1[4];
  v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&v11 - (_QWORD)v10) >> 3);
  if (v12 >= a1->u32[0])
  {
    _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_((int *)a1, v9, &v21, &v20);
    switch((int)a3)
    {
      case 0:
        _ZN12GKCRTreeNodeI8NSObjectDv2_fE10SplitHalveEPS0_RKS1_S5_(a1, v9);
        break;
      case 1:
        _ZN12GKCRTreeNodeI8NSObjectDv2_fE11SplitLinearEPS0_RKS1_S5_(a1, v9);
        break;
      case 2:
        _ZN12GKCRTreeNodeI8NSObjectDv2_fE14SplitQuadraticEPS0_RKS1_S5_(a1, v9);
        break;
      case 3:
        _ZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS0_RKS1_S5_(a1, v9);
        break;
      default:
        __assert_rtn("InsertObject", "GKCRTree.h", 217, "false");
    }
  }
  else if ((float32x2_t *)v11 == v10 || (v13 = v10[6], *(_QWORD *)&v13))
  {
    _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_((int *)a1, v9, &v21, &v20);
  }
  else
  {
    v14 = 0;
    if (v12 <= 1)
      v12 = 1;
    v15 = v10 + 2;
    v16 = 3.4028e38;
    do
    {
      v17 = vsub_f32(vmaxnm_f32(*v15, a5), vminnm_f32(v15[-1], a4));
      v17.f32[0] = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v17), v17).f32[0];
      v18 = v17.f32[0] < v16;
      v16 = fminf(v17.f32[0], v16);
      if (v18)
        v13 = v14;
      ++*(_QWORD *)&v14;
      v15 += 7;
    }
    while (v12 != *(_QWORD *)&v14);
    _ZN12GKCRTreeNodeI8NSObjectDv2_fE12InsertObjectEPS0_S1_S1_21GKCRTreeSplitStrategy(&v10[7 * *(_QWORD *)&v13], v9, a3, *(double *)&a4, *(double *)&a5);
    v19 = vbsl_s8((int8x8_t)vcgt_f32(a1[2], v20), (int8x8_t)a1[2], (int8x8_t)v20);
    a1[1] = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v21, a1[1]), (int8x8_t)a1[1], (int8x8_t)v21);
    a1[2] = (float32x2_t)v19;
  }

}

void sub_227B58354(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B58364(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(int *a1, void *a2, float32x2_t *a3, float32x2_t *a4)
{
  id v7;
  int v8;
  float32x2_t v9;
  float32x2_t v10;
  id v11;
  unint64_t v12;
  __int128 v13;
  id v14;
  uint64_t v15;
  int8x8_t v16;
  __int128 v17;
  float32x2_t v18;
  void *v19[3];
  id v20;

  v7 = a2;
  v8 = *a1;
  v9 = *a3;
  v10 = *a4;
  v11 = v7;
  LODWORD(v17) = v8;
  *((float32x2_t *)&v17 + 1) = v9;
  v18 = v10;
  memset(v19, 0, sizeof(v19));
  v20 = v11;
  v12 = *((_QWORD *)a1 + 4);
  if (v12 >= *((_QWORD *)a1 + 5))
  {
    v15 = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEPS4_OT_((uint64_t *)a1 + 3, (uint64_t)&v17);
    v14 = v20;
  }
  else
  {
    v13 = v17;
    *(float32x2_t *)(v12 + 16) = v18;
    *(_OWORD *)v12 = v13;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 40) = 0;
    *(_QWORD *)(v12 + 24) = 0;
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m((_QWORD *)(v12 + 24), 0, 0, 0);
    v14 = v20;
    *(_QWORD *)(v12 + 48) = v14;
    v15 = v12 + 56;
    *((_QWORD *)a1 + 4) = v12 + 56;
  }
  *((_QWORD *)a1 + 4) = v15;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v19);
  if (*((_QWORD *)a1 + 4) - *((_QWORD *)a1 + 3) == 56)
  {
    *((float32x2_t *)a1 + 1) = *a3;
    *((float32x2_t *)a1 + 2) = *a4;
  }
  else
  {
    v16 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(a1 + 4), *a4), *(int8x8_t *)(a1 + 4), (int8x8_t)*a4);
    *((int8x8_t *)a1 + 1) = vbsl_s8((int8x8_t)vcgt_f32(*a3, *(float32x2_t *)(a1 + 2)), *(int8x8_t *)(a1 + 2), (int8x8_t)*a3);
    *((int8x8_t *)a1 + 2) = v16;
  }

}

void sub_227B584A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void **v17;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v17);
  _Unwind_Resume(a1);
}

void _ZN12GKCRTreeNodeI8NSObjectDv2_fE10SplitHalveEPS0_RKS1_S5_(float32x2_t *a1, void *a2)
{
  id v3;
  float32x2_t v4;
  int **v5;
  float32x2_t v6;
  float32x2_t v7;
  __int128 *v8;
  float32x2_t v9;
  __int128 v10;
  int *v11;
  int *v12;
  int *v13;
  void **v14;
  int *v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  void **v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  int *i;
  float32x2_t *v28;
  float32x2_t v29;
  float32x2_t v30;
  unint64_t v31;
  float32x2_t v32;
  float32x2_t *v33;
  unint64_t v34;
  float32x2_t v35;
  float v36;
  float32x2_t v37;
  float32x2_t v38;
  int32x2_t v39;
  int8x8_t v40;
  int32x2_t v41;
  int32x2_t v42;
  _BYTE v43[24];
  __int128 v44;
  id obj[2];
  __int128 v46;
  float32x2_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  __int128 v52;
  float32x2_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;

  v3 = a2;
  v5 = (int **)&a1[3];
  v4 = a1[3];
  v6 = *(float32x2_t *)(*(_QWORD *)&v4 + 16);
  v52 = *(_OWORD *)*(_QWORD *)&v4;
  v53 = v6;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v54, *(__int128 **)(*(_QWORD *)&v4 + 24), *(__int128 **)(*(_QWORD *)&v4 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)&v4 + 32) - *(_QWORD *)(*(_QWORD *)&v4 + 24)) >> 3));
  v57 = *(id *)(*(_QWORD *)&v4 + 48);
  v7 = a1[3];
  v46 = *(_OWORD *)(*(_QWORD *)&v7 + 56);
  v8 = *(__int128 **)(*(_QWORD *)&v7 + 80);
  v47 = *(float32x2_t *)(*(_QWORD *)&v7 + 72);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v48, v8, *(__int128 **)(*(_QWORD *)&v7 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)&v7 + 88) - (_QWORD)v8) >> 3));
  v51 = *(id *)(*(_QWORD *)&v7 + 104);
  *(_DWORD *)v43 = a1->i32[0];
  *(_OWORD *)&v43[8] = 0u;
  v44 = 0u;
  *(_OWORD *)obj = 0u;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE7reserveEm((uint64_t *)&v44, (*(_DWORD *)v43 + 1));
  v9 = a1[3];
  v10 = *(_OWORD *)v43;
  *(_QWORD *)(*(_QWORD *)&v9 + 16) = 0;
  *(_OWORD *)*(_QWORD *)&v9 = v10;
  if (*(_BYTE **)&v9 != v43)
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)(*(_QWORD *)&v9 + 24), v44, *((uint64_t *)&v44 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v44 + 1) - v44) >> 3));
  objc_storeStrong((id *)(*(_QWORD *)&v9 + 48), obj[1]);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v44);
  *(_DWORD *)v43 = a1->i32[0];
  *(_OWORD *)&v43[8] = 0u;
  v44 = 0u;
  *(_OWORD *)obj = 0u;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE7reserveEm((uint64_t *)&v44, (*(_DWORD *)v43 + 1));
  v11 = *v5;
  *(_OWORD *)(v11 + 14) = *(_OWORD *)v43;
  *((_QWORD *)v11 + 9) = *(_QWORD *)&v43[16];
  if (v11 + 14 != (int *)v43)
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)v11 + 10, v44, *((uint64_t *)&v44 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v44 + 1) - v44) >> 3));
  objc_storeStrong((id *)v11 + 13, obj[1]);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v44);
  _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(*v5, v57, (float32x2_t *)&v52 + 1, &v53);
  v12 = *v5;
  if ((uint64_t *)(*((_QWORD *)*v5 + 4) - 32) != &v54)
  {
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)(*((_QWORD *)*v5 + 4) - 32), v54, v55, 0x6DB6DB6DB6DB6DB7 * ((v55 - v54) >> 3));
    v12 = *v5;
  }
  _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(v12, v51, (float32x2_t *)&v46 + 1, &v47);
  v13 = *v5;
  v14 = (void **)(*((_QWORD *)*v5 + 4) - 32);
  if (v14 != (void **)&v48)
  {
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v14, v48, v49, 0x6DB6DB6DB6DB6DB7 * ((v49 - v48) >> 3));
    v13 = *v5;
  }
  v15 = (int *)a1[4];
  v16 = (char *)v15 - (char *)v13;
  v17 = 0x6DB6DB6DB6DB6DB7 * (((char *)v15 - (char *)v13) >> 3);
  v18 = v17 >> 1;
  if (v17 >= 6)
  {
    v19 = 0;
    v20 = 3;
    if (v18 > 3)
      v20 = v17 >> 1;
    v21 = v20 - 2;
    do
    {
      _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(*v5, *(void **)&(*v5)[v19 + 40], (float32x2_t *)&(*v5)[v19 + 30], (float32x2_t *)&(*v5)[v19 + 32]);
      v22 = &(*v5)[v19];
      v23 = (void **)(*((_QWORD *)*v5 + 4) - 32);
      if (v22 + 34 != (int *)v23)
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v23, *((_QWORD *)v22 + 17), *((_QWORD *)v22 + 18), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v22 + 18) - *((_QWORD *)v22 + 17)) >> 3));
      v19 += 14;
      --v21;
    }
    while (v21);
    v13 = (int *)a1[3];
    v15 = (int *)a1[4];
    v16 = (char *)v15 - (char *)v13;
    v17 = 0x6DB6DB6DB6DB6DB7 * (((char *)v15 - (char *)v13) >> 3);
  }
  if (v18 < v17)
  {
    v24 = 14 * v18;
    do
    {
      _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(v13 + 14, *(void **)&v13[v24 + 12], (float32x2_t *)&v13[v24 + 2], (float32x2_t *)&v13[v24 + 4]);
      v13 = *v5;
      v25 = &(*v5)[v24];
      v26 = *((_QWORD *)*v5 + 11);
      if (v25 != (int *)(v26 - 56))
      {
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)(v26 - 32), *((_QWORD *)v25 + 3), *((_QWORD *)v25 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v25 + 4) - *((_QWORD *)v25 + 3)) >> 3));
        v13 = *v5;
      }
      ++v18;
      v15 = (int *)a1[4];
      v16 = (char *)v15 - (char *)v13;
      v17 = 0x6DB6DB6DB6DB6DB7 * (((char *)v15 - (char *)v13) >> 3);
      v24 += 14;
    }
    while (v18 < v17);
  }
  if (v17 > 1)
  {
    if (v16 == 112)
    {
      i = v15;
    }
    else
    {
      for (i = v13 + 28; v15 != i; v15 -= 14)
      {

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)v15 - 4);
      }
      a1[4] = (float32x2_t)i;
    }
  }
  else
  {
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE8__appendEm((uint64_t *)&a1[3], 2 - v17);
    i = (int *)a1[4];
  }
  v28 = (float32x2_t *)a1[3];
  v29 = v28[1];
  a1[1] = v29;
  v30 = v28[2];
  a1[2] = v30;
  v31 = 0x6DB6DB6DB6DB6DB7 * (((char *)i - (char *)v28) >> 3);
  if (v31 >= 2)
  {
    v32 = (float32x2_t)vzip2_s32((int32x2_t)v30, (int32x2_t)v29);
    v33 = v28 + 9;
    v34 = v31 - 1;
    do
    {
      v35 = v33[-1];
      v36 = v29.f32[1];
      v37 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v29, 1), (float32x2_t)vdup_lane_s32((int32x2_t)v32, 1)), 0), (int8x8_t)v32, (int8x8_t)v29);
      v29.i32[0] = vminnm_f32(v35, v29).u32[0];
      v38 = *v33;
      v33 += 7;
      v39 = (int32x2_t)vmaxnm_f32(v38, v30);
      v40 = (int8x8_t)vzip1_s32(v39, (int32x2_t)v32);
      v39.i32[1] = v30.i32[1];
      v29.i32[1] = v37.i32[1];
      v37.f32[0] = fminf(v32.f32[1], v36);
      v41 = (int32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v37, (float32x2_t)vdup_lane_s32((int32x2_t)v35, 1)), 0), (int8x8_t)v35, (int8x8_t)v29);
      v29.i32[1] = v41.i32[1];
      v37.i32[0] = v30.i32[1];
      v30 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v32, (float32x2_t)vdup_lane_s32((int32x2_t)v30, 1)), 0), v40, (int8x8_t)v39);
      v32.f32[0] = fmaxf(v32.f32[0], v37.f32[0]);
      v42 = (int32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v38, 1), v32), 0), (int8x8_t)v38, (int8x8_t)v30);
      v30.i32[1] = v42.i32[1];
      a1[1] = v29;
      a1[2] = v30;
      v32 = (float32x2_t)vzip2_s32(v42, v41);
      --v34;
    }
    while (v34);
  }

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v48);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v54);

}

void sub_227B58A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v31;
  void **v32;
  void **v33;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v33);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v32);

  _Unwind_Resume(a1);
}

void _ZN12GKCRTreeNodeI8NSObjectDv2_fE11SplitLinearEPS0_RKS1_S5_(float32x2_t *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  size_t v7;
  float32x2_t v8;
  int **v9;
  unint64_t v10;
  float32x2_t v11;
  float32x2_t v12;
  uint64_t v13;
  int32x2_t v14;
  float32x2_t *v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float32x2_t v21;
  __int128 *v22;
  __int128 *v23;
  int *v24;
  __int128 *v25;
  int *v26;
  __int128 v27;
  int *v28;
  uint64_t v29;
  char *v30;
  int *v31;
  void **v32;
  int *v33;
  void **v34;
  int *v35;
  int *v36;
  int64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int *v41;
  uint64_t *v42;
  void **v43;
  int *i;
  float32x2_t *v45;
  float32x2_t v46;
  float32x2_t v47;
  unint64_t v48;
  float32x2_t v49;
  float32x2_t *v50;
  unint64_t v51;
  float32x2_t v52;
  float v53;
  float32x2_t v54;
  float32x2_t v55;
  int32x2_t v56;
  int8x8_t v57;
  int32x2_t v58;
  int32x2_t v59;
  uint64_t v60;
  id v61;
  void **v62;
  _BYTE v63[24];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  float32x2_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  __int128 v72;
  float32x2_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v60 = (uint64_t)&v60;
  v4 = (a1->i32[0] + 1);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v60 - v5;
  bzero((char *)&v60 - v5, v7);
  v8 = a1[3];
  v9 = (int **)&a1[3];
  v10 = (*(_QWORD *)&a1[4] - *(_QWORD *)&v8) / 56;
  if (*(_QWORD *)&a1[4] == *(_QWORD *)&v8)
  {
    v14 = 0;
  }
  else
  {
    v11 = a1[1];
    v12 = a1[2];
    if (v10 <= 1)
      v13 = 1;
    else
      v13 = (*(_QWORD *)&a1[4] - *(_QWORD *)&v8) / 56;
    v14 = 0;
    v15 = (float32x2_t *)(*(_QWORD *)&v8 + 16);
    v16 = v6;
    do
    {
      v17 = *(_QWORD *)&vcagt_f32(vsub_f32(v12, *v15), vsub_f32(v11, v15[-1])) | 0x100000001;
      *v16 = v17;
      v16[v4] = HIDWORD(v17);
      v14 = vadd_s32(v14, (int32x2_t)v17);
      v15 += 7;
      ++v16;
      --v13;
    }
    while (v13);
  }
  if (v14.i32[0] >= 0)
    v18 = v14.u32[0];
  else
    v18 = -v14.i32[0];
  if (v10 + 1 < v18)
    v19 = v10 + 1;
  else
    v19 = v18;
  if (v14.i32[1] >= 0)
    v20 = v14.u32[1];
  else
    v20 = -v14.i32[1];
  v21 = *(float32x2_t *)(*(_QWORD *)&v8 + 16);
  v72 = *(_OWORD *)*(_QWORD *)&v8;
  v73 = v21;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v22 = *(__int128 **)(*(_QWORD *)&v8 + 24);
  v23 = *(__int128 **)(*(_QWORD *)&v8 + 32);
  v62 = (void **)&v74;
  v61 = v3;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v74, v22, v23, 0x6DB6DB6DB6DB6DB7 * (((char *)v23 - (char *)v22) >> 3));
  v77 = *(id *)(*(_QWORD *)&v8 + 48);
  v24 = *v9;
  v66 = *(_OWORD *)(*v9 + 14);
  v25 = (__int128 *)*((_QWORD *)v24 + 10);
  v67 = *(float32x2_t *)(v24 + 18);
  v68 = 0;
  v69 = 0;
  v70 = 0;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v68, v25, *((__int128 **)v24 + 11), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v24 + 11) - (_QWORD)v25) >> 3));
  v71 = *((id *)v24 + 13);
  *(_DWORD *)v63 = a1->i32[0];
  *(_OWORD *)&v63[8] = 0u;
  v64 = 0u;
  v65 = 0u;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE7reserveEm((uint64_t *)&v64, (*(_DWORD *)v63 + 1));
  v26 = *v9;
  v27 = *(_OWORD *)v63;
  *((_QWORD *)v26 + 2) = *(_QWORD *)&v63[16];
  *(_OWORD *)v26 = v27;
  if (v26 != (int *)v63)
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)v26 + 3, v64, *((uint64_t *)&v64 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v64 + 1) - v64) >> 3));
  objc_storeStrong((id *)v26 + 6, *((id *)&v65 + 1));

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v64);
  *(_DWORD *)v63 = a1->i32[0];
  *(_OWORD *)&v63[8] = 0u;
  v64 = 0u;
  v65 = 0u;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE7reserveEm((uint64_t *)&v64, (*(_DWORD *)v63 + 1));
  v28 = *v9;
  *(_OWORD *)(v28 + 14) = *(_OWORD *)v63;
  *((_QWORD *)v28 + 9) = *(_QWORD *)&v63[16];
  if (v28 + 14 != (int *)v63)
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)v28 + 10, v64, *((uint64_t *)&v64 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v64 + 1) - v64) >> 3));
  objc_storeStrong((id *)v28 + 13, *((id *)&v65 + 1));

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v64);
  if (v19 <= v20)
    v29 = 0;
  else
    v29 = v4;
  v30 = &v6[4 * v29];
  v31 = *v9;
  if (*(_DWORD *)v30 == -1)
  {
    _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(v31, v77, (float32x2_t *)&v72 + 1, &v73);
    v32 = (void **)(*((_QWORD *)*v9 + 4) - 32);
    if (v32 == v62)
      goto LABEL_30;
    goto LABEL_29;
  }
  _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(v31 + 14, v77, (float32x2_t *)&v72 + 1, &v73);
  v32 = (void **)(*((_QWORD *)*v9 + 11) - 32);
  if (v32 != v62)
LABEL_29:
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v32, v74, v75, 0x6DB6DB6DB6DB6DB7 * ((v75 - v74) >> 3));
LABEL_30:
  v33 = *v9;
  if (*((_DWORD *)v30 + 1) == -1)
  {
    _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(v33, v71, (float32x2_t *)&v66 + 1, &v67);
    v34 = (void **)(*((_QWORD *)*v9 + 4) - 32);
    if (v34 == (void **)&v68)
      goto LABEL_35;
    goto LABEL_34;
  }
  _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(v33 + 14, v71, (float32x2_t *)&v66 + 1, &v67);
  v34 = (void **)(*((_QWORD *)*v9 + 11) - 32);
  if (v34 != (void **)&v68)
LABEL_34:
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v34, v68, v69, 0x6DB6DB6DB6DB6DB7 * ((v69 - v68) >> 3));
LABEL_35:
  v35 = (int *)a1[3];
  v36 = (int *)a1[4];
  v37 = (char *)v36 - (char *)v35;
  v38 = 0x6DB6DB6DB6DB6DB7 * (((char *)v36 - (char *)v35) >> 3);
  if (v38 >= 3)
  {
    v39 = 0;
    v40 = 2;
    do
    {
      if (*(_DWORD *)&v30[4 * v40] == -1)
      {
        _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(v35, *(void **)&v35[v39 + 40], (float32x2_t *)&v35[v39 + 30], (float32x2_t *)&v35[v39 + 32]);
        v41 = *v9;
        v43 = (void **)(*((_QWORD *)*v9 + 4) - 32);
        if (&(*v9)[v39 + 34] == (int *)v43)
          goto LABEL_38;
        v42 = (uint64_t *)&v41[14 * v40 + 6];
      }
      else
      {
        _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(v35 + 14, *(void **)&v35[v39 + 40], (float32x2_t *)&v35[v39 + 30], (float32x2_t *)&v35[v39 + 32]);
        v41 = *v9;
        v42 = (uint64_t *)&(*v9)[v39 + 34];
        v43 = (void **)(*((_QWORD *)*v9 + 11) - 32);
        if (v42 == (uint64_t *)v43)
          goto LABEL_38;
      }
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v43, *v42, *(_QWORD *)&v41[v39 + 36], 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)&v41[v39 + 36] - *v42) >> 3));
LABEL_38:
      ++v40;
      v35 = (int *)a1[3];
      v36 = (int *)a1[4];
      v37 = (char *)v36 - (char *)v35;
      v38 = 0x6DB6DB6DB6DB6DB7 * (((char *)v36 - (char *)v35) >> 3);
      v39 += 14;
    }
    while (v38 > v40);
  }
  if (v38 > 1)
  {
    if (v37 != 112)
    {
      for (i = v35 + 28; v36 != i; v36 -= 14)
      {

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)v36 - 4);
      }
      a1[4] = (float32x2_t)i;
      v36 = i;
    }
  }
  else
  {
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE8__appendEm((uint64_t *)&a1[3], 2 - v38);
    v36 = (int *)a1[4];
  }
  v45 = (float32x2_t *)a1[3];
  v46 = v45[1];
  a1[1] = v46;
  v47 = v45[2];
  a1[2] = v47;
  v48 = 0x6DB6DB6DB6DB6DB7 * (((char *)v36 - (char *)v45) >> 3);
  if (v48 >= 2)
  {
    v49 = (float32x2_t)vzip2_s32((int32x2_t)v47, (int32x2_t)v46);
    v50 = v45 + 9;
    v51 = v48 - 1;
    do
    {
      v52 = v50[-1];
      v53 = v46.f32[1];
      v54 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v46, 1), (float32x2_t)vdup_lane_s32((int32x2_t)v49, 1)), 0), (int8x8_t)v49, (int8x8_t)v46);
      v46.i32[0] = vminnm_f32(v52, v46).u32[0];
      v55 = *v50;
      v50 += 7;
      v56 = (int32x2_t)vmaxnm_f32(v55, v47);
      v57 = (int8x8_t)vzip1_s32(v56, (int32x2_t)v49);
      v56.i32[1] = v47.i32[1];
      v46.i32[1] = v54.i32[1];
      v54.f32[0] = fminf(v49.f32[1], v53);
      v58 = (int32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v54, (float32x2_t)vdup_lane_s32((int32x2_t)v52, 1)), 0), (int8x8_t)v52, (int8x8_t)v46);
      v46.i32[1] = v58.i32[1];
      v54.i32[0] = v47.i32[1];
      v47 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v49, (float32x2_t)vdup_lane_s32((int32x2_t)v47, 1)), 0), v57, (int8x8_t)v56);
      v49.f32[0] = fmaxf(v49.f32[0], v54.f32[0]);
      v59 = (int32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v55, 1), v49), 0), (int8x8_t)v55, (int8x8_t)v47);
      v47.i32[1] = v59.i32[1];
      a1[1] = v46;
      a1[2] = v47;
      v49 = (float32x2_t)vzip2_s32(v59, v58);
      --v51;
    }
    while (v51);
  }

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v68);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v62);

}

void sub_227B5917C(_Unwind_Exception *a1)
{
  void **v1;
  void **v2;
  uint64_t v3;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v2);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v1);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(*(void ***)(v3 - 288));
  _Unwind_Resume(a1);
}

void _ZN12GKCRTreeNodeI8NSObjectDv2_fE14SplitQuadraticEPS0_RKS1_S5_(float32x2_t *a1, void *a2)
{
  id v3;
  float32x2_t v4;
  int **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float32x2_t *v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  float32x2_t *v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t *v20;
  uint64_t v21;
  float32x2_t v22;
  float v23;
  float32x2_t v24;
  int *v25;
  __int128 *v26;
  int *v27;
  __int128 v28;
  int *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  int32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  void **v37;
  int *v38;
  int32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  void **v43;
  int *v44;
  int *v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int *v50;
  float32x2_t *v51;
  float32x2_t *v52;
  int32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  int *v57;
  void **v58;
  uint64_t *v59;
  int *i;
  float32x2_t *v61;
  float32x2_t v62;
  float32x2_t v63;
  unint64_t v64;
  float32x2_t v65;
  float32x2_t *v66;
  unint64_t v67;
  float32x2_t v68;
  float v69;
  float32x2_t v70;
  float32x2_t v71;
  int32x2_t v72;
  int8x8_t v73;
  int32x2_t v74;
  int32x2_t v75;
  id v76;
  _BYTE v77[24];
  __int128 v78;
  id obj[2];
  __int128 v80;
  float32x2_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  __int128 v86;
  float32x2_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;

  v3 = a2;
  v4 = a1[3];
  v5 = (int **)&a1[3];
  v6 = *(_QWORD *)&a1[4] - *(_QWORD *)&v4;
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = v6 / 56;
    if (v10 <= 1)
      v11 = 1;
    else
      v11 = v10;
    v12 = (float32x2_t *)(*(_QWORD *)&v4 + 72);
    v13 = 0.0;
    v14 = 1;
    do
    {
      v16 = v7 + 1;
      if (v10 <= v7 + 1)
      {
        v15 = v13;
      }
      else
      {
        v17 = (float32x2_t *)(*(_QWORD *)&v4 + 56 * v7);
        v18 = v17[1];
        v19 = v17[2];
        v20 = v12;
        v21 = v14;
        do
        {
          v22 = vsub_f32(vmaxnm_f32(*v20, v19), vminnm_f32(v20[-1], v18));
          v23 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v22), v22).f32[0];
          v15 = fmaxf(v23, v13);
          if (v23 > v13)
          {
            v9 = v7;
            v8 = v21;
          }
          ++v21;
          v20 += 7;
          v13 = v15;
        }
        while (v10 != v21);
      }
      ++v14;
      v12 += 7;
      ++v7;
      v13 = v15;
    }
    while (v16 != v11);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v24 = *(float32x2_t *)(*(_QWORD *)&v4 + 16);
  v86 = *(_OWORD *)*(_QWORD *)&v4;
  v87 = v24;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v88, *(__int128 **)(*(_QWORD *)&v4 + 24), *(__int128 **)(*(_QWORD *)&v4 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)&v4 + 32) - *(_QWORD *)(*(_QWORD *)&v4 + 24)) >> 3));
  v91 = *(id *)(*(_QWORD *)&v4 + 48);
  v25 = *v5;
  v80 = *(_OWORD *)(*v5 + 14);
  v26 = (__int128 *)*((_QWORD *)v25 + 10);
  v81 = *(float32x2_t *)(v25 + 18);
  v82 = 0;
  v83 = 0;
  v84 = 0;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v82, v26, *((__int128 **)v25 + 11), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v25 + 11) - (_QWORD)v26) >> 3));
  v85 = *((id *)v25 + 13);
  *(_DWORD *)v77 = a1->i32[0];
  *(_OWORD *)&v77[8] = 0u;
  v78 = 0u;
  *(_OWORD *)obj = 0u;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE7reserveEm((uint64_t *)&v78, (*(_DWORD *)v77 + 1));
  v27 = *v5;
  v28 = *(_OWORD *)v77;
  *((_QWORD *)v27 + 2) = 0;
  *(_OWORD *)v27 = v28;
  if (v27 != (int *)v77)
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)v27 + 3, v78, *((uint64_t *)&v78 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v78 + 1) - v78) >> 3));
  objc_storeStrong((id *)v27 + 6, obj[1]);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v78);
  *(_DWORD *)v77 = a1->i32[0];
  *(_OWORD *)&v77[8] = 0u;
  v78 = 0u;
  *(_OWORD *)obj = 0u;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE7reserveEm((uint64_t *)&v78, (*(_DWORD *)v77 + 1));
  v29 = *v5;
  *(_OWORD *)(v29 + 14) = *(_OWORD *)v77;
  *((_QWORD *)v29 + 9) = *(_QWORD *)&v77[16];
  if (v29 + 14 != (int *)v77)
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)v29 + 10, v78, *((uint64_t *)&v78 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v78 + 1) - v78) >> 3));
  objc_storeStrong((id *)v29 + 13, obj[1]);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v78);
  v30 = *v5;
  v31 = 14 * v9;
  v32 = 14 * v8;
  v33 = vrev64_s32((int32x2_t)vsub_f32(vmaxnm_f32(*(float32x2_t *)&(*v5)[14 * v9 + 4], v87), vminnm_f32(*(float32x2_t *)&(*v5)[14 * v9 + 2], *(float32x2_t *)((char *)&v86 + 8))));
  v34 = (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(vmaxnm_f32(*(float32x2_t *)&(*v5)[v32 + 4], v87), vminnm_f32(*(float32x2_t *)&(*v5)[v32 + 2], *(float32x2_t *)((char *)&v86 + 8))));
  v35 = (float32x2_t)__PAIR64__(v34.u32[0], v33.u32[0]);
  v34.i32[0] = v33.i32[1];
  v36 = vmul_f32(v35, v34);
  if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v36, 1), v36).u8[0] & 1) == 0)
  {
    _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(v30 + 14, v91, (float32x2_t *)&v86 + 1, &v87);
    v37 = (void **)(*((_QWORD *)*v5 + 11) - 32);
    if (v37 == (void **)&v88)
      goto LABEL_24;
    goto LABEL_23;
  }
  _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(v30, v91, (float32x2_t *)&v86 + 1, &v87);
  v37 = (void **)(*((_QWORD *)*v5 + 4) - 32);
  if (v37 != (void **)&v88)
LABEL_23:
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v37, v88, v89, 0x6DB6DB6DB6DB6DB7 * ((v89 - v88) >> 3));
LABEL_24:
  v38 = *v5;
  v39 = vrev64_s32((int32x2_t)vsub_f32(vmaxnm_f32(*(float32x2_t *)&(*v5)[v31 + 4], v81), vminnm_f32(*(float32x2_t *)&(*v5)[v31 + 2], *(float32x2_t *)((char *)&v80 + 8))));
  v40 = (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(vmaxnm_f32(*(float32x2_t *)&(*v5)[v32 + 4], v81), vminnm_f32(*(float32x2_t *)&(*v5)[v32 + 2], *(float32x2_t *)((char *)&v80 + 8))));
  v41 = (float32x2_t)__PAIR64__(v40.u32[0], v39.u32[0]);
  v40.i32[0] = v39.i32[1];
  v42 = vmul_f32(v41, v40);
  if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v42, 1), v42).u8[0] & 1) != 0)
  {
    _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(v38, v85, (float32x2_t *)&v80 + 1, &v81);
    v43 = (void **)(*((_QWORD *)*v5 + 4) - 32);
    if (v43 == (void **)&v82)
      goto LABEL_29;
    goto LABEL_28;
  }
  _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(v38 + 14, v85, (float32x2_t *)&v80 + 1, &v81);
  v43 = (void **)(*((_QWORD *)*v5 + 11) - 32);
  if (v43 != (void **)&v82)
LABEL_28:
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v43, v82, v83, 0x6DB6DB6DB6DB6DB7 * ((v83 - v82) >> 3));
LABEL_29:
  v44 = (int *)a1[3];
  v45 = (int *)a1[4];
  v46 = (char *)v45 - (char *)v44;
  v47 = 0x6DB6DB6DB6DB6DB7 * (((char *)v45 - (char *)v44) >> 3);
  if (v47 < 3)
    goto LABEL_39;
  v76 = v3;
  v48 = 0;
  v49 = 2;
  do
  {
    v50 = &v44[v48];
    v51 = (float32x2_t *)&v44[v48 + 32];
    v52 = (float32x2_t *)&v44[v48 + 30];
    v53 = vrev64_s32((int32x2_t)vsub_f32(vmaxnm_f32(*(float32x2_t *)&v44[v31 + 4], *v51), vminnm_f32(*(float32x2_t *)&v44[v31 + 2], *v52)));
    v54 = (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(vmaxnm_f32(*(float32x2_t *)&v44[v32 + 4], *v51), vminnm_f32(*(float32x2_t *)&v44[v32 + 2], *v52)));
    v55 = (float32x2_t)__PAIR64__(v54.u32[0], v53.u32[0]);
    v54.i32[0] = v53.i32[1];
    v56 = vmul_f32(v55, v54);
    if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v56, 1), v56).u8[0] & 1) != 0)
    {
      _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(v44, *((void **)v50 + 20), v52, v51);
      v57 = *v5;
      v58 = (void **)(*((_QWORD *)*v5 + 4) - 32);
      if (&(*v5)[v48 + 34] != (int *)v58)
      {
        v59 = (uint64_t *)&v57[14 * v49 + 6];
LABEL_31:
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v58, *v59, *(_QWORD *)&v57[v48 + 36], 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)&v57[v48 + 36] - *v59) >> 3));
      }
    }
    else
    {
      _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(v44 + 14, *((void **)v50 + 20), v52, v51);
      v57 = *v5;
      v59 = (uint64_t *)&(*v5)[v48 + 34];
      v58 = (void **)(*((_QWORD *)*v5 + 11) - 32);
      if (v59 != (uint64_t *)v58)
        goto LABEL_31;
    }
    ++v49;
    v44 = (int *)a1[3];
    v45 = (int *)a1[4];
    v46 = (char *)v45 - (char *)v44;
    v47 = 0x6DB6DB6DB6DB6DB7 * (((char *)v45 - (char *)v44) >> 3);
    v48 += 14;
  }
  while (v47 > v49);
  v3 = v76;
LABEL_39:
  if (v47 > 1)
  {
    if (v46 == 112)
    {
      i = v45;
    }
    else
    {
      for (i = v44 + 28; v45 != i; v45 -= 14)
      {

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)v45 - 4);
      }
      a1[4] = (float32x2_t)i;
    }
  }
  else
  {
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE8__appendEm((uint64_t *)&a1[3], 2 - v47);
    i = (int *)a1[4];
  }
  v61 = (float32x2_t *)a1[3];
  v62 = v61[1];
  a1[1] = v62;
  v63 = v61[2];
  a1[2] = v63;
  v64 = 0x6DB6DB6DB6DB6DB7 * (((char *)i - (char *)v61) >> 3);
  if (v64 >= 2)
  {
    v65 = (float32x2_t)vzip2_s32((int32x2_t)v63, (int32x2_t)v62);
    v66 = v61 + 9;
    v67 = v64 - 1;
    do
    {
      v68 = v66[-1];
      v69 = v62.f32[1];
      v70 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v62, 1), (float32x2_t)vdup_lane_s32((int32x2_t)v65, 1)), 0), (int8x8_t)v65, (int8x8_t)v62);
      v62.i32[0] = vminnm_f32(v68, v62).u32[0];
      v71 = *v66;
      v66 += 7;
      v72 = (int32x2_t)vmaxnm_f32(v71, v63);
      v73 = (int8x8_t)vzip1_s32(v72, (int32x2_t)v65);
      v72.i32[1] = v63.i32[1];
      v62.i32[1] = v70.i32[1];
      v70.f32[0] = fminf(v65.f32[1], v69);
      v74 = (int32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v70, (float32x2_t)vdup_lane_s32((int32x2_t)v68, 1)), 0), (int8x8_t)v68, (int8x8_t)v62);
      v62.i32[1] = v74.i32[1];
      v70.i32[0] = v63.i32[1];
      v63 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v65, (float32x2_t)vdup_lane_s32((int32x2_t)v63, 1)), 0), v73, (int8x8_t)v72);
      v65.f32[0] = fmaxf(v65.f32[0], v70.f32[0]);
      v75 = (int32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v71, 1), v65), 0), (int8x8_t)v71, (int8x8_t)v63);
      v63.i32[1] = v75.i32[1];
      a1[1] = v62;
      a1[2] = v63;
      v65 = (float32x2_t)vzip2_s32(v75, v74);
      --v67;
    }
    while (v67);
  }

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v82);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v88);

}

void sub_227B59900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  void **v31;
  void **v32;
  void **v33;
  void *v34;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v33);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v32);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v31);
  _Unwind_Resume(a1);
}

void _ZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS0_RKS1_S5_(_QWORD *a1, void *a2)
{
  int v3;
  uint64_t *i;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  float v9;
  BOOL v10;
  int v11;
  char v12;
  float v13;
  char v14;
  uint64_t v15;
  void **v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float64x2_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  int *v34;
  __int128 v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  char *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  float v53;
  float v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  float v58;
  float v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  float v63;
  float v64;
  float *v65;
  float v66;
  float v67;
  unint64_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float *v73;
  unint64_t v74;
  float v75;
  unint64_t v76;
  float v77;
  float v78;
  float *v79;
  float v80;
  float v81;
  unint64_t v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float *v87;
  unint64_t v88;
  float v89;
  uint64_t v90;
  void **v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void **v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void **v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void **v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void **v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  float v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t *v124;
  float v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  float v129;
  float v130;
  unint64_t v131;
  uint64_t v132;
  _BOOL4 v133;
  _BOOL4 v134;
  float v135;
  int v136;
  float v137;
  unint64_t v138;
  float v139;
  __int32 *v140;
  float32x4_t v141;
  unint64_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float *v146;
  unint64_t v147;
  float v148;
  unint64_t v149;
  float v150;
  float v151;
  float *v152;
  float v153;
  float v154;
  unint64_t v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float *v160;
  unint64_t v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  float32x2_t v174;
  _OWORD *v175;
  __int128 *v176;
  _OWORD *v177;
  __int128 v178;
  _OWORD *v179;
  unint64_t v180;
  uint64_t j;
  char *v182;
  char *v183;
  unint64_t v184;
  char *v185;
  char *v186;
  void **v187;
  uint64_t v188;
  uint64_t *v189;
  char *v190;
  uint64_t v191;
  void **v192;
  void *v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t m;
  float32x2_t *v199;
  float32x2_t v200;
  float32x2_t v201;
  unint64_t v202;
  float32x2_t v203;
  float32x2_t *v204;
  unint64_t v205;
  float32x2_t v206;
  float v207;
  float32x2_t v208;
  float32x2_t v209;
  int32x2_t v210;
  int8x8_t v211;
  int32x2_t v212;
  int32x2_t v213;
  id v214;
  char v215;
  int v216;
  uint64_t v217;
  int v218;
  char v219;
  uint64_t v220;
  _QWORD *v221;
  int **v222;
  float v223;
  float v224;
  unsigned int v225;
  _BYTE v226[24];
  __int128 v227;
  id obj[2];
  __int128 v229;
  char *v230;
  uint64_t v231;
  _QWORD v232[2];
  id v233;
  __int128 v234;
  char *v235;
  uint64_t v236;
  _QWORD v237[2];
  id v238;
  char *v239;
  char *v240;
  uint64_t v241;
  char *v242;
  char *k;
  uint64_t v244;

  v214 = a2;
  i = a1 + 3;
  v3 = *(_DWORD *)a1;
  if (*(int *)a1 >= 0)
    v5 = *(_DWORD *)a1;
  else
    v5 = v3 + 1;
  v6 = v5 >> 1;
  if (v3 < 6)
    v6 = 2;
  v7 = (v6 - 1);
  v220 = (v3 - 2 * v6 + 2);
  v221 = a1;
  v222 = (int **)(a1 + 3);
  v225 = v6 - 1;
  if ((int)v220 >= 1)
  {
    v218 = 0;
    v8 = 1;
    v216 = -1;
    v9 = 3.4028e38;
    v217 = 56 * v7;
    while (1)
    {
      v215 = v8;
      v12 = 1;
      v13 = 0.0;
      do
      {
        v14 = v12;
        v15 = a1[3];
        v16 = (void **)a1[4];
        v17 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((uint64_t)v16 - v15) >> 3));
        if (v16 == (void **)v15)
          v18 = 0;
        else
          v18 = v17;
        v219 = v14;
        LODWORD(v234) = v218;
        if ((v14 & 1) != 0)
          _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_Lb0EEEvT1_SC_T0_NS_15iterator_traitsISC_E15difference_typeEb(v15, v16, &v234, v18, 1);
        else
          _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_Lb0EEEvT1_SC_T0_NS_15iterator_traitsISC_E15difference_typeEb(v15, v16, &v234, v18, 1);
        v19 = 0;
        v20 = 3.4028e38;
        v21 = v217;
        do
        {
          v26 = (int *)*i;
          v27 = *i + 56 * v7;
          v235 = 0;
          v28 = v27 + 56 * v19;
          v234 = 0uLL;
          v29 = v28 - (_QWORD)v26;
          if ((int *)v28 == v26)
          {
            v36 = 0;
          }
          else
          {
            v30 = 0x6DB6DB6DB6DB6DB7 * (v29 >> 3);
            if (v30 > 0x492492492492492)
              _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
            v31 = (char *)operator new(v29);
            v32 = 0;
            *(_QWORD *)&v234 = v31;
            *((_QWORD *)&v234 + 1) = v31;
            v235 = &v31[56 * v30];
            do
            {
              v33 = &v31[v32 * 4];
              v34 = &v26[v32];
              v35 = *(_OWORD *)&v26[v32];
              *((_QWORD *)v33 + 2) = *(_QWORD *)&v26[v32 + 4];
              *(_OWORD *)v33 = v35;
              *(_QWORD *)&v31[v32 * 4 + 24] = 0;
              *((_QWORD *)v33 + 4) = 0;
              *((_QWORD *)v33 + 5) = 0;
              _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v31[v32 * 4 + 24], *(__int128 **)&v26[v32 + 6], *(__int128 **)&v26[v32 + 8], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&v26[v32 + 8] - *(_QWORD *)&v26[v32 + 6]) >> 3));
              *((_QWORD *)v33 + 6) = *(id *)&v26[v32 + 12];
              v32 += 14;
            }
            while (v34 + 14 != (int *)v28);
            v36 = &v31[v32 * 4];
            i = (uint64_t *)v222;
            v26 = *v222;
            *((_QWORD *)&v234 + 1) = v36;
          }
          v37 = (char *)v221[4];
          v230 = 0;
          v38 = (uint64_t)&v26[14 * v225 + 14 * v19];
          v229 = 0uLL;
          v39 = (int64_t)&v37[-v38];
          if (v37 == (char *)v38)
          {
            v48 = 0;
            v47 = 0;
          }
          else
          {
            v40 = 0x6DB6DB6DB6DB6DB7 * (v39 >> 3);
            if (v40 > 0x492492492492492)
              _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
            v41 = (char *)operator new(v39);
            v42 = 0;
            *(_QWORD *)&v229 = v41;
            *((_QWORD *)&v229 + 1) = v41;
            v230 = &v41[56 * v40];
            v43 = (char *)v26 + v21;
            do
            {
              v44 = &v41[v42];
              v45 = &v43[v42];
              v46 = *(_OWORD *)&v43[v42];
              *((_QWORD *)v44 + 2) = *(_QWORD *)&v43[v42 + 16];
              *(_OWORD *)v44 = v46;
              *(_QWORD *)&v41[v42 + 24] = 0;
              *((_QWORD *)v44 + 4) = 0;
              *((_QWORD *)v44 + 5) = 0;
              _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v41[v42 + 24], *(__int128 **)&v43[v42 + 24], *(__int128 **)&v43[v42 + 32], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&v43[v42 + 32] - *(_QWORD *)&v43[v42 + 24]) >> 3));
              *((_QWORD *)v44 + 6) = *(id *)&v43[v42 + 48];
              v42 += 56;
            }
            while (v45 + 56 != v37);
            v47 = &v41[v42];
            v48 = v229;
            v36 = (char *)*((_QWORD *)&v234 + 1);
            *((_QWORD *)&v229 + 1) = v47;
            i = (uint64_t *)v222;
          }
          v49 = (char *)v234;
          if ((unint64_t)((uint64_t)&v36[-v234] / 56) <= 1)
            v50 = 1;
          else
            v50 = (uint64_t)&v36[-v234] / 56;
          if ((unint64_t)((uint64_t)&v47[-v48] / 56) <= 1)
            v51 = 1;
          else
            v51 = (uint64_t)&v47[-v48] / 56;
          if (v36 == (char *)v234)
          {
            v54 = 1.1755e-38;
            v53 = 3.4028e38;
            if (v47 == (char *)v48)
              goto LABEL_49;
          }
          else
          {
            v52 = (uint64_t *)(v234 + 16);
            v53 = 3.4028e38;
            v54 = 1.1755e-38;
            v55 = v50;
            do
            {
              v53 = fminf(COERCE_FLOAT(*(v52 - 1)), v53);
              v56 = *v52;
              v52 += 7;
              v54 = fmaxf(*(float *)&v56, v54);
              --v55;
            }
            while (v55);
            if (v47 == (char *)v48)
            {
LABEL_49:
              v224 = -3.4028e38;
              if (v36 == (char *)v234)
                goto LABEL_50;
              goto LABEL_46;
            }
          }
          v57 = (uint64_t *)(v48 + 16);
          v58 = 3.4028e38;
          v59 = 1.1755e-38;
          v60 = v51;
          do
          {
            v58 = fminf(COERCE_FLOAT(*(v57 - 1)), v58);
            v61 = *v57;
            v57 += 7;
            v59 = fmaxf(*(float *)&v61, v59);
            --v60;
          }
          while (v60);
          v224 = v59 - v58;
          if (v36 == (char *)v234)
          {
LABEL_50:
            v64 = 1.1755e-38;
            v63 = 3.4028e38;
            goto LABEL_56;
          }
LABEL_46:
          if (v50 < 2)
          {
            v62 = 0;
            v63 = 3.4028e38;
            v64 = 1.1755e-38;
LABEL_54:
            v73 = (float *)(v234 + 56 * v62 + 20);
            v74 = v50 - v62;
            do
            {
              v63 = fminf(*(v73 - 2), v63);
              v75 = *v73;
              v73 += 14;
              v64 = fmaxf(v75, v64);
              --v74;
            }
            while (v74);
            goto LABEL_56;
          }
          v62 = v50 & 0xFFFFFFFFFFFFFFFELL;
          v65 = (float *)(v234 + 76);
          v66 = 3.4028e38;
          v67 = 1.1755e-38;
          v68 = v50 & 0xFFFFFFFFFFFFFFFELL;
          v69 = 1.1755e-38;
          v70 = 3.4028e38;
          do
          {
            v66 = fminf(*(v65 - 16), v66);
            v70 = fminf(*(v65 - 2), v70);
            v71 = *(v65 - 14);
            v72 = *v65;
            v65 += 28;
            v67 = fmaxf(v71, v67);
            v69 = fmaxf(v72, v69);
            v68 -= 2;
          }
          while (v68);
          v63 = fminf(v66, v70);
          v64 = fmaxf(v67, v69);
          if (v50 != v62)
            goto LABEL_54;
LABEL_56:
          if (v47 == (char *)v48)
          {
            v223 = -3.4028e38;
            if (v36 == (char *)v234)
              goto LABEL_69;
            goto LABEL_67;
          }
          if (v51 < 2)
          {
            v76 = 0;
            v77 = 3.4028e38;
            v78 = 1.1755e-38;
LABEL_64:
            v87 = (float *)(v48 + 56 * v76 + 20);
            v88 = v51 - v76;
            do
            {
              v77 = fminf(*(v87 - 2), v77);
              v89 = *v87;
              v87 += 14;
              v78 = fmaxf(v89, v78);
              --v88;
            }
            while (v88);
            goto LABEL_66;
          }
          v76 = v51 & 0xFFFFFFFFFFFFFFFELL;
          v79 = (float *)(v48 + 76);
          v80 = 3.4028e38;
          v81 = 1.1755e-38;
          v82 = v51 & 0xFFFFFFFFFFFFFFFELL;
          v83 = 1.1755e-38;
          v84 = 3.4028e38;
          do
          {
            v80 = fminf(*(v79 - 16), v80);
            v84 = fminf(*(v79 - 2), v84);
            v85 = *(v79 - 14);
            v86 = *v79;
            v79 += 28;
            v81 = fmaxf(v85, v81);
            v83 = fmaxf(v86, v83);
            v82 -= 2;
          }
          while (v82);
          v77 = fminf(v80, v84);
          v78 = fmaxf(v81, v83);
          if (v51 != v76)
            goto LABEL_64;
LABEL_66:
          v223 = v78 - v77;
          if (v36 == (char *)v234)
            goto LABEL_69;
          do
          {
LABEL_67:

            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)v36 - 4);
            v36 -= 56;
          }
          while (v36 != v49);
          v47 = (char *)*((_QWORD *)&v229 + 1);
          v48 = v229;
LABEL_69:
          for (*((_QWORD *)&v234 + 1) = v49; v47 != (char *)v48; v47 -= 56)
          {

            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)v47 - 4);
          }
          v23.f32[0] = v223;
          v22.f32[0] = v224;
          v22.f32[1] = v54 - v53;
          v24 = vabs_f32(v22);
          v23.f32[1] = v64 - v63;
          v25 = vcvtq_f64_f32(vabs_f32(v23));
          v20 = fminf(v20, vaddv_f32(vcvt_f32_f64(vaddq_f64(vaddq_f64(v25, v25), vcvtq_f64_f32(vadd_f32(v24, v24))))));
          *((_QWORD *)&v229 + 1) = v48;
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v229);
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v234);
          ++v19;
          v21 += 56;
          LODWORD(v7) = v225;
        }
        while (v19 != v220);
        v12 = 0;
        v13 = v20 + v13;
        a1 = v221;
      }
      while ((v219 & 1) != 0);
      v8 = 0;
      v10 = v9 <= v13;
      v9 = fminf(v9, v13);
      v11 = v216;
      if (!v10)
        v11 = v218;
      v216 = v11;
      v218 = 1;
      if ((v215 & 1) == 0)
        goto LABEL_85;
    }
  }
  v90 = a1[3];
  v91 = (void **)a1[4];
  v92 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((uint64_t)v91 - v90) >> 3));
  LODWORD(v234) = 0;
  if (v91 == (void **)v90)
    v93 = 0;
  else
    v93 = v92;
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_Lb0EEEvT1_SC_T0_NS_15iterator_traitsISC_E15difference_typeEb(v90, v91, &v234, v93, 1);
  v94 = a1[3];
  v95 = (void **)a1[4];
  v96 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((uint64_t)v95 - v94) >> 3));
  LODWORD(v234) = 0;
  if (v95 == (void **)v94)
    v97 = 0;
  else
    v97 = v96;
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_Lb0EEEvT1_SC_T0_NS_15iterator_traitsISC_E15difference_typeEb(v94, v95, &v234, v97, 1);
  v98 = a1[3];
  v99 = (void **)a1[4];
  v100 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((uint64_t)v99 - v98) >> 3));
  LODWORD(v234) = 1;
  if (v99 == (void **)v98)
    v101 = 0;
  else
    v101 = v100;
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_Lb0EEEvT1_SC_T0_NS_15iterator_traitsISC_E15difference_typeEb(v98, v99, &v234, v101, 1);
  v102 = a1[3];
  v103 = (void **)a1[4];
  v104 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((uint64_t)v103 - v102) >> 3));
  LODWORD(v234) = 1;
  if (v103 == (void **)v102)
    v105 = 0;
  else
    v105 = v104;
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_Lb0EEEvT1_SC_T0_NS_15iterator_traitsISC_E15difference_typeEb(v102, v103, &v234, v105, 1);
  v216 = -1;
LABEL_85:
  v106 = a1[3];
  v107 = (void **)a1[4];
  v108 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((uint64_t)v107 - v106) >> 3));
  LODWORD(v234) = v216;
  if (v107 == (void **)v106)
    v109 = 0;
  else
    v109 = v108;
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_Lb0EEEvT1_SC_T0_NS_15iterator_traitsISC_E15difference_typeEb(v106, v107, &v234, v109, 1);
  if ((int)v220 >= 1)
  {
    v110 = 0;
    v111 = 0;
    v112 = 3.4028e38;
    while (1)
    {
      v113 = *i;
      v114 = *i + 56 * v7 + 56 * v110;
      v115 = (v114 - *i) >> 3;
      v235 = 0;
      v234 = 0uLL;
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100INS_11__wrap_iterIPS4_EESB_EEvT_T0_m(&v234, v113, v114, 0x6DB6DB6DB6DB6DB7 * v115);
      v116 = a1[4];
      v117 = a1[3] + 56 * v7 + 56 * v110;
      v230 = 0;
      v229 = 0uLL;
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100INS_11__wrap_iterIPS4_EESB_EEvT_T0_m(&v229, v117, v116, 0x6DB6DB6DB6DB6DB7 * ((v116 - v117) >> 3));
      v118 = *((_QWORD *)&v234 + 1);
      v119 = v234;
      v121 = *((_QWORD *)&v229 + 1);
      v120 = v229;
      if ((unint64_t)((*((_QWORD *)&v234 + 1) - (_QWORD)v234) / 56) <= 1)
        v122 = 1;
      else
        v122 = (*((_QWORD *)&v234 + 1) - (_QWORD)v234) / 56;
      if ((unint64_t)((*((_QWORD *)&v229 + 1) - (_QWORD)v229) / 56) <= 1)
        v123 = 1;
      else
        v123 = (*((_QWORD *)&v229 + 1) - (_QWORD)v229) / 56;
      if (*((_QWORD *)&v234 + 1) == (_QWORD)v234)
      {
        v125 = 1.1755e-38;
        if (*((_QWORD *)&v229 + 1) != (_QWORD)v229)
          goto LABEL_101;
      }
      else
      {
        v124 = (uint64_t *)(v234 + 16);
        v125 = 1.1755e-38;
        v126 = v122;
        do
        {
          v127 = *v124;
          v124 += 7;
          v125 = fmaxf(*(float *)&v127, v125);
          --v126;
        }
        while (v126);
        if (*((_QWORD *)&v229 + 1) != (_QWORD)v229)
        {
LABEL_101:
          v128 = (uint64_t *)(v229 + 16);
          v129 = 3.4028e38;
          v130 = 1.1755e-38;
          v131 = v123;
          do
          {
            v129 = fminf(COERCE_FLOAT(*(v128 - 1)), v129);
            v132 = *v128;
            v128 += 7;
            v130 = fmaxf(*(float *)&v132, v130);
            --v131;
          }
          while (v131);
          goto LABEL_106;
        }
      }
      v130 = 1.1755e-38;
      v129 = 3.4028e38;
LABEL_106:
      v133 = v129 < v125;
      v10 = v130 < v125;
      v134 = v130 > v125;
      v135 = v125 - v129;
      v136 = v10;
      if (!v133 || !v134)
        v135 = 1.0;
      v137 = v130 - v129;
      if ((v133 & v136) == 0)
        v137 = 1.0;
      if (*((_QWORD *)&v234 + 1) == (_QWORD)v234)
      {
        v139 = 1.1755e-38;
        goto LABEL_122;
      }
      if (v122 < 8)
      {
        v138 = 0;
        v139 = 1.1755e-38;
LABEL_120:
        v146 = (float *)(v234 + 56 * v138 + 20);
        v147 = v122 - v138;
        do
        {
          v148 = *v146;
          v146 += 14;
          v139 = fmaxf(v148, v139);
          --v147;
        }
        while (v147);
        goto LABEL_122;
      }
      v138 = v122 & 0xFFFFFFFFFFFFFFF8;
      v140 = (__int32 *)(v234 + 244);
      v141.i64[0] = 0x80000000800000;
      v141.i64[1] = 0x80000000800000;
      v142 = v122 & 0xFFFFFFFFFFFFFFF8;
      v143.i64[0] = 0x80000000800000;
      v143.i64[1] = 0x80000000800000;
      do
      {
        v144.i32[0] = *(v140 - 56);
        v144.i32[1] = *(v140 - 42);
        v144.i32[2] = *(v140 - 28);
        v144.i32[3] = *(v140 - 14);
        v145.i32[0] = *v140;
        v145.i32[1] = v140[14];
        v145.i32[2] = v140[28];
        v145.i32[3] = v140[42];
        v141 = vmaxnmq_f32(v144, v141);
        v143 = vmaxnmq_f32(v145, v143);
        v140 += 112;
        v142 -= 8;
      }
      while (v142);
      v139 = vmaxnmvq_f32(vmaxnmq_f32(v141, v143));
      if (v122 != v138)
        goto LABEL_120;
LABEL_122:
      if (*((_QWORD *)&v229 + 1) == (_QWORD)v229)
      {
        v151 = 1.1755e-38;
        v150 = 3.4028e38;
      }
      else
      {
        if (v123 >= 2)
        {
          v149 = v123 & 0xFFFFFFFFFFFFFFFELL;
          v152 = (float *)(v229 + 76);
          v153 = 3.4028e38;
          v154 = 1.1755e-38;
          v155 = v123 & 0xFFFFFFFFFFFFFFFELL;
          v156 = 1.1755e-38;
          v157 = 3.4028e38;
          do
          {
            v153 = fminf(*(v152 - 16), v153);
            v157 = fminf(*(v152 - 2), v157);
            v158 = *(v152 - 14);
            v159 = *v152;
            v152 += 28;
            v154 = fmaxf(v158, v154);
            v156 = fmaxf(v159, v156);
            v155 -= 2;
          }
          while (v155);
          v150 = fminf(v153, v157);
          v151 = fmaxf(v154, v156);
          if (v123 == v149)
            goto LABEL_131;
        }
        else
        {
          v149 = 0;
          v150 = 3.4028e38;
          v151 = 1.1755e-38;
        }
        v160 = (float *)(v229 + 56 * v149 + 20);
        v161 = v123 - v149;
        do
        {
          v150 = fminf(*(v160 - 2), v150);
          v162 = *v160;
          v160 += 14;
          v151 = fmaxf(v162, v151);
          --v161;
        }
        while (v161);
      }
LABEL_131:
      v163 = v135 * v137;
      v164 = v139 - v150;
      if (v150 >= v139 || v151 <= v139)
        v164 = 1.0;
      v165 = v164 * v163;
      v166 = v151 - v150;
      if (v150 >= v139 || v151 >= v139)
        v166 = 1.0;
      v167 = v165 * v166;
      if (v112 > (float)(v165 * v166))
        v111 = v110;
      if (*((_QWORD *)&v234 + 1) != (_QWORD)v234)
      {
        do
        {

          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)(v118 - 32));
          v118 -= 56;
        }
        while (v118 != v119);
        v121 = *((_QWORD *)&v229 + 1);
        v120 = v229;
      }
      *((_QWORD *)&v234 + 1) = v119;
      for (i = (uint64_t *)v222; v121 != v120; v121 -= 56)
      {

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)(v121 - 32));
      }
      v112 = fminf(v112, v167);
      *((_QWORD *)&v229 + 1) = v120;
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v229);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v234);
      ++v110;
      a1 = v221;
      LODWORD(v7) = v225;
      if (v110 == v220)
        goto LABEL_144;
    }
  }
  v111 = 0;
LABEL_144:
  v168 = *i;
  v169 = *i + 56 * v7 + 56 * v111;
  v170 = (v169 - *i) >> 3;
  k = 0;
  v244 = 0;
  v242 = 0;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100INS_11__wrap_iterIPS4_EESB_EEvT_T0_m(&v242, v168, v169, 0x6DB6DB6DB6DB6DB7 * v170);
  v171 = a1[4];
  v172 = a1[3] + 56 * v7 + 56 * v111;
  v240 = 0;
  v241 = 0;
  v239 = 0;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100INS_11__wrap_iterIPS4_EESB_EEvT_T0_m(&v239, v172, v171, 0x6DB6DB6DB6DB6DB7 * ((v171 - v172) >> 3));
  v173 = *i;
  v174 = *(float32x2_t *)(*i + 16);
  v234 = *(_OWORD *)*i;
  v235 = (char *)v174;
  v236 = 0;
  v237[0] = 0;
  v237[1] = 0;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v236, *(__int128 **)(v173 + 24), *(__int128 **)(v173 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v173 + 32) - *(_QWORD *)(v173 + 24)) >> 3));
  v238 = *(id *)(v173 + 48);
  v175 = (_OWORD *)*i;
  v229 = *(_OWORD *)(*i + 56);
  v176 = (__int128 *)*((_QWORD *)v175 + 10);
  v230 = (char *)*((_QWORD *)v175 + 9);
  v231 = 0;
  v232[0] = 0;
  v232[1] = 0;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v231, v176, *((__int128 **)v175 + 11), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v175 + 11) - (_QWORD)v176) >> 3));
  v233 = *((id *)v175 + 13);
  *(_DWORD *)v226 = *(_DWORD *)a1;
  *(_OWORD *)&v226[8] = 0u;
  v227 = 0u;
  *(_OWORD *)obj = 0u;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE7reserveEm((uint64_t *)&v227, (*(_DWORD *)v226 + 1));
  v177 = (_OWORD *)*i;
  v178 = *(_OWORD *)v226;
  *((_QWORD *)v177 + 2) = 0;
  *v177 = v178;
  if (v177 != (_OWORD *)v226)
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)v177 + 3, v227, *((uint64_t *)&v227 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v227 + 1) - v227) >> 3));
  objc_storeStrong((id *)v177 + 6, obj[1]);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v227);
  *(_DWORD *)v226 = *(_DWORD *)a1;
  *(_OWORD *)&v226[8] = 0u;
  v227 = 0u;
  *(_OWORD *)obj = 0u;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE7reserveEm((uint64_t *)&v227, (*(_DWORD *)v226 + 1));
  v179 = (_OWORD *)*i;
  *(_OWORD *)((char *)v179 + 56) = *(_OWORD *)v226;
  *((_QWORD *)v179 + 9) = *(_QWORD *)&v226[16];
  if ((char *)v179 + 56 != v226)
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)v179 + 10, v227, *((uint64_t *)&v227 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v227 + 1) - v227) >> 3));
  objc_storeStrong((id *)v179 + 13, obj[1]);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v227);
  v180 = 0;
  for (j = 24; ; j += 56)
  {
    v182 = v242;
    v183 = k;
    v184 = 0x6DB6DB6DB6DB6DB7 * ((k - v242) >> 3);
    v185 = v239;
    v186 = v240;
    if (v180 >= v184 + 0x6DB6DB6DB6DB6DB7 * ((v240 - v239) >> 3))
      break;
    if (v180 >= v184)
    {
      if (v180 == 1)
      {
        _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(*v222 + 14, v233, (float32x2_t *)&v229 + 1, (float32x2_t *)&v230);
        v187 = (void **)(*((_QWORD *)*v222 + 11) - 32);
        if (v187 != (void **)&v231)
        {
          v188 = v231;
          v189 = v232;
          goto LABEL_149;
        }
      }
      else if (v180)
      {
        _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(*v222 + 14, *(void **)&v239[j + 24 + -8 * ((k - v242) >> 3)], (float32x2_t *)&v239[j - 16 + -8 * ((k - v242) >> 3)], (float32x2_t *)&v239[j - 8 + -8 * ((k - v242) >> 3)]);
        v192 = (void **)&v239[j + -56 * v184];
        v187 = (void **)(*((_QWORD *)*v222 + 11) - 32);
        if (v192 != v187)
        {
          v193 = *v192;
          v189 = (uint64_t *)(v192 + 1);
          v188 = (uint64_t)v193;
          goto LABEL_149;
        }
      }
      else
      {
        _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(*v222 + 14, v238, (float32x2_t *)&v234 + 1, (float32x2_t *)&v235);
        v187 = (void **)(*((_QWORD *)*v222 + 11) - 32);
        if (v187 != (void **)&v236)
        {
          v188 = v236;
          v189 = v237;
          goto LABEL_149;
        }
      }
    }
    else if (v180 == 1)
    {
      _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(*v222, v233, (float32x2_t *)&v229 + 1, (float32x2_t *)&v230);
      v187 = (void **)(*((_QWORD *)*v222 + 4) - 32);
      if (v187 != (void **)&v231)
      {
        v188 = v231;
        v189 = v232;
        goto LABEL_149;
      }
    }
    else if (v180)
    {
      _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(*v222, *(void **)&v242[j + 24], (float32x2_t *)&v242[j - 16], (float32x2_t *)&v242[j - 8]);
      v190 = &v242[j];
      v187 = (void **)(*((_QWORD *)*v222 + 4) - 32);
      if (&v242[j] != (char *)v187)
      {
        v191 = *(_QWORD *)v190;
        v189 = (uint64_t *)(v190 + 8);
        v188 = v191;
        goto LABEL_149;
      }
    }
    else
    {
      _ZN12GKCRTreeNodeI8NSObjectDv2_fE9AddObjectEPS0_RKS1_S5_(*v222, v238, (float32x2_t *)&v234 + 1, (float32x2_t *)&v235);
      v187 = (void **)(*((_QWORD *)*v222 + 4) - 32);
      if (v187 != (void **)&v236)
      {
        v188 = v236;
        v189 = v237;
LABEL_149:
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v187, v188, *v189, 0x6DB6DB6DB6DB6DB7 * ((*v189 - v188) >> 3));
      }
    }
    ++v180;
  }
  if (k == v242)
  {
    v194 = v221;
    k = v242;
    if (v240 != v239)
      goto LABEL_173;
  }
  else
  {
    v194 = v221;
    do
    {

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)v183 - 4);
      v183 -= 56;
    }
    while (v183 != v182);
    v185 = v239;
    v186 = v240;
    for (k = v182; v186 != v185; v186 -= 56)
    {
LABEL_173:

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)v186 - 4);
    }
  }
  v240 = v185;
  v195 = v194[3];
  v196 = v194[4];
  v197 = 0x6DB6DB6DB6DB6DB7 * ((v196 - v195) >> 3);
  if (v197 > 1)
  {
    if (v196 - v195 == 112)
    {
      m = v194[4];
    }
    else
    {
      for (m = v195 + 112; v196 != m; v196 -= 56)
      {

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)(v196 - 32));
      }
      v194[4] = m;
    }
  }
  else
  {
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE8__appendEm((uint64_t *)v222, 2 - v197);
    m = v194[4];
  }
  v199 = (float32x2_t *)v194[3];
  v200 = v199[1];
  v194[1] = v200;
  v201 = v199[2];
  v194[2] = v201;
  v202 = 0x6DB6DB6DB6DB6DB7 * ((m - (uint64_t)v199) >> 3);
  if (v202 >= 2)
  {
    v203 = (float32x2_t)vzip2_s32((int32x2_t)v201, (int32x2_t)v200);
    v204 = v199 + 9;
    v205 = v202 - 1;
    do
    {
      v206 = v204[-1];
      v207 = v200.f32[1];
      v208 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v200, 1), (float32x2_t)vdup_lane_s32((int32x2_t)v203, 1)), 0), (int8x8_t)v203, (int8x8_t)v200);
      v200.i32[0] = vminnm_f32(v206, v200).u32[0];
      v209 = *v204;
      v204 += 7;
      v210 = (int32x2_t)vmaxnm_f32(v209, v201);
      v211 = (int8x8_t)vzip1_s32(v210, (int32x2_t)v203);
      v210.i32[1] = v201.i32[1];
      v200.i32[1] = v208.i32[1];
      v208.f32[0] = fminf(v203.f32[1], v207);
      v212 = (int32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v208, (float32x2_t)vdup_lane_s32((int32x2_t)v206, 1)), 0), (int8x8_t)v206, (int8x8_t)v200);
      v200.i32[1] = v212.i32[1];
      v208.i32[0] = v201.i32[1];
      v201 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v203, (float32x2_t)vdup_lane_s32((int32x2_t)v201, 1)), 0), v211, (int8x8_t)v210);
      v203.f32[0] = fmaxf(v203.f32[0], v208.f32[0]);
      v213 = (int32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v209, 1), v203), 0), (int8x8_t)v209, (int8x8_t)v201);
      v201.i32[1] = v213.i32[1];
      v194[1] = v200;
      v194[2] = v201;
      v203 = (float32x2_t)vzip2_s32(v213, v212);
      --v205;
    }
    while (v205);
  }

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v231);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v236);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v239);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v242);

}

void sub_227B5AB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  uint64_t v43;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a19);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a21);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)(v43 - 200));
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)(v43 - 176));

  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEPS4_OT_(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  __int128 *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *i;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = a1[1] - *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * (v3 >> 3) + 1;
  if (v4 > 0x492492492492492)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v4;
  v19 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x492492492492492)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(56 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[8 * (v3 >> 3)];
  __p = v7;
  v16 = v8;
  v17 = v8;
  v18 = &v7[56 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = *(__int128 **)(a2 + 24);
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  v10 = &v7[v3];
  *((_QWORD *)v10 + 3) = 0;
  *((_QWORD *)v10 + 4) = 0;
  *((_QWORD *)v10 + 5) = 0;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m((_QWORD *)v10 + 3, v9, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v9) >> 3));
  *((_QWORD *)v10 + 6) = *(id *)(a2 + 48);
  v17 += 56;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE(a1, &__p);
  v11 = a1[1];
  v12 = v16;
  for (i = v17; v17 != v12; i = v17)
  {
    v17 = i - 56;

    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)i - 4);
  }
  if (__p)
    operator delete(__p);
  return v11;
}

void sub_227B5AF14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _ZNSt3__114__split_bufferI12GKCRTreeNodeI8NSObjectDv2_fERNS_9allocatorIS4_EEED1Ev((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  __int128 v9;
  _QWORD *v10;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x492492492492493)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    result = operator new(56 * a4);
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[7 * a4];
    v10 = result;
    if (a2 == a3)
    {
      v8 = result;
    }
    else
    {
      v8 = result;
      do
      {
        v9 = *a2;
        v8[2] = *((_QWORD *)a2 + 2);
        *(_OWORD *)v8 = v9;
        v8[3] = 0;
        v8[4] = 0;
        v8[5] = 0;
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v8 + 3);
        result = *((id *)a2 + 6);
        v8[6] = result;
        v8 = v10 + 7;
        v10 += 7;
        a2 = (__int128 *)((char *)a2 + 56);
      }
      while (a2 != a3);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_227B5B050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _ZNSt3__128__exception_guard_exceptionsINS_6vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS5_EEE16__destroy_vectorEED1B8ne180100Ev(&a9);
  _Unwind_Resume(a1);
}

void sub_227B5B064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  _ZNSt3__128__exception_guard_exceptionsINS_29_AllocatorDestroyRangeReverseINS_9allocatorI12GKCRTreeNodeI8NSObjectDv2_fEEEPS6_EEED1B8ne180100Ev((uint64_t)&a11);
  *(_QWORD *)(v11 + 8) = v12;
  _ZNSt3__128__exception_guard_exceptionsINS_6vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS5_EEE16__destroy_vectorEED1B8ne180100Ev(&a9);
  _Unwind_Resume(a1);
}

void ***_ZNSt3__128__exception_guard_exceptionsINS_6vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS5_EEE16__destroy_vectorEED1B8ne180100Ev(void ***result)
{
  void ***v1;
  void **v2;
  id *v3;
  id *v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (id *)**result;
    if (v3)
    {
      v4 = (id *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {

          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v4 - 4);
          v4 -= 7;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24F04E7A0, MEMORY[0x24BEDAAF0]);
}

void sub_227B5B170(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

uint64_t _ZNSt3__128__exception_guard_exceptionsINS_29_AllocatorDestroyRangeReverseINS_9allocatorI12GKCRTreeNodeI8NSObjectDv2_fEEEPS6_EEED1B8ne180100Ev(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t i;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(uint64_t **)(a1 + 8);
    v2 = *(uint64_t **)(a1 + 16);
    v4 = *v2;
    for (i = *v3; v4 != i; v4 -= 56)
    {

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)(v4 - 32));
    }
  }
  return a1;
}

uint64_t *_ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      v9 = *(_OWORD *)(v4 + v7 - 56);
      *(_QWORD *)(v8 - 40) = *(_QWORD *)(v4 + v7 - 40);
      *(_OWORD *)(v8 - 56) = v9;
      *(_QWORD *)(v6 + v7 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m((_QWORD *)(v6 + v7 - 32), *(__int128 **)(v4 + v7 - 32), *(__int128 **)(v4 + v7 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v4 + v7 - 24) - *(_QWORD *)(v4 + v7 - 32)) >> 3));
      result = (uint64_t *)*(id *)(v4 + v7 - 8);
      *(_QWORD *)(v8 - 8) = result;
      v7 -= 56;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v10 = *v3;
  *v3 = v6;
  a2[1] = v10;
  v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t _ZNSt3__114__split_bufferI12GKCRTreeNodeI8NSObjectDv2_fERNS_9allocatorIS4_EEED1Ev(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;

    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)(i - 32));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE7reserveEm(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *i;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t *v11;

  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v3 = a1[1] - *a1;
    v11 = a1 + 2;
    v4 = 56 * a2;
    __p = operator new(56 * a2);
    v8 = (char *)__p + v3;
    v9 = (char *)__p + v3;
    v10 = (char *)__p + v4;
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE(a1, &__p);
    v5 = v8;
    for (i = v9; v9 != v5; i = v9)
    {
      v9 = i - 56;

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)i - 4);
    }
    if (__p)
      operator delete(__p);
  }
}

void sub_227B5B4AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _ZNSt3__114__split_bufferI12GKCRTreeNodeI8NSObjectDv2_fERNS_9allocatorIS4_EEED1Ev((uint64_t)va);
  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  id *v9;
  id *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;
  id *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  char *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  __int128 v34;

  v8 = (uint64_t)a1[2];
  v9 = (id *)*a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)*a1) >> 3) >= a4)
  {
    v21 = (id *)a1[1];
    if (0x6DB6DB6DB6DB6DB7 * (v21 - v9) >= a4)
    {
      if (a2 != a3)
      {
        v27 = a2 + 32;
        do
        {
          v28 = v27 - 32;
          v29 = *(_OWORD *)(v27 - 32);
          v9[2] = *(id *)(v27 - 16);
          *(_OWORD *)v9 = v29;
          if (v9 != (id *)(v27 - 32))
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v9 + 3);
          objc_storeStrong(v9 + 6, *(id *)(v27 + 16));
          v9 += 7;
          v27 += 56;
        }
        while (v28 + 56 != a3);
        v21 = (id *)a1[1];
      }
      for (; v21 != v9; v21 -= 7)
      {

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v21 - 4);
      }
      a1[1] = v9;
    }
    else
    {
      v22 = a2 + 8 * (v21 - v9);
      if (v21 != v9)
      {
        v23 = (char *)(v9 + 3);
        v24 = a2 + 32;
        do
        {
          v25 = v24 - 32;
          v26 = *(_OWORD *)(v24 - 32);
          *((_QWORD *)v23 - 1) = *(_QWORD *)(v24 - 16);
          *(_OWORD *)(v23 - 24) = v26;
          if (v23 - 24 != (char *)(v24 - 32))
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v23);
          objc_storeStrong((id *)v23 + 3, *(id *)(v24 + 16));
          v23 += 56;
          v24 += 56;
        }
        while (v25 + 56 != v22);
        v9 = (id *)a1[1];
      }
      v30 = (char *)v9;
      if (v22 != a3)
      {
        v31 = 0;
        do
        {
          v32 = (char *)&v9[v31 / 8];
          v33 = v22 + v31;
          v34 = *(_OWORD *)(v22 + v31);
          *((_QWORD *)v32 + 2) = *(_QWORD *)(v22 + v31 + 16);
          *(_OWORD *)v32 = v34;
          v9[v31 / 8 + 3] = 0;
          *((_QWORD *)v32 + 4) = 0;
          *((_QWORD *)v32 + 5) = 0;
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v9[v31 / 8 + 3], *(__int128 **)(v22 + v31 + 24), *(__int128 **)(v22 + v31 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v22 + v31 + 32) - *(_QWORD *)(v22 + v31 + 24)) >> 3));
          *((_QWORD *)v32 + 6) = *(id *)(v22 + v31 + 48);
          v31 += 56;
        }
        while (v33 + 56 != a3);
        v30 = (char *)&v9[v31 / 8];
      }
      a1[1] = v30;
    }
  }
  else
  {
    if (v9)
    {
      v10 = (id *)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {

          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v10 - 4);
          v10 -= 7;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x492492492492492)
      goto LABEL_40;
    v12 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    v13 = 2 * v12;
    if (2 * v12 <= a4)
      v13 = a4;
    v14 = v12 >= 0x249249249249249 ? 0x492492492492492 : v13;
    if (v14 > 0x492492492492492)
LABEL_40:
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v15 = 56 * v14;
    v16 = (char *)operator new(56 * v14);
    *a1 = v16;
    a1[1] = v16;
    a1[2] = &v16[v15];
    if (a2 != a3)
    {
      v17 = 0;
      do
      {
        v18 = &v16[v17];
        v19 = a2 + v17;
        *(_OWORD *)v18 = *(_OWORD *)(a2 + v17);
        v20 = *(__int128 **)(a2 + v17 + 24);
        *((_QWORD *)v18 + 2) = *(_QWORD *)(a2 + v17 + 16);
        *((_QWORD *)v18 + 4) = 0;
        *((_QWORD *)v18 + 5) = 0;
        *(_QWORD *)&v16[v17 + 24] = 0;
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v16[v17 + 24], v20, *(__int128 **)(a2 + v17 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + v17 + 32) - (_QWORD)v20) >> 3));
        *((_QWORD *)v18 + 6) = *(id *)(a2 + v17 + 48);
        v17 += 56;
      }
      while (v19 + 56 != a3);
      v16 += v17;
    }
    a1[1] = v16;
  }
}

void _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE8__appendEm(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *i;
  void *__p;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v4 = a1[2];
  v5 = a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = v5 + 56 * a2;
      do
      {
        *(_DWORD *)v5 = 0;
        *(_OWORD *)(v5 + 8) = 0uLL;
        *(_OWORD *)(v5 + 24) = 0uLL;
        *(_OWORD *)(v5 + 40) = 0uLL;
        v5 += 56;
      }
      while (v5 != v11);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x492492492492492)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x249249249249249)
      v9 = 0x492492492492492;
    else
      v9 = v7;
    v20 = a1 + 2;
    if (v9)
    {
      if (v9 > 0x492492492492492)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v10 = (char *)operator new(56 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[56 * v6];
    __p = v10;
    v17 = v12;
    v19 = &v10[56 * v9];
    v13 = &v12[56 * a2];
    do
    {
      *(_DWORD *)v12 = 0;
      *(_OWORD *)(v12 + 8) = 0uLL;
      *(_OWORD *)(v12 + 24) = 0uLL;
      *(_OWORD *)(v12 + 40) = 0uLL;
      v12 += 56;
    }
    while (v12 != v13);
    v18 = v13;
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE(a1, &__p);
    v14 = v17;
    for (i = v18; v18 != v14; i = v18)
    {
      v18 = i - 56;

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)i - 4);
    }
    if (__p)
      operator delete(__p);
  }
}

void sub_227B5BA94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _ZNSt3__114__split_bufferI12GKCRTreeNodeI8NSObjectDv2_fERNS_9allocatorIS4_EEED1Ev((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_Lb0EEEvT1_SC_T0_NS_15iterator_traitsISC_E15difference_typeEb(uint64_t result, void **a2, _DWORD *a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  float v19;
  float v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  __int128 *v34;
  __int128 v35;
  uint64_t v36;
  void *v37[5];
  __int128 v38;
  uint64_t v39;
  void *v40[3];
  id v41;
  __int128 v42;
  uint64_t v43;
  void *v44[5];
  __int128 v45;
  uint64_t v46;
  void *v47[3];
  id v48;

  v8 = result;
LABEL_2:
  v34 = (__int128 *)(a2 - 7);
  v9 = v8;
  while (2)
  {
    v10 = a4 - 1;
LABEL_4:
    v8 = v9;
    a4 = v10;
    v11 = (uint64_t)a2 - v9;
    v12 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v9) >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v24 = (uint64_t)*(a2 - 5);
        v45 = *v34;
        v46 = v24;
        memset(v47, 0, sizeof(v47));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v47, (__int128 *)*(a2 - 4), (__int128 *)*(a2 - 3), 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)*(a2 - 3) - (_BYTE *)*(a2 - 4)) >> 3));
        v48 = *(a2 - 1);
        v25 = *(_QWORD *)(v9 + 16);
        v42 = *(_OWORD *)v9;
        v43 = v25;
        memset(v44, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v44, *(__int128 **)(v9 + 24), *(__int128 **)(v9 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24)) >> 3));
        v44[3] = *(void **)(v9 + 48);
        v26 = *(float *)(((unint64_t)&v45 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        v27 = *(float *)(((unint64_t)&v42 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v44);

        result = (uint64_t)_ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v47);
        if (v26 < v27)
          return (uint64_t)_ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)v9, v34);
        return result;
      case 3uLL:
        return _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEjT1_SC_SC_T0_(v9, v9 + 56, (uint64_t)v34, a3);
      case 4uLL:
        return (uint64_t)_ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEvT1_SC_SC_SC_T0_(v9, v9 + 56, v9 + 112, (uint64_t)v34, a3);
      case 5uLL:
        return (uint64_t)_ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEvT1_SC_SC_SC_SC_T0_(v9, v9 + 56, v9 + 112, v9 + 168, (uint64_t)v34, a3);
      default:
        if (v11 <= 1343)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)_ZNSt3__116__insertion_sortB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEvT1_SC_T0_((void **)v9, a2, a3);
          else
            return (uint64_t)_ZNSt3__126__insertion_sort_unguardedB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEvT1_SC_T0_((void **)v9, a2, a3);
        }
        if (v10 == -1)
        {
          if ((void **)v9 != a2)
          {
            v28 = (v12 - 2) >> 1;
            v29 = v28 + 1;
            v30 = (char *)(v9 + 56 * v28);
            do
            {
              _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEvT1_OT0_NS_15iterator_traitsISC_E15difference_typeESC_((void **)v8, a3, v12, v30);
              v30 -= 56;
              --v29;
            }
            while (v29);
            v31 = v11 / 0x38uLL;
            do
            {
              result = (uint64_t)_ZNSt3__110__pop_heapB8ne180100INS_17_ClassicAlgPolicyEZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEvT1_SB_RT0_NS_15iterator_traitsISB_E15difference_typeE((void **)v8, (uint64_t)a2, a3, v31);
              a2 -= 7;
            }
            while (v31-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = (__int128 *)(v9 + 56 * v13);
        if ((unint64_t)v11 >= 0x1C01)
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEjT1_SC_SC_T0_(v8, v8 + 56 * v13, (uint64_t)v34, a3);
          v15 = v8 + 56 * v13;
          v16 = v15 - 56;
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEjT1_SC_SC_T0_(v8 + 56, v15 - 56, (uint64_t)(a2 - 14), a3);
          v15 += 56;
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEjT1_SC_SC_T0_(v8 + 112, v15, (uint64_t)(a2 - 21), a3);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEjT1_SC_SC_T0_(v16, (uint64_t)v14, v15, a3);
          _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)v8, v14);
          if ((a5 & 1) != 0)
            goto LABEL_13;
LABEL_12:
          v17 = *(_OWORD *)(v8 - 56);
          v39 = *(_QWORD *)(v8 - 40);
          v38 = v17;
          memset(v40, 0, sizeof(v40));
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v40, *(__int128 **)(v8 - 32), *(__int128 **)(v8 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v8 - 24) - *(_QWORD *)(v8 - 32)) >> 3));
          v41 = *(id *)(v8 - 8);
          v18 = *(_QWORD *)(v8 + 16);
          v35 = *(_OWORD *)v8;
          v36 = v18;
          memset(v37, 0, 24);
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v37, *(__int128 **)(v8 + 24), *(__int128 **)(v8 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24)) >> 3));
          v37[3] = *(void **)(v8 + 48);
          v19 = *(float *)(((unint64_t)&v38 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
          v20 = *(float *)(((unint64_t)&v35 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v37);

          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v40);
          if (v19 < v20)
            goto LABEL_13;
          result = _ZNSt3__131__partition_with_equals_on_leftB8ne180100INS_17_ClassicAlgPolicyEP12GKCRTreeNodeI8NSObjectDv2_fERZNS5_18SplitReduceOverlapEPS3_RKS4_S9_EUlS5_S5_E_EET0_SC_SC_T1_((__int128 *)v8, (unint64_t)a2, a3);
          v9 = result;
          a5 = 0;
          continue;
        }
        _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEjT1_SC_SC_T0_(v8 + 56 * v13, v8, (uint64_t)v34, a3);
        if ((a5 & 1) == 0)
          goto LABEL_12;
LABEL_13:
        v21 = _ZNSt3__132__partition_with_equals_on_rightB8ne180100INS_17_ClassicAlgPolicyEP12GKCRTreeNodeI8NSObjectDv2_fERZNS5_18SplitReduceOverlapEPS3_RKS4_S9_EUlS5_S5_E_EENS_4pairIT0_bEESD_SD_T1_((__int128 *)v8, (__int128 *)a2, a3);
        if ((v22 & 1) == 0)
        {
LABEL_16:
          result = _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_Lb0EEEvT1_SC_T0_NS_15iterator_traitsISC_E15difference_typeEb(v8, v21, a3, a4, a5 & 1);
          a5 = 0;
          v9 = v21 + 56;
          continue;
        }
        v23 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEbT1_SC_T0_(v8, v21, a3);
        v9 = v21 + 56;
        result = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEbT1_SC_T0_(v21 + 56, (uint64_t)a2, a3);
        if (!(_DWORD)result)
        {
          v10 = a4 - 1;
          if (v23)
            goto LABEL_4;
          goto LABEL_16;
        }
        a2 = (void **)v21;
        if (!v23)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_227B5BF8C(_Unwind_Exception *a1)
{
  void **v1;
  id *v2;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v1);
  _Unwind_Resume(a1);
}

void **_ZNSt3__116__insertion_sortB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEvT1_SC_T0_(void **result, void **a2, _DWORD *a3)
{
  void **v3;
  void **v4;
  uint64_t v6;
  void **v7;
  void **v8;
  void *v9;
  float v10;
  float v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 *v15;
  float v16;
  float v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  void *v22[5];
  __int128 v23;
  void *v24;
  void *v25[3];
  id v26;
  __int128 v27;
  void *v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  id obj;
  __int128 v33;
  void *v34;
  void *v35[5];
  __int128 v36;
  void *v37;
  void *v38[3];
  id v39;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 7;
    if (result + 7 != a2)
    {
      v6 = 0;
      v7 = result;
      do
      {
        v8 = v4;
        v36 = *(_OWORD *)v4;
        v37 = v4[2];
        memset(v38, 0, sizeof(v38));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v38, (__int128 *)v7[10], (__int128 *)v7[11], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v7[11] - (_BYTE *)v7[10]) >> 3));
        v39 = v7[13];
        v9 = v7[2];
        v33 = *(_OWORD *)v7;
        v34 = v9;
        memset(v35, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v35, (__int128 *)v7[3], (__int128 *)v7[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v7[4] - (_BYTE *)v7[3]) >> 3));
        v35[3] = v7[6];
        v10 = *(float *)(((unint64_t)&v36 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        v11 = *(float *)(((unint64_t)&v33 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v35);

        result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v38);
        if (v10 < v11)
        {
          v27 = *(_OWORD *)v8;
          v28 = v8[2];
          v30 = 0;
          v31 = 0;
          v29 = 0;
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v29, (__int128 *)v7[10], (__int128 *)v7[11], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v7[11] - (_BYTE *)v7[10]) >> 3));
          obj = v7[13];
          v12 = v6;
          while (1)
          {
            v13 = (char *)v3 + v12;
            *(_OWORD *)(v13 + 56) = *(_OWORD *)((char *)v3 + v12);
            v14 = *(uint64_t *)((char *)v3 + v12 + 24);
            *((_QWORD *)v13 + 9) = *(void **)((char *)v3 + v12 + 16);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)((char *)v3 + v12 + 80), v14, *(uint64_t *)((char *)v3 + v12 + 32), 0x6DB6DB6DB6DB6DB7 * ((*(uint64_t *)((char *)v3 + v12 + 32) - v14) >> 3));
            objc_storeStrong((id *)v13 + 13, *((id *)v13 + 6));
            if (!v12)
              break;
            v23 = v27;
            v24 = v28;
            memset(v25, 0, sizeof(v25));
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v25, v29, v30, 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 3));
            v26 = obj;
            v20 = *(_OWORD *)((char *)v3 + v12 - 56);
            v15 = *(__int128 **)((char *)v3 + v12 - 32);
            v21 = *(uint64_t *)((char *)v3 + v12 - 40);
            memset(v22, 0, 24);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v22, v15, *(__int128 **)((char *)v3 + v12 - 24), 0x6DB6DB6DB6DB6DB7 * ((*(_BYTE **)((char *)v3 + v12 - 24) - (_BYTE *)v15) >> 3));
            v22[3] = *(void **)((char *)v3 + v12 - 8);
            v16 = *(float *)(((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
            v17 = *(float *)(((unint64_t)&v20 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v22);

            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v25);
            v12 -= 56;
            if (v16 >= v17)
            {
              v18 = (uint64_t)v3 + v12 + 56;
              goto LABEL_12;
            }
          }
          v18 = (uint64_t)v3;
LABEL_12:
          *(_OWORD *)v18 = v27;
          *(_QWORD *)(v18 + 16) = v28;
          if ((__int128 *)v18 != &v27)
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)(v18 + 24), (uint64_t)v29, (uint64_t)v30, 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 3));
          objc_storeStrong((id *)(v18 + 48), obj);

          result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v29);
        }
        v4 = v8 + 7;
        v6 += 56;
        v7 = v8;
      }
      while (v8 + 7 != a2);
    }
  }
  return result;
}

void sub_227B5C2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a10);
  _Unwind_Resume(a1);
}

void **_ZNSt3__126__insertion_sort_unguardedB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEvT1_SC_T0_(void **result, void **a2, _DWORD *a3)
{
  void **v3;
  void **v4;
  void **v6;
  void **v7;
  void *v8;
  float v9;
  float v10;
  id *v11;
  id *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  float v16;
  float v17;
  id *v18;
  __int128 v20;
  uint64_t v21;
  void *v22[5];
  __int128 v23;
  void *v24;
  void *v25[3];
  id v26;
  __int128 v27;
  void *v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  id obj;
  __int128 v33;
  void *v34;
  void *v35[5];
  __int128 v36;
  void *v37;
  void *v38[3];
  id v39;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 7;
    if (result + 7 != a2)
    {
      v6 = result + 13;
      do
      {
        v7 = v4;
        v36 = *(_OWORD *)v4;
        v37 = v4[2];
        memset(v38, 0, sizeof(v38));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v38, (__int128 *)v3[10], (__int128 *)v3[11], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v3[11] - (_BYTE *)v3[10]) >> 3));
        v39 = v3[13];
        v8 = v3[2];
        v33 = *(_OWORD *)v3;
        v34 = v8;
        memset(v35, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v35, (__int128 *)v3[3], (__int128 *)v3[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v3[4] - (_BYTE *)v3[3]) >> 3));
        v35[3] = v3[6];
        v9 = *(float *)(((unint64_t)&v36 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        v10 = *(float *)(((unint64_t)&v33 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v35);

        result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v38);
        if (v9 < v10)
        {
          v27 = *(_OWORD *)v7;
          v28 = v7[2];
          v30 = 0;
          v31 = 0;
          v29 = 0;
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v29, (__int128 *)v3[10], (__int128 *)v3[11], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v3[11] - (_BYTE *)v3[10]) >> 3));
          obj = v3[13];
          v11 = v6;
          do
          {
            v12 = v11;
            *((_OWORD *)v11 - 3) = *(_OWORD *)(v11 - 13);
            v13 = (uint64_t)*(v11 - 10);
            v14 = (uint64_t)*(v11 - 9);
            *(v11 - 4) = *(v11 - 11);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v11 - 3, v13, v14, 0x6DB6DB6DB6DB6DB7 * ((v14 - v13) >> 3));
            objc_storeStrong(v12, *(v12 - 7));
            v23 = v27;
            v24 = v28;
            memset(v25, 0, sizeof(v25));
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v25, v29, v30, 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 3));
            v26 = obj;
            v20 = *((_OWORD *)v12 - 10);
            v15 = (__int128 *)*(v12 - 17);
            v21 = (uint64_t)*(v12 - 18);
            memset(v22, 0, 24);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v22, v15, (__int128 *)*(v12 - 16), 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)*(v12 - 16) - (_BYTE *)v15) >> 3));
            v22[3] = *(v12 - 14);
            v16 = *(float *)(((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
            v17 = *(float *)(((unint64_t)&v20 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v22);

            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v25);
            v11 = v12 - 7;
          }
          while (v16 < v17);
          *(_OWORD *)(v12 - 13) = v27;
          v18 = v12 - 13;
          v18[2] = v28;
          if (v18 != (id *)&v27)
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v18 + 3, (uint64_t)v29, (uint64_t)v30, 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 3));
          objc_storeStrong(v18 + 6, obj);

          result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v29);
        }
        v4 = v7 + 7;
        v6 += 7;
        v3 = v7;
      }
      while (v7 + 7 != a2);
    }
  }
  return result;
}

void sub_227B5C63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  void **v33;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v33);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEjT1_SC_SC_T0_(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  float v11;
  float v12;
  __int128 *v13;
  __int128 *v14;
  float v15;
  float v16;
  __int128 *v17;
  __int128 *v18;
  float v19;
  float v20;
  __int128 *v21;
  __int128 *v22;
  float v23;
  float v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  __int128 *v28;
  float v29;
  float v30;
  __int128 v32;
  uint64_t v33;
  void *v34[5];
  __int128 v35;
  uint64_t v36;
  void *v37[3];
  id v38;
  __int128 v39;
  uint64_t v40;
  void *v41[5];
  __int128 v42;
  uint64_t v43;
  void *v44[3];
  id v45;
  __int128 v46;
  uint64_t v47;
  void *v48[5];
  __int128 v49;
  uint64_t v50;
  void *v51[3];
  id v52;
  __int128 v53;
  uint64_t v54;
  void *v55[5];
  __int128 v56;
  uint64_t v57;
  void *v58[3];
  id v59;
  __int128 v60;
  uint64_t v61;
  void *v62[5];
  __int128 v63;
  uint64_t v64;
  void *v65[3];
  id v66;

  v63 = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  v8 = *(__int128 **)(a2 + 24);
  v64 = v9;
  memset(v65, 0, sizeof(v65));
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v65, v8, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v8) >> 3));
  v66 = *(id *)(a2 + 48);
  v60 = *(_OWORD *)a1;
  v10 = *(__int128 **)(a1 + 24);
  v61 = *(_QWORD *)(a1 + 16);
  memset(v62, 0, 24);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v62, v10, *(__int128 **)(a1 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v10) >> 3));
  v62[3] = *(void **)(a1 + 48);
  v11 = *(float *)(((unint64_t)&v63 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
  v12 = *(float *)(((unint64_t)&v60 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v62);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v65);
  if (v11 < v12)
  {
    v42 = *(_OWORD *)a3;
    v13 = *(__int128 **)(a3 + 24);
    v43 = *(_QWORD *)(a3 + 16);
    memset(v44, 0, sizeof(v44));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v44, v13, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v13) >> 3));
    v45 = *(id *)(a3 + 48);
    v39 = *(_OWORD *)a2;
    v14 = *(__int128 **)(a2 + 24);
    v40 = *(_QWORD *)(a2 + 16);
    memset(v41, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v41, v14, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v14) >> 3));
    v41[3] = *(void **)(a2 + 48);
    v15 = *(float *)(((unint64_t)&v42 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
    v16 = *(float *)(((unint64_t)&v39 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v41);

    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v44);
    if (v15 < v16)
    {
      _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a1, (__int128 *)a3);
      return 1;
    }
    _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a1, (__int128 *)a2);
    v35 = *(_OWORD *)a3;
    v27 = *(__int128 **)(a3 + 24);
    v36 = *(_QWORD *)(a3 + 16);
    memset(v37, 0, sizeof(v37));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v37, v27, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v27) >> 3));
    v38 = *(id *)(a3 + 48);
    v32 = *(_OWORD *)a2;
    v28 = *(__int128 **)(a2 + 24);
    v33 = *(_QWORD *)(a2 + 16);
    memset(v34, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v34, v28, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v28) >> 3));
    v34[3] = *(void **)(a2 + 48);
    v29 = *(float *)(((unint64_t)&v35 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
    v30 = *(float *)(((unint64_t)&v32 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v34);

    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v37);
    if (v29 >= v30)
      return 1;
    v25 = (__int128 *)a2;
    v26 = (__int128 *)a3;
LABEL_9:
    _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_(v25, v26);
    return 2;
  }
  v56 = *(_OWORD *)a3;
  v17 = *(__int128 **)(a3 + 24);
  v57 = *(_QWORD *)(a3 + 16);
  memset(v58, 0, sizeof(v58));
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v58, v17, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v17) >> 3));
  v59 = *(id *)(a3 + 48);
  v53 = *(_OWORD *)a2;
  v18 = *(__int128 **)(a2 + 24);
  v54 = *(_QWORD *)(a2 + 16);
  memset(v55, 0, 24);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v55, v18, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v18) >> 3));
  v55[3] = *(void **)(a2 + 48);
  v19 = *(float *)(((unint64_t)&v56 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
  v20 = *(float *)(((unint64_t)&v53 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v55);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v58);
  if (v19 < v20)
  {
    _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a2, (__int128 *)a3);
    v49 = *(_OWORD *)a2;
    v21 = *(__int128 **)(a2 + 24);
    v50 = *(_QWORD *)(a2 + 16);
    memset(v51, 0, sizeof(v51));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v51, v21, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v21) >> 3));
    v52 = *(id *)(a2 + 48);
    v46 = *(_OWORD *)a1;
    v22 = *(__int128 **)(a1 + 24);
    v47 = *(_QWORD *)(a1 + 16);
    memset(v48, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v48, v22, *(__int128 **)(a1 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v22) >> 3));
    v48[3] = *(void **)(a1 + 48);
    v23 = *(float *)(((unint64_t)&v49 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
    v24 = *(float *)(((unint64_t)&v46 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v48);

    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v51);
    if (v23 >= v24)
      return 1;
    v25 = (__int128 *)a1;
    v26 = (__int128 *)a2;
    goto LABEL_9;
  }
  return 0;
}

void sub_227B5CB00(_Unwind_Exception *a1)
{
  void **v1;
  id *v2;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v1);
  _Unwind_Resume(a1);
}

unint64_t _ZNSt3__131__partition_with_equals_on_leftB8ne180100INS_17_ClassicAlgPolicyEP12GKCRTreeNodeI8NSObjectDv2_fERZNS5_18SplitReduceOverlapEPS3_RKS4_S9_EUlS5_S5_E_EET0_SC_SC_T1_(__int128 *a1, unint64_t a2, _DWORD *a3)
{
  __int128 *v6;
  __int128 *v7;
  float v8;
  float v9;
  __int128 *v10;
  unint64_t v11;
  float v12;
  float v13;
  unint64_t v14;
  __int128 *v15;
  float v16;
  float v17;
  __int128 *v18;
  float v19;
  float v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  __int128 *v25;
  uint64_t v26;
  float v27;
  float v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  void **v33;
  __int128 v34;
  uint64_t v35;
  void *v36[5];
  __int128 v37;
  uint64_t v38;
  void *v39[3];
  id v40;
  __int128 v41;
  uint64_t v42;
  void *v43[5];
  __int128 v44;
  uint64_t v45;
  void *v46[3];
  id v47;
  __int128 v48;
  uint64_t v49;
  void *v50[5];
  __int128 v51;
  uint64_t v52;
  void *v53[3];
  id v54;
  __int128 v55;
  uint64_t v56;
  void *v57[5];
  __int128 v58;
  uint64_t v59;
  void *v60[3];
  id v61;
  __int128 v62;
  uint64_t v63;
  void *v64[5];
  __int128 v65;
  uint64_t v66;
  void *v67[3];
  id v68;
  __int128 v69;
  uint64_t v70;
  void *v71[5];
  __int128 v72;
  uint64_t v73;
  void *v74[3];
  id v75;
  __int128 v76;
  uint64_t v77;
  __int128 *v78;
  __int128 *v79;
  uint64_t v80;
  id v81;

  v76 = *a1;
  v6 = (__int128 *)*((_QWORD *)a1 + 3);
  v33 = (void **)a1 + 3;
  v77 = *((_QWORD *)a1 + 2);
  v78 = 0;
  v79 = 0;
  v80 = 0;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v78, v6, *((__int128 **)a1 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a1 + 4) - (_QWORD)v6) >> 3));
  v81 = *((id *)a1 + 6);
  v72 = v76;
  v73 = v77;
  memset(v74, 0, sizeof(v74));
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v74, v78, v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
  v75 = v81;
  v69 = *(_OWORD *)(a2 - 56);
  v7 = *(__int128 **)(a2 - 32);
  v70 = *(_QWORD *)(a2 - 40);
  memset(v71, 0, 24);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v71, v7, *(__int128 **)(a2 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 - 24) - (_QWORD)v7) >> 3));
  v71[3] = *(void **)(a2 - 8);
  v8 = *(float *)(((unint64_t)&v72 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
  v9 = *(float *)(((unint64_t)&v69 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v71);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v74);
  if (v8 >= v9)
  {
    v14 = (unint64_t)a1 + 56;
    do
    {
      v11 = v14;
      if (v14 >= a2)
        break;
      v58 = v76;
      v59 = v77;
      memset(v60, 0, sizeof(v60));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v60, v78, v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
      v61 = v81;
      v55 = *(_OWORD *)v11;
      v15 = *(__int128 **)(v11 + 24);
      v56 = *(_QWORD *)(v11 + 16);
      memset(v57, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v57, v15, *(__int128 **)(v11 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v11 + 32) - (_QWORD)v15) >> 3));
      v57[3] = *(void **)(v11 + 48);
      v16 = *(float *)(((unint64_t)&v58 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      v17 = *(float *)(((unint64_t)&v55 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v57);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v60);
      v14 = v11 + 56;
    }
    while (v16 >= v17);
  }
  else
  {
    v10 = a1;
    do
    {
      v65 = v76;
      v66 = v77;
      memset(v67, 0, sizeof(v67));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v67, v78, v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
      v11 = (unint64_t)v10 + 56;
      v68 = v81;
      v62 = *(__int128 *)((char *)v10 + 56);
      v63 = *((_QWORD *)v10 + 9);
      memset(v64, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v64, *((__int128 **)v10 + 10), *((__int128 **)v10 + 11), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v10 + 11) - *((_QWORD *)v10 + 10)) >> 3));
      v64[3] = *((void **)v10 + 13);
      v12 = *(float *)(((unint64_t)&v65 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      v13 = *(float *)(((unint64_t)&v62 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v64);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v67);
      v10 = (__int128 *)((char *)v10 + 56);
    }
    while (v12 >= v13);
  }
  if (v11 < a2)
  {
    do
    {
      v51 = v76;
      v52 = v77;
      memset(v53, 0, sizeof(v53));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v53, v78, v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
      v18 = (__int128 *)(a2 - 56);
      v54 = v81;
      v48 = *(_OWORD *)(a2 - 56);
      v49 = *(_QWORD *)(a2 - 40);
      memset(v50, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v50, *(__int128 **)(a2 - 32), *(__int128 **)(a2 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 - 24) - *(_QWORD *)(a2 - 32)) >> 3));
      v50[3] = *(void **)(a2 - 8);
      v19 = *(float *)(((unint64_t)&v51 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      v20 = *(float *)(((unint64_t)&v48 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v50);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v53);
      a2 -= 56;
    }
    while (v19 < v20);
    while (v11 < (unint64_t)v18)
    {
      _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)v11, v18);
      v21 = v11;
      do
      {
        v44 = v76;
        v45 = v77;
        memset(v46, 0, sizeof(v46));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v46, v78, v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
        v11 = v21 + 56;
        v47 = v81;
        v22 = *(_QWORD *)(v21 + 72);
        v41 = *(_OWORD *)(v21 + 56);
        v42 = v22;
        memset(v43, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v43, *(__int128 **)(v21 + 80), *(__int128 **)(v21 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v21 + 88) - *(_QWORD *)(v21 + 80)) >> 3));
        v43[3] = *(void **)(v21 + 104);
        v23 = *(float *)(((unint64_t)&v44 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        v24 = *(float *)(((unint64_t)&v41 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v43);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v46);
        v21 += 56;
      }
      while (v23 >= v24);
      v25 = v18;
      do
      {
        v37 = v76;
        v38 = v77;
        memset(v39, 0, sizeof(v39));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v39, v78, v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
        v18 = (__int128 *)((char *)v25 - 56);
        v40 = v81;
        v26 = *((_QWORD *)v25 - 5);
        v34 = *(__int128 *)((char *)v25 - 56);
        v35 = v26;
        memset(v36, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v36, *((__int128 **)v25 - 4), *((__int128 **)v25 - 3), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v25 - 3) - *((_QWORD *)v25 - 4)) >> 3));
        v36[3] = *((void **)v25 - 1);
        v27 = *(float *)(((unint64_t)&v37 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        v28 = *(float *)(((unint64_t)&v34 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v36);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v39);
        v25 = (__int128 *)((char *)v25 - 56);
      }
      while (v27 < v28);
    }
  }
  v29 = (__int128 *)(v11 - 56);
  if ((__int128 *)(v11 - 56) != a1)
  {
    v30 = *v29;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v11 - 40);
    *a1 = v30;
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v33, *(_QWORD *)(v11 - 32), *(_QWORD *)(v11 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v11 - 24) - *(_QWORD *)(v11 - 32)) >> 3));
    objc_storeStrong((id *)a1 + 6, *(id *)(v11 - 8));
  }
  v31 = v76;
  *(_QWORD *)(v11 - 40) = v77;
  *v29 = v31;
  if (v29 != &v76)
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)(v11 - 32), (uint64_t)v78, (uint64_t)v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
  objc_storeStrong((id *)(v11 - 8), v81);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v78);
  return v11;
}

void sub_227B5D1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  void **v12;
  uint64_t v13;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v12);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a12);
  _Unwind_Resume(a1);
}

unint64_t _ZNSt3__132__partition_with_equals_on_rightB8ne180100INS_17_ClassicAlgPolicyEP12GKCRTreeNodeI8NSObjectDv2_fERZNS5_18SplitReduceOverlapEPS3_RKS4_S9_EUlS5_S5_E_EENS_4pairIT0_bEESD_SD_T1_(__int128 *a1, __int128 *a2, _DWORD *a3)
{
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  float v8;
  float v9;
  __int128 *v10;
  float v11;
  float v12;
  __int128 *v13;
  float v14;
  float v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  __int128 v21;
  float v22;
  float v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  id *location;
  void **v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  void *v34[5];
  __int128 v35;
  uint64_t v36;
  void *v37[3];
  id v38;
  __int128 v39;
  uint64_t v40;
  void *v41[5];
  __int128 v42;
  uint64_t v43;
  void *v44[3];
  id v45;
  __int128 v46;
  uint64_t v47;
  void *v48[5];
  __int128 v49;
  uint64_t v50;
  void *v51[3];
  id v52;
  __int128 v53;
  uint64_t v54;
  void *v55[5];
  __int128 v56;
  uint64_t v57;
  void *v58[3];
  id v59;
  __int128 v60;
  uint64_t v61;
  void *v62[5];
  __int128 v63;
  uint64_t v64;
  void *v65[3];
  id v66;
  __int128 v67;
  uint64_t v68;
  __int128 *v69;
  __int128 *v70;
  uint64_t v71;
  id v72;

  v5 = (unint64_t)a1;
  v67 = *a1;
  v6 = (__int128 *)*((_QWORD *)a1 + 3);
  v30 = (void **)a1 + 3;
  v68 = *((_QWORD *)a1 + 2);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v69, v6, *((__int128 **)a1 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a1 + 4) - (_QWORD)v6) >> 3));
  location = (id *)(v5 + 48);
  v72 = *(id *)(v5 + 48);
  v31 = v5;
  do
  {
    v63 = *(_OWORD *)(v5 + 56);
    v7 = *(__int128 **)(v5 + 80);
    v64 = *(_QWORD *)(v5 + 72);
    memset(v65, 0, sizeof(v65));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v65, v7, *(__int128 **)(v5 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v5 + 88) - (_QWORD)v7) >> 3));
    v66 = *(id *)(v5 + 104);
    v60 = v67;
    v61 = v68;
    memset(v62, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v62, v69, v70, 0x6DB6DB6DB6DB6DB7 * (((char *)v70 - (char *)v69) >> 3));
    v5 += 56;
    v62[3] = v72;
    v8 = *(float *)(((unint64_t)&v63 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
    v9 = *(float *)(((unint64_t)&v60 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v62);

    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v65);
  }
  while (v8 < v9);
  if (v5 - 56 == v31)
  {
    do
    {
      if (v5 >= (unint64_t)a2)
        break;
      v56 = *(__int128 *)((char *)a2 - 56);
      v13 = (__int128 *)*((_QWORD *)a2 - 4);
      v57 = *((_QWORD *)a2 - 5);
      memset(v58, 0, sizeof(v58));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v58, v13, *((__int128 **)a2 - 3), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 - 3) - (_QWORD)v13) >> 3));
      v59 = *((id *)a2 - 1);
      v53 = v67;
      v54 = v68;
      memset(v55, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v55, v69, v70, 0x6DB6DB6DB6DB6DB7 * (((char *)v70 - (char *)v69) >> 3));
      a2 = (__int128 *)((char *)a2 - 56);
      v55[3] = v72;
      v14 = *(float *)(((unint64_t)&v56 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      v15 = *(float *)(((unint64_t)&v53 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v55);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v58);
    }
    while (v14 >= v15);
  }
  else
  {
    do
    {
      v49 = *(__int128 *)((char *)a2 - 56);
      v10 = (__int128 *)*((_QWORD *)a2 - 4);
      v50 = *((_QWORD *)a2 - 5);
      memset(v51, 0, sizeof(v51));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v51, v10, *((__int128 **)a2 - 3), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 - 3) - (_QWORD)v10) >> 3));
      v52 = *((id *)a2 - 1);
      v46 = v67;
      v47 = v68;
      memset(v48, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v48, v69, v70, 0x6DB6DB6DB6DB6DB7 * (((char *)v70 - (char *)v69) >> 3));
      a2 = (__int128 *)((char *)a2 - 56);
      v48[3] = v72;
      v11 = *(float *)(((unint64_t)&v49 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      v12 = *(float *)(((unint64_t)&v46 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v48);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v51);
    }
    while (v11 >= v12);
  }
  if (v5 >= (unint64_t)a2)
  {
    v16 = v5;
    v24 = v5 - 56;
    v25 = v31;
    if (v5 - 56 == v31)
      goto LABEL_18;
  }
  else
  {
    v16 = v5;
    v17 = a2;
    do
    {
      _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)v16, v17);
      do
      {
        v18 = *(_OWORD *)(v16 + 56);
        v43 = *(_QWORD *)(v16 + 72);
        v42 = v18;
        memset(v44, 0, sizeof(v44));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v44, *(__int128 **)(v16 + 80), *(__int128 **)(v16 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v16 + 88) - *(_QWORD *)(v16 + 80)) >> 3));
        v45 = *(id *)(v16 + 104);
        v39 = v67;
        v40 = v68;
        memset(v41, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v41, v69, v70, 0x6DB6DB6DB6DB6DB7 * (((char *)v70 - (char *)v69) >> 3));
        v16 += 56;
        v41[3] = v72;
        v19 = *(float *)(((unint64_t)&v42 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        v20 = *(float *)(((unint64_t)&v39 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v41);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v44);
      }
      while (v19 < v20);
      do
      {
        v21 = *(__int128 *)((char *)v17 - 56);
        v36 = *((_QWORD *)v17 - 5);
        v35 = v21;
        memset(v37, 0, sizeof(v37));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v37, *((__int128 **)v17 - 4), *((__int128 **)v17 - 3), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v17 - 3) - *((_QWORD *)v17 - 4)) >> 3));
        v38 = *((id *)v17 - 1);
        v32 = v67;
        v33 = v68;
        memset(v34, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v34, v69, v70, 0x6DB6DB6DB6DB6DB7 * (((char *)v70 - (char *)v69) >> 3));
        v17 = (__int128 *)((char *)v17 - 56);
        v34[3] = v72;
        v22 = *(float *)(((unint64_t)&v35 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        v23 = *(float *)(((unint64_t)&v32 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v34);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v37);
      }
      while (v22 >= v23);
    }
    while (v16 < (unint64_t)v17);
    v24 = v16 - 56;
    v25 = v31;
    if (v16 - 56 == v31)
      goto LABEL_18;
  }
  v26 = *(_OWORD *)v24;
  *(_QWORD *)(v25 + 16) = *(_QWORD *)(v24 + 16);
  *(_OWORD *)v25 = v26;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v30, *(_QWORD *)(v16 - 32), *(_QWORD *)(v16 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v16 - 24) - *(_QWORD *)(v16 - 32)) >> 3));
  objc_storeStrong(location, *(id *)(v16 - 8));
LABEL_18:
  v27 = v67;
  *(_QWORD *)(v24 + 16) = v68;
  *(_OWORD *)v24 = v27;
  if ((__int128 *)v24 != &v67)
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)(v16 - 32), (uint64_t)v69, (uint64_t)v70, 0x6DB6DB6DB6DB6DB7 * (((char *)v70 - (char *)v69) >> 3));
  objc_storeStrong((id *)(v16 - 8), v72);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v69);
  return v24;
}

void sub_227B5D840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a11);
  _Unwind_Resume(a1);
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEbT1_SC_T0_(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  _BOOL8 result;
  __int128 *v7;
  __int128 *v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  float v16;
  float v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v28;
  uint64_t v29;
  void *v30[5];
  __int128 v31;
  uint64_t v32;
  void *v33[3];
  id v34;
  __int128 v35;
  uint64_t v36;
  __int128 *v37;
  __int128 *v38;
  uint64_t v39;
  id obj;
  __int128 v41;
  uint64_t v42;
  void *v43[5];
  __int128 v44;
  uint64_t v45;
  void *v46[3];
  id v47;
  __int128 v48;
  uint64_t v49;
  void *v50[5];
  __int128 v51;
  uint64_t v52;
  void *v53[3];
  id v54;

  v3 = a2;
  v5 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v51 = *(_OWORD *)(a2 - 56);
      v7 = *(__int128 **)(a2 - 32);
      v52 = *(_QWORD *)(v3 - 40);
      memset(v53, 0, sizeof(v53));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v53, v7, *(__int128 **)(v3 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v3 - 24) - (_QWORD)v7) >> 3));
      v54 = *(id *)(v3 - 8);
      v48 = *(_OWORD *)a1;
      v8 = *(__int128 **)(a1 + 24);
      v49 = *(_QWORD *)(a1 + 16);
      memset(v50, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v50, v8, *(__int128 **)(a1 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v8) >> 3));
      v50[3] = *(void **)(a1 + 48);
      v9 = *(float *)(((unint64_t)&v51 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      v10 = *(float *)(((unint64_t)&v48 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v50);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v53);
      if (v9 < v10)
        _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a1, (__int128 *)(v3 - 56));
      return 1;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEjT1_SC_SC_T0_(a1, a1 + 56, a2 - 56, a3);
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEvT1_SC_SC_SC_T0_(a1, a1 + 56, a1 + 112, a2 - 56, a3);
      return 1;
    case 5:
      _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEvT1_SC_SC_SC_SC_T0_(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56, a3);
      return 1;
    default:
      v11 = a1 + 112;
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEjT1_SC_SC_T0_(a1, a1 + 56, a1 + 112, a3);
      v12 = a1 + 168;
      if (a1 + 168 == v3)
        return 1;
      v13 = 0;
      v26 = 0;
      v25 = v3;
      break;
  }
  do
  {
    v44 = *(_OWORD *)v12;
    v14 = *(__int128 **)(v12 + 24);
    v45 = *(_QWORD *)(v12 + 16);
    memset(v46, 0, sizeof(v46));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v46, v14, *(__int128 **)(v12 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v12 + 32) - (_QWORD)v14) >> 3));
    v47 = *(id *)(v12 + 48);
    v15 = *(_QWORD *)(v11 + 16);
    v41 = *(_OWORD *)v11;
    v42 = v15;
    memset(v43, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v43, *(__int128 **)(v11 + 24), *(__int128 **)(v11 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24)) >> 3));
    v43[3] = *(void **)(v11 + 48);
    v16 = *(float *)(((unint64_t)&v44 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
    v17 = *(float *)(((unint64_t)&v41 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v43);

    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v46);
    if (v16 < v17)
    {
      v35 = *(_OWORD *)v12;
      v18 = *(__int128 **)(v12 + 24);
      v36 = *(_QWORD *)(v12 + 16);
      v38 = 0;
      v39 = 0;
      v37 = 0;
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v37, v18, *(__int128 **)(v12 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v12 + 32) - (_QWORD)v18) >> 3));
      obj = *(id *)(v12 + 48);
      v19 = v13;
      while (1)
      {
        v20 = a1 + v19;
        *(_OWORD *)(v20 + 168) = *(_OWORD *)(a1 + v19 + 112);
        *(_QWORD *)(v20 + 184) = *(_QWORD *)(a1 + v19 + 128);
        if (a1 + v19 + 112 != a1 + v19 + 168)
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)(v20 + 192), *(_QWORD *)(v20 + 136), *(_QWORD *)(v20 + 144), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v20 + 144) - *(_QWORD *)(v20 + 136)) >> 3));
        objc_storeStrong((id *)(v20 + 216), *(id *)(v20 + 160));
        if (v19 == -112)
          break;
        v31 = v35;
        v32 = v36;
        memset(v33, 0, sizeof(v33));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v33, v37, v38, 0x6DB6DB6DB6DB6DB7 * (((char *)v38 - (char *)v37) >> 3));
        v34 = obj;
        v28 = *(_OWORD *)(a1 + v19 + 56);
        v21 = *(__int128 **)(a1 + v19 + 80);
        v29 = *(_QWORD *)(a1 + v19 + 72);
        memset(v30, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v30, v21, *(__int128 **)(a1 + v19 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + v19 + 88) - (_QWORD)v21) >> 3));
        v30[3] = *(void **)(a1 + v19 + 104);
        v22 = *(float *)(((unint64_t)&v31 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        v23 = *(float *)(((unint64_t)&v28 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v30);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v33);
        v19 -= 56;
        if (v22 >= v23)
        {
          v24 = a1 + v19 + 168;
          goto LABEL_16;
        }
      }
      v24 = a1;
LABEL_16:
      *(_OWORD *)v24 = v35;
      *(_QWORD *)(v24 + 16) = v36;
      v3 = v25;
      if ((__int128 *)v24 != &v35)
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)(v24 + 24), (uint64_t)v37, (uint64_t)v38, 0x6DB6DB6DB6DB6DB7 * (((char *)v38 - (char *)v37) >> 3));
      objc_storeStrong((id *)(v24 + 48), obj);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v37);
      if (++v26 == 8)
        return v12 + 56 == v25;
    }
    v11 = v12;
    v13 += 56;
    v12 += 56;
  }
  while (v12 != v3);
  return 1;
}

void sub_227B5DDEC(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v1);
  _Unwind_Resume(a1);
}

void sub_227B5DE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a12);
  _Unwind_Resume(a1);
}

void **_ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_(__int128 *a1, __int128 *a2)
{
  __int128 *v4;
  void **v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id obj;

  v8 = *a1;
  v5 = (void **)a1 + 3;
  v4 = (__int128 *)*((_QWORD *)a1 + 3);
  v9 = *((_QWORD *)a1 + 2);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v10, v4, *((__int128 **)a1 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a1 + 4) - (_QWORD)v4) >> 3));
  obj = *((id *)a1 + 6);
  v6 = *((_QWORD *)a2 + 2);
  *a1 = *a2;
  *((_QWORD *)a1 + 2) = v6;
  if (a1 != a2)
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v5, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  objc_storeStrong((id *)a1 + 6, *((id *)a2 + 6));
  *a2 = v8;
  *((_QWORD *)a2 + 2) = v9;
  if (&v8 != a2)
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)a2 + 3, v10, v11, 0x6DB6DB6DB6DB6DB7 * ((v11 - v10) >> 3));
  objc_storeStrong((id *)a2 + 6, obj);

  return _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v10);
}

void sub_227B5DFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void **v15;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v15);
  _Unwind_Resume(a1);
}

void **_ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEvT1_SC_SC_SC_T0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  __int128 *v9;
  __int128 *v10;
  float v11;
  float v12;
  void **result;
  __int128 *v14;
  __int128 *v15;
  float v16;
  float v17;
  __int128 *v18;
  __int128 *v19;
  float v20;
  float v21;
  __int128 v23;
  uint64_t v24;
  void *v25[5];
  __int128 v26;
  uint64_t v27;
  void *v28[3];
  id v29;
  __int128 v30;
  uint64_t v31;
  void *v32[5];
  __int128 v33;
  uint64_t v34;
  void *v35[3];
  id v36;
  __int128 v37;
  uint64_t v38;
  void *v39[5];
  __int128 v40;
  uint64_t v41;
  void *v42[3];
  id v43;

  _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEjT1_SC_SC_T0_(a1, a2, a3, a5);
  v40 = *(_OWORD *)a4;
  v9 = *(__int128 **)(a4 + 24);
  v41 = *(_QWORD *)(a4 + 16);
  memset(v42, 0, sizeof(v42));
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v42, v9, *(__int128 **)(a4 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a4 + 32) - (_QWORD)v9) >> 3));
  v43 = *(id *)(a4 + 48);
  v37 = *(_OWORD *)a3;
  v10 = *(__int128 **)(a3 + 24);
  v38 = *(_QWORD *)(a3 + 16);
  memset(v39, 0, 24);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v39, v10, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v10) >> 3));
  v39[3] = *(void **)(a3 + 48);
  v11 = *(float *)(((unint64_t)&v40 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a5 & 1))) + 8);
  v12 = *(float *)(((unint64_t)&v37 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a5 & 1))) + 8);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v39);

  result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v42);
  if (v11 < v12)
  {
    _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a3, (__int128 *)a4);
    v33 = *(_OWORD *)a3;
    v14 = *(__int128 **)(a3 + 24);
    v34 = *(_QWORD *)(a3 + 16);
    memset(v35, 0, sizeof(v35));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v35, v14, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v14) >> 3));
    v36 = *(id *)(a3 + 48);
    v30 = *(_OWORD *)a2;
    v15 = *(__int128 **)(a2 + 24);
    v31 = *(_QWORD *)(a2 + 16);
    memset(v32, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v32, v15, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v15) >> 3));
    v32[3] = *(void **)(a2 + 48);
    v16 = *(float *)(((unint64_t)&v33 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a5 & 1))) + 8);
    v17 = *(float *)(((unint64_t)&v30 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a5 & 1))) + 8);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v32);

    result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v35);
    if (v16 < v17)
    {
      _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a2, (__int128 *)a3);
      v26 = *(_OWORD *)a2;
      v18 = *(__int128 **)(a2 + 24);
      v27 = *(_QWORD *)(a2 + 16);
      memset(v28, 0, sizeof(v28));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v28, v18, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v18) >> 3));
      v29 = *(id *)(a2 + 48);
      v23 = *(_OWORD *)a1;
      v19 = *(__int128 **)(a1 + 24);
      v24 = *(_QWORD *)(a1 + 16);
      memset(v25, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v25, v19, *(__int128 **)(a1 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v19) >> 3));
      v25[3] = *(void **)(a1 + 48);
      v20 = *(float *)(((unint64_t)&v26 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a5 & 1))) + 8);
      v21 = *(float *)(((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a5 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v25);

      result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v28);
      if (v20 < v21)
        return _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a1, (__int128 *)a2);
    }
  }
  return result;
}

void sub_227B5E27C(_Unwind_Exception *a1)
{
  void **v1;
  id *v2;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v1);
  _Unwind_Resume(a1);
}

void **_ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEvT1_SC_SC_SC_SC_T0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  __int128 *v10;
  __int128 *v11;
  float v12;
  float v13;
  void **result;
  __int128 *v15;
  __int128 *v16;
  float v17;
  float v18;
  __int128 *v19;
  __int128 *v20;
  float v21;
  float v22;
  __int128 *v23;
  __int128 *v24;
  float v25;
  float v26;
  __int128 v29;
  uint64_t v30;
  void *v31[5];
  __int128 v32;
  uint64_t v33;
  void *v34[3];
  id v35;
  __int128 v36;
  uint64_t v37;
  void *v38[5];
  __int128 v39;
  uint64_t v40;
  void *v41[3];
  id v42;
  __int128 v43;
  uint64_t v44;
  void *v45[5];
  __int128 v46;
  uint64_t v47;
  void *v48[3];
  id v49;
  __int128 v50;
  uint64_t v51;
  void *v52[5];
  __int128 v53;
  uint64_t v54;
  void *v55[3];
  id v56;

  _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEvT1_SC_SC_SC_T0_(a1, a2, a3, a4, a6);
  v53 = *(_OWORD *)a5;
  v10 = *(__int128 **)(a5 + 24);
  v54 = *(_QWORD *)(a5 + 16);
  memset(v55, 0, sizeof(v55));
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v55, v10, *(__int128 **)(a5 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a5 + 32) - (_QWORD)v10) >> 3));
  v56 = *(id *)(a5 + 48);
  v50 = *(_OWORD *)a4;
  v11 = *(__int128 **)(a4 + 24);
  v51 = *(_QWORD *)(a4 + 16);
  memset(v52, 0, 24);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v52, v11, *(__int128 **)(a4 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a4 + 32) - (_QWORD)v11) >> 3));
  v52[3] = *(void **)(a4 + 48);
  v12 = *(float *)(((unint64_t)&v53 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 8);
  v13 = *(float *)(((unint64_t)&v50 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 8);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v52);

  result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v55);
  if (v12 < v13)
  {
    _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a4, (__int128 *)a5);
    v46 = *(_OWORD *)a4;
    v15 = *(__int128 **)(a4 + 24);
    v47 = *(_QWORD *)(a4 + 16);
    memset(v48, 0, sizeof(v48));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v48, v15, *(__int128 **)(a4 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a4 + 32) - (_QWORD)v15) >> 3));
    v49 = *(id *)(a4 + 48);
    v43 = *(_OWORD *)a3;
    v16 = *(__int128 **)(a3 + 24);
    v44 = *(_QWORD *)(a3 + 16);
    memset(v45, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v45, v16, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v16) >> 3));
    v45[3] = *(void **)(a3 + 48);
    v17 = *(float *)(((unint64_t)&v46 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 8);
    v18 = *(float *)(((unint64_t)&v43 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 8);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v45);

    result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v48);
    if (v17 < v18)
    {
      _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a3, (__int128 *)a4);
      v39 = *(_OWORD *)a3;
      v19 = *(__int128 **)(a3 + 24);
      v40 = *(_QWORD *)(a3 + 16);
      memset(v41, 0, sizeof(v41));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v41, v19, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v19) >> 3));
      v42 = *(id *)(a3 + 48);
      v36 = *(_OWORD *)a2;
      v20 = *(__int128 **)(a2 + 24);
      v37 = *(_QWORD *)(a2 + 16);
      memset(v38, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v38, v20, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v20) >> 3));
      v38[3] = *(void **)(a2 + 48);
      v21 = *(float *)(((unint64_t)&v39 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 8);
      v22 = *(float *)(((unint64_t)&v36 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v38);

      result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v41);
      if (v21 < v22)
      {
        _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a2, (__int128 *)a3);
        v32 = *(_OWORD *)a2;
        v23 = *(__int128 **)(a2 + 24);
        v33 = *(_QWORD *)(a2 + 16);
        memset(v34, 0, sizeof(v34));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v34, v23, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v23) >> 3));
        v35 = *(id *)(a2 + 48);
        v29 = *(_OWORD *)a1;
        v24 = *(__int128 **)(a1 + 24);
        v30 = *(_QWORD *)(a1 + 16);
        memset(v31, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v31, v24, *(__int128 **)(a1 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v24) >> 3));
        v31[3] = *(void **)(a1 + 48);
        v25 = *(float *)(((unint64_t)&v32 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 8);
        v26 = *(float *)(((unint64_t)&v29 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v31);

        result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v34);
        if (v25 < v26)
          return _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a1, (__int128 *)a2);
      }
    }
  }
  return result;
}

void sub_227B5E63C(_Unwind_Exception *a1)
{
  id *v1;
  void **v2;
  id *v3;

  v3 = v1;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v2);
  _Unwind_Resume(a1);
}

void **_ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEvT1_OT0_NS_15iterator_traitsISC_E15difference_typeESC_(void **result, _DWORD *a2, uint64_t a3, char *a4)
{
  unint64_t v4;
  void **v5;
  int64_t v6;
  void **v7;
  void **v8;
  int64_t v9;
  float v10;
  float v11;
  __int128 *v12;
  __int128 *v13;
  float v14;
  float v15;
  __int128 *v16;
  void **v17;
  __int128 v18;
  uint64_t v19;
  void **v20;
  float v21;
  float v22;
  __int128 *v23;
  float v24;
  float v25;
  __int128 v26;
  void **v27;
  int64_t v28;
  __int128 v31;
  void *v32;
  void *v33[5];
  __int128 v34;
  void *v35;
  void *v36[3];
  id v37;
  __int128 v38;
  void *v39;
  void *v40[5];
  __int128 v41;
  void *v42;
  void *v43[3];
  id v44;
  __int128 v45;
  void *v46;
  __int128 *v47;
  __int128 *v48;
  uint64_t v49;
  id obj;
  __int128 v51;
  void *v52;
  void *v53[5];
  __int128 v54;
  void *v55;
  void *v56[3];
  id v57;
  __int128 v58;
  void *v59;
  void *v60[5];
  __int128 v61;
  void *v62;
  void *v63[3];
  id v64;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = (void **)a4;
    v28 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * ((a4 - (char *)result) >> 3))
    {
      v6 = (0xDB6DB6DB6DB6DB6ELL * ((a4 - (char *)result) >> 3)) | 1;
      v7 = &result[2 * ((a4 - (char *)result) >> 3)];
      v8 = v7 + 7;
      v9 = 0xDB6DB6DB6DB6DB6ELL * ((a4 - (char *)result) >> 3) + 2;
      v27 = result;
      if (v9 < a3)
      {
        v61 = *(_OWORD *)v8;
        v62 = v7[9];
        memset(v63, 0, sizeof(v63));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v63, (__int128 *)v7[10], (__int128 *)v7[11], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v7[11] - (_BYTE *)v7[10]) >> 3));
        v64 = v7[13];
        v58 = *((_OWORD *)v7 + 7);
        v59 = v7[16];
        memset(v60, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v60, (__int128 *)v7[17], (__int128 *)v7[18], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v7[18] - (_BYTE *)v7[17]) >> 3));
        v60[3] = v7[20];
        v10 = *(float *)(((unint64_t)&v61 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
        v11 = *(float *)(((unint64_t)&v58 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v60);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v63);
        if (v10 < v11)
        {
          v8 = v7 + 14;
          v6 = v9;
        }
      }
      v54 = *(_OWORD *)v8;
      v12 = (__int128 *)v8[3];
      v55 = v8[2];
      memset(v56, 0, sizeof(v56));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v56, v12, (__int128 *)v8[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v8[4] - (_BYTE *)v12) >> 3));
      v57 = v8[6];
      v51 = *(_OWORD *)v5;
      v13 = (__int128 *)v5[3];
      v52 = v5[2];
      memset(v53, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v53, v13, (__int128 *)v5[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v5[4] - (_BYTE *)v13) >> 3));
      v53[3] = v5[6];
      v14 = *(float *)(((unint64_t)&v54 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
      v15 = *(float *)(((unint64_t)&v51 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v53);

      result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v56);
      if (v14 >= v15)
      {
        v45 = *(_OWORD *)v5;
        v16 = (__int128 *)v5[3];
        v46 = v5[2];
        v47 = 0;
        v48 = 0;
        v49 = 0;
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v47, v16, (__int128 *)v5[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v5[4] - (_BYTE *)v16) >> 3));
        obj = v5[6];
        do
        {
          v17 = v8;
          v18 = *(_OWORD *)v8;
          v5[2] = v8[2];
          *(_OWORD *)v5 = v18;
          if (v5 != v8)
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v5 + 3, (uint64_t)v8[3], (uint64_t)v8[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v8[4] - (_BYTE *)v8[3]) >> 3));
          objc_storeStrong(v5 + 6, v8[6]);
          if (v28 < v6)
            break;
          v19 = (2 * v6) | 1;
          v20 = &v27[14 * v6];
          v8 = v20 + 7;
          v6 = 2 * v6 + 2;
          if (v6 >= a3)
          {
            v6 = v19;
          }
          else
          {
            v41 = *(_OWORD *)v8;
            v42 = v20[9];
            memset(v43, 0, sizeof(v43));
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v43, (__int128 *)v20[10], (__int128 *)v20[11], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v20[11] - (_BYTE *)v20[10]) >> 3));
            v44 = v20[13];
            v38 = *((_OWORD *)v20 + 7);
            v39 = v20[16];
            memset(v40, 0, 24);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v40, (__int128 *)v20[17], (__int128 *)v20[18], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v20[18] - (_BYTE *)v20[17]) >> 3));
            v40[3] = v20[20];
            v21 = *(float *)(((unint64_t)&v41 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
            v22 = *(float *)(((unint64_t)&v38 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v40);

            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v43);
            if (v21 >= v22)
              v6 = v19;
            else
              v8 = v20 + 14;
          }
          v34 = *(_OWORD *)v8;
          v23 = (__int128 *)v8[3];
          v35 = v8[2];
          memset(v36, 0, sizeof(v36));
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v36, v23, (__int128 *)v8[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v8[4] - (_BYTE *)v23) >> 3));
          v37 = v8[6];
          v31 = v45;
          v32 = v46;
          memset(v33, 0, 24);
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v33, v47, v48, 0x6DB6DB6DB6DB6DB7 * (((char *)v48 - (char *)v47) >> 3));
          v33[3] = obj;
          v24 = *(float *)(((unint64_t)&v34 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
          v25 = *(float *)(((unint64_t)&v31 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v33);

          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v36);
          v5 = v17;
        }
        while (v24 >= v25);
        v26 = v45;
        v17[2] = v46;
        *(_OWORD *)v17 = v26;
        if (v17 != (void **)&v45)
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v17 + 3, (uint64_t)v47, (uint64_t)v48, 0x6DB6DB6DB6DB6DB7 * (((char *)v48 - (char *)v47) >> 3));
        objc_storeStrong(v17 + 6, obj);

        return _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v47);
      }
    }
  }
  return result;
}

void sub_227B5EB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a10);
  _Unwind_Resume(a1);
}

void **_ZNSt3__110__pop_heapB8ne180100INS_17_ClassicAlgPolicyEZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEvT1_SB_RT0_NS_15iterator_traitsISB_E15difference_typeE(void **result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  void **v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  void **v13;
  id *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id obj;

  if (a4 >= 2)
  {
    v7 = result;
    v17 = *(_OWORD *)result;
    v8 = (__int128 *)result[3];
    v18 = result[2];
    v19 = 0;
    v20 = 0;
    v21 = 0;
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v19, v8, (__int128 *)result[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)result[4] - (_BYTE *)v8) >> 3));
    obj = v7[6];
    v9 = _ZNSt3__117__floyd_sift_downB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EET1_SC_OT0_NS_15iterator_traitsISC_E15difference_typeE((__int128 *)v7, a3, a4);
    v10 = v9;
    v11 = a2 - 56;
    if (v9 == (__int128 *)(a2 - 56))
    {
      v16 = v17;
      *((_QWORD *)v9 + 2) = v18;
      *v9 = v16;
      if (v9 != &v17)
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)v9 + 3, v19, v20, 0x6DB6DB6DB6DB6DB7 * ((v20 - v19) >> 3));
      objc_storeStrong((id *)v10 + 6, obj);
    }
    else
    {
      v12 = *(_OWORD *)v11;
      *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 - 40);
      *v9 = v12;
      v13 = (void **)(a2 - 32);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)v9 + 3, *(_QWORD *)(a2 - 32), *(_QWORD *)(a2 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 - 24) - *(_QWORD *)(a2 - 32)) >> 3));
      v15 = *(void **)(a2 - 8);
      v14 = (id *)(a2 - 8);
      objc_storeStrong((id *)v10 + 6, v15);
      *(_OWORD *)v11 = v17;
      *(_QWORD *)(v11 + 16) = v18;
      if ((__int128 *)v11 != &v17)
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v13, v19, v20, 0x6DB6DB6DB6DB6DB7 * ((v20 - v19) >> 3));
      objc_storeStrong(v14, obj);
      _ZNSt3__19__sift_upB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEvT1_SC_OT0_NS_15iterator_traitsISC_E15difference_typeE(v7, (uint64_t)v10 + 56, a3, 0x6DB6DB6DB6DB6DB7 * (((char *)v10 + 56 - (char *)v7) >> 3));
    }

    return _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v19);
  }
  return result;
}

void sub_227B5EDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void **v15;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v15);
  _Unwind_Resume(a1);
}

__int128 *_ZNSt3__117__floyd_sift_downB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EET1_SC_OT0_NS_15iterator_traitsISC_E15difference_typeE(__int128 *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  float v14;
  float v15;
  __int128 v16;
  __int128 v19;
  uint64_t v20;
  void *v21[5];
  __int128 v22;
  uint64_t v23;
  void *v24[3];
  id v25;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = (uint64_t)a1 + 56 * v5;
    v9 = (__int128 *)(v8 + 56);
    v10 = 2 * v5;
    v5 = (2 * v5) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      v12 = *v9;
      v23 = *(_QWORD *)(v8 + 72);
      v22 = v12;
      memset(v24, 0, sizeof(v24));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v24, *(__int128 **)(v8 + 80), *(__int128 **)(v8 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v8 + 88) - *(_QWORD *)(v8 + 80)) >> 3));
      v25 = *(id *)(v8 + 104);
      v13 = *(_QWORD *)(v8 + 128);
      v19 = *(_OWORD *)(v8 + 112);
      v20 = v13;
      memset(v21, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v21, *(__int128 **)(v8 + 136), *(__int128 **)(v8 + 144), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v8 + 144) - *(_QWORD *)(v8 + 136)) >> 3));
      v21[3] = *(void **)(v8 + 160);
      v14 = *(float *)(((unint64_t)&v22 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
      v15 = *(float *)(((unint64_t)&v19 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v21);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v24);
      if (v14 < v15)
      {
        v9 = (__int128 *)(v8 + 112);
        v5 = v11;
      }
    }
    v16 = *v9;
    *((_QWORD *)a1 + 2) = *((_QWORD *)v9 + 2);
    *a1 = v16;
    if (a1 != v9)
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)a1 + 3, *((_QWORD *)v9 + 3), *((_QWORD *)v9 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v9 + 4) - *((_QWORD *)v9 + 3)) >> 3));
    objc_storeStrong((id *)a1 + 6, *((id *)v9 + 6));
    a1 = v9;
  }
  while (v5 <= v7);
  return v9;
}

void sub_227B5EFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void **v25;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v25);
  _Unwind_Resume(a1);
}

void **_ZNSt3__19__sift_upB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E_PS5_EEvT1_SC_OT0_NS_15iterator_traitsISC_E15difference_typeE(void **result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v4;
  void **v7;
  unint64_t v8;
  void **v9;
  __int128 *v10;
  __int128 *v11;
  float v12;
  float v13;
  void **v14;
  void **v15;
  __int128 v16;
  __int128 *v17;
  float v18;
  float v19;
  __int128 v20;
  void *v21;
  void *v22[5];
  __int128 v23;
  void *v24;
  void *v25[3];
  id v26;
  __int128 v27;
  void *v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  id obj;
  __int128 v33;
  uint64_t v34;
  void *v35[5];
  __int128 v36;
  void *v37;
  void *v38[3];
  id v39;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = result;
    v8 = v4 >> 1;
    v9 = &result[7 * (v4 >> 1)];
    v36 = *(_OWORD *)v9;
    v10 = (__int128 *)v9[3];
    v37 = v9[2];
    memset(v38, 0, sizeof(v38));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v38, v10, (__int128 *)v9[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v9[4] - (_BYTE *)v10) >> 3));
    v39 = v9[6];
    v33 = *(_OWORD *)(a2 - 56);
    v11 = *(__int128 **)(a2 - 32);
    v34 = *(_QWORD *)(a2 - 40);
    memset(v35, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v35, v11, *(__int128 **)(a2 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 - 24) - (_QWORD)v11) >> 3));
    v35[3] = *(void **)(a2 - 8);
    v12 = *(float *)(((unint64_t)&v36 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
    v13 = *(float *)(((unint64_t)&v33 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v35);

    result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v38);
    if (v12 < v13)
    {
      v14 = (void **)(a2 - 56);
      v27 = *(_OWORD *)(a2 - 56);
      v28 = *(void **)(a2 - 40);
      v29 = 0;
      v30 = 0;
      v31 = 0;
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v29, *(__int128 **)(a2 - 32), *(__int128 **)(a2 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 - 24) - *(_QWORD *)(a2 - 32)) >> 3));
      obj = *(id *)(a2 - 8);
      do
      {
        v15 = v9;
        v16 = *(_OWORD *)v9;
        v14[2] = v9[2];
        *(_OWORD *)v14 = v16;
        if (v14 != v9)
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v14 + 3, (uint64_t)v9[3], (uint64_t)v9[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v9[4] - (_BYTE *)v9[3]) >> 3));
        objc_storeStrong(v14 + 6, v9[6]);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = &v7[7 * v8];
        v23 = *(_OWORD *)v9;
        v17 = (__int128 *)v9[3];
        v24 = v9[2];
        memset(v25, 0, sizeof(v25));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v25, v17, (__int128 *)v9[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v9[4] - (_BYTE *)v17) >> 3));
        v26 = v9[6];
        v20 = v27;
        v21 = v28;
        memset(v22, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v22, v29, v30, 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 3));
        v22[3] = obj;
        v18 = *(float *)(((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        v19 = *(float *)(((unint64_t)&v20 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v22);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v25);
        v14 = v15;
      }
      while (v18 < v19);
      *(_OWORD *)v15 = v27;
      v15[2] = v28;
      if (v15 != (void **)&v27)
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v15 + 3, (uint64_t)v29, (uint64_t)v30, 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 3));
      objc_storeStrong(v15 + 6, obj);

      return _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v29);
    }
  }
  return result;
}

void sub_227B5F2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a10);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_Lb0EEEvT1_SC_T0_NS_15iterator_traitsISC_E15difference_typeEb(uint64_t result, void **a2, _DWORD *a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  float v19;
  float v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  __int128 *v34;
  __int128 v35;
  uint64_t v36;
  void *v37[5];
  __int128 v38;
  uint64_t v39;
  void *v40[3];
  id v41;
  __int128 v42;
  uint64_t v43;
  void *v44[5];
  __int128 v45;
  uint64_t v46;
  void *v47[3];
  id v48;

  v8 = result;
LABEL_2:
  v34 = (__int128 *)(a2 - 7);
  v9 = v8;
  while (2)
  {
    v10 = a4 - 1;
LABEL_4:
    v8 = v9;
    a4 = v10;
    v11 = (uint64_t)a2 - v9;
    v12 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v9) >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v24 = (uint64_t)*(a2 - 5);
        v45 = *v34;
        v46 = v24;
        memset(v47, 0, sizeof(v47));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v47, (__int128 *)*(a2 - 4), (__int128 *)*(a2 - 3), 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)*(a2 - 3) - (_BYTE *)*(a2 - 4)) >> 3));
        v48 = *(a2 - 1);
        v25 = *(_QWORD *)(v9 + 16);
        v42 = *(_OWORD *)v9;
        v43 = v25;
        memset(v44, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v44, *(__int128 **)(v9 + 24), *(__int128 **)(v9 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24)) >> 3));
        v44[3] = *(void **)(v9 + 48);
        v26 = *(float *)(((unint64_t)&v45 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
        v27 = *(float *)(((unint64_t)&v42 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v44);

        result = (uint64_t)_ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v47);
        if (v26 > v27)
          return (uint64_t)_ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)v9, v34);
        return result;
      case 3uLL:
        return _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEjT1_SC_SC_T0_(v9, v9 + 56, (uint64_t)v34, a3);
      case 4uLL:
        return (uint64_t)_ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEvT1_SC_SC_SC_T0_(v9, v9 + 56, v9 + 112, (uint64_t)v34, a3);
      case 5uLL:
        return (uint64_t)_ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEvT1_SC_SC_SC_SC_T0_(v9, v9 + 56, v9 + 112, v9 + 168, (uint64_t)v34, a3);
      default:
        if (v11 <= 1343)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)_ZNSt3__116__insertion_sortB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEvT1_SC_T0_((void **)v9, a2, a3);
          else
            return (uint64_t)_ZNSt3__126__insertion_sort_unguardedB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEvT1_SC_T0_((void **)v9, a2, a3);
        }
        if (v10 == -1)
        {
          if ((void **)v9 != a2)
          {
            v28 = (v12 - 2) >> 1;
            v29 = v28 + 1;
            v30 = (char *)(v9 + 56 * v28);
            do
            {
              _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEvT1_OT0_NS_15iterator_traitsISC_E15difference_typeESC_((void **)v8, a3, v12, v30);
              v30 -= 56;
              --v29;
            }
            while (v29);
            v31 = v11 / 0x38uLL;
            do
            {
              result = (uint64_t)_ZNSt3__110__pop_heapB8ne180100INS_17_ClassicAlgPolicyEZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEvT1_SB_RT0_NS_15iterator_traitsISB_E15difference_typeE((void **)v8, (uint64_t)a2, a3, v31);
              a2 -= 7;
            }
            while (v31-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = (__int128 *)(v9 + 56 * v13);
        if ((unint64_t)v11 >= 0x1C01)
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEjT1_SC_SC_T0_(v8, v8 + 56 * v13, (uint64_t)v34, a3);
          v15 = v8 + 56 * v13;
          v16 = v15 - 56;
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEjT1_SC_SC_T0_(v8 + 56, v15 - 56, (uint64_t)(a2 - 14), a3);
          v15 += 56;
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEjT1_SC_SC_T0_(v8 + 112, v15, (uint64_t)(a2 - 21), a3);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEjT1_SC_SC_T0_(v16, (uint64_t)v14, v15, a3);
          _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)v8, v14);
          if ((a5 & 1) != 0)
            goto LABEL_13;
LABEL_12:
          v17 = *(_OWORD *)(v8 - 56);
          v39 = *(_QWORD *)(v8 - 40);
          v38 = v17;
          memset(v40, 0, sizeof(v40));
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v40, *(__int128 **)(v8 - 32), *(__int128 **)(v8 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v8 - 24) - *(_QWORD *)(v8 - 32)) >> 3));
          v41 = *(id *)(v8 - 8);
          v18 = *(_QWORD *)(v8 + 16);
          v35 = *(_OWORD *)v8;
          v36 = v18;
          memset(v37, 0, 24);
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v37, *(__int128 **)(v8 + 24), *(__int128 **)(v8 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24)) >> 3));
          v37[3] = *(void **)(v8 + 48);
          v19 = *(float *)(((unint64_t)&v38 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
          v20 = *(float *)(((unint64_t)&v35 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v37);

          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v40);
          if (v19 > v20)
            goto LABEL_13;
          result = _ZNSt3__131__partition_with_equals_on_leftB8ne180100INS_17_ClassicAlgPolicyEP12GKCRTreeNodeI8NSObjectDv2_fERZNS5_18SplitReduceOverlapEPS3_RKS4_S9_EUlS5_S5_E0_EET0_SC_SC_T1_((__int128 *)v8, (unint64_t)a2, a3);
          v9 = result;
          a5 = 0;
          continue;
        }
        _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEjT1_SC_SC_T0_(v8 + 56 * v13, v8, (uint64_t)v34, a3);
        if ((a5 & 1) == 0)
          goto LABEL_12;
LABEL_13:
        v21 = _ZNSt3__132__partition_with_equals_on_rightB8ne180100INS_17_ClassicAlgPolicyEP12GKCRTreeNodeI8NSObjectDv2_fERZNS5_18SplitReduceOverlapEPS3_RKS4_S9_EUlS5_S5_E0_EENS_4pairIT0_bEESD_SD_T1_((__int128 *)v8, (__int128 *)a2, a3);
        if ((v22 & 1) == 0)
        {
LABEL_16:
          result = _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_Lb0EEEvT1_SC_T0_NS_15iterator_traitsISC_E15difference_typeEb(v8, v21, a3, a4, a5 & 1);
          a5 = 0;
          v9 = v21 + 56;
          continue;
        }
        v23 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEbT1_SC_T0_(v8, v21, a3);
        v9 = v21 + 56;
        result = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEbT1_SC_T0_(v21 + 56, (uint64_t)a2, a3);
        if (!(_DWORD)result)
        {
          v10 = a4 - 1;
          if (v23)
            goto LABEL_4;
          goto LABEL_16;
        }
        a2 = (void **)v21;
        if (!v23)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_227B5F828(_Unwind_Exception *a1)
{
  void **v1;
  id *v2;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v1);
  _Unwind_Resume(a1);
}

void **_ZNSt3__116__insertion_sortB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEvT1_SC_T0_(void **result, void **a2, _DWORD *a3)
{
  void **v3;
  void **v4;
  uint64_t v6;
  void **v7;
  void **v8;
  void *v9;
  float v10;
  float v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 *v15;
  float v16;
  float v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  void *v22[5];
  __int128 v23;
  void *v24;
  void *v25[3];
  id v26;
  __int128 v27;
  void *v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  id obj;
  __int128 v33;
  void *v34;
  void *v35[5];
  __int128 v36;
  void *v37;
  void *v38[3];
  id v39;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 7;
    if (result + 7 != a2)
    {
      v6 = 0;
      v7 = result;
      do
      {
        v8 = v4;
        v36 = *(_OWORD *)v4;
        v37 = v4[2];
        memset(v38, 0, sizeof(v38));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v38, (__int128 *)v7[10], (__int128 *)v7[11], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v7[11] - (_BYTE *)v7[10]) >> 3));
        v39 = v7[13];
        v9 = v7[2];
        v33 = *(_OWORD *)v7;
        v34 = v9;
        memset(v35, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v35, (__int128 *)v7[3], (__int128 *)v7[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v7[4] - (_BYTE *)v7[3]) >> 3));
        v35[3] = v7[6];
        v10 = *(float *)(((unint64_t)&v36 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
        v11 = *(float *)(((unint64_t)&v33 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v35);

        result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v38);
        if (v10 > v11)
        {
          v27 = *(_OWORD *)v8;
          v28 = v8[2];
          v30 = 0;
          v31 = 0;
          v29 = 0;
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v29, (__int128 *)v7[10], (__int128 *)v7[11], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v7[11] - (_BYTE *)v7[10]) >> 3));
          obj = v7[13];
          v12 = v6;
          while (1)
          {
            v13 = (char *)v3 + v12;
            *(_OWORD *)(v13 + 56) = *(_OWORD *)((char *)v3 + v12);
            v14 = *(uint64_t *)((char *)v3 + v12 + 24);
            *((_QWORD *)v13 + 9) = *(void **)((char *)v3 + v12 + 16);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)((char *)v3 + v12 + 80), v14, *(uint64_t *)((char *)v3 + v12 + 32), 0x6DB6DB6DB6DB6DB7 * ((*(uint64_t *)((char *)v3 + v12 + 32) - v14) >> 3));
            objc_storeStrong((id *)v13 + 13, *((id *)v13 + 6));
            if (!v12)
              break;
            v23 = v27;
            v24 = v28;
            memset(v25, 0, sizeof(v25));
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v25, v29, v30, 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 3));
            v26 = obj;
            v20 = *(_OWORD *)((char *)v3 + v12 - 56);
            v15 = *(__int128 **)((char *)v3 + v12 - 32);
            v21 = *(uint64_t *)((char *)v3 + v12 - 40);
            memset(v22, 0, 24);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v22, v15, *(__int128 **)((char *)v3 + v12 - 24), 0x6DB6DB6DB6DB6DB7 * ((*(_BYTE **)((char *)v3 + v12 - 24) - (_BYTE *)v15) >> 3));
            v22[3] = *(void **)((char *)v3 + v12 - 8);
            v16 = *(float *)(((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
            v17 = *(float *)(((unint64_t)&v20 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v22);

            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v25);
            v12 -= 56;
            if (v16 <= v17)
            {
              v18 = (uint64_t)v3 + v12 + 56;
              goto LABEL_12;
            }
          }
          v18 = (uint64_t)v3;
LABEL_12:
          *(_OWORD *)v18 = v27;
          *(_QWORD *)(v18 + 16) = v28;
          if ((__int128 *)v18 != &v27)
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)(v18 + 24), (uint64_t)v29, (uint64_t)v30, 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 3));
          objc_storeStrong((id *)(v18 + 48), obj);

          result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v29);
        }
        v4 = v8 + 7;
        v6 += 56;
        v7 = v8;
      }
      while (v8 + 7 != a2);
    }
  }
  return result;
}

void sub_227B5FB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a10);
  _Unwind_Resume(a1);
}

void **_ZNSt3__126__insertion_sort_unguardedB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEvT1_SC_T0_(void **result, void **a2, _DWORD *a3)
{
  void **v3;
  void **v4;
  void **v6;
  void **v7;
  void *v8;
  float v9;
  float v10;
  id *v11;
  id *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  float v16;
  float v17;
  id *v18;
  __int128 v20;
  uint64_t v21;
  void *v22[5];
  __int128 v23;
  void *v24;
  void *v25[3];
  id v26;
  __int128 v27;
  void *v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  id obj;
  __int128 v33;
  void *v34;
  void *v35[5];
  __int128 v36;
  void *v37;
  void *v38[3];
  id v39;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 7;
    if (result + 7 != a2)
    {
      v6 = result + 13;
      do
      {
        v7 = v4;
        v36 = *(_OWORD *)v4;
        v37 = v4[2];
        memset(v38, 0, sizeof(v38));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v38, (__int128 *)v3[10], (__int128 *)v3[11], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v3[11] - (_BYTE *)v3[10]) >> 3));
        v39 = v3[13];
        v8 = v3[2];
        v33 = *(_OWORD *)v3;
        v34 = v8;
        memset(v35, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v35, (__int128 *)v3[3], (__int128 *)v3[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v3[4] - (_BYTE *)v3[3]) >> 3));
        v35[3] = v3[6];
        v9 = *(float *)(((unint64_t)&v36 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
        v10 = *(float *)(((unint64_t)&v33 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v35);

        result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v38);
        if (v9 > v10)
        {
          v27 = *(_OWORD *)v7;
          v28 = v7[2];
          v30 = 0;
          v31 = 0;
          v29 = 0;
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v29, (__int128 *)v3[10], (__int128 *)v3[11], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v3[11] - (_BYTE *)v3[10]) >> 3));
          obj = v3[13];
          v11 = v6;
          do
          {
            v12 = v11;
            *((_OWORD *)v11 - 3) = *(_OWORD *)(v11 - 13);
            v13 = (uint64_t)*(v11 - 10);
            v14 = (uint64_t)*(v11 - 9);
            *(v11 - 4) = *(v11 - 11);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v11 - 3, v13, v14, 0x6DB6DB6DB6DB6DB7 * ((v14 - v13) >> 3));
            objc_storeStrong(v12, *(v12 - 7));
            v23 = v27;
            v24 = v28;
            memset(v25, 0, sizeof(v25));
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v25, v29, v30, 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 3));
            v26 = obj;
            v20 = *((_OWORD *)v12 - 10);
            v15 = (__int128 *)*(v12 - 17);
            v21 = (uint64_t)*(v12 - 18);
            memset(v22, 0, 24);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v22, v15, (__int128 *)*(v12 - 16), 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)*(v12 - 16) - (_BYTE *)v15) >> 3));
            v22[3] = *(v12 - 14);
            v16 = *(float *)(((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
            v17 = *(float *)(((unint64_t)&v20 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v22);

            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v25);
            v11 = v12 - 7;
          }
          while (v16 > v17);
          *(_OWORD *)(v12 - 13) = v27;
          v18 = v12 - 13;
          v18[2] = v28;
          if (v18 != (id *)&v27)
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v18 + 3, (uint64_t)v29, (uint64_t)v30, 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 3));
          objc_storeStrong(v18 + 6, obj);

          result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v29);
        }
        v4 = v7 + 7;
        v6 += 7;
        v3 = v7;
      }
      while (v7 + 7 != a2);
    }
  }
  return result;
}

void sub_227B5FED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  void **v33;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v33);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEjT1_SC_SC_T0_(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  float v11;
  float v12;
  __int128 *v13;
  __int128 *v14;
  float v15;
  float v16;
  __int128 *v17;
  __int128 *v18;
  float v19;
  float v20;
  __int128 *v21;
  __int128 *v22;
  float v23;
  float v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  __int128 *v28;
  float v29;
  float v30;
  __int128 v32;
  uint64_t v33;
  void *v34[5];
  __int128 v35;
  uint64_t v36;
  void *v37[3];
  id v38;
  __int128 v39;
  uint64_t v40;
  void *v41[5];
  __int128 v42;
  uint64_t v43;
  void *v44[3];
  id v45;
  __int128 v46;
  uint64_t v47;
  void *v48[5];
  __int128 v49;
  uint64_t v50;
  void *v51[3];
  id v52;
  __int128 v53;
  uint64_t v54;
  void *v55[5];
  __int128 v56;
  uint64_t v57;
  void *v58[3];
  id v59;
  __int128 v60;
  uint64_t v61;
  void *v62[5];
  __int128 v63;
  uint64_t v64;
  void *v65[3];
  id v66;

  v63 = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  v8 = *(__int128 **)(a2 + 24);
  v64 = v9;
  memset(v65, 0, sizeof(v65));
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v65, v8, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v8) >> 3));
  v66 = *(id *)(a2 + 48);
  v60 = *(_OWORD *)a1;
  v10 = *(__int128 **)(a1 + 24);
  v61 = *(_QWORD *)(a1 + 16);
  memset(v62, 0, 24);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v62, v10, *(__int128 **)(a1 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v10) >> 3));
  v62[3] = *(void **)(a1 + 48);
  v11 = *(float *)(((unint64_t)&v63 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 0x10);
  v12 = *(float *)(((unint64_t)&v60 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 0x10);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v62);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v65);
  if (v11 > v12)
  {
    v42 = *(_OWORD *)a3;
    v13 = *(__int128 **)(a3 + 24);
    v43 = *(_QWORD *)(a3 + 16);
    memset(v44, 0, sizeof(v44));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v44, v13, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v13) >> 3));
    v45 = *(id *)(a3 + 48);
    v39 = *(_OWORD *)a2;
    v14 = *(__int128 **)(a2 + 24);
    v40 = *(_QWORD *)(a2 + 16);
    memset(v41, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v41, v14, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v14) >> 3));
    v41[3] = *(void **)(a2 + 48);
    v15 = *(float *)(((unint64_t)&v42 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 0x10);
    v16 = *(float *)(((unint64_t)&v39 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 0x10);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v41);

    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v44);
    if (v15 > v16)
    {
      _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a1, (__int128 *)a3);
      return 1;
    }
    _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a1, (__int128 *)a2);
    v35 = *(_OWORD *)a3;
    v27 = *(__int128 **)(a3 + 24);
    v36 = *(_QWORD *)(a3 + 16);
    memset(v37, 0, sizeof(v37));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v37, v27, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v27) >> 3));
    v38 = *(id *)(a3 + 48);
    v32 = *(_OWORD *)a2;
    v28 = *(__int128 **)(a2 + 24);
    v33 = *(_QWORD *)(a2 + 16);
    memset(v34, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v34, v28, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v28) >> 3));
    v34[3] = *(void **)(a2 + 48);
    v29 = *(float *)(((unint64_t)&v35 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 0x10);
    v30 = *(float *)(((unint64_t)&v32 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 0x10);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v34);

    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v37);
    if (v29 <= v30)
      return 1;
    v25 = (__int128 *)a2;
    v26 = (__int128 *)a3;
LABEL_9:
    _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_(v25, v26);
    return 2;
  }
  v56 = *(_OWORD *)a3;
  v17 = *(__int128 **)(a3 + 24);
  v57 = *(_QWORD *)(a3 + 16);
  memset(v58, 0, sizeof(v58));
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v58, v17, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v17) >> 3));
  v59 = *(id *)(a3 + 48);
  v53 = *(_OWORD *)a2;
  v18 = *(__int128 **)(a2 + 24);
  v54 = *(_QWORD *)(a2 + 16);
  memset(v55, 0, 24);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v55, v18, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v18) >> 3));
  v55[3] = *(void **)(a2 + 48);
  v19 = *(float *)(((unint64_t)&v56 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 0x10);
  v20 = *(float *)(((unint64_t)&v53 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 0x10);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v55);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v58);
  if (v19 > v20)
  {
    _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a2, (__int128 *)a3);
    v49 = *(_OWORD *)a2;
    v21 = *(__int128 **)(a2 + 24);
    v50 = *(_QWORD *)(a2 + 16);
    memset(v51, 0, sizeof(v51));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v51, v21, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v21) >> 3));
    v52 = *(id *)(a2 + 48);
    v46 = *(_OWORD *)a1;
    v22 = *(__int128 **)(a1 + 24);
    v47 = *(_QWORD *)(a1 + 16);
    memset(v48, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v48, v22, *(__int128 **)(a1 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v22) >> 3));
    v48[3] = *(void **)(a1 + 48);
    v23 = *(float *)(((unint64_t)&v49 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 0x10);
    v24 = *(float *)(((unint64_t)&v46 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 0x10);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v48);

    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v51);
    if (v23 <= v24)
      return 1;
    v25 = (__int128 *)a1;
    v26 = (__int128 *)a2;
    goto LABEL_9;
  }
  return 0;
}

void sub_227B6039C(_Unwind_Exception *a1)
{
  void **v1;
  id *v2;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v1);
  _Unwind_Resume(a1);
}

unint64_t _ZNSt3__131__partition_with_equals_on_leftB8ne180100INS_17_ClassicAlgPolicyEP12GKCRTreeNodeI8NSObjectDv2_fERZNS5_18SplitReduceOverlapEPS3_RKS4_S9_EUlS5_S5_E0_EET0_SC_SC_T1_(__int128 *a1, unint64_t a2, _DWORD *a3)
{
  __int128 *v6;
  __int128 *v7;
  float v8;
  float v9;
  __int128 *v10;
  unint64_t v11;
  float v12;
  float v13;
  unint64_t v14;
  __int128 *v15;
  float v16;
  float v17;
  __int128 *v18;
  float v19;
  float v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  __int128 *v25;
  uint64_t v26;
  float v27;
  float v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  void **v33;
  __int128 v34;
  uint64_t v35;
  void *v36[5];
  __int128 v37;
  uint64_t v38;
  void *v39[3];
  id v40;
  __int128 v41;
  uint64_t v42;
  void *v43[5];
  __int128 v44;
  uint64_t v45;
  void *v46[3];
  id v47;
  __int128 v48;
  uint64_t v49;
  void *v50[5];
  __int128 v51;
  uint64_t v52;
  void *v53[3];
  id v54;
  __int128 v55;
  uint64_t v56;
  void *v57[5];
  __int128 v58;
  uint64_t v59;
  void *v60[3];
  id v61;
  __int128 v62;
  uint64_t v63;
  void *v64[5];
  __int128 v65;
  uint64_t v66;
  void *v67[3];
  id v68;
  __int128 v69;
  uint64_t v70;
  void *v71[5];
  __int128 v72;
  uint64_t v73;
  void *v74[3];
  id v75;
  __int128 v76;
  uint64_t v77;
  __int128 *v78;
  __int128 *v79;
  uint64_t v80;
  id v81;

  v76 = *a1;
  v6 = (__int128 *)*((_QWORD *)a1 + 3);
  v33 = (void **)a1 + 3;
  v77 = *((_QWORD *)a1 + 2);
  v78 = 0;
  v79 = 0;
  v80 = 0;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v78, v6, *((__int128 **)a1 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a1 + 4) - (_QWORD)v6) >> 3));
  v81 = *((id *)a1 + 6);
  v72 = v76;
  v73 = v77;
  memset(v74, 0, sizeof(v74));
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v74, v78, v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
  v75 = v81;
  v69 = *(_OWORD *)(a2 - 56);
  v7 = *(__int128 **)(a2 - 32);
  v70 = *(_QWORD *)(a2 - 40);
  memset(v71, 0, 24);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v71, v7, *(__int128 **)(a2 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 - 24) - (_QWORD)v7) >> 3));
  v71[3] = *(void **)(a2 - 8);
  v8 = *(float *)(((unint64_t)&v72 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
  v9 = *(float *)(((unint64_t)&v69 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v71);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v74);
  if (v8 <= v9)
  {
    v14 = (unint64_t)a1 + 56;
    do
    {
      v11 = v14;
      if (v14 >= a2)
        break;
      v58 = v76;
      v59 = v77;
      memset(v60, 0, sizeof(v60));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v60, v78, v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
      v61 = v81;
      v55 = *(_OWORD *)v11;
      v15 = *(__int128 **)(v11 + 24);
      v56 = *(_QWORD *)(v11 + 16);
      memset(v57, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v57, v15, *(__int128 **)(v11 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v11 + 32) - (_QWORD)v15) >> 3));
      v57[3] = *(void **)(v11 + 48);
      v16 = *(float *)(((unint64_t)&v58 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
      v17 = *(float *)(((unint64_t)&v55 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v57);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v60);
      v14 = v11 + 56;
    }
    while (v16 <= v17);
  }
  else
  {
    v10 = a1;
    do
    {
      v65 = v76;
      v66 = v77;
      memset(v67, 0, sizeof(v67));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v67, v78, v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
      v11 = (unint64_t)v10 + 56;
      v68 = v81;
      v62 = *(__int128 *)((char *)v10 + 56);
      v63 = *((_QWORD *)v10 + 9);
      memset(v64, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v64, *((__int128 **)v10 + 10), *((__int128 **)v10 + 11), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v10 + 11) - *((_QWORD *)v10 + 10)) >> 3));
      v64[3] = *((void **)v10 + 13);
      v12 = *(float *)(((unint64_t)&v65 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
      v13 = *(float *)(((unint64_t)&v62 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v64);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v67);
      v10 = (__int128 *)((char *)v10 + 56);
    }
    while (v12 <= v13);
  }
  if (v11 < a2)
  {
    do
    {
      v51 = v76;
      v52 = v77;
      memset(v53, 0, sizeof(v53));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v53, v78, v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
      v18 = (__int128 *)(a2 - 56);
      v54 = v81;
      v48 = *(_OWORD *)(a2 - 56);
      v49 = *(_QWORD *)(a2 - 40);
      memset(v50, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v50, *(__int128 **)(a2 - 32), *(__int128 **)(a2 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 - 24) - *(_QWORD *)(a2 - 32)) >> 3));
      v50[3] = *(void **)(a2 - 8);
      v19 = *(float *)(((unint64_t)&v51 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
      v20 = *(float *)(((unint64_t)&v48 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v50);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v53);
      a2 -= 56;
    }
    while (v19 > v20);
    while (v11 < (unint64_t)v18)
    {
      _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)v11, v18);
      v21 = v11;
      do
      {
        v44 = v76;
        v45 = v77;
        memset(v46, 0, sizeof(v46));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v46, v78, v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
        v11 = v21 + 56;
        v47 = v81;
        v22 = *(_QWORD *)(v21 + 72);
        v41 = *(_OWORD *)(v21 + 56);
        v42 = v22;
        memset(v43, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v43, *(__int128 **)(v21 + 80), *(__int128 **)(v21 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v21 + 88) - *(_QWORD *)(v21 + 80)) >> 3));
        v43[3] = *(void **)(v21 + 104);
        v23 = *(float *)(((unint64_t)&v44 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
        v24 = *(float *)(((unint64_t)&v41 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v43);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v46);
        v21 += 56;
      }
      while (v23 <= v24);
      v25 = v18;
      do
      {
        v37 = v76;
        v38 = v77;
        memset(v39, 0, sizeof(v39));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v39, v78, v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
        v18 = (__int128 *)((char *)v25 - 56);
        v40 = v81;
        v26 = *((_QWORD *)v25 - 5);
        v34 = *(__int128 *)((char *)v25 - 56);
        v35 = v26;
        memset(v36, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v36, *((__int128 **)v25 - 4), *((__int128 **)v25 - 3), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v25 - 3) - *((_QWORD *)v25 - 4)) >> 3));
        v36[3] = *((void **)v25 - 1);
        v27 = *(float *)(((unint64_t)&v37 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
        v28 = *(float *)(((unint64_t)&v34 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v36);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v39);
        v25 = (__int128 *)((char *)v25 - 56);
      }
      while (v27 > v28);
    }
  }
  v29 = (__int128 *)(v11 - 56);
  if ((__int128 *)(v11 - 56) != a1)
  {
    v30 = *v29;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v11 - 40);
    *a1 = v30;
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v33, *(_QWORD *)(v11 - 32), *(_QWORD *)(v11 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v11 - 24) - *(_QWORD *)(v11 - 32)) >> 3));
    objc_storeStrong((id *)a1 + 6, *(id *)(v11 - 8));
  }
  v31 = v76;
  *(_QWORD *)(v11 - 40) = v77;
  *v29 = v31;
  if (v29 != &v76)
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)(v11 - 32), (uint64_t)v78, (uint64_t)v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
  objc_storeStrong((id *)(v11 - 8), v81);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v78);
  return v11;
}

void sub_227B60A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  void **v12;
  uint64_t v13;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v12);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a12);
  _Unwind_Resume(a1);
}

unint64_t _ZNSt3__132__partition_with_equals_on_rightB8ne180100INS_17_ClassicAlgPolicyEP12GKCRTreeNodeI8NSObjectDv2_fERZNS5_18SplitReduceOverlapEPS3_RKS4_S9_EUlS5_S5_E0_EENS_4pairIT0_bEESD_SD_T1_(__int128 *a1, __int128 *a2, _DWORD *a3)
{
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  float v8;
  float v9;
  __int128 *v10;
  float v11;
  float v12;
  __int128 *v13;
  float v14;
  float v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  __int128 v21;
  float v22;
  float v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  id *location;
  void **v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  void *v34[5];
  __int128 v35;
  uint64_t v36;
  void *v37[3];
  id v38;
  __int128 v39;
  uint64_t v40;
  void *v41[5];
  __int128 v42;
  uint64_t v43;
  void *v44[3];
  id v45;
  __int128 v46;
  uint64_t v47;
  void *v48[5];
  __int128 v49;
  uint64_t v50;
  void *v51[3];
  id v52;
  __int128 v53;
  uint64_t v54;
  void *v55[5];
  __int128 v56;
  uint64_t v57;
  void *v58[3];
  id v59;
  __int128 v60;
  uint64_t v61;
  void *v62[5];
  __int128 v63;
  uint64_t v64;
  void *v65[3];
  id v66;
  __int128 v67;
  uint64_t v68;
  __int128 *v69;
  __int128 *v70;
  uint64_t v71;
  id v72;

  v5 = (unint64_t)a1;
  v67 = *a1;
  v6 = (__int128 *)*((_QWORD *)a1 + 3);
  v30 = (void **)a1 + 3;
  v68 = *((_QWORD *)a1 + 2);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v69, v6, *((__int128 **)a1 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a1 + 4) - (_QWORD)v6) >> 3));
  location = (id *)(v5 + 48);
  v72 = *(id *)(v5 + 48);
  v31 = v5;
  do
  {
    v63 = *(_OWORD *)(v5 + 56);
    v7 = *(__int128 **)(v5 + 80);
    v64 = *(_QWORD *)(v5 + 72);
    memset(v65, 0, sizeof(v65));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v65, v7, *(__int128 **)(v5 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v5 + 88) - (_QWORD)v7) >> 3));
    v66 = *(id *)(v5 + 104);
    v60 = v67;
    v61 = v68;
    memset(v62, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v62, v69, v70, 0x6DB6DB6DB6DB6DB7 * (((char *)v70 - (char *)v69) >> 3));
    v5 += 56;
    v62[3] = v72;
    v8 = *(float *)(((unint64_t)&v63 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
    v9 = *(float *)(((unint64_t)&v60 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v62);

    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v65);
  }
  while (v8 > v9);
  if (v5 - 56 == v31)
  {
    do
    {
      if (v5 >= (unint64_t)a2)
        break;
      v56 = *(__int128 *)((char *)a2 - 56);
      v13 = (__int128 *)*((_QWORD *)a2 - 4);
      v57 = *((_QWORD *)a2 - 5);
      memset(v58, 0, sizeof(v58));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v58, v13, *((__int128 **)a2 - 3), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 - 3) - (_QWORD)v13) >> 3));
      v59 = *((id *)a2 - 1);
      v53 = v67;
      v54 = v68;
      memset(v55, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v55, v69, v70, 0x6DB6DB6DB6DB6DB7 * (((char *)v70 - (char *)v69) >> 3));
      a2 = (__int128 *)((char *)a2 - 56);
      v55[3] = v72;
      v14 = *(float *)(((unint64_t)&v56 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
      v15 = *(float *)(((unint64_t)&v53 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v55);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v58);
    }
    while (v14 <= v15);
  }
  else
  {
    do
    {
      v49 = *(__int128 *)((char *)a2 - 56);
      v10 = (__int128 *)*((_QWORD *)a2 - 4);
      v50 = *((_QWORD *)a2 - 5);
      memset(v51, 0, sizeof(v51));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v51, v10, *((__int128 **)a2 - 3), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 - 3) - (_QWORD)v10) >> 3));
      v52 = *((id *)a2 - 1);
      v46 = v67;
      v47 = v68;
      memset(v48, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v48, v69, v70, 0x6DB6DB6DB6DB6DB7 * (((char *)v70 - (char *)v69) >> 3));
      a2 = (__int128 *)((char *)a2 - 56);
      v48[3] = v72;
      v11 = *(float *)(((unint64_t)&v49 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
      v12 = *(float *)(((unint64_t)&v46 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v48);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v51);
    }
    while (v11 <= v12);
  }
  if (v5 >= (unint64_t)a2)
  {
    v16 = v5;
    v24 = v5 - 56;
    v25 = v31;
    if (v5 - 56 == v31)
      goto LABEL_18;
  }
  else
  {
    v16 = v5;
    v17 = a2;
    do
    {
      _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)v16, v17);
      do
      {
        v18 = *(_OWORD *)(v16 + 56);
        v43 = *(_QWORD *)(v16 + 72);
        v42 = v18;
        memset(v44, 0, sizeof(v44));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v44, *(__int128 **)(v16 + 80), *(__int128 **)(v16 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v16 + 88) - *(_QWORD *)(v16 + 80)) >> 3));
        v45 = *(id *)(v16 + 104);
        v39 = v67;
        v40 = v68;
        memset(v41, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v41, v69, v70, 0x6DB6DB6DB6DB6DB7 * (((char *)v70 - (char *)v69) >> 3));
        v16 += 56;
        v41[3] = v72;
        v19 = *(float *)(((unint64_t)&v42 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
        v20 = *(float *)(((unint64_t)&v39 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v41);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v44);
      }
      while (v19 > v20);
      do
      {
        v21 = *(__int128 *)((char *)v17 - 56);
        v36 = *((_QWORD *)v17 - 5);
        v35 = v21;
        memset(v37, 0, sizeof(v37));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v37, *((__int128 **)v17 - 4), *((__int128 **)v17 - 3), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v17 - 3) - *((_QWORD *)v17 - 4)) >> 3));
        v38 = *((id *)v17 - 1);
        v32 = v67;
        v33 = v68;
        memset(v34, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v34, v69, v70, 0x6DB6DB6DB6DB6DB7 * (((char *)v70 - (char *)v69) >> 3));
        v17 = (__int128 *)((char *)v17 - 56);
        v34[3] = v72;
        v22 = *(float *)(((unint64_t)&v35 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
        v23 = *(float *)(((unint64_t)&v32 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v34);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v37);
      }
      while (v22 <= v23);
    }
    while (v16 < (unint64_t)v17);
    v24 = v16 - 56;
    v25 = v31;
    if (v16 - 56 == v31)
      goto LABEL_18;
  }
  v26 = *(_OWORD *)v24;
  *(_QWORD *)(v25 + 16) = *(_QWORD *)(v24 + 16);
  *(_OWORD *)v25 = v26;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v30, *(_QWORD *)(v16 - 32), *(_QWORD *)(v16 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v16 - 24) - *(_QWORD *)(v16 - 32)) >> 3));
  objc_storeStrong(location, *(id *)(v16 - 8));
LABEL_18:
  v27 = v67;
  *(_QWORD *)(v24 + 16) = v68;
  *(_OWORD *)v24 = v27;
  if ((__int128 *)v24 != &v67)
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)(v16 - 32), (uint64_t)v69, (uint64_t)v70, 0x6DB6DB6DB6DB6DB7 * (((char *)v70 - (char *)v69) >> 3));
  objc_storeStrong((id *)(v16 - 8), v72);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v69);
  return v24;
}

void sub_227B610DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a11);
  _Unwind_Resume(a1);
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEbT1_SC_T0_(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  _BOOL8 result;
  __int128 *v7;
  __int128 *v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  float v16;
  float v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v28;
  uint64_t v29;
  void *v30[5];
  __int128 v31;
  uint64_t v32;
  void *v33[3];
  id v34;
  __int128 v35;
  uint64_t v36;
  __int128 *v37;
  __int128 *v38;
  uint64_t v39;
  id obj;
  __int128 v41;
  uint64_t v42;
  void *v43[5];
  __int128 v44;
  uint64_t v45;
  void *v46[3];
  id v47;
  __int128 v48;
  uint64_t v49;
  void *v50[5];
  __int128 v51;
  uint64_t v52;
  void *v53[3];
  id v54;

  v3 = a2;
  v5 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v51 = *(_OWORD *)(a2 - 56);
      v7 = *(__int128 **)(a2 - 32);
      v52 = *(_QWORD *)(v3 - 40);
      memset(v53, 0, sizeof(v53));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v53, v7, *(__int128 **)(v3 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v3 - 24) - (_QWORD)v7) >> 3));
      v54 = *(id *)(v3 - 8);
      v48 = *(_OWORD *)a1;
      v8 = *(__int128 **)(a1 + 24);
      v49 = *(_QWORD *)(a1 + 16);
      memset(v50, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v50, v8, *(__int128 **)(a1 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v8) >> 3));
      v50[3] = *(void **)(a1 + 48);
      v9 = *(float *)(((unint64_t)&v51 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
      v10 = *(float *)(((unint64_t)&v48 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v50);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v53);
      if (v9 > v10)
        _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a1, (__int128 *)(v3 - 56));
      return 1;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEjT1_SC_SC_T0_(a1, a1 + 56, a2 - 56, a3);
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEvT1_SC_SC_SC_T0_(a1, a1 + 56, a1 + 112, a2 - 56, a3);
      return 1;
    case 5:
      _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEvT1_SC_SC_SC_SC_T0_(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56, a3);
      return 1;
    default:
      v11 = a1 + 112;
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEjT1_SC_SC_T0_(a1, a1 + 56, a1 + 112, a3);
      v12 = a1 + 168;
      if (a1 + 168 == v3)
        return 1;
      v13 = 0;
      v26 = 0;
      v25 = v3;
      break;
  }
  do
  {
    v44 = *(_OWORD *)v12;
    v14 = *(__int128 **)(v12 + 24);
    v45 = *(_QWORD *)(v12 + 16);
    memset(v46, 0, sizeof(v46));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v46, v14, *(__int128 **)(v12 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v12 + 32) - (_QWORD)v14) >> 3));
    v47 = *(id *)(v12 + 48);
    v15 = *(_QWORD *)(v11 + 16);
    v41 = *(_OWORD *)v11;
    v42 = v15;
    memset(v43, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v43, *(__int128 **)(v11 + 24), *(__int128 **)(v11 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24)) >> 3));
    v43[3] = *(void **)(v11 + 48);
    v16 = *(float *)(((unint64_t)&v44 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
    v17 = *(float *)(((unint64_t)&v41 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v43);

    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v46);
    if (v16 > v17)
    {
      v35 = *(_OWORD *)v12;
      v18 = *(__int128 **)(v12 + 24);
      v36 = *(_QWORD *)(v12 + 16);
      v38 = 0;
      v39 = 0;
      v37 = 0;
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v37, v18, *(__int128 **)(v12 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v12 + 32) - (_QWORD)v18) >> 3));
      obj = *(id *)(v12 + 48);
      v19 = v13;
      while (1)
      {
        v20 = a1 + v19;
        *(_OWORD *)(v20 + 168) = *(_OWORD *)(a1 + v19 + 112);
        *(_QWORD *)(v20 + 184) = *(_QWORD *)(a1 + v19 + 128);
        if (a1 + v19 + 112 != a1 + v19 + 168)
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)(v20 + 192), *(_QWORD *)(v20 + 136), *(_QWORD *)(v20 + 144), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v20 + 144) - *(_QWORD *)(v20 + 136)) >> 3));
        objc_storeStrong((id *)(v20 + 216), *(id *)(v20 + 160));
        if (v19 == -112)
          break;
        v31 = v35;
        v32 = v36;
        memset(v33, 0, sizeof(v33));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v33, v37, v38, 0x6DB6DB6DB6DB6DB7 * (((char *)v38 - (char *)v37) >> 3));
        v34 = obj;
        v28 = *(_OWORD *)(a1 + v19 + 56);
        v21 = *(__int128 **)(a1 + v19 + 80);
        v29 = *(_QWORD *)(a1 + v19 + 72);
        memset(v30, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v30, v21, *(__int128 **)(a1 + v19 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + v19 + 88) - (_QWORD)v21) >> 3));
        v30[3] = *(void **)(a1 + v19 + 104);
        v22 = *(float *)(((unint64_t)&v31 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
        v23 = *(float *)(((unint64_t)&v28 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v30);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v33);
        v19 -= 56;
        if (v22 <= v23)
        {
          v24 = a1 + v19 + 168;
          goto LABEL_16;
        }
      }
      v24 = a1;
LABEL_16:
      *(_OWORD *)v24 = v35;
      *(_QWORD *)(v24 + 16) = v36;
      v3 = v25;
      if ((__int128 *)v24 != &v35)
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)(v24 + 24), (uint64_t)v37, (uint64_t)v38, 0x6DB6DB6DB6DB6DB7 * (((char *)v38 - (char *)v37) >> 3));
      objc_storeStrong((id *)(v24 + 48), obj);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v37);
      if (++v26 == 8)
        return v12 + 56 == v25;
    }
    v11 = v12;
    v13 += 56;
    v12 += 56;
  }
  while (v12 != v3);
  return 1;
}

void sub_227B61688(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v1);
  _Unwind_Resume(a1);
}

void sub_227B616A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a12);
  _Unwind_Resume(a1);
}

void **_ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEvT1_SC_SC_SC_T0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  __int128 *v9;
  __int128 *v10;
  float v11;
  float v12;
  void **result;
  __int128 *v14;
  __int128 *v15;
  float v16;
  float v17;
  __int128 *v18;
  __int128 *v19;
  float v20;
  float v21;
  __int128 v23;
  uint64_t v24;
  void *v25[5];
  __int128 v26;
  uint64_t v27;
  void *v28[3];
  id v29;
  __int128 v30;
  uint64_t v31;
  void *v32[5];
  __int128 v33;
  uint64_t v34;
  void *v35[3];
  id v36;
  __int128 v37;
  uint64_t v38;
  void *v39[5];
  __int128 v40;
  uint64_t v41;
  void *v42[3];
  id v43;

  _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEjT1_SC_SC_T0_(a1, a2, a3, a5);
  v40 = *(_OWORD *)a4;
  v9 = *(__int128 **)(a4 + 24);
  v41 = *(_QWORD *)(a4 + 16);
  memset(v42, 0, sizeof(v42));
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v42, v9, *(__int128 **)(a4 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a4 + 32) - (_QWORD)v9) >> 3));
  v43 = *(id *)(a4 + 48);
  v37 = *(_OWORD *)a3;
  v10 = *(__int128 **)(a3 + 24);
  v38 = *(_QWORD *)(a3 + 16);
  memset(v39, 0, 24);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v39, v10, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v10) >> 3));
  v39[3] = *(void **)(a3 + 48);
  v11 = *(float *)(((unint64_t)&v40 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a5 & 1))) + 0x10);
  v12 = *(float *)(((unint64_t)&v37 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a5 & 1))) + 0x10);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v39);

  result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v42);
  if (v11 > v12)
  {
    _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a3, (__int128 *)a4);
    v33 = *(_OWORD *)a3;
    v14 = *(__int128 **)(a3 + 24);
    v34 = *(_QWORD *)(a3 + 16);
    memset(v35, 0, sizeof(v35));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v35, v14, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v14) >> 3));
    v36 = *(id *)(a3 + 48);
    v30 = *(_OWORD *)a2;
    v15 = *(__int128 **)(a2 + 24);
    v31 = *(_QWORD *)(a2 + 16);
    memset(v32, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v32, v15, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v15) >> 3));
    v32[3] = *(void **)(a2 + 48);
    v16 = *(float *)(((unint64_t)&v33 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a5 & 1))) + 0x10);
    v17 = *(float *)(((unint64_t)&v30 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a5 & 1))) + 0x10);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v32);

    result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v35);
    if (v16 > v17)
    {
      _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a2, (__int128 *)a3);
      v26 = *(_OWORD *)a2;
      v18 = *(__int128 **)(a2 + 24);
      v27 = *(_QWORD *)(a2 + 16);
      memset(v28, 0, sizeof(v28));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v28, v18, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v18) >> 3));
      v29 = *(id *)(a2 + 48);
      v23 = *(_OWORD *)a1;
      v19 = *(__int128 **)(a1 + 24);
      v24 = *(_QWORD *)(a1 + 16);
      memset(v25, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v25, v19, *(__int128 **)(a1 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v19) >> 3));
      v25[3] = *(void **)(a1 + 48);
      v20 = *(float *)(((unint64_t)&v26 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a5 & 1))) + 0x10);
      v21 = *(float *)(((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a5 & 1))) + 0x10);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v25);

      result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v28);
      if (v20 > v21)
        return _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a1, (__int128 *)a2);
    }
  }
  return result;
}

void sub_227B619C4(_Unwind_Exception *a1)
{
  void **v1;
  id *v2;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v1);
  _Unwind_Resume(a1);
}

void **_ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEvT1_SC_SC_SC_SC_T0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  __int128 *v10;
  __int128 *v11;
  float v12;
  float v13;
  void **result;
  __int128 *v15;
  __int128 *v16;
  float v17;
  float v18;
  __int128 *v19;
  __int128 *v20;
  float v21;
  float v22;
  __int128 *v23;
  __int128 *v24;
  float v25;
  float v26;
  __int128 v29;
  uint64_t v30;
  void *v31[5];
  __int128 v32;
  uint64_t v33;
  void *v34[3];
  id v35;
  __int128 v36;
  uint64_t v37;
  void *v38[5];
  __int128 v39;
  uint64_t v40;
  void *v41[3];
  id v42;
  __int128 v43;
  uint64_t v44;
  void *v45[5];
  __int128 v46;
  uint64_t v47;
  void *v48[3];
  id v49;
  __int128 v50;
  uint64_t v51;
  void *v52[5];
  __int128 v53;
  uint64_t v54;
  void *v55[3];
  id v56;

  _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEvT1_SC_SC_SC_T0_(a1, a2, a3, a4, a6);
  v53 = *(_OWORD *)a5;
  v10 = *(__int128 **)(a5 + 24);
  v54 = *(_QWORD *)(a5 + 16);
  memset(v55, 0, sizeof(v55));
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v55, v10, *(__int128 **)(a5 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a5 + 32) - (_QWORD)v10) >> 3));
  v56 = *(id *)(a5 + 48);
  v50 = *(_OWORD *)a4;
  v11 = *(__int128 **)(a4 + 24);
  v51 = *(_QWORD *)(a4 + 16);
  memset(v52, 0, 24);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v52, v11, *(__int128 **)(a4 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a4 + 32) - (_QWORD)v11) >> 3));
  v52[3] = *(void **)(a4 + 48);
  v12 = *(float *)(((unint64_t)&v53 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 0x10);
  v13 = *(float *)(((unint64_t)&v50 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 0x10);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v52);

  result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v55);
  if (v12 > v13)
  {
    _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a4, (__int128 *)a5);
    v46 = *(_OWORD *)a4;
    v15 = *(__int128 **)(a4 + 24);
    v47 = *(_QWORD *)(a4 + 16);
    memset(v48, 0, sizeof(v48));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v48, v15, *(__int128 **)(a4 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a4 + 32) - (_QWORD)v15) >> 3));
    v49 = *(id *)(a4 + 48);
    v43 = *(_OWORD *)a3;
    v16 = *(__int128 **)(a3 + 24);
    v44 = *(_QWORD *)(a3 + 16);
    memset(v45, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v45, v16, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v16) >> 3));
    v45[3] = *(void **)(a3 + 48);
    v17 = *(float *)(((unint64_t)&v46 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 0x10);
    v18 = *(float *)(((unint64_t)&v43 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 0x10);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v45);

    result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v48);
    if (v17 > v18)
    {
      _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a3, (__int128 *)a4);
      v39 = *(_OWORD *)a3;
      v19 = *(__int128 **)(a3 + 24);
      v40 = *(_QWORD *)(a3 + 16);
      memset(v41, 0, sizeof(v41));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v41, v19, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v19) >> 3));
      v42 = *(id *)(a3 + 48);
      v36 = *(_OWORD *)a2;
      v20 = *(__int128 **)(a2 + 24);
      v37 = *(_QWORD *)(a2 + 16);
      memset(v38, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v38, v20, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v20) >> 3));
      v38[3] = *(void **)(a2 + 48);
      v21 = *(float *)(((unint64_t)&v39 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 0x10);
      v22 = *(float *)(((unint64_t)&v36 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 0x10);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v38);

      result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v41);
      if (v21 > v22)
      {
        _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a2, (__int128 *)a3);
        v32 = *(_OWORD *)a2;
        v23 = *(__int128 **)(a2 + 24);
        v33 = *(_QWORD *)(a2 + 16);
        memset(v34, 0, sizeof(v34));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v34, v23, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v23) >> 3));
        v35 = *(id *)(a2 + 48);
        v29 = *(_OWORD *)a1;
        v24 = *(__int128 **)(a1 + 24);
        v30 = *(_QWORD *)(a1 + 16);
        memset(v31, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v31, v24, *(__int128 **)(a1 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v24) >> 3));
        v31[3] = *(void **)(a1 + 48);
        v25 = *(float *)(((unint64_t)&v32 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 0x10);
        v26 = *(float *)(((unint64_t)&v29 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 0x10);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v31);

        result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v34);
        if (v25 > v26)
          return _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a1, (__int128 *)a2);
      }
    }
  }
  return result;
}

void sub_227B61D84(_Unwind_Exception *a1)
{
  id *v1;
  void **v2;
  id *v3;

  v3 = v1;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v2);
  _Unwind_Resume(a1);
}

void **_ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEvT1_OT0_NS_15iterator_traitsISC_E15difference_typeESC_(void **result, _DWORD *a2, uint64_t a3, char *a4)
{
  unint64_t v4;
  void **v5;
  int64_t v6;
  void **v7;
  void **v8;
  int64_t v9;
  float v10;
  float v11;
  __int128 *v12;
  __int128 *v13;
  float v14;
  float v15;
  __int128 *v16;
  void **v17;
  __int128 v18;
  uint64_t v19;
  void **v20;
  float v21;
  float v22;
  __int128 *v23;
  float v24;
  float v25;
  __int128 v26;
  void **v27;
  int64_t v28;
  __int128 v31;
  void *v32;
  void *v33[5];
  __int128 v34;
  void *v35;
  void *v36[3];
  id v37;
  __int128 v38;
  void *v39;
  void *v40[5];
  __int128 v41;
  void *v42;
  void *v43[3];
  id v44;
  __int128 v45;
  void *v46;
  __int128 *v47;
  __int128 *v48;
  uint64_t v49;
  id obj;
  __int128 v51;
  void *v52;
  void *v53[5];
  __int128 v54;
  void *v55;
  void *v56[3];
  id v57;
  __int128 v58;
  void *v59;
  void *v60[5];
  __int128 v61;
  void *v62;
  void *v63[3];
  id v64;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = (void **)a4;
    v28 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * ((a4 - (char *)result) >> 3))
    {
      v6 = (0xDB6DB6DB6DB6DB6ELL * ((a4 - (char *)result) >> 3)) | 1;
      v7 = &result[2 * ((a4 - (char *)result) >> 3)];
      v8 = v7 + 7;
      v9 = 0xDB6DB6DB6DB6DB6ELL * ((a4 - (char *)result) >> 3) + 2;
      v27 = result;
      if (v9 < a3)
      {
        v61 = *(_OWORD *)v8;
        v62 = v7[9];
        memset(v63, 0, sizeof(v63));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v63, (__int128 *)v7[10], (__int128 *)v7[11], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v7[11] - (_BYTE *)v7[10]) >> 3));
        v64 = v7[13];
        v58 = *((_OWORD *)v7 + 7);
        v59 = v7[16];
        memset(v60, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v60, (__int128 *)v7[17], (__int128 *)v7[18], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v7[18] - (_BYTE *)v7[17]) >> 3));
        v60[3] = v7[20];
        v10 = *(float *)(((unint64_t)&v61 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 0x10);
        v11 = *(float *)(((unint64_t)&v58 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 0x10);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v60);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v63);
        if (v10 > v11)
        {
          v8 = v7 + 14;
          v6 = v9;
        }
      }
      v54 = *(_OWORD *)v8;
      v12 = (__int128 *)v8[3];
      v55 = v8[2];
      memset(v56, 0, sizeof(v56));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v56, v12, (__int128 *)v8[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v8[4] - (_BYTE *)v12) >> 3));
      v57 = v8[6];
      v51 = *(_OWORD *)v5;
      v13 = (__int128 *)v5[3];
      v52 = v5[2];
      memset(v53, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v53, v13, (__int128 *)v5[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v5[4] - (_BYTE *)v13) >> 3));
      v53[3] = v5[6];
      v14 = *(float *)(((unint64_t)&v54 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 0x10);
      v15 = *(float *)(((unint64_t)&v51 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 0x10);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v53);

      result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v56);
      if (v14 <= v15)
      {
        v45 = *(_OWORD *)v5;
        v16 = (__int128 *)v5[3];
        v46 = v5[2];
        v47 = 0;
        v48 = 0;
        v49 = 0;
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v47, v16, (__int128 *)v5[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v5[4] - (_BYTE *)v16) >> 3));
        obj = v5[6];
        do
        {
          v17 = v8;
          v18 = *(_OWORD *)v8;
          v5[2] = v8[2];
          *(_OWORD *)v5 = v18;
          if (v5 != v8)
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v5 + 3, (uint64_t)v8[3], (uint64_t)v8[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v8[4] - (_BYTE *)v8[3]) >> 3));
          objc_storeStrong(v5 + 6, v8[6]);
          if (v28 < v6)
            break;
          v19 = (2 * v6) | 1;
          v20 = &v27[14 * v6];
          v8 = v20 + 7;
          v6 = 2 * v6 + 2;
          if (v6 >= a3)
          {
            v6 = v19;
          }
          else
          {
            v41 = *(_OWORD *)v8;
            v42 = v20[9];
            memset(v43, 0, sizeof(v43));
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v43, (__int128 *)v20[10], (__int128 *)v20[11], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v20[11] - (_BYTE *)v20[10]) >> 3));
            v44 = v20[13];
            v38 = *((_OWORD *)v20 + 7);
            v39 = v20[16];
            memset(v40, 0, 24);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v40, (__int128 *)v20[17], (__int128 *)v20[18], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v20[18] - (_BYTE *)v20[17]) >> 3));
            v40[3] = v20[20];
            v21 = *(float *)(((unint64_t)&v41 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 0x10);
            v22 = *(float *)(((unint64_t)&v38 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 0x10);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v40);

            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v43);
            if (v21 <= v22)
              v6 = v19;
            else
              v8 = v20 + 14;
          }
          v34 = *(_OWORD *)v8;
          v23 = (__int128 *)v8[3];
          v35 = v8[2];
          memset(v36, 0, sizeof(v36));
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v36, v23, (__int128 *)v8[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v8[4] - (_BYTE *)v23) >> 3));
          v37 = v8[6];
          v31 = v45;
          v32 = v46;
          memset(v33, 0, 24);
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v33, v47, v48, 0x6DB6DB6DB6DB6DB7 * (((char *)v48 - (char *)v47) >> 3));
          v33[3] = obj;
          v24 = *(float *)(((unint64_t)&v34 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 0x10);
          v25 = *(float *)(((unint64_t)&v31 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 0x10);
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v33);

          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v36);
          v5 = v17;
        }
        while (v24 <= v25);
        v26 = v45;
        v17[2] = v46;
        *(_OWORD *)v17 = v26;
        if (v17 != (void **)&v45)
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v17 + 3, (uint64_t)v47, (uint64_t)v48, 0x6DB6DB6DB6DB6DB7 * (((char *)v48 - (char *)v47) >> 3));
        objc_storeStrong(v17 + 6, obj);

        return _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v47);
      }
    }
  }
  return result;
}

void sub_227B622B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a10);
  _Unwind_Resume(a1);
}

void **_ZNSt3__110__pop_heapB8ne180100INS_17_ClassicAlgPolicyEZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEvT1_SB_RT0_NS_15iterator_traitsISB_E15difference_typeE(void **result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  void **v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  void **v13;
  id *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id obj;

  if (a4 >= 2)
  {
    v7 = result;
    v17 = *(_OWORD *)result;
    v8 = (__int128 *)result[3];
    v18 = result[2];
    v19 = 0;
    v20 = 0;
    v21 = 0;
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v19, v8, (__int128 *)result[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)result[4] - (_BYTE *)v8) >> 3));
    obj = v7[6];
    v9 = _ZNSt3__117__floyd_sift_downB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EET1_SC_OT0_NS_15iterator_traitsISC_E15difference_typeE((__int128 *)v7, a3, a4);
    v10 = v9;
    v11 = a2 - 56;
    if (v9 == (__int128 *)(a2 - 56))
    {
      v16 = v17;
      *((_QWORD *)v9 + 2) = v18;
      *v9 = v16;
      if (v9 != &v17)
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)v9 + 3, v19, v20, 0x6DB6DB6DB6DB6DB7 * ((v20 - v19) >> 3));
      objc_storeStrong((id *)v10 + 6, obj);
    }
    else
    {
      v12 = *(_OWORD *)v11;
      *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 - 40);
      *v9 = v12;
      v13 = (void **)(a2 - 32);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)v9 + 3, *(_QWORD *)(a2 - 32), *(_QWORD *)(a2 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 - 24) - *(_QWORD *)(a2 - 32)) >> 3));
      v15 = *(void **)(a2 - 8);
      v14 = (id *)(a2 - 8);
      objc_storeStrong((id *)v10 + 6, v15);
      *(_OWORD *)v11 = v17;
      *(_QWORD *)(v11 + 16) = v18;
      if ((__int128 *)v11 != &v17)
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v13, v19, v20, 0x6DB6DB6DB6DB6DB7 * ((v20 - v19) >> 3));
      objc_storeStrong(v14, obj);
      _ZNSt3__19__sift_upB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEvT1_SC_OT0_NS_15iterator_traitsISC_E15difference_typeE(v7, (uint64_t)v10 + 56, a3, 0x6DB6DB6DB6DB6DB7 * (((char *)v10 + 56 - (char *)v7) >> 3));
    }

    return _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v19);
  }
  return result;
}

void sub_227B62538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void **v15;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v15);
  _Unwind_Resume(a1);
}

__int128 *_ZNSt3__117__floyd_sift_downB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EET1_SC_OT0_NS_15iterator_traitsISC_E15difference_typeE(__int128 *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  float v14;
  float v15;
  __int128 v16;
  __int128 v19;
  uint64_t v20;
  void *v21[5];
  __int128 v22;
  uint64_t v23;
  void *v24[3];
  id v25;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = (uint64_t)a1 + 56 * v5;
    v9 = (__int128 *)(v8 + 56);
    v10 = 2 * v5;
    v5 = (2 * v5) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      v12 = *v9;
      v23 = *(_QWORD *)(v8 + 72);
      v22 = v12;
      memset(v24, 0, sizeof(v24));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v24, *(__int128 **)(v8 + 80), *(__int128 **)(v8 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v8 + 88) - *(_QWORD *)(v8 + 80)) >> 3));
      v25 = *(id *)(v8 + 104);
      v13 = *(_QWORD *)(v8 + 128);
      v19 = *(_OWORD *)(v8 + 112);
      v20 = v13;
      memset(v21, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v21, *(__int128 **)(v8 + 136), *(__int128 **)(v8 + 144), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v8 + 144) - *(_QWORD *)(v8 + 136)) >> 3));
      v21[3] = *(void **)(v8 + 160);
      v14 = *(float *)(((unint64_t)&v22 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 0x10);
      v15 = *(float *)(((unint64_t)&v19 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 0x10);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v21);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v24);
      if (v14 > v15)
      {
        v9 = (__int128 *)(v8 + 112);
        v5 = v11;
      }
    }
    v16 = *v9;
    *((_QWORD *)a1 + 2) = *((_QWORD *)v9 + 2);
    *a1 = v16;
    if (a1 != v9)
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)a1 + 3, *((_QWORD *)v9 + 3), *((_QWORD *)v9 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v9 + 4) - *((_QWORD *)v9 + 3)) >> 3));
    objc_storeStrong((id *)a1 + 6, *((id *)v9 + 6));
    a1 = v9;
  }
  while (v5 <= v7);
  return v9;
}

void sub_227B62714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void **v25;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v25);
  _Unwind_Resume(a1);
}

void **_ZNSt3__19__sift_upB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E0_PS5_EEvT1_SC_OT0_NS_15iterator_traitsISC_E15difference_typeE(void **result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v4;
  void **v7;
  unint64_t v8;
  void **v9;
  __int128 *v10;
  __int128 *v11;
  float v12;
  float v13;
  void **v14;
  void **v15;
  __int128 v16;
  __int128 *v17;
  float v18;
  float v19;
  __int128 v20;
  void *v21;
  void *v22[5];
  __int128 v23;
  void *v24;
  void *v25[3];
  id v26;
  __int128 v27;
  void *v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  id obj;
  __int128 v33;
  uint64_t v34;
  void *v35[5];
  __int128 v36;
  void *v37;
  void *v38[3];
  id v39;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = result;
    v8 = v4 >> 1;
    v9 = &result[7 * (v4 >> 1)];
    v36 = *(_OWORD *)v9;
    v10 = (__int128 *)v9[3];
    v37 = v9[2];
    memset(v38, 0, sizeof(v38));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v38, v10, (__int128 *)v9[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v9[4] - (_BYTE *)v10) >> 3));
    v39 = v9[6];
    v33 = *(_OWORD *)(a2 - 56);
    v11 = *(__int128 **)(a2 - 32);
    v34 = *(_QWORD *)(a2 - 40);
    memset(v35, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v35, v11, *(__int128 **)(a2 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 - 24) - (_QWORD)v11) >> 3));
    v35[3] = *(void **)(a2 - 8);
    v12 = *(float *)(((unint64_t)&v36 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
    v13 = *(float *)(((unint64_t)&v33 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v35);

    result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v38);
    if (v12 > v13)
    {
      v14 = (void **)(a2 - 56);
      v27 = *(_OWORD *)(a2 - 56);
      v28 = *(void **)(a2 - 40);
      v29 = 0;
      v30 = 0;
      v31 = 0;
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v29, *(__int128 **)(a2 - 32), *(__int128 **)(a2 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 - 24) - *(_QWORD *)(a2 - 32)) >> 3));
      obj = *(id *)(a2 - 8);
      do
      {
        v15 = v9;
        v16 = *(_OWORD *)v9;
        v14[2] = v9[2];
        *(_OWORD *)v14 = v16;
        if (v14 != v9)
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v14 + 3, (uint64_t)v9[3], (uint64_t)v9[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v9[4] - (_BYTE *)v9[3]) >> 3));
        objc_storeStrong(v14 + 6, v9[6]);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = &v7[7 * v8];
        v23 = *(_OWORD *)v9;
        v17 = (__int128 *)v9[3];
        v24 = v9[2];
        memset(v25, 0, sizeof(v25));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v25, v17, (__int128 *)v9[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v9[4] - (_BYTE *)v17) >> 3));
        v26 = v9[6];
        v20 = v27;
        v21 = v28;
        memset(v22, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v22, v29, v30, 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 3));
        v22[3] = obj;
        v18 = *(float *)(((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
        v19 = *(float *)(((unint64_t)&v20 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 0x10);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v22);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v25);
        v14 = v15;
      }
      while (v18 > v19);
      *(_OWORD *)v15 = v27;
      v15[2] = v28;
      if (v15 != (void **)&v27)
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v15 + 3, (uint64_t)v29, (uint64_t)v30, 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 3));
      objc_storeStrong(v15 + 6, obj);

      return _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v29);
    }
  }
  return result;
}

void sub_227B62A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a10);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100INS_11__wrap_iterIPS4_EESB_EEvT_T0_m(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x492492492492493)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    result = operator new(56 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[7 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9 / 8];
        v11 = a2 + v9;
        v12 = *(_OWORD *)(a2 + v9);
        v10[2] = *(_QWORD *)(a2 + v9 + 16);
        *(_OWORD *)v10 = v12;
        v8[v9 / 8 + 3] = 0;
        v10[4] = 0;
        v10[5] = 0;
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v8[v9 / 8 + 3], *(__int128 **)(a2 + v9 + 24), *(__int128 **)(a2 + v9 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + v9 + 32) - *(_QWORD *)(a2 + v9 + 24)) >> 3));
        result = *(id *)(a2 + v9 + 48);
        v10[6] = result;
        v9 += 56;
      }
      while (v11 + 56 != a3);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_227B62B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _ZNSt3__128__exception_guard_exceptionsINS_6vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS5_EEE16__destroy_vectorEED1B8ne180100Ev(&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_Lb0EEEvT1_SC_T0_NS_15iterator_traitsISC_E15difference_typeEb(uint64_t result, void **a2, _DWORD *a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  float v19;
  float v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  __int128 *v34;
  __int128 v35;
  uint64_t v36;
  void *v37[5];
  __int128 v38;
  uint64_t v39;
  void *v40[3];
  id v41;
  __int128 v42;
  uint64_t v43;
  void *v44[5];
  __int128 v45;
  uint64_t v46;
  void *v47[3];
  id v48;

  v8 = result;
LABEL_2:
  v34 = (__int128 *)(a2 - 7);
  v9 = v8;
  while (2)
  {
    v10 = a4 - 1;
LABEL_4:
    v8 = v9;
    a4 = v10;
    v11 = (uint64_t)a2 - v9;
    v12 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v9) >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v24 = (uint64_t)*(a2 - 5);
        v45 = *v34;
        v46 = v24;
        memset(v47, 0, sizeof(v47));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v47, (__int128 *)*(a2 - 4), (__int128 *)*(a2 - 3), 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)*(a2 - 3) - (_BYTE *)*(a2 - 4)) >> 3));
        v48 = *(a2 - 1);
        v25 = *(_QWORD *)(v9 + 16);
        v42 = *(_OWORD *)v9;
        v43 = v25;
        memset(v44, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v44, *(__int128 **)(v9 + 24), *(__int128 **)(v9 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24)) >> 3));
        v44[3] = *(void **)(v9 + 48);
        v26 = *(float *)(((unint64_t)&v45 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        v27 = *(float *)(((unint64_t)&v42 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v44);

        result = (uint64_t)_ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v47);
        if (v26 < v27)
          return (uint64_t)_ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)v9, v34);
        return result;
      case 3uLL:
        return _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEjT1_SC_SC_T0_(v9, v9 + 56, (uint64_t)v34, a3);
      case 4uLL:
        return (uint64_t)_ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEvT1_SC_SC_SC_T0_(v9, v9 + 56, v9 + 112, (uint64_t)v34, a3);
      case 5uLL:
        return (uint64_t)_ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEvT1_SC_SC_SC_SC_T0_(v9, v9 + 56, v9 + 112, v9 + 168, (uint64_t)v34, a3);
      default:
        if (v11 <= 1343)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)_ZNSt3__116__insertion_sortB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEvT1_SC_T0_((void **)v9, a2, a3);
          else
            return (uint64_t)_ZNSt3__126__insertion_sort_unguardedB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEvT1_SC_T0_((void **)v9, a2, a3);
        }
        if (v10 == -1)
        {
          if ((void **)v9 != a2)
          {
            v28 = (v12 - 2) >> 1;
            v29 = v28 + 1;
            v30 = (char *)(v9 + 56 * v28);
            do
            {
              _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEvT1_OT0_NS_15iterator_traitsISC_E15difference_typeESC_((void **)v8, a3, v12, v30);
              v30 -= 56;
              --v29;
            }
            while (v29);
            v31 = v11 / 0x38uLL;
            do
            {
              result = (uint64_t)_ZNSt3__110__pop_heapB8ne180100INS_17_ClassicAlgPolicyEZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEvT1_SB_RT0_NS_15iterator_traitsISB_E15difference_typeE((void **)v8, (uint64_t)a2, a3, v31);
              a2 -= 7;
            }
            while (v31-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = (__int128 *)(v9 + 56 * v13);
        if ((unint64_t)v11 >= 0x1C01)
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEjT1_SC_SC_T0_(v8, v8 + 56 * v13, (uint64_t)v34, a3);
          v15 = v8 + 56 * v13;
          v16 = v15 - 56;
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEjT1_SC_SC_T0_(v8 + 56, v15 - 56, (uint64_t)(a2 - 14), a3);
          v15 += 56;
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEjT1_SC_SC_T0_(v8 + 112, v15, (uint64_t)(a2 - 21), a3);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEjT1_SC_SC_T0_(v16, (uint64_t)v14, v15, a3);
          _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)v8, v14);
          if ((a5 & 1) != 0)
            goto LABEL_13;
LABEL_12:
          v17 = *(_OWORD *)(v8 - 56);
          v39 = *(_QWORD *)(v8 - 40);
          v38 = v17;
          memset(v40, 0, sizeof(v40));
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v40, *(__int128 **)(v8 - 32), *(__int128 **)(v8 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v8 - 24) - *(_QWORD *)(v8 - 32)) >> 3));
          v41 = *(id *)(v8 - 8);
          v18 = *(_QWORD *)(v8 + 16);
          v35 = *(_OWORD *)v8;
          v36 = v18;
          memset(v37, 0, 24);
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v37, *(__int128 **)(v8 + 24), *(__int128 **)(v8 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v8 + 32) - *(_QWORD *)(v8 + 24)) >> 3));
          v37[3] = *(void **)(v8 + 48);
          v19 = *(float *)(((unint64_t)&v38 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
          v20 = *(float *)(((unint64_t)&v35 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v37);

          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v40);
          if (v19 < v20)
            goto LABEL_13;
          result = _ZNSt3__131__partition_with_equals_on_leftB8ne180100INS_17_ClassicAlgPolicyEP12GKCRTreeNodeI8NSObjectDv2_fERZNS5_18SplitReduceOverlapEPS3_RKS4_S9_EUlS5_S5_E1_EET0_SC_SC_T1_((__int128 *)v8, (unint64_t)a2, a3);
          v9 = result;
          a5 = 0;
          continue;
        }
        _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEjT1_SC_SC_T0_(v8 + 56 * v13, v8, (uint64_t)v34, a3);
        if ((a5 & 1) == 0)
          goto LABEL_12;
LABEL_13:
        v21 = _ZNSt3__132__partition_with_equals_on_rightB8ne180100INS_17_ClassicAlgPolicyEP12GKCRTreeNodeI8NSObjectDv2_fERZNS5_18SplitReduceOverlapEPS3_RKS4_S9_EUlS5_S5_E1_EENS_4pairIT0_bEESD_SD_T1_((__int128 *)v8, (__int128 *)a2, a3);
        if ((v22 & 1) == 0)
        {
LABEL_16:
          result = _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_Lb0EEEvT1_SC_T0_NS_15iterator_traitsISC_E15difference_typeEb(v8, v21, a3, a4, a5 & 1);
          a5 = 0;
          v9 = v21 + 56;
          continue;
        }
        v23 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEbT1_SC_T0_(v8, v21, a3);
        v9 = v21 + 56;
        result = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEbT1_SC_T0_(v21 + 56, (uint64_t)a2, a3);
        if (!(_DWORD)result)
        {
          v10 = a4 - 1;
          if (v23)
            goto LABEL_4;
          goto LABEL_16;
        }
        a2 = (void **)v21;
        if (!v23)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_227B630D0(_Unwind_Exception *a1)
{
  void **v1;
  id *v2;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v1);
  _Unwind_Resume(a1);
}

void **_ZNSt3__116__insertion_sortB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEvT1_SC_T0_(void **result, void **a2, _DWORD *a3)
{
  void **v3;
  void **v4;
  uint64_t v6;
  void **v7;
  void **v8;
  void *v9;
  float v10;
  float v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 *v15;
  float v16;
  float v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  void *v22[5];
  __int128 v23;
  void *v24;
  void *v25[3];
  id v26;
  __int128 v27;
  void *v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  id obj;
  __int128 v33;
  void *v34;
  void *v35[5];
  __int128 v36;
  void *v37;
  void *v38[3];
  id v39;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 7;
    if (result + 7 != a2)
    {
      v6 = 0;
      v7 = result;
      do
      {
        v8 = v4;
        v36 = *(_OWORD *)v4;
        v37 = v4[2];
        memset(v38, 0, sizeof(v38));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v38, (__int128 *)v7[10], (__int128 *)v7[11], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v7[11] - (_BYTE *)v7[10]) >> 3));
        v39 = v7[13];
        v9 = v7[2];
        v33 = *(_OWORD *)v7;
        v34 = v9;
        memset(v35, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v35, (__int128 *)v7[3], (__int128 *)v7[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v7[4] - (_BYTE *)v7[3]) >> 3));
        v35[3] = v7[6];
        v10 = *(float *)(((unint64_t)&v36 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        v11 = *(float *)(((unint64_t)&v33 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v35);

        result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v38);
        if (v10 < v11)
        {
          v27 = *(_OWORD *)v8;
          v28 = v8[2];
          v30 = 0;
          v31 = 0;
          v29 = 0;
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v29, (__int128 *)v7[10], (__int128 *)v7[11], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v7[11] - (_BYTE *)v7[10]) >> 3));
          obj = v7[13];
          v12 = v6;
          while (1)
          {
            v13 = (char *)v3 + v12;
            *(_OWORD *)(v13 + 56) = *(_OWORD *)((char *)v3 + v12);
            v14 = *(uint64_t *)((char *)v3 + v12 + 24);
            *((_QWORD *)v13 + 9) = *(void **)((char *)v3 + v12 + 16);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)((char *)v3 + v12 + 80), v14, *(uint64_t *)((char *)v3 + v12 + 32), 0x6DB6DB6DB6DB6DB7 * ((*(uint64_t *)((char *)v3 + v12 + 32) - v14) >> 3));
            objc_storeStrong((id *)v13 + 13, *((id *)v13 + 6));
            if (!v12)
              break;
            v23 = v27;
            v24 = v28;
            memset(v25, 0, sizeof(v25));
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v25, v29, v30, 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 3));
            v26 = obj;
            v20 = *(_OWORD *)((char *)v3 + v12 - 56);
            v15 = *(__int128 **)((char *)v3 + v12 - 32);
            v21 = *(uint64_t *)((char *)v3 + v12 - 40);
            memset(v22, 0, 24);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v22, v15, *(__int128 **)((char *)v3 + v12 - 24), 0x6DB6DB6DB6DB6DB7 * ((*(_BYTE **)((char *)v3 + v12 - 24) - (_BYTE *)v15) >> 3));
            v22[3] = *(void **)((char *)v3 + v12 - 8);
            v16 = *(float *)(((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
            v17 = *(float *)(((unint64_t)&v20 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v22);

            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v25);
            v12 -= 56;
            if (v16 >= v17)
            {
              v18 = (uint64_t)v3 + v12 + 56;
              goto LABEL_12;
            }
          }
          v18 = (uint64_t)v3;
LABEL_12:
          *(_OWORD *)v18 = v27;
          *(_QWORD *)(v18 + 16) = v28;
          if ((__int128 *)v18 != &v27)
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)(v18 + 24), (uint64_t)v29, (uint64_t)v30, 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 3));
          objc_storeStrong((id *)(v18 + 48), obj);

          result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v29);
        }
        v4 = v8 + 7;
        v6 += 56;
        v7 = v8;
      }
      while (v8 + 7 != a2);
    }
  }
  return result;
}

void sub_227B63420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a10);
  _Unwind_Resume(a1);
}

void **_ZNSt3__126__insertion_sort_unguardedB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEvT1_SC_T0_(void **result, void **a2, _DWORD *a3)
{
  void **v3;
  void **v4;
  void **v6;
  void **v7;
  void *v8;
  float v9;
  float v10;
  id *v11;
  id *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  float v16;
  float v17;
  id *v18;
  __int128 v20;
  uint64_t v21;
  void *v22[5];
  __int128 v23;
  void *v24;
  void *v25[3];
  id v26;
  __int128 v27;
  void *v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  id obj;
  __int128 v33;
  void *v34;
  void *v35[5];
  __int128 v36;
  void *v37;
  void *v38[3];
  id v39;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 7;
    if (result + 7 != a2)
    {
      v6 = result + 13;
      do
      {
        v7 = v4;
        v36 = *(_OWORD *)v4;
        v37 = v4[2];
        memset(v38, 0, sizeof(v38));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v38, (__int128 *)v3[10], (__int128 *)v3[11], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v3[11] - (_BYTE *)v3[10]) >> 3));
        v39 = v3[13];
        v8 = v3[2];
        v33 = *(_OWORD *)v3;
        v34 = v8;
        memset(v35, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v35, (__int128 *)v3[3], (__int128 *)v3[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v3[4] - (_BYTE *)v3[3]) >> 3));
        v35[3] = v3[6];
        v9 = *(float *)(((unint64_t)&v36 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        v10 = *(float *)(((unint64_t)&v33 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v35);

        result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v38);
        if (v9 < v10)
        {
          v27 = *(_OWORD *)v7;
          v28 = v7[2];
          v30 = 0;
          v31 = 0;
          v29 = 0;
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v29, (__int128 *)v3[10], (__int128 *)v3[11], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v3[11] - (_BYTE *)v3[10]) >> 3));
          obj = v3[13];
          v11 = v6;
          do
          {
            v12 = v11;
            *((_OWORD *)v11 - 3) = *(_OWORD *)(v11 - 13);
            v13 = (uint64_t)*(v11 - 10);
            v14 = (uint64_t)*(v11 - 9);
            *(v11 - 4) = *(v11 - 11);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v11 - 3, v13, v14, 0x6DB6DB6DB6DB6DB7 * ((v14 - v13) >> 3));
            objc_storeStrong(v12, *(v12 - 7));
            v23 = v27;
            v24 = v28;
            memset(v25, 0, sizeof(v25));
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v25, v29, v30, 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 3));
            v26 = obj;
            v20 = *((_OWORD *)v12 - 10);
            v15 = (__int128 *)*(v12 - 17);
            v21 = (uint64_t)*(v12 - 18);
            memset(v22, 0, 24);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v22, v15, (__int128 *)*(v12 - 16), 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)*(v12 - 16) - (_BYTE *)v15) >> 3));
            v22[3] = *(v12 - 14);
            v16 = *(float *)(((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
            v17 = *(float *)(((unint64_t)&v20 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v22);

            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v25);
            v11 = v12 - 7;
          }
          while (v16 < v17);
          *(_OWORD *)(v12 - 13) = v27;
          v18 = v12 - 13;
          v18[2] = v28;
          if (v18 != (id *)&v27)
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v18 + 3, (uint64_t)v29, (uint64_t)v30, 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 3));
          objc_storeStrong(v18 + 6, obj);

          result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v29);
        }
        v4 = v7 + 7;
        v6 += 7;
        v3 = v7;
      }
      while (v7 + 7 != a2);
    }
  }
  return result;
}

void sub_227B63780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  void **v33;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v33);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEjT1_SC_SC_T0_(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  float v11;
  float v12;
  __int128 *v13;
  __int128 *v14;
  float v15;
  float v16;
  __int128 *v17;
  __int128 *v18;
  float v19;
  float v20;
  __int128 *v21;
  __int128 *v22;
  float v23;
  float v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  __int128 *v28;
  float v29;
  float v30;
  __int128 v32;
  uint64_t v33;
  void *v34[5];
  __int128 v35;
  uint64_t v36;
  void *v37[3];
  id v38;
  __int128 v39;
  uint64_t v40;
  void *v41[5];
  __int128 v42;
  uint64_t v43;
  void *v44[3];
  id v45;
  __int128 v46;
  uint64_t v47;
  void *v48[5];
  __int128 v49;
  uint64_t v50;
  void *v51[3];
  id v52;
  __int128 v53;
  uint64_t v54;
  void *v55[5];
  __int128 v56;
  uint64_t v57;
  void *v58[3];
  id v59;
  __int128 v60;
  uint64_t v61;
  void *v62[5];
  __int128 v63;
  uint64_t v64;
  void *v65[3];
  id v66;

  v63 = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  v8 = *(__int128 **)(a2 + 24);
  v64 = v9;
  memset(v65, 0, sizeof(v65));
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v65, v8, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v8) >> 3));
  v66 = *(id *)(a2 + 48);
  v60 = *(_OWORD *)a1;
  v10 = *(__int128 **)(a1 + 24);
  v61 = *(_QWORD *)(a1 + 16);
  memset(v62, 0, 24);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v62, v10, *(__int128 **)(a1 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v10) >> 3));
  v62[3] = *(void **)(a1 + 48);
  v11 = *(float *)(((unint64_t)&v63 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
  v12 = *(float *)(((unint64_t)&v60 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v62);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v65);
  if (v11 < v12)
  {
    v42 = *(_OWORD *)a3;
    v13 = *(__int128 **)(a3 + 24);
    v43 = *(_QWORD *)(a3 + 16);
    memset(v44, 0, sizeof(v44));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v44, v13, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v13) >> 3));
    v45 = *(id *)(a3 + 48);
    v39 = *(_OWORD *)a2;
    v14 = *(__int128 **)(a2 + 24);
    v40 = *(_QWORD *)(a2 + 16);
    memset(v41, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v41, v14, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v14) >> 3));
    v41[3] = *(void **)(a2 + 48);
    v15 = *(float *)(((unint64_t)&v42 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
    v16 = *(float *)(((unint64_t)&v39 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v41);

    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v44);
    if (v15 < v16)
    {
      _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a1, (__int128 *)a3);
      return 1;
    }
    _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a1, (__int128 *)a2);
    v35 = *(_OWORD *)a3;
    v27 = *(__int128 **)(a3 + 24);
    v36 = *(_QWORD *)(a3 + 16);
    memset(v37, 0, sizeof(v37));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v37, v27, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v27) >> 3));
    v38 = *(id *)(a3 + 48);
    v32 = *(_OWORD *)a2;
    v28 = *(__int128 **)(a2 + 24);
    v33 = *(_QWORD *)(a2 + 16);
    memset(v34, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v34, v28, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v28) >> 3));
    v34[3] = *(void **)(a2 + 48);
    v29 = *(float *)(((unint64_t)&v35 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
    v30 = *(float *)(((unint64_t)&v32 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v34);

    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v37);
    if (v29 >= v30)
      return 1;
    v25 = (__int128 *)a2;
    v26 = (__int128 *)a3;
LABEL_9:
    _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_(v25, v26);
    return 2;
  }
  v56 = *(_OWORD *)a3;
  v17 = *(__int128 **)(a3 + 24);
  v57 = *(_QWORD *)(a3 + 16);
  memset(v58, 0, sizeof(v58));
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v58, v17, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v17) >> 3));
  v59 = *(id *)(a3 + 48);
  v53 = *(_OWORD *)a2;
  v18 = *(__int128 **)(a2 + 24);
  v54 = *(_QWORD *)(a2 + 16);
  memset(v55, 0, 24);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v55, v18, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v18) >> 3));
  v55[3] = *(void **)(a2 + 48);
  v19 = *(float *)(((unint64_t)&v56 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
  v20 = *(float *)(((unint64_t)&v53 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v55);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v58);
  if (v19 < v20)
  {
    _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a2, (__int128 *)a3);
    v49 = *(_OWORD *)a2;
    v21 = *(__int128 **)(a2 + 24);
    v50 = *(_QWORD *)(a2 + 16);
    memset(v51, 0, sizeof(v51));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v51, v21, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v21) >> 3));
    v52 = *(id *)(a2 + 48);
    v46 = *(_OWORD *)a1;
    v22 = *(__int128 **)(a1 + 24);
    v47 = *(_QWORD *)(a1 + 16);
    memset(v48, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v48, v22, *(__int128 **)(a1 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v22) >> 3));
    v48[3] = *(void **)(a1 + 48);
    v23 = *(float *)(((unint64_t)&v49 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
    v24 = *(float *)(((unint64_t)&v46 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a4 & 1))) + 8);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v48);

    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v51);
    if (v23 >= v24)
      return 1;
    v25 = (__int128 *)a1;
    v26 = (__int128 *)a2;
    goto LABEL_9;
  }
  return 0;
}

void sub_227B63C44(_Unwind_Exception *a1)
{
  void **v1;
  id *v2;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v1);
  _Unwind_Resume(a1);
}

unint64_t _ZNSt3__131__partition_with_equals_on_leftB8ne180100INS_17_ClassicAlgPolicyEP12GKCRTreeNodeI8NSObjectDv2_fERZNS5_18SplitReduceOverlapEPS3_RKS4_S9_EUlS5_S5_E1_EET0_SC_SC_T1_(__int128 *a1, unint64_t a2, _DWORD *a3)
{
  __int128 *v6;
  __int128 *v7;
  float v8;
  float v9;
  __int128 *v10;
  unint64_t v11;
  float v12;
  float v13;
  unint64_t v14;
  __int128 *v15;
  float v16;
  float v17;
  __int128 *v18;
  float v19;
  float v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  __int128 *v25;
  uint64_t v26;
  float v27;
  float v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  void **v33;
  __int128 v34;
  uint64_t v35;
  void *v36[5];
  __int128 v37;
  uint64_t v38;
  void *v39[3];
  id v40;
  __int128 v41;
  uint64_t v42;
  void *v43[5];
  __int128 v44;
  uint64_t v45;
  void *v46[3];
  id v47;
  __int128 v48;
  uint64_t v49;
  void *v50[5];
  __int128 v51;
  uint64_t v52;
  void *v53[3];
  id v54;
  __int128 v55;
  uint64_t v56;
  void *v57[5];
  __int128 v58;
  uint64_t v59;
  void *v60[3];
  id v61;
  __int128 v62;
  uint64_t v63;
  void *v64[5];
  __int128 v65;
  uint64_t v66;
  void *v67[3];
  id v68;
  __int128 v69;
  uint64_t v70;
  void *v71[5];
  __int128 v72;
  uint64_t v73;
  void *v74[3];
  id v75;
  __int128 v76;
  uint64_t v77;
  __int128 *v78;
  __int128 *v79;
  uint64_t v80;
  id v81;

  v76 = *a1;
  v6 = (__int128 *)*((_QWORD *)a1 + 3);
  v33 = (void **)a1 + 3;
  v77 = *((_QWORD *)a1 + 2);
  v78 = 0;
  v79 = 0;
  v80 = 0;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v78, v6, *((__int128 **)a1 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a1 + 4) - (_QWORD)v6) >> 3));
  v81 = *((id *)a1 + 6);
  v72 = v76;
  v73 = v77;
  memset(v74, 0, sizeof(v74));
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v74, v78, v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
  v75 = v81;
  v69 = *(_OWORD *)(a2 - 56);
  v7 = *(__int128 **)(a2 - 32);
  v70 = *(_QWORD *)(a2 - 40);
  memset(v71, 0, 24);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v71, v7, *(__int128 **)(a2 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 - 24) - (_QWORD)v7) >> 3));
  v71[3] = *(void **)(a2 - 8);
  v8 = *(float *)(((unint64_t)&v72 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
  v9 = *(float *)(((unint64_t)&v69 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v71);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v74);
  if (v8 >= v9)
  {
    v14 = (unint64_t)a1 + 56;
    do
    {
      v11 = v14;
      if (v14 >= a2)
        break;
      v58 = v76;
      v59 = v77;
      memset(v60, 0, sizeof(v60));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v60, v78, v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
      v61 = v81;
      v55 = *(_OWORD *)v11;
      v15 = *(__int128 **)(v11 + 24);
      v56 = *(_QWORD *)(v11 + 16);
      memset(v57, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v57, v15, *(__int128 **)(v11 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v11 + 32) - (_QWORD)v15) >> 3));
      v57[3] = *(void **)(v11 + 48);
      v16 = *(float *)(((unint64_t)&v58 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      v17 = *(float *)(((unint64_t)&v55 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v57);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v60);
      v14 = v11 + 56;
    }
    while (v16 >= v17);
  }
  else
  {
    v10 = a1;
    do
    {
      v65 = v76;
      v66 = v77;
      memset(v67, 0, sizeof(v67));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v67, v78, v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
      v11 = (unint64_t)v10 + 56;
      v68 = v81;
      v62 = *(__int128 *)((char *)v10 + 56);
      v63 = *((_QWORD *)v10 + 9);
      memset(v64, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v64, *((__int128 **)v10 + 10), *((__int128 **)v10 + 11), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v10 + 11) - *((_QWORD *)v10 + 10)) >> 3));
      v64[3] = *((void **)v10 + 13);
      v12 = *(float *)(((unint64_t)&v65 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      v13 = *(float *)(((unint64_t)&v62 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v64);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v67);
      v10 = (__int128 *)((char *)v10 + 56);
    }
    while (v12 >= v13);
  }
  if (v11 < a2)
  {
    do
    {
      v51 = v76;
      v52 = v77;
      memset(v53, 0, sizeof(v53));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v53, v78, v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
      v18 = (__int128 *)(a2 - 56);
      v54 = v81;
      v48 = *(_OWORD *)(a2 - 56);
      v49 = *(_QWORD *)(a2 - 40);
      memset(v50, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v50, *(__int128 **)(a2 - 32), *(__int128 **)(a2 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 - 24) - *(_QWORD *)(a2 - 32)) >> 3));
      v50[3] = *(void **)(a2 - 8);
      v19 = *(float *)(((unint64_t)&v51 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      v20 = *(float *)(((unint64_t)&v48 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v50);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v53);
      a2 -= 56;
    }
    while (v19 < v20);
    while (v11 < (unint64_t)v18)
    {
      _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)v11, v18);
      v21 = v11;
      do
      {
        v44 = v76;
        v45 = v77;
        memset(v46, 0, sizeof(v46));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v46, v78, v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
        v11 = v21 + 56;
        v47 = v81;
        v22 = *(_QWORD *)(v21 + 72);
        v41 = *(_OWORD *)(v21 + 56);
        v42 = v22;
        memset(v43, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v43, *(__int128 **)(v21 + 80), *(__int128 **)(v21 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v21 + 88) - *(_QWORD *)(v21 + 80)) >> 3));
        v43[3] = *(void **)(v21 + 104);
        v23 = *(float *)(((unint64_t)&v44 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        v24 = *(float *)(((unint64_t)&v41 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v43);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v46);
        v21 += 56;
      }
      while (v23 >= v24);
      v25 = v18;
      do
      {
        v37 = v76;
        v38 = v77;
        memset(v39, 0, sizeof(v39));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v39, v78, v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
        v18 = (__int128 *)((char *)v25 - 56);
        v40 = v81;
        v26 = *((_QWORD *)v25 - 5);
        v34 = *(__int128 *)((char *)v25 - 56);
        v35 = v26;
        memset(v36, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v36, *((__int128 **)v25 - 4), *((__int128 **)v25 - 3), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v25 - 3) - *((_QWORD *)v25 - 4)) >> 3));
        v36[3] = *((void **)v25 - 1);
        v27 = *(float *)(((unint64_t)&v37 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        v28 = *(float *)(((unint64_t)&v34 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v36);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v39);
        v25 = (__int128 *)((char *)v25 - 56);
      }
      while (v27 < v28);
    }
  }
  v29 = (__int128 *)(v11 - 56);
  if ((__int128 *)(v11 - 56) != a1)
  {
    v30 = *v29;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v11 - 40);
    *a1 = v30;
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v33, *(_QWORD *)(v11 - 32), *(_QWORD *)(v11 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v11 - 24) - *(_QWORD *)(v11 - 32)) >> 3));
    objc_storeStrong((id *)a1 + 6, *(id *)(v11 - 8));
  }
  v31 = v76;
  *(_QWORD *)(v11 - 40) = v77;
  *v29 = v31;
  if (v29 != &v76)
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)(v11 - 32), (uint64_t)v78, (uint64_t)v79, 0x6DB6DB6DB6DB6DB7 * (((char *)v79 - (char *)v78) >> 3));
  objc_storeStrong((id *)(v11 - 8), v81);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v78);
  return v11;
}

void sub_227B642EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  void **v12;
  uint64_t v13;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v12);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a12);
  _Unwind_Resume(a1);
}

unint64_t _ZNSt3__132__partition_with_equals_on_rightB8ne180100INS_17_ClassicAlgPolicyEP12GKCRTreeNodeI8NSObjectDv2_fERZNS5_18SplitReduceOverlapEPS3_RKS4_S9_EUlS5_S5_E1_EENS_4pairIT0_bEESD_SD_T1_(__int128 *a1, __int128 *a2, _DWORD *a3)
{
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  float v8;
  float v9;
  __int128 *v10;
  float v11;
  float v12;
  __int128 *v13;
  float v14;
  float v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  __int128 v21;
  float v22;
  float v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  id *location;
  void **v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  void *v34[5];
  __int128 v35;
  uint64_t v36;
  void *v37[3];
  id v38;
  __int128 v39;
  uint64_t v40;
  void *v41[5];
  __int128 v42;
  uint64_t v43;
  void *v44[3];
  id v45;
  __int128 v46;
  uint64_t v47;
  void *v48[5];
  __int128 v49;
  uint64_t v50;
  void *v51[3];
  id v52;
  __int128 v53;
  uint64_t v54;
  void *v55[5];
  __int128 v56;
  uint64_t v57;
  void *v58[3];
  id v59;
  __int128 v60;
  uint64_t v61;
  void *v62[5];
  __int128 v63;
  uint64_t v64;
  void *v65[3];
  id v66;
  __int128 v67;
  uint64_t v68;
  __int128 *v69;
  __int128 *v70;
  uint64_t v71;
  id v72;

  v5 = (unint64_t)a1;
  v67 = *a1;
  v6 = (__int128 *)*((_QWORD *)a1 + 3);
  v30 = (void **)a1 + 3;
  v68 = *((_QWORD *)a1 + 2);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v69, v6, *((__int128 **)a1 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a1 + 4) - (_QWORD)v6) >> 3));
  location = (id *)(v5 + 48);
  v72 = *(id *)(v5 + 48);
  v31 = v5;
  do
  {
    v63 = *(_OWORD *)(v5 + 56);
    v7 = *(__int128 **)(v5 + 80);
    v64 = *(_QWORD *)(v5 + 72);
    memset(v65, 0, sizeof(v65));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v65, v7, *(__int128 **)(v5 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v5 + 88) - (_QWORD)v7) >> 3));
    v66 = *(id *)(v5 + 104);
    v60 = v67;
    v61 = v68;
    memset(v62, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v62, v69, v70, 0x6DB6DB6DB6DB6DB7 * (((char *)v70 - (char *)v69) >> 3));
    v5 += 56;
    v62[3] = v72;
    v8 = *(float *)(((unint64_t)&v63 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
    v9 = *(float *)(((unint64_t)&v60 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v62);

    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v65);
  }
  while (v8 < v9);
  if (v5 - 56 == v31)
  {
    do
    {
      if (v5 >= (unint64_t)a2)
        break;
      v56 = *(__int128 *)((char *)a2 - 56);
      v13 = (__int128 *)*((_QWORD *)a2 - 4);
      v57 = *((_QWORD *)a2 - 5);
      memset(v58, 0, sizeof(v58));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v58, v13, *((__int128 **)a2 - 3), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 - 3) - (_QWORD)v13) >> 3));
      v59 = *((id *)a2 - 1);
      v53 = v67;
      v54 = v68;
      memset(v55, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v55, v69, v70, 0x6DB6DB6DB6DB6DB7 * (((char *)v70 - (char *)v69) >> 3));
      a2 = (__int128 *)((char *)a2 - 56);
      v55[3] = v72;
      v14 = *(float *)(((unint64_t)&v56 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      v15 = *(float *)(((unint64_t)&v53 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v55);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v58);
    }
    while (v14 >= v15);
  }
  else
  {
    do
    {
      v49 = *(__int128 *)((char *)a2 - 56);
      v10 = (__int128 *)*((_QWORD *)a2 - 4);
      v50 = *((_QWORD *)a2 - 5);
      memset(v51, 0, sizeof(v51));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v51, v10, *((__int128 **)a2 - 3), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 - 3) - (_QWORD)v10) >> 3));
      v52 = *((id *)a2 - 1);
      v46 = v67;
      v47 = v68;
      memset(v48, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v48, v69, v70, 0x6DB6DB6DB6DB6DB7 * (((char *)v70 - (char *)v69) >> 3));
      a2 = (__int128 *)((char *)a2 - 56);
      v48[3] = v72;
      v11 = *(float *)(((unint64_t)&v49 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      v12 = *(float *)(((unint64_t)&v46 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v48);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v51);
    }
    while (v11 >= v12);
  }
  if (v5 >= (unint64_t)a2)
  {
    v16 = v5;
    v24 = v5 - 56;
    v25 = v31;
    if (v5 - 56 == v31)
      goto LABEL_18;
  }
  else
  {
    v16 = v5;
    v17 = a2;
    do
    {
      _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)v16, v17);
      do
      {
        v18 = *(_OWORD *)(v16 + 56);
        v43 = *(_QWORD *)(v16 + 72);
        v42 = v18;
        memset(v44, 0, sizeof(v44));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v44, *(__int128 **)(v16 + 80), *(__int128 **)(v16 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v16 + 88) - *(_QWORD *)(v16 + 80)) >> 3));
        v45 = *(id *)(v16 + 104);
        v39 = v67;
        v40 = v68;
        memset(v41, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v41, v69, v70, 0x6DB6DB6DB6DB6DB7 * (((char *)v70 - (char *)v69) >> 3));
        v16 += 56;
        v41[3] = v72;
        v19 = *(float *)(((unint64_t)&v42 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        v20 = *(float *)(((unint64_t)&v39 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v41);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v44);
      }
      while (v19 < v20);
      do
      {
        v21 = *(__int128 *)((char *)v17 - 56);
        v36 = *((_QWORD *)v17 - 5);
        v35 = v21;
        memset(v37, 0, sizeof(v37));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v37, *((__int128 **)v17 - 4), *((__int128 **)v17 - 3), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v17 - 3) - *((_QWORD *)v17 - 4)) >> 3));
        v38 = *((id *)v17 - 1);
        v32 = v67;
        v33 = v68;
        memset(v34, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v34, v69, v70, 0x6DB6DB6DB6DB6DB7 * (((char *)v70 - (char *)v69) >> 3));
        v17 = (__int128 *)((char *)v17 - 56);
        v34[3] = v72;
        v22 = *(float *)(((unint64_t)&v35 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        v23 = *(float *)(((unint64_t)&v32 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v34);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v37);
      }
      while (v22 >= v23);
    }
    while (v16 < (unint64_t)v17);
    v24 = v16 - 56;
    v25 = v31;
    if (v16 - 56 == v31)
      goto LABEL_18;
  }
  v26 = *(_OWORD *)v24;
  *(_QWORD *)(v25 + 16) = *(_QWORD *)(v24 + 16);
  *(_OWORD *)v25 = v26;
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v30, *(_QWORD *)(v16 - 32), *(_QWORD *)(v16 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v16 - 24) - *(_QWORD *)(v16 - 32)) >> 3));
  objc_storeStrong(location, *(id *)(v16 - 8));
LABEL_18:
  v27 = v67;
  *(_QWORD *)(v24 + 16) = v68;
  *(_OWORD *)v24 = v27;
  if ((__int128 *)v24 != &v67)
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)(v16 - 32), (uint64_t)v69, (uint64_t)v70, 0x6DB6DB6DB6DB6DB7 * (((char *)v70 - (char *)v69) >> 3));
  objc_storeStrong((id *)(v16 - 8), v72);

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v69);
  return v24;
}

void sub_227B64984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a11);
  _Unwind_Resume(a1);
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEbT1_SC_T0_(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v5;
  _BOOL8 result;
  __int128 *v7;
  __int128 *v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  float v16;
  float v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v28;
  uint64_t v29;
  void *v30[5];
  __int128 v31;
  uint64_t v32;
  void *v33[3];
  id v34;
  __int128 v35;
  uint64_t v36;
  __int128 *v37;
  __int128 *v38;
  uint64_t v39;
  id obj;
  __int128 v41;
  uint64_t v42;
  void *v43[5];
  __int128 v44;
  uint64_t v45;
  void *v46[3];
  id v47;
  __int128 v48;
  uint64_t v49;
  void *v50[5];
  __int128 v51;
  uint64_t v52;
  void *v53[3];
  id v54;

  v3 = a2;
  v5 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v51 = *(_OWORD *)(a2 - 56);
      v7 = *(__int128 **)(a2 - 32);
      v52 = *(_QWORD *)(v3 - 40);
      memset(v53, 0, sizeof(v53));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v53, v7, *(__int128 **)(v3 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v3 - 24) - (_QWORD)v7) >> 3));
      v54 = *(id *)(v3 - 8);
      v48 = *(_OWORD *)a1;
      v8 = *(__int128 **)(a1 + 24);
      v49 = *(_QWORD *)(a1 + 16);
      memset(v50, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v50, v8, *(__int128 **)(a1 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v8) >> 3));
      v50[3] = *(void **)(a1 + 48);
      v9 = *(float *)(((unint64_t)&v51 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      v10 = *(float *)(((unint64_t)&v48 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v50);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v53);
      if (v9 < v10)
        _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a1, (__int128 *)(v3 - 56));
      return 1;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEjT1_SC_SC_T0_(a1, a1 + 56, a2 - 56, a3);
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEvT1_SC_SC_SC_T0_(a1, a1 + 56, a1 + 112, a2 - 56, a3);
      return 1;
    case 5:
      _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEvT1_SC_SC_SC_SC_T0_(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56, a3);
      return 1;
    default:
      v11 = a1 + 112;
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEjT1_SC_SC_T0_(a1, a1 + 56, a1 + 112, a3);
      v12 = a1 + 168;
      if (a1 + 168 == v3)
        return 1;
      v13 = 0;
      v26 = 0;
      v25 = v3;
      break;
  }
  do
  {
    v44 = *(_OWORD *)v12;
    v14 = *(__int128 **)(v12 + 24);
    v45 = *(_QWORD *)(v12 + 16);
    memset(v46, 0, sizeof(v46));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v46, v14, *(__int128 **)(v12 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v12 + 32) - (_QWORD)v14) >> 3));
    v47 = *(id *)(v12 + 48);
    v15 = *(_QWORD *)(v11 + 16);
    v41 = *(_OWORD *)v11;
    v42 = v15;
    memset(v43, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v43, *(__int128 **)(v11 + 24), *(__int128 **)(v11 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v11 + 32) - *(_QWORD *)(v11 + 24)) >> 3));
    v43[3] = *(void **)(v11 + 48);
    v16 = *(float *)(((unint64_t)&v44 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
    v17 = *(float *)(((unint64_t)&v41 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v43);

    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v46);
    if (v16 < v17)
    {
      v35 = *(_OWORD *)v12;
      v18 = *(__int128 **)(v12 + 24);
      v36 = *(_QWORD *)(v12 + 16);
      v38 = 0;
      v39 = 0;
      v37 = 0;
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v37, v18, *(__int128 **)(v12 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v12 + 32) - (_QWORD)v18) >> 3));
      obj = *(id *)(v12 + 48);
      v19 = v13;
      while (1)
      {
        v20 = a1 + v19;
        *(_OWORD *)(v20 + 168) = *(_OWORD *)(a1 + v19 + 112);
        *(_QWORD *)(v20 + 184) = *(_QWORD *)(a1 + v19 + 128);
        if (a1 + v19 + 112 != a1 + v19 + 168)
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)(v20 + 192), *(_QWORD *)(v20 + 136), *(_QWORD *)(v20 + 144), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v20 + 144) - *(_QWORD *)(v20 + 136)) >> 3));
        objc_storeStrong((id *)(v20 + 216), *(id *)(v20 + 160));
        if (v19 == -112)
          break;
        v31 = v35;
        v32 = v36;
        memset(v33, 0, sizeof(v33));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v33, v37, v38, 0x6DB6DB6DB6DB6DB7 * (((char *)v38 - (char *)v37) >> 3));
        v34 = obj;
        v28 = *(_OWORD *)(a1 + v19 + 56);
        v21 = *(__int128 **)(a1 + v19 + 80);
        v29 = *(_QWORD *)(a1 + v19 + 72);
        memset(v30, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v30, v21, *(__int128 **)(a1 + v19 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + v19 + 88) - (_QWORD)v21) >> 3));
        v30[3] = *(void **)(a1 + v19 + 104);
        v22 = *(float *)(((unint64_t)&v31 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        v23 = *(float *)(((unint64_t)&v28 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v30);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v33);
        v19 -= 56;
        if (v22 >= v23)
        {
          v24 = a1 + v19 + 168;
          goto LABEL_16;
        }
      }
      v24 = a1;
LABEL_16:
      *(_OWORD *)v24 = v35;
      *(_QWORD *)(v24 + 16) = v36;
      v3 = v25;
      if ((__int128 *)v24 != &v35)
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)(v24 + 24), (uint64_t)v37, (uint64_t)v38, 0x6DB6DB6DB6DB6DB7 * (((char *)v38 - (char *)v37) >> 3));
      objc_storeStrong((id *)(v24 + 48), obj);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v37);
      if (++v26 == 8)
        return v12 + 56 == v25;
    }
    v11 = v12;
    v13 += 56;
    v12 += 56;
  }
  while (v12 != v3);
  return 1;
}

void sub_227B64F30(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v1);
  _Unwind_Resume(a1);
}

void sub_227B64F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a12);
  _Unwind_Resume(a1);
}

void **_ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEvT1_SC_SC_SC_T0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  __int128 *v9;
  __int128 *v10;
  float v11;
  float v12;
  void **result;
  __int128 *v14;
  __int128 *v15;
  float v16;
  float v17;
  __int128 *v18;
  __int128 *v19;
  float v20;
  float v21;
  __int128 v23;
  uint64_t v24;
  void *v25[5];
  __int128 v26;
  uint64_t v27;
  void *v28[3];
  id v29;
  __int128 v30;
  uint64_t v31;
  void *v32[5];
  __int128 v33;
  uint64_t v34;
  void *v35[3];
  id v36;
  __int128 v37;
  uint64_t v38;
  void *v39[5];
  __int128 v40;
  uint64_t v41;
  void *v42[3];
  id v43;

  _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEjT1_SC_SC_T0_(a1, a2, a3, a5);
  v40 = *(_OWORD *)a4;
  v9 = *(__int128 **)(a4 + 24);
  v41 = *(_QWORD *)(a4 + 16);
  memset(v42, 0, sizeof(v42));
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v42, v9, *(__int128 **)(a4 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a4 + 32) - (_QWORD)v9) >> 3));
  v43 = *(id *)(a4 + 48);
  v37 = *(_OWORD *)a3;
  v10 = *(__int128 **)(a3 + 24);
  v38 = *(_QWORD *)(a3 + 16);
  memset(v39, 0, 24);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v39, v10, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v10) >> 3));
  v39[3] = *(void **)(a3 + 48);
  v11 = *(float *)(((unint64_t)&v40 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a5 & 1))) + 8);
  v12 = *(float *)(((unint64_t)&v37 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a5 & 1))) + 8);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v39);

  result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v42);
  if (v11 < v12)
  {
    _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a3, (__int128 *)a4);
    v33 = *(_OWORD *)a3;
    v14 = *(__int128 **)(a3 + 24);
    v34 = *(_QWORD *)(a3 + 16);
    memset(v35, 0, sizeof(v35));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v35, v14, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v14) >> 3));
    v36 = *(id *)(a3 + 48);
    v30 = *(_OWORD *)a2;
    v15 = *(__int128 **)(a2 + 24);
    v31 = *(_QWORD *)(a2 + 16);
    memset(v32, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v32, v15, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v15) >> 3));
    v32[3] = *(void **)(a2 + 48);
    v16 = *(float *)(((unint64_t)&v33 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a5 & 1))) + 8);
    v17 = *(float *)(((unint64_t)&v30 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a5 & 1))) + 8);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v32);

    result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v35);
    if (v16 < v17)
    {
      _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a2, (__int128 *)a3);
      v26 = *(_OWORD *)a2;
      v18 = *(__int128 **)(a2 + 24);
      v27 = *(_QWORD *)(a2 + 16);
      memset(v28, 0, sizeof(v28));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v28, v18, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v18) >> 3));
      v29 = *(id *)(a2 + 48);
      v23 = *(_OWORD *)a1;
      v19 = *(__int128 **)(a1 + 24);
      v24 = *(_QWORD *)(a1 + 16);
      memset(v25, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v25, v19, *(__int128 **)(a1 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v19) >> 3));
      v25[3] = *(void **)(a1 + 48);
      v20 = *(float *)(((unint64_t)&v26 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a5 & 1))) + 8);
      v21 = *(float *)(((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a5 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v25);

      result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v28);
      if (v20 < v21)
        return _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a1, (__int128 *)a2);
    }
  }
  return result;
}

void sub_227B6526C(_Unwind_Exception *a1)
{
  void **v1;
  id *v2;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v1);
  _Unwind_Resume(a1);
}

void **_ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEvT1_SC_SC_SC_SC_T0_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  __int128 *v10;
  __int128 *v11;
  float v12;
  float v13;
  void **result;
  __int128 *v15;
  __int128 *v16;
  float v17;
  float v18;
  __int128 *v19;
  __int128 *v20;
  float v21;
  float v22;
  __int128 *v23;
  __int128 *v24;
  float v25;
  float v26;
  __int128 v29;
  uint64_t v30;
  void *v31[5];
  __int128 v32;
  uint64_t v33;
  void *v34[3];
  id v35;
  __int128 v36;
  uint64_t v37;
  void *v38[5];
  __int128 v39;
  uint64_t v40;
  void *v41[3];
  id v42;
  __int128 v43;
  uint64_t v44;
  void *v45[5];
  __int128 v46;
  uint64_t v47;
  void *v48[3];
  id v49;
  __int128 v50;
  uint64_t v51;
  void *v52[5];
  __int128 v53;
  uint64_t v54;
  void *v55[3];
  id v56;

  _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEvT1_SC_SC_SC_T0_(a1, a2, a3, a4, a6);
  v53 = *(_OWORD *)a5;
  v10 = *(__int128 **)(a5 + 24);
  v54 = *(_QWORD *)(a5 + 16);
  memset(v55, 0, sizeof(v55));
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v55, v10, *(__int128 **)(a5 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a5 + 32) - (_QWORD)v10) >> 3));
  v56 = *(id *)(a5 + 48);
  v50 = *(_OWORD *)a4;
  v11 = *(__int128 **)(a4 + 24);
  v51 = *(_QWORD *)(a4 + 16);
  memset(v52, 0, 24);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v52, v11, *(__int128 **)(a4 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a4 + 32) - (_QWORD)v11) >> 3));
  v52[3] = *(void **)(a4 + 48);
  v12 = *(float *)(((unint64_t)&v53 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 8);
  v13 = *(float *)(((unint64_t)&v50 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 8);
  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v52);

  result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v55);
  if (v12 < v13)
  {
    _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a4, (__int128 *)a5);
    v46 = *(_OWORD *)a4;
    v15 = *(__int128 **)(a4 + 24);
    v47 = *(_QWORD *)(a4 + 16);
    memset(v48, 0, sizeof(v48));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v48, v15, *(__int128 **)(a4 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a4 + 32) - (_QWORD)v15) >> 3));
    v49 = *(id *)(a4 + 48);
    v43 = *(_OWORD *)a3;
    v16 = *(__int128 **)(a3 + 24);
    v44 = *(_QWORD *)(a3 + 16);
    memset(v45, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v45, v16, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v16) >> 3));
    v45[3] = *(void **)(a3 + 48);
    v17 = *(float *)(((unint64_t)&v46 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 8);
    v18 = *(float *)(((unint64_t)&v43 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 8);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v45);

    result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v48);
    if (v17 < v18)
    {
      _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a3, (__int128 *)a4);
      v39 = *(_OWORD *)a3;
      v19 = *(__int128 **)(a3 + 24);
      v40 = *(_QWORD *)(a3 + 16);
      memset(v41, 0, sizeof(v41));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v41, v19, *(__int128 **)(a3 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a3 + 32) - (_QWORD)v19) >> 3));
      v42 = *(id *)(a3 + 48);
      v36 = *(_OWORD *)a2;
      v20 = *(__int128 **)(a2 + 24);
      v37 = *(_QWORD *)(a2 + 16);
      memset(v38, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v38, v20, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v20) >> 3));
      v38[3] = *(void **)(a2 + 48);
      v21 = *(float *)(((unint64_t)&v39 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 8);
      v22 = *(float *)(((unint64_t)&v36 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v38);

      result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v41);
      if (v21 < v22)
      {
        _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a2, (__int128 *)a3);
        v32 = *(_OWORD *)a2;
        v23 = *(__int128 **)(a2 + 24);
        v33 = *(_QWORD *)(a2 + 16);
        memset(v34, 0, sizeof(v34));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v34, v23, *(__int128 **)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v23) >> 3));
        v35 = *(id *)(a2 + 48);
        v29 = *(_OWORD *)a1;
        v24 = *(__int128 **)(a1 + 24);
        v30 = *(_QWORD *)(a1 + 16);
        memset(v31, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v31, v24, *(__int128 **)(a1 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 32) - (_QWORD)v24) >> 3));
        v31[3] = *(void **)(a1 + 48);
        v25 = *(float *)(((unint64_t)&v32 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 8);
        v26 = *(float *)(((unint64_t)&v29 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a6 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v31);

        result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v34);
        if (v25 < v26)
          return _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)a1, (__int128 *)a2);
      }
    }
  }
  return result;
}

void sub_227B6562C(_Unwind_Exception *a1)
{
  id *v1;
  void **v2;
  id *v3;

  v3 = v1;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v2);
  _Unwind_Resume(a1);
}

void **_ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEvT1_OT0_NS_15iterator_traitsISC_E15difference_typeESC_(void **result, _DWORD *a2, uint64_t a3, char *a4)
{
  unint64_t v4;
  void **v5;
  int64_t v6;
  void **v7;
  void **v8;
  int64_t v9;
  float v10;
  float v11;
  __int128 *v12;
  __int128 *v13;
  float v14;
  float v15;
  __int128 *v16;
  void **v17;
  __int128 v18;
  uint64_t v19;
  void **v20;
  float v21;
  float v22;
  __int128 *v23;
  float v24;
  float v25;
  __int128 v26;
  void **v27;
  int64_t v28;
  __int128 v31;
  void *v32;
  void *v33[5];
  __int128 v34;
  void *v35;
  void *v36[3];
  id v37;
  __int128 v38;
  void *v39;
  void *v40[5];
  __int128 v41;
  void *v42;
  void *v43[3];
  id v44;
  __int128 v45;
  void *v46;
  __int128 *v47;
  __int128 *v48;
  uint64_t v49;
  id obj;
  __int128 v51;
  void *v52;
  void *v53[5];
  __int128 v54;
  void *v55;
  void *v56[3];
  id v57;
  __int128 v58;
  void *v59;
  void *v60[5];
  __int128 v61;
  void *v62;
  void *v63[3];
  id v64;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = (void **)a4;
    v28 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * ((a4 - (char *)result) >> 3))
    {
      v6 = (0xDB6DB6DB6DB6DB6ELL * ((a4 - (char *)result) >> 3)) | 1;
      v7 = &result[2 * ((a4 - (char *)result) >> 3)];
      v8 = v7 + 7;
      v9 = 0xDB6DB6DB6DB6DB6ELL * ((a4 - (char *)result) >> 3) + 2;
      v27 = result;
      if (v9 < a3)
      {
        v61 = *(_OWORD *)v8;
        v62 = v7[9];
        memset(v63, 0, sizeof(v63));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v63, (__int128 *)v7[10], (__int128 *)v7[11], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v7[11] - (_BYTE *)v7[10]) >> 3));
        v64 = v7[13];
        v58 = *((_OWORD *)v7 + 7);
        v59 = v7[16];
        memset(v60, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v60, (__int128 *)v7[17], (__int128 *)v7[18], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v7[18] - (_BYTE *)v7[17]) >> 3));
        v60[3] = v7[20];
        v10 = *(float *)(((unint64_t)&v61 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
        v11 = *(float *)(((unint64_t)&v58 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v60);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v63);
        if (v10 < v11)
        {
          v8 = v7 + 14;
          v6 = v9;
        }
      }
      v54 = *(_OWORD *)v8;
      v12 = (__int128 *)v8[3];
      v55 = v8[2];
      memset(v56, 0, sizeof(v56));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v56, v12, (__int128 *)v8[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v8[4] - (_BYTE *)v12) >> 3));
      v57 = v8[6];
      v51 = *(_OWORD *)v5;
      v13 = (__int128 *)v5[3];
      v52 = v5[2];
      memset(v53, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v53, v13, (__int128 *)v5[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v5[4] - (_BYTE *)v13) >> 3));
      v53[3] = v5[6];
      v14 = *(float *)(((unint64_t)&v54 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
      v15 = *(float *)(((unint64_t)&v51 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v53);

      result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v56);
      if (v14 >= v15)
      {
        v45 = *(_OWORD *)v5;
        v16 = (__int128 *)v5[3];
        v46 = v5[2];
        v47 = 0;
        v48 = 0;
        v49 = 0;
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v47, v16, (__int128 *)v5[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v5[4] - (_BYTE *)v16) >> 3));
        obj = v5[6];
        do
        {
          v17 = v8;
          v18 = *(_OWORD *)v8;
          v5[2] = v8[2];
          *(_OWORD *)v5 = v18;
          if (v5 != v8)
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v5 + 3, (uint64_t)v8[3], (uint64_t)v8[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v8[4] - (_BYTE *)v8[3]) >> 3));
          objc_storeStrong(v5 + 6, v8[6]);
          if (v28 < v6)
            break;
          v19 = (2 * v6) | 1;
          v20 = &v27[14 * v6];
          v8 = v20 + 7;
          v6 = 2 * v6 + 2;
          if (v6 >= a3)
          {
            v6 = v19;
          }
          else
          {
            v41 = *(_OWORD *)v8;
            v42 = v20[9];
            memset(v43, 0, sizeof(v43));
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v43, (__int128 *)v20[10], (__int128 *)v20[11], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v20[11] - (_BYTE *)v20[10]) >> 3));
            v44 = v20[13];
            v38 = *((_OWORD *)v20 + 7);
            v39 = v20[16];
            memset(v40, 0, 24);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v40, (__int128 *)v20[17], (__int128 *)v20[18], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v20[18] - (_BYTE *)v20[17]) >> 3));
            v40[3] = v20[20];
            v21 = *(float *)(((unint64_t)&v41 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
            v22 = *(float *)(((unint64_t)&v38 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v40);

            _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v43);
            if (v21 >= v22)
              v6 = v19;
            else
              v8 = v20 + 14;
          }
          v34 = *(_OWORD *)v8;
          v23 = (__int128 *)v8[3];
          v35 = v8[2];
          memset(v36, 0, sizeof(v36));
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v36, v23, (__int128 *)v8[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v8[4] - (_BYTE *)v23) >> 3));
          v37 = v8[6];
          v31 = v45;
          v32 = v46;
          memset(v33, 0, 24);
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v33, v47, v48, 0x6DB6DB6DB6DB6DB7 * (((char *)v48 - (char *)v47) >> 3));
          v33[3] = obj;
          v24 = *(float *)(((unint64_t)&v34 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
          v25 = *(float *)(((unint64_t)&v31 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v33);

          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v36);
          v5 = v17;
        }
        while (v24 >= v25);
        v26 = v45;
        v17[2] = v46;
        *(_OWORD *)v17 = v26;
        if (v17 != (void **)&v45)
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v17 + 3, (uint64_t)v47, (uint64_t)v48, 0x6DB6DB6DB6DB6DB7 * (((char *)v48 - (char *)v47) >> 3));
        objc_storeStrong(v17 + 6, obj);

        return _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v47);
      }
    }
  }
  return result;
}

void sub_227B65B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a10);
  _Unwind_Resume(a1);
}

void **_ZNSt3__110__pop_heapB8ne180100INS_17_ClassicAlgPolicyEZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEvT1_SB_RT0_NS_15iterator_traitsISB_E15difference_typeE(void **result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  void **v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  void **v13;
  id *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id obj;

  if (a4 >= 2)
  {
    v7 = result;
    v17 = *(_OWORD *)result;
    v8 = (__int128 *)result[3];
    v18 = result[2];
    v19 = 0;
    v20 = 0;
    v21 = 0;
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v19, v8, (__int128 *)result[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)result[4] - (_BYTE *)v8) >> 3));
    obj = v7[6];
    v9 = _ZNSt3__117__floyd_sift_downB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EET1_SC_OT0_NS_15iterator_traitsISC_E15difference_typeE((__int128 *)v7, a3, a4);
    v10 = v9;
    v11 = a2 - 56;
    if (v9 == (__int128 *)(a2 - 56))
    {
      v16 = v17;
      *((_QWORD *)v9 + 2) = v18;
      *v9 = v16;
      if (v9 != &v17)
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)v9 + 3, v19, v20, 0x6DB6DB6DB6DB6DB7 * ((v20 - v19) >> 3));
      objc_storeStrong((id *)v10 + 6, obj);
    }
    else
    {
      v12 = *(_OWORD *)v11;
      *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 - 40);
      *v9 = v12;
      v13 = (void **)(a2 - 32);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)v9 + 3, *(_QWORD *)(a2 - 32), *(_QWORD *)(a2 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 - 24) - *(_QWORD *)(a2 - 32)) >> 3));
      v15 = *(void **)(a2 - 8);
      v14 = (id *)(a2 - 8);
      objc_storeStrong((id *)v10 + 6, v15);
      *(_OWORD *)v11 = v17;
      *(_QWORD *)(v11 + 16) = v18;
      if ((__int128 *)v11 != &v17)
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v13, v19, v20, 0x6DB6DB6DB6DB6DB7 * ((v20 - v19) >> 3));
      objc_storeStrong(v14, obj);
      _ZNSt3__19__sift_upB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEvT1_SC_OT0_NS_15iterator_traitsISC_E15difference_typeE(v7, (uint64_t)v10 + 56, a3, 0x6DB6DB6DB6DB6DB7 * (((char *)v10 + 56 - (char *)v7) >> 3));
    }

    return _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v19);
  }
  return result;
}

void sub_227B65DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void **v15;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v15);
  _Unwind_Resume(a1);
}

__int128 *_ZNSt3__117__floyd_sift_downB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EET1_SC_OT0_NS_15iterator_traitsISC_E15difference_typeE(__int128 *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  float v14;
  float v15;
  __int128 v16;
  __int128 v19;
  uint64_t v20;
  void *v21[5];
  __int128 v22;
  uint64_t v23;
  void *v24[3];
  id v25;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = (uint64_t)a1 + 56 * v5;
    v9 = (__int128 *)(v8 + 56);
    v10 = 2 * v5;
    v5 = (2 * v5) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      v12 = *v9;
      v23 = *(_QWORD *)(v8 + 72);
      v22 = v12;
      memset(v24, 0, sizeof(v24));
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v24, *(__int128 **)(v8 + 80), *(__int128 **)(v8 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v8 + 88) - *(_QWORD *)(v8 + 80)) >> 3));
      v25 = *(id *)(v8 + 104);
      v13 = *(_QWORD *)(v8 + 128);
      v19 = *(_OWORD *)(v8 + 112);
      v20 = v13;
      memset(v21, 0, 24);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v21, *(__int128 **)(v8 + 136), *(__int128 **)(v8 + 144), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v8 + 144) - *(_QWORD *)(v8 + 136)) >> 3));
      v21[3] = *(void **)(v8 + 160);
      v14 = *(float *)(((unint64_t)&v22 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
      v15 = *(float *)(((unint64_t)&v19 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a2 & 1))) + 8);
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v21);

      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v24);
      if (v14 < v15)
      {
        v9 = (__int128 *)(v8 + 112);
        v5 = v11;
      }
    }
    v16 = *v9;
    *((_QWORD *)a1 + 2) = *((_QWORD *)v9 + 2);
    *a1 = v16;
    if (a1 != v9)
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l((void **)a1 + 3, *((_QWORD *)v9 + 3), *((_QWORD *)v9 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v9 + 4) - *((_QWORD *)v9 + 3)) >> 3));
    objc_storeStrong((id *)a1 + 6, *((id *)v9 + 6));
    a1 = v9;
  }
  while (v5 <= v7);
  return v9;
}

void sub_227B65FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  void **v25;

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v25);
  _Unwind_Resume(a1);
}

void **_ZNSt3__19__sift_upB8ne180100INS_17_ClassicAlgPolicyERZN12GKCRTreeNodeI8NSObjectDv2_fE18SplitReduceOverlapEPS3_RKS4_S8_EUlS5_S5_E1_PS5_EEvT1_SC_OT0_NS_15iterator_traitsISC_E15difference_typeE(void **result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v4;
  void **v7;
  unint64_t v8;
  void **v9;
  __int128 *v10;
  __int128 *v11;
  float v12;
  float v13;
  void **v14;
  void **v15;
  __int128 v16;
  __int128 *v17;
  float v18;
  float v19;
  __int128 v20;
  void *v21;
  void *v22[5];
  __int128 v23;
  void *v24;
  void *v25[3];
  id v26;
  __int128 v27;
  void *v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  id obj;
  __int128 v33;
  uint64_t v34;
  void *v35[5];
  __int128 v36;
  void *v37;
  void *v38[3];
  id v39;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = result;
    v8 = v4 >> 1;
    v9 = &result[7 * (v4 >> 1)];
    v36 = *(_OWORD *)v9;
    v10 = (__int128 *)v9[3];
    v37 = v9[2];
    memset(v38, 0, sizeof(v38));
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v38, v10, (__int128 *)v9[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v9[4] - (_BYTE *)v10) >> 3));
    v39 = v9[6];
    v33 = *(_OWORD *)(a2 - 56);
    v11 = *(__int128 **)(a2 - 32);
    v34 = *(_QWORD *)(a2 - 40);
    memset(v35, 0, 24);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v35, v11, *(__int128 **)(a2 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 - 24) - (_QWORD)v11) >> 3));
    v35[3] = *(void **)(a2 - 8);
    v12 = *(float *)(((unint64_t)&v36 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
    v13 = *(float *)(((unint64_t)&v33 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
    _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v35);

    result = _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v38);
    if (v12 < v13)
    {
      v14 = (void **)(a2 - 56);
      v27 = *(_OWORD *)(a2 - 56);
      v28 = *(void **)(a2 - 40);
      v29 = 0;
      v30 = 0;
      v31 = 0;
      _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(&v29, *(__int128 **)(a2 - 32), *(__int128 **)(a2 - 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 - 24) - *(_QWORD *)(a2 - 32)) >> 3));
      obj = *(id *)(a2 - 8);
      do
      {
        v15 = v9;
        v16 = *(_OWORD *)v9;
        v14[2] = v9[2];
        *(_OWORD *)v14 = v16;
        if (v14 != v9)
          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v14 + 3, (uint64_t)v9[3], (uint64_t)v9[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v9[4] - (_BYTE *)v9[3]) >> 3));
        objc_storeStrong(v14 + 6, v9[6]);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = &v7[7 * v8];
        v23 = *(_OWORD *)v9;
        v17 = (__int128 *)v9[3];
        v24 = v9[2];
        memset(v25, 0, sizeof(v25));
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v25, v17, (__int128 *)v9[4], 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v9[4] - (_BYTE *)v17) >> 3));
        v26 = v9[6];
        v20 = v27;
        v21 = v28;
        memset(v22, 0, 24);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE16__init_with_sizeB8ne180100IPS4_S9_EEvT_T0_m(v22, v29, v30, 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 3));
        v22[3] = obj;
        v18 = *(float *)(((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        v19 = *(float *)(((unint64_t)&v20 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*a3 & 1))) + 8);
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v22);

        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(v25);
        v14 = v15;
      }
      while (v18 < v19);
      *(_OWORD *)v15 = v27;
      v15[2] = v28;
      if (v15 != (void **)&v27)
        _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE18__assign_with_sizeB8ne180100IPS4_S9_EEvT_T0_l(v15 + 3, (uint64_t)v29, (uint64_t)v30, 0x6DB6DB6DB6DB6DB7 * (((char *)v30 - (char *)v29) >> 3));
      objc_storeStrong(v15 + 6, obj);

      return _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)&v29);
    }
  }
  return result;
}

void sub_227B662CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{

  _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev(a10);
  _Unwind_Resume(a1);
}

void _ZN12GKCRTreeNodeI8NSObjectDv2_fE12RemoveObjectEPS0_S1_S1_(_QWORD *a1, void *a2, double a3, double a4)
{
  id v7;
  void *v8;
  float32x2_t *v9;
  float32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float32x2_t v15;
  float32x2_t v16;
  __int32 v17;
  float32x2_t *v18;
  unint64_t v19;
  float32x2_t v20;
  float v21;
  float32x2_t *v22;
  unint64_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float v26;
  float v27;
  unint64_t v28;
  uint64_t v29;
  float32x2_t v30;
  int32x2_t v31;
  float *v32;
  unint64_t v33;
  float v34;
  float *v35;
  float v36;
  id v37;

  v7 = a2;
  v8 = v7;
  v9 = (float32x2_t *)a1[3];
  v10 = (float32x2_t *)a1[4];
  if (v10 == v9)
  {
    v9 = (float32x2_t *)a1[4];
  }
  else
  {
    v37 = v7;
    v11 = 0;
    if (v9[6])
    {
      v12 = 6;
      do
      {
        if ((void *)v9[v12] == v8)
        {
          _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)&v9[v12 - 6], (__int128 *)&v10[-7]);
          v13 = a1[4];
          v10 = (float32x2_t *)(v13 - 56);

          _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)(v13 - 32));
          a1[4] = v13 - 56;
          v9 = (float32x2_t *)a1[3];
          v8 = v37;
        }
        ++v11;
        v12 += 7;
      }
      while (0x6DB6DB6DB6DB6DB7 * (v10 - v9) > v11);
    }
    else
    {
      v28 = 0;
      do
      {
        v30 = *(float32x2_t *)((char *)v9 + v11 + 8);
        if ((vcgt_f32(v30, *(float32x2_t *)&a3).u8[0] & 1) == 0)
        {
          v31 = vcge_f32(*(float32x2_t *)((char *)v9 + v11 + 16), *(float32x2_t *)&a4);
          if ((v31.i8[0] & 1) != 0 && (vcge_f32(*(float32x2_t *)&a3, v30).i32[1] & 1) != 0 && (v31.i8[4] & 1) != 0)
          {
            _ZN12GKCRTreeNodeI8NSObjectDv2_fE12RemoveObjectEPS0_S1_S1_(a3, a4);
            v9 = (float32x2_t *)a1[3];
            v10 = (float32x2_t *)a1[4];
            if (*(_QWORD *)((char *)&v9[4] + v11) == *(_QWORD *)((char *)&v9[3] + v11))
            {
              _ZNSt3__14swapB8ne180100I12GKCRTreeNodeI8NSObjectDv2_fEEENS_9enable_ifIXaasr21is_move_constructibleIT_EE5valuesr18is_move_assignableIS6_EE5valueEvE4typeERS6_S9_((__int128 *)((char *)v9 + v11), (__int128 *)&v10[-7]);
              v29 = a1[4];
              v10 = (float32x2_t *)(v29 - 56);

              _ZNSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEED1B8ne180100Ev((void **)(v29 - 32));
              a1[4] = v29 - 56;
              v9 = (float32x2_t *)a1[3];
            }
            v8 = v37;
          }
        }
        ++v28;
        v11 += 56;
      }
      while (0x6DB6DB6DB6DB6DB7 * (v10 - v9) > v28);
    }
  }
  v14 = ((char *)v10 - (char *)v9) / 56;
  v16 = (float32x2_t)a1[1];
  v15 = (float32x2_t)a1[2];
  if (v14 <= 1)
    v14 = 1;
  v17 = HIDWORD(a1[2]);
  if ((vceq_f32(v16, *(float32x2_t *)&a3).u32[0] & 1) == 0)
    goto LABEL_16;
  v16 = (float32x2_t)__PAIR64__(v16.u32[1], v15.u32[0]);
  a1[1] = v16;
  if (v10 != v9)
  {
    v18 = v9 + 1;
    v19 = v14;
    do
    {
      v20 = *v18;
      v18 += 7;
      v21 = v20.f32[0];
      if ((vcgt_f32(v16, v20).u8[0] & 1) == 0)
        v21 = v16.f32[0];
      v16.f32[0] = v21;
      a1[1] = v16;
      --v19;
    }
    while (v19);
LABEL_16:
    if ((vceq_f32(v15, *(float32x2_t *)&a4).u8[0] & 1) != 0)
    {
      v15 = (float32x2_t)__PAIR64__(v15.u32[1], v16.u32[0]);
      a1[2] = v15;
      if (v10 != v9)
      {
        v22 = v9 + 2;
        v23 = v14;
        do
        {
          v24 = v15;
          v25 = *v22;
          v22 += 7;
          v26 = v25.f32[0];
          if ((vcgt_f32(v25, v24).u8[0] & 1) != 0)
            v27 = v26;
          else
            v27 = v24.f32[0];
          v15 = (float32x2_t)__PAIR64__(v24.u32[1], LODWORD(v27));
          a1[2] = __PAIR64__(v24.u32[1], LODWORD(v27));
          --v23;
        }
        while (v23);
        v17 = v24.i32[1];
      }
    }
    goto LABEL_35;
  }
  if ((vceq_f32(v15, *(float32x2_t *)&a4).u8[0] & 1) != 0)
    a1[2] = v15;
LABEL_35:
  if ((vceq_f32(v16, *(float32x2_t *)&a3).i32[1] & 1) == 0)
    goto LABEL_39;
  v16.i32[1] = v17;
  a1[1] = v16;
  if (v10 != v9)
  {
    v32 = (float *)&v9[1] + 1;
    v33 = v14;
    do
    {
      v34 = *v32;
      v32 += 14;
      v16.i32[1] = fminf(v34, v16.f32[1]);
      a1[1] = v16;
      --v33;
    }
    while (v33);
LABEL_39:
    if ((vceq_f32(v15, *(float32x2_t *)&a4).i32[1] & 1) != 0)
    {
      v15.i32[1] = v16.i32[1];
      a1[2] = v15;
      if (v10 != v9)
      {
        v35 = (float *)&v9[2] + 1;
        do
        {
          v36 = *v35;
          v35 += 14;
          v15.i32[1] = fmaxf(v15.f32[1], v36);
          a1[2] = v15;
          --v14;
        }
        while (v14);
      }
    }
    goto LABEL_46;
  }
  if ((vceq_f32(v15, *(float32x2_t *)&a4).i32[1] & 1) != 0)
  {
    v15.i32[1] = v17;
    a1[2] = v15;
  }
LABEL_46:

}

void sub_227B66658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B6666C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

float32x2_t *_ZN12GKCRTreeNodeI8NSObjectDv2_fE5QueryES1_S1_RNSt3__16vectorIU8__strongPS0_NS3_9allocatorIS6_EEEE(float32x2_t *result, _QWORD *a2, float32x2_t a3, float32x2_t a4)
{
  float32x2_t *v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  uint64_t v11;
  unint64_t v12;
  float32x2_t v13;
  int32x2_t v14;
  float32x2_t v15;
  int32x2_t v16;
  void *v17;
  float32x2_t **v18;

  v7 = result;
  v8 = result[1];
  if ((vcgt_f32(a3, v8).u8[0] & 1) == 0
    && (v15 = result[2], (vcge_f32(a4, v15).u32[0] & 1) != 0)
    && (v16 = vcge_f32((float32x2_t)vzip2_s32((int32x2_t)a4, (int32x2_t)v8), (float32x2_t)vzip2_s32((int32x2_t)v15, (int32x2_t)a3)), (v16.i8[4] & 1) != 0)&& (v16.i8[0] & 1) != 0&& (v17 = (void *)result[6]) != 0)
  {
    v18 = (float32x2_t **)a2[1];
    if ((unint64_t)v18 >= a2[2])
    {
      result = (float32x2_t *)std::vector<NSObject * {__strong}>::__push_back_slow_path<NSObject * const {__strong}&>(a2, (id *)&result[6]);
      a2[1] = result;
    }
    else
    {
      result = v17;
      *v18 = result;
      a2[1] = v18 + 1;
    }
  }
  else
  {
    v10 = result[3];
    v9 = result[4];
    if (*(_QWORD *)&v9 != *(_QWORD *)&v10)
    {
      v11 = 0;
      v12 = 0;
      do
      {
        result = (float32x2_t *)(*(_QWORD *)&v10 + v11);
        v13 = *(float32x2_t *)(*(_QWORD *)&v10 + v11 + 16);
        if ((vcgt_f32(a3, v13).u8[0] & 1) == 0)
        {
          v14 = vcge_f32(a4, result[1]);
          if ((v14.i8[0] & 1) != 0 && (vcge_f32(v13, a3).i32[1] & 1) != 0 && (v14.i8[4] & 1) != 0)
          {
            result = (float32x2_t *)_ZN12GKCRTreeNodeI8NSObjectDv2_fE5QueryES1_S1_RNSt3__16vectorIU8__strongPS0_NS3_9allocatorIS6_EEEE(*(double *)&a3, *(double *)&a4);
            v10 = v7[3];
            v9 = v7[4];
          }
        }
        ++v12;
        v11 += 56;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)&v9 - *(_QWORD *)&v10) >> 3) > v12);
    }
  }
  return result;
}

_QWORD *std::vector<NSObject * {__strong}>::__push_back_slow_path<NSObject * const {__strong}&>(_QWORD *a1, id *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  void *v26;

  v3 = a1[1] - *a1;
  v4 = v3 >> 3;
  v5 = (v3 >> 3) + 1;
  if (v5 >> 61)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v7 = a1[2] - *a1;
  if (v7 >> 2 > v5)
    v5 = v7 >> 2;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
    v8 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(8 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * v4];
  v11 = &v9[8 * v8];
  *(_QWORD *)v10 = *a2;
  v12 = v10 + 8;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v14)
      return v12;
    goto LABEL_23;
  }
  v15 = (unint64_t)&v14[-*a1 - 8];
  if (v15 < 0x78 || &v14[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v3 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] < v14)
    goto LABEL_31;
  v16 = (v15 >> 3) + 1;
  v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
  v10 -= v17;
  v18 = &v14[-v17];
  v19 = v14 - 16;
  v20 = &v9[8 * v4 - 16];
  v21 = v16 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v23 = *((_OWORD *)v19 - 1);
    v22 = *(_OWORD *)v19;
    *((_OWORD *)v19 - 1) = 0uLL;
    *(_OWORD *)v19 = 0uLL;
    *((_OWORD *)v20 - 1) = v23;
    *(_OWORD *)v20 = v22;
    v19 -= 32;
    v20 -= 32;
    v21 -= 4;
  }
  while (v21);
  v14 = v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_31:
    do
    {
      v24 = *((_QWORD *)v14 - 1);
      v14 -= 8;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v10 - 1) = v24;
      v10 -= 8;
    }
    while (v14 != v13);
  }
  v25 = (char *)*a1;
  v14 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v11;
  if (v14 != v25)
  {
    do
    {
      v26 = (void *)*((_QWORD *)v14 - 1);
      v14 -= 8;

    }
    while (v14 != v25);
    v14 = v25;
  }
  if (v14)
LABEL_23:
    operator delete(v14);
  return v12;
}

float *lqCreateDatabase(int a1, int a2, int a3, float a4, float a5, float a6, float a7, float a8, float a9)
{
  float *v18;
  int v19;
  uint64_t v20;

  v18 = (float *)malloc_type_malloc(0x38uLL, 0x10A00406D72BAEFuLL);
  *v18 = a4;
  v18[1] = a5;
  v18[2] = a6;
  v18[3] = a7;
  v18[4] = a8;
  v18[5] = a9;
  *((_DWORD *)v18 + 6) = a1;
  *((_DWORD *)v18 + 7) = a2;
  *((_DWORD *)v18 + 8) = a3;
  v19 = a2 * a1 * a3;
  *((_QWORD *)v18 + 5) = malloc_type_malloc(8 * v19, 0xD436AE88uLL);
  if (v19 >= 1)
  {
    v20 = 0;
    do
    {
      *(_QWORD *)(*((_QWORD *)v18 + 5) + v20) = 0;
      v20 += 8;
    }
    while (8 * v19 != v20);
  }
  *((_QWORD *)v18 + 6) = 0;
  return v18;
}

void *lqInitDatabase(uint64_t a1, int a2, int a3, int a4, float a5, float a6, float a7, float a8, float a9, float a10)
{
  int v11;
  void *result;
  uint64_t v13;

  *(float *)a1 = a5;
  *(float *)(a1 + 4) = a6;
  *(float *)(a1 + 8) = a7;
  *(float *)(a1 + 12) = a8;
  *(float *)(a1 + 16) = a9;
  *(float *)(a1 + 20) = a10;
  *(_DWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 28) = a3;
  *(_DWORD *)(a1 + 32) = a4;
  v11 = a3 * a2 * a4;
  result = malloc_type_malloc(8 * v11, 0xD436AE88uLL);
  *(_QWORD *)(a1 + 40) = result;
  if (v11 >= 1)
  {
    v13 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + v13) = 0;
      v13 += 8;
    }
    while (8 * v11 != v13);
  }
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

void lqDeleteDatabase(void **a1)
{
  free(a1[5]);
  free(a1);
}

uint64_t lqBinForLocation(uint64_t a1, float a2, float a3, float a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  v4 = *(float *)a1;
  if (*(float *)a1 > a2)
    return a1 + 48;
  v5 = *(float *)(a1 + 4);
  if (v5 > a3)
    return a1 + 48;
  v6 = *(float *)(a1 + 8);
  if (v6 > a4)
    return a1 + 48;
  v7 = *(float *)(a1 + 12);
  if ((float)(v7 + v4) <= a2)
    return a1 + 48;
  v8 = *(float *)(a1 + 16);
  if ((float)(v8 + v5) <= a3)
    return a1 + 48;
  v9 = *(float *)(a1 + 20);
  if ((float)(v9 + v6) <= a4)
    return a1 + 48;
  else
    return *(_QWORD *)(a1 + 40)
         + 8
         * ((int)(float)((float)((float)(a4 - v6) * (float)*(int *)(a1 + 32)) / v9)
          + ((int)(float)((float)((float)(a3 - v5) * (float)*(int *)(a1 + 28)) / v8)
           + *(_DWORD *)(a1 + 28) * (int)(float)((float)((float)(a2 - v4) * (float)*(int *)(a1 + 24)) / v7))
          * *(_DWORD *)(a1 + 32));
}

_QWORD *lqInitClientProxy(_QWORD *result, uint64_t a2)
{
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  result[3] = a2;
  return result;
}

_QWORD *lqAddToBin(_QWORD *result, _QWORD *a2)
{
  if (*a2)
  {
    *result = 0;
    result[1] = *a2;
    *(_QWORD *)*a2 = result;
  }
  else
  {
    *result = 0;
    result[1] = 0;
  }
  *a2 = result;
  result[2] = a2;
  return result;
}

uint64_t *lqRemoveFromBin(uint64_t *result)
{
  uint64_t **v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t **)result[2];
  if (!v1)
    goto LABEL_7;
  if (*v1 != result)
  {
    v2 = *result;
    if (!*result)
      goto LABEL_5;
    goto LABEL_4;
  }
  *v1 = (uint64_t *)result[1];
  v2 = *result;
  if (*result)
LABEL_4:
    *(_QWORD *)(v2 + 8) = result[1];
LABEL_5:
  v3 = (_QWORD *)result[1];
  if (v3)
    *v3 = v2;
LABEL_7:
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

uint64_t lqUpdateForNewLocation(uint64_t result, float *a2, float a3, float a4, float a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = *(float *)result;
  if (*(float *)result > a3
    || (v6 = *(float *)(result + 4), v6 > a4)
    || (v7 = *(float *)(result + 8), v7 > a5)
    || (v8 = *(float *)(result + 12), (float)(v8 + v5) <= a3)
    || (v9 = *(float *)(result + 16), (float)(v9 + v6) <= a4)
    || (v10 = *(float *)(result + 20), (float)(v10 + v7) <= a5))
  {
    v11 = (uint64_t *)(result + 48);
  }
  else
  {
    v11 = (uint64_t *)(*(_QWORD *)(result + 40)
                    + 8
                    * ((int)(float)((float)((float)(a5 - v7) * (float)*(int *)(result + 32)) / v10)
                     + ((int)(float)((float)((float)(a4 - v6) * (float)*(int *)(result + 28)) / v9)
                      + *(_DWORD *)(result + 28)
                      * (int)(float)((float)((float)(a3 - v5) * (float)*(int *)(result + 24)) / v8))
                     * *(_DWORD *)(result + 32)));
  }
  a2[8] = a3;
  a2[9] = a4;
  a2[10] = a5;
  v12 = (uint64_t **)*((_QWORD *)a2 + 2);
  if (v11 != (uint64_t *)v12)
  {
    if (v12)
    {
      if (*v12 == (uint64_t *)a2)
        *v12 = (uint64_t *)*((_QWORD *)a2 + 1);
      v13 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
        *(_QWORD *)(v13 + 8) = *((_QWORD *)a2 + 1);
      v14 = (_QWORD *)*((_QWORD *)a2 + 1);
      if (v14)
        *v14 = v13;
    }
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    if (*v11)
    {
      *((_QWORD *)a2 + 1) = *v11;
      *(_QWORD *)*v11 = a2;
    }
    else
    {
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
    }
    *v11 = (uint64_t)a2;
    *((_QWORD *)a2 + 2) = v11;
  }
  return result;
}

uint64_t lqMapOverAllObjectsInLocalityClipped(uint64_t result, uint64_t (*a2)(_QWORD, uint64_t), uint64_t a3, int a4, int a5, int a6, int a7, int a8, float a9, float a10, float a11, float a12, int a13)
{
  uint64_t v18;
  int v19;
  int v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v26;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  int v33;
  uint64_t v34;
  uint64_t v35;

  if (a4 <= a7 && a5 <= a8 && a6 <= a13)
  {
    v18 = result;
    v19 = *(_DWORD *)(result + 32);
    v20 = v19 * *(_DWORD *)(result + 28);
    v35 = v19;
    v34 = a6;
    v21 = a12 * a12;
    v22 = v20 * a4;
    v29 = v20;
    v30 = v19 * a5;
    do
    {
      v33 = a4;
      v23 = v30;
      v24 = a5;
      do
      {
        v26 = v34;
        do
        {
          for (i = *(_QWORD *)(*(_QWORD *)(v18 + 40) + 8 * (v23 + v22 + v26)); i; i = *(_QWORD *)(i + 8))
          {
            if ((float)((float)((float)((float)(a9 - *(float *)(i + 32)) * (float)(a9 - *(float *)(i + 32)))
                               + (float)((float)(a10 - *(float *)(i + 36)) * (float)(a10 - *(float *)(i + 36))))
                       + (float)((float)(a11 - *(float *)(i + 40)) * (float)(a11 - *(float *)(i + 40)))) < v21)
              result = a2(*(_QWORD *)(i + 24), a3);
          }
        }
        while ((int)v26++ < a13);
        v23 += v35;
      }
      while (v24++ != a8);
      v22 += v29;
      a4 = v33 + 1;
    }
    while (v33 != a7);
  }
  return result;
}

uint64_t lqMapOverAllOutsideObjects(uint64_t result, uint64_t (*a2)(_QWORD, uint64_t), uint64_t a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7;
  float v13;

  v7 = *(_QWORD *)(result + 48);
  if (v7)
  {
    v13 = a7 * a7;
    do
    {
      if ((float)((float)((float)((float)(a4 - *(float *)(v7 + 32)) * (float)(a4 - *(float *)(v7 + 32)))
                         + (float)((float)(a5 - *(float *)(v7 + 36)) * (float)(a5 - *(float *)(v7 + 36))))
                 + (float)((float)(a6 - *(float *)(v7 + 40)) * (float)(a6 - *(float *)(v7 + 40)))) < v13)
        result = a2(*(_QWORD *)(v7 + 24), a3);
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7);
  }
  return result;
}

uint64_t lqMapOverAllObjectsInLocality(uint64_t result, uint64_t (*a2)(_QWORD, uint64_t), uint64_t a3, float a4, float a5, float a6, float a7)
{
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  float v38;

  v13 = result;
  v14 = a7 + a4;
  v15 = *(float *)result;
  if (v14 < *(float *)result
    || (v16 = *(float *)(result + 4), (float)(a7 + a5) < v16)
    || (v17 = a7 + a6, v18 = *(float *)(result + 8), (float)(a7 + a6) < v18)
    || (v19 = *(float *)(result + 12), (float)(a4 - a7) >= (float)(v19 + v15))
    || (v20 = *(float *)(result + 16), (float)(a5 - a7) >= (float)(v20 + v16))
    || (v21 = *(float *)(result + 20), (float)(a6 - a7) >= (float)(v21 + v18)))
  {
    v37 = *(_QWORD *)(result + 48);
    if (v37)
    {
      v38 = a7 * a7;
      do
      {
        if ((float)((float)((float)((float)(a4 - *(float *)(v37 + 32)) * (float)(a4 - *(float *)(v37 + 32)))
                           + (float)((float)(a5 - *(float *)(v37 + 36)) * (float)(a5 - *(float *)(v37 + 36))))
                   + (float)((float)(a6 - *(float *)(v37 + 40)) * (float)(a6 - *(float *)(v37 + 40)))) < v38)
          result = a2(*(_QWORD *)(v37 + 24), a3);
        v37 = *(_QWORD *)(v37 + 8);
      }
      while (v37);
    }
  }
  else
  {
    v22 = *(_DWORD *)(result + 24);
    v23 = *(_DWORD *)(result + 28);
    v24 = (int)(float)((float)((float)(a4 - (float)(v15 + a7)) * (float)v22) / v19);
    v25 = (int)(float)((float)((float)(a5 - (float)(v16 + a7)) * (float)v23) / v20);
    v26 = *(_DWORD *)(result + 32);
    v27 = (int)(float)((float)((float)(a6 - (float)(v18 + a7)) * (float)v26) / v21);
    v28 = (int)(float)((float)((float)(v14 - v15) * (float)v22) / v19);
    v29 = (int)(float)((float)((float)((float)(a7 + a5) - v16) * (float)v23) / v20);
    v30 = (int)(float)((float)((float)(v17 - v18) * (float)v26) / v21);
    v31 = v24 & ~(v24 >> 31);
    v32 = v25 & ~(v25 >> 31);
    v33 = v27 & ~(v27 >> 31);
    if (v22 <= v28)
      v34 = v22 - 1;
    else
      v34 = (int)(float)((float)((float)(v14 - v15) * (float)v22) / v19);
    if (v23 <= v29)
      v35 = v23 - 1;
    else
      v35 = (int)(float)((float)((float)((float)(a7 + a5) - v16) * (float)v23) / v20);
    if (v26 <= v30)
      v36 = v26 - 1;
    else
      v36 = (int)(float)((float)((float)(v17 - v18) * (float)v26) / v21);
    if (v26 <= v30 || v23 <= v29 || v22 <= v28 || v27 < 0 || v25 < 0 || v24 < 0)
      lqMapOverAllOutsideObjects(result, a2, a3, a4, a5, a6, a7);
    return lqMapOverAllObjectsInLocalityClipped(v13, a2, a3, v31, v32, v33, v34, v35, a4, a5, a6, a7, v36);
  }
  return result;
}

uint64_t lqFindNearestHelper(uint64_t result, uint64_t a2, float a3)
{
  if (*(_QWORD *)a2 != result && *(float *)(a2 + 16) > a3)
  {
    *(_QWORD *)(a2 + 8) = result;
    *(float *)(a2 + 16) = a3;
  }
  return result;
}

uint64_t lqFindNearestNeighborWithinRadius(uint64_t a1, uint64_t a2, float a3, float a4, float a5, float a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v7 = a2;
  v9 = 2139095039;
  lqMapOverAllObjectsInLocality(a1, (uint64_t (*)(_QWORD, uint64_t))lqFindNearestHelper, (uint64_t)&v7, a3, a4, a5, a6);
  return v8;
}

uint64_t lqMapOverAllObjectsInBin(uint64_t result, uint64_t (*a2)(_QWORD, uint64_t, float), uint64_t a3)
{
  uint64_t v5;

  if (result)
  {
    v5 = result;
    do
    {
      result = a2(*(_QWORD *)(v5 + 24), a3, 0.0);
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5);
  }
  return result;
}

_DWORD *lqMapOverAllObjects(_DWORD *result, uint64_t (*a2)(_QWORD, uint64_t, float), uint64_t a3)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t j;
  uint64_t k;

  v5 = result;
  v6 = (result[7] * result[6] * result[8]);
  if ((int)v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      for (j = *(_QWORD *)(*((_QWORD *)v5 + 5) + 8 * i); j; j = *(_QWORD *)(j + 8))
        result = (_DWORD *)a2(*(_QWORD *)(j + 24), a3, 0.0);
    }
  }
  for (k = *((_QWORD *)v5 + 6); k; k = *(_QWORD *)(k + 8))
    result = (_DWORD *)a2(*(_QWORD *)(k + 24), a3, 0.0);
  return result;
}

uint64_t lqRemoveAllObjects(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = (*(_DWORD *)(result + 28) * *(_DWORD *)(result + 24) * *(_DWORD *)(result + 32));
  if ((int)v1 >= 1)
  {
    v2 = 0;
    while (1)
    {
      while (1)
      {
        v3 = *(uint64_t **)(*(_QWORD *)(result + 40) + 8 * v2);
        if (v3)
          break;
        if (++v2 == v1)
          goto LABEL_16;
      }
      v4 = (uint64_t **)v3[2];
      if (v4)
        break;
LABEL_3:
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
    }
    if (*v4 == v3)
    {
      *v4 = (uint64_t *)v3[1];
      v5 = *v3;
      if (!*v3)
      {
LABEL_11:
        v6 = (_QWORD *)v3[1];
        if (v6)
          *v6 = v5;
        goto LABEL_3;
      }
    }
    else
    {
      v5 = *v3;
      if (!*v3)
        goto LABEL_11;
    }
    *(_QWORD *)(v5 + 8) = v3[1];
    goto LABEL_11;
  }
LABEL_16:
  while (1)
  {
    v7 = *(uint64_t **)(result + 48);
    if (!v7)
      return result;
    v8 = (uint64_t **)v7[2];
    if (!v8)
      goto LABEL_15;
    if (*v8 != v7)
    {
      v9 = *v7;
      if (!*v7)
        goto LABEL_21;
LABEL_20:
      *(_QWORD *)(v9 + 8) = v7[1];
      goto LABEL_21;
    }
    *v8 = (uint64_t *)v7[1];
    v9 = *v7;
    if (*v7)
      goto LABEL_20;
LABEL_21:
    v10 = (_QWORD *)v7[1];
    if (v10)
      *v10 = v9;
LABEL_15:
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
}

void sub_227B69184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B692A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B692B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_227B692D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B69324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B693A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B695E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B69600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B69618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B6962C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B69644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B6965C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B69BFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B69DC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

OpenSteer::SimpleVehicle *OpenSteer::SimpleVehicle::SimpleVehicle(OpenSteer::SimpleVehicle *this)
{
  uint64_t v2;

  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *(_QWORD *)this = off_24F04EB58;
  *((_DWORD *)this + 42) = 0;
  *((_QWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 0;
  *((_DWORD *)this + 10) = 1065353216;
  *(_OWORD *)((char *)this + 8) = xmmword_227BBFEC0;
  *(_OWORD *)((char *)this + 24) = xmmword_227BBFED0;
  *((_BYTE *)this + 88) = 0;
  *(_QWORD *)((char *)this + 52) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  *((_DWORD *)this + 15) = 0;
  *((_DWORD *)this + 24) = 1065353216;
  OpenSteer::SimpleVehicle::setSpeed((uint64_t)this, 0.0);
  (*(void (**)(OpenSteer::SimpleVehicle *, float))(*(_QWORD *)this + 184))(this, 0.5);
  (*(void (**)(OpenSteer::SimpleVehicle *, float))(*(_QWORD *)this + 232))(this, 1.0);
  (*(void (**)(OpenSteer::SimpleVehicle *, float))(*(_QWORD *)this + 248))(this, 1.0);
  *((_QWORD *)this + 18) = _static_vec3_zero;
  *((_DWORD *)this + 38) = dword_25591E708;
  *((_QWORD *)this + 15) = _static_vec3_zero;
  *((_DWORD *)this + 32) = dword_25591E708;
  *(_QWORD *)((char *)this + 132) = _static_vec3_zero;
  *((_DWORD *)this + 35) = dword_25591E708;
  *((_DWORD *)this + 29) = 0;
  *((_DWORD *)this + 39) = 0;
  v2 = _static_vec3_zero;
  *((_DWORD *)this + 42) = dword_25591E708;
  *((_QWORD *)this + 20) = v2;
  LODWORD(v2) = OpenSteer::SimpleVehicle::serialNumberCounter++;
  *((_DWORD *)this + 23) = v2;
  return this;
}

float OpenSteer::SimpleVehicle::SimpleVehicle(OpenSteer::SimpleVehicle *this)
{
  uint64_t v1;
  float result;

  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *(_QWORD *)this = off_24F04EB58;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *(_OWORD *)((char *)this + 8) = xmmword_227BBFEC0;
  *(_OWORD *)((char *)this + 24) = xmmword_227BBFED0;
  *((_BYTE *)this + 88) = 0;
  *(_QWORD *)((char *)this + 52) = 0;
  *(_QWORD *)((char *)this + 44) = 0;
  *((_DWORD *)this + 15) = 0;
  *((_OWORD *)this + 6) = xmmword_227BBFEE0;
  *((_DWORD *)this + 42) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 18) = _static_vec3_zero;
  *((_DWORD *)this + 38) = dword_25591E708;
  *((_QWORD *)this + 15) = _static_vec3_zero;
  *((_DWORD *)this + 32) = dword_25591E708;
  *(_QWORD *)((char *)this + 132) = _static_vec3_zero;
  *((_DWORD *)this + 35) = dword_25591E708;
  *((_QWORD *)this + 14) = 1065353216;
  v1 = _static_vec3_zero;
  result = *(float *)&dword_25591E708;
  *((_DWORD *)this + 42) = dword_25591E708;
  *((_QWORD *)this + 20) = v1;
  LODWORD(v1) = OpenSteer::SimpleVehicle::serialNumberCounter++;
  *((_DWORD *)this + 23) = v1;
  return result;
}

void OpenSteer::SimpleVehicle::adjustRawSteeringForce(OpenSteer::SimpleVehicle *this, const Vec3 *a2, float a3)
{
  float v5;
  float v6;
  double v7;
  float v8;
  float v9;
  float v10;
  const Vec3 *v11;
  Vec3 v12;

  v5 = (*(float (**)(OpenSteer::SimpleVehicle *, float))(*(_QWORD *)this + 240))(this, a3) * 0.2;
  if ((*(float (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 200))(this) <= v5
    && (a2->x != *(float *)&_static_vec3_zero
     || a2->y != *((float *)&_static_vec3_zero + 1)
     || a2->z != *(float *)&dword_25591E708))
  {
    v6 = (*(float (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 200))(this);
    v7 = (float)(v6 / v5) * (float)(v6 / v5);
    *(float *)&v7 = v7 * v7 * (v7 * v7 * (v7 * v7) * (v7 * v7 * (v7 * v7)));
    v8 = 1.0 - (float)(*(float *)&v7 + *(float *)&v7);
    v12.x = (*(float (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 32))(this);
    v12.y = v9;
    v12.z = v10;
    OpenSteer::vecLimitDeviationAngleUtility((OpenSteer *)1, &a2->x, &v12, v8, v11);
  }
}

uint64_t OpenSteer::SimpleVehicle::applyBrakingForce(OpenSteer::SimpleVehicle *this, float a2, float a3)
{
  float v5;
  float v6;

  v5 = (*(float (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 200))(this) * a2;
  if (v5 >= (*(float (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 224))(this))
    v5 = (*(float (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 224))(this);
  v6 = (*(float (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 200))(this) - (float)(v5 * a3);
  return (*(uint64_t (**)(OpenSteer::SimpleVehicle *, float))(*(_QWORD *)this + 208))(this, v6);
}

float32x4_t OpenSteer::SimpleVehicle::applySteeringForce(float32x2_t *this, const Vec3 *a2, float a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  BOOL v10;
  float v11;
  double v12;
  float v13;
  float v14;
  double v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float32x2_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  double v29;
  float v30;
  float v31;
  float32x4_t v32;
  unsigned __int32 v33;
  float32x4_t v34;
  unsigned __int32 v35;
  float32x4_t result;
  float32x4_t v37;
  float v38;
  float v39;
  int32x2_t v40;
  _DWORD v41[3];

  v39 = COERCE_FLOAT(COERCE_UNSIGNED_INT64((*(double (**)(float32x2_t *, const Vec3 *))(*(_QWORD *)this
                                                                                                 + 296))(this, a2)));
  v38 = v5;
  v7 = v6;
  v8 = (*(float (**)(float32x2_t *))(*(_QWORD *)this + 224))(this);
  v9 = (float)((float)(v39 * v39) + (float)(v38 * v38)) + (float)(v7 * v7);
  v10 = v9 <= (float)(v8 * v8);
  v11 = v8 / sqrtf(v9);
  v12 = COERCE_DOUBLE(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v38), LODWORD(v39)), v11));
  v13 = v11 * v7;
  if (v10)
    v14 = v7;
  else
    v14 = v13;
  if (v10)
    v15 = COERCE_DOUBLE(__PAIR64__(LODWORD(v38), LODWORD(v39)));
  else
    v15 = v12;
  v40 = COERCE_INT32X2_T((*(double (**)(float32x2_t *))(*(_QWORD *)this + 160))(this));
  (*(void (**)(float32x2_t *))(*(_QWORD *)this + 192))(this);
  if (a3 <= 0.0)
  {
    v21.i32[0] = this[20].i32[0];
    v22 = this[20].f32[1];
    v20 = this[21].f32[0];
  }
  else
  {
    v19 = fmaxf(fminf(fmaxf(fminf(a3 * 9.0, 0.4), 0.15), 1.0), 0.0);
    v20 = this[21].f32[0] + (float)((float)((float)(v14 / *(float *)v40.i32) - this[21].f32[0]) * v19);
    v21 = vmla_n_f32(this[20], vsub_f32(vdiv_f32(*(float32x2_t *)&v15, (float32x2_t)vdup_lane_s32(v40, 0)), this[20]), v19);
    this[20] = v21;
    this[21].f32[0] = v20;
    v22 = v21.f32[1];
  }
  v23 = v16 + (float)(v21.f32[0] * a3);
  v24 = v17 + (float)(v22 * a3);
  v25 = v18 + (float)(v20 * a3);
  v26 = (*(float (**)(float32x2_t *))(*(_QWORD *)this + 240))(this);
  v27 = (float)((float)(v23 * v23) + (float)(v24 * v24)) + (float)(v25 * v25);
  if (v27 > (float)(v26 * v26))
  {
    v28 = v26 / sqrtf(v27);
    v23 = v28 * v23;
    v24 = v28 * v24;
    v25 = v28 * v25;
    v27 = (float)((float)(v23 * v23) + (float)(v24 * v24)) + (float)(v25 * v25);
  }
  *(float *)v41 = v23;
  *(float *)&v41[1] = v24;
  *(float *)&v41[2] = v25;
  (*(void (**)(float32x2_t *, float))(*(_QWORD *)this + 208))(this, sqrtf(v27));
  v29 = (*(double (**)(float32x2_t *))(*(_QWORD *)this + 48))(this);
  (*(void (**)(float32x2_t *, float, float, float))(*(_QWORD *)this + 56))(this, *(float *)&v29 + (float)(v23 * a3), v30 + (float)(v24 * a3), v31 + (float)(v25 * a3));
  (*(void (**)(float32x2_t *, _DWORD *, float))(*(_QWORD *)this + 288))(this, v41, a3);
  OpenSteer::SimpleVehicle::measurePathCurvature((OpenSteer::SimpleVehicle *)this, a3);
  v32 = (float32x4_t)((__n128 (*)(float32x2_t *))*(_QWORD *)(*(_QWORD *)this + 48))(this);
  v32.i32[1] = v33;
  *(float32x2_t *)v34.f32 = this[18];
  v34.i32[2] = this[19].i32[0];
  v32.i32[2] = v35;
  result = vsubq_f32(v32, v34);
  v37 = vmlaq_n_f32(v34, result, fmaxf(fminf(a3 * 0.06, 1.0), 0.0));
  this[19].i32[0] = v37.i32[2];
  this[18] = *(float32x2_t *)v37.f32;
  return result;
}

void OpenSteer::SimpleVehicle::measurePathCurvature(OpenSteer::SimpleVehicle *this, float a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  int v29;
  int v30;
  int v31;
  int v32;

  if (a2 > 0.0)
  {
    v4 = *((float *)this + 33) - (*(float (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 48))(this);
    v6 = *((float *)this + 34) - v5;
    v8 = *((float *)this + 35) - v7;
    v9 = (*(float (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 32))(this);
    v12 = 1.0 / sqrtf((float)((float)(v4 * v4) + (float)(v6 * v6)) + (float)(v8 * v8));
    v13 = (float)(*((float *)this + 30) - v9) * v12;
    v14 = (float)(*((float *)this + 31) - v10) * v12;
    v15 = (float)(*((float *)this + 32) - v11) * v12;
    v16 = (*(float (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 32))(this);
    v19 = (float)((float)(v16 * v13) + (float)(v17 * v14)) + (float)(v18 * v15);
    v20 = v13 - (float)(v19 * v16);
    v21 = v14 - (float)(v19 * v17);
    v22 = v15 - (float)(v19 * v18);
    v23 = (**(float (***)(OpenSteer::SimpleVehicle *))this)(this);
    v26 = (float)((float)(v20 * v23) + (float)(v21 * v24)) + (float)(v22 * v25);
    v27 = sqrtf((float)((float)(v20 * v20) + (float)(v21 * v21)) + (float)(v22 * v22));
    if (v26 >= 0.0)
      v28 = -v27;
    else
      v28 = v27;
    *((float *)this + 29) = v28;
    *((float *)this + 39) = *((float *)this + 39)
                          + (float)((float)(v28 - *((float *)this + 39)) * fmaxf(fminf(a2 * 4.0, 1.0), 0.0));
    *((float *)this + 30) = (*(float (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 32))(this);
    *((_DWORD *)this + 31) = v29;
    *((_DWORD *)this + 32) = v30;
    *((float *)this + 33) = (*(float (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 48))(this);
    *((_DWORD *)this + 34) = v31;
    *((_DWORD *)this + 35) = v32;
  }
}

void OpenSteer::SimpleVehicle::regenerateLocalSpace(OpenSteer::SimpleVehicle *this, const Vec3 *a2, float a3)
{
  int32x2_t v5;
  float32x4_t v6;
  float32x4_t v12;
  uint64_t v13;
  __int32 v14;

  if ((*(float (**)(OpenSteer::SimpleVehicle *, float))(*(_QWORD *)this + 200))(this, a3) > 0.0)
  {
    *(double *)&v5 = (*(double (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 200))(this);
    v6.i64[0] = *(_QWORD *)&a2->x;
    v6.i32[2] = LODWORD(a2->z);
    __asm { FMOV            V2.4S, #1.0 }
    v12 = vmulq_f32(v6, vdivq_f32(_Q2, (float32x4_t)vdupq_lane_s32(v5, 0)));
    v14 = v12.i32[2];
    v13 = v12.i64[0];
    (*(void (**)(OpenSteer::SimpleVehicle *, uint64_t *))(*(_QWORD *)this + 120))(this, &v13);
  }
}

void OpenSteer::SimpleVehicle::regenerateLocalSpaceForBanking(OpenSteer::SimpleVehicle *this, const Vec3 *a2, float a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  float v13;
  int32x2_t v14;
  float32x4_t v15;
  float32x4_t v21;
  uint64_t v22;
  __int32 v23;

  v5 = *((float *)this + 40);
  v6 = *((float *)this + 42);
  v7 = (float)(*((float *)this + 41) * 0.05) + 0.2;
  v8 = a3 * 3.0;
  v10.n128_f32[0] = (*(float (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 16))(this);
  v9 = fmaxf(fminf(v8, 1.0), 0.0);
  v10.n128_f32[0] = v10.n128_f32[0] + (float)((float)-(float)(v10.n128_f32[0] - (float)(v5 * 0.05)) * v9);
  v11.n128_f32[0] = v11.n128_f32[0] + (float)((float)(v7 - v11.n128_f32[0]) * v9);
  v12.n128_f32[0] = v12.n128_f32[0] + (float)((float)-(float)(v12.n128_f32[0] - (float)(v6 * 0.05)) * v9);
  v13 = sqrtf((float)((float)(v10.n128_f32[0] * v10.n128_f32[0]) + (float)(v11.n128_f32[0] * v11.n128_f32[0]))+ (float)(v12.n128_f32[0] * v12.n128_f32[0]));
  if (v13 > 0.0)
  {
    v10.n128_f32[0] = v10.n128_f32[0] * (float)(1.0 / v13);
    v11.n128_f32[0] = v11.n128_f32[0] * (float)(1.0 / v13);
    v12.n128_f32[0] = v12.n128_f32[0] * (float)(1.0 / v13);
  }
  (*(void (**)(OpenSteer::SimpleVehicle *, __n128, __n128, __n128))(*(_QWORD *)this + 24))(this, v10, v11, v12);
  if ((*(float (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 200))(this) > 0.0)
  {
    *(double *)&v14 = (*(double (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 200))(this);
    v15.i64[0] = *(_QWORD *)&a2->x;
    v15.i32[2] = LODWORD(a2->z);
    __asm { FMOV            V2.4S, #1.0 }
    v21 = vmulq_f32(v15, vdivq_f32(_Q2, (float32x4_t)vdupq_lane_s32(v14, 0)));
    v23 = v21.i32[2];
    v22 = v21.i64[0];
    (*(void (**)(OpenSteer::SimpleVehicle *, uint64_t *))(*(_QWORD *)this + 120))(this, &v22);
  }
}

float OpenSteer::SimpleVehicle::predictFuturePosition(OpenSteer::SimpleVehicle *this, float a2)
{
  float v4;

  v4 = (*(float (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 48))(this);
  return v4 + (float)((*(float (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 192))(this) * a2);
}

float OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::side(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

float *OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::setSide(float *result, float a2, float a3, float a4)
{
  result[2] = a2;
  result[3] = a3;
  result[4] = a4;
  return result;
}

float OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::up(uint64_t a1)
{
  return *(float *)(a1 + 20);
}

float *OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::setUp(float *result, float a2, float a3, float a4)
{
  result[5] = a2;
  result[6] = a3;
  result[7] = a4;
  return result;
}

float OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::forward(uint64_t a1)
{
  return *(float *)(a1 + 32);
}

float *OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::setForward(float *result, float a2, float a3, float a4)
{
  result[8] = a2;
  result[9] = a3;
  result[10] = a4;
  return result;
}

float OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::position(uint64_t a1)
{
  return *(float *)(a1 + 44);
}

float *OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::setPosition(float *result, float a2, float a3, float a4)
{
  result[11] = a2;
  result[12] = a3;
  result[13] = a4;
  return result;
}

uint64_t OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::rightHanded()
{
  return 1;
}

double OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::resetLocalSpace(uint64_t a1)
{
  int v2;
  int v3;
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(float *)(a1 + 8) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a1 + 32);
  *(_DWORD *)(a1 + 12) = v2;
  *(_DWORD *)(a1 + 16) = v3;
  result = 0.0078125;
  *(_QWORD *)(a1 + 20) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  return result;
}

float OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::localizeDirection(float *a1, float *a2)
{
  return (float)((float)(a1[2] * *a2) + (float)(a1[3] * a2[1])) + (float)(a1[4] * a2[2]);
}

uint64_t OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::localizePosition(uint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4;
  uint64_t v6;
  __int32 v7;

  a3.i64[0] = *(_QWORD *)a2;
  a3.i32[2] = *(_DWORD *)(a2 + 8);
  a4.i64[0] = *(_QWORD *)(a1 + 44);
  a4.i32[2] = *(_DWORD *)(a1 + 52);
  v4 = vsubq_f32(a3, a4);
  v7 = v4.i32[2];
  v6 = v4.i64[0];
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 80))(a1, &v6);
}

float OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::globalizePosition(float *a1)
{
  return (*(float (**)(float *))(*(_QWORD *)a1 + 104))(a1) + a1[11];
}

float32x2_t OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::globalizeDirection(uint64_t a1, float *a2)
{
  return vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(a1 + 8), *a2), *(float32x2_t *)(a1 + 20), a2[1]), *(float32x2_t *)(a1 + 32), a2[2]);
}

uint64_t OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::setUnitSideFromForwardAndUp(uint64_t a1)
{
  uint64_t result;
  __int32 *v3;
  __int32 *v4;
  int32x2_t *v5;
  int32x2_t *v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float v10;
  float32x2_t v11;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if ((_DWORD)result)
  {
    v3 = (__int32 *)(a1 + 32);
    v4 = (__int32 *)(a1 + 20);
    v5 = (int32x2_t *)(a1 + 36);
    v6 = (int32x2_t *)(a1 + 24);
  }
  else
  {
    v3 = (__int32 *)(a1 + 20);
    v4 = (__int32 *)(a1 + 32);
    v5 = (int32x2_t *)(a1 + 24);
    v6 = (int32x2_t *)(a1 + 36);
  }
  v7.i32[0] = vdup_lane_s32(*v6, 1).u32[0];
  v7.i32[1] = *v4;
  v8.i32[0] = vdup_lane_s32(*v5, 1).u32[0];
  v8.i32[1] = *v3;
  v9 = vmls_f32(vmul_f32(v7, (float32x2_t)*v5), v8, (float32x2_t)*v6);
  v10 = -(float)((float)(*(float *)v4 * COERCE_FLOAT(*v5)) - (float)(*(float *)v3 * COERCE_FLOAT(*v6)));
  v11 = vmul_f32(v9, v9);
  v11.f32[0] = sqrtf(vaddv_f32(v11) + (float)(v10 * v10));
  if (v11.f32[0] > 0.0)
  {
    v9 = vdiv_f32(v9, (float32x2_t)vdup_lane_s32((int32x2_t)v11, 0));
    v10 = v10 / v11.f32[0];
  }
  *(float32x2_t *)(a1 + 8) = v9;
  *(float *)(a1 + 16) = v10;
  return result;
}

float OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::regenerateOrthonormalBasisUF(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float result;

  v3 = *a2;
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 32) = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v5 = 8;
  if (v4)
    v6 = 32;
  else
    v6 = 8;
  if (!v4)
    v5 = 32;
  v7 = 36;
  if (v4)
    v8 = 12;
  else
    v8 = 36;
  if (!v4)
    v7 = 12;
  v9 = *(float32x2_t *)(a1 + v8);
  v10 = *(float32x2_t *)(a1 + v7);
  v11.i32[0] = vdup_lane_s32((int32x2_t)v10, 1).u32[0];
  v11.i32[1] = *(_DWORD *)(a1 + v6);
  v12.i32[0] = vdup_lane_s32((int32x2_t)v9, 1).u32[0];
  v12.i32[1] = *(_DWORD *)(a1 + v5);
  result = -(float)((float)(v11.f32[1] * v9.f32[0]) - (float)(v12.f32[1] * v10.f32[0]));
  *(float32x2_t *)(a1 + 20) = vmls_f32(vmul_f32(v11, v9), v12, v10);
  *(float *)(a1 + 28) = result;
  return result;
}

uint64_t OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::regenerateOrthonormalBasis(uint64_t a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  _DWORD v8[3];

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  v5 = sqrtf((float)((float)(v2 * v2) + (float)(v3 * v3)) + (float)(v4 * v4));
  if (v5 > 0.0)
  {
    v6 = 1.0 / v5;
    v2 = v2 * v6;
    v3 = v3 * v6;
    v4 = v4 * v6;
  }
  *(float *)v8 = v2;
  *(float *)&v8[1] = v3;
  *(float *)&v8[2] = v4;
  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 120))(a1, v8);
}

uint64_t OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::regenerateOrthonormalBasis(uint64_t a1, float *a2, uint64_t *a3)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  _DWORD v10[3];

  v3 = *a3;
  *(_DWORD *)(a1 + 28) = *((_DWORD *)a3 + 2);
  *(_QWORD *)(a1 + 20) = v3;
  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  v7 = sqrtf((float)((float)(v4 * v4) + (float)(v5 * v5)) + (float)(v6 * v6));
  if (v7 > 0.0)
  {
    v8 = 1.0 / v7;
    v4 = v4 * v8;
    v5 = v5 * v8;
    v6 = v6 * v8;
  }
  *(float *)v10 = v4;
  *(float *)&v10[1] = v5;
  *(float *)&v10[2] = v6;
  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 128))(a1, v10);
}

float OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::localRotateForwardToSide(uint64_t a1, uint64_t a2)
{
  int v3;
  float result;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  result = *(float *)(a2 + 8);
  if (v3)
    return -result;
  return result;
}

uint64_t OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>::globalRotateForwardToSide(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  _DWORD v7[3];
  _DWORD v8[3];

  v8[0] = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  v8[1] = v2;
  v8[2] = v3;
  v7[0] = (*(float (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 144))(a1, v8);
  v7[1] = v4;
  v7[2] = v5;
  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 104))(a1, v7);
}

float OpenSteer::SimpleVehicle::mass(OpenSteer::SimpleVehicle *this)
{
  return *((float *)this + 24);
}

uint64_t OpenSteer::SimpleVehicle::setMass(uint64_t this, float a2)
{
  *(float *)(this + 96) = a2;
  return this;
}

float OpenSteer::SimpleVehicle::radius(OpenSteer::SimpleVehicle *this)
{
  return *((float *)this + 25);
}

uint64_t OpenSteer::SimpleVehicle::setRadius(uint64_t this, float a2)
{
  *(float *)(this + 100) = a2;
  return this;
}

float OpenSteer::SimpleVehicle::velocity(OpenSteer::SimpleVehicle *this)
{
  return (*(float (**)(OpenSteer::SimpleVehicle *))(*(_QWORD *)this + 32))(this) * *((float *)this + 26);
}

float OpenSteer::SimpleVehicle::speed(OpenSteer::SimpleVehicle *this)
{
  return *((float *)this + 26);
}

uint64_t OpenSteer::SimpleVehicle::setSpeed(uint64_t this, float a2)
{
  *(float *)(this + 104) = a2;
  return this;
}

float OpenSteer::SimpleVehicle::maxForce(OpenSteer::SimpleVehicle *this)
{
  return *((float *)this + 27);
}

uint64_t OpenSteer::SimpleVehicle::setMaxForce(uint64_t this, float a2)
{
  *(float *)(this + 108) = a2;
  return this;
}

float OpenSteer::SimpleVehicle::maxSpeed(OpenSteer::SimpleVehicle *this)
{
  return *((float *)this + 28);
}

uint64_t OpenSteer::SimpleVehicle::setMaxSpeed(uint64_t this, float a2)
{
  *(float *)(this + 112) = a2;
  return this;
}

void sub_227B6B054(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2A50A0](v1, 0x10B1C4021E32345);
  _Unwind_Resume(a1);
}

void sub_227B6B2A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B6B36C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B6B4C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B6B630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B6B6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B6BF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_227B6C1B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_227B6C1D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B6C1E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B6C1F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

void sub_227B6C5A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B6C718(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B6C72C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B6C73C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_227B6C758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B6C770(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B6C784(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id GKCMinmaxStrategist::findBestMoveForPlayer(uint64_t a1, void *a2, int a3)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t j;
  __int128 v52;
  uint64_t m;
  __int128 v54;
  uint64_t k;
  __int128 v56;
  uint64_t i;
  __int128 v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _BOOL4 v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  id *v81;
  _BYTE *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  void *v86;
  void *v87;
  void *__p;
  char *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v6 = a2;
  v7 = 0;
  if (v6 && *(_QWORD *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 184) = objc_opt_respondsToSelector() & 1;
    *(_BYTE *)(a1 + 185) = objc_opt_respondsToSelector() & 1;
    *(_BYTE *)(a1 + 186) = objc_opt_respondsToSelector() & 1;
    objc_msgSend(*(id *)(a1 + 72), "players", GKCMinmaxStrategist::clearData((GKCMinmaxStrategist *)a1));
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend(*(id *)(a1 + 72), "players");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_QWORD *)(a1 + 120) = objc_msgSend(v9, "count");

      objc_storeStrong((id *)(a1 + 80), a2);
      if (*(uint64_t *)(a1 + 120) < 1)
        goto LABEL_12;
    }
    else
    {
      *(_QWORD *)(a1 + 120) = 0;
      objc_storeStrong((id *)(a1 + 80), a2);
      if (*(uint64_t *)(a1 + 120) < 1)
        goto LABEL_12;
    }
    objc_msgSend(*(id *)(a1 + 72), "players");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "containsObject:", v6);

    if ((v11 & 1) != 0)
    {
      if (*(uint64_t *)(a1 + 104) <= 0)
      {
        *(_QWORD *)(a1 + 104) = 1;
        v12 = *(_QWORD *)(a1 + 96);
        if (v12 > 0)
        {
LABEL_10:
          v13 = *(_QWORD *)a1;
          v14 = *(_QWORD *)(a1 + 8);
          if (v14 == *(_QWORD *)a1)
          {
LABEL_21:
            *(_QWORD *)(a1 + 8) = v13;
            v21 = (v13 - v14) >> 3;
            v17 = v12 >= v21;
            v18 = v12 - v21;
            if (v12 > v21)
            {
LABEL_22:
              std::vector<objc_object  {objcproto11GKGameModel}* {__strong}>::__append((_QWORD *)a1, v18);
              goto LABEL_23;
            }
LABEL_17:
            if (!v17)
            {
              v19 = v14 + 8 * v12;
              while (v13 != v19)
              {
                v20 = *(void **)(v13 - 8);
                v13 -= 8;

              }
              *(_QWORD *)(a1 + 8) = v19;
            }
LABEL_23:
            if (*(uint64_t *)(a1 + 96) >= 1)
            {
              v22 = 0;
              do
              {
                v23 = objc_msgSend(*(id *)(a1 + 72), "copyWithZone:", 0);
                v24 = *(void **)(*(_QWORD *)a1 + 8 * v22);
                *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v23;

                ++v22;
              }
              while (v22 < *(_QWORD *)(a1 + 96));
            }
            v92 = 0;
            v93 = 0;
            v25 = *(id *)(a1 + 72);
            if (*(_BYTE *)(a1 + 186))
            {
              v26 = objc_msgSend(*(id *)(a1 + 72), "copyWithZone:", 0);

              v25 = (id)v26;
            }
            if (*(_QWORD *)(a1 + 120) == 2)
            {
              GKCMinmaxStrategist::findBestMove2Player(a1, v25, *(_QWORD *)(a1 + 96), 0x8000000000000000, 0x7FFFFFFFFFFFFFFFLL, &v93, &v92);
            }
            else
            {
              v28 = (_QWORD *)(a1 + 48);
              v27 = *(_QWORD *)(a1 + 48);
              v29 = *(_QWORD *)(a1 + 96);
              v30 = *(_QWORD *)(a1 + 56);
              v31 = 0xAAAAAAAAAAAAAAABLL * ((v30 - v27) >> 3);
              if (v29 + 1 <= v31)
              {
                if (v29 + 1 < v31)
                {
                  v32 = v27 + 24 * v29 + 24;
                  if (v30 != v32)
                  {
                    v33 = *(_QWORD *)(a1 + 56);
                    do
                    {
                      v35 = *(void **)(v33 - 24);
                      v33 -= 24;
                      v34 = v35;
                      if (v35)
                      {
                        *(_QWORD *)(v30 - 16) = v34;
                        operator delete(v34);
                      }
                      v30 = v33;
                    }
                    while (v33 != v32);
                  }
                  *(_QWORD *)(a1 + 56) = v32;
                }
              }
              else
              {
                std::vector<std::vector<long>>::__append(a1 + 48, v29 + 1 - v31);
              }
              v36 = *(_QWORD *)(a1 + 96);
              if ((v36 & 0x8000000000000000) == 0)
              {
                v37 = 0;
                v38 = *(_QWORD *)(a1 + 120);
                do
                {
                  v39 = (_QWORD *)(*v28 + 24 * v37);
                  v40 = (uint64_t)(v39[1] - *v39) >> 3;
                  if (v38 <= v40)
                  {
                    if (v38 < v40)
                      v39[1] = *v39 + 8 * v38;
                  }
                  else
                  {
                    std::vector<long>::__append((uint64_t)v39, v38 - v40);
                    v38 = *(_QWORD *)(a1 + 120);
                  }
                  if (v38 >= 1)
                  {
                    v41 = 0;
                    v42 = *(_QWORD *)(*v28 + 24 * v37);
                    do
                    {
                      *(_QWORD *)(v42 + 8 * v41++) = 0;
                      v38 = *(_QWORD *)(a1 + 120);
                    }
                    while (v41 < v38);
                  }
                  v36 = *(_QWORD *)(a1 + 96);
                  v77 = v37++ < v36;
                }
                while (v77);
              }
              GKCMinmaxStrategist::findBestMoveNPlayer(a1, v25, v36, &v93, &v92);
            }
            v43 = *(_QWORD *)(a1 + 40);
            if (!v43)
              goto LABEL_123;
            v44 = (char *)(a1 + 24);
            std::list<GKCMoveData>::__sort<GKCMinmaxStrategist::findBestMoveForPlayer(objc_object  {objcproto17GKGameModelPlayer}*,BOOL)::{lambda(GKCMoveData const&,GKCMoveData const)#1}>(*(uint64_t **)(a1 + 32), (uint64_t *)(a1 + 24), v43, (uint64_t)&__p);
            v45 = *(char **)(a1 + 32);
            v46 = *((_QWORD *)v45 + 4);
            if (v46 == -1)
            {
              std::list<GKCMoveData>::__sort<GKCMinmaxStrategist::findBestMoveForPlayer(objc_object  {objcproto17GKGameModelPlayer}*,BOOL)::{lambda(GKCMoveData const&,GKCMoveData const)#3}>(*(uint64_t **)(a1 + 32), (uint64_t *)(a1 + 24), *(_QWORD *)(a1 + 40), (uint64_t)&__p);
              v49 = *(char **)(a1 + 32);
              if (v49 != v44)
              {
                v50 = *((_QWORD *)v49 + 5);
                while (*((_QWORD *)v49 + 5) >= v50)
                {
                  v49 = (char *)*((_QWORD *)v49 + 1);
                  if (v49 == v44)
                    goto LABEL_111;
                }
                if (v49 != v44)
                {
                  for (i = *((_QWORD *)v49 + 1); (char *)i != v44; i = *(_QWORD *)(i + 8))
                  {
                    if (*(_QWORD *)(i + 40) >= v50)
                    {
                      objc_storeStrong((id *)v49 + 2, *(id *)(i + 16));
                      v58 = *(_OWORD *)(i + 24);
                      *((_QWORD *)v49 + 5) = *(_QWORD *)(i + 40);
                      *(_OWORD *)(v49 + 24) = v58;
                      v49 = (char *)*((_QWORD *)v49 + 1);
                    }
                  }
                  if (v49 != v44)
                  {
                    v68 = *(_QWORD *)v44;
                    v69 = *(_QWORD *)v49;
                    *(_QWORD *)(v69 + 8) = *(_QWORD *)(*(_QWORD *)v44 + 8);
                    **(_QWORD **)(v68 + 8) = v69;
                    do
                    {
                      v70 = (char *)*((_QWORD *)v49 + 1);
                      --*(_QWORD *)(a1 + 40);

                      operator delete(v49);
                      v49 = v70;
                    }
                    while (v70 != v44);
                  }
                }
              }
            }
            else if (v46 == 1)
            {
              if (v45 != v44)
              {
                while (*((uint64_t *)v45 + 4) >= 1)
                {
                  v45 = (char *)*((_QWORD *)v45 + 1);
                  if (v45 == v44)
                    goto LABEL_58;
                }
                if (v45 != v44)
                {
                  for (j = *((_QWORD *)v45 + 1); (char *)j != v44; j = *(_QWORD *)(j + 8))
                  {
                    if (*(uint64_t *)(j + 32) >= 1)
                    {
                      objc_storeStrong((id *)v45 + 2, *(id *)(j + 16));
                      v52 = *(_OWORD *)(j + 24);
                      *((_QWORD *)v45 + 5) = *(_QWORD *)(j + 40);
                      *(_OWORD *)(v45 + 24) = v52;
                      v45 = (char *)*((_QWORD *)v45 + 1);
                    }
                  }
                  if (v45 != v44)
                  {
                    v59 = *(_QWORD *)v44;
                    v60 = *(_QWORD **)v45;
                    v60[1] = *(_QWORD *)(*(_QWORD *)v44 + 8);
                    **(_QWORD **)(v59 + 8) = v60;
                    do
                    {
                      v61 = (char *)*((_QWORD *)v45 + 1);
                      --*(_QWORD *)(a1 + 40);

                      operator delete(v45);
                      v45 = v61;
                    }
                    while (v61 != v44);
                  }
                }
              }
LABEL_58:
              std::list<GKCMoveData>::__sort<GKCMinmaxStrategist::findBestMoveForPlayer(objc_object  {objcproto17GKGameModelPlayer}*,BOOL)::{lambda(GKCMoveData const&,GKCMoveData const)#2}>(*(uint64_t **)(a1 + 32), (uint64_t *)(a1 + 24), *(_QWORD *)(a1 + 40), (uint64_t)&__p);
              v47 = *(char **)(a1 + 32);
              if (v47 != v44)
              {
                v48 = *((_QWORD *)v47 + 5);
                while (*((_QWORD *)v47 + 5) <= v48)
                {
                  v47 = (char *)*((_QWORD *)v47 + 1);
                  if (v47 == v44)
                    goto LABEL_111;
                }
                if (v47 != v44)
                {
                  for (k = *((_QWORD *)v47 + 1); (char *)k != v44; k = *(_QWORD *)(k + 8))
                  {
                    if (*(_QWORD *)(k + 40) <= v48)
                    {
                      objc_storeStrong((id *)v47 + 2, *(id *)(k + 16));
                      v56 = *(_OWORD *)(k + 24);
                      *((_QWORD *)v47 + 5) = *(_QWORD *)(k + 40);
                      *(_OWORD *)(v47 + 24) = v56;
                      v47 = (char *)*((_QWORD *)v47 + 1);
                    }
                  }
                  if (v47 != v44)
                  {
                    v65 = *(_QWORD *)v44;
                    v66 = *(_QWORD *)v47;
                    *(_QWORD *)(v66 + 8) = *(_QWORD *)(*(_QWORD *)v44 + 8);
                    **(_QWORD **)(v65 + 8) = v66;
                    do
                    {
                      v67 = (char *)*((_QWORD *)v47 + 1);
                      --*(_QWORD *)(a1 + 40);

                      operator delete(v47);
                      v47 = v67;
                    }
                    while (v67 != v44);
                  }
                }
              }
            }
            else
            {
              while (v45 != v44)
              {
                if ((*((_QWORD *)v45 + 4) & 0x8000000000000000) != 0)
                {
                  if (v45 != v44)
                  {
                    for (m = *((_QWORD *)v45 + 1); (char *)m != v44; m = *(_QWORD *)(m + 8))
                    {
                      if ((*(_QWORD *)(m + 32) & 0x8000000000000000) == 0)
                      {
                        objc_storeStrong((id *)v45 + 2, *(id *)(m + 16));
                        v54 = *(_OWORD *)(m + 24);
                        *((_QWORD *)v45 + 5) = *(_QWORD *)(m + 40);
                        *(_OWORD *)(v45 + 24) = v54;
                        v45 = (char *)*((_QWORD *)v45 + 1);
                      }
                    }
                    if (v45 != v44)
                    {
                      v62 = *(_QWORD *)v44;
                      v63 = *(_QWORD **)v45;
                      v63[1] = *(_QWORD *)(*(_QWORD *)v44 + 8);
                      **(_QWORD **)(v62 + 8) = v63;
                      do
                      {
                        v64 = (char *)*((_QWORD *)v45 + 1);
                        --*(_QWORD *)(a1 + 40);

                        operator delete(v45);
                        v45 = v64;
                      }
                      while (v64 != v44);
                    }
                  }
                  break;
                }
                v45 = (char *)*((_QWORD *)v45 + 1);
              }
              std::list<GKCMoveData>::__sort<GKCMinmaxStrategist::findBestMoveForPlayer(objc_object  {objcproto17GKGameModelPlayer}*,BOOL)::{lambda(GKCMoveData const&,GKCMoveData const)#3}>(*(uint64_t **)(a1 + 32), (uint64_t *)(a1 + 24), *(_QWORD *)(a1 + 40), (uint64_t)&__p);
            }
LABEL_111:
            std::list<GKCMoveData>::__sort<GKCMinmaxStrategist::findBestMoveForPlayer(objc_object  {objcproto17GKGameModelPlayer}*,BOOL)::{lambda(GKCMoveData const&,GKCMoveData const)#5}>(*(uint64_t **)(a1 + 32), (uint64_t *)(a1 + 24), *(_QWORD *)(a1 + 40), (uint64_t)&__p);
            v71 = *(void **)(a1 + 88);
            if (a3)
            {
              if (v71)
              {
                v72 = *(_QWORD *)(a1 + 40);
                if (*(_QWORD *)(a1 + 104) < v72)
                  v72 = *(_QWORD *)(a1 + 104);
                v73 = objc_msgSend(v71, "nextIntWithUpperBound:", (int)v72);
                v74 = *(char **)(a1 + 32);
                v75 = v74 != v44;
                if (v74 != v44 && v73 >= 1)
                {
                  v76 = 1;
                  do
                  {
                    v74 = (char *)*((_QWORD *)v74 + 1);
                    v75 = v74 != v44;
                    v77 = v74 != v44 && v76++ < v73;
                  }
                  while (v77);
                }
                if (!v75)
                {
LABEL_123:
                  v7 = 0;
LABEL_140:
                  GKCMinmaxStrategist::clearData((GKCMinmaxStrategist *)a1);

                  goto LABEL_141;
                }
LABEL_133:
                v7 = *((id *)v74 + 2);
                goto LABEL_140;
              }
            }
            else if (v71)
            {
              v78 = *(_QWORD *)(a1 + 32);
              v79 = *(_QWORD *)(v78 + 24);
              __p = 0;
              v90 = 0;
              v91 = 0;
              if ((char *)v78 == v44)
              {
                v82 = 0;
                v80 = 0;
              }
              else
              {
                v80 = 0;
                while (*(_QWORD *)(v78 + 24) >= v79)
                {
                  v81 = (id *)(v78 + 16);
                  if ((unint64_t)v80 < v91)
                  {
                    *(_QWORD *)v80 = *v81;
                    v80 += 8;
                    v90 = v80;
                    v78 = *(_QWORD *)(v78 + 8);
                    if ((char *)v78 == v44)
                      break;
                  }
                  else
                  {
                    v80 = (char *)std::vector<NSObject * {__strong}>::__push_back_slow_path<NSObject * const {__strong}&>(&__p, v81);
                    v90 = v80;
                    v78 = *(_QWORD *)(v78 + 8);
                    if ((char *)v78 == v44)
                      break;
                  }
                }
                v71 = *(void **)(a1 + 88);
                v82 = __p;
              }
              v83 = objc_msgSend(v71, "nextIntWithUpperBound:", (int)((v80 - v82) >> 3));
              v84 = (char *)__p;
              v7 = *((id *)__p + v83);
              if (v84)
              {
                v85 = v90;
                v86 = v84;
                if (v90 != v84)
                {
                  do
                  {
                    v87 = (void *)*((_QWORD *)v85 - 1);
                    v85 -= 8;

                  }
                  while (v85 != v84);
                  v86 = __p;
                }
                v90 = v84;
                operator delete(v86);
              }
              goto LABEL_140;
            }
            v74 = *(char **)(a1 + 32);
            goto LABEL_133;
          }
          do
          {
LABEL_15:
            v15 = *(void **)(v14 - 8);
            v14 -= 8;

          }
          while (v14 != v13);
          v12 = *(_QWORD *)(a1 + 96);
          v14 = *(_QWORD *)a1;
          *(_QWORD *)(a1 + 8) = v13;
          v16 = (v13 - v14) >> 3;
          v17 = v12 >= v16;
          v18 = v12 - v16;
          if (v12 > v16)
            goto LABEL_22;
          goto LABEL_17;
        }
      }
      else
      {
        v12 = *(_QWORD *)(a1 + 96);
        if (v12 > 0)
          goto LABEL_10;
      }
      v12 = 1;
      *(_QWORD *)(a1 + 96) = 1;
      v13 = *(_QWORD *)a1;
      v14 = *(_QWORD *)(a1 + 8);
      if (v14 == *(_QWORD *)a1)
        goto LABEL_21;
      goto LABEL_15;
    }
LABEL_12:
    v7 = 0;
  }
LABEL_141:

  return v7;
}

void sub_227B6D02C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);
  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);

  _Unwind_Resume(a1);
}

void sub_227B6D0C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B6D0D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B6D0EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B6D100(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B6D114(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B6D124(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B6D1D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B6D1F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B6D204(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B6D2C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B6D2D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B6D2EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void GKCMinmaxStrategist::~GKCMinmaxStrategist(id *this)
{
  char *v2;
  char *v3;
  id v4;
  char *v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  GKCMinmaxStrategist *v9;
  uint64_t v10;
  GKCMinmaxStrategist *v11;
  char *v12;
  char *v13;
  id v14;
  void *v15;

  v2 = (char *)this[6];
  if (v2)
  {
    v3 = (char *)this[7];
    v4 = this[6];
    if (v3 != v2)
    {
      v5 = (char *)this[7];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = this[6];
    }
    this[7] = v2;
    operator delete(v4);
  }
  if (this[5])
  {
    v8 = this[3];
    v9 = (GKCMinmaxStrategist *)this[4];
    v10 = *(_QWORD *)v9;
    *(_QWORD *)(v10 + 8) = v8[1];
    *(_QWORD *)v8[1] = v10;
    this[5] = 0;
    if (v9 != (GKCMinmaxStrategist *)(this + 3))
    {
      do
      {
        v11 = (GKCMinmaxStrategist *)*((_QWORD *)v9 + 1);

        operator delete(v9);
        v9 = v11;
      }
      while (v11 != (GKCMinmaxStrategist *)(this + 3));
    }
  }
  v12 = (char *)*this;
  if (*this)
  {
    v13 = (char *)this[1];
    v14 = *this;
    if (v13 != v12)
    {
      do
      {
        v15 = (void *)*((_QWORD *)v13 - 1);
        v13 -= 8;

      }
      while (v13 != v12);
      v14 = *this;
    }
    this[1] = v12;
    operator delete(v14);
  }
}

double GKCMinmaxStrategist::clearData(GKCMinmaxStrategist *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  GKCMinmaxStrategist *v6;
  uint64_t v7;
  GKCMinmaxStrategist *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  double result;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  if (v3 != *(_QWORD *)this)
  {
    do
    {
      v4 = *(void **)(v3 - 8);
      v3 -= 8;

    }
    while (v3 != v2);
  }
  *((_QWORD *)this + 1) = v2;
  if (*((_QWORD *)this + 5))
  {
    v5 = *((_QWORD *)this + 3);
    v6 = (GKCMinmaxStrategist *)*((_QWORD *)this + 4);
    v7 = *(_QWORD *)v6;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v7;
    *((_QWORD *)this + 5) = 0;
    if (v6 != (GKCMinmaxStrategist *)((char *)this + 24))
    {
      do
      {
        v8 = (GKCMinmaxStrategist *)*((_QWORD *)v6 + 1);

        operator delete(v6);
        v6 = v8;
      }
      while (v8 != (GKCMinmaxStrategist *)((char *)this + 24));
    }
  }
  v10 = *((_QWORD *)this + 6);
  v9 = *((_QWORD *)this + 7);
  if (v9 != v10)
  {
    v11 = *((_QWORD *)this + 7);
    do
    {
      v13 = *(void **)(v11 - 24);
      v11 -= 24;
      v12 = v13;
      if (v13)
      {
        *(_QWORD *)(v9 - 16) = v12;
        operator delete(v12);
      }
      v9 = v11;
    }
    while (v11 != v10);
  }
  *((_QWORD *)this + 7) = v10;
  v14 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;

  *((_QWORD *)this + 14) = 0;
  result = 0.0;
  *((_OWORD *)this + 9) = xmmword_227BC0000;
  *((_OWORD *)this + 10) = xmmword_227BC0010;
  *((_QWORD *)this + 22) = -1;
  return result;
}

uint64_t GKCMinmaxStrategist::findBestMove2Player(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t i;
  void *v22;
  uint64_t BestMove2Player;
  BOOL v24;
  uint64_t v25;
  void *v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;

  v13 = a2;
  v14 = v13;
  ++*(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 184) && (objc_msgSend(v13, "isWinForPlayer:", *(_QWORD *)(a1 + 80)) & 1) != 0)
  {
    v15 = 1;
  }
  else if (*(_BYTE *)(a1 + 185) && (objc_msgSend(v14, "isLossForPlayer:", *(_QWORD *)(a1 + 80)) & 1) != 0)
  {
    v15 = -1;
  }
  else
  {
    v15 = 0;
  }
  *a6 = v15;
  *a7 = *(_QWORD *)(a1 + 96) - a3;
  if (*a6 == 1)
  {
    v16 = 0x1000000;
    goto LABEL_47;
  }
  if (*a6 != -1)
  {
    if (a3 <= 0)
    {
      v16 = objc_msgSend(v14, "scoreForPlayer:", *(_QWORD *)(a1 + 80));
      goto LABEL_47;
    }
    objc_msgSend(v14, "activePlayer");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v17, "playerId");
    v30 = objc_msgSend(*(id *)(a1 + 80), "playerId");
    if (v32 == v30)
      v16 = 0x8000000000000000;
    else
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    objc_msgSend(v14, "gameModelUpdatesForPlayer:", v17);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v33, "count");
    if (v18)
    {
      v31 = v18;
      v27 = v17;
      v28 = v14;
      v29 = a7;
      *a7 = *(_QWORD *)(a1 + 96) + 1;
      v34 = 0;
      v35 = 0;
      v19 = *(id *)(*(_QWORD *)a1 + 8 * a3 - 8);
      if (*(_BYTE *)(a1 + 186))
      {
        v20 = v14;

        v19 = v20;
      }
      if (v31 >= 1)
      {
        for (i = 0; v31 != i; ++i)
        {
          if (!*(_BYTE *)(a1 + 186))
            objc_msgSend(v19, "setGameModel:", v28);
          objc_msgSend(v33, "objectAtIndexedSubscript:", i, v27);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v19, "applyGameModelUpdate:", v22);
          BestMove2Player = GKCMinmaxStrategist::findBestMove2Player(a1, v19, a3 - 1, a4, a5, &v35, &v34);
          objc_msgSend(v22, "setValue:", BestMove2Player);
          if (*(_BYTE *)(a1 + 186))
            objc_msgSend(v19, "unapplyGameModelUpdate:", v22);
          if (v32 == v30)
          {
            if (BestMove2Player > a4)
              a4 = BestMove2Player;
            v24 = BestMove2Player == v16;
            if (BestMove2Player > v16)
              goto LABEL_29;
          }
          else
          {
            if (BestMove2Player < a5)
              a5 = BestMove2Player;
            v24 = BestMove2Player == v16;
            if (BestMove2Player < v16)
            {
LABEL_29:
              v25 = v34;
LABEL_30:
              *a6 = v35;
              *v29 = v25;
              v16 = BestMove2Player;
              goto LABEL_37;
            }
          }
          if (v24)
          {
            v25 = v34;
            if (v34 < *v29)
              goto LABEL_30;
          }
LABEL_37:
          if (*(_QWORD *)(a1 + 96) == a3)
            GKCMinmaxStrategist::addMoveToConsideredMoves((_QWORD *)a1, v22, BestMove2Player, v35, v34);
          if (a5 <= a4)
          {
            *(_QWORD *)(a1 + 136) += v31 + ~i;

            break;
          }

        }
      }

      v17 = v27;
      v14 = v28;
    }
    else
    {
      v16 = objc_msgSend(v14, "scoreForPlayer:", *(_QWORD *)(a1 + 80));
    }

    goto LABEL_47;
  }
  v16 = -16777216;
LABEL_47:

  return v16;
}

void sub_227B6D818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v19;

  v19 = v17;

  _Unwind_Resume(a1);
}

void GKCMinmaxStrategist::findBestMoveNPlayer(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t *v33;
  void *v34;
  uint64_t v36;
  uint64_t v37;

  v8 = a2;
  v9 = v8;
  ++*(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 184) && (objc_msgSend(v8, "isWinForPlayer:", *(_QWORD *)(a1 + 80)) & 1) != 0)
  {
    v10 = 1;
  }
  else if (*(_BYTE *)(a1 + 185) && (objc_msgSend(v9, "isLossForPlayer:", *(_QWORD *)(a1 + 80)) & 1) != 0)
  {
    v10 = -1;
  }
  else
  {
    v10 = 0;
  }
  *a4 = v10;
  *a5 = *(_QWORD *)(a1 + 96) - a3;
  if (a3 < 1 || *a4)
  {
    GKCMinmaxStrategist::getScores(a1, v9, a3);
  }
  else
  {
    objc_msgSend(v9, "activePlayer");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "gameModelUpdatesForPlayer:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "count");
    if (v13)
    {
      v34 = v12;
      v36 = 0;
      v37 = 0;
      v14 = *(id *)(*(_QWORD *)a1 + 8 * a3 - 8);
      if (*(_BYTE *)(a1 + 186))
      {
        v15 = v9;

        v14 = v15;
      }
      v16 = *(_QWORD *)(a1 + 48);
      v32 = v9;
      objc_msgSend(*(id *)(a1 + 72), "players", v11);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v17, "indexOfObject:", v11);
      v33 = a4;
      v19 = (uint64_t *)(v16 + 24 * a3);

      if (*(uint64_t *)(a1 + 120) >= 1)
      {
        v20 = 0;
        v21 = *v19;
        do
          *(_QWORD *)(v21 + 8 * v20++) = 0x8000000000000000;
        while (v20 < *(_QWORD *)(a1 + 120));
      }
      if (v13 >= 1)
      {
        v22 = 0;
        v23 = 8 * v18;
        do
        {
          if (!*(_BYTE *)(a1 + 186))
            objc_msgSend(v14, "setGameModel:", v32);
          objc_msgSend(v34, "objectAtIndexedSubscript:", v22);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "applyGameModelUpdate:", v24);
          GKCMinmaxStrategist::findBestMoveNPlayer(a1, v14, a3 - 1, &v37, &v36);
          v25 = *(_QWORD *)(a1 + 48);
          if (*(_BYTE *)(a1 + 186))
            objc_msgSend(v14, "unapplyGameModelUpdate:", v24);
          v26 = *(_QWORD *)(v25 + 24 * a3 - 24);
          v27 = *(_QWORD *)(v26 + v23);
          v28 = *v19;
          v29 = *(_QWORD *)(*v19 + v23);
          if (v27 > v29 || v27 == v29 && v36 < *a5)
          {
            if (*(uint64_t *)(a1 + 120) >= 1)
            {
              v30 = 0;
              do
              {
                *(_QWORD *)(v28 + 8 * v30) = *(_QWORD *)(v26 + 8 * v30);
                ++v30;
              }
              while (v30 < *(_QWORD *)(a1 + 120));
            }
            *v33 = v37;
            *a5 = v36;
          }
          objc_msgSend(v24, "setValue:", v27);
          if (*(_QWORD *)(a1 + 96) == a3)
            GKCMinmaxStrategist::addMoveToConsideredMoves((_QWORD *)a1, v24, v27, v37, v36);

          ++v22;
        }
        while (v22 != v13);
      }

      v11 = v31;
      v9 = v32;
      v12 = v34;
    }
    else
    {
      GKCMinmaxStrategist::getScores(a1, v9, a3);
    }

  }
}

void sub_227B6DBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void std::vector<objc_object  {objcproto11GKGameModel}* {__strong}>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  void *v28;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v5)
LABEL_27:
        operator delete(v6);
    }
    else
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x78
        || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_34;
      }
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= v20;
      v6 = &v5[-v20];
      v21 = v5 - 16;
      v22 = &v13[8 * v9 - 16];
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *((_OWORD *)v21 - 1);
        v24 = *(_OWORD *)v21;
        *((_OWORD *)v21 - 1) = 0uLL;
        *(_OWORD *)v21 = 0uLL;
        *((_OWORD *)v22 - 1) = v25;
        *(_OWORD *)v22 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          v26 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v14 - 1) = v26;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v27 = (char *)*a1;
      v6 = (char *)a1[1];
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v6 != v27)
      {
        do
        {
          v28 = (void *)*((_QWORD *)v6 - 1);
          v6 -= 8;

        }
        while (v6 != v27);
        v6 = v27;
      }
      if (v6)
        goto LABEL_27;
    }
  }
}

void GKCMinmaxStrategist::addMoveToConsideredMoves(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;

  v9 = a2;
  v10 = operator new(0x30uLL);
  v12 = v9;
  v10[2] = v12;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  v11 = a1[3];
  a1 += 3;
  *v10 = v11;
  v10[1] = a1;
  *(_QWORD *)(v11 + 8) = v10;
  *a1 = v10;
  ++a1[2];

}

void sub_227B6DEEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<std::vector<long>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_24:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v19 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v19)
      {
        v20 = v5;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v5 - 2) = v21;
            operator delete(v21);
          }
          v5 = v20;
        }
        while (v20 != v19);
        v5 = v19;
      }
      if (v5)
        goto LABEL_24;
    }
  }
}

void std::vector<long>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void GKCMinmaxStrategist::getScores(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 72), "players");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  v8 = (_QWORD *)(v5 + 24 * a3);
  while (v7 < objc_msgSend(v6, "count"))
  {
    objc_msgSend(v6, "objectAtIndexedSubscript:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(*v8 + 8 * v7) = objc_msgSend(v10, "scoreForPlayer:", v9);

    ++v7;
  }

}

void sub_227B6E334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B6E348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_227B6E364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t *std::list<GKCMoveData>::__sort<GKCMinmaxStrategist::findBestMoveForPlayer(objc_object  {objcproto17GKGameModelPlayer}*,BOOL)::{lambda(GKCMoveData const&,GKCMoveData const)#1}>(uint64_t *result, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  if (a3 < 2)
    return result;
  if (a3 == 2)
  {
    v5 = (uint64_t *)*a2;
    if (*(_QWORD *)(*a2 + 32) > result[4])
    {
      v6 = *v5;
      *(_QWORD *)(v6 + 8) = v5[1];
      *(_QWORD *)v5[1] = v6;
      v7 = *result;
      *(_QWORD *)(v7 + 8) = v5;
      *v5 = v7;
      *result = (uint64_t)v5;
      v5[1] = (uint64_t)result;
      return v5;
    }
    return result;
  }
  v10 = a3 >> 1;
  v11 = (a3 >> 1) + 1;
  v12 = result;
  do
  {
    v12 = (uint64_t *)v12[1];
    --v11;
  }
  while (v11 > 1);
  v13 = (uint64_t *)std::list<GKCMoveData>::__sort<GKCMinmaxStrategist::findBestMoveForPlayer(objc_object  {objcproto17GKGameModelPlayer}*,BOOL)::{lambda(GKCMoveData const&,GKCMoveData const)#1}>(result, v12, a3 >> 1, a4);
  result = (uint64_t *)std::list<GKCMoveData>::__sort<GKCMinmaxStrategist::findBestMoveForPlayer(objc_object  {objcproto17GKGameModelPlayer}*,BOOL)::{lambda(GKCMoveData const&,GKCMoveData const)#1}>(v12, a2, a3 - v10, a4);
  v14 = v13[4];
  if (result[4] <= v14)
  {
    v18 = (uint64_t *)v13[1];
    v15 = result;
    result = v13;
    if (v18 == v15)
      return result;
    goto LABEL_15;
  }
  v15 = (uint64_t *)result[1];
  if (v15 == a2)
  {
LABEL_11:
    v15 = a2;
  }
  else
  {
    while (v15[4] > v14)
    {
      v15 = (uint64_t *)v15[1];
      if (v15 == a2)
        goto LABEL_11;
    }
  }
  v16 = *v15;
  v17 = *result;
  *(_QWORD *)(v17 + 8) = *(_QWORD *)(*v15 + 8);
  **(_QWORD **)(v16 + 8) = v17;
  v19 = *v13;
  v18 = (uint64_t *)v13[1];
  *(_QWORD *)(v19 + 8) = result;
  *result = v19;
  *v13 = v16;
  *(_QWORD *)(v16 + 8) = v13;
  if (v18 != v15)
  {
LABEL_15:
    if (v15 != a2)
    {
      v20 = v15;
      do
      {
        v21 = v18[4];
        if (v15[4] <= v21)
        {
          v18 = (uint64_t *)v18[1];
          if (v18 == v20)
            return result;
        }
        else
        {
          v22 = (uint64_t *)v15[1];
          if (v22 == a2)
          {
LABEL_21:
            v22 = a2;
          }
          else
          {
            while (v22[4] > v21)
            {
              v22 = (uint64_t *)v22[1];
              if (v22 == a2)
                goto LABEL_21;
            }
          }
          v23 = *v22;
          v24 = *v15;
          *(_QWORD *)(v24 + 8) = *(_QWORD *)(*v22 + 8);
          **(_QWORD **)(v23 + 8) = v24;
          if (v20 == v15)
            v20 = v22;
          v26 = *v18;
          v25 = (uint64_t *)v18[1];
          *(_QWORD *)(v26 + 8) = v15;
          *v15 = v26;
          *v18 = v23;
          *(_QWORD *)(v23 + 8) = v18;
          v18 = v25;
          v15 = v22;
          if (v25 == v20)
            return result;
        }
      }
      while (v15 != a2);
    }
  }
  return result;
}

uint64_t *std::list<GKCMoveData>::__sort<GKCMinmaxStrategist::findBestMoveForPlayer(objc_object  {objcproto17GKGameModelPlayer}*,BOOL)::{lambda(GKCMoveData const&,GKCMoveData const)#2}>(uint64_t *result, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  if (a3 < 2)
    return result;
  if (a3 == 2)
  {
    v5 = (uint64_t *)*a2;
    if (*(_QWORD *)(*a2 + 40) < result[5])
    {
      v6 = *v5;
      *(_QWORD *)(v6 + 8) = v5[1];
      *(_QWORD *)v5[1] = v6;
      v7 = *result;
      *(_QWORD *)(v7 + 8) = v5;
      *v5 = v7;
      *result = (uint64_t)v5;
      v5[1] = (uint64_t)result;
      return v5;
    }
    return result;
  }
  v10 = a3 >> 1;
  v11 = (a3 >> 1) + 1;
  v12 = result;
  do
  {
    v12 = (uint64_t *)v12[1];
    --v11;
  }
  while (v11 > 1);
  v13 = (uint64_t *)std::list<GKCMoveData>::__sort<GKCMinmaxStrategist::findBestMoveForPlayer(objc_object  {objcproto17GKGameModelPlayer}*,BOOL)::{lambda(GKCMoveData const&,GKCMoveData const)#2}>(result, v12, a3 >> 1, a4);
  result = (uint64_t *)std::list<GKCMoveData>::__sort<GKCMinmaxStrategist::findBestMoveForPlayer(objc_object  {objcproto17GKGameModelPlayer}*,BOOL)::{lambda(GKCMoveData const&,GKCMoveData const)#2}>(v12, a2, a3 - v10, a4);
  v14 = v13[5];
  if (result[5] >= v14)
  {
    v18 = (uint64_t *)v13[1];
    v15 = result;
    result = v13;
    if (v18 == v15)
      return result;
    goto LABEL_15;
  }
  v15 = (uint64_t *)result[1];
  if (v15 == a2)
  {
LABEL_11:
    v15 = a2;
  }
  else
  {
    while (v15[5] < v14)
    {
      v15 = (uint64_t *)v15[1];
      if (v15 == a2)
        goto LABEL_11;
    }
  }
  v16 = *v15;
  v17 = *result;
  *(_QWORD *)(v17 + 8) = *(_QWORD *)(*v15 + 8);
  **(_QWORD **)(v16 + 8) = v17;
  v19 = *v13;
  v18 = (uint64_t *)v13[1];
  *(_QWORD *)(v19 + 8) = result;
  *result = v19;
  *v13 = v16;
  *(_QWORD *)(v16 + 8) = v13;
  if (v18 != v15)
  {
LABEL_15:
    if (v15 != a2)
    {
      v20 = v15;
      do
      {
        v21 = v18[5];
        if (v15[5] >= v21)
        {
          v18 = (uint64_t *)v18[1];
          if (v18 == v20)
            return result;
        }
        else
        {
          v22 = (uint64_t *)v15[1];
          if (v22 == a2)
          {
LABEL_21:
            v22 = a2;
          }
          else
          {
            while (v22[5] < v21)
            {
              v22 = (uint64_t *)v22[1];
              if (v22 == a2)
                goto LABEL_21;
            }
          }
          v23 = *v22;
          v24 = *v15;
          *(_QWORD *)(v24 + 8) = *(_QWORD *)(*v22 + 8);
          **(_QWORD **)(v23 + 8) = v24;
          if (v20 == v15)
            v20 = v22;
          v26 = *v18;
          v25 = (uint64_t *)v18[1];
          *(_QWORD *)(v26 + 8) = v15;
          *v15 = v26;
          *v18 = v23;
          *(_QWORD *)(v23 + 8) = v18;
          v18 = v25;
          v15 = v22;
          if (v25 == v20)
            return result;
        }
      }
      while (v15 != a2);
    }
  }
  return result;
}

uint64_t *std::list<GKCMoveData>::__sort<GKCMinmaxStrategist::findBestMoveForPlayer(objc_object  {objcproto17GKGameModelPlayer}*,BOOL)::{lambda(GKCMoveData const&,GKCMoveData const)#3}>(uint64_t *result, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  if (a3 < 2)
    return result;
  if (a3 == 2)
  {
    v5 = (uint64_t *)*a2;
    if (*(_QWORD *)(*a2 + 40) > result[5])
    {
      v6 = *v5;
      *(_QWORD *)(v6 + 8) = v5[1];
      *(_QWORD *)v5[1] = v6;
      v7 = *result;
      *(_QWORD *)(v7 + 8) = v5;
      *v5 = v7;
      *result = (uint64_t)v5;
      v5[1] = (uint64_t)result;
      return v5;
    }
    return result;
  }
  v10 = a3 >> 1;
  v11 = (a3 >> 1) + 1;
  v12 = result;
  do
  {
    v12 = (uint64_t *)v12[1];
    --v11;
  }
  while (v11 > 1);
  v13 = (uint64_t *)std::list<GKCMoveData>::__sort<GKCMinmaxStrategist::findBestMoveForPlayer(objc_object  {objcproto17GKGameModelPlayer}*,BOOL)::{lambda(GKCMoveData const&,GKCMoveData const)#3}>(result, v12, a3 >> 1, a4);
  result = (uint64_t *)std::list<GKCMoveData>::__sort<GKCMinmaxStrategist::findBestMoveForPlayer(objc_object  {objcproto17GKGameModelPlayer}*,BOOL)::{lambda(GKCMoveData const&,GKCMoveData const)#3}>(v12, a2, a3 - v10, a4);
  v14 = v13[5];
  if (result[5] <= v14)
  {
    v18 = (uint64_t *)v13[1];
    v15 = result;
    result = v13;
    if (v18 == v15)
      return result;
    goto LABEL_15;
  }
  v15 = (uint64_t *)result[1];
  if (v15 == a2)
  {
LABEL_11:
    v15 = a2;
  }
  else
  {
    while (v15[5] > v14)
    {
      v15 = (uint64_t *)v15[1];
      if (v15 == a2)
        goto LABEL_11;
    }
  }
  v16 = *v15;
  v17 = *result;
  *(_QWORD *)(v17 + 8) = *(_QWORD *)(*v15 + 8);
  **(_QWORD **)(v16 + 8) = v17;
  v19 = *v13;
  v18 = (uint64_t *)v13[1];
  *(_QWORD *)(v19 + 8) = result;
  *result = v19;
  *v13 = v16;
  *(_QWORD *)(v16 + 8) = v13;
  if (v18 != v15)
  {
LABEL_15:
    if (v15 != a2)
    {
      v20 = v15;
      do
      {
        v21 = v18[5];
        if (v15[5] <= v21)
        {
          v18 = (uint64_t *)v18[1];
          if (v18 == v20)
            return result;
        }
        else
        {
          v22 = (uint64_t *)v15[1];
          if (v22 == a2)
          {
LABEL_21:
            v22 = a2;
          }
          else
          {
            while (v22[5] > v21)
            {
              v22 = (uint64_t *)v22[1];
              if (v22 == a2)
                goto LABEL_21;
            }
          }
          v23 = *v22;
          v24 = *v15;
          *(_QWORD *)(v24 + 8) = *(_QWORD *)(*v22 + 8);
          **(_QWORD **)(v23 + 8) = v24;
          if (v20 == v15)
            v20 = v22;
          v26 = *v18;
          v25 = (uint64_t *)v18[1];
          *(_QWORD *)(v26 + 8) = v15;
          *v15 = v26;
          *v18 = v23;
          *(_QWORD *)(v23 + 8) = v18;
          v18 = v25;
          v15 = v22;
          if (v25 == v20)
            return result;
        }
      }
      while (v15 != a2);
    }
  }
  return result;
}

uint64_t *std::list<GKCMoveData>::__sort<GKCMinmaxStrategist::findBestMoveForPlayer(objc_object  {objcproto17GKGameModelPlayer}*,BOOL)::{lambda(GKCMoveData const&,GKCMoveData const)#5}>(uint64_t *result, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  if (a3 < 2)
    return result;
  if (a3 == 2)
  {
    v5 = (uint64_t *)*a2;
    if (*(_QWORD *)(*a2 + 24) > result[3])
    {
      v6 = *v5;
      *(_QWORD *)(v6 + 8) = v5[1];
      *(_QWORD *)v5[1] = v6;
      v7 = *result;
      *(_QWORD *)(v7 + 8) = v5;
      *v5 = v7;
      *result = (uint64_t)v5;
      v5[1] = (uint64_t)result;
      return v5;
    }
    return result;
  }
  v10 = a3 >> 1;
  v11 = (a3 >> 1) + 1;
  v12 = result;
  do
  {
    v12 = (uint64_t *)v12[1];
    --v11;
  }
  while (v11 > 1);
  v13 = (uint64_t *)std::list<GKCMoveData>::__sort<GKCMinmaxStrategist::findBestMoveForPlayer(objc_object  {objcproto17GKGameModelPlayer}*,BOOL)::{lambda(GKCMoveData const&,GKCMoveData const)#5}>(result, v12, a3 >> 1, a4);
  result = (uint64_t *)std::list<GKCMoveData>::__sort<GKCMinmaxStrategist::findBestMoveForPlayer(objc_object  {objcproto17GKGameModelPlayer}*,BOOL)::{lambda(GKCMoveData const&,GKCMoveData const)#5}>(v12, a2, a3 - v10, a4);
  v14 = v13[3];
  if (result[3] <= v14)
  {
    v18 = (uint64_t *)v13[1];
    v15 = result;
    result = v13;
    if (v18 == v15)
      return result;
    goto LABEL_15;
  }
  v15 = (uint64_t *)result[1];
  if (v15 == a2)
  {
LABEL_11:
    v15 = a2;
  }
  else
  {
    while (v15[3] > v14)
    {
      v15 = (uint64_t *)v15[1];
      if (v15 == a2)
        goto LABEL_11;
    }
  }
  v16 = *v15;
  v17 = *result;
  *(_QWORD *)(v17 + 8) = *(_QWORD *)(*v15 + 8);
  **(_QWORD **)(v16 + 8) = v17;
  v19 = *v13;
  v18 = (uint64_t *)v13[1];
  *(_QWORD *)(v19 + 8) = result;
  *result = v19;
  *v13 = v16;
  *(_QWORD *)(v16 + 8) = v13;
  if (v18 != v15)
  {
LABEL_15:
    if (v15 != a2)
    {
      v20 = v15;
      do
      {
        v21 = v18[3];
        if (v15[3] <= v21)
        {
          v18 = (uint64_t *)v18[1];
          if (v18 == v20)
            return result;
        }
        else
        {
          v22 = (uint64_t *)v15[1];
          if (v22 == a2)
          {
LABEL_21:
            v22 = a2;
          }
          else
          {
            while (v22[3] > v21)
            {
              v22 = (uint64_t *)v22[1];
              if (v22 == a2)
                goto LABEL_21;
            }
          }
          v23 = *v22;
          v24 = *v15;
          *(_QWORD *)(v24 + 8) = *(_QWORD *)(*v22 + 8);
          **(_QWORD **)(v23 + 8) = v24;
          if (v20 == v15)
            v20 = v22;
          v26 = *v18;
          v25 = (uint64_t *)v18[1];
          *(_QWORD *)(v26 + 8) = v15;
          *v15 = v26;
          *v18 = v23;
          *(_QWORD *)(v23 + 8) = v18;
          v18 = v25;
          v15 = v22;
          if (v25 == v20)
            return result;
        }
      }
      while (v15 != a2);
    }
  }
  return result;
}

void sub_227B6EBA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B6ECA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B6ED20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t p2t::SweepContext::SweepContext(uint64_t a1, char **a2)
{
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v8;
  char *v9;
  char *v10;

  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 104) = a1 + 104;
  *(_QWORD *)(a1 + 112) = a1 + 104;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if ((char **)(a1 + 128) == a2)
  {
    v6 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  else
  {
    std::vector<p2t::Point *>::__assign_with_size[abi:ne180100]<p2t::Point **,p2t::Point **>((_QWORD *)(a1 + 128), *a2, a2[1], (a2[1] - *a2) >> 3);
    v4 = *(_BYTE **)(a1 + 128);
    v3 = *(_BYTE **)(a1 + 136);
    v9 = 0;
    v10 = 0;
    v8 = 0;
    v5 = v3 - v4;
    if (v3 == v4)
    {
      v6 = 0;
    }
    else
    {
      if (v5 < 0)
        _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
      v6 = (char *)operator new(v3 - v4);
      v8 = v6;
      v10 = &v6[8 * (v5 >> 3)];
      memcpy(v6, v4, v5);
      v9 = v10;
    }
  }
  p2t::SweepContext::InitEdges((char **)a1, &v8);
  if (v6)
  {
    v9 = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_227B6EFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  uint64_t *v12;
  void **v13;
  void **v14;
  void *v16;
  void *v17;
  void *v18;

  v16 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v11 + 136) = v16;
    operator delete(v16);
    std::list<p2t::Triangle *>::~list(v12);
    v17 = *v14;
    if (!*v14)
    {
LABEL_3:
      v18 = *(void **)v11;
      if (!*(_QWORD *)v11)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    std::list<p2t::Triangle *>::~list(v12);
    v17 = *v14;
    if (!*v14)
      goto LABEL_3;
  }
  *(_QWORD *)(v11 + 88) = v17;
  operator delete(v17);
  v18 = *(void **)v11;
  if (!*(_QWORD *)v11)
LABEL_4:
    _Unwind_Resume(a1);
LABEL_7:
  *(_QWORD *)(v11 + 8) = v18;
  operator delete(v18);
  _Unwind_Resume(a1);
}

void p2t::SweepContext::InitEdges(char **a1, _QWORD *a2)
{
  unint64_t v2;
  char **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  p2t::Edge *v10;
  p2t::Edge *v11;
  uint64_t v12;
  unint64_t v13;
  p2t::Edge **v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  p2t::Edge **v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  p2t::Edge **v24;
  char *v25;
  p2t::Edge **v26;
  uint64_t v27;
  __int128 v28;
  p2t::Edge *v29;
  unint64_t v31;

  v2 = a2[1] - *a2;
  if ((int)(v2 >> 3) >= 1)
  {
    v4 = a1;
    v5 = 0;
    v6 = (uint64_t)((v2 << 29) - 0x100000000) >> 32;
    v7 = (v2 >> 3);
    while (1)
    {
      v9 = v5++;
      v10 = (p2t::Edge *)operator new();
      v11 = v10;
      v12 = v9 >= v6 ? 0 : v5;
      p2t::Edge::Edge(v10, *(Point **)(*a2 + 8 * v9), *(Point **)(*a2 + 8 * v12));
      v14 = (p2t::Edge **)v4[1];
      v13 = (unint64_t)v4[2];
      if ((unint64_t)v14 >= v13)
        break;
      *v14 = v11;
      v8 = (uint64_t)(v14 + 1);
LABEL_4:
      v4[1] = (char *)v8;
      if (v5 == v7)
        return;
    }
    v15 = *v4;
    v16 = ((char *)v14 - v15) >> 3;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v18 = v13 - (_QWORD)v15;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    v31 = v17;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = (char *)operator new(8 * v17);
      v20 = (p2t::Edge **)&v19[8 * v16];
      *v20 = v11;
      v8 = (uint64_t)(v20 + 1);
      if (v14 != (p2t::Edge **)v15)
      {
LABEL_17:
        v21 = (char *)(v14 - 1) - v15;
        if (v21 < 0x58)
          goto LABEL_34;
        if ((unint64_t)(v15 - v19) < 0x20)
          goto LABEL_34;
        v22 = (v21 >> 3) + 1;
        v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        v24 = &v14[v23 / 0xFFFFFFFFFFFFFFF8];
        v20 = (p2t::Edge **)((char *)v20 - v23);
        v25 = &v19[8 * v16 - 16];
        v26 = v14 - 2;
        v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v28 = *(_OWORD *)v26;
          *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
          *(_OWORD *)v25 = v28;
          v25 -= 32;
          v26 -= 4;
          v27 -= 4;
        }
        while (v27);
        v14 = v24;
        if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_34:
          do
          {
            v29 = *--v14;
            *--v20 = v29;
          }
          while (v14 != (p2t::Edge **)v15);
        }
        v4 = a1;
        v14 = (p2t::Edge **)*a1;
        *a1 = (char *)v20;
        a1[1] = (char *)v8;
        a1[2] = &v19[8 * v31];
        if (!v14)
          goto LABEL_4;
LABEL_28:
        operator delete(v14);
        goto LABEL_4;
      }
    }
    else
    {
      v19 = 0;
      v20 = (p2t::Edge **)(8 * v16);
      *(_QWORD *)(8 * v16) = v11;
      v8 = 8 * v16 + 8;
      if (v14 != (p2t::Edge **)v15)
        goto LABEL_17;
    }
    v4 = a1;
    *a1 = (char *)v20;
    a1[1] = (char *)v8;
    a1[2] = &v19[8 * v31];
    if (!v14)
      goto LABEL_4;
    goto LABEL_28;
  }
}

void sub_227B6F288(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2A50A0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t *std::list<p2t::Triangle *>::~list(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void p2t::SweepContext::AddHole(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD *v31;
  char **v32;
  char *v33;
  char *v34;
  char *v35;

  v2 = a2;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v5 = (const void *)*a2;
  v4 = a2[1];
  v6 = v4 - *a2;
  if (v4 == *a2)
  {
    v7 = 0;
  }
  else
  {
    if (v6 < 0)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v7 = (char *)operator new(v4 - *a2);
    v33 = v7;
    v35 = &v7[8 * (v6 >> 3)];
    memcpy(v7, v5, v6);
    v34 = v35;
  }
  p2t::SweepContext::InitEdges((char **)a1, &v33);
  if (v7)
  {
    v34 = v7;
    operator delete(v7);
  }
  v8 = *v2;
  if (v2[1] != *v2)
  {
    v9 = 0;
    v10 = 0;
    v31 = v2;
    v32 = (char **)(a1 + 128);
    v11 = *(char **)(a1 + 136);
    while (1)
    {
      v13 = *(_QWORD *)(a1 + 144);
      if ((unint64_t)v11 >= v13)
        break;
      *(_QWORD *)v11 = *(_QWORD *)(v8 + 8 * v9);
      v12 = (uint64_t)(v11 + 8);
LABEL_10:
      *(_QWORD *)(a1 + 136) = v12;
      v8 = *v2;
      v11 = (char *)v12;
      v9 = ++v10;
      if (v10 >= (unint64_t)((uint64_t)(v2[1] - *v2) >> 3))
        return;
    }
    v14 = *v32;
    v15 = v11 - *v32;
    v16 = v15 >> 3;
    v17 = (v15 >> 3) + 1;
    if (v17 >> 61)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v18 = v13 - (_QWORD)v14;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v20 = operator new(8 * v19);
      v21 = &v20[8 * v16];
      *v21 = *(_QWORD *)(v8 + 8 * v9);
      v12 = (uint64_t)(v21 + 1);
      if (v11 == v14)
        goto LABEL_27;
    }
    else
    {
      v20 = 0;
      v21 = (_QWORD *)(8 * v16);
      *(_QWORD *)(8 * v16) = *(_QWORD *)(v8 + 8 * v9);
      v12 = 8 * v16 + 8;
      if (v11 == v14)
      {
LABEL_27:
        *(_QWORD *)(a1 + 128) = v21;
        *(_QWORD *)(a1 + 136) = v12;
        *(_QWORD *)(a1 + 144) = &v20[8 * v19];
        if (v11)
          operator delete(v11);
        v2 = v31;
        goto LABEL_10;
      }
    }
    v22 = v11 - 8 - v14;
    if (v22 >= 0x168)
    {
      if (&v20[v15 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] > &v20[v15 - 8])
      {
        v23 = v11;
      }
      else if (&v11[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] > v11 - 8)
      {
        v23 = v11;
      }
      else if ((unint64_t)(v11 - &v20[v15]) >= 0x20)
      {
        v25 = (v22 >> 3) + 1;
        v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        v23 = &v11[-v26];
        v21 = (_QWORD *)((char *)v21 - v26);
        v27 = &v20[8 * v16 - 16];
        v28 = (__int128 *)(v11 - 16);
        v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *v28;
          *(v27 - 1) = *(v28 - 1);
          *v27 = v30;
          v27 -= 2;
          v28 -= 2;
          v29 -= 4;
        }
        while (v29);
        if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_26;
      }
      else
      {
        v23 = v11;
      }
    }
    else
    {
      v23 = v11;
    }
    do
    {
      v24 = *((_QWORD *)v23 - 1);
      v23 -= 8;
      *--v21 = v24;
    }
    while (v23 != v14);
LABEL_26:
    v11 = *v32;
    goto LABEL_27;
  }
}

void sub_227B6F5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

void p2t::SweepContext::AddPoint(p2t::SweepContext *this, Point *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void **v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)*((_QWORD *)this + 17);
  v4 = *((_QWORD *)this + 18);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = (void **)((char *)this + 128);
  v9 = (char *)*((_QWORD *)this + 16);
  v10 = (v5 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v12 = v4 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v7 = (uint64_t)(v15 + 8);
    v17 = (char *)(v5 - v9);
    if (v5 == v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v16 = 0;
  *(_QWORD *)(8 * v10) = a2;
  v7 = 8 * v10 + 8;
  v17 = (char *)(v5 - v9);
  if (v5 != v9)
  {
LABEL_14:
    v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_28;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v20];
    v15 -= v20;
    v21 = &v14[8 * v10 - 16];
    v22 = (__int128 *)(v5 - 16);
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v25 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v6 != v9);
    }
    v6 = (char *)*v8;
  }
LABEL_21:
  *((_QWORD *)this + 16) = v15;
  *((_QWORD *)this + 17) = v7;
  *((_QWORD *)this + 18) = v16;
  if (v6)
    operator delete(v6);
LABEL_23:
  *((_QWORD *)this + 17) = v7;
}

_QWORD *p2t::SweepContext::GetTriangles@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = (_BYTE *)this[10];
  v3 = (_BYTE *)this[11];
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v6 = (char *)operator new(v3 - v4);
    *a2 = v6;
    v7 = &v6[8 * (v5 >> 3)];
    a2[2] = v7;
    this = memcpy(v6, v4, v5);
    a2[1] = v7;
  }
  return this;
}

void sub_227B6F7C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *p2t::SweepContext::GetMap@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = this + 13;
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  v3 = (_QWORD *)this[14];
  if (v3 != this + 13)
  {
    v5 = 0;
    v6 = a2;
    do
    {
      this = operator new(0x18uLL);
      v7 = v3[2];
      this[1] = a2;
      this[2] = v7;
      *this = v6;
      v6[1] = this;
      *a2 = this;
      a2[2] = ++v5;
      v3 = (_QWORD *)v3[1];
      v6 = this;
    }
    while (v3 != v2);
  }
  return this;
}

void sub_227B6F85C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (v3)
    p2t::SweepContext::GetMap((uint64_t **)(v1 + 8), v2, (_QWORD *)(v1 + 16), (uint64_t *)v1);
  _Unwind_Resume(exception_object);
}

uint64_t p2t::SweepContext::InitTriangulation(p2t::SweepContext *this)
{
  double **v2;
  double v3;
  double v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  int v10;
  double v11;
  double v12;
  unsigned int v13;
  double *v14;
  double v15;
  double **v16;
  unint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  int8x16_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  BOOL (*v39)(p2t *, const Point *, const Point *);

  v2 = (double **)*((_QWORD *)this + 16);
  v4 = **v2;
  v3 = (*v2)[1];
  v5 = *((_QWORD *)this + 17) - (_QWORD)v2;
  if (v5)
  {
    v6 = v5 >> 3;
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    if (v7 >= 2 && ((_DWORD)v7 ? (v8 = (v7 - 1) >> 32 == 0) : (v8 = 0), v8))
    {
      v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
      v10 = v7 & 0xFFFFFFFE;
      v16 = v2 + 1;
      v17 = v7 & 0xFFFFFFFFFFFFFFFELL;
      v18 = **v2;
      v19 = v18;
      v20 = v18;
      v21 = (*v2)[1];
      v22 = v21;
      v23 = v21;
      do
      {
        v24 = *(v16 - 1);
        v25 = v24[1];
        v4 = fmax(*v24, v4);
        v19 = fmin(*v24, v19);
        v26 = **v16;
        v27 = (*v16)[1];
        v18 = fmax(v26, v18);
        v20 = fmin(v26, v20);
        v3 = fmax(v25, v3);
        v21 = fmax(v27, v21);
        v22 = fmin(v25, v22);
        v23 = fmin(v27, v23);
        v16 += 2;
        v17 -= 2;
      }
      while (v17);
      v12 = fmin(v22, v23);
      v3 = fmax(v3, v21);
      v11 = fmin(v19, v20);
      v4 = fmax(v4, v18);
      if (v7 == v9)
        goto LABEL_18;
    }
    else
    {
      v9 = 0;
      v10 = 0;
      v11 = **v2;
      v12 = (*v2)[1];
    }
    v13 = v10 + 1;
    do
    {
      v14 = v2[v9];
      v15 = v14[1];
      v4 = fmax(*v14, v4);
      v11 = fmin(*v14, v11);
      v3 = fmax(v15, v3);
      v12 = fmin(v15, v12);
      v9 = v13++;
    }
    while (v6 > v9);
  }
  else
  {
    v12 = (*v2)[1];
    v11 = **v2;
  }
LABEL_18:
  v28 = (v4 - v11) * 0.3;
  v29 = v12 - v3;
  v30 = operator new();
  v31 = v28 + v4;
  v32 = v12 + v29 * 0.3;
  *(double *)v30 = v31;
  *(double *)(v30 + 8) = v32;
  *(_QWORD *)(v30 + 24) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  *(_QWORD *)(v30 + 16) = 0;
  *((_QWORD *)this + 20) = v30;
  v33 = operator new();
  v35 = *((_QWORD *)this + 16);
  v34 = (int8x16_t *)*((_QWORD *)this + 17);
  v36 = 126 - 2 * __clz(((uint64_t)v34->i64 - v35) >> 3);
  *(double *)v33 = v11 - v28;
  *(double *)(v33 + 8) = v32;
  *(_QWORD *)(v33 + 24) = 0;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)(v33 + 16) = 0;
  *((_QWORD *)this + 21) = v33;
  v39 = p2t::cmp;
  if (v34 == (int8x16_t *)v35)
    v37 = 0;
  else
    v37 = v36;
  return std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(p2t::Point const*,p2t::Point const*),p2t::Point**,false>(v35, v34, (unsigned int (**)(uint64_t))&v39, v37, 1);
}

BOOL p2t::cmp(p2t *this, const Point *a2, const Point *a3)
{
  double v3;
  double v4;

  v3 = *((double *)this + 1);
  v4 = *(double *)&a2[2].v;
  if (v3 < v4)
    return 1;
  return v3 == v4 && *(double *)this < *(double *)&a2->v;
}

uint64_t p2t::SweepContext::GetPoint(p2t::SweepContext *this, const int *a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 16) + 8 * *a2);
}

_QWORD *p2t::SweepContext::AddToMap(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = operator new(0x18uLL);
  v5 = a1[13];
  a1 += 13;
  result[1] = a1;
  result[2] = a2;
  *result = v5;
  *(_QWORD *)(v5 + 8) = result;
  *a1 = result;
  ++a1[2];
  return result;
}

uint64_t p2t::SweepContext::LocateNode(p2t::AdvancingFront **this, Point *a2)
{
  return p2t::AdvancingFront::LocateNode(this[19], (double *)&a2->v);
}

_QWORD *p2t::SweepContext::CreateAdvancingFront(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = (_QWORD *)operator new();
  p2t::Triangle::Triangle((uint64_t)v2, **(Point ***)(a1 + 128), *(Point **)(a1 + 168), *(Point **)(a1 + 160));
  v3 = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 104);
  v3[1] = a1 + 104;
  v3[2] = v2;
  *v3 = v4;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(a1 + 104) = v3;
  ++*(_QWORD *)(a1 + 120);
  v5 = (_QWORD *)operator new();
  v6 = (_QWORD *)v2[2];
  *v5 = v6;
  v5[1] = v2;
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = *v6;
  *(_QWORD *)(a1 + 176) = v5;
  v7 = (_QWORD *)operator new();
  v8 = (_QWORD *)v2[1];
  *v7 = v8;
  v7[1] = v2;
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = *v8;
  *(_QWORD *)(a1 + 184) = v7;
  v9 = (_QWORD *)operator new();
  v10 = (_QWORD *)v2[3];
  *v9 = v10;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = *v10;
  *(_QWORD *)(a1 + 192) = v9;
  v11 = (_QWORD *)operator new();
  result = p2t::AdvancingFront::AdvancingFront(v11, *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 192));
  *(_QWORD *)(a1 + 152) = v11;
  v14 = *(_QWORD *)(a1 + 176);
  v13 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(v14 + 16) = v13;
  v15 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(v13 + 16) = v15;
  *(_QWORD *)(v13 + 24) = v14;
  *(_QWORD *)(v15 + 24) = v13;
  return result;
}

void sub_227B6FC54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2A50A0](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void sub_227B6FC78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2A50A0](v1, 0x1020C403BE5E226);
  _Unwind_Resume(a1);
}

void p2t::SweepContext::RemoveNode(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x22E2A50A0);
}

uint64_t p2t::SweepContext::MapTriangleToNodes(uint64_t this, Point **a2, uint64_t a3)
{
  uint64_t v4;
  p2t::AdvancingFront *v5;
  Point *v6;
  p2t::AdvancingFront *v7;
  Point *v8;
  p2t::AdvancingFront *v9;
  Point *v10;

  v4 = this;
  if (!a2[4])
  {
    v5 = *(p2t::AdvancingFront **)(this + 152);
    v6 = p2t::Triangle::PointCW((p2t::Triangle *)a2, a2[1], a3);
    this = p2t::AdvancingFront::LocatePoint(v5, v6);
    if (this)
      *(_QWORD *)(this + 8) = a2;
  }
  if (!a2[5])
  {
    v7 = *(p2t::AdvancingFront **)(v4 + 152);
    v8 = p2t::Triangle::PointCW((p2t::Triangle *)a2, a2[2], a3);
    this = p2t::AdvancingFront::LocatePoint(v7, v8);
    if (this)
      *(_QWORD *)(this + 8) = a2;
  }
  if (!a2[6])
  {
    v9 = *(p2t::AdvancingFront **)(v4 + 152);
    v10 = p2t::Triangle::PointCW((p2t::Triangle *)a2, a2[3], a3);
    this = p2t::AdvancingFront::LocatePoint(v9, v10);
    if (this)
      *(_QWORD *)(this + 8) = a2;
  }
  return this;
}

_QWORD *p2t::SweepContext::RemoveFromMap(p2t::SweepContext *this, p2t::Triangle *a2)
{
  p2t::Triangle *v3;

  v3 = a2;
  return std::list<p2t::Triangle *>::remove((_QWORD *)this + 13, &v3);
}

_QWORD *std::list<p2t::Triangle *>::remove(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v22 = &v22;
  v23 = &v22;
  v2 = (_QWORD *)result[1];
  if (v2 == result)
    return result;
  if (&v22 == result)
  {
    while (1)
    {
      v13 = (_QWORD *)v2[1];
      v14 = v2[2];
      if (v14 == *a2)
        break;
LABEL_21:
      v2 = v13;
      if (v13 == result)
        return result;
    }
    if (v13 == result)
    {
      v15 = 1;
    }
    else
    {
      if (v13[2] != v14)
      {
LABEL_27:
        v15 = 0;
        if (v2 == v13)
        {
LABEL_32:
          if (!v15)
            v13 = (_QWORD *)v13[1];
          goto LABEL_21;
        }
LABEL_31:
        v16 = *v13;
        v17 = *v2;
        *(_QWORD *)(v17 + 8) = *(_QWORD *)(*v13 + 8);
        **(_QWORD **)(v16 + 8) = v17;
        v18 = *result;
        *(_QWORD *)(v18 + 8) = v2;
        *v2 = v18;
        *result = v16;
        *(_QWORD *)(v16 + 8) = result;
        goto LABEL_32;
      }
      while (1)
      {
        v13 = (_QWORD *)v13[1];
        v15 = v13 == result;
        if (v13 == result)
          break;
        if (v13[2] != v14)
          goto LABEL_27;
      }
    }
    v13 = result;
    if (v2 == result)
      goto LABEL_32;
    goto LABEL_31;
  }
  v3 = 0;
  do
  {
    v4 = (_QWORD *)v2[1];
    v5 = v2[2];
    if (v5 == *a2)
    {
      while (v4 != result)
      {
        v6 = v4[2] == v5;
        if (v4[2] != v5)
        {
          if (v2 != v4)
            goto LABEL_11;
LABEL_16:
          if (v6)
            goto LABEL_4;
          goto LABEL_20;
        }
        v4 = (_QWORD *)v4[1];
      }
      v6 = 1;
      v4 = result;
      if (v2 == result)
        goto LABEL_16;
LABEL_11:
      v7 = (_QWORD *)*v4;
      if ((_QWORD *)*v4 == v2)
      {
        v10 = 1;
      }
      else
      {
        v8 = -1;
        v9 = v2;
        do
        {
          v9 = (_QWORD *)v9[1];
          ++v8;
        }
        while (v9 != v7);
        v10 = v8 + 2;
      }
      result[2] -= v10;
      v3 += v10;
      v11 = *v2;
      *(_QWORD *)(v11 + 8) = v7[1];
      *(_QWORD *)v7[1] = v11;
      v12 = v22;
      v22[1] = v2;
      *v2 = v12;
      v22 = v7;
      v7[1] = &v22;
      if (!v6)
LABEL_20:
        v4 = (_QWORD *)v4[1];
    }
LABEL_4:
    v2 = v4;
  }
  while (v4 != result);
  if (v3)
  {
    v19 = v22;
    result = v23;
    v20 = *v23;
    *(_QWORD *)(v20 + 8) = v22[1];
    *(_QWORD *)v19[1] = v20;
    v24 = 0;
    if (result != &v22)
    {
      do
      {
        v21 = (_QWORD *)result[1];
        operator delete(result);
        result = v21;
      }
      while (v21 != &v22);
    }
  }
  return result;
}

void p2t::SweepContext::MeshClean(p2t::SweepContext *this, p2t::Triangle *a2)
{
  char *v4;
  char *v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;

  v4 = (char *)operator new(8uLL);
  *(_QWORD *)v4 = a2;
  v5 = v4 + 8;
  v82 = v4 + 8;
  v80 = v4;
  v6 = (char **)((char *)this + 80);
  do
  {
    v9 = *((_QWORD *)v5 - 1);
    v5 -= 8;
    v8 = v9;
    v81 = v5;
    if (v9 && !*(_BYTE *)(v8 + 56))
    {
      *(_BYTE *)(v8 + 56) = 1;
      v11 = (char *)*((_QWORD *)this + 11);
      v10 = *((_QWORD *)this + 12);
      if ((unint64_t)v11 < v10)
      {
        *(_QWORD *)v11 = v8;
        v12 = (uint64_t)(v11 + 8);
        goto LABEL_21;
      }
      v13 = *v6;
      v14 = v11 - *v6;
      v15 = v14 >> 3;
      v16 = (v14 >> 3) + 1;
      if (v16 >> 61)
        _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
      v17 = v10 - (_QWORD)v13;
      if (v17 >> 2 > v16)
        v16 = v17 >> 2;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v19 = operator new(8 * v18);
        v20 = &v19[8 * v15];
        *v20 = v8;
        v12 = (uint64_t)(v20 + 1);
        if (v11 == v13)
        {
LABEL_19:
          *((_QWORD *)this + 10) = v20;
          *((_QWORD *)this + 11) = v12;
          *((_QWORD *)this + 12) = &v19[8 * v18];
          if (!v11)
            goto LABEL_21;
          goto LABEL_20;
        }
      }
      else
      {
        v19 = 0;
        v20 = (_QWORD *)(8 * v15);
        *(_QWORD *)(8 * v15) = v8;
        v12 = 8 * v15 + 8;
        if (v11 == v13)
          goto LABEL_19;
      }
      v23 = v11 - 8 - v13;
      if (v23 < 0x58)
        goto LABEL_114;
      if ((unint64_t)(v11 - &v19[v14]) < 0x20)
        goto LABEL_114;
      v24 = (v23 >> 3) + 1;
      v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      v26 = &v11[-v25];
      v20 = (_QWORD *)((char *)v20 - v25);
      v27 = &v19[8 * v15 - 16];
      v28 = v11 - 16;
      v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v30 = *(_OWORD *)v28;
        *(v27 - 1) = *((_OWORD *)v28 - 1);
        *v27 = v30;
        v27 -= 2;
        v28 -= 32;
        v29 -= 4;
      }
      while (v29);
      v11 = v26;
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_114:
        do
        {
          v31 = *((_QWORD *)v11 - 1);
          v11 -= 8;
          *--v20 = v31;
        }
        while (v11 != v13);
      }
      v11 = *v6;
      *((_QWORD *)this + 10) = v20;
      *((_QWORD *)this + 11) = v12;
      *((_QWORD *)this + 12) = &v19[8 * v18];
      if (!v11)
      {
LABEL_21:
        *((_QWORD *)this + 11) = v12;
        v5 = v81;
        if (*(_BYTE *)v8)
        {
          if (*(_BYTE *)(v8 + 1))
            goto LABEL_23;
          goto LABEL_48;
        }
        v21 = *(_QWORD *)(v8 + 32);
        if (v81 < v82)
        {
          *(_QWORD *)v81 = v21;
          v22 = (uint64_t)(v81 + 8);
          goto LABEL_47;
        }
        v32 = (v81 - v80) >> 3;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61)
          goto LABEL_108;
        v34 = v82 - v80;
        if ((v82 - v80) >> 2 > v33)
          v33 = v34 >> 2;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          if (v35 >> 61)
            goto LABEL_110;
          v36 = (char *)operator new(8 * v35);
          v37 = &v36[8 * v32];
          *(_QWORD *)v37 = v21;
          v22 = (uint64_t)(v37 + 8);
          if (v81 == v80)
          {
LABEL_45:
            v80 = v37;
            v82 = &v36[8 * v35];
            if (!v81)
              goto LABEL_47;
            goto LABEL_46;
          }
        }
        else
        {
          v36 = 0;
          v37 = (char *)(8 * v32);
          *(_QWORD *)(8 * v32) = v21;
          v22 = 8 * v32 + 8;
          if (v81 == v80)
            goto LABEL_45;
        }
        v53 = v81 - 8 - v80;
        if (v53 < 0x58)
          goto LABEL_115;
        if ((unint64_t)(v80 - v36) < 0x20)
          goto LABEL_115;
        v54 = (v53 >> 3) + 1;
        v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
        v56 = &v81[-v55];
        v37 -= v55;
        v57 = &v36[8 * v32 - 16];
        v58 = (__int128 *)(v81 - 16);
        v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v60 = *v58;
          *((_OWORD *)v57 - 1) = *(v58 - 1);
          *(_OWORD *)v57 = v60;
          v57 -= 32;
          v58 -= 2;
          v59 -= 4;
        }
        while (v59);
        v5 = v56;
        if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_115:
          do
          {
            v61 = *((_QWORD *)v5 - 1);
            v5 -= 8;
            *((_QWORD *)v37 - 1) = v61;
            v37 -= 8;
          }
          while (v5 != v80);
        }
        v5 = v80;
        v80 = v37;
        v82 = &v36[8 * v35];
        if (!v5)
        {
LABEL_47:
          v5 = (char *)v22;
          if (*(_BYTE *)(v8 + 1))
          {
LABEL_23:
            if (*(_BYTE *)(v8 + 2))
              goto LABEL_4;
LABEL_62:
            v46 = *(_QWORD *)(v8 + 48);
            if (v5 < v82)
            {
              *(_QWORD *)v5 = v46;
              v7 = (uint64_t)(v5 + 8);
              goto LABEL_3;
            }
            v47 = (v5 - v80) >> 3;
            v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 61)
LABEL_108:
              _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
            v49 = v82 - v80;
            if ((v82 - v80) >> 2 > v48)
              v48 = v49 >> 2;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
              v50 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v50 = v48;
            if (v50)
            {
              if (v50 >> 61)
LABEL_110:
                std::__throw_bad_array_new_length[abi:ne180100]();
              v51 = (char *)operator new(8 * v50);
              v52 = &v51[8 * v47];
              *(_QWORD *)v52 = v46;
              v7 = (uint64_t)(v52 + 8);
              if (v5 == v80)
              {
LABEL_72:
                v80 = v52;
                v82 = &v51[8 * v50];
                if (!v5)
                  goto LABEL_3;
                goto LABEL_104;
              }
            }
            else
            {
              v51 = 0;
              v52 = (char *)(8 * v47);
              *(_QWORD *)(8 * v47) = v46;
              v7 = 8 * v47 + 8;
              if (v5 == v80)
                goto LABEL_72;
            }
            v64 = v5 - 8 - v80;
            if (v64 >= 0x58)
            {
              if ((unint64_t)(v80 - v51) >= 0x20)
              {
                v73 = (v64 >> 3) + 1;
                v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
                v65 = &v5[-v74];
                v52 -= v74;
                v75 = &v51[8 * v47 - 16];
                v76 = v5 - 16;
                v77 = v73 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v78 = *(_OWORD *)v76;
                  *((_OWORD *)v75 - 1) = *((_OWORD *)v76 - 1);
                  *(_OWORD *)v75 = v78;
                  v75 -= 32;
                  v76 -= 32;
                  v77 -= 4;
                }
                while (v77);
                if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_103:
                  v5 = v80;
                  v80 = v52;
                  v82 = &v51[8 * v50];
                  if (v5)
LABEL_104:
                    operator delete(v5);
LABEL_3:
                  v5 = (char *)v7;
LABEL_4:
                  v4 = v80;
                  continue;
                }
              }
              else
              {
                v65 = v5;
              }
            }
            else
            {
              v65 = v5;
            }
            do
            {
              v79 = *((_QWORD *)v65 - 1);
              v65 -= 8;
              *((_QWORD *)v52 - 1) = v79;
              v52 -= 8;
            }
            while (v65 != v80);
            goto LABEL_103;
          }
LABEL_48:
          v38 = *(_QWORD *)(v8 + 40);
          if (v5 < v82)
          {
            *(_QWORD *)v5 = v38;
            v39 = (uint64_t)(v5 + 8);
            goto LABEL_61;
          }
          v40 = (v5 - v80) >> 3;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61)
            goto LABEL_108;
          v42 = v82 - v80;
          if ((v82 - v80) >> 2 > v41)
            v41 = v42 >> 2;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            if (v43 >> 61)
              goto LABEL_110;
            v44 = (char *)operator new(8 * v43);
            v45 = &v44[8 * v40];
            *(_QWORD *)v45 = v38;
            v39 = (uint64_t)(v45 + 8);
            if (v5 == v80)
            {
LABEL_59:
              v80 = v45;
              v82 = &v44[8 * v43];
              if (!v5)
                goto LABEL_61;
              goto LABEL_60;
            }
          }
          else
          {
            v44 = 0;
            v45 = (char *)(8 * v40);
            *(_QWORD *)(8 * v40) = v38;
            v39 = 8 * v40 + 8;
            if (v5 == v80)
              goto LABEL_59;
          }
          v62 = v5 - 8 - v80;
          if (v62 >= 0x58)
          {
            if ((unint64_t)(v80 - v44) >= 0x20)
            {
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v5[-v67];
              v45 -= v67;
              v68 = &v44[8 * v40 - 16];
              v69 = v5 - 16;
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *(_OWORD *)v69;
                *((_OWORD *)v68 - 1) = *((_OWORD *)v69 - 1);
                *(_OWORD *)v68 = v71;
                v68 -= 32;
                v69 -= 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 == (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_97:
                v5 = v80;
                v80 = v45;
                v82 = &v44[8 * v43];
                if (!v5)
                {
LABEL_61:
                  v5 = (char *)v39;
                  if (*(_BYTE *)(v8 + 2))
                    goto LABEL_4;
                  goto LABEL_62;
                }
LABEL_60:
                operator delete(v5);
                goto LABEL_61;
              }
            }
            else
            {
              v63 = v5;
            }
          }
          else
          {
            v63 = v5;
          }
          do
          {
            v72 = *((_QWORD *)v63 - 1);
            v63 -= 8;
            *((_QWORD *)v45 - 1) = v72;
            v45 -= 8;
          }
          while (v63 != v80);
          goto LABEL_97;
        }
LABEL_46:
        operator delete(v5);
        goto LABEL_47;
      }
LABEL_20:
      operator delete(v11);
      goto LABEL_21;
    }
  }
  while (v4 != v5);
  if (v5)
    operator delete(v5);
}

void sub_227B705F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _Unwind_Resume(exception_object);
}

void p2t::SweepContext::~SweepContext(p2t::SweepContext *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  OpenSteer::SimpleVehicle *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  void *v24;

  v2 = *((_QWORD *)this + 20);
  if (v2)
  {
    v3 = *(void **)(v2 + 16);
    if (v3)
    {
      *(_QWORD *)(v2 + 24) = v3;
      operator delete(v3);
    }
    MEMORY[0x22E2A50A0](v2, 0x1080C40B69A5871);
  }
  v4 = *((_QWORD *)this + 21);
  if (v4)
  {
    v5 = *(void **)(v4 + 16);
    if (v5)
    {
      *(_QWORD *)(v4 + 24) = v5;
      operator delete(v5);
    }
    MEMORY[0x22E2A50A0](v4, 0x1080C40B69A5871);
  }
  v6 = (OpenSteer::SimpleVehicle *)*((_QWORD *)this + 19);
  if (v6)
  {
    OpenSteer::SimpleVehicle::~SimpleVehicle(v6);
    MEMORY[0x22E2A50A0]();
  }
  v7 = *((_QWORD *)this + 22);
  if (v7)
    MEMORY[0x22E2A50A0](v7, 0x1020C40DBF2485DLL);
  v8 = *((_QWORD *)this + 23);
  if (v8)
    MEMORY[0x22E2A50A0](v8, 0x1020C40DBF2485DLL);
  v9 = *((_QWORD *)this + 24);
  if (v9)
    MEMORY[0x22E2A50A0](v9, 0x1020C40DBF2485DLL);
  v10 = (char *)this + 104;
  for (i = *((_QWORD *)this + 14); (char *)i != v10; i = *(_QWORD *)(i + 8))
  {
    v12 = *(_QWORD *)(i + 16);
    if (v12)
      MEMORY[0x22E2A50A0](v12, 0x1020C403BE5E226);
  }
  v14 = *(_QWORD *)this;
  v13 = *((_QWORD *)this + 1);
  if (v13 != *(_QWORD *)this)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      v17 = *(_QWORD *)(v14 + 8 * v15);
      if (v17)
      {
        MEMORY[0x22E2A50A0](v17, 0x20C40A4A59CD2);
        v14 = *(_QWORD *)this;
        v13 = *((_QWORD *)this + 1);
      }
      v15 = v16++;
    }
    while (v15 < (v13 - v14) >> 3);
  }
  v18 = (void *)*((_QWORD *)this + 16);
  if (v18)
  {
    *((_QWORD *)this + 17) = v18;
    operator delete(v18);
  }
  if (*((_QWORD *)this + 15))
  {
    v20 = *((_QWORD *)this + 13);
    v19 = (char *)*((_QWORD *)this + 14);
    v21 = *(_QWORD *)v19;
    *(_QWORD *)(v21 + 8) = *(_QWORD *)(v20 + 8);
    **(_QWORD **)(v20 + 8) = v21;
    *((_QWORD *)this + 15) = 0;
    if (v19 != v10)
    {
      do
      {
        v22 = (char *)*((_QWORD *)v19 + 1);
        operator delete(v19);
        v19 = v22;
      }
      while (v22 != v10);
    }
  }
  v23 = (void *)*((_QWORD *)this + 10);
  if (v23)
  {
    *((_QWORD *)this + 11) = v23;
    operator delete(v23);
  }
  v24 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v24;
    operator delete(v24);
  }
}

p2t::Edge *p2t::Edge::Edge(p2t::Edge *this, Point *a2, Point *a3)
{
  Point *v3;
  double v5;
  double v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v3 = a3;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  v5 = *(double *)&a2[2].v;
  v6 = *(double *)&a3[2].v;
  if (v5 > v6)
    goto LABEL_4;
  if (v5 != v6)
    goto LABEL_5;
  if (*(double *)&a2->v <= *(double *)&a3->v)
  {
    if (*(double *)&a2->v == *(double *)&a3->v)
      p2t::Edge::Edge();
  }
  else
  {
LABEL_4:
    *(_QWORD *)this = a3;
    *((_QWORD *)this + 1) = a2;
    v3 = a2;
  }
LABEL_5:
  v8 = *(char **)&v3[6].v;
  v7 = *(_QWORD *)&v3[8].v;
  if ((unint64_t)v8 < v7)
  {
    *(_QWORD *)v8 = this;
    v9 = (uint64_t)(v8 + 8);
    goto LABEL_27;
  }
  v10 = *(char **)&v3[4].v;
  v11 = (v8 - v10) >> 3;
  v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v13 = v7 - (_QWORD)v10;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = (char *)operator new(8 * v14);
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = this;
    v9 = (uint64_t)(v16 + 8);
    v18 = (char *)(v8 - v10);
    if (v8 == v10)
      goto LABEL_25;
    goto LABEL_18;
  }
  v15 = 0;
  v16 = (char *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = this;
  v9 = 8 * v11 + 8;
  v18 = (char *)(v8 - v10);
  if (v8 != v10)
  {
LABEL_18:
    v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58)
      goto LABEL_34;
    if ((unint64_t)(v10 - v15) < 0x20)
      goto LABEL_34;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v8[-v21];
    v16 -= v21;
    v23 = &v15[8 * v11 - 16];
    v24 = v8 - 16;
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *((_OWORD *)v23 - 1) = *((_OWORD *)v24 - 1);
      *(_OWORD *)v23 = v26;
      v23 -= 32;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v8 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        v27 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v16 - 1) = v27;
        v16 -= 8;
      }
      while (v8 != v10);
    }
    v8 = *(char **)&v3[4].v;
  }
LABEL_25:
  *(_QWORD *)&v3[4].v = v16;
  *(_QWORD *)&v3[6].v = v9;
  *(_QWORD *)&v3[8].v = v17;
  if (v8)
    operator delete(v8);
LABEL_27:
  *(_QWORD *)&v3[6].v = v9;
  return this;
}

_QWORD *std::vector<p2t::Point *>::__assign_with_size[abi:ne180100]<p2t::Point **,p2t::Point **>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(p2t::Point const*,p2t::Point const*),p2t::Point**,false>(uint64_t result, int8x16_t *a2, unsigned int (**a3)(uint64_t), uint64_t a4, char a5)
{
  int8x16_t *v7;
  int8x16_t *v8;
  uint64_t *v9;
  int8x16_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int (*v14)(uint64_t);
  char v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int8 *v27;
  char v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  int8x16_t *v50;
  int8x16_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x16_t *v55;
  int8x16_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  BOOL v61;
  uint64_t v62;
  int8x16_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  int8x16_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int8x16_t *v79;
  BOOL v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;

  v7 = (int8x16_t *)result;
LABEL_2:
  v8 = a2;
  v9 = &a2[-1].i64[1];
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)v8 - (char *)v10;
    v12 = ((char *)v8 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10->i64[0]);
        if ((_DWORD)result)
        {
          v69 = v10->i64[0];
          v10->i64[0] = *v9;
          goto LABEL_137;
        }
        return result;
      case 3uLL:
        v70 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[1], v10->i64[0]);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10->i64[1]);
        if ((v70 & 1) != 0)
        {
          v71 = v10->i64[0];
          if ((_DWORD)result)
          {
            v10->i64[0] = *v9;
            *v9 = v71;
          }
          else
          {
            v10->i64[0] = v10->i64[1];
            v10->i64[1] = v71;
            result = ((uint64_t (*)(uint64_t))*a3)(*v9);
            if ((_DWORD)result)
            {
              v69 = v10->i64[1];
              v10->i64[1] = *v9;
LABEL_137:
              *v9 = v69;
            }
          }
        }
        else if ((_DWORD)result)
        {
          v87 = v10->i64[1];
          v10->i64[1] = *v9;
          *v9 = v87;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[1], v10->i64[0]);
          goto LABEL_126;
        }
        return result;
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(p2t::Point const*,p2t::Point const*),p2t::Point**>(v10, &v10->i64[1], (int8x16_t *)v10[1].i64, v9, a3);
      case 5uLL:
        v72 = v10 + 1;
        v73 = &v10[1].i64[1];
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(p2t::Point const*,p2t::Point const*),p2t::Point**>(v10, &v10->i64[1], (int8x16_t *)v10[1].i64, &v10[1].i64[1], a3);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10[1].i64[1]);
        if ((_DWORD)result)
        {
          v74 = *v73;
          *v73 = *v9;
          *v9 = v74;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v73, v72->i64[0]);
          if ((_DWORD)result)
          {
            v75 = v72->i64[0];
            v72->i64[0] = *v73;
            *v73 = v75;
            result = ((uint64_t (*)(void))*a3)();
            if ((_DWORD)result)
            {
              v77 = v10->i64[1];
              v76 = v10[1].i64[0];
              v78 = v10->i64[0];
              v10->i64[1] = v76;
              v10[1].i64[0] = v77;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v76, v78);
LABEL_126:
              if ((_DWORD)result)
                *v10 = vextq_s8(*v10, *v10, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != v8)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(p2t::Point const*,p2t::Point const*),p2t::Point**,p2t::Point**>(v10, a2, a2, (unsigned int (**)(_QWORD, uint64_t))a3);
            return result;
          }
          v13 = v12 >> 1;
          v14 = *a3;
          if ((unint64_t)v11 >= 0x401)
          {
            v15 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v10->i64[v13], v10->i64[0]);
            v16 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10->i64[v13]);
            if ((v15 & 1) != 0)
            {
              v17 = v10->i64[0];
              if (v16)
              {
                v10->i64[0] = *v9;
                *v9 = v17;
              }
              else
              {
                v10->i64[0] = v10->i64[v13];
                v10->i64[v13] = v17;
                if ((*a3)(*v9))
                {
                  v26 = v10->i64[v13];
                  v10->i64[v13] = *v9;
                  *v9 = v26;
                }
              }
            }
            else if (v16)
            {
              v22 = v10->i64[v13];
              v10->i64[v13] = *v9;
              *v9 = v22;
              if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v10->i64[v13], v10->i64[0]))
              {
                v23 = v10->i64[0];
                v10->i64[0] = v10->i64[v13];
                v10->i64[v13] = v23;
              }
            }
            v27 = &v10->i8[8 * v13];
            v28 = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*((_QWORD *)v27 - 1), v10->i64[1]);
            v29 = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v8[-1].i64[0], *((_QWORD *)v27 - 1));
            if ((v28 & 1) != 0)
            {
              v30 = v10->i64[1];
              if (v29)
              {
                v10->i64[1] = v8[-1].i64[0];
                v8[-1].i64[0] = v30;
              }
              else
              {
                v10->i64[1] = *((_QWORD *)v27 - 1);
                *((_QWORD *)v27 - 1) = v30;
                if ((*a3)(v8[-1].i64[0]))
                {
                  v34 = *((_QWORD *)v27 - 1);
                  *((_QWORD *)v27 - 1) = v8[-1].i64[0];
                  v8[-1].i64[0] = v34;
                }
              }
            }
            else if (v29)
            {
              v31 = *((_QWORD *)v27 - 1);
              *((_QWORD *)v27 - 1) = v8[-1].i64[0];
              v8[-1].i64[0] = v31;
              if (((unsigned int (*)(_QWORD, uint64_t))*a3)(*((_QWORD *)v27 - 1), v10->i64[1]))
              {
                v32 = v10->i64[1];
                v10->i64[1] = *((_QWORD *)v27 - 1);
                *((_QWORD *)v27 - 1) = v32;
              }
            }
            v35 = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*((_QWORD *)v27 + 1), v10[1].i64[0]);
            v36 = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v8[-2].i64[1], *((_QWORD *)v27 + 1));
            if ((v35 & 1) != 0)
            {
              v37 = v10[1].i64[0];
              if (v36)
              {
                v10[1].i64[0] = v8[-2].i64[1];
                v8[-2].i64[1] = v37;
              }
              else
              {
                v10[1].i64[0] = *((_QWORD *)v27 + 1);
                *((_QWORD *)v27 + 1) = v37;
                if ((*a3)(v8[-2].i64[1]))
                {
                  v40 = *((_QWORD *)v27 + 1);
                  *((_QWORD *)v27 + 1) = v8[-2].i64[1];
                  v8[-2].i64[1] = v40;
                }
              }
            }
            else if (v36)
            {
              v38 = *((_QWORD *)v27 + 1);
              *((_QWORD *)v27 + 1) = v8[-2].i64[1];
              v8[-2].i64[1] = v38;
              if (((unsigned int (*)(_QWORD, uint64_t))*a3)(*((_QWORD *)v27 + 1), v10[1].i64[0]))
              {
                v39 = v10[1].i64[0];
                v10[1].i64[0] = *((_QWORD *)v27 + 1);
                *((_QWORD *)v27 + 1) = v39;
              }
            }
            v41 = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v10->i64[v13], *((_QWORD *)v27 - 1));
            v42 = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*((_QWORD *)v27 + 1), v10->i64[v13]);
            if ((v41 & 1) != 0)
            {
              v43 = *((_QWORD *)v27 - 1);
              if (v42)
              {
                *((_QWORD *)v27 - 1) = *((_QWORD *)v27 + 1);
                *((_QWORD *)v27 + 1) = v43;
                v44 = v10->i64[v13];
                goto LABEL_52;
              }
              *((_QWORD *)v27 - 1) = v10->i64[v13];
              v10->i64[v13] = v43;
              v47 = (*a3)(*((_QWORD *)v27 + 1));
              v44 = v10->i64[v13];
              if (v47)
              {
                v46 = *((_QWORD *)v27 + 1);
                v10->i64[v13] = v46;
                *((_QWORD *)v27 + 1) = v44;
                goto LABEL_51;
              }
            }
            else
            {
              v44 = v10->i64[v13];
              if (v42)
              {
                v10->i64[v13] = *((_QWORD *)v27 + 1);
                *((_QWORD *)v27 + 1) = v44;
                v45 = ((uint64_t (*)(void))*a3)();
                v44 = v10->i64[v13];
                if (v45)
                {
                  v46 = *((_QWORD *)v27 - 1);
                  *((_QWORD *)v27 - 1) = v44;
                  v10->i64[v13] = v46;
LABEL_51:
                  v44 = v46;
                }
              }
            }
LABEL_52:
            v48 = v10->i64[0];
            v10->i64[0] = v44;
            v10->i64[v13] = v48;
            --a4;
            v21 = v10->i64[0];
            if ((a5 & 1) != 0)
              goto LABEL_54;
            goto LABEL_53;
          }
          v18 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v10->i64[0], v10->i64[v13]);
          v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10->i64[0]);
          if ((v18 & 1) != 0)
          {
            v20 = v10->i64[v13];
            if (v19)
            {
              v10->i64[v13] = *v9;
              *v9 = v20;
              --a4;
              v21 = v10->i64[0];
              if ((a5 & 1) != 0)
                goto LABEL_54;
              goto LABEL_53;
            }
            v10->i64[v13] = v10->i64[0];
            v10->i64[0] = v20;
            if ((*a3)(*v9))
            {
              v33 = v10->i64[0];
              v10->i64[0] = *v9;
              *v9 = v33;
            }
          }
          else if (v19)
          {
            v24 = v10->i64[0];
            v10->i64[0] = *v9;
            *v9 = v24;
            if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v10->i64[0], v10->i64[v13]))
            {
              v25 = v10->i64[v13];
              v10->i64[v13] = v10->i64[0];
              v10->i64[0] = v25;
              --a4;
              v21 = v25;
              if ((a5 & 1) != 0)
                goto LABEL_54;
              goto LABEL_53;
            }
          }
          --a4;
          v21 = v10->i64[0];
          if ((a5 & 1) != 0)
            goto LABEL_54;
LABEL_53:
          v49 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10[-1].i64[1], v21);
          v21 = v10->i64[0];
          if ((v49 & 1) == 0)
          {
            result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[0], *v9);
            if ((result & 1) != 0)
            {
              do
              {
                v62 = v10->i64[1];
                v10 = (int8x16_t *)((char *)v10 + 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v62);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v63 = (int8x16_t *)&v10->u64[1];
              do
              {
                v10 = v63;
                if (v63 >= v8)
                  break;
                v63 = (int8x16_t *)((char *)v63 + 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v10->i64[0]);
              }
              while (!(_DWORD)result);
            }
            if (v10 < v8)
            {
              v8 = a2;
              do
              {
                v64 = v8[-1].i64[1];
                v8 = (int8x16_t *)((char *)v8 - 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v64);
              }
              while ((result & 1) != 0);
            }
            while (v10 < v8)
            {
              v65 = v10->i64[0];
              v10->i64[0] = v8->i64[0];
              v8->i64[0] = v65;
              do
              {
                v66 = v10->i64[1];
                v10 = (int8x16_t *)((char *)v10 + 8);
              }
              while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v21, v66));
              do
              {
                v67 = v8[-1].i64[1];
                v8 = (int8x16_t *)((char *)v8 - 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v67);
              }
              while ((result & 1) != 0);
            }
            v68 = &v10[-1].i64[1];
            if (&v10[-1].u64[1] != (unint64_t *)v7)
              v7->i64[0] = *v68;
            a5 = 0;
            *v68 = v21;
            v8 = a2;
            continue;
          }
LABEL_54:
          v50 = v10;
          do
          {
            v51 = v50;
            v52 = v50->i64[1];
            v50 = (int8x16_t *)((char *)v50 + 8);
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v52, v21) & 1) != 0);
          if (v51 == v10)
          {
            v8 = a2;
            do
            {
              if (v50 >= v8)
                break;
              v54 = v8[-1].i64[1];
              v8 = (int8x16_t *)((char *)v8 - 8);
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v54, v21) & 1) == 0);
          }
          else
          {
            do
            {
              v53 = v8[-1].i64[1];
              v8 = (int8x16_t *)((char *)v8 - 8);
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v53, v21));
          }
          if (v50 < v8)
          {
            v55 = v50;
            v56 = v8;
            do
            {
              v57 = v55->i64[0];
              v55->i64[0] = v56->i64[0];
              v56->i64[0] = v57;
              do
              {
                v51 = v55;
                v58 = v55->i64[1];
                v55 = (int8x16_t *)((char *)v55 + 8);
              }
              while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v58, v21) & 1) != 0);
              do
              {
                v59 = v56[-1].i64[1];
                v56 = (int8x16_t *)((char *)v56 - 8);
              }
              while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v59, v21));
            }
            while (v55 < v56);
          }
          if (v51 != v7)
            v7->i64[0] = v51->i64[0];
          v51->i64[0] = v21;
          v60 = v50 >= v8;
          v8 = a2;
          if (!v60)
            goto LABEL_74;
          v61 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(p2t::Point const*,p2t::Point const*),p2t::Point**>(v7, v51, a3);
          v10 = (int8x16_t *)&v51->u64[1];
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(p2t::Point const*,p2t::Point const*),p2t::Point**>(&v51->i64[1], a2, a3);
          if (!(_DWORD)result)
          {
            if (v61)
              continue;
LABEL_74:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(p2t::Point const*,p2t::Point const*),p2t::Point**,false>(v7, v51, a3, a4, a5 & 1);
            a5 = 0;
            v10 = (int8x16_t *)&v51->u64[1];
            continue;
          }
          a2 = v51;
          if (v61)
            return result;
          goto LABEL_2;
        }
        v79 = (int8x16_t *)&v10->u64[1];
        v81 = v10 == v8 || v79 == v8;
        if ((a5 & 1) != 0)
        {
          if (!v81)
          {
            v82 = 0;
            v83 = (uint64_t *)v10;
            do
            {
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v79->i64[0], *v83);
              if ((_DWORD)result)
              {
                v85 = 0;
                v86 = v79->i64[0];
                do
                {
                  v83[v85 / 8 + 1] = v83[v85 / 8];
                  if (v82 == v85)
                  {
                    v84 = (uint64_t *)v10;
                    goto LABEL_115;
                  }
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v86, v83[v85 / 8 - 1]);
                  v85 -= 8;
                }
                while ((result & 1) != 0);
                v84 = &v79->i64[v85 / 8];
LABEL_115:
                *v84 = v86;
              }
              v79 = (int8x16_t *)((char *)v79 + 8);
              v82 -= 8;
              ++v83;
            }
            while (v79 != a2);
          }
        }
        else if (!v81)
        {
          do
          {
            v89 = v7->i64[0];
            v88 = v7->i64[1];
            v7 = v79;
            result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v88, v89);
            if ((_DWORD)result)
            {
              v90 = v79->i64[0];
              v91 = (uint64_t *)v79;
              do
              {
                v92 = v91;
                v93 = *--v91;
                *v92 = v93;
                result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v90, *(v92 - 2));
              }
              while ((result & 1) != 0);
              *v91 = v90;
            }
            v79 = (int8x16_t *)((char *)v79 + 8);
          }
          while (&v7->u64[1] != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(p2t::Point const*,p2t::Point const*),p2t::Point**>(_QWORD *a1, _QWORD *a2, unsigned int (**a3)(uint64_t))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      v9 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
      v10 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), a1[1]);
      if ((v9 & 1) != 0)
      {
        v11 = *a1;
        if (v10)
        {
          *a1 = *(a2 - 1);
          *(a2 - 1) = v11;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v11;
          if ((*a3)(*(a2 - 1)))
          {
            v26 = a1[1];
            a1[1] = *(a2 - 1);
            *(a2 - 1) = v26;
          }
        }
      }
      else if (v10)
      {
        v24 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v24;
        v19 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
LABEL_17:
        if (v19)
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(p2t::Point const*,p2t::Point const*),p2t::Point**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v12 = a1 + 2;
      v13 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(p2t::Point const*,p2t::Point const*),p2t::Point**>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), a1[3]))
        return 1;
      v14 = *v13;
      *v13 = *(a2 - 1);
      *(a2 - 1) = v14;
      if (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*v13, *v12))
        return 1;
      v15 = *v12;
      *v12 = *v13;
      *v13 = v15;
      if (!((unsigned int (*)(void))*a3)())
        return 1;
      v17 = a1[1];
      v16 = a1[2];
      v18 = *a1;
      a1[1] = v16;
      a1[2] = v17;
      v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v16, v18);
      goto LABEL_17;
    default:
      v20 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
      v21 = a1 + 2;
      v22 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[2], a1[1]);
      if ((v20 & 1) != 0)
      {
        v23 = *a1;
        if (v22)
        {
          *a1 = a1[2];
          a1[2] = v23;
        }
        else
        {
          v27 = a1[2];
          *a1 = a1[1];
          a1[1] = v23;
          if ((*a3)(v27))
            *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
        }
      }
      else if (v22)
      {
        v25 = a1[1];
        a1[1] = a1[2];
        a1[2] = v25;
        if (((unsigned int (*)(void))*a3)())
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      v28 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v29 = 0;
      v30 = 0;
      break;
  }
  while (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*v28, *v21))
  {
LABEL_35:
    v21 = v28;
    v29 += 8;
    if (++v28 == a2)
      return 1;
  }
  v31 = *v28;
  v32 = v29;
  do
  {
    v33 = (char *)a1 + v32;
    *(_QWORD *)((char *)a1 + v32 + 24) = *(_QWORD *)((char *)a1 + v32 + 16);
    if (v32 == -16)
    {
      *a1 = v31;
      if (++v30 != 8)
        goto LABEL_35;
      return v28 + 1 == a2;
    }
    v32 -= 8;
  }
  while ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v31, *((_QWORD *)v33 + 1)) & 1) != 0);
  *(_QWORD *)((char *)a1 + v32 + 24) = v31;
  if (++v30 != 8)
    goto LABEL_35;
  return v28 + 1 == a2;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(p2t::Point const*,p2t::Point const*),p2t::Point**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned int (**a5)(_QWORD))
{
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v10 = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
  v11 = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
  if ((v10 & 1) != 0)
  {
    v12 = *a1;
    if (v11)
    {
      *a1 = *a3;
      *a3 = v12;
    }
    else
    {
      *a1 = *a2;
      *a2 = v12;
      if ((*a5)(*a3))
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
      }
    }
  }
  else if (v11)
  {
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    if (((unsigned int (*)(_QWORD, _QWORD))*a5)(*a2, *a1))
    {
      v14 = *a1;
      *a1 = *a2;
      *a2 = v14;
    }
  }
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v17 = *a3;
    *a3 = *a4;
    *a4 = v17;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

_QWORD *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(p2t::Point const*,p2t::Point const*),p2t::Point**,p2t::Point**>(_QWORD *a1, _QWORD *a2, _QWORD *a3, unsigned int (**a4)(_QWORD, uint64_t))
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  int64_t v38;
  int64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;

  if (a1 != a2)
  {
    v5 = a2;
    v52 = a2 - a1;
    v47 = a3;
    v48 = (char *)a2 - (char *)a1;
    v49 = a2;
    if ((char *)a2 - (char *)a1 >= 9 && (unint64_t)v48 >= 0x10)
    {
      v38 = (unint64_t)(v52 - 2) >> 1;
      v51 = a1 + 1;
      v39 = v38;
      do
      {
        if (v38 >= v39)
        {
          v40 = (2 * v39) | 1;
          v41 = &v51[2 * v39];
          if (2 * v39 + 2 < v52 && (*a4)(*v41, v41[1]))
          {
            ++v41;
            v40 = 2 * v39 + 2;
          }
          v42 = &a1[v39];
          if ((((uint64_t (*)(_QWORD, _QWORD))*a4)(*v41, *v42) & 1) == 0)
          {
            v43 = *v42;
            do
            {
              v44 = v41;
              *v42 = *v41;
              if (v38 < v40)
                break;
              v45 = (2 * v40) | 1;
              v41 = &v51[2 * v40];
              v46 = 2 * v40 + 2;
              if (v46 < v52 && (*a4)(*v41, v41[1]))
              {
                ++v41;
                v45 = v46;
              }
              v42 = v44;
              v40 = v45;
            }
            while (!(*a4)(*v41, v43));
            *v44 = v43;
            v5 = v49;
          }
        }
        v23 = v39-- <= 0;
      }
      while (!v23);
    }
    a3 = v5;
    v7 = v47;
    v8 = v48;
    if (v5 != v47)
    {
      if (v48 >= 16)
      {
        v9 = v5;
        v10 = a1 + 1;
        while (1)
        {
          if (((unsigned int (*)(_QWORD, _QWORD, _QWORD *))*a4)(*v9, *a1, a3))
          {
            v12 = *v9;
            *v9 = *a1;
            *a1 = v12;
            if (v8 == 16)
            {
              v13 = a1 + 1;
              v14 = 1;
              if ((((uint64_t (*)(_QWORD))*a4)(*v10) & 1) == 0)
                goto LABEL_23;
            }
            else
            {
              v15 = (*a4)(a1[1], a1[2]);
              if (v15)
                v13 = a1 + 2;
              else
                v13 = a1 + 1;
              if (v15)
                v14 = 2;
              else
                v14 = 1;
              if ((((uint64_t (*)(_QWORD, _QWORD))*a4)(*v13, *a1) & 1) == 0)
              {
LABEL_23:
                v50 = v9;
                v16 = *a1;
                v17 = a1;
                do
                {
                  v19 = v13;
                  *v17 = *v13;
                  if ((uint64_t)((unint64_t)(v52 - 2) >> 1) < v14)
                    break;
                  v20 = (2 * v14) | 1;
                  v13 = &v10[2 * v14];
                  v21 = 2 * v14 + 2;
                  if (v21 < v52 && (*a4)(*v13, v13[1]))
                  {
                    ++v13;
                    v20 = v21;
                  }
                  v18 = (*a4)(*v13, v16);
                  v17 = v19;
                  v14 = v20;
                }
                while (!v18);
                *v19 = v16;
                v7 = v47;
                v8 = v48;
                v9 = v50;
              }
            }
          }
          if (++v9 == v7)
            goto LABEL_30;
        }
      }
      do
      {
        if (((unsigned int (*)(_QWORD, _QWORD, _QWORD *))*a4)(*v5, *a1, a3))
        {
          v11 = *v5;
          *v5 = *a1;
          *a1 = v11;
        }
        ++v5;
      }
      while (v5 != v47);
LABEL_30:
      a3 = v7;
    }
    if (v8 >= 9)
    {
      v53 = a3;
      v22 = (unint64_t)v8 >> 3;
      do
      {
        v24 = 0;
        v25 = *a1;
        v26 = a1;
        do
        {
          v27 = &v26[v24 + 1];
          v28 = (2 * v24) | 1;
          v29 = 2 * v24 + 2;
          if (v29 < v22 && (*a4)(v26[v24 + 1], v26[v24 + 2]))
          {
            ++v27;
            v28 = v29;
          }
          *v26 = *v27;
          v26 = v27;
          v24 = v28;
        }
        while (v28 <= (uint64_t)((unint64_t)(v22 - 2) >> 1));
        v30 = v49 - 1;
        if (v27 == --v49)
        {
          *v27 = v25;
        }
        else
        {
          *v27 = *v30;
          *v30 = v25;
          v32 = (char *)v27 - (char *)a1 + 8;
          if (v32 >= 9)
          {
            v33 = (((unint64_t)v32 >> 3) - 2) >> 1;
            v34 = &a1[v33];
            if ((*a4)(*v34, *v27))
            {
              v35 = *v27;
              do
              {
                v36 = v34;
                *v27 = *v34;
                if (!v33)
                  break;
                v33 = (v33 - 1) >> 1;
                v34 = &a1[v33];
                v27 = v36;
              }
              while ((((uint64_t (*)(_QWORD, uint64_t))*a4)(*v34, v35) & 1) != 0);
              *v36 = v35;
            }
          }
        }
        v23 = v22-- <= 2;
      }
      while (!v23);
      return v53;
    }
  }
  return a3;
}

float OpenSteer::RandomVectorInUnitRadiusSphere(OpenSteer *this)
{
  float v1;
  float v2;
  int v3;

  do
  {
    v1 = (float)((float)rand() * 9.3132e-10) + -1.0;
    v2 = (float)((float)rand() * 9.3132e-10) + -1.0;
    v3 = rand();
  }
  while (sqrtf((float)((float)(v1 * v1) + (float)(v2 * v2))+ (float)((float)((float)((float)v3 * 9.3132e-10) + -1.0) * (float)((float)((float)v3 * 9.3132e-10) + -1.0))) >= 1.0);
  return v1;
}

float OpenSteer::randomVectorOnUnitRadiusXZDisk(OpenSteer *this)
{
  float v1;
  int v2;

  do
  {
    v1 = (float)((float)rand() * 9.3132e-10) + -1.0;
    v2 = rand();
  }
  while (sqrtf((float)(v1 * v1)+ (float)((float)((float)((float)v2 * 9.3132e-10) + -1.0) * (float)((float)((float)v2 * 9.3132e-10) + -1.0))) >= 1.0);
  return v1;
}

float OpenSteer::vecLimitDeviationAngleUtility(OpenSteer *this, float *a2, const Vec3 *a3, float a4, const Vec3 *a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float x;
  float y;
  float z;
  float v13;
  float v14;
  float v15;

  v6 = *a2;
  v5 = a2[1];
  v7 = a2[2];
  v8 = sqrtf((float)((float)(v6 * v6) + (float)(v5 * v5)) + (float)(v7 * v7));
  if (v8 == 0.0)
    return *a2;
  x = a3->x;
  y = a3->y;
  z = a3->z;
  v13 = (float)((float)(a3->x * v6) + (float)(y * v5)) + (float)(z * v7);
  if ((_DWORD)this)
  {
    if ((float)(v13 / v8) < a4)
      goto LABEL_7;
    return *a2;
  }
  if ((float)(v13 / v8) <= a4)
    return *a2;
LABEL_7:
  v14 = v6 - (float)(v13 * x);
  v15 = sqrtf((float)((float)(v14 * v14) + (float)((float)(v5 - (float)(v13 * y)) * (float)(v5 - (float)(v13 * y))))+ (float)((float)(v7 - (float)(v13 * z)) * (float)(v7 - (float)(v13 * z))));
  if (v15 > 0.0)
    v14 = v14 * (float)(1.0 / v15);
  return (float)((float)(x * a4) + (float)(v14 * sqrtf(1.0 - (float)(a4 * a4)))) * v8;
}

float OpenSteer::findPerpendicularIn3d(OpenSteer *this, const Vec3 *a2)
{
  float v2;
  float v3;
  float v4;
  _BOOL4 v6;
  float v7;
  float v8;

  v2 = *(float *)this;
  v3 = *((float *)this + 1);
  v4 = *((float *)this + 2);
  if (*(float *)this <= v3 && v2 <= v4)
  {
    v7 = 0.0;
    v8 = 0.0;
  }
  else
  {
    v6 = v3 > v2;
    if (v3 > v4)
      v6 = 1;
    if (v6)
      v7 = 0.0;
    else
      v7 = 1.0;
    if (v6)
      v8 = 1.0;
    else
      v8 = 0.0;
  }
  return -(float)((float)(v7 * v4) - (float)(v8 * v3));
}

void sub_227B71FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B7216C(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;

  MEMORY[0x22E2A50A0](v2, 0x1080C4018622206);
  _Unwind_Resume(a1);
}

void sub_227B7219C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_227B72314(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B72328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B7233C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B7234C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B72404(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B72414(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id GKCMonteCarloStrategist::bestMoveForActivePlayer(GKCMonteCarloStrategist *this)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  id v19;
  id v20;
  void *v21;
  void *v22;

  v2 = (void *)objc_msgSend(this->var0, "copyWithZone:", 0);
  v3 = operator new();
  v4 = v2;
  *(_QWORD *)v3 = v4;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  objc_msgSend(v4, "activePlayer");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "gameModelUpdatesForPlayer:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v3;
  if (this->var2)
  {
    v8 = 0;
    do
    {
      v9 = GKCMonteCarloStrategist::treePolicy((uint64_t)this, v3, v5, v6);
      v10 = (void *)objc_msgSend(*(id *)v9, "copyWithZone:", 0);
      v11 = GKCMonteCarloStrategist::defaultPolicy(&this->var0, v10);

      do
      {
        ++*(_QWORD *)(v9 + 56);
        *(double *)(v9 + 64) = *(double *)(v9 + 64) + (double)v11;
        v9 = *(_QWORD *)(v9 + 40);
      }
      while (v9);
      ++v8;
    }
    while (v8 < this->var2);
    v12 = *(uint64_t **)(v3 + 16);
    v7 = v3;
    v13 = *(_QWORD *)(v3 + 24) - (_QWORD)v12;
    if (v13)
    {
      if ((unint64_t)(v13 >> 3) <= 1)
        v14 = 1;
      else
        v14 = v13 >> 3;
      v15 = 0.0;
      v7 = v3;
      do
      {
        v17 = *v12++;
        v16 = v17;
        v18 = *(double *)(v17 + 64) / (double)*(unint64_t *)(v17 + 56);
        if (v18 >= v15)
          v7 = v16;
        v15 = fmax(v18, v15);
        --v14;
      }
      while (v14);
    }
  }
  v19 = *(id *)(v7 + 8);
  GKCMonteCarloStrategist::deleteChildren((uint64_t)this, v3);
  v20 = *(id *)v3;
  *(_QWORD *)v3 = 0;

  v21 = *(void **)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0;

  *(_QWORD *)(v3 + 40) = 0;
  v22 = *(void **)(v3 + 16);
  if (v22)
  {
    *(_QWORD *)(v3 + 24) = v22;
    operator delete(v22);
  }

  MEMORY[0x22E2A50A0](v3, 0x10A0C40AF943C6FLL);
  return v19;
}

void sub_227B72610(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_227B7262C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B72640(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B72650(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B72660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_227B7267C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B72694(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t GKCMonteCarloStrategist::treePolicy(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id i;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  long double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;

  v7 = a3;
  for (i = a4; objc_msgSend(i, "count"); i = (id)v25)
  {
    v10 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    if (objc_msgSend(i, "count") > (unint64_t)((v9 - v10) >> 3))
    {
      a2 = GKCMonteCarloStrategist::expand(a1, a2, i);
      break;
    }
    v11 = *(uint64_t **)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24) - (_QWORD)v11;
    if (v12)
    {
      v13 = v12 >> 3;
      v14 = *(_QWORD *)(a2 + 56);
      v15 = (double)*(unint64_t *)(a1 + 24);
      if (v13 <= 1)
        v16 = 1;
      else
        v16 = v13;
      v17 = 0.0;
      do
      {
        v19 = *v11++;
        v18 = v19;
        v20 = *(_QWORD *)(v19 + 56);
        v21 = *(double *)(v19 + 64) / (double)v20;
        v22 = log((double)(v14 / v20));
        v23 = v21 + sqrt(v22 + v22) * v15;
        if (v23 >= v17)
          a2 = v18;
        v17 = fmax(v23, v17);
        --v16;
      }
      while (v16);
    }
    objc_msgSend(*(id *)a2, "activePlayer");
    v24 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)a2, "gameModelUpdatesForPlayer:", v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v7 = (id)v24;
  }

  return a2;
}

void sub_227B727F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B72804(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t GKCMonteCarloStrategist::defaultPolicy(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v3 = a2;
  objc_msgSend(v3, "activePlayer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "gameModelUpdatesForPlayer:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  while (objc_msgSend(v5, "count"))
  {
    objc_msgSend(v5, "objectAtIndexedSubscript:", objc_msgSend(a1[1], "nextIntWithUpperBound:", objc_msgSend(v5, "count")));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "applyGameModelUpdate:", v6);
    objc_msgSend(v3, "activePlayer");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "gameModelUpdatesForPlayer:", v7);
    v8 = objc_claimAutoreleasedReturnValue();

    v5 = (void *)v8;
  }
  objc_msgSend(*a1, "activePlayer");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v3, "isWinForPlayer:", v9);

  return v10;
}

void sub_227B7291C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B729A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t GKCMonteCarloStrategist::deleteChildren(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;

  if (a2)
  {
    v3 = *(uint64_t **)(a2 + 16);
    v4 = *(uint64_t **)(a2 + 24);
    if (v3 != v4)
    {
      v5 = result;
      do
      {
        if (*v3)
        {
          result = GKCMonteCarloStrategist::deleteChildren(v5);
          v6 = *v3;
          if (*v3)
          {
            v7 = *(id *)v6;
            *(_QWORD *)v6 = 0;

            v8 = *(void **)(v6 + 8);
            *(_QWORD *)(v6 + 8) = 0;

            *(_QWORD *)(v6 + 40) = 0;
            v9 = *(void **)(v6 + 16);
            if (v9)
            {
              *(_QWORD *)(v6 + 24) = v9;
              operator delete(v9);
            }

            result = MEMORY[0x22E2A50A0](v6, 0x10A0C40AF943C6FLL);
          }
        }
        ++v3;
      }
      while (v3 != v4);
      v3 = *(uint64_t **)(a2 + 16);
    }
    *(_QWORD *)(a2 + 24) = v3;
  }
  return result;
}

uint64_t GKCMonteCarloStrategist::expand(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v4 = a3;
  objc_msgSend(v4, "objectAtIndexedSubscript:", *(_QWORD *)(a2 + 48));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  ++*(_QWORD *)(a2 + 48);
  v6 = operator new();
  v7 = (void *)objc_msgSend(*(id *)a2, "copyWithZone:", 0);
  *(_QWORD *)v6 = v7;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  objc_msgSend(v7, "applyGameModelUpdate:", v5);
  objc_storeStrong((id *)(v6 + 8), v5);
  GKCTreeNode::addChild((_QWORD *)a2, v6);
  *(_QWORD *)(v6 + 40) = a2;

  return v6;
}

void sub_227B72B44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x22E2A50A0](v3, 0x10A0C40AF943C6FLL);

  _Unwind_Resume(a1);
}

void sub_227B72B70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B72B80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void GKCTreeNode::addChild(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void **v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[3];
  v4 = a1[4];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = a2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = (void **)(a1 + 2);
  v9 = (char *)a1[2];
  v10 = (v5 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v12 = v4 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v7 = (uint64_t)(v15 + 8);
    v17 = (char *)(v5 - v9);
    if (v5 == v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v16 = 0;
  *(_QWORD *)(8 * v10) = a2;
  v7 = 8 * v10 + 8;
  v17 = (char *)(v5 - v9);
  if (v5 != v9)
  {
LABEL_14:
    v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_28;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v20];
    v15 -= v20;
    v21 = &v14[8 * v10 - 16];
    v22 = (__int128 *)(v5 - 16);
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v25 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v6 != v9);
    }
    v6 = (char *)*v8;
  }
LABEL_21:
  a1[2] = v15;
  a1[3] = v7;
  a1[4] = v16;
  if (v6)
    operator delete(v6);
LABEL_23:
  a1[3] = v7;
}

void GKTriangleGraphNodes::GKTriangleGraphNodes(GKTriangleGraphNodes *this)
{
  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
}

void GKCMeshGraph::GKCMeshGraph(GKCMeshGraph *this)
{
  _QWORD *v2;

  GKCGraph::GKCGraph(this);
  *v2 = &off_24F04ED28;
  ClipperLib::Clipper::Clipper((ClipperLib::Clipper *)(v2 + 5), 0);
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = (char *)this + 360;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = (char *)this + 456;
  *((_QWORD *)this + 59) = (char *)this + 480;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_DWORD *)this + 132) = 1065353216;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_DWORD *)this + 142) = 1065353216;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_DWORD *)this + 152) = 1065353216;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 1065353216;
  *((_WORD *)this + 328) = 1;
  *((_BYTE *)this + 658) = 0;
  *((_QWORD *)this + 83) = 0;
  *(_OWORD *)((char *)this + 680) = 0u;
}

{
  _QWORD *v2;

  GKCGraph::GKCGraph(this);
  *v2 = &off_24F04ED28;
  ClipperLib::Clipper::Clipper((ClipperLib::Clipper *)(v2 + 5), 0);
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = (char *)this + 360;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = (char *)this + 456;
  *((_QWORD *)this + 59) = (char *)this + 480;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_DWORD *)this + 132) = 1065353216;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *((_DWORD *)this + 142) = 1065353216;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_DWORD *)this + 152) = 1065353216;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 1065353216;
  *((_WORD *)this + 328) = 1;
  *((_BYTE *)this + 658) = 0;
  *((_QWORD *)this + 83) = 0;
  *(_OWORD *)((char *)this + 680) = 0u;
}

void sub_227B72DE4(_Unwind_Exception *a1)
{
  id *v1;

  GKCGraph::~GKCGraph(v1);
  _Unwind_Resume(a1);
}

void sub_227B72EB4(_Unwind_Exception *a1)
{
  id *v1;

  GKCGraph::~GKCGraph(v1);
  _Unwind_Resume(a1);
}

void GKCMeshGraph::~GKCMeshGraph(id *this)
{
  _QWORD *v2;
  id v3;
  _QWORD *v4;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  _QWORD *v8;
  id v9;
  _QWORD *v10;
  _QWORD *v11;
  id v12;
  char *v13;
  char *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  char *v20;
  char *v21;
  id v22;
  char *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;

  *this = &off_24F04ED28;
  objc_destroyWeak(this + 83);
  v2 = this[79];
  if (v2)
  {
    do
    {
      v24 = (_QWORD *)*v2;
      v25 = (void *)v2[3];
      if (v25)
      {
        v2[4] = v25;
        operator delete(v25);
      }
      operator delete(v2);
      v2 = v24;
    }
    while (v24);
  }
  v3 = this[77];
  this[77] = 0;
  if (v3)
    operator delete(v3);
  v4 = this[74];
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = this[72];
  this[72] = 0;
  if (v6)
    operator delete(v6);
  v7 = this[69];
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = this[67];
  this[67] = 0;
  if (v9)
    operator delete(v9);
  v10 = this[64];
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = this[62];
  this[62] = 0;
  if (v12)
    operator delete(v12);
  std::__tree<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::__map_value_compare<p2t::Triangle *,std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::less<p2t::Triangle *>,true>,std::allocator<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>>>::destroy((uint64_t)(this + 59), this[60]);
  std::__tree<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::__map_value_compare<p2t::Triangle *,std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::less<p2t::Triangle *>,true>,std::allocator<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>>>::destroy((uint64_t)(this + 56), this[57]);
  v13 = (char *)this[53];
  if (v13)
  {
    v14 = (char *)this[54];
    v15 = this[53];
    if (v14 != v13)
    {
      do
      {
        v16 = (void *)*((_QWORD *)v14 - 1);
        v14 -= 8;

      }
      while (v14 != v13);
      v15 = this[53];
    }
    this[54] = v13;
    operator delete(v15);
  }
  v17 = this[50];
  if (v17)
  {
    this[51] = v17;
    operator delete(v17);
  }
  v18 = this[47];
  if (v18)
  {
    this[48] = v18;
    operator delete(v18);
  }
  std::__tree<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::__map_value_compare<p2t::Triangle *,std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::less<p2t::Triangle *>,true>,std::allocator<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>>>::destroy((uint64_t)(this + 44), this[45]);
  v19 = this[40];
  if (v19)
  {
    this[41] = v19;
    operator delete(v19);
  }
  v20 = (char *)this[37];
  if (v20)
  {
    v21 = (char *)this[38];
    v22 = this[37];
    if (v21 != v20)
    {
      v23 = (char *)this[38];
      do
      {
        v27 = (void *)*((_QWORD *)v23 - 3);
        v23 -= 24;
        v26 = v27;
        if (v27)
        {
          *((_QWORD *)v21 - 2) = v26;
          operator delete(v26);
        }
        v21 = v23;
      }
      while (v23 != v20);
      v22 = this[37];
    }
    this[38] = v20;
    operator delete(v22);
  }
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)(this + 5));
  GKCGraph::~GKCGraph(this);
}

{
  GKCMeshGraph::~GKCMeshGraph(this);
  JUMPOUT(0x22E2A50A0);
}

void **std::vector<std::vector<ClipperLib::IntPoint>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void GKCMeshGraph::AddObstacle(GKCMeshGraph *this, id *a2)
{
  float v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  unint64_t v26;
  id **v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  id **v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t v56;
  int64x2_t *v57;
  int64x2_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  int64x2_t *v65;
  int64x2_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id **v70;
  char *v71;
  id **v72;
  uint64_t v73;
  __int128 v74;
  id *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  int64x2_t v85;
  float64x2_t v86;
  void *__p;
  void *v88;
  char *v89;
  id v90;

  v90 = 0;
  v4 = *((float *)this + 168);
  if (v4 == 0.0)
  {
    v5 = a2[8];
    v90 = v5;
  }
  else
  {
    GKCPolygonObstacle::extrudeObstacle((GKCPolygonObstacle *)a2, (GKCPolygonObstacle *)a2, v4);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v6 = v90;
    v90 = v5;

  }
  v7 = objc_msgSend(v5, "cPolygonObstacle");
  v8 = objc_msgSend(v90, "cPolygonObstacle");
  v9 = (uint64_t *)*((_QWORD *)this + 57);
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v9;
        v12 = v9[4];
        if (v12 <= (unint64_t)a2)
          break;
        v9 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_11;
      }
      if (v12 >= (unint64_t)a2)
        break;
      v9 = v11[1];
      if (!v9)
      {
        v10 = v11 + 1;
        goto LABEL_11;
      }
    }
    v13 = (uint64_t *)v11;
  }
  else
  {
    v10 = (uint64_t **)((char *)this + 456);
    v11 = (uint64_t **)((char *)this + 456);
LABEL_11:
    v13 = (uint64_t *)operator new(0x30uLL);
    v13[4] = (uint64_t)a2;
    v13[5] = 0;
    *v13 = 0;
    v13[1] = 0;
    v13[2] = (uint64_t)v11;
    *v10 = v13;
    v14 = **((_QWORD **)this + 56);
    v15 = v13;
    if (v14)
    {
      *((_QWORD *)this + 56) = v14;
      v15 = *v10;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 57), v15);
    ++*((_QWORD *)this + 58);
  }
  v13[5] = v8;
  v16 = objc_msgSend(v90, "cPolygonObstacle");
  v17 = v16;
  v18 = (uint64_t *)*((_QWORD *)this + 60);
  if (!v18)
  {
    v19 = (uint64_t **)((char *)this + 480);
    v20 = (uint64_t **)((char *)this + 480);
LABEL_22:
    v22 = (uint64_t *)operator new(0x30uLL);
    v22[4] = v17;
    v22[5] = 0;
    *v22 = 0;
    v22[1] = 0;
    v22[2] = (uint64_t)v20;
    *v19 = v22;
    v23 = **((_QWORD **)this + 59);
    v24 = v22;
    if (v23)
    {
      *((_QWORD *)this + 59) = v23;
      v24 = *v19;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 60), v24);
    ++*((_QWORD *)this + 61);
    v22[5] = (uint64_t)a2;
    v25 = (_QWORD *)*((_QWORD *)this + 54);
    if ((unint64_t)v25 < *((_QWORD *)this + 55))
      goto LABEL_25;
LABEL_28:
    *((_QWORD *)this + 54) = std::vector<NSObject * {__strong}>::__push_back_slow_path<NSObject * const {__strong}&>((_QWORD *)this + 53, &v90);
    v27 = (id **)*((_QWORD *)this + 48);
    v26 = *((_QWORD *)this + 49);
    if ((unint64_t)v27 < v26)
      goto LABEL_26;
    goto LABEL_29;
  }
  while (1)
  {
    while (1)
    {
      v20 = (uint64_t **)v18;
      v21 = v18[4];
      if (v16 >= v21)
        break;
      v18 = *v20;
      v19 = v20;
      if (!*v20)
        goto LABEL_22;
    }
    if (v21 >= v16)
      break;
    v18 = v20[1];
    if (!v18)
    {
      v19 = v20 + 1;
      goto LABEL_22;
    }
  }
  v20[5] = (uint64_t *)a2;
  v25 = (_QWORD *)*((_QWORD *)this + 54);
  if ((unint64_t)v25 >= *((_QWORD *)this + 55))
    goto LABEL_28;
LABEL_25:
  *v25 = v90;
  *((_QWORD *)this + 54) = v25 + 1;
  v27 = (id **)*((_QWORD *)this + 48);
  v26 = *((_QWORD *)this + 49);
  if ((unint64_t)v27 < v26)
  {
LABEL_26:
    *v27 = a2;
    v28 = (uint64_t)(v27 + 1);
    goto LABEL_40;
  }
LABEL_29:
  v29 = (char *)*((_QWORD *)this + 47);
  v30 = ((char *)v27 - v29) >> 3;
  v31 = v30 + 1;
  if ((unint64_t)(v30 + 1) >> 61)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v32 = v26 - (_QWORD)v29;
  if (v32 >> 2 > v31)
    v31 = v32 >> 2;
  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
    v33 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v33 = v31;
  if (v33)
  {
    if (v33 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v34 = (char *)operator new(8 * v33);
    v35 = (id **)&v34[8 * v30];
    v36 = &v34[8 * v33];
    *v35 = a2;
    v28 = (uint64_t)(v35 + 1);
    v37 = (char *)((char *)v27 - v29);
    if (v27 == (id **)v29)
    {
LABEL_38:
      *((_QWORD *)this + 47) = v35;
      *((_QWORD *)this + 48) = v28;
      *((_QWORD *)this + 49) = v36;
      if (!v27)
        goto LABEL_40;
      goto LABEL_39;
    }
  }
  else
  {
    v34 = 0;
    v35 = (id **)(8 * v30);
    v36 = 0;
    *(_QWORD *)(8 * v30) = a2;
    v28 = 8 * v30 + 8;
    v37 = (char *)((char *)v27 - v29);
    if (v27 == (id **)v29)
      goto LABEL_38;
  }
  v67 = (unint64_t)(v37 - 8);
  if (v67 < 0x58)
    goto LABEL_102;
  if ((unint64_t)(v29 - v34) < 0x20)
    goto LABEL_102;
  v68 = (v67 >> 3) + 1;
  v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
  v70 = &v27[v69 / 0xFFFFFFFFFFFFFFF8];
  v35 = (id **)((char *)v35 - v69);
  v71 = &v34[8 * v30 - 16];
  v72 = v27 - 2;
  v73 = v68 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v74 = *(_OWORD *)v72;
    *((_OWORD *)v71 - 1) = *((_OWORD *)v72 - 1);
    *(_OWORD *)v71 = v74;
    v71 -= 32;
    v72 -= 4;
    v73 -= 4;
  }
  while (v73);
  v27 = v70;
  if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_102:
    do
    {
      v75 = *--v27;
      *--v35 = v75;
    }
    while (v27 != (id **)v29);
  }
  v27 = (id **)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = v35;
  *((_QWORD *)this + 48) = v28;
  *((_QWORD *)this + 49) = v36;
  if (v27)
LABEL_39:
    operator delete(v27);
LABEL_40:
  *((_QWORD *)this + 48) = v28;
  v38 = objc_msgSend(v90, "cPolygonObstacle");
  v39 = v38;
  v41 = (uint64_t *)*((_QWORD *)this + 51);
  v40 = *((_QWORD *)this + 52);
  if ((unint64_t)v41 < v40)
  {
    *v41 = v38;
    v42 = (uint64_t)(v41 + 1);
    goto LABEL_53;
  }
  v43 = (char *)*((_QWORD *)this + 50);
  v44 = ((char *)v41 - v43) >> 3;
  v45 = v44 + 1;
  if ((unint64_t)(v44 + 1) >> 61)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v46 = v40 - (_QWORD)v43;
  if (v46 >> 2 > v45)
    v45 = v46 >> 2;
  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
    v47 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v47 = v45;
  if (v47)
  {
    if (v47 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v48 = (char *)operator new(8 * v47);
    v49 = (uint64_t *)&v48[8 * v44];
    v50 = &v48[8 * v47];
    *v49 = v39;
    v42 = (uint64_t)(v49 + 1);
    v51 = (char *)((char *)v41 - v43);
    if (v41 == (uint64_t *)v43)
    {
LABEL_51:
      *((_QWORD *)this + 50) = v49;
      *((_QWORD *)this + 51) = v42;
      *((_QWORD *)this + 52) = v50;
      if (!v41)
        goto LABEL_53;
      goto LABEL_52;
    }
  }
  else
  {
    v48 = 0;
    v49 = (uint64_t *)(8 * v44);
    v50 = 0;
    *(_QWORD *)(8 * v44) = v39;
    v42 = 8 * v44 + 8;
    v51 = (char *)((char *)v41 - v43);
    if (v41 == (uint64_t *)v43)
      goto LABEL_51;
  }
  v76 = (unint64_t)(v51 - 8);
  if (v76 < 0x58)
    goto LABEL_103;
  if ((unint64_t)(v43 - v48) < 0x20)
    goto LABEL_103;
  v77 = (v76 >> 3) + 1;
  v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
  v79 = &v41[v78 / 0xFFFFFFFFFFFFFFF8];
  v49 = (uint64_t *)((char *)v49 - v78);
  v80 = &v48[8 * v44 - 16];
  v81 = v41 - 2;
  v82 = v77 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v83 = *(_OWORD *)v81;
    *((_OWORD *)v80 - 1) = *((_OWORD *)v81 - 1);
    *(_OWORD *)v80 = v83;
    v80 -= 32;
    v81 -= 4;
    v82 -= 4;
  }
  while (v82);
  v41 = v79;
  if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_103:
    do
    {
      v84 = *--v41;
      *--v49 = v84;
    }
    while (v41 != (uint64_t *)v43);
  }
  v41 = (uint64_t *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = v49;
  *((_QWORD *)this + 51) = v42;
  *((_QWORD *)this + 52) = v50;
  if (v41)
LABEL_52:
    operator delete(v41);
LABEL_53:
  *((_QWORD *)this + 51) = v42;
  v88 = 0;
  v89 = 0;
  __p = 0;
  v52 = *(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8);
  if (v52)
  {
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = v52 >> 3;
    v86 = (float64x2_t)vdupq_n_s64(0x40C3880000000000uLL);
    while (1)
    {
      v58 = vcvtq_s64_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)(v7 + 8) + 8 * v54)), v86));
      if (v53 >= v89)
        break;
      *(int64x2_t *)v53 = v58;
      v57 = (int64x2_t *)(v53 + 16);
LABEL_56:
      v88 = v57;
      v53 = (char *)v57;
      v54 = ++v55;
      if (v56 <= v55)
        goto LABEL_73;
    }
    v59 = (char *)__p;
    v60 = (v53 - (_BYTE *)__p) >> 4;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 60)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v62 = v89 - (_BYTE *)__p;
    if ((v89 - (_BYTE *)__p) >> 3 > v61)
      v61 = v62 >> 3;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF0)
      v63 = 0xFFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    if (v63)
    {
      v85 = v58;
      if (v63 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v64 = (char *)operator new(16 * v63);
      v65 = (int64x2_t *)&v64[16 * v60];
      *v65 = v85;
      v57 = v65 + 1;
      if (v53 == v59)
        goto LABEL_71;
    }
    else
    {
      v64 = 0;
      v65 = (int64x2_t *)(16 * v60);
      v66 = (int64x2_t *)(16 * v60);
      *v66 = v58;
      v57 = v66 + 1;
      if (v53 == v59)
        goto LABEL_71;
    }
    do
    {
      v65[-1] = *((int64x2_t *)v53 - 1);
      --v65;
      v53 -= 16;
    }
    while (v53 != v59);
    v53 = (char *)__p;
LABEL_71:
    __p = v65;
    v88 = v57;
    v89 = &v64[16 * v63];
    if (v53)
      operator delete(v53);
    goto LABEL_56;
  }
LABEL_73:
  ClipperLib::ClipperBase::AddPath((uint64_t)this + *(_QWORD *)(*((_QWORD *)this + 5) - 24) + 40, (int64x2_t **)&__p, 0, 1);
  if (__p)
  {
    v88 = __p;
    operator delete(__p);
  }

}

void sub_227B7378C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_227B737A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void GKCMeshGraph::RemoveObstacle(GKCMeshGraph *this, GKCPolygonObstacle *a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t *v16;
  uint64_t v17;
  BOOL v18;
  int64x2_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  int64x2_t *v24;
  int64x2_t *v25;
  int64x2_t *v26;
  int64x2_t *v27;
  uint64_t *v28;
  uint64_t **v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t **v35;
  uint64_t **v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  GKCPolygonObstacle **v41;
  GKCPolygonObstacle **v42;
  int64_t v43;
  char *v44;
  _QWORD *v45;
  int64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  int64x2_t v53;
  float64x2_t v54;
  void *__p;
  void *v56;
  int64x2_t *v57;

  v4 = (uint64_t **)((char *)this + 456);
  v5 = (uint64_t *)*((_QWORD *)this + 57);
  v6 = (uint64_t **)((char *)this + 456);
  v7 = (uint64_t **)((char *)this + 456);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= (unint64_t)a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_8;
      }
      if (v8 >= (unint64_t)a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = (uint64_t *)a2;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = **((_QWORD **)this + 56);
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *((_QWORD *)this + 56) = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 57), v11);
    ++*((_QWORD *)this + 58);
  }
  v12 = v7[5];
  v56 = 0;
  v57 = 0;
  __p = 0;
  v13 = v12[2] - v12[1];
  if ((int)(v13 >> 3) >= 1)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = (v13 >> 3);
    v54 = (float64x2_t)vdupq_n_s64(0x40C3880000000000uLL);
    do
    {
      while (1)
      {
        v19 = vcvtq_s64_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(v12[1] + 8 * (v17 - 1))), v54));
        if (v15 >= v14)
          break;
        *v15++ = v19;
        v56 = v15;
        v18 = v17-- <= 1;
        if (v18)
          goto LABEL_34;
      }
      v20 = v15 - v16;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 60)
        _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
      if (((char *)v14 - (char *)v16) >> 3 > v21)
        v21 = ((char *)v14 - (char *)v16) >> 3;
      if ((unint64_t)((char *)v14 - (char *)v16) >= 0x7FFFFFFFFFFFFFF0)
        v22 = 0xFFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
      {
        v53 = v19;
        if (v22 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v23 = (char *)operator new(16 * v22);
        v24 = (int64x2_t *)&v23[16 * v20];
        *v24 = v53;
        v25 = v24 + 1;
        if (v15 == v16)
        {
LABEL_32:
          v27 = v24;
          v14 = (int64x2_t *)&v23[16 * v22];
          __p = v24;
          v57 = v14;
          if (!v16)
            goto LABEL_29;
          goto LABEL_28;
        }
      }
      else
      {
        v23 = 0;
        v24 = (int64x2_t *)(16 * v20);
        v26 = (int64x2_t *)(16 * v20);
        *v26 = v19;
        v25 = v26 + 1;
        if (v15 == v16)
          goto LABEL_32;
      }
      do
      {
        v27 = v24 - 1;
        v24[-1] = v15[-1];
        --v15;
        --v24;
      }
      while (v15 != v16);
      v14 = (int64x2_t *)&v23[16 * v22];
      __p = v27;
      v57 = v14;
      if (!v16)
        goto LABEL_29;
LABEL_28:
      operator delete(v16);
LABEL_29:
      v16 = v27;
      v56 = v25;
      v15 = v25;
      v18 = v17-- <= 1;
    }
    while (!v18);
  }
LABEL_34:
  ClipperLib::ClipperBase::AddPath((uint64_t)this + *(_QWORD *)(*((_QWORD *)this + 5) - 24) + 40, (int64x2_t **)&__p, 0, 1);
  v28 = *v4;
  v29 = v4;
  if (*v4)
  {
    while (1)
    {
      while (1)
      {
        v29 = (uint64_t **)v28;
        v30 = v28[4];
        if (v30 <= (unint64_t)a2)
          break;
        v28 = *v29;
        v4 = v29;
        if (!*v29)
          goto LABEL_41;
      }
      if (v30 >= (unint64_t)a2)
        break;
      v28 = v29[1];
      if (!v28)
      {
        v4 = v29 + 1;
        goto LABEL_41;
      }
    }
    v29[5] = 0;
    v34 = (uint64_t *)*((_QWORD *)this + 60);
    if (v34)
      goto LABEL_48;
    goto LABEL_46;
  }
LABEL_41:
  v31 = (uint64_t *)operator new(0x30uLL);
  v31[4] = (uint64_t)a2;
  v31[5] = 0;
  *v31 = 0;
  v31[1] = 0;
  v31[2] = (uint64_t)v29;
  *v4 = v31;
  v32 = **((_QWORD **)this + 56);
  v33 = v31;
  if (v32)
  {
    *((_QWORD *)this + 56) = v32;
    v33 = *v4;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 57), v33);
  ++*((_QWORD *)this + 58);
  v31[5] = 0;
  v34 = (uint64_t *)*((_QWORD *)this + 60);
  if (!v34)
  {
LABEL_46:
    v35 = (uint64_t **)((char *)this + 480);
    v36 = (uint64_t **)((char *)this + 480);
LABEL_52:
    v38 = (uint64_t *)operator new(0x30uLL);
    v38[4] = (uint64_t)v12;
    v38[5] = 0;
    *v38 = 0;
    v38[1] = 0;
    v38[2] = (uint64_t)v36;
    *v35 = v38;
    v39 = **((_QWORD **)this + 59);
    v40 = v38;
    if (v39)
    {
      *((_QWORD *)this + 59) = v39;
      v40 = *v35;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 60), v40);
    ++*((_QWORD *)this + 61);
    v38[5] = 0;
    v42 = (GKCPolygonObstacle **)*((_QWORD *)this + 47);
    v41 = (GKCPolygonObstacle **)*((_QWORD *)this + 48);
    if (v42 != v41)
    {
LABEL_57:
      while (*v42 != a2)
      {
        if (++v42 == v41)
        {
          v42 = v41;
          goto LABEL_60;
        }
      }
    }
    goto LABEL_60;
  }
  while (1)
  {
LABEL_48:
    while (1)
    {
      v36 = (uint64_t **)v34;
      v37 = v34[4];
      if ((unint64_t)v12 >= v37)
        break;
      v34 = *v36;
      v35 = v36;
      if (!*v36)
        goto LABEL_52;
    }
    if (v37 >= (unint64_t)v12)
      break;
    v34 = v36[1];
    if (!v34)
    {
      v35 = v36 + 1;
      goto LABEL_52;
    }
  }
  v36[5] = 0;
  v42 = (GKCPolygonObstacle **)*((_QWORD *)this + 47);
  v41 = (GKCPolygonObstacle **)*((_QWORD *)this + 48);
  if (v42 != v41)
    goto LABEL_57;
LABEL_60:
  v43 = (char *)v41 - (char *)(v42 + 1);
  if (v41 != v42 + 1)
    memmove(v42, v42 + 1, (char *)v41 - (char *)(v42 + 1));
  *((_QWORD *)this + 48) = (char *)v42 + v43;
  v45 = (_QWORD *)*((_QWORD *)this + 50);
  v44 = (char *)*((_QWORD *)this + 51);
  if (v45 != (_QWORD *)v44)
  {
    while ((uint64_t *)*v45 != v12)
    {
      if (++v45 == (_QWORD *)v44)
      {
        v45 = (_QWORD *)*((_QWORD *)this + 51);
        break;
      }
    }
  }
  v46 = v44 - (char *)(v45 + 1);
  if (v44 != (char *)(v45 + 1))
    memmove(v45, v45 + 1, v44 - (char *)(v45 + 1));
  *((_QWORD *)this + 51) = (char *)v45 + v46;
  v48 = (_QWORD *)*((_QWORD *)this + 53);
  v47 = (_QWORD *)*((_QWORD *)this + 54);
  if (v48 != v47)
  {
    while (*v48 != v12[8])
    {
      if (++v48 == v47)
      {
        v48 = (_QWORD *)*((_QWORD *)this + 54);
        break;
      }
    }
  }
  v49 = v48 + 1;
  if (v48 + 1 != v47)
  {
    do
    {
      v48 = v49;
      v50 = (void *)*(v49 - 1);
      *(v49 - 1) = *v49;
      *v49 = 0;

      v49 = v48 + 1;
    }
    while (v48 + 1 != v47);
    v47 = (_QWORD *)*((_QWORD *)this + 54);
  }
  while (v47 != v48)
  {
    v51 = (void *)*--v47;

  }
  *((_QWORD *)this + 54) = v48;
  if (__p)
  {
    v56 = __p;
    operator delete(__p);
  }
}

void sub_227B73CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void GKCMeshGraph::Triangulate(GKCMeshGraph *this)
{
  GKCMeshGraph *v1;
  unint64_t v2;
  unint64_t v3;
  p2t::SweepContext **v4;
  _QWORD *i;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t j;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t k;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t m;
  _QWORD *v18;
  uint64_t v19;
  uint64_t n;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t *v38;
  char *v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t *v61;
  char *v62;
  int64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _OWORD *v68;
  __int128 *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  uint64_t *v83;
  char *v84;
  int64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  _OWORD *v90;
  __int128 *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  uint64_t *v106;
  char *v107;
  int64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _OWORD *v113;
  __int128 *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  int64_t v120;
  char *v121;
  char *v122;
  const void **v123;
  _BYTE *v124;
  const void *v125;
  int64_t v126;
  char *v127;
  char *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  int64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _BYTE *v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _OWORD *v148;
  uint64_t *v149;
  uint64_t v150;
  __int128 v151;
  uint64_t *v152;
  int64_t v153;
  char *v154;
  char *v155;
  char *v156;
  void *v157;
  char *v158;
  void *v159;
  void *v160;
  uint64_t **v161;
  float64x2_t v162;
  int64x2_t v163;
  void *v164;
  void *v165;
  char *v166;
  void *__p;
  uint64_t *v168;
  uint64_t *v169;
  void *v170;
  char *v171;
  char *v172;
  void *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  uint64_t *v179;
  uint64_t *v180;
  unint64_t v181;

  v1 = this;
  v2 = *((_QWORD *)this + 2) - *((_QWORD *)this + 1);
  if ((int)(v2 >> 3) >= 1)
  {
    v3 = (v2 >> 3) + 1;
    do
      (*(void (**)(GKCMeshGraph *, _QWORD))(*(_QWORD *)v1 + 16))(v1, *(_QWORD *)(*((_QWORD *)v1 + 1) + 8 * (v3-- - 2)));
    while (v3 > 1);
  }
  v4 = (p2t::SweepContext **)*((_QWORD *)v1 + 43);
  if (v4)
  {
    p2t::CDT::~CDT(v4);
    MEMORY[0x22E2A50A0]();
  }
  for (i = (_QWORD *)*((_QWORD *)v1 + 79); i; i = (_QWORD *)*i)
  {
    v25 = i[4] - i[3];
    if ((int)(v25 >> 3) >= 1)
    {
      v26 = (v25 >> 3) + 1;
      do
      {
        v27 = (v26 - 2);
        v28 = i[3];
        v29 = *(_QWORD *)(v28 + 8 * v27);
        if (v29)
        {
          MEMORY[0x22E2A50A0](v29, 0x20C40A4A59CD2);
          v28 = i[3];
        }
        *(_QWORD *)(v28 + 8 * v27) = 0;
        --v26;
      }
      while (v26 > 1);
    }
  }
  if (*((_QWORD *)v1 + 65))
  {
    v6 = (_QWORD *)*((_QWORD *)v1 + 64);
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    *((_QWORD *)v1 + 64) = 0;
    v8 = *((_QWORD *)v1 + 63);
    if (v8)
    {
      for (j = 0; j != v8; ++j)
        *(_QWORD *)(*((_QWORD *)v1 + 62) + 8 * j) = 0;
    }
    *((_QWORD *)v1 + 65) = 0;
  }
  if (*((_QWORD *)v1 + 70))
  {
    v10 = (_QWORD *)*((_QWORD *)v1 + 69);
    if (v10)
    {
      do
      {
        v11 = (_QWORD *)*v10;
        operator delete(v10);
        v10 = v11;
      }
      while (v11);
    }
    *((_QWORD *)v1 + 69) = 0;
    v12 = *((_QWORD *)v1 + 68);
    if (v12)
    {
      for (k = 0; k != v12; ++k)
        *(_QWORD *)(*((_QWORD *)v1 + 67) + 8 * k) = 0;
    }
    *((_QWORD *)v1 + 70) = 0;
  }
  if (*((_QWORD *)v1 + 75))
  {
    v14 = (_QWORD *)*((_QWORD *)v1 + 74);
    if (v14)
    {
      do
      {
        v15 = (_QWORD *)*v14;
        operator delete(v14);
        v14 = v15;
      }
      while (v15);
    }
    *((_QWORD *)v1 + 74) = 0;
    v16 = *((_QWORD *)v1 + 73);
    if (v16)
    {
      for (m = 0; m != v16; ++m)
        *(_QWORD *)(*((_QWORD *)v1 + 72) + 8 * m) = 0;
    }
    *((_QWORD *)v1 + 75) = 0;
  }
  if (*((_QWORD *)v1 + 80))
  {
    v18 = (_QWORD *)*((_QWORD *)v1 + 79);
    if (v18)
    {
      do
      {
        v30 = (_QWORD *)*v18;
        v31 = (void *)v18[3];
        if (v31)
        {
          v18[4] = v31;
          operator delete(v31);
        }
        operator delete(v18);
        v18 = v30;
      }
      while (v30);
    }
    *((_QWORD *)v1 + 79) = 0;
    v19 = *((_QWORD *)v1 + 78);
    if (v19)
    {
      for (n = 0; n != v19; ++n)
        *(_QWORD *)(*((_QWORD *)v1 + 77) + 8 * n) = 0;
    }
    *((_QWORD *)v1 + 80) = 0;
  }
  v179 = 0;
  v180 = 0;
  v181 = 0;
  v21 = operator new();
  v22 = v21;
  *(float64x2_t *)v21 = vcvtq_f64_f32(*(float32x2_t *)((char *)v1 + 680));
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  v23 = v180;
  if ((unint64_t)v180 < v181)
  {
    *v180 = v21;
    v24 = (uint64_t)(v23 + 1);
    goto LABEL_65;
  }
  v32 = v179;
  v33 = v180 - v179;
  v34 = v33 + 1;
  if ((unint64_t)(v33 + 1) >> 61)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v35 = v181 - (_QWORD)v179;
  if ((uint64_t)(v181 - (_QWORD)v179) >> 2 > v34)
    v34 = v35 >> 2;
  if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
    v36 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v36 = v34;
  if (!v36)
  {
    v37 = 0;
    v38 = (uint64_t *)(8 * v33);
    v39 = 0;
    *(_QWORD *)(8 * v33) = v22;
    v24 = 8 * v33 + 8;
    v40 = (char *)v23 - (char *)v32;
    if (v23 != v32)
      goto LABEL_54;
LABEL_63:
    v179 = v38;
    v181 = (unint64_t)v39;
    if (!v23)
      goto LABEL_65;
    goto LABEL_64;
  }
  if (v36 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v37 = operator new(8 * v36);
  v38 = (uint64_t *)&v37[8 * v33];
  v39 = &v37[8 * v36];
  *v38 = v22;
  v24 = (uint64_t)(v38 + 1);
  v40 = (char *)v23 - (char *)v32;
  if (v23 == v32)
    goto LABEL_63;
LABEL_54:
  v41 = v40 - 8;
  if (v41 < 0x58)
    goto LABEL_211;
  if ((unint64_t)((char *)v32 - v37) < 0x20)
    goto LABEL_211;
  v42 = (v41 >> 3) + 1;
  v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
  v44 = (char *)&v23[v43 / 0xFFFFFFFFFFFFFFF8];
  v38 = (uint64_t *)((char *)v38 - v43);
  v45 = &v37[8 * v33 - 16];
  v46 = (__int128 *)(v23 - 2);
  v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v48 = *v46;
    *(v45 - 1) = *(v46 - 1);
    *v45 = v48;
    v45 -= 2;
    v46 -= 2;
    v47 -= 4;
  }
  while (v47);
  v23 = (uint64_t *)v44;
  if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_211:
    do
    {
      v49 = *--v23;
      *--v38 = v49;
    }
    while (v23 != v32);
  }
  v23 = v179;
  v179 = v38;
  v181 = (unint64_t)v39;
  if (v23)
LABEL_64:
    operator delete(v23);
LABEL_65:
  v180 = (uint64_t *)v24;
  v50 = operator new();
  v51 = v50;
  v52 = *((float *)v1 + 171);
  *(double *)v50 = COERCE_FLOAT(*((_QWORD *)v1 + 86));
  *(double *)(v50 + 8) = v52;
  *(_QWORD *)(v50 + 24) = 0;
  *(_QWORD *)(v50 + 32) = 0;
  *(_QWORD *)(v50 + 16) = 0;
  v53 = v180;
  if ((unint64_t)v180 < v181)
  {
    *v180 = v50;
    v54 = (uint64_t)(v53 + 1);
    goto LABEL_87;
  }
  v55 = v179;
  v56 = v180 - v179;
  v57 = v56 + 1;
  if ((unint64_t)(v56 + 1) >> 61)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v58 = v181 - (_QWORD)v179;
  if ((uint64_t)(v181 - (_QWORD)v179) >> 2 > v57)
    v57 = v58 >> 2;
  if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
    v59 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v59 = v57;
  if (!v59)
  {
    v60 = 0;
    v61 = (uint64_t *)(8 * v56);
    v62 = 0;
    *(_QWORD *)(8 * v56) = v51;
    v54 = 8 * v56 + 8;
    v63 = (char *)v53 - (char *)v55;
    if (v53 != v55)
      goto LABEL_76;
LABEL_85:
    v179 = v61;
    v181 = (unint64_t)v62;
    if (!v53)
      goto LABEL_87;
    goto LABEL_86;
  }
  if (v59 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v60 = operator new(8 * v59);
  v61 = (uint64_t *)&v60[8 * v56];
  v62 = &v60[8 * v59];
  *v61 = v51;
  v54 = (uint64_t)(v61 + 1);
  v63 = (char *)v53 - (char *)v55;
  if (v53 == v55)
    goto LABEL_85;
LABEL_76:
  v64 = v63 - 8;
  if (v64 < 0x58)
    goto LABEL_212;
  if ((unint64_t)((char *)v55 - v60) < 0x20)
    goto LABEL_212;
  v65 = (v64 >> 3) + 1;
  v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
  v67 = (char *)&v53[v66 / 0xFFFFFFFFFFFFFFF8];
  v61 = (uint64_t *)((char *)v61 - v66);
  v68 = &v60[8 * v56 - 16];
  v69 = (__int128 *)(v53 - 2);
  v70 = v65 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v71 = *v69;
    *(v68 - 1) = *(v69 - 1);
    *v68 = v71;
    v68 -= 2;
    v69 -= 2;
    v70 -= 4;
  }
  while (v70);
  v53 = (uint64_t *)v67;
  if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_212:
    do
    {
      v72 = *--v53;
      *--v61 = v72;
    }
    while (v53 != v55);
  }
  v53 = v179;
  v179 = v61;
  v181 = (unint64_t)v62;
  if (v53)
LABEL_86:
    operator delete(v53);
LABEL_87:
  v180 = (uint64_t *)v54;
  v73 = operator new();
  v74 = v73;
  *(float64x2_t *)v73 = vcvtq_f64_f32(*(float32x2_t *)((char *)v1 + 688));
  *(_QWORD *)(v73 + 24) = 0;
  *(_QWORD *)(v73 + 32) = 0;
  *(_QWORD *)(v73 + 16) = 0;
  v75 = v180;
  if ((unint64_t)v180 < v181)
  {
    *v180 = v73;
    v76 = (uint64_t)(v75 + 1);
    goto LABEL_109;
  }
  v77 = v179;
  v78 = v180 - v179;
  v79 = v78 + 1;
  if ((unint64_t)(v78 + 1) >> 61)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v80 = v181 - (_QWORD)v179;
  if ((uint64_t)(v181 - (_QWORD)v179) >> 2 > v79)
    v79 = v80 >> 2;
  if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
    v81 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v81 = v79;
  if (!v81)
  {
    v82 = 0;
    v83 = (uint64_t *)(8 * v78);
    v84 = 0;
    *(_QWORD *)(8 * v78) = v74;
    v76 = 8 * v78 + 8;
    v85 = (char *)v75 - (char *)v77;
    if (v75 != v77)
      goto LABEL_98;
LABEL_107:
    v179 = v83;
    v181 = (unint64_t)v84;
    if (!v75)
      goto LABEL_109;
    goto LABEL_108;
  }
  if (v81 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v82 = operator new(8 * v81);
  v83 = (uint64_t *)&v82[8 * v78];
  v84 = &v82[8 * v81];
  *v83 = v74;
  v76 = (uint64_t)(v83 + 1);
  v85 = (char *)v75 - (char *)v77;
  if (v75 == v77)
    goto LABEL_107;
LABEL_98:
  v86 = v85 - 8;
  if (v86 < 0x58)
    goto LABEL_213;
  if ((unint64_t)((char *)v77 - v82) < 0x20)
    goto LABEL_213;
  v87 = (v86 >> 3) + 1;
  v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
  v89 = (char *)&v75[v88 / 0xFFFFFFFFFFFFFFF8];
  v83 = (uint64_t *)((char *)v83 - v88);
  v90 = &v82[8 * v78 - 16];
  v91 = (__int128 *)(v75 - 2);
  v92 = v87 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v93 = *v91;
    *(v90 - 1) = *(v91 - 1);
    *v90 = v93;
    v90 -= 2;
    v91 -= 2;
    v92 -= 4;
  }
  while (v92);
  v75 = (uint64_t *)v89;
  if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_213:
    do
    {
      v94 = *--v75;
      *--v83 = v94;
    }
    while (v75 != v77);
  }
  v75 = v179;
  v179 = v83;
  v181 = (unint64_t)v84;
  if (v75)
LABEL_108:
    operator delete(v75);
LABEL_109:
  v180 = (uint64_t *)v76;
  v95 = operator new();
  v96 = v95;
  v97 = *((float *)v1 + 173);
  *(double *)v95 = COERCE_FLOAT(*((_QWORD *)v1 + 85));
  *(double *)(v95 + 8) = v97;
  *(_QWORD *)(v95 + 24) = 0;
  *(_QWORD *)(v95 + 32) = 0;
  *(_QWORD *)(v95 + 16) = 0;
  v98 = v180;
  if ((unint64_t)v180 < v181)
  {
    *v180 = v95;
    v99 = (uint64_t)(v98 + 1);
    goto LABEL_131;
  }
  v100 = v179;
  v101 = v180 - v179;
  v102 = v101 + 1;
  if ((unint64_t)(v101 + 1) >> 61)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v103 = v181 - (_QWORD)v179;
  if ((uint64_t)(v181 - (_QWORD)v179) >> 2 > v102)
    v102 = v103 >> 2;
  if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF8)
    v104 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v104 = v102;
  if (!v104)
  {
    v105 = 0;
    v106 = (uint64_t *)(8 * v101);
    v107 = 0;
    *(_QWORD *)(8 * v101) = v96;
    v99 = 8 * v101 + 8;
    v108 = (char *)v98 - (char *)v100;
    if (v98 != v100)
      goto LABEL_120;
LABEL_129:
    v179 = v106;
    v181 = (unint64_t)v107;
    if (!v98)
      goto LABEL_131;
    goto LABEL_130;
  }
  if (v104 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v105 = operator new(8 * v104);
  v106 = (uint64_t *)&v105[8 * v101];
  v107 = &v105[8 * v104];
  *v106 = v96;
  v99 = (uint64_t)(v106 + 1);
  v108 = (char *)v98 - (char *)v100;
  if (v98 == v100)
    goto LABEL_129;
LABEL_120:
  v109 = v108 - 8;
  if (v109 < 0x58)
    goto LABEL_214;
  if ((unint64_t)((char *)v100 - v105) < 0x20)
    goto LABEL_214;
  v110 = (v109 >> 3) + 1;
  v111 = 8 * (v110 & 0x3FFFFFFFFFFFFFFCLL);
  v112 = (char *)&v98[v111 / 0xFFFFFFFFFFFFFFF8];
  v106 = (uint64_t *)((char *)v106 - v111);
  v113 = &v105[8 * v101 - 16];
  v114 = (__int128 *)(v98 - 2);
  v115 = v110 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v116 = *v114;
    *(v113 - 1) = *(v114 - 1);
    *v113 = v116;
    v113 -= 2;
    v114 -= 2;
    v115 -= 4;
  }
  while (v115);
  v98 = (uint64_t *)v112;
  if (v110 != (v110 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_214:
    do
    {
      v117 = *--v98;
      *--v106 = v117;
    }
    while (v98 != v100);
  }
  v98 = v179;
  v179 = v106;
  v181 = (unint64_t)v107;
  if (v98)
LABEL_130:
    operator delete(v98);
LABEL_131:
  v180 = (uint64_t *)v99;
  v118 = operator new();
  v176 = 0;
  v177 = 0;
  v178 = 0;
  v119 = (uint64_t *)v99;
  v120 = v99 - (_QWORD)v179;
  if (v119 != v179)
  {
    if (v120 < 0)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v121 = (char *)operator new((char *)v180 - (char *)v179);
    v122 = &v121[8 * (v120 >> 3)];
    v176 = v121;
    v178 = v122;
    memcpy(v121, v179, v120);
    v177 = v122;
  }
  p2t::CDT::CDT(v118, &v176);
  *((_QWORD *)v1 + 43) = v118;
  if (v176)
  {
    v177 = v176;
    operator delete(v176);
  }
  v173 = 0;
  v174 = 0;
  v175 = 0;
  ClipperLib::Clipper::Execute((uint64_t)v1 + 40, 1, (uint64_t *)&v173, 1, 1);
  v123 = (const void **)v173;
  if (v173 != v174)
  {
    v162 = (float64x2_t)vdupq_n_s64(0x3F1A36E2EB1C432DuLL);
    v161 = (uint64_t **)v1;
    do
    {
      v170 = 0;
      v171 = 0;
      v172 = 0;
      v125 = *v123;
      v124 = v123[1];
      v126 = v124 - (_BYTE *)*v123;
      if (v124 == *v123)
      {
        __p = 0;
        v168 = 0;
        v169 = 0;
        v152 = (uint64_t *)*((_QWORD *)v1 + 43);
        v165 = 0;
        v166 = 0;
        v164 = 0;
        goto LABEL_179;
      }
      if (v126 < 0)
        _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
      v127 = (char *)operator new(v124 - (_BYTE *)*v123);
      v128 = &v127[16 * (v126 >> 4)];
      v170 = v127;
      v172 = v128;
      memcpy(v127, v125, v126);
      v129 = 0;
      v130 = 0;
      v171 = v128;
      __p = 0;
      v168 = 0;
      v169 = 0;
      if ((unint64_t)(v126 >> 4) <= 1)
        v131 = 1;
      else
        v131 = v126 >> 4;
      do
      {
        while (1)
        {
          v163 = *((int64x2_t *)v170 + v130);
          v132 = operator new();
          v133 = v132;
          *(float64x2_t *)v132 = vmulq_f64(vcvtq_f64_s64(v163), v162);
          *(_QWORD *)(v132 + 24) = 0;
          *(_QWORD *)(v132 + 32) = 0;
          *(_QWORD *)(v132 + 16) = 0;
          if (v129 >= v169)
            break;
          *v129++ = v132;
          v168 = v129;
          if (++v130 == v131)
            goto LABEL_175;
        }
        v134 = (uint64_t *)__p;
        v135 = (char *)v129 - (_BYTE *)__p;
        v136 = ((char *)v129 - (_BYTE *)__p) >> 3;
        v137 = v136 + 1;
        if ((unint64_t)(v136 + 1) >> 61)
          _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
        v138 = (char *)v169 - (_BYTE *)__p;
        if (((char *)v169 - (_BYTE *)__p) >> 2 > v137)
          v137 = v138 >> 2;
        if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
          v139 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v139 = v137;
        if (v139)
        {
          if (v139 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v140 = operator new(8 * v139);
          v141 = (uint64_t *)&v140[8 * v136];
          *v141 = v133;
          v142 = (uint64_t)(v141 + 1);
          if (v129 == v134)
          {
LABEL_161:
            __p = v141;
            v168 = (uint64_t *)v142;
            v169 = (uint64_t *)&v140[8 * v139];
            if (!v129)
              goto LABEL_163;
LABEL_162:
            operator delete(v129);
            goto LABEL_163;
          }
        }
        else
        {
          v140 = 0;
          v141 = (uint64_t *)(8 * v136);
          *(_QWORD *)(8 * v136) = v133;
          v142 = 8 * v136 + 8;
          if (v129 == v134)
            goto LABEL_161;
        }
        v143 = (char *)(v129 - 1) - (char *)v134;
        if (v143 < 0x168)
        {
          v144 = v129;
          goto LABEL_157;
        }
        if (&v140[v135 - 8 - (v143 & 0xFFFFFFFFFFFFFFF8)] > &v140[v135 - 8])
        {
          v144 = v129;
          do
          {
LABEL_157:
            v145 = *--v144;
            *--v141 = v145;
          }
          while (v144 != v134);
          goto LABEL_158;
        }
        if ((uint64_t *)((char *)v129 - (v143 & 0xFFFFFFFFFFFFFFF8) - 8) > v129 - 1)
        {
          v144 = v129;
          goto LABEL_157;
        }
        if ((unint64_t)((char *)v129 - v140 - v135) < 0x20)
        {
          v144 = v129;
          goto LABEL_157;
        }
        v146 = (v143 >> 3) + 1;
        v147 = 8 * (v146 & 0x3FFFFFFFFFFFFFFCLL);
        v144 = &v129[v147 / 0xFFFFFFFFFFFFFFF8];
        v141 = (uint64_t *)((char *)v141 - v147);
        v148 = &v140[8 * v136 - 16];
        v149 = v129 - 2;
        v150 = v146 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v151 = *(_OWORD *)v149;
          *(v148 - 1) = *((_OWORD *)v149 - 1);
          *v148 = v151;
          v148 -= 2;
          v149 -= 4;
          v150 -= 4;
        }
        while (v150);
        if (v146 != (v146 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_157;
LABEL_158:
        v129 = (uint64_t *)__p;
        __p = v141;
        v168 = (uint64_t *)v142;
        v169 = (uint64_t *)&v140[8 * v139];
        if (v129)
          goto LABEL_162;
LABEL_163:
        v129 = (uint64_t *)v142;
        v168 = (uint64_t *)v142;
        ++v130;
      }
      while (v130 != v131);
LABEL_175:
      v126 = (int64_t)__p;
      v1 = (GKCMeshGraph *)v161;
      v152 = v161[43];
      v165 = 0;
      v166 = 0;
      v164 = 0;
      v153 = (char *)v129 - (_BYTE *)__p;
      if (v153)
      {
        if (v153 < 0)
          _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
        v164 = operator new(v153);
        v165 = v164;
        v154 = (char *)v164 + 8 * (v153 >> 3);
        v166 = v154;
        memcpy(v164, (const void *)v126, v153);
        v165 = v154;
      }
LABEL_179:
      p2t::CDT::AddHole(v152, (uint64_t)&v164);
      if (v164)
      {
        v165 = v164;
        operator delete(v164);
      }
      if (v126)
        operator delete((void *)v126);
      if (v170)
        operator delete(v170);
      v123 += 3;
    }
    while (v123 != (const void **)v174);
  }
  p2t::CDT::Triangulate(*((p2t::Sweep ***)v1 + 43));
  GKCMeshGraph::BuildGraphFromTriangles(v1);
  v155 = (char *)v173;
  if (v173)
  {
    v156 = v174;
    v157 = v173;
    if (v174 != v173)
    {
      v158 = v174;
      do
      {
        v160 = (void *)*((_QWORD *)v158 - 3);
        v158 -= 24;
        v159 = v160;
        if (v160)
        {
          *((_QWORD *)v156 - 2) = v159;
          operator delete(v159);
        }
        v156 = v158;
      }
      while (v158 != v155);
      v157 = v173;
    }
    v174 = v155;
    operator delete(v157);
  }
  if (v179)
  {
    v180 = v179;
    operator delete(v179);
  }
}

void sub_227B749B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  void *v28;
  void *v29;

  v28 = *(void **)(v26 - 136);
  if (v28)
  {
    *(_QWORD *)(v26 - 128) = v28;
    operator delete(v28);
  }
  MEMORY[0x22E2A50A0](v25, 0x20C40A4A59CD2);
  v29 = *(void **)(v26 - 112);
  if (v29)
  {
    *(_QWORD *)(v26 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void sub_227B74A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a19)
  {
    operator delete(a19);
    if (!a22)
      JUMPOUT(0x227B74A64);
    JUMPOUT(0x227B74A60);
  }
  JUMPOUT(0x227B74A58);
}

void sub_227B74AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19)
    JUMPOUT(0x227B74AB4);
  JUMPOUT(0x227B74A58);
}

void GKCMeshGraph::BuildGraphFromTriangles(GKCMeshGraph *this)
{
  GKCMeshGraph *v2;
  float32x2_t v3;
  _QWORD **v4;
  uint64_t v5;
  p2t::Triangle *v6;
  unsigned int v7;
  uint64_t v8;
  Point *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  Point *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  id WeakRetained;
  id v61;
  double v62;
  float v63;
  void *v64;
  uint64_t v65;
  id v66;
  id v67;
  double v68;
  float v69;
  void *v70;
  uint64_t v71;
  double *v72;
  double *v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double *v78;
  double v79;
  double v80;
  id v81;
  id v82;
  float32x2_t v83;
  float32_t v84;
  float32x2_t v85;
  float32_t v86;
  float32x2_t v87;
  float32_t v88;
  void *v89;
  uint64_t v90;
  id v91;
  id v92;
  double v93;
  float v94;
  void *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD **i;
  double *v99;
  double v100;
  double v101;
  double v102;
  double v103;
  id v104;
  id v105;
  float32x2_t v106;
  float32_t v107;
  float32x2_t v108;
  float32_t v109;
  void *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  id *v114;
  uint64_t v115;
  id *v116;
  id *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t *j;
  uint64_t v121;
  id *v122;
  _QWORD *v123;
  GKCGraph *v124;
  int v125;
  p2t::Triangle **v126;
  id *v127;
  _QWORD *v128;
  p2t::Triangle *v129;
  p2t::Triangle **v130;
  p2t::Triangle **v131;
  _QWORD *v132;
  p2t::Triangle *v133;
  p2t::Triangle **v134;
  _QWORD *v135;
  p2t::Triangle *v136;
  p2t::Triangle **v137;
  _QWORD *v138;
  uint64_t v139;
  p2t::Triangle *v140;
  char *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  Point ***k;
  uint64_t v146;
  Point **v147;
  Point *v148;
  Point *v149;
  Point *v150;
  char *v151;
  int64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _BYTE *v157;
  Point ***v158;
  unint64_t v159;
  char *v160;
  Point **v161;
  uint64_t v162;
  uint64_t v163;
  _OWORD *v164;
  char *v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  _QWORD *v169;
  Point ***m;
  uint64_t v171;
  Point **v172;
  Point *v173;
  Point *v174;
  Point *v175;
  char *v176;
  int64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  _BYTE *v182;
  Point ***v183;
  unint64_t v184;
  char *v185;
  Point **v186;
  uint64_t v187;
  uint64_t v188;
  _OWORD *v189;
  char *v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  _QWORD *v194;
  Point ***v195;
  uint64_t *v196;
  Point *v197;
  id *v198;
  id *v199;
  id *v200;
  _QWORD *v201;
  Point *v202;
  id *v203;
  id *v204;
  id *v205;
  _QWORD *v206;
  Point *v207;
  unint64_t v208;
  id *v209;
  id *v210;
  id *v211;
  _QWORD *v212;
  uint64_t v213;
  Point **v214;
  Point *v215;
  Point *v216;
  Point *v217;
  char *v218;
  int64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  _BYTE *v224;
  Point ***v225;
  unint64_t v226;
  char *v227;
  Point **v228;
  uint64_t v229;
  uint64_t v230;
  _OWORD *v231;
  char *v232;
  uint64_t v233;
  __int128 v234;
  p2t::Triangle **v235;
  uint64_t v236;
  uint64_t v237;
  id *v238;
  _QWORD *v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  void *v243;
  _QWORD *v244;
  _QWORD *v245;
  _QWORD *v246;
  void *v247;
  char *v248;
  id *location;
  _QWORD **v250;
  uint64_t v251;
  char *v252;
  p2t::Triangle **v253;
  char *v254;
  uint64_t v255;
  GKCGraph *v256;
  unint64_t v257;
  void *__p;
  _QWORD *v259;
  char *v260;
  unint64_t v261;
  Point *v262;
  p2t::Triangle *v263;
  void *v264[2];
  void *v265[2];
  int v266;
  void *v267;
  p2t::Triangle **v268;
  _QWORD *v269[2];

  std::__tree<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::__map_value_compare<p2t::Triangle *,std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::less<p2t::Triangle *>,true>,std::allocator<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>>>::destroy((uint64_t)this + 352, *((_QWORD **)this + 45));
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 44) = (char *)this + 360;
  v2 = this;
  p2t::CDT::GetTriangles(*((p2t::CDT **)this + 43), &v267);
  *(_OWORD *)v264 = 0u;
  *(_OWORD *)v265 = 0u;
  v266 = 1065353216;
  v256 = this;
  if (v267 != v268)
  {
    v252 = (char *)this + 496;
    v254 = (char *)this + 616;
    v248 = (char *)this + 536;
    location = (id *)((char *)this + 664);
    v3 = (float32x2_t)vdup_n_s32(0x3EAAAAABu);
    v4 = (_QWORD **)v267;
    do
    {
      v5 = 0;
      v250 = v4;
      v269[0] = *v4;
      do
      {
        v263 = 0;
        v6 = (p2t::Triangle *)v269[0][v5 + 1];
        v262 = 0;
        v263 = v6;
        v7 = v5++ + 2;
        v8 = (int)v5;
        if (v5 == 3)
          v8 = 0;
        v9 = (Point *)v269[0][v8 + 1];
        v261 = 0;
        v262 = v9;
        v261 = v269[0][v7 % 3 + 1];
        if (v6 >= (p2t::Triangle *)v9
          || (__p = &v263,
              v10 = std::__hash_table<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)v264, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p), __p = &v262, *((_BYTE *)std::__hash_table<std::__hash_value_type<p2t::Point *,BOOL>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,BOOL>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,BOOL>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,BOOL>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)(v10 + 24), (uint64_t *)&v262, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)+ 24)))
        {
          if ((unint64_t)v263 >= v261)
            continue;
          goto LABEL_11;
        }
        __p = &v263;
        v19 = std::__hash_table<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)v254, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
        v20 = (_QWORD *)operator new();
        v21 = v20;
        v22 = v262;
        *v20 = v263;
        v20[1] = v22;
        v24 = (char *)v19[4];
        v23 = v19[5];
        if ((unint64_t)v24 < v23)
        {
          *(_QWORD *)v24 = v20;
          v25 = (uint64_t)(v24 + 8);
          goto LABEL_27;
        }
        v26 = (char *)v19[3];
        v27 = (v24 - v26) >> 3;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 61)
          _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
        v29 = v23 - (_QWORD)v26;
        if (v29 >> 2 > v28)
          v28 = v29 >> 2;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          if (v30 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v31 = (char *)operator new(8 * v30);
          v32 = &v31[8 * v27];
          *(_QWORD *)v32 = v21;
          v25 = (uint64_t)(v32 + 8);
          if (v24 == v26)
          {
LABEL_25:
            v19[3] = v32;
            v19[4] = v25;
            v19[5] = &v31[8 * v30];
            if (!v24)
              goto LABEL_27;
LABEL_26:
            operator delete(v24);
            goto LABEL_27;
          }
        }
        else
        {
          v31 = 0;
          v32 = (char *)(8 * v27);
          *(_QWORD *)(8 * v27) = v21;
          v25 = 8 * v27 + 8;
          if (v24 == v26)
            goto LABEL_25;
        }
        v42 = v24 - 8 - v26;
        if (v42 < 0x58)
          goto LABEL_263;
        if ((unint64_t)(v26 - v31) < 0x20)
          goto LABEL_263;
        v43 = (v42 >> 3) + 1;
        v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
        v45 = &v24[-v44];
        v32 -= v44;
        v46 = &v31[8 * v27 - 16];
        v47 = (__int128 *)(v24 - 16);
        v48 = v43 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v49 = *v47;
          *((_OWORD *)v46 - 1) = *(v47 - 1);
          *(_OWORD *)v46 = v49;
          v46 -= 32;
          v47 -= 2;
          v48 -= 4;
        }
        while (v48);
        v24 = v45;
        if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_263:
          do
          {
            v50 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            *((_QWORD *)v32 - 1) = v50;
            v32 -= 8;
          }
          while (v24 != v26);
        }
        v24 = (char *)v19[3];
        v19[3] = v32;
        v19[4] = v25;
        v19[5] = &v31[8 * v30];
        if (v24)
          goto LABEL_26;
LABEL_27:
        v19[4] = v25;
        __p = &v263;
        v33 = std::__hash_table<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)v264, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
        __p = &v262;
        *((_BYTE *)std::__hash_table<std::__hash_value_type<p2t::Point *,BOOL>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,BOOL>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,BOOL>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,BOOL>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)(v33 + 24), (uint64_t *)&v262, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)+ 24) = 1;
        if ((unint64_t)v263 >= v261)
          continue;
LABEL_11:
        __p = &v263;
        v11 = std::__hash_table<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)v264, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
        __p = &v261;
        if (*((_BYTE *)std::__hash_table<std::__hash_value_type<p2t::Point *,BOOL>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,BOOL>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,BOOL>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,BOOL>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)(v11 + 24), (uint64_t *)&v261, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)+ 24))continue;
        __p = &v263;
        v12 = std::__hash_table<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)v254, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
        v13 = (_QWORD *)operator new();
        v14 = v13;
        v15 = v261;
        *v13 = v263;
        v13[1] = v15;
        v17 = (char *)v12[4];
        v16 = v12[5];
        if ((unint64_t)v17 >= v16)
        {
          v34 = (char *)v12[3];
          v35 = (v17 - v34) >> 3;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61)
            _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
          v37 = v16 - (_QWORD)v34;
          if (v37 >> 2 > v36)
            v36 = v37 >> 2;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
            v38 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v38 = v36;
          if (v38)
          {
            if (v38 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v39 = (char *)operator new(8 * v38);
            v40 = &v39[8 * v35];
            *(_QWORD *)v40 = v14;
            v18 = (uint64_t)(v40 + 8);
            if (v17 != v34)
            {
LABEL_51:
              v51 = v17 - 8 - v34;
              if (v51 < 0x58)
                goto LABEL_264;
              if ((unint64_t)(v34 - v39) < 0x20)
                goto LABEL_264;
              v52 = (v51 >> 3) + 1;
              v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
              v54 = &v17[-v53];
              v40 -= v53;
              v55 = &v39[8 * v35 - 16];
              v56 = (__int128 *)(v17 - 16);
              v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v58 = *v56;
                *((_OWORD *)v55 - 1) = *(v56 - 1);
                *(_OWORD *)v55 = v58;
                v55 -= 32;
                v56 -= 2;
                v57 -= 4;
              }
              while (v57);
              v17 = v54;
              if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_264:
                do
                {
                  v59 = *((_QWORD *)v17 - 1);
                  v17 -= 8;
                  *((_QWORD *)v40 - 1) = v59;
                  v40 -= 8;
                }
                while (v17 != v34);
              }
              v17 = (char *)v12[3];
              v12[3] = v40;
              v12[4] = v18;
              v12[5] = &v39[8 * v38];
              if (!v17)
                goto LABEL_40;
LABEL_39:
              operator delete(v17);
              goto LABEL_40;
            }
          }
          else
          {
            v39 = 0;
            v40 = (char *)(8 * v35);
            *(_QWORD *)(8 * v35) = v14;
            v18 = 8 * v35 + 8;
            if (v17 != v34)
              goto LABEL_51;
          }
          v12[3] = v40;
          v12[4] = v18;
          v12[5] = &v39[8 * v38];
          if (v17)
            goto LABEL_39;
        }
        else
        {
          *(_QWORD *)v17 = v13;
          v18 = (uint64_t)(v17 + 8);
        }
LABEL_40:
        v12[4] = v18;
        __p = &v263;
        v41 = std::__hash_table<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)v264, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
        __p = &v261;
        *((_BYTE *)std::__hash_table<std::__hash_value_type<p2t::Point *,BOOL>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,BOOL>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,BOOL>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,BOOL>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)(v41 + 24), (uint64_t *)&v261, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)+ 24) = 1;
      }
      while (v5 != 3);
      v2 = v256;
      if (!*((_BYTE *)v256 + 656))
        goto LABEL_265;
      v263 = (p2t::Triangle *)v269[0][1];
      __p = &v263;
      if (!std::__hash_table<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)v252, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)[3])
      {
        WeakRetained = objc_loadWeakRetained(location);
        v61 = objc_alloc((Class)objc_msgSend(WeakRetained, "nodeClass"));
        *(float *)&v62 = *(double *)v263;
        v63 = *((double *)v263 + 1);
        *((float *)&v62 + 1) = v63;
        v64 = (void *)objc_msgSend(v61, "initWithPoint:", v62);

        v65 = objc_msgSend(v64, "cGraphNode2D");
        __p = &v263;
        std::__hash_table<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)v252, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)[3] = v65;
        GKCGraph::addNode(v256, (id *)objc_msgSend(v64, "cGraphNode2D"));

      }
      v263 = (p2t::Triangle *)v269[0][2];
      __p = &v263;
      if (!std::__hash_table<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)v252, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)[3])
      {
        v66 = objc_loadWeakRetained(location);
        v67 = objc_alloc((Class)objc_msgSend(v66, "nodeClass"));
        *(float *)&v68 = *(double *)v263;
        v69 = *((double *)v263 + 1);
        *((float *)&v68 + 1) = v69;
        v70 = (void *)objc_msgSend(v67, "initWithPoint:", v68);

        v71 = objc_msgSend(v70, "cGraphNode2D");
        __p = &v263;
        std::__hash_table<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)v252, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)[3] = v71;
        GKCGraph::addNode(v256, (id *)objc_msgSend(v70, "cGraphNode2D"));

      }
      v263 = (p2t::Triangle *)v269[0][3];
      __p = &v263;
      if (!std::__hash_table<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)v252, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)[3])
      {
        v91 = objc_loadWeakRetained(location);
        v92 = objc_alloc((Class)objc_msgSend(v91, "nodeClass"));
        *(float *)&v93 = *(double *)v263;
        v94 = *((double *)v263 + 1);
        *((float *)&v93 + 1) = v94;
        v95 = (void *)objc_msgSend(v92, "initWithPoint:", v93);

        v96 = objc_msgSend(v95, "cGraphNode2D");
        __p = &v263;
        std::__hash_table<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)v252, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)[3] = v96;
        GKCGraph::addNode(v256, (id *)objc_msgSend(v95, "cGraphNode2D"));

        if (*((_BYTE *)v256 + 657))
        {
LABEL_66:
          v72 = (double *)v269[0][1];
          v73 = (double *)v269[0][2];
          v75 = *v72;
          v74 = v72[1];
          v76 = *v73;
          v77 = v73[1];
          v78 = (double *)v269[0][3];
          v79 = *v78;
          v80 = v78[1];
          v81 = objc_loadWeakRetained(location);
          v82 = objc_alloc((Class)objc_msgSend(v81, "nodeClass"));
          v83.f32[0] = v75;
          v84 = v74;
          v83.f32[1] = v84;
          v85.f32[0] = v76;
          v86 = v77;
          v85.f32[1] = v86;
          v87 = vadd_f32(v85, v83);
          v85.f32[0] = v79;
          v88 = v80;
          v85.f32[1] = v88;
          v89 = (void *)objc_msgSend(v82, "initWithPoint:", COERCE_DOUBLE(vmul_f32(vadd_f32(v85, v87), v3)));

          v90 = objc_msgSend(v89, "cGraphNode2D");
          __p = v269;
          std::__hash_table<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::hash<p2t::Triangle *>,std::equal_to<p2t::Triangle *>,true>,std::__unordered_map_equal<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::equal_to<p2t::Triangle *>,std::hash<p2t::Triangle *>,true>,std::allocator<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Triangle *,std::piecewise_construct_t const&,std::tuple<p2t::Triangle * const&>,std::tuple<>>((uint64_t)v248, (uint64_t *)v269, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)[3] = v90;
          GKCGraph::addNode(v256, (id *)objc_msgSend(v89, "cGraphNode2D"));

        }
      }
      else
      {
LABEL_265:
        if (*((_BYTE *)v256 + 657))
          goto LABEL_66;
      }
      v4 = v250 + 1;
    }
    while (v250 + 1 != (_QWORD **)v268);
  }
  if (*((_BYTE *)v2 + 658))
  {
    v97 = (_QWORD *)*((_QWORD *)v256 + 79);
    if (v97)
    {
      i = (_QWORD **)v97[3];
      if (i != (_QWORD **)v97[4])
        goto LABEL_74;
      while (1)
      {
        v97 = (_QWORD *)*v97;
        if (!v97)
          break;
        for (i = (_QWORD **)v97[3]; i != (_QWORD **)v97[4]; ++i)
        {
LABEL_74:
          v269[0] = 0;
          v269[0] = *i;
          v99 = (double *)v269[0][1];
          v100 = **(double **)v269[0];
          v101 = *(double *)(*v269[0] + 8);
          v102 = *v99;
          v103 = v99[1];
          v104 = objc_loadWeakRetained((id *)v256 + 83);
          v105 = objc_alloc((Class)objc_msgSend(v104, "nodeClass"));
          v106.f32[0] = v100;
          v107 = v101;
          v106.f32[1] = v107;
          v108.f32[0] = v102;
          v109 = v103;
          v108.f32[1] = v109;
          v110 = (void *)objc_msgSend(v105, "initWithPoint:", COERCE_DOUBLE(vmla_f32(v106, vsub_f32(v108, v106), (float32x2_t)0x3F0000003F000000)));

          v111 = objc_msgSend(v110, "cGraphNode2D");
          __p = v269;
          std::__hash_table<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::hash<p2t::Edge *>,std::equal_to<p2t::Edge *>,true>,std::__unordered_map_equal<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::equal_to<p2t::Edge *>,std::hash<p2t::Edge *>,true>,std::allocator<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Edge *,std::piecewise_construct_t const&,std::tuple<p2t::Edge * const&>,std::tuple<>>((uint64_t)v256 + 576, (uint64_t *)v269, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)[3] = v111;
          GKCGraph::addNode(v256, (id *)objc_msgSend(v110, "cGraphNode2D"));

        }
      }
    }
  }
  if (*((_BYTE *)v256 + 656))
  {
    if (*((_BYTE *)v256 + 658))
    {
      v112 = (_QWORD *)*((_QWORD *)v256 + 74);
      if (v112)
      {
        v113 = (uint64_t)v256 + 496;
        do
        {
          v115 = v112[2];
          v114 = (id *)v112[3];
          v269[0] = 0;
          v269[0] = *(_QWORD **)v115;
          __p = v269;
          v116 = (id *)std::__hash_table<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>(v113, (uint64_t *)v269, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)[3];
          v263 = *(p2t::Triangle **)(v115 + 8);
          __p = &v263;
          v117 = (id *)std::__hash_table<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>(v113, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)[3];
          GKCGraphNode::addConnectionToNode(v114, v116, 1);
          GKCGraphNode::addConnectionToNode(v114, v117, 1);
          v112 = (_QWORD *)*v112;
        }
        while (v112);
      }
    }
    else
    {
      v118 = (_QWORD *)*((_QWORD *)v256 + 79);
      if (v118)
      {
        v119 = (uint64_t)v256 + 496;
        for (j = (uint64_t *)v118[3]; ; j = (uint64_t *)v118[3])
        {
          while (j != (uint64_t *)v118[4])
          {
            v121 = *j;
            v269[0] = 0;
            v269[0] = *(_QWORD **)v121;
            __p = v269;
            v122 = (id *)std::__hash_table<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>(v119, (uint64_t *)v269, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)[3];
            v263 = *(p2t::Triangle **)(v121 + 8);
            __p = &v263;
            v123 = std::__hash_table<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>(v119, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
            GKCGraphNode::addConnectionToNode(v122, (id *)v123[3], 1);
            ++j;
          }
          v118 = (_QWORD *)*v118;
          if (!v118)
            break;
        }
      }
    }
  }
  v124 = v256;
  v125 = *((unsigned __int8 *)v256 + 658);
  if (!*((_BYTE *)v256 + 657))
    goto LABEL_120;
  v126 = (p2t::Triangle **)v267;
  if (!*((_BYTE *)v256 + 658))
  {
    if (v267 == v268)
      goto LABEL_237;
    do
    {
      v269[0] = 0;
      v269[0] = *v126;
      __p = v269;
      v127 = (id *)std::__hash_table<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::hash<p2t::Triangle *>,std::equal_to<p2t::Triangle *>,true>,std::__unordered_map_equal<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::equal_to<p2t::Triangle *>,std::hash<p2t::Triangle *>,true>,std::allocator<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Triangle *,std::piecewise_construct_t const&,std::tuple<p2t::Triangle * const&>,std::tuple<>>((uint64_t)v256 + 536, (uint64_t *)v269, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)[3];
      v128 = v269[0];
      v129 = (p2t::Triangle *)v269[0][4];
      v263 = v129;
      v130 = v268;
      if (v129)
      {
        v131 = v268;
        if (v267 != v268)
        {
          v131 = (p2t::Triangle **)v267;
          while (*v131 != v129)
          {
            if (++v131 == v268)
            {
              v131 = v268;
              break;
            }
          }
        }
        if (v131 != v268)
        {
          __p = &v263;
          v132 = std::__hash_table<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::hash<p2t::Triangle *>,std::equal_to<p2t::Triangle *>,true>,std::__unordered_map_equal<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::equal_to<p2t::Triangle *>,std::hash<p2t::Triangle *>,true>,std::allocator<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Triangle *,std::piecewise_construct_t const&,std::tuple<p2t::Triangle * const&>,std::tuple<>>((uint64_t)v256 + 536, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
          GKCGraphNode::addConnectionToNode(v127, (id *)v132[3], 0);
          v128 = v269[0];
          v130 = v268;
        }
      }
      v133 = (p2t::Triangle *)v128[5];
      v263 = v133;
      if (v133)
      {
        v134 = v130;
        if (v267 != v130)
        {
          v134 = (p2t::Triangle **)v267;
          while (*v134 != v133)
          {
            if (++v134 == v130)
            {
              v134 = v130;
              break;
            }
          }
        }
        if (v134 != v130)
        {
          __p = &v263;
          v135 = std::__hash_table<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::hash<p2t::Triangle *>,std::equal_to<p2t::Triangle *>,true>,std::__unordered_map_equal<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::equal_to<p2t::Triangle *>,std::hash<p2t::Triangle *>,true>,std::allocator<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Triangle *,std::piecewise_construct_t const&,std::tuple<p2t::Triangle * const&>,std::tuple<>>((uint64_t)v256 + 536, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
          GKCGraphNode::addConnectionToNode(v127, (id *)v135[3], 0);
          v128 = v269[0];
          v130 = v268;
        }
      }
      v136 = (p2t::Triangle *)v128[6];
      v263 = v136;
      if (v136)
      {
        v137 = v130;
        if (v267 != v130)
        {
          v137 = (p2t::Triangle **)v267;
          while (*v137 != v136)
          {
            if (++v137 == v130)
            {
              v137 = v130;
              break;
            }
          }
        }
        if (v137 != v130)
        {
          __p = &v263;
          v138 = std::__hash_table<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::hash<p2t::Triangle *>,std::equal_to<p2t::Triangle *>,true>,std::__unordered_map_equal<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::equal_to<p2t::Triangle *>,std::hash<p2t::Triangle *>,true>,std::allocator<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Triangle *,std::piecewise_construct_t const&,std::tuple<p2t::Triangle * const&>,std::tuple<>>((uint64_t)v256 + 536, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
          GKCGraphNode::addConnectionToNode(v127, (id *)v138[3], 0);
          v130 = v268;
        }
      }
      ++v126;
    }
    while (v126 != v130);
    v124 = v256;
    v125 = *((unsigned __int8 *)v256 + 658);
LABEL_120:
    if (!v125)
      goto LABEL_237;
    v126 = (p2t::Triangle **)v267;
    if (v267 == v268)
      goto LABEL_237;
    goto LABEL_122;
  }
  if (v267 == v268)
    goto LABEL_237;
LABEL_122:
  v255 = (uint64_t)v124 + 616;
  v139 = (uint64_t)v124 + 576;
  v251 = (uint64_t)v124 + 536;
  while (2)
  {
    v263 = 0;
    v253 = v126;
    v263 = *v126;
    v140 = v263;
    v141 = (char *)operator new(0x18uLL);
    __p = v141;
    v259 = v141;
    v260 = v141 + 24;
    v262 = (Point *)*((_QWORD *)v140 + 1);
    v269[0] = &v262;
    v143 = std::__hash_table<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>(v255, (uint64_t *)&v262, (uint64_t)&std::piecewise_construct, v269);
    v144 = v139;
    for (k = (Point ***)v143[3]; k != (Point ***)v143[4]; ++k)
    {
      v147 = *k;
      v148 = **k;
      if (v148 != v262)
LABEL_253:
        __assert_rtn("BuildGraphFromTriangles", "GKCMeshGraph.mm", 384, "edge->p == point");
      v149 = v147[1];
      if (v149 != p2t::Triangle::PointCW(v263, v148, v142))
      {
        v150 = v147[1];
        if (v150 != p2t::Triangle::PointCCW(v263, v262))
          continue;
      }
      if (v141 < v260)
      {
        *(_QWORD *)v141 = v147;
        v146 = (uint64_t)(v141 + 8);
        goto LABEL_126;
      }
      v151 = (char *)__p;
      v152 = v141 - (_BYTE *)__p;
      v153 = (v141 - (_BYTE *)__p) >> 3;
      v154 = v153 + 1;
      if ((unint64_t)(v153 + 1) >> 61)
LABEL_255:
        _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
      v155 = v260 - (_BYTE *)__p;
      if ((v260 - (_BYTE *)__p) >> 2 > v154)
        v154 = v155 >> 2;
      if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8)
        v156 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v156 = v154;
      if (v156)
      {
        if (v156 >> 61)
LABEL_256:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v157 = operator new(8 * v156);
        v158 = (Point ***)&v157[8 * v153];
        *v158 = v147;
        v146 = (uint64_t)(v158 + 1);
        if (v141 == v151)
        {
LABEL_142:
          __p = v158;
          v259 = (_QWORD *)v146;
          v260 = &v157[8 * v156];
          if (!v141)
            goto LABEL_126;
LABEL_149:
          operator delete(v141);
LABEL_126:
          v259 = (_QWORD *)v146;
          v141 = (char *)v146;
          continue;
        }
      }
      else
      {
        v157 = 0;
        v158 = (Point ***)(8 * v153);
        *(_QWORD *)(8 * v153) = v147;
        v146 = 8 * v153 + 8;
        if (v141 == v151)
          goto LABEL_142;
      }
      v159 = v141 - 8 - v151;
      if (v159 < 0x168)
      {
        v160 = v141;
        goto LABEL_147;
      }
      if (&v157[v152 - 8 - (v159 & 0xFFFFFFFFFFFFFFF8)] > &v157[v152 - 8])
      {
        v160 = v141;
        goto LABEL_147;
      }
      if (&v141[-(v159 & 0xFFFFFFFFFFFFFFF8) - 8] > v141 - 8)
      {
        v160 = v141;
        goto LABEL_147;
      }
      if ((unint64_t)(v141 - v157 - v152) < 0x20)
      {
        v160 = v141;
        goto LABEL_147;
      }
      v162 = (v159 >> 3) + 1;
      v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
      v160 = &v141[-v163];
      v158 = (Point ***)((char *)v158 - v163);
      v164 = &v157[8 * v153 - 16];
      v165 = v141 - 16;
      v166 = v162 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v167 = *(_OWORD *)v165;
        *(v164 - 1) = *((_OWORD *)v165 - 1);
        *v164 = v167;
        v164 -= 2;
        v165 -= 32;
        v166 -= 4;
      }
      while (v166);
      if (v162 != (v162 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_147:
          v161 = (Point **)*((_QWORD *)v160 - 1);
          v160 -= 8;
          *--v158 = v161;
        }
        while (v160 != v151);
      }
      v141 = (char *)__p;
      __p = v158;
      v259 = (_QWORD *)v146;
      v260 = &v157[8 * v156];
      if (v141)
        goto LABEL_149;
      goto LABEL_126;
    }
    v262 = (Point *)*((_QWORD *)v263 + 2);
    v269[0] = &v262;
    v169 = std::__hash_table<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>(v255, (uint64_t *)&v262, (uint64_t)&std::piecewise_construct, v269);
    for (m = (Point ***)v169[3]; m != (Point ***)v169[4]; ++m)
    {
      v172 = *m;
      v173 = **m;
      if (v173 != v262)
        goto LABEL_253;
      v174 = v172[1];
      if (v174 != p2t::Triangle::PointCW(v263, v173, v168))
      {
        v175 = v172[1];
        if (v175 != p2t::Triangle::PointCCW(v263, v262))
          continue;
      }
      if (v141 < v260)
      {
        *(_QWORD *)v141 = v172;
        v171 = (uint64_t)(v141 + 8);
        goto LABEL_162;
      }
      v176 = (char *)__p;
      v177 = v141 - (_BYTE *)__p;
      v178 = (v141 - (_BYTE *)__p) >> 3;
      v179 = v178 + 1;
      if ((unint64_t)(v178 + 1) >> 61)
        goto LABEL_255;
      v180 = v260 - (_BYTE *)__p;
      if ((v260 - (_BYTE *)__p) >> 2 > v179)
        v179 = v180 >> 2;
      if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF8)
        v181 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v181 = v179;
      if (v181)
      {
        if (v181 >> 61)
          goto LABEL_256;
        v182 = operator new(8 * v181);
        v183 = (Point ***)&v182[8 * v178];
        *v183 = v172;
        v171 = (uint64_t)(v183 + 1);
        if (v141 == v176)
        {
LABEL_178:
          __p = v183;
          v259 = (_QWORD *)v171;
          v260 = &v182[8 * v181];
          if (!v141)
            goto LABEL_162;
LABEL_185:
          operator delete(v141);
LABEL_162:
          v259 = (_QWORD *)v171;
          v141 = (char *)v171;
          continue;
        }
      }
      else
      {
        v182 = 0;
        v183 = (Point ***)(8 * v178);
        *(_QWORD *)(8 * v178) = v172;
        v171 = 8 * v178 + 8;
        if (v141 == v176)
          goto LABEL_178;
      }
      v184 = v141 - 8 - v176;
      if (v184 < 0x168)
      {
        v185 = v141;
        goto LABEL_183;
      }
      if (&v182[v177 - 8 - (v184 & 0xFFFFFFFFFFFFFFF8)] > &v182[v177 - 8])
      {
        v185 = v141;
        goto LABEL_183;
      }
      if (&v141[-(v184 & 0xFFFFFFFFFFFFFFF8) - 8] > v141 - 8)
      {
        v185 = v141;
        goto LABEL_183;
      }
      if ((unint64_t)(v141 - v182 - v177) < 0x20)
      {
        v185 = v141;
        goto LABEL_183;
      }
      v187 = (v184 >> 3) + 1;
      v188 = 8 * (v187 & 0x3FFFFFFFFFFFFFFCLL);
      v185 = &v141[-v188];
      v183 = (Point ***)((char *)v183 - v188);
      v189 = &v182[8 * v178 - 16];
      v190 = v141 - 16;
      v191 = v187 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v192 = *(_OWORD *)v190;
        *(v189 - 1) = *((_OWORD *)v190 - 1);
        *v189 = v192;
        v189 -= 2;
        v190 -= 32;
        v191 -= 4;
      }
      while (v191);
      if (v187 != (v187 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_183:
          v186 = (Point **)*((_QWORD *)v185 - 1);
          v185 -= 8;
          *--v183 = v186;
        }
        while (v185 != v176);
      }
      v141 = (char *)__p;
      __p = v183;
      v259 = (_QWORD *)v171;
      v260 = &v182[8 * v181];
      if (v141)
        goto LABEL_185;
      goto LABEL_162;
    }
    v262 = (Point *)*((_QWORD *)v263 + 3);
    v269[0] = &v262;
    v194 = std::__hash_table<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>(v255, (uint64_t *)&v262, (uint64_t)&std::piecewise_construct, v269);
    v195 = (Point ***)v194[3];
    if (v195 != (Point ***)v194[4])
    {
      while (1)
      {
        while (1)
        {
          v214 = *v195;
          v215 = **v195;
          if (v215 != v262)
            goto LABEL_253;
          v216 = v214[1];
          if (v216 == p2t::Triangle::PointCW(v263, v215, v193))
            break;
          v217 = v214[1];
          if (v217 == p2t::Triangle::PointCCW(v263, v262))
            break;
          v139 = v144;
          if (++v195 == (Point ***)v194[4])
            goto LABEL_198;
        }
        if (v141 < v260)
        {
          *(_QWORD *)v141 = v214;
          v213 = (uint64_t)(v141 + 8);
          v139 = v144;
        }
        else
        {
          v218 = (char *)__p;
          v219 = v141 - (_BYTE *)__p;
          v220 = (v141 - (_BYTE *)__p) >> 3;
          v221 = v220 + 1;
          if ((unint64_t)(v220 + 1) >> 61)
            goto LABEL_255;
          v222 = v260 - (_BYTE *)__p;
          if ((v260 - (_BYTE *)__p) >> 2 > v221)
            v221 = v222 >> 2;
          if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFF8)
            v223 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v223 = v221;
          if (v223)
          {
            if (v223 >> 61)
              goto LABEL_256;
            v224 = operator new(8 * v223);
            v225 = (Point ***)&v224[8 * v220];
            *v225 = v214;
            v213 = (uint64_t)(v225 + 1);
            if (v141 != v218)
            {
LABEL_222:
              v226 = v141 - 8 - v218;
              if (v226 < 0x168
                || &v224[v219 - 8 - (v226 & 0xFFFFFFFFFFFFFFF8)] > &v224[v219 - 8]
                || &v141[-(v226 & 0xFFFFFFFFFFFFFFF8) - 8] > v141 - 8
                || (unint64_t)(v141 - v224 - v219) < 0x20)
              {
                v227 = v141;
                v139 = v144;
              }
              else
              {
                v229 = (v226 >> 3) + 1;
                v230 = 8 * (v229 & 0x3FFFFFFFFFFFFFFCLL);
                v227 = &v141[-v230];
                v225 = (Point ***)((char *)v225 - v230);
                v231 = &v224[8 * v220 - 16];
                v232 = v141 - 16;
                v233 = v229 & 0x3FFFFFFFFFFFFFFCLL;
                v139 = v144;
                do
                {
                  v234 = *(_OWORD *)v232;
                  *(v231 - 1) = *((_OWORD *)v232 - 1);
                  *v231 = v234;
                  v231 -= 2;
                  v232 -= 32;
                  v233 -= 4;
                }
                while (v233);
                if (v229 == (v229 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_225:
                  v141 = (char *)__p;
                  __p = v225;
                  v259 = (_QWORD *)v213;
                  v260 = &v224[8 * v223];
                  if (!v141)
                    goto LABEL_206;
LABEL_229:
                  operator delete(v141);
                  goto LABEL_206;
                }
              }
              do
              {
                v228 = (Point **)*((_QWORD *)v227 - 1);
                v227 -= 8;
                *--v225 = v228;
              }
              while (v227 != v218);
              goto LABEL_225;
            }
          }
          else
          {
            v224 = 0;
            v225 = (Point ***)(8 * v220);
            *(_QWORD *)(8 * v220) = v214;
            v213 = 8 * v220 + 8;
            if (v141 != v218)
              goto LABEL_222;
          }
          v139 = v144;
          __p = v225;
          v259 = (_QWORD *)v213;
          v260 = &v224[8 * v223];
          if (v141)
            goto LABEL_229;
        }
LABEL_206:
        v259 = (_QWORD *)v213;
        v141 = (char *)v213;
        if (++v195 == (Point ***)v194[4])
          goto LABEL_198;
      }
    }
    v139 = v144;
LABEL_198:
    v196 = (uint64_t *)__p;
    if (v141 - (_BYTE *)__p != 24)
      __assert_rtn("BuildGraphFromTriangles", "GKCMeshGraph.mm", 395, "edges.size() == 3");
    v262 = 0;
    v197 = *(Point **)__p;
    v261 = *((_QWORD *)__p + 1);
    v262 = v197;
    v257 = *((_QWORD *)__p + 2);
    v269[0] = &v262;
    v124 = v256;
    v198 = (id *)std::__hash_table<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::hash<p2t::Edge *>,std::equal_to<p2t::Edge *>,true>,std::__unordered_map_equal<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::equal_to<p2t::Edge *>,std::hash<p2t::Edge *>,true>,std::allocator<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Edge *,std::piecewise_construct_t const&,std::tuple<p2t::Edge * const&>,std::tuple<>>(v139, (uint64_t *)&v262, (uint64_t)&std::piecewise_construct, v269)[3];
    v269[0] = &v261;
    v199 = (id *)std::__hash_table<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::hash<p2t::Edge *>,std::equal_to<p2t::Edge *>,true>,std::__unordered_map_equal<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::equal_to<p2t::Edge *>,std::hash<p2t::Edge *>,true>,std::allocator<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Edge *,std::piecewise_construct_t const&,std::tuple<p2t::Edge * const&>,std::tuple<>>(v139, (uint64_t *)&v261, (uint64_t)&std::piecewise_construct, v269)[3];
    v269[0] = &v257;
    v200 = (id *)std::__hash_table<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::hash<p2t::Edge *>,std::equal_to<p2t::Edge *>,true>,std::__unordered_map_equal<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::equal_to<p2t::Edge *>,std::hash<p2t::Edge *>,true>,std::allocator<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Edge *,std::piecewise_construct_t const&,std::tuple<p2t::Edge * const&>,std::tuple<>>(v139, (uint64_t *)&v257, (uint64_t)&std::piecewise_construct, v269)[3];
    GKCGraphNode::addConnectionToNode(v198, v199, 0);
    GKCGraphNode::addConnectionToNode(v198, v200, 0);
    if (*((_BYTE *)v256 + 657))
    {
      v269[0] = &v263;
      v201 = std::__hash_table<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::hash<p2t::Triangle *>,std::equal_to<p2t::Triangle *>,true>,std::__unordered_map_equal<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::equal_to<p2t::Triangle *>,std::hash<p2t::Triangle *>,true>,std::allocator<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Triangle *,std::piecewise_construct_t const&,std::tuple<p2t::Triangle * const&>,std::tuple<>>(v251, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, v269);
      GKCGraphNode::addConnectionToNode((id *)v201[3], v198, 1);
    }
    v202 = (Point *)v196[1];
    v261 = v196[2];
    v262 = v202;
    v257 = 0;
    v257 = *v196;
    v269[0] = &v262;
    v203 = (id *)std::__hash_table<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::hash<p2t::Edge *>,std::equal_to<p2t::Edge *>,true>,std::__unordered_map_equal<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::equal_to<p2t::Edge *>,std::hash<p2t::Edge *>,true>,std::allocator<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Edge *,std::piecewise_construct_t const&,std::tuple<p2t::Edge * const&>,std::tuple<>>(v139, (uint64_t *)&v262, (uint64_t)&std::piecewise_construct, v269)[3];
    v269[0] = &v261;
    v204 = (id *)std::__hash_table<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::hash<p2t::Edge *>,std::equal_to<p2t::Edge *>,true>,std::__unordered_map_equal<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::equal_to<p2t::Edge *>,std::hash<p2t::Edge *>,true>,std::allocator<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Edge *,std::piecewise_construct_t const&,std::tuple<p2t::Edge * const&>,std::tuple<>>(v139, (uint64_t *)&v261, (uint64_t)&std::piecewise_construct, v269)[3];
    v269[0] = &v257;
    v205 = (id *)std::__hash_table<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::hash<p2t::Edge *>,std::equal_to<p2t::Edge *>,true>,std::__unordered_map_equal<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::equal_to<p2t::Edge *>,std::hash<p2t::Edge *>,true>,std::allocator<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Edge *,std::piecewise_construct_t const&,std::tuple<p2t::Edge * const&>,std::tuple<>>(v139, (uint64_t *)&v257, (uint64_t)&std::piecewise_construct, v269)[3];
    GKCGraphNode::addConnectionToNode(v203, v204, 0);
    GKCGraphNode::addConnectionToNode(v203, v205, 0);
    if (*((_BYTE *)v256 + 657))
    {
      v269[0] = &v263;
      v206 = std::__hash_table<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::hash<p2t::Triangle *>,std::equal_to<p2t::Triangle *>,true>,std::__unordered_map_equal<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::equal_to<p2t::Triangle *>,std::hash<p2t::Triangle *>,true>,std::allocator<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Triangle *,std::piecewise_construct_t const&,std::tuple<p2t::Triangle * const&>,std::tuple<>>(v251, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, v269);
      GKCGraphNode::addConnectionToNode((id *)v206[3], v203, 1);
    }
    v208 = v196[1];
    v207 = (Point *)v196[2];
    v261 = 0;
    v262 = v207;
    v261 = *v196;
    v257 = v208;
    v269[0] = &v262;
    v209 = (id *)std::__hash_table<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::hash<p2t::Edge *>,std::equal_to<p2t::Edge *>,true>,std::__unordered_map_equal<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::equal_to<p2t::Edge *>,std::hash<p2t::Edge *>,true>,std::allocator<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Edge *,std::piecewise_construct_t const&,std::tuple<p2t::Edge * const&>,std::tuple<>>(v139, (uint64_t *)&v262, (uint64_t)&std::piecewise_construct, v269)[3];
    v269[0] = &v261;
    v210 = (id *)std::__hash_table<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::hash<p2t::Edge *>,std::equal_to<p2t::Edge *>,true>,std::__unordered_map_equal<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::equal_to<p2t::Edge *>,std::hash<p2t::Edge *>,true>,std::allocator<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Edge *,std::piecewise_construct_t const&,std::tuple<p2t::Edge * const&>,std::tuple<>>(v139, (uint64_t *)&v261, (uint64_t)&std::piecewise_construct, v269)[3];
    v269[0] = &v257;
    v211 = (id *)std::__hash_table<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::hash<p2t::Edge *>,std::equal_to<p2t::Edge *>,true>,std::__unordered_map_equal<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::equal_to<p2t::Edge *>,std::hash<p2t::Edge *>,true>,std::allocator<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Edge *,std::piecewise_construct_t const&,std::tuple<p2t::Edge * const&>,std::tuple<>>(v139, (uint64_t *)&v257, (uint64_t)&std::piecewise_construct, v269)[3];
    GKCGraphNode::addConnectionToNode(v209, v210, 0);
    GKCGraphNode::addConnectionToNode(v209, v211, 0);
    if (*((_BYTE *)v256 + 657))
    {
      v269[0] = &v263;
      v212 = std::__hash_table<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::hash<p2t::Triangle *>,std::equal_to<p2t::Triangle *>,true>,std::__unordered_map_equal<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::equal_to<p2t::Triangle *>,std::hash<p2t::Triangle *>,true>,std::allocator<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Triangle *,std::piecewise_construct_t const&,std::tuple<p2t::Triangle * const&>,std::tuple<>>(v251, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, v269);
      GKCGraphNode::addConnectionToNode((id *)v212[3], v209, 1);
    }
    operator delete(v196);
    v126 = v253 + 1;
    if (v253 + 1 != v268)
      continue;
    break;
  }
LABEL_237:
  if (*((_BYTE *)v124 + 657))
  {
    if (*((_BYTE *)v124 + 656))
    {
      v235 = (p2t::Triangle **)v267;
      if (v267 != v268)
      {
        v236 = (uint64_t)v124 + 536;
        v237 = (uint64_t)v124 + 496;
        do
        {
          v269[0] = *v235;
          __p = v269;
          v238 = (id *)std::__hash_table<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::hash<p2t::Triangle *>,std::equal_to<p2t::Triangle *>,true>,std::__unordered_map_equal<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::equal_to<p2t::Triangle *>,std::hash<p2t::Triangle *>,true>,std::allocator<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Triangle *,std::piecewise_construct_t const&,std::tuple<p2t::Triangle * const&>,std::tuple<>>(v236, (uint64_t *)v269, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)[3];
          v263 = (p2t::Triangle *)v269[0][1];
          __p = &v263;
          v239 = std::__hash_table<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>(v237, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
          GKCGraphNode::addConnectionToNode((id *)v239[3], v238, 1);
          v263 = (p2t::Triangle *)v269[0][2];
          __p = &v263;
          v240 = std::__hash_table<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>(v237, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
          GKCGraphNode::addConnectionToNode((id *)v240[3], v238, 1);
          v263 = (p2t::Triangle *)v269[0][3];
          __p = &v263;
          v241 = std::__hash_table<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>(v237, (uint64_t *)&v263, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p);
          GKCGraphNode::addConnectionToNode((id *)v241[3], v238, 1);
          ++v235;
        }
        while (v235 != v268);
      }
    }
  }
  v242 = v265[0];
  if (v265[0])
  {
    do
    {
      v244 = (_QWORD *)*v242;
      v245 = (_QWORD *)v242[5];
      if (v245)
      {
        do
        {
          v246 = (_QWORD *)*v245;
          operator delete(v245);
          v245 = v246;
        }
        while (v246);
      }
      v247 = (void *)v242[3];
      v242[3] = 0;
      if (v247)
        operator delete(v247);
      operator delete(v242);
      v242 = v244;
    }
    while (v244);
  }
  v243 = v264[0];
  v264[0] = 0;
  if (v243)
    operator delete(v243);
  if (v267)
  {
    v268 = (p2t::Triangle **)v267;
    operator delete(v267);
  }
}

void sub_227B76334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,_QWORD *__p,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;

  v31 = __p;
  if (__p)
  {
    do
    {
      v33 = (_QWORD *)*v31;
      v34 = (_QWORD *)v31[5];
      if (v34)
      {
        do
        {
          v35 = (_QWORD *)*v34;
          operator delete(v34);
          v34 = v35;
        }
        while (v35);
      }
      v36 = (void *)v31[3];
      v31[3] = 0;
      if (v36)
        operator delete(v36);
      operator delete(v31);
      v31 = v33;
    }
    while (v33);
  }
  if (a23)
  {
    operator delete(a23);
    v32 = a29;
    if (!a29)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v32 = a29;
    if (!a29)
      goto LABEL_4;
  }
  operator delete(v32);
  _Unwind_Resume(exception_object);
}

_QWORD *GKCMeshGraph::GetTriangles@<X0>(p2t::CDT **this@<X0>, _QWORD *a2@<X8>)
{
  return p2t::CDT::GetTriangles(this[43], a2);
}

uint64_t GKCMeshGraph::TriangleAtIndex(p2t::CDT **this, int a2)
{
  uint64_t v3;
  void *__p[3];

  p2t::CDT::GetTriangles(this[43], __p);
  v3 = *((_QWORD *)__p[0] + a2);
  __p[1] = __p[0];
  operator delete(__p[0]);
  return v3;
}

unint64_t GKCMeshGraph::GetNumTriangles(p2t::CDT **this)
{
  _BYTE *v1;
  _BYTE *v2;
  _BYTE *v4;
  _BYTE *v5;

  p2t::CDT::GetTriangles(this[43], &v4);
  v1 = v4;
  v2 = v5;
  if (v4)
  {
    v5 = v4;
    operator delete(v4);
  }
  return (unint64_t)(v2 - v1) >> 3;
}

void GKCMeshGraph::ConnectNodeUsingObstacles(p2t::CDT **this, float32x2_t *a2)
{
  p2t::CDT **v3;
  p2t::Triangle **v4;
  float32x2_t v5;
  Point **v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  Point **v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  Point ***v25;
  uint64_t v26;
  Point **v27;
  Point *v28;
  Point *v29;
  p2t::Triangle *v30;
  Point *v31;
  Point **v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  Point ***v39;
  unint64_t v40;
  Point **v41;
  Point **v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  Point **v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v50;
  Point ***v51;
  uint64_t v52;
  Point **v53;
  Point *v54;
  Point *v55;
  p2t::Triangle *v56;
  Point *v57;
  Point **v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  Point ***v65;
  unint64_t v66;
  Point **v67;
  Point **v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  Point **v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  _QWORD *v76;
  Point ***v77;
  uint64_t v78;
  Point **v79;
  Point *v80;
  Point *v81;
  p2t::Triangle *v82;
  Point *v83;
  Point **v84;
  int64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  Point ***v91;
  unint64_t v92;
  Point **v93;
  Point **v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD *v97;
  Point **v98;
  uint64_t v99;
  __int128 v100;
  Point **v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  p2t::CDT **v106;
  p2t::CDT **v107;
  GKCGraphNode *v108;
  Point *v109;
  Point **v110;
  Point **v111;
  Point **v112;
  void *__p;
  p2t::Triangle **v114;
  p2t::Triangle *v115;
  Point **v116;

  v3 = this;
  v115 = 0;
  p2t::CDT::GetTriangles(this[43], &__p);
  v4 = (p2t::Triangle **)__p;
  if (__p == v114)
LABEL_128:
    __assert_rtn("ConnectNodeUsingObstacles", "GKCMeshGraph.mm", 480, "triangleInside != nullptr");
  v5 = a2[8];
  while (1)
  {
    v6 = (Point **)*v4;
    v7 = vsub_f32(vcvt_f32_f64(*(float64x2_t *)*((_QWORD *)*v4 + 1)), v5);
    v8 = vsub_f32(vcvt_f32_f64(*(float64x2_t *)*((_QWORD *)*v4 + 2)), v5);
    v9 = vsub_f32(vcvt_f32_f64(*(float64x2_t *)*((_QWORD *)*v4 + 3)), v5);
    v10 = (int32x2_t)vmul_f32(v7, v8);
    v11 = (int32x2_t)vmul_f32(v9, v7);
    v12 = (int32x2_t)vmul_f32(v9, v8);
    v13 = (int32x2_t)vmul_f32(v9, v9);
    v14 = vadd_f32((float32x2_t)vzip1_s32(v11, v10), (float32x2_t)vzip2_s32(v11, v10));
    v15 = vadd_f32((float32x2_t)vzip1_s32(v12, v13), (float32x2_t)vzip2_s32(v12, v13));
    v16 = vmul_f32(v15, v14);
    if (vsub_f32(v16, (float32x2_t)vdup_lane_s32((int32x2_t)v16, 1)).f32[0] >= 0.0)
    {
      v17 = vmul_f32(v8, v8);
      if (vmls_f32(vmul_lane_f32(v15, v14, 1), v14, vadd_f32(v17, (float32x2_t)vdup_lane_s32((int32x2_t)v17, 1))).f32[0] >= 0.0)
        break;
    }
    if (++v4 == v114)
      goto LABEL_128;
  }
  v115 = *v4;
  if (*((_BYTE *)v3 + 656))
  {
    v116 = (Point **)v6[1];
    v110 = (Point **)&v116;
    v18 = std::__hash_table<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)(v3 + 62), (uint64_t *)&v116, (uint64_t)&std::piecewise_construct, &v110);
    GKCGraphNode::addConnectionToNode((id *)a2, (id *)v18[3], 1);
    v116 = (Point **)v6[2];
    v110 = (Point **)&v116;
    v19 = std::__hash_table<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)(v3 + 62), (uint64_t *)&v116, (uint64_t)&std::piecewise_construct, &v110);
    GKCGraphNode::addConnectionToNode((id *)a2, (id *)v19[3], 1);
    v116 = (Point **)v6[3];
    v110 = (Point **)&v116;
    v20 = std::__hash_table<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)(v3 + 62), (uint64_t *)&v116, (uint64_t)&std::piecewise_construct, &v110);
    GKCGraphNode::addConnectionToNode((id *)a2, (id *)v20[3], 1);
  }
  if (!*((_BYTE *)v3 + 658))
    goto LABEL_121;
  v107 = v3;
  v108 = (GKCGraphNode *)a2;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v21 = (Point **)operator new(0x18uLL);
  v110 = v21;
  v111 = v21;
  v112 = v21 + 3;
  v22 = (uint64_t)(v3 + 77);
  v109 = v6[1];
  v116 = &v109;
  v24 = std::__hash_table<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>((uint64_t)(v3 + 77), (uint64_t *)&v109, (uint64_t)&std::piecewise_construct, &v116);
  v25 = (Point ***)v24[3];
  v106 = v3 + 77;
  if (v25 != (Point ***)v24[4])
  {
    while (1)
    {
      v27 = *v25;
      v28 = **v25;
      if (v28 != v109)
LABEL_126:
        __assert_rtn("ConnectNodeUsingObstacles", "GKCMeshGraph.mm", 512, "edge->p == point");
      v29 = v27[1];
      v30 = v115;
      if (v29 != p2t::Triangle::PointCW(v115, v28, v23))
      {
        v31 = v27[1];
        if (v31 != p2t::Triangle::PointCCW(v30, v109))
          goto LABEL_13;
      }
      if (v21 < v112)
      {
        *v21 = (Point *)v27;
        v26 = (uint64_t)(v21 + 1);
        goto LABEL_12;
      }
      v32 = v110;
      v33 = (char *)v21 - (char *)v110;
      v34 = v21 - v110;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 61)
LABEL_129:
        _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
      v36 = (char *)v112 - (char *)v110;
      if (((char *)v112 - (char *)v110) >> 2 > v35)
        v35 = v36 >> 2;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        if (v37 >> 61)
LABEL_130:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v38 = operator new(8 * v37);
        v39 = (Point ***)&v38[8 * v34];
        *v39 = v27;
        v26 = (uint64_t)(v39 + 1);
        if (v21 == v32)
        {
LABEL_27:
          v110 = (Point **)v39;
          v111 = (Point **)v26;
          v112 = (Point **)&v38[8 * v37];
          if (!v21)
            goto LABEL_12;
LABEL_34:
          operator delete(v21);
          goto LABEL_12;
        }
      }
      else
      {
        v38 = 0;
        v39 = (Point ***)(8 * v34);
        *(_QWORD *)(8 * v34) = v27;
        v26 = 8 * v34 + 8;
        if (v21 == v32)
          goto LABEL_27;
      }
      v40 = (char *)(v21 - 1) - (char *)v32;
      if (v40 < 0x168)
      {
        v41 = v21;
        goto LABEL_32;
      }
      if (&v38[v33 - 8 - (v40 & 0xFFFFFFFFFFFFFFF8)] > &v38[v33 - 8])
        break;
      if ((Point **)((char *)v21 - (v40 & 0xFFFFFFFFFFFFFFF8) - 8) > v21 - 1)
      {
        v41 = v21;
        goto LABEL_32;
      }
      if ((unint64_t)((char *)v21 - v38 - v33) < 0x20)
      {
        v41 = v21;
        goto LABEL_32;
      }
      v43 = (v40 >> 3) + 1;
      v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
      v41 = &v21[v44 / 0xFFFFFFFFFFFFFFF8];
      v39 = (Point ***)((char *)v39 - v44);
      v45 = &v38[8 * v34 - 16];
      v46 = v21 - 2;
      v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v48 = *(_OWORD *)v46;
        *(v45 - 1) = *((_OWORD *)v46 - 1);
        *v45 = v48;
        v45 -= 2;
        v46 -= 4;
        v47 -= 4;
      }
      while (v47);
      if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_32;
LABEL_33:
      v21 = v110;
      v110 = (Point **)v39;
      v111 = (Point **)v26;
      v112 = (Point **)&v38[8 * v37];
      if (v21)
        goto LABEL_34;
LABEL_12:
      v111 = (Point **)v26;
      v21 = (Point **)v26;
LABEL_13:
      if (++v25 == (Point ***)v24[4])
      {
        v6 = (Point **)v115;
        v22 = (uint64_t)v106;
        goto LABEL_46;
      }
    }
    v41 = v21;
    do
    {
LABEL_32:
      v42 = (Point **)*--v41;
      *--v39 = v42;
    }
    while (v41 != v32);
    goto LABEL_33;
  }
LABEL_46:
  v109 = v6[2];
  v116 = &v109;
  v50 = std::__hash_table<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>(v22, (uint64_t *)&v109, (uint64_t)&std::piecewise_construct, &v116);
  v51 = (Point ***)v50[3];
  if (v51 == (Point ***)v50[4])
    goto LABEL_83;
  do
  {
    v53 = *v51;
    v54 = **v51;
    if (v54 != v109)
      goto LABEL_126;
    v55 = v53[1];
    v56 = v115;
    if (v55 == p2t::Triangle::PointCW(v115, v54, v49) || (v57 = v53[1], v57 == p2t::Triangle::PointCCW(v56, v109)))
    {
      if (v21 < v112)
      {
        *v21 = (Point *)v53;
        v52 = (uint64_t)(v21 + 1);
        goto LABEL_49;
      }
      v58 = v110;
      v59 = (char *)v21 - (char *)v110;
      v60 = v21 - v110;
      v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 61)
        goto LABEL_129;
      v62 = (char *)v112 - (char *)v110;
      if (((char *)v112 - (char *)v110) >> 2 > v61)
        v61 = v62 >> 2;
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
        v63 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v63 = v61;
      if (v63)
      {
        if (v63 >> 61)
          goto LABEL_130;
        v64 = operator new(8 * v63);
        v65 = (Point ***)&v64[8 * v60];
        *v65 = v53;
        v52 = (uint64_t)(v65 + 1);
        if (v21 == v58)
        {
LABEL_64:
          v110 = (Point **)v65;
          v111 = (Point **)v52;
          v112 = (Point **)&v64[8 * v63];
          if (!v21)
            goto LABEL_49;
          goto LABEL_71;
        }
      }
      else
      {
        v64 = 0;
        v65 = (Point ***)(8 * v60);
        *(_QWORD *)(8 * v60) = v53;
        v52 = 8 * v60 + 8;
        if (v21 == v58)
          goto LABEL_64;
      }
      v66 = (char *)(v21 - 1) - (char *)v58;
      if (v66 >= 0x168)
      {
        if (&v64[v59 - 8 - (v66 & 0xFFFFFFFFFFFFFFF8)] > &v64[v59 - 8])
        {
          v67 = v21;
        }
        else if ((Point **)((char *)v21 - (v66 & 0xFFFFFFFFFFFFFFF8) - 8) > v21 - 1)
        {
          v67 = v21;
        }
        else if ((unint64_t)((char *)v21 - v64 - v59) >= 0x20)
        {
          v69 = (v66 >> 3) + 1;
          v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
          v67 = &v21[v70 / 0xFFFFFFFFFFFFFFF8];
          v65 = (Point ***)((char *)v65 - v70);
          v71 = &v64[8 * v60 - 16];
          v72 = v21 - 2;
          v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v74 = *(_OWORD *)v72;
            *(v71 - 1) = *((_OWORD *)v72 - 1);
            *v71 = v74;
            v71 -= 2;
            v72 -= 4;
            v73 -= 4;
          }
          while (v73);
          if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_70:
            v21 = v110;
            v110 = (Point **)v65;
            v111 = (Point **)v52;
            v112 = (Point **)&v64[8 * v63];
            if (v21)
LABEL_71:
              operator delete(v21);
LABEL_49:
            v111 = (Point **)v52;
            v21 = (Point **)v52;
            goto LABEL_50;
          }
        }
        else
        {
          v67 = v21;
        }
      }
      else
      {
        v67 = v21;
      }
      do
      {
        v68 = (Point **)*--v67;
        *--v65 = v68;
      }
      while (v67 != v58);
      goto LABEL_70;
    }
LABEL_50:
    ++v51;
  }
  while (v51 != (Point ***)v50[4]);
  v6 = (Point **)v115;
  v22 = (uint64_t)v106;
LABEL_83:
  v109 = v6[3];
  v116 = &v109;
  v76 = std::__hash_table<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>(v22, (uint64_t *)&v109, (uint64_t)&std::piecewise_construct, &v116);
  v77 = (Point ***)v76[3];
  if (v77 != (Point ***)v76[4])
  {
    while (2)
    {
      v79 = *v77;
      v80 = **v77;
      if (v80 != v109)
        goto LABEL_126;
      v81 = v79[1];
      v82 = v115;
      if (v81 != p2t::Triangle::PointCW(v115, v80, v75))
      {
        v83 = v79[1];
        if (v83 != p2t::Triangle::PointCCW(v82, v109))
          goto LABEL_87;
      }
      if (v21 < v112)
      {
        *v21 = (Point *)v79;
        v78 = (uint64_t)(v21 + 1);
        goto LABEL_86;
      }
      v84 = v110;
      v85 = (char *)v21 - (char *)v110;
      v86 = v21 - v110;
      v87 = v86 + 1;
      if ((unint64_t)(v86 + 1) >> 61)
        goto LABEL_129;
      v88 = (char *)v112 - (char *)v110;
      if (((char *)v112 - (char *)v110) >> 2 > v87)
        v87 = v88 >> 2;
      if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
        v89 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v89 = v87;
      if (v89)
      {
        if (v89 >> 61)
          goto LABEL_130;
        v90 = operator new(8 * v89);
        v91 = (Point ***)&v90[8 * v86];
        *v91 = v79;
        v78 = (uint64_t)(v91 + 1);
        if (v21 == v84)
        {
LABEL_101:
          v110 = (Point **)v91;
          v111 = (Point **)v78;
          v112 = (Point **)&v90[8 * v89];
          if (!v21)
          {
LABEL_86:
            v111 = (Point **)v78;
            v21 = (Point **)v78;
LABEL_87:
            if (++v77 == (Point ***)v76[4])
              goto LABEL_119;
            continue;
          }
LABEL_108:
          operator delete(v21);
          goto LABEL_86;
        }
      }
      else
      {
        v90 = 0;
        v91 = (Point ***)(8 * v86);
        *(_QWORD *)(8 * v86) = v79;
        v78 = 8 * v86 + 8;
        if (v21 == v84)
          goto LABEL_101;
      }
      break;
    }
    v92 = (char *)(v21 - 1) - (char *)v84;
    if (v92 < 0x168)
    {
      v93 = v21;
      goto LABEL_106;
    }
    if (&v90[v85 - 8 - (v92 & 0xFFFFFFFFFFFFFFF8)] > &v90[v85 - 8])
    {
      v93 = v21;
      goto LABEL_106;
    }
    if ((Point **)((char *)v21 - (v92 & 0xFFFFFFFFFFFFFFF8) - 8) > v21 - 1)
    {
      v93 = v21;
      goto LABEL_106;
    }
    if ((unint64_t)((char *)v21 - v90 - v85) < 0x20)
    {
      v93 = v21;
      goto LABEL_106;
    }
    v95 = (v92 >> 3) + 1;
    v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
    v93 = &v21[v96 / 0xFFFFFFFFFFFFFFF8];
    v91 = (Point ***)((char *)v91 - v96);
    v97 = &v90[8 * v86 - 16];
    v98 = v21 - 2;
    v99 = v95 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v100 = *(_OWORD *)v98;
      *(v97 - 1) = *((_OWORD *)v98 - 1);
      *v97 = v100;
      v97 -= 2;
      v98 -= 4;
      v99 -= 4;
    }
    while (v99);
    if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_106:
        v94 = (Point **)*--v93;
        *--v91 = v94;
      }
      while (v93 != v84);
    }
    v21 = v110;
    v110 = (Point **)v91;
    v111 = (Point **)v78;
    v112 = (Point **)&v90[8 * v89];
    if (!v21)
      goto LABEL_86;
    goto LABEL_108;
  }
LABEL_119:
  v101 = v110;
  if ((char *)v21 - (char *)v110 != 24)
    __assert_rtn("ConnectNodeUsingObstacles", "GKCMeshGraph.mm", 523, "edges.size() == 3");
  v109 = *v110;
  v116 = &v109;
  v102 = std::__hash_table<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::hash<p2t::Edge *>,std::equal_to<p2t::Edge *>,true>,std::__unordered_map_equal<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::equal_to<p2t::Edge *>,std::hash<p2t::Edge *>,true>,std::allocator<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Edge *,std::piecewise_construct_t const&,std::tuple<p2t::Edge * const&>,std::tuple<>>((uint64_t)(v107 + 72), (uint64_t *)&v109, (uint64_t)&std::piecewise_construct, &v116);
  GKCGraphNode::addConnectionToNode((id *)v108, (id *)v102[3], 1);
  v109 = v101[1];
  v116 = &v109;
  v103 = std::__hash_table<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::hash<p2t::Edge *>,std::equal_to<p2t::Edge *>,true>,std::__unordered_map_equal<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::equal_to<p2t::Edge *>,std::hash<p2t::Edge *>,true>,std::allocator<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Edge *,std::piecewise_construct_t const&,std::tuple<p2t::Edge * const&>,std::tuple<>>((uint64_t)(v107 + 72), (uint64_t *)&v109, (uint64_t)&std::piecewise_construct, &v116);
  GKCGraphNode::addConnectionToNode((id *)v108, (id *)v103[3], 1);
  v109 = v101[2];
  v116 = &v109;
  v104 = std::__hash_table<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::hash<p2t::Edge *>,std::equal_to<p2t::Edge *>,true>,std::__unordered_map_equal<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::equal_to<p2t::Edge *>,std::hash<p2t::Edge *>,true>,std::allocator<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Edge *,std::piecewise_construct_t const&,std::tuple<p2t::Edge * const&>,std::tuple<>>((uint64_t)(v107 + 72), (uint64_t *)&v109, (uint64_t)&std::piecewise_construct, &v116);
  GKCGraphNode::addConnectionToNode((id *)v108, (id *)v104[3], 1);
  operator delete(v101);
  v3 = v107;
  a2 = (float32x2_t *)v108;
LABEL_121:
  if (*((_BYTE *)v3 + 657))
  {
    v110 = (Point **)&v115;
    v105 = std::__hash_table<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::hash<p2t::Triangle *>,std::equal_to<p2t::Triangle *>,true>,std::__unordered_map_equal<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::equal_to<p2t::Triangle *>,std::hash<p2t::Triangle *>,true>,std::allocator<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Triangle *,std::piecewise_construct_t const&,std::tuple<p2t::Triangle * const&>,std::tuple<>>((uint64_t)(v3 + 67), (uint64_t *)&v115, (uint64_t)&std::piecewise_construct, &v110);
    GKCGraphNode::addConnectionToNode((id *)a2, (id *)v105[3], 1);
  }
  GKCGraph::addNode((GKCGraph *)v3, (id *)a2);
  if (__p)
  {
    v114 = (p2t::Triangle **)__p;
    operator delete(__p);
  }
}

void sub_227B76F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::__map_value_compare<p2t::Triangle *,std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::less<p2t::Triangle *>,true>,std::allocator<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::__map_value_compare<p2t::Triangle *,std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::less<p2t::Triangle *>,true>,std::allocator<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::__map_value_compare<p2t::Triangle *,std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::less<p2t::Triangle *>,true>,std::allocator<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

char *std::__hash_table<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = *((_QWORD *)v14 + 1);
            if (v16 == v10)
            {
              if (*((_QWORD *)v14 + 2) == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = *(char **)v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v10)
          {
            if (*((_QWORD *)v14 + 2) == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (_QWORD *)(a1 + 16);
  v14 = (char *)operator new(0x40uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  *((_QWORD *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      *(_QWORD *)v14 = *v21;
LABEL_61:
      *v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v29 & v10;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v10));
      if (v21)
        goto LABEL_26;
    }
  }
  *(_QWORD *)v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v20 + 8 * v4) = v17;
  if (*(_QWORD *)v14)
  {
    v30 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11)
        v30 %= v11;
    }
    else
    {
      v30 &= v11 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_227B7734C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (_QWORD *)v2[5];
      if (v3)
      {
        do
        {
          v4 = (_QWORD *)*v3;
          operator delete(v3);
          v3 = v4;
        }
        while (v4);
      }
      v5 = (void *)v2[3];
      v2[3] = 0;
      if (v5)
        operator delete(v5);
    }
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<p2t::Point *,BOOL>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,BOOL>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,BOOL>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,BOOL>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v18 = operator new(0x20uLL);
  *v18 = 0;
  v18[1] = v10;
  v18[2] = **a4;
  *((_BYTE *)v18 + 24) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      *v18 = *v22;
LABEL_61:
      *v22 = v18;
      goto LABEL_62;
    }
  }
  else
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v22)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v22)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v30 & v10;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v10));
      if (v22)
        goto LABEL_26;
    }
  }
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    v31 = *(_QWORD *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v18;
}

void sub_227B778C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t prime;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v17 = (_QWORD *)(a1 + 16);
  v14 = operator new(0x30uLL);
  *v14 = 0;
  v14[1] = v10;
  v14[2] = **a4;
  v14[3] = 0;
  v14[4] = 0;
  v14[5] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v21)
    {
LABEL_26:
      *v14 = *v21;
LABEL_61:
      *v21 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24)
      prime = v24;
    else
      prime = v23;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (prime <= v26)
        prime = v26;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v29 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v21)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v20 = *(_QWORD *)a1;
        v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v21)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v29 & v10;
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v29 & v10));
      if (v21)
        goto LABEL_26;
    }
  }
  *v14 = *v17;
  *v17 = v14;
  *(_QWORD *)(v20 + 8 * v4) = v17;
  if (*v14)
  {
    v30 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v30 >= v11)
        v30 %= v11;
    }
    else
    {
      v30 &= v11 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_227B77C2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<p2t::Point *,std::vector<p2t::Edge *>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Point *,std::piecewise_construct_t const&,std::tuple<p2t::Point * const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v18 = operator new(0x20uLL);
  *v18 = 0;
  v18[1] = v10;
  v18[2] = **a4;
  v18[3] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      *v18 = *v22;
LABEL_61:
      *v22 = v18;
      goto LABEL_62;
    }
  }
  else
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v22)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v22)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v30 & v10;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v10));
      if (v22)
        goto LABEL_26;
    }
  }
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    v31 = *(_QWORD *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v18;
}

void sub_227B77FD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::hash<p2t::Triangle *>,std::equal_to<p2t::Triangle *>,true>,std::__unordered_map_equal<p2t::Triangle *,std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>,std::equal_to<p2t::Triangle *>,std::hash<p2t::Triangle *>,true>,std::allocator<std::__hash_value_type<p2t::Triangle *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Triangle *,std::piecewise_construct_t const&,std::tuple<p2t::Triangle * const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v18 = operator new(0x20uLL);
  *v18 = 0;
  v18[1] = v10;
  v18[2] = **a4;
  v18[3] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      *v18 = *v22;
LABEL_61:
      *v22 = v18;
      goto LABEL_62;
    }
  }
  else
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v22)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v22)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v30 & v10;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v10));
      if (v22)
        goto LABEL_26;
    }
  }
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    v31 = *(_QWORD *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v18;
}

void sub_227B78330(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::__unordered_map_hasher<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::hash<p2t::Edge *>,std::equal_to<p2t::Edge *>,true>,std::__unordered_map_equal<p2t::Edge *,std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>,std::equal_to<p2t::Edge *>,std::hash<p2t::Edge *>,true>,std::allocator<std::__hash_value_type<p2t::Edge *,GKCGraphNode2D *>>>::__emplace_unique_key_args<p2t::Edge *,std::piecewise_construct_t const&,std::tuple<p2t::Edge * const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  float v19;
  float v20;
  uint64_t v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v18 = operator new(0x20uLL);
  *v18 = 0;
  v18[1] = v10;
  v18[2] = **a4;
  v18[3] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    v21 = *(_QWORD *)a1;
    v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      *v18 = *v22;
LABEL_61:
      *v22 = v18;
      goto LABEL_62;
    }
  }
  else
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (prime <= v27)
        prime = v27;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::__unordered_map_hasher<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::hash<p2t::Point *>,std::equal_to<p2t::Point *>,true>,std::__unordered_map_equal<p2t::Point *,std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>,std::equal_to<p2t::Point *>,std::hash<p2t::Point *>,true>,std::allocator<std::__hash_value_type<p2t::Point *,std::unordered_map<p2t::Point *,BOOL>>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v22)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v21 = *(_QWORD *)a1;
        v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v22)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v30 & v10;
      v21 = *(_QWORD *)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v30 & v10));
      if (v22)
        goto LABEL_26;
    }
  }
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    v31 = *(_QWORD *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v18;
}

void sub_227B7868C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_227B78F54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B79084(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B7913C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B79270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B79358(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x22E2A50A0](v2, 0xA1C407DA79AE9);

  _Unwind_Resume(a1);
}

void sub_227B79380(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B7957C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B795AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B795C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B795D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B79658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B796B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B79770(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void OpenSteer::SphericalObstacle::steerToAvoid(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  (*(float (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2);
  (*(float (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  (*(float (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
}

void GKCGraph::GKCGraph(GKCGraph *this)
{
  *(_QWORD *)this = &off_24F04EDE8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
}

void GKCGraph::~GKCGraph(id *this)
{
  id v2;

  *this = &off_24F04EDE8;
  objc_destroyWeak(this + 4);
  v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
}

{
  id v2;

  *this = &off_24F04EDE8;
  objc_destroyWeak(this + 4);
  v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
}

{
  id v2;

  *this = &off_24F04EDE8;
  objc_destroyWeak(this + 4);
  v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2A50A0);
}

uint64_t GKCGraph::connectNodeToLowestCostNode(GKCGraph *this, id *a2, char a3)
{
  id **v5;
  id *v7;
  float v8;
  id *v9;
  id *v10;
  float v11;

  v5 = (id **)*((_QWORD *)this + 1);
  if (v5 != *((id ***)this + 2))
  {
    v7 = 0;
    v8 = 3.4028e38;
    do
    {
      v10 = *v5++;
      v9 = v10;
      v11 = (*((float (**)(id *, id *))*a2 + 3))(a2, v10);
      if (v11 < v8 || v7 == 0)
      {
        v7 = v9;
        v8 = v11;
      }
    }
    while (v5 != *((id ***)this + 2));
    if (v7)
      GKCGraphNode::addConnectionToNode(v7, a2, a3);
  }
  return GKCGraph::addNode(this, a2);
}

uint64_t GKCGraph::addNode(GKCGraph *this, id *a2)
{
  unint64_t v4;
  id **v5;
  id **v6;
  uint64_t v7;
  void **v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  id **v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id **v22;
  uint64_t v23;
  __int128 v24;
  id *v25;
  id WeakRetained;
  id v27;
  id v28;

  v5 = (id **)*((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *v5 = a2;
    v7 = (uint64_t)(v5 + 1);
    goto LABEL_23;
  }
  v8 = (void **)((char *)this + 8);
  v9 = (char *)*((_QWORD *)this + 1);
  v10 = ((char *)v5 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v12 = v4 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v14 = (char *)operator new(8 * v13);
    v15 = (id **)&v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = a2;
    v7 = (uint64_t)(v15 + 1);
    v17 = (char *)((char *)v5 - v9);
    if (v5 == (id **)v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (id **)(8 * v10);
  v16 = 0;
  *(_QWORD *)(8 * v10) = a2;
  v7 = 8 * v10 + 8;
  v17 = (char *)((char *)v5 - v9);
  if (v5 != (id **)v9)
  {
LABEL_14:
    v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_28;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[v20 / 0xFFFFFFFFFFFFFFF8];
    v15 = (id **)((char *)v15 - v20);
    v21 = &v14[8 * v10 - 16];
    v22 = v5 - 2;
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *(_OWORD *)v22;
      *((_OWORD *)v21 - 1) = *((_OWORD *)v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 4;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v25 = *--v6;
        *--v15 = v25;
      }
      while (v6 != (id **)v9);
    }
    v6 = (id **)*v8;
  }
LABEL_21:
  *((_QWORD *)this + 1) = v15;
  *((_QWORD *)this + 2) = v7;
  *((_QWORD *)this + 3) = v16;
  if (v6)
    operator delete(v6);
LABEL_23:
  *((_QWORD *)this + 2) = v7;
  WeakRetained = objc_loadWeakRetained((id *)this + 4);
  v27 = (id)objc_msgSend(WeakRetained, "nodesMut");

  v28 = objc_loadWeakRetained(a2 + 7);
  return objc_msgSend(v27, "addObject:", v28);
}

void sub_227B7A0E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void GKCGraph::removeNode(GKCGraph *this, id *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  GKCGraphNode **v7;
  GKCGraphNode **v8;
  int64_t v9;
  void *v10;
  id v11;
  id WeakRetained;

  v4 = *((_QWORD *)this + 2) - *((_QWORD *)this + 1);
  if ((int)(v4 >> 3) >= 1)
  {
    v5 = (v4 >> 3) + 1;
    do
    {
      v6 = 8 * (v5 - 2);
      GKCGraphNode::removeConnectionToNode(*(id **)(*((_QWORD *)this + 1) + v6), a2, 1);
      v7 = (GKCGraphNode **)(*((_QWORD *)this + 1) + v6);
      if (*v7 == (GKCGraphNode *)a2)
      {
        v8 = (GKCGraphNode **)*((_QWORD *)this + 2);
        v9 = (char *)v8 - (char *)(v7 + 1);
        if (v8 != v7 + 1)
          memmove(v7, v7 + 1, (char *)v8 - (char *)(v7 + 1));
        *((_QWORD *)this + 2) = (char *)v7 + v9;
      }
      --v5;
    }
    while (v5 > 1);
  }
  WeakRetained = objc_loadWeakRetained((id *)this + 4);
  objc_msgSend(WeakRetained, "nodesMut");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_loadWeakRetained(a2 + 7);
  objc_msgSend(v10, "removeObject:", v11);

}

void sub_227B7A1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_227B7A204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void GKCGridGraph::GKCGridGraph(GKCGridGraph *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_24F04EE10;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 12) = 0;
}

void GKCGridGraph::initDontConstructNodes(_QWORD *a1, int a2, int a3, char a4, uint64_t a5, double a6)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v10 = a1[8];
  v8 = a1 + 8;
  v9 = v10;
  *((_BYTE *)v8 - 8) = a4;
  *((double *)v8 - 3) = a6;
  *((_DWORD *)v8 - 4) = a2;
  *((_DWORD *)v8 - 3) = a3;
  v11 = (a3 * a2);
  v12 = (v8[1] - v10) >> 3;
  if (v11 > v12)
  {
    std::vector<GKCGridGraphNode *>::__append((void **)v8, v11 - v12);
LABEL_3:
    a1[11] = a5;
    return;
  }
  if (v11 >= v12)
    goto LABEL_3;
  a1[9] = v9 + 8 * v11;
  a1[11] = a5;
}

void GKCGridGraph::init(uint64_t a1, int a2, unsigned int a3, char a4, void *a5, double a6)
{
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  void *v20;
  unsigned int v21;
  int i;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  double v28;

  v11 = (_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_BYTE *)(a1 + 56) = a4;
  *(double *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 52) = a3;
  v12 = a3 * a2;
  v13 = (*(_QWORD *)(a1 + 72) - v10) >> 3;
  if (v12 <= v13)
  {
    if (v12 < v13)
      *(_QWORD *)(a1 + 72) = v10 + 8 * v12;
  }
  else
  {
    v28 = a6;
    std::vector<GKCGridGraphNode *>::__append((void **)(a1 + 64), v12 - v13);
    a6 = v28;
  }
  *(_QWORD *)(a1 + 88) = a5;
  if (a2 && a3)
  {
    v14 = 0;
    v15 = 0;
    v27 = LODWORD(a6);
    v25 = a2;
    v26 = HIDWORD(a6);
    v16 = a3;
    do
    {
      v17 = v26;
      v18 = v16;
      v19 = v14;
      do
      {
        objc_msgSend(a5, "nodeWithGridPosition:", COERCE_DOUBLE(__PAIR64__(v17, v15 + v27)));
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        GKCGraph::addNode((GKCGraph *)a1, (id *)objc_msgSend(v20, "cGridGraphNode"));
        *(_QWORD *)(*v11 + 8 * v19) = objc_msgSend(v20, "cGridGraphNode");

        ++v19;
        ++v17;
        --v18;
      }
      while (v18);
      ++v15;
      v14 += a3;
      v16 = a3;
    }
    while (v15 != v25);
    v21 = 0;
    for (i = 0; i != v25; ++i)
    {
      v23 = a3;
      v24 = v21;
      do
      {
        GKCGridGraph::connectNodeToAdjacentNodesNoAdd((id *)a1, *(int32x2_t **)(*(_QWORD *)(a1 + 64) + 8 * v24++), 0);
        --v23;
      }
      while (v23);
      v21 += a3;
    }
  }
}

void sub_227B7A430(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id *GKCGridGraph::connectNodeToAdjacentNodesNoAdd(id *this, int32x2_t *a2, char a3)
{
  id *v5;
  int32x2_t v6;
  int32x2_t v7;
  int32x2_t v8;
  BOOL v9;
  int32x2_t v10;
  int v11;
  unint64_t v12;
  _QWORD *v13;
  BOOL v14;
  __int32 v17;
  int v18;
  int32x2_t v21;
  int8x8_t v22;
  int32x2_t v23;
  int v24;
  int v25;
  int v26;
  int v29;
  __int32 v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int32x2_t v37;
  int32x2_t v38;

  v5 = this;
  v6 = a2[8];
  v7 = (int32x2_t)this[5];
  v8 = vzip1_s32(v7, v6);
  if (v6.i32[0] < v7.i32[0]
    || ((int)*(_QWORD *)&a2[8] < (int)(*((_DWORD *)this + 12) + this[5])
      ? (v9 = v6.i32[1] < v7.i32[1])
      : (v9 = 1),
        v9
     || (v11 = *((_DWORD *)this + 13), v6.i32[1] >= v11 + v7.i32[1])
     || !*((_QWORD *)this[8] + (v6.i32[1] - v7.i32[1] + v11 * (v6.i32[0] - v7.i32[0])))))
  {
    v10 = vsub_s32(v6, v7);
    v11 = *((_DWORD *)this + 13);
    v12 = (v10.i32[1] + v11 * v10.i32[0]);
    if ((v12 & 0x80000000) == 0)
    {
      v13 = this[8];
      if (v12 < ((_BYTE *)this[9] - (_BYTE *)v13) >> 3)
      {
        v13[v12] = a2;
        v6 = a2[8];
        v7 = (int32x2_t)this[5];
        v8 = vzip1_s32(v7, v6);
      }
    }
  }
  if (v8.i32[1] > v8.i32[0])
  {
    v14 = v8.i32[1] > *((_DWORD *)this + 12) + v8.i32[0] || v6.i32[1] < v7.i32[1];
    if (!v14 && v6.i32[1] < v11 + v7.i32[1])
    {
      this = (id *)*((_QWORD *)this[8] + (v6.i32[1] - v7.i32[1] + v11 * (v8.i32[1] + ~v8.i32[0])));
      if (this)
      {
        this = GKCGraphNode::addConnectionToNode(this, (id *)a2, a3);
        v6 = a2[8];
        v7 = (int32x2_t)v5[5];
        v8 = vzip1_s32(v7, v6);
      }
    }
  }
  if (v8.i32[1] + 1 >= v8.i32[0] && v8.i32[1] + 1 < *((_DWORD *)v5 + 12) + v8.i32[0] && v6.i32[1] >= v7.i32[1])
  {
    v32 = *((_DWORD *)v5 + 13);
    if (v6.i32[1] < v32 + v7.i32[1])
    {
      this = (id *)*((_QWORD *)v5[8] + (v6.i32[1] - v7.i32[1] + v32 * (v8.i32[1] + 1 - v8.i32[0])));
      if (this)
      {
        this = GKCGraphNode::addConnectionToNode(this, (id *)a2, a3);
        v6 = a2[8];
        v7 = (int32x2_t)v5[5];
        v8 = vzip1_s32(v7, v6);
      }
    }
  }
  v17 = v6.i32[1];
  if (v8.i32[1] >= v8.i32[0])
  {
    v18 = v6.i32[1] + 1;
    if (v8.i32[1] < *((_DWORD *)v5 + 12) + v8.i32[0] && v18 >= v7.i32[1])
    {
      v33 = *((_DWORD *)v5 + 13);
      if (v18 < v33 + v7.i32[1])
      {
        this = (id *)*((_QWORD *)v5[8] + (v18 - v7.i32[1] + v33 * (v8.i32[1] - v8.i32[0])));
        if (this)
        {
          this = GKCGraphNode::addConnectionToNode(this, (id *)a2, a3);
          v7 = (int32x2_t)v5[5];
          v17 = HIDWORD(*(_QWORD *)&a2[8]);
          v8 = vzip1_s32(v7, a2[8]);
        }
      }
    }
  }
  if (v8.i32[1] >= v8.i32[0] && v8.i32[1] < *((_DWORD *)v5 + 12) + v8.i32[0] && v17 > v7.i32[1])
  {
    v34 = *((_DWORD *)v5 + 13);
    if (v17 <= v34 + v7.i32[1])
    {
      this = (id *)*((_QWORD *)v5[8] + (v17 + ~v7.i32[1] + v34 * (v8.i32[1] - v8.i32[0])));
      if (this)
        this = GKCGraphNode::addConnectionToNode(this, (id *)a2, a3);
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v21 = a2[8];
    v22 = (int8x8_t)v5[5];
    v23 = (int32x2_t)__PAIR64__(v21.u32[1], v22.u32[0]);
    v24 = v21.i32[0];
    v25 = v21.i32[1] + 1;
    if (v21.i32[0] > v22.i32[0] && v21.i32[0] <= *((_DWORD *)v5 + 12) + v22.i32[0] && v25 >= v22.i32[1])
    {
      v26 = *((_DWORD *)v5 + 13);
      if (v25 < v26 + v22.i32[1])
      {
        this = (id *)*((_QWORD *)v5[8] + (v25 - v22.i32[1] + v26 * (v21.i32[0] + ~v22.i32[0])));
        if (this)
        {
          this = GKCGraphNode::addConnectionToNode(this, (id *)a2, a3);
          v22 = (int8x8_t)v5[5];
          v23.i32[0] = v22.i32[0];
          v23.i32[1] = HIDWORD(*(_QWORD *)&a2[8]);
          v24 = (int)a2[8];
          v25 = v23.i32[1] + 1;
        }
      }
    }
    if (v24 + 1 >= v23.i32[0] && v24 + 1 < *((_DWORD *)v5 + 12) + v23.i32[0] && v25 >= v22.i32[1])
    {
      v35 = *((_DWORD *)v5 + 13);
      if (v25 < v35 + v22.i32[1])
      {
        this = (id *)*((_QWORD *)v5[8] + (v25 - v22.i32[1] + v35 * (v24 + 1 - v23.i32[0])));
        if (this)
        {
          this = GKCGraphNode::addConnectionToNode(this, (id *)a2, a3);
          v22 = (int8x8_t)v5[5];
          v23.i32[0] = v22.i32[0];
          v23.i32[1] = HIDWORD(*(_QWORD *)&a2[8]);
          v24 = (int)a2[8];
        }
      }
    }
    if (v24 > v23.i32[0] && v24 <= *((_DWORD *)v5 + 12) + v23.i32[0] && v23.i32[1] > v22.i32[1])
    {
      v36 = *((_DWORD *)v5 + 13);
      if (v23.i32[1] <= v36 + v22.i32[1])
      {
        v37.i32[0] = vdup_lane_s32(v23, 1).u32[0];
        v37.i32[1] = v24;
        v38 = vadd_s32(v37, (int32x2_t)vmvn_s8(vext_s8(v22, (int8x8_t)v23, 4uLL)));
        this = (id *)*((_QWORD *)v5[8] + (v38.i32[0] + v36 * v38.i32[1]));
        if (this)
        {
          this = GKCGraphNode::addConnectionToNode(this, (id *)a2, a3);
          v22 = (int8x8_t)v5[5];
          v23.i32[0] = v22.i32[0];
          v23.i32[1] = HIDWORD(*(_QWORD *)&a2[8]);
          v24 = (int)a2[8];
        }
      }
    }
    v29 = v24 + 1;
    v30 = v24 + 1 - v23.i32[0];
    if (v29 >= v23.i32[0] && v29 < *((_DWORD *)v5 + 12) + v23.i32[0] && v23.i32[1] > v22.i32[1])
    {
      v31 = *((_DWORD *)v5 + 13);
      if (v23.i32[1] <= v31 + v22.i32[1])
      {
        this = (id *)*((_QWORD *)v5[8] + (v23.i32[1] + ~v22.i32[1] + v31 * v30));
        if (this)
          return GKCGraphNode::addConnectionToNode(this, (id *)a2, a3);
      }
    }
  }
  return this;
}

void GKCGridGraph::~GKCGridGraph(GKCGridGraph *this)
{
  id **v2;
  void *v3;
  void *v4;
  id *v5;
  id WeakRetained;
  id v7;

  *(_QWORD *)this = &off_24F04EE10;
  v2 = (id **)*((_QWORD *)this + 8);
  if (v2 == *((id ***)this + 9))
  {
    *((_QWORD *)this + 9) = v2;
    objc_destroyWeak((id *)this + 12);
    v3 = (void *)*((_QWORD *)this + 8);
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  do
  {
    v5 = *v2;
    if (*v2)
    {
      WeakRetained = objc_loadWeakRetained(v5 + 7);

      if (WeakRetained)
      {
        v7 = objc_loadWeakRetained(v5 + 7);
        objc_msgSend(v7, "deleteCGraphNode");

      }
      else
      {
        (*((void (**)(id *))*v5 + 1))(v5);
      }
    }
    ++v2;
  }
  while (v2 != *((id ***)this + 9));
  *((_QWORD *)this + 9) = *((_QWORD *)this + 8);
  objc_destroyWeak((id *)this + 12);
  v3 = (void *)*((_QWORD *)this + 8);
  if (v3)
  {
LABEL_3:
    *((_QWORD *)this + 9) = v3;
    operator delete(v3);
  }
LABEL_4:
  *(_QWORD *)this = &off_24F04EDE8;
  objc_destroyWeak((id *)this + 4);
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
}

{
  GKCGridGraph::~GKCGridGraph(this);
  JUMPOUT(0x22E2A50A0);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t GKCGridGraph::nodeAtGridPosition(uint64_t a1, double a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (SLODWORD(a2) < (int)v2)
    return 0;
  if (SLODWORD(a2) >= *(_DWORD *)(a1 + 48) + (int)v2)
    return 0;
  if (SHIDWORD(a2) < SHIDWORD(v2))
    return 0;
  v3 = *(_DWORD *)(a1 + 52);
  if (SHIDWORD(a2) >= v3 + HIDWORD(v2))
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * (HIDWORD(a2) - HIDWORD(v2) + v3 * (LODWORD(a2) - v2)));
}

uint64_t GKCGridGraph::nodeAtGridPositionNoNullCheck(int32x2_t *a1, int32x2_t a2)
{
  int32x2_t v2;

  v2 = vsub_s32(a2, a1[5]);
  return *(_QWORD *)(*(_QWORD *)&a1[8] + 8 * (v2.i32[1] + v2.i32[0] * a1[6].i32[1]));
}

uint64_t GKCGridGraph::addNodeToGridNodes(int32x2_t *a1, int32x2_t *a2)
{
  int32x2_t v2;
  int32x2_t v3;
  int32x2_t v5;
  unint64_t v6;
  int32x2_t v7;
  __int32 v9;

  v2 = a2[8];
  v3 = a1[5];
  if (v2.i32[0] >= v3.i32[0] && v2.i32[0] < a1[6].i32[0] + v3.i32[0] && v2.i32[1] >= v3.i32[1])
  {
    v9 = a1[6].i32[1];
    if (v2.i32[1] < v9 + v3.i32[1])
    {
      if (*(_QWORD *)(*(_QWORD *)&a1[8] + 8 * (v2.i32[1] - v3.i32[1] + v9 * (v2.i32[0] - v3.i32[0]))))
        return 0;
    }
  }
  v5 = vsub_s32(v2, v3);
  v6 = (v5.i32[1] + a1[6].i32[1] * v5.i32[0]);
  if ((v6 & 0x80000000) != 0)
    return 0;
  v7 = a1[8];
  if (v6 >= (uint64_t)(*(_QWORD *)&a1[9] - *(_QWORD *)&v7) >> 3)
    return 0;
  *(_QWORD *)(*(_QWORD *)&v7 + 8 * v6) = a2;
  return 1;
}

id *GKCGridGraph::connectNodeToAdjacentNodes(GKCGridGraph *this, int32x2_t *a2)
{
  GKCGraph::addNode(this, (id *)a2);
  return GKCGridGraph::connectNodeToAdjacentNodesNoAdd((id *)this, a2, 1);
}

void GKCGridGraph::removeNode(int32x2_t *this, GKCGraphNode *a2)
{
  int32x2_t *v4;
  int32x2_t v5;

  if (a2)
  {
    if (v4)
    {
      v5 = vsub_s32(v4[8], this[5]);
      *(_QWORD *)(*(_QWORD *)&this[8] + 8 * (v5.i32[1] + v5.i32[0] * this[6].i32[1])) = 0;
    }
  }
  GKCGraph::removeNode((GKCGraph *)this, (id *)a2);
}

void GKCObstacleGraph::GKCObstacleGraph(GKCObstacleGraph *this)
{
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24F04EE38;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 19) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = (char *)this + 152;
  *((_QWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 100) = 0u;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = (char *)this + 176;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
}

void GKCObstacleGraph::~GKCObstacleGraph(GKCObstacleGraph *this)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  *(_QWORD *)this = &off_24F04EE38;
  v2 = *((_QWORD *)this + 11);
  for (i = *((_QWORD *)this + 12); i != v2; i -= 8)
  {
    v4 = *(void **)(i - 8);

  }
  *((_QWORD *)this + 12) = v2;
  objc_destroyWeak((id *)this + 24);
  std::__tree<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::__map_value_compare<p2t::Triangle *,std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::less<p2t::Triangle *>,true>,std::allocator<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>>>::destroy((uint64_t)this + 168, *((_QWORD **)this + 22));
  std::__tree<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::__map_value_compare<p2t::Triangle *,std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::less<p2t::Triangle *>,true>,std::allocator<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>>>::destroy((uint64_t)this + 144, *((_QWORD **)this + 19));
  v5 = (void *)*((_QWORD *)this + 15);
  if (v5)
  {
    *((_QWORD *)this + 16) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 11);
  if (v6)
  {
    v7 = *((_QWORD *)this + 12);
    v8 = (void *)*((_QWORD *)this + 11);
    if (v7 != v6)
    {
      do
      {
        v9 = *(void **)(v7 - 8);
        v7 -= 8;

      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 12) = v6;
    operator delete(v8);
  }
  v10 = (void *)*((_QWORD *)this + 8);
  if (v10)
  {
    *((_QWORD *)this + 9) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 5);
  if (v11)
  {
    *((_QWORD *)this + 6) = v11;
    operator delete(v11);
  }
  *(_QWORD *)this = &off_24F04EDE8;
  objc_destroyWeak((id *)this + 4);
  v12 = (void *)*((_QWORD *)this + 1);
  if (v12)
  {
    *((_QWORD *)this + 2) = v12;
    operator delete(v12);
  }
}

{
  GKCObstacleGraph::~GKCObstacleGraph(this);
  JUMPOUT(0x22E2A50A0);
}

uint64_t GKCObstacleGraph::connectNodeUsingObstacles(GKCObstacleGraph *this, GKCGraphNode2D *a2)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;

  v4 = (uint64_t *)*((_QWORD *)this + 1);
  if (v4 != *((uint64_t **)this + 2))
  {
    v5 = (void *)MEMORY[0x24BDBD1A8];
    do
    {
      v6 = *v4++;
      GKCObstacleGraph::connectNodeToNodeUsingObstacles((id *)this, a2, v6, v5);
    }
    while (v4 != *((uint64_t **)this + 2));
  }
  return GKCGraph::addNode(this, (id *)a2);
}

uint64_t GKCObstacleGraph::connectNodeUsingObstaclesIgnoringObstacles(uint64_t a1, GKCGraphNode *a2, void *a3)
{
  uint64_t *i;
  uint64_t v7;

  for (i = *(uint64_t **)(a1 + 8); i != *(uint64_t **)(a1 + 16); ++i)
  {
    v7 = *i;
    GKCObstacleGraph::connectNodeToNodeUsingObstacles((id *)a1, a2, v7, a3);
  }
  return GKCGraph::addNode((GKCGraph *)a1, (id *)a2);
}

id *GKCObstacleGraph::connectNodeToNodeUsingObstacles(id *result, GKCGraphNode *a2, uint64_t a3, void *a4)
{
  GKCGraphNode *v5;
  id *v6;
  GKCGraphNode **v7;
  GKCGraphNode **v8;
  uint64_t *v9;
  float32x2_t *v10;
  float32x2_t *v11;
  uint64_t v12;
  id v13;
  id *v14;
  float32x2_t *v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t *v23;
  void *v24;
  uint64_t *v25;
  BOOL v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  char v32;
  float32x2_t *v34;
  id *v36;
  _OWORD v38[4];
  char v39[128];
  uint64_t v40;

  v5 = a2;
  v6 = result;
  v40 = *MEMORY[0x24BDAC8D0];
  v8 = *(GKCGraphNode ***)(a3 + 8);
  v7 = *(GKCGraphNode ***)(a3 + 16);
  if (v8 != v7)
  {
    while (*v8 != a2)
    {
      if (++v8 == v7)
      {
        v8 = *(GKCGraphNode ***)(a3 + 16);
        break;
      }
    }
  }
  if (v8 == v7)
  {
    v9 = (uint64_t *)result[8];
    if (v9 != result[9])
    {
      v36 = result + 19;
      v10 = (float32x2_t *)((char *)a2 + 64);
      v11 = (float32x2_t *)(a3 + 64);
      v34 = (float32x2_t *)(a3 + 64);
      do
      {
        v12 = *v9;
        memset(v38, 0, sizeof(v38));
        v13 = a4;
        if (objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", v38, v39, 16))
        {
          v14 = v6;
          v15 = v10;
          v16 = a4;
          v17 = objc_msgSend(**((id **)&v38[0] + 1), "cPolygonObstacle");
          v18 = v17;
          v19 = (uint64_t **)v36;
          while (1)
          {
            v20 = *v19;
            v21 = v19;
            if (!*v19)
              break;
            while (1)
            {
              v19 = (uint64_t **)v20;
              v22 = v20[4];
              if (v17 < v22)
                break;
              if (v22 >= v17)
              {
                v23 = (uint64_t *)v19;
                a4 = v16;
                v10 = v15;
                v6 = v14;
                goto LABEL_21;
              }
              v20 = v19[1];
              if (!v20)
              {
                v21 = v19 + 1;
                goto LABEL_16;
              }
            }
          }
LABEL_16:
          v23 = (uint64_t *)operator new(0x30uLL);
          v23[4] = v18;
          v23[5] = 0;
          *v23 = 0;
          v23[1] = 0;
          v23[2] = (uint64_t)v19;
          *v21 = v23;
          v6 = v14;
          v24 = *(void **)v14[18];
          v25 = v23;
          if (v24)
          {
            v14[18] = v24;
            v25 = *v21;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v14[19], v25);
          v14[20] = (char *)v14[20] + 1;
          a4 = v16;
          v10 = v15;
LABEL_21:
          v5 = a2;
          v26 = v12 == v23[5];

          v11 = v34;
          if (v26)
            goto LABEL_8;
        }
        else
        {

        }
        if (v12 == *((_QWORD *)v5 + 5) && *((_QWORD *)v5 + 4) == *(_QWORD *)(a3 + 32))
        {
          v27 = *((_DWORD *)v5 + 12);
          v28 = *(_DWORD *)(a3 + 48);
          if (v27 - v28 >= 0)
            v29 = v27 - v28;
          else
            v29 = v28 - v27;
          v30 = v29 == 1;
          v31 = ((*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 3) - 1;
          if (v27)
          {
            if (v27 != v31)
              goto LABEL_45;
          }
          else
          {
            v30 = v28 == v31 || v29 == 1;
            if (((*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 3) != 1)
            {
LABEL_45:
              if (v30)
                goto LABEL_8;
              goto LABEL_24;
            }
          }
          if (v28)
            v32 = v30;
          else
            v32 = 1;
          if ((v32 & 1) != 0)
            goto LABEL_8;
        }
LABEL_24:
        result = (id *)GKCPolygonObstacle::intersectsLineFrom(v12, v10, v11);
        if ((result & 1) != 0)
          return result;
        result = (id *)GKCPolygonObstacle::intersectsPoint(v12, v10);
        if ((result & 1) != 0)
          return result;
        result = (id *)GKCPolygonObstacle::intersectsPoint(v12, v11);
        if ((result & 1) != 0)
          return result;
LABEL_8:
        ++v9;
      }
      while (v9 != v6[9]);
    }
    return GKCGraphNode::addConnectionToNode((id *)a3, (id *)v5, 1);
  }
  return result;
}

void sub_227B7B094(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GKCObstacleGraph::connectNodeUsingObstaclesIgnoringBufferRadiusOfObstacles(GKCGraph *a1, float32x2_t *a2, void *a3)
{
  uint64_t *i;
  uint64_t v7;

  for (i = (uint64_t *)*((_QWORD *)a1 + 1); i != *((uint64_t **)a1 + 2); ++i)
  {
    v7 = *i;
    GKCObstacleGraph::connectNodeToNodeUsingObstaclesIgnoreBufferRadius((uint64_t)a1, a2, v7, a3);
  }
  return GKCGraph::addNode(a1, (id *)a2);
}

uint64_t GKCObstacleGraph::connectNodeToNodeUsingObstaclesIgnoreBufferRadius(uint64_t result, float32x2_t *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  GKCGraphNode **v6;
  GKCGraphNode **v7;
  unint64_t *v8;
  uint64_t **v9;
  float32x2_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int32 v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  char v26;
  GKCGraphNode *v28;

  v28 = (GKCGraphNode *)a3;
  v5 = result;
  v7 = *(GKCGraphNode ***)(a3 + 8);
  v6 = *(GKCGraphNode ***)(a3 + 16);
  if (v7 != v6)
  {
    while (*v7 != (GKCGraphNode *)a2)
    {
      if (++v7 == v6)
      {
        v7 = *(GKCGraphNode ***)(a3 + 16);
        break;
      }
    }
  }
  if (v7 == v6)
  {
    v8 = *(unint64_t **)(result + 64);
    if (v8 == *(unint64_t **)(result + 72))
      return (uint64_t)GKCGraphNode::addConnectionToNode((id *)v28, (id *)a2, 1);
    v9 = (uint64_t **)(result + 176);
    v10 = (float32x2_t *)(a3 + 64);
    while (1)
    {
      v11 = *v8;
      v12 = *v9;
      v13 = (uint64_t **)(v5 + 176);
      v14 = (uint64_t **)(v5 + 176);
      if (*v9)
      {
        while (1)
        {
          while (1)
          {
            v14 = (uint64_t **)v12;
            v15 = v12[4];
            if (v11 >= v15)
              break;
            v12 = *v14;
            v13 = v14;
            if (!*v14)
              goto LABEL_16;
          }
          if (v15 >= v11)
            break;
          v12 = v14[1];
          if (!v12)
          {
            v13 = v14 + 1;
            goto LABEL_16;
          }
        }
      }
      else
      {
LABEL_16:
        v16 = (uint64_t *)v14;
        v14 = (uint64_t **)operator new(0x30uLL);
        v14[4] = (uint64_t *)v11;
        v14[5] = 0;
        *v14 = 0;
        v14[1] = 0;
        v14[2] = v16;
        *v13 = (uint64_t *)v14;
        v17 = **(_QWORD **)(v5 + 168);
        v18 = (uint64_t *)v14;
        if (v17)
        {
          *(_QWORD *)(v5 + 168) = v17;
          v18 = *v13;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 176), v18);
        ++*(_QWORD *)(v5 + 184);
      }
      v19 = (uint64_t)v14[5];
      result = objc_msgSend(a4, "containsObject:", *(_QWORD *)(v19 + 64), v28);
      if ((_DWORD)result)
        v20 = v19;
      else
        v20 = v11;
      if (v20 == *(_QWORD *)&a2[5] && *(_QWORD *)&a2[4] == *((_QWORD *)v28 + 4))
      {
        v21 = a2[6].i32[0];
        v22 = *((_DWORD *)v28 + 12);
        if (v21 - v22 >= 0)
          v23 = v21 - v22;
        else
          v23 = v22 - v21;
        v24 = v23 == 1;
        v25 = ((*(_QWORD *)(v20 + 16) - *(_QWORD *)(v20 + 8)) >> 3) - 1;
        if (v21)
        {
          if (v21 != v25)
            goto LABEL_46;
        }
        else
        {
          v24 = v22 == v25 || v23 == 1;
          if (((*(_QWORD *)(v20 + 16) - *(_QWORD *)(v20 + 8)) >> 3) != 1)
          {
LABEL_46:
            if (!v24)
              return result;
            goto LABEL_27;
          }
        }
        if (v22)
          v26 = v24;
        else
          v26 = 1;
        if ((v26 & 1) == 0)
          return result;
      }
      else
      {
        result = GKCPolygonObstacle::intersectsLineFrom(v20, a2 + 8, v10);
        if ((result & 1) != 0)
          return result;
        result = GKCPolygonObstacle::intersectsPoint(v20, &a2[8]);
        if ((result & 1) != 0)
          return result;
        result = GKCPolygonObstacle::intersectsPoint(v20, v10);
        if ((result & 1) != 0)
          return result;
      }
LABEL_27:
      if (++v8 == *(unint64_t **)(v5 + 72))
        return (uint64_t)GKCGraphNode::addConnectionToNode((id *)v28, (id *)a2, 1);
    }
  }
  return result;
}

void GKCObstacleGraph::addObstacle(GKCObstacleGraph *this, GKCPolygonObstacle *a2)
{
  GKCObstacleGraph::addObstacle(this, a2, 1);
}

void GKCObstacleGraph::addObstacle(GKCObstacleGraph *this, GKCPolygonObstacle *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float32x2_t *v14;
  float32x2_t *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  float32x2_t **v21;
  uint64_t v22;
  unint64_t v23;
  float32x2_t *v24;
  float32x2_t *v25;
  uint64_t v27;
  float32x2_t **v29;
  uint64_t v30;
  unint64_t v31;
  float32x2_t *v32;
  float32x2_t *v33;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  GKCPolygonObstacle *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  GKCPolygonObstacle **v57;
  char *v58;
  char *v59;
  id WeakRetained;
  void *v61;
  id *v62;
  void *v63;
  GKCGraphNode *v64;
  uint64_t *i;
  id *v66;
  void *v67;
  void *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  __int128 v85;
  GKCPolygonObstacle *v86;
  GKCPolygonObstacle *v87;
  void *__p;
  id *v89;
  uint64_t v90;

  __p = 0;
  v89 = 0;
  v90 = 0;
  GKCObstacleGraph::extrudeObstacleAndGenerateGraphNodes((uint64_t)this, a2, &__p);
  v87 = a2;
  v6 = *(_QWORD *)(objc_msgSend(*(id *)__p, "cGraphNode2D") + 40);
  if (a3)
  {
    v7 = *((_QWORD *)this + 1);
    v8 = *((_QWORD *)this + 2);
    if (v8 != v7)
    {
      v9 = 0;
      v10 = 1;
      do
      {
        v11 = v9 + 1;
        v12 = (v8 - v7) >> 3;
        if (v12 > v9 + 1)
        {
          v13 = v10;
          do
          {
            v14 = *(float32x2_t **)(v7 + 8 * v9);
            v15 = *(float32x2_t **)(v7 + 8 * v13);
            if (GKCPolygonObstacle::intersectsLineFrom(v6, v14 + 8, v15 + 8)
              || GKCPolygonObstacle::intersectsPoint(v6, &v14[8])
              || GKCPolygonObstacle::intersectsPoint(v6, &v15[8]))
            {
              v16 = (char *)*((_QWORD *)this + 15);
              v17 = (char *)*((_QWORD *)this + 16);
              if (v17 == v16)
                goto LABEL_28;
              v18 = (v17 - v16) >> 4;
              v19 = v18 <= 1 ? 1 : (v17 - v16) >> 4;
              if (*(float32x2_t **)v16 != v14 || *((_QWORD *)v16 + 1) != (_QWORD)v15)
              {
                v21 = (float32x2_t **)(v16 + 24);
                v22 = 1;
                do
                {
                  v23 = v22;
                  if (v19 == v22)
                    break;
                  v24 = *(v21 - 1);
                  v25 = *v21;
                  v21 += 2;
                  ++v22;
                }
                while (v24 != v14 || v25 != v15);
                if (v18 <= v23)
                {
LABEL_28:
                  GKCGraphNode::removeConnectionToNode((id *)v14, (id *)v15, 0);
                  v16 = (char *)*((_QWORD *)this + 15);
                  v17 = (char *)*((_QWORD *)this + 16);
                  v18 = (v17 - v16) >> 4;
                }
              }
              if (v17 == v16)
                goto LABEL_7;
              v27 = v18 <= 1 ? 1 : v18;
              if (*(float32x2_t **)v16 != v15 || *((_QWORD *)v16 + 1) != (_QWORD)v14)
              {
                v29 = (float32x2_t **)(v16 + 24);
                v30 = 1;
                do
                {
                  v31 = v30;
                  if (v27 == v30)
                    break;
                  v32 = *(v29 - 1);
                  v33 = *v29;
                  v29 += 2;
                  ++v30;
                }
                while (v32 != v15 || v33 != v14);
                if (v18 <= v31)
LABEL_7:
                  GKCGraphNode::removeConnectionToNode((id *)v15, (id *)v14, 0);
              }
            }
            ++v13;
            v7 = *((_QWORD *)this + 1);
            v8 = *((_QWORD *)this + 2);
            v12 = (v8 - v7) >> 3;
          }
          while (v12 > v13);
        }
        ++v10;
        ++v9;
      }
      while (v12 > v11);
    }
  }
  v36 = (uint64_t *)*((_QWORD *)this + 9);
  v35 = *((_QWORD *)this + 10);
  if ((unint64_t)v36 < v35)
  {
    *v36 = v6;
    v37 = (uint64_t)(v36 + 1);
    v38 = v87;
    goto LABEL_59;
  }
  v39 = (char *)*((_QWORD *)this + 8);
  v40 = ((char *)v36 - v39) >> 3;
  v41 = v40 + 1;
  v38 = v87;
  if ((unint64_t)(v40 + 1) >> 61)
    goto LABEL_103;
  v42 = v35 - (_QWORD)v39;
  if (v42 >> 2 > v41)
    v41 = v42 >> 2;
  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
    v43 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v43 = v41;
  if (v43)
  {
    if (v43 >> 61)
      goto LABEL_104;
    v44 = (char *)operator new(8 * v43);
    v45 = (uint64_t *)&v44[8 * v40];
    v46 = &v44[8 * v43];
    *v45 = v6;
    v37 = (uint64_t)(v45 + 1);
    v47 = (char *)((char *)v36 - v39);
    if (v36 == (uint64_t *)v39)
    {
LABEL_57:
      *((_QWORD *)this + 8) = v45;
      *((_QWORD *)this + 9) = v37;
      *((_QWORD *)this + 10) = v46;
      if (!v36)
        goto LABEL_59;
      goto LABEL_58;
    }
  }
  else
  {
    v44 = 0;
    v45 = (uint64_t *)(8 * v40);
    v46 = 0;
    *(_QWORD *)(8 * v40) = v6;
    v37 = 8 * v40 + 8;
    v47 = (char *)((char *)v36 - v39);
    if (v36 == (uint64_t *)v39)
      goto LABEL_57;
  }
  v69 = (unint64_t)(v47 - 8);
  if (v69 < 0x58)
    goto LABEL_107;
  if ((unint64_t)(v39 - v44) < 0x20)
    goto LABEL_107;
  v70 = (v69 >> 3) + 1;
  v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
  v72 = &v36[v71 / 0xFFFFFFFFFFFFFFF8];
  v45 = (uint64_t *)((char *)v45 - v71);
  v73 = &v44[8 * v40 - 16];
  v74 = v36 - 2;
  v75 = v70 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v76 = *(_OWORD *)v74;
    *((_OWORD *)v73 - 1) = *((_OWORD *)v74 - 1);
    *(_OWORD *)v73 = v76;
    v73 -= 32;
    v74 -= 4;
    v75 -= 4;
  }
  while (v75);
  v36 = v72;
  if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_107:
    do
    {
      v77 = *--v36;
      *--v45 = v77;
    }
    while (v36 != (uint64_t *)v39);
  }
  v36 = (uint64_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v45;
  *((_QWORD *)this + 9) = v37;
  *((_QWORD *)this + 10) = v46;
  if (v36)
LABEL_58:
    operator delete(v36);
LABEL_59:
  *((_QWORD *)this + 9) = v37;
  v49 = (char *)*((_QWORD *)this + 6);
  v48 = *((_QWORD *)this + 7);
  if ((unint64_t)v49 < v48)
  {
    *(_QWORD *)v49 = v38;
    v50 = (uint64_t)(v49 + 8);
    goto LABEL_72;
  }
  v51 = (char *)*((_QWORD *)this + 5);
  v52 = (v49 - v51) >> 3;
  v53 = v52 + 1;
  if ((unint64_t)(v52 + 1) >> 61)
LABEL_103:
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v54 = v48 - (_QWORD)v51;
  if (v54 >> 2 > v53)
    v53 = v54 >> 2;
  if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
    v55 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v55 = v53;
  if (v55)
  {
    if (!(v55 >> 61))
    {
      v56 = (char *)operator new(8 * v55);
      v57 = (GKCPolygonObstacle **)&v56[8 * v52];
      v58 = &v56[8 * v55];
      *v57 = v38;
      v50 = (uint64_t)(v57 + 1);
      v59 = (char *)(v49 - v51);
      if (v49 == v51)
        goto LABEL_70;
      goto LABEL_95;
    }
LABEL_104:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v56 = 0;
  v57 = (GKCPolygonObstacle **)(8 * v52);
  v58 = 0;
  *(_QWORD *)(8 * v52) = v38;
  v50 = 8 * v52 + 8;
  v59 = (char *)(v49 - v51);
  if (v49 == v51)
  {
LABEL_70:
    *((_QWORD *)this + 5) = v57;
    *((_QWORD *)this + 6) = v50;
    *((_QWORD *)this + 7) = v58;
    if (!v49)
      goto LABEL_72;
    goto LABEL_71;
  }
LABEL_95:
  v78 = (unint64_t)(v59 - 8);
  if (v78 < 0x58)
    goto LABEL_108;
  if ((unint64_t)(v51 - v56) < 0x20)
    goto LABEL_108;
  v79 = (v78 >> 3) + 1;
  v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
  v81 = &v49[-v80];
  v57 = (GKCPolygonObstacle **)((char *)v57 - v80);
  v82 = &v56[8 * v52 - 16];
  v83 = v49 - 16;
  v84 = v79 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v85 = *(_OWORD *)v83;
    *((_OWORD *)v82 - 1) = *((_OWORD *)v83 - 1);
    *(_OWORD *)v82 = v85;
    v82 -= 32;
    v83 -= 32;
    v84 -= 4;
  }
  while (v84);
  v49 = v81;
  if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_108:
    do
    {
      v86 = (GKCPolygonObstacle *)*((_QWORD *)v49 - 1);
      v49 -= 8;
      *--v57 = v86;
    }
    while (v49 != v51);
  }
  v49 = (char *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v57;
  *((_QWORD *)this + 6) = v50;
  *((_QWORD *)this + 7) = v58;
  if (v49)
LABEL_71:
    operator delete(v49);
LABEL_72:
  *((_QWORD *)this + 6) = v50;
  WeakRetained = objc_loadWeakRetained((id *)this + 24);
  objc_msgSend(WeakRetained, "mutObstacles");
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v61, "addObject:", *((_QWORD *)v38 + 8));

  v62 = (id *)__p;
  if (__p == v89)
  {
    v66 = (id *)__p;
    if (!__p)
      return;
    goto LABEL_80;
  }
  v63 = (void *)MEMORY[0x24BDBD1A8];
  do
  {
    v64 = (GKCGraphNode *)objc_msgSend(*v62, "cGraphNode2D");
    for (i = (uint64_t *)*((_QWORD *)this + 1); i != *((uint64_t **)this + 2); ++i)
      GKCObstacleGraph::connectNodeToNodeUsingObstacles((id *)this, v64, *i, v63);
    GKCGraph::addNode(this, (id *)v64);
    ++v62;
  }
  while (v62 != v89);
  v66 = (id *)__p;
  if (__p)
  {
LABEL_80:
    v67 = v66;
    if (v62 != v66)
    {
      do
      {
        v68 = *--v62;

      }
      while (v62 != v66);
      v67 = __p;
    }
    v89 = v66;
    operator delete(v67);
  }
}

void sub_227B7B8B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227B7B8D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227B7B8E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227B7B8FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227B7B910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227B7B924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227B7B938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227B7B94C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void GKCObstacleGraph::extrudeObstacleAndGenerateGraphNodes(uint64_t a1, GKCPolygonObstacle *a2, _QWORD *a3)
{
  void *v6;
  _QWORD *v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  float32x2_t v15;
  float32x2_t v16;
  id WeakRetained;
  id v18;
  float32x2_t v19;
  int32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  id v27;

  std::vector<NSObject * {__strong}>::reserve((uint64_t)a3, (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
  GKCObstacleGraph::extrudeObstacle((float32_t *)a1, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = v6;
  v7 = *(_QWORD **)(a1 + 96);
  if ((unint64_t)v7 >= *(_QWORD *)(a1 + 104))
  {
    v9 = std::vector<NSObject * {__strong}>::__push_back_slow_path<NSObject * const {__strong}&>((_QWORD *)(a1 + 88), &v27);
    v8 = v27;
  }
  else
  {
    v8 = v6;
    *v7 = v8;
    v9 = v7 + 1;
  }
  *(_QWORD *)(a1 + 96) = v9;
  v10 = objc_msgSend(v8, "cPolygonObstacle");
  v11 = *(_QWORD *)(v10 + 16) - *(_QWORD *)(v10 + 8);
  if ((int)(v11 >> 3) >= 1)
  {
    v12 = 0;
    v13 = (id *)(a1 + 192);
    v14 = (v11 >> 3);
    do
    {
      while (1)
      {
        v15 = *(float32x2_t *)(*((_QWORD *)a2 + 1) + 8 * v12);
        v16 = *(float32x2_t *)(*(_QWORD *)(v10 + 8) + 8 * v12);
        WeakRetained = objc_loadWeakRetained(v13);
        v18 = objc_alloc((Class)objc_msgSend(WeakRetained, "nodeClass"));
        v19 = vsub_f32(v16, v15);
        v20 = (int32x2_t)vmul_f32(v19, v19);
        v20.i32[0] = vadd_f32((float32x2_t)v20, (float32x2_t)vdup_lane_s32(v20, 1)).u32[0];
        v21 = vrsqrte_f32((float32x2_t)v20.u32[0]);
        v22 = vmul_f32(v21, v21);
        v23 = vrsqrts_f32((float32x2_t)v20.u32[0], v22);
        v22.i32[0] = 955908096;
        v26 = (id)objc_msgSend(v18, "initWithPoint:", COERCE_DOUBLE(vmla_n_f32(v16, v19, vmul_f32(v23, vmul_f32(v21, v22)).f32[0])));

        v24 = objc_msgSend(v26, "cGraphNode2D");
        *(_QWORD *)(v24 + 32) = a2;
        *(_QWORD *)(v24 + 40) = v10;
        *(_DWORD *)(v24 + 48) = v12;
        v25 = (_QWORD *)a3[1];
        if ((unint64_t)v25 >= a3[2])
          break;
        *v25 = v26;
        a3[1] = v25 + 1;

        if (v14 == ++v12)
          goto LABEL_9;
      }
      a3[1] = std::vector<NSObject * {__strong}>::__push_back_slow_path<NSObject * const {__strong}&>(a3, &v26);

      ++v12;
    }
    while (v14 != v12);
  }
LABEL_9:

}

void sub_227B7BB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_227B7BB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_227B7BB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_227B7BB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL GKCObstacleGraph::isConnectedLockedFromNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD **)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 128) - (_QWORD)v3;
  if (!v4)
    return 0;
  v5 = v4 >> 4;
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = v5;
  if (*v3 == a2 && v3[1] == a3)
    return 1;
  v8 = v3 + 3;
  v9 = 1;
  do
  {
    v10 = v9;
    if (v6 == v9)
      break;
    v11 = *(v8 - 1);
    v12 = *v8;
    v8 += 2;
    ++v9;
  }
  while (v11 != a2 || v12 != a3);
  return v5 > v10;
}

void GKCObstacleGraph::removeObstacle(GKCObstacleGraph *this, GKCPolygonObstacle *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  GKCPolygonObstacle **v13;
  GKCPolygonObstacle **v14;
  uint64_t *v15;
  int64_t v16;
  char *v17;
  char *v18;
  int64_t v19;
  id WeakRetained;
  void *v21;
  void **v22;
  void **v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v4 = *((_QWORD *)this + 2) - *((_QWORD *)this + 1);
  if ((int)(v4 >> 3) >= 1)
  {
    v5 = (v4 >> 3) + 1;
    do
    {
      if (*(GKCPolygonObstacle **)(*(_QWORD *)(*((_QWORD *)this + 1) + 8 * (v5 - 2)) + 32) == a2)
        (*(void (**)(GKCObstacleGraph *))(*(_QWORD *)this + 16))(this);
      --v5;
    }
    while (v5 > 1);
  }
  v7 = (uint64_t **)((char *)this + 152);
  v6 = (uint64_t *)*((_QWORD *)this + 19);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v9 = v6[4];
        if (v9 <= (unint64_t)a2)
          break;
        v6 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_13;
      }
      if (v9 >= (unint64_t)a2)
        break;
      v6 = v8[1];
      if (!v6)
      {
        v7 = v8 + 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)((char *)this + 152);
LABEL_13:
    v10 = (uint64_t *)v8;
    v8 = (uint64_t **)operator new(0x30uLL);
    v8[4] = (uint64_t *)a2;
    v8[5] = 0;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v7 = (uint64_t *)v8;
    v11 = **((_QWORD **)this + 18);
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *((_QWORD *)this + 18) = v11;
      v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 19), v12);
    ++*((_QWORD *)this + 20);
  }
  v14 = (GKCPolygonObstacle **)*((_QWORD *)this + 5);
  v13 = (GKCPolygonObstacle **)*((_QWORD *)this + 6);
  if (v14 != v13)
  {
    while (*v14 != a2)
    {
      if (++v14 == v13)
      {
        v14 = (GKCPolygonObstacle **)*((_QWORD *)this + 6);
        break;
      }
    }
  }
  v15 = v8[5];
  v16 = (char *)v13 - (char *)(v14 + 1);
  if (v13 != v14 + 1)
    memmove(v14, v14 + 1, (char *)v13 - (char *)(v14 + 1));
  *((_QWORD *)this + 6) = (char *)v14 + v16;
  v18 = (char *)*((_QWORD *)this + 8);
  v17 = (char *)*((_QWORD *)this + 9);
  if (v18 != v17)
  {
    while (*(uint64_t **)v18 != v15)
    {
      v18 += 8;
      if (v18 == v17)
      {
        v18 = (char *)*((_QWORD *)this + 9);
        break;
      }
    }
  }
  v19 = v17 - (v18 + 8);
  if (v17 != v18 + 8)
    memmove(v18, v18 + 8, v17 - (v18 + 8));
  *((_QWORD *)this + 9) = &v18[v19];
  WeakRetained = objc_loadWeakRetained((id *)this + 24);
  objc_msgSend(WeakRetained, "mutObstacles");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "removeObject:", *((_QWORD *)a2 + 8));

  v22 = (void **)*((_QWORD *)this + 11);
  v23 = (void **)*((_QWORD *)this + 12);
  if (v22 != v23)
  {
    while (*v22 != (void *)v15[8])
    {
      if (++v22 == v23)
      {
        v22 = (void **)*((_QWORD *)this + 12);
        break;
      }
    }
  }
  if (v22 == v23)
    GKCObstacleGraph::removeObstacle();
  v24 = *v22;
  *v22 = 0;
  v25 = *(v23 - 1);
  *(v23 - 1) = 0;
  v26 = *v22;
  *v22 = v25;

  v27 = *(v23 - 1);
  *(v23 - 1) = v24;

  v28 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v28 - 8;
  v29 = *((_QWORD *)this + 1);
  v30 = *((_QWORD *)this + 2);
  if (v30 != v29)
  {
    v31 = 0;
    v32 = 1;
    v33 = (void *)MEMORY[0x24BDBD1A8];
    do
    {
      v34 = v31 + 1;
      v35 = (v30 - v29) >> 3;
      if (v35 > v31 + 1)
      {
        v36 = v32;
        do
        {
          GKCObstacleGraph::connectNodeToNodeUsingObstacles((id *)this, *(GKCGraphNode **)(v29 + 8 * v31), *(_QWORD *)(v29 + 8 * v36++), v33);
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v35 = (v30 - v29) >> 3;
        }
        while (v35 > v36);
      }
      ++v32;
      ++v31;
    }
    while (v35 > v34);
  }
}

void sub_227B7BE90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B7BEA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id *GKCObstacleGraph::restoreObstacleNodeConnections(id *this)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = this[1];
  v2 = this[2];
  if (v2 != v1)
  {
    v3 = (uint64_t)this;
    v4 = 0;
    v5 = 1;
    v6 = (void *)MEMORY[0x24BDBD1A8];
    do
    {
      v7 = v4 + 1;
      v8 = (v2 - v1) >> 3;
      if (v8 > v4 + 1)
      {
        v9 = v5;
        do
        {
          this = GKCObstacleGraph::connectNodeToNodeUsingObstacles((id *)v3, *(GKCGraphNode **)&v1[8 * v4], *(_QWORD *)&v1[8 * v9++], v6);
          v1 = *(_BYTE **)(v3 + 8);
          v2 = *(_BYTE **)(v3 + 16);
          v8 = (v2 - v1) >> 3;
        }
        while (v8 > v9);
      }
      ++v5;
      ++v4;
    }
    while (v8 > v7);
  }
  return this;
}

void GKCObstacleGraph::removeAllObstacles(GKCObstacleGraph *this)
{
  unint64_t v1;
  unint64_t v3;

  v1 = *((_QWORD *)this + 6) - *((_QWORD *)this + 5);
  if ((int)(v1 >> 3) >= 1)
  {
    v3 = (v1 >> 3) + 1;
    do
      GKCObstacleGraph::removeObstacle(this, *(GKCPolygonObstacle **)(*((_QWORD *)this + 5) + 8 * (v3-- - 2)));
    while (v3 > 1);
  }
}

id GKCObstacleGraph::nodesForObstacle(GKCObstacleGraph *this, GKCPolygonObstacle *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id WeakRetained;

  objc_msgSend(MEMORY[0x24BDBCEB8], "array");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  while (v6 != v5)
  {
    if (*(GKCPolygonObstacle **)(*(_QWORD *)v6 + 32) == a2)
    {
      WeakRetained = objc_loadWeakRetained((id *)(*(_QWORD *)v6 + 72));
      objc_msgSend(v4, "addObject:", WeakRetained);

      v5 = *((_QWORD *)this + 2);
    }
    v6 += 8;
  }
  return v4;
}

void sub_227B7C040(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id GKCObstacleGraph::extrudeObstacle(float32_t *this, GKCPolygonObstacle *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;

  GKCPolygonObstacle::extrudeObstacle(a2, a2, this[28]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "cPolygonObstacle");
  v7 = (uint64_t **)(this + 38);
  v6 = (uint64_t *)*((_QWORD *)this + 19);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v9 = v6[4];
        if (v9 <= (unint64_t)a2)
          break;
        v6 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= (unint64_t)a2)
        break;
      v6 = v8[1];
      if (!v6)
      {
        v7 = v8 + 1;
        goto LABEL_8;
      }
    }
    v10 = (uint64_t *)v8;
  }
  else
  {
    v8 = (uint64_t **)(this + 38);
LABEL_8:
    v10 = (uint64_t *)operator new(0x30uLL);
    v10[4] = (uint64_t)a2;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v7 = v10;
    v11 = **((_QWORD **)this + 18);
    v12 = v10;
    if (v11)
    {
      *((_QWORD *)this + 18) = v11;
      v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 19), v12);
    ++*((_QWORD *)this + 20);
  }
  v10[5] = v5;
  v13 = objc_msgSend(v4, "cPolygonObstacle");
  v14 = v13;
  v16 = (uint64_t **)(this + 44);
  v15 = (uint64_t *)*((_QWORD *)this + 22);
  if (v15)
  {
    while (1)
    {
      while (1)
      {
        v17 = (uint64_t **)v15;
        v18 = v15[4];
        if (v13 >= v18)
          break;
        v15 = *v17;
        v16 = v17;
        if (!*v17)
          goto LABEL_19;
      }
      if (v18 >= v13)
        break;
      v15 = v17[1];
      if (!v15)
      {
        v16 = v17 + 1;
        goto LABEL_19;
      }
    }
    v19 = (uint64_t *)v17;
  }
  else
  {
    v17 = (uint64_t **)(this + 44);
LABEL_19:
    v19 = (uint64_t *)operator new(0x30uLL);
    v19[4] = v14;
    v19[5] = 0;
    *v19 = 0;
    v19[1] = 0;
    v19[2] = (uint64_t)v17;
    *v16 = v19;
    v20 = **((_QWORD **)this + 21);
    v21 = v19;
    if (v20)
    {
      *((_QWORD *)this + 21) = v20;
      v21 = *v16;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 22), v21);
    ++*((_QWORD *)this + 23);
  }
  v19[5] = (uint64_t)a2;
  return v4;
}

void sub_227B7C1E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B7C1F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void GKCObstacleGraph::lockConnectionFromNode(GKCObstacleGraph *this, GKCGraphNode2D *a2, GKCGraphNode2D *a3)
{
  char *v6;
  char **v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;

  v8 = (char *)*((_QWORD *)this + 15);
  v6 = (char *)*((_QWORD *)this + 16);
  v7 = (char **)((char *)this + 120);
  v9 = (v6 - v8) >> 4;
  if (v6 == v8)
  {
LABEL_11:
    v13 = *((_QWORD *)this + 17);
    if ((unint64_t)v6 < v13)
    {
      *(_QWORD *)v6 = a2;
      *((_QWORD *)v6 + 1) = a3;
      v14 = (uint64_t)(v6 + 16);
LABEL_28:
      *((_QWORD *)this + 16) = v14;
      return;
    }
    v15 = v9 + 1;
    if ((v9 + 1) >> 60)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v16 = v13 - (_QWORD)v8;
    if (v16 >> 3 > v15)
      v15 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = (char *)operator new(16 * v17);
      v19 = &v18[16 * v9];
      v20 = &v18[16 * v17];
      *(_QWORD *)v19 = a2;
      *((_QWORD *)v19 + 1) = a3;
      v14 = (uint64_t)(v19 + 16);
      if (v6 == v8)
        goto LABEL_26;
    }
    else
    {
      v19 = (char *)(16 * v9);
      v20 = 0;
      *(_QWORD *)v19 = a2;
      *((_QWORD *)v19 + 1) = a3;
      v14 = 16 * v9 + 16;
      if (v6 == v8)
      {
LABEL_26:
        *((_QWORD *)this + 15) = v19;
        *((_QWORD *)this + 16) = v14;
        *((_QWORD *)this + 17) = v20;
        if (v6)
          operator delete(v6);
        goto LABEL_28;
      }
    }
    do
    {
      *((_OWORD *)v19 - 1) = *((_OWORD *)v6 - 1);
      v19 -= 16;
      v6 -= 16;
    }
    while (v6 != v8);
    v6 = *v7;
    goto LABEL_26;
  }
  if (v9 <= 1)
    v10 = 1;
  else
    v10 = (v6 - v8) >> 4;
  v11 = v8 + 8;
  while ((GKCGraphNode2D *)*(v11 - 1) != a2 || *v11 != (_QWORD)a3)
  {
    v11 += 2;
    if (!--v10)
      goto LABEL_11;
  }
}

uint64_t GKCObstacleGraph::unlockConnectionFromNode(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD *)(result + 120);
  v3 = *(_QWORD *)(result + 128);
  if (v3 != v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (*(_QWORD *)(v4 + v5) == a2 && *(_QWORD *)(v4 + v5 + 8) == a3)
      {
        *(_OWORD *)(v4 + v5) = *(_OWORD *)(v3 - 16);
        v4 = *(_QWORD *)(result + 120);
        v3 = *(_QWORD *)(result + 128) - 16;
        *(_QWORD *)(result + 128) = v3;
      }
      ++v6;
      v5 += 16;
    }
    while (v6 < (v3 - v4) >> 4);
  }
  return result;
}

void std::vector<GKCGridGraphNode *>::__append(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

void sub_227B7C688(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B7C8B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B7C9BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B7CEBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_227B7CF54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B7CF6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B7CFA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B7CFBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B7CFD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B7D124(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B7D13C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B7D14C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_227B7D178(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B7D24C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B7D260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B7D270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B7D370(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x22E2A50A0](v2, 0x20C40A4A59CD2);

  _Unwind_Resume(a1);
}

void sub_227B7D398(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_227B7D448(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_227B7D464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B7D7F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v6;

  _Unwind_Resume(a1);
}

void GKCDecisionTree::decode(GKCDecisionTree *this, NSArray *a2)
{
  uint64_t v2;
  uint64_t i;
  _OWORD *v4;
  void *v5;
  void *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  _BOOL4 v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  GKRandomDistribution *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t **v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  BOOL v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  GKRandomDistribution *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  GKCDecisionNode *var0;
  uint64_t *v52;
  uint64_t **v53;
  uint64_t **v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  __int128 v64;
  NSArray *obj;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  _BYTE v77[128];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v75 = 0;
  v76 = 0;
  v74 = &v75;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  obj = a2;
  v2 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v70, v77, 16);
  if (v2)
  {
    v67 = *(_QWORD *)v71;
    v64 = xmmword_227BC0080;
    do
    {
      v68 = v2;
      for (i = 0; i != v68; ++i)
      {
        if (*(_QWORD *)v71 != v67)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * i);
        objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("branch"), v64);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = v6 == 0;

        if (!v7)
        {
          v8 = operator new();
          *(_OWORD *)(v8 + 48) = 0u;
          *(_OWORD *)v8 = 0u;
          *(_OWORD *)(v8 + 16) = 0u;
          *(_OWORD *)(v8 + 64) = 0u;
          *(_QWORD *)(v8 + 80) = 0;
          *(_OWORD *)(v8 + 32) = v64;
          objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("attribute"));
          v9 = objc_claimAutoreleasedReturnValue();
          v10 = *(void **)(v8 + 48);
          *(_QWORD *)(v8 + 48) = v9;

          objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("randomDistribution"));
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = v11 == 0;

          if (!v12)
          {
            objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("randomDistribution"));
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "objectAtIndexedSubscript:", 0);
            v14 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("randomDistribution"));
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "objectAtIndexedSubscript:", 1);
            v16 = (void *)objc_claimAutoreleasedReturnValue();

            objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("randomDistribution"));
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v17, "objectAtIndexedSubscript:", 2);
            v18 = objc_claimAutoreleasedReturnValue();

            v19 = -[GKRandomDistribution initWithRandomSource:lowestValue:highestValue:]([GKRandomDistribution alloc], "initWithRandomSource:lowestValue:highestValue:", v18, objc_msgSend(v14, "integerValue"), objc_msgSend(v16, "integerValue"));
            v20 = *(void **)(v8 + 64);
            *(_QWORD *)(v8 + 64) = v19;

            v21 = *(void **)(v8 + 72);
            *(_QWORD *)(v8 + 72) = v18;

          }
          objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("branchValue"));
          v22 = objc_claimAutoreleasedReturnValue();
          v23 = *(void **)(v8 + 56);
          *(_QWORD *)(v8 + 56) = v22;

          objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("depth"));
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v25 = objc_msgSend(v24, "integerValue");

          v26 = v75;
          v27 = &v75;
          v28 = &v75;
          if (v75)
          {
            v29 = v75;
            while (1)
            {
              while (1)
              {
                v28 = (uint64_t **)v29;
                v30 = v29[4];
                if (v25 >= v30)
                  break;
                v29 = *v28;
                v27 = v28;
                if (!*v28)
                  goto LABEL_19;
              }
              if (v30 >= v25)
                break;
              v29 = v28[1];
              if (!v29)
              {
                v27 = v28 + 1;
                goto LABEL_19;
              }
            }
            v28[5] = (uint64_t *)v8;
            v33 = v25 - 1;
            v34 = &v75;
            v35 = &v75;
            if (v26)
              goto LABEL_38;
LABEL_42:
            v59 = (uint64_t *)operator new(0x30uLL);
            v59[4] = v33;
            v59[5] = 0;
            *v59 = 0;
            v59[1] = 0;
            v59[2] = (uint64_t)v35;
            *v34 = v59;
            v60 = v59;
            if (*v74)
            {
              v74 = (uint64_t **)*v74;
              v60 = *v34;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v75, v60);
            ++v76;
          }
          else
          {
LABEL_19:
            v31 = (uint64_t *)operator new(0x30uLL);
            v31[4] = v25;
            v31[5] = 0;
            *v31 = 0;
            v31[1] = 0;
            v31[2] = (uint64_t)v28;
            *v27 = v31;
            v32 = v31;
            if (*v74)
            {
              v74 = (uint64_t **)*v74;
              v32 = *v27;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v75, v32);
            v26 = v75;
            ++v76;
            v31[5] = v8;
            v33 = v25 - 1;
            v34 = &v75;
            v35 = &v75;
            if (!v26)
              goto LABEL_42;
            while (1)
            {
LABEL_38:
              while (1)
              {
                v35 = (uint64_t **)v26;
                v58 = v26[4];
                if (v25 > v58)
                  break;
                v26 = *v35;
                v34 = v35;
                if (!*v35)
                  goto LABEL_42;
              }
              if (v58 >= v33)
                break;
              v26 = v35[1];
              if (!v26)
              {
                v34 = v35 + 1;
                goto LABEL_42;
              }
            }
            v59 = (uint64_t *)v35;
          }
          v61 = v59[5];
          objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("branch"));
          v62 = objc_claimAutoreleasedReturnValue();
          *(_QWORD *)&v69 = v62;
          *((_QWORD *)&v69 + 1) = v8;
          v63 = *(uint64_t **)(v61 + 8);
          if ((unint64_t)v63 < *(_QWORD *)(v61 + 16))
          {
            *(_QWORD *)&v69 = 0;
            v4 = v63 + 2;
            *v63 = v62;
            v63[1] = v8;
          }
          else
          {
            v4 = std::vector<std::pair<objc_object * {__strong},GKCDecisionNode *>>::__push_back_slow_path<std::pair<objc_object * {__strong},GKCDecisionNode *>>((void **)v61, &v69);
          }
          *(_QWORD *)(v61 + 8) = v4;

          continue;
        }
        -[NSArray firstObject](obj, "firstObject");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("attribute"));
        v37 = objc_claimAutoreleasedReturnValue();
        v38 = (void *)*((_QWORD *)this->var0 + 6);
        *((_QWORD *)this->var0 + 6) = v37;

        objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("randomDistribution"));
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        v40 = v39 == 0;

        if (!v40)
        {
          objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("randomDistribution"));
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v41, "objectAtIndexedSubscript:", 0);
          v42 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("randomDistribution"));
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v43, "objectAtIndexedSubscript:", 1);
          v44 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("randomDistribution"));
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v45, "objectAtIndexedSubscript:", 2);
          v46 = (void *)objc_claimAutoreleasedReturnValue();

          v47 = -[GKRandomDistribution initWithRandomSource:lowestValue:highestValue:]([GKRandomDistribution alloc], "initWithRandomSource:lowestValue:highestValue:", v46, objc_msgSend(v42, "integerValue"), objc_msgSend(v44, "integerValue"));
          v48 = (void *)*((_QWORD *)this->var0 + 8);
          *((_QWORD *)this->var0 + 8) = v47;

        }
        objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("depth"));
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        v50 = objc_msgSend(v49, "integerValue");

        var0 = this->var0;
        v52 = v75;
        v53 = &v75;
        v54 = &v75;
        if (v75)
        {
          while (1)
          {
            while (1)
            {
              v54 = (uint64_t **)v52;
              v55 = v52[4];
              if (v50 >= v55)
                break;
              v52 = *v54;
              v53 = v54;
              if (!*v54)
                goto LABEL_32;
            }
            if (v55 >= v50)
              break;
            v52 = v54[1];
            if (!v52)
            {
              v53 = v54 + 1;
              goto LABEL_32;
            }
          }
          v56 = (uint64_t *)v54;
        }
        else
        {
LABEL_32:
          v56 = (uint64_t *)operator new(0x30uLL);
          v56[4] = v50;
          v56[5] = 0;
          *v56 = 0;
          v56[1] = 0;
          v56[2] = (uint64_t)v54;
          *v53 = v56;
          v57 = v56;
          if (*v74)
          {
            v74 = (uint64_t **)*v74;
            v57 = *v53;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v75, v57);
          ++v76;
        }
        v56[5] = (uint64_t)var0;

      }
      v2 = -[NSArray countByEnumeratingWithState:objects:count:](obj, "countByEnumeratingWithState:objects:count:", &v70, v77, 16);
    }
    while (v2);
  }

  std::__tree<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::__map_value_compare<p2t::Triangle *,std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::less<p2t::Triangle *>,true>,std::allocator<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>>>::destroy((uint64_t)&v74, v75);
}

void sub_227B7DF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,_QWORD *a27)
{

  std::__tree<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::__map_value_compare<p2t::Triangle *,std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::less<p2t::Triangle *>,true>,std::allocator<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>>>::destroy((uint64_t)&a26, a27);
  _Unwind_Resume(a1);
}

NSArray *GKCDecisionTree::encodeWithCoder(GKCDecisionTree *this, GKCDecisionNode *a2, NSArray *a3, uint64_t a4, NSMutableDictionary *a5)
{
  NSArray *v9;
  NSMutableDictionary *v10;
  NSMutableDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  GKCDecisionNode *var0;
  void *v15;
  void *v16;
  NSMutableDictionary *v17;
  void *v18;
  id v19;
  uint64_t v20;
  GKCDecisionNode *v21;
  void *v22;
  void *v23;
  NSMutableDictionary *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  GKCDecisionNode *v29;
  NSArray *v30;
  uint64_t v31;
  NSMutableDictionary *v33;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x24BDAC8D0];
  v9 = a3;
  v10 = a5;
  v11 = v10;
  if (v9)
  {
    v33 = v10;
    v13 = *(_QWORD *)a2;
    v12 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2 == v12)
      goto LABEL_9;
  }
  else
  {
    var0 = this->var0;
    v15 = (void *)MEMORY[0x24BDBCED8];
    GKCDecisionNode::nodeData(this->var0, 0);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "dictionaryWithDictionary:", v16);
    v17 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", a4);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSMutableDictionary setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v18, CFSTR("depth"));

    v19 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", v19, CFSTR("children"));

    v34[0] = v17;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v34, 1);
    v9 = (NSArray *)objc_claimAutoreleasedReturnValue();
    v33 = v17;
    v13 = *(_QWORD *)var0;
    v12 = *((_QWORD *)var0 + 1);
    if (*(_QWORD *)var0 == v12)
      goto LABEL_9;
  }
  v20 = a4 + 1;
  do
  {
    v21 = *(GKCDecisionNode **)(v13 + 8);
    if (v21)
    {
      v22 = (void *)MEMORY[0x24BDBCED8];
      GKCDecisionNode::nodeData(v21, *(objc_object **)v13);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v22, "dictionaryWithDictionary:", v23);
      v24 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", v20);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSMutableDictionary setObject:forKeyedSubscript:](v24, "setObject:forKeyedSubscript:", v25, CFSTR("depth"));

      v26 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v24, "setObject:forKeyedSubscript:", v26, CFSTR("children"));

      -[NSMutableDictionary objectForKeyedSubscript:](v33, "objectForKeyedSubscript:", CFSTR("children"));
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", -[NSArray count](v9, "count"));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "addObject:", v28);

      v29 = *(GKCDecisionNode **)(v13 + 8);
      -[NSArray arrayByAddingObject:](v9, "arrayByAddingObject:", v24);
      v30 = (NSArray *)objc_claimAutoreleasedReturnValue();
      GKCDecisionTree::encodeWithCoder(this, v29, v30, v20, v24);
      v31 = objc_claimAutoreleasedReturnValue();

      v9 = (NSArray *)v31;
    }
    v13 += 16;
  }
  while (v13 != v12);
LABEL_9:

  return v9;
}

void sub_227B7E308(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B7E46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_227B7E48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B7E52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)GKDecisionTree;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_227B7E930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void GKCDecisionTree::cartTreeGrowth(GKCDecisionTree *this, NSArray *a2, NSArray *a3, GKCDecisionNode *a4, unint64_t a5, unint64_t a6)
{
  NSArray *v8;
  unint64_t v9;
  double v10;
  double v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  double v17;
  unint64_t i;
  void *v19;
  void *v20;
  void *v21;
  char isKindOfClass;
  uint64_t *v23;
  float v24;
  float v25;
  double v26;
  uint64_t v27;
  uint64_t *v28;
  id *v29;
  id *v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t *v33;
  id *v34;
  double v35;
  uint64_t v36;
  _QWORD ***v37;
  _QWORD *v38;
  _QWORD **v39;
  _QWORD **v40;
  _QWORD **v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _BYTE *v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  id *v58;
  id **v59;
  uint64_t v60;
  _QWORD **v61;
  unint64_t v62;
  double v63;
  _QWORD *v64;
  _QWORD **v65;
  uint64_t v66;
  uint64_t *v67;
  NSNumber *v68;
  id v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  BOOL v73;
  uint64_t *v74;
  unint64_t v75;
  id *v76;
  id *v77;
  uint64_t *v78;
  uint64_t **v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  unint64_t v87;
  void *v88;
  NSArray *v89;
  unint64_t v90;
  NSArray *v91;
  GKCDecisionTree *v92;
  id obj;
  uint64_t *v94;
  _QWORD *v95;
  _QWORD v96[2];
  _QWORD **v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104[2];
  NSNumber *v105;
  id v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  _QWORD *v111[3];

  v8 = a2;
  v91 = a3;
  v89 = v8;
  v9 = -[NSArray count](v8, "count");
  v10 = GKCDecisionTree::giniImpurity(this, v8);
  v11 = (double)v9;
  v87 = (unint64_t)(double)v9;
  *((_QWORD *)a4 + 5) = v87;
  if (v10 < 0.0)
    goto LABEL_146;
  if (v10 != 0.0)
  {
    v111[0] = 0;
    v111[1] = 0;
    v110 = (uint64_t *)v111;
    GKCDecisionTree::getAttributeCounts((uint64_t)this, v91, v8);
    v88 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 0;
    v92 = this;
    obj = 0;
    v17 = 1.0;
    for (i = -[NSArray count](v91, "count", &v101); ; i = -[NSArray count](v91, "count", v83))
    {
      if (i <= v16)
      {
        if (v17 > 0.0 && -[NSArray count](v91, "count") < 2
          || (*((_QWORD *)a4 + 4) <= a5 ? (v73 = v11 < (double)a6) : (v73 = 1), v73))
        {
          GKCDecisionTree::splitByAttribute(this, v89, -[NSArray count](v91, "count"), &v107);
          v74 = v107;
          if (v107 != (uint64_t *)&v108)
          {
            v75 = 0;
            do
            {
              if (v75 < objc_msgSend((id)v74[5], "count"))
              {
                objc_storeStrong((id *)a4 + 6, (id)v74[4]);
                v75 = objc_msgSend((id)v74[5], "count");
              }
              v76 = (id *)v74[1];
              if (v76)
              {
                do
                {
                  v77 = v76;
                  v76 = (id *)*v76;
                }
                while (v76);
              }
              else
              {
                do
                {
                  v77 = (id *)v74[2];
                  v31 = *v77 == v74;
                  v74 = (uint64_t *)v77;
                }
                while (!v31);
              }
              v74 = (uint64_t *)v77;
            }
            while (v77 != (id *)&v108);
          }
          v78 = v108;
          v79 = &v107;
        }
        else
        {
          objc_storeStrong((id *)a4 + 6, obj);
          v96[0] = 0;
          v96[1] = 0;
          v95 = v96;
          v80 = v110;
          if (v110 != (uint64_t *)v111)
          {
            do
            {
              std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_hint_unique_key_args<objc_object * {__strong},std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>(&v95, v96, (unint64_t *)v80 + 4, (id *)v80 + 4);
              v81 = (uint64_t *)v80[1];
              if (v81)
              {
                do
                {
                  v82 = v81;
                  v81 = (uint64_t *)*v81;
                }
                while (v81);
              }
              else
              {
                do
                {
                  v82 = (uint64_t *)v80[2];
                  v31 = *v82 == (_QWORD)v80;
                  v80 = v82;
                }
                while (!v31);
              }
              v80 = v82;
            }
            while (v82 != (uint64_t *)v111);
          }
          GKCDecisionTree::splitOnIndex(this, (uint64_t)obj, v91, &v95, (uint64_t)a4, (uint64_t)v88, a5, a6);
          v78 = (uint64_t *)v96[0];
          v79 = &v95;
        }
        std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)v79, v78);

        std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v110, v111[0]);
        goto LABEL_146;
      }
      objc_msgSend(v88, "objectAtIndexedSubscript:", v16);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v19, "integerValue") <= 2)
      {

      }
      else
      {
        -[NSArray firstObject](v89, "firstObject");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "objectAtIndexedSubscript:", v16);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();

        if ((isKindOfClass & 1) != 0)
        {
          GKCDecisionTree::multiwaySplitByAttributeValue(this, v89, v16, &v107);
          v104[0] = 0;
          v104[1] = 0;
          v103 = v104;
          v23 = v107;
          if (v107 != (uint64_t *)&v108)
          {
            do
            {
              std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_hint_unique_key_args<objc_object * {__strong},std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>(&v103, v104, (unint64_t *)v23 + 4, (id *)v23 + 4);
              v29 = (id *)v23[1];
              if (v29)
              {
                do
                {
                  v30 = v29;
                  v29 = (id *)*v29;
                }
                while (v29);
              }
              else
              {
                do
                {
                  v30 = (id *)v23[2];
                  v31 = *v30 == v23;
                  v23 = (uint64_t *)v30;
                }
                while (!v31);
              }
              v23 = (uint64_t *)v30;
            }
            while (v30 != (id *)&v108);
          }
          GKCDecisionTree::continuousGiniSplit(this, &v103, (void **)&v105);
          std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v103, v104[0]);
          objc_msgSend(v106, "floatValue");
          v25 = v24;
          GKCDecisionTree::splitOnValueOfAttribute(this, v89, v105, v16, &v100);
          std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v107, v108);
          v107 = v100;
          v108 = v101;
          v109 = v102;
          if (v102)
          {
            v101[2] = (uint64_t)&v108;
            v100 = v83;
            *v83 = 0;
            v83[1] = 0;
            v26 = v25;
            std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v100, 0);
            if (v17 > v26)
              goto LABEL_16;
LABEL_114:
            v26 = v17;
            v28 = v107;
            if (v107 == (uint64_t *)&v108)
              goto LABEL_115;
          }
          else
          {
            v107 = (uint64_t *)&v108;
            v26 = v25;
            std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v100, v101);
            if (v17 <= v26)
              goto LABEL_114;
LABEL_16:
            -[NSArray objectAtIndexedSubscript:](v91, "objectAtIndexedSubscript:", v16);
            v27 = objc_claimAutoreleasedReturnValue();

            obj = (id)v27;
            std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__tree_node<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,void *> *,long>>(&v110, (id *)v107, (id *)&v108);
            v28 = v107;
            if (v107 == (uint64_t *)&v108)
            {
LABEL_115:
              v68 = v105;
              v105 = 0;

              v69 = v106;
              v106 = 0;

              std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v107, v108);
              v17 = v26;
              ++v16;
              continue;
            }
          }
          do
          {
            v70 = (uint64_t *)v28[1];
            v71 = v28;
            if (v70)
            {
              do
              {
                v72 = v70;
                v70 = (uint64_t *)*v70;
              }
              while (v70);
            }
            else
            {
              do
              {
                v72 = (uint64_t *)v71[2];
                v31 = *v72 == (_QWORD)v71;
                v71 = v72;
              }
              while (!v31);
            }
            if (v107 == v28)
              v107 = v72;
            --v109;
            std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v108, v28);

            operator delete(v28);
            v28 = v72;
          }
          while (v72 != (uint64_t *)&v108);
          goto LABEL_115;
        }
      }
      v90 = v16;
      GKCDecisionTree::binarySplitByAttributeValue(this, v89, v16, (char **)&v107);
      v32 = v107;
      v33 = v107;
      v94 = v108;
      if (v107 == v108)
      {
        if (!v107)
          goto LABEL_8;
        goto LABEL_110;
      }
      while (2)
      {
        v98 = 0;
        v99 = 0;
        v97 = &v98;
        v34 = (id *)*v32;
        v35 = 0.0;
        if ((uint64_t *)*v32 == v32 + 1)
          goto LABEL_101;
        v36 = v99;
        do
        {
          v37 = (_QWORD ***)&v98;
          if (v97 == &v98)
            goto LABEL_40;
          v38 = v98;
          v39 = &v98;
          if (v98)
          {
            do
            {
              v37 = (_QWORD ***)v38;
              v38 = (_QWORD *)v38[1];
            }
            while (v38);
          }
          else
          {
            do
            {
              v37 = (_QWORD ***)v39[2];
              v31 = *v37 == v39;
              v39 = v37;
            }
            while (v31);
          }
          v40 = (_QWORD **)v34[4];
          if (v37[4] < v40)
          {
LABEL_40:
            if (v98)
              v41 = v37;
            else
              v41 = &v98;
            if (v98)
            {
              v42 = v37 + 1;
            }
            else
            {
              v37 = &v97;
              v42 = &v98;
            }
            if (v37[1])
              goto LABEL_80;
LABEL_55:
            v45 = operator new(0x30uLL);
            v45[4] = v34[4];
            v45[5] = v34[5];
            *v45 = 0;
            v45[1] = 0;
            v45[2] = v41;
            *v42 = v45;
            if (*v97)
            {
              v97 = (_QWORD **)*v97;
              v45 = (_QWORD *)*v42;
            }
            v46 = v98;
            v31 = v45 == v98;
            *((_BYTE *)v45 + 24) = v45 == v98;
            if (!v31)
            {
              do
              {
                v47 = v45[2];
                if (*(_BYTE *)(v47 + 24))
                  break;
                v48 = *(_QWORD **)(v47 + 16);
                v49 = *v48;
                if (*v48 == v47)
                {
                  v52 = v48[1];
                  if (!v52 || (v53 = *(unsigned __int8 *)(v52 + 24), v50 = (_BYTE *)(v52 + 24), v53))
                  {
                    if (*(_QWORD **)v47 == v45)
                    {
                      *(_BYTE *)(v47 + 24) = 1;
                      *((_BYTE *)v48 + 24) = 0;
                      v56 = *(_QWORD *)(v47 + 8);
                      *v48 = v56;
                      if (v56)
                        goto LABEL_72;
                    }
                    else
                    {
                      v54 = *(uint64_t **)(v47 + 8);
                      v55 = *v54;
                      *(_QWORD *)(v47 + 8) = *v54;
                      if (v55)
                      {
                        *(_QWORD *)(v55 + 16) = v47;
                        v48 = *(_QWORD **)(v47 + 16);
                      }
                      v54[2] = (uint64_t)v48;
                      *(_QWORD *)(*(_QWORD *)(v47 + 16) + 8 * (**(_QWORD **)(v47 + 16) != v47)) = v54;
                      *v54 = v47;
                      *(_QWORD *)(v47 + 16) = v54;
                      v48 = (_QWORD *)v54[2];
                      v47 = *v48;
                      *((_BYTE *)v54 + 24) = 1;
                      *((_BYTE *)v48 + 24) = 0;
                      v56 = *(_QWORD *)(v47 + 8);
                      *v48 = v56;
                      if (v56)
LABEL_72:
                        *(_QWORD *)(v56 + 16) = v48;
                    }
                    *(_QWORD *)(v47 + 16) = v48[2];
                    *(_QWORD *)(v48[2] + 8 * (*(_QWORD *)v48[2] != (_QWORD)v48)) = v47;
                    *(_QWORD *)(v47 + 8) = v48;
LABEL_78:
                    v48[2] = v47;
                    break;
                  }
                }
                else if (!v49 || (v51 = *(unsigned __int8 *)(v49 + 24), v50 = (_BYTE *)(v49 + 24), v51))
                {
                  if (*(_QWORD **)v47 == v45)
                  {
                    v60 = v45[1];
                    *(_QWORD *)v47 = v60;
                    if (v60)
                    {
                      *(_QWORD *)(v60 + 16) = v47;
                      v48 = *(_QWORD **)(v47 + 16);
                    }
                    v45[2] = v48;
                    *(_QWORD *)(*(_QWORD *)(v47 + 16) + 8 * (**(_QWORD **)(v47 + 16) != v47)) = v45;
                    v45[1] = v47;
                    *(_QWORD *)(v47 + 16) = v45;
                    v48 = (_QWORD *)v45[2];
                    *((_BYTE *)v45 + 24) = 1;
                    *((_BYTE *)v48 + 24) = 0;
                    v47 = v48[1];
                    v57 = *(_QWORD **)v47;
                    v48[1] = *(_QWORD *)v47;
                    if (v57)
LABEL_76:
                      v57[2] = v48;
                  }
                  else
                  {
                    *(_BYTE *)(v47 + 24) = 1;
                    *((_BYTE *)v48 + 24) = 0;
                    v47 = v48[1];
                    v57 = *(_QWORD **)v47;
                    v48[1] = *(_QWORD *)v47;
                    if (v57)
                      goto LABEL_76;
                  }
                  *(_QWORD *)(v47 + 16) = v48[2];
                  *(_QWORD *)(v48[2] + 8 * (*(_QWORD *)v48[2] != (_QWORD)v48)) = v47;
                  *(_QWORD *)v47 = v48;
                  goto LABEL_78;
                }
                *(_BYTE *)(v47 + 24) = 1;
                v45 = v48;
                *((_BYTE *)v48 + 24) = v48 == v46;
                *v50 = 1;
              }
              while (v48 != v46);
            }
            v99 = ++v36;
            goto LABEL_80;
          }
          v42 = &v98;
          v41 = &v98;
          if (!v98)
            goto LABEL_55;
          v43 = v98;
          while (1)
          {
            while (1)
            {
              v41 = (_QWORD **)v43;
              v44 = v43[4];
              if ((unint64_t)v40 >= v44)
                break;
              v43 = *v41;
              v42 = v41;
              if (!*v41)
                goto LABEL_55;
            }
            if (v44 >= (unint64_t)v40)
              break;
            v43 = v41[1];
            if (!v43)
            {
              v42 = v41 + 1;
              goto LABEL_55;
            }
          }
LABEL_80:
          v58 = (id *)v34[1];
          if (v58)
          {
            do
            {
              v59 = (id **)v58;
              v58 = (id *)*v58;
            }
            while (v58);
          }
          else
          {
            do
            {
              v59 = (id **)v34[2];
              v31 = *v59 == v34;
              v34 = (id *)v59;
            }
            while (!v31);
          }
          v34 = (id *)v59;
        }
        while (v59 != (id **)(v32 + 1));
        v61 = v97;
        this = v92;
        if (v97 != &v98)
        {
          v35 = 0.0;
          do
          {
            v62 = objc_msgSend(v61[5], "count");
            v63 = GKCDecisionTree::giniImpurity(v92, (NSArray *)v61[5]);
            v64 = v61[1];
            if (v64)
            {
              do
              {
                v65 = (_QWORD **)v64;
                v64 = (_QWORD *)*v64;
              }
              while (v64);
            }
            else
            {
              do
              {
                v65 = (_QWORD **)v61[2];
                v31 = *v65 == v61;
                v61 = v65;
              }
              while (!v31);
            }
            v35 = v35 + v63 * (double)v62 * (1.0 / (double)v87);
            v61 = v65;
          }
          while (v65 != &v98);
        }
LABEL_101:
        std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v97, v98);
        if (v35 < v17)
        {
          -[NSArray objectAtIndexedSubscript:](v91, "objectAtIndexedSubscript:", v90);
          v66 = objc_claimAutoreleasedReturnValue();

          obj = (id)v66;
          if (&v110 != (uint64_t **)v32)
            std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__tree_node<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,void *> *,long>>(&v110, (id *)*v32, (id *)v32 + 1);
          v17 = v35;
        }
        v32 += 3;
        if (v32 != v94)
          continue;
        break;
      }
      v67 = v107;
      v32 = v108;
      if (v107 == v108)
      {
        v33 = v108;
        if (!v108)
          goto LABEL_8;
      }
      else
      {
        do
        {
          std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)(v32 - 3), (_QWORD *)*(v32 - 2));
          v32 -= 3;
        }
        while (v32 != v67);
        v108 = v67;
        v33 = v107;
        v32 = v67;
        if (!v107)
          goto LABEL_8;
      }
LABEL_110:
      if (v32 != v33)
      {
        do
        {
          std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)(v32 - 3), (_QWORD *)*(v32 - 2));
          v32 -= 3;
        }
        while (v32 != v33);
        v32 = v107;
      }
      v108 = v33;
      operator delete(v32);
LABEL_8:
      v16 = v90 + 1;
    }
  }
  -[NSArray firstObject](v8, "firstObject");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "lastObject");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    objc_msgSend(v12, "lastObject");
    v14 = objc_claimAutoreleasedReturnValue();
    v15 = (void *)*((_QWORD *)a4 + 6);
    *((_QWORD *)a4 + 6) = v14;

  }
LABEL_146:

}

void sub_227B7F510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,char a24,_QWORD *a25)
{
  uint64_t v25;

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&a24, a25);

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v25 - 144, *(_QWORD **)(v25 - 136));
  _Unwind_Resume(a1);
}

void sub_227B7F7C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B7F7E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_227B7F8C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B7F8DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B7F8F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B7F97C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B7F98C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id GKCDecisionTree::findActionForAnswers(uint64_t **a1, void *a2)
{
  id v3;
  uint64_t *v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  id v11;
  void *v12;
  int v13;
  id v14;
  uint64_t v15;
  BOOL v16;
  id v17;

  v3 = a2;
  v4 = *a1;
  v5 = *a1 + 1;
  if (*v5 == **a1)
    goto LABEL_19;
  while (2)
  {
    v6 = (void *)v4[8];
    if (v6)
    {
      v7 = objc_msgSend(v6, "nextInt");
    }
    else
    {
      if (!v3)
        goto LABEL_19;
      v7 = 0;
      if (!objc_msgSend(v3, "count"))
        goto LABEL_19;
    }
    v8 = *v4;
    v9 = *v5;
    if (*v4 == *v5)
    {
LABEL_19:
      v17 = 0;
      goto LABEL_20;
    }
    while (1)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(*(id *)v8, "allowEvaluation");
        v11 = *(id *)v8;
        objc_msgSend(v3, "objectForKeyedSubscript:", v4[6]);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v13 = objc_msgSend(v11, "evaluateWithObject:", v12);
        goto LABEL_8;
      }
      v14 = *(id *)v8;
      if (v4[8])
        break;
      objc_msgSend(v3, "objectForKeyedSubscript:", v4[6]);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v14, "isEqual:", v12);
LABEL_8:
      v10 = v13;

      if (v10)
        goto LABEL_17;
LABEL_9:
      v8 += 16;
      if (v8 == v9)
        goto LABEL_19;
    }
    v15 = objc_msgSend(*(id *)v8, "integerValue");
    v16 = v7 <= v15;
    v7 -= v15;
    if (!v16)
      goto LABEL_9;
LABEL_17:
    v4 = *(uint64_t **)(v8 + 8);
    if (v4[1] != *v4)
    {
      v5 = v4 + 1;
      continue;
    }
    break;
  }
  v17 = (id)v4[6];
LABEL_20:

  return v17;
}

void sub_227B7FB18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B7FB28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B7FB3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B7FB50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B7FB60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B7FE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

__CFString *GKCDecisionTree::printTree(GKCDecisionTree *this, GKCDecisionNode *a2, NSString *a3, NSString *a4)
{
  NSString *v7;
  NSString *p_isa;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  __CFString *v12;
  GKCDecisionNode *v13;
  NSString *v14;
  NSString *v15;
  __CFString *v16;

  v7 = a3;
  p_isa = a4;
  if (a2)
  {
    if (-[NSString isEqualToString:](v7, "isEqualToString:", CFSTR("\t")))
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("\n%@(depth:%lu, ex:%lu)\n"), *((_QWORD *)a2 + 6), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
      v9 = objc_claimAutoreleasedReturnValue();

      p_isa = (NSString *)v9;
    }
    v11 = *(_QWORD **)a2;
    v10 = (_QWORD *)*((_QWORD *)a2 + 1);
    if (*(_QWORD **)a2 == v10)
    {
      v12 = (__CFString *)p_isa;
    }
    else
    {
      do
      {
        v13 = (GKCDecisionNode *)v11[1];
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@\t"), v7);
        v14 = (NSString *)objc_claimAutoreleasedReturnValue();
        if (v13)
        {
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@%@%@, %@(depth:%lu, ex:%lu)\n"), p_isa, v7, *v11, *(_QWORD *)(v11[1] + 48), *(_QWORD *)(v11[1] + 32), *(_QWORD *)(v11[1] + 40));
          v15 = (NSString *)objc_claimAutoreleasedReturnValue();
          GKCDecisionTree::printTree(this, v13, v14, v15);
          v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@%@%@\n"), p_isa, v7, *v11);
          v15 = (NSString *)objc_claimAutoreleasedReturnValue();
          v12 = &stru_24F04FAF0;
        }

        v11 += 2;
        p_isa = &v12->isa;
      }
      while (v11 != v10);
    }
    p_isa = v12;
    v16 = (__CFString *)p_isa;
  }
  else
  {
    v16 = &stru_24F04FAF0;
  }

  return v16;
}

void sub_227B8009C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B800B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B800C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_227B800E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B800FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id GKCDecisionNode::nodeData(GKCDecisionNode *this, objc_object *a2)
{
  objc_object *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = objc_alloc_init(MEMORY[0x24BDBCED8]);
  objc_msgSend(v4, "setObject:forKeyedSubscript:", *((_QWORD *)this + 6), CFSTR("attribute"));
  v5 = (void *)*((_QWORD *)this + 8);
  if (v5)
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(v5, "lowestValue"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", objc_msgSend(*((id *)this + 8), "highestValue", v6));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = *((_QWORD *)this + 9);
    v11[1] = v7;
    v11[2] = v8;
    objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v11, 3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v9, CFSTR("randomDistribution"));

  }
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v3, CFSTR("branch"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", *((_QWORD *)this + 7), CFSTR("branchValue"));

  return v4;
}

void sub_227B802B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void GKCDecisionNode::~GKCDecisionNode(GKCDecisionNode *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  char *v6;
  char *v7;
  GKCDecisionNode *v8;
  char *v9;
  char *v10;
  void *v11;
  char *v12;
  char *v13;
  char *v14;
  void *v15;

  v2 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;

  v3 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;

  v4 = (void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;

  v5 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;

  *((_QWORD *)this + 3) = 0;
  v6 = *(char **)this;
  v7 = (char *)*((_QWORD *)this + 1);
  if (*(char **)this != v7)
  {
    do
    {
      v8 = (GKCDecisionNode *)*((_QWORD *)v6 + 1);
      if (v8)
      {
        GKCDecisionNode::~GKCDecisionNode(v8);
        MEMORY[0x22E2A50A0]();
      }
      v6 += 16;
    }
    while (v6 != v7);
    v9 = *(char **)this;
    v10 = (char *)*((_QWORD *)this + 1);
    if (*(char **)this != v10)
    {
      while (v10 != v9)
      {
        v11 = (void *)*((_QWORD *)v10 - 2);
        v10 -= 16;

      }
      *((_QWORD *)this + 1) = v9;
    }
  }

  v12 = *(char **)this;
  if (*(_QWORD *)this)
  {
    v13 = (char *)*((_QWORD *)this + 1);
    v14 = *(char **)this;
    if (v13 != v12)
    {
      do
      {
        v15 = (void *)*((_QWORD *)v13 - 2);
        v13 -= 16;

      }
      while (v13 != v12);
      v14 = *(char **)this;
    }
    *((_QWORD *)this + 1) = v12;
    operator delete(v14);
  }
}

double GKCDecisionTree::giniImpurity(GKCDecisionTree *this, NSArray *a2)
{
  NSArray *v3;
  void *v4;
  unint64_t v5;
  double v6;
  _QWORD *v7;
  double v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD **v11;
  BOOL v12;
  _QWORD *v14;
  _QWORD *v15[2];

  v3 = a2;
  -[NSArray firstObject](v3, "firstObject");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  GKCDecisionTree::splitByAttribute(this, v3, objc_msgSend(v4, "count") - 1, &v14);

  v5 = -[NSArray count](v3, "count");
  v6 = 0.0;
  if (v5 && v15[1] != (_QWORD *)1)
  {
    v7 = v14;
    if (v14 == v15)
    {
      v6 = 1.0;
    }
    else
    {
      v6 = 1.0;
      v8 = 1.0 / (double)v5;
      do
      {
        v9 = objc_msgSend((id)v7[5], "count");
        v10 = (_QWORD *)v7[1];
        if (v10)
        {
          do
          {
            v11 = (_QWORD **)v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD **)v7[2];
            v12 = *v11 == v7;
            v7 = v11;
          }
          while (!v12);
        }
        v6 = v6 - (double)v9 * v8 * ((double)v9 * v8);
        v7 = v11;
      }
      while (v11 != v15);
    }
  }
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v14, v15[0]);

  return v6;
}

void sub_227B80578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  void *v11;

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&a10, a11);

  _Unwind_Resume(a1);
}

id GKCDecisionTree::getAttributeCounts(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t i;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v4 = a2;
  v5 = a3;
  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", objc_msgSend(v4, "count"));
  v7 = 0;
  v8 = MEMORY[0x24BDBD1C8];
  while (objc_msgSend(v4, "count") > v7)
  {
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCED8]), "initWithCapacity:", objc_msgSend(v5, "count"));
    for (i = 0; objc_msgSend(v5, "count") > i; ++i)
    {
      objc_msgSend(v5, "objectAtIndexedSubscript:", i);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "objectAtIndexedSubscript:", v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "objectForKeyedSubscript:", v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      if (!v13)
        objc_msgSend(v9, "setObject:forKeyedSubscript:", v8, v12);

    }
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", objc_msgSend(v9, "count"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "setObject:atIndexedSubscript:", v14, v7);

    ++v7;
  }

  return v6;
}

void sub_227B8073C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B80750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_227B80770(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B80788(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_227B807E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void GKCDecisionTree::multiwaySplitByAttributeValue(GKCDecisionTree *this@<X0>, NSArray *a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  NSArray *v6;
  uint64_t **v7;
  unint64_t i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t j;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t **v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  void *v27;
  NSArray *v28;
  void *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v6 = a2;
  a4[1] = 0;
  v7 = a4 + 1;
  a4[2] = 0;
  *a4 = (uint64_t *)(a4 + 1);
  v28 = v6;
  v29 = (void *)objc_opt_new();
  for (i = 0; -[NSArray count](v6, "count") > i; ++i)
  {
    -[NSArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", i);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "objectAtIndexedSubscript:", a3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v29, "objectForKey:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      objc_msgSend(v29, "objectForKey:", v10);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", i);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "addObject:", v13);
    }
    else
    {
      v14 = objc_alloc(MEMORY[0x24BDBCEB8]);
      -[NSArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", i);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = (void *)objc_msgSend(v14, "initWithObjects:", v12, 0, v28);
      objc_msgSend(v29, "setObject:forKey:", v13, v10);
    }

  }
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v15 = v29;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
  if (v16)
  {
    v30 = *(_QWORD *)v32;
    do
    {
      for (j = 0; j != v16; ++j)
      {
        if (*(_QWORD *)v32 != v30)
          objc_enumerationMutation(v15);
        v18 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * j);
        objc_msgSend(v15, "objectForKey:", v18);
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = *v7;
        v21 = a4 + 1;
        v22 = a4 + 1;
        if (*v7)
        {
          while (1)
          {
            while (1)
            {
              v22 = (uint64_t **)v20;
              v23 = v20[4];
              if ((unint64_t)v18 >= v23)
                break;
              v20 = *v22;
              v21 = v22;
              if (!*v22)
                goto LABEL_19;
            }
            if (v23 >= (unint64_t)v18)
              break;
            v20 = v22[1];
            if (!v20)
            {
              v21 = v22 + 1;
              goto LABEL_19;
            }
          }
          v24 = (uint64_t *)v22;
        }
        else
        {
LABEL_19:
          v24 = (uint64_t *)operator new(0x30uLL);
          v24[4] = (uint64_t)v18;
          v24[5] = 0;
          *v24 = 0;
          v24[1] = 0;
          v24[2] = (uint64_t)v22;
          *v21 = v24;
          v25 = (uint64_t *)**a4;
          v26 = v24;
          if (v25)
          {
            *a4 = v25;
            v26 = *v21;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a4[1], v26);
          a4[2] = (uint64_t *)((char *)a4[2] + 1);
        }
        v27 = (void *)v24[5];
        v24[5] = v19;

      }
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    }
    while (v16);
  }

}

void sub_227B80AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  uint64_t v12;

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v12, *(_QWORD **)(v12 + 8));
  _Unwind_Resume(a1);
}

void GKCDecisionTree::continuousGiniSplit(GKCDecisionTree *a1@<X0>, _QWORD *a2@<X1>, void **a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  NSArray *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t **v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t **v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  void *v38;
  float v39;
  double v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t *v50;
  uint64_t **v51;
  uint64_t **v52;
  unint64_t v53;
  void *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  _BYTE *v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t *v72;
  uint64_t **v73;
  uint64_t **v74;
  unint64_t v75;
  void *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  _BYTE *v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  _QWORD *v90;
  _QWORD **v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  void *v96;
  float v97;
  float v98;
  float v99;
  float v100;
  void *v101;
  float v102;
  double v103;
  _QWORD *v104;
  uint64_t v105;
  void *v106;
  uint64_t *v107;
  uint64_t **v108;
  uint64_t **v109;
  unint64_t v110;
  void *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  _BYTE *v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  void *v125;
  uint64_t v126;
  void *v127;
  void *v128;
  uint64_t *v129;
  uint64_t **v130;
  uint64_t **v131;
  unint64_t v132;
  void *v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  _BYTE *v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  _QWORD *v147;
  _QWORD **v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  void *v152;
  void *v153;
  float v154;
  float v155;
  float v156;
  float v157;
  void *v158;
  float v159;
  double v160;
  _QWORD *v161;
  uint64_t v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  uint64_t *v170;
  uint64_t **v171;
  uint64_t **v172;
  unint64_t v173;
  void *v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  _BYTE *v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  void *v188;
  uint64_t v189;
  void *v190;
  void *v191;
  uint64_t *v192;
  uint64_t **v193;
  uint64_t **v194;
  unint64_t v195;
  void *v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  _BYTE *v202;
  int v203;
  uint64_t v204;
  int v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  _QWORD *v210;
  _QWORD **v211;
  uint64_t v212;
  uint64_t v213;
  double v214;
  double v215;
  float v216;
  unint64_t v217;
  float v218;
  uint64_t *v219;
  uint64_t **v220;
  uint64_t **v221;
  unint64_t v222;
  void *v223;
  uint64_t *v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  _BYTE *v229;
  int v230;
  uint64_t v231;
  int v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  void *v237;
  float v238;
  uint64_t v239;
  float v240;
  unint64_t v241;
  float v242;
  uint64_t *v243;
  uint64_t **v244;
  uint64_t **v245;
  unint64_t v246;
  void *v247;
  uint64_t *v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  _BYTE *v253;
  int v254;
  uint64_t v255;
  int v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t *v260;
  void *v261;
  float v262;
  uint64_t v263;
  float v264;
  unint64_t v265;
  float v266;
  float v267;
  uint64_t *v268;
  uint64_t **v269;
  uint64_t **v270;
  unint64_t v271;
  void *v272;
  uint64_t *v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  _BYTE *v278;
  int v279;
  uint64_t v280;
  int v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  void *v286;
  float v287;
  float v288;
  uint64_t *v289;
  uint64_t **v290;
  uint64_t **v291;
  unint64_t v292;
  void *v293;
  uint64_t *v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  _BYTE *v299;
  int v300;
  uint64_t v301;
  int v302;
  uint64_t *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t *v306;
  void *v307;
  float v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  float v312;
  uint64_t *v313;
  uint64_t **v314;
  uint64_t **v315;
  unint64_t v316;
  void *v317;
  uint64_t *v318;
  uint64_t *v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  _BYTE *v323;
  int v324;
  uint64_t v325;
  int v326;
  uint64_t *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t *v330;
  void *v331;
  float v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t *v335;
  uint64_t **v336;
  uint64_t **v337;
  unint64_t v338;
  unint64_t v339;
  float v340;
  uint64_t *v341;
  uint64_t **v342;
  uint64_t **v343;
  unint64_t v344;
  void *v345;
  uint64_t *v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t v350;
  _BYTE *v351;
  int v352;
  uint64_t v353;
  int v354;
  uint64_t *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t *v358;
  void *v359;
  float v360;
  uint64_t v361;
  uint64_t *v362;
  unint64_t v363;
  unint64_t v364;
  float v365;
  uint64_t *v366;
  uint64_t **v367;
  uint64_t **v368;
  unint64_t v369;
  void *v370;
  uint64_t *v371;
  uint64_t *v372;
  uint64_t v373;
  uint64_t *v374;
  uint64_t v375;
  _BYTE *v376;
  int v377;
  uint64_t v378;
  int v379;
  uint64_t *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v383;
  void *v384;
  float v385;
  float v386;
  uint64_t *v387;
  uint64_t **v388;
  uint64_t **v389;
  unint64_t v390;
  void *v391;
  uint64_t *v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t *v395;
  uint64_t v396;
  _BYTE *v397;
  int v398;
  uint64_t v399;
  int v400;
  uint64_t *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t *v404;
  void *v405;
  float v406;
  uint64_t v407;
  uint64_t v408;
  double v409;
  uint64_t *v410;
  unint64_t v411;
  uint64_t *v412;
  uint64_t *v413;
  uint64_t **v414;
  uint64_t *v415;
  float v416;
  float v417;
  float v418;
  uint64_t *v419;
  uint64_t *v420;
  void *v421;
  uint64_t *v422;
  uint64_t **v423;
  void *v425;
  void *v426;
  unint64_t i;
  void *v428;
  NSArray *v429;
  void *v430;
  uint64_t **v431;
  uint64_t *v432;
  uint64_t v433;
  _QWORD *v434;
  _QWORD *v435;
  unint64_t v436;
  uint64_t **v437;
  uint64_t *v438;
  uint64_t v439;
  _QWORD *v440;
  _QWORD *v441[3];

  v441[0] = 0;
  v441[1] = 0;
  v440 = v441;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_hint_unique_key_args<objc_object * {__strong},std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>(&v440, v441, v5 + 4, (id *)v5 + 4);
      v13 = (_QWORD *)v5[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v5[2];
          v15 = *v14 == (_QWORD)v5;
          v5 = v14;
        }
        while (!v15);
      }
      v5 = v14;
    }
    while (v14 != v4);
  }
  GKCDecisionTree::sortByAttributeWithAction((uint64_t)a1, &v440);
  v6 = (NSArray *)objc_claimAutoreleasedReturnValue();
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v440, v441[0]);
  v438 = 0;
  v439 = 0;
  v437 = &v438;
  v429 = v6;
  -[NSArray firstObject](v6, "firstObject");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  GKCDecisionTree::splitByAttribute(a1, v6, objc_msgSend(v7, "count") - 1, &v434);

  v8 = objc_alloc(MEMORY[0x24BDBCEB8]);
  v430 = (void *)objc_msgSend(v8, "initWithCapacity:", v436);
  v432 = 0;
  v433 = 0;
  v431 = &v432;
  v9 = objc_alloc(MEMORY[0x24BDBCEB8]);
  v10 = objc_msgSend(v9, "initWithCapacity:", v436);
  v11 = v432;
  v12 = &v432;
LABEL_11:
  v16 = v12;
  if (v11)
  {
    while (1)
    {
      v12 = (uint64_t **)v11;
      v17 = v11[4];
      if (v17 > (unint64_t)CFSTR("<="))
      {
        v11 = *v12;
        goto LABEL_11;
      }
      if (v17 >= (unint64_t)CFSTR("<="))
        break;
      v11 = v12[1];
      if (!v11)
      {
        v16 = v12 + 1;
        goto LABEL_16;
      }
    }
    v18 = (uint64_t *)v12;
  }
  else
  {
LABEL_16:
    v18 = (uint64_t *)operator new(0x30uLL);
    v18[4] = (uint64_t)CFSTR("<=");
    v18[5] = 0;
    *v18 = 0;
    v18[1] = 0;
    v18[2] = (uint64_t)v12;
    *v16 = v18;
    v19 = v18;
    if (*v431)
    {
      v431 = (uint64_t **)*v431;
      v19 = *v16;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v432, v19);
    ++v433;
  }
  v20 = (void *)v18[5];
  v18[5] = v10;

  v21 = objc_alloc(MEMORY[0x24BDBCEB8]);
  v22 = objc_msgSend(v21, "initWithCapacity:", v436);
  v23 = v432;
  v24 = &v432;
LABEL_22:
  v25 = v24;
  if (v23)
  {
    while (1)
    {
      v24 = (uint64_t **)v23;
      v26 = v23[4];
      if (v26 > (unint64_t)CFSTR(">"))
      {
        v23 = *v24;
        goto LABEL_22;
      }
      if (v26 >= (unint64_t)CFSTR(">"))
        break;
      v23 = v24[1];
      if (!v23)
      {
        v25 = v24 + 1;
        goto LABEL_27;
      }
    }
    v27 = (uint64_t *)v24;
  }
  else
  {
LABEL_27:
    v27 = (uint64_t *)operator new(0x30uLL);
    v27[4] = (uint64_t)CFSTR(">");
    v27[5] = 0;
    *v27 = 0;
    v27[1] = 0;
    v27[2] = (uint64_t)v24;
    *v25 = v27;
    v28 = v27;
    if (*v431)
    {
      v431 = (uint64_t **)*v431;
      v28 = *v25;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v432, v28);
    ++v433;
  }
  v29 = (void *)v27[5];
  v27[5] = v22;

  for (i = 0; -[NSArray count](v6, "count") >= i; ++i)
  {
    if (i)
    {
      if (-[NSArray count](v6, "count") == i)
      {
        -[NSArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", i - 2);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "firstObject");
        v426 = (void *)objc_claimAutoreleasedReturnValue();

        -[NSArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", i - 1);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "firstObject");
        v33 = (void *)objc_claimAutoreleasedReturnValue();

        v425 = v33;
        objc_msgSend(v33, "floatValue");
        v35 = v34;
        objc_msgSend(v426, "floatValue");
        v37 = v36;
        v38 = (void *)MEMORY[0x24BDD16E0];
        objc_msgSend(v33, "floatValue");
        *(float *)&v40 = v39 + (float)((float)(v35 - v37) * 0.5);
        objc_msgSend(v38, "numberWithFloat:", v40);
        v428 = (void *)objc_claimAutoreleasedReturnValue();
        v41 = v434;
        if (v434 != &v435)
        {
          v42 = 0;
          do
          {
            v43 = (void *)v41[4];
            -[NSArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", i - 1);
            v44 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v44, "lastObject");
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(v43) = objc_msgSend(v43, "isEqual:", v45);

            if ((_DWORD)v43)
            {
              v46 = (void *)MEMORY[0x24BDD16E0];
              objc_msgSend(v430, "objectAtIndexedSubscript:", v42);
              v47 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v46, "numberWithInteger:", objc_msgSend(v47, "integerValue") + 1);
              v48 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v430, "setObject:atIndexedSubscript:", v48, v42);

            }
            else
            {
              objc_msgSend(v430, "objectAtIndexedSubscript:", v42);
              v47 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v430, "setObject:atIndexedSubscript:", v47, v42);
            }

            objc_msgSend(v430, "objectAtIndexedSubscript:", v42);
            v49 = (void *)objc_claimAutoreleasedReturnValue();
            v50 = v432;
            v51 = &v432;
LABEL_45:
            v52 = v51;
            if (v50)
            {
              while (1)
              {
                v51 = (uint64_t **)v50;
                v53 = v50[4];
                if (v53 > (unint64_t)CFSTR("<="))
                {
                  v50 = *v51;
                  goto LABEL_45;
                }
                if (v53 >= (unint64_t)CFSTR("<="))
                  break;
                v50 = v51[1];
                if (!v50)
                {
                  v52 = v51 + 1;
                  goto LABEL_50;
                }
              }
              v54 = v51;
            }
            else
            {
LABEL_50:
              v54 = operator new(0x30uLL);
              *((_QWORD *)v54 + 4) = CFSTR("<=");
              *((_QWORD *)v54 + 5) = 0;
              *(_QWORD *)v54 = 0;
              *((_QWORD *)v54 + 1) = 0;
              *((_QWORD *)v54 + 2) = v51;
              *v52 = (uint64_t *)v54;
              v55 = (uint64_t *)v54;
              if (*v431)
              {
                v431 = (uint64_t **)*v431;
                v55 = *v52;
              }
              v56 = v432;
              v15 = v55 == v432;
              *((_BYTE *)v55 + 24) = v55 == v432;
              if (!v15)
              {
                do
                {
                  v57 = v55[2];
                  if (*(_BYTE *)(v57 + 24))
                    break;
                  v58 = *(uint64_t **)(v57 + 16);
                  v59 = *v58;
                  if (*v58 == v57)
                  {
                    v62 = v58[1];
                    if (!v62 || (v63 = *(unsigned __int8 *)(v62 + 24), v60 = (_BYTE *)(v62 + 24), v63))
                    {
                      if (*(uint64_t **)v57 == v55)
                      {
                        *(_BYTE *)(v57 + 24) = 1;
                        *((_BYTE *)v58 + 24) = 0;
                        v66 = *(_QWORD *)(v57 + 8);
                        *v58 = v66;
                        if (v66)
                          goto LABEL_67;
                      }
                      else
                      {
                        v64 = *(uint64_t **)(v57 + 8);
                        v65 = *v64;
                        *(_QWORD *)(v57 + 8) = *v64;
                        if (v65)
                        {
                          *(_QWORD *)(v65 + 16) = v57;
                          v58 = *(uint64_t **)(v57 + 16);
                        }
                        v64[2] = (uint64_t)v58;
                        *(_QWORD *)(*(_QWORD *)(v57 + 16) + 8 * (**(_QWORD **)(v57 + 16) != v57)) = v64;
                        *v64 = v57;
                        *(_QWORD *)(v57 + 16) = v64;
                        v58 = (uint64_t *)v64[2];
                        v57 = *v58;
                        *((_BYTE *)v64 + 24) = 1;
                        *((_BYTE *)v58 + 24) = 0;
                        v66 = *(_QWORD *)(v57 + 8);
                        *v58 = v66;
                        if (v66)
LABEL_67:
                          *(_QWORD *)(v66 + 16) = v58;
                      }
                      *(_QWORD *)(v57 + 16) = v58[2];
                      *(_QWORD *)(v58[2] + 8 * (*(_QWORD *)v58[2] != (_QWORD)v58)) = v57;
                      *(_QWORD *)(v57 + 8) = v58;
LABEL_74:
                      v58[2] = v57;
                      break;
                    }
                  }
                  else if (!v59 || (v61 = *(unsigned __int8 *)(v59 + 24), v60 = (_BYTE *)(v59 + 24), v61))
                  {
                    if (*(uint64_t **)v57 == v55)
                    {
                      v92 = v55[1];
                      *(_QWORD *)v57 = v92;
                      if (v92)
                      {
                        *(_QWORD *)(v92 + 16) = v57;
                        v58 = *(uint64_t **)(v57 + 16);
                      }
                      v55[2] = (uint64_t)v58;
                      *(_QWORD *)(*(_QWORD *)(v57 + 16) + 8 * (**(_QWORD **)(v57 + 16) != v57)) = v55;
                      v55[1] = v57;
                      *(_QWORD *)(v57 + 16) = v55;
                      v58 = (uint64_t *)v55[2];
                      *((_BYTE *)v55 + 24) = 1;
                      *((_BYTE *)v58 + 24) = 0;
                      v57 = v58[1];
                      v67 = *(uint64_t **)v57;
                      v58[1] = *(_QWORD *)v57;
                      if (v67)
LABEL_72:
                        v67[2] = (uint64_t)v58;
                    }
                    else
                    {
                      *(_BYTE *)(v57 + 24) = 1;
                      *((_BYTE *)v58 + 24) = 0;
                      v57 = v58[1];
                      v67 = *(uint64_t **)v57;
                      v58[1] = *(_QWORD *)v57;
                      if (v67)
                        goto LABEL_72;
                    }
                    *(_QWORD *)(v57 + 16) = v58[2];
                    *(_QWORD *)(v58[2] + 8 * (*(_QWORD *)v58[2] != (_QWORD)v58)) = v57;
                    *(_QWORD *)v57 = v58;
                    goto LABEL_74;
                  }
                  *(_BYTE *)(v57 + 24) = 1;
                  v55 = v58;
                  *((_BYTE *)v58 + 24) = v58 == v56;
                  *v60 = 1;
                }
                while (v58 != v56);
              }
              ++v433;
            }
            objc_msgSend(*((id *)v54 + 5), "setObject:atIndexedSubscript:", v49, v42);

            v68 = (void *)MEMORY[0x24BDD16E0];
            v69 = objc_msgSend((id)v41[5], "count");
            objc_msgSend(v430, "objectAtIndexedSubscript:", v42);
            v70 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v68, "numberWithUnsignedInteger:", v69 - objc_msgSend(v70, "integerValue"));
            v71 = (void *)objc_claimAutoreleasedReturnValue();
            v72 = v432;
            v73 = &v432;
LABEL_78:
            v74 = v73;
            if (v72)
            {
              while (1)
              {
                v73 = (uint64_t **)v72;
                v75 = v72[4];
                if (v75 > (unint64_t)CFSTR(">"))
                {
                  v72 = *v73;
                  goto LABEL_78;
                }
                if (v75 >= (unint64_t)CFSTR(">"))
                  break;
                v72 = v73[1];
                if (!v72)
                {
                  v74 = v73 + 1;
                  goto LABEL_83;
                }
              }
              v76 = v73;
            }
            else
            {
LABEL_83:
              v76 = operator new(0x30uLL);
              *((_QWORD *)v76 + 4) = CFSTR(">");
              *((_QWORD *)v76 + 5) = 0;
              *(_QWORD *)v76 = 0;
              *((_QWORD *)v76 + 1) = 0;
              *((_QWORD *)v76 + 2) = v73;
              *v74 = (uint64_t *)v76;
              v77 = (uint64_t *)v76;
              if (*v431)
              {
                v431 = (uint64_t **)*v431;
                v77 = *v74;
              }
              v78 = v432;
              v15 = v77 == v432;
              *((_BYTE *)v77 + 24) = v77 == v432;
              if (!v15)
              {
                do
                {
                  v79 = v77[2];
                  if (*(_BYTE *)(v79 + 24))
                    break;
                  v80 = *(uint64_t **)(v79 + 16);
                  v81 = *v80;
                  if (*v80 == v79)
                  {
                    v84 = v80[1];
                    if (!v84 || (v85 = *(unsigned __int8 *)(v84 + 24), v82 = (_BYTE *)(v84 + 24), v85))
                    {
                      if (*(uint64_t **)v79 == v77)
                      {
                        *(_BYTE *)(v79 + 24) = 1;
                        *((_BYTE *)v80 + 24) = 0;
                        v88 = *(_QWORD *)(v79 + 8);
                        *v80 = v88;
                        if (v88)
                          goto LABEL_100;
                      }
                      else
                      {
                        v86 = *(uint64_t **)(v79 + 8);
                        v87 = *v86;
                        *(_QWORD *)(v79 + 8) = *v86;
                        if (v87)
                        {
                          *(_QWORD *)(v87 + 16) = v79;
                          v80 = *(uint64_t **)(v79 + 16);
                        }
                        v86[2] = (uint64_t)v80;
                        *(_QWORD *)(*(_QWORD *)(v79 + 16) + 8 * (**(_QWORD **)(v79 + 16) != v79)) = v86;
                        *v86 = v79;
                        *(_QWORD *)(v79 + 16) = v86;
                        v80 = (uint64_t *)v86[2];
                        v79 = *v80;
                        *((_BYTE *)v86 + 24) = 1;
                        *((_BYTE *)v80 + 24) = 0;
                        v88 = *(_QWORD *)(v79 + 8);
                        *v80 = v88;
                        if (v88)
LABEL_100:
                          *(_QWORD *)(v88 + 16) = v80;
                      }
                      *(_QWORD *)(v79 + 16) = v80[2];
                      *(_QWORD *)(v80[2] + 8 * (*(_QWORD *)v80[2] != (_QWORD)v80)) = v79;
                      *(_QWORD *)(v79 + 8) = v80;
LABEL_107:
                      v80[2] = v79;
                      break;
                    }
                  }
                  else if (!v81 || (v83 = *(unsigned __int8 *)(v81 + 24), v82 = (_BYTE *)(v81 + 24), v83))
                  {
                    if (*(uint64_t **)v79 == v77)
                    {
                      v93 = v77[1];
                      *(_QWORD *)v79 = v93;
                      if (v93)
                      {
                        *(_QWORD *)(v93 + 16) = v79;
                        v80 = *(uint64_t **)(v79 + 16);
                      }
                      v77[2] = (uint64_t)v80;
                      *(_QWORD *)(*(_QWORD *)(v79 + 16) + 8 * (**(_QWORD **)(v79 + 16) != v79)) = v77;
                      v77[1] = v79;
                      *(_QWORD *)(v79 + 16) = v77;
                      v80 = (uint64_t *)v77[2];
                      *((_BYTE *)v77 + 24) = 1;
                      *((_BYTE *)v80 + 24) = 0;
                      v79 = v80[1];
                      v89 = *(uint64_t **)v79;
                      v80[1] = *(_QWORD *)v79;
                      if (v89)
LABEL_105:
                        v89[2] = (uint64_t)v80;
                    }
                    else
                    {
                      *(_BYTE *)(v79 + 24) = 1;
                      *((_BYTE *)v80 + 24) = 0;
                      v79 = v80[1];
                      v89 = *(uint64_t **)v79;
                      v80[1] = *(_QWORD *)v79;
                      if (v89)
                        goto LABEL_105;
                    }
                    *(_QWORD *)(v79 + 16) = v80[2];
                    *(_QWORD *)(v80[2] + 8 * (*(_QWORD *)v80[2] != (_QWORD)v80)) = v79;
                    *(_QWORD *)v79 = v80;
                    goto LABEL_107;
                  }
                  *(_BYTE *)(v79 + 24) = 1;
                  v77 = v80;
                  *((_BYTE *)v80 + 24) = v80 == v78;
                  *v82 = 1;
                }
                while (v80 != v78);
              }
              ++v433;
            }
            objc_msgSend(*((id *)v76 + 5), "setObject:atIndexedSubscript:", v71, v42);

            v90 = (_QWORD *)v41[1];
            if (v90)
            {
              do
              {
                v91 = (_QWORD **)v90;
                v90 = (_QWORD *)*v90;
              }
              while (v90);
            }
            else
            {
              do
              {
                v91 = (_QWORD **)v41[2];
                v15 = *v91 == v41;
                v41 = v91;
              }
              while (!v15);
            }
            ++v42;
            v41 = v91;
          }
          while (v91 != &v435);
        }
      }
      else
      {
        -[NSArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", i - 1);
        v151 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v151, "firstObject");
        v426 = (void *)objc_claimAutoreleasedReturnValue();

        -[NSArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", i);
        v152 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v152, "firstObject");
        v153 = (void *)objc_claimAutoreleasedReturnValue();

        v425 = v153;
        objc_msgSend(v153, "floatValue");
        v155 = v154;
        objc_msgSend(v426, "floatValue");
        v157 = v156;
        v158 = (void *)MEMORY[0x24BDD16E0];
        objc_msgSend(v153, "floatValue");
        *(float *)&v160 = v159 + (float)((float)(v157 - v155) * 0.5);
        objc_msgSend(v158, "numberWithFloat:", v160);
        v428 = (void *)objc_claimAutoreleasedReturnValue();
        v161 = v434;
        if (v434 != &v435)
        {
          v162 = 0;
          do
          {
            v163 = (void *)v161[4];
            -[NSArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", i - 1);
            v164 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v164, "lastObject");
            v165 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(v163) = objc_msgSend(v163, "isEqual:", v165);

            if ((_DWORD)v163)
            {
              v166 = (void *)MEMORY[0x24BDD16E0];
              objc_msgSend(v430, "objectAtIndexedSubscript:", v162);
              v167 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v166, "numberWithInteger:", objc_msgSend(v167, "integerValue") + 1);
              v168 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v430, "setObject:atIndexedSubscript:", v168, v162);

            }
            else
            {
              objc_msgSend(v430, "objectAtIndexedSubscript:", v162);
              v167 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v430, "setObject:atIndexedSubscript:", v167, v162);
            }

            objc_msgSend(v430, "objectAtIndexedSubscript:", v162);
            v169 = (void *)objc_claimAutoreleasedReturnValue();
            v170 = v432;
            v171 = &v432;
LABEL_222:
            v172 = v171;
            if (v170)
            {
              while (1)
              {
                v171 = (uint64_t **)v170;
                v173 = v170[4];
                if (v173 > (unint64_t)CFSTR("<="))
                {
                  v170 = *v171;
                  goto LABEL_222;
                }
                if (v173 >= (unint64_t)CFSTR("<="))
                  break;
                v170 = v171[1];
                if (!v170)
                {
                  v172 = v171 + 1;
                  goto LABEL_227;
                }
              }
              v174 = v171;
            }
            else
            {
LABEL_227:
              v174 = operator new(0x30uLL);
              *((_QWORD *)v174 + 4) = CFSTR("<=");
              *((_QWORD *)v174 + 5) = 0;
              *(_QWORD *)v174 = 0;
              *((_QWORD *)v174 + 1) = 0;
              *((_QWORD *)v174 + 2) = v171;
              *v172 = (uint64_t *)v174;
              v175 = (uint64_t *)v174;
              if (*v431)
              {
                v431 = (uint64_t **)*v431;
                v175 = *v172;
              }
              v176 = v432;
              v15 = v175 == v432;
              *((_BYTE *)v175 + 24) = v175 == v432;
              if (!v15)
              {
                do
                {
                  v177 = v175[2];
                  if (*(_BYTE *)(v177 + 24))
                    break;
                  v178 = *(uint64_t **)(v177 + 16);
                  v179 = *v178;
                  if (*v178 == v177)
                  {
                    v182 = v178[1];
                    if (!v182 || (v183 = *(unsigned __int8 *)(v182 + 24), v180 = (_BYTE *)(v182 + 24), v183))
                    {
                      if (*(uint64_t **)v177 == v175)
                      {
                        *(_BYTE *)(v177 + 24) = 1;
                        *((_BYTE *)v178 + 24) = 0;
                        v186 = *(_QWORD *)(v177 + 8);
                        *v178 = v186;
                        if (v186)
                          goto LABEL_244;
                      }
                      else
                      {
                        v184 = *(uint64_t **)(v177 + 8);
                        v185 = *v184;
                        *(_QWORD *)(v177 + 8) = *v184;
                        if (v185)
                        {
                          *(_QWORD *)(v185 + 16) = v177;
                          v178 = *(uint64_t **)(v177 + 16);
                        }
                        v184[2] = (uint64_t)v178;
                        *(_QWORD *)(*(_QWORD *)(v177 + 16) + 8 * (**(_QWORD **)(v177 + 16) != v177)) = v184;
                        *v184 = v177;
                        *(_QWORD *)(v177 + 16) = v184;
                        v178 = (uint64_t *)v184[2];
                        v177 = *v178;
                        *((_BYTE *)v184 + 24) = 1;
                        *((_BYTE *)v178 + 24) = 0;
                        v186 = *(_QWORD *)(v177 + 8);
                        *v178 = v186;
                        if (v186)
LABEL_244:
                          *(_QWORD *)(v186 + 16) = v178;
                      }
                      *(_QWORD *)(v177 + 16) = v178[2];
                      *(_QWORD *)(v178[2] + 8 * (*(_QWORD *)v178[2] != (_QWORD)v178)) = v177;
                      *(_QWORD *)(v177 + 8) = v178;
LABEL_251:
                      v178[2] = v177;
                      break;
                    }
                  }
                  else if (!v179 || (v181 = *(unsigned __int8 *)(v179 + 24), v180 = (_BYTE *)(v179 + 24), v181))
                  {
                    if (*(uint64_t **)v177 == v175)
                    {
                      v212 = v175[1];
                      *(_QWORD *)v177 = v212;
                      if (v212)
                      {
                        *(_QWORD *)(v212 + 16) = v177;
                        v178 = *(uint64_t **)(v177 + 16);
                      }
                      v175[2] = (uint64_t)v178;
                      *(_QWORD *)(*(_QWORD *)(v177 + 16) + 8 * (**(_QWORD **)(v177 + 16) != v177)) = v175;
                      v175[1] = v177;
                      *(_QWORD *)(v177 + 16) = v175;
                      v178 = (uint64_t *)v175[2];
                      *((_BYTE *)v175 + 24) = 1;
                      *((_BYTE *)v178 + 24) = 0;
                      v177 = v178[1];
                      v187 = *(uint64_t **)v177;
                      v178[1] = *(_QWORD *)v177;
                      if (v187)
LABEL_249:
                        v187[2] = (uint64_t)v178;
                    }
                    else
                    {
                      *(_BYTE *)(v177 + 24) = 1;
                      *((_BYTE *)v178 + 24) = 0;
                      v177 = v178[1];
                      v187 = *(uint64_t **)v177;
                      v178[1] = *(_QWORD *)v177;
                      if (v187)
                        goto LABEL_249;
                    }
                    *(_QWORD *)(v177 + 16) = v178[2];
                    *(_QWORD *)(v178[2] + 8 * (*(_QWORD *)v178[2] != (_QWORD)v178)) = v177;
                    *(_QWORD *)v177 = v178;
                    goto LABEL_251;
                  }
                  *(_BYTE *)(v177 + 24) = 1;
                  v175 = v178;
                  *((_BYTE *)v178 + 24) = v178 == v176;
                  *v180 = 1;
                }
                while (v178 != v176);
              }
              ++v433;
            }
            objc_msgSend(*((id *)v174 + 5), "setObject:atIndexedSubscript:", v169, v162);

            v188 = (void *)MEMORY[0x24BDD16E0];
            v189 = objc_msgSend((id)v161[5], "count");
            objc_msgSend(v430, "objectAtIndexedSubscript:", v162);
            v190 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v188, "numberWithUnsignedInteger:", v189 - objc_msgSend(v190, "integerValue"));
            v191 = (void *)objc_claimAutoreleasedReturnValue();
            v192 = v432;
            v193 = &v432;
LABEL_255:
            v194 = v193;
            if (v192)
            {
              while (1)
              {
                v193 = (uint64_t **)v192;
                v195 = v192[4];
                if (v195 > (unint64_t)CFSTR(">"))
                {
                  v192 = *v193;
                  goto LABEL_255;
                }
                if (v195 >= (unint64_t)CFSTR(">"))
                  break;
                v192 = v193[1];
                if (!v192)
                {
                  v194 = v193 + 1;
                  goto LABEL_260;
                }
              }
              v196 = v193;
            }
            else
            {
LABEL_260:
              v196 = operator new(0x30uLL);
              *((_QWORD *)v196 + 4) = CFSTR(">");
              *((_QWORD *)v196 + 5) = 0;
              *(_QWORD *)v196 = 0;
              *((_QWORD *)v196 + 1) = 0;
              *((_QWORD *)v196 + 2) = v193;
              *v194 = (uint64_t *)v196;
              v197 = (uint64_t *)v196;
              if (*v431)
              {
                v431 = (uint64_t **)*v431;
                v197 = *v194;
              }
              v198 = v432;
              v15 = v197 == v432;
              *((_BYTE *)v197 + 24) = v197 == v432;
              if (!v15)
              {
                do
                {
                  v199 = v197[2];
                  if (*(_BYTE *)(v199 + 24))
                    break;
                  v200 = *(uint64_t **)(v199 + 16);
                  v201 = *v200;
                  if (*v200 == v199)
                  {
                    v204 = v200[1];
                    if (!v204 || (v205 = *(unsigned __int8 *)(v204 + 24), v202 = (_BYTE *)(v204 + 24), v205))
                    {
                      if (*(uint64_t **)v199 == v197)
                      {
                        *(_BYTE *)(v199 + 24) = 1;
                        *((_BYTE *)v200 + 24) = 0;
                        v208 = *(_QWORD *)(v199 + 8);
                        *v200 = v208;
                        if (v208)
                          goto LABEL_277;
                      }
                      else
                      {
                        v206 = *(uint64_t **)(v199 + 8);
                        v207 = *v206;
                        *(_QWORD *)(v199 + 8) = *v206;
                        if (v207)
                        {
                          *(_QWORD *)(v207 + 16) = v199;
                          v200 = *(uint64_t **)(v199 + 16);
                        }
                        v206[2] = (uint64_t)v200;
                        *(_QWORD *)(*(_QWORD *)(v199 + 16) + 8 * (**(_QWORD **)(v199 + 16) != v199)) = v206;
                        *v206 = v199;
                        *(_QWORD *)(v199 + 16) = v206;
                        v200 = (uint64_t *)v206[2];
                        v199 = *v200;
                        *((_BYTE *)v206 + 24) = 1;
                        *((_BYTE *)v200 + 24) = 0;
                        v208 = *(_QWORD *)(v199 + 8);
                        *v200 = v208;
                        if (v208)
LABEL_277:
                          *(_QWORD *)(v208 + 16) = v200;
                      }
                      *(_QWORD *)(v199 + 16) = v200[2];
                      *(_QWORD *)(v200[2] + 8 * (*(_QWORD *)v200[2] != (_QWORD)v200)) = v199;
                      *(_QWORD *)(v199 + 8) = v200;
LABEL_284:
                      v200[2] = v199;
                      break;
                    }
                  }
                  else if (!v201 || (v203 = *(unsigned __int8 *)(v201 + 24), v202 = (_BYTE *)(v201 + 24), v203))
                  {
                    if (*(uint64_t **)v199 == v197)
                    {
                      v213 = v197[1];
                      *(_QWORD *)v199 = v213;
                      if (v213)
                      {
                        *(_QWORD *)(v213 + 16) = v199;
                        v200 = *(uint64_t **)(v199 + 16);
                      }
                      v197[2] = (uint64_t)v200;
                      *(_QWORD *)(*(_QWORD *)(v199 + 16) + 8 * (**(_QWORD **)(v199 + 16) != v199)) = v197;
                      v197[1] = v199;
                      *(_QWORD *)(v199 + 16) = v197;
                      v200 = (uint64_t *)v197[2];
                      *((_BYTE *)v197 + 24) = 1;
                      *((_BYTE *)v200 + 24) = 0;
                      v199 = v200[1];
                      v209 = *(uint64_t **)v199;
                      v200[1] = *(_QWORD *)v199;
                      if (v209)
LABEL_282:
                        v209[2] = (uint64_t)v200;
                    }
                    else
                    {
                      *(_BYTE *)(v199 + 24) = 1;
                      *((_BYTE *)v200 + 24) = 0;
                      v199 = v200[1];
                      v209 = *(uint64_t **)v199;
                      v200[1] = *(_QWORD *)v199;
                      if (v209)
                        goto LABEL_282;
                    }
                    *(_QWORD *)(v199 + 16) = v200[2];
                    *(_QWORD *)(v200[2] + 8 * (*(_QWORD *)v200[2] != (_QWORD)v200)) = v199;
                    *(_QWORD *)v199 = v200;
                    goto LABEL_284;
                  }
                  *(_BYTE *)(v199 + 24) = 1;
                  v197 = v200;
                  *((_BYTE *)v200 + 24) = v200 == v198;
                  *v202 = 1;
                }
                while (v200 != v198);
              }
              ++v433;
            }
            objc_msgSend(*((id *)v196 + 5), "setObject:atIndexedSubscript:", v191, v162);

            v210 = (_QWORD *)v161[1];
            if (v210)
            {
              do
              {
                v211 = (_QWORD **)v210;
                v210 = (_QWORD *)*v210;
              }
              while (v210);
            }
            else
            {
              do
              {
                v211 = (_QWORD **)v161[2];
                v15 = *v211 == v161;
                v161 = v211;
              }
              while (!v15);
            }
            ++v162;
            v161 = v211;
          }
          while (v211 != &v435);
        }
      }
    }
    else
    {
      -[NSArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", 0);
      v94 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v94, "firstObject");
      v426 = (void *)objc_claimAutoreleasedReturnValue();

      -[NSArray objectAtIndexedSubscript:](v6, "objectAtIndexedSubscript:", 1);
      v95 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v95, "firstObject");
      v96 = (void *)objc_claimAutoreleasedReturnValue();

      v425 = v96;
      objc_msgSend(v96, "floatValue");
      v98 = v97;
      objc_msgSend(v426, "floatValue");
      v100 = v99;
      v101 = (void *)MEMORY[0x24BDD16E0];
      objc_msgSend(v426, "floatValue");
      *(float *)&v103 = v102 + (float)((float)(v100 - v98) * 0.5);
      objc_msgSend(v101, "numberWithFloat:", v103);
      v428 = (void *)objc_claimAutoreleasedReturnValue();
      v104 = v434;
      if (v434 != &v435)
      {
        v105 = 0;
        do
        {
          objc_msgSend(v430, "setObject:atIndexedSubscript:", &unk_24F0592F8, v105);
          objc_msgSend(v430, "objectAtIndexedSubscript:", v105);
          v106 = (void *)objc_claimAutoreleasedReturnValue();
          v107 = v432;
          v108 = &v432;
LABEL_132:
          v109 = v108;
          if (v107)
          {
            while (1)
            {
              v108 = (uint64_t **)v107;
              v110 = v107[4];
              if (v110 > (unint64_t)CFSTR("<="))
              {
                v107 = *v108;
                goto LABEL_132;
              }
              if (v110 >= (unint64_t)CFSTR("<="))
                break;
              v107 = v108[1];
              if (!v107)
              {
                v109 = v108 + 1;
                goto LABEL_137;
              }
            }
            v111 = v108;
          }
          else
          {
LABEL_137:
            v111 = operator new(0x30uLL);
            *((_QWORD *)v111 + 4) = CFSTR("<=");
            *((_QWORD *)v111 + 5) = 0;
            *(_QWORD *)v111 = 0;
            *((_QWORD *)v111 + 1) = 0;
            *((_QWORD *)v111 + 2) = v108;
            *v109 = (uint64_t *)v111;
            v112 = (uint64_t *)v111;
            if (*v431)
            {
              v431 = (uint64_t **)*v431;
              v112 = *v109;
            }
            v113 = v432;
            v15 = v112 == v432;
            *((_BYTE *)v112 + 24) = v112 == v432;
            if (!v15)
            {
              do
              {
                v114 = v112[2];
                if (*(_BYTE *)(v114 + 24))
                  break;
                v115 = *(uint64_t **)(v114 + 16);
                v116 = *v115;
                if (*v115 == v114)
                {
                  v119 = v115[1];
                  if (!v119 || (v120 = *(unsigned __int8 *)(v119 + 24), v117 = (_BYTE *)(v119 + 24), v120))
                  {
                    if (*(uint64_t **)v114 == v112)
                    {
                      *(_BYTE *)(v114 + 24) = 1;
                      *((_BYTE *)v115 + 24) = 0;
                      v123 = *(_QWORD *)(v114 + 8);
                      *v115 = v123;
                      if (v123)
                        goto LABEL_154;
                    }
                    else
                    {
                      v121 = *(uint64_t **)(v114 + 8);
                      v122 = *v121;
                      *(_QWORD *)(v114 + 8) = *v121;
                      if (v122)
                      {
                        *(_QWORD *)(v122 + 16) = v114;
                        v115 = *(uint64_t **)(v114 + 16);
                      }
                      v121[2] = (uint64_t)v115;
                      *(_QWORD *)(*(_QWORD *)(v114 + 16) + 8 * (**(_QWORD **)(v114 + 16) != v114)) = v121;
                      *v121 = v114;
                      *(_QWORD *)(v114 + 16) = v121;
                      v115 = (uint64_t *)v121[2];
                      v114 = *v115;
                      *((_BYTE *)v121 + 24) = 1;
                      *((_BYTE *)v115 + 24) = 0;
                      v123 = *(_QWORD *)(v114 + 8);
                      *v115 = v123;
                      if (v123)
LABEL_154:
                        *(_QWORD *)(v123 + 16) = v115;
                    }
                    *(_QWORD *)(v114 + 16) = v115[2];
                    *(_QWORD *)(v115[2] + 8 * (*(_QWORD *)v115[2] != (_QWORD)v115)) = v114;
                    *(_QWORD *)(v114 + 8) = v115;
LABEL_161:
                    v115[2] = v114;
                    break;
                  }
                }
                else if (!v116 || (v118 = *(unsigned __int8 *)(v116 + 24), v117 = (_BYTE *)(v116 + 24), v118))
                {
                  if (*(uint64_t **)v114 == v112)
                  {
                    v149 = v112[1];
                    *(_QWORD *)v114 = v149;
                    if (v149)
                    {
                      *(_QWORD *)(v149 + 16) = v114;
                      v115 = *(uint64_t **)(v114 + 16);
                    }
                    v112[2] = (uint64_t)v115;
                    *(_QWORD *)(*(_QWORD *)(v114 + 16) + 8 * (**(_QWORD **)(v114 + 16) != v114)) = v112;
                    v112[1] = v114;
                    *(_QWORD *)(v114 + 16) = v112;
                    v115 = (uint64_t *)v112[2];
                    *((_BYTE *)v112 + 24) = 1;
                    *((_BYTE *)v115 + 24) = 0;
                    v114 = v115[1];
                    v124 = *(uint64_t **)v114;
                    v115[1] = *(_QWORD *)v114;
                    if (v124)
LABEL_159:
                      v124[2] = (uint64_t)v115;
                  }
                  else
                  {
                    *(_BYTE *)(v114 + 24) = 1;
                    *((_BYTE *)v115 + 24) = 0;
                    v114 = v115[1];
                    v124 = *(uint64_t **)v114;
                    v115[1] = *(_QWORD *)v114;
                    if (v124)
                      goto LABEL_159;
                  }
                  *(_QWORD *)(v114 + 16) = v115[2];
                  *(_QWORD *)(v115[2] + 8 * (*(_QWORD *)v115[2] != (_QWORD)v115)) = v114;
                  *(_QWORD *)v114 = v115;
                  goto LABEL_161;
                }
                *(_BYTE *)(v114 + 24) = 1;
                v112 = v115;
                *((_BYTE *)v115 + 24) = v115 == v113;
                *v117 = 1;
              }
              while (v115 != v113);
            }
            ++v433;
          }
          objc_msgSend(*((id *)v111 + 5), "setObject:atIndexedSubscript:", v106, v105);

          v125 = (void *)MEMORY[0x24BDD16E0];
          v126 = objc_msgSend((id)v104[5], "count");
          objc_msgSend(v430, "objectAtIndexedSubscript:", v105);
          v127 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v125, "numberWithUnsignedInteger:", v126 - objc_msgSend(v127, "integerValue"));
          v128 = (void *)objc_claimAutoreleasedReturnValue();
          v129 = v432;
          v130 = &v432;
LABEL_165:
          v131 = v130;
          if (v129)
          {
            while (1)
            {
              v130 = (uint64_t **)v129;
              v132 = v129[4];
              if (v132 > (unint64_t)CFSTR(">"))
              {
                v129 = *v130;
                goto LABEL_165;
              }
              if (v132 >= (unint64_t)CFSTR(">"))
                break;
              v129 = v130[1];
              if (!v129)
              {
                v131 = v130 + 1;
                goto LABEL_170;
              }
            }
            v133 = v130;
          }
          else
          {
LABEL_170:
            v133 = operator new(0x30uLL);
            *((_QWORD *)v133 + 4) = CFSTR(">");
            *((_QWORD *)v133 + 5) = 0;
            *(_QWORD *)v133 = 0;
            *((_QWORD *)v133 + 1) = 0;
            *((_QWORD *)v133 + 2) = v130;
            *v131 = (uint64_t *)v133;
            v134 = (uint64_t *)v133;
            if (*v431)
            {
              v431 = (uint64_t **)*v431;
              v134 = *v131;
            }
            v135 = v432;
            v15 = v134 == v432;
            *((_BYTE *)v134 + 24) = v134 == v432;
            if (!v15)
            {
              do
              {
                v136 = v134[2];
                if (*(_BYTE *)(v136 + 24))
                  break;
                v137 = *(uint64_t **)(v136 + 16);
                v138 = *v137;
                if (*v137 == v136)
                {
                  v141 = v137[1];
                  if (!v141 || (v142 = *(unsigned __int8 *)(v141 + 24), v139 = (_BYTE *)(v141 + 24), v142))
                  {
                    if (*(uint64_t **)v136 == v134)
                    {
                      *(_BYTE *)(v136 + 24) = 1;
                      *((_BYTE *)v137 + 24) = 0;
                      v145 = *(_QWORD *)(v136 + 8);
                      *v137 = v145;
                      if (v145)
                        goto LABEL_187;
                    }
                    else
                    {
                      v143 = *(uint64_t **)(v136 + 8);
                      v144 = *v143;
                      *(_QWORD *)(v136 + 8) = *v143;
                      if (v144)
                      {
                        *(_QWORD *)(v144 + 16) = v136;
                        v137 = *(uint64_t **)(v136 + 16);
                      }
                      v143[2] = (uint64_t)v137;
                      *(_QWORD *)(*(_QWORD *)(v136 + 16) + 8 * (**(_QWORD **)(v136 + 16) != v136)) = v143;
                      *v143 = v136;
                      *(_QWORD *)(v136 + 16) = v143;
                      v137 = (uint64_t *)v143[2];
                      v136 = *v137;
                      *((_BYTE *)v143 + 24) = 1;
                      *((_BYTE *)v137 + 24) = 0;
                      v145 = *(_QWORD *)(v136 + 8);
                      *v137 = v145;
                      if (v145)
LABEL_187:
                        *(_QWORD *)(v145 + 16) = v137;
                    }
                    *(_QWORD *)(v136 + 16) = v137[2];
                    *(_QWORD *)(v137[2] + 8 * (*(_QWORD *)v137[2] != (_QWORD)v137)) = v136;
                    *(_QWORD *)(v136 + 8) = v137;
LABEL_194:
                    v137[2] = v136;
                    break;
                  }
                }
                else if (!v138 || (v140 = *(unsigned __int8 *)(v138 + 24), v139 = (_BYTE *)(v138 + 24), v140))
                {
                  if (*(uint64_t **)v136 == v134)
                  {
                    v150 = v134[1];
                    *(_QWORD *)v136 = v150;
                    if (v150)
                    {
                      *(_QWORD *)(v150 + 16) = v136;
                      v137 = *(uint64_t **)(v136 + 16);
                    }
                    v134[2] = (uint64_t)v137;
                    *(_QWORD *)(*(_QWORD *)(v136 + 16) + 8 * (**(_QWORD **)(v136 + 16) != v136)) = v134;
                    v134[1] = v136;
                    *(_QWORD *)(v136 + 16) = v134;
                    v137 = (uint64_t *)v134[2];
                    *((_BYTE *)v134 + 24) = 1;
                    *((_BYTE *)v137 + 24) = 0;
                    v136 = v137[1];
                    v146 = *(uint64_t **)v136;
                    v137[1] = *(_QWORD *)v136;
                    if (v146)
LABEL_192:
                      v146[2] = (uint64_t)v137;
                  }
                  else
                  {
                    *(_BYTE *)(v136 + 24) = 1;
                    *((_BYTE *)v137 + 24) = 0;
                    v136 = v137[1];
                    v146 = *(uint64_t **)v136;
                    v137[1] = *(_QWORD *)v136;
                    if (v146)
                      goto LABEL_192;
                  }
                  *(_QWORD *)(v136 + 16) = v137[2];
                  *(_QWORD *)(v137[2] + 8 * (*(_QWORD *)v137[2] != (_QWORD)v137)) = v136;
                  *(_QWORD *)v136 = v137;
                  goto LABEL_194;
                }
                *(_BYTE *)(v136 + 24) = 1;
                v134 = v137;
                *((_BYTE *)v137 + 24) = v137 == v135;
                *v139 = 1;
              }
              while (v137 != v135);
            }
            ++v433;
          }
          objc_msgSend(*((id *)v133 + 5), "setObject:atIndexedSubscript:", v128, v105);

          v147 = (_QWORD *)v104[1];
          if (v147)
          {
            do
            {
              v148 = (_QWORD **)v147;
              v147 = (_QWORD *)*v147;
            }
            while (v147);
          }
          else
          {
            do
            {
              v148 = (_QWORD **)v104[2];
              v15 = *v148 == v104;
              v104 = v148;
            }
            while (!v15);
          }
          ++v105;
          v104 = v148;
        }
        while (v148 != &v435);
      }
    }

    if (i)
    {
      if (-[NSArray count](v6, "count") == i)
      {
        v216 = 1.0;
        if (v436)
        {
          v217 = 0;
          v218 = 0.0;
          do
          {
            v219 = v432;
            v220 = &v432;
LABEL_310:
            v221 = v220;
            if (v219)
            {
              while (1)
              {
                v220 = (uint64_t **)v219;
                v222 = v219[4];
                if (v222 > (unint64_t)CFSTR("<="))
                {
                  v219 = *v220;
                  goto LABEL_310;
                }
                if (v222 >= (unint64_t)CFSTR("<="))
                  break;
                v219 = v220[1];
                if (!v219)
                {
                  v221 = v220 + 1;
                  goto LABEL_315;
                }
              }
              v223 = v220;
            }
            else
            {
LABEL_315:
              v223 = operator new(0x30uLL);
              *((_QWORD *)v223 + 4) = CFSTR("<=");
              *((_QWORD *)v223 + 5) = 0;
              *(_QWORD *)v223 = 0;
              *((_QWORD *)v223 + 1) = 0;
              *((_QWORD *)v223 + 2) = v220;
              *v221 = (uint64_t *)v223;
              v224 = (uint64_t *)v223;
              if (*v431)
              {
                v431 = (uint64_t **)*v431;
                v224 = *v221;
              }
              v225 = v432;
              v15 = v224 == v432;
              *((_BYTE *)v224 + 24) = v224 == v432;
              if (!v15)
              {
                do
                {
                  v226 = v224[2];
                  if (*(_BYTE *)(v226 + 24))
                    break;
                  v227 = *(uint64_t **)(v226 + 16);
                  v228 = *v227;
                  if (*v227 == v226)
                  {
                    v231 = v227[1];
                    if (!v231 || (v232 = *(unsigned __int8 *)(v231 + 24), v229 = (_BYTE *)(v231 + 24), v232))
                    {
                      if (*(uint64_t **)v226 == v224)
                      {
                        *(_BYTE *)(v226 + 24) = 1;
                        *((_BYTE *)v227 + 24) = 0;
                        v235 = *(_QWORD *)(v226 + 8);
                        *v227 = v235;
                        if (v235)
                          goto LABEL_332;
                      }
                      else
                      {
                        v233 = *(uint64_t **)(v226 + 8);
                        v234 = *v233;
                        *(_QWORD *)(v226 + 8) = *v233;
                        if (v234)
                        {
                          *(_QWORD *)(v234 + 16) = v226;
                          v227 = *(uint64_t **)(v226 + 16);
                        }
                        v233[2] = (uint64_t)v227;
                        *(_QWORD *)(*(_QWORD *)(v226 + 16) + 8 * (**(_QWORD **)(v226 + 16) != v226)) = v233;
                        *v233 = v226;
                        *(_QWORD *)(v226 + 16) = v233;
                        v227 = (uint64_t *)v233[2];
                        v226 = *v227;
                        *((_BYTE *)v233 + 24) = 1;
                        *((_BYTE *)v227 + 24) = 0;
                        v235 = *(_QWORD *)(v226 + 8);
                        *v227 = v235;
                        if (v235)
LABEL_332:
                          *(_QWORD *)(v235 + 16) = v227;
                      }
                      *(_QWORD *)(v226 + 16) = v227[2];
                      *(_QWORD *)(v227[2] + 8 * (*(_QWORD *)v227[2] != (_QWORD)v227)) = v226;
                      *(_QWORD *)(v226 + 8) = v227;
LABEL_339:
                      v227[2] = v226;
                      break;
                    }
                  }
                  else if (!v228 || (v230 = *(unsigned __int8 *)(v228 + 24), v229 = (_BYTE *)(v228 + 24), v230))
                  {
                    if (*(uint64_t **)v226 == v224)
                    {
                      v239 = v224[1];
                      *(_QWORD *)v226 = v239;
                      if (v239)
                      {
                        *(_QWORD *)(v239 + 16) = v226;
                        v227 = *(uint64_t **)(v226 + 16);
                      }
                      v224[2] = (uint64_t)v227;
                      *(_QWORD *)(*(_QWORD *)(v226 + 16) + 8 * (**(_QWORD **)(v226 + 16) != v226)) = v224;
                      v224[1] = v226;
                      *(_QWORD *)(v226 + 16) = v224;
                      v227 = (uint64_t *)v224[2];
                      *((_BYTE *)v224 + 24) = 1;
                      *((_BYTE *)v227 + 24) = 0;
                      v226 = v227[1];
                      v236 = *(uint64_t **)v226;
                      v227[1] = *(_QWORD *)v226;
                      if (v236)
LABEL_337:
                        v236[2] = (uint64_t)v227;
                    }
                    else
                    {
                      *(_BYTE *)(v226 + 24) = 1;
                      *((_BYTE *)v227 + 24) = 0;
                      v226 = v227[1];
                      v236 = *(uint64_t **)v226;
                      v227[1] = *(_QWORD *)v226;
                      if (v236)
                        goto LABEL_337;
                    }
                    *(_QWORD *)(v226 + 16) = v227[2];
                    *(_QWORD *)(v227[2] + 8 * (*(_QWORD *)v227[2] != (_QWORD)v227)) = v226;
                    *(_QWORD *)v226 = v227;
                    goto LABEL_339;
                  }
                  *(_BYTE *)(v226 + 24) = 1;
                  v224 = v227;
                  *((_BYTE *)v227 + 24) = v227 == v225;
                  *v229 = 1;
                }
                while (v227 != v225);
              }
              ++v433;
            }
            objc_msgSend(*((id *)v223 + 5), "objectAtIndexedSubscript:", v217);
            v237 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v237, "floatValue");
            v218 = v238 + v218;

            ++v217;
          }
          while (v436 > v217);
          if (v436)
          {
            v339 = 0;
            v216 = 1.0;
            v340 = 1.0 / v218;
            do
            {
              v341 = v432;
              v342 = &v432;
LABEL_529:
              v343 = v342;
              if (v341)
              {
                while (1)
                {
                  v342 = (uint64_t **)v341;
                  v344 = v341[4];
                  if (v344 > (unint64_t)CFSTR("<="))
                  {
                    v341 = *v342;
                    goto LABEL_529;
                  }
                  if (v344 >= (unint64_t)CFSTR("<="))
                    break;
                  v341 = v342[1];
                  if (!v341)
                  {
                    v343 = v342 + 1;
                    goto LABEL_534;
                  }
                }
                v345 = v342;
              }
              else
              {
LABEL_534:
                v345 = operator new(0x30uLL);
                *((_QWORD *)v345 + 4) = CFSTR("<=");
                *((_QWORD *)v345 + 5) = 0;
                *(_QWORD *)v345 = 0;
                *((_QWORD *)v345 + 1) = 0;
                *((_QWORD *)v345 + 2) = v342;
                *v343 = (uint64_t *)v345;
                v346 = (uint64_t *)v345;
                if (*v431)
                {
                  v431 = (uint64_t **)*v431;
                  v346 = *v343;
                }
                v347 = v432;
                v15 = v346 == v432;
                *((_BYTE *)v346 + 24) = v346 == v432;
                if (!v15)
                {
                  do
                  {
                    v348 = v346[2];
                    if (*(_BYTE *)(v348 + 24))
                      break;
                    v349 = *(uint64_t **)(v348 + 16);
                    v350 = *v349;
                    if (*v349 == v348)
                    {
                      v353 = v349[1];
                      if (!v353 || (v354 = *(unsigned __int8 *)(v353 + 24), v351 = (_BYTE *)(v353 + 24), v354))
                      {
                        if (*(uint64_t **)v348 == v346)
                        {
                          *(_BYTE *)(v348 + 24) = 1;
                          *((_BYTE *)v349 + 24) = 0;
                          v357 = *(_QWORD *)(v348 + 8);
                          *v349 = v357;
                          if (v357)
                            goto LABEL_551;
                        }
                        else
                        {
                          v355 = *(uint64_t **)(v348 + 8);
                          v356 = *v355;
                          *(_QWORD *)(v348 + 8) = *v355;
                          if (v356)
                          {
                            *(_QWORD *)(v356 + 16) = v348;
                            v349 = *(uint64_t **)(v348 + 16);
                          }
                          v355[2] = (uint64_t)v349;
                          *(_QWORD *)(*(_QWORD *)(v348 + 16) + 8 * (**(_QWORD **)(v348 + 16) != v348)) = v355;
                          *v355 = v348;
                          *(_QWORD *)(v348 + 16) = v355;
                          v349 = (uint64_t *)v355[2];
                          v348 = *v349;
                          *((_BYTE *)v355 + 24) = 1;
                          *((_BYTE *)v349 + 24) = 0;
                          v357 = *(_QWORD *)(v348 + 8);
                          *v349 = v357;
                          if (v357)
LABEL_551:
                            *(_QWORD *)(v357 + 16) = v349;
                        }
                        *(_QWORD *)(v348 + 16) = v349[2];
                        *(_QWORD *)(v349[2] + 8 * (*(_QWORD *)v349[2] != (_QWORD)v349)) = v348;
                        *(_QWORD *)(v348 + 8) = v349;
LABEL_558:
                        v349[2] = v348;
                        break;
                      }
                    }
                    else if (!v350 || (v352 = *(unsigned __int8 *)(v350 + 24), v351 = (_BYTE *)(v350 + 24), v352))
                    {
                      if (*(uint64_t **)v348 == v346)
                      {
                        v361 = v346[1];
                        *(_QWORD *)v348 = v361;
                        if (v361)
                        {
                          *(_QWORD *)(v361 + 16) = v348;
                          v349 = *(uint64_t **)(v348 + 16);
                        }
                        v346[2] = (uint64_t)v349;
                        *(_QWORD *)(*(_QWORD *)(v348 + 16) + 8 * (**(_QWORD **)(v348 + 16) != v348)) = v346;
                        v346[1] = v348;
                        *(_QWORD *)(v348 + 16) = v346;
                        v349 = (uint64_t *)v346[2];
                        *((_BYTE *)v346 + 24) = 1;
                        *((_BYTE *)v349 + 24) = 0;
                        v348 = v349[1];
                        v358 = *(uint64_t **)v348;
                        v349[1] = *(_QWORD *)v348;
                        if (v358)
LABEL_556:
                          v358[2] = (uint64_t)v349;
                      }
                      else
                      {
                        *(_BYTE *)(v348 + 24) = 1;
                        *((_BYTE *)v349 + 24) = 0;
                        v348 = v349[1];
                        v358 = *(uint64_t **)v348;
                        v349[1] = *(_QWORD *)v348;
                        if (v358)
                          goto LABEL_556;
                      }
                      *(_QWORD *)(v348 + 16) = v349[2];
                      *(_QWORD *)(v349[2] + 8 * (*(_QWORD *)v349[2] != (_QWORD)v349)) = v348;
                      *(_QWORD *)v348 = v349;
                      goto LABEL_558;
                    }
                    *(_BYTE *)(v348 + 24) = 1;
                    v346 = v349;
                    *((_BYTE *)v349 + 24) = v349 == v347;
                    *v351 = 1;
                  }
                  while (v349 != v347);
                }
                ++v433;
              }
              objc_msgSend(*((id *)v345 + 5), "objectAtIndexedSubscript:", v339);
              v359 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v359, "floatValue");
              v216 = v216 - (float)((float)(v360 * v340) * (float)(v360 * v340));

              ++v339;
            }
            while (v436 > v339);
          }
        }
        *(float *)&v215 = v216;
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v215);
        v334 = objc_claimAutoreleasedReturnValue();
        v362 = v438;
        v336 = &v438;
LABEL_570:
        v337 = v336;
        if (v362)
        {
          do
          {
            v336 = (uint64_t **)v362;
            v363 = v362[4];
            if ((unint64_t)v428 < v363)
            {
              v362 = *v336;
              goto LABEL_570;
            }
            if (v363 >= (unint64_t)v428)
              goto LABEL_669;
            v362 = v336[1];
          }
          while (v362);
          v337 = v336 + 1;
        }
LABEL_667:
        v412 = (uint64_t *)operator new(0x30uLL);
        v412[4] = (uint64_t)v428;
        v412[5] = 0;
        *v412 = 0;
        v412[1] = 0;
        v412[2] = (uint64_t)v336;
        *v337 = v412;
        v413 = v412;
        if (*v437)
        {
          v437 = (uint64_t **)*v437;
          v413 = *v337;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v438, v413);
        ++v439;
        goto LABEL_33;
      }
      v264 = 1.0;
      if (v436)
      {
        v265 = 0;
        v266 = 0.0;
        v267 = 0.0;
        do
        {
          v268 = v432;
          v269 = &v432;
LABEL_396:
          v270 = v269;
          if (v268)
          {
            while (1)
            {
              v269 = (uint64_t **)v268;
              v271 = v268[4];
              if (v271 > (unint64_t)CFSTR("<="))
              {
                v268 = *v269;
                goto LABEL_396;
              }
              if (v271 >= (unint64_t)CFSTR("<="))
                break;
              v268 = v269[1];
              if (!v268)
              {
                v270 = v269 + 1;
                goto LABEL_401;
              }
            }
            v272 = v269;
          }
          else
          {
LABEL_401:
            v272 = operator new(0x30uLL);
            *((_QWORD *)v272 + 4) = CFSTR("<=");
            *((_QWORD *)v272 + 5) = 0;
            *(_QWORD *)v272 = 0;
            *((_QWORD *)v272 + 1) = 0;
            *((_QWORD *)v272 + 2) = v269;
            *v270 = (uint64_t *)v272;
            v273 = (uint64_t *)v272;
            if (*v431)
            {
              v431 = (uint64_t **)*v431;
              v273 = *v270;
            }
            v274 = v432;
            v15 = v273 == v432;
            *((_BYTE *)v273 + 24) = v273 == v432;
            if (!v15)
            {
              do
              {
                v275 = v273[2];
                if (*(_BYTE *)(v275 + 24))
                  break;
                v276 = *(uint64_t **)(v275 + 16);
                v277 = *v276;
                if (*v276 == v275)
                {
                  v280 = v276[1];
                  if (!v280 || (v281 = *(unsigned __int8 *)(v280 + 24), v278 = (_BYTE *)(v280 + 24), v281))
                  {
                    if (*(uint64_t **)v275 == v273)
                    {
                      *(_BYTE *)(v275 + 24) = 1;
                      *((_BYTE *)v276 + 24) = 0;
                      v284 = *(_QWORD *)(v275 + 8);
                      *v276 = v284;
                      if (v284)
                        goto LABEL_418;
                    }
                    else
                    {
                      v282 = *(uint64_t **)(v275 + 8);
                      v283 = *v282;
                      *(_QWORD *)(v275 + 8) = *v282;
                      if (v283)
                      {
                        *(_QWORD *)(v283 + 16) = v275;
                        v276 = *(uint64_t **)(v275 + 16);
                      }
                      v282[2] = (uint64_t)v276;
                      *(_QWORD *)(*(_QWORD *)(v275 + 16) + 8 * (**(_QWORD **)(v275 + 16) != v275)) = v282;
                      *v282 = v275;
                      *(_QWORD *)(v275 + 16) = v282;
                      v276 = (uint64_t *)v282[2];
                      v275 = *v276;
                      *((_BYTE *)v282 + 24) = 1;
                      *((_BYTE *)v276 + 24) = 0;
                      v284 = *(_QWORD *)(v275 + 8);
                      *v276 = v284;
                      if (v284)
LABEL_418:
                        *(_QWORD *)(v284 + 16) = v276;
                    }
                    *(_QWORD *)(v275 + 16) = v276[2];
                    *(_QWORD *)(v276[2] + 8 * (*(_QWORD *)v276[2] != (_QWORD)v276)) = v275;
                    *(_QWORD *)(v275 + 8) = v276;
LABEL_425:
                    v276[2] = v275;
                    break;
                  }
                }
                else if (!v277 || (v279 = *(unsigned __int8 *)(v277 + 24), v278 = (_BYTE *)(v277 + 24), v279))
                {
                  if (*(uint64_t **)v275 == v273)
                  {
                    v309 = v273[1];
                    *(_QWORD *)v275 = v309;
                    if (v309)
                    {
                      *(_QWORD *)(v309 + 16) = v275;
                      v276 = *(uint64_t **)(v275 + 16);
                    }
                    v273[2] = (uint64_t)v276;
                    *(_QWORD *)(*(_QWORD *)(v275 + 16) + 8 * (**(_QWORD **)(v275 + 16) != v275)) = v273;
                    v273[1] = v275;
                    *(_QWORD *)(v275 + 16) = v273;
                    v276 = (uint64_t *)v273[2];
                    *((_BYTE *)v273 + 24) = 1;
                    *((_BYTE *)v276 + 24) = 0;
                    v275 = v276[1];
                    v285 = *(uint64_t **)v275;
                    v276[1] = *(_QWORD *)v275;
                    if (v285)
LABEL_423:
                      v285[2] = (uint64_t)v276;
                  }
                  else
                  {
                    *(_BYTE *)(v275 + 24) = 1;
                    *((_BYTE *)v276 + 24) = 0;
                    v275 = v276[1];
                    v285 = *(uint64_t **)v275;
                    v276[1] = *(_QWORD *)v275;
                    if (v285)
                      goto LABEL_423;
                  }
                  *(_QWORD *)(v275 + 16) = v276[2];
                  *(_QWORD *)(v276[2] + 8 * (*(_QWORD *)v276[2] != (_QWORD)v276)) = v275;
                  *(_QWORD *)v275 = v276;
                  goto LABEL_425;
                }
                *(_BYTE *)(v275 + 24) = 1;
                v273 = v276;
                *((_BYTE *)v276 + 24) = v276 == v274;
                *v278 = 1;
              }
              while (v276 != v274);
            }
            ++v433;
          }
          objc_msgSend(*((id *)v272 + 5), "objectAtIndexedSubscript:", v265);
          v286 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v286, "floatValue");
          v288 = v287;

          v289 = v432;
          v290 = &v432;
LABEL_429:
          v291 = v290;
          if (v289)
          {
            while (1)
            {
              v290 = (uint64_t **)v289;
              v292 = v289[4];
              if (v292 > (unint64_t)CFSTR(">"))
              {
                v289 = *v290;
                goto LABEL_429;
              }
              if (v292 >= (unint64_t)CFSTR(">"))
                break;
              v289 = v290[1];
              if (!v289)
              {
                v291 = v290 + 1;
                goto LABEL_434;
              }
            }
            v293 = v290;
          }
          else
          {
LABEL_434:
            v293 = operator new(0x30uLL);
            *((_QWORD *)v293 + 4) = CFSTR(">");
            *((_QWORD *)v293 + 5) = 0;
            *(_QWORD *)v293 = 0;
            *((_QWORD *)v293 + 1) = 0;
            *((_QWORD *)v293 + 2) = v290;
            *v291 = (uint64_t *)v293;
            v294 = (uint64_t *)v293;
            if (*v431)
            {
              v431 = (uint64_t **)*v431;
              v294 = *v291;
            }
            v295 = v432;
            v15 = v294 == v432;
            *((_BYTE *)v294 + 24) = v294 == v432;
            if (!v15)
            {
              do
              {
                v296 = v294[2];
                if (*(_BYTE *)(v296 + 24))
                  break;
                v297 = *(uint64_t **)(v296 + 16);
                v298 = *v297;
                if (*v297 == v296)
                {
                  v301 = v297[1];
                  if (!v301 || (v302 = *(unsigned __int8 *)(v301 + 24), v299 = (_BYTE *)(v301 + 24), v302))
                  {
                    if (*(uint64_t **)v296 == v294)
                    {
                      *(_BYTE *)(v296 + 24) = 1;
                      *((_BYTE *)v297 + 24) = 0;
                      v305 = *(_QWORD *)(v296 + 8);
                      *v297 = v305;
                      if (v305)
                        goto LABEL_451;
                    }
                    else
                    {
                      v303 = *(uint64_t **)(v296 + 8);
                      v304 = *v303;
                      *(_QWORD *)(v296 + 8) = *v303;
                      if (v304)
                      {
                        *(_QWORD *)(v304 + 16) = v296;
                        v297 = *(uint64_t **)(v296 + 16);
                      }
                      v303[2] = (uint64_t)v297;
                      *(_QWORD *)(*(_QWORD *)(v296 + 16) + 8 * (**(_QWORD **)(v296 + 16) != v296)) = v303;
                      *v303 = v296;
                      *(_QWORD *)(v296 + 16) = v303;
                      v297 = (uint64_t *)v303[2];
                      v296 = *v297;
                      *((_BYTE *)v303 + 24) = 1;
                      *((_BYTE *)v297 + 24) = 0;
                      v305 = *(_QWORD *)(v296 + 8);
                      *v297 = v305;
                      if (v305)
LABEL_451:
                        *(_QWORD *)(v305 + 16) = v297;
                    }
                    *(_QWORD *)(v296 + 16) = v297[2];
                    *(_QWORD *)(v297[2] + 8 * (*(_QWORD *)v297[2] != (_QWORD)v297)) = v296;
                    *(_QWORD *)(v296 + 8) = v297;
LABEL_458:
                    v297[2] = v296;
                    break;
                  }
                }
                else if (!v298 || (v300 = *(unsigned __int8 *)(v298 + 24), v299 = (_BYTE *)(v298 + 24), v300))
                {
                  if (*(uint64_t **)v296 == v294)
                  {
                    v310 = v294[1];
                    *(_QWORD *)v296 = v310;
                    if (v310)
                    {
                      *(_QWORD *)(v310 + 16) = v296;
                      v297 = *(uint64_t **)(v296 + 16);
                    }
                    v294[2] = (uint64_t)v297;
                    *(_QWORD *)(*(_QWORD *)(v296 + 16) + 8 * (**(_QWORD **)(v296 + 16) != v296)) = v294;
                    v294[1] = v296;
                    *(_QWORD *)(v296 + 16) = v294;
                    v297 = (uint64_t *)v294[2];
                    *((_BYTE *)v294 + 24) = 1;
                    *((_BYTE *)v297 + 24) = 0;
                    v296 = v297[1];
                    v306 = *(uint64_t **)v296;
                    v297[1] = *(_QWORD *)v296;
                    if (v306)
LABEL_456:
                      v306[2] = (uint64_t)v297;
                  }
                  else
                  {
                    *(_BYTE *)(v296 + 24) = 1;
                    *((_BYTE *)v297 + 24) = 0;
                    v296 = v297[1];
                    v306 = *(uint64_t **)v296;
                    v297[1] = *(_QWORD *)v296;
                    if (v306)
                      goto LABEL_456;
                  }
                  *(_QWORD *)(v296 + 16) = v297[2];
                  *(_QWORD *)(v297[2] + 8 * (*(_QWORD *)v297[2] != (_QWORD)v297)) = v296;
                  *(_QWORD *)v296 = v297;
                  goto LABEL_458;
                }
                *(_BYTE *)(v296 + 24) = 1;
                v294 = v297;
                *((_BYTE *)v297 + 24) = v297 == v295;
                *v299 = 1;
              }
              while (v297 != v295);
            }
            ++v433;
          }
          objc_msgSend(*((id *)v293 + 5), "objectAtIndexedSubscript:", v265);
          v307 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v307, "floatValue");
          v267 = v288 + v267;
          v266 = v308 + v266;

          ++v265;
        }
        while (v436 > v265);
        if (v436)
        {
          v364 = 0;
          v365 = 1.0;
          v264 = 1.0;
          do
          {
            v366 = v432;
            v367 = &v432;
LABEL_580:
            v368 = v367;
            if (v366)
            {
              while (1)
              {
                v367 = (uint64_t **)v366;
                v369 = v366[4];
                if (v369 > (unint64_t)CFSTR("<="))
                {
                  v366 = *v367;
                  goto LABEL_580;
                }
                if (v369 >= (unint64_t)CFSTR("<="))
                  break;
                v366 = v367[1];
                if (!v366)
                {
                  v368 = v367 + 1;
                  goto LABEL_585;
                }
              }
              v370 = v367;
            }
            else
            {
LABEL_585:
              v370 = operator new(0x30uLL);
              *((_QWORD *)v370 + 4) = CFSTR("<=");
              *((_QWORD *)v370 + 5) = 0;
              *(_QWORD *)v370 = 0;
              *((_QWORD *)v370 + 1) = 0;
              *((_QWORD *)v370 + 2) = v367;
              *v368 = (uint64_t *)v370;
              v371 = (uint64_t *)v370;
              if (*v431)
              {
                v431 = (uint64_t **)*v431;
                v371 = *v368;
              }
              v372 = v432;
              v15 = v371 == v432;
              *((_BYTE *)v371 + 24) = v371 == v432;
              if (!v15)
              {
                do
                {
                  v373 = v371[2];
                  if (*(_BYTE *)(v373 + 24))
                    break;
                  v374 = *(uint64_t **)(v373 + 16);
                  v375 = *v374;
                  if (*v374 == v373)
                  {
                    v378 = v374[1];
                    if (!v378 || (v379 = *(unsigned __int8 *)(v378 + 24), v376 = (_BYTE *)(v378 + 24), v379))
                    {
                      if (*(uint64_t **)v373 == v371)
                      {
                        *(_BYTE *)(v373 + 24) = 1;
                        *((_BYTE *)v374 + 24) = 0;
                        v382 = *(_QWORD *)(v373 + 8);
                        *v374 = v382;
                        if (v382)
                          goto LABEL_602;
                      }
                      else
                      {
                        v380 = *(uint64_t **)(v373 + 8);
                        v381 = *v380;
                        *(_QWORD *)(v373 + 8) = *v380;
                        if (v381)
                        {
                          *(_QWORD *)(v381 + 16) = v373;
                          v374 = *(uint64_t **)(v373 + 16);
                        }
                        v380[2] = (uint64_t)v374;
                        *(_QWORD *)(*(_QWORD *)(v373 + 16) + 8 * (**(_QWORD **)(v373 + 16) != v373)) = v380;
                        *v380 = v373;
                        *(_QWORD *)(v373 + 16) = v380;
                        v374 = (uint64_t *)v380[2];
                        v373 = *v374;
                        *((_BYTE *)v380 + 24) = 1;
                        *((_BYTE *)v374 + 24) = 0;
                        v382 = *(_QWORD *)(v373 + 8);
                        *v374 = v382;
                        if (v382)
LABEL_602:
                          *(_QWORD *)(v382 + 16) = v374;
                      }
                      *(_QWORD *)(v373 + 16) = v374[2];
                      *(_QWORD *)(v374[2] + 8 * (*(_QWORD *)v374[2] != (_QWORD)v374)) = v373;
                      *(_QWORD *)(v373 + 8) = v374;
LABEL_609:
                      v374[2] = v373;
                      break;
                    }
                  }
                  else if (!v375 || (v377 = *(unsigned __int8 *)(v375 + 24), v376 = (_BYTE *)(v375 + 24), v377))
                  {
                    if (*(uint64_t **)v373 == v371)
                    {
                      v407 = v371[1];
                      *(_QWORD *)v373 = v407;
                      if (v407)
                      {
                        *(_QWORD *)(v407 + 16) = v373;
                        v374 = *(uint64_t **)(v373 + 16);
                      }
                      v371[2] = (uint64_t)v374;
                      *(_QWORD *)(*(_QWORD *)(v373 + 16) + 8 * (**(_QWORD **)(v373 + 16) != v373)) = v371;
                      v371[1] = v373;
                      *(_QWORD *)(v373 + 16) = v371;
                      v374 = (uint64_t *)v371[2];
                      *((_BYTE *)v371 + 24) = 1;
                      *((_BYTE *)v374 + 24) = 0;
                      v373 = v374[1];
                      v383 = *(uint64_t **)v373;
                      v374[1] = *(_QWORD *)v373;
                      if (v383)
LABEL_607:
                        v383[2] = (uint64_t)v374;
                    }
                    else
                    {
                      *(_BYTE *)(v373 + 24) = 1;
                      *((_BYTE *)v374 + 24) = 0;
                      v373 = v374[1];
                      v383 = *(uint64_t **)v373;
                      v374[1] = *(_QWORD *)v373;
                      if (v383)
                        goto LABEL_607;
                    }
                    *(_QWORD *)(v373 + 16) = v374[2];
                    *(_QWORD *)(v374[2] + 8 * (*(_QWORD *)v374[2] != (_QWORD)v374)) = v373;
                    *(_QWORD *)v373 = v374;
                    goto LABEL_609;
                  }
                  *(_BYTE *)(v373 + 24) = 1;
                  v371 = v374;
                  *((_BYTE *)v374 + 24) = v374 == v372;
                  *v376 = 1;
                }
                while (v374 != v372);
              }
              ++v433;
            }
            objc_msgSend(*((id *)v370 + 5), "objectAtIndexedSubscript:", v364);
            v384 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v384, "floatValue");
            v386 = v385;

            v387 = v432;
            v388 = &v432;
LABEL_613:
            v389 = v388;
            if (v387)
            {
              while (1)
              {
                v388 = (uint64_t **)v387;
                v390 = v387[4];
                if (v390 > (unint64_t)CFSTR(">"))
                {
                  v387 = *v388;
                  goto LABEL_613;
                }
                if (v390 >= (unint64_t)CFSTR(">"))
                  break;
                v387 = v388[1];
                if (!v387)
                {
                  v389 = v388 + 1;
                  goto LABEL_618;
                }
              }
              v391 = v388;
            }
            else
            {
LABEL_618:
              v391 = operator new(0x30uLL);
              *((_QWORD *)v391 + 4) = CFSTR(">");
              *((_QWORD *)v391 + 5) = 0;
              *(_QWORD *)v391 = 0;
              *((_QWORD *)v391 + 1) = 0;
              *((_QWORD *)v391 + 2) = v388;
              *v389 = (uint64_t *)v391;
              v392 = (uint64_t *)v391;
              if (*v431)
              {
                v431 = (uint64_t **)*v431;
                v392 = *v389;
              }
              v393 = v432;
              v15 = v392 == v432;
              *((_BYTE *)v392 + 24) = v392 == v432;
              if (!v15)
              {
                do
                {
                  v394 = v392[2];
                  if (*(_BYTE *)(v394 + 24))
                    break;
                  v395 = *(uint64_t **)(v394 + 16);
                  v396 = *v395;
                  if (*v395 == v394)
                  {
                    v399 = v395[1];
                    if (!v399 || (v400 = *(unsigned __int8 *)(v399 + 24), v397 = (_BYTE *)(v399 + 24), v400))
                    {
                      if (*(uint64_t **)v394 == v392)
                      {
                        *(_BYTE *)(v394 + 24) = 1;
                        *((_BYTE *)v395 + 24) = 0;
                        v403 = *(_QWORD *)(v394 + 8);
                        *v395 = v403;
                        if (v403)
                          goto LABEL_635;
                      }
                      else
                      {
                        v401 = *(uint64_t **)(v394 + 8);
                        v402 = *v401;
                        *(_QWORD *)(v394 + 8) = *v401;
                        if (v402)
                        {
                          *(_QWORD *)(v402 + 16) = v394;
                          v395 = *(uint64_t **)(v394 + 16);
                        }
                        v401[2] = (uint64_t)v395;
                        *(_QWORD *)(*(_QWORD *)(v394 + 16) + 8 * (**(_QWORD **)(v394 + 16) != v394)) = v401;
                        *v401 = v394;
                        *(_QWORD *)(v394 + 16) = v401;
                        v395 = (uint64_t *)v401[2];
                        v394 = *v395;
                        *((_BYTE *)v401 + 24) = 1;
                        *((_BYTE *)v395 + 24) = 0;
                        v403 = *(_QWORD *)(v394 + 8);
                        *v395 = v403;
                        if (v403)
LABEL_635:
                          *(_QWORD *)(v403 + 16) = v395;
                      }
                      *(_QWORD *)(v394 + 16) = v395[2];
                      *(_QWORD *)(v395[2] + 8 * (*(_QWORD *)v395[2] != (_QWORD)v395)) = v394;
                      *(_QWORD *)(v394 + 8) = v395;
LABEL_642:
                      v395[2] = v394;
                      break;
                    }
                  }
                  else if (!v396 || (v398 = *(unsigned __int8 *)(v396 + 24), v397 = (_BYTE *)(v396 + 24), v398))
                  {
                    if (*(uint64_t **)v394 == v392)
                    {
                      v408 = v392[1];
                      *(_QWORD *)v394 = v408;
                      if (v408)
                      {
                        *(_QWORD *)(v408 + 16) = v394;
                        v395 = *(uint64_t **)(v394 + 16);
                      }
                      v392[2] = (uint64_t)v395;
                      *(_QWORD *)(*(_QWORD *)(v394 + 16) + 8 * (**(_QWORD **)(v394 + 16) != v394)) = v392;
                      v392[1] = v394;
                      *(_QWORD *)(v394 + 16) = v392;
                      v395 = (uint64_t *)v392[2];
                      *((_BYTE *)v392 + 24) = 1;
                      *((_BYTE *)v395 + 24) = 0;
                      v394 = v395[1];
                      v404 = *(uint64_t **)v394;
                      v395[1] = *(_QWORD *)v394;
                      if (v404)
LABEL_640:
                        v404[2] = (uint64_t)v395;
                    }
                    else
                    {
                      *(_BYTE *)(v394 + 24) = 1;
                      *((_BYTE *)v395 + 24) = 0;
                      v394 = v395[1];
                      v404 = *(uint64_t **)v394;
                      v395[1] = *(_QWORD *)v394;
                      if (v404)
                        goto LABEL_640;
                    }
                    *(_QWORD *)(v394 + 16) = v395[2];
                    *(_QWORD *)(v395[2] + 8 * (*(_QWORD *)v395[2] != (_QWORD)v395)) = v394;
                    *(_QWORD *)v394 = v395;
                    goto LABEL_642;
                  }
                  *(_BYTE *)(v394 + 24) = 1;
                  v392 = v395;
                  *((_BYTE *)v395 + 24) = v395 == v393;
                  *v397 = 1;
                }
                while (v395 != v393);
              }
              ++v433;
            }
            objc_msgSend(*((id *)v391 + 5), "objectAtIndexedSubscript:", v364);
            v405 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v405, "floatValue");
            v264 = v264 - (float)((float)(v386 * (float)(1.0 / v267)) * (float)(v386 * (float)(1.0 / v267)));
            v365 = v365 - (float)((float)(v406 * (float)(1.0 / v266)) * (float)(v406 * (float)(1.0 / v266)));

            ++v364;
          }
          while (v436 > v364);
          goto LABEL_660;
        }
      }
      else
      {
        v266 = 0.0;
        v267 = 0.0;
      }
      v365 = 1.0;
LABEL_660:
      *(float *)&v409 = (float)((float)(v264 * v267) + (float)(v365 * v266)) / (float)-[NSArray count](v6, "count");
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v409);
      v334 = objc_claimAutoreleasedReturnValue();
      v410 = v438;
      v336 = &v438;
LABEL_662:
      v337 = v336;
      if (v410)
      {
        do
        {
          v336 = (uint64_t **)v410;
          v411 = v410[4];
          if ((unint64_t)v428 < v411)
          {
            v410 = *v336;
            goto LABEL_662;
          }
          if (v411 >= (unint64_t)v428)
            goto LABEL_669;
          v410 = v336[1];
        }
        while (v410);
        v337 = v336 + 1;
      }
      goto LABEL_667;
    }
    v240 = 1.0;
    if (v436)
    {
      v241 = 0;
      v242 = 0.0;
      do
      {
        v243 = v432;
        v244 = &v432;
LABEL_353:
        v245 = v244;
        if (v243)
        {
          while (1)
          {
            v244 = (uint64_t **)v243;
            v246 = v243[4];
            if (v246 > (unint64_t)CFSTR(">"))
            {
              v243 = *v244;
              goto LABEL_353;
            }
            if (v246 >= (unint64_t)CFSTR(">"))
              break;
            v243 = v244[1];
            if (!v243)
            {
              v245 = v244 + 1;
              goto LABEL_358;
            }
          }
          v247 = v244;
        }
        else
        {
LABEL_358:
          v247 = operator new(0x30uLL);
          *((_QWORD *)v247 + 4) = CFSTR(">");
          *((_QWORD *)v247 + 5) = 0;
          *(_QWORD *)v247 = 0;
          *((_QWORD *)v247 + 1) = 0;
          *((_QWORD *)v247 + 2) = v244;
          *v245 = (uint64_t *)v247;
          v248 = (uint64_t *)v247;
          if (*v431)
          {
            v431 = (uint64_t **)*v431;
            v248 = *v245;
          }
          v249 = v432;
          v15 = v248 == v432;
          *((_BYTE *)v248 + 24) = v248 == v432;
          if (!v15)
          {
            do
            {
              v250 = v248[2];
              if (*(_BYTE *)(v250 + 24))
                break;
              v251 = *(uint64_t **)(v250 + 16);
              v252 = *v251;
              if (*v251 == v250)
              {
                v255 = v251[1];
                if (!v255 || (v256 = *(unsigned __int8 *)(v255 + 24), v253 = (_BYTE *)(v255 + 24), v256))
                {
                  if (*(uint64_t **)v250 == v248)
                  {
                    *(_BYTE *)(v250 + 24) = 1;
                    *((_BYTE *)v251 + 24) = 0;
                    v259 = *(_QWORD *)(v250 + 8);
                    *v251 = v259;
                    if (v259)
                      goto LABEL_375;
                  }
                  else
                  {
                    v257 = *(uint64_t **)(v250 + 8);
                    v258 = *v257;
                    *(_QWORD *)(v250 + 8) = *v257;
                    if (v258)
                    {
                      *(_QWORD *)(v258 + 16) = v250;
                      v251 = *(uint64_t **)(v250 + 16);
                    }
                    v257[2] = (uint64_t)v251;
                    *(_QWORD *)(*(_QWORD *)(v250 + 16) + 8 * (**(_QWORD **)(v250 + 16) != v250)) = v257;
                    *v257 = v250;
                    *(_QWORD *)(v250 + 16) = v257;
                    v251 = (uint64_t *)v257[2];
                    v250 = *v251;
                    *((_BYTE *)v257 + 24) = 1;
                    *((_BYTE *)v251 + 24) = 0;
                    v259 = *(_QWORD *)(v250 + 8);
                    *v251 = v259;
                    if (v259)
LABEL_375:
                      *(_QWORD *)(v259 + 16) = v251;
                  }
                  *(_QWORD *)(v250 + 16) = v251[2];
                  *(_QWORD *)(v251[2] + 8 * (*(_QWORD *)v251[2] != (_QWORD)v251)) = v250;
                  *(_QWORD *)(v250 + 8) = v251;
LABEL_382:
                  v251[2] = v250;
                  break;
                }
              }
              else if (!v252 || (v254 = *(unsigned __int8 *)(v252 + 24), v253 = (_BYTE *)(v252 + 24), v254))
              {
                if (*(uint64_t **)v250 == v248)
                {
                  v263 = v248[1];
                  *(_QWORD *)v250 = v263;
                  if (v263)
                  {
                    *(_QWORD *)(v263 + 16) = v250;
                    v251 = *(uint64_t **)(v250 + 16);
                  }
                  v248[2] = (uint64_t)v251;
                  *(_QWORD *)(*(_QWORD *)(v250 + 16) + 8 * (**(_QWORD **)(v250 + 16) != v250)) = v248;
                  v248[1] = v250;
                  *(_QWORD *)(v250 + 16) = v248;
                  v251 = (uint64_t *)v248[2];
                  *((_BYTE *)v248 + 24) = 1;
                  *((_BYTE *)v251 + 24) = 0;
                  v250 = v251[1];
                  v260 = *(uint64_t **)v250;
                  v251[1] = *(_QWORD *)v250;
                  if (v260)
LABEL_380:
                    v260[2] = (uint64_t)v251;
                }
                else
                {
                  *(_BYTE *)(v250 + 24) = 1;
                  *((_BYTE *)v251 + 24) = 0;
                  v250 = v251[1];
                  v260 = *(uint64_t **)v250;
                  v251[1] = *(_QWORD *)v250;
                  if (v260)
                    goto LABEL_380;
                }
                *(_QWORD *)(v250 + 16) = v251[2];
                *(_QWORD *)(v251[2] + 8 * (*(_QWORD *)v251[2] != (_QWORD)v251)) = v250;
                *(_QWORD *)v250 = v251;
                goto LABEL_382;
              }
              *(_BYTE *)(v250 + 24) = 1;
              v248 = v251;
              *((_BYTE *)v251 + 24) = v251 == v249;
              *v253 = 1;
            }
            while (v251 != v249);
          }
          ++v433;
        }
        objc_msgSend(*((id *)v247 + 5), "objectAtIndexedSubscript:", v241);
        v261 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v261, "floatValue");
        v242 = v262 + v242;

        ++v241;
      }
      while (v436 > v241);
      if (v436)
      {
        v311 = 0;
        v240 = 1.0;
        v312 = 1.0 / v242;
        do
        {
          v313 = v432;
          v314 = &v432;
LABEL_478:
          v315 = v314;
          if (v313)
          {
            while (1)
            {
              v314 = (uint64_t **)v313;
              v316 = v313[4];
              if (v316 > (unint64_t)CFSTR(">"))
              {
                v313 = *v314;
                goto LABEL_478;
              }
              if (v316 >= (unint64_t)CFSTR(">"))
                break;
              v313 = v314[1];
              if (!v313)
              {
                v315 = v314 + 1;
                goto LABEL_483;
              }
            }
            v317 = v314;
          }
          else
          {
LABEL_483:
            v317 = operator new(0x30uLL);
            *((_QWORD *)v317 + 4) = CFSTR(">");
            *((_QWORD *)v317 + 5) = 0;
            *(_QWORD *)v317 = 0;
            *((_QWORD *)v317 + 1) = 0;
            *((_QWORD *)v317 + 2) = v314;
            *v315 = (uint64_t *)v317;
            v318 = (uint64_t *)v317;
            if (*v431)
            {
              v431 = (uint64_t **)*v431;
              v318 = *v315;
            }
            v319 = v432;
            v15 = v318 == v432;
            *((_BYTE *)v318 + 24) = v318 == v432;
            if (!v15)
            {
              do
              {
                v320 = v318[2];
                if (*(_BYTE *)(v320 + 24))
                  break;
                v321 = *(uint64_t **)(v320 + 16);
                v322 = *v321;
                if (*v321 == v320)
                {
                  v325 = v321[1];
                  if (!v325 || (v326 = *(unsigned __int8 *)(v325 + 24), v323 = (_BYTE *)(v325 + 24), v326))
                  {
                    if (*(uint64_t **)v320 == v318)
                    {
                      *(_BYTE *)(v320 + 24) = 1;
                      *((_BYTE *)v321 + 24) = 0;
                      v329 = *(_QWORD *)(v320 + 8);
                      *v321 = v329;
                      if (v329)
                        goto LABEL_500;
                    }
                    else
                    {
                      v327 = *(uint64_t **)(v320 + 8);
                      v328 = *v327;
                      *(_QWORD *)(v320 + 8) = *v327;
                      if (v328)
                      {
                        *(_QWORD *)(v328 + 16) = v320;
                        v321 = *(uint64_t **)(v320 + 16);
                      }
                      v327[2] = (uint64_t)v321;
                      *(_QWORD *)(*(_QWORD *)(v320 + 16) + 8 * (**(_QWORD **)(v320 + 16) != v320)) = v327;
                      *v327 = v320;
                      *(_QWORD *)(v320 + 16) = v327;
                      v321 = (uint64_t *)v327[2];
                      v320 = *v321;
                      *((_BYTE *)v327 + 24) = 1;
                      *((_BYTE *)v321 + 24) = 0;
                      v329 = *(_QWORD *)(v320 + 8);
                      *v321 = v329;
                      if (v329)
LABEL_500:
                        *(_QWORD *)(v329 + 16) = v321;
                    }
                    *(_QWORD *)(v320 + 16) = v321[2];
                    *(_QWORD *)(v321[2] + 8 * (*(_QWORD *)v321[2] != (_QWORD)v321)) = v320;
                    *(_QWORD *)(v320 + 8) = v321;
LABEL_507:
                    v321[2] = v320;
                    break;
                  }
                }
                else if (!v322 || (v324 = *(unsigned __int8 *)(v322 + 24), v323 = (_BYTE *)(v322 + 24), v324))
                {
                  if (*(uint64_t **)v320 == v318)
                  {
                    v333 = v318[1];
                    *(_QWORD *)v320 = v333;
                    if (v333)
                    {
                      *(_QWORD *)(v333 + 16) = v320;
                      v321 = *(uint64_t **)(v320 + 16);
                    }
                    v318[2] = (uint64_t)v321;
                    *(_QWORD *)(*(_QWORD *)(v320 + 16) + 8 * (**(_QWORD **)(v320 + 16) != v320)) = v318;
                    v318[1] = v320;
                    *(_QWORD *)(v320 + 16) = v318;
                    v321 = (uint64_t *)v318[2];
                    *((_BYTE *)v318 + 24) = 1;
                    *((_BYTE *)v321 + 24) = 0;
                    v320 = v321[1];
                    v330 = *(uint64_t **)v320;
                    v321[1] = *(_QWORD *)v320;
                    if (v330)
LABEL_505:
                      v330[2] = (uint64_t)v321;
                  }
                  else
                  {
                    *(_BYTE *)(v320 + 24) = 1;
                    *((_BYTE *)v321 + 24) = 0;
                    v320 = v321[1];
                    v330 = *(uint64_t **)v320;
                    v321[1] = *(_QWORD *)v320;
                    if (v330)
                      goto LABEL_505;
                  }
                  *(_QWORD *)(v320 + 16) = v321[2];
                  *(_QWORD *)(v321[2] + 8 * (*(_QWORD *)v321[2] != (_QWORD)v321)) = v320;
                  *(_QWORD *)v320 = v321;
                  goto LABEL_507;
                }
                *(_BYTE *)(v320 + 24) = 1;
                v318 = v321;
                *((_BYTE *)v321 + 24) = v321 == v319;
                *v323 = 1;
              }
              while (v321 != v319);
            }
            ++v433;
          }
          objc_msgSend(*((id *)v317 + 5), "objectAtIndexedSubscript:", v311);
          v331 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v331, "floatValue");
          v240 = v240 - (float)((float)(v332 * v312) * (float)(v332 * v312));

          ++v311;
        }
        while (v436 > v311);
      }
    }
    *(float *)&v214 = v240;
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v214);
    v334 = objc_claimAutoreleasedReturnValue();
    v335 = v438;
    v336 = &v438;
LABEL_519:
    v337 = v336;
    if (!v335)
      goto LABEL_667;
    while (1)
    {
      v336 = (uint64_t **)v335;
      v338 = v335[4];
      if ((unint64_t)v428 < v338)
      {
        v335 = *v336;
        goto LABEL_519;
      }
      if (v338 >= (unint64_t)v428)
        break;
      v335 = v336[1];
      if (!v335)
      {
        v337 = v336 + 1;
        goto LABEL_667;
      }
    }
LABEL_669:
    v412 = (uint64_t *)v336;
LABEL_33:
    v30 = (void *)v412[5];
    v412[5] = v334;

  }
  *a3 = &unk_24F059310;
  a3[1] = &unk_24F059310;
  v414 = v437;
  if (v437 != &v438)
  {
    v415 = (uint64_t *)&unk_24F059310;
    do
    {
      objc_msgSend(v414[5], "floatValue");
      v417 = v416;
      objc_msgSend(v415, "floatValue");
      if (v417 < v418)
      {
        v419 = v414[4];
        v420 = v414[5];
        v421 = *a3;
        *a3 = v419;

        a3[1] = v420;
        v415 = v420;
      }
      v422 = v414[1];
      if (v422)
      {
        do
        {
          v423 = (uint64_t **)v422;
          v422 = (uint64_t *)*v422;
        }
        while (v422);
      }
      else
      {
        do
        {
          v423 = (uint64_t **)v414[2];
          v15 = *v423 == (uint64_t *)v414;
          v414 = v423;
        }
        while (!v15);
      }
      v414 = v423;
    }
    while (v423 != &v438);
  }
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v431, v432);

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v434, v435);
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v437, v438);

}

void sub_227B8381C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, uint64_t a19, char a20,_QWORD *a21,uint64_t a22,char a23,_QWORD *a24,uint64_t a25,char a26,_QWORD *a27)
{
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&a20, a21);

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&a23, a24);
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&a26, a27);

  _Unwind_Resume(a1);
}

void GKCDecisionTree::splitOnValueOfAttribute(GKCDecisionTree *this@<X0>, NSArray *a2@<X1>, NSNumber *a3@<X2>, uint64_t a4@<X3>, _QWORD **a5@<X8>)
{
  NSArray *v7;
  NSNumber *v8;
  uint64_t **v9;
  void *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  float v15;
  float v16;
  void *v17;
  float v18;
  id v19;
  id v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t *v27;
  void *v28;
  BOOL v29;
  id v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t *v38;
  void *v39;
  id v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t *v44;
  uint64_t **v45;
  uint64_t **v46;
  unint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t *v50;
  void *v51;
  void *v52;
  NSArray *v53;
  void *v55;
  void *v56;
  NSNumber *v57;
  void *v58;
  _QWORD v59[2];
  _QWORD v60[2];
  _QWORD v61[2];
  _QWORD v62[3];

  v62[2] = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  v8 = a3;
  a5[1] = 0;
  v9 = a5 + 1;
  a5[2] = 0;
  *a5 = a5 + 1;
  v61[0] = CFSTR("predicate");
  v53 = v7;
  v57 = v8;
  objc_msgSend(MEMORY[0x24BDD1758], "predicateWithFormat:", CFSTR("SELF <= %@"), v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v61[1] = CFSTR("value");
  v62[0] = v10;
  v62[1] = v8;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v62, v61, 2);
  v55 = (void *)objc_claimAutoreleasedReturnValue();

  v59[0] = CFSTR("predicate");
  objc_msgSend(MEMORY[0x24BDD1758], "predicateWithFormat:", CFSTR("SELF > %@"), v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v59[1] = CFSTR("value");
  v60[0] = v11;
  v60[1] = v8;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v60, v59, 2);
  v56 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = 0;
  v13 = 0;
  while (-[NSArray count](v7, "count") > v12)
  {
    -[NSArray objectAtIndexedSubscript:](v7, "objectAtIndexedSubscript:", v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "objectAtIndexedSubscript:", a4);
    v58 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v58, "floatValue");
    v16 = v15;
    -[NSNumber floatValue](v57, "floatValue");
    v17 = v55;
    if (v16 > v18)
      v17 = v56;
    v19 = v17;

    v20 = v19;
    v13 = v20;
    v21 = *v9;
    v22 = a5 + 1;
    v23 = a5 + 1;
    if (*v9)
    {
      while (1)
      {
        while (1)
        {
          v23 = (uint64_t **)v21;
          v24 = v21[4];
          if ((unint64_t)v20 >= v24)
            break;
          v21 = *v23;
          v22 = v23;
          if (!*v23)
            goto LABEL_12;
        }
        if (v24 >= (unint64_t)v20)
          break;
        v21 = v23[1];
        if (!v21)
        {
          v22 = v23 + 1;
          goto LABEL_12;
        }
      }
      v28 = v20;
      v25 = (uint64_t *)v23;
    }
    else
    {
LABEL_12:
      v25 = (uint64_t *)operator new(0x30uLL);
      v25[4] = (uint64_t)v13;
      v25[5] = 0;
      *v25 = 0;
      v25[1] = 0;
      v25[2] = (uint64_t)v23;
      *v22 = v25;
      v26 = (_QWORD *)**a5;
      v27 = v25;
      if (v26)
      {
        *a5 = v26;
        v27 = *v22;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a5[1], v27);
      v28 = 0;
      a5[2] = (_QWORD *)((char *)a5[2] + 1);
    }
    v29 = v25[5] == 0;

    if (v29)
    {
      v40 = objc_alloc(MEMORY[0x24BDBCEB8]);
      -[NSArray objectAtIndexedSubscript:](v7, "objectAtIndexedSubscript:", v12);
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = objc_msgSend(v40, "initWithObjects:", v39, 0);
      v42 = v13;
      v43 = v42;
      v44 = *v9;
      v45 = a5 + 1;
      v46 = a5 + 1;
      if (*v9)
      {
        while (1)
        {
          while (1)
          {
            v46 = (uint64_t **)v44;
            v47 = v44[4];
            if ((unint64_t)v42 >= v47)
              break;
            v44 = *v46;
            v45 = v46;
            if (!*v46)
              goto LABEL_34;
          }
          if (v47 >= (unint64_t)v42)
            break;
          v44 = v46[1];
          if (!v44)
          {
            v45 = v46 + 1;
            goto LABEL_34;
          }
        }
        v48 = (uint64_t *)v46;
      }
      else
      {
LABEL_34:
        v48 = (uint64_t *)operator new(0x30uLL);
        v48[4] = (uint64_t)v43;
        v48[5] = 0;
        *v48 = 0;
        v48[1] = 0;
        v48[2] = (uint64_t)v46;
        *v45 = v48;
        v49 = (_QWORD *)**a5;
        v50 = v48;
        if (v49)
        {
          *a5 = v49;
          v50 = *v45;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a5[1], v50);
        v43 = 0;
        a5[2] = (_QWORD *)((char *)a5[2] + 1);
      }
      v52 = (void *)v48[5];
      v48[5] = v41;

      v7 = v53;
    }
    else
    {
      v30 = v13;
      v31 = (uint64_t)v30;
      v32 = *v9;
      v33 = a5 + 1;
      v34 = a5 + 1;
      if (*v9)
      {
        while (1)
        {
          while (1)
          {
            v34 = (uint64_t **)v32;
            v35 = v32[4];
            if ((unint64_t)v30 >= v35)
              break;
            v32 = *v34;
            v33 = v34;
            if (!*v34)
              goto LABEL_24;
          }
          if (v35 >= (unint64_t)v30)
            break;
          v32 = v34[1];
          if (!v32)
          {
            v33 = v34 + 1;
            goto LABEL_24;
          }
        }
        v39 = v30;
        v36 = (uint64_t *)v34;
      }
      else
      {
LABEL_24:
        v36 = (uint64_t *)operator new(0x30uLL);
        v36[4] = v31;
        v36[5] = 0;
        *v36 = 0;
        v36[1] = 0;
        v36[2] = (uint64_t)v34;
        *v33 = v36;
        v37 = (_QWORD *)**a5;
        v38 = v36;
        if (v37)
        {
          *a5 = v37;
          v38 = *v33;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a5[1], v38);
        v39 = 0;
        a5[2] = (_QWORD *)((char *)a5[2] + 1);
      }
      v51 = (void *)v36[5];
      -[NSArray objectAtIndexedSubscript:](v7, "objectAtIndexedSubscript:", v12);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v51, "addObject:", v43);
    }

    ++v12;
  }

}

void sub_227B83EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;
  uint64_t v15;

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v15, *(_QWORD **)(v15 + 8));
  _Unwind_Resume(a1);
}

id *std::pair<NSNumber * {__strong},NSNumber * {__strong}>::~pair(id *a1)
{

  return a1;
}

void GKCDecisionTree::binarySplitByAttributeValue(GKCDecisionTree *this@<X0>, NSArray *a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  NSArray *v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  void *v11;
  char **v12;
  id v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  void *v26;
  uint64_t *v27;
  void *v28;
  char *v29;
  void **v30;
  uint64_t **v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t *v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t **v55;
  uint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t *v59;
  NSArray *v60;
  char **v61;
  void *v62;
  void *v63;
  uint64_t **v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  _QWORD *v68[2];
  _QWORD v69[2];
  _QWORD v70[3];

  v70[2] = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v60 = v7;
  GKCDecisionTree::multiwaySplitByAttributeValue(this, v7, a3, &v67);
  v8 = v67;
  if (v67 != (uint64_t *)v68)
  {
    v61 = a4;
    do
    {
      v65 = 0;
      v66 = 0;
      v64 = &v65;
      v9 = (void *)v8[4];
      v10 = (void *)v8[5];
      v11 = operator new(0x30uLL);
      *((_QWORD *)v11 + 4) = v9;
      *((_QWORD *)v11 + 5) = 0;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = &v65;
      v65 = (uint64_t *)v11;
      if (*v64)
        v64 = (uint64_t **)*v64;
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11, (uint64_t *)v11);
      ++v66;
      objc_storeStrong((id *)v11 + 5, v10);
      v12 = v61;
      v13 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
      v14 = v67;
      if (v67 != (uint64_t *)v68)
      {
        do
        {
          v22 = v14[4] == v8[4] && v14[5] == v8[5];
          if (!v22)
            objc_msgSend(v13, "addObjectsFromArray:");
          v23 = (uint64_t *)v14[1];
          if (v23)
          {
            do
            {
              v24 = v23;
              v23 = (uint64_t *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v24 = (uint64_t *)v14[2];
              v22 = *v24 == (_QWORD)v14;
              v14 = v24;
            }
            while (!v22);
          }
          v14 = v24;
        }
        while (v24 != (uint64_t *)v68);
      }
      v63 = v13;
      objc_msgSend(MEMORY[0x24BDD1758], "predicateWithFormat:", CFSTR("SELF != %@"), v8[4], v60);
      v15 = objc_claimAutoreleasedReturnValue();
      v69[0] = CFSTR("predicate");
      v69[1] = CFSTR("value");
      v16 = v8[4];
      v70[0] = v15;
      v70[1] = v16;
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v70, v69, 2);
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = (void *)v17;
      v62 = (void *)v15;
      v19 = v65;
      v20 = &v65;
      v21 = &v65;
      if (v65)
      {
        while (1)
        {
          while (1)
          {
            v21 = (uint64_t **)v19;
            v25 = v19[4];
            if (v17 >= v25)
              break;
            v19 = *v21;
            v20 = v21;
            if (!*v21)
              goto LABEL_26;
          }
          if (v25 >= v17)
            break;
          v19 = v21[1];
          if (!v19)
          {
            v20 = v21 + 1;
            goto LABEL_26;
          }
        }
        v26 = v21;
      }
      else
      {
LABEL_26:
        v26 = operator new(0x30uLL);
        *((_QWORD *)v26 + 4) = v18;
        *((_QWORD *)v26 + 5) = 0;
        *(_QWORD *)v26 = 0;
        *((_QWORD *)v26 + 1) = 0;
        *((_QWORD *)v26 + 2) = v21;
        *v20 = (uint64_t *)v26;
        v27 = (uint64_t *)v26;
        if (*v64)
        {
          v64 = (uint64_t **)*v64;
          v27 = *v20;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v65, v27);
        v18 = 0;
        ++v66;
      }
      v28 = v62;
      objc_storeStrong((id *)v26 + 5, v63);

      v29 = v61[1];
      if (v29 >= v61[2])
      {
        v57 = std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::__push_back_slow_path<std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>> const&>(v61, &v64);
      }
      else
      {
        *((_QWORD *)v29 + 1) = 0;
        v30 = (void **)(v29 + 8);
        *((_QWORD *)v29 + 2) = 0;
        *(_QWORD *)v29 = v29 + 8;
        v31 = v64;
        if (v64 != &v65)
        {
          v32 = 0;
          v33 = v29 + 8;
LABEL_45:
          if (v32)
            v38 = v33;
          else
            v38 = v29 + 8;
          if (v32)
            v37 = v33 + 1;
          else
            v37 = v29 + 8;
          if (!*v37)
          {
            do
            {
LABEL_54:
              v41 = operator new(0x30uLL);
              v41[4] = v31[4];
              v41[5] = v31[5];
              *v41 = 0;
              v41[1] = 0;
              v41[2] = v38;
              *v37 = v41;
              v42 = **(_QWORD **)v29;
              if (v42)
              {
                *(_QWORD *)v29 = v42;
                v41 = (_QWORD *)*v37;
              }
              v43 = *v30;
              v22 = v41 == *v30;
              *((_BYTE *)v41 + 24) = v22;
              if (!v22)
              {
                do
                {
                  v44 = v41[2];
                  if (*(_BYTE *)(v44 + 24))
                    break;
                  v45 = *(_BYTE **)(v44 + 16);
                  v46 = *(_QWORD *)v45;
                  if (*(_QWORD *)v45 == v44)
                  {
                    v49 = *((_QWORD *)v45 + 1);
                    if (!v49 || (v50 = *(unsigned __int8 *)(v49 + 24), v47 = (_BYTE *)(v49 + 24), v50))
                    {
                      if (*(_QWORD **)v44 == v41)
                      {
                        *(_BYTE *)(v44 + 24) = 1;
                        v45[24] = 0;
                        v53 = *(_QWORD *)(v44 + 8);
                        *(_QWORD *)v45 = v53;
                        if (v53)
                          goto LABEL_71;
                      }
                      else
                      {
                        v51 = *(uint64_t **)(v44 + 8);
                        v52 = *v51;
                        *(_QWORD *)(v44 + 8) = *v51;
                        if (v52)
                        {
                          *(_QWORD *)(v52 + 16) = v44;
                          v45 = *(_BYTE **)(v44 + 16);
                        }
                        v51[2] = (uint64_t)v45;
                        *(_QWORD *)(*(_QWORD *)(v44 + 16) + 8 * (**(_QWORD **)(v44 + 16) != v44)) = v51;
                        *v51 = v44;
                        *(_QWORD *)(v44 + 16) = v51;
                        v45 = (_BYTE *)v51[2];
                        v44 = *(_QWORD *)v45;
                        *((_BYTE *)v51 + 24) = 1;
                        v45[24] = 0;
                        v53 = *(_QWORD *)(v44 + 8);
                        *(_QWORD *)v45 = v53;
                        if (v53)
LABEL_71:
                          *(_QWORD *)(v53 + 16) = v45;
                      }
                      *(_QWORD *)(v44 + 16) = *((_QWORD *)v45 + 2);
                      *(_QWORD *)(*((_QWORD *)v45 + 2) + 8 * (**((_QWORD **)v45 + 2) != (_QWORD)v45)) = v44;
                      *(_QWORD *)(v44 + 8) = v45;
LABEL_77:
                      *((_QWORD *)v45 + 2) = v44;
                      break;
                    }
                  }
                  else if (!v46 || (v48 = *(unsigned __int8 *)(v46 + 24), v47 = (_BYTE *)(v46 + 24), v48))
                  {
                    if (*(_QWORD **)v44 == v41)
                    {
                      v56 = v41[1];
                      *(_QWORD *)v44 = v56;
                      if (v56)
                      {
                        *(_QWORD *)(v56 + 16) = v44;
                        v45 = *(_BYTE **)(v44 + 16);
                      }
                      v41[2] = v45;
                      *(_QWORD *)(*(_QWORD *)(v44 + 16) + 8 * (**(_QWORD **)(v44 + 16) != v44)) = v41;
                      v41[1] = v44;
                      *(_QWORD *)(v44 + 16) = v41;
                      v45 = (_BYTE *)v41[2];
                      *((_BYTE *)v41 + 24) = 1;
                      v45[24] = 0;
                      v44 = *((_QWORD *)v45 + 1);
                      v54 = *(_QWORD **)v44;
                      *((_QWORD *)v45 + 1) = *(_QWORD *)v44;
                      if (v54)
LABEL_75:
                        v54[2] = v45;
                    }
                    else
                    {
                      *(_BYTE *)(v44 + 24) = 1;
                      v45[24] = 0;
                      v44 = *((_QWORD *)v45 + 1);
                      v54 = *(_QWORD **)v44;
                      *((_QWORD *)v45 + 1) = *(_QWORD *)v44;
                      if (v54)
                        goto LABEL_75;
                    }
                    *(_QWORD *)(v44 + 16) = *((_QWORD *)v45 + 2);
                    *(_QWORD *)(*((_QWORD *)v45 + 2) + 8 * (**((_QWORD **)v45 + 2) != (_QWORD)v45)) = v44;
                    *(_QWORD *)v44 = v45;
                    goto LABEL_77;
                  }
                  *(_BYTE *)(v44 + 24) = 1;
                  v41 = v45;
                  v45[24] = v45 == (_BYTE *)v43;
                  *v47 = 1;
                }
                while (v45 != (_BYTE *)v43);
              }
              ++*((_QWORD *)v29 + 2);
              v40 = v31[1];
              if (!v40)
                goto LABEL_81;
              do
              {
LABEL_79:
                v55 = (uint64_t **)v40;
                v40 = (uint64_t *)*v40;
              }
              while (v40);
LABEL_83:
              if (v55 == &v65)
                goto LABEL_93;
              v32 = (_QWORD *)*((_QWORD *)v29 + 1);
              v31 = v55;
              v33 = v29 + 8;
              if (*(void ***)v29 == v30)
                goto LABEL_45;
              v34 = (_QWORD *)*((_QWORD *)v29 + 1);
              v35 = v29 + 8;
              if (v32)
              {
                do
                {
                  v33 = v34;
                  v34 = (_QWORD *)v34[1];
                }
                while (v34);
              }
              else
              {
                do
                {
                  v33 = (_QWORD *)v35[2];
                  v22 = *v33 == (_QWORD)v35;
                  v35 = v33;
                }
                while (v22);
              }
              v36 = v31[4];
              if (v33[4] < (unint64_t)v36)
                goto LABEL_45;
              v37 = v29 + 8;
              v38 = v29 + 8;
            }
            while (!v32);
            while (1)
            {
              while (1)
              {
                v38 = v32;
                v39 = v32[4];
                if ((unint64_t)v36 >= v39)
                  break;
                v32 = (_QWORD *)*v38;
                v37 = v38;
                if (!*v38)
                  goto LABEL_54;
              }
              if (v39 >= (unint64_t)v36)
                break;
              v32 = (_QWORD *)v38[1];
              if (!v32)
              {
                v37 = v38 + 1;
                goto LABEL_54;
              }
            }
          }
          v40 = v31[1];
          if (v40)
            goto LABEL_79;
          do
          {
LABEL_81:
            v55 = (uint64_t **)v31[2];
            v22 = *v55 == (uint64_t *)v31;
            v31 = v55;
          }
          while (!v22);
          goto LABEL_83;
        }
LABEL_93:
        v57 = v29 + 24;
        v12 = v61;
        v28 = v62;
        v61[1] = v29 + 24;
      }
      v12[1] = v57;

      std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v64, v65);
      v58 = (uint64_t *)v8[1];
      if (v58)
      {
        do
        {
          v59 = v58;
          v58 = (uint64_t *)*v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          v59 = (uint64_t *)v8[2];
          v22 = *v59 == (_QWORD)v8;
          v8 = v59;
        }
        while (!v22);
      }
      v8 = v59;
    }
    while (v59 != (uint64_t *)v68);
  }
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v67, v68[0]);

}

void sub_227B84650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void **v10;

  std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::~vector[abi:ne180100](v10);

  _Unwind_Resume(a1);
}

void **std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 24;
        std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)(v3 - 24), *((_QWORD **)v3 - 2));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void GKCDecisionTree::splitByAttribute(GKCDecisionTree *this@<X0>, NSArray *a2@<X1>, uint64_t a3@<X2>, _QWORD **a4@<X8>)
{
  unint64_t v6;
  uint64_t **v7;
  unint64_t i;
  void *v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t **v31;
  unint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t *v35;
  void *v36;
  NSArray *v37;

  v37 = a2;
  v6 = 0;
  a4[1] = 0;
  v7 = a4 + 1;
  a4[2] = 0;
  *a4 = a4 + 1;
  for (i = -[NSArray count](v37, "count"); i > v6; i = -[NSArray count](v37, "count"))
  {
    -[NSArray objectAtIndexedSubscript:](v37, "objectAtIndexedSubscript:", v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "objectAtIndexedSubscript:", a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = *v7;
    v13 = a4 + 1;
    v14 = a4 + 1;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          v14 = (uint64_t **)v12;
          v15 = v12[4];
          if ((unint64_t)v11 >= v15)
            break;
          v12 = *v14;
          v13 = v14;
          if (!*v14)
            goto LABEL_13;
        }
        if (v15 >= (unint64_t)v11)
          break;
        v12 = v14[1];
        if (!v12)
        {
          v13 = v14 + 1;
          goto LABEL_13;
        }
      }
      if (v14[5])
      {
LABEL_16:
        v19 = *v7;
        v20 = a4 + 1;
        v21 = a4 + 1;
        if (*v7)
        {
          while (1)
          {
            while (1)
            {
              v21 = (uint64_t **)v19;
              v22 = v19[4];
              if ((unint64_t)v11 >= v22)
                break;
              v19 = *v21;
              v20 = v21;
              if (!*v21)
                goto LABEL_23;
            }
            if (v22 >= (unint64_t)v11)
              break;
            v19 = v21[1];
            if (!v19)
            {
              v20 = v21 + 1;
              goto LABEL_23;
            }
          }
          v23 = (uint64_t *)v21;
        }
        else
        {
LABEL_23:
          v23 = (uint64_t *)operator new(0x30uLL);
          v23[4] = (uint64_t)v11;
          v23[5] = 0;
          *v23 = 0;
          v23[1] = 0;
          v23[2] = (uint64_t)v21;
          *v20 = v23;
          v24 = (_QWORD *)**a4;
          v25 = v23;
          if (v24)
          {
            *a4 = v24;
            v25 = *v20;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a4[1], v25);
          a4[2] = (_QWORD *)((char *)a4[2] + 1);
        }
        v36 = (void *)v23[5];
        -[NSArray objectAtIndexedSubscript:](v37, "objectAtIndexedSubscript:", v6);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v36, "addObject:", v27);
        goto LABEL_4;
      }
    }
    else
    {
LABEL_13:
      v16 = (uint64_t *)operator new(0x30uLL);
      v16[4] = (uint64_t)v11;
      v16[5] = 0;
      *v16 = 0;
      v16[1] = 0;
      v16[2] = (uint64_t)v14;
      *v13 = v16;
      v17 = (_QWORD *)**a4;
      v18 = v16;
      if (v17)
      {
        *a4 = v17;
        v18 = *v13;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a4[1], v18);
      a4[2] = (_QWORD *)((char *)a4[2] + 1);
      if (v16[5])
        goto LABEL_16;
    }
    v26 = objc_alloc(MEMORY[0x24BDBCEB8]);
    -[NSArray objectAtIndexedSubscript:](v37, "objectAtIndexedSubscript:", v6);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(v26, "initWithObjects:", v27, 0);
    v29 = *v7;
    v30 = a4 + 1;
    v31 = a4 + 1;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          v31 = (uint64_t **)v29;
          v32 = v29[4];
          if ((unint64_t)v11 >= v32)
            break;
          v29 = *v31;
          v30 = v31;
          if (!*v31)
            goto LABEL_34;
        }
        if (v32 >= (unint64_t)v11)
          break;
        v29 = v31[1];
        if (!v29)
        {
          v30 = v31 + 1;
          goto LABEL_34;
        }
      }
      v33 = (uint64_t *)v31;
    }
    else
    {
LABEL_34:
      v33 = (uint64_t *)operator new(0x30uLL);
      v33[4] = (uint64_t)v11;
      v33[5] = 0;
      *v33 = 0;
      v33[1] = 0;
      v33[2] = (uint64_t)v31;
      *v30 = v33;
      v34 = (_QWORD *)**a4;
      v35 = v33;
      if (v34)
      {
        *a4 = v34;
        v35 = *v30;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a4[1], v35);
      a4[2] = (_QWORD *)((char *)a4[2] + 1);
    }
    v9 = (void *)v33[5];
    v33[5] = v28;

LABEL_4:
    ++v6;
  }

}

void sub_227B84A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  void *v11;
  void *v12;

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v10, *(_QWORD **)(v10 + 8));
  _Unwind_Resume(a1);
}

void GKCDecisionTree::splitOnIndex(GKCDecisionTree *a1, uint64_t a2, void *a3, _QWORD *a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  NSArray *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  _QWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  __int128 v30;

  v13 = a3;
  v16 = (_QWORD *)*a4;
  v14 = a4 + 1;
  v15 = v16;
  if (v16 != v14)
  {
    do
    {
      v17 = (id)v15[4];
      v18 = operator new();
      *(_OWORD *)v18 = 0u;
      *(_OWORD *)(v18 + 16) = 0u;
      *(_OWORD *)(v18 + 48) = 0u;
      *(_OWORD *)(v18 + 64) = 0u;
      *(_QWORD *)(v18 + 80) = 0;
      *(_OWORD *)(v18 + 32) = xmmword_227BC0080;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0
        && (objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("predicate")),
            v19 = (void *)objc_claimAutoreleasedReturnValue(),
            v19,
            v19))
      {
        objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("value"));
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = *(void **)(v18 + 56);
        *(_QWORD *)(v18 + 56) = v20;

        objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("predicate"));
        v22 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v22 = v17;
        v17 = *(id *)(v18 + 56);
        *(_QWORD *)(v18 + 56) = v22;
      }

      v23 = v22;
      *(_QWORD *)&v30 = v23;
      *((_QWORD *)&v30 + 1) = v18;
      v24 = *(_QWORD **)(a5 + 8);
      if ((unint64_t)v24 >= *(_QWORD *)(a5 + 16))
      {
        v25 = std::vector<std::pair<objc_object * {__strong},GKCDecisionNode *>>::__push_back_slow_path<std::pair<objc_object * {__strong},GKCDecisionNode *>>((void **)a5, &v30);
      }
      else
      {
        *(_QWORD *)&v30 = 0;
        v25 = v24 + 2;
        *v24 = v23;
        v24[1] = v18;
      }
      *(_QWORD *)(a5 + 8) = v25;

      v26 = *(_QWORD *)(a5 + 32) + 1;
      *(_QWORD *)(v18 + 24) = a5;
      *(_QWORD *)(v18 + 32) = v26;
      GKCDecisionTree::cartTreeGrowth(a1, (NSArray *)v15[5], v13, (GKCDecisionNode *)v18, a7, a8);

      v27 = (_QWORD *)v15[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v15[2];
          v29 = *v28 == (_QWORD)v15;
          v15 = v28;
        }
        while (!v29);
      }
      v15 = v28;
    }
    while (v28 != v14);
  }

}

void sub_227B84C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_227B84CA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id GKCDecisionTree::sortByAttributeWithAction(uint64_t a1, _QWORD *a2)
{
  id v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  void *v15;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v3 = objc_alloc_init(MEMORY[0x24BDBCEB8]);
  v6 = (_QWORD *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      for (i = 0; objc_msgSend((id)v5[5], "count") > i; ++i)
      {
        v8 = (void *)v5[5];
        v17[0] = v5[4];
        objc_msgSend(v8, "objectAtIndexedSubscript:", i);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "lastObject");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v17[1] = v10;
        objc_msgSend(MEMORY[0x24BDBCE30], "arrayWithObjects:count:", v17, 2);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v3, "addObject:", v11);
      }
      v12 = (_QWORD *)v5[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v5[2];
          v14 = *v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v14);
      }
      v5 = v13;
    }
    while (v13 != v4);
  }
  objc_msgSend(v3, "sortedArrayUsingComparator:", &__block_literal_global_1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

void sub_227B84E18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZN15GKCDecisionTree25sortByAttributeWithActionENSt3__13mapIU8__strongP11objc_objectU8__strongP14NSMutableArrayNS0_4lessIS4_EENS0_9allocatorINS0_4pairIU8__strongKS3_S7_EEEEEE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  float v7;
  float v8;
  void *v9;
  float v10;
  float v11;
  uint64_t v12;
  void *v13;
  float v14;
  float v15;
  void *v16;
  float v17;
  float v18;

  v4 = a2;
  v5 = a3;
  objc_msgSend(v4, "firstObject");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "floatValue");
  v8 = v7;
  objc_msgSend(v5, "firstObject");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "floatValue");
  v11 = v10;

  if (v8 <= v11)
  {
    objc_msgSend(v4, "firstObject");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "floatValue");
    v15 = v14;
    objc_msgSend(v5, "firstObject");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "floatValue");
    v18 = v17;

    if (v15 >= v18)
      v12 = 0;
    else
      v12 = -1;
  }
  else
  {
    v12 = 1;
  }

  return v12;
}

void sub_227B84F2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_227B84F68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B84F7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_hint_unique_key_args<objc_object * {__strong},std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>(_QWORD **a1, _QWORD *a2, unint64_t *a3, id *a4)
{
  uint64_t **v6;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = (uint64_t **)std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__find_equal<objc_object * {__strong}>(a1, a2, &v14, &v13, a3);
  if (*v6)
    return *v6;
  v8 = v6;
  v9 = (uint64_t *)operator new(0x30uLL);
  v9[4] = (uint64_t)*a4;
  v9[5] = (uint64_t)a4[1];
  v10 = v14;
  *v9 = 0;
  v9[1] = 0;
  v9[2] = v10;
  *v8 = v9;
  v11 = (_QWORD *)**a1;
  v12 = v9;
  if (v11)
  {
    *a1 = v11;
    v12 = *v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
  a1[2] = (_QWORD *)((char *)a1[2] + 1);
  return v9;
}

_QWORD *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__find_equal<objc_object * {__strong}>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  unint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (_QWORD *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v18 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = v18;
          v20 = v18[4];
          if (v16 >= v20)
            break;
          v18 = (_QWORD *)*v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = (_QWORD *)v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (_QWORD *)a2[1];
      do
      {
        v13 = v12;
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (_QWORD *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < v13[4])
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = (_QWORD *)*v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = v22;
            v24 = v22[4];
            if (v6 >= v24)
              break;
            v22 = (_QWORD *)*v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = (_QWORD *)v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__tree_node<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,void *> *,long>>(uint64_t **a1, id *a2, id *a3)
{
  id *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  id **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  id *v12;
  id *v13;
  id *v14;
  id **v15;
  id **v16;
  uint64_t *v17;
  id *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *i;
  uint64_t *v23;
  id *v24;
  id *v25;
  uint64_t *v26;

  v4 = a2;
  v5 = a1;
  if (a1[2])
  {
    v6 = *a1;
    v8 = (id **)(a1 + 1);
    v7 = a1[1];
    *a1 = (uint64_t *)(a1 + 1);
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    if (!v9)
    {
      v23 = 0;
LABEL_47:
      std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)a1, v23);
      goto LABEL_48;
    }
    v10 = (uint64_t *)v9[2];
    if (v10)
    {
      v11 = (uint64_t *)*v10;
      if ((uint64_t *)*v10 == v9)
      {
        *v10 = 0;
        while (1)
        {
          v26 = (uint64_t *)v10[1];
          if (!v26)
            break;
          do
          {
            v10 = v26;
            v26 = (uint64_t *)*v26;
          }
          while (v26);
        }
      }
      else
      {
        for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
        {
          do
          {
            v10 = v11;
            v11 = (uint64_t *)*v11;
          }
          while (v11);
        }
      }
    }
    if (a2 != a3)
    {
      v12 = (id *)v9;
      v13 = a2;
      while (1)
      {
        v9 = v10;
        objc_storeStrong(v12 + 4, v13[4]);
        objc_storeStrong(v12 + 5, v13[5]);
        v14 = *v8;
        v15 = (id **)(v5 + 1);
        v16 = (id **)(v5 + 1);
        if (*v8)
          break;
LABEL_18:
        *v12 = 0;
        v12[1] = 0;
        v12[2] = v15;
        *v16 = v12;
        v17 = (uint64_t *)**v5;
        if (v17)
          goto LABEL_19;
LABEL_20:
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v5[1], (uint64_t *)v12);
        v5[2] = (uint64_t *)((char *)v5[2] + 1);
        if (v10)
        {
          v10 = (uint64_t *)v10[2];
          if (v10)
          {
            v20 = (uint64_t *)*v10;
            if ((uint64_t *)*v10 == v9)
            {
              *v10 = 0;
              while (1)
              {
                v21 = (uint64_t *)v10[1];
                if (!v21)
                  break;
                do
                {
                  v10 = v21;
                  v21 = (uint64_t *)*v21;
                }
                while (v21);
              }
            }
            else
            {
              for (v10[1] = 0; v20; v20 = (uint64_t *)v10[1])
              {
                do
                {
                  v10 = v20;
                  v20 = (uint64_t *)*v20;
                }
                while (v20);
              }
            }
          }
        }
        else
        {
          v10 = 0;
        }
        v18 = (id *)v13[1];
        if (v18)
        {
          do
          {
            v4 = v18;
            v18 = (id *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v4 = (id *)v13[2];
            v19 = *v4 == v13;
            v13 = v4;
          }
          while (!v19);
        }
        if (v9)
        {
          v12 = (id *)v9;
          v13 = v4;
          if (v4 != a3)
            continue;
        }
        goto LABEL_42;
      }
      do
      {
        while (1)
        {
          v15 = (id **)v14;
          if (v12[4] >= v14[4])
            break;
          v14 = (id *)*v14;
          v16 = v15;
          if (!*v15)
            goto LABEL_18;
        }
        v14 = (id *)v14[1];
      }
      while (v14);
      v16 = v15 + 1;
      *v12 = 0;
      v12[1] = 0;
      v12[2] = v15;
      v15[1] = v12;
      v17 = (uint64_t *)**v5;
      if (!v17)
        goto LABEL_20;
LABEL_19:
      *v5 = v17;
      v12 = *v16;
      goto LABEL_20;
    }
LABEL_42:
    std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)v5, v9);
    if (v10)
    {
      for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
        v10 = i;
      a1 = v5;
      v23 = v10;
      goto LABEL_47;
    }
  }
LABEL_48:
  if (v4 != a3)
  {
    do
    {
      std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_multi<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>(v5, v4 + 4);
      v24 = (id *)v4[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (id *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (id *)v4[2];
          v19 = *v25 == v4;
          v4 = v25;
        }
        while (!v19);
      }
      v4 = v25;
    }
    while (v25 != a3);
  }
}

uint64_t *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_multi<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>(uint64_t **a1, id *a2)
{
  uint64_t *v4;
  id v5;
  id v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;

  v4 = (uint64_t *)operator new(0x30uLL);
  v5 = *a2;
  v4[4] = (uint64_t)v5;
  v6 = a2[1];
  v7 = a1 + 1;
  v8 = a1[1];
  v4[5] = (uint64_t)v6;
  if (v8)
  {
    do
    {
      while (1)
      {
        v7 = (uint64_t **)v8;
        if ((unint64_t)v5 >= v8[4])
          break;
        v8 = (uint64_t *)*v8;
        v9 = v7;
        if (!*v7)
          goto LABEL_8;
      }
      v8 = (uint64_t *)v8[1];
    }
    while (v8);
    v9 = v7 + 1;
  }
  else
  {
    v9 = a1 + 1;
  }
LABEL_8:
  *v4 = 0;
  v4[1] = 0;
  v4[2] = (uint64_t)v7;
  *v9 = v4;
  v10 = (uint64_t *)**a1;
  v11 = v4;
  if (v10)
  {
    *a1 = v10;
    v11 = *v9;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v4;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 == v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v17 = v14[1];
      v18 = (uint64_t *)*v17;
      v14[1] = (uint64_t *)*v17;
      if (v18)
        v18[2] = (uint64_t)v14;
      v17[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
      *v17 = (uint64_t)v14;
      v14[2] = v17;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    if (!*((_BYTE *)v15 + 24))
    {
      v19 = (uint64_t *)v7[1];
      if (!v19)
        goto LABEL_64;
LABEL_63:
      if (*((_BYTE *)v19 + 24))
      {
LABEL_64:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v23 = v15[1];
        *v7 = v23;
        if (v23)
          *(_QWORD *)(v23 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v19 = v7;
      }
      else
      {
        v15 = v7;
      }
      v27 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v27 + 24);
      *(_BYTE *)(v27 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v28 = *(uint64_t **)(v27 + 8);
      v29 = *v28;
      *(_QWORD *)(v27 + 8) = *v28;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      v28[2] = *(_QWORD *)(v27 + 16);
      *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v28;
      *v28 = v27;
      *(_QWORD *)(v27 + 16) = v28;
      return result;
    }
LABEL_38:
    v19 = (uint64_t *)v7[1];
    if (v19 && !*((_BYTE *)v19 + 24))
      goto LABEL_63;
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (v12 == result)
    {
      v12 = result;
LABEL_61:
      *((_BYTE *)v12 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v12 + 24))
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v16 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_49;
LABEL_48:
    if (!*((_BYTE *)v16 + 24))
      goto LABEL_67;
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v20 = (uint64_t *)v7[1];
    *v14 = v20;
    if (v20)
      v20[2] = (uint64_t)v14;
    v7[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
    v7[1] = (uint64_t)v14;
    v14[2] = v7;
    if (result == (uint64_t *)v14)
      result = v7;
    v7 = *v14;
    v16 = (_QWORD *)**v14;
    if (v16)
      goto LABEL_48;
  }
LABEL_49:
  v21 = (uint64_t *)v7[1];
  if (!v21 || *((_BYTE *)v21 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
    goto LABEL_24;
  }
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_67:
    v21 = v7;
  }
  else
  {
    *((_BYTE *)v21 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = *v21;
    v7[1] = *v21;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v21[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
    *v21 = (uint64_t)v7;
    v7[2] = (uint64_t)v21;
    v16 = v7;
  }
  v24 = (uint64_t *)v21[2];
  *((_BYTE *)v21 + 24) = *((_BYTE *)v24 + 24);
  *((_BYTE *)v24 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v25 = *v24;
  v26 = *(_QWORD *)(*v24 + 8);
  *v24 = v26;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  *(_QWORD *)(v25 + 16) = v24[2];
  *(_QWORD *)(v24[2] + 8 * (*(_QWORD *)v24[2] != (_QWORD)v24)) = v25;
  *(_QWORD *)(v25 + 8) = v24;
  v24[2] = v25;
  return result;
}

char *std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::__push_back_slow_path<std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>> const&>(char **a1, _QWORD *a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  char *v27;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  *((_QWORD *)v10 + 1) = 0;
  v27 = &v9[24 * v8];
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = v10 + 8;
  v13 = (_QWORD *)*a2;
  v11 = a2 + 1;
  v12 = v13;
  if (v13 == v11)
  {
    v14 = v10 + 24;
    v26 = v10 + 24;
    if (v4 == v3)
    {
LABEL_13:
      v15 = v3;
      goto LABEL_27;
    }
  }
  else
  {
    do
    {
      std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_hint_unique_key_args<objc_object * {__strong},std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>((_QWORD **)v10, (_QWORD *)v10 + 1, v12 + 4, (id *)v12 + 4);
      v16 = (_QWORD *)v12[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v12[2];
          v18 = *v17 == (_QWORD)v12;
          v12 = v17;
        }
        while (!v18);
      }
      v12 = v17;
    }
    while (v17 != v11);
    v3 = *a1;
    v4 = a1[1];
    v14 = v10 + 24;
    v26 = v10 + 24;
    if (v4 == *a1)
      goto LABEL_13;
  }
  v19 = 0;
  do
  {
    while (1)
    {
      v20 = &v10[v19];
      *((_QWORD *)v20 - 3) = *(_QWORD *)&v4[v19 - 24];
      v21 = &v4[v19 - 16];
      v22 = *(_QWORD *)v21;
      *(_QWORD *)&v10[v19 - 16] = *(_QWORD *)v21;
      v23 = (uint64_t)&v10[v19 - 16];
      v24 = *(_QWORD *)&v4[v19 - 8];
      *((_QWORD *)v20 - 1) = v24;
      if (!v24)
        break;
      *(_QWORD *)(v22 + 16) = v23;
      *(_QWORD *)&v4[v19 - 24] = v21;
      *(_QWORD *)v21 = 0;
      *(_QWORD *)&v4[v19 - 8] = 0;
      v19 -= 24;
      if (&v4[v19] == v3)
        goto LABEL_26;
    }
    *((_QWORD *)v20 - 3) = v23;
    v19 -= 24;
  }
  while (&v4[v19] != v3);
LABEL_26:
  v10 += v19;
  v15 = *a1;
  v3 = a1[1];
  v14 = v26;
LABEL_27:
  *a1 = v10;
  a1[1] = v14;
  a1[2] = v27;
  if (v3 != v15)
  {
    do
    {
      std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)(v3 - 24), *((_QWORD **)v3 - 2));
      v3 -= 24;
    }
    while (v3 != v15);
    v3 = v15;
  }
  if (v3)
    operator delete(v3);
  return v14;
}

void sub_227B85BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v2, *(_QWORD **)(v2 + 8));
  std::__split_buffer<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(i - 24, *(_QWORD **)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_OWORD *std::vector<std::pair<objc_object * {__strong},GKCDecisionNode *>>::__push_back_slow_path<std::pair<objc_object * {__strong},GKCDecisionNode *>>(void **a1, __int128 *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  _OWORD *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  double *v29;
  const double *v30;
  uint64_t v31;
  __int128 v32;
  void *v33;
  float64x2x2_t v35;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = v3 - (_BYTE *)*a1;
  v6 = (v5 >> 4) + 1;
  if (v6 >> 60)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v7 = (_BYTE *)a1[2] - v4;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * (v5 >> 4)];
  v12 = &v10[v9];
  v13 = *a2;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)v11 = v13;
  v14 = v11 + 16;
  v15 = (char *)(v3 - v4);
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3)
      return v14;
    goto LABEL_32;
  }
  v16 = v15 - 16;
  if ((unint64_t)(v15 - 16) < 0x110)
  {
    v17 = v3;
LABEL_27:
    v28 = v11;
    do
    {
      v32 = *((_OWORD *)v17 - 1);
      v17 -= 16;
      *(_QWORD *)v17 = 0;
      *((_OWORD *)v28 - 1) = v32;
      v28 -= 16;
    }
    while (v17 != v4);
    goto LABEL_29;
  }
  v18 = &v3[-((unint64_t)v16 & 0xFFFFFFFFFFFFFFF0)];
  v19 = (unint64_t)(v18 - 16);
  v20 = &v10[v5 - ((unint64_t)v16 & 0xFFFFFFFFFFFFFFF0)];
  v21 = (unint64_t)(v20 - 16);
  v22 = (unint64_t)(v18 - 8);
  v24 = v20 - 8 < v3 && v22 < (unint64_t)v11;
  v17 = v3;
  if (v21 < (unint64_t)(v3 - 8) && v19 < (unint64_t)&v10[v5 - 8])
    goto LABEL_27;
  if (v24)
    goto LABEL_27;
  v26 = ((unint64_t)v16 >> 4) + 1;
  v27 = 16 * (v26 & 0x1FFFFFFFFFFFFFFELL);
  v28 = &v11[-v27];
  v17 = &v3[-v27];
  v29 = (double *)(v11 - 32);
  v30 = (const double *)(v3 - 32);
  v31 = v26 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    v35 = vld2q_f64(v30);
    v30[2] = 0.0;
    *v30 = 0.0;
    v30 -= 4;
    vst2q_f64(v29, v35);
    v29 -= 4;
    v31 -= 2;
  }
  while (v31);
  v11 = v28;
  if (v26 != (v26 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_27;
LABEL_29:
  *a1 = v28;
  a1[1] = v14;
  a1[2] = v12;
  do
  {
    v33 = (void *)*((_QWORD *)v3 - 2);
    v3 -= 16;

  }
  while (v3 != v4);
  v3 = v4;
  if (v4)
LABEL_32:
    operator delete(v3);
  return v14;
}

__n64 MakeVectorFloat2(float a1, float a2)
{
  __n64 result;

  result.n64_f32[1] = a2;
  return result;
}

__n64 MakeVectorFloat3(float a1, float a2, float a3)
{
  __n64 result;

  result.n64_f32[1] = a2;
  return result;
}

void sub_227B85F68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B861E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B861FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B8630C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B8699C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void OpenSteer::SteerLibraryMixin<OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>>::steerToAvoidObstacles(uint64_t a1, const void ***a2, float a3)
{
  float v3;
  float v7;
  const void **v8;
  int v9;
  char *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  BOOL v25;
  float v26;
  float v27;
  int v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v30 = 0;
  v31 = 0;
  v32 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  v28 = 0;
  v8 = *a2;
  if (*a2 != a2[1])
  {
    v9 = 0;
    v26 = v7 * a3;
    v27 = a3;
    do
    {
      v10 = (char *)*v8;
      if (*v8)
      {
        {
          v28 = 0;
          v33 = v10;
          v11 = (*(float (**)(uint64_t, char *))(*(_QWORD *)a1 + 88))(a1, v10 + 12);
          v13 = v12 * -2.0;
          v15 = (float)((float)(v14 * v14) + (float)(v11 * v11)) + (float)(v12 * v12);
          v16 = *((float *)v10 + 2);
          v17 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
          v18 = (float)((float)-(float)(v15 - (float)((float)(v17 + v16) * (float)(v17 + v16))) * 4.0)
              + (float)(v13 * v13);
          if (v18 >= 0.0)
          {
            v19 = sqrtf(v18);
            v20 = (float)(v19 - v13) * 0.5;
            v21 = (float)(v19 + v13) * -0.5;
            if (v20 >= 0.0 || v21 >= 0.0)
            {
              v28 = 1;
              v22 = *(_QWORD *)(v10 + 12);
              LODWORD(v31) = *((_DWORD *)v10 + 5);
              v30 = v22;
              v23 = fminf(v20, v21);
              if (v21 <= 0.0)
                v23 = v20;
              if (v20 <= 0.0)
                v24 = v21;
              else
                v24 = v23;
              v29 = v24;
            }
          }
        }
        {
          (*(void (**)(char *, uint64_t, int *, float))(*(_QWORD *)v10 + 24))(v10, a1, &v28, v27);
        }
      }
      if (!v9 || (v28 ? (v25 = v29 < v3) : (v25 = 0), v25))
      {
        v9 = v28;
        v3 = v29;
      }
      ++v8;
    }
    while (v8 != a2[1]);
    if (v9)
    {
      if (v3 < v26)
      {
        (*(void (**)(uint64_t, float, float, float))(*(_QWORD *)a1 + 256))(a1, v26, 0.0, 0.0);
        (*(float (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
        (*(float (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
      }
    }
  }
}

void sub_227B86FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void OpenSteer::SteerLibraryMixin<OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>>::steerToAvoidNeighbors(uint64_t a1, uint64_t **a2, float a3)
{
  __n128 v5;
  float v6;
  float v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  _DWORD v90[3];
  _DWORD v91[3];

  OpenSteer::SteerLibraryMixin<OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>>::steerToAvoidCloseNeighbors(a1, a2, 0.0);
  if (v5.n128_f32[0] == *(float *)&_static_vec3_zero
    && v6 == *((float *)&_static_vec3_zero + 1)
    && v7 == *(float *)&dword_25591E708)
  {
    v8 = *a2;
    v5.n128_u32[0] = 0;
    if (*a2 == a2[1])
    {
      v81 = 0.0;
      v9 = 0;
      v82 = 0.0;
      v83 = 0.0;
      v84 = 0.0;
      v85 = 0.0;
      v86 = 0.0;
    }
    else
    {
      v81 = 0.0;
      v9 = 0;
      v85 = 0.0;
      v86 = 0.0;
      v83 = 0.0;
      v84 = 0.0;
      v82 = 0.0;
      do
      {
        v10 = *v8;
        if (*v8 != a1)
        {
          v88 = (*(float (**)(uint64_t, __n128))(*(_QWORD *)a1 + 176))(a1, v5);
          v11 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
          v13 = v12;
          v15 = v14;
          v16 = (*(float (**)(uint64_t))(*(_QWORD *)v10 + 192))(v10) - v11;
          v18 = v17 - v13;
          v20 = v19 - v15;
          v21 = (float)((float)(v16 * v16) + (float)(v18 * v18)) + (float)(v20 * v20);
          v5.n128_f32[0] = sqrtf(v21);
          v22 = 0.0;
          if (v5.n128_f32[0] != 0.0)
          {
            v23 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
            v25 = v24;
            v27 = v26;
            v5.n128_f32[0] = (*(float (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
            v5.n128_f32[0] = (float)((float)((float)(v23 - v5.n128_f32[0]) * v16) + (float)((float)(v25 - v28) * v18))
                           + (float)((float)(v27 - v29) * v20);
            v22 = v5.n128_f32[0] / v21;
          }
          if (v22 >= 0.0)
          {
            v5.n128_f32[0] = a3;
            if (v22 < a3)
            {
              v30 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
              v32 = v31;
              v34 = v33;
              v35 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1) * v22;
              v87 = (*(float (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
              v37 = v36;
              v39 = v38;
              v40 = (*(float (**)(uint64_t))(*(_QWORD *)v10 + 200))(v10) * v22;
              v41 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) + (float)(v35 * v30);
              v43 = v42 + (float)(v35 * v32);
              v45 = v44 + (float)(v35 * v34);
              v5.n128_f32[0] = (*(float (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10) + (float)(v40 * v87);
              v47 = v46 + (float)(v40 * v37);
              v49 = v48 + (float)(v40 * v39);
              *(float *)(a1 + 80) = v43;
              *(float *)(a1 + 84) = v45;
              *(_DWORD *)(a1 + 64) = v5.n128_u32[0];
              *(float *)(a1 + 68) = v47;
              *(float *)(a1 + 72) = v49;
              *(float *)(a1 + 76) = v41;
              if (sqrtf((float)((float)((float)(v41 - v5.n128_f32[0]) * (float)(v41 - v5.n128_f32[0]))+ (float)((float)(v43 - v47) * (float)(v43 - v47)))+ (float)((float)(v45 - v49) * (float)(v45 - v49))) < (float)(v88 + v88))
              {
                v82 = v43;
                v83 = v45;
                v81 = v41;
                v84 = v47;
                v85 = v49;
                v86 = v5.n128_f32[0];
                a3 = v22;
                v9 = v10;
              }
            }
          }
        }
        ++v8;
      }
      while (v8 != a2[1]);
    }
    *(float *)v91 = v86;
    *(float *)&v91[1] = v84;
    *(float *)&v91[2] = v85;
    *(float *)v90 = v81;
    *(float *)&v90[1] = v82;
    *(float *)&v90[2] = v83;
    if (!v9)
      goto LABEL_24;
    v50 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v52 = v51;
    v54 = v53;
    v55 = (*(float (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    v58 = (float)((float)(v55 * v50) + (float)(v56 * v52)) + (float)(v57 * v54);
    if (v58 >= -0.707)
    {
      v64 = *(_QWORD *)v9;
      if (v58 <= 0.707)
      {
        v77 = (*(float (**)(uint64_t))(v64 + 200))(v9);
        v78 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
        v76 = 0.0;
        if (v77 > v78)
        {
LABEL_23:
          (*(void (**)(uint64_t, uint64_t, _DWORD *, _DWORD *, float))(*(_QWORD *)a1 + 280))(a1, v9, v90, v91, v76);
LABEL_24:
          (**(void (***)(uint64_t))a1)(a1);
          return;
        }
        v59 = (**(float (***)(uint64_t))a1)(a1);
        v61 = v79;
        v63 = v80;
        v72 = (*(float (**)(uint64_t))(*(_QWORD *)v9 + 192))(v9);
LABEL_21:
        v75 = (float)((float)(v72 * v59) + (float)(v73 * v61)) + (float)(v74 * v63);
        v76 = -1.0;
        if (v75 <= 0.0)
          v76 = 1.0;
        goto LABEL_23;
      }
      v65 = (*(float (**)(uint64_t))(v64 + 48))(v9);
      v67 = v66;
      v69 = v68;
      v59 = v65 - (*(float (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v61 = v67 - v70;
      v63 = v69 - v71;
    }
    else
    {
      v59 = v86 - (*(float (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v61 = v84 - v60;
      v63 = v85 - v62;
    }
    v72 = (**(float (***)(uint64_t))a1)(a1);
    goto LABEL_21;
  }
}

void sub_227B87798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

float OpenSteer::SteerLibraryMixin<OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>>::steerForSeparation(uint64_t a1, uint64_t a2, float a3, float a4)
{
  _QWORD *v4;
  int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;

  v4 = *(_QWORD **)a2;
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
    return 0.0;
  v7 = 0;
  v8 = a3 * a3;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  do
  {
    v23 = *v4;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
    if (v23 != a1)
    {
      v25 = v24 * 3.0;
      v26 = (*(float (**)(uint64_t))(*(_QWORD *)v23 + 48))(v23);
      v28 = v27;
      v30 = v29;
      v31 = v26 - (*(float (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v33 = v28 - v32;
      v35 = v30 - v34;
      v36 = (float)((float)(v31 * v31) + (float)(v33 * v33)) + (float)(v35 * v35);
      if (v36 < (float)(v25 * v25)
        || v36 <= v8
        && (v37 = sqrtf(v36),
            v38 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1),
            (float)((float)((float)((float)(v38 * v31) + (float)(v39 * v33)) + (float)(v40 * v35)) / v37) > a4))
      {
        v12 = (*(float (**)(_QWORD))(*(_QWORD *)*v4 + 48))(*v4);
        v14 = v13;
        v16 = v15;
        v17 = v12 - (*(float (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
        v19 = v14 - v18;
        v21 = v16 - v20;
        v22 = 1.0 / (float)((float)((float)(v17 * v17) + (float)(v19 * v19)) + (float)(v21 * v21));
        v11 = v11 - (float)(v17 * v22);
        v10 = v10 - (float)(v19 * v22);
        v9 = v9 - (float)(v21 * v22);
        ++v7;
      }
    }
    ++v4;
  }
  while (v4 != *(_QWORD **)(a2 + 8));
  if (v7 > 0)
  {
    v41 = 1.0 / (float)v7;
    v11 = v11 * v41;
    v42 = sqrtf((float)((float)(v11 * v11) + (float)((float)(v10 * v41) * (float)(v10 * v41)))+ (float)((float)(v9 * v41) * (float)(v9 * v41)));
    if (v42 > 0.0)
      return v11 * (float)(1.0 / v42);
  }
  return v11;
}

void sub_227B87D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

float OpenSteer::SteerLibraryMixin<OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>>::steerForAlignment(uint64_t a1, uint64_t a2, float a3, float a4)
{
  _QWORD *v4;
  int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;

  v4 = *(_QWORD **)a2;
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
    return 0.0;
  v7 = 0;
  v8 = a3 * a3;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  do
  {
    v14 = *v4;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
    if (v14 != a1)
    {
      v16 = v15 * 3.0;
      v17 = (*(float (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
      v19 = v18;
      v21 = v20;
      v22 = v17 - (*(float (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v24 = v19 - v23;
      v26 = v21 - v25;
      v27 = (float)((float)(v22 * v22) + (float)(v24 * v24)) + (float)(v26 * v26);
      if (v27 < (float)(v16 * v16)
        || v27 <= v8
        && (v28 = sqrtf(v27),
            v29 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1),
            (float)((float)((float)((float)(v29 * v22) + (float)(v30 * v24)) + (float)(v31 * v26)) / v28) > a4))
      {
        v11 = (*(float (**)(_QWORD))(*(_QWORD *)*v4 + 32))(*v4) + v11;
        v10 = v12 + v10;
        v9 = v13 + v9;
        ++v7;
      }
    }
    ++v4;
  }
  while (v4 != *(_QWORD **)(a2 + 8));
  if (v7 > 0)
  {
    v32 = 1.0 / (float)v7;
    v11 = -(float)((*(float (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) - (float)(v11 * v32));
    v35 = sqrtf((float)((float)(v11 * v11)+ (float)((float)-(float)(v33 - (float)(v10 * v32)) * (float)-(float)(v33 - (float)(v10 * v32))))+ (float)((float)-(float)(v34 - (float)(v9 * v32)) * (float)-(float)(v34 - (float)(v9 * v32))));
    if (v35 > 0.0)
      return v11 * (float)(1.0 / v35);
  }
  return v11;
}

void sub_227B8823C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

float OpenSteer::SteerLibraryMixin<OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>>::steerForCohesion(uint64_t a1, uint64_t a2, float a3, float a4)
{
  _QWORD *v4;
  int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;

  v4 = *(_QWORD **)a2;
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
    return 0.0;
  v7 = 0;
  v8 = a3 * a3;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  do
  {
    v14 = *v4;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
    if (v14 != a1)
    {
      v16 = v15 * 3.0;
      v17 = (*(float (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
      v19 = v18;
      v21 = v20;
      v22 = v17 - (*(float (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v24 = v19 - v23;
      v26 = v21 - v25;
      v27 = (float)((float)(v22 * v22) + (float)(v24 * v24)) + (float)(v26 * v26);
      if (v27 < (float)(v16 * v16)
        || v27 <= v8
        && (v28 = sqrtf(v27),
            v29 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1),
            (float)((float)((float)((float)(v29 * v22) + (float)(v30 * v24)) + (float)(v31 * v26)) / v28) > a4))
      {
        v11 = (*(float (**)(_QWORD))(*(_QWORD *)*v4 + 48))(*v4) + v11;
        v10 = v12 + v10;
        v9 = v13 + v9;
        ++v7;
      }
    }
    ++v4;
  }
  while (v4 != *(_QWORD **)(a2 + 8));
  if (v7 > 0)
  {
    v32 = 1.0 / (float)v7;
    v11 = -(float)((*(float (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) - (float)(v11 * v32));
    v35 = sqrtf((float)((float)(v11 * v11)+ (float)((float)-(float)(v33 - (float)(v10 * v32)) * (float)-(float)(v33 - (float)(v10 * v32))))+ (float)((float)-(float)(v34 - (float)(v9 * v32)) * (float)-(float)(v34 - (float)(v9 * v32))));
    if (v35 > 0.0)
      return v11 * (float)(1.0 / v35);
  }
  return v11;
}

void sub_227B88648(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float OpenSteer::SteerLibraryMixin<OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>>::steerForPursuit(uint64_t a1, uint64_t a2, float a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  int v31;
  int v32;
  float v33;
  unsigned int v34;
  float *v35;
  float v36;
  float v37;
  float v38;

  v6 = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  v8 = v7;
  v10 = v9;
  v11 = v6 - (*(float (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v13 = v8 - v12;
  v15 = v10 - v14;
  v16 = sqrtf((float)((float)(v11 * v11) + (float)(v13 * v13)) + (float)(v15 * v15));
  v17 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v19 = v18;
  v21 = v20;
  v22 = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v25 = (float)((float)(v22 * v17) + (float)(v23 * v19)) + (float)(v24 * v21);
  v26 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v29 = (float)((float)((float)(v26 * v11) + (float)(v27 * v13)) + (float)(v28 * v15)) / v16;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  if (v29 < -0.707)
    v31 = -1;
  else
    v31 = v29 > 0.707;
  v32 = v25 > 0.707;
  if (v25 < -0.707)
    v32 = -1;
  v33 = 0.0;
  if (v31 == -1)
  {
    v34 = v32 + 1;
    if (v34 > 2)
      goto LABEL_15;
    v35 = (float *)&unk_227BC00F0;
  }
  else if (v31)
  {
    v34 = v32 + 1;
    if (v34 >= 3)
      goto LABEL_15;
    v35 = (float *)&unk_227BC00D8;
  }
  else
  {
    v34 = v32 + 1;
    if (v34 >= 3)
      goto LABEL_15;
    v35 = (float *)&unk_227BC00E4;
  }
  v33 = v35[v34];
LABEL_15:
  v36 = (*(float (**)(uint64_t, float))(*(_QWORD *)a2 + 216))(a2, fminf((float)(v33 * v16) / v30, a3));
  v37 = v36 - (*(float (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if (v37 == 0.0)
    v38 = 0.00000011921;
  else
    v38 = v37;
  return v38 - (*(float (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
}

void sub_227B888F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void OpenSteer::SteerLibraryMixin<OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>>::steerToFollowPath(uint64_t a1, int a2, uint64_t a3, float a4)
{
  float v7;
  int v8;
  int v9;
  int v10;
  int v11;
  float v12;
  float v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _DWORD v19[3];
  _DWORD v20[3];
  float v21;
  uint64_t v22;
  int v23;
  _DWORD v24[3];

  v7 = (float)a2 * (float)(a4 * (*(float (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1));
  v24[0] = (*(float (**)(uint64_t, float))(*(_QWORD *)a1 + 216))(a1, a4);
  v24[1] = v8;
  v24[2] = v9;
  LODWORD(v22) = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  HIDWORD(v22) = v10;
  v23 = v11;
  v12 = (*(float (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 16))(a3, &v22);
  v13 = (*(float (**)(uint64_t, _DWORD *))(*(_QWORD *)a3 + 16))(a3, v24);
  if (v7 <= 0.0)
    v14 = v12 <= v13;
  else
    v14 = v12 >= v13;
  v23 = 0;
  v22 = 0;
  v21 = 0.0;
  v20[0] = (**(float (***)(uint64_t, _DWORD *, uint64_t *, float *))a3)(a3, v24, &v22, &v21);
  v20[1] = v15;
  v20[2] = v16;
  if (v21 >= 0.0 || v14)
  {
    v19[0] = (*(float (**)(uint64_t, float))(*(_QWORD *)a3 + 8))(a3, v12 + v7);
    v19[1] = v17;
    v19[2] = v18;
    (*(void (**)(uint64_t, _DWORD *, _DWORD *, _DWORD *, float))(*(_QWORD *)a1 + 264))(a1, v24, v20, v19, v21);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    (*(float (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  }
}

void sub_227B88B44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float OpenSteer::SteerLibraryMixin<OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>>::steerToStayOnPath(uint64_t a1, float (***a2)(_QWORD, _DWORD *, uint64_t *, float *))
{
  int v4;
  int v5;
  float v6;
  float v7;
  float v9;
  float v10;
  float v11;
  float v12[3];
  float v13;
  uint64_t v14;
  int v15;
  _DWORD v16[3];

  v16[0] = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
  v16[1] = v4;
  v16[2] = v5;
  v15 = 0;
  v14 = 0;
  v13 = 0.0;
  v12[0] = (**a2)(a2, v16, &v14, &v13);
  v12[1] = v6;
  v12[2] = v7;
  if (v13 < 0.0)
    return *(float *)&_static_vec3_zero;
  (*(void (**)(uint64_t, _DWORD *, float *, float *, float))(*(_QWORD *)a1 + 264))(a1, v16, v12, v12, v13);
  v9 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v10 = v12[0] - v9;
  if (v10 == 0.0)
    v11 = 0.00000011921;
  else
    v11 = v10;
  return v11 - (*(float (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
}

void sub_227B88E20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B88E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B89428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B8943C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B89450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_227B89480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B89494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B894A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B894BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B894D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B894E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B894F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B8950C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B89520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_227B89538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_227B89550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B89564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B89780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B89790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B898CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B898E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B898F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B89908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B8991C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B89930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B89944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B89958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B8996C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B89F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B89FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B89FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_227B89FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B8A004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B8A018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B8A02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B8A040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B8A054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B8A068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B8A07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B8A090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_227B8A0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_227B8A0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_227B8A0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

BOOL GKSimpleVehicle::rightHanded(GKSimpleVehicle *this)
{
  return this->m_rightHanded;
}

void OpenSteer::SteerLibraryMixin<OpenSteer::LocalSpaceMixin<OpenSteer::AbstractVehicle>>::steerToAvoidCloseNeighbors(uint64_t a1, uint64_t **a2, float a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;

  v4 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      v8 = *v4;
      if (*v4 != a1)
      {
        v9 = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
        v10 = (float)(v9 + a3) + (*(float (**)(uint64_t))(*(_QWORD *)v8 + 176))(v8);
        v11 = (*(float (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
        v13 = v12;
        v15 = v14;
        v16 = v11 - (*(float (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
        if (sqrtf((float)((float)(v16 * v16) + (float)((float)(v13 - v17) * (float)(v13 - v17)))+ (float)((float)(v15 - v18) * (float)(v15 - v18))) < v10)
        {
          (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 272))(a1, v8, a3);
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
          return;
        }
        v3 = a2[1];
      }
      ++v4;
    }
    while (v4 != v3);
  }
}

void sub_227B8A350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B8A4CC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x22E2A50A0](v3, 0x10A0C40841CC34ELL);

  _Unwind_Resume(a1);
}

void sub_227B8A4F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B8A660(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B8A674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B8A688(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B8A698(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B8A788(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id GKCHybridStrategist::bestMoveForActivePlayer(GKCHybridStrategist *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;

  *((_BYTE *)this + 104) = objc_opt_respondsToSelector() & 1;
  *((_BYTE *)this + 105) = objc_opt_respondsToSelector() & 1;
  objc_msgSend(*((id *)this + 7), "players");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *((_QWORD *)this + 12) = objc_msgSend(v2, "count");

  GKCHybridStrategist::setupMinmax(this);
  v3 = (void *)objc_msgSend(*((id *)this + 7), "copyWithZone:", 0);
  v4 = operator new();
  v5 = v3;
  *(_QWORD *)v4 = v5;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  objc_msgSend(v5, "activePlayer");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)v4, "gameModelUpdatesForPlayer:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((_QWORD *)this + 9))
  {
    v8 = 0;
    do
    {
      v9 = GKCHybridStrategist::treePolicy((uint64_t)this, v4, v6, v7);
      v10 = (void *)objc_msgSend(*(id *)v9, "copyWithZone:", 0);
      v11 = GKCHybridStrategist::defaultPolicy((uint64_t)this, v10);

      do
      {
        ++*(_QWORD *)(v9 + 56);
        *(double *)(v9 + 64) = *(double *)(v9 + 64) + (double)v11;
        v9 = *(_QWORD *)(v9 + 40);
      }
      while (v9);
      ++v8;
    }
    while (v8 < *((_QWORD *)this + 9));
  }
  v12 = *(uint64_t **)(v4 + 16);
  v13 = v4;
  v14 = *(_QWORD *)(v4 + 24) - (_QWORD)v12;
  if (v14)
  {
    v15 = v14 >> 3;
    if (v15 <= 1)
      v15 = 1;
    v16 = 0.0;
    v13 = v4;
    do
    {
      v18 = *v12++;
      v17 = v18;
      v19 = *(double *)(v18 + 64) / (double)*(unint64_t *)(v18 + 56);
      if (v19 >= v16)
        v13 = v17;
      v16 = fmax(v19, v16);
      --v15;
    }
    while (v15);
  }
  v20 = *(id *)(v13 + 8);
  GKCMonteCarloStrategist::deleteChildren((uint64_t)this, v4);
  v21 = *(id *)v4;
  *(_QWORD *)v4 = 0;

  v22 = *(void **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = 0;

  *(_QWORD *)(v4 + 40) = 0;
  v23 = *(void **)(v4 + 16);
  if (v23)
  {
    *(_QWORD *)(v4 + 24) = v23;
    operator delete(v23);
  }

  MEMORY[0x22E2A50A0](v4, 0x10A0C40AF943C6FLL);
  v24 = *(_QWORD *)this;
  v25 = *((_QWORD *)this + 1);
  if (v25 != *(_QWORD *)this)
  {
    do
    {
      v26 = *(void **)(v25 - 8);
      v25 -= 8;

    }
    while (v25 != v24);
  }
  *((_QWORD *)this + 1) = v24;
  v28 = *((_QWORD *)this + 3);
  v27 = *((_QWORD *)this + 4);
  if (v27 != v28)
  {
    v29 = *((_QWORD *)this + 4);
    do
    {
      v31 = *(void **)(v29 - 24);
      v29 -= 24;
      v30 = v31;
      if (v31)
      {
        *(_QWORD *)(v27 - 16) = v30;
        operator delete(v30);
      }
      v27 = v29;
    }
    while (v29 != v28);
  }
  *((_QWORD *)this + 4) = v28;

  return v20;
}

void sub_227B8AA2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_227B8AA48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B8AA5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B8AA6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B8AA7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B8AA8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_227B8AAA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B8AAC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void GKCHybridStrategist::GKCHybridStrategist(GKCHybridStrategist *this)
{
  uint64_t v2;
  void *v3;

  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 8) = objc_alloc_init(GKARC4RandomSource);
  *(_OWORD *)((char *)this + 72) = xmmword_227BC0030;
  *(_OWORD *)((char *)this + 88) = xmmword_227BC0080;
  *((_WORD *)this + 52) = 0;
  v2 = objc_opt_new();
  v3 = (void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v2;

}

void sub_227B8AB50(_Unwind_Exception *a1)
{
  void **v1;

  std::vector<std::vector<ClipperLib::IntPoint>>::~vector[abi:ne180100](v1 + 3);
  std::vector<NSObject * {__strong}>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void GKCHybridStrategist::~GKCHybridStrategist(id *this)
{
  char *v2;
  char *v3;
  id v4;
  char *v5;
  void *v6;
  void *v7;
  char *v8;
  char *v9;
  id v10;
  void *v11;

  v2 = (char *)this[3];
  if (v2)
  {
    v3 = (char *)this[4];
    v4 = this[3];
    if (v3 != v2)
    {
      v5 = (char *)this[4];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = this[3];
    }
    this[4] = v2;
    operator delete(v4);
  }
  v8 = (char *)*this;
  if (*this)
  {
    v9 = (char *)this[1];
    v10 = *this;
    if (v9 != v8)
    {
      do
      {
        v11 = (void *)*((_QWORD *)v9 - 1);
        v9 -= 8;

      }
      while (v9 != v8);
      v10 = *this;
    }
    this[1] = v8;
    operator delete(v10);
  }
}

uint64_t GKCHybridStrategist::setupMinmax(GKCHybridStrategist *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1);
  if (v3 != *(_QWORD *)this)
  {
    do
    {
      v4 = *(void **)(v3 - 8);
      v3 -= 8;

    }
    while (v3 != v2);
    v3 = *(_QWORD *)this;
  }
  *((_QWORD *)this + 1) = v2;
  v5 = *((_QWORD *)this + 11);
  v6 = (v2 - v3) >> 3;
  if (v5 <= v6)
  {
    if (v5 < v6)
    {
      v7 = v3 + 8 * v5;
      while (v2 != v7)
      {
        v8 = *(void **)(v2 - 8);
        v2 -= 8;

      }
      *((_QWORD *)this + 1) = v7;
    }
  }
  else
  {
    std::vector<objc_object  {objcproto11GKGameModel}* {__strong}>::__append(this, v5 - v6);
  }
  if (*((_QWORD *)this + 11))
  {
    v9 = 0;
    do
    {
      v10 = objc_msgSend(*((id *)this + 7), "copyWithZone:", 0);
      v11 = *(void **)(*(_QWORD *)this + 8 * v9);
      *(_QWORD *)(*(_QWORD *)this + 8 * v9) = v10;

      ++v9;
      v12 = *((_QWORD *)this + 11);
    }
    while (v9 < v12);
    v13 = v12 + 1;
  }
  else
  {
    v13 = 1;
  }
  v15 = *((_QWORD *)this + 3);
  v14 = *((_QWORD *)this + 4);
  v16 = (_QWORD *)((char *)this + 24);
  v17 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
  if (v13 <= v17)
  {
    if (v13 < v17)
    {
      v18 = v15 + 24 * v13;
      if (v14 != v18)
      {
        v19 = *((_QWORD *)this + 4);
        do
        {
          v21 = *(void **)(v19 - 24);
          v19 -= 24;
          v20 = v21;
          if (v21)
          {
            *(_QWORD *)(v14 - 16) = v20;
            operator delete(v20);
          }
          v14 = v19;
        }
        while (v19 != v18);
      }
      *((_QWORD *)this + 4) = v18;
    }
  }
  else
  {
    std::vector<std::vector<long>>::__append((uint64_t)this + 24, v13 - v17);
  }
  v22 = 0;
  v23 = *((_QWORD *)this + 12);
  do
  {
    v25 = (_QWORD *)(*v16 + 24 * v22);
    v26 = (uint64_t)(v25[1] - *v25) >> 3;
    if (v23 <= v26)
    {
      if (v23 < v26)
        v25[1] = *v25 + 8 * v23;
    }
    else
    {
      std::vector<long>::__append((uint64_t)v25, v23 - v26);
      v23 = *((_QWORD *)this + 12);
    }
    if (v23)
    {
      v27 = 0;
      v28 = *(_QWORD *)(*v16 + 24 * v22);
      do
      {
        *(_QWORD *)(v28 + 8 * v27++) = 0;
        v23 = *((_QWORD *)this + 12);
      }
      while (v27 < v23);
    }
  }
  while (v22++ < *((_QWORD *)this + 11));
  return objc_msgSend(*((id *)this + 6), "setMaxLookAheadDepth:");
}

uint64_t GKCHybridStrategist::treePolicy(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id i;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  long double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;

  v7 = a3;
  for (i = a4; objc_msgSend(i, "count"); i = (id)v25)
  {
    v10 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    if (objc_msgSend(i, "count") > (unint64_t)((v9 - v10) >> 3))
    {
      a2 = GKCHybridStrategist::expand(a1, a2, i);
      break;
    }
    v11 = *(uint64_t **)(a2 + 16);
    v12 = *(_QWORD *)(a2 + 24) - (_QWORD)v11;
    if (v12)
    {
      v13 = v12 >> 3;
      v14 = *(_QWORD *)(a2 + 56);
      v15 = (double)*(unint64_t *)(a1 + 80);
      if (v13 <= 1)
        v16 = 1;
      else
        v16 = v13;
      v17 = 0.0;
      do
      {
        v19 = *v11++;
        v18 = v19;
        v20 = *(_QWORD *)(v19 + 56);
        v21 = *(double *)(v19 + 64) / (double)v20;
        v22 = log((double)(v14 / v20));
        v23 = v21 + sqrt(v22 + v22) * v15;
        if (v23 >= v17)
          a2 = v18;
        v17 = fmax(v23, v17);
        --v16;
      }
      while (v16);
    }
    objc_msgSend(*(id *)a2, "activePlayer");
    v24 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)a2, "gameModelUpdatesForPlayer:", v24);
    v25 = objc_claimAutoreleasedReturnValue();

    v7 = (id)v24;
  }

  return a2;
}

void sub_227B8AF60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B8AF74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t GKCHybridStrategist::defaultPolicy(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = a2;
  objc_msgSend(v3, "activePlayer");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "gameModelUpdatesForPlayer:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = 1;
  while (objc_msgSend(v5, "count"))
  {
    if ((v6 & 1) != 0
      && (objc_msgSend(v3, "activePlayer"),
          v7 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_msgSend(*(id *)(a1 + 56), "activePlayer"),
          v8 = (void *)objc_claimAutoreleasedReturnValue(),
          v8,
          v7,
          v7 == v8))
    {
      objc_msgSend(v3, "activePlayer", 0, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      GKCHybridStrategist::findBestMoveNPlayer(a1, v3, v12, *(_QWORD *)(a1 + 88), &v17, &v16);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      v6 = 0;
    }
    else
    {
      objc_msgSend(v5, "objectAtIndexedSubscript:", objc_msgSend(*(id *)(a1 + 64), "nextIntWithUpperBound:", objc_msgSend(v5, "count")));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(v3, "applyGameModelUpdate:", v9);
    objc_msgSend(v3, "activePlayer");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "gameModelUpdatesForPlayer:", v10);
    v11 = objc_claimAutoreleasedReturnValue();

    v5 = (void *)v11;
  }
  objc_msgSend(*(id *)(a1 + 56), "activePlayer");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v3, "isWinForPlayer:", v13);

  return v14;
}

void sub_227B8B11C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B8B134(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B8B148(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B8B15C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B8B16C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B8B19C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_227B8B1B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B8B1CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B8B1E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t GKCHybridStrategist::expand(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v4 = a3;
  objc_msgSend(v4, "objectAtIndexedSubscript:", *(_QWORD *)(a2 + 48));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  ++*(_QWORD *)(a2 + 48);
  v6 = operator new();
  v7 = (void *)objc_msgSend(*(id *)a2, "copyWithZone:", 0);
  *(_QWORD *)v6 = v7;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  objc_msgSend(v7, "applyGameModelUpdate:", v5);
  objc_storeStrong((id *)(v6 + 8), v5);
  GKCTreeNode::addChild((_QWORD *)a2, v6);
  *(_QWORD *)(v6 + 40) = a2;

  return v6;
}

void sub_227B8B2BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x22E2A50A0](v3, 0x10A0C40AF943C6FLL);

  _Unwind_Resume(a1);
}

void sub_227B8B2E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B8B2F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id GKCHybridStrategist::findBestMoveNPlayer(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t *a5, _QWORD *a6)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  void *v35;
  uint64_t *v36;
  id v37;
  uint64_t *v38;
  void *v39;
  uint64_t v40;
  id v42;
  uint64_t v43;
  uint64_t v44;

  v10 = a2;
  v42 = a3;
  v37 = v10;
  if ((objc_msgSend(v10, "isWinForPlayer:") & 1) != 0)
  {
    v11 = 1;
  }
  else if (*(_BYTE *)(a1 + 105) && (objc_msgSend(v10, "isLossForPlayer:", v42) & 1) != 0)
  {
    v11 = -1;
  }
  else
  {
    v11 = 0;
  }
  *a5 = v11;
  *a6 = *(_QWORD *)(a1 + 88) - a4;
  v40 = a4 - 1;
  if (a4 < 1 || *a5)
  {
    GKCHybridStrategist::getScores(a1, v10, a4);
    v23 = 0;
  }
  else
  {
    objc_msgSend(v10, "activePlayer");
    v12 = objc_claimAutoreleasedReturnValue();
    v35 = (void *)v12;
    objc_msgSend(v10, "gameModelUpdatesForPlayer:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "count");
    if (v14)
    {
      v39 = v13;
      v43 = 0;
      v44 = 0;
      v15 = *(id *)(*(_QWORD *)a1 + 8 * a4 - 8);
      v16 = *(_QWORD *)(a1 + 24);
      objc_msgSend(*(id *)(a1 + 56), "players");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      v18 = objc_msgSend(v17, "indexOfObject:", v12);
      v38 = (uint64_t *)(v16 + 24 * a4);

      if (*(_QWORD *)(a1 + 96))
      {
        v19 = 0;
        v20 = *v38;
        do
          *(_QWORD *)(v20 + 8 * v19++) = 0x8000000000000000;
        while (v19 < *(_QWORD *)(a1 + 96));
      }
      if (v14 < 1)
      {
        v23 = 0;
      }
      else
      {
        v21 = v14;
        v36 = a5;
        v22 = 0;
        v23 = 0;
        v24 = 24 * a4;
        v25 = 8 * v18;
        do
        {
          objc_msgSend(v15, "setGameModel:", v10);
          objc_msgSend(v39, "objectAtIndexedSubscript:", v22);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "applyGameModelUpdate:", v26);
          v27 = (id)GKCHybridStrategist::findBestMoveNPlayer(a1, v15, v42, v40, &v44, &v43);
          v28 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + v24 - 24);
          v29 = *(_QWORD *)(v28 + v25);
          v30 = *v38;
          v31 = *(_QWORD *)(*v38 + v25);
          if (v29 > v31 || v29 == v31 && v43 < *a6)
          {
            if (*(_QWORD *)(a1 + 96))
            {
              v32 = 0;
              do
              {
                *(_QWORD *)(v30 + 8 * v32) = *(_QWORD *)(v28 + 8 * v32);
                ++v32;
              }
              while (v32 < *(_QWORD *)(a1 + 96));
            }
            *v36 = v44;
            *a6 = v43;
            v33 = v26;

            v23 = v33;
            v10 = v37;
          }
          objc_msgSend(v26, "setValue:", v29);

          ++v22;
        }
        while (v22 != v21);
      }

      v13 = v39;
    }
    else
    {
      GKCHybridStrategist::getScores(a1, v10, a4);
      v23 = 0;
    }

  }
  return v23;
}

void sub_227B8B604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void GKCHybridStrategist::getScores(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  objc_msgSend(*(id *)(a1 + 56), "players");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  v8 = (_QWORD *)(v5 + 24 * a3);
  while (v7 < objc_msgSend(v6, "count"))
  {
    objc_msgSend(v6, "objectAtIndexedSubscript:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(*v8 + 8 * v7) = objc_msgSend(v10, "scoreForPlayer:", v9);

    ++v7;
  }

}

void sub_227B8B73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B8B750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_227B8B76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_227B8C780(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2A50A0](v1, 0x81C402FCC0CB6);
  _Unwind_Resume(a1);
}

void sub_227B8C8B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B8C904(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B8CA34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B8CAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B8CBD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B8CD00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B8D064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_227B8D150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227B8D204(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B8D49C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B8D788(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  MEMORY[0x22E2A50A0](v4, 0x10A1C4057B0C30BLL);
  MEMORY[0x22E2A50A0](v2, 0xA1C40BD48D6D6);

  _Unwind_Resume(a1);
}

void sub_227B8D7D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_227B8D9CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227B8D9E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227B8D9F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227B8DAEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227B8DB04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227B8DB18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227B8DBA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t GKCQuadTree<NSObject>::removeDataWithNode(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  void *v11;

  v4 = a2;
  v5 = v4;
  v6 = *(_QWORD **)(a3 + 88);
  v7 = *(_QWORD **)(a3 + 96);
  if (v6 == v7)
  {
LABEL_4:
    v8 = 0;
  }
  else
  {
    while ((id)*v6 != v4)
    {
      if (++v6 == v7)
        goto LABEL_4;
    }
    v9 = v6 + 1;
    if (v6 + 1 != v7)
    {
      do
      {
        v6 = v9;
        v10 = (void *)*(v9 - 1);
        *(v9 - 1) = *v9;
        *v9 = 0;

        v9 = v6 + 1;
      }
      while (v6 + 1 != v7);
      v7 = *(_QWORD **)(a3 + 96);
    }
    while (v7 != v6)
    {
      v11 = (void *)*--v7;

    }
    *(_QWORD *)(a3 + 96) = v6;
    v8 = 1;
  }

  return v8;
}

uint64_t GKCQuadTreeNode<NSObject>::GKCQuadTreeNode(uint64_t a1, uint64_t a2, float32x2_t a3, float32x2_t a4, float a5)
{
  float32x2_t v6;
  GKQuadtreeNode *v7;
  void *v8;

  *(double *)(a1 + 8) = *(double *)&a3;
  *(double *)(a1 + 16) = *(double *)&a4;
  *(_QWORD *)a1 = &off_24F04F048;
  v6 = vsub_f32(a4, a3);
  *(float32x2_t *)(a1 + 24) = v6;
  *(float32x2_t *)(a1 + 32) = vmla_f32(a3, v6, (float32x2_t)0x3F0000003F000000);
  *(float *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 48) = a2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  v7 = objc_alloc_init(GKQuadtreeNode);
  v8 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v7;

  objc_msgSend(*(id *)(a1 + 112), "setCQuadTreeNode:", a1);
  return a1;
}

void sub_227B8DCE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  char *v3;

  v3 = *(char **)(v1 + 88);
  if (v3)
    GKCQuadTreeNode<NSObject>::GKCQuadTreeNode(v1, v3, (void **)(v1 + 88));
  _Unwind_Resume(a1);
}

_QWORD *GKCQuadTree<NSObject>::~GKCQuadTree(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24F04F018;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void GKCQuadTree<NSObject>::~GKCQuadTree(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24F04F018;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x22E2A50A0);
}

void GKCQuadTreeNode<NSObject>::~GKCQuadTreeNode(uint64_t a1)
{
  GKCQuadTreeNode<NSObject>::~GKCQuadTreeNode(a1);
  JUMPOUT(0x22E2A50A0);
}

uint64_t GKCQuadTreeNode<NSObject>::~GKCQuadTreeNode(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;

  *(_QWORD *)a1 = &off_24F04F048;
  v3 = (_OWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 80);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *v3 = 0u;
  v3[1] = 0u;
  v7 = *(_QWORD *)(a1 + 88);
  for (i = *(_QWORD *)(a1 + 96); i != v7; i -= 8)
  {
    v9 = *(void **)(i - 8);

  }
  *(_QWORD *)(a1 + 96) = v7;

  v10 = *(_QWORD *)(a1 + 88);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 96);
    v12 = *(void **)(a1 + 88);
    if (v11 != v10)
    {
      do
      {
        v13 = *(void **)(v11 - 8);
        v11 -= 8;

      }
      while (v11 != v10);
      v12 = *(void **)(a1 + 88);
    }
    *(_QWORD *)(a1 + 96) = v10;
    operator delete(v12);
  }
  return a1;
}

float32x2_t *GKCQuadTreeNode<NSObject>::addPoint(float32x2_t *a1, void *a2, double a3)
{
  id v5;
  id v6;
  float32x2_t v7;
  float v8;
  _QWORD *v10;
  int32x2_t v11;
  uint64_t v12;
  float32x2_t v13;
  _QWORD *v14;
  float32x2_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  id v25;

  v5 = a2;
  v6 = v5;
  v25 = v5;
  v7 = vmul_f32(a1[3], (float32x2_t)0x3F0000003F000000);
  v8 = a1[5].f32[0];
  if (v7.f32[0] < v8 || v7.f32[1] < v8)
  {
    v10 = (_QWORD *)a1[12];
    if ((unint64_t)v10 >= *(_QWORD *)&a1[13])
    {
      v14 = std::vector<NSObject * {__strong}>::__push_back_slow_path<NSObject * const {__strong}&>(&a1[11], &v25);
      v6 = v25;
      a1[12] = (float32x2_t)v14;
    }
    else
    {
      v6 = v5;
      *v10 = v6;
      a1[12] = (float32x2_t)(v10 + 1);
    }
  }
  else
  {
    v11 = vcgt_f32(a1[4], *(float32x2_t *)&a3);
    if ((v11.i8[0] & 1) != 0)
    {
      if ((v11.i8[4] & 1) != 0)
      {
        v12 = (uint64_t)a1[9];
        if (!v12)
        {
          v21 = a1[4];
          v13 = a1[1];
          v12 = operator new();
          GKCQuadTreeNode<NSObject>::GKCQuadTreeNode(v12, (uint64_t)a1, v13, v21, a1[5].f32[0]);
          a1[9] = (float32x2_t)v12;
        }
      }
      else
      {
        v12 = (uint64_t)a1[7];
        if (!v12)
        {
          v20 = a1[1];
          v23 = a1[4];
          v18 = HIDWORD(*(_QWORD *)&a1[2]);
          v12 = operator new();
          GKCQuadTreeNode<NSObject>::GKCQuadTreeNode(v12, (uint64_t)a1, (float32x2_t)__PAIR64__(v23.u32[1], v20), (float32x2_t)__PAIR64__(v18, v23.u32[0]), a1[5].f32[0]);
          a1[7] = (float32x2_t)v12;
        }
      }
    }
    else if ((v11.i8[4] & 1) != 0)
    {
      v12 = (uint64_t)a1[10];
      if (!v12)
      {
        v17 = HIDWORD(*(_QWORD *)&a1[1]);
        v19 = a1[2];
        v22 = a1[4];
        v12 = operator new();
        GKCQuadTreeNode<NSObject>::GKCQuadTreeNode(v12, (uint64_t)a1, (float32x2_t)__PAIR64__(v17, v22.u32[0]), (float32x2_t)__PAIR64__(v22.u32[1], v19), a1[5].f32[0]);
        a1[10] = (float32x2_t)v12;
      }
    }
    else
    {
      v12 = (uint64_t)a1[8];
      if (!v12)
      {
        v24 = a1[4];
        v16 = a1[2];
        v12 = operator new();
        GKCQuadTreeNode<NSObject>::GKCQuadTreeNode(v12, (uint64_t)a1, v24, v16, a1[5].f32[0]);
        a1[8] = (float32x2_t)v12;
      }
    }
    a1 = (float32x2_t *)GKCQuadTreeNode<NSObject>::addPoint(v12, v6, a3);
  }

  return a1;
}

void sub_227B8E0D0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x22E2A50A0](v2, 0x10A1C4057B0C30BLL);

  _Unwind_Resume(a1);
}

void sub_227B8E104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

float32x2_t *GKCQuadTreeNode<NSObject>::addQuad(float32x2_t *a1, void *a2, __n128 a3, double a4)
{
  id v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  float v10;
  float v11;
  _QWORD *v13;
  unsigned __int8 v14;
  float32x2_t v15;
  char v16;
  BOOL v17;
  char v18;
  BOOL v19;
  BOOL v20;
  float v21;
  BOOL v22;
  _QWORD *v23;
  float32x2_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  float32x2_t v32;
  __n128 v33;
  id v35;

  v6 = a2;
  v35 = v6;
  v9.n128_u64[0] = (unint64_t)vmul_f32(a1[3], (float32x2_t)0x3F0000003F000000);
  v10 = a1[5].f32[0];
  v11 = v9.n128_f32[1];
  if (v9.n128_f32[0] > v10 && v9.n128_f32[1] > v10)
  {
    v7.n128_u64[0] = (unint64_t)a1[4];
    v14 = vcgt_f32((float32x2_t)v7.n128_u64[0], (float32x2_t)a3.n128_u64[0]).u8[0];
    v15 = vadd_f32(*(float32x2_t *)&a4, (float32x2_t)a3.n128_u64[0]);
    v33 = v7;
    v7.n128_u64[0] = (unint64_t)vcgt_f32(v15, vadd_f32((float32x2_t)v7.n128_u64[0], (float32x2_t)v9.n128_u64[0]));
    v16 = v14 | v7.n128_u8[0];
    if ((v16 & 1) == 0
      && ((v8.n128_u64[1] = v33.n128_u64[1], v7.n128_u32[0] = v15.u32[1], a3.n128_f32[1] >= v33.n128_f32[1])
        ? (v17 = v15.f32[1] <= (float)(v33.n128_f32[1] + v9.n128_f32[1]))
        : (v17 = 0),
          v17))
    {
      if (!*(_QWORD *)&a1[8])
      {
        v24 = a1[2];
        v25 = operator new();
        GKCQuadTreeNode<NSObject>::GKCQuadTreeNode(v25, (uint64_t)a1, (float32x2_t)v33.n128_u64[0], v24, a1[5].f32[0]);
        a1[8] = (float32x2_t)v25;
      }
    }
    else
    {
      v8.n128_u64[0] = (unint64_t)a1[1];
      v32 = (float32x2_t)v8.n128_u64[0];
      v18 = vcgt_f32((float32x2_t)v8.n128_u64[0], (float32x2_t)a3.n128_u64[0]).u8[0] | vcgt_f32(v15, vadd_f32((float32x2_t)v8.n128_u64[0], (float32x2_t)v9.n128_u64[0])).u8[0];
      if ((v18 & 1) == 0
        && ((v7 = v33,
             v9 = a3,
             v9.n128_u32[0] = v15.u32[1],
             v7.n128_f32[0] = v33.n128_f32[1] + v11,
             a3.n128_f32[1] >= v33.n128_f32[1])
          ? (v19 = v15.f32[1] <= v7.n128_f32[0])
          : (v19 = 0),
            v19))
      {
        if (!*(_QWORD *)&a1[7])
        {
          v31 = HIDWORD(*(_QWORD *)&a1[2]);
          v26 = operator new();
          GKCQuadTreeNode<NSObject>::GKCQuadTreeNode(v26, (uint64_t)a1, (float32x2_t)__PAIR64__(v33.n128_u32[1], v32.u32[0]), (float32x2_t)__PAIR64__(v31, v33.n128_u32[0]), a1[5].f32[0]);
          a1[7] = (float32x2_t)v26;
        }
      }
      else if ((v16 & 1) == 0
             && ((v9 = a3,
                  v7 = v8,
                  v9.n128_u32[0] = v15.u32[1],
                  v7.n128_f32[0] = v8.n128_f32[1] + v11,
                  a3.n128_f32[1] >= v8.n128_f32[1])
               ? (v20 = v15.f32[1] <= v7.n128_f32[0])
               : (v20 = 0),
                 v20))
      {
        if (!*(_QWORD *)&a1[10])
        {
          v30 = a1[2];
          v27 = operator new();
          GKCQuadTreeNode<NSObject>::GKCQuadTreeNode(v27, (uint64_t)a1, (float32x2_t)__PAIR64__(v32.u32[1], v33.n128_u32[0]), (float32x2_t)__PAIR64__(v33.n128_u32[1], v30), a1[5].f32[0]);
          a1[10] = (float32x2_t)v27;
        }
      }
      else
      {
        if ((v18 & 1) != 0
          || ((v9 = a3,
               v9.n128_u32[0] = a3.n128_u32[1],
               v7 = v8,
               v7.n128_u32[0] = HIDWORD(*(_QWORD *)&a1[1]),
               v21 = v8.n128_f32[1] + v11,
               a3.n128_f32[1] >= v8.n128_f32[1])
            ? (v22 = v15.f32[1] <= v21)
            : (v22 = 0),
              !v22))
        {
          v13 = (_QWORD *)a1[12];
          if ((unint64_t)v13 < *(_QWORD *)&a1[13])
            goto LABEL_29;
LABEL_30:
          v23 = std::vector<NSObject * {__strong}>::__push_back_slow_path<NSObject * const {__strong}&>(&a1[11], &v35);
          goto LABEL_31;
        }
        if (!*(_QWORD *)&a1[9])
        {
          v29 = operator new();
          GKCQuadTreeNode<NSObject>::GKCQuadTreeNode(v29, (uint64_t)a1, v32, (float32x2_t)v33.n128_u64[0], a1[5].f32[0]);
          a1[9] = (float32x2_t)v29;
        }
      }
    }
    a1 = (float32x2_t *)GKCQuadTreeNode<NSObject>::addQuad(a3, a4, v9, v7);
    goto LABEL_41;
  }
  v13 = (_QWORD *)a1[12];
  if ((unint64_t)v13 >= *(_QWORD *)&a1[13])
    goto LABEL_30;
LABEL_29:
  *v13 = v6;
  v23 = v13 + 1;
LABEL_31:
  a1[12] = (float32x2_t)v23;
LABEL_41:

  return a1;
}

void sub_227B8E3F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x22E2A50A0](v1, 0x10A1C4057B0C30BLL);

  _Unwind_Resume(a1);
}

void sub_227B8E430(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

id *std::vector<NSObject * {__strong}>::__insert_with_size[abi:ne180100]<std::__wrap_iter<NSObject * const {__strong}*>,NSObject * const {__strong}*>(id **a1, uint64_t a2, void **a3, void **a4, uint64_t a5)
{
  id *v5;
  uint64_t v6;
  id *v7;
  void **v9;
  uint64_t v11;
  id *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void **v22;
  void **v23;
  id *v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  id *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  id *v36;
  char *v37;
  void *v38;
  id *v39;
  char *v40;
  unint64_t v41;
  id *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  id *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  id *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  id v67;
  id *v68;
  void *v69;
  unint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  id *v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  void *v79;
  void **v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  id *v85;
  void *v86;
  id *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v5 = *a1;
  v6 = a2 - (_QWORD)*a1;
  v7 = (id *)((char *)*a1 + (v6 & 0xFFFFFFFFFFFFFFF8));
  if (a5 < 1)
    return v7;
  v9 = a3;
  v11 = v6 >> 3;
  v13 = (unint64_t)a1[1];
  v12 = a1[2];
  v92 = v6 >> 3;
  if (a5 <= (uint64_t)((uint64_t)v12 - v13) >> 3)
  {
    v19 = v13 - (_QWORD)v7;
    v20 = (uint64_t)(v13 - (_QWORD)v7) >> 3;
    if (v20 >= a5)
    {
      v22 = &a3[a5];
      v24 = a1[1];
    }
    else
    {
      v22 = &a3[v20];
      if (v22 == a4)
      {
        v24 = a1[1];
        a1[1] = (id *)v13;
        if (v19 < 1)
          return v7;
      }
      else
      {
        v88 = *a1;
        v91 = a2 - (_QWORD)*a1;
        v23 = &a3[v20];
        v24 = a1[1];
        do
        {
          v25 = *v23++;
          *v24++ = v25;
        }
        while (v23 != a4);
        v5 = v88;
        v6 = v91;
        a1[1] = v24;
        if (v19 < 1)
          return v7;
      }
    }
    v26 = (char *)&v7[a5];
    v27 = ((char *)v24 - v26) >> 3;
    v28 = (uint64_t *)&v24[-a5];
    v29 = v24;
    if ((unint64_t)v28 < v13)
    {
      v30 = (v6 & 0xFFFFFFFFFFFFFFF8) + (char *)v24 - v26;
      v31 = (unint64_t)v5 + v30 + 8;
      if (v13 > v31)
        v31 = v13;
      v32 = v31 + ~(unint64_t)v5 - v30;
      if (v32 >= 0xE8)
      {
        v70 = (unint64_t)v5 + v30 + (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
        v71 = v28 >= (uint64_t *)((char *)v24 + (v32 & 0xFFFFFFFFFFFFFFF8) + 8) || (unint64_t)v24 >= v70;
        v29 = v24;
        if (v71)
        {
          v72 = (v32 >> 3) + 1;
          v73 = v72 & 0x3FFFFFFFFFFFFFFCLL;
          v28 = (uint64_t *)((char *)v28 + v73 * 8);
          v29 = &v24[v73];
          v74 = v24 + 2;
          v75 = &v5[v92 + 2] + v27;
          v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v77 = *((_OWORD *)v75 - 1);
            v78 = *(_OWORD *)v75;
            *((_OWORD *)v75 - 1) = 0uLL;
            *(_OWORD *)v75 = 0uLL;
            *(v74 - 1) = v77;
            *v74 = v78;
            v74 += 2;
            v75 += 4;
            v76 -= 4;
          }
          while (v76);
          if (v72 == (v72 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_63;
        }
      }
      else
      {
        v29 = v24;
      }
      do
      {
        v79 = (void *)*v28;
        *v28++ = 0;
        *v29++ = v79;
      }
      while ((unint64_t)v28 < v13);
    }
LABEL_63:
    a1[1] = v29;
    if (v24 != (id *)v26)
    {
      v80 = v24 - 1;
      v81 = 8 * v27;
      v82 = (uint64_t)&v5[v92 - 1];
      do
      {
        v83 = *(void **)(v82 + v81);
        *(_QWORD *)(v82 + v81) = 0;
        v84 = *v80;
        *v80-- = v83;

        v81 -= 8;
      }
      while (v81);
    }
    if (v22 != v9)
    {
      v85 = v7;
      do
      {
        v86 = *v9++;
        objc_storeStrong(v85++, v86);
      }
      while (v9 != v22);
    }
    return v7;
  }
  v14 = a5 + ((uint64_t)(v13 - (_QWORD)v5) >> 3);
  if (v14 >> 61)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v15 = (char *)v12 - (char *)v5;
  if (v15 >> 2 > v14)
    v14 = v15 >> 2;
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
    v16 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v16 = v14;
  v90 = a2 - (_QWORD)*a1;
  if (v16)
  {
    if (v16 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v17 = *a1;
    v18 = (char *)operator new(8 * v16);
  }
  else
  {
    v17 = *a1;
    v18 = 0;
  }
  v33 = &v18[8 * v11];
  v34 = v18;
  v89 = &v18[8 * v16];
  v35 = 8 * a5;
  v36 = (id *)&v33[8 * a5];
  v37 = v33;
  do
  {
    v38 = *v9++;
    *(_QWORD *)v37 = v38;
    v37 += 8;
    v35 -= 8;
  }
  while (v35);
  v39 = *a1;
  v40 = v33;
  if (*a1 != v7)
  {
    v41 = (char *)v17 + (v90 & 0xFFFFFFFFFFFFFFF8) - (char *)v39 - 8;
    v40 = v33;
    v42 = v7;
    if (v41 < 0x78)
      goto LABEL_77;
    v43 = (v90 & 0xFFFFFFFFFFFFFFF8) - (v41 & 0xFFFFFFFFFFFFFFF8);
    v44 = (unint64_t)v17 + v43 - 8;
    v45 = (unint64_t)&v34[v43 - 8];
    v46 = v44 >= (unint64_t)v33 || v45 >= (unint64_t)v7;
    v40 = v33;
    v42 = v7;
    if (!v46)
      goto LABEL_77;
    v47 = (v41 >> 3) + 1;
    v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
    v40 = &v33[-v48];
    v42 = &v7[v48 / 0xFFFFFFFFFFFFFFF8];
    v49 = 8 * v92 - 16;
    v50 = (__int128 *)((char *)v17 + v49);
    v51 = &v34[v49];
    v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v54 = *(v50 - 1);
      v53 = *v50;
      *(v50 - 1) = 0uLL;
      *v50 = 0uLL;
      *((_OWORD *)v51 - 1) = v54;
      *(_OWORD *)v51 = v53;
      v50 -= 2;
      v51 -= 32;
      v52 -= 4;
    }
    while (v52);
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_77:
      do
      {
        v55 = (uint64_t)*--v42;
        *v42 = 0;
        *((_QWORD *)v40 - 1) = v55;
        v40 -= 8;
      }
      while (v42 != v39);
    }
  }
  v56 = a1[1];
  if (v56 != v7)
  {
    v57 = (char *)v56 - ((char *)v17 + (v90 & 0xFFFFFFFFFFFFFFF8)) - 8;
    if (v57 < 0xA8)
      goto LABEL_78;
    v58 = (v90 & 0xFFFFFFFFFFFFFFF8) + (v57 & 0xFFFFFFFFFFFFFFF8);
    if (v7 < (id *)&v34[8 * a5 + 8 + v58] && v36 < (id *)((char *)v17 + v58 + 8))
      goto LABEL_78;
    v60 = (v57 >> 3) + 1;
    v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = (id *)((char *)v7 + v61);
    v36 = (id *)((char *)v36 + v61);
    v62 = &v34[8 * v92 + 16 + 8 * a5];
    v63 = &v17[v92 + 2];
    v64 = v60 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v65 = *((_OWORD *)v63 - 1);
      v66 = *(_OWORD *)v63;
      *((_OWORD *)v63 - 1) = 0uLL;
      *(_OWORD *)v63 = 0uLL;
      *((_OWORD *)v62 - 1) = v65;
      *(_OWORD *)v62 = v66;
      v62 += 32;
      v63 += 4;
      v64 -= 4;
    }
    while (v64);
    if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_78:
      do
      {
        v67 = *v7;
        *v7++ = 0;
        *v36++ = v67;
      }
      while (v7 != v56);
    }
    v7 = a1[1];
  }
  v68 = *a1;
  *a1 = (id *)v40;
  a1[1] = v36;
  a1[2] = (id *)v89;
  while (v7 != v68)
  {
    v69 = *--v7;

  }
  if (v68)
    operator delete(v68);
  return (id *)v33;
}

id *GKCQuadTreeNode<NSObject>::queryQuad(id *result, float32x2_t *a2, float32x2_t *a3, uint64_t a4)
{
  float32x2_t *v7;
  void **v8;
  void **v9;
  int32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  int32x2_t v16;
  int32x2_t v18;
  float32x2_t v19;
  char v20;
  int32x2_t v21;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v26;
  int32x2_t v27;
  float v28;
  int32x2_t v30;
  float32x2_t v32;
  int32x2_t v33;

  v7 = (float32x2_t *)result;
  while (1)
  {
    while (1)
    {
      v8 = (void **)v7[11];
      v9 = (void **)v7[12];
      if (v9 != v8)
        result = std::vector<NSObject * {__strong}>::__insert_with_size[abi:ne180100]<std::__wrap_iter<NSObject * const {__strong}*>,NSObject * const {__strong}*>((id **)a4, *(_QWORD *)(a4 + 8), v8, v9, v9 - v8);
      v10 = (int32x2_t)v7[4];
      v11 = (int32x2_t)vmul_f32(v7[3], (float32x2_t)0x3F0000003F000000);
      v12 = (int32x2_t)*a2;
      v13 = (int32x2_t)*a3;
      v14 = vadd_f32(*a3, *a2);
      if ((vcgt_f32(*a2, (float32x2_t)v10).u32[0] & 1) == 0)
        break;
      v15 = vadd_f32((float32x2_t)v10, (float32x2_t)v11);
      if ((vcgt_f32(v14, (float32x2_t)v10).u32[0] & 1) != 0 && (vcgt_f32(v15, (float32x2_t)v12).u8[0] & 1) != 0)
      {
        v16 = vcgt_f32(vadd_f32((float32x2_t)vzip2_s32(v13, v10), (float32x2_t)vzip2_s32(v12, v11)), (float32x2_t)vzip2_s32(v10, v12));
        if ((v16.i32[1] & v16.i32[0] & 1) != 0)
        {
          result = (id *)v7[8];
          if (result)
          {
            result = (id *)GKCQuadTreeNode<NSObject>::queryQuad(result, a2, a3, a4);
            v10 = (int32x2_t)v7[4];
            v12 = (int32x2_t)*a2;
            v13 = (int32x2_t)*a3;
            v14.i32[0] = vadd_f32(*a3, *a2).u32[0];
            v15.i32[0] = vadd_f32((float32x2_t)v10, (float32x2_t)v11).u32[0];
          }
        }
      }
      if (*(float *)v10.i32 >= v14.f32[0] || v15.f32[0] <= *(float *)v12.i32)
        return result;
LABEL_50:
      v32.i32[0] = vdup_lane_s32(v12, 1).u32[0];
      v32.i32[1] = v7[1].i32[1];
      v12.i32[0] = v32.i32[1];
      v33 = vcgt_f32(vadd_f32(v32, (float32x2_t)vzip2_s32(v13, v11)), (float32x2_t)v12);
      if ((v33.i32[1] & v33.i32[0] & 1) != 0)
      {
        v7 = (float32x2_t *)v7[10];
        if (v7)
          continue;
      }
      return result;
    }
    v18 = (int32x2_t)v7[1];
    v19 = vadd_f32((float32x2_t)v18, (float32x2_t)v11);
    v20 = vcgt_f32(v14, (float32x2_t)v18).u8[0] & vcgt_f32(v19, (float32x2_t)v12).u8[0];
    if ((vcgt_f32((float32x2_t)v10, v14).u32[0] & 1) == 0)
      break;
    if ((v20 & 1) != 0)
    {
      v21 = vcgt_f32(vadd_f32((float32x2_t)vzip2_s32(v13, v10), (float32x2_t)vzip2_s32(v12, v11)), (float32x2_t)vzip2_s32(v10, v12));
      if ((v21.i32[1] & v21.i32[0] & 1) != 0)
      {
        result = (id *)v7[7];
        if (result)
        {
          result = (id *)GKCQuadTreeNode<NSObject>::queryQuad(result, a2, a3, a4);
          v18 = (int32x2_t)v7[1];
          v12 = (int32x2_t)*a2;
          v13 = (int32x2_t)*a3;
          v14.i32[0] = vadd_f32(*a3, *a2).u32[0];
          v19.i32[0] = vadd_f32((float32x2_t)v18, (float32x2_t)v11).u32[0];
        }
      }
    }
    if (*(float *)v18.i32 < v14.f32[0] && v19.f32[0] > *(float *)v12.i32)
    {
      v23 = vcgt_f32(vadd_f32((float32x2_t)vzip2_s32(v13, v18), (float32x2_t)vzip2_s32(v12, v11)), (float32x2_t)vzip2_s32(v18, v12));
      if ((v23.i32[1] & v23.i32[0] & 1) != 0)
      {
        v7 = (float32x2_t *)v7[9];
        if (v7)
          continue;
      }
    }
    return result;
  }
  if ((v20 & 1) != 0)
  {
    v24 = vcgt_f32(vadd_f32((float32x2_t)vzip2_s32(v13, v10), (float32x2_t)vzip2_s32(v12, v11)), (float32x2_t)vzip2_s32(v10, v12));
    if ((v24.i32[1] & v24.i32[0] & 1) != 0)
    {
      result = (id *)v7[7];
      if (result)
      {
        result = (id *)GKCQuadTreeNode<NSObject>::queryQuad(result, a2, a3, a4);
        v18 = (int32x2_t)v7[1];
        v12 = (int32x2_t)*a2;
        v13 = (int32x2_t)*a3;
        v14.i32[0] = vadd_f32(*a3, *a2).u32[0];
        v19.i32[0] = vadd_f32((float32x2_t)v18, (float32x2_t)v11).u32[0];
      }
    }
  }
  if (*(float *)v18.i32 < v14.f32[0] && v19.f32[0] > *(float *)v12.i32)
  {
    v26 = vcgt_f32(vadd_f32((float32x2_t)vzip2_s32(v13, v18), (float32x2_t)vzip2_s32(v12, v11)), (float32x2_t)vzip2_s32(v18, v12));
    if ((v26.i32[1] & v26.i32[0] & 1) != 0)
    {
      result = (id *)v7[9];
      if (result)
      {
        result = (id *)GKCQuadTreeNode<NSObject>::queryQuad(result, a2, a3, a4);
        v12 = (int32x2_t)*a2;
        v13 = (int32x2_t)*a3;
        v14.i32[0] = vadd_f32(*a3, *a2).u32[0];
      }
    }
  }
  v27 = (int32x2_t)v7[4];
  LODWORD(v28) = vadd_f32((float32x2_t)v27, (float32x2_t)v11).u32[0];
  if (*(float *)v27.i32 < v14.f32[0] && v28 > *(float *)v12.i32)
  {
    v30 = vcgt_f32(vadd_f32((float32x2_t)vzip2_s32(v13, v27), (float32x2_t)vzip2_s32(v12, v11)), (float32x2_t)vzip2_s32(v27, v12));
    if ((v30.i32[1] & v30.i32[0] & 1) != 0)
    {
      result = (id *)v7[8];
      if (result)
      {
        result = (id *)GKCQuadTreeNode<NSObject>::queryQuad(result, a2, a3, a4);
        v27 = (int32x2_t)v7[4];
        v12 = (int32x2_t)*a2;
        v13 = (int32x2_t)*a3;
        v14.i32[0] = vadd_f32(*a3, *a2).u32[0];
        LODWORD(v28) = vadd_f32((float32x2_t)v27, (float32x2_t)v11).u32[0];
      }
    }
  }
  if (*(float *)v27.i32 < v14.f32[0] && v28 > *(float *)v12.i32)
    goto LABEL_50;
  return result;
}

uint64_t GKCQuadTreeNode<NSObject>::removeDataRecursive(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  void *v13;
  void *v14;

  v3 = a2;
  v4 = v3;
  v5 = (_QWORD *)a1[11];
  v6 = (_QWORD *)a1[12];
  if (v5 == v6)
  {
LABEL_4:

    v7 = a1[7];
    if (!v7 || (GKCQuadTreeNode<NSObject>::removeDataRecursive(v7, v4) & 1) == 0)
    {
      v8 = a1[8];
      if (!v8 || (GKCQuadTreeNode<NSObject>::removeDataRecursive(v8, v4) & 1) == 0)
      {
        v9 = a1[9];
        if (!v9 || (GKCQuadTreeNode<NSObject>::removeDataRecursive(v9, v4) & 1) == 0)
        {
          v10 = a1[10];
          if (!v10 || (GKCQuadTreeNode<NSObject>::removeDataRecursive(v10, v4) & 1) == 0)
          {

            return 0;
          }
        }
      }
    }
  }
  else
  {
    while ((id)*v5 != v3)
    {
      if (++v5 == v6)
        goto LABEL_4;
    }
    v12 = v5 + 1;
    if (v5 + 1 != v6)
    {
      do
      {
        v5 = v12;
        v13 = (void *)*(v12 - 1);
        *(v12 - 1) = *v12;
        *v12 = 0;

        v12 = v5 + 1;
      }
      while (v5 + 1 != v6);
      v6 = (_QWORD *)a1[12];
    }
    while (v6 != v5)
    {
      v14 = (void *)*--v6;

    }
    a1[12] = v5;

  }
  return 1;
}

void sub_227B8ECF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void GKCGraphNode::GKCGraphNode(GKCGraphNode *this)
{
  *(_QWORD *)this = &off_24F04F078;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = -1;
  *((_QWORD *)this + 7) = 0;
}

void GKCGraphNode::~GKCGraphNode(id *this)
{
  id v2;

  *this = &off_24F04F078;
  objc_destroyWeak(this + 7);
  v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
}

{
  id v2;

  *this = &off_24F04F078;
  objc_destroyWeak(this + 7);
  v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
}

{
  id v2;

  *this = &off_24F04F078;
  objc_destroyWeak(this + 7);
  v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2A50A0);
}

id *GKCGraphNode::addConnectionToNode(id *this, id *a2, char a3)
{
  char v4;
  uint64_t v5;
  id **v6;
  id **v7;
  uint64_t v8;
  id ***v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  id **v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id **v20;
  char *v21;
  id **v22;
  uint64_t v23;
  __int128 v24;
  id *v25;
  id WeakRetained;
  void *v27;
  id v28;

  do
  {
    v4 = a3;
    v5 = (uint64_t)this;
    v7 = (id **)this[2];
    v6 = (id **)this[3];
    if (v7 < v6)
    {
      *v7 = a2;
      v8 = (uint64_t)(v7 + 1);
      goto LABEL_23;
    }
    v9 = (id ***)(this + 1);
    v10 = (char *)this[1];
    v11 = ((char *)v7 - v10) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v13 = (char *)v6 - v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (char *)operator new(8 * v14);
      v16 = (id **)&v15[8 * v11];
      *v16 = a2;
      v8 = (uint64_t)(v16 + 1);
      if (v7 == (id **)v10)
        goto LABEL_21;
LABEL_14:
      v17 = (char *)(v7 - 1) - v10;
      if (v17 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v10 - v15) < 0x20)
        goto LABEL_29;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v20 = &v7[v19 / 0xFFFFFFFFFFFFFFF8];
      v16 = (id **)((char *)v16 - v19);
      v21 = &v15[8 * v11 - 16];
      v22 = v7 - 2;
      v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *((_OWORD *)v21 - 1) = *((_OWORD *)v22 - 1);
        *(_OWORD *)v21 = v24;
        v21 -= 32;
        v22 -= 4;
        v23 -= 4;
      }
      while (v23);
      v7 = v20;
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *--v7;
          *--v16 = v25;
        }
        while (v7 != (id **)v10);
      }
      v7 = *v9;
      goto LABEL_21;
    }
    v15 = 0;
    v16 = (id **)(8 * v11);
    *(_QWORD *)(8 * v11) = a2;
    v8 = 8 * v11 + 8;
    if (v7 != (id **)v10)
      goto LABEL_14;
LABEL_21:
    *(_QWORD *)(v5 + 8) = v16;
    *(_QWORD *)(v5 + 16) = v8;
    *(_QWORD *)(v5 + 24) = &v15[8 * v14];
    if (v7)
      operator delete(v7);
LABEL_23:
    *(_QWORD *)(v5 + 16) = v8;
    WeakRetained = objc_loadWeakRetained((id *)(v5 + 56));
    objc_msgSend(WeakRetained, "mutConnectedNodes");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_loadWeakRetained(a2 + 7);
    objc_msgSend(v27, "addObject:", v28);

    a3 = 0;
    this = a2;
    a2 = (id *)v5;
  }
  while ((v4 & 1) != 0);
  return this;
}

void sub_227B8EFD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B8EFF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id *GKCGraphNode::removeConnectionToNode(id *this, id *a2, char a3)
{
  char v4;
  uint64_t v5;
  GKCGraphNode **v6;
  unint64_t v7;
  unint64_t v8;
  GKCGraphNode **v9;
  int64_t v10;
  id WeakRetained;
  void *v12;
  id v13;

  do
  {
    v4 = a3;
    v5 = (uint64_t)this;
    v6 = (GKCGraphNode **)this[2];
    v7 = (char *)v6 - (_BYTE *)this[1];
    if ((int)(v7 >> 3) >= 1)
    {
      v8 = (v7 >> 3) + 1;
      do
      {
        v9 = (GKCGraphNode **)(*(_QWORD *)(v5 + 8) + 8 * (v8 - 2));
        if (*v9 == (GKCGraphNode *)a2)
        {
          v10 = (char *)v6 - (char *)(v9 + 1);
          if (v6 != v9 + 1)
            memmove((void *)(*(_QWORD *)(v5 + 8) + 8 * (v8 - 2)), v9 + 1, (char *)v6 - (char *)(v9 + 1));
          v6 = (GKCGraphNode **)((char *)v9 + v10);
          *(_QWORD *)(v5 + 16) = (char *)v9 + v10;
        }
        --v8;
      }
      while (v8 > 1);
    }
    WeakRetained = objc_loadWeakRetained((id *)(v5 + 56));
    objc_msgSend(WeakRetained, "mutConnectedNodes");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_loadWeakRetained(a2 + 7);
    objc_msgSend(v12, "removeObject:", v13);

    a3 = 0;
    this = a2;
    a2 = (id *)v5;
  }
  while ((v4 & 1) != 0);
  return this;
}

void sub_227B8F0E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B8F100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float GKCGraphNode::estimatedCostToNode(id *this, id *a2)
{
  objc_class *v4;
  float v5;
  id WeakRetained;
  id v7;
  float v8;

  v4 = (objc_class *)objc_opt_class();
  v5 = 0.0;
  if (methodOverridden(a2, v4, (objc_selector *)sel_estimatedCostToNode_))
  {
    WeakRetained = objc_loadWeakRetained(this + 7);
    v7 = objc_loadWeakRetained(a2 + 7);
    objc_msgSend(WeakRetained, "estimatedCostToNode:", v7);
    v5 = v8;

  }
  return v5;
}

void sub_227B8F19C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL methodOverridden(id *a1, objc_class *a2, objc_selector *a3)
{
  id *v5;
  id WeakRetained;
  void *v7;
  id v8;
  objc_class *v9;
  id v10;
  uint64_t v11;
  _BOOL8 v12;

  v5 = a1 + 7;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  if (!WeakRetained)
    return 0;
  v7 = WeakRetained;
  v8 = objc_loadWeakRetained(v5);
  v9 = (objc_class *)objc_opt_class();

  if (v9 == a2)
    return 0;
  v10 = objc_loadWeakRetained(v5);
  v11 = objc_msgSend(v10, "methodForSelector:", a3);
  v12 = v11 != -[objc_class instanceMethodForSelector:](a2, "instanceMethodForSelector:", a3);

  return v12;
}

void sub_227B8F268(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B8F27C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float GKCGraphNode::costToNode(id *this, id *a2)
{
  objc_class *v4;
  float v5;
  id WeakRetained;
  id v7;
  float v8;

  v4 = (objc_class *)objc_opt_class();
  v5 = 0.0;
  if (methodOverridden(a2, v4, (objc_selector *)sel_costToNode_))
  {
    WeakRetained = objc_loadWeakRetained(this + 7);
    v7 = objc_loadWeakRetained(a2 + 7);
    objc_msgSend(WeakRetained, "costToNode:", v7);
    v5 = v8;

  }
  return v5;
}

void sub_227B8F318(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void GKCGridGraphNode::GKCGridGraphNode(GKCGridGraphNode *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = -1;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)this = &off_24F04F0A8;
  *((_QWORD *)this + 9) = 0;
}

uint64_t GKCGridGraphNode::GKCGridGraphNode(uint64_t result, double a2)
{
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = -1;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)result = &off_24F04F0A8;
  *(double *)(result + 64) = a2;
  *(_QWORD *)(result + 72) = 0;
  return result;
}

void GKCGridGraphNode::~GKCGridGraphNode(id *this)
{
  id v2;

  objc_destroyWeak(this + 9);
  *this = &off_24F04F078;
  objc_destroyWeak(this + 7);
  v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
}

{
  id v2;

  objc_destroyWeak(this + 9);
  *this = &off_24F04F078;
  objc_destroyWeak(this + 7);
  v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
}

{
  id v2;

  objc_destroyWeak(this + 9);
  *this = &off_24F04F078;
  objc_destroyWeak(this + 7);
  v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2A50A0);
}

void GKCGridGraphNode::estimatedCostToNode(id *this, id *a2)
{
  objc_class *v4;
  id WeakRetained;
  id v6;

  v4 = (objc_class *)objc_opt_class();
  if (methodOverridden(a2, v4, (objc_selector *)sel_estimatedCostToNode_))
  {
    WeakRetained = objc_loadWeakRetained(this + 7);
    v6 = objc_loadWeakRetained(a2 + 7);
    objc_msgSend(WeakRetained, "estimatedCostToNode:", v6);

  }
  else
  {
    (*((void (**)(id *, id *))*this + 3))(this, a2);
  }
}

void sub_227B8F530(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

float GKCGridGraphNode::costToNode(int32x2_t *this, id *a2)
{
  objc_class *v4;
  id WeakRetained;
  id v6;
  float v7;
  float v8;
  int32x2_t *v10;
  float32x2_t v11;

  v4 = (objc_class *)objc_opt_class();
  if (methodOverridden(a2, v4, (objc_selector *)sel_costToNode_))
  {
    WeakRetained = objc_loadWeakRetained((id *)&this[7]);
    v6 = objc_loadWeakRetained(a2 + 7);
    objc_msgSend(WeakRetained, "costToNode:", v6);
    v8 = v7;

    return v8;
  }
  else if (a2
  {
    v11 = vsub_f32(vcvt_f32_s32(v10[8]), vcvt_f32_s32(this[8]));
    return sqrtf(vaddv_f32(vmul_f32(v11, v11)));
  }
  else
  {
    return GKCGraphNode::estimatedCostToNode((id *)this, a2);
  }
}

void sub_227B8F644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void GKCGraphNode2D::GKCGraphNode2D(GKCGraphNode2D *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = -1;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)this = &off_24F04F100;
  *((_QWORD *)this + 9) = 0;
}

uint64_t GKCGraphNode2D::GKCGraphNode2D(uint64_t result, double a2)
{
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = -1;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)result = &off_24F04F100;
  *(double *)(result + 64) = a2;
  *(_QWORD *)(result + 72) = 0;
  return result;
}

void GKCGraphNode2D::estimatedCostToNode(id *this, id *a2)
{
  objc_class *v4;
  id WeakRetained;
  id v6;

  v4 = (objc_class *)objc_opt_class();
  if (methodOverridden(a2, v4, (objc_selector *)sel_estimatedCostToNode_))
  {
    WeakRetained = objc_loadWeakRetained(this + 7);
    v6 = objc_loadWeakRetained(a2 + 7);
    objc_msgSend(WeakRetained, "estimatedCostToNode:", v6);

  }
  else
  {
    (*((void (**)(id *, id *))*this + 3))(this, a2);
  }
}

void sub_227B8F768(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

float GKCGraphNode2D::costToNode(float32x2_t *this, id *a2)
{
  objc_class *v4;
  id WeakRetained;
  id v6;
  float v7;
  float v8;
  float32x2_t *v10;
  float32x2_t v11;

  v4 = (objc_class *)objc_opt_class();
  if (methodOverridden(a2, v4, (objc_selector *)sel_costToNode_))
  {
    WeakRetained = objc_loadWeakRetained((id *)&this[7]);
    v6 = objc_loadWeakRetained(a2 + 7);
    objc_msgSend(WeakRetained, "costToNode:", v6);
    v8 = v7;

    return v8;
  }
  else if (a2
  {
    v11 = vsub_f32(v10[8], this[8]);
    return sqrtf(vaddv_f32(vmul_f32(v11, v11)));
  }
  else
  {
    return GKCGraphNode::estimatedCostToNode((id *)this, a2);
  }
}

void sub_227B8F874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void GKCGraphNode3D::GKCGraphNode3D(GKCGraphNode3D *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = -1;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)this = &off_24F04F148;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
}

uint64_t GKCGraphNode3D::GKCGraphNode3D(uint64_t result, __n128 a2)
{
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = -1;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)result = &off_24F04F148;
  *(__n128 *)(result + 64) = a2;
  *(_QWORD *)(result + 80) = 0;
  return result;
}

void GKCGraphNode3D::estimatedCostToNode(id *this, id *a2)
{
  objc_class *v4;
  id WeakRetained;
  id v6;

  v4 = (objc_class *)objc_opt_class();
  if (methodOverridden(a2, v4, (objc_selector *)sel_estimatedCostToNode_))
  {
    WeakRetained = objc_loadWeakRetained(this + 7);
    v6 = objc_loadWeakRetained(a2 + 7);
    objc_msgSend(WeakRetained, "estimatedCostToNode:", v6);

  }
  else
  {
    (*((void (**)(id *, id *))*this + 3))(this, a2);
  }
}

void sub_227B8F99C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

float GKCGraphNode3D::costToNode(GKCGraphNode3D *this, id *a2)
{
  objc_class *v4;
  id WeakRetained;
  id v6;
  float v7;
  float v8;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;

  v4 = (objc_class *)objc_opt_class();
  if (methodOverridden(a2, v4, (objc_selector *)sel_costToNode_))
  {
    WeakRetained = objc_loadWeakRetained((id *)this + 7);
    v6 = objc_loadWeakRetained(a2 + 7);
    objc_msgSend(WeakRetained, "costToNode:", v6);
    v8 = v7;

    return v8;
  }
  else if (a2
  {
    v11 = vsubq_f32(v10[4], *((float32x4_t *)this + 4));
    v12 = vmulq_f32(v11, v11);
    return sqrtf(vaddq_f32(vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2)).f32[0]);
  }
  else
  {
    return GKCGraphNode::estimatedCostToNode((id *)this, a2);
  }
}

void sub_227B8FAB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void GKCGraphNode2D::~GKCGraphNode2D(id *this)
{
  id v2;

  objc_destroyWeak(this + 9);
  *this = &off_24F04F078;
  objc_destroyWeak(this + 7);
  v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
}

{
  id v2;

  objc_destroyWeak(this + 9);
  *this = &off_24F04F078;
  objc_destroyWeak(this + 7);
  v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2A50A0);
}

void GKCGraphNode3D::~GKCGraphNode3D(id *this)
{
  id v2;

  objc_destroyWeak(this + 10);
  *this = &off_24F04F078;
  objc_destroyWeak(this + 7);
  v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
}

{
  id v2;

  objc_destroyWeak(this + 10);
  *this = &off_24F04F078;
  objc_destroyWeak(this + 7);
  v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2A50A0);
}

void sub_227B8FD24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __lcg(int a1)
{
  return (1103515245 * a1 + 12345);
}

uint64_t hash3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 16777619 * ((16777619 * ((16777619 * (a1 ^ 0x811C9DC5)) ^ a2)) ^ a3);
}

float __voronoiNoise(char a1, unsigned int a2, float32x4_t a3, float32x4_t a4, float a5)
{
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int32x2_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  uint64_t v16;
  int8x16_t v17;
  float32x2_t v18;
  uint64_t i;
  uint64_t v20;
  int8x16_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x2_t v32;
  float32x4_t v33;
  int32x2_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  float v39;
  float v40;

  v10 = vmulq_n_f32(a3, a4.f32[0]);
  LODWORD(v5) = vcvtms_s32_f32(v10.f32[2]);
  *(float32x2_t *)a4.f32 = vrndm_f32(*(float32x2_t *)v10.f32);
  v11 = vcvt_s32_f32(*(float32x2_t *)a4.f32);
  a4.i32[2] = floorf(v10.f32[2]);
  v12 = v11.u32[1];
  v13 = v11.u32[0];
  v14 = v5 - 1;
  v15 = 0uLL;
  v16 = -1;
  v6.i32[0] = 2139095039;
  v17.i64[0] = 0xFFFFFFFFLL;
  v17.i64[1] = 0xFFFFFFFFLL;
  v18 = (float32x2_t)vdup_n_s32(0x2F800000u);
  do
  {
    for (i = -1; i != 2; ++i)
    {
      v20 = 16777619 * ((16777619 * ((v16 + v13) ^ 0x811C9DC5)) ^ (v12 + i));
      v21.i64[0] = 1103515245 * (a2 + 16777619 * (v20 ^ v14)) + 12345;
      v21.i64[1] = 1103515245 * (v21.i64[0] + a2) + 12345;
      v22 = vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8(v21, v17)));
      v7.f32[0] = (float)(int)v16;
      v23 = v7;
      v23.f32[1] = (float)(int)i;
      *(float32x2_t *)v8.f32 = vmla_f32(*(float32x2_t *)v23.f32, v22, v18);
      v8.f32[2] = (float)((float)(1103515245
                                * (1103515245 * (1103515245 * (a2 + 16777619 * (v20 ^ v14)) + 12345 + a2) + 12345 + a2)
                                + 12345)
                        * 2.3283e-10)
                + -1.0;
      v24 = vaddq_f32(v8, a4);
      v25 = vsubq_f32(v10, v24);
      v26 = vmulq_f32(v25, v25);
      v27.i64[0] = 1103515245 * (a2 + 16777619 * (v20 ^ v5)) + 12345;
      v27.i64[1] = 1103515245 * (v27.i64[0] + a2) + 12345;
      *(float32x2_t *)v9.f32 = vmla_f32(*(float32x2_t *)v23.f32, vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8(v27, v17))), v18);
      v9.f32[2] = (float)(1103515245
                        * (1103515245 * (1103515245 * (a2 + 16777619 * (v20 ^ v5)) + 12345 + a2) + 12345 + a2)
                        + 12345)
                * 2.3283e-10;
      v28 = vaddq_f32(vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2));
      v29 = vaddq_f32(v9, a4);
      v30 = vsubq_f32(v10, v29);
      v31 = vmulq_f32(v30, v30);
      v32 = (int32x2_t)vcgtq_f32(v6, v28).u64[0];
      v33 = vaddq_f32(vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2));
      v6.f32[0] = fminf(v28.f32[0], v6.f32[0]);
      v28.i64[0] = 1103515245 * (a2 + 16777619 * (v20 ^ (v5 + 1))) + 12345;
      v34 = (int32x2_t)vcgtq_f32(v6, v33).u64[0];
      v28.i64[1] = 1103515245 * (v28.i64[0] + a2) + 12345;
      v6.f32[0] = fminf(v33.f32[0], v6.f32[0]);
      v9 = (float32x4_t)vdupq_lane_s32(v32, 0);
      *(float32x2_t *)v23.f32 = vmla_f32(*(float32x2_t *)v23.f32, vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8((int8x16_t)v28, v17))), v18);
      v23.f32[2] = (float)((float)(1103515245 * (1103515245 * (v28.i32[0] + a2) + 12345 + a2) + 12345) * 2.3283e-10)
                 + 1.0;
      v35 = vaddq_f32(v23, a4);
      v36 = vsubq_f32(v10, v35);
      v37 = vmulq_f32(v36, v36);
      v38 = vbslq_s8((int8x16_t)v9, (int8x16_t)v24, v15);
      v8 = vaddq_f32(vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2));
      v15 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v6, v8), 0), (int8x16_t)v35, vbslq_s8((int8x16_t)vdupq_lane_s32(v34, 0), (int8x16_t)v29, v38));
      v6.f32[0] = fminf(v8.f32[0], v6.f32[0]);
    }
    ++v16;
  }
  while (v16 != 2);
  if ((a1 & 1) != 0)
  {
    v39 = -(a5 + sqrtf(v6.f32[0]) * -1.73205081 * a5);
    v40 = fminf(v39, 1.0);
  }
  else
  {
    v40 = fminf((float)(a5 * 2.3283e-10)* (float)(-131238505 * ((16777619 * ((16777619 * (v15.i32[0] ^ 0x811C9DC5)) ^ v15.i32[1])) ^ v15.i32[2])+ 12345), 1.0);
  }
  return fmaxf(v40, 0.0);
}

void sub_227B90228(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B9023C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B902E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B902F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B903B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227B903D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B903E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227B9048C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227B904A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *ClipperLib::PolyTree::Clear(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = this;
  v2 = this[10];
  v3 = this[11];
  if (v3 != v2)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v4);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v2 = v1[10];
        v3 = v1[11];
      }
      ++v4;
    }
    while (v4 < (v3 - v2) >> 3);
    if (v3 != v2)
      v1[11] = v2;
  }
  v5 = v1[4];
  if (v1[5] != v5)
    v1[5] = v5;
  return this;
}

uint64_t ClipperLib::PolyTree::GetFirst(ClipperLib::PolyTree *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1 == *((_QWORD *)this + 5))
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t ClipperLib::PolyTree::Total(ClipperLib::PolyTree *this)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)*((_QWORD *)this + 10);
  result = (*((_QWORD *)this + 11) - (_QWORD)v2) >> 3;
  if ((int)result >= 1)
    return result - (**((_QWORD **)this + 4) != *v2);
  return result;
}

double ClipperLib::PolyNode::PolyNode(ClipperLib::PolyNode *this)
{
  double result;

  *(_QWORD *)this = &off_24F04F190;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 53) = 0u;
  return result;
}

uint64_t ClipperLib::PolyNode::ChildCount(ClipperLib::PolyNode *this)
{
  return (*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3;
}

void ClipperLib::PolyNode::AddChild(ClipperLib::PolyNode *this, ClipperLib::PolyNode *a2)
{
  void **v4;
  char *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v5 = (char *)*((_QWORD *)this + 4);
  v6 = (char *)*((_QWORD *)this + 5);
  v4 = (void **)((char *)this + 32);
  v7 = *((_QWORD *)this + 6);
  v8 = v6;
  v9 = v6 - v5;
  if ((unint64_t)v6 < v7)
  {
    *(_QWORD *)v6 = a2;
    v10 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  v11 = v9 >> 3;
  v12 = (v9 >> 3) + 1;
  if (v12 >> 61)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v13 = v7 - (_QWORD)v5;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = operator new(8 * v14);
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = a2;
    v10 = (uint64_t)(v16 + 1);
    v18 = (char *)(v6 - v5);
    if (v6 == v5)
      goto LABEL_21;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (_QWORD *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = a2;
  v10 = 8 * v11 + 8;
  v18 = (char *)(v6 - v5);
  if (v6 != v5)
  {
LABEL_14:
    v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v6 - &v15[v9 & 0xFFFFFFFFFFFFFFF8]) < 0x20)
      goto LABEL_28;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = &v6[-v21];
    v16 = (_QWORD *)((char *)v16 - v21);
    v22 = &v15[8 * v11 - 16];
    v23 = v6 - 16;
    v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v26 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *--v16 = v26;
      }
      while (v8 != v5);
    }
    v8 = (char *)*v4;
  }
LABEL_21:
  *((_QWORD *)this + 4) = v16;
  *((_QWORD *)this + 5) = v10;
  *((_QWORD *)this + 6) = v17;
  if (v8)
    operator delete(v8);
LABEL_23:
  *((_QWORD *)this + 5) = v10;
  *((_QWORD *)a2 + 7) = this;
  *((_DWORD *)a2 + 16) = (unint64_t)v9 >> 3;
}

uint64_t ClipperLib::PolyNode::GetNext(ClipperLib::PolyNode *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 4);
  if (v1 != *((_QWORD *)this + 5))
    return *(_QWORD *)v1;
  do
  {
    v5 = *((_QWORD *)this + 7);
    if (!v5)
      return 0;
    v3 = *((unsigned int *)this + 16);
    v4 = *(_QWORD *)(v5 + 32);
    this = (ClipperLib::PolyNode *)*((_QWORD *)this + 7);
  }
  while (((*(_QWORD *)(v5 + 40) - v4) >> 3) - 1 == v3);
  return *(_QWORD *)(v4 + 8 * (v3 + 1));
}

uint64_t ClipperLib::PolyNode::GetNextSiblingUp(ClipperLib::PolyNode *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  while (1)
  {
    v1 = *((_QWORD *)this + 7);
    if (!v1)
      break;
    v2 = *((unsigned int *)this + 16);
    v3 = *(_QWORD *)(v1 + 32);
    this = (ClipperLib::PolyNode *)*((_QWORD *)this + 7);
    if (((*(_QWORD *)(v1 + 40) - v3) >> 3) - 1 != v2)
      return *(_QWORD *)(v3 + 8 * (v2 + 1));
  }
  return 0;
}

uint64_t ClipperLib::PolyNode::IsHole(ClipperLib::PolyNode *this)
{
  int v1;
  char v2;

  v1 = 1;
  do
  {
    v2 = v1;
    this = (ClipperLib::PolyNode *)*((_QWORD *)this + 7);
    v1 ^= 1u;
  }
  while (this);
  return v2 & 1;
}

uint64_t ClipperLib::PolyNode::IsOpen(ClipperLib::PolyNode *this)
{
  return *((unsigned __int8 *)this + 68);
}

unint64_t ClipperLib::Int128Mul@<X0>(unint64_t this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = this >> 63;
  v4 = (unint64_t)a2 >> 63;
  if ((this & 0x8000000000000000) == 0)
    v5 = this;
  else
    v5 = -(uint64_t)this;
  if (a2 >= 0)
    v6 = a2;
  else
    v6 = -a2;
  v7 = v6 * (unint64_t)v5;
  v8 = ((HIDWORD(v6) * (unint64_t)v5 + v6 * (unint64_t)HIDWORD(v5)) >> 32)
     + HIDWORD(v6) * (unint64_t)HIDWORD(v5);
  v9 = v6 * v5;
  *a3 = v9;
  a3[1] = v8;
  if (v9 < v7)
  {
    a3[1] = ++v8;
    if ((_DWORD)v3 == (_DWORD)v4)
      return this;
  }
  else if ((_DWORD)v3 == (_DWORD)v4)
  {
    return this;
  }
  v10 = -(uint64_t)v8;
  if (v9)
    v10 = ~v8;
  *a3 = -(uint64_t)v9;
  a3[1] = v10;
  return this;
}

uint64_t *ClipperLib::Swap(uint64_t *this, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *this;
  *this = *a2;
  *a2 = v3;
  return this;
}

BOOL ClipperLib::Orientation(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  float64x2_t v8;
  float64x2_t v9;

  v1 = *a1;
  v2 = a1[1] - *a1;
  if ((int)(v2 >> 4) < 3)
    return 1;
  v4 = 0;
  v5 = (v2 >> 4) - 1;
  v6 = (v2 >> 4);
  v7 = 0.0;
  do
  {
    v8 = vcvtq_f64_s64(*(int64x2_t *)(v1 + 16 * (int)v5));
    v9 = vcvtq_f64_s64(*(int64x2_t *)(v1 + 16 * v4));
    v7 = vmulq_laneq_f64(vaddq_f64(v8, v9), vsubq_f64(v8, v9), 1).f64[0] + v7;
    LODWORD(v5) = v4++;
  }
  while (v6 != v4);
  return v7 * -0.5 >= 0.0;
}

float64_t ClipperLib::Area(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  float64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float64x2_t v7;
  float64x2_t v8;

  v1 = *a1;
  v2 = a1[1] - *a1;
  result = 0.0;
  if ((int)(v2 >> 4) >= 3)
  {
    v4 = 0;
    v5 = (v2 >> 4) - 1;
    v6 = (v2 >> 4);
    do
    {
      v7 = vcvtq_f64_s64(*(int64x2_t *)(v1 + 16 * (int)v5));
      v8 = vcvtq_f64_s64(*(int64x2_t *)(v1 + 16 * v4));
      result = vmulq_laneq_f64(vaddq_f64(v7, v8), vsubq_f64(v7, v8), 1).f64[0] + result;
      LODWORD(v5) = v4++;
    }
    while (v6 != v4);
    return result * -0.5;
  }
  return result;
}

double ClipperLib::Area(uint64_t a1)
{
  _QWORD *v1;
  double v2;
  _QWORD *v3;

  v1 = *(_QWORD **)(a1 + 24);
  if (!v1)
    return 0.0;
  v2 = 0.0;
  v3 = *(_QWORD **)(a1 + 24);
  do
  {
    v2 = v2 + (double)(uint64_t)(*(_QWORD *)(v3[4] + 16) - v3[2]) * (double)(uint64_t)(v3[1] + *(_QWORD *)(v3[4] + 8));
    v3 = (_QWORD *)v3[3];
  }
  while (v3 != v1);
  return v2 * 0.5;
}

uint64_t ClipperLib::PointIsVertex(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  BOOL v5;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a2;
  do
  {
    v5 = v4[1] == v2 && v4[2] == v3;
    result = v5;
    if (v5)
      break;
    v4 = (_QWORD *)v4[3];
  }
  while (v4 != a2);
  return result;
}

uint64_t ClipperLib::PointInPolygon(_QWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  double v21;

  v2 = *(uint64_t **)a2;
  v3 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if ((unint64_t)v3 < 0x30)
    return 0;
  result = 0;
  v6 = v3 >> 4;
  v8 = *v2;
  v7 = v2[1];
  v9 = 1;
  v12 = a1;
  v10 = *a1;
  v11 = v12[1];
  while (1)
  {
    v13 = v6 == v9 ? 0 : v9;
    v14 = &v2[2 * v13];
    v15 = *v14;
    v16 = v14[1];
    if (v16 == v11 && (v15 == v10 || v7 == v11 && v15 <= v10 != v8 < v10))
      return 0xFFFFFFFFLL;
    if (v7 >= v11 != v16 < v11)
      goto LABEL_5;
    v18 = __OFSUB__(v8, v10);
    v17 = v8 - v10 < 0;
    v19 = v8 - v10;
    if (v17 != v18)
    {
      v20 = v15 - v10;
      if (v15 <= v10)
        goto LABEL_5;
    }
    else
    {
      v20 = v15 - v10;
      if (v15 > v10)
      {
        result = (1 - result);
        goto LABEL_5;
      }
    }
    v21 = -((double)v20 * (double)(v7 - v11) - (double)v19 * (double)(v16 - v11));
    if (v21 == 0.0)
      return 0xFFFFFFFFLL;
    if (v16 > v7 != v21 <= 0.0)
      result = (1 - result);
    else
      result = result;
LABEL_5:
    ++v9;
    v8 = v15;
    v7 = v16;
    if (v9 > v6)
      return result;
  }
}

uint64_t ClipperLib::PointInPolygon(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  double v19;

  result = 0;
  v6 = a1;
  v4 = *a1;
  v5 = v6[1];
  v7 = a2;
  while (1)
  {
    v8 = v7;
    v7 = (_QWORD *)v7[3];
    v9 = v7[2];
    if (v9 != v5)
    {
      v11 = v8[2];
LABEL_10:
      if (v9 < v5 != v11 >= v5)
        goto LABEL_2;
      goto LABEL_11;
    }
    v10 = v7[1];
    if (v10 == v4)
      return 0xFFFFFFFFLL;
    v11 = v8[2];
    if (v11 != v5)
      goto LABEL_10;
    if (v10 <= v4 != v8[1] < v4)
      return 0xFFFFFFFFLL;
    v11 = v5;
    if (v9 >= v5)
      goto LABEL_2;
LABEL_11:
    v12 = v8[1];
    v13 = v7[1];
    v15 = __OFSUB__(v12, v4);
    v14 = v12 - v4 < 0;
    v16 = v12 - v4;
    if (v14 == v15)
      break;
    v15 = __OFSUB__(v13, v4);
    v17 = v13 == v4;
    v14 = v13 - v4 < 0;
    v18 = v13 - v4;
    if (!(v14 ^ v15 | v17))
      goto LABEL_17;
LABEL_2:
    if (v7 == a2)
      return result;
  }
  v15 = __OFSUB__(v13, v4);
  v17 = v13 == v4;
  v14 = v13 - v4 < 0;
  v18 = v13 - v4;
  if (!(v14 ^ v15 | v17))
  {
    result = (1 - result);
    goto LABEL_2;
  }
LABEL_17:
  v19 = -((double)v18 * (double)(v11 - v5) - (double)v16 * (double)(v9 - v5));
  if (v19 != 0.0)
  {
    if (v9 > v11 != v19 <= 0.0)
      result = (1 - result);
    else
      result = result;
    goto LABEL_2;
  }
  return 0xFFFFFFFFLL;
}

BOOL ClipperLib::Poly2ContainsPoly1(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;

  v4 = a1;
  while (1)
  {
    v5 = ClipperLib::PointInPolygon((_QWORD *)(v4 + 8), a2);
    if ((v5 & 0x80000000) == 0)
      break;
    v4 = *(_QWORD *)(v4 + 24);
    if (v4 == a1)
      return 1;
  }
  return v5 != 0;
}

BOOL ClipperLib::SlopesEqual(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a2 + 48);
  if (a3)
  {
    v5 = (unint64_t)v3 >> 63;
    v6 = (unint64_t)v4 >> 63;
    if (v3 < 0)
      v3 = -v3;
    if (v4 < 0)
      v4 = -v4;
    v7 = v4 * (unint64_t)v3;
    v8 = ((HIDWORD(v4) * (unint64_t)v3 + v4 * (unint64_t)HIDWORD(v3)) >> 32)
       + HIDWORD(v4) * (unint64_t)HIDWORD(v3);
    v9 = v4 * v3;
    if (v9 >= v7)
      v10 = v8;
    else
      v10 = v8 + 1;
    v11 = -(uint64_t)v10;
    if (v9)
      v11 = ~v10;
    v12 = (_DWORD)v5 == (_DWORD)v6;
    if ((_DWORD)v5 == (_DWORD)v6)
      v13 = v10;
    else
      v13 = v11;
    if (!v12)
      v9 = -(uint64_t)v9;
    v14 = *(_QWORD *)(a1 + 48);
    v15 = *(_QWORD *)(a2 + 56);
    v16 = (unint64_t)v14 >> 63;
    v17 = (unint64_t)v15 >> 63;
    if (v14 < 0)
      v14 = -v14;
    if (v15 < 0)
      v15 = -v15;
    v18 = v15 * (unint64_t)v14;
    v19 = ((HIDWORD(v15) * (unint64_t)v14 + v15 * (unint64_t)HIDWORD(v14)) >> 32)
        + HIDWORD(v15) * (unint64_t)HIDWORD(v14);
    v20 = v15 * v14;
    if (v20 >= v18)
      v21 = v19;
    else
      v21 = v19 + 1;
    v22 = -(uint64_t)v21;
    if (v20)
      v22 = ~v21;
    if ((_DWORD)v16 != (_DWORD)v17)
    {
      v21 = v22;
      v20 = -(uint64_t)v20;
    }
    if (v13 != v21)
      return 0;
  }
  else
  {
    v9 = v4 * v3;
    v20 = *(_QWORD *)(a2 + 56) * *(_QWORD *)(a1 + 48);
  }
  return v9 == v20;
}

BOOL ClipperLib::SlopesEqual(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v7 = a2 - a4;
  v8 = a3 - a5;
  if (a7)
  {
    v9 = (unint64_t)v7 >> 63;
    v10 = (unint64_t)v8 >> 63;
    if (v7 < 0)
      v7 = a4 - a2;
    if (v8 < 0)
      v8 = a5 - a3;
    v11 = v8 * (unint64_t)v7;
    v12 = ((HIDWORD(v8) * (unint64_t)v7 + v8 * (unint64_t)HIDWORD(v7)) >> 32)
        + HIDWORD(v8) * (unint64_t)HIDWORD(v7);
    v13 = v8 * v7;
    if (v13 >= v11)
      v14 = v12;
    else
      v14 = v12 + 1;
    v15 = -(uint64_t)v14;
    if (v13)
      v15 = ~v14;
    v16 = (_DWORD)v9 == (_DWORD)v10;
    if ((_DWORD)v9 == (_DWORD)v10)
      v17 = v14;
    else
      v17 = v15;
    if (!v16)
      v13 = -(uint64_t)v13;
    v18 = a1 - a3;
    v19 = a4 - a6;
    v20 = (unint64_t)(a1 - a3) >> 63;
    if (a1 - a3 < 0)
      v18 = a3 - a1;
    if (v19 < 0)
      v19 = a6 - a4;
    v21 = v19 * (unint64_t)v18;
    v22 = ((HIDWORD(v19) * (unint64_t)v18 + v19 * (unint64_t)HIDWORD(v18)) >> 32)
        + HIDWORD(v19) * (unint64_t)HIDWORD(v18);
    v23 = v19 * v18;
    if (v23 >= v21)
      v24 = v22;
    else
      v24 = v22 + 1;
    v25 = -(uint64_t)v24;
    if (v23)
      v25 = ~v24;
    if ((_DWORD)v20 != (unint64_t)(a4 - a6) >> 63)
    {
      v24 = v25;
      v23 = -(uint64_t)v23;
    }
    if (v17 != v24)
      return 0;
  }
  else
  {
    v13 = v8 * v7;
    v23 = (a4 - a6) * (a1 - a3);
  }
  return v13 == v23;
}

BOOL ClipperLib::SlopesEqual(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v9 = a2 - a4;
  v10 = a5 - a7;
  if (a9)
  {
    v11 = (unint64_t)v9 >> 63;
    v12 = (unint64_t)v10 >> 63;
    if (v9 < 0)
      v9 = a4 - a2;
    if (v10 < 0)
      v10 = a7 - a5;
    v13 = v10 * (unint64_t)v9;
    v14 = ((HIDWORD(v10) * (unint64_t)v9 + v10 * (unint64_t)HIDWORD(v9)) >> 32)
        + HIDWORD(v10) * (unint64_t)HIDWORD(v9);
    v15 = v10 * v9;
    if (v15 >= v13)
      v16 = v14;
    else
      v16 = v14 + 1;
    v17 = -(uint64_t)v16;
    if (v15)
      v17 = ~v16;
    v18 = (_DWORD)v11 == (_DWORD)v12;
    if ((_DWORD)v11 == (_DWORD)v12)
      v19 = v16;
    else
      v19 = v17;
    if (!v18)
      v15 = -(uint64_t)v15;
    v20 = a1 - a3;
    v21 = a6 - a8;
    v22 = (unint64_t)(a1 - a3) >> 63;
    if (a1 - a3 < 0)
      v20 = a3 - a1;
    if (v21 < 0)
      v21 = a8 - a6;
    v23 = v21 * (unint64_t)v20;
    v24 = ((HIDWORD(v21) * (unint64_t)v20 + v21 * (unint64_t)HIDWORD(v20)) >> 32)
        + HIDWORD(v21) * (unint64_t)HIDWORD(v20);
    v25 = v21 * v20;
    if (v25 >= v23)
      v26 = v24;
    else
      v26 = v24 + 1;
    v27 = -(uint64_t)v26;
    if (v25)
      v27 = ~v26;
    if ((_DWORD)v22 != (unint64_t)(a6 - a8) >> 63)
    {
      v26 = v27;
      v25 = -(uint64_t)v25;
    }
    if (v19 != v26)
      return 0;
  }
  else
  {
    v15 = v10 * v9;
    v25 = (a6 - a8) * (a1 - a3);
  }
  return v15 == v25;
}

double ClipperLib::IntersectPoint(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double result;
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  BOOL v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  double v36;

  result = *(double *)(a1 + 64);
  v4 = *(double *)(a2 + 64);
  if (result == v4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    a3[1] = v5;
    if (*(_QWORD *)(a1 + 40) == v5)
    {
      *a3 = *(_QWORD *)(a1 + 32);
    }
    else
    {
      v20 = result * (double)(v5 - *(_QWORD *)(a1 + 8));
      v21 = 0.5;
      if (v20 < 0.0)
        v21 = -0.5;
      result = v21 + v20;
      *a3 = *(_QWORD *)a1 + (uint64_t)result;
    }
    return result;
  }
  if (!*(_QWORD *)(a1 + 48))
  {
    v22 = *(_QWORD *)a1;
    *a3 = *(_QWORD *)a1;
    v9 = *(_QWORD *)(a2 + 8);
    if (!*(_QWORD *)(a2 + 56))
      goto LABEL_33;
    v23 = (double)v9 - (double)*(uint64_t *)a2 / v4;
    v24 = (double)v22 / v4;
    goto LABEL_30;
  }
  if (!*(_QWORD *)(a2 + 48))
  {
    v25 = *(_QWORD *)a2;
    *a3 = *(_QWORD *)a2;
    v9 = *(_QWORD *)(a1 + 8);
    if (!*(_QWORD *)(a1 + 56))
      goto LABEL_33;
    v23 = (double)v9 - (double)*(uint64_t *)a1 / result;
    v24 = (double)v25 / result;
LABEL_30:
    v26 = v23 + v24;
    v27 = 0.5;
    if (v26 < 0.0)
      v27 = -0.5;
    v9 = (uint64_t)(v27 + v26);
LABEL_33:
    a3[1] = v9;
    v16 = *(_QWORD *)(a1 + 40);
    v17 = *(_QWORD *)(a2 + 40);
    if (v9 >= v16 && v9 >= v17)
      goto LABEL_21;
LABEL_38:
    if (v16 <= v17)
      v29 = v17;
    else
      v29 = v16;
    a3[1] = v29;
    if (fabs(result) >= fabs(v4))
    {
      if (*(_QWORD *)(a2 + 40) == v29)
      {
        v30 = *(_QWORD *)(a2 + 32);
        goto LABEL_51;
      }
      v31 = *(_QWORD *)a2;
      v32 = v4 * (double)(v29 - *(_QWORD *)(a2 + 8));
    }
    else
    {
      if (*(_QWORD *)(a1 + 40) == v29)
      {
        v30 = *(_QWORD *)(a1 + 32);
        goto LABEL_51;
      }
      v31 = *(_QWORD *)a1;
      v32 = result * (double)(v29 - *(_QWORD *)(a1 + 8));
    }
    v33 = 0.5;
    if (v32 < 0.0)
      v33 = -0.5;
    v30 = v31 + (uint64_t)(v33 + v32);
LABEL_51:
    *a3 = v30;
    v19 = *(_QWORD *)(a1 + 24);
    if (v29 <= v19)
      return result;
    goto LABEL_52;
  }
  v6 = (double)*(uint64_t *)a1 - result * (double)*(uint64_t *)(a1 + 8);
  v7 = ((double)*(uint64_t *)a2 - v4 * (double)*(uint64_t *)(a2 + 8) - v6) / (result - v4);
  if (v7 >= 0.0)
    v8 = 0.5;
  else
    v8 = -0.5;
  v9 = (uint64_t)(v8 + v7);
  v10 = fabs(result);
  v11 = fabs(v4);
  v12 = v10 < v11;
  if (v10 >= v11)
    v13 = *(double *)(a2 + 64);
  else
    v13 = *(double *)(a1 + 64);
  if (!v12)
    v6 = (double)*(uint64_t *)a2 - v4 * (double)*(uint64_t *)(a2 + 8);
  v14 = v6 + v7 * v13;
  if (v14 >= 0.0)
    v15 = 0.5;
  else
    v15 = -0.5;
  *a3 = (uint64_t)(v15 + v14);
  a3[1] = v9;
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a2 + 40);
  if (v9 < v16 || v9 < v17)
    goto LABEL_38;
LABEL_21:
  v19 = *(_QWORD *)(a1 + 24);
  if (v9 <= v19)
    return result;
LABEL_52:
  a3[1] = v19;
  if (fabs(result) <= fabs(v4))
  {
    if (*(_QWORD *)(a1 + 40) == v19)
    {
      *a3 = *(_QWORD *)(a1 + 32);
      return result;
    }
    v34 = *(_QWORD *)a1;
    v35 = result * (double)(v19 - *(_QWORD *)(a1 + 8));
  }
  else
  {
    if (*(_QWORD *)(a2 + 40) == v19)
    {
      *a3 = *(_QWORD *)(a2 + 32);
      return result;
    }
    v34 = *(_QWORD *)a2;
    v35 = v4 * (double)(v19 - *(_QWORD *)(a2 + 8));
  }
  v36 = 0.5;
  if (v35 < 0.0)
    v36 = -0.5;
  result = v36 + v35;
  *a3 = v34 + (uint64_t)result;
  return result;
}

int8x16_t ClipperLib::ReversePolyPtLinks(unint64_t a1)
{
  unint64_t v1;
  int8x16_t result;

  if (a1)
  {
    v1 = a1;
    do
    {
      result = *(int8x16_t *)(v1 + 24);
      *(int8x16_t *)(v1 + 24) = vextq_s8(result, result, 8uLL);
      v1 = result.i64[0];
    }
    while (result.i64[0] != a1);
  }
  return result;
}

_QWORD *ClipperLib::DisposeOutPts(_QWORD *result)
{
  _QWORD *v1;

  if (*result)
  {
    v1 = result;
    *(_QWORD *)(*(_QWORD *)(*result + 32) + 24) = 0;
    result = (_QWORD *)*result;
    if (result)
    {
      do
      {
        *v1 = result[3];
        MEMORY[0x22E2A50A0]();
        result = (_QWORD *)*v1;
      }
      while (*v1);
    }
  }
  return result;
}

double ClipperLib::InitEdge2(uint64_t a1, int a2)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  uint64_t v10;

  v2 = (_OWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 96);
  if (*(_QWORD *)(a1 + 24) >= *(_QWORD *)(v3 + 24))
  {
    *(_OWORD *)a1 = *v2;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 16);
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 32) - *(_QWORD *)a1;
    v7 = v9 - v10;
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = v9 - v10;
    if (v9 != v10)
      goto LABEL_3;
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *v2;
    *(_OWORD *)a1 = *(_OWORD *)(v3 + 16);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 32) - *(_QWORD *)a1;
    v7 = v4 - v5;
    *(_QWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 56) = v4 - v5;
    if (v4 != v5)
    {
LABEL_3:
      result = (double)v6 / (double)v7;
      *(double *)(a1 + 64) = result;
      *(_DWORD *)(a1 + 72) = a2;
      return result;
    }
  }
  result = -1.0e40;
  *(_QWORD *)(a1 + 64) = 0xC83D6329F1C35CA5;
  *(_DWORD *)(a1 + 72) = a2;
  return result;
}

uint64_t ClipperLib::RemoveEdge(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(v1 + 96) = *(_QWORD *)(a1 + 96);
  v2 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(v2 + 104) = v1;
  *(_QWORD *)(a1 + 104) = 0;
  return v2;
}

__n128 ClipperLib::SwapPoints(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a1 = *a2;
  *a2 = result;
  return result;
}

BOOL ClipperLib::GetOverlapSegment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, _QWORD *a10)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v10 = a1 - a3;
  if (a1 - a3 < 0)
    v10 = a3 - a1;
  v11 = a2 - a4;
  if (a2 - a4 < 0)
    v11 = a4 - a2;
  if (v10 <= v11)
  {
    if (a2 < a4)
      v23 = a4;
    else
      v23 = a2;
    if (a2 < a4)
      v24 = a3;
    else
      v24 = a1;
    if (a2 < a4)
      v25 = a2;
    else
      v25 = a4;
    if (a2 < a4)
      v26 = a1;
    else
      v26 = a3;
    if (a6 < a8)
      v27 = a8;
    else
      v27 = a6;
    if (a6 < a8)
      v28 = a7;
    else
      v28 = a5;
    if (a6 < a8)
      v29 = a6;
    else
      v29 = a8;
    if (a6 < a8)
      v30 = a5;
    else
      v30 = a7;
    if (v23 >= v27)
    {
      v24 = v28;
      v23 = v27;
    }
    *a9 = v24;
    a9[1] = v23;
    if (v25 <= v29)
      v31 = v30;
    else
      v31 = v26;
    if (v25 <= v29)
      v32 = v29;
    else
      v32 = v25;
    *a10 = v31;
    a10[1] = v32;
    return a9[1] > v32;
  }
  else
  {
    if (a1 > a3)
      v12 = a4;
    else
      v12 = a2;
    if (a1 > a3)
      v13 = a3;
    else
      v13 = a1;
    if (a1 > a3)
      v14 = a2;
    else
      v14 = a4;
    if (a1 > a3)
      v15 = a1;
    else
      v15 = a3;
    if (a5 > a7)
      v16 = a8;
    else
      v16 = a6;
    if (a5 > a7)
      v17 = a7;
    else
      v17 = a5;
    if (a5 > a7)
      v18 = a6;
    else
      v18 = a8;
    if (a5 > a7)
      v19 = a5;
    else
      v19 = a7;
    if (v13 <= v17)
    {
      v13 = v17;
      v12 = v16;
    }
    *a9 = v13;
    a9[1] = v12;
    if (v15 >= v19)
      v20 = v19;
    else
      v20 = v15;
    if (v15 >= v19)
      v21 = v18;
    else
      v21 = v14;
    *a10 = v20;
    a10[1] = v21;
    return *a9 < v20;
  }
}

BOOL ClipperLib::FirstIsBottomPt(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  double v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  double v26;
  double v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  double v33;
  uint64_t v34;
  double v35;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1;
  do
  {
    v4 = (_QWORD *)v4[4];
    v5 = v4[1];
    v6 = v4[2];
  }
  while (v4 != a1 && v5 == v2 && v6 == v3);
  v9 = v6 - v3;
  if (v9)
    v10 = (double)(v5 - v2) / (double)v9;
  else
    v10 = -1.0e40;
  v11 = a1;
  do
  {
    v11 = (_QWORD *)v11[3];
    v12 = v11[1];
    v13 = v11[2];
  }
  while (v11 != a1 && v12 == v2 && v13 == v3);
  v16 = v13 - v3;
  if (v16)
    v17 = (double)(v12 - v2) / (double)v16;
  else
    v17 = -1.0e40;
  v18 = fabs(v10);
  v19 = a2[1];
  v20 = a2[2];
  v21 = a2;
  do
  {
    v21 = (_QWORD *)v21[4];
    v22 = v21[1];
    v23 = v21[2];
  }
  while (v21 != a2 && v22 == v19 && v23 == v20);
  if (v23 == v20)
    v26 = -1.0e40;
  else
    v26 = (double)(v22 - v19) / (double)(v23 - v20);
  v27 = fabs(v17);
  v28 = a2;
  do
  {
    v28 = (_QWORD *)v28[3];
    v29 = v28[1];
    v30 = v28[2];
  }
  while (v28 != a2 && v29 == v19 && v30 == v20);
  v33 = fabs(v26);
  v34 = v30 - v20;
  if (v34)
  {
    v35 = fabs((double)(v29 - v19) / (double)v34);
    if (v18 >= v33 && v18 >= v35)
      return 1;
  }
  else
  {
    v35 = fabs(-1.0e40);
    if (v18 >= v33 && v18 >= v35)
      return 1;
  }
  return v27 >= v35 && v27 >= v33;
}

_QWORD *ClipperLib::GetBottomPt(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = a1;
  v2 = (_QWORD *)a1[3];
  if (v2 == a1)
    return v1;
  v3 = 0;
  do
  {
    v4 = v2[2];
    v5 = v1[2];
    if (v4 > v5)
    {
LABEL_3:
      v3 = 0;
      v1 = v2;
      goto LABEL_4;
    }
    if (v4 == v5)
    {
      v6 = v2[1];
      v7 = v1[1];
      if (v6 <= v7)
      {
        if (v6 < v7)
          goto LABEL_3;
        if ((_QWORD *)v2[3] != v1 && (_QWORD *)v2[4] != v1)
          v3 = v2;
      }
    }
LABEL_4:
    v2 = (_QWORD *)v2[3];
  }
  while (v2 != v1);
  if (!v3 || v3 == v1)
    return v1;
  v8 = v1;
  do
  {
    if (!ClipperLib::FirstIsBottomPt(v1, v3))
      v8 = v3;
    do
      v3 = (_QWORD *)v3[3];
    while (v3[1] != v8[1] || v3[2] != v8[2]);
  }
  while (v3 != v1);
  return v8;
}

uint64_t ClipperLib::Pt2IsBetweenPt1AndPt3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 == a5 && a2 == a6)
    return 0;
  if (a1 == a3 && a2 == a4)
    return 0;
  if (a5 == a3 && a6 == a4)
    return 0;
  if (a1 == a5)
    return (a4 <= a2) ^ (a4 < a6);
  return (a3 <= a1) ^ (a3 < a5);
}

BOOL ClipperLib::HorzSegmentsOverlap(ClipperLib *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ClipperLib *v4;
  ClipperLib *v5;
  uint64_t v6;
  uint64_t v7;

  if ((uint64_t)this >= a2)
    v4 = (ClipperLib *)a2;
  else
    v4 = this;
  if ((uint64_t)this <= a2)
    v5 = (ClipperLib *)a2;
  else
    v5 = this;
  if (a3 >= a4)
    v6 = a4;
  else
    v6 = a3;
  if (a3 <= a4)
    v7 = a4;
  else
    v7 = a3;
  return (uint64_t)v4 < v7 && v6 < (uint64_t)v5;
}

double ClipperLib::ClipperBase::ClipperBase(ClipperLib::ClipperBase *this)
{
  double result;

  *(_QWORD *)this = &off_24F04F1B0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_BYTE *)this + 40) = 0;
  return result;
}

void ClipperLib::ClipperBase::~ClipperBase(ClipperLib::ClipperBase *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  void *v7;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 3) = v2;
  *(_QWORD *)this = &off_24F04F1B0;
  *((_QWORD *)this + 1) = v2;
  v5 = (char *)this + 48;
  v3 = (_QWORD *)*((_QWORD *)this + 6);
  v4 = (_QWORD *)*((_QWORD *)v5 + 1);
  if (v4 == v3)
  {
    v3 = v4;
  }
  else
  {
    v6 = 0;
    do
    {
      if (v3[v6])
      {
        MEMORY[0x22E2A5088](v3[v6], 0x1020C80AAFD436DLL);
        v3 = (_QWORD *)*((_QWORD *)this + 6);
        v4 = (_QWORD *)*((_QWORD *)this + 7);
      }
      ++v6;
    }
    while (v6 < v4 - v3);
  }
  *((_QWORD *)this + 7) = v3;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 73) = 0;
  if (v3)
    operator delete(v3);
  v7 = (void *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 3) = v7;
    operator delete(v7);
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  void *v7;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 3) = v2;
  *(_QWORD *)this = &off_24F04F1B0;
  *((_QWORD *)this + 1) = v2;
  v5 = (char *)this + 48;
  v3 = (_QWORD *)*((_QWORD *)this + 6);
  v4 = (_QWORD *)*((_QWORD *)v5 + 1);
  if (v4 == v3)
  {
    v3 = v4;
  }
  else
  {
    v6 = 0;
    do
    {
      if (v3[v6])
      {
        MEMORY[0x22E2A5088](v3[v6], 0x1020C80AAFD436DLL);
        v3 = (_QWORD *)*((_QWORD *)this + 6);
        v4 = (_QWORD *)*((_QWORD *)this + 7);
      }
      ++v6;
    }
    while (v6 < v4 - v3);
  }
  *((_QWORD *)this + 7) = v3;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 73) = 0;
  if (v3)
    operator delete(v3);
  v7 = (void *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 3) = v7;
    operator delete(v7);
  }
}

{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  void *v7;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 3) = v2;
  *(_QWORD *)this = &off_24F04F1B0;
  *((_QWORD *)this + 1) = v2;
  v5 = (char *)this + 48;
  v3 = (_QWORD *)*((_QWORD *)this + 6);
  v4 = (_QWORD *)*((_QWORD *)v5 + 1);
  if (v4 == v3)
  {
    v3 = v4;
  }
  else
  {
    v6 = 0;
    do
    {
      if (v3[v6])
      {
        MEMORY[0x22E2A5088](v3[v6], 0x1020C80AAFD436DLL);
        v3 = (_QWORD *)*((_QWORD *)this + 6);
        v4 = (_QWORD *)*((_QWORD *)this + 7);
      }
      ++v6;
    }
    while (v6 < v4 - v3);
  }
  *((_QWORD *)this + 7) = v3;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 73) = 0;
  if (v3)
    operator delete(v3);
  v7 = (void *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 3) = v7;
    operator delete(v7);
  }
  JUMPOUT(0x22E2A50A0);
}

uint64_t *ClipperLib::RangeTest(uint64_t *result, _BYTE *a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  _QWORD *exception;
  unint64_t v7;
  BOOL v8;
  BOOL v9;

  v2 = *result;
  if (*a2)
  {
    if (v2 > 0x3FFFFFFFFFFFFFFFLL)
      goto LABEL_11;
  }
  else if (v2 < 0x40000000)
  {
    v7 = result[1] - 0x40000000;
    if (v2 >= -1073741823)
    {
      v8 = v7 >= 0xFFFFFFFF80000000;
      v9 = v7 == 0xFFFFFFFF80000000;
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    if (!v9 && v8)
      return result;
    *a2 = 1;
  }
  else
  {
    *a2 = 1;
    if (v2 > 0x3FFFFFFFFFFFFFFFLL)
      goto LABEL_11;
  }
  v3 = result[1] - 0x4000000000000000;
  if (v2 >= (uint64_t)0xC000000000000001)
  {
    v4 = v3 >= 0x8000000000000000;
    v5 = v3 == 0x8000000000000000;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  if (v5 || !v4)
  {
LABEL_11:
    exception = __cxa_allocate_exception(8uLL);
    *exception = "Coordinate outside allowed range";
    __cxa_throw(exception, MEMORY[0x24BEDB718], 0);
  }
  return result;
}

_QWORD *ClipperLib::FindNextLocMin(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v4;
  _QWORD *v5;

  while (1)
  {
    while (1)
    {
      v1 = (_QWORD *)result[13];
      if (*result == *v1 && result[1] == v1[1] && (result[2] != result[4] || result[3] != result[5]))
        break;
      result = (_QWORD *)result[12];
    }
    if (result[7] && v1[7])
      return result;
    v4 = result;
    do
    {
      v5 = v4;
      v4 = (_QWORD *)v4[13];
    }
    while (!v4[7]);
    result = v5;
    if (v5[7])
    {
      if (v5[5] != v4[1])
        goto LABEL_22;
    }
    else
    {
      result = v5;
      do
        result = (_QWORD *)result[12];
      while (!result[7]);
      if (result[5] != *(_QWORD *)(result[13] + 8))
      {
LABEL_22:
        if (*v4 < *result)
          return v5;
        return result;
      }
    }
  }
}

uint64_t ClipperLib::ClipperBase::ProcessBound(_QWORD *a1, uint64_t *a2, int a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  _QWORD *v46;
  __int128 v47;

  if (*((_DWORD *)a2 + 23) != -2)
  {
    if (a2[7])
      goto LABEL_24;
    v8 = 12;
    if (a3)
      v8 = 13;
    v9 = a2[v8];
    if (*(_DWORD *)(v9 + 92) == -2)
      goto LABEL_24;
    v10 = *a2;
    v11 = *(_QWORD *)v9 == *a2;
    if (!*(_QWORD *)(v9 + 56))
    {
      if (*(_QWORD *)v9 == *a2)
      {
LABEL_24:
        v13 = a2;
        if ((a3 & 1) != 0)
        {
          do
          {
            v14 = v13;
            v15 = v13[5];
            v13 = (uint64_t *)v13[12];
          }
          while (v15 == v13[1] && *((_DWORD *)v13 + 23) != -2);
          if (!v14[7] && *((_DWORD *)v13 + 23) != -2)
          {
            v16 = v14;
            do
              v16 = (uint64_t *)v16[13];
            while (!v16[7]);
            v17 = v16[4];
            v18 = v13[4];
            if (v17 != v18 && v17 > v18)
              v14 = v16;
          }
          if (v14 != a2)
          {
            v19 = a2;
            do
            {
              v20 = (uint64_t *)v19[12];
              v19[14] = (uint64_t)v20;
              if (v19 != a2 && !v19[7] && *v19 != *(_QWORD *)(v19[13] + 32))
              {
                v21 = v19[4];
                v19[4] = *v19;
                *v19 = v21;
              }
              v19 = v20;
            }
            while (v20 != v14);
            if (!v14[7] && *v14 != *(_QWORD *)(v14[13] + 32))
            {
              v36 = v14[4];
              v14[4] = *v14;
              *v14 = v36;
            }
          }
          v37 = v14 + 12;
        }
        else
        {
          do
          {
            v22 = v13;
            v23 = v13[5];
            v13 = (uint64_t *)v13[13];
          }
          while (v23 == v13[1] && *((_DWORD *)v13 + 23) != -2);
          if (!v22[7] && *((_DWORD *)v13 + 23) != -2)
          {
            v24 = v22;
            do
              v24 = (uint64_t *)v24[12];
            while (!v24[7]);
            v25 = v24[4];
            v26 = v13[4];
            if (v25 > v26)
              v22 = v24;
            if (v25 == v26)
              v22 = v24;
          }
          if (v22 != a2)
          {
            v27 = a2;
            do
            {
              v28 = (uint64_t *)v27[13];
              v27[14] = (uint64_t)v28;
              if (v27 != a2 && !v27[7] && *v27 != *(_QWORD *)(v27[12] + 32))
              {
                v29 = v27[4];
                v27[4] = *v27;
                *v27 = v29;
              }
              v27 = v28;
            }
            while (v28 != v22);
            if (!v22[7] && *v22 != *(_QWORD *)(v22[12] + 32))
            {
              v38 = v22[4];
              v22[4] = *v22;
              *v22 = v38;
            }
          }
          v37 = v22 + 13;
        }
        return *v37;
      }
      v11 = *(_QWORD *)(v9 + 32) == v10;
    }
    if (!v11)
    {
      v12 = a2[4];
      a2[4] = v10;
      *a2 = v12;
    }
    goto LABEL_24;
  }
  v4 = a2;
  if ((a3 & 1) != 0)
  {
    do
    {
      v5 = v4;
      v6 = v4[5];
      v4 = (uint64_t *)v4[12];
    }
    while (v6 == v4[1]);
    while (v5 != a2)
    {
      if (v5[7])
        goto LABEL_58;
      v5 = (uint64_t *)v5[13];
    }
  }
  else
  {
    do
    {
      v5 = v4;
      v7 = v4[5];
      v4 = (uint64_t *)v4[13];
    }
    while (v7 == v4[1]);
    while (v5 != a2)
    {
      if (v5[7])
      {
LABEL_58:
        if (v5 == a2)
          break;
        v30 = 13;
        if (a3)
          v30 = 12;
        v31 = a2[v30];
        v32 = *(_QWORD *)(v31 + 8);
        *(_DWORD *)(v31 + 80) = 0;
        v33 = ClipperLib::ClipperBase::ProcessBound(a1, v31);
        v35 = (_QWORD *)a1[3];
        v34 = a1[4];
        if ((unint64_t)v35 >= v34)
        {
          v40 = (_QWORD *)a1[2];
          v41 = 0xAAAAAAAAAAAAAAABLL * (v35 - v40) + 1;
          if (v41 > 0xAAAAAAAAAAAAAAALL)
            _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
          v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - (_QWORD)v40) >> 3);
          if (2 * v42 > v41)
            v41 = 2 * v42;
          if (v42 >= 0x555555555555555)
            v43 = 0xAAAAAAAAAAAAAAALL;
          else
            v43 = v41;
          if (v43)
          {
            if (v43 > 0xAAAAAAAAAAAAAAALL)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v44 = (char *)operator new(24 * v43);
          }
          else
          {
            v44 = 0;
          }
          v45 = &v44[8 * (v35 - v40)];
          *(_QWORD *)v45 = v32;
          *((_QWORD *)v45 + 1) = 0;
          *((_QWORD *)v45 + 2) = v31;
          v46 = v45 + 24;
          if (v35 != v40)
          {
            do
            {
              v47 = *(_OWORD *)(v35 - 3);
              *((_QWORD *)v45 - 1) = *(v35 - 1);
              *(_OWORD *)(v45 - 24) = v47;
              v45 -= 24;
              v35 -= 3;
            }
            while (v35 != v40);
            v35 = (_QWORD *)a1[2];
          }
          a1[2] = v45;
          a1[3] = v46;
          a1[4] = &v44[24 * v43];
          if (v35)
            operator delete(v35);
          a1[3] = v46;
        }
        else
        {
          *v35 = v32;
          v35[1] = 0;
          v35[2] = v31;
          a1[3] = v35 + 3;
        }
        return v33;
      }
      v5 = (uint64_t *)v5[12];
    }
  }
  if (a3)
    return a2[12];
  else
    return a2[13];
}

uint64_t ClipperLib::ClipperBase::AddPath(uint64_t a1, int64x2_t **a2, int a3, char a4)
{
  int64x2_t *v7;
  unint64_t v8;
  unsigned int v9;
  int64x2_t *v10;
  int32x2_t v11;
  uint64_t v12;
  int64x2_t *v13;
  int v14;
  int v15;
  BOOL v16;
  int64x2_t v17;
  int32x2_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  int64x2_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *i64;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int64x2_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v44;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  BOOL v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  uint64_t v65;
  _OWORD *v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v74;
  uint64_t *v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  _QWORD *v84;
  uint64_t *v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  double v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  _QWORD *v127;
  char *v128;
  char *v129;
  __int128 v130;
  _QWORD *v132;
  ClipperLib::clipperException *exception;
  int v134;
  uint64_t v135;
  uint64_t *v136;
  _QWORD *v137;
  uint64_t v138;

  if ((a4 & 1) == 0)
  {
    exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
    ClipperLib::clipperException::clipperException(exception, "AddPath: Open paths have been disabled.");
  }
  v7 = *a2;
  v8 = (unint64_t)((char *)a2[1] - (char *)*a2) >> 4;
  v9 = v8 - 1;
  if ((int)v8 >= 2)
  {
    v10 = &v7[v9];
    while (1)
    {
      v11 = vmovn_s64(vceqq_s64(*v10, *v7));
      if ((v11.i32[0] & v11.i32[1] & 1) == 0)
        break;
      LODWORD(v8) = v8 - 1;
      --v10;
      if (v8 <= 1)
      {
        v9 = 0;
        goto LABEL_8;
      }
    }
    v9 = v8 - 1;
  }
LABEL_8:
  v12 = 152 * v9 + 304;
  v13 = &v7[v9];
  v14 = v9;
  do
  {
    v15 = v14;
    v16 = __OFSUB__(v14--, 1);
    if (v14 < 0 != v16)
      return 0;
    --v9;
    v17 = *v13--;
    v18 = vmovn_s64(vceqq_s64(v17, v7[v14]));
    v12 -= 152;
  }
  while ((v18.i32[0] & v18.i32[1] & 1) != 0);
  if (v15 < 2)
    return 0;
  v19 = v9 + 1;
  v20 = operator new[]();
  v23 = (_OWORD *)v20;
  do
  {
    v23[2] = 0uLL;
    v23[3] = 0uLL;
    *v23 = 0uLL;
    v23[1] = 0uLL;
    v23 = (_OWORD *)((char *)v23 + 152);
    v12 -= 152;
  }
  while (v12);
  v24 = *a2;
  *(int64x2_t *)(v20 + 168) = (*a2)[1];
  v25 = *(unsigned __int8 *)(a1 + 40);
  v26 = v24->i64[0];
  v135 = v20;
  if (*(_BYTE *)(a1 + 40))
    goto LABEL_17;
  if (v26 >= 0x40000000)
  {
    v25 = 1;
    *(_BYTE *)(a1 + 40) = 1;
LABEL_17:
    if (v26 > 0x3FFFFFFFFFFFFFFFLL)
      goto LABEL_115;
    v27 = v24->i64[1];
LABEL_19:
    v28 = v27 - 0x4000000000000000;
    v29 = v26 >= (uint64_t)0xC000000000000001 && v28 >= 0x8000000000000001;
    if (!v29 || (v30 = v15, i64 = v24[v15].i64, v32 = *i64, *i64 > 0x3FFFFFFFFFFFFFFFLL))
    {
LABEL_115:
      v84 = __cxa_allocate_exception(8uLL);
      *v84 = "Coordinate outside allowed range";
      __cxa_throw(v84, MEMORY[0x24BEDB718], 0);
    }
    goto LABEL_25;
  }
  v27 = v24->i64[1];
  if (v26 < -1073741823 || (unint64_t)(v27 - 0x40000000) <= 0xFFFFFFFF80000000)
  {
    v25 = 1;
    *(_BYTE *)(a1 + 40) = 1;
    goto LABEL_19;
  }
  v30 = v15;
  i64 = v24[v15].i64;
  v32 = *i64;
  if (*i64 >= 0x40000000)
  {
    v25 = 1;
    *(_BYTE *)(a1 + 40) = 1;
    if (v32 > 0x3FFFFFFFFFFFFFFFLL)
      goto LABEL_115;
LABEL_25:
    v33 = v24[v30].i64[1];
    goto LABEL_26;
  }
  v33 = v24[v15].i64[1];
  if (v32 < -1073741823 || (unint64_t)(v33 - 0x40000000) <= 0xFFFFFFFF80000000)
  {
    v25 = 1;
    *(_BYTE *)(a1 + 40) = 1;
LABEL_26:
    v34 = v33 - 0x4000000000000000;
    if (v32 < (uint64_t)0xC000000000000001 || v34 <= 0x8000000000000000)
      goto LABEL_115;
    goto LABEL_31;
  }
  v25 = 0;
LABEL_31:
  v134 = a3;
  *(_QWORD *)(v20 + 144) = 0;
  *(_OWORD *)(v20 + 112) = 0u;
  *(_OWORD *)(v20 + 128) = 0u;
  v36 = v20 + 152 * (int)v30;
  *(_OWORD *)(v20 + 80) = 0u;
  *(_OWORD *)(v20 + 96) = 0u;
  *(_OWORD *)(v20 + 48) = 0u;
  *(_OWORD *)(v20 + 64) = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_OWORD *)(v20 + 32) = 0u;
  *(_OWORD *)v20 = 0u;
  *(_QWORD *)(v20 + 96) = v20 + 152;
  *(_QWORD *)(v20 + 104) = v36;
  *(int64x2_t *)(v20 + 16) = *v24;
  *(_DWORD *)(v20 + 92) = -1;
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)(v36 + 16) = 0u;
  *(_OWORD *)(v36 + 32) = 0u;
  *(_OWORD *)(v36 + 48) = 0u;
  *(_QWORD *)(v36 + 144) = 0;
  *(_OWORD *)(v36 + 112) = 0u;
  *(_OWORD *)(v36 + 128) = 0u;
  *(_OWORD *)(v36 + 80) = 0u;
  *(_OWORD *)(v36 + 96) = 0u;
  *(_OWORD *)(v36 + 64) = 0u;
  *(_QWORD *)(v36 + 96) = v20;
  *(_QWORD *)(v36 + 104) = v20 + 152 * v15 - 152;
  *(_OWORD *)(v36 + 16) = *(_OWORD *)i64;
  *(_DWORD *)(v36 + 92) = -1;
  v37 = (uint64_t *)v20;
  v38 = v20;
  v138 = a1;
  if (v15 < 2)
    goto LABEL_58;
  v39 = &v24[v9];
  v40 = v9 + 0xFFFFFFFFLL;
  v38 = v20;
  v22 = v20 + 152 * v9 + 152;
  v41 = &v39->i64[1];
  v21 = 0x8000000000000000;
  do
  {
    v42 = *(v41 - 1);
    if (v25)
    {
      if (v42 > 0x3FFFFFFFFFFFFFFFLL)
        goto LABEL_210;
      goto LABEL_35;
    }
    if (v42 >= 0x40000000)
    {
      v25 = 1;
      *(_BYTE *)(a1 + 40) = 1;
      if (v42 > 0x3FFFFFFFFFFFFFFFLL)
        goto LABEL_210;
LABEL_35:
      if (v42 < (uint64_t)0xC000000000000001
        || (unint64_t)(*v41 - 0x4000000000000000) <= 0x8000000000000000)
      {
        goto LABEL_210;
      }
      goto LABEL_40;
    }
    v44 = *v41;
    if (v42 >= -1073741823 && (unint64_t)(*v41 - 0x40000000) > 0xFFFFFFFF80000000)
    {
      v25 = 0;
    }
    else
    {
      v25 = 1;
      *(_BYTE *)(a1 + 40) = 1;
      v46 = v44 - 0x4000000000000000;
      if (v42 < (uint64_t)0xC000000000000001 || v46 <= 0x8000000000000000)
      {
LABEL_210:
        v132 = __cxa_allocate_exception(8uLL);
        *v132 = "Coordinate outside allowed range";
        __cxa_throw(v132, MEMORY[0x24BEDB718], 0);
      }
    }
LABEL_40:
    *(_OWORD *)(v22 - 56) = 0uLL;
    *(_QWORD *)(v22 - 8) = 0;
    *(_OWORD *)(v22 - 24) = 0uLL;
    *(_OWORD *)(v22 - 40) = 0uLL;
    *(_OWORD *)(v22 - 72) = 0uLL;
    *(_OWORD *)(v22 - 88) = 0uLL;
    *(_OWORD *)(v22 - 104) = 0uLL;
    *(_OWORD *)(v22 - 120) = 0uLL;
    *(_OWORD *)(v22 - 136) = 0uLL;
    *(_OWORD *)(v22 - 152) = 0uLL;
    *(_QWORD *)(v22 - 56) = v22;
    *(_QWORD *)(v22 - 48) = v20 + 152 * v40;
    --v19;
    *(_OWORD *)(v22 - 136) = *(_OWORD *)(v41 - 1);
    *(_DWORD *)(v22 - 60) = -1;
    v41 -= 2;
    --v40;
    v22 -= 152;
  }
  while (v19 > 1);
  v37 = (uint64_t *)v20;
LABEL_58:
  while (2)
  {
    v49 = v37[2];
    v50 = v37[3];
    v51 = v37;
    v136 = v37;
    while (1)
    {
      v52 = v51;
      v53 = v49;
      v54 = v50;
      v51 = (uint64_t *)v51[12];
      v49 = v51[2];
      v50 = v51[3];
      if (v53 == v49 && v54 == v50)
        break;
      v56 = (uint64_t *)v52[13];
      if (v56 == v51)
        goto LABEL_95;
      v57 = a1;
      v58 = v56[2];
      v59 = v56[3];
      if (ClipperLib::SlopesEqual(v58, v59, v53, v54, v51[2], v51[3], *(unsigned __int8 *)(v57 + 40)))
      {
        if (!*(_BYTE *)(v138 + 72)
          || (v58 == v49 ? (v60 = v59 == v50) : (v60 = 0), v60 || (v58 == v53 ? (v61 = v59 == v54) : (v61 = 0), v61)))
        {
LABEL_55:
          if (v52 == (uint64_t *)v38)
            v38 = (uint64_t)v51;
          v56[12] = (uint64_t)v51;
          v48 = v52[12];
          *(_QWORD *)(v48 + 104) = v56;
          v52[13] = 0;
          v37 = *(uint64_t **)(v48 + 104);
          a1 = v138;
          goto LABEL_58;
        }
        if (v58 == v49)
        {
          if (v54 <= v59 == v54 < v50)
            goto LABEL_55;
        }
        else if (v53 < v49 == v53 <= v58)
        {
          goto LABEL_55;
        }
      }
      a1 = v138;
      if (v51 == v136)
      {
        v63 = v134;
        if (v136[13] == v136[12])
          goto LABEL_95;
        goto LABEL_85;
      }
    }
    if (v52 != v51)
    {
      if (v52 == (uint64_t *)v38)
        v38 = (uint64_t)v51;
      v62 = v52[13];
      *(_QWORD *)(v62 + 96) = v51;
      v37 = (uint64_t *)v52[12];
      v37[13] = v62;
      v52[13] = 0;
      continue;
    }
    break;
  }
  v63 = v134;
  if ((uint64_t *)v52[13] == v52)
    goto LABEL_95;
LABEL_85:
  v64 = 1;
  v65 = v38;
  do
  {
    while (1)
    {
      v66 = (_OWORD *)(v65 + 16);
      v67 = *(_QWORD *)(v65 + 96);
      if (*(_QWORD *)(v65 + 24) >= *(_QWORD *)(v67 + 24))
      {
        *(_OWORD *)v65 = *v66;
        *(_OWORD *)(v65 + 32) = *(_OWORD *)(v67 + 16);
      }
      else
      {
        *(_OWORD *)(v65 + 32) = *v66;
        *(_OWORD *)v65 = *(_OWORD *)(v67 + 16);
      }
      v68 = *(_QWORD *)(v65 + 32) - *(_QWORD *)v65;
      v69 = -1.0e40;
      v70 = *(_QWORD *)(v65 + 40) - *(_QWORD *)(v65 + 8);
      *(_QWORD *)(v65 + 48) = v68;
      *(_QWORD *)(v65 + 56) = v70;
      if (v70)
        v69 = (double)v68 / (double)v70;
      *(double *)(v65 + 64) = v69;
      *(_DWORD *)(v65 + 72) = v63;
      if (v64)
        break;
      v64 = 0;
      v65 = v67;
      if (v67 == v38)
        goto LABEL_97;
    }
    v71 = *(_QWORD *)(v67 + 24);
    v72 = *(_QWORD *)(v38 + 24);
    v64 = v71 == v72;
    v65 = v67;
  }
  while (v67 != v38);
  if (v71 == v72)
  {
LABEL_95:
    MEMORY[0x22E2A5088](v135, 0x1020C80AAFD436DLL, v21, v22);
    return 0;
  }
LABEL_97:
  v75 = *(uint64_t **)(a1 + 56);
  v74 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)v75 >= v74)
  {
    v77 = *(char **)(a1 + 48);
    v78 = ((char *)v75 - v77) >> 3;
    v79 = v78 + 1;
    if ((unint64_t)(v78 + 1) >> 61)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v80 = v74 - (_QWORD)v77;
    if (v80 >> 2 > v79)
      v79 = v80 >> 2;
    if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
      v81 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v81 = v79;
    if (v81)
    {
      if (v81 >> 61)
LABEL_212:
        std::__throw_bad_array_new_length[abi:ne180100]();
      v82 = (char *)operator new(8 * v81);
    }
    else
    {
      v82 = 0;
    }
    v85 = (uint64_t *)&v82[8 * v78];
    v86 = &v82[8 * v81];
    *v85 = v135;
    v76 = v85 + 1;
    if (v75 != (uint64_t *)v77)
    {
      v87 = (char *)v75 - v77 - 8;
      if (v87 < 0x58)
        goto LABEL_217;
      if ((unint64_t)(v77 - v82) < 0x20)
        goto LABEL_217;
      v88 = (v87 >> 3) + 1;
      v89 = 8 * (v88 & 0x3FFFFFFFFFFFFFFCLL);
      v90 = &v75[v89 / 0xFFFFFFFFFFFFFFF8];
      v85 = (uint64_t *)((char *)v85 - v89);
      v91 = &v82[8 * v78 - 16];
      v92 = v75 - 2;
      v93 = v88 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v94 = *(_OWORD *)v92;
        *((_OWORD *)v91 - 1) = *((_OWORD *)v92 - 1);
        *(_OWORD *)v91 = v94;
        v91 -= 32;
        v92 -= 4;
        v93 -= 4;
      }
      while (v93);
      v75 = v90;
      if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_217:
        do
        {
          v95 = *--v75;
          *--v85 = v95;
        }
        while (v75 != (uint64_t *)v77);
      }
      v75 = *(uint64_t **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 48) = v85;
    *(_QWORD *)(a1 + 56) = v76;
    *(_QWORD *)(a1 + 64) = v86;
    if (v75)
      operator delete(v75);
  }
  else
  {
    *v75 = v135;
    v76 = v75 + 1;
  }
  *(_QWORD *)(a1 + 56) = v76;
  v96 = *(uint64_t **)(v38 + 104);
  v97 = *v96;
  v98 = v96[1];
  v100 = v96[4];
  v99 = v96[5];
  if (v97 == v100 && v98 == v99)
    v38 = *(_QWORD *)(v38 + 96);
  v102 = 0;
  v137 = (_QWORD *)(a1 + 16);
  while (1)
  {
LABEL_135:
    while (1)
    {
      v103 = *(_QWORD **)(v38 + 104);
      if (*(_QWORD *)v38 == *v103
        && *(_QWORD *)(v38 + 8) == v103[1]
        && (*(_QWORD *)(v38 + 16) != *(_QWORD *)(v38 + 32) || *(_QWORD *)(v38 + 24) != *(_QWORD *)(v38 + 40)))
      {
        break;
      }
      v38 = *(_QWORD *)(v38 + 96);
    }
    if (*(_QWORD *)(v38 + 56) && v103[7])
      break;
    v106 = (_QWORD *)v38;
    do
    {
      v107 = v106;
      v106 = (_QWORD *)v106[13];
    }
    while (!v106[7]);
    v38 = (uint64_t)v107;
    if (v107[7])
    {
      if (v107[5] == v106[1])
        continue;
LABEL_154:
      if (*v106 < *(_QWORD *)v38)
        v38 = (uint64_t)v107;
      break;
    }
    v38 = (uint64_t)v107;
    do
      v38 = *(_QWORD *)(v38 + 96);
    while (!*(_QWORD *)(v38 + 56));
    if (*(_QWORD *)(v38 + 40) != *(_QWORD *)(*(_QWORD *)(v38 + 104) + 8))
      goto LABEL_154;
  }
  if (v38 != v102)
  {
    if (!v102)
      v102 = v38;
    v108 = *(_QWORD *)(v38 + 8);
    v109 = *(double *)(v38 + 64);
    v110 = *(double *)(*(_QWORD *)(v38 + 104) + 64);
    if (v109 < v110)
      v111 = v38;
    else
      v111 = *(_QWORD *)(v38 + 104);
    if (v109 < v110)
      v112 = *(_QWORD *)(v38 + 104);
    else
      v112 = v38;
    *(_DWORD *)(v112 + 76) = 1;
    *(_DWORD *)(v111 + 76) = 2;
    v113 = *(_QWORD *)(v112 + 96);
    v114 = v113 == v111;
    if (v113 == v111)
      v115 = 1;
    else
      v115 = -1;
    if (v114)
      v116 = -1;
    else
      v116 = 1;
    *(_DWORD *)(v112 + 80) = v116;
    *(_DWORD *)(v111 + 80) = v115;
    v117 = ClipperLib::ClipperBase::ProcessBound((_QWORD *)a1, (uint64_t *)v112, v109 >= v110);
    if (*(_DWORD *)(v117 + 92) == -2)
      v117 = ClipperLib::ClipperBase::ProcessBound((_QWORD *)a1, (uint64_t *)v117, v109 >= v110);
    v118 = ClipperLib::ClipperBase::ProcessBound((_QWORD *)a1, (uint64_t *)v111, v109 < v110);
    if (*(_DWORD *)(v118 + 92) == -2)
      v118 = ClipperLib::ClipperBase::ProcessBound((_QWORD *)a1, (uint64_t *)v118, v109 < v110);
    if (*(_DWORD *)(v112 + 92) == -2)
    {
      v112 = 0;
      v120 = *(_QWORD **)(a1 + 24);
      v119 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)v120 >= v119)
        goto LABEL_177;
LABEL_189:
      *v120 = v108;
      v120[1] = v112;
      v127 = v120 + 3;
      v120[2] = v111;
LABEL_196:
      *(_QWORD *)(a1 + 24) = v127;
      if (v109 < v110)
        v38 = v118;
      else
        v38 = v117;
      goto LABEL_135;
    }
    if (*(_DWORD *)(v111 + 92) == -2)
      v111 = 0;
    v120 = *(_QWORD **)(a1 + 24);
    v119 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)v120 < v119)
      goto LABEL_189;
LABEL_177:
    v121 = (_QWORD *)*v137;
    v122 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v120 - *v137) >> 3);
    v123 = v122 + 1;
    if (v122 + 1 > 0xAAAAAAAAAAAAAAALL)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v124 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v119 - (_QWORD)v121) >> 3);
    if (2 * v124 > v123)
      v123 = 2 * v124;
    if (v124 >= 0x555555555555555)
      v125 = 0xAAAAAAAAAAAAAAALL;
    else
      v125 = v123;
    if (v125)
    {
      if (v125 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_212;
      v126 = (char *)operator new(24 * v125);
    }
    else
    {
      v126 = 0;
    }
    v128 = &v126[24 * v122];
    *(_QWORD *)v128 = v108;
    *((_QWORD *)v128 + 1) = v112;
    *((_QWORD *)v128 + 2) = v111;
    v129 = v128;
    if (v120 == v121)
    {
      a1 = v138;
      v127 = v128 + 24;
      *(_QWORD *)(v138 + 16) = v128;
      *(_QWORD *)(v138 + 24) = v128 + 24;
      *(_QWORD *)(v138 + 32) = &v126[24 * v125];
      if (!v120)
        goto LABEL_196;
    }
    else
    {
      a1 = v138;
      do
      {
        v130 = *(_OWORD *)(v120 - 3);
        *((_QWORD *)v129 - 1) = *(v120 - 1);
        *(_OWORD *)(v129 - 24) = v130;
        v129 -= 24;
        v120 -= 3;
      }
      while (v120 != v121);
      v120 = (_QWORD *)*v137;
      v127 = v128 + 24;
      *(_QWORD *)(v138 + 16) = v129;
      *(_QWORD *)(v138 + 24) = v128 + 24;
      *(_QWORD *)(v138 + 32) = &v126[24 * v125];
      if (!v120)
        goto LABEL_196;
    }
    operator delete(v120);
    goto LABEL_196;
  }
  return 1;
}

void sub_227B92A10(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_227B92A24(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  __cxa_begin_catch(a1);
  MEMORY[0x22E2A5088](a10, 0x1020C80AAFD436DLL);
  __cxa_rethrow();
}

void sub_227B92A4C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

ClipperLib::clipperException *ClipperLib::clipperException::clipperException(ClipperLib::clipperException *this, const char *__s)
{
  char *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = off_24F04F2D0;
  v4 = (char *)this + 8;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    v4 = (char *)operator new(v7 + 1);
    *((_QWORD *)this + 2) = v6;
    *((_QWORD *)this + 3) = v8 | 0x8000000000000000;
    *((_QWORD *)this + 1) = v4;
  }
  else
  {
    *((_BYTE *)this + 31) = v5;
    if (!v5)
      goto LABEL_9;
  }
  memmove(v4, __s, v6);
LABEL_9:
  v4[v6] = 0;
  return this;
}

void sub_227B92B20(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void ClipperLib::clipperException::~clipperException(std::exception *this)
{
  std::exception *v1;

  v1 = this;
  this->__vftable = (std::exception_vtbl *)off_24F04F2D0;
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[1].__vftable);
    this = v1;
  }
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)off_24F04F2D0;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x22E2A50A0);
}

uint64_t ClipperLib::ClipperBase::AddPaths(uint64_t a1, uint64_t *a2, int a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  int v11;

  v4 = *a2;
  if (a2[1] == *a2)
  {
    LOBYTE(v11) = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v11 |= ClipperLib::ClipperBase::AddPath(a1, (int64x2_t **)(v4 + v9), a3, a4);
      ++v10;
      v4 = *a2;
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  return v11 & 1;
}

_QWORD *ClipperLib::ClipperBase::Clear(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = this;
  v2 = this[2];
  this[3] = v2;
  this[1] = v2;
  v4 = this[6];
  v3 = this[7];
  if (v3 == v4)
  {
    v4 = this[7];
  }
  else
  {
    v5 = 0;
    do
    {
      this = *(_QWORD **)(v4 + 8 * v5);
      if (this)
      {
        this = (_QWORD *)MEMORY[0x22E2A5088](this, 0x1020C80AAFD436DLL);
        v4 = v1[6];
        v3 = v1[7];
      }
      ++v5;
    }
    while (v5 < (v3 - v4) >> 3);
  }
  v1[7] = v4;
  *((_BYTE *)v1 + 40) = 0;
  *((_BYTE *)v1 + 73) = 0;
  return this;
}

_QWORD *ClipperLib::ClipperBase::DisposeLocalMinimaList(_QWORD *this)
{
  uint64_t v1;

  v1 = this[2];
  this[3] = v1;
  this[1] = v1;
  return this;
}

void ClipperLib::ClipperBase::Reset(ClipperLib::ClipperBase *this, __n128 a2)
{
  __n128 *v3;
  __int128 *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = (__n128 *)*((_QWORD *)this + 2);
  v4 = (__int128 *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 1) = v3;
  if (v3 != (__n128 *)v4)
  {
    std::__introsort<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *,false>(v3, v4, (uint64_t)&v8, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (char *)v3) >> 3)), 1, a2);
    for (i = *((_QWORD *)this + 2); i != *((_QWORD *)this + 3); i += 24)
    {
      v6 = *(_QWORD *)(i + 8);
      if (v6)
      {
        *(_OWORD *)(v6 + 16) = *(_OWORD *)v6;
        *(_DWORD *)(v6 + 76) = 1;
        *(_DWORD *)(v6 + 92) = -1;
      }
      v7 = *(_QWORD *)(i + 16);
      if (v7)
      {
        *(_OWORD *)(v7 + 16) = *(_OWORD *)v7;
        *(_DWORD *)(v7 + 76) = 2;
        *(_DWORD *)(v7 + 92) = -1;
      }
    }
  }
}

uint64_t ClipperLib::ClipperBase::PopLocalMinima(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 8);
  if (v1 != *(_QWORD *)(this + 24))
    *(_QWORD *)(this + 8) = v1 + 24;
  return this;
}

double ClipperLib::ClipperBase::GetBounds@<D0>(ClipperLib::ClipperBase *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  double result;

  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  if (v2 != v3)
  {
    v4 = *(uint64_t **)(v2 + 8);
    v6 = *v4;
    v5 = v4[1];
    *a2 = v6;
    a2[1] = v5;
    a2[2] = v6;
    v7 = v6;
    v8 = v5;
    while (1)
    {
      v9 = *(uint64_t **)(v2 + 8);
      v10 = *(uint64_t **)(v2 + 16);
      if (v5 <= v9[1])
        v5 = v9[1];
      a2[3] = v5;
      v11 = v9;
      do
      {
        v15 = (uint64_t *)v11[14];
        if (v15)
        {
          v12 = v11;
          while (1)
          {
            v16 = *v12;
            v12 = v15;
            if (v16 < v6)
            {
              *a2 = v16;
              v6 = v16;
              if (v16 > v7)
              {
LABEL_27:
                a2[2] = v16;
                v7 = v16;
              }
            }
            else if (v16 > v7)
            {
              goto LABEL_27;
            }
            v15 = (uint64_t *)v15[14];
            if (!v15)
              goto LABEL_8;
          }
        }
        v12 = v11;
LABEL_8:
        if (*v12 < v6)
          v6 = *v12;
        *a2 = v6;
        if (v7 <= *v12)
          v7 = *v12;
        a2[2] = v7;
        if (v12[4] < v6)
          v6 = v12[4];
        *a2 = v6;
        if (v7 <= v12[4])
          v7 = v12[4];
        a2[2] = v7;
        v13 = v12[5];
        if (v13 < v8)
          v8 = v13;
        a2[1] = v8;
        v14 = v11 == v9;
        v11 = v10;
      }
      while (v14);
      v2 += 24;
      if (v2 == v3)
        return result;
    }
  }
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  return result;
}

double ClipperLib::Clipper::Clipper(ClipperLib::Clipper *this, uint64_t *a2, char a3)
{
  uint64_t v3;
  double result;
  uint64_t v5;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[1];
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_BYTE *)this + 160) = 0;
  v5 = *(_QWORD *)this;
  *((_BYTE *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40) = 0;
  *((_BYTE *)this + 172) = a3 & 1;
  *((_BYTE *)this + 174) = (a3 & 2) != 0;
  *((_BYTE *)this + *(_QWORD *)(v5 - 24) + 72) = (a3 & 4) != 0;
  *((_BYTE *)this + *(_QWORD *)(v5 - 24) + 73) = 0;
  return result;
}

double ClipperLib::Clipper::Clipper(ClipperLib::Clipper *this, char a2)
{
  double result;

  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_QWORD *)this = &off_24F04F200;
  *((_QWORD *)this + 22) = &unk_24F04F248;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_BYTE *)this + 216) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_BYTE *)this + 160) = 0;
  *((_BYTE *)this + 172) = a2 & 1;
  *((_BYTE *)this + 174) = (a2 & 2) != 0;
  *((_BYTE *)this + 248) = (a2 & 4) != 0;
  *((_BYTE *)this + 249) = 0;
  return result;
}

void ClipperLib::Clipper::~Clipper(ClipperLib::Clipper *this, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[1];
  (*(void (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 16))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v4 = (void *)*((_QWORD *)this + 14);
  if (v4)
  {
    *((_QWORD *)this + 15) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 10);
  if (v5)
  {
    *((_QWORD *)this + 11) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 7);
  if (v6)
  {
    *((_QWORD *)this + 8) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 4);
  if (v7)
  {
    *((_QWORD *)this + 5) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 2) = v8;
    operator delete(v8);
  }
}

void ClipperLib::Clipper::~Clipper(ClipperLib::Clipper *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  void *v8;

  v3 = v2[24];
  v2[25] = v3;
  v2[22] = &off_24F04F1B0;
  v2[23] = v3;
  v6 = v2 + 28;
  v4 = (_QWORD *)v2[28];
  v5 = (_QWORD *)v6[1];
  if (v5 == v4)
  {
    v4 = v5;
  }
  else
  {
    v7 = 0;
    do
    {
      if (v4[v7])
      {
        MEMORY[0x22E2A5088](v4[v7], 0x1020C80AAFD436DLL);
        v4 = (_QWORD *)*((_QWORD *)this + 28);
        v5 = (_QWORD *)*((_QWORD *)this + 29);
      }
      ++v7;
    }
    while (v7 < v5 - v4);
  }
  *((_QWORD *)this + 29) = v4;
  *((_BYTE *)this + 216) = 0;
  *((_BYTE *)this + 249) = 0;
  if (v4)
    operator delete(v4);
  v8 = (void *)*((_QWORD *)this + 24);
  if (v8)
  {
    *((_QWORD *)this + 25) = v8;
    operator delete(v8);
  }
}

{
  ClipperLib::Clipper::~Clipper(this);
  JUMPOUT(0x22E2A50A0);
}

void `virtual thunk to'ClipperLib::Clipper::~Clipper(ClipperLib::Clipper *this)
{
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x22E2A50A0);
}

void ClipperLib::Clipper::Reset(ClipperLib::Clipper *this, __n128 a2)
{
  _QWORD *v3;
  __n128 *v4;
  __int128 *v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v3 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v4 = (__n128 *)v3[2];
  v5 = (__int128 *)v3[3];
  v3[1] = v4;
  if (v4 != (__n128 *)v5)
  {
    std::__introsort<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *,false>(v4, v5, (uint64_t)&v13, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v4) >> 3)), 1, a2);
    for (i = v3[2]; i != v3[3]; i += 24)
    {
      v7 = *(_QWORD *)(i + 8);
      if (v7)
      {
        *(_OWORD *)(v7 + 16) = *(_OWORD *)v7;
        *(_DWORD *)(v7 + 76) = 1;
        *(_DWORD *)(v7 + 92) = -1;
      }
      v8 = *(_QWORD *)(i + 16);
      if (v8)
      {
        *(_OWORD *)(v8 + 16) = *(_OWORD *)v8;
        *(_DWORD *)(v8 + 76) = 2;
        *(_DWORD *)(v8 + 92) = -1;
      }
    }
  }
  v9 = (void *)*((_QWORD *)this + 14);
  if (v9)
  {
    *((_QWORD *)this + 15) = v9;
    operator delete(v9);
  }
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  v10 = *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *(uint64_t **)((char *)this + v10 + 16);
  if (v11 != *(uint64_t **)((char *)this + v10 + 24))
  {
    do
    {
      v12 = *v11;
      v11 += 3;
      v14 = v12;
      std::priority_queue<long long>::push((uint64_t)this + 112, &v14);
    }
    while (v11 != *(uint64_t **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 24));
  }
}

void ClipperLib::Clipper::InsertScanbeam(ClipperLib::Clipper *this, uint64_t a2)
{
  uint64_t v2;

  v2 = a2;
  std::priority_queue<long long>::push((uint64_t)this + 112, &v2);
}

void `virtual thunk to'ClipperLib::Clipper::Reset(ClipperLib::Clipper *this, __n128 a2)
{
  ClipperLib::Clipper::Reset((ClipperLib::Clipper *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40)), a2);
}

uint64_t ClipperLib::Clipper::Execute(uint64_t a1, int a2, uint64_t *a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  ClipperLib::clipperException *exception;

  if (*(_BYTE *)(a1 + 160))
    return 0;
  v7 = *(_QWORD *)a1;
  if (*(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 73))
  {
    exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
    ClipperLib::clipperException::clipperException(exception, "Error: PolyTree struct is need for open path clipping.");
  }
  *(_BYTE *)(a1 + 160) = 1;
  v13 = *a3;
  v12 = a3[1];
  if (v12 != *a3)
  {
    v14 = a3[1];
    do
    {
      v16 = *(void **)(v14 - 24);
      v14 -= 24;
      v15 = v16;
      if (v16)
      {
        *(_QWORD *)(v12 - 16) = v15;
        operator delete(v15);
      }
      v12 = v14;
    }
    while (v14 != v13);
    a3[1] = v13;
    v7 = *(_QWORD *)a1;
  }
  *(_DWORD *)(a1 + 164) = a5;
  *(_DWORD *)(a1 + 168) = a4;
  *(_DWORD *)(a1 + 104) = a2;
  *(_BYTE *)(a1 + 173) = 0;
  v5 = (*(uint64_t (**)(uint64_t))(v7 + 24))(a1);
  if ((_DWORD)v5)
    ClipperLib::Clipper::BuildResult(a1, (uint64_t)a3);
  v17 = *(_QWORD *)(a1 + 16);
  if (v17 != *(_QWORD *)(a1 + 8))
  {
    v18 = 0;
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(_QWORD *)(v17 + 8 * v18);
      v20 = *(_QWORD *)(v19 + 24);
      if (v20)
      {
        *(_QWORD *)(*(_QWORD *)(v20 + 32) + 24) = 0;
        for (i = *(_QWORD *)(v19 + 24); i; i = *(_QWORD *)(v19 + 24))
        {
          *(_QWORD *)(v19 + 24) = *(_QWORD *)(i + 24);
          MEMORY[0x22E2A50A0]();
        }
      }
      MEMORY[0x22E2A50A0](v19, 0x1020C401FC46325);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v18++) = 0;
      v17 = *(_QWORD *)(a1 + 8);
    }
    while (v18 < (*(_QWORD *)(a1 + 16) - v17) >> 3);
  }
  *(_QWORD *)(a1 + 16) = v17;
  *(_BYTE *)(a1 + 160) = 0;
  return v5;
}

void sub_227B93468(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ClipperLib::Clipper::BuildResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _OWORD *v12;
  int v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  void *v24;
  int64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *__p;
  _BYTE *v32;
  unint64_t v33;

  v3 = a1;
  std::vector<std::vector<ClipperLib::IntPoint>>::reserve(a2, (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16);
  if (v5 == v4)
    return;
  v6 = 0;
  v29 = v3;
  v30 = a2;
  while (2)
  {
    if (!*(_QWORD *)(*(_QWORD *)(v4 + 8 * v6) + 24))
      goto LABEL_4;
    __p = 0;
    v32 = 0;
    v33 = 0;
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 8 * v6) + 24);
    v8 = *(_QWORD *)(v7 + 32);
    if (!v8)
      goto LABEL_3;
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 32);
    do
    {
      v11 = v9++;
      v10 = *(_QWORD *)(v10 + 24);
    }
    while (v10 != v8);
    if (!v11)
      goto LABEL_3;
    v12 = operator new(16 * v9);
    v13 = 0;
    __p = v12;
    v32 = v12;
    v33 = (unint64_t)&v12[v11 + 1];
    do
    {
      v15 = (_OWORD *)(v8 + 8);
      if ((unint64_t)v12 < v33)
      {
        *v12 = *v15;
        v14 = v12 + 1;
        goto LABEL_12;
      }
      v16 = __p;
      v17 = ((char *)v12 - (_BYTE *)__p) >> 4;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 60)
        _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
      v19 = v33 - (_QWORD)__p;
      if ((uint64_t)(v33 - (_QWORD)__p) >> 3 > v18)
        v18 = v19 >> 3;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
        v20 = 0xFFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v21 = (char *)operator new(16 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[16 * v17];
      *(_OWORD *)v22 = *v15;
      v14 = v22 + 16;
      if (v12 == v16)
      {
        __p = &v21[16 * v17];
        v32 = v22 + 16;
        v33 = (unint64_t)&v21[16 * v20];
LABEL_29:
        operator delete(v12);
        goto LABEL_12;
      }
      do
      {
        *((_OWORD *)v22 - 1) = *(v12 - 1);
        v22 -= 16;
        --v12;
      }
      while (v12 != v16);
      v12 = __p;
      __p = v22;
      v32 = v14;
      v33 = (unint64_t)&v21[16 * v20];
      if (v12)
        goto LABEL_29;
LABEL_12:
      v32 = v14;
      v8 = *(_QWORD *)(v8 + 32);
      ++v13;
      v12 = v14;
    }
    while (v13 != v9);
    v23 = *(_QWORD **)(v30 + 8);
    if ((unint64_t)v23 >= *(_QWORD *)(v30 + 16))
    {
      v28 = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>((char **)v30, (uint64_t)&__p);
    }
    else
    {
      *v23 = 0;
      v23[1] = 0;
      v23[2] = 0;
      v24 = __p;
      v25 = v32 - (_BYTE *)__p;
      if (v32 != __p)
      {
        if (v25 < 0)
          _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
        v26 = (char *)operator new(v32 - (_BYTE *)__p);
        *v23 = v26;
        v23[1] = v26;
        v27 = &v26[16 * (v25 >> 4)];
        v23[2] = v27;
        memcpy(v26, v24, v25);
        v23[1] = v27;
      }
      v28 = (char *)(v23 + 3);
      *(_QWORD *)(v30 + 8) = v23 + 3;
    }
    *(_QWORD *)(v30 + 8) = v28;
    v3 = v29;
    if (__p)
    {
      v32 = __p;
      operator delete(__p);
    }
LABEL_3:
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(_QWORD *)(v3 + 16);
LABEL_4:
    if (++v6 < (unint64_t)((v5 - v4) >> 3))
      continue;
    break;
  }
}

void sub_227B936F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  *(_QWORD *)(a11 + 8) = v13;
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ClipperLib::Clipper::DisposeAllOutRecs(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if (v2 != *(_QWORD *)(this + 8))
  {
    v3 = 0;
    v2 = *(_QWORD *)(this + 8);
    do
    {
      v4 = *(_QWORD *)(v2 + 8 * v3);
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        *(_QWORD *)(*(_QWORD *)(v5 + 32) + 24) = 0;
        for (i = *(_QWORD *)(v4 + 24); i; i = *(_QWORD *)(v4 + 24))
        {
          *(_QWORD *)(v4 + 24) = *(_QWORD *)(i + 24);
          MEMORY[0x22E2A50A0]();
        }
      }
      this = MEMORY[0x22E2A50A0](v4, 0x1020C401FC46325);
      *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8 * v3++) = 0;
      v2 = *(_QWORD *)(v1 + 8);
    }
    while (v3 < (*(_QWORD *)(v1 + 16) - v2) >> 3);
  }
  *(_QWORD *)(v1 + 16) = v2;
  return this;
}

uint64_t ClipperLib::Clipper::Execute(uint64_t a1, int a2, ClipperLib::PolyTree *a3, int a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;

  if (*(_BYTE *)(a1 + 160))
    return 0;
  *(_BYTE *)(a1 + 160) = 1;
  *(_DWORD *)(a1 + 164) = a5;
  *(_DWORD *)(a1 + 168) = a4;
  *(_DWORD *)(a1 + 104) = a2;
  *(_BYTE *)(a1 + 173) = 1;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v8)
    ClipperLib::Clipper::BuildResult2((ClipperLib::Clipper *)a1, a3);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 != *(_QWORD *)(a1 + 8))
  {
    v10 = 0;
    v9 = *(_QWORD *)(a1 + 8);
    do
    {
      v11 = *(_QWORD *)(v9 + 8 * v10);
      v12 = *(_QWORD *)(v11 + 24);
      if (v12)
      {
        *(_QWORD *)(*(_QWORD *)(v12 + 32) + 24) = 0;
        for (i = *(_QWORD *)(v11 + 24); i; i = *(_QWORD *)(v11 + 24))
        {
          *(_QWORD *)(v11 + 24) = *(_QWORD *)(i + 24);
          MEMORY[0x22E2A50A0]();
        }
      }
      MEMORY[0x22E2A50A0](v11, 0x1020C401FC46325);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10++) = 0;
      v9 = *(_QWORD *)(a1 + 8);
    }
    while (v10 < (*(_QWORD *)(a1 + 16) - v9) >> 3);
  }
  *(_QWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 160) = 0;
  return v8;
}

void ClipperLib::Clipper::BuildResult2(ClipperLib::Clipper *this, ClipperLib::PolyTree *a2)
{
  ClipperLib::PolyTree *v2;
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  _OWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  int v55;
  uint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  _OWORD *v60;
  unint64_t v61;
  _OWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  __int128 *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t i;
  ClipperLib::PolyNode *v87;
  uint64_t v88;
  ClipperLib::PolyNode *v89;
  uint64_t v90;
  uint64_t **v91;
  ClipperLib::PolyNode *v92;
  ClipperLib::Clipper *v93;
  uint64_t v94;

  v2 = a2;
  v4 = (_QWORD *)*((_QWORD *)a2 + 10);
  v91 = (uint64_t **)((char *)a2 + 80);
  v5 = (_BYTE *)*((_QWORD *)a2 + 11);
  if (v5 == (_BYTE *)v4)
  {
    v4 = (_QWORD *)*((_QWORD *)a2 + 11);
    v8 = *((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 5) != v8)
LABEL_9:
      *((_QWORD *)v2 + 5) = v8;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = v4[v6];
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v4 = (_QWORD *)*((_QWORD *)v2 + 10);
        v5 = (_BYTE *)*((_QWORD *)v2 + 11);
      }
      ++v6;
    }
    while (v6 < (v5 - (_BYTE *)v4) >> 3);
    if (v5 != (_BYTE *)v4)
      *((_QWORD *)v2 + 11) = v4;
    v8 = *((_QWORD *)v2 + 4);
    if (*((_QWORD *)v2 + 5) != v8)
      goto LABEL_9;
  }
  v9 = *((_QWORD *)this + 2) - *((_QWORD *)this + 1);
  v10 = v9 >> 3;
  if (v9 >> 3 > (unint64_t)((uint64_t)(*((_QWORD *)v2 + 12) - (_QWORD)v4) >> 3))
  {
    if (v9 < 0)
      goto LABEL_109;
    v11 = (char *)operator new(v9);
    *((_QWORD *)v2 + 10) = v11;
    *((_QWORD *)v2 + 11) = v11;
    *((_QWORD *)v2 + 12) = &v11[8 * v10];
    if (v4)
      operator delete(v4);
  }
  v12 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) == v12)
    goto LABEL_95;
  v92 = v2;
  v93 = this;
  v13 = 0;
  do
  {
    v94 = v13;
    v16 = *(_QWORD *)(v12 + 8 * v13);
    v17 = *(_QWORD *)(v16 + 24);
    if (v17)
    {
      v18 = -1;
      v19 = *(_QWORD *)(v16 + 24);
      do
      {
        v20 = v18;
        v19 = *(_QWORD *)(v19 + 24);
        ++v18;
      }
      while (v19 != v17);
      v21 = *(_BYTE *)(v16 + 5) ? 1 : 2;
      if (v18 >= v21)
      {
        v22 = *(_QWORD *)(v16 + 8);
        if (v22)
        {
          v23 = *(unsigned __int8 *)(v16 + 4);
          if (v23 == *(unsigned __int8 *)(v22 + 4) || !*(_QWORD *)(v22 + 24))
          {
            do
            {
              if (*(unsigned __int8 *)(v22 + 4) != v23 && *(_QWORD *)(v22 + 24))
                break;
              v22 = *(_QWORD *)(v22 + 8);
            }
            while (v22);
            *(_QWORD *)(v16 + 8) = v22;
          }
        }
        v24 = operator new();
        v25 = v24;
        *(_QWORD *)v24 = &off_24F04F190;
        *(_OWORD *)(v24 + 8) = 0u;
        v26 = (_QWORD *)(v24 + 8);
        *(_OWORD *)(v24 + 24) = 0u;
        *(_OWORD *)(v24 + 40) = 0u;
        *(_OWORD *)(v24 + 53) = 0u;
        v28 = (uint64_t *)*((_QWORD *)v92 + 11);
        v27 = *((_QWORD *)v92 + 12);
        if ((unint64_t)v28 < v27)
        {
          *v28 = v24;
          v29 = (uint64_t)(v28 + 1);
LABEL_54:
          v48 = v20 + 2;
          *((_QWORD *)v92 + 11) = v29;
          *(_QWORD *)(v16 + 16) = v25;
          *(_QWORD *)(v25 + 56) = 0;
          *(_DWORD *)(v25 + 64) = 0;
          v49 = *(_BYTE **)(v25 + 8);
          if (v48 > (uint64_t)(*(_QWORD *)(v25 + 24) - (_QWORD)v49) >> 4)
          {
            v50 = *(_BYTE **)(v25 + 16);
            v51 = (char *)operator new(16 * v48);
            v52 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFF0];
            v53 = v52;
            if (v50 != v49)
            {
              v54 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFF0];
              do
              {
                v53 = v54 - 16;
                *((_OWORD *)v54 - 1) = *((_OWORD *)v50 - 1);
                v50 -= 16;
                v54 -= 16;
              }
              while (v50 != v49);
            }
            *(_QWORD *)(v25 + 8) = v53;
            *(_QWORD *)(v25 + 16) = v52;
            *(_QWORD *)(v25 + 24) = &v51[16 * v18 + 16];
            if (v49)
              operator delete(v49);
          }
          v55 = 0;
          v56 = *(_QWORD *)(v16 + 24);
          v57 = *(_OWORD **)(v25 + 16);
          while (1)
          {
            v56 = *(_QWORD *)(v56 + 32);
            v60 = (_OWORD *)(v56 + 8);
            v61 = *(_QWORD *)(v25 + 24);
            if ((unint64_t)v57 >= v61)
              break;
            *v57 = *v60;
            v58 = v57 + 1;
LABEL_62:
            *(_QWORD *)(v25 + 16) = v58;
            v57 = v58;
            if (v55++ == v18)
              goto LABEL_16;
          }
          v62 = (_OWORD *)*v26;
          v63 = ((uint64_t)v57 - *v26) >> 4;
          v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 60)
            _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
          v65 = v61 - (_QWORD)v62;
          if (v65 >> 3 > v64)
            v64 = v65 >> 3;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0)
            v66 = 0xFFFFFFFFFFFFFFFLL;
          else
            v66 = v64;
          if (v66)
          {
            if (v66 >> 60)
              goto LABEL_108;
            v67 = (char *)operator new(16 * v66);
            v68 = &v67[16 * v63];
            *(_OWORD *)v68 = *v60;
            v69 = (uint64_t)v68;
            if (v57 == v62)
              goto LABEL_77;
          }
          else
          {
            v67 = 0;
            v68 = (char *)(16 * v63);
            *(_OWORD *)(16 * v63) = *v60;
            v69 = 16 * v63;
            if (v57 == v62)
              goto LABEL_77;
          }
          do
          {
            *(_OWORD *)(v69 - 16) = *(v57 - 1);
            v69 -= 16;
            --v57;
          }
          while (v57 != v62);
          v57 = (_OWORD *)*v26;
LABEL_77:
          v58 = v68 + 16;
          *(_QWORD *)(v25 + 8) = v69;
          *(_QWORD *)(v25 + 16) = v68 + 16;
          *(_QWORD *)(v25 + 24) = &v67[16 * v66];
          if (v57)
            operator delete(v57);
          goto LABEL_62;
        }
        v30 = *v91;
        v31 = (char *)v28 - (char *)*v91;
        v32 = v31 >> 3;
        v33 = (v31 >> 3) + 1;
        if (!(v33 >> 61))
        {
          v34 = v27 - (_QWORD)v30;
          if (v34 >> 2 > v33)
            v33 = v34 >> 2;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
          {
            if (v35 >> 61)
LABEL_108:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v36 = operator new(8 * v35);
            v37 = (uint64_t *)&v36[8 * v32];
            *v37 = v25;
            v29 = (uint64_t)(v37 + 1);
            if (v28 == v30)
              goto LABEL_52;
          }
          else
          {
            v36 = 0;
            v37 = (uint64_t *)(8 * v32);
            *(_QWORD *)(8 * v32) = v25;
            v29 = 8 * v32 + 8;
            if (v28 == v30)
            {
LABEL_52:
              *((_QWORD *)v92 + 10) = v37;
              *((_QWORD *)v92 + 11) = v29;
              *((_QWORD *)v92 + 12) = &v36[8 * v35];
              if (v28)
              {
                v47 = v29;
                operator delete(v28);
                v29 = v47;
              }
              goto LABEL_54;
            }
          }
          v38 = (char *)(v28 - 1) - (char *)v30;
          if (v38 < 0x58)
            goto LABEL_112;
          if ((unint64_t)((char *)v28 - &v36[v31]) < 0x20)
            goto LABEL_112;
          v39 = (v38 >> 3) + 1;
          v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
          v41 = &v28[v40 / 0xFFFFFFFFFFFFFFF8];
          v37 = (uint64_t *)((char *)v37 - v40);
          v42 = &v36[8 * v32 - 16];
          v43 = v28 - 2;
          v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v45 = *(_OWORD *)v43;
            *(v42 - 1) = *((_OWORD *)v43 - 1);
            *v42 = v45;
            v42 -= 2;
            v43 -= 4;
            v44 -= 4;
          }
          while (v44);
          v28 = v41;
          if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_112:
            do
            {
              v46 = *--v28;
              *--v37 = v46;
            }
            while (v28 != v30);
          }
          v28 = *v91;
          goto LABEL_52;
        }
LABEL_109:
        _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
      }
    }
LABEL_16:
    this = v93;
    v13 = v94 + 1;
    v12 = *((_QWORD *)v93 + 1);
    v14 = *((_QWORD *)v93 + 2) - v12;
    v15 = v14 >> 3;
  }
  while (v94 + 1 < (unint64_t)(v14 >> 3));
  v2 = v92;
  v70 = (_BYTE *)*((_QWORD *)v92 + 4);
  if (v15 > (uint64_t)(*((_QWORD *)v92 + 6) - (_QWORD)v70) >> 3)
  {
    if (v14 < 0)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v71 = (_BYTE *)*((_QWORD *)v92 + 5);
    v72 = v71 - v70;
    v73 = (char *)operator new(v14);
    v74 = &v73[(v71 - v70) & 0xFFFFFFFFFFFFFFF8];
    v75 = v74;
    if (v71 != v70)
    {
      v76 = v71 - v70 - 8;
      if (v76 < 0x58)
      {
        v75 = &v73[v72 & 0xFFFFFFFFFFFFFFF8];
        goto LABEL_92;
      }
      v75 = &v73[v72 & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(v71 - v75) < 0x20)
        goto LABEL_113;
      v77 = (v76 >> 3) + 1;
      v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
      v79 = &v71[-v78];
      v75 = &v74[-v78];
      v80 = &v73[8 * (v72 >> 3) - 16];
      v81 = (__int128 *)(v71 - 16);
      v82 = v77 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v83 = *v81;
        *((_OWORD *)v80 - 1) = *(v81 - 1);
        *(_OWORD *)v80 = v83;
        v80 -= 32;
        v81 -= 2;
        v82 -= 4;
      }
      while (v82);
      v71 = v79;
      if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_113:
        do
        {
LABEL_92:
          v84 = *((_QWORD *)v71 - 1);
          v71 -= 8;
          *((_QWORD *)v75 - 1) = v84;
          v75 -= 8;
        }
        while (v71 != v70);
      }
    }
    *((_QWORD *)v92 + 4) = v75;
    *((_QWORD *)v92 + 5) = v74;
    *((_QWORD *)v92 + 6) = &v73[8 * v15];
    if (v70)
      operator delete(v70);
  }
LABEL_95:
  v85 = *((_QWORD *)this + 1);
  if (*((_QWORD *)this + 2) != v85)
  {
    for (i = 0; i < (*((_QWORD *)this + 2) - v85) >> 3; ++i)
    {
      v88 = *(_QWORD *)(v85 + 8 * i);
      v89 = *(ClipperLib::PolyNode **)(v88 + 16);
      if (!v89)
        goto LABEL_100;
      if (*(_BYTE *)(v88 + 5))
      {
        *((_BYTE *)v89 + 68) = 1;
      }
      else
      {
        v90 = *(_QWORD *)(v88 + 8);
        if (v90)
        {
          v87 = *(ClipperLib::PolyNode **)(v90 + 16);
          if (v87)
            goto LABEL_99;
        }
      }
      v87 = v2;
LABEL_99:
      ClipperLib::PolyNode::AddChild(v87, v89);
LABEL_100:
      v85 = *((_QWORD *)this + 1);
    }
  }
}

void ClipperLib::Clipper::FixHoleLinkage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(a2 + 4);
    if (v3 == *(unsigned __int8 *)(v2 + 4) || !*(_QWORD *)(v2 + 24))
    {
      do
      {
        if (*(unsigned __int8 *)(v2 + 4) != v3 && *(_QWORD *)(v2 + 24))
          break;
        v2 = *(_QWORD *)(v2 + 8);
      }
      while (v2);
      *(_QWORD *)(a2 + 8) = v2;
    }
  }
}

uint64_t ClipperLib::Clipper::ExecuteInternal(ClipperLib::Clipper *this)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  double v19;
  _QWORD *v20;
  uint64_t v21;
  int8x16_t v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  (*(void (**)(ClipperLib::Clipper *))(*(_QWORD *)this + 16))(this);
  if (*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8) == *(_QWORD *)((char *)this
                                                                                        + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                                        + 24))
    return 1;
  v2 = ClipperLib::Clipper::PopScanbeam(this);
  v3 = (uint64_t **)((char *)this + 152);
  do
  {
    ClipperLib::Clipper::InsertLocalMinimaIntoAEL(this, v2);
    v4 = *((_QWORD *)this + 7);
    v5 = *((_QWORD *)this + 8);
    if (v5 != v4)
    {
      v6 = 0;
      do
      {
        v7 = *(_QWORD *)(v4 + 8 * v6);
        if (v7)
        {
          MEMORY[0x22E2A50A0](v7, 0x1020C406C4767B9);
          v4 = *((_QWORD *)this + 7);
          v5 = *((_QWORD *)this + 8);
        }
        ++v6;
      }
      while (v6 < (v5 - v4) >> 3);
      if (v5 != v4)
        *((_QWORD *)this + 8) = v4;
    }
    while (1)
    {
      v8 = *v3;
      if (!*v3)
        break;
      v9 = v8[17];
      v10 = v8[18];
      if (*(_OWORD *)(v8 + 17) == 0)
      {
        *v3 = 0;
      }
      else
      {
        v11 = (uint64_t *)(v10 + 136);
        if (!v10)
          v11 = (uint64_t *)((char *)this + 152);
        *v11 = v9;
        if (v9)
          *(_QWORD *)(v9 + 144) = v10;
      }
      v8[17] = 0;
      v8[18] = 0;
      ClipperLib::Clipper::ProcessHorizontal(this, v8, 0);
    }
    if (*((_QWORD *)this + 14) == *((_QWORD *)this + 15))
      break;
    v2 = ClipperLib::Clipper::PopScanbeam(this);
    if (!ClipperLib::Clipper::ProcessIntersections(this, v2))
    {
      v23 = 0;
      v27 = *((_QWORD *)this + 4);
      v28 = *((_QWORD *)this + 5);
      if (v28 == v27)
        goto LABEL_56;
      goto LABEL_50;
    }
    ClipperLib::Clipper::ProcessEdgesAtTopOfScanbeam(this, v2);
  }
  while (*((_QWORD *)this + 14) != *((_QWORD *)this + 15)
       || *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8) != *(_QWORD *)((char *)this
                                                                                           + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                                           + 24));
  v13 = *((_QWORD *)this + 1);
  v12 = *((_QWORD *)this + 2);
  if (v12 != v13)
  {
    v14 = 0;
    v15 = (v12 - v13) >> 3;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v16 = *(_QWORD *)(v13 + 8 * v14);
      v17 = *(_QWORD **)(v16 + 24);
      if (v17)
      {
        if (!*(_BYTE *)(v16 + 5))
        {
          v18 = *(unsigned __int8 *)(v16 + 4);
          v19 = 0.0;
          v20 = v17;
          do
          {
            v19 = v19
                + (double)(uint64_t)(*(_QWORD *)(v20[4] + 16) - v20[2])
                * (double)(uint64_t)(v20[1] + *(_QWORD *)(v20[4] + 8));
            v20 = (_QWORD *)v20[3];
          }
          while (v20 != v17);
          if ((*((unsigned __int8 *)this + 172) ^ v18) == v19 * 0.5 > 0.0)
          {
            v21 = (uint64_t)v17;
            do
            {
              v22 = *(int8x16_t *)(v21 + 24);
              *(int8x16_t *)(v21 + 24) = vextq_s8(v22, v22, 8uLL);
              v21 = v22.i64[0];
            }
            while ((_QWORD *)v22.i64[0] != v17);
          }
        }
      }
      ++v14;
    }
    while (v14 != v15);
  }
  if (*((_QWORD *)this + 4) != *((_QWORD *)this + 5))
  {
    ClipperLib::Clipper::JoinCommonEdges((uint64_t)this);
    v13 = *((_QWORD *)this + 1);
    v12 = *((_QWORD *)this + 2);
  }
  if (v12 != v13)
  {
    v25 = 0;
    do
    {
      v26 = *(_QWORD *)(v13 + 8 * v25);
      if (*(_QWORD *)(v26 + 24) && !*(_BYTE *)(v26 + 5))
      {
        ClipperLib::Clipper::FixupOutPolygon(this, v26);
        v13 = *((_QWORD *)this + 1);
        v12 = *((_QWORD *)this + 2);
      }
      ++v25;
    }
    while (v25 < (v12 - v13) >> 3);
  }
  if (*((_BYTE *)this + 174))
    ClipperLib::Clipper::DoSimplePolygons((uint64_t)this);
  v23 = 1;
  v27 = *((_QWORD *)this + 4);
  v28 = *((_QWORD *)this + 5);
  if (v28 != v27)
  {
LABEL_50:
    v29 = 0;
    do
    {
      v30 = *(_QWORD *)(v27 + 8 * v29);
      if (v30)
      {
        MEMORY[0x22E2A50A0](v30, 0x1020C406C4767B9);
        v27 = *((_QWORD *)this + 4);
        v28 = *((_QWORD *)this + 5);
      }
      ++v29;
    }
    while (v29 < (v28 - v27) >> 3);
    if (v28 != v27)
      *((_QWORD *)this + 5) = v27;
  }
LABEL_56:
  v31 = *((_QWORD *)this + 7);
  v32 = *((_QWORD *)this + 8);
  if (v32 == v31)
    return v23;
  v33 = 0;
  do
  {
    v34 = *(_QWORD *)(v31 + 8 * v33);
    if (v34)
    {
      MEMORY[0x22E2A50A0](v34, 0x1020C406C4767B9);
      v31 = *((_QWORD *)this + 7);
      v32 = *((_QWORD *)this + 8);
    }
    ++v33;
  }
  while (v33 < (v32 - v31) >> 3);
  if (v32 == v31)
    return v23;
  *((_QWORD *)this + 8) = v31;
  return v23;
}

uint64_t ClipperLib::Clipper::PopScanbeam(ClipperLib::Clipper *this)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;

  v1 = (char *)*((_QWORD *)this + 14);
  v2 = (char *)*((_QWORD *)this + 15);
  v3 = *(_QWORD *)v1;
  v4 = v2 - v1;
  if (v2 - v1 < 9)
    goto LABEL_20;
  v5 = 0;
  v6 = v4 >> 3;
  v7 = (unint64_t)((v4 >> 3) - 2) >> 1;
  v8 = (char *)*((_QWORD *)this + 14);
  do
  {
    while (1)
    {
      v11 = &v8[8 * v5 + 8];
      v12 = (2 * v5) | 1;
      v5 = 2 * v5 + 2;
      if (v5 < v6)
        break;
      v5 = v12;
      *(_QWORD *)v8 = *(_QWORD *)v11;
      v8 = v11;
      if (v12 > v7)
        goto LABEL_11;
    }
    v9 = *(_QWORD *)v11;
    v10 = *((_QWORD *)v11 + 1);
    if (*(_QWORD *)v11 <= v10)
      v9 = *((_QWORD *)v11 + 1);
    if (*(_QWORD *)v11 >= v10)
      v5 = v12;
    else
      v11 += 8;
    *(_QWORD *)v8 = v9;
    v8 = v11;
  }
  while (v5 <= v7);
LABEL_11:
  v13 = v2 - 8;
  if (v11 == v2 - 8)
  {
    *(_QWORD *)v11 = v3;
    goto LABEL_20;
  }
  *(_QWORD *)v11 = *(_QWORD *)v13;
  *(_QWORD *)v13 = v3;
  v14 = v11 - v1 + 8;
  if (v14 >= 9)
  {
    v15 = (((unint64_t)v14 >> 3) - 2) >> 1;
    v16 = &v1[8 * v15];
    v17 = *(_QWORD *)v16;
    v18 = *(_QWORD *)v11;
    if (*(_QWORD *)v16 < *(_QWORD *)v11)
    {
      do
      {
        *(_QWORD *)v11 = v17;
        v11 = v16;
        if (!v15)
          break;
        v15 = (v15 - 1) >> 1;
        v16 = &v1[8 * v15];
        v17 = *(_QWORD *)v16;
      }
      while (*(_QWORD *)v16 < v18);
      goto LABEL_18;
    }
  }
  while (1)
  {
LABEL_20:
    if (v1 == v2 - 8)
      goto LABEL_39;
    v19 = v2;
    v2 -= 8;
    if (v3 != *(_QWORD *)v1)
      break;
    v20 = v2 - v1;
    if (v2 - v1 >= 9)
    {
      v21 = 0;
      v22 = v20 >> 3;
      v23 = (unint64_t)((v20 >> 3) - 2) >> 1;
      v24 = v1;
      do
      {
        while (1)
        {
          v11 = &v24[8 * v21 + 8];
          v27 = (2 * v21) | 1;
          v21 = 2 * v21 + 2;
          if (v21 < v22)
            break;
          v21 = v27;
          *(_QWORD *)v24 = *(_QWORD *)v11;
          v24 = v11;
          if (v27 > v23)
            goto LABEL_32;
        }
        v25 = *(_QWORD *)v11;
        v26 = *((_QWORD *)v11 + 1);
        if (*(_QWORD *)v11 <= v26)
          v25 = *((_QWORD *)v11 + 1);
        if (*(_QWORD *)v11 >= v26)
          v21 = v27;
        else
          v11 += 8;
        *(_QWORD *)v24 = v25;
        v24 = v11;
      }
      while (v21 <= v23);
LABEL_32:
      v28 = v19 - 16;
      if (v11 == v28)
      {
        *(_QWORD *)v11 = v3;
      }
      else
      {
        *(_QWORD *)v11 = *(_QWORD *)v28;
        *(_QWORD *)v28 = v3;
        v29 = v11 - v1 + 8;
        if (v29 >= 9)
        {
          v30 = (((unint64_t)v29 >> 3) - 2) >> 1;
          v31 = &v1[8 * v30];
          v32 = *(_QWORD *)v31;
          v18 = *(_QWORD *)v11;
          if (*(_QWORD *)v31 < *(_QWORD *)v11)
          {
            do
            {
              *(_QWORD *)v11 = v32;
              v11 = v31;
              if (!v30)
                break;
              v30 = (v30 - 1) >> 1;
              v31 = &v1[8 * v30];
              v32 = *(_QWORD *)v31;
            }
            while (*(_QWORD *)v31 < v18);
LABEL_18:
            *(_QWORD *)v11 = v18;
            continue;
          }
        }
      }
    }
  }
  v1 = v2;
LABEL_39:
  *((_QWORD *)this + 15) = v1;
  return v3;
}

void ClipperLib::Clipper::InsertLocalMinimaIntoAEL(ClipperLib::Clipper *this, uint64_t a2)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;

  v2 = (char *)this + 40;
  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v6 = (_QWORD *)*((_QWORD *)v3 + 1);
  v4 = v3 + 8;
  v5 = v6;
  v7 = (_QWORD *)v4[2];
  if (v6 != v7)
  {
    v10 = (char *)this + 112;
    do
    {
      if (*v5 != a2)
        return;
      v13 = v5[1];
      v14 = v5[2];
      if (v5 != v7)
        *v4 = v5 + 3;
      if (v13)
      {
        ClipperLib::Clipper::InsertEdgeIntoAEL((uint64_t)this, v13, 0);
        if (!v14)
        {
          ClipperLib::Clipper::SetWindingCount((uint64_t)this, v13);
          if (ClipperLib::Clipper::IsContributing((uint64_t)this, (_DWORD *)v13))
            ClipperLib::Clipper::AddOutPt(this, v13, v13);
          v34 = *(_QWORD *)(v13 + 40);
          std::priority_queue<long long>::push((uint64_t)v10, &v34);
          goto LABEL_4;
        }
        ClipperLib::Clipper::InsertEdgeIntoAEL((uint64_t)this, v14, v13);
        ClipperLib::Clipper::SetWindingCount((uint64_t)this, v13);
        *(_QWORD *)(v14 + 84) = *(_QWORD *)(v13 + 84);
        if (ClipperLib::Clipper::IsContributing((uint64_t)this, (_DWORD *)v13))
          v15 = ClipperLib::Clipper::AddLocalMinPoly(this, v13, v14, v13);
        else
          v15 = 0;
        v34 = *(_QWORD *)(v13 + 40);
        std::priority_queue<long long>::push((uint64_t)v10, &v34);
        if (!*(_QWORD *)(v14 + 56))
        {
LABEL_22:
          v16 = *((_QWORD *)this + 19);
          *(_QWORD *)(v14 + 144) = 0;
          if (v16)
            *(_QWORD *)(v16 + 144) = v14;
          *((_QWORD *)this + 19) = v14;
          *(_QWORD *)(v14 + 136) = v16;
          if (!v13)
            goto LABEL_4;
LABEL_25:
          if (v15)
          {
            if (!*(_QWORD *)(v14 + 56))
            {
              v24 = *((_QWORD *)this + 7);
              v23 = *((_QWORD *)this + 8);
              if (v23 != v24)
              {
                if (*(_DWORD *)(v14 + 80))
                {
                  v25 = 0;
                  do
                  {
                    v26 = *(uint64_t **)(v24 + 8 * v25);
                    v27 = *(_QWORD *)(*v26 + 8);
                    v28 = v26[2];
                    v29 = *(_QWORD *)v14;
                    v30 = *(_QWORD *)(v14 + 32);
                    if (v27 >= v28)
                      v31 = v26[2];
                    else
                      v31 = *(_QWORD *)(*v26 + 8);
                    if (v27 <= v28)
                      v27 = v26[2];
                    if (v29 >= v30)
                      v32 = *(_QWORD *)(v14 + 32);
                    else
                      v32 = *(_QWORD *)v14;
                    if (v29 <= v30)
                      v29 = *(_QWORD *)(v14 + 32);
                    if (v31 < v29 && v32 < v27)
                    {
                      ClipperLib::Clipper::AddJoin(this, *v26, v15, v28, v26[3]);
                      v24 = *((_QWORD *)this + 7);
                      v23 = *((_QWORD *)this + 8);
                    }
                    ++v25;
                  }
                  while (v25 < (v23 - v24) >> 3);
                }
              }
            }
          }
          if ((*(_DWORD *)(v13 + 92) & 0x80000000) == 0)
          {
            v17 = *(_QWORD *)(v13 + 128);
            if (v17)
            {
              if (*(_QWORD *)(v17 + 16) == *(_QWORD *)v13
                && (*(_DWORD *)(v17 + 92) & 0x80000000) == 0
                && ClipperLib::SlopesEqual(*(_QWORD *)(v13 + 128), v13, v2[*(_QWORD *)(*(_QWORD *)this - 24)])&& *(_DWORD *)(v13 + 80)&& *(_DWORD *)(v17 + 80))
              {
                v18 = ClipperLib::Clipper::AddOutPt(this, v17, v13);
                ClipperLib::Clipper::AddJoin(this, v15, v18, *(_QWORD *)(v13 + 32), *(_QWORD *)(v13 + 40));
              }
            }
          }
          v19 = *(_QWORD *)(v13 + 120);
          if (v19 != v14)
          {
            if ((*(_DWORD *)(v14 + 92) & 0x80000000) == 0)
            {
              v20 = *(_QWORD *)(v14 + 128);
              if ((*(_DWORD *)(v20 + 92) & 0x80000000) == 0
                && ClipperLib::SlopesEqual(*(_QWORD *)(v14 + 128), v14, v2[*(_QWORD *)(*(_QWORD *)this - 24)])&& *(_DWORD *)(v14 + 80)&& *(_DWORD *)(v20 + 80))
              {
                v21 = ClipperLib::Clipper::AddOutPt(this, v20, v14);
                ClipperLib::Clipper::AddJoin(this, v15, v21, *(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40));
                v19 = *(_QWORD *)(v13 + 120);
              }
            }
            if (v19 && v19 != v14)
            {
              v22 = v13 + 16;
              do
              {
                ClipperLib::Clipper::IntersectEdges(this, (_DWORD *)v14, (_DWORD *)v19, v22);
                v19 = *(_QWORD *)(v19 + 120);
              }
              while (v19 != v14);
            }
          }
          goto LABEL_4;
        }
      }
      else
      {
        ClipperLib::Clipper::InsertEdgeIntoAEL((uint64_t)this, v14, 0);
        ClipperLib::Clipper::SetWindingCount((uint64_t)this, v14);
        v15 = 0;
        if (ClipperLib::Clipper::IsContributing((uint64_t)this, (_DWORD *)v14))
          v15 = ClipperLib::Clipper::AddOutPt(this, v14, v14);
        if (!v14)
          goto LABEL_4;
        if (!*(_QWORD *)(v14 + 56))
          goto LABEL_22;
      }
      v34 = *(_QWORD *)(v14 + 40);
      std::priority_queue<long long>::push((uint64_t)v10, &v34);
      if (v13)
        goto LABEL_25;
LABEL_4:
      v11 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v12 = (_QWORD *)*((_QWORD *)v11 + 1);
      v4 = v11 + 8;
      v5 = v12;
      v7 = (_QWORD *)v4[2];
    }
    while (v12 != v7);
  }
}

uint64_t ClipperLib::Clipper::ClearGhostJoins(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(this + 56);
  v2 = *(_QWORD *)(this + 64);
  if (v2 != v1)
  {
    v3 = this;
    v4 = 0;
    do
    {
      this = *(_QWORD *)(v1 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x22E2A50A0](this, 0x1020C406C4767B9);
        v1 = *(_QWORD *)(v3 + 56);
        v2 = *(_QWORD *)(v3 + 64);
      }
      ++v4;
    }
    while (v4 < (v2 - v1) >> 3);
    if (v2 != v1)
      *(_QWORD *)(v3 + 64) = v1;
  }
  return this;
}

void ClipperLib::Clipper::ProcessHorizontals(ClipperLib::Clipper *this, int a2)
{
  uint64_t *i;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v4 = (uint64_t *)((char *)this + 152);
  for (i = (uint64_t *)*((_QWORD *)this + 19); i; i = (uint64_t *)*((_QWORD *)this + 19))
  {
    v6 = i[17];
    v7 = i[18];
    if (*(_OWORD *)(i + 17) == 0)
    {
      *v4 = 0;
    }
    else
    {
      v8 = (uint64_t *)(v7 + 136);
      if (!v7)
        v8 = v4;
      *v8 = v6;
      if (v6)
        *(_QWORD *)(v6 + 144) = v7;
    }
    i[17] = 0;
    i[18] = 0;
    ClipperLib::Clipper::ProcessHorizontal(this, i, a2);
  }
}

BOOL ClipperLib::Clipper::ProcessIntersections(ClipperLib::Clipper *this, uint64_t a2)
{
  uint64_t v3;
  _BOOL8 result;

  if (!*((_QWORD *)this + 18))
    return 1;
  ClipperLib::Clipper::BuildIntersectList(this, a2);
  v3 = (uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 3;
  if (!v3)
    return 1;
  if (v3 == 1 || (result = ClipperLib::Clipper::FixupIntersectionOrder(this)))
  {
    ClipperLib::Clipper::ProcessIntersectList((uint64_t)this);
    *((_QWORD *)this + 19) = 0;
    return 1;
  }
  return result;
}

void sub_227B94A5C(void *a1)
{
  uint64_t v1;
  ClipperLib::clipperException *exception;

  __cxa_begin_catch(a1);
  *(_QWORD *)(v1 + 152) = 0;
  ClipperLib::Clipper::DisposeIntersectNodes(v1);
  exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
  ClipperLib::clipperException::clipperException(exception, "ProcessIntersections error");
}

void sub_227B94AA4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void ClipperLib::Clipper::ProcessEdgesAtTopOfScanbeam(ClipperLib::Clipper *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *i;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  __int128 v33;
  uint64_t v34;

  v5 = (uint64_t *)((char *)this + 144);
  v4 = *((_QWORD *)this + 18);
  v34 = v4;
  if (v4)
  {
    while (*(_QWORD *)(v4 + 40) == a2)
    {
      if (!*(_QWORD *)(v4 + 112)
        && (((v12 = *(_QWORD *)(v4 + 96), v13 = *(_QWORD *)(v4 + 32), *(_QWORD *)(v12 + 32) == v13)
           ? (v14 = *(_QWORD *)(v12 + 40) == a2)
           : (v14 = 0),
             (!v14 || *(_QWORD *)(v12 + 112))
          && ((v12 = *(_QWORD *)(v4 + 104), *(_QWORD *)(v12 + 32) == v13)
            ? (v15 = *(_QWORD *)(v12 + 40) == a2)
            : (v15 = 0),
              !v15 || *(_QWORD *)(v12 + 112)))
         || *(_DWORD *)(v12 + 92) == -2
         || *(_QWORD *)(v12 + 56)))
      {
        v16 = *(_QWORD *)(v4 + 128);
        ClipperLib::Clipper::DoMaxima(this, v4);
        v17 = (uint64_t *)(v16 + 120);
        if (!v16)
          v17 = v5;
        v4 = *v17;
        v34 = v4;
        if (!v4)
          goto LABEL_45;
      }
      else
      {
        v6 = *(_QWORD *)(v4 + 112);
        if (v6 && !*(_QWORD *)(v6 + 56))
        {
          ClipperLib::Clipper::UpdateEdgeIntoAEL((uint64_t)this, &v34);
          v4 = v34;
          if ((*(_DWORD *)(v34 + 92) & 0x80000000) == 0)
            ClipperLib::Clipper::AddOutPt(this, v34, v34);
          v18 = *((_QWORD *)this + 19);
          *(_QWORD *)(v4 + 144) = 0;
          if (v18)
            *(_QWORD *)(v18 + 144) = v4;
          *((_QWORD *)this + 19) = v4;
          *(_QWORD *)(v4 + 136) = v18;
          if (!*((_BYTE *)this + 174))
            goto LABEL_3;
LABEL_14:
          if ((*(_DWORD *)(v4 + 92) & 0x80000000) == 0)
          {
            if (*(_DWORD *)(v4 + 80))
            {
              v9 = *(_QWORD *)(v4 + 128);
              if (v9)
              {
                if ((*(_DWORD *)(v9 + 92) & 0x80000000) == 0
                  && *(_QWORD *)(v9 + 16) == *(_QWORD *)(v4 + 16)
                  && *(_DWORD *)(v9 + 80))
                {
                  v33 = *(_OWORD *)(v4 + 16);
                  v10 = ClipperLib::Clipper::AddOutPt(this, v9, (uint64_t)&v33);
                  v11 = ClipperLib::Clipper::AddOutPt(this, v4, (uint64_t)&v33);
                  ClipperLib::Clipper::AddJoin(this, v10, v11, v33, *((uint64_t *)&v33 + 1));
                  v4 = v34;
                }
              }
            }
          }
          goto LABEL_3;
        }
        *(_QWORD *)(v4 + 16) = *(_QWORD *)(v4 + 32);
        *(_QWORD *)(v4 + 24) = a2;
        if (*((_BYTE *)this + 174))
          goto LABEL_14;
LABEL_3:
        v4 = *(_QWORD *)(v4 + 120);
        v34 = v4;
        if (!v4)
          goto LABEL_45;
      }
    }
    v7 = *(double *)(v4 + 64) * (double)(a2 - *(_QWORD *)(v4 + 8));
    if (v7 >= 0.0)
      v8 = 0.5;
    else
      v8 = -0.5;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)v4 + (uint64_t)(v8 + v7);
    *(_QWORD *)(v4 + 24) = a2;
    if (*((_BYTE *)this + 174))
      goto LABEL_14;
    goto LABEL_3;
  }
LABEL_45:
  for (i = (uint64_t *)*((_QWORD *)this + 19); i; i = (uint64_t *)*((_QWORD *)this + 19))
  {
    v22 = i[17];
    v23 = i[18];
    if (*(_OWORD *)(i + 17) == 0)
    {
      *((_QWORD *)this + 19) = 0;
    }
    else
    {
      v24 = (uint64_t *)(v23 + 136);
      if (!v23)
        v24 = (uint64_t *)((char *)this + 152);
      *v24 = v22;
      if (v22)
        *(_QWORD *)(v22 + 144) = v23;
    }
    i[17] = 0;
    i[18] = 0;
    ClipperLib::Clipper::ProcessHorizontal(this, i, 1);
  }
  v20 = *((_QWORD *)this + 18);
  v34 = v20;
  if (v20)
  {
    v21 = (char *)this + 40;
    do
    {
      if (*(_QWORD *)(v20 + 40) != a2 || !*(_QWORD *)(v20 + 112))
        goto LABEL_56;
      if ((*(_DWORD *)(v20 + 92) & 0x80000000) != 0)
      {
        v26 = 0;
        ClipperLib::Clipper::UpdateEdgeIntoAEL((uint64_t)this, &v34);
        v20 = v34;
        v27 = *(_QWORD *)(v34 + 120);
        v28 = *(_QWORD *)(v34 + 128);
        if (!v28)
          goto LABEL_73;
      }
      else
      {
        v26 = ClipperLib::Clipper::AddOutPt(this, v20, v20 + 32);
        ClipperLib::Clipper::UpdateEdgeIntoAEL((uint64_t)this, &v34);
        v20 = v34;
        v27 = *(_QWORD *)(v34 + 120);
        v28 = *(_QWORD *)(v34 + 128);
        if (!v28)
          goto LABEL_73;
      }
      if (*(_QWORD *)(v28 + 16) != *(_QWORD *)v20
        || ((v29 = *(_QWORD *)(v28 + 24), v29 == *(_QWORD *)(v20 + 8)) ? (v30 = v26 == 0) : (v30 = 1),
            v30
         || (*(_DWORD *)(v28 + 92) & 0x80000000) != 0
         || v29 <= *(_QWORD *)(v28 + 40)
         || !ClipperLib::SlopesEqual(v20, v28, v21[*(_QWORD *)(*(_QWORD *)this - 24)])
         || !*(_DWORD *)(v20 + 80)
         || !*(_DWORD *)(v28 + 80)))
      {
LABEL_73:
        if (!v27 || *(_QWORD *)(v27 + 16) != *(_QWORD *)v20)
          goto LABEL_56;
        v31 = *(_QWORD *)(v27 + 24);
        if (v31 != *(_QWORD *)(v20 + 8) || v26 == 0)
          goto LABEL_56;
        if ((*(_DWORD *)(v27 + 92) & 0x80000000) != 0)
          goto LABEL_56;
        if (v31 <= *(_QWORD *)(v27 + 40))
          goto LABEL_56;
        if (!ClipperLib::SlopesEqual(v20, v27, v21[*(_QWORD *)(*(_QWORD *)this - 24)]))
          goto LABEL_56;
        if (!*(_DWORD *)(v20 + 80))
          goto LABEL_56;
        v28 = v27;
        if (!*(_DWORD *)(v27 + 80))
          goto LABEL_56;
      }
      v25 = ClipperLib::Clipper::AddOutPt(this, v28, v20);
      ClipperLib::Clipper::AddJoin(this, v26, v25, *(_QWORD *)(v20 + 32), *(_QWORD *)(v20 + 40));
LABEL_56:
      v20 = *(_QWORD *)(v20 + 120);
      v34 = v20;
    }
    while (v20);
  }
}

uint64_t ClipperLib::Clipper::JoinCommonEdges(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int **v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t LowermostRec;
  uint64_t v13;
  _DWORD *OutRec;
  int *v16;
  int v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t i;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  _QWORD *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  double v54;
  int *v55;
  int *v56;
  int8x16_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  double v64;
  _QWORD *v65;
  _QWORD *v66;
  int8x16_t v67;

  v1 = *(_QWORD *)(this + 32);
  if (*(_QWORD *)(this + 40) != v1)
  {
    v2 = this;
    v3 = 0;
    while (1)
    {
      v4 = *(int ***)(v1 + 8 * v3);
      v5 = *(_QWORD *)(v2 + 8);
      v6 = *(int **)(v5 + 8 * **v4);
      do
      {
        v7 = (uint64_t)v6;
        v6 = *(int **)(v5 + 8 * *v6);
      }
      while ((int *)v7 != v6);
      v8 = *(int **)(v5 + 8 * *v4[1]);
      do
      {
        v9 = (uint64_t)v8;
        v8 = *(int **)(v5 + 8 * *v8);
      }
      while ((int *)v9 != v8);
      if (!*(_QWORD *)(v7 + 24) || !*(_QWORD *)(v9 + 24))
        goto LABEL_3;
      if (v7 == v9)
        break;
      v10 = v7;
      do
        v10 = *(_QWORD *)(v10 + 8);
      while (v10 != v9 && v10 != 0);
      LowermostRec = v9;
      if (v10 != v9)
      {
        v13 = v9;
        do
          v13 = *(_QWORD *)(v13 + 8);
        while (v13 != v7 && v13 != 0);
        LowermostRec = v7;
        if (v13 != v7)
          LowermostRec = ClipperLib::GetLowermostRec(v7, v9);
      }
      this = ClipperLib::Clipper::JoinPoints((_QWORD *)v2, v4, v7, v9);
      if ((this & 1) != 0)
      {
        *(_QWORD *)(v9 + 24) = 0;
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)v9 = *(_DWORD *)v7;
        *(_BYTE *)(v7 + 4) = *(_BYTE *)(LowermostRec + 4);
        if (LowermostRec == v9)
        {
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v9 + 8);
          *(_QWORD *)(v9 + 8) = v7;
          if (!*(_BYTE *)(v2 + 173))
            goto LABEL_3;
        }
        else
        {
          *(_QWORD *)(v9 + 8) = v7;
          if (!*(_BYTE *)(v2 + 173))
            goto LABEL_3;
        }
        v45 = *(_QWORD *)(v2 + 8);
        v46 = *(_QWORD *)(v2 + 16) - v45;
        if (v46)
        {
          v47 = v46 >> 3;
          if (v47 <= 1)
            v47 = 1;
          do
          {
            if (*(_QWORD *)(*(_QWORD *)v45 + 8) == v9)
              *(_QWORD *)(*(_QWORD *)v45 + 8) = v7;
            v45 += 8;
            --v47;
          }
          while (v47);
        }
      }
LABEL_3:
      ++v3;
      v1 = *(_QWORD *)(v2 + 32);
      if (v3 >= (*(_QWORD *)(v2 + 40) - v1) >> 3)
        return this;
    }
    this = ClipperLib::Clipper::JoinPoints((_QWORD *)v2, v4, v7, v7);
    if (!(_DWORD)this)
      goto LABEL_3;
    *(_QWORD *)(v7 + 24) = *v4;
    *(_QWORD *)(v7 + 32) = 0;
    OutRec = ClipperLib::Clipper::CreateOutRec((ClipperLib::Clipper *)v2);
    v16 = v4[1];
    *((_QWORD *)OutRec + 3) = v16;
    v17 = *OutRec;
    v18 = v16;
    do
    {
      *v18 = v17;
      v18 = (int *)*((_QWORD *)v18 + 4);
    }
    while (v18 != v16);
    v19 = *(unsigned __int8 *)(v2 + 173);
    if (!*(_BYTE *)(v2 + 173))
      goto LABEL_68;
    v20 = *(_QWORD *)(v2 + 8);
    v21 = ((*(_QWORD *)(v2 + 16) - v20) >> 3) - 1;
    if ((*(_QWORD *)(v2 + 16) - v20) >> 3 == 1)
      goto LABEL_68;
    v22 = 0;
LABEL_38:
    v23 = *(_QWORD *)(v20 + 8 * v22);
    v24 = *(_QWORD **)(v23 + 24);
    if (!v24)
      goto LABEL_37;
    for (i = *(_QWORD *)(v23 + 8); i; i = *(_QWORD *)(i + 8))
    {
      if (*(_QWORD *)(i + 24))
        break;
    }
    if (i != v7 || *(unsigned __int8 *)(v23 + 4) == *(unsigned __int8 *)(v7 + 4))
      goto LABEL_37;
    v26 = *(_QWORD **)(v23 + 24);
    while (2)
    {
      v27 = 0;
      v29 = v26[1];
      v28 = v26[2];
      v30 = v16;
      while (1)
      {
        v31 = v30;
        v30 = (int *)*((_QWORD *)v30 + 3);
        v32 = *((_QWORD *)v30 + 2);
        if (v32 != v28)
          break;
        v33 = *((_QWORD *)v30 + 1);
        if (v33 == v29)
          goto LABEL_64;
        v34 = *((_QWORD *)v31 + 2);
        if (v34 == v28)
        {
          if (v33 <= v29 != *((_QWORD *)v31 + 1) < v29)
            goto LABEL_64;
          goto LABEL_47;
        }
        v35 = v34 - v28;
        v36 = v32 - v28;
        if (v32 < v28 == v34 >= v28)
          goto LABEL_54;
LABEL_47:
        if (v30 == v16)
        {
          if (!v27)
            goto LABEL_37;
LABEL_67:
          *(_QWORD *)(v23 + 8) = OutRec;
LABEL_37:
          if (++v22 != v21)
            goto LABEL_38;
LABEL_68:
          v43 = *(_QWORD **)(v7 + 24);
          v44 = v16;
          while (1)
          {
            this = ClipperLib::PointInPolygon((_QWORD *)v44 + 1, v43);
            if ((this & 0x80000000) == 0)
              break;
            v44 = (int *)*((_QWORD *)v44 + 3);
            if (v44 == v16)
              goto LABEL_81;
          }
          v48 = v43;
          if ((_DWORD)this)
          {
LABEL_81:
            v49 = *(_BYTE *)(v7 + 4) ^ 1;
            *((_BYTE *)OutRec + 4) = v49;
            *((_QWORD *)OutRec + 1) = v7;
            if (v19)
            {
              v50 = *(_QWORD *)(v2 + 8);
              v51 = *(_QWORD *)(v2 + 16) - v50;
              if (v51)
              {
                v52 = v51 >> 3;
                if (v52 <= 1)
                  v52 = 1;
                do
                {
                  if (*(_DWORD **)(*(_QWORD *)v50 + 8) == OutRec)
                    *(_QWORD *)(*(_QWORD *)v50 + 8) = v7;
                  v50 += 8;
                  --v52;
                }
                while (v52);
              }
            }
            if (v16)
            {
              v53 = *(_BYTE *)(v2 + 172) ^ v49;
              v54 = 0.0;
              v55 = v16;
              do
              {
                v54 = v54
                    + (double)(uint64_t)(*(_QWORD *)(*((_QWORD *)v55 + 4) + 16) - *((_QWORD *)v55 + 2))
                    * (double)(uint64_t)(*((_QWORD *)v55 + 1) + *(_QWORD *)(*((_QWORD *)v55 + 4) + 8));
                v55 = (int *)*((_QWORD *)v55 + 3);
              }
              while (v55 != v16);
              if (v54 * 0.5 > 0.0 == v53)
              {
                v56 = v16;
                do
                {
                  v57 = *(int8x16_t *)(v56 + 6);
                  *(int8x16_t *)(v56 + 6) = vextq_s8(v57, v57, 8uLL);
                  v56 = (int *)v57.i64[0];
                }
                while ((int *)v57.i64[0] != v16);
              }
            }
            goto LABEL_3;
          }
          while (1)
          {
            this = ClipperLib::PointInPolygon(v48 + 1, v16);
            if ((this & 0x80000000) == 0)
              break;
            v48 = (_QWORD *)v48[3];
            if (v48 == v43)
              goto LABEL_100;
          }
          if ((_DWORD)this)
          {
LABEL_100:
            v58 = *(_BYTE *)(v7 + 4);
            *((_BYTE *)OutRec + 4) = v58;
            v59 = v58 ^ 1;
            *(_BYTE *)(v7 + 4) = v59;
            *((_QWORD *)OutRec + 1) = *(_QWORD *)(v7 + 8);
            *(_QWORD *)(v7 + 8) = OutRec;
            if (v19)
            {
              v60 = *(_QWORD *)(v2 + 8);
              v61 = *(_QWORD *)(v2 + 16) - v60;
              if (v61)
              {
                v62 = v61 >> 3;
                if (v62 <= 1)
                  v62 = 1;
                do
                {
                  if (*(_QWORD *)(*(_QWORD *)v60 + 8) == v7)
                    *(_QWORD *)(*(_QWORD *)v60 + 8) = OutRec;
                  v60 += 8;
                  --v62;
                }
                while (v62);
              }
            }
            if (v43)
            {
              v63 = *(_BYTE *)(v2 + 172) ^ v59;
              v64 = 0.0;
              v65 = v43;
              do
              {
                v64 = v64
                    + (double)(uint64_t)(*(_QWORD *)(v65[4] + 16) - v65[2])
                    * (double)(uint64_t)(v65[1] + *(_QWORD *)(v65[4] + 8));
                v65 = (_QWORD *)v65[3];
              }
              while (v65 != v43);
              if (v64 * 0.5 > 0.0 == v63)
              {
                v66 = v43;
                do
                {
                  v67 = *(int8x16_t *)(v66 + 3);
                  *(int8x16_t *)(v66 + 3) = vextq_s8(v67, v67, 8uLL);
                  v66 = (_QWORD *)v67.i64[0];
                }
                while ((_QWORD *)v67.i64[0] != v43);
              }
            }
            goto LABEL_3;
          }
          *((_BYTE *)OutRec + 4) = *(_BYTE *)(v7 + 4);
          *((_QWORD *)OutRec + 1) = *(_QWORD *)(v7 + 8);
          if (v19)
            this = ClipperLib::Clipper::FixupFirstLefts1(v2, v7, (uint64_t)OutRec);
          goto LABEL_3;
        }
      }
      v34 = *((_QWORD *)v31 + 2);
      v35 = v34 - v28;
      v36 = v32 - v28;
      if (v32 < v28 != v34 >= v28)
        goto LABEL_47;
LABEL_54:
      v37 = *((_QWORD *)v31 + 1);
      v38 = *((_QWORD *)v30 + 1);
      v39 = v37 < v29;
      v40 = v37 - v29;
      if (v39)
      {
        v39 = v38 <= v29;
        v41 = v38 - v29;
        if (!v39)
          goto LABEL_60;
      }
      else
      {
        v39 = v38 <= v29;
        v41 = v38 - v29;
        if (v39)
        {
LABEL_60:
          v42 = -((double)v41 * (double)v35 - (double)v40 * (double)v36);
          if (v42 == 0.0)
          {
LABEL_64:
            v26 = (_QWORD *)v26[3];
            if (v26 != v24)
              continue;
            goto LABEL_67;
          }
          if (v32 > v34 != v42 <= 0.0)
            v27 = 1 - v27;
          goto LABEL_47;
        }
        v27 = 1 - v27;
      }
      goto LABEL_47;
    }
  }
  return this;
}

uint64_t ClipperLib::Clipper::FixupOutPolygon(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v17;
  char *v20;
  _QWORD *v21;

  *(_QWORD *)(a2 + 32) = 0;
  v2 = *(_QWORD **)(a2 + 24);
  v4 = v2 + 4;
  v3 = (_QWORD *)v2[4];
  if (v3 == v2)
  {
    v6 = *(_QWORD **)(a2 + 24);
    goto LABEL_30;
  }
  v5 = 0;
  while (1)
  {
    v6 = (_QWORD *)v2[3];
    if (v3 == v6)
      break;
    v7 = v2[1];
    v8 = v2[2];
    v9 = v6[1];
    v10 = v6[2];
    if (v7 == v9 && v8 == v10)
      goto LABEL_3;
    v12 = v3[1];
    v13 = v3[2];
    if (v7 == v12 && v8 == v13)
      goto LABEL_3;
    v20 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v21 = v5;
    result = ClipperLib::SlopesEqual(v12, v13, v7, v8, v9, v10, v20[40]);
    v5 = v21;
    if (!(_DWORD)result)
      goto LABEL_23;
    if (!v20[72])
      goto LABEL_3;
    if (v12 == v9 && v13 == v10)
      goto LABEL_3;
    if (v12 == v9)
    {
      if (v8 <= v13 != v8 < v10)
        goto LABEL_23;
LABEL_3:
      v3[3] = v6;
      *(_QWORD *)(v2[3] + 32) = v3;
      v6 = (_QWORD *)*v4;
      MEMORY[0x22E2A50A0](v2, 0x1020C409AE45206);
      v5 = 0;
      v4 = v6 + 4;
      v3 = (_QWORD *)v6[4];
      v2 = v6;
      if (v3 == v6)
        goto LABEL_30;
    }
    else
    {
      if (v7 < v9 == v7 <= v12)
        goto LABEL_3;
LABEL_23:
      if (v2 == v21)
        goto LABEL_33;
      if (!v21)
        v5 = v2;
      v4 = v6 + 4;
      v3 = (_QWORD *)v6[4];
      v2 = v6;
      if (v3 == v6)
        goto LABEL_30;
    }
  }
  v6 = v2;
  v2 = v3;
LABEL_30:
  v2[3] = 0;
  do
  {
    v17 = (_QWORD *)v6[3];
    result = MEMORY[0x22E2A50A0](v6, 0x1020C409AE45206);
    v6 = v17;
  }
  while (v17);
  v5 = 0;
LABEL_33:
  *(_QWORD *)(a2 + 24) = v5;
  return result;
}

uint64_t ClipperLib::Clipper::DoSimplePolygons(uint64_t this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _OWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  double v52;
  _QWORD *v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t **v92;

  v1 = *(uint64_t **)(this + 8);
  v92 = (uint64_t **)(this + 8);
  v2 = *(_QWORD *)(this + 16);
  if ((uint64_t *)v2 != v1)
  {
    v3 = this;
    v4 = 0;
    v91 = (_QWORD *)this;
    while (1)
    {
      v5 = v1[v4];
      v6 = *(_QWORD **)(v5 + 24);
      if (v6)
      {
        if (!*(_BYTE *)(v5 + 5))
          break;
      }
LABEL_4:
      if (++v4 >= (unint64_t)((v2 - (uint64_t)v1) >> 3))
        return this;
    }
    v90 = v4;
    v7 = *(_QWORD **)(v5 + 24);
LABEL_9:
    v8 = (_QWORD *)v7[3];
    if (v8 == v6)
    {
LABEL_3:
      v1 = *v92;
      v4 = v90;
      goto LABEL_4;
    }
LABEL_13:
    if (v7[1] != v8[1] || v7[2] != v8[2])
      goto LABEL_12;
    if ((_QWORD *)v8[3] == v7)
      goto LABEL_12;
    v10 = (_QWORD *)v8[4];
    if (v10 == v7)
      goto LABEL_12;
    v11 = v7[4];
    v7[4] = v10;
    v10[3] = v7;
    v8[4] = v11;
    *(_QWORD *)(v11 + 24) = v8;
    *(_QWORD *)(v5 + 24) = v7;
    v12 = operator new();
    v13 = v12;
    *(_WORD *)(v12 + 4) = 0;
    *(_OWORD *)(v12 + 8) = 0u;
    *(_OWORD *)(v12 + 24) = 0u;
    v15 = *(uint64_t **)(v3 + 16);
    v14 = *(_QWORD *)(v3 + 24);
    if ((unint64_t)v15 < v14)
    {
      *v15 = v12;
      v2 = (uint64_t)(v15 + 1);
      goto LABEL_42;
    }
    v16 = *v92;
    v17 = (char *)v15 - (char *)*v92;
    v18 = v17 >> 3;
    v19 = (v17 >> 3) + 1;
    if (v19 >> 61)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v20 = v14 - (_QWORD)v16;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = operator new(8 * v21);
      v23 = (uint64_t *)&v22[8 * v18];
      *v23 = v13;
      v2 = (uint64_t)(v23 + 1);
      if (v15 == v16)
        goto LABEL_40;
    }
    else
    {
      v22 = 0;
      v23 = (uint64_t *)(8 * v18);
      *(_QWORD *)(8 * v18) = v13;
      v2 = 8 * v18 + 8;
      if (v15 == v16)
      {
LABEL_40:
        v33 = &v22[8 * v21];
        v3 = (uint64_t)v91;
        v91[1] = v23;
        v91[2] = v2;
        v91[3] = v33;
        if (v15)
          operator delete(v15);
LABEL_42:
        *(_QWORD *)(v3 + 16) = v2;
        v34 = *(_QWORD *)(v3 + 8);
        v35 = v2 - v34;
        v36 = ((unint64_t)(v2 - v34) >> 3) - 1;
        *(_DWORD *)v13 = v36;
        *(_QWORD *)(v13 + 24) = v8;
        v37 = v8;
        do
        {
          *(_DWORD *)v37 = v36;
          v37 = (_QWORD *)v37[4];
        }
        while (v37 != v8);
        v6 = *(_QWORD **)(v5 + 24);
        v38 = v8;
        while (2)
        {
          v39 = 0;
          v41 = v38[1];
          v40 = v38[2];
          v42 = *(_QWORD **)(v5 + 24);
          while (1)
          {
            this = (uint64_t)v42;
            v42 = (_QWORD *)v42[3];
            v43 = v42[2];
            if (v43 != v40)
              break;
            v44 = v42[1];
            if (v44 == v41)
              goto LABEL_64;
            v45 = *(_QWORD *)(this + 16);
            if (v45 == v40)
            {
              if (v44 <= v41 != *(_QWORD *)(this + 8) < v41)
                goto LABEL_64;
              goto LABEL_47;
            }
            v46 = v45 - v40;
            v47 = v43 - v40;
            if (v43 < v40 == v45 >= v40)
              goto LABEL_54;
LABEL_47:
            if (v42 == v6)
            {
              v53 = *(_QWORD **)(v5 + 24);
              if (v39)
              {
LABEL_67:
                *(_BYTE *)(v13 + 4) = *(_BYTE *)(v5 + 4) ^ 1;
                *(_QWORD *)(v13 + 8) = v5;
                if (*(_BYTE *)(v3 + 173) && v2 != v34)
                {
                  v54 = v35 >> 3;
                  if (v54 <= 1)
                    v54 = 1;
                  do
                  {
                    if (*(_QWORD *)(*(_QWORD *)v34 + 8) == v13)
                      *(_QWORD *)(*(_QWORD *)v34 + 8) = v5;
                    v34 += 8;
                    --v54;
                  }
                  while (v54);
                }
                goto LABEL_11;
              }
              while (2)
              {
                v55 = 0;
                v57 = v53[1];
                v56 = v53[2];
                v58 = v8;
LABEL_79:
                this = (uint64_t)v58;
                v58 = (_QWORD *)v58[3];
                v59 = v58[2];
                if (v59 == v56)
                {
                  v60 = v58[1];
                  if (v60 == v57)
                    goto LABEL_75;
                  v61 = *(_QWORD *)(this + 16);
                  if (v61 == v56)
                  {
                    if (v60 <= v57 != *(_QWORD *)(this + 8) < v57)
                      goto LABEL_75;
                  }
                  else
                  {
                    v62 = v61 - v56;
                    v63 = v59 - v56;
                    if (v59 < v56 != v61 >= v56)
                      break;
LABEL_85:
                    v64 = *(_QWORD *)(this + 8);
                    v65 = v58[1];
                    v50 = v64 < v57;
                    this = v64 - v57;
                    if (v50)
                    {
                      v50 = v65 <= v57;
                      v66 = v65 - v57;
                      if (v50)
                        break;
                    }
                    else
                    {
                      v50 = v65 <= v57;
                      v66 = v65 - v57;
                      if (!v50)
                      {
                        v55 = 1 - v55;
                        break;
                      }
                    }
                    v67 = -((double)v66 * (double)v62 - (double)this * (double)v63);
                    if (v67 == 0.0)
                    {
LABEL_75:
                      v53 = (_QWORD *)v53[3];
                      if (v53 == v6)
                        goto LABEL_96;
                      continue;
                    }
                    this = v67 <= 0.0;
                    if (v59 > v61 != this)
                      v55 = 1 - v55;
                  }
                }
                else
                {
                  v61 = *(_QWORD *)(this + 16);
                  v62 = v61 - v56;
                  v63 = v59 - v56;
                  if (v59 < v56 == v61 >= v56)
                    goto LABEL_85;
                }
                break;
              }
              if (v58 != v8)
                goto LABEL_79;
              if (v55)
              {
LABEL_96:
                v68 = *(_BYTE *)(v5 + 4);
                *(_BYTE *)(v13 + 4) = v68;
                *(_BYTE *)(v5 + 4) = v68 ^ 1;
                *(_QWORD *)(v13 + 8) = *(_QWORD *)(v5 + 8);
                *(_QWORD *)(v5 + 8) = v13;
                if (*(_BYTE *)(v3 + 173) && v2 != v34)
                {
                  v69 = v35 >> 3;
                  if (v69 <= 1)
                    v69 = 1;
                  do
                  {
                    if (*(_QWORD *)(*(_QWORD *)v34 + 8) == v5)
                      *(_QWORD *)(*(_QWORD *)v34 + 8) = v13;
                    v34 += 8;
                    --v69;
                  }
                  while (v69);
                }
                goto LABEL_11;
              }
              *(_BYTE *)(v13 + 4) = *(_BYTE *)(v5 + 4);
              *(_QWORD *)(v13 + 8) = *(_QWORD *)(v5 + 8);
              if (!*(_BYTE *)(v3 + 173) || v2 == v34)
                goto LABEL_11;
              v70 = 0;
              v71 = v35 >> 3;
              if (v71 <= 1)
                v71 = 1;
              while (2)
              {
                v72 = *(_QWORD *)(v34 + 8 * v70);
                v73 = *(_QWORD **)(v72 + 24);
                if (!v73)
                  goto LABEL_111;
                v74 = *(_QWORD *)(v72 + 8);
                if (!v74)
                  goto LABEL_111;
                do
                {
                  if (*(_QWORD *)(v74 + 24))
                    break;
                  v74 = *(_QWORD *)(v74 + 8);
                }
                while (v74);
                if (v74 != v5)
                  goto LABEL_111;
                v75 = *(_QWORD **)(v72 + 24);
                while (2)
                {
                  v76 = 0;
                  v78 = v75[1];
                  v77 = v75[2];
                  this = (uint64_t)v8;
                  while (2)
                  {
                    v79 = this;
                    this = *(_QWORD *)(this + 24);
                    v80 = *(_QWORD *)(this + 16);
                    if (v80 != v77)
                    {
                      v82 = *(_QWORD *)(v79 + 16);
                      v83 = v82 - v77;
                      v84 = v80 - v77;
                      if (v80 < v77 == v82 >= v77)
                        goto LABEL_127;
LABEL_120:
                      if ((_QWORD *)this == v8)
                      {
                        if (!v76)
                          goto LABEL_111;
                        goto LABEL_110;
                      }
                      continue;
                    }
                    break;
                  }
                  v81 = *(_QWORD *)(this + 8);
                  if (v81 == v78)
                    goto LABEL_137;
                  v82 = *(_QWORD *)(v79 + 16);
                  if (v82 == v77)
                  {
                    if (v81 <= v78 != *(_QWORD *)(v79 + 8) < v78)
                      goto LABEL_137;
                    goto LABEL_120;
                  }
                  v83 = v82 - v77;
                  v84 = v80 - v77;
                  if (v80 < v77 != v82 >= v77)
                    goto LABEL_120;
LABEL_127:
                  v85 = *(_QWORD *)(v79 + 8);
                  v86 = *(_QWORD *)(this + 8);
                  v50 = v85 < v78;
                  v87 = v85 - v78;
                  if (v50)
                  {
                    v50 = v86 <= v78;
                    v88 = v86 - v78;
                    if (v50)
                      goto LABEL_120;
                  }
                  else
                  {
                    v50 = v86 <= v78;
                    v88 = v86 - v78;
                    if (!v50)
                    {
                      v76 = 1 - v76;
                      goto LABEL_120;
                    }
                  }
                  v89 = -((double)v88 * (double)v83 - (double)v87 * (double)v84);
                  if (v89 != 0.0)
                  {
                    if (v80 > v82 != v89 <= 0.0)
                      v76 = 1 - v76;
                    goto LABEL_120;
                  }
LABEL_137:
                  v75 = (_QWORD *)v75[3];
                  if (v75 != v73)
                    continue;
                  break;
                }
LABEL_110:
                *(_QWORD *)(v72 + 8) = v13;
LABEL_111:
                if (++v70 != v71)
                  continue;
                break;
              }
LABEL_11:
              v8 = v7;
LABEL_12:
              v8 = (_QWORD *)v8[3];
              if (v8 != v6)
                goto LABEL_13;
              v7 = (_QWORD *)v7[3];
              if (v7 == v6)
                goto LABEL_3;
              goto LABEL_9;
            }
          }
          v45 = *(_QWORD *)(this + 16);
          v46 = v45 - v40;
          v47 = v43 - v40;
          if (v43 < v40 != v45 >= v40)
            goto LABEL_47;
LABEL_54:
          v48 = *(_QWORD *)(this + 8);
          v49 = v42[1];
          v50 = v48 < v41;
          this = v48 - v41;
          if (v50)
          {
            v50 = v49 <= v41;
            v51 = v49 - v41;
            if (!v50)
              goto LABEL_60;
          }
          else
          {
            v50 = v49 <= v41;
            v51 = v49 - v41;
            if (v50)
            {
LABEL_60:
              v52 = -((double)v51 * (double)v46 - (double)this * (double)v47);
              if (v52 == 0.0)
              {
LABEL_64:
                v38 = (_QWORD *)v38[3];
                if (v38 == v8)
                  goto LABEL_67;
                continue;
              }
              this = v52 <= 0.0;
              if (v43 > v45 != this)
                v39 = 1 - v39;
              goto LABEL_47;
            }
            v39 = 1 - v39;
          }
          goto LABEL_47;
        }
      }
    }
    v24 = (char *)(v15 - 1) - (char *)v16;
    if (v24 < 0x58)
      goto LABEL_144;
    if ((unint64_t)((char *)v15 - &v22[v17]) < 0x20)
      goto LABEL_144;
    v25 = (v24 >> 3) + 1;
    v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    v27 = &v15[v26 / 0xFFFFFFFFFFFFFFF8];
    v23 = (uint64_t *)((char *)v23 - v26);
    v28 = &v22[8 * v18 - 16];
    v29 = v15 - 2;
    v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *v28 = v31;
      v28 -= 2;
      v29 -= 4;
      v30 -= 4;
    }
    while (v30);
    v15 = v27;
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_144:
      do
      {
        v32 = *--v15;
        *--v23 = v32;
      }
      while (v15 != v16);
    }
    v15 = *v92;
    goto LABEL_40;
  }
  return this;
}

uint64_t ClipperLib::Clipper::ClearJoins(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(this + 32);
  v2 = *(_QWORD *)(this + 40);
  if (v2 != v1)
  {
    v3 = this;
    v4 = 0;
    do
    {
      this = *(_QWORD *)(v1 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x22E2A50A0](this, 0x1020C406C4767B9);
        v1 = *(_QWORD *)(v3 + 32);
        v2 = *(_QWORD *)(v3 + 40);
      }
      ++v4;
    }
    while (v4 < (v2 - v1) >> 3);
    if (v2 != v1)
      *(_QWORD *)(v3 + 40) = v1;
  }
  return this;
}

void std::priority_queue<long long>::push(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    v8 = *(char **)a1;
    v9 = (uint64_t)&v5[-*(_QWORD *)a1];
    v10 = v9 >> 3;
    v11 = (v9 >> 3) + 1;
    if (v11 >> 61)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v12 = v4 - (_QWORD)v8;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *v15 = *a2;
    v7 = v15 + 1;
    if (v5 != v8)
    {
      v16 = v5 - v8 - 8;
      if (v16 < 0x58)
        goto LABEL_32;
      if ((unint64_t)(v5 - v14 - v9) < 0x20)
        goto LABEL_32;
      v17 = (v16 >> 3) + 1;
      v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v18];
      v15 = (_QWORD *)((char *)v15 - v18);
      v19 = &v14[8 * v10 - 16];
      v20 = v5 - 16;
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          v23 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *--v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v14[8 * v13];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_QWORD *)v5 = *a2;
    v7 = v5 + 8;
  }
  *(_QWORD *)(a1 + 8) = v7;
  v24 = *(char **)a1;
  v25 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v25 >= 9)
  {
    v26 = (((unint64_t)v25 >> 3) - 2) >> 1;
    v27 = &v24[8 * v26];
    v30 = *(v7 - 1);
    v29 = (char *)(v7 - 1);
    v28 = v30;
    v31 = *(_QWORD *)v27;
    if (*(_QWORD *)v27 < v30)
    {
      do
      {
        *(_QWORD *)v29 = v31;
        v29 = v27;
        if (!v26)
          break;
        v26 = (v26 - 1) >> 1;
        v27 = &v24[8 * v26];
        v31 = *(_QWORD *)v27;
      }
      while (*(_QWORD *)v27 < v28);
      *(_QWORD *)v29 = v28;
    }
  }
}

uint64_t ClipperLib::Clipper::DisposeOutRec(ClipperLib::Clipper *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t result;

  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * a2);
  v5 = *(_QWORD *)(v4 + 24);
  if (v5)
  {
    *(_QWORD *)(*(_QWORD *)(v5 + 32) + 24) = 0;
    for (i = *(_QWORD *)(v4 + 24); i; i = *(_QWORD *)(v4 + 24))
    {
      *(_QWORD *)(v4 + 24) = *(_QWORD *)(i + 24);
      MEMORY[0x22E2A50A0]();
    }
  }
  result = MEMORY[0x22E2A50A0](v4, 0x1020C401FC46325);
  *(_QWORD *)(*((_QWORD *)this + 1) + 8 * a2) = 0;
  return result;
}

uint64_t ClipperLib::Clipper::SetWindingCount(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  char i;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a2 + 128);
  v3 = *(_DWORD *)(a2 + 72);
  if (v2)
  {
    while (1)
    {
      if (*(_DWORD *)(v2 + 72) == v3)
      {
        v7 = *(_DWORD *)(v2 + 80);
        if (v7)
          break;
      }
      v2 = *(_QWORD *)(v2 + 128);
      if (!v2)
        goto LABEL_2;
    }
    v8 = *(_DWORD *)(a2 + 80);
    if (v8)
    {
      v9 = 164;
      if (!v3)
        v9 = 168;
      if (!*(_DWORD *)(result + v9))
        goto LABEL_38;
      v10 = *(_DWORD *)(v2 + 84);
      if (((v10 * v7) & 0x80000000) == 0)
      {
        if (((v8 * v7) & 0x80000000) == 0)
          v11 = *(_DWORD *)(a2 + 80);
        else
          v11 = 0;
        v8 = v10 + v11;
        goto LABEL_38;
      }
LABEL_24:
      if (v10 >= 0)
        v13 = v10;
      else
        v13 = -v10;
      if (v8 <= 1)
        v14 = 1;
      else
        v14 = *(_DWORD *)(a2 + 80);
      if (((v8 * v7) & 0x80000000) == 0)
        v15 = *(_DWORD *)(a2 + 80);
      else
        v15 = 0;
      v16 = v10 + v15;
      if (v13 >= 2)
        v8 = v16;
      else
        v8 = v14;
      goto LABEL_38;
    }
    if (*(_DWORD *)(result + 104) == 1)
    {
      v12 = 164;
      if (!v3)
        v12 = 168;
      if (!*(_DWORD *)(result + v12))
      {
        v17 = *(_QWORD *)(v2 + 128);
        for (i = 1; v17; v17 = *(_QWORD *)(v17 + 128))
        {
          if (*(_DWORD *)(v17 + 72) == v3)
            i ^= *(_DWORD *)(v17 + 80) != 0;
        }
        v8 = (i & 1) == 0;
        goto LABEL_38;
      }
      v10 = *(_DWORD *)(v2 + 84);
      if (v10 * v7 < 0)
        goto LABEL_24;
      v8 = ((v10 >> 31) | 1) + v10;
    }
    else
    {
      v8 = 1;
    }
LABEL_38:
    v4 = *(_DWORD *)(v2 + 88);
    *(_DWORD *)(a2 + 84) = v8;
    *(_DWORD *)(a2 + 88) = v4;
    v6 = (uint64_t *)(v2 + 120);
    goto LABEL_39;
  }
LABEL_2:
  v4 = 0;
  v5 = *(_DWORD *)(a2 + 80);
  if (v5 <= 1)
    v5 = 1;
  *(_DWORD *)(a2 + 84) = v5;
  *(_DWORD *)(a2 + 88) = 0;
  v6 = (uint64_t *)(result + 144);
LABEL_39:
  v19 = *v6;
  v20 = v3 == 0;
  v21 = 168;
  if (v20)
    v21 = 164;
  if (*(_DWORD *)(result + v21))
  {
    if (v19 != a2)
    {
      do
      {
        v4 += *(_DWORD *)(v19 + 80);
        v19 = *(_QWORD *)(v19 + 120);
      }
      while (v19 != a2);
      *(_DWORD *)(a2 + 88) = v4;
    }
  }
  else
  {
    while (v19 != a2)
    {
      if (*(_DWORD *)(v19 + 80))
      {
        v4 = v4 == 0;
        *(_DWORD *)(a2 + 88) = v4;
      }
      v19 = *(_QWORD *)(v19 + 120);
    }
  }
  return result;
}

BOOL ClipperLib::Clipper::IsEvenOddFillType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 164;
  if (!*(_DWORD *)(a2 + 72))
    v2 = 168;
  return *(_DWORD *)(a1 + v2) == 0;
}

BOOL ClipperLib::Clipper::IsEvenOddAltFillType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 168;
  if (!*(_DWORD *)(a2 + 72))
    v2 = 164;
  return *(_DWORD *)(a1 + v2) == 0;
}

uint64_t ClipperLib::Clipper::IsContributing(uint64_t a1, _DWORD *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  int v8;
  BOOL v9;

  v2 = a2[18];
  v3 = 164;
  if (v2)
    v4 = 164;
  else
    v4 = 168;
  if (v2)
    v3 = 168;
  v5 = *(_DWORD *)(a1 + v3);
  v6 = *(_DWORD *)(a1 + v4);
  if (v6 != 2)
  {
    if (v6 == 1)
    {
      v8 = a2[21];
      if (v8 < 0)
        v8 = -v8;
      if (v8 != 1)
        return 0;
      goto LABEL_15;
    }
    if (v6)
    {
      if (a2[21] != -1)
        return 0;
      goto LABEL_15;
    }
    if (a2[20])
      goto LABEL_15;
  }
  if (a2[21] != 1)
    return 0;
LABEL_15:
  switch(*(_DWORD *)(a1 + 104))
  {
    case 0:
      v9 = v5 == 2;
      if (v5 >= 2)
        goto LABEL_22;
      goto LABEL_17;
    case 1:
      goto LABEL_27;
    case 2:
      v9 = v5 == 2;
      if (v2)
      {
        if (v5 < 2)
        {
LABEL_17:
          result = a2[22] != 0;
        }
        else
        {
LABEL_22:
          if (v9)
            result = a2[22] > 0;
          else
            result = a2[22] >> 31;
        }
      }
      else if (v5 < 2)
      {
LABEL_28:
        result = a2[22] == 0;
      }
      else
      {
LABEL_30:
        if (v9)
          result = a2[22] < 1;
        else
          result = a2[22] >= 0;
      }
      break;
    case 3:
      if (a2[20])
        return 1;
LABEL_27:
      v9 = v5 == 2;
      if (v5 < 2)
        goto LABEL_28;
      goto LABEL_30;
    default:
      return 1;
  }
  return result;
}

uint64_t ClipperLib::Clipper::AddLocalMinPoly(ClipperLib::Clipper *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  BOOL v16;
  double v17;
  double v18;
  uint64_t v19;

  v6 = a2;
  if (*(_QWORD *)(a3 + 56) && *(double *)(a2 + 64) <= *(double *)(a3 + 64))
  {
    v8 = ClipperLib::Clipper::AddOutPt(this, a3, a4);
    *(_DWORD *)(v6 + 92) = *(_DWORD *)(a3 + 92);
    *(_DWORD *)(v6 + 76) = 2;
    *(_DWORD *)(a3 + 76) = 1;
    v9 = *(_QWORD *)(a3 + 128);
    v10 = v6;
    v16 = v9 == v6;
    v6 = a3;
    if (!v16)
      goto LABEL_5;
    goto LABEL_4;
  }
  v8 = ClipperLib::Clipper::AddOutPt(this, a2, a4);
  *(_DWORD *)(a3 + 92) = *(_DWORD *)(v6 + 92);
  *(_DWORD *)(v6 + 76) = 1;
  *(_DWORD *)(a3 + 76) = 2;
  v9 = *(_QWORD *)(v6 + 128);
  v10 = a3;
  if (v9 == a3)
LABEL_4:
    v9 = *(_QWORD *)(v10 + 128);
LABEL_5:
  if (!v9 || (*(_DWORD *)(v9 + 92) & 0x80000000) != 0)
    return v8;
  v11 = *(_QWORD *)(a4 + 8);
  if (*(_QWORD *)(v9 + 40) == v11)
  {
    v12 = *(_QWORD *)(v9 + 32);
    if (*(_QWORD *)(v6 + 40) != v11)
      goto LABEL_9;
  }
  else
  {
    v17 = *(double *)(v9 + 64) * (double)(v11 - *(_QWORD *)(v9 + 8));
    v18 = 0.5;
    if (v17 < 0.0)
      v18 = -0.5;
    v12 = *(_QWORD *)v9 + (uint64_t)(v18 + v17);
    if (*(_QWORD *)(v6 + 40) != v11)
    {
LABEL_9:
      v13 = *(double *)(v6 + 64) * (double)(v11 - *(_QWORD *)(v6 + 8));
      v14 = 0.5;
      if (v13 < 0.0)
        v14 = -0.5;
      if (v12 != *(_QWORD *)v6 + (uint64_t)(v14 + v13))
        return v8;
      goto LABEL_20;
    }
  }
  if (v12 != *(_QWORD *)(v6 + 32))
    return v8;
LABEL_20:
  if (!ClipperLib::SlopesEqual(v6, v9, *((unsigned __int8 *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40))
    || !*(_DWORD *)(v6 + 80)
    || !*(_DWORD *)(v9 + 80))
  {
    return v8;
  }
  v19 = ClipperLib::Clipper::AddOutPt(this, v9, a4);
  ClipperLib::Clipper::AddJoin(this, v8, v19, *(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40));
  return v8;
}

uint64_t ClipperLib::Clipper::AddOutPt(ClipperLib::Clipper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _DWORD *OutRec;
  int v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v6 = *(unsigned int *)(a2 + 92);
  if ((v6 & 0x80000000) != 0)
  {
    OutRec = ClipperLib::Clipper::CreateOutRec(this);
    *((_BYTE *)OutRec + 5) = *(_DWORD *)(a2 + 80) == 0;
    result = operator new();
    *((_QWORD *)OutRec + 3) = result;
    v13 = *OutRec;
    *(_DWORD *)result = *OutRec;
    *(_OWORD *)(result + 8) = *(_OWORD *)a3;
    *(_QWORD *)(result + 24) = result;
    *(_QWORD *)(result + 32) = result;
    if (*((_BYTE *)OutRec + 5))
      goto LABEL_11;
    v16 = *(_QWORD *)(a2 + 128);
    if (!v16)
      goto LABEL_11;
    v17 = 0;
    do
    {
      v18 = *(unsigned int *)(v16 + 92);
      if ((v18 & 0x80000000) == 0)
      {
        if (*(_DWORD *)(v16 + 80))
        {
          v17 ^= 1u;
          if (!*((_QWORD *)OutRec + 1))
            *((_QWORD *)OutRec + 1) = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v18);
        }
      }
      v16 = *(_QWORD *)(v16 + 128);
    }
    while (v16);
    if ((v17 & 1) != 0)
    {
      *((_BYTE *)OutRec + 4) = 1;
      *(_DWORD *)(a2 + 92) = v13;
    }
    else
    {
LABEL_11:
      *(_DWORD *)(a2 + 92) = v13;
    }
  }
  else
  {
    v7 = *(_DWORD *)(a2 + 76);
    v8 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v6);
    v9 = *(_QWORD **)(v8 + 24);
    if (v7 == 1)
    {
      if (*(_QWORD *)a3 == v9[1] && *(_QWORD *)(a3 + 8) == v9[2])
        return *(_QWORD *)(v8 + 24);
      goto LABEL_16;
    }
    result = v9[4];
    if (*(_QWORD *)a3 != *(_QWORD *)(result + 8) || *(_QWORD *)(a3 + 8) != *(_QWORD *)(result + 16))
    {
LABEL_16:
      result = operator new();
      *(_DWORD *)result = *(_DWORD *)v8;
      *(_OWORD *)(result + 8) = *(_OWORD *)a3;
      v15 = v9[4];
      *(_QWORD *)(result + 24) = v9;
      *(_QWORD *)(result + 32) = v15;
      *(_QWORD *)(v15 + 24) = result;
      v9[4] = result;
      if (v7 == 1)
        *(_QWORD *)(v8 + 24) = result;
    }
  }
  return result;
}

void ClipperLib::Clipper::AddJoin(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  v10 = (_QWORD *)operator new();
  v11 = v10;
  *v10 = a2;
  v10[1] = a3;
  v10[2] = a4;
  v10[3] = a5;
  v13 = (char *)a1[5];
  v12 = a1[6];
  v14 = v13;
  if ((unint64_t)v13 < v12)
  {
    *(_QWORD *)v13 = v10;
    v15 = (uint64_t)(v13 + 8);
    goto LABEL_23;
  }
  v16 = (char *)a1[4];
  v17 = (v13 - v16) >> 3;
  v18 = v17 + 1;
  if ((unint64_t)(v17 + 1) >> 61)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v19 = v12 - (_QWORD)v16;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *(_QWORD *)v22 = v11;
    v15 = (uint64_t)(v22 + 8);
    v24 = (char *)(v13 - v16);
    if (v13 == v16)
      goto LABEL_21;
    goto LABEL_14;
  }
  v21 = 0;
  v22 = (char *)(8 * v17);
  v23 = 0;
  *(_QWORD *)(8 * v17) = v11;
  v15 = 8 * v17 + 8;
  v24 = (char *)(v13 - v16);
  if (v13 != v16)
  {
LABEL_14:
    v25 = (unint64_t)(v24 - 8);
    if (v25 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v16 - v21) < 0x20)
      goto LABEL_28;
    v26 = (v25 >> 3) + 1;
    v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
    v14 = &v13[-v27];
    v22 -= v27;
    v28 = &v21[8 * v17 - 16];
    v29 = (__int128 *)(v13 - 16);
    v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v31 = *v29;
      *((_OWORD *)v28 - 1) = *(v29 - 1);
      *(_OWORD *)v28 = v31;
      v28 -= 32;
      v29 -= 2;
      v30 -= 4;
    }
    while (v30);
    if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v32 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v22 - 1) = v32;
        v22 -= 8;
      }
      while (v14 != v16);
    }
    v14 = (char *)a1[4];
  }
LABEL_21:
  a1[4] = v22;
  a1[5] = v15;
  a1[6] = v23;
  if (v14)
    operator delete(v14);
LABEL_23:
  a1[5] = v15;
}

uint64_t ClipperLib::Clipper::AddLocalMaxPoly(ClipperLib::Clipper *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  result = ClipperLib::Clipper::AddOutPt(a1, a2, a4);
  if (*(_DWORD *)(a3 + 80))
  {
    v9 = *(_DWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a3 + 92);
    v11 = v9 < v10;
    if (v9 == v10)
    {
LABEL_3:
      *(_DWORD *)(a2 + 92) = -1;
      *(_DWORD *)(a3 + 92) = -1;
      return result;
    }
  }
  else
  {
    result = ClipperLib::Clipper::AddOutPt(a1, a3, a4);
    v12 = *(_DWORD *)(a2 + 92);
    v13 = *(_DWORD *)(a3 + 92);
    v11 = v12 < v13;
    if (v12 == v13)
      goto LABEL_3;
  }
  if (v11)
  {
    v14 = a2;
    v15 = a3;
  }
  else
  {
    v14 = a3;
    v15 = a2;
  }
  return ClipperLib::Clipper::AppendPolygon((uint64_t)a1, v14, v15);
}

uint64_t ClipperLib::Clipper::AppendPolygon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int8x16_t v20;
  int v21;
  uint64_t v22;
  int8x16_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(v6 + 8 * *(int *)(a2 + 92));
  v8 = *(_QWORD *)(v6 + 8 * *(int *)(a3 + 92));
  v9 = v7;
  do
    v9 = *(_QWORD *)(v9 + 8);
  while (v9 != v8 && v9 != 0);
  result = *(_QWORD *)(v6 + 8 * *(int *)(a3 + 92));
  if (v9 != v8)
  {
    v12 = *(_QWORD *)(v6 + 8 * *(int *)(a3 + 92));
    do
      v12 = *(_QWORD *)(v12 + 8);
    while (v12 != v7 && v12 != 0);
    result = *(_QWORD *)(v6 + 8 * *(int *)(a2 + 92));
    if (v12 != v7)
      result = ClipperLib::GetLowermostRec(*(_QWORD *)(v6 + 8 * *(int *)(a2 + 92)), *(_QWORD *)(v6 + 8 * *(int *)(a3 + 92)));
  }
  v14 = *(_QWORD *)(v7 + 24);
  v15 = *(_QWORD *)(v14 + 32);
  v16 = *(_QWORD *)(v8 + 24);
  v17 = *(_QWORD *)(v16 + 32);
  v18 = *(_DWORD *)(a3 + 76);
  if (*(_DWORD *)(a2 + 76) == 1)
  {
    if (v18 == 1)
    {
      v19 = *(_QWORD *)(v8 + 24);
      do
      {
        v20 = *(int8x16_t *)(v19 + 24);
        *(int8x16_t *)(v19 + 24) = vextq_s8(v20, v20, 8uLL);
        v19 = v20.i64[0];
      }
      while (v20.i64[0] != v16);
      *(_QWORD *)(v16 + 24) = v14;
      *(_QWORD *)(v14 + 32) = v16;
      *(_QWORD *)(v15 + 24) = v17;
      *(_QWORD *)(v17 + 32) = v15;
      *(_QWORD *)(v7 + 24) = v17;
      *(_QWORD *)(v7 + 32) = 0;
      v21 = 1;
      if (result != v8)
        goto LABEL_33;
    }
    else
    {
      *(_QWORD *)(v17 + 24) = v14;
      *(_QWORD *)(v14 + 32) = v17;
      *(_QWORD *)(v16 + 32) = v15;
      *(_QWORD *)(v15 + 24) = v16;
      *(_QWORD *)(v7 + 24) = v16;
      *(_QWORD *)(v7 + 32) = 0;
      v21 = 1;
      if (result != v8)
        goto LABEL_33;
    }
  }
  else if (v18 == 2)
  {
    v22 = *(_QWORD *)(v8 + 24);
    do
    {
      v23 = *(int8x16_t *)(v22 + 24);
      *(int8x16_t *)(v22 + 24) = vextq_s8(v23, v23, 8uLL);
      v22 = v23.i64[0];
    }
    while (v23.i64[0] != v16);
    *(_QWORD *)(v15 + 24) = v17;
    *(_QWORD *)(v17 + 32) = v15;
    *(_QWORD *)(v16 + 24) = v14;
    v21 = 2;
    *(_QWORD *)(v14 + 32) = v16;
    *(_QWORD *)(v7 + 32) = 0;
    if (result != v8)
      goto LABEL_33;
  }
  else
  {
    *(_QWORD *)(v15 + 24) = v16;
    *(_QWORD *)(v16 + 32) = v15;
    *(_QWORD *)(v14 + 32) = v17;
    v21 = 2;
    *(_QWORD *)(v17 + 24) = v14;
    *(_QWORD *)(v7 + 32) = 0;
    if (result != v8)
      goto LABEL_33;
  }
  v24 = *(_QWORD *)(v8 + 8);
  if (v24 != v7)
    *(_QWORD *)(v7 + 8) = v24;
  *(_BYTE *)(v7 + 4) = *(_BYTE *)(v8 + 4);
LABEL_33:
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 8) = v7;
  v25 = *(_DWORD *)(a2 + 92);
  v26 = *(_DWORD *)(a3 + 92);
  *(_DWORD *)(a2 + 92) = -1;
  *(_DWORD *)(a3 + 92) = -1;
  v27 = *(_QWORD *)(a1 + 144);
  if (v27)
  {
    while (*(_DWORD *)(v27 + 92) != v26)
    {
      v27 = *(_QWORD *)(v27 + 120);
      if (!v27)
        goto LABEL_38;
    }
    *(_DWORD *)(v27 + 92) = v25;
    *(_DWORD *)(v27 + 76) = v21;
  }
LABEL_38:
  *(_DWORD *)v8 = *(_DWORD *)v7;
  return result;
}

uint64_t ClipperLib::Clipper::AddEdgeToSEL(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 152);
  *(_QWORD *)(a2 + 144) = 0;
  if (v2)
    *(_QWORD *)(v2 + 144) = a2;
  *(_QWORD *)(result + 152) = a2;
  *(_QWORD *)(a2 + 136) = v2;
  return result;
}

__n128 ClipperLib::Clipper::CopyAELToSEL(ClipperLib::Clipper *this)
{
  unint64_t v1;
  __n128 result;

  v1 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 19) = v1;
  if (v1)
  {
    do
    {
      result = *(__n128 *)(v1 + 120);
      *(__n128 *)(v1 + 136) = result;
      v1 = result.n128_u64[0];
    }
    while (result.n128_u64[0]);
  }
  return result;
}

void ClipperLib::Clipper::AddGhostJoin(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v8 = (_QWORD *)operator new();
  v9 = v8;
  *v8 = a2;
  v8[1] = 0;
  v8[2] = a3;
  v8[3] = a4;
  v11 = (char *)a1[8];
  v10 = a1[9];
  v12 = v11;
  if ((unint64_t)v11 < v10)
  {
    *(_QWORD *)v11 = v8;
    v13 = (uint64_t)(v11 + 8);
    goto LABEL_23;
  }
  v14 = (char *)a1[7];
  v15 = (v11 - v14) >> 3;
  v16 = v15 + 1;
  if ((unint64_t)(v15 + 1) >> 61)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v17 = v10 - (_QWORD)v14;
  if (v17 >> 2 > v16)
    v16 = v17 >> 2;
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
    v18 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
  {
    if (v18 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v19 = (char *)operator new(8 * v18);
    v20 = &v19[8 * v15];
    v21 = &v19[8 * v18];
    *(_QWORD *)v20 = v9;
    v13 = (uint64_t)(v20 + 8);
    v22 = (char *)(v11 - v14);
    if (v11 == v14)
      goto LABEL_21;
    goto LABEL_14;
  }
  v19 = 0;
  v20 = (char *)(8 * v15);
  v21 = 0;
  *(_QWORD *)(8 * v15) = v9;
  v13 = 8 * v15 + 8;
  v22 = (char *)(v11 - v14);
  if (v11 != v14)
  {
LABEL_14:
    v23 = (unint64_t)(v22 - 8);
    if (v23 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v14 - v19) < 0x20)
      goto LABEL_28;
    v24 = (v23 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v12 = &v11[-v25];
    v20 -= v25;
    v26 = &v19[8 * v15 - 16];
    v27 = (__int128 *)(v11 - 16);
    v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = *v27;
      *((_OWORD *)v26 - 1) = *(v27 - 1);
      *(_OWORD *)v26 = v29;
      v26 -= 32;
      v27 -= 2;
      v28 -= 4;
    }
    while (v28);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v30 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *((_QWORD *)v20 - 1) = v30;
        v20 -= 8;
      }
      while (v12 != v14);
    }
    v12 = (char *)a1[7];
  }
LABEL_21:
  a1[7] = v20;
  a1[8] = v13;
  a1[9] = v21;
  if (v12)
    operator delete(v12);
LABEL_23:
  a1[8] = v13;
}

_QWORD *ClipperLib::Clipper::InsertEdgeIntoAEL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;

  v5 = *(_QWORD *)(a1 + 144);
  result = (_QWORD *)(a1 + 144);
  v4 = v5;
  if (!v5)
  {
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *result = a2;
    return result;
  }
  if (a3)
  {
    v6 = *(_QWORD *)(a3 + 120);
    if (v6)
      goto LABEL_4;
    goto LABEL_31;
  }
  v16 = *(_QWORD *)(a2 + 16);
  v17 = *(_QWORD *)(v4 + 16);
  if (v16 != v17)
  {
    if (v16 >= v17)
      goto LABEL_28;
    goto LABEL_36;
  }
  v18 = *(_QWORD *)(a2 + 40);
  v19 = *(_QWORD *)(v4 + 40);
  v20 = v18 == v19;
  if (v18 > v19)
  {
    v21 = *(double *)(v4 + 64) * (double)(v18 - *(_QWORD *)(v4 + 8));
    v22 = 0.5;
    if (v21 < 0.0)
      v22 = -0.5;
    if (*(_QWORD *)(a2 + 32) >= *(_QWORD *)v4 + (uint64_t)(v22 + v21))
      goto LABEL_28;
LABEL_36:
    *(_QWORD *)(a2 + 120) = v4;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(v4 + 128) = a2;
    *result = a2;
    return result;
  }
  v24 = *(_QWORD *)(v4 + 32);
  if (v20)
  {
    if (v24 <= *(_QWORD *)(a2 + 32))
      goto LABEL_28;
    goto LABEL_36;
  }
  v25 = *(double *)(a2 + 64) * (double)(v19 - *(_QWORD *)(a2 + 8));
  v26 = 0.5;
  if (v25 < 0.0)
    v26 = -0.5;
  if (v24 > *(_QWORD *)a2 + (uint64_t)(v26 + v25))
    goto LABEL_36;
LABEL_28:
  a3 = v4;
  v6 = *(_QWORD *)(v4 + 120);
  if (v6)
  {
LABEL_4:
    v7 = *(_QWORD *)(a2 + 16);
    v8 = a3;
    do
    {
      a3 = v8;
      v8 = v6;
      v9 = *(_QWORD *)(v6 + 16);
      if (v7 == v9)
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(_QWORD *)(v8 + 40);
        if (v10 <= v11)
        {
          if (v10 == v11)
          {
            if (*(_QWORD *)(v8 + 32) > *(_QWORD *)(a2 + 32))
              goto LABEL_32;
          }
          else
          {
            v14 = *(double *)(a2 + 64) * (double)(v11 - *(_QWORD *)(a2 + 8));
            if (v14 >= 0.0)
              v15 = 0.5;
            else
              v15 = -0.5;
            if (*(_QWORD *)(v8 + 32) > *(_QWORD *)a2 + (uint64_t)(v15 + v14))
              goto LABEL_32;
          }
        }
        else
        {
          v12 = *(double *)(v8 + 64) * (double)(v10 - *(_QWORD *)(v8 + 8));
          if (v12 >= 0.0)
            v13 = 0.5;
          else
            v13 = -0.5;
          if (*(_QWORD *)(a2 + 32) < *(_QWORD *)v8 + (uint64_t)(v13 + v12))
            goto LABEL_32;
        }
      }
      else if (v7 < v9)
      {
        goto LABEL_32;
      }
      v6 = *(_QWORD *)(v8 + 120);
    }
    while (v6);
    a3 = v8;
  }
LABEL_31:
  v8 = 0;
LABEL_32:
  *(_QWORD *)(a2 + 120) = v8;
  result = (_QWORD *)(a3 + 120);
  v23 = *(_QWORD *)(a3 + 120);
  if (v23)
    *(_QWORD *)(v23 + 128) = a2;
  *(_QWORD *)(a2 + 128) = a3;
  *result = a2;
  return result;
}

_DWORD *ClipperLib::Clipper::IntersectEdges(_DWORD *this, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  _DWORD *v6;
  ClipperLib::Clipper *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _DWORD *v17;
  int v18;
  int *v19;
  int v20;
  int *v21;
  int *v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v6 = a2;
  v7 = (ClipperLib::Clipper *)this;
  v8 = a2[23];
  v9 = a3[23];
  v10 = a2[18];
  v11 = a3[18];
  if (v10 != v11)
  {
    if (v11)
      v17 = this + 41;
    else
      v17 = this + 42;
    if (*v17)
    {
      a2[22] += a3[20];
      if (v10)
        v12 = this + 41;
      else
        v12 = this + 42;
      if (*v12)
      {
LABEL_19:
        v18 = a3[22] - a2[20];
LABEL_26:
        a3[22] = v18;
        goto LABEL_28;
      }
    }
    else
    {
      a2[22] = a2[22] == 0;
      if (v10)
        v12 = this + 41;
      else
        v12 = this + 42;
      if (*v12)
        goto LABEL_19;
    }
    v18 = a3[22] == 0;
    goto LABEL_26;
  }
  if (v10)
    v12 = this + 41;
  else
    v12 = this + 42;
  v13 = a2[21];
  if (*v12)
  {
    if (a3[20] + v13)
      v14 = a3[20] + v13;
    else
      v14 = -v13;
    a2[21] = v14;
    v15 = a3[21];
    v16 = v15 - a2[20];
    if (v16)
      a3[21] = v16;
    else
      a3[21] = -v15;
  }
  else
  {
    a2[21] = a3[21];
    a3[21] = v13;
  }
LABEL_28:
  if (v10)
    v19 = this + 42;
  else
    v19 = this + 41;
  v20 = *v12;
  if (v11)
    v21 = this + 41;
  else
    v21 = this + 42;
  if (v11)
    v22 = this + 42;
  else
    v22 = this + 41;
  v23 = *v21;
  if (v20 == 3)
  {
    v24 = -(uint64_t)(int)a2[21];
    if (v23 == 3)
      goto LABEL_49;
  }
  else if (v20 == 2)
  {
    v24 = (int)a2[21];
    if (v23 == 3)
      goto LABEL_49;
  }
  else
  {
    LODWORD(v24) = a2[21];
    if ((v24 & 0x80000000) == 0)
      v24 = v24;
    else
      v24 = -(int)v24;
    if (v23 == 3)
    {
LABEL_49:
      v25 = -(uint64_t)(int)a3[21];
      v26 = *v19;
      v27 = *v22;
      if (v8 < 0)
        goto LABEL_61;
LABEL_55:
      if (v9 < 0)
        goto LABEL_61;
      if (v24 <= 1 && v25 <= 1 && (v10 == v11 || this[26] == 3))
      {
        ClipperLib::Clipper::AddOutPt((ClipperLib::Clipper *)this, (uint64_t)a2, a4);
        goto LABEL_70;
      }
      this = (_DWORD *)ClipperLib::Clipper::AddOutPt((ClipperLib::Clipper *)this, (uint64_t)a2, a4);
      if (a3[20])
      {
        v28 = v6[23];
        v29 = a3[23];
        v30 = v28 < v29;
        if (v28 == v29)
        {
LABEL_66:
          v6[23] = -1;
          a3[23] = -1;
          return this;
        }
      }
      else
      {
        this = (_DWORD *)ClipperLib::Clipper::AddOutPt(v7, (uint64_t)a3, a4);
        v33 = v6[23];
        v34 = a3[23];
        v30 = v33 < v34;
        if (v33 == v34)
          goto LABEL_66;
      }
      if (v30)
      {
        v35 = (uint64_t)v6;
        v36 = (uint64_t)a3;
      }
      else
      {
        v35 = (uint64_t)a3;
        v36 = (uint64_t)v6;
      }
      return (_DWORD *)ClipperLib::Clipper::AppendPolygon((uint64_t)v7, v35, v36);
    }
  }
  if (v23 == 2)
  {
    v25 = (int)a3[21];
    v26 = *v19;
    v27 = *v22;
    if (v8 < 0)
      goto LABEL_61;
    goto LABEL_55;
  }
  LODWORD(v25) = a3[21];
  if ((v25 & 0x80000000) == 0)
    v25 = v25;
  else
    v25 = -(int)v25;
  v26 = *v19;
  v27 = *v22;
  if ((v8 & 0x80000000) == 0)
    goto LABEL_55;
LABEL_61:
  if (v8 < 0)
  {
    if (v9 < 0)
    {
      if (v24 <= 1 && v25 <= 1)
      {
        if (v26 == 3)
        {
          v37 = -(uint64_t)(int)a2[22];
        }
        else if (v26 == 2)
        {
          v37 = (int)a2[22];
        }
        else
        {
          LODWORD(v37) = a2[22];
          if ((int)v37 >= 0)
            v37 = v37;
          else
            v37 = -(int)v37;
        }
        if (v27 == 3)
        {
          v38 = -(uint64_t)(int)a3[22];
        }
        else if (v27 == 2)
        {
          v38 = (int)a3[22];
        }
        else
        {
          LODWORD(v38) = a3[22];
          if ((int)v38 >= 0)
            v38 = v38;
          else
            v38 = -(int)v38;
        }
        if (v10 == v11)
        {
          if (v24 == 1 && v25 == 1)
          {
            switch(this[26])
            {
              case 0:
                if (v37 >= 1 && v38 >= 1)
                  return (_DWORD *)ClipperLib::Clipper::AddLocalMinPoly((ClipperLib::Clipper *)this, (uint64_t)a2, (uint64_t)a3, a4);
                return this;
              case 1:
                goto LABEL_105;
              case 2:
                if (v10 == 1 && v37 >= 1 && v38 > 0)
                  return (_DWORD *)ClipperLib::Clipper::AddLocalMinPoly((ClipperLib::Clipper *)this, (uint64_t)a2, (uint64_t)a3, a4);
                if (v10)
                  return this;
LABEL_105:
                if (v37 <= 0 && v38 <= 0)
                  return (_DWORD *)ClipperLib::Clipper::AddLocalMinPoly((ClipperLib::Clipper *)this, (uint64_t)a2, (uint64_t)a3, a4);
                return this;
              case 3:
                return (_DWORD *)ClipperLib::Clipper::AddLocalMinPoly((ClipperLib::Clipper *)this, (uint64_t)a2, (uint64_t)a3, a4);
              default:
                return this;
            }
          }
          v39 = a2[19];
          a2[19] = a3[19];
          a3[19] = v39;
        }
        else
        {
          return (_DWORD *)ClipperLib::Clipper::AddLocalMinPoly((ClipperLib::Clipper *)this, (uint64_t)a2, (uint64_t)a3, a4);
        }
      }
      return this;
    }
    if (v24 > 1)
      return this;
LABEL_70:
    this = v7;
    a2 = a3;
LABEL_71:
    this = (_DWORD *)ClipperLib::Clipper::AddOutPt((ClipperLib::Clipper *)this, (uint64_t)a2, a4);
    v31 = v6[19];
    v6[19] = a3[19];
    a3[19] = v31;
    v32 = v6[23];
    v6[23] = a3[23];
    a3[23] = v32;
    return this;
  }
  if (v25 <= 1)
    goto LABEL_71;
  return this;
}

uint64_t ClipperLib::Clipper::DeleteFromAEL(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 120);
  v3 = *(_QWORD *)(a2 + 128);
  if (*(_OWORD *)(a2 + 120) == 0)
  {
    if (*(_QWORD *)(result + 144) != a2)
      return result;
  }
  else if (v3)
  {
    *(_QWORD *)(v3 + 120) = v2;
    if (!v2)
      goto LABEL_8;
    goto LABEL_7;
  }
  *(_QWORD *)(result + 144) = v2;
  if (v2)
LABEL_7:
    *(_QWORD *)(v2 + 128) = v3;
LABEL_8:
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  return result;
}

uint64_t ClipperLib::Clipper::DeleteFromSEL(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 136);
  v3 = *(_QWORD *)(a2 + 144);
  if (*(_OWORD *)(a2 + 136) == 0)
  {
    if (*(_QWORD *)(result + 152) != a2)
      return result;
  }
  else if (v3)
  {
    *(_QWORD *)(v3 + 136) = v2;
    if (!v2)
      goto LABEL_8;
    goto LABEL_7;
  }
  *(_QWORD *)(result + 152) = v2;
  if (v2)
LABEL_7:
    *(_QWORD *)(v2 + 144) = v3;
LABEL_8:
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  return result;
}

uint64_t ClipperLib::Clipper::SetHoleState(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 128);
  if (v3)
  {
    v4 = 0;
    do
    {
      v5 = *(unsigned int *)(v3 + 92);
      if ((v5 & 0x80000000) == 0)
      {
        if (*(_DWORD *)(v3 + 80))
        {
          v4 ^= 1u;
          if (!*(_QWORD *)(a3 + 8))
            *(_QWORD *)(a3 + 8) = *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * v5);
        }
      }
      v3 = *(_QWORD *)(v3 + 128);
    }
    while (v3);
    if ((v4 & 1) != 0)
      *(_BYTE *)(a3 + 4) = 1;
  }
  return result;
}

uint64_t ClipperLib::GetLowermostRec(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v3 = a1;
  v4 = *(_QWORD **)(a1 + 32);
  if (v4)
  {
    v5 = *(_QWORD **)(a2 + 32);
    if (!v5)
      goto LABEL_29;
    goto LABEL_3;
  }
  v9 = *(_QWORD **)(a1 + 24);
  v10 = (_QWORD *)v9[3];
  if (v10 == v9)
  {
LABEL_41:
    v4 = v9;
    *(_QWORD *)(a1 + 32) = v9;
    v5 = *(_QWORD **)(a2 + 32);
    if (!v5)
      goto LABEL_29;
    goto LABEL_3;
  }
  v11 = 0;
  do
  {
    v12 = v10[2];
    v13 = v9[2];
    if (v12 > v13)
    {
LABEL_7:
      v11 = 0;
      v9 = v10;
      goto LABEL_8;
    }
    if (v12 == v13)
    {
      v14 = v10[1];
      v15 = v9[1];
      if (v14 <= v15)
      {
        if (v14 < v15)
          goto LABEL_7;
        if ((_QWORD *)v10[3] != v9 && (_QWORD *)v10[4] != v9)
          v11 = v10;
      }
    }
LABEL_8:
    v10 = (_QWORD *)v10[3];
  }
  while (v10 != v9);
  if (!v11 || v11 == v9)
    goto LABEL_41;
  v4 = v9;
  do
  {
    if (!ClipperLib::FirstIsBottomPt(v9, v11))
      v4 = v11;
    do
      v11 = (_QWORD *)v11[3];
    while (v11[1] != v4[1] || v11[2] != v4[2]);
  }
  while (v11 != v9);
  *(_QWORD *)(v3 + 32) = v4;
  v5 = *(_QWORD **)(a2 + 32);
  if (v5)
  {
LABEL_3:
    v6 = v4[2];
    v7 = v5[2];
    v8 = v6 < v7;
    if (v6 <= v7)
      goto LABEL_57;
    return v3;
  }
LABEL_29:
  v17 = *(_QWORD **)(a2 + 24);
  v18 = (_QWORD *)v17[3];
  if (v18 == v17)
  {
LABEL_56:
    v5 = v17;
    *(_QWORD *)(a2 + 32) = v17;
    v4 = *(_QWORD **)(v3 + 32);
    v27 = v4[2];
    v28 = v17[2];
    v8 = v27 < v28;
    if (v27 <= v28)
      goto LABEL_57;
    return v3;
  }
  v19 = 0;
  while (2)
  {
    v20 = v18[2];
    v21 = v17[2];
    if (v20 > v21)
      goto LABEL_31;
    if (v20 != v21)
      goto LABEL_32;
    v22 = v18[1];
    v23 = v17[1];
    if (v22 > v23)
      goto LABEL_32;
    if (v22 < v23)
    {
LABEL_31:
      v19 = 0;
      v17 = v18;
      goto LABEL_32;
    }
    if ((_QWORD *)v18[3] != v17 && (_QWORD *)v18[4] != v17)
      v19 = v18;
LABEL_32:
    v18 = (_QWORD *)v18[3];
    if (v18 != v17)
      continue;
    break;
  }
  if (!v19 || v19 == v17)
    goto LABEL_56;
  v5 = v17;
  do
  {
    if (!ClipperLib::FirstIsBottomPt(v17, v19))
      v5 = v19;
    do
      v19 = (_QWORD *)v19[3];
    while (v19[1] != v5[1] || v19[2] != v5[2]);
  }
  while (v19 != v17);
  *(_QWORD *)(a2 + 32) = v5;
  v4 = *(_QWORD **)(v3 + 32);
  v25 = v4[2];
  v26 = v5[2];
  v8 = v25 < v26;
  if (v25 > v26)
    return v3;
LABEL_57:
  if (!v8)
  {
    v30 = v4[1];
    v31 = v5[1];
    if (v30 < v31)
      return v3;
    if (v30 <= v31 && (_QWORD *)v4[3] != v4)
    {
      if ((_QWORD *)v5[3] != v5 && !ClipperLib::FirstIsBottomPt(v4, v5))
        return a2;
      return v3;
    }
  }
  return a2;
}

BOOL ClipperLib::Param1RightOfParam2(uint64_t a1, uint64_t a2)
{
  do
    a1 = *(_QWORD *)(a1 + 8);
  while (a1 != a2 && a1 != 0);
  return a1 == a2;
}

int *ClipperLib::Clipper::GetOutRec(ClipperLib::Clipper *this, int a2)
{
  uint64_t v2;
  int *v3;
  int *result;

  v2 = *((_QWORD *)this + 1);
  v3 = *(int **)(v2 + 8 * a2);
  do
  {
    result = v3;
    v3 = *(int **)(v2 + 8 * *v3);
  }
  while (result != v3);
  return result;
}

_DWORD *ClipperLib::Clipper::CreateOutRec(ClipperLib::Clipper *this)
{
  uint64_t v2;
  _DWORD *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v2 = operator new();
  v3 = (_DWORD *)v2;
  *(_WORD *)(v2 + 4) = 0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *v5 = v2;
    v7 = (uint64_t)(v5 + 1);
    goto LABEL_23;
  }
  v8 = (char *)*((_QWORD *)this + 1);
  v9 = ((char *)v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v3;
    v7 = (uint64_t)(v14 + 8);
    v16 = (char *)((char *)v5 - v8);
    if (v5 == (uint64_t *)v8)
      goto LABEL_21;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (char *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = v3;
  v7 = 8 * v9 + 8;
  v16 = (char *)((char *)v5 - v8);
  if (v5 != (uint64_t *)v8)
  {
LABEL_14:
    v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_28;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[v19 / 0xFFFFFFFFFFFFFFF8];
    v14 -= v19;
    v20 = &v13[8 * v9 - 16];
    v21 = v5 - 2;
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *(_OWORD *)v21;
      *((_OWORD *)v20 - 1) = *((_OWORD *)v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 4;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v24 = *--v6;
        *((_QWORD *)v14 - 1) = v24;
        v14 -= 8;
      }
      while (v6 != (uint64_t *)v8);
    }
    v6 = (uint64_t *)*((_QWORD *)this + 1);
  }
LABEL_21:
  *((_QWORD *)this + 1) = v14;
  *((_QWORD *)this + 2) = v7;
  *((_QWORD *)this + 3) = v15;
  if (v6)
    operator delete(v6);
LABEL_23:
  *((_QWORD *)this + 2) = v7;
  *v3 = ((unint64_t)(v7 - *((_QWORD *)this + 1)) >> 3) - 1;
  return v3;
}

void ClipperLib::Clipper::ProcessHorizontal(ClipperLib::Clipper *this, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  _OWORD *v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  BOOL v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  ClipperLib::Clipper *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v103;
  char **v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;

  v3 = (uint64_t)a2;
  v5 = *a2;
  v6 = a2[4];
  v7 = *a2 < v6;
  v108 = a2;
  v8 = v7;
  if (v7)
    v9 = v5;
  else
    v9 = v6;
  if (v7)
    v10 = v6;
  else
    v10 = v5;
  v11 = a2;
  while (1)
  {
    v12 = (uint64_t)v11;
    v11 = (uint64_t *)v11[14];
    if (!v11)
      break;
    if (v11[7])
      goto LABEL_13;
  }
  v13 = *(_QWORD *)(v12 + 96);
  v15 = *(_QWORD *)(v12 + 32);
  v14 = *(_QWORD *)(v12 + 40);
  v16 = *(_QWORD *)(v13 + 32) == v15 && *(_QWORD *)(v13 + 40) == v14;
  if (v16 && !*(_QWORD *)(v13 + 112)
    || ((v13 = *(_QWORD *)(v12 + 104), *(_QWORD *)(v13 + 32) == v15) ? (v17 = *(_QWORD *)(v13 + 40) == v14) : (v17 = 0),
        v17 && !*(_QWORD *)(v13 + 112)))
  {
    if (*(_DWORD *)(v13 + 92) == -2 || *(_QWORD *)(v13 + 120) == *(_QWORD *)(v13 + 128) && *(_QWORD *)(v13 + 56))
    {
LABEL_13:
      v105 = 0;
      goto LABEL_28;
    }
  }
  else
  {
    v13 = 0;
  }
  v105 = v13;
LABEL_28:
  v103 = (uint64_t *)((char *)this + 144);
  while (1)
  {
    if (v8)
      v19 = 120;
    else
      v19 = 128;
    v20 = *(_QWORD *)(v3 + v19);
    if (v20)
    {
      while (1)
      {
        v22 = v20;
        v23 = *(_QWORD *)(v20 + 16);
        if (v23 == *(_QWORD *)(v3 + 32))
        {
          v24 = *(_QWORD *)(v3 + 112);
          if (v24)
          {
            if (*(double *)(v20 + 64) < *(double *)(v24 + 64))
              goto LABEL_39;
          }
        }
        v25 = v8 ? 120 : 128;
        v20 = *(_QWORD *)(v20 + v25);
        if (!v8)
          break;
        if (v23 > v10)
          goto LABEL_39;
        if (v3 == v12 && v22 == v105)
          goto LABEL_87;
        v26 = *(_QWORD *)(v3 + 24);
        v106 = v23;
        v107 = v26;
        ClipperLib::Clipper::IntersectEdges(this, (_DWORD *)v3, (_DWORD *)v22, (uint64_t)&v106);
        v28 = *(_QWORD *)(v3 + 120);
        v27 = *(_QWORD *)(v3 + 128);
        if (v28 != v27)
          goto LABEL_61;
LABEL_44:
        if (!v20)
          goto LABEL_39;
      }
      if (v23 < v9)
        goto LABEL_39;
      if (v3 != v12 || v22 != v105)
      {
        v29 = *(_QWORD *)(v3 + 24);
        v106 = v23;
        v107 = v29;
        ClipperLib::Clipper::IntersectEdges(this, (_DWORD *)v22, (_DWORD *)v3, (uint64_t)&v106);
        v28 = *(_QWORD *)(v3 + 120);
        v27 = *(_QWORD *)(v3 + 128);
        if (v28 == v27)
          goto LABEL_44;
LABEL_61:
        v31 = *(_QWORD *)(v22 + 120);
        v30 = *(_QWORD *)(v22 + 128);
        if (v31 == v30)
          goto LABEL_44;
        if (v28 == v22)
        {
          if (v31)
          {
            *(_QWORD *)(v31 + 128) = v3;
            v27 = *(_QWORD *)(v3 + 128);
          }
          if (v27)
            *(_QWORD *)(v27 + 120) = v22;
          *(_QWORD *)(v22 + 120) = v3;
          *(_QWORD *)(v22 + 128) = v27;
          *(_QWORD *)(v3 + 120) = v31;
          *(_QWORD *)(v3 + 128) = v22;
          v32 = v22;
          if (*(_QWORD *)(v22 + 128))
            goto LABEL_44;
          goto LABEL_43;
        }
        if (v31 == v3)
        {
          if (v28)
          {
            *(_QWORD *)(v28 + 128) = v22;
            v30 = *(_QWORD *)(v22 + 128);
          }
          if (v30)
            *(_QWORD *)(v30 + 120) = v3;
          *(_QWORD *)(v3 + 120) = v22;
          *(_QWORD *)(v3 + 128) = v30;
          v27 = v3;
          *(_QWORD *)(v22 + 120) = v28;
          *(_QWORD *)(v22 + 128) = v3;
          v32 = v3;
          if (!*(_QWORD *)(v3 + 128))
            goto LABEL_43;
        }
        else
        {
          *(_QWORD *)(v3 + 120) = v31;
          if (v31)
          {
            *(_QWORD *)(v31 + 128) = v3;
            v30 = *(_QWORD *)(v22 + 128);
          }
          *(_QWORD *)(v3 + 128) = v30;
          if (v30)
            *(_QWORD *)(v30 + 120) = v3;
          *(_QWORD *)(v22 + 120) = v28;
          if (v28)
            *(_QWORD *)(v28 + 128) = v22;
          *(_QWORD *)(v22 + 128) = v27;
          if (v27)
            *(_QWORD *)(v27 + 120) = v22;
          v32 = v3;
          if (!*(_QWORD *)(v3 + 128))
          {
LABEL_43:
            *v103 = v32;
            goto LABEL_44;
          }
        }
        v32 = v22;
        if (v27)
          goto LABEL_44;
        goto LABEL_43;
      }
LABEL_87:
      if ((*(_DWORD *)(v12 + 92) & 0x80000000) != 0)
      {
        v75 = v105;
        v80 = *(_QWORD *)(v3 + 120);
        v81 = *(_QWORD *)(v3 + 128);
        v79 = (_QWORD *)(v3 + 120);
        v82 = v103;
        if (*(_OWORD *)(v3 + 120) == 0)
          goto LABEL_147;
        goto LABEL_154;
      }
      v33 = ClipperLib::Clipper::AddOutPt(this, v12, v12 + 32);
      v34 = (uint64_t *)*((_QWORD *)this + 19);
      if (!v34)
        goto LABEL_144;
      v104 = (char **)((char *)this + 32);
      while (1)
      {
        v36 = *((unsigned int *)v34 + 23);
        if ((v36 & 0x80000000) != 0)
          goto LABEL_92;
        v37 = *v108;
        v38 = v108[4];
        v39 = *v34;
        v40 = v34[4];
        if (*v108 >= v38)
          v41 = v108[4];
        else
          v41 = *v108;
        if (*v108 <= v38)
          v37 = v108[4];
        if (v39 >= v40)
          v42 = v34[4];
        else
          v42 = *v34;
        if (v39 > v40)
          v40 = *v34;
        if (v41 >= v40 || v42 >= v37)
          goto LABEL_92;
        v44 = *((_DWORD *)v34 + 19);
        v45 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v36);
        v46 = *(_QWORD **)(v45 + 24);
        if (v44 == 1)
        {
          if (v39 == v46[1] && v34[1] == v46[2])
          {
            v48 = *(_QWORD *)(v45 + 24);
            goto LABEL_122;
          }
        }
        else
        {
          v48 = v46[4];
          if (v39 == *(_QWORD *)(v48 + 8) && v34[1] == *(_QWORD *)(v48 + 16))
            goto LABEL_122;
        }
        v50 = operator new();
        v48 = v50;
        *(_DWORD *)v50 = *(_DWORD *)v45;
        *(_OWORD *)(v50 + 8) = *(_OWORD *)v34;
        *(_QWORD *)(v50 + 24) = v46;
        v51 = v46[4];
        *(_QWORD *)(v50 + 32) = v51;
        *(_QWORD *)(v51 + 24) = v50;
        v46[4] = v50;
        if (v44 == 1)
          *(_QWORD *)(v45 + 24) = v50;
LABEL_122:
        v52 = v34[4];
        v53 = v34[5];
        v54 = (_QWORD *)operator new();
        v55 = v54;
        *v54 = v48;
        v54[1] = v33;
        v54[2] = v52;
        v54[3] = v53;
        v57 = (char *)*((_QWORD *)this + 5);
        v56 = *((_QWORD *)this + 6);
        if ((unint64_t)v57 >= v56)
        {
          v58 = *v104;
          v59 = v57 - *v104;
          v60 = v59 >> 3;
          v61 = (v59 >> 3) + 1;
          if (v61 >> 61)
            _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
          v62 = v56 - (_QWORD)v58;
          if (v62 >> 2 > v61)
            v61 = v62 >> 2;
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
            v63 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v63 = v61;
          if (v63)
          {
            if (v63 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v64 = operator new(8 * v63);
            v65 = &v64[8 * v60];
            *v65 = v55;
            v35 = (uint64_t)(v65 + 1);
            if (v57 == v58)
              goto LABEL_141;
LABEL_134:
            v66 = v57 - 8 - v58;
            if (v66 < 0x58)
              goto LABEL_212;
            if ((unint64_t)(v57 - &v64[v59]) < 0x20)
              goto LABEL_212;
            v67 = (v66 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v69 = &v57[-v68];
            v65 = (_QWORD *)((char *)v65 - v68);
            v70 = &v64[8 * v60 - 16];
            v71 = v57 - 16;
            v72 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v73 = *(_OWORD *)v71;
              *(v70 - 1) = *((_OWORD *)v71 - 1);
              *v70 = v73;
              v70 -= 2;
              v71 -= 32;
              v72 -= 4;
            }
            while (v72);
            v57 = v69;
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_212:
              do
              {
                v74 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *--v65 = v74;
              }
              while (v57 != v58);
            }
            v57 = *v104;
          }
          else
          {
            v64 = 0;
            v65 = (_QWORD *)(8 * v60);
            *(_QWORD *)(8 * v60) = v55;
            v35 = 8 * v60 + 8;
            if (v57 != v58)
              goto LABEL_134;
          }
LABEL_141:
          *((_QWORD *)this + 4) = v65;
          *((_QWORD *)this + 5) = v35;
          *((_QWORD *)this + 6) = &v64[8 * v63];
          if (v57)
            operator delete(v57);
          goto LABEL_91;
        }
        *(_QWORD *)v57 = v54;
        v35 = (uint64_t)(v57 + 8);
LABEL_91:
        *((_QWORD *)this + 5) = v35;
LABEL_92:
        v34 = (uint64_t *)v34[17];
        if (!v34)
        {
          v3 = (uint64_t)v108;
LABEL_144:
          ClipperLib::Clipper::AddGhostJoin(this, v33, *(_QWORD *)v3, *(_QWORD *)(v3 + 8));
          ClipperLib::Clipper::AddOutPt(this, v3, v3 + 32);
          v75 = v105;
          if (*(_DWORD *)(v105 + 80))
          {
            v76 = *(_DWORD *)(v3 + 92);
            v77 = *(_DWORD *)(v105 + 92);
            v78 = v76 < v77;
            if (v76 == v77)
              goto LABEL_146;
LABEL_162:
            if (v78)
            {
              ClipperLib::Clipper::AppendPolygon((uint64_t)this, v3, v105);
              v80 = *(_QWORD *)(v3 + 120);
              v81 = *(_QWORD *)(v3 + 128);
              v79 = (_QWORD *)(v3 + 120);
              v82 = v103;
              if (*(_OWORD *)(v3 + 120) == 0)
                goto LABEL_147;
            }
            else
            {
              ClipperLib::Clipper::AppendPolygon((uint64_t)this, v105, v3);
              v80 = *(_QWORD *)(v3 + 120);
              v81 = *(_QWORD *)(v3 + 128);
              v79 = (_QWORD *)(v3 + 120);
              v82 = v103;
              if (*(_OWORD *)(v3 + 120) == 0)
                goto LABEL_147;
            }
LABEL_154:
            v87 = (uint64_t *)(v81 + 120);
            if (!v81)
              v87 = v82;
            *v87 = v80;
            if (v80)
              *(_QWORD *)(v80 + 128) = v81;
            *v79 = 0;
            v79[1] = 0;
            v84 = *(_QWORD *)(v75 + 120);
            v85 = *(_QWORD *)(v75 + 128);
            v83 = (_QWORD *)(v75 + 120);
            if (*(_OWORD *)(v75 + 120) == 0)
            {
LABEL_159:
              if (*v82 == v75)
              {
                *v82 = v84;
                goto LABEL_196;
              }
              return;
            }
          }
          else
          {
            ClipperLib::Clipper::AddOutPt(this, v105, v3 + 32);
            v88 = *(_DWORD *)(v3 + 92);
            v89 = *(_DWORD *)(v105 + 92);
            v78 = v88 < v89;
            if (v88 != v89)
              goto LABEL_162;
LABEL_146:
            *(_DWORD *)(v3 + 92) = -1;
            *(_DWORD *)(v105 + 92) = -1;
            v80 = *(_QWORD *)(v3 + 120);
            v81 = *(_QWORD *)(v3 + 128);
            v79 = (_QWORD *)(v3 + 120);
            v82 = v103;
            if (*(_OWORD *)(v3 + 120) != 0)
              goto LABEL_154;
LABEL_147:
            if (*v82 == v3)
            {
              *v82 = v80;
              *v79 = 0;
              v79[1] = 0;
              v84 = *(_QWORD *)(v75 + 120);
              v85 = *(_QWORD *)(v75 + 128);
              v83 = (_QWORD *)(v75 + 120);
              if (*(_OWORD *)(v75 + 120) == 0)
                goto LABEL_159;
            }
            else
            {
              v84 = *(_QWORD *)(v75 + 120);
              v85 = *(_QWORD *)(v75 + 128);
              v83 = (_QWORD *)(v75 + 120);
              if (*(_OWORD *)(v75 + 120) == 0)
                goto LABEL_159;
            }
          }
          v86 = (uint64_t *)(v85 + 120);
          if (!v85)
            v86 = v82;
          *v86 = v84;
          if (v84)
            *(_QWORD *)(v84 + 128) = v85;
LABEL_196:
          *v83 = 0;
          v83[1] = 0;
          return;
        }
      }
    }
LABEL_39:
    v21 = *(_QWORD *)(v3 + 112);
    if (!v21)
    {
      if ((*(_DWORD *)(v3 + 92) & 0x80000000) == 0)
        ClipperLib::Clipper::AddOutPt(this, v3, v3 + 32);
      v90 = *(_QWORD *)(v3 + 120);
      v91 = *(_QWORD *)(v3 + 128);
      if (*(_OWORD *)(v3 + 120) == 0)
      {
        if (*v103 != v3)
          return;
        *v103 = v90;
      }
      else
      {
        v92 = (uint64_t *)(v91 + 120);
        if (!v91)
          v92 = v103;
        *v92 = v90;
        if (v90)
          *(_QWORD *)(v90 + 128) = v91;
      }
      v83 = (_QWORD *)(v3 + 120);
      goto LABEL_196;
    }
    if (*(_QWORD *)(v21 + 56))
      break;
    ClipperLib::Clipper::UpdateEdgeIntoAEL((uint64_t)this, (uint64_t *)&v108);
    v3 = (uint64_t)v108;
    if ((*((_DWORD *)v108 + 23) & 0x80000000) == 0)
      ClipperLib::Clipper::AddOutPt(this, (uint64_t)v108, (uint64_t)v108);
    v18 = *(_QWORD *)(v3 + 32);
    v8 = *(_QWORD *)v3 < v18;
    if (*(_QWORD *)v3 >= v18)
      v9 = *(_QWORD *)(v3 + 32);
    else
      v9 = *(_QWORD *)v3;
    if (*(_QWORD *)v3 <= v18)
      v10 = *(_QWORD *)(v3 + 32);
    else
      v10 = *(_QWORD *)v3;
  }
  if ((*(_DWORD *)(v3 + 92) & 0x80000000) != 0)
  {
    ClipperLib::Clipper::UpdateEdgeIntoAEL((uint64_t)this, (uint64_t *)&v108);
    return;
  }
  v93 = ClipperLib::Clipper::AddOutPt(this, v3, v3 + 32);
  if (a3)
    ClipperLib::Clipper::AddGhostJoin(this, v93, *(_QWORD *)v3, *(_QWORD *)(v3 + 8));
  ClipperLib::Clipper::UpdateEdgeIntoAEL((uint64_t)this, (uint64_t *)&v108);
  v94 = v108;
  if (*((_DWORD *)v108 + 20))
  {
    v95 = v108[15];
    v96 = v108[16];
    if (v96
      && *(_QWORD *)(v96 + 16) == *v108
      && (v97 = *(_QWORD *)(v96 + 24), v97 == v108[1])
      && *(_DWORD *)(v96 + 80)
      && (*(_DWORD *)(v96 + 92) & 0x80000000) == 0
      && v97 > *(_QWORD *)(v96 + 40)
      && ClipperLib::SlopesEqual((uint64_t)v108, v108[16], *((unsigned __int8 *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40)))
    {
      v98 = this;
      v99 = v96;
    }
    else
    {
      if (!v95)
        return;
      if (*(_QWORD *)(v95 + 16) != *v94)
        return;
      v100 = *(_QWORD *)(v95 + 24);
      if (v100 != v94[1]
        || !*(_DWORD *)(v95 + 80)
        || (*(_DWORD *)(v95 + 92) & 0x80000000) != 0
        || v100 <= *(_QWORD *)(v95 + 40)
        || !ClipperLib::SlopesEqual((uint64_t)v94, v95, *((unsigned __int8 *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40)))
      {
        return;
      }
      v98 = this;
      v99 = v95;
    }
    v101 = ClipperLib::Clipper::AddOutPt(v98, v99, (uint64_t)v94);
    ClipperLib::Clipper::AddJoin(this, v93, v101, v94[4], v94[5]);
  }
}

uint64_t ClipperLib::GetMaximaPair(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;

  result = a1[12];
  v4 = a1[4];
  v3 = a1[5];
  v5 = *(_QWORD *)(result + 32) == v4 && *(_QWORD *)(result + 40) == v3;
  if (!v5 || *(_QWORD *)(result + 112))
  {
    result = a1[13];
    v6 = *(_QWORD *)(result + 32) == v4 && *(_QWORD *)(result + 40) == v3;
    if (!v6 || *(_QWORD *)(result + 112))
      return 0;
  }
  if (*(_DWORD *)(result + 92) == -2
    || *(_QWORD *)(result + 120) == *(_QWORD *)(result + 128) && *(_QWORD *)(result + 56))
  {
    return 0;
  }
  return result;
}

uint64_t ClipperLib::Clipper::SwapPositionsInAEL(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 120);
  v3 = *(_QWORD *)(a2 + 128);
  if (v4 != v3)
  {
    v6 = *(_QWORD *)(a3 + 120);
    v5 = *(_QWORD *)(a3 + 128);
    if (v6 != v5)
    {
      if (v4 != a3)
      {
        if (v6 == a2)
        {
          if (v4)
          {
            *(_QWORD *)(v4 + 128) = a3;
            v5 = *(_QWORD *)(a3 + 128);
          }
          if (v5)
            *(_QWORD *)(v5 + 120) = a2;
          *(_QWORD *)(a2 + 120) = a3;
          *(_QWORD *)(a2 + 128) = v5;
          v3 = a2;
          *(_QWORD *)(a3 + 120) = v4;
          *(_QWORD *)(a3 + 128) = a2;
          if (!*(_QWORD *)(a2 + 128))
            goto LABEL_27;
        }
        else
        {
          *(_QWORD *)(a2 + 120) = v6;
          if (v6)
          {
            *(_QWORD *)(v6 + 128) = a2;
            v5 = *(_QWORD *)(a3 + 128);
          }
          *(_QWORD *)(a2 + 128) = v5;
          if (v5)
            *(_QWORD *)(v5 + 120) = a2;
          *(_QWORD *)(a3 + 120) = v4;
          if (v4)
            *(_QWORD *)(v4 + 128) = a3;
          *(_QWORD *)(a3 + 128) = v3;
          if (v3)
            *(_QWORD *)(v3 + 120) = a3;
          if (!*(_QWORD *)(a2 + 128))
            goto LABEL_27;
        }
        a2 = a3;
        if (v3)
          return result;
LABEL_27:
        *(_QWORD *)(result + 144) = a2;
        return result;
      }
      if (v6)
      {
        *(_QWORD *)(v6 + 128) = a2;
        v3 = *(_QWORD *)(a2 + 128);
      }
      if (v3)
        *(_QWORD *)(v3 + 120) = a3;
      *(_QWORD *)(a3 + 120) = a2;
      *(_QWORD *)(a3 + 128) = v3;
      *(_QWORD *)(a2 + 120) = v6;
      *(_QWORD *)(a2 + 128) = a3;
      a2 = a3;
      if (!*(_QWORD *)(a3 + 128))
        goto LABEL_27;
    }
  }
  return result;
}

uint64_t ClipperLib::Clipper::SwapPositionsInSEL(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 136);
  if (v3 || *(_QWORD *)(a2 + 144))
  {
    v4 = *(_QWORD *)(a3 + 136);
    if (v4)
    {
      if (v3 != a3)
      {
        if (v4 == a2)
        {
          if (v3)
            *(_QWORD *)(v3 + 144) = a3;
          v9 = *(_QWORD *)(a3 + 144);
          if (v9)
            *(_QWORD *)(v9 + 136) = a2;
          *(_QWORD *)(a2 + 136) = a3;
          *(_QWORD *)(a2 + 144) = v9;
          *(_QWORD *)(a3 + 136) = v3;
          *(_QWORD *)(a3 + 144) = a2;
          if (!*(_QWORD *)(a2 + 144))
            goto LABEL_29;
          goto LABEL_22;
        }
        v5 = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(v4 + 144) = a2;
        v6 = (_QWORD *)(a3 + 144);
        v7 = *(_QWORD *)(a3 + 144);
        *(_QWORD *)(a2 + 136) = v4;
        *(_QWORD *)(a2 + 144) = v7;
        if (!v7)
          goto LABEL_12;
        goto LABEL_11;
      }
      *(_QWORD *)(v4 + 144) = a2;
    }
    else
    {
      v6 = (_QWORD *)(a3 + 144);
      v7 = *(_QWORD *)(a3 + 144);
      if (!v7)
        return result;
      if (v3 != a3)
      {
        v5 = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a2 + 136) = 0;
        *(_QWORD *)(a2 + 144) = v7;
LABEL_11:
        *(_QWORD *)(v7 + 136) = a2;
LABEL_12:
        *(_QWORD *)(a3 + 136) = v3;
        if (v3)
          *(_QWORD *)(v3 + 144) = a3;
        *v6 = v5;
        if (v5)
        {
          *(_QWORD *)(v5 + 136) = a3;
          if (!*(_QWORD *)(a2 + 144))
            goto LABEL_29;
LABEL_22:
          a2 = a3;
          if (*(_QWORD *)(a3 + 144))
            return result;
LABEL_29:
          *(_QWORD *)(result + 152) = a2;
          return result;
        }
LABEL_21:
        if (!*(_QWORD *)(a2 + 144))
          goto LABEL_29;
        goto LABEL_22;
      }
    }
    v8 = *(_QWORD *)(a2 + 144);
    if (v8)
      *(_QWORD *)(v8 + 136) = a3;
    *(_QWORD *)(a3 + 136) = a2;
    *(_QWORD *)(a3 + 144) = v8;
    *(_QWORD *)(a2 + 136) = v4;
    *(_QWORD *)(a2 + 144) = a3;
    goto LABEL_21;
  }
  return result;
}

uint64_t ClipperLib::GetNextInAEL(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = 128;
  if (a2 == 1)
    v2 = 120;
  return *(_QWORD *)(a1 + v2);
}

uint64_t *ClipperLib::GetHorzDirection(uint64_t *result, int *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  v4 = *result;
  v5 = result[4];
  v6 = *result < v5;
  if (*result >= v5)
    v4 = result[4];
  *a3 = v4;
  if (v6)
    v7 = result + 4;
  else
    v7 = result;
  v8 = *v7;
  v9 = v6;
  *a4 = v8;
  *a2 = v9;
  return result;
}

void ClipperLib::Clipper::UpdateEdgeIntoAEL(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _OWORD *v8;
  ClipperLib::clipperException *exception;
  uint64_t v10;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 112);
  if (!v3)
  {
    exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
    ClipperLib::clipperException::clipperException(exception, "UpdateEdgeIntoAEL: invalid call");
  }
  *(_DWORD *)(v3 + 92) = *(_DWORD *)(v2 + 92);
  v6 = v2 + 120;
  v5 = *(_QWORD *)(v2 + 120);
  v4 = *(_QWORD *)(v6 + 8);
  v7 = (_QWORD *)(a1 + 144);
  if (v4)
    v7 = (_QWORD *)(v4 + 120);
  *v7 = v3;
  if (v5)
    *(_QWORD *)(v5 + 128) = *(_QWORD *)(*a2 + 112);
  v8 = *(_OWORD **)(*a2 + 112);
  *(_OWORD *)((char *)v8 + 76) = *(_OWORD *)(*a2 + 76);
  *a2 = (uint64_t)v8;
  v8[1] = *v8;
  *(_QWORD *)(*a2 + 128) = v4;
  *(_QWORD *)(*a2 + 120) = v5;
  if (*(_QWORD *)(*a2 + 56))
  {
    v10 = *(_QWORD *)(*a2 + 40);
    std::priority_queue<long long>::push(a1 + 112, &v10);
  }
}

void sub_227B984B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ClipperLib::Clipper::BuildIntersectList(ClipperLib::Clipper *this, uint64_t a2)
{
  uint64_t v2;
  double v4;
  double v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _OWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  unint64_t v43;
  __int128 v44;

  v2 = *((_QWORD *)this + 18);
  if (!v2)
    return;
  *((_QWORD *)this + 19) = v2;
  do
  {
    while (1)
    {
      v6 = *(_OWORD *)(v2 + 120);
      *(_OWORD *)(v2 + 136) = v6;
      if (*(_QWORD *)(v2 + 40) != a2)
        break;
      *(_QWORD *)(v2 + 16) = *(_QWORD *)(v2 + 32);
      v2 = v6;
      if (!(_QWORD)v6)
        goto LABEL_9;
    }
    v4 = *(double *)(v2 + 64) * (double)(a2 - *(_QWORD *)(v2 + 8));
    if (v4 >= 0.0)
      v5 = 0.5;
    else
      v5 = -0.5;
    *(_QWORD *)(v2 + 16) = *(_QWORD *)v2 + (uint64_t)(v5 + v4);
    v2 = v6;
  }
  while ((_QWORD)v6);
LABEL_9:
  v42 = (uint64_t **)((char *)this + 80);
LABEL_10:
  v7 = (_QWORD *)*((_QWORD *)this + 19);
  v9 = v7 + 17;
  v8 = (_QWORD *)v7[17];
  if (v8)
  {
    v10 = 0;
    while (1)
    {
      while (1)
      {
        v44 = 0uLL;
        if (v7[2] > v8[2])
          break;
        v7 = v8;
        v9 = v8 + 17;
        v8 = (_QWORD *)v8[17];
        if (!v8)
          goto LABEL_65;
      }
      ClipperLib::IntersectPoint((uint64_t)v7, (uint64_t)v8, (uint64_t *)&v44);
      v11 = operator new();
      v12 = v11;
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = v8;
      *(_OWORD *)(v11 + 16) = v44;
      v14 = (uint64_t *)*((_QWORD *)this + 11);
      v13 = *((_QWORD *)this + 12);
      if ((unint64_t)v14 >= v13)
        break;
      *v14 = v11;
      v15 = (uint64_t)(v14 + 1);
LABEL_35:
      *((_QWORD *)this + 11) = v15;
      v32 = (_QWORD *)*v9;
      if (!*v9 && !v7[18])
        goto LABEL_57;
      v33 = (_QWORD *)v8[17];
      if (v33)
      {
        if (v32 == v8)
        {
          v33[18] = v7;
LABEL_52:
          v38 = v7[18];
          if (v38)
            *(_QWORD *)(v38 + 136) = v8;
          v8[17] = v7;
          v8[18] = v38;
          v7[18] = v8;
          *v9 = v33;
LABEL_55:
          v37 = v7;
          if (!v7[18])
            goto LABEL_64;
          goto LABEL_56;
        }
        if (v33 == v7)
        {
          if (v32)
            v32[18] = v8;
          v39 = v8[18];
          if (v39)
            *(_QWORD *)(v39 + 136) = v7;
          v7[18] = v39;
          *v9 = v8;
          v8[17] = v32;
          v8[18] = v7;
          v37 = v7;
          if (!v7[18])
            goto LABEL_64;
          goto LABEL_56;
        }
        v34 = v7[18];
        *v9 = v33;
        v33[18] = v7;
        v35 = v8 + 18;
        v36 = v8[18];
        v7[18] = v36;
        if (v36)
          goto LABEL_49;
        v8[17] = v32;
        if (v32)
          goto LABEL_42;
LABEL_43:
        *v35 = v34;
        if (!v34)
          goto LABEL_55;
        *(_QWORD *)(v34 + 136) = v8;
        v37 = v7;
        if (!v7[18])
          goto LABEL_64;
LABEL_56:
        v37 = v8;
        if (v8[18])
          goto LABEL_57;
LABEL_64:
        *((_QWORD *)this + 19) = v37;
        v10 = 1;
        v9 = v7 + 17;
        v8 = (_QWORD *)v7[17];
        if (!v8)
        {
LABEL_65:
          v40 = v7[18];
          if (!v40)
            goto LABEL_70;
          *(_QWORD *)(v40 + 136) = 0;
          if ((v10 & 1) == 0)
            goto LABEL_70;
          goto LABEL_10;
        }
      }
      else
      {
        v35 = v8 + 18;
        v36 = v8[18];
        if (v36)
        {
          if (v32 == v8)
            goto LABEL_52;
          v34 = v7[18];
          *v9 = 0;
          v7[18] = v36;
LABEL_49:
          *(_QWORD *)(v36 + 136) = v7;
          v8[17] = v32;
          if (!v32)
            goto LABEL_43;
LABEL_42:
          v32[18] = v8;
          goto LABEL_43;
        }
LABEL_57:
        v10 = 1;
        v9 = v7 + 17;
        v8 = (_QWORD *)v7[17];
        if (!v8)
          goto LABEL_65;
      }
    }
    v16 = *v42;
    v17 = (char *)v14 - (char *)*v42;
    v18 = v17 >> 3;
    v19 = (v17 >> 3) + 1;
    if (v19 >> 61)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v20 = v13 - (_QWORD)v16;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    v43 = v19;
    if (v19)
    {
      if (v19 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v21 = operator new(8 * v19);
      v22 = (uint64_t *)&v21[8 * v18];
      *v22 = v12;
      v15 = (uint64_t)(v22 + 1);
      if (v14 == v16)
        goto LABEL_33;
    }
    else
    {
      v21 = 0;
      v22 = (uint64_t *)(8 * v18);
      *(_QWORD *)(8 * v18) = v12;
      v15 = 8 * v18 + 8;
      if (v14 == v16)
      {
LABEL_33:
        *((_QWORD *)this + 10) = v22;
        *((_QWORD *)this + 11) = v15;
        *((_QWORD *)this + 12) = &v21[8 * v43];
        if (v14)
          operator delete(v14);
        goto LABEL_35;
      }
    }
    v23 = (char *)(v14 - 1) - (char *)v16;
    if (v23 < 0x58)
      goto LABEL_76;
    if ((unint64_t)((char *)v14 - &v21[v17]) < 0x20)
      goto LABEL_76;
    v24 = (v23 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v26 = &v14[v25 / 0xFFFFFFFFFFFFFFF8];
    v22 = (uint64_t *)((char *)v22 - v25);
    v27 = &v21[8 * v18 - 16];
    v28 = v14 - 2;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      *v27 = v30;
      v27 -= 2;
      v28 -= 4;
      v29 -= 4;
    }
    while (v29);
    v14 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_76:
      do
      {
        v31 = *--v14;
        *--v22 = v31;
      }
      while (v14 != v16);
    }
    v14 = *v42;
    goto LABEL_33;
  }
  v41 = v7[18];
  if (v41)
    *(_QWORD *)(v41 + 136) = 0;
LABEL_70:
  *((_QWORD *)this + 19) = 0;
}

BOOL ClipperLib::Clipper::FixupIntersectionOrder(ClipperLib::Clipper *this)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  int8x16_t *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  BOOL (*v27)(uint64_t, uint64_t);

  v2 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 19) = v2;
  if (v2)
  {
    do
    {
      v3 = *(_OWORD *)(v2 + 120);
      *(_OWORD *)(v2 + 136) = v3;
      v2 = v3;
    }
    while ((_QWORD)v3);
  }
  v4 = *((_QWORD *)this + 10);
  v5 = (int8x16_t *)*((_QWORD *)this + 11);
  v6 = 126 - 2 * __clz(((uint64_t)v5->i64 - v4) >> 3);
  v27 = ClipperLib::IntersectListSort;
  if (v5 == (int8x16_t *)v4)
    v7 = 0;
  else
    v7 = v6;
  v8 = 1;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **,false>(v4, v5, (unsigned int (**)(uint64_t))&v27, v7, 1);
  v9 = *((_QWORD *)this + 11) - *((_QWORD *)this + 10);
  if (v9)
  {
    v8 = 0;
    v10 = 0;
    v11 = v9 >> 3;
    if ((unint64_t)(v9 >> 3) <= 1)
      v12 = 1;
    else
      v12 = v9 >> 3;
    v13 = 1;
    do
    {
      if (v11 <= v13)
        v15 = v13;
      else
        v15 = v11;
      v16 = *((_QWORD *)this + 10);
      v17 = *(uint64_t **)(v16 + 8 * v10);
      v18 = *v17;
      v19 = v17[1];
      v14 = *(_QWORD *)(*v17 + 136);
      if (v14 != v19)
      {
        if (*(_QWORD *)(v18 + 144) == v19)
        {
          v14 = v17[1];
        }
        else
        {
          v20 = v13;
          v21 = v10;
          while (1)
          {
            if (v20 >= v11)
            {
              v21 = v15;
LABEL_24:
              if (v21 == v11)
                return v8;
              goto LABEL_27;
            }
            v22 = *(uint64_t **)(v16 + 8 * v20);
            v24 = *v22;
            v23 = v22[1];
            if (*(_QWORD *)(v24 + 136) == v23)
              break;
            ++v20;
            ++v21;
            if (*(_QWORD *)(v24 + 144) == v23)
              goto LABEL_24;
          }
          v21 = v20;
          if (v20 == v11)
            return v8;
LABEL_27:
          *(_QWORD *)(v16 + 8 * v10) = *(_QWORD *)(v16 + 8 * v21);
          *(_QWORD *)(v16 + 8 * v21) = v17;
          v25 = *(uint64_t **)(*((_QWORD *)this + 10) + 8 * v10);
          v18 = *v25;
          v14 = v25[1];
        }
      }
      ClipperLib::Clipper::SwapPositionsInSEL((uint64_t)this, v18, v14);
      v8 = ++v10 >= v11;
      ++v13;
    }
    while (v10 != v12);
  }
  return v8;
}

uint64_t ClipperLib::Clipper::ProcessIntersectList(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = this;
  v2 = *(_QWORD *)(this + 88);
  if (v2 != *(_QWORD *)(this + 80))
  {
    v3 = 0;
    v2 = *(_QWORD *)(this + 80);
    do
    {
      v4 = *(_QWORD **)(v2 + 8 * v3);
      ClipperLib::Clipper::IntersectEdges((_DWORD *)v1, (_DWORD *)*v4, (_DWORD *)v4[1], (uint64_t)(v4 + 2));
      v5 = (_DWORD *)*v4;
      v7 = *(_QWORD *)(*v4 + 120);
      v6 = *(_DWORD **)(*v4 + 128);
      if ((_DWORD *)v7 == v6)
        goto LABEL_4;
      v8 = v4[1];
      v10 = *(_QWORD *)(v8 + 120);
      v9 = *(_QWORD *)(v8 + 128);
      if (v10 == v9)
        goto LABEL_4;
      if (v7 == v8)
      {
        if (v10)
        {
          *(_QWORD *)(v10 + 128) = v5;
          v6 = (_DWORD *)*((_QWORD *)v5 + 16);
        }
        if (v6)
          *((_QWORD *)v6 + 15) = v8;
        *(_QWORD *)(v8 + 120) = v5;
        *(_QWORD *)(v8 + 128) = v6;
        *((_QWORD *)v5 + 15) = v10;
        *((_QWORD *)v5 + 16) = v8;
        v5 = (_DWORD *)v8;
        if (*(_QWORD *)(v8 + 128))
          goto LABEL_4;
      }
      else if ((_DWORD *)v10 == v5)
      {
        if (v7)
        {
          *(_QWORD *)(v7 + 128) = v8;
          v9 = *(_QWORD *)(v8 + 128);
        }
        if (v9)
          *(_QWORD *)(v9 + 120) = v5;
        *((_QWORD *)v5 + 15) = v8;
        *((_QWORD *)v5 + 16) = v9;
        v6 = v5;
        *(_QWORD *)(v8 + 120) = v7;
        *(_QWORD *)(v8 + 128) = v5;
        if (*((_QWORD *)v5 + 16))
        {
LABEL_18:
          v5 = (_DWORD *)v8;
          if (v6)
            goto LABEL_4;
        }
      }
      else
      {
        *((_QWORD *)v5 + 15) = v10;
        if (v10)
        {
          *(_QWORD *)(v10 + 128) = v5;
          v9 = *(_QWORD *)(v8 + 128);
        }
        *((_QWORD *)v5 + 16) = v9;
        if (v9)
          *(_QWORD *)(v9 + 120) = v5;
        *(_QWORD *)(v8 + 120) = v7;
        if (v7)
          *(_QWORD *)(v7 + 128) = v8;
        *(_QWORD *)(v8 + 128) = v6;
        if (v6)
          *((_QWORD *)v6 + 15) = v8;
        if (*((_QWORD *)v5 + 16))
          goto LABEL_18;
      }
      *(_QWORD *)(v1 + 144) = v5;
LABEL_4:
      this = MEMORY[0x22E2A50A0](v4, 0x1020C406C4767B9);
      ++v3;
      v2 = *(_QWORD *)(v1 + 80);
    }
    while (v3 < (*(_QWORD *)(v1 + 88) - v2) >> 3);
  }
  *(_QWORD *)(v1 + 88) = v2;
  return this;
}

uint64_t ClipperLib::Clipper::DisposeIntersectNodes(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = this;
  v3 = *(_QWORD *)(this + 80);
  v2 = *(_QWORD *)(this + 88);
  if (v2 == v3)
  {
    v3 = *(_QWORD *)(this + 88);
  }
  else
  {
    v4 = 0;
    do
    {
      this = *(_QWORD *)(v3 + 8 * v4);
      if (this)
      {
        this = MEMORY[0x22E2A50A0](this, 0x1020C406C4767B9);
        v3 = *(_QWORD *)(v1 + 80);
        v2 = *(_QWORD *)(v1 + 88);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  *(_QWORD *)(v1 + 88) = v3;
  return this;
}

BOOL ClipperLib::IntersectListSort(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24) < *(_QWORD *)(a1 + 24);
}

ClipperLib::Clipper *ClipperLib::Clipper::DoMaxima(ClipperLib::Clipper *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _BOOL4 v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  ClipperLib::clipperException *exception;

  v3 = (uint64_t)this;
  v5 = a2 + 32;
  v4 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 96);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(v6 + 32) == v4 && *(_QWORD *)(v6 + 40) == v7;
  if ((!v8 || *(_QWORD *)(v6 + 112))
    && ((v6 = *(_QWORD *)(a2 + 104), *(_QWORD *)(v6 + 32) == v4) ? (v9 = *(_QWORD *)(v6 + 40) == v7) : (v9 = 0),
        !v9 || *(_QWORD *)(v6 + 112))
    || *(_DWORD *)(v6 + 92) == -2
    || (v12 = (_QWORD *)(v6 + 120), *(_QWORD *)(v6 + 120) == *(_QWORD *)(v6 + 128)) && *(_QWORD *)(v6 + 56))
  {
    if ((*(_DWORD *)(a2 + 92) & 0x80000000) == 0)
      this = (ClipperLib::Clipper *)ClipperLib::Clipper::AddOutPt(this, a2, a2 + 32);
    v11 = *(_QWORD *)(a2 + 120);
    v10 = *(_QWORD *)(a2 + 128);
    v12 = (_QWORD *)(a2 + 120);
    if (*(_OWORD *)(a2 + 120) == 0)
    {
      if (*(_QWORD *)(v3 + 144) == a2)
        goto LABEL_93;
      return this;
    }
    goto LABEL_17;
  }
  v14 = (uint64_t *)(a2 + 120);
  v13 = *(_QWORD *)(a2 + 120);
  v15 = v13 != 0;
  if (v13 && v13 != v6)
  {
    while (1)
    {
      this = (ClipperLib::Clipper *)ClipperLib::Clipper::IntersectEdges((_DWORD *)v3, (_DWORD *)a2, (_DWORD *)v13, v5);
      v24 = *(_QWORD *)(a2 + 120);
      v23 = *(_QWORD *)(a2 + 128);
      if (v24 != v23)
      {
        v26 = *(_QWORD *)(v13 + 120);
        v25 = *(_QWORD *)(v13 + 128);
        if (v26 != v25)
          break;
      }
LABEL_34:
      v13 = *v14;
      v15 = *v14 != 0;
      if (*v14)
        v22 = v13 == v6;
      else
        v22 = 1;
      if (v22)
        goto LABEL_25;
    }
    if (v24 == v13)
    {
      if (v26)
      {
        *(_QWORD *)(v26 + 128) = a2;
        v23 = *(_QWORD *)(a2 + 128);
      }
      if (v23)
        *(_QWORD *)(v23 + 120) = v13;
      *(_QWORD *)(v13 + 120) = a2;
      *(_QWORD *)(v13 + 128) = v23;
      *(_QWORD *)(a2 + 120) = v26;
      *(_QWORD *)(a2 + 128) = v13;
      v27 = v13;
      if (*(_QWORD *)(v13 + 128))
        goto LABEL_34;
      goto LABEL_33;
    }
    if (v26 == a2)
    {
      if (v24)
      {
        *(_QWORD *)(v24 + 128) = v13;
        v25 = *(_QWORD *)(v13 + 128);
      }
      if (v25)
        *(_QWORD *)(v25 + 120) = a2;
      *(_QWORD *)(a2 + 120) = v13;
      *(_QWORD *)(a2 + 128) = v25;
      v23 = a2;
      *(_QWORD *)(v13 + 120) = v24;
      *(_QWORD *)(v13 + 128) = a2;
      v27 = a2;
      if (!*(_QWORD *)(a2 + 128))
        goto LABEL_33;
    }
    else
    {
      *v14 = v26;
      if (v26)
      {
        *(_QWORD *)(v26 + 128) = a2;
        v25 = *(_QWORD *)(v13 + 128);
      }
      *(_QWORD *)(a2 + 128) = v25;
      if (v25)
        *(_QWORD *)(v25 + 120) = a2;
      *(_QWORD *)(v13 + 120) = v24;
      if (v24)
        *(_QWORD *)(v24 + 128) = v13;
      *(_QWORD *)(v13 + 128) = v23;
      if (v23)
        *(_QWORD *)(v23 + 120) = v13;
      v27 = a2;
      if (!*(_QWORD *)(a2 + 128))
      {
LABEL_33:
        *(_QWORD *)(v3 + 144) = v27;
        goto LABEL_34;
      }
    }
    v27 = v13;
    if (v23)
      goto LABEL_34;
    goto LABEL_33;
  }
LABEL_25:
  v16 = *(_DWORD *)(a2 + 92);
  if (v16 == -1)
  {
    if (*(_DWORD *)(v6 + 92) != -1)
      goto LABEL_96;
    v28 = *(_QWORD *)(a2 + 128);
    if (v28)
      v29 = 1;
    else
      v29 = v15;
    if ((v29 & 1) != 0)
    {
      if (v28)
      {
        v30 = (uint64_t *)(v28 + 120);
LABEL_80:
        *v30 = v13;
        if (v15)
          *(_QWORD *)(v13 + 128) = v28;
        *v14 = 0;
        *(_QWORD *)(a2 + 128) = 0;
LABEL_83:
        v11 = *(_QWORD *)(v6 + 120);
        v10 = *(_QWORD *)(v6 + 128);
        if (*(_OWORD *)(v6 + 120) == 0)
          goto LABEL_92;
LABEL_17:
        if (v10)
        {
          *(_QWORD *)(v10 + 120) = v11;
          if (!v11)
            goto LABEL_95;
          goto LABEL_94;
        }
LABEL_93:
        *(_QWORD *)(v3 + 144) = v11;
        if (!v11)
        {
LABEL_95:
          *v12 = 0;
          v12[1] = 0;
          return this;
        }
LABEL_94:
        *(_QWORD *)(v11 + 128) = v10;
        goto LABEL_95;
      }
    }
    else if (*(_QWORD *)(v3 + 144) != a2)
    {
      goto LABEL_83;
    }
    v30 = (uint64_t *)(v3 + 144);
    goto LABEL_80;
  }
  if (v16 < 0 || (*(_DWORD *)(v6 + 92) & 0x80000000) != 0)
  {
LABEL_96:
    exception = (ClipperLib::clipperException *)__cxa_allocate_exception(0x20uLL);
    ClipperLib::clipperException::clipperException(exception, "DoMaxima error");
  }
  this = (ClipperLib::Clipper *)ClipperLib::Clipper::AddOutPt((ClipperLib::Clipper *)v3, a2, v5);
  if (*(_DWORD *)(v6 + 80))
  {
    v17 = *(_DWORD *)(a2 + 92);
    v18 = *(_DWORD *)(v6 + 92);
    v19 = v17 < v18;
    if (v17 == v18)
      goto LABEL_30;
  }
  else
  {
    this = (ClipperLib::Clipper *)ClipperLib::Clipper::AddOutPt((ClipperLib::Clipper *)v3, v6, v5);
    v31 = *(_DWORD *)(a2 + 92);
    v32 = *(_DWORD *)(v6 + 92);
    v19 = v31 < v32;
    if (v31 == v32)
    {
LABEL_30:
      *(_DWORD *)(a2 + 92) = -1;
      *(_DWORD *)(v6 + 92) = -1;
      v21 = *(_QWORD *)(a2 + 120);
      v20 = *(_QWORD *)(a2 + 128);
      if (*(_OWORD *)(a2 + 120) == 0)
        goto LABEL_31;
      goto LABEL_86;
    }
  }
  if (v19)
  {
    v33 = a2;
    v34 = v6;
  }
  else
  {
    v33 = v6;
    v34 = a2;
  }
  this = (ClipperLib::Clipper *)ClipperLib::Clipper::AppendPolygon(v3, v33, v34);
  v21 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  if (*(_OWORD *)(a2 + 120) == 0)
  {
LABEL_31:
    if (*(_QWORD *)(v3 + 144) == a2)
      goto LABEL_88;
    goto LABEL_83;
  }
LABEL_86:
  if (v20)
  {
    v35 = (_QWORD *)(v20 + 120);
    goto LABEL_89;
  }
LABEL_88:
  v35 = (_QWORD *)(v3 + 144);
LABEL_89:
  *v35 = v21;
  if (v21)
    *(_QWORD *)(v21 + 128) = v20;
  *v14 = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v11 = *(_QWORD *)(v6 + 120);
  v10 = *(_QWORD *)(v6 + 128);
  if (*(_OWORD *)(v6 + 120) != 0)
    goto LABEL_17;
LABEL_92:
  if (*(_QWORD *)(v3 + 144) == v6)
    goto LABEL_93;
  return this;
}

void sub_227B98F88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ClipperLib::PointCount(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 0;
  if (a1)
  {
    v2 = a1;
    do
    {
      v1 = (v1 + 1);
      v2 = *(_QWORD *)(v2 + 24);
    }
    while (v2 != a1);
  }
  return v1;
}

void std::vector<std::vector<ClipperLib::IntPoint>>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;

  v2 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v4 = *(char **)(a1 + 8);
    v5 = 24 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[v5];
    v8 = &v6[24 * ((v4 - v2) / 24)];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_13:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        v4 -= 24;
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v4 + 2);
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
      }
      while (v4 != v2);
      v11 = *(char **)a1;
      v2 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2 != v11)
      {
        v12 = v2;
        do
        {
          v14 = (void *)*((_QWORD *)v12 - 3);
          v12 -= 24;
          v13 = v14;
          if (v14)
          {
            *((_QWORD *)v2 - 2) = v13;
            operator delete(v13);
          }
          v2 = v12;
        }
        while (v12 != v11);
        v2 = v11;
      }
      if (v2)
        goto LABEL_13;
    }
  }
}

__n128 ClipperLib::SwapIntersectNodes(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;

  v3 = *a1;
  v2 = a1[1];
  *a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  a1[1] = (__int128)result;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v2;
  return result;
}

BOOL ClipperLib::GetOverlap(ClipperLib *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  ClipperLib *v7;
  uint64_t v8;
  uint64_t v10;
  ClipperLib *v11;
  ClipperLib *v12;
  uint64_t v13;
  uint64_t v14;
  ClipperLib *v15;

  if ((uint64_t)this >= a2)
  {
    if (a3 >= a4)
    {
      if (a2 <= a4)
        v14 = a4;
      else
        v14 = a2;
      *a5 = v14;
      if (a3 >= (uint64_t)this)
        v15 = this;
      else
        v15 = (ClipperLib *)a3;
      *a6 = (uint64_t)v15;
      return *a5 < (uint64_t)v15;
    }
    else
    {
      if (a2 <= a3)
        v10 = a3;
      else
        v10 = a2;
      *a5 = v10;
      if (a4 >= (uint64_t)this)
        v11 = this;
      else
        v11 = (ClipperLib *)a4;
      *a6 = (uint64_t)v11;
      return *a5 < (uint64_t)v11;
    }
  }
  else if (a3 >= a4)
  {
    if ((uint64_t)this <= a4)
      v12 = (ClipperLib *)a4;
    else
      v12 = this;
    *a5 = (uint64_t)v12;
    if (a3 >= a2)
      v13 = a2;
    else
      v13 = a3;
    *a6 = v13;
    return *a5 < v13;
  }
  else
  {
    if ((uint64_t)this <= a3)
      v7 = (ClipperLib *)a3;
    else
      v7 = this;
    *a5 = (uint64_t)v7;
    if (a4 >= a2)
      v8 = a2;
    else
      v8 = a4;
    *a6 = v8;
    return *a5 < v8;
  }
}

uint64_t ClipperLib::DupOutPt(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  result = operator new();
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_DWORD *)result = *(_DWORD *)a1;
  if (a2)
  {
    v6 = *(_QWORD *)(a1 + 24);
    v5 = (uint64_t *)(a1 + 24);
    *(_QWORD *)(result + 24) = v6;
    *(_QWORD *)(result + 32) = a1;
    *(_QWORD *)(v6 + 32) = result;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    v5 = (uint64_t *)(a1 + 32);
    *(_QWORD *)(result + 24) = a1;
    *(_QWORD *)(result + 32) = v7;
    *(_QWORD *)(v7 + 24) = result;
  }
  *v5 = result;
  return result;
}

uint64_t ClipperLib::JoinHorz(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  _OWORD *v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t *v39;
  _DWORD *v40;
  uint64_t *v41;
  _QWORD *v42;
  _OWORD *v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t *v47;
  _DWORD *v48;
  int v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t *v58;
  _QWORD *v59;
  _OWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t *v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  _QWORD *v71;
  uint64_t *v72;
  _QWORD *v73;
  _QWORD *v74;
  _OWORD *v76;
  _DWORD *v77;
  _DWORD *v78;
  _QWORD *v79;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;

  v7 = a1[1];
  v8 = *(_QWORD *)(a2 + 8);
  v9 = v7 <= v8;
  v10 = a3[1];
  v11 = *(_QWORD *)(a4 + 8);
  v12 = v10 <= v11;
  v13 = v9 ^ v12;
  if (v9 != v12)
  {
    v17 = a3;
    v83 = v9 ^ v12;
    v81 = *(_QWORD *)(a2 + 8);
    v82 = a1[1];
    if (v7 > v8)
    {
      do
      {
        v18 = a1;
        a1 = (_QWORD *)a1[3];
        v26 = a1[1];
      }
      while (v26 >= a5 && v26 <= v18[1] && a1[2] == a6);
      if ((a7 & 1) == 0 && v18[1] != a5)
        v18 = a1;
      v27 = operator new();
      v21 = (_DWORD *)v27;
      *(_OWORD *)(v27 + 8) = *(_OWORD *)(v18 + 1);
      *(_DWORD *)v27 = *(_DWORD *)v18;
      if (a7)
      {
        v28 = v18 + 3;
        v29 = (_QWORD *)v18[3];
        v30 = v29 + 4;
        v31 = v18;
      }
      else
      {
        v28 = v18 + 4;
        v31 = (_QWORD *)v18[4];
        v30 = v31 + 3;
        v29 = v18;
      }
      *(_QWORD *)(v27 + 24) = v29;
      v41 = (uint64_t *)(v27 + 24);
      *(_QWORD *)(v27 + 32) = v31;
      v42 = (_QWORD *)(v27 + 32);
      *v30 = v27;
      *v28 = v27;
      if (*(_QWORD *)(v27 + 8) != a5 || *(_QWORD *)(v27 + 16) != a6)
      {
        v44 = (_OWORD *)(v27 + 8);
        *(_QWORD *)(v27 + 8) = a5;
        *(_QWORD *)(v27 + 16) = a6;
        v45 = operator new();
        v37 = (_DWORD *)v45;
        *(_OWORD *)(v45 + 8) = *v44;
        *(_DWORD *)v45 = *v21;
        if (a7)
        {
          v46 = (_DWORD *)*v41;
          v47 = (uint64_t *)(*v41 + 32);
          v48 = v21;
        }
        else
        {
          v48 = (_DWORD *)*v42;
          v47 = (uint64_t *)(*v42 + 24);
          v46 = v21;
          v41 = (uint64_t *)(v21 + 8);
        }
        *(_QWORD *)(v45 + 24) = v46;
        *(_QWORD *)(v45 + 32) = v48;
        *v47 = v45;
        v18 = v21;
        *v41 = v45;
        v49 = a7;
        if (v10 > v11)
          goto LABEL_37;
        goto LABEL_54;
      }
    }
    else
    {
      do
      {
        v18 = a1;
        a1 = (_QWORD *)a1[3];
        v19 = a1[1];
      }
      while (v19 <= a5 && v19 >= v18[1] && a1[2] == a6);
      if (a7 && v18[1] != a5)
        v18 = a1;
      v20 = operator new();
      v21 = (_DWORD *)v20;
      *(_OWORD *)(v20 + 8) = *(_OWORD *)(v18 + 1);
      *(_DWORD *)v20 = *(_DWORD *)v18;
      if ((a7 & 1) != 0)
      {
        v22 = v18 + 4;
        v23 = (_QWORD *)v18[4];
        v24 = v23 + 3;
        v25 = v18;
      }
      else
      {
        v22 = v18 + 3;
        v25 = (_QWORD *)v18[3];
        v24 = v25 + 4;
        v23 = v18;
      }
      *(_QWORD *)(v20 + 32) = v23;
      v32 = (_QWORD *)(v20 + 32);
      *(_QWORD *)(v20 + 24) = v25;
      v33 = (uint64_t *)(v20 + 24);
      *v24 = v20;
      *v22 = v20;
      if (*(_QWORD *)(v20 + 8) != a5 || *(_QWORD *)(v20 + 16) != a6)
      {
        v35 = (_OWORD *)(v20 + 8);
        *(_QWORD *)(v20 + 8) = a5;
        *(_QWORD *)(v20 + 16) = a6;
        v36 = operator new();
        v37 = (_DWORD *)v36;
        *(_OWORD *)(v36 + 8) = *v35;
        *(_DWORD *)v36 = *v21;
        if ((a7 & 1) != 0)
        {
          v38 = (_DWORD *)*v32;
          v39 = (uint64_t *)(*v32 + 24);
          v40 = v21;
          v33 = (uint64_t *)(v21 + 8);
        }
        else
        {
          v40 = (_DWORD *)*v33;
          v39 = (uint64_t *)(*v33 + 32);
          v38 = v21;
        }
        *(_QWORD *)(v36 + 24) = v40;
        *(_QWORD *)(v36 + 32) = v38;
        *v39 = v36;
        v18 = v21;
        *v33 = v36;
        v49 = a7;
        if (v10 > v11)
          goto LABEL_37;
        goto LABEL_54;
      }
    }
    v37 = v21;
    v49 = a7;
    if (v10 > v11)
    {
      do
      {
LABEL_37:
        v50 = v17;
        v17 = (_QWORD *)v17[3];
        v51 = v17[1];
      }
      while (v51 >= a5 && v51 <= v50[1] && v17[2] == a6);
      if ((v49 & 1) == 0 && v50[1] != a5)
        v50 = v17;
      v52 = operator new();
      v53 = (_DWORD *)v52;
      *(_OWORD *)(v52 + 8) = *(_OWORD *)(v50 + 1);
      *(_DWORD *)v52 = *(_DWORD *)v50;
      if (v49)
      {
        v54 = v50 + 3;
        v55 = (_QWORD *)v50[3];
        v56 = v55 + 4;
        v57 = v50;
      }
      else
      {
        v54 = v50 + 4;
        v57 = (_QWORD *)v50[4];
        v56 = v57 + 3;
        v55 = v50;
      }
      *(_QWORD *)(v52 + 24) = v55;
      v58 = (uint64_t *)(v52 + 24);
      *(_QWORD *)(v52 + 32) = v57;
      v59 = (_QWORD *)(v52 + 32);
      *v56 = v52;
      *v54 = v52;
      if (*(_QWORD *)(v52 + 8) != a5 || *(_QWORD *)(v52 + 16) != a6)
      {
        v61 = (_OWORD *)(v52 + 8);
        *(_QWORD *)(v52 + 8) = a5;
        *(_QWORD *)(v52 + 16) = a6;
        v62 = operator new();
        *(_OWORD *)(v62 + 8) = *v61;
        *(_DWORD *)v62 = *v53;
        v64 = v81;
        v63 = v82;
        if (v49)
        {
          v65 = (_DWORD *)*v58;
          v66 = (uint64_t *)(*v58 + 32);
          v67 = v53;
        }
        else
        {
          v67 = (_DWORD *)*v59;
          v66 = (uint64_t *)(*v59 + 24);
          v65 = v53;
          v58 = (uint64_t *)(v53 + 8);
        }
        *(_QWORD *)(v62 + 24) = v65;
        *(_QWORD *)(v62 + 32) = v67;
        goto LABEL_75;
      }
      goto LABEL_69;
    }
    do
    {
LABEL_54:
      v50 = v17;
      v17 = (_QWORD *)v17[3];
      v68 = v17[1];
    }
    while (v68 <= a5 && v68 >= v50[1] && v17[2] == a6);
    if (v49 && v50[1] != a5)
      v50 = v17;
    v69 = operator new();
    v53 = (_DWORD *)v69;
    *(_OWORD *)(v69 + 8) = *(_OWORD *)(v50 + 1);
    *(_DWORD *)v69 = *(_DWORD *)v50;
    if ((v49 & 1) != 0)
    {
      v70 = v50 + 4;
      v71 = (_QWORD *)v50[4];
      v72 = v71 + 3;
      v73 = v50;
    }
    else
    {
      v70 = v50 + 3;
      v73 = (_QWORD *)v50[3];
      v72 = v73 + 4;
      v71 = v50;
    }
    *(_QWORD *)(v69 + 32) = v71;
    v74 = (_QWORD *)(v69 + 32);
    *(_QWORD *)(v69 + 24) = v73;
    v58 = (uint64_t *)(v69 + 24);
    *v72 = v69;
    *v70 = v69;
    if (*(_QWORD *)(v69 + 8) != a5 || *(_QWORD *)(v69 + 16) != a6)
    {
      v76 = (_OWORD *)(v69 + 8);
      *(_QWORD *)(v69 + 8) = a5;
      *(_QWORD *)(v69 + 16) = a6;
      v62 = operator new();
      *(_OWORD *)(v62 + 8) = *v76;
      *(_DWORD *)v62 = *v53;
      v64 = v81;
      v63 = v82;
      if ((v49 & 1) != 0)
      {
        v77 = (_DWORD *)*v74;
        v66 = (uint64_t *)(*v74 + 24);
        v78 = v53;
        v58 = (uint64_t *)(v53 + 8);
      }
      else
      {
        v78 = (_DWORD *)*v58;
        v66 = (uint64_t *)(*v58 + 32);
        v77 = v53;
      }
      *(_QWORD *)(v62 + 24) = v78;
      *(_QWORD *)(v62 + 32) = v77;
LABEL_75:
      *v66 = v62;
      v50 = v53;
      *v58 = v62;
      v13 = v83;
      if ((((v63 <= v64) ^ v49) & 1) != 0)
        goto LABEL_76;
      goto LABEL_70;
    }
LABEL_69:
    v62 = (uint64_t)v53;
    v13 = v83;
    if ((((v82 <= v81) ^ v49) & 1) != 0)
    {
LABEL_76:
      v18[3] = v50;
      v50[4] = v18;
      v79 = (_QWORD *)(v62 + 24);
      *((_QWORD *)v37 + 4) = v62;
      goto LABEL_77;
    }
LABEL_70:
    v18[4] = v50;
    v50[3] = v18;
    v79 = (_QWORD *)(v62 + 32);
    *((_QWORD *)v37 + 3) = v62;
LABEL_77:
    *v79 = v37;
  }
  return v13;
}

uint64_t ClipperLib::Clipper::JoinPoints(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _OWORD *v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v27;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v82;
  uint64_t v83;
  _OWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD *v100;
  int v101;
  uint64_t v102;
  _OWORD *v103;

  v5 = (_QWORD *)*a2;
  v6 = (_QWORD *)a2[1];
  v7 = *(_QWORD *)(*a2 + 8);
  v8 = *(_QWORD *)(*a2 + 16);
  v9 = a2[3];
  if (v8 != v9)
  {
    v103 = (_OWORD *)(*a2 + 8);
    v45 = (uint64_t)(v5 + 3);
    do
    {
      v46 = *(_QWORD **)v45;
      v47 = *(_QWORD *)(*(_QWORD *)v45 + 8);
      v48 = *(_QWORD *)(*(_QWORD *)v45 + 16);
      v45 = *(_QWORD *)v45 + 24;
    }
    while (v46 != v5 && v47 == v7 && v48 == v8);
    if (v48 <= v8
      && (v51 = a2[2],
          v52 = *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 40),
          ClipperLib::SlopesEqual(v7, v8, v47, v48, v51, v9, v52)))
    {
      v102 = v51;
      v101 = 0;
    }
    else
    {
      v46 = v5;
      do
      {
        v46 = (_QWORD *)v46[4];
        v53 = v46[1];
        v54 = v46[2];
      }
      while (v46 != v5 && v53 == v7 && v54 == v8);
      if (v54 > v8)
        return 0;
      v57 = a2[2];
      v52 = *((unsigned __int8 *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      result = ClipperLib::SlopesEqual(v7, v8, v53, v54, v57, v9, v52);
      if (!(_DWORD)result)
        return result;
      v102 = v57;
      v101 = 1;
    }
    v59 = v6[1];
    v60 = (uint64_t)(v6 + 3);
    v100 = v6 + 1;
    v61 = v6[2];
    do
    {
      v62 = *(_QWORD **)v60;
      v63 = *(_QWORD *)(*(_QWORD *)v60 + 8);
      v64 = *(_QWORD *)(*(_QWORD *)v60 + 16);
      v60 = *(_QWORD *)v60 + 24;
    }
    while (v63 == v59 && v64 == v61 && v62 != v6);
    if (v64 <= v61 && ClipperLib::SlopesEqual(v59, v6[2], v63, v64, v102, v9, v52 != 0))
    {
      v67 = 0;
      v69 = a3;
      v68 = a4;
      result = 0;
      if (v46 == v62)
        return result;
    }
    else
    {
      v62 = v6;
      do
      {
        v62 = (_QWORD *)v62[4];
        v70 = v62[1];
        v71 = v62[2];
      }
      while (v70 == v59 && v71 == v61 && v62 != v6);
      if (v71 > v61)
        return 0;
      result = ClipperLib::SlopesEqual(v59, v61, v70, v71, v102, v9, v52 != 0);
      if (!(_DWORD)result)
        return result;
      v67 = 1;
      v69 = a3;
      v68 = a4;
      result = 0;
      if (v46 == v62)
        return result;
    }
    if (v46 == v5 || v62 == v6)
      return result;
    if (v69 != v68 || v101 != v67)
    {
      v74 = operator new();
      v75 = v74;
      *(_OWORD *)(v74 + 8) = *v103;
      *(_DWORD *)v74 = *(_DWORD *)v5;
      if (v101)
      {
        v76 = v5[4];
        *(_QWORD *)(v74 + 24) = v5;
        *(_QWORD *)(v74 + 32) = v76;
        *(_QWORD *)(v76 + 24) = v74;
        v5[4] = v74;
        v77 = operator new();
        *(_OWORD *)(v77 + 8) = *v100;
        *(_DWORD *)v77 = *(_DWORD *)v6;
        v78 = v6[3];
        *(_QWORD *)(v77 + 24) = v78;
        *(_QWORD *)(v78 + 32) = v77;
        v5[4] = v6;
        v6[3] = v5;
        *(_QWORD *)(v75 + 24) = v77;
        *(_QWORD *)(v77 + 32) = v75;
      }
      else
      {
        v93 = v5[3];
        *(_QWORD *)(v74 + 24) = v93;
        *(_QWORD *)(v74 + 32) = v5;
        *(_QWORD *)(v93 + 32) = v74;
        v5[3] = v74;
        v94 = operator new();
        *(_OWORD *)(v94 + 8) = *v100;
        *(_DWORD *)v94 = *(_DWORD *)v6;
        v95 = v6[4];
        *(_QWORD *)(v94 + 32) = v95;
        *(_QWORD *)(v95 + 24) = v94;
        v5[3] = v6;
        v6[4] = v5;
        *(_QWORD *)(v75 + 32) = v94;
        *(_QWORD *)(v94 + 24) = v75;
      }
      *a2 = v5;
      a2[1] = v75;
      return 1;
    }
    return 0;
  }
  v10 = a2[2];
  v11 = (_QWORD *)*a2;
  if (v10 != v7 || ((v12 = v6 + 1, v10 == v6[1]) ? (v13 = v8 == v6[2]) : (v13 = 0), v11 = (_QWORD *)*a2, !v13))
  {
    do
    {
      v14 = v11;
      v11 = (_QWORD *)v11[4];
    }
    while (v11 != v5 && v11[2] == v8 && v11 != v6);
    v17 = v14 + 2;
    do
    {
      v18 = (uint64_t)v5;
      v5 = (_QWORD *)v5[3];
    }
    while (v5 != v14 && v5[2] == v8 && v5 != v6);
    if (v5 != v14 && v5 != v6)
    {
      v22 = v6[2];
      v23 = v6;
      do
      {
        v24 = v23;
        v23 = (_QWORD *)v23[4];
      }
      while (v23 != (_QWORD *)v18 && v23[2] == v22 && v23 != v6);
      do
      {
        v27 = (uint64_t)v6;
        v6 = (_QWORD *)v6[3];
      }
      while (v6 != v14 && v6 != v24 && v6[2] == v22);
      if (v6 != v24 && v6 != v14)
      {
        v31 = v14[1];
        v32 = *(_QWORD *)(v18 + 8);
        v33 = v24[1];
        v34 = *(_QWORD *)(v27 + 8);
        v35 = v33 < v34;
        if (v32 <= v34)
          v36 = *(_QWORD *)(v27 + 8);
        else
          v36 = *(_QWORD *)(v18 + 8);
        if (v33 >= v31)
          v37 = v14[1];
        else
          v37 = v24[1];
        if (v32 <= v33)
          v38 = v24[1];
        else
          v38 = *(_QWORD *)(v18 + 8);
        if (v34 >= v31)
          v39 = v14[1];
        else
          v39 = *(_QWORD *)(v27 + 8);
        if (v33 < v34)
          v37 = v39;
        else
          v38 = v36;
        if (v31 <= v34)
          v40 = *(_QWORD *)(v27 + 8);
        else
          v40 = v14[1];
        if (v33 >= v32)
          v41 = *(_QWORD *)(v18 + 8);
        else
          v41 = v24[1];
        if (v31 <= v33)
          v42 = v24[1];
        else
          v42 = v14[1];
        if (v34 >= v32)
          v43 = *(_QWORD *)(v18 + 8);
        else
          v43 = *(_QWORD *)(v27 + 8);
        if (v33 < v34)
          v41 = v43;
        else
          v42 = v40;
        if (v31 < v32)
        {
          v38 = v42;
          v37 = v41;
        }
        if (v38 < v37)
        {
          if (v31 < v38 || v31 > v37)
          {
            if (v33 < v38 || v33 > v37)
            {
              if (v32 < v38 || v32 > v37)
              {
                v17 = (uint64_t *)(v27 + 16);
              }
              else
              {
                v17 = (uint64_t *)(v18 + 16);
                v34 = *(_QWORD *)(v18 + 8);
                v35 = v31 < v32;
              }
            }
            else
            {
              v35 = v33 > v34;
              v17 = v24 + 2;
              v34 = v24[1];
            }
          }
          else
          {
            v35 = v31 > v32;
            v34 = v14[1];
          }
          v99 = *v17;
          *a2 = v14;
          a2[1] = v24;
          return ClipperLib::JoinHorz(v14, v18, v24, v27, v34, v99, v35);
        }
      }
    }
    return 0;
  }
  if (a3 != a4)
    return 0;
  v79 = (_QWORD *)*a2;
  while (1)
  {
    v79 = (_QWORD *)v79[3];
    if (v79 == v5)
      break;
    v80 = v79[2];
    if (v79[1] != v10 || v80 != v8)
      goto LABEL_151;
  }
  v80 = *(_QWORD *)(*a2 + 16);
LABEL_151:
  v82 = (_QWORD *)a2[1];
  while (1)
  {
    v82 = (_QWORD *)v82[3];
    if (v82 == v6)
      break;
    v83 = v82[2];
    if (v82[1] != v10 || v83 != v8)
    {
      if (v80 > v8 != v83 <= v8)
        return 0;
      goto LABEL_160;
    }
  }
  if (v80 <= v8)
    return 0;
LABEL_160:
  v86 = (_OWORD *)(*a2 + 8);
  v87 = operator new();
  v88 = v87;
  *(_OWORD *)(v87 + 8) = *v86;
  *(_DWORD *)v87 = *(_DWORD *)v5;
  if (v80 <= v8)
  {
    v96 = v5[3];
    *(_QWORD *)(v87 + 24) = v96;
    *(_QWORD *)(v87 + 32) = v5;
    *(_QWORD *)(v96 + 32) = v87;
    v5[3] = v87;
    v97 = operator new();
    *(_OWORD *)(v97 + 8) = *v12;
    *(_DWORD *)v97 = *(_DWORD *)v6;
    v98 = v6[4];
    *(_QWORD *)(v97 + 32) = v98;
    v92 = (uint64_t *)(v97 + 24);
    *(_QWORD *)(v98 + 24) = v97;
    v5[3] = v6;
    v6[4] = v5;
    *(_QWORD *)(v88 + 32) = v97;
  }
  else
  {
    v89 = v5[4];
    *(_QWORD *)(v87 + 24) = v5;
    *(_QWORD *)(v87 + 32) = v89;
    *(_QWORD *)(v89 + 24) = v87;
    v5[4] = v87;
    v90 = operator new();
    *(_OWORD *)(v90 + 8) = *v12;
    *(_DWORD *)v90 = *(_DWORD *)v6;
    v91 = v6[3];
    *(_QWORD *)(v90 + 24) = v91;
    v92 = (uint64_t *)(v90 + 32);
    *(_QWORD *)(v91 + 32) = v90;
    v5[4] = v6;
    v6[3] = v5;
    *(_QWORD *)(v88 + 24) = v90;
  }
  *v92 = v88;
  result = 1;
  *a2 = v5;
  a2[1] = v88;
  return result;
}

uint64_t ClipperLib::Clipper::FixupFirstLefts1(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  double v26;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  v5 = v4 - v3;
  if (v4 == v3)
    return result;
  v6 = 0;
  v7 = v5 >> 3;
  if (v7 <= 1)
    v7 = 1;
  while (2)
  {
    v8 = *(_QWORD *)(v3 + 8 * v6);
    v9 = *(_QWORD **)(v8 + 24);
    if (!v9)
      goto LABEL_7;
    v10 = *(_QWORD *)(v8 + 8);
    if (!v10)
      goto LABEL_7;
    do
    {
      if (*(_QWORD *)(v10 + 24))
        break;
      v10 = *(_QWORD *)(v10 + 8);
    }
    while (v10);
    if (v10 != a2)
      goto LABEL_7;
    v11 = *(_QWORD **)(v8 + 24);
    while (2)
    {
      v12 = 0;
      result = v11[1];
      v13 = v11[2];
      v14 = *(_QWORD **)(a3 + 24);
      while (1)
      {
        v15 = v14;
        v14 = (_QWORD *)v14[3];
        v16 = v14[2];
        if (v16 == v13)
        {
          v17 = v14[1];
          if (v17 == result)
            goto LABEL_33;
          v18 = v15[2];
          if (v18 == v13)
          {
            if (v17 <= result != v15[1] < result)
              goto LABEL_33;
            goto LABEL_16;
          }
          v19 = v18 - v13;
          v20 = v16 - v13;
          if (v16 < v13 != v18 >= v13)
            goto LABEL_16;
        }
        else
        {
          v18 = v15[2];
          v19 = v18 - v13;
          v20 = v16 - v13;
          if (v16 < v13 != v18 >= v13)
            goto LABEL_16;
        }
        v21 = v15[1];
        v22 = v14[1];
        v23 = v21 < result;
        v24 = v21 - result;
        if (!v23)
          break;
        v23 = v22 <= result;
        v25 = v22 - result;
        if (!v23)
          goto LABEL_29;
LABEL_16:
        if (v14 == *(_QWORD **)(a3 + 24))
        {
          if (!v12)
            goto LABEL_7;
          goto LABEL_6;
        }
      }
      v23 = v22 <= result;
      v25 = v22 - result;
      if (!v23)
      {
        v12 = 1 - v12;
        goto LABEL_16;
      }
LABEL_29:
      v26 = -((double)v25 * (double)v19 - (double)v24 * (double)v20);
      if (v26 != 0.0)
      {
        if (v16 > v18 != v26 <= 0.0)
          v12 = 1 - v12;
        goto LABEL_16;
      }
LABEL_33:
      v11 = (_QWORD *)v11[3];
      if (v11 != v9)
        continue;
      break;
    }
LABEL_6:
    *(_QWORD *)(v8 + 8) = a3;
LABEL_7:
    if (++v6 != v7)
      continue;
    return result;
  }
}

uint64_t ClipperLib::Clipper::FixupFirstLefts2(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16) - v3;
  if (v4)
  {
    v5 = v4 >> 3;
    if (v5 <= 1)
      v5 = 1;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)v3 + 8) == a2)
        *(_QWORD *)(*(_QWORD *)v3 + 8) = a3;
      v3 += 8;
      --v5;
    }
    while (v5);
  }
  return result;
}

double ClipperLib::GetUnitNormal(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  double result;

  v2 = a2[1];
  v3 = a1[1];
  v4 = *a2 == *a1 && v2 == v3;
  result = 0.0;
  if (!v4)
    return 1.0
         / sqrt((double)(uint64_t)(*a2 - *a1) * (double)(uint64_t)(*a2 - *a1) + (double)(v2 - v3) * (double)(v2 - v3))
         * (double)(v2 - v3);
  return result;
}

double ClipperLib::ClipperOffset::ClipperOffset(ClipperLib::ClipperOffset *this, double a2, double a3)
{
  double result;

  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 22) = &off_24F04F190;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 229) = 0u;
  *(double *)this = a2;
  *((double *)this + 1) = a3;
  result = NAN;
  *((_OWORD *)this + 10) = xmmword_227BC0240;
  return result;
}

void ClipperLib::ClipperOffset::~ClipperOffset(ClipperLib::ClipperOffset *this)
{
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;

  v4 = (char *)this + 208;
  v2 = (_QWORD *)*((_QWORD *)this + 26);
  v3 = *((_QWORD *)v4 + 1);
  if ((int)((unint64_t)(v3 - (_QWORD)v2) >> 3) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = v2[v5];
      if (v6)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v6 + 8))(v2[v5]);
        v2 = (_QWORD *)*((_QWORD *)this + 26);
        v3 = *((_QWORD *)this + 27);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (_QWORD)v2) >> 3));
  }
  *((_QWORD *)this + 27) = v2;
  *((_QWORD *)this + 20) = -1;
  *((_QWORD *)this + 22) = &off_24F04F190;
  if (v2)
    operator delete(v2);
  v7 = (void *)*((_QWORD *)this + 23);
  if (v7)
  {
    *((_QWORD *)this + 24) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 11);
  if (v8)
  {
    *((_QWORD *)this + 12) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 8);
  if (v9)
  {
    *((_QWORD *)this + 9) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 5);
  if (v10)
  {
    *((_QWORD *)this + 6) = v10;
    operator delete(v10);
  }
  v11 = *((_QWORD *)this + 2);
  if (v11)
  {
    v12 = *((_QWORD *)this + 3);
    v13 = (void *)*((_QWORD *)this + 2);
    if (v12 != v11)
    {
      v14 = *((_QWORD *)this + 3);
      do
      {
        v16 = *(void **)(v14 - 24);
        v14 -= 24;
        v15 = v16;
        if (v16)
        {
          *(_QWORD *)(v12 - 16) = v15;
          operator delete(v15);
        }
        v12 = v14;
      }
      while (v14 != v11);
      v13 = (void *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 3) = v11;
    operator delete(v13);
  }
}

_QWORD *ClipperLib::ClipperOffset::Clear(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = this;
  v2 = this[26];
  v3 = this[27];
  if ((int)((unint64_t)(v3 - v2) >> 3) >= 1)
  {
    v4 = 0;
    do
    {
      this = *(_QWORD **)(v2 + 8 * v4);
      if (this)
      {
        this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
        v2 = v1[26];
        v3 = v1[27];
      }
      ++v4;
    }
    while (v4 < (int)((unint64_t)(v3 - v2) >> 3));
  }
  v1[27] = v2;
  v1[20] = -1;
  return this;
}

void ClipperLib::PolyNode::~PolyNode(ClipperLib::PolyNode *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F04F190;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F04F190;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22E2A50A0);
}

void ClipperLib::ClipperOffset::AddPath(_QWORD *a1, int64x2_t **a2, int a3, unsigned int a4)
{
  unint64_t v4;
  unsigned int v5;
  ClipperLib::PolyNode *v9;
  int64x2_t *v10;
  int32x2_t v11;
  uint64_t v12;
  int64x2_t *v13;
  int64x2_t **v14;
  int64x2_t *v15;
  int v16;
  int v17;
  int64x2_t *v18;
  int64x2_t *v19;
  uint64_t v20;
  int64x2_t *v21;
  int64x2_t *v22;
  int32x2_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  int64x2_t *v30;
  uint64_t v31;
  char *v32;
  int64x2_t *v33;
  uint64_t v34;
  int64x2_t *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int64x2_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  int64x2_t **v48;

  v4 = (unint64_t)((char *)a2[1] - (char *)*a2) >> 4;
  v5 = v4 - 1;
  if ((int)v4 >= 1)
  {
    v9 = (ClipperLib::PolyNode *)operator new();
    *(_QWORD *)v9 = &off_24F04F190;
    *(_OWORD *)((char *)v9 + 8) = 0u;
    v48 = (int64x2_t **)((char *)v9 + 8);
    *(_OWORD *)((char *)v9 + 24) = 0u;
    *(_OWORD *)((char *)v9 + 40) = 0u;
    *(_OWORD *)((char *)v9 + 53) = 0u;
    *((_DWORD *)v9 + 18) = a3;
    *((_DWORD *)v9 + 19) = a4;
    if (a4 <= 1 && (_DWORD)v4 != 1)
    {
      v10 = &(*a2)[v5];
      while (1)
      {
        v11 = vmovn_s64(vceqq_s64(**a2, *v10));
        if ((v11.i32[0] & v11.i32[1] & 1) == 0)
          break;
        LODWORD(v4) = v4 - 1;
        --v10;
        if ((int)v4 <= 1)
        {
          v5 = 0;
          goto LABEL_9;
        }
      }
      v5 = v4 - 1;
    }
LABEL_9:
    v47 = a4;
    v46 = a1;
    v12 = v5 + 1;
    v13 = (int64x2_t *)operator new(16 * v12);
    *((_QWORD *)v9 + 1) = v13;
    *((_QWORD *)v9 + 3) = &v13[v5 + 1];
    v14 = a2;
    *v13 = **a2;
    v15 = v13 + 1;
    *((_QWORD *)v9 + 2) = v13 + 1;
    if (v5)
    {
      v16 = 0;
      v17 = 0;
      v18 = *v48;
      v19 = *a2;
      v20 = 1;
      while (1)
      {
        v22 = &v19[v20];
        v23 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqq_s64(v18[v17], *v22)));
        if (((v23.i32[0] | v23.i32[1]) & 1) != 0)
          break;
        v21 = v15;
LABEL_12:
        ++v20;
        v15 = v21;
        if (v20 == v12)
          goto LABEL_38;
      }
      v24 = *((_QWORD *)v9 + 3);
      if ((unint64_t)v15 < v24)
      {
        *v15 = *v22;
        v21 = v15 + 1;
        goto LABEL_29;
      }
      v25 = v15 - v18;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 60)
        _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
      v27 = v24 - (_QWORD)v18;
      if (v27 >> 3 > v26)
        v26 = v27 >> 3;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
        v28 = 0xFFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        if (v28 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v29 = (char *)operator new(16 * v28);
        v30 = (int64x2_t *)&v29[16 * v25];
        *v30 = *v22;
        v31 = (uint64_t)v30;
        if (v15 != v18)
        {
LABEL_25:
          v14 = a2;
          do
          {
            *(int64x2_t *)(v31 - 16) = v15[-1];
            v31 -= 16;
            --v15;
          }
          while (v15 != v18);
          v15 = *v48;
          v32 = &v29[16 * v28];
          v21 = v30 + 1;
          *((_QWORD *)v9 + 1) = v31;
          *((_QWORD *)v9 + 2) = v30 + 1;
          *((_QWORD *)v9 + 3) = v32;
          if (!v15)
          {
LABEL_29:
            ++v17;
            *((_QWORD *)v9 + 2) = v21;
            v19 = *v14;
            v33 = &(*v14)[v20];
            v34 = v33->i64[1];
            v18 = (int64x2_t *)*((_QWORD *)v9 + 1);
            v35 = &v18[v16];
            v36 = v35->i64[1];
            if (v34 > v36 || v34 == v36 && v33->i64[0] < v35->i64[0])
              v16 = v17;
            goto LABEL_12;
          }
LABEL_28:
          operator delete(v15);
          goto LABEL_29;
        }
      }
      else
      {
        v29 = 0;
        v30 = (int64x2_t *)(16 * v25);
        *(int64x2_t *)(16 * v25) = *v22;
        v31 = 16 * v25;
        if (v15 != v18)
          goto LABEL_25;
      }
      v14 = a2;
      v37 = &v29[16 * v28];
      v21 = v30 + 1;
      *((_QWORD *)v9 + 1) = v31;
      *((_QWORD *)v9 + 2) = v30 + 1;
      *((_QWORD *)v9 + 3) = v37;
      if (!v15)
        goto LABEL_29;
      goto LABEL_28;
    }
    v17 = 0;
    v16 = 0;
LABEL_38:
    if (!v47 && v17 < 2)
    {
      (*(void (**)(ClipperLib::PolyNode *))(*(_QWORD *)v9 + 8))(v9);
      return;
    }
    ClipperLib::PolyNode::AddChild((ClipperLib::PolyNode *)(v46 + 22), v9);
    if (!v47)
    {
      v38 = v46[20];
      v39 = v46[26];
      if (v38 < 0)
      {
        v45 = (((v46[27] - v39) << 29) - 0x100000000) >> 32;
        v44 = v16;
      }
      else
      {
        v40 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 8 * (int)v38) + 8) + ((uint64_t)(v46[21] << 32) >> 28));
        v41 = v40[1];
        v42 = &(*v48)[v16];
        v43 = v42->i64[1];
        if (v43 <= v41 && (v43 != v41 || v42->i64[0] >= *v40))
          return;
        v44 = v16;
        v45 = (((v46[27] - v39) << 29) - 0x100000000) >> 32;
      }
      v46[20] = v45;
      v46[21] = v44;
    }
  }
}

void ClipperLib::ClipperOffset::AddPaths(_QWORD *a1, uint64_t *a2, int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;

  v4 = *a2;
  if (a2[1] != *a2)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      ClipperLib::ClipperOffset::AddPath(a1, (int64x2_t **)(v4 + v9), a3, a4);
      ++v10;
      v4 = *a2;
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
}

_QWORD *ClipperLib::ClipperOffset::FixOrientations(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  double v21;
  float64x2_t v22;
  float64x2_t v23;
  _OWORD *v24;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  double v37;
  float64x2_t v38;
  float64x2_t v39;
  _OWORD *v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;

  v1 = this[20];
  if (v1 < 0)
  {
    v2 = this[26];
    goto LABEL_26;
  }
  v2 = this[26];
  v4 = (uint64_t *)(*(_QWORD *)(v2 + 8 * (int)v1) + 8);
  v3 = *v4;
  v5 = v4[1] - *v4;
  if ((int)(v5 >> 4) < 3)
    goto LABEL_26;
  v6 = 0;
  v7 = (v5 >> 4) - 1;
  v8 = (v5 >> 4);
  v9 = 0.0;
  do
  {
    v10 = vcvtq_f64_s64(*(int64x2_t *)(v3 + 16 * (int)v7));
    v11 = vcvtq_f64_s64(*(int64x2_t *)(v3 + 16 * v6));
    v9 = vmulq_laneq_f64(vaddq_f64(v10, v11), vsubq_f64(v10, v11), 1).f64[0] + v9;
    LODWORD(v7) = v6++;
  }
  while (v8 != v6);
  if (v9 * -0.5 >= 0.0)
  {
LABEL_26:
    v28 = this[27];
    if ((int)((unint64_t)(v28 - v2) >> 3) >= 1)
    {
      v29 = 0;
      do
      {
        v30 = *(_QWORD *)(v2 + 8 * v29);
        if (*(_DWORD *)(v30 + 76) == 1)
        {
          v33 = v30 + 8;
          v31 = *(_QWORD *)(v30 + 8);
          v32 = *(_QWORD *)(v33 + 8);
          v34 = (v32 - v31) >> 4;
          if ((int)v34 >= 3)
          {
            v35 = 0;
            v36 = v34 - 1;
            v37 = 0.0;
            do
            {
              v38 = vcvtq_f64_s64(*(int64x2_t *)(v31 + 16 * v36));
              v39 = vcvtq_f64_s64(*(int64x2_t *)(v31 + 16 * v35));
              v37 = vmulq_laneq_f64(vaddq_f64(v38, v39), vsubq_f64(v38, v39), 1).f64[0] + v37;
              v36 = v35++;
            }
            while (((v32 - v31) >> 4) != v35);
            if (v37 * -0.5 < 0.0 && v31 != v32)
            {
              v40 = (_OWORD *)(v32 - 16);
              if ((unint64_t)v40 > v31)
              {
                v41 = v31 + 16;
                do
                {
                  v42 = *(_OWORD *)(v41 - 16);
                  *(_OWORD *)(v41 - 16) = *v40;
                  *v40-- = v42;
                  v27 = v41 >= (unint64_t)v40;
                  v41 += 16;
                }
                while (!v27);
                v2 = this[26];
                v28 = this[27];
              }
            }
          }
        }
        ++v29;
      }
      while (v29 < (int)((unint64_t)(v28 - v2) >> 3));
    }
    return this;
  }
  v12 = this[27];
  if ((int)((unint64_t)(v12 - v2) >> 3) >= 1)
  {
    for (i = 0; i < (int)((unint64_t)(v12 - v2) >> 3); ++i)
    {
      v14 = *(_QWORD *)(v2 + 8 * i);
      v15 = *(_DWORD *)(v14 + 76);
      if (v15 == 1)
      {
        v16 = *(_QWORD *)(v14 + 8);
        v17 = *(_QWORD *)(v14 + 16);
        v18 = (v17 - v16) >> 4;
        if ((int)v18 < 3)
          goto LABEL_16;
        v19 = 0;
        v20 = v18 - 1;
        v21 = 0.0;
        do
        {
          v22 = vcvtq_f64_s64(*(int64x2_t *)(v16 + 16 * v20));
          v23 = vcvtq_f64_s64(*(int64x2_t *)(v16 + 16 * v19));
          v21 = vmulq_laneq_f64(vaddq_f64(v22, v23), vsubq_f64(v22, v23), 1).f64[0] + v21;
          v20 = v19++;
        }
        while (((v17 - v16) >> 4) != v19);
        if (v21 * -0.5 >= 0.0)
          goto LABEL_16;
      }
      else if (!v15)
      {
        v16 = *(_QWORD *)(v14 + 8);
        v17 = *(_QWORD *)(v14 + 16);
LABEL_16:
        v24 = (_OWORD *)(v17 - 16);
        if (v16 != v17 && (unint64_t)v24 > v16)
        {
          v26 = v16 + 16;
          do
          {
            v43 = *(_OWORD *)(v26 - 16);
            *(_OWORD *)(v26 - 16) = *v24;
            *v24-- = v43;
            v27 = v26 >= (unint64_t)v24;
            v26 += 16;
          }
          while (!v27);
          v2 = this[26];
          v12 = this[27];
        }
      }
    }
  }
  return this;
}

__n128 ClipperLib::ReversePath(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  _OWORD *v3;
  unint64_t v5;
  __n128 result;
  BOOL v7;

  v1 = *a1;
  v2 = a1[1];
  v3 = (_OWORD *)(v2 - 16);
  if (*a1 != v2 && (unint64_t)v3 > v1)
  {
    v5 = v1 + 16;
    do
    {
      result = *(__n128 *)(v5 - 16);
      *(_OWORD *)(v5 - 16) = *v3;
      *v3-- = result;
      v7 = v5 >= (unint64_t)v3;
      v5 += 16;
    }
    while (!v7);
  }
  return result;
}

void ClipperLib::ClipperOffset::Execute(ClipperLib::ClipperOffset *this, uint64_t *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64x2_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  int64x2_t *v43[3];
  void (**v44)(ClipperLib::Clipper *__hidden);
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  void *v59;
  __int128 v60;
  __int128 v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;

  v7 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    v8 = a2[1];
    do
    {
      v10 = *(void **)(v8 - 24);
      v8 -= 24;
      v9 = v10;
      if (v10)
      {
        *(_QWORD *)(v6 - 16) = v9;
        operator delete(v9);
      }
      v6 = v8;
    }
    while (v8 != v7);
  }
  a2[1] = v7;
  ClipperLib::ClipperOffset::FixOrientations(this);
  ClipperLib::ClipperOffset::DoOffset(this, a3);
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v60 = 0u;
  v61 = 0u;
  v44 = &off_24F04F200;
  v59 = &unk_24F04F248;
  v51 = 0;
  v52 = 0;
  v62 = 0;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v54 = 0;
  v55 = 0;
  v53 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v66 = 0;
  v11 = *((_QWORD *)this + 2);
  if (*((_QWORD *)this + 3) != v11)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      ClipperLib::ClipperBase::AddPath((uint64_t)&v59, (int64x2_t **)(v11 + v12), 0, 1);
      ++v13;
      v11 = *((_QWORD *)this + 2);
      v12 += 24;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 3) - v11) >> 3));
  }
  if (a3 <= 0.0)
  {
    v14 = (char *)&v44 + (_QWORD)*(v44 - 3);
    v15 = *((_QWORD *)v14 + 2);
    v16 = *((_QWORD *)v14 + 3);
    if (v15 == v16)
    {
      v33 = -10;
      v31 = 10;
      v32 = 10;
      v30 = -10;
    }
    else
    {
      v17 = *(uint64_t **)(v15 + 8);
      v19 = *v17;
      v18 = v17[1];
      v20 = v19;
      v21 = v18;
      do
      {
        v22 = *(uint64_t **)(v15 + 8);
        v23 = v22;
        do
        {
          v28 = (uint64_t *)v23[14];
          if (v28)
          {
            v29 = v23;
            do
            {
              v24 = v28;
              if (*v29 < v19)
                v19 = *v29;
              if (*v29 > v20)
                v20 = *v29;
              v28 = (uint64_t *)v28[14];
              v29 = v24;
            }
            while (v28);
          }
          else
          {
            v24 = v23;
          }
          if (*v24 < v19)
            v19 = *v24;
          if (v20 <= *v24)
            v20 = *v24;
          v26 = v24[4];
          v25 = v24[5];
          if (v26 < v19)
            v19 = v26;
          if (v20 <= v26)
            v20 = v26;
          if (v25 < v21)
            v21 = v25;
          v27 = v23 == v22;
          v23 = *(uint64_t **)(v15 + 16);
        }
        while (v27);
        if (v18 <= v22[1])
          v18 = v22[1];
        v15 += 24;
      }
      while (v15 != v16);
      v30 = v19 - 10;
      v31 = v18 + 10;
      v32 = v20 + 10;
      v33 = v21 - 10;
    }
    v34 = (int64x2_t *)operator new(0x40uLL);
    v43[1] = v34 + 4;
    v43[2] = v34 + 4;
    v43[0] = v34;
    v34->i64[0] = v30;
    v34->i64[1] = v31;
    v34[1].i64[0] = v32;
    v34[1].i64[1] = v31;
    v34[2].i64[0] = v32;
    v34[2].i64[1] = v33;
    v34[3].i64[0] = v30;
    v34[3].i64[1] = v33;
    ClipperLib::ClipperBase::AddPath((uint64_t)v14, v43, 0, 1);
    v57 = 1;
    ClipperLib::Clipper::Execute((uint64_t)&v44, 1, a2, 3, 3);
    v35 = *a2;
    v36 = a2[1];
    if (v36 == *a2)
      goto LABEL_53;
    if (v35 + 24 == v36)
    {
      if (v36 == v35)
      {
LABEL_52:
        a2[1] = v35;
LABEL_53:
        operator delete(v34);
        goto LABEL_54;
      }
    }
    else
    {
      do
      {
        v39 = *(void **)v35;
        if (*(_QWORD *)v35)
        {
          *(_QWORD *)(v35 + 8) = v39;
          operator delete(v39);
          *(_QWORD *)(v35 + 8) = 0;
          *(_QWORD *)(v35 + 16) = 0;
        }
        v37 = v35 + 24;
        *(_OWORD *)v35 = *(_OWORD *)(v35 + 24);
        *(_QWORD *)(v35 + 16) = *(_QWORD *)(v35 + 40);
        *(_QWORD *)(v35 + 32) = 0;
        *(_QWORD *)(v35 + 40) = 0;
        *(_QWORD *)(v35 + 24) = 0;
        v38 = v35 + 48;
        v35 += 24;
      }
      while (v38 != v36);
      v36 = a2[1];
      v35 = v37;
      if (v36 == v37)
        goto LABEL_52;
    }
    v40 = v36;
    do
    {
      v42 = *(void **)(v40 - 24);
      v40 -= 24;
      v41 = v42;
      if (v42)
      {
        *(_QWORD *)(v36 - 16) = v41;
        operator delete(v41);
      }
      v36 = v40;
    }
    while (v40 != v35);
    goto LABEL_52;
  }
  ClipperLib::Clipper::Execute((uint64_t)&v44, 1, a2, 2, 2);
LABEL_54:
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&v44);
}

void sub_227B9ACEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)va);
  _Unwind_Resume(a1);
}

void sub_227B9AD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)va);
  _Unwind_Resume(a1);
}

void sub_227B9AD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  operator delete(v13);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a13);
  _Unwind_Resume(a1);
}

void sub_227B9AD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)va);
  _Unwind_Resume(a1);
}

void ClipperLib::ClipperOffset::DoOffset(ClipperLib::ClipperOffset *this, double a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  __double2 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v33;
  int64x2_t *v34;
  uint64_t v35;
  unint64_t v36;
  int64x2_t *v37;
  int64x2_t **v38;
  uint64_t v39;
  float64x2_t v40;
  int64x2_t *v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  int64x2_t v45;
  unint64_t v46;
  int64x2_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  int64x2_t *v53;
  int64x2_t *v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t i;
  double *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  uint64_t v68;
  double v70;
  double v71;
  double v72;
  unint64_t v73;
  double *v74;
  float64x2_t *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  double *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  uint64_t v90;
  BOOL v91;
  double v92;
  int64x2_t **v93;
  double v94;
  double v95;
  unint64_t v96;
  float64x2_t *v97;
  float64x2_t *v98;
  char *v99;
  _OWORD *v100;
  unint64_t v101;
  float64x2_t v102;
  int64x2_t v103;
  int64x2_t *v104;
  int64x2_t *v105;
  float64x2_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  double *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int64x2_t *v124;
  float64x2_t v125;
  float64x2_t v126;
  int64x2_t v127;
  int64x2_t *v128;
  int64x2_t *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  int64x2_t *v135;
  char *v136;
  float64x2_t *v137;
  char *v138;
  int v139;
  unint64_t v140;
  int v141;
  char *v142;
  _BYTE *v143;
  _BYTE *v144;
  int64_t v145;
  int v146;
  _QWORD *v147;
  _BYTE *v148;
  _BYTE *v149;
  int64_t v150;
  char *v151;
  char *v152;
  int v153;
  float64x2_t v154;
  int64x2_t v155;
  int64x2_t *v156;
  int64x2_t *v157;
  int64x2_t *v158;
  float64x2_t *v159;
  float64x2_t v160;
  unint64_t v161;
  unint64_t v162;
  BOOL v163;
  int v164;
  int64x2_t *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  int64x2_t *v171;
  float64_t *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  float64x2_t *v178;
  unint64_t v179;
  float64x2_t *v180;
  char *v181;
  float64x2_t *v182;
  unint64_t v183;
  float64x2_t *v184;
  BOOL v186;
  BOOL v187;
  BOOL v188;
  BOOL v189;
  BOOL v190;
  BOOL v191;
  BOOL v192;
  BOOL v193;
  float64x2_t *v194;
  uint64_t v195;
  unint64_t v196;
  const double *v197;
  float64x2_t v198;
  int64x2_t v199;
  int64x2_t *v200;
  int64x2_t *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  char *v206;
  int64x2_t *v207;
  float64x2_t v208;
  float64x2_t v209;
  int64x2_t v210;
  int64x2_t *v211;
  int64x2_t *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  char *v217;
  int64x2_t *v218;
  char *v219;
  int64x2_t *v220;
  char *v221;
  char *v222;
  int64x2_t *v223;
  float64x2_t v224;
  int64x2_t v225;
  int64x2_t *v226;
  int64x2_t *v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  char *v232;
  int64x2_t *v233;
  char *v234;
  int64x2_t *v235;
  float64x2_t *v236;
  unint64_t v237;
  unint64_t v238;
  int v239;
  float64x2_t v240;
  int64x2_t v241;
  int64x2_t *v242;
  int64x2_t *v243;
  int64x2_t *v244;
  _QWORD *v245;
  float64_t *v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  float64x2_t *v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  BOOL v259;
  BOOL v260;
  BOOL v261;
  BOOL v262;
  BOOL v263;
  BOOL v264;
  BOOL v265;
  BOOL v266;
  BOOL v267;
  float64x2_t *v268;
  uint64_t v269;
  unint64_t v270;
  const double *f64;
  int64x2_t *v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  char *v277;
  int64x2_t *v278;
  float64x2_t v279;
  int64x2_t v280;
  _BYTE *v281;
  _BYTE *v282;
  int64_t v283;
  char *v284;
  char *v285;
  char *v286;
  int64x2_t *v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  char *v292;
  int64x2_t *v293;
  char *v294;
  int64x2_t *v295;
  int64x2_t *v296;
  unsigned int v297;
  float64x2_t v298;
  int64x2_t **v299;
  char **v300;
  int64x2_t v301;
  uint64_t v302;
  int64x2_t v303;
  int64x2_t v304;
  float64x2_t v305;
  uint64_t v306;
  int64x2_t v307;
  int64x2_t v308;
  int64x2_t v309;
  int64x2_t v310;
  int64x2_t v311;
  int64x2_t v312;
  int8x16_t v313;
  int8x16_t v314;
  float64x2_t **v315;
  double v316;
  _OWORD v317[2];
  float64x2x2_t v318;
  float64x2x2_t v319;

  v3 = *((_QWORD *)this + 2);
  v300 = (char **)((char *)this + 16);
  v4 = *((_QWORD *)this + 3);
  v316 = a2;
  if (v4 != v3)
  {
    v5 = *((_QWORD *)this + 3);
    do
    {
      v7 = *(void **)(v5 - 24);
      v5 -= 24;
      v6 = v7;
      if (v7)
      {
        *(_QWORD *)(v4 - 16) = v6;
        operator delete(v6);
        a2 = v316;
      }
      v4 = v5;
    }
    while (v5 != v3);
  }
  *((_QWORD *)this + 3) = v3;
  *((double *)this + 14) = a2;
  if (a2 > -1.0e-20 && a2 < 1.0e-20)
  {
    std::vector<std::vector<ClipperLib::IntPoint>>::reserve((uint64_t)v300, (int)((uint64_t)(*((_QWORD *)this + 27) - *((_QWORD *)this + 26)) >> 3));
    v9 = *((_QWORD *)this + 26);
    v8 = *((_QWORD *)this + 27);
    if ((int)((unint64_t)(v8 - v9) >> 3) >= 1)
    {
      v10 = 0;
      do
      {
        v12 = *(_QWORD *)(v9 + 8 * v10);
        if (!*(_DWORD *)(v12 + 76))
        {
          v13 = (_QWORD *)*((_QWORD *)this + 3);
          if ((unint64_t)v13 >= *((_QWORD *)this + 4))
          {
            v11 = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(v300, v12 + 8);
          }
          else
          {
            *v13 = 0;
            v13[1] = 0;
            v13[2] = 0;
            v15 = *(_BYTE **)(v12 + 8);
            v14 = *(_BYTE **)(v12 + 16);
            v16 = v14 - v15;
            if (v14 != v15)
            {
              if (v16 < 0)
                _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
              v17 = (char *)operator new(v14 - v15);
              *v13 = v17;
              v13[1] = v17;
              v18 = &v17[16 * (v16 >> 4)];
              v13[2] = v18;
              memcpy(v17, v15, v16);
              v13[1] = v18;
            }
            v11 = (char *)(v13 + 3);
            *((_QWORD *)this + 3) = v13 + 3;
          }
          *((_QWORD *)this + 3) = v11;
          v9 = *((_QWORD *)this + 26);
          v8 = *((_QWORD *)this + 27);
        }
        ++v10;
      }
      while (v10 < (int)((unint64_t)(v8 - v9) >> 3));
    }
    return;
  }
  v19 = *((double *)this + 1);
  v20 = 2.0 / (*(double *)this * *(double *)this);
  if (*(double *)this <= 2.0)
    v20 = 0.5;
  *((double *)this + 18) = v20;
  v21 = fabs(a2);
  v22 = 0.25;
  v23 = fmin(v19, v21 * 0.25);
  if (v19 > 0.0)
    v22 = v23;
  v24 = fmin(3.14159265 / acos(1.0 - v22 / v21), v21 * 3.14159265);
  v25 = __sincos_stret(6.28318531 / v24);
  *((__double2 *)this + 8) = v25;
  *((double *)this + 19) = v24 * 0.159154943;
  if (v316 < 0.0)
    *((double *)this + 16) = -v25.__sinval;
  std::vector<std::vector<ClipperLib::IntPoint>>::reserve((uint64_t)v300, (int)((uint64_t)(*((_QWORD *)this + 27) - *((_QWORD *)this + 26)) >> 2) & 0xFFFFFFFFFFFFFFFELL);
  v26 = *((_QWORD *)this + 26);
  if ((int)((unint64_t)(*((_QWORD *)this + 27) - v26) >> 3) >= 1)
  {
    v27 = 0;
    v28 = (_QWORD *)((char *)this + 40);
    v299 = (int64x2_t **)((char *)this + 64);
    v298 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v316, 0);
    v315 = (float64x2_t **)((char *)this + 88);
    __asm
    {
      FMOV            V1.2D, #0.5
      FMOV            V0.2D, #-0.5
    }
    v313 = _Q0;
    v314 = _Q1;
    while (1)
    {
      v33 = *(_QWORD *)(v26 + 8 * v27);
      if (v28 != (_QWORD *)(v33 + 8))
        std::vector<ClipperLib::IntPoint>::__assign_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(v28, *(char **)(v33 + 8), *(char **)(v33 + 16), (uint64_t)(*(_QWORD *)(v33 + 16) - *(_QWORD *)(v33 + 8)) >> 4);
      v34 = (int64x2_t *)*((_QWORD *)this + 5);
      v35 = *((_QWORD *)this + 6) - (_QWORD)v34;
      v36 = (unint64_t)v35 >> 4;
      if (!((unint64_t)v35 >> 4))
        goto LABEL_28;
      if (v316 <= 0.0)
        break;
      v37 = (int64x2_t *)*((_QWORD *)this + 8);
      *((_QWORD *)this + 9) = v37;
      if ((_DWORD)v36 != 1)
        goto LABEL_58;
      if (*(_DWORD *)(v33 + 72) != 1)
      {
        v102 = vsubq_f64(vcvtq_f64_s64(*v34), v298);
        v103 = vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v102), v313, v314), v102));
        v104 = (int64x2_t *)*((_QWORD *)this + 10);
        if (v37 >= v104)
        {
          v307 = v103;
          v120 = (char *)v104 - (char *)v37;
          v121 = v120 >> 3;
          if ((unint64_t)(v120 >> 3) <= 1)
            v121 = 1;
          _CF = (unint64_t)v120 >= 0x7FFFFFFFFFFFFFF0;
          v122 = 0xFFFFFFFFFFFFFFFLL;
          if (!_CF)
            v122 = v121;
          if (v122 >> 60)
LABEL_412:
            std::__throw_bad_array_new_length[abi:ne180100]();
          v123 = v122;
          v124 = (int64x2_t *)operator new(16 * v122);
          v104 = &v124[v123];
          *v124 = v307;
          v105 = v124 + 1;
          *((_QWORD *)this + 8) = v124;
          *((_QWORD *)this + 9) = v124 + 1;
          *((_QWORD *)this + 10) = &v124[v123];
          if (v37)
          {
            operator delete(v37);
            v34 = (int64x2_t *)*((_QWORD *)this + 5);
            v104 = (int64x2_t *)*((_QWORD *)this + 10);
          }
        }
        else
        {
          *v37 = v103;
          v105 = v37 + 1;
        }
        *((_QWORD *)this + 9) = v105;
        v125 = vcvtq_f64_s64(*v34);
        *(_QWORD *)&v126.f64[0] = *(_OWORD *)&vaddq_f64(v298, v125);
        v126.f64[1] = vsubq_f64(v125, v298).f64[1];
        v127 = vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v126), v313, v314), v126));
        if (v105 < v104)
        {
          *v105 = v127;
          v128 = v105 + 1;
          v38 = (int64x2_t **)((char *)this + 64);
          goto LABEL_248;
        }
        v38 = (int64x2_t **)((char *)this + 64);
        v129 = *v299;
        v130 = v105 - *v299;
        v131 = v130 + 1;
        if ((unint64_t)(v130 + 1) >> 60)
          goto LABEL_413;
        v132 = (char *)v104 - (char *)v129;
        if (v132 >> 3 > v131)
          v131 = v132 >> 3;
        if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF0)
          v133 = 0xFFFFFFFFFFFFFFFLL;
        else
          v133 = v131;
        if (v133)
        {
          v308 = v127;
          if (v133 >> 60)
            goto LABEL_412;
          v134 = (char *)operator new(16 * v133);
          v38 = (int64x2_t **)((char *)this + 64);
          v135 = (int64x2_t *)&v134[16 * v130];
          v104 = (int64x2_t *)&v134[16 * v133];
          *v135 = v308;
          v128 = v135 + 1;
          if (v105 == v129)
          {
LABEL_246:
            *((_QWORD *)this + 8) = v135;
            *((_QWORD *)this + 9) = v128;
            *((_QWORD *)this + 10) = v104;
            goto LABEL_247;
          }
        }
        else
        {
          v135 = (int64x2_t *)(16 * v130);
          v104 = 0;
          *(int64x2_t *)(16 * v130) = v127;
          v128 = (int64x2_t *)(16 * v130 + 16);
          if (v105 == v129)
            goto LABEL_246;
        }
        do
        {
          v135[-1] = v105[-1];
          --v135;
          --v105;
        }
        while (v105 != v129);
        v105 = (int64x2_t *)*((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v135;
        *((_QWORD *)this + 9) = v128;
        *((_QWORD *)this + 10) = v104;
        if (v105)
        {
LABEL_247:
          operator delete(v105);
          v104 = (int64x2_t *)*((_QWORD *)this + 10);
        }
LABEL_248:
        *((_QWORD *)this + 9) = v128;
        v198 = vaddq_f64(v298, vcvtq_f64_s64(*(int64x2_t *)*((_QWORD *)this + 5)));
        v199 = vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v198), v313, v314), v198));
        if (v128 < v104)
        {
          *v128 = v199;
          v200 = v128 + 1;
          goto LABEL_266;
        }
        v201 = *v38;
        v202 = v128 - *v38;
        v203 = v202 + 1;
        if ((unint64_t)(v202 + 1) >> 60)
          goto LABEL_413;
        v204 = (char *)v104 - (char *)v201;
        if (v204 >> 3 > v203)
          v203 = v204 >> 3;
        if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFF0)
          v205 = 0xFFFFFFFFFFFFFFFLL;
        else
          v205 = v203;
        if (v205)
        {
          v309 = v199;
          if (v205 >> 60)
            goto LABEL_412;
          v206 = (char *)operator new(16 * v205);
          v38 = (int64x2_t **)((char *)this + 64);
          v207 = (int64x2_t *)&v206[16 * v202];
          v104 = (int64x2_t *)&v206[16 * v205];
          *v207 = v309;
          v200 = v207 + 1;
          if (v128 == v201)
          {
LABEL_264:
            *((_QWORD *)this + 8) = v207;
            *((_QWORD *)this + 9) = v200;
            *((_QWORD *)this + 10) = v104;
            goto LABEL_265;
          }
        }
        else
        {
          v207 = (int64x2_t *)(16 * v202);
          v104 = 0;
          *(int64x2_t *)(16 * v202) = v199;
          v200 = (int64x2_t *)(16 * v202 + 16);
          if (v128 == v201)
            goto LABEL_264;
        }
        do
        {
          v207[-1] = v128[-1];
          --v207;
          --v128;
        }
        while (v128 != v201);
        v128 = (int64x2_t *)*((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v207;
        *((_QWORD *)this + 9) = v200;
        *((_QWORD *)this + 10) = v104;
        if (v128)
        {
LABEL_265:
          operator delete(v128);
          v104 = (int64x2_t *)*((_QWORD *)this + 10);
        }
LABEL_266:
        *((_QWORD *)this + 9) = v200;
        v208 = vcvtq_f64_s64(*(int64x2_t *)*((_QWORD *)this + 5));
        *(_QWORD *)&v209.f64[0] = *(_OWORD *)&vsubq_f64(v208, v298);
        v209.f64[1] = vaddq_f64(v298, v208).f64[1];
        v210 = vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v209), v313, v314), v209));
        if (v200 < v104)
        {
          *v200 = v210;
          v211 = v200 + 1;
LABEL_284:
          *((_QWORD *)this + 9) = v211;
          goto LABEL_285;
        }
        v212 = *v38;
        v213 = v200 - *v38;
        v214 = v213 + 1;
        if ((unint64_t)(v213 + 1) >> 60)
LABEL_413:
          _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
        v215 = (char *)v104 - (char *)v212;
        if (v215 >> 3 > v214)
          v214 = v215 >> 3;
        if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFF0)
          v216 = 0xFFFFFFFFFFFFFFFLL;
        else
          v216 = v214;
        if (v216)
        {
          v310 = v210;
          if (v216 >> 60)
            goto LABEL_412;
          v217 = (char *)operator new(16 * v216);
          v38 = (int64x2_t **)((char *)this + 64);
          v218 = (int64x2_t *)&v217[16 * v213];
          v219 = &v217[16 * v216];
          *v218 = v310;
          v211 = v218 + 1;
          if (v200 == v212)
          {
LABEL_282:
            *((_QWORD *)this + 8) = v218;
            *((_QWORD *)this + 9) = v211;
            *((_QWORD *)this + 10) = v219;
LABEL_283:
            operator delete(v200);
            goto LABEL_284;
          }
        }
        else
        {
          v218 = (int64x2_t *)(16 * v213);
          v219 = 0;
          v220 = (int64x2_t *)(16 * v213);
          *v220 = v210;
          v211 = v220 + 1;
          if (v200 == v212)
            goto LABEL_282;
        }
        do
        {
          v218[-1] = v200[-1];
          --v218;
          --v200;
        }
        while (v200 != v212);
        v200 = (int64x2_t *)*((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v218;
        *((_QWORD *)this + 9) = v211;
        *((_QWORD *)this + 10) = v219;
        if (!v200)
          goto LABEL_284;
        goto LABEL_283;
      }
      v38 = (int64x2_t **)((char *)this + 64);
      if (v24 >= 1.0)
      {
        v39 = 1;
        v40 = (float64x2_t)xmmword_227BC0250;
        while (1)
        {
          v44 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)*((_QWORD *)this + 5)), v40, v316);
          v45 = vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v44), v313, v314), v44));
          v46 = *((_QWORD *)this + 10);
          if ((unint64_t)v37 >= v46)
            break;
          *v37 = v45;
          v41 = v37 + 1;
LABEL_38:
          v42 = vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL), *((double *)this + 16));
          v43 = vmulq_n_f64(v40, *((double *)this + 17));
          *(_QWORD *)&v40.f64[0] = *(_OWORD *)&vsubq_f64(v43, v42);
          v40.f64[1] = vaddq_f64(v43, v42).f64[1];
          *((_QWORD *)this + 9) = v41;
          ++v39;
          v37 = v41;
          if (v24 < (double)v39)
            goto LABEL_285;
        }
        v47 = *v299;
        v48 = v37 - *v299;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 60)
          goto LABEL_413;
        v50 = v46 - (_QWORD)v47;
        if (v50 >> 3 > v49)
          v49 = v50 >> 3;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
          v51 = 0xFFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        v305 = v40;
        if (v51)
        {
          v301 = v45;
          if (v51 >> 60)
            goto LABEL_412;
          v52 = (char *)operator new(16 * v51);
          v40 = v305;
          v53 = (int64x2_t *)&v52[16 * v48];
          *v53 = v301;
          v41 = v53 + 1;
          if (v37 == v47)
            goto LABEL_53;
        }
        else
        {
          v52 = 0;
          v53 = (int64x2_t *)(16 * v48);
          v54 = (int64x2_t *)(16 * v48);
          *v54 = v45;
          v41 = v54 + 1;
          if (v37 == v47)
            goto LABEL_53;
        }
        do
        {
          v53[-1] = v37[-1];
          --v53;
          --v37;
        }
        while (v37 != v47);
        v37 = *v299;
LABEL_53:
        *((_QWORD *)this + 8) = v53;
        *((_QWORD *)this + 9) = v41;
        *((_QWORD *)this + 10) = &v52[16 * v51];
        if (v37)
        {
          operator delete(v37);
          v40 = v305;
        }
        goto LABEL_38;
      }
LABEL_285:
      v142 = (char *)*((_QWORD *)this + 3);
      if ((unint64_t)v142 < *((_QWORD *)this + 4))
      {
        *(_QWORD *)v142 = 0;
        *((_QWORD *)v142 + 1) = 0;
        *((_QWORD *)v142 + 2) = 0;
        v144 = (_BYTE *)*((_QWORD *)this + 8);
        v143 = (_BYTE *)*((_QWORD *)this + 9);
        v145 = v143 - v144;
        v28 = (_QWORD *)((char *)this + 40);
        if (v143 != v144)
        {
          if (v145 < 0)
            _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
          goto LABEL_288;
        }
LABEL_289:
        *((_QWORD *)this + 3) = v142 + 24;
        *((_QWORD *)this + 3) = v142 + 24;
        goto LABEL_28;
      }
      *((_QWORD *)this + 3) = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(v300, (uint64_t)v38);
      v28 = (_QWORD *)((char *)this + 40);
LABEL_28:
      ++v27;
      v26 = *((_QWORD *)this + 26);
      if (v27 >= (int)((unint64_t)(*((_QWORD *)this + 27) - v26) >> 3))
        return;
    }
    if ((int)v36 < 3 || *(_DWORD *)(v33 + 76))
      goto LABEL_28;
    *((_QWORD *)this + 9) = *((_QWORD *)this + 8);
LABEL_58:
    v55 = (void *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 12) = v55;
    v56 = v35 << 28;
    v306 = v35;
    v57 = (int)(v35 >> 4);
    if (v57 > (uint64_t)(*((_QWORD *)this + 13) - (_QWORD)v55) >> 4)
    {
      if (v56 < 0)
        goto LABEL_411;
      v58 = (char *)operator new(v35 & 0xFFFFFFFFFLL);
      *((_QWORD *)this + 11) = v58;
      *((_QWORD *)this + 12) = v58;
      *((_QWORD *)this + 13) = &v58[16 * v57];
      if (v55)
        operator delete(v55);
    }
    v302 = v56;
    v59 = (v36 - 1);
    v297 = v36 - 2;
    if ((int)v36 >= 2)
    {
      for (i = 0; i != v59; ++i)
      {
        v62 = (uint64_t *)(*v28 + 16 * i);
        v64 = v62[2];
        v63 = v62[3];
        v66 = *v62;
        v65 = v62[1];
        v67 = 0.0;
        v68 = v64 - v66;
        if (v68)
          _ZF = 0;
        else
          _ZF = v63 == v65;
        v70 = 0.0;
        if (!_ZF)
        {
          v71 = (double)(v63 - v65);
          v72 = 1.0 / sqrt((double)v68 * (double)v68 + v71 * v71);
          v70 = v72 * v71;
          v67 = -((double)v68 * v72);
        }
        v74 = (double *)*((_QWORD *)this + 12);
        v73 = *((_QWORD *)this + 13);
        if ((unint64_t)v74 < v73)
        {
          *v74 = v70;
          v74[1] = v67;
          v61 = v74 + 2;
        }
        else
        {
          v75 = *v315;
          v76 = ((char *)v74 - (char *)*v315) >> 4;
          v77 = v76 + 1;
          if ((unint64_t)(v76 + 1) >> 60)
            goto LABEL_411;
          v78 = v73 - (_QWORD)v75;
          if (v78 >> 3 > v77)
            v77 = v78 >> 3;
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0)
            v79 = 0xFFFFFFFFFFFFFFFLL;
          else
            v79 = v77;
          if (v79)
          {
            if (v79 >> 60)
              goto LABEL_412;
            v80 = (char *)operator new(16 * v79);
            v81 = (double *)&v80[16 * v76];
            *v81 = v70;
            v81[1] = v67;
            v82 = (uint64_t)v81;
            if (v74 != (double *)v75)
            {
LABEL_81:
              v28 = (_QWORD *)((char *)this + 40);
              do
              {
                *(_OWORD *)(v82 - 16) = *((_OWORD *)v74 - 1);
                v82 -= 16;
                v74 -= 2;
              }
              while (v74 != (double *)v75);
              v74 = (double *)*v315;
              v83 = &v80[16 * v79];
              v61 = v81 + 2;
              *((_QWORD *)this + 11) = v82;
              *((_QWORD *)this + 12) = v81 + 2;
              *((_QWORD *)this + 13) = v83;
              if (!v74)
                goto LABEL_65;
LABEL_87:
              operator delete(v74);
              goto LABEL_65;
            }
          }
          else
          {
            v80 = 0;
            v81 = (double *)(16 * v76);
            *v81 = v70;
            v81[1] = v67;
            v82 = 16 * v76;
            if (v74 != (double *)v75)
              goto LABEL_81;
          }
          v28 = (_QWORD *)((char *)this + 40);
          v84 = &v80[16 * v79];
          v61 = v81 + 2;
          *((_QWORD *)this + 11) = v82;
          *((_QWORD *)this + 12) = v81 + 2;
          *((_QWORD *)this + 13) = v84;
          if (v74)
            goto LABEL_87;
        }
LABEL_65:
        *((_QWORD *)this + 12) = v61;
      }
    }
    if (*(_DWORD *)(v33 + 76) >= 2u)
    {
      v97 = (float64x2_t *)*((_QWORD *)this + 11);
      v99 = (char *)*((_QWORD *)this + 12);
      v100 = (_OWORD *)((char *)v97->f64 + ((v302 - 0x200000000) >> 28));
      v317[0] = *v100;
      v101 = *((_QWORD *)this + 13);
      v93 = (int64x2_t **)((char *)this + 64);
      if ((unint64_t)v99 < v101)
      {
        *(_OWORD *)v99 = *v100;
        v98 = (float64x2_t *)(v99 + 16);
        goto LABEL_152;
      }
      v115 = (v99 - (char *)v97) >> 4;
      v116 = v115 + 1;
      if ((unint64_t)(v115 + 1) >> 60)
LABEL_411:
        _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
      v117 = v101 - (_QWORD)v97;
      if (v117 >> 3 > v116)
        v116 = v117 >> 3;
      if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF0)
        v118 = 0xFFFFFFFFFFFFFFFLL;
      else
        v118 = v116;
      if (v118)
      {
        if (v118 >> 60)
          goto LABEL_412;
        v119 = (char *)operator new(16 * v118);
      }
      else
      {
        v119 = 0;
      }
      v137 = (float64x2_t *)&v119[16 * v115];
      v138 = &v119[16 * v118];
      *v137 = (float64x2_t)v317[0];
      v98 = v137 + 1;
      if (v99 == (char *)v97)
      {
        *((_QWORD *)this + 11) = v137;
        *((_QWORD *)this + 12) = v98;
        *((_QWORD *)this + 13) = v138;
        v28 = (_QWORD *)((char *)this + 40);
      }
      else
      {
        v28 = (_QWORD *)((char *)this + 40);
        do
        {
          v137[-1] = *((float64x2_t *)v99 - 1);
          --v137;
          v99 -= 16;
        }
        while (v99 != (char *)v97);
        v97 = (float64x2_t *)*((_QWORD *)this + 11);
        *((_QWORD *)this + 11) = v137;
        *((_QWORD *)this + 12) = v98;
        *((_QWORD *)this + 13) = v138;
        if (!v97)
        {
LABEL_152:
          *((_QWORD *)this + 12) = v98;
          v139 = *(_DWORD *)(v33 + 76);
          v140 = v306;
          if (v139 != 1)
          {
            if (!v139)
            {
              LODWORD(v317[0]) = v36 - 1;
              if ((int)v36 >= 1)
              {
                v141 = 0;
                do
                  ClipperLib::ClipperOffset::OffsetPoint(this, v141++, (int *)v317, *(_DWORD *)(v33 + 72));
                while ((_DWORD)v36 != v141);
              }
              v142 = (char *)*((_QWORD *)this + 3);
              if ((unint64_t)v142 >= *((_QWORD *)this + 4))
                goto LABEL_405;
              *(_QWORD *)v142 = 0;
              *((_QWORD *)v142 + 1) = 0;
              *((_QWORD *)v142 + 2) = 0;
              v144 = (_BYTE *)*((_QWORD *)this + 8);
              v143 = (_BYTE *)*((_QWORD *)this + 9);
              v145 = v143 - v144;
              if (v143 == v144)
                goto LABEL_289;
              if (v145 < 0)
                _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
              goto LABEL_288;
            }
            LODWORD(v317[0]) = 0;
            if ((int)v36 >= 3)
            {
              v153 = 2;
              do
                ClipperLib::ClipperOffset::OffsetPoint(this, v153++ - 1, (int *)v317, *(_DWORD *)(v33 + 72));
              while ((_DWORD)v36 != v153);
              v139 = *(_DWORD *)(v33 + 76);
              v140 = v306;
            }
            if (v139 != 2)
            {
              *((_QWORD *)this + 15) = 0;
              *(float64x2_t *)(*((_QWORD *)this + 11) + 16 * (int)v59) = vnegq_f64(*(float64x2_t *)(*((_QWORD *)this + 11) + 16 * (int)v59));
              v164 = v36 - 1;
              if (v139 == 3)
                ClipperLib::ClipperOffset::DoSquare(this, v164, v297);
              else
                ClipperLib::ClipperOffset::DoRound(this, v164, v297);
LABEL_315:
              if ((int)v36 < 2)
                goto LABEL_319;
              v236 = *v315;
              v237 = (v140 >> 4) - 1;
              if (v237 < 0x36)
                goto LABEL_317;
              v246 = &v236->f64[1];
              v247 = 16 * (v59 - 1);
              v248 = v59;
              v249 = (unint64_t)&v236[v59].f64[1];
              if (v249 - v247 > v249)
                goto LABEL_317;
              if (&v236[v248 + v247 / 0xFFFFFFFFFFFFFFF0] > &v236[v248])
                goto LABEL_317;
              v250 = 2 * (v36 - 2);
              if (&v236[(unint64_t)v250 / 2 + v247 / 0xFFFFFFFFFFFFFFF0] > &v236[(unint64_t)v250 / 2]
                || &v246[v250 + v247 / 0xFFFFFFFFFFFFFFF8] > &v246[v250])
              {
                goto LABEL_317;
              }
              v251 = (v140 + 0xFFFFFFFE0) & 0xFFFFFFFF0;
              v252 = v236 + 1;
              v253 = (unint64_t)&v236[1] + v251 - v248 * 16;
              v254 = (unint64_t)v246 + v251;
              v255 = (unint64_t)&v236[1].f64[1];
              v256 = (unint64_t)&v236[v248 + 1];
              v257 = (unint64_t)v246 + v251 - v248 * 16 + 16;
              v258 = (unint64_t)&v236[1] + v251;
              v259 = v253 >= v256 || v255 >= v254;
              v260 = !v259;
              v261 = v257 >= v249 || (unint64_t)v252 >= v258;
              v262 = !v261;
              v263 = v257 >= v256 || v255 >= v258;
              v264 = !v263;
              v265 = (unint64_t)v252 >= v256 || v255 >= v249;
              v266 = !v265;
              v267 = (unint64_t)v252 >= v254 || v253 >= v249;
              if (!v267 || v260 || v262 || v264 || v266)
              {
LABEL_317:
                v238 = (v36 - 1);
              }
              else
              {
                v238 = v59 - (v237 & 0xFFFFFFFFFFFFFFFELL);
                v268 = &v236[v248 - 1];
                v269 = v59 + 0xFFFFFFFFLL;
                v270 = v237 & 0xFFFFFFFFFFFFFFFELL;
                do
                {
                  f64 = v236[v269 - 1].f64;
                  v318 = vld2q_f64(f64);
                  *v268 = vnegq_f64((float64x2_t)vzip1q_s64((int64x2_t)v318.val[0], (int64x2_t)v318.val[1]));
                  v268[1] = vnegq_f64((float64x2_t)vzip2q_s64((int64x2_t)v318.val[0], (int64x2_t)v318.val[1]));
                  v268 -= 2;
                  v269 -= 2;
                  v270 -= 2;
                }
                while (v270);
                if (v237 == (v237 & 0xFFFFFFFFFFFFFFFELL))
                {
LABEL_319:
                  **v315 = vnegq_f64((*v315)[1]);
                  LODWORD(v317[0]) = v36 - 1;
                  if ((int)v36 > 2)
                  {
                    do
                    {
                      LODWORD(v59) = v59 - 1;
                      ClipperLib::ClipperOffset::OffsetPoint(this, v59, (int *)v317, *(_DWORD *)(v33 + 72));
                    }
                    while (v59 > 1);
                  }
                  v239 = *(_DWORD *)(v33 + 76);
                  if (v239 != 2)
                  {
                    LODWORD(v317[0]) = 1;
                    *((_QWORD *)this + 15) = 0;
                    if (v239 == 3)
                    {
                      ClipperLib::ClipperOffset::DoSquare(this, 0, 1);
                      v245 = (_QWORD *)*((_QWORD *)this + 3);
                      if ((unint64_t)v245 >= *((_QWORD *)this + 4))
                        goto LABEL_405;
                    }
                    else
                    {
                      ClipperLib::ClipperOffset::DoRound(this, 0, 1);
                      v245 = (_QWORD *)*((_QWORD *)this + 3);
                      if ((unint64_t)v245 >= *((_QWORD *)this + 4))
                        goto LABEL_405;
                    }
LABEL_387:
                    *v245 = 0;
                    v245[1] = 0;
                    v245[2] = 0;
                    v282 = (_BYTE *)*((_QWORD *)this + 8);
                    v281 = (_BYTE *)*((_QWORD *)this + 9);
                    v283 = v281 - v282;
                    if (v281 != v282)
                    {
                      if (v283 < 0)
                        _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
                      v284 = (char *)operator new(v281 - v282);
                      *v245 = v284;
                      v245[1] = v284;
                      v285 = &v284[16 * (v283 >> 4)];
                      v245[2] = v285;
                      memcpy(v284, v282, v283);
                      v245[1] = v285;
                    }
                    v286 = (char *)(v245 + 3);
                    *((_QWORD *)this + 3) = v245 + 3;
                    goto LABEL_406;
                  }
                  v240 = vmlsq_lane_f64(vcvtq_f64_s64(*(int64x2_t *)*((_QWORD *)this + 5)), *(float64x2_t *)*((_QWORD *)this + 11), v316, 0);
                  v241 = vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v240), v313, v314), v240));
                  v243 = (int64x2_t *)*((_QWORD *)this + 9);
                  v242 = (int64x2_t *)*((_QWORD *)this + 10);
                  if (v243 < v242)
                  {
                    *v243 = v241;
                    v244 = v243 + 1;
                    goto LABEL_385;
                  }
                  v272 = *v93;
                  v273 = v243 - *v93;
                  v274 = v273 + 1;
                  if ((unint64_t)(v273 + 1) >> 60)
                    goto LABEL_415;
                  v275 = (char *)v242 - (char *)v272;
                  if (v275 >> 3 > v274)
                    v274 = v275 >> 3;
                  if ((unint64_t)v275 >= 0x7FFFFFFFFFFFFFF0)
                    v276 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v276 = v274;
                  if (v276)
                  {
                    v311 = v241;
                    if (v276 >> 60)
                      goto LABEL_412;
                    v277 = (char *)operator new(16 * v276);
                    v278 = (int64x2_t *)&v277[16 * v273];
                    *v278 = v311;
                    v244 = v278 + 1;
                    if (v243 == v272)
                      goto LABEL_383;
                  }
                  else
                  {
                    v277 = 0;
                    v278 = (int64x2_t *)(16 * v273);
                    *(int64x2_t *)(16 * v273) = v241;
                    v244 = (int64x2_t *)(16 * v273 + 16);
                    if (v243 == v272)
                      goto LABEL_383;
                  }
                  do
                  {
                    v278[-1] = v243[-1];
                    --v278;
                    --v243;
                  }
                  while (v243 != v272);
                  v243 = *v93;
LABEL_383:
                  v242 = (int64x2_t *)&v277[16 * v276];
                  *((_QWORD *)this + 8) = v278;
                  *((_QWORD *)this + 9) = v244;
                  *((_QWORD *)this + 10) = v242;
                  if (v243)
                  {
                    operator delete(v243);
                    v242 = (int64x2_t *)*((_QWORD *)this + 10);
                  }
LABEL_385:
                  *((_QWORD *)this + 9) = v244;
                  v279 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)*((_QWORD *)this + 5)), *(float64x2_t *)*((_QWORD *)this + 11), v316);
                  v280 = vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v279), v313, v314), v279));
                  if (v244 < v242)
                  {
                    *v244 = v280;
                    *((_QWORD *)this + 9) = v244 + 1;
                    v245 = (_QWORD *)*((_QWORD *)this + 3);
                    if ((unint64_t)v245 < *((_QWORD *)this + 4))
                      goto LABEL_387;
LABEL_405:
                    v286 = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(v300, (uint64_t)v93);
LABEL_406:
                    *((_QWORD *)this + 3) = v286;
                    goto LABEL_28;
                  }
                  v287 = *v93;
                  v288 = v244 - *v93;
                  v289 = v288 + 1;
                  if ((unint64_t)(v288 + 1) >> 60)
LABEL_415:
                    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
                  v290 = (char *)v242 - (char *)v287;
                  if (v290 >> 3 > v289)
                    v289 = v290 >> 3;
                  if ((unint64_t)v290 >= 0x7FFFFFFFFFFFFFF0)
                    v291 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v291 = v289;
                  if (v291)
                  {
                    v312 = v280;
                    if (v291 >> 60)
                      goto LABEL_412;
                    v292 = (char *)operator new(16 * v291);
                    v293 = (int64x2_t *)&v292[16 * v288];
                    v294 = &v292[16 * v291];
                    *v293 = v312;
                    v295 = v293 + 1;
                    if (v244 == v287)
                      goto LABEL_407;
                  }
                  else
                  {
                    v293 = (int64x2_t *)(16 * v288);
                    v294 = 0;
                    v296 = (int64x2_t *)(16 * v288);
                    *v296 = v280;
                    v295 = v296 + 1;
                    if (v244 == v287)
                    {
LABEL_407:
                      *((_QWORD *)this + 8) = v293;
                      *((_QWORD *)this + 9) = v295;
                      *((_QWORD *)this + 10) = v294;
                      goto LABEL_408;
                    }
                  }
                  do
                  {
                    v293[-1] = v244[-1];
                    --v293;
                    --v244;
                  }
                  while (v244 != v287);
                  v244 = (int64x2_t *)*((_QWORD *)this + 8);
                  *((_QWORD *)this + 8) = v293;
                  *((_QWORD *)this + 9) = v295;
                  *((_QWORD *)this + 10) = v294;
                  if (!v244)
                  {
                    *((_QWORD *)this + 9) = v295;
                    v245 = (_QWORD *)*((_QWORD *)this + 3);
                    if ((unint64_t)v245 < *((_QWORD *)this + 4))
                      goto LABEL_387;
                    goto LABEL_405;
                  }
LABEL_408:
                  operator delete(v244);
                  *((_QWORD *)this + 9) = v295;
                  v245 = (_QWORD *)*((_QWORD *)this + 3);
                  if ((unint64_t)v245 < *((_QWORD *)this + 4))
                    goto LABEL_387;
                  goto LABEL_405;
                }
              }
              do
              {
                v163 = v238 > 1;
                v236[v238] = vnegq_f64(v236[(v238 - 1)]);
                --v238;
              }
              while (v163);
              goto LABEL_319;
            }
            v154 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((_QWORD *)this + 5) + 16 * (int)v59)), *(float64x2_t *)(*((_QWORD *)this + 11) + 16 * (int)v59), v316);
            v155 = vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v154), v313, v314), v154));
            v157 = (int64x2_t *)*((_QWORD *)this + 9);
            v156 = (int64x2_t *)*((_QWORD *)this + 10);
            if (v157 < v156)
            {
              *v157 = v155;
              v158 = v157 + 1;
              goto LABEL_294;
            }
            v165 = *v93;
            v166 = v157 - v165;
            v167 = v166 + 1;
            if ((unint64_t)(v166 + 1) >> 60)
              _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
            v168 = (char *)v156 - (char *)v165;
            if (v168 >> 3 > v167)
              v167 = v168 >> 3;
            if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFF0)
              v169 = 0xFFFFFFFFFFFFFFFLL;
            else
              v169 = v167;
            if (v169)
            {
              v303 = v155;
              if (v169 >> 60)
                goto LABEL_412;
              v170 = (char *)operator new(16 * v169);
              v171 = (int64x2_t *)&v170[16 * v166];
              *v171 = v303;
              v158 = v171 + 1;
              if (v157 == v165)
              {
LABEL_309:
                v93 = (int64x2_t **)((char *)this + 64);
                v156 = (int64x2_t *)&v170[16 * v169];
                *((_QWORD *)this + 8) = v171;
                *((_QWORD *)this + 9) = v158;
                *((_QWORD *)this + 10) = v156;
                if (!v157)
                  goto LABEL_294;
                goto LABEL_293;
              }
            }
            else
            {
              v170 = 0;
              v171 = (int64x2_t *)(16 * v166);
              v223 = (int64x2_t *)(16 * v166);
              *v223 = v155;
              v158 = v223 + 1;
              if (v157 == v165)
                goto LABEL_309;
            }
            do
            {
              v171[-1] = v157[-1];
              --v171;
              --v157;
            }
            while (v157 != v165);
            v93 = (int64x2_t **)((char *)this + 64);
            v157 = *v299;
            v156 = (int64x2_t *)&v170[16 * v169];
            *((_QWORD *)this + 8) = v171;
            *((_QWORD *)this + 9) = v158;
            *((_QWORD *)this + 10) = v156;
            if (!v157)
            {
LABEL_294:
              *((_QWORD *)this + 9) = v158;
              v224 = vmlsq_lane_f64(vcvtq_f64_s64(*(int64x2_t *)(*((_QWORD *)this + 5) + 16 * (int)v59)), *(float64x2_t *)(*((_QWORD *)this + 11) + 16 * (int)v59), v316, 0);
              v225 = vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v224), v313, v314), v224));
              if (v158 < v156)
              {
                *v158 = v225;
                v226 = v158 + 1;
LABEL_314:
                *((_QWORD *)this + 9) = v226;
                v140 = v306;
                goto LABEL_315;
              }
              v227 = *v93;
              v228 = v158 - *v93;
              v229 = v228 + 1;
              if ((unint64_t)(v228 + 1) >> 60)
                goto LABEL_415;
              v230 = (char *)v156 - (char *)v227;
              if (v230 >> 3 > v229)
                v229 = v230 >> 3;
              if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFF0)
                v231 = 0xFFFFFFFFFFFFFFFLL;
              else
                v231 = v229;
              if (v231)
              {
                v304 = v225;
                if (v231 >> 60)
                  goto LABEL_412;
                v232 = (char *)operator new(16 * v231);
                v233 = (int64x2_t *)&v232[16 * v228];
                v234 = &v232[16 * v231];
                *v233 = v304;
                v226 = v233 + 1;
                if (v158 != v227)
                {
LABEL_305:
                  v28 = (_QWORD *)((char *)this + 40);
                  do
                  {
                    v233[-1] = v158[-1];
                    --v233;
                    --v158;
                  }
                  while (v158 != v227);
                  v158 = (int64x2_t *)*((_QWORD *)this + 8);
                  *((_QWORD *)this + 8) = v233;
                  *((_QWORD *)this + 9) = v226;
                  *((_QWORD *)this + 10) = v234;
                  if (!v158)
                    goto LABEL_314;
                  goto LABEL_313;
                }
              }
              else
              {
                v233 = (int64x2_t *)(16 * v228);
                v234 = 0;
                v235 = (int64x2_t *)(16 * v228);
                *v235 = v225;
                v226 = v235 + 1;
                if (v158 != v227)
                  goto LABEL_305;
              }
              *((_QWORD *)this + 8) = v233;
              *((_QWORD *)this + 9) = v226;
              *((_QWORD *)this + 10) = v234;
              v28 = (_QWORD *)((char *)this + 40);
LABEL_313:
              operator delete(v158);
              goto LABEL_314;
            }
LABEL_293:
            operator delete(v157);
            v156 = (int64x2_t *)*((_QWORD *)this + 10);
            goto LABEL_294;
          }
          LODWORD(v317[0]) = v36 - 1;
          if ((int)v36 >= 1)
          {
            v146 = 0;
            do
              ClipperLib::ClipperOffset::OffsetPoint(this, v146++, (int *)v317, *(_DWORD *)(v33 + 72));
            while ((_DWORD)v36 != v146);
          }
          v147 = (_QWORD *)*((_QWORD *)this + 3);
          if ((unint64_t)v147 >= *((_QWORD *)this + 4))
          {
            v142 = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(v300, (uint64_t)v93);
          }
          else
          {
            *v147 = 0;
            v147[1] = 0;
            v147[2] = 0;
            v149 = (_BYTE *)*((_QWORD *)this + 8);
            v148 = (_BYTE *)*((_QWORD *)this + 9);
            v150 = v148 - v149;
            if (v148 != v149)
            {
              if (v150 < 0)
                _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
              v151 = (char *)operator new(v148 - v149);
              *v147 = v151;
              v147[1] = v151;
              v152 = &v151[16 * (v150 >> 4)];
              v147[2] = v152;
              memcpy(v151, v149, v150);
              v147[1] = v152;
              v140 = v306;
            }
            v142 = (char *)(v147 + 3);
            *((_QWORD *)this + 3) = v142;
            v93 = (int64x2_t **)((char *)this + 64);
          }
          *((_QWORD *)this + 3) = v142;
          *((_QWORD *)this + 9) = *((_QWORD *)this + 8);
          v159 = (float64x2_t *)*((_QWORD *)this + 11);
          v160 = v159[(int)v59];
          if ((int)v36 > 1)
          {
            v161 = (v140 >> 4) - 1;
            if (v161 < 0x36)
              goto LABEL_179;
            v172 = &v159->f64[1];
            v173 = 16 * (v59 - 1);
            v174 = v59;
            v175 = (unint64_t)&v159[v59].f64[1];
            if (v175 - v173 > v175)
              goto LABEL_179;
            if (&v159[v174 + v173 / 0xFFFFFFFFFFFFFFF0] > &v159[v174])
              goto LABEL_179;
            v176 = 2 * v297;
            if (&v159[(unint64_t)v176 / 2 + v173 / 0xFFFFFFFFFFFFFFF0] > &v159[(unint64_t)v176 / 2]
              || &v172[v176 + v173 / 0xFFFFFFFFFFFFFFF8] > &v172[v176])
            {
              goto LABEL_179;
            }
            v177 = (v140 + 0xFFFFFFFE0) & 0xFFFFFFFF0;
            v178 = v159 + 1;
            v179 = (unint64_t)&v159[1] + v177 - v174 * 16;
            v180 = (float64x2_t *)((char *)v172 + v177);
            v181 = (char *)&v159[1].f64[1];
            v182 = &v159[v174 + 1];
            v183 = (unint64_t)v172 + v177 - v174 * 16 + 16;
            v184 = (float64x2_t *)((char *)v159 + v177 + 16);
            _CF = v179 >= (unint64_t)v182 || v181 >= (char *)v180;
            v186 = !_CF;
            v187 = v183 >= v175 || v178 >= v184;
            v188 = !v187;
            v189 = v183 >= (unint64_t)v182 || v181 >= (char *)v184;
            v190 = !v189;
            v191 = v178 >= v182 || (unint64_t)v181 >= v175;
            v192 = !v191;
            v193 = v178 >= v180 || v179 >= v175;
            if (!v193 || v186 || v188 || v190 || v192)
            {
LABEL_179:
              v162 = (v36 - 1);
            }
            else
            {
              v162 = v59 - (v161 & 0xFFFFFFFFFFFFFFFELL);
              v194 = &v159[v174 - 1];
              v195 = v59 + 0xFFFFFFFFLL;
              v196 = v161 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v197 = v159[v195 - 1].f64;
                v319 = vld2q_f64(v197);
                *v194 = vnegq_f64((float64x2_t)vzip1q_s64((int64x2_t)v319.val[0], (int64x2_t)v319.val[1]));
                v194[1] = vnegq_f64((float64x2_t)vzip2q_s64((int64x2_t)v319.val[0], (int64x2_t)v319.val[1]));
                v194 -= 2;
                v195 -= 2;
                v196 -= 2;
              }
              while (v196);
              if (v161 == (v161 & 0xFFFFFFFFFFFFFFFELL))
                goto LABEL_181;
            }
            do
            {
              v163 = v162 > 1;
              v159[v162] = vnegq_f64(v159[(v162 - 1)]);
              --v162;
            }
            while (v163);
          }
LABEL_181:
          *v159 = vnegq_f64(v160);
          LODWORD(v317[0]) = 0;
          if ((int)v36 >= 1)
          {
            do
            {
              ClipperLib::ClipperOffset::OffsetPoint(this, v59, (int *)v317, *(_DWORD *)(v33 + 72));
              LODWORD(v59) = v59 - 1;
            }
            while ((_DWORD)v59 != -1);
            v142 = (char *)*((_QWORD *)this + 3);
          }
          if ((unint64_t)v142 >= *((_QWORD *)this + 4))
            goto LABEL_405;
          *(_QWORD *)v142 = 0;
          *((_QWORD *)v142 + 1) = 0;
          *((_QWORD *)v142 + 2) = 0;
          v144 = (_BYTE *)*((_QWORD *)this + 8);
          v143 = (_BYTE *)*((_QWORD *)this + 9);
          v145 = v143 - v144;
          if (v143 == v144)
            goto LABEL_289;
          if (v145 < 0)
            _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
LABEL_288:
          v221 = (char *)operator new(v143 - v144);
          *(_QWORD *)v142 = v221;
          *((_QWORD *)v142 + 1) = v221;
          v222 = &v221[16 * (v145 >> 4)];
          *((_QWORD *)v142 + 2) = v222;
          memcpy(v221, v144, v145);
          *((_QWORD *)v142 + 1) = v222;
          goto LABEL_289;
        }
      }
LABEL_151:
      operator delete(v97);
      goto LABEL_152;
    }
    v85 = (uint64_t *)(*v28 + 16 * (int)v59);
    v86 = *(_QWORD *)(*v28 + 8);
    v88 = *v85;
    v87 = v85[1];
    v89 = 0.0;
    v90 = *(_QWORD *)*v28 - v88;
    if (v90)
      v91 = 0;
    else
      v91 = v86 == v87;
    v92 = 0.0;
    v93 = (int64x2_t **)((char *)this + 64);
    if (!v91)
    {
      v94 = (double)(v86 - v87);
      v95 = 1.0 / sqrt((double)v90 * (double)v90 + v94 * v94);
      v92 = v95 * v94;
      v89 = -((double)v90 * v95);
    }
    v97 = (float64x2_t *)*((_QWORD *)this + 12);
    v96 = *((_QWORD *)this + 13);
    if ((unint64_t)v97 < v96)
    {
      v97->f64[0] = v92;
      v97->f64[1] = v89;
      v98 = v97 + 1;
      goto LABEL_152;
    }
    v106 = *v315;
    v107 = v97 - *v315;
    v108 = v107 + 1;
    if ((unint64_t)(v107 + 1) >> 60)
      goto LABEL_411;
    v109 = v96 - (_QWORD)v106;
    if (v109 >> 3 > v108)
      v108 = v109 >> 3;
    if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF0)
      v110 = 0xFFFFFFFFFFFFFFFLL;
    else
      v110 = v108;
    if (v110)
    {
      if (v110 >> 60)
        goto LABEL_412;
      v111 = (char *)operator new(16 * v110);
      v112 = (double *)&v111[16 * v107];
      *v112 = v92;
      v112[1] = v89;
      v113 = (uint64_t)v112;
      if (v97 != v106)
      {
LABEL_109:
        v28 = (_QWORD *)((char *)this + 40);
        do
        {
          *(float64x2_t *)(v113 - 16) = v97[-1];
          v113 -= 16;
          --v97;
        }
        while (v97 != v106);
        v97 = *v315;
        v114 = &v111[16 * v110];
        v98 = (float64x2_t *)(v112 + 2);
        *((_QWORD *)this + 11) = v113;
        *((_QWORD *)this + 12) = v112 + 2;
        *((_QWORD *)this + 13) = v114;
        if (!v97)
          goto LABEL_152;
        goto LABEL_151;
      }
    }
    else
    {
      v111 = 0;
      v112 = (double *)(16 * v107);
      *v112 = v92;
      v112[1] = v89;
      v113 = 16 * v107;
      if (v97 != v106)
        goto LABEL_109;
    }
    v28 = (_QWORD *)((char *)this + 40);
    v136 = &v111[16 * v110];
    v98 = (float64x2_t *)(v112 + 2);
    *((_QWORD *)this + 11) = v113;
    *((_QWORD *)this + 12) = v112 + 2;
    *((_QWORD *)this + 13) = v136;
    if (!v97)
      goto LABEL_152;
    goto LABEL_151;
  }
}

void sub_227B9C4D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 24) = v2;
  _Unwind_Resume(exception_object);
}

void ClipperLib::ClipperOffset::Execute(ClipperLib::ClipperOffset *this, ClipperLib::PolyTree *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (**v14)(ClipperLib::Clipper *__hidden);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t *v32;
  int64x2_t *v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  __int128 *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64x2_t *v60[3];
  void (**v61)(ClipperLib::Clipper *__hidden);
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  void *v76;
  __int128 v77;
  __int128 v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;

  v6 = *((_QWORD *)a2 + 10);
  v7 = *((_QWORD *)a2 + 11);
  if (v7 != v6)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v6 + 8 * v8);
      if (v9)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        v6 = *((_QWORD *)a2 + 10);
        v7 = *((_QWORD *)a2 + 11);
      }
      ++v8;
    }
    while (v8 < (v7 - v6) >> 3);
    if (v7 != v6)
      *((_QWORD *)a2 + 11) = v6;
  }
  v10 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) != v10)
    *((_QWORD *)a2 + 5) = v10;
  ClipperLib::ClipperOffset::FixOrientations(this);
  ClipperLib::ClipperOffset::DoOffset(this, a3);
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v77 = 0u;
  v78 = 0u;
  v61 = &off_24F04F200;
  v76 = &unk_24F04F248;
  v68 = 0;
  v69 = 0;
  v79 = 0;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v71 = 0;
  v72 = 0;
  v70 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v83 = 0;
  v11 = *((_QWORD *)this + 2);
  if (*((_QWORD *)this + 3) != v11)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      ClipperLib::ClipperBase::AddPath((uint64_t)&v76, (int64x2_t **)(v11 + v12), 0, 1);
      ++v13;
      v11 = *((_QWORD *)this + 2);
      v12 += 24;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 3) - v11) >> 3));
  }
  if (a3 <= 0.0)
  {
    v14 = v61;
    v15 = (char *)&v61 + (_QWORD)*(v61 - 3);
    v16 = *((_QWORD *)v15 + 2);
    v17 = *((_QWORD *)v15 + 3);
    if (v16 == v17)
    {
      v19 = 0;
      v21 = 0;
      v22 = 0;
      v20 = 0;
    }
    else
    {
      v18 = *(uint64_t **)(v16 + 8);
      v20 = *v18;
      v19 = v18[1];
      v21 = *v18;
      v22 = v19;
      do
      {
        v23 = *(uint64_t **)(v16 + 8);
        v24 = v23;
        do
        {
          v31 = (uint64_t *)v24[14];
          if (v31)
          {
            v32 = v24;
            do
            {
              v25 = v31;
              if (*v32 < v20)
                v20 = *v32;
              if (*v32 > v21)
                v21 = *v32;
              v31 = (uint64_t *)v31[14];
              v32 = v25;
            }
            while (v31);
          }
          else
          {
            v25 = v24;
          }
          v26 = *v25;
          if (*v25 >= v20)
            v27 = v20;
          else
            v27 = *v25;
          if (v21 > v26)
            v26 = v21;
          v29 = v25[4];
          v28 = v25[5];
          if (v29 >= v27)
            v20 = v27;
          else
            v20 = v29;
          if (v26 <= v29)
            v21 = v29;
          else
            v21 = v26;
          if (v28 < v22)
            v22 = v28;
          v30 = v24 == v23;
          v24 = *(uint64_t **)(v16 + 16);
        }
        while (v30);
        if (v19 <= v23[1])
          v19 = v23[1];
        v16 += 24;
      }
      while (v16 != v17);
    }
    v33 = (int64x2_t *)operator new(0x40uLL);
    v60[1] = v33 + 4;
    v60[2] = v33 + 4;
    v60[0] = v33;
    v33->i64[0] = v20 - 10;
    v33->i64[1] = v19 + 10;
    v33[1].i64[0] = v21 + 10;
    v33[1].i64[1] = v19 + 10;
    v33[2].i64[0] = v21 + 10;
    v33[2].i64[1] = v22 - 10;
    v33[3].i64[0] = v20 - 10;
    v33[3].i64[1] = v22 - 10;
    ClipperLib::ClipperBase::AddPath((uint64_t)&v61 + (_QWORD)*(v14 - 3), v60, 0, 1);
    v74 = 1;
    ClipperLib::Clipper::Execute((uint64_t)&v61, 1, a2, 3, 3);
    v34 = (_BYTE *)*((_QWORD *)a2 + 4);
    v35 = (_BYTE *)*((_QWORD *)a2 + 5);
    v36 = v35 - v34;
    if (((v35 - v34) & 0x7FFFFFFF8) != 8
      || (v37 = *(_QWORD **)v34,
          v38 = *(_QWORD **)(*(_QWORD *)v34 + 32),
          v39 = *(_QWORD *)(*(_QWORD *)v34 + 40) - (_QWORD)v38,
          (int)(v39 >> 3) < 1))
    {
      v45 = *((_QWORD *)a2 + 10);
      v46 = *((_QWORD *)a2 + 11);
      if (v46 != v45)
      {
        v47 = 0;
        do
        {
          v48 = *(_QWORD *)(v45 + 8 * v47);
          if (v48)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
            v45 = *((_QWORD *)a2 + 10);
            v46 = *((_QWORD *)a2 + 11);
          }
          ++v47;
        }
        while (v47 < (v46 - v45) >> 3);
        if (v46 != v45)
          *((_QWORD *)a2 + 11) = v45;
      }
      v49 = *((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 5) != v49)
        *((_QWORD *)a2 + 5) = v49;
      goto LABEL_70;
    }
    v40 = (v39 >> 3);
    if (v40 <= (uint64_t)(*((_QWORD *)a2 + 6) - (_QWORD)v34) >> 3)
    {
LABEL_67:
      *(_QWORD *)v34 = *v38;
      *(_QWORD *)(**((_QWORD **)a2 + 4) + 56) = v37[7];
      v58 = v37[4];
      if ((int)((unint64_t)(v37[5] - v58) >> 3) >= 2)
      {
        v59 = 1;
        do
        {
          ClipperLib::PolyNode::AddChild(a2, *(ClipperLib::PolyNode **)(v58 + 8 * v59++));
          v58 = v37[4];
        }
        while (v59 < (int)((unint64_t)(v37[5] - v58) >> 3));
      }
LABEL_70:
      operator delete(v33);
      goto LABEL_71;
    }
    v41 = (char *)operator new(8 * v40);
    v42 = &v41[v36 & 0xFFFFFFFFFFFFFFF8];
    v43 = v42;
    if (v35 != v34)
    {
      v44 = v35 - v34 - 8;
      if (v44 >= 0x58)
      {
        v43 = &v41[v36 & 0xFFFFFFFFFFFFFFF8];
        if ((unint64_t)(&v35[-(v36 & 0xFFFFFFFFFFFFFFF8)] - v41) >= 0x20)
        {
          v50 = (v44 >> 3) + 1;
          v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
          v52 = &v35[-v51];
          v43 = &v42[-v51];
          v53 = &v41[8 * (v36 >> 3) - 16];
          v54 = (__int128 *)(v35 - 16);
          v55 = v50 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v56 = *v54;
            *((_OWORD *)v53 - 1) = *(v54 - 1);
            *(_OWORD *)v53 = v56;
            v53 -= 32;
            v54 -= 2;
            v55 -= 4;
          }
          while (v55);
          v35 = v52;
          if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_66;
        }
      }
      else
      {
        v43 = &v41[v36 & 0xFFFFFFFFFFFFFFF8];
      }
      do
      {
        v57 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        *((_QWORD *)v43 - 1) = v57;
        v43 -= 8;
      }
      while (v35 != v34);
    }
LABEL_66:
    *((_QWORD *)a2 + 4) = v43;
    *((_QWORD *)a2 + 5) = v42;
    *((_QWORD *)a2 + 6) = &v41[8 * v40];
    operator delete(v34);
    v38 = (_QWORD *)v37[4];
    v34 = (_BYTE *)*((_QWORD *)a2 + 4);
    goto LABEL_67;
  }
  ClipperLib::Clipper::Execute((uint64_t)&v61, 1, a2, 2, 2);
LABEL_71:
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&v61);
}

void sub_227B9C9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  operator delete(v13);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a13);
  _Unwind_Resume(a1);
}

void sub_227B9CA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)va);
  _Unwind_Resume(a1);
}

void ClipperLib::ClipperOffset::OffsetPoint(ClipperLib::ClipperOffset *this, int a2, int *a3, int a4)
{
  uint64_t v7;
  float64x2_t v8;
  float64x2_t v9;
  uint64_t v10;
  float64x2_t v11;
  double v12;
  double v13;
  double v14;
  float64x2_t v15;
  int64x2_t v22;
  unint64_t v23;
  int64x2_t *v24;
  int64x2_t **v25;
  float64x2_t v26;
  int64x2_t v29;
  int64x2_t *v30;
  int64x2_t *v31;
  int64x2_t *v32;
  uint64_t v33;
  float64x2_t v34;
  double v35;
  int64x2_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  int64x2_t *v42;
  int64x2_t **v43;
  int64x2_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  int64x2_t *v50;
  char *v51;
  int64x2_t *v52;
  int64x2_t *v53;
  int64x2_t *v54;
  int64x2_t *v55;
  int64x2_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  int64x2_t *v62;
  char *v63;
  unint64_t v64;
  float64x2_t v65;
  int64x2_t v66;
  int64x2_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  int64x2_t *v73;
  char *v74;
  uint64_t i64;
  int64x2_t *v76;
  int64x2_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int64x2_t v80;
  int64x2_t v81;

  v7 = *((_QWORD *)this + 11);
  v8 = *(float64x2_t *)(v7 + 16 * a2);
  v9 = *(float64x2_t *)(v7 + 16 * *a3);
  v10 = a2;
  v11 = vmulq_f64(v9, (float64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL));
  v12 = vsubq_f64(v11, (float64x2_t)vdupq_laneq_s64((int64x2_t)v11, 1)).f64[0];
  *((double *)this + 15) = v12;
  v13 = *((double *)this + 14);
  v14 = 1.0;
  if (fabs(v13 * v12) >= 1.0)
  {
    if (v12 > 1.0 || (v14 = -1.0, v12 < -1.0))
    {
      *((double *)this + 15) = v14;
      v12 = v14;
    }
LABEL_8:
    if (v13 * v12 >= 0.0)
    {
      if (a4)
      {
        if (a4 == 1)
        {
          ClipperLib::ClipperOffset::DoRound(this, a2, *a3);
        }
        else if (a4 == 2)
        {
          v33 = *a3;
          v34 = vmulq_f64(*(float64x2_t *)(*((_QWORD *)this + 11) + 16 * v33), *(float64x2_t *)(*((_QWORD *)this + 11) + 16 * a2));
          v35 = v34.f64[0] + 1.0 + v34.f64[1];
          if (v35 >= *((double *)this + 18))
            ClipperLib::ClipperOffset::DoMiter(this, a2, v33, v35);
          else
            ClipperLib::ClipperOffset::DoSquare(this, a2, v33);
        }
      }
      else
      {
        ClipperLib::ClipperOffset::DoSquare(this, a2, *a3);
      }
      goto LABEL_81;
    }
    v25 = (int64x2_t **)((char *)this + 64);
    v26 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((_QWORD *)this + 5) + 16 * a2)), *(float64x2_t *)(*((_QWORD *)this + 11) + 16 * *a3), v13);
    __asm
    {
      FMOV            V2.2D, #0.5
      FMOV            V3.2D, #-0.5
    }
    v78 = _Q3;
    v79 = _Q2;
    v29 = vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v26), _Q3, _Q2), v26));
    v31 = (int64x2_t *)*((_QWORD *)this + 9);
    v30 = (int64x2_t *)*((_QWORD *)this + 10);
    if (v31 < v30)
    {
      *v31 = v29;
      v32 = v31 + 1;
      goto LABEL_43;
    }
    v36 = *v25;
    v37 = v31 - *v25;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 60)
      goto LABEL_88;
    v39 = (char *)v30 - (char *)v36;
    if (v39 >> 3 > v38)
      v38 = v39 >> 3;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
      v40 = 0xFFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    if (v40)
    {
      v77 = v29;
      if (v40 >> 60)
        goto LABEL_89;
      v41 = (char *)operator new(16 * v40);
      v42 = (int64x2_t *)&v41[16 * v37];
      v30 = (int64x2_t *)&v41[16 * v40];
      *v42 = v77;
      v32 = v42 + 1;
      if (v31 == v36)
        goto LABEL_41;
    }
    else
    {
      v42 = (int64x2_t *)(16 * v37);
      v30 = 0;
      v53 = (int64x2_t *)(16 * v37);
      *v53 = v29;
      v32 = v53 + 1;
      if (v31 == v36)
        goto LABEL_41;
    }
    do
    {
      v42[-1] = v31[-1];
      --v42;
      --v31;
    }
    while (v31 != v36);
    v31 = *v25;
LABEL_41:
    *((_QWORD *)this + 8) = v42;
    *((_QWORD *)this + 9) = v32;
    *((_QWORD *)this + 10) = v30;
    if (v31)
    {
      operator delete(v31);
      v30 = (int64x2_t *)*((_QWORD *)this + 10);
    }
LABEL_43:
    *((_QWORD *)this + 9) = v32;
    v54 = (int64x2_t *)(*((_QWORD *)this + 5) + 16 * v10);
    if (v32 < v30)
    {
      *v32 = *v54;
      v55 = v32 + 1;
      goto LABEL_61;
    }
    v56 = *v25;
    v57 = v32 - *v25;
    v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 60)
      goto LABEL_88;
    v59 = (char *)v30 - (char *)v56;
    if (v59 >> 3 > v58)
      v58 = v59 >> 3;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0)
      v60 = 0xFFFFFFFFFFFFFFFLL;
    else
      v60 = v58;
    if (v60)
    {
      if (v60 >> 60)
        goto LABEL_89;
      v61 = (char *)operator new(16 * v60);
    }
    else
    {
      v61 = 0;
    }
    v62 = (int64x2_t *)&v61[16 * v57];
    v63 = &v61[16 * v60];
    *v62 = *v54;
    v55 = v62 + 1;
    if (v32 == v56)
    {
      *((_QWORD *)this + 8) = v62;
      *((_QWORD *)this + 9) = v55;
      *((_QWORD *)this + 10) = v63;
    }
    else
    {
      do
      {
        v62[-1] = v32[-1];
        --v62;
        --v32;
      }
      while (v32 != v56);
      v32 = (int64x2_t *)*((_QWORD *)this + 8);
      *((_QWORD *)this + 8) = v62;
      *((_QWORD *)this + 9) = v55;
      *((_QWORD *)this + 10) = v63;
      if (!v32)
      {
LABEL_61:
        *((_QWORD *)this + 9) = v55;
        v64 = *((_QWORD *)this + 10);
        v65 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((_QWORD *)this + 5) + 16 * v10)), *(float64x2_t *)(*((_QWORD *)this + 11) + 16 * v10), *((double *)this + 14));
        v66 = vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v65), v78, v79), v65));
        if ((unint64_t)v55 < v64)
        {
          *v55 = v66;
          *((_QWORD *)this + 9) = v55 + 1;
LABEL_81:
          *a3 = a2;
          return;
        }
        v67 = *v25;
        v68 = v55 - *v25;
        v69 = v68 + 1;
        if (!((unint64_t)(v68 + 1) >> 60))
        {
          v70 = v64 - (_QWORD)v67;
          if (v70 >> 3 > v69)
            v69 = v70 >> 3;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0)
            v71 = 0xFFFFFFFFFFFFFFFLL;
          else
            v71 = v69;
          if (v71)
          {
            v81 = v66;
            if (v71 >> 60)
              goto LABEL_89;
            v72 = (char *)operator new(16 * v71);
            v73 = (int64x2_t *)&v72[16 * v68];
            v74 = &v72[16 * v71];
            *v73 = v81;
            i64 = (uint64_t)v73[1].i64;
            if (v55 == v67)
              goto LABEL_77;
          }
          else
          {
            v73 = (int64x2_t *)(16 * v68);
            v74 = 0;
            *(int64x2_t *)(16 * v68) = v66;
            i64 = 16 * v68 + 16;
            if (v55 == v67)
            {
LABEL_77:
              *((_QWORD *)this + 8) = v73;
              *((_QWORD *)this + 9) = i64;
              *((_QWORD *)this + 10) = v74;
LABEL_78:
              operator delete(v55);
LABEL_79:
              *((_QWORD *)this + 9) = i64;
              goto LABEL_81;
            }
          }
          do
          {
            v73[-1] = v55[-1];
            --v73;
            --v55;
          }
          while (v55 != v67);
          v55 = (int64x2_t *)*((_QWORD *)this + 8);
          *((_QWORD *)this + 8) = v73;
          *((_QWORD *)this + 9) = i64;
          *((_QWORD *)this + 10) = v74;
          if (!v55)
            goto LABEL_79;
          goto LABEL_78;
        }
LABEL_88:
        _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
      }
    }
    operator delete(v32);
    goto LABEL_61;
  }
  if (vaddvq_f64(vmulq_f64(v9, v8)) <= 0.0)
    goto LABEL_8;
  v15 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((_QWORD *)this + 5) + 16 * a2)), v9, v13);
  __asm
  {
    FMOV            V2.2D, #0.5
    FMOV            V3.2D, #-0.5
  }
  v22 = vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v15), _Q3, _Q2), v15));
  v24 = (int64x2_t *)*((_QWORD *)this + 9);
  v23 = *((_QWORD *)this + 10);
  if ((unint64_t)v24 < v23)
  {
    *v24 = v22;
    *((_QWORD *)this + 9) = v24 + 1;
    return;
  }
  v43 = (int64x2_t **)((char *)this + 64);
  v44 = (int64x2_t *)*((_QWORD *)this + 8);
  v45 = v24 - v44;
  v46 = v45 + 1;
  if ((unint64_t)(v45 + 1) >> 60)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v47 = v23 - (_QWORD)v44;
  if (v47 >> 3 > v46)
    v46 = v47 >> 3;
  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
    v48 = 0xFFFFFFFFFFFFFFFLL;
  else
    v48 = v46;
  if (v48)
  {
    v80 = v22;
    if (!(v48 >> 60))
    {
      v49 = (char *)operator new(16 * v48);
      v50 = (int64x2_t *)&v49[16 * v45];
      v51 = &v49[16 * v48];
      *v50 = v80;
      v52 = v50 + 1;
      if (v24 == v44)
        goto LABEL_85;
      do
      {
LABEL_83:
        v50[-1] = v24[-1];
        --v50;
        --v24;
      }
      while (v24 != v44);
      v24 = *v43;
      goto LABEL_85;
    }
LABEL_89:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v50 = (int64x2_t *)(16 * v45);
  v51 = 0;
  v76 = (int64x2_t *)(16 * v45);
  *v76 = v22;
  v52 = v76 + 1;
  if (v24 != v44)
    goto LABEL_83;
LABEL_85:
  *((_QWORD *)this + 8) = v50;
  *((_QWORD *)this + 9) = v52;
  *((_QWORD *)this + 10) = v51;
  if (v24)
    operator delete(v24);
  *((_QWORD *)this + 9) = v52;
}

void ClipperLib::ClipperOffset::DoSquare(ClipperLib::ClipperOffset *this, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  long double v7;
  double v8;
  int8x16_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  char v13;
  uint64_t **v14;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t *v20;
  uint64_t *v21;
  int64x2_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  float64x2_t v31;
  int8x16_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  int64x2_t v41;
  uint64_t i64;
  int64x2_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  int64x2_t *v49;
  char *v50;
  double v51;
  float64x2_t v52;
  int64x2_t v53;

  v5 = *((_QWORD *)this + 11);
  v6 = 16 * a2;
  v52 = *(float64x2_t *)(v5 + 16 * a3);
  v7 = atan2(*((long double *)this + 15), vaddvq_f64(vmulq_f64(*(float64x2_t *)(v5 + v6), v52)));
  v8 = tan(v7 * 0.25);
  v9 = (int8x16_t)vmulq_n_f64(v52, v8);
  v10 = (float64x2_t)vextq_s8(v9, v9, 8uLL);
  v11 = vaddq_f64(v52, v10);
  *(_QWORD *)&v10.f64[0] = *(_OWORD *)&vsubq_f64(v52, v10);
  v10.f64[1] = v11.f64[1];
  v12 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((_QWORD *)this + 5) + v6)), v10, *((double *)this + 14));
  *(int32x2_t *)&v10.f64[0] = vmovn_s64(vcltzq_f64(v12));
  v13 = BYTE4(v10.f64[0]);
  v14 = (uint64_t **)((char *)this + 64);
  _ZF = (LOBYTE(v10.f64[0]) & 1) == 0;
  v16 = -0.5;
  if (_ZF)
    v17 = 0.5;
  else
    v17 = -0.5;
  v18 = (uint64_t)(v17 + v12.f64[0]);
  if ((v13 & 1) == 0)
    v16 = 0.5;
  v19 = (uint64_t)(v16 + v12.f64[1]);
  v21 = (uint64_t *)*((_QWORD *)this + 9);
  v20 = (int64x2_t *)*((_QWORD *)this + 10);
  if (v21 < (uint64_t *)v20)
  {
    *v21 = v18;
    v21[1] = v19;
    v22 = (int64x2_t *)(v21 + 2);
    goto LABEL_23;
  }
  v23 = *v14;
  v24 = ((char *)v21 - (char *)*v14) >> 4;
  v25 = v24 + 1;
  if ((unint64_t)(v24 + 1) >> 60)
    goto LABEL_42;
  v26 = (char *)v20 - (char *)v23;
  if (v26 >> 3 > v25)
    v25 = v26 >> 3;
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
    v27 = 0xFFFFFFFFFFFFFFFLL;
  else
    v27 = v25;
  v51 = v8;
  if (v27)
  {
    if (v27 >> 60)
      goto LABEL_43;
    v28 = (char *)operator new(16 * v27);
    v8 = v51;
    v29 = (uint64_t *)&v28[16 * v24];
    v20 = (int64x2_t *)&v28[16 * v27];
    *v29 = v18;
    v29[1] = v19;
    v22 = (int64x2_t *)(v29 + 2);
    if (v21 == v23)
      goto LABEL_21;
  }
  else
  {
    v29 = (uint64_t *)(16 * v24);
    v20 = 0;
    *v29 = v18;
    v29[1] = v19;
    v22 = (int64x2_t *)(16 * v24 + 16);
    if (v21 == v23)
      goto LABEL_21;
  }
  do
  {
    *((_OWORD *)v29 - 1) = *((_OWORD *)v21 - 1);
    v29 -= 2;
    v21 -= 2;
  }
  while (v21 != v23);
  v21 = *v14;
LABEL_21:
  *((_QWORD *)this + 8) = v29;
  *((_QWORD *)this + 9) = v22;
  *((_QWORD *)this + 10) = v20;
  if (v21)
  {
    operator delete(v21);
    v8 = v51;
    v20 = (int64x2_t *)*((_QWORD *)this + 10);
  }
LABEL_23:
  *((_QWORD *)this + 9) = v22;
  v30 = 16 * a2;
  v31 = *(float64x2_t *)(*((_QWORD *)this + 11) + v30);
  v32 = (int8x16_t)vmulq_n_f64(v31, v8);
  v33 = (float64x2_t)vextq_s8(v32, v32, 8uLL);
  *(_QWORD *)&v34.f64[0] = *(_OWORD *)&vaddq_f64(v31, v33);
  v34.f64[1] = vsubq_f64(v31, v33).f64[1];
  v35 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((_QWORD *)this + 5) + v30)), v34, *((double *)this + 14));
  __asm
  {
    FMOV            V1.2D, #0.5
    FMOV            V3.2D, #-0.5
  }
  v41 = vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v35), _Q3, _Q1), v35));
  if (v22 < v20)
  {
    *v22 = v41;
    i64 = (uint64_t)v22[1].i64;
    goto LABEL_41;
  }
  v43 = (int64x2_t *)*v14;
  v44 = ((char *)v22 - (char *)*v14) >> 4;
  v45 = v44 + 1;
  if ((unint64_t)(v44 + 1) >> 60)
LABEL_42:
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v46 = (char *)v20 - (char *)v43;
  if (v46 >> 3 > v45)
    v45 = v46 >> 3;
  if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
    v47 = 0xFFFFFFFFFFFFFFFLL;
  else
    v47 = v45;
  if (v47)
  {
    v53 = v41;
    if (!(v47 >> 60))
    {
      v48 = (char *)operator new(16 * v47);
      v49 = (int64x2_t *)&v48[16 * v44];
      v50 = &v48[16 * v47];
      *v49 = v53;
      i64 = (uint64_t)v49[1].i64;
      if (v22 == v43)
        goto LABEL_39;
      goto LABEL_36;
    }
LABEL_43:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v49 = (int64x2_t *)(16 * v44);
  v50 = 0;
  *(int64x2_t *)(16 * v44) = v41;
  i64 = 16 * v44 + 16;
  if (v22 == v43)
  {
LABEL_39:
    *((_QWORD *)this + 8) = v49;
    *((_QWORD *)this + 9) = i64;
    *((_QWORD *)this + 10) = v50;
LABEL_40:
    operator delete(v22);
    goto LABEL_41;
  }
  do
  {
LABEL_36:
    v49[-1] = v22[-1];
    --v49;
    --v22;
  }
  while (v22 != v43);
  v22 = (int64x2_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v49;
  *((_QWORD *)this + 9) = i64;
  *((_QWORD *)this + 10) = v50;
  if (v22)
    goto LABEL_40;
LABEL_41:
  *((_QWORD *)this + 9) = i64;
}

void ClipperLib::ClipperOffset::DoRound(ClipperLib::ClipperOffset *this, int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  float64x2_t v7;
  int v8;
  double v9;
  double v10;
  int v11;
  int64x2_t **v12;
  int64x2_t *v13;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  int64x2_t v23;
  unint64_t v24;
  int64x2_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  int64x2_t *v31;
  int64x2_t *v32;
  int64x2_t *v33;
  unint64_t v34;
  float64x2_t v35;
  int64x2_t v36;
  uint64_t i64;
  int64x2_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  int64x2_t *v44;
  char *v45;
  int64x2_t v46;
  int8x16_t v47;
  int8x16_t v48;
  float64x2_t v49;
  float64x2_t v50;
  int64x2_t v51;

  v4 = *((_QWORD *)this + 11);
  v5 = a2;
  v49 = *(float64x2_t *)(v4 + 16 * a3);
  v6 = atan2(*((long double *)this + 15), vaddvq_f64(vmulq_f64(*(float64x2_t *)(v4 + 16 * a2), v49)));
  v7 = v49;
  v8 = 0;
  v9 = *((double *)this + 19) * fabs(v6);
  v10 = 0.5;
  if (v9 < 0.0)
    v10 = -0.5;
  if ((int)(uint64_t)(v10 + v9) <= 1)
    v11 = 1;
  else
    v11 = (uint64_t)(v10 + v9);
  v12 = (int64x2_t **)((char *)this + 64);
  v13 = (int64x2_t *)*((_QWORD *)this + 9);
  __asm
  {
    FMOV            V1.2D, #0.5
    FMOV            V0.2D, #-0.5
  }
  v47 = _Q0;
  v48 = _Q1;
  do
  {
    v22 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((_QWORD *)this + 5) + 16 * v5)), v7, *((double *)this + 14));
    v23 = vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v22), v47, v48), v22));
    v24 = *((_QWORD *)this + 10);
    if ((unint64_t)v13 < v24)
    {
      *v13++ = v23;
      goto LABEL_8;
    }
    v25 = *v12;
    v26 = v13 - *v12;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 60)
      goto LABEL_45;
    v28 = v24 - (_QWORD)v25;
    if (v28 >> 3 > v27)
      v27 = v28 >> 3;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
      v29 = 0xFFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    v50 = v7;
    if (v29)
    {
      v46 = v23;
      if (v29 >> 60)
        goto LABEL_46;
      v30 = (char *)operator new(16 * v29);
      v7 = v50;
      v31 = (int64x2_t *)&v30[16 * v26];
      *v31 = v46;
      v32 = v31 + 1;
      if (v13 == v25)
        goto LABEL_23;
      do
      {
LABEL_21:
        v31[-1] = v13[-1];
        --v31;
        --v13;
      }
      while (v13 != v25);
      v13 = *v12;
      goto LABEL_23;
    }
    v30 = 0;
    v31 = (int64x2_t *)(16 * v26);
    v33 = (int64x2_t *)(16 * v26);
    *v33 = v23;
    v32 = v33 + 1;
    if (v13 != v25)
      goto LABEL_21;
LABEL_23:
    *((_QWORD *)this + 8) = v31;
    *((_QWORD *)this + 9) = v32;
    *((_QWORD *)this + 10) = &v30[16 * v29];
    if (v13)
    {
      operator delete(v13);
      v7 = v50;
    }
    v13 = v32;
LABEL_8:
    *((_QWORD *)this + 9) = v13;
    v20 = vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL), *((double *)this + 16));
    v21 = vmulq_n_f64(v7, *((double *)this + 17));
    *(_QWORD *)&v7.f64[0] = *(_OWORD *)&vsubq_f64(v21, v20);
    v7.f64[1] = vaddq_f64(v21, v20).f64[1];
    ++v8;
  }
  while (v8 != v11);
  v34 = *((_QWORD *)this + 10);
  v35 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((_QWORD *)this + 5) + 16 * v5)), *(float64x2_t *)(*((_QWORD *)this + 11) + 16 * v5), *((double *)this + 14));
  v36 = vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v35), v47, v48), v35));
  if ((unint64_t)v13 < v34)
  {
    *v13 = v36;
    i64 = (uint64_t)v13[1].i64;
    goto LABEL_44;
  }
  v38 = *v12;
  v39 = v13 - *v12;
  v40 = v39 + 1;
  if ((unint64_t)(v39 + 1) >> 60)
LABEL_45:
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v41 = v34 - (_QWORD)v38;
  if (v41 >> 3 > v40)
    v40 = v41 >> 3;
  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
    v42 = 0xFFFFFFFFFFFFFFFLL;
  else
    v42 = v40;
  if (v42)
  {
    v51 = v36;
    if (v42 >> 60)
LABEL_46:
      std::__throw_bad_array_new_length[abi:ne180100]();
    v43 = (char *)operator new(16 * v42);
    v44 = (int64x2_t *)&v43[16 * v39];
    v45 = &v43[16 * v42];
    *v44 = v51;
    i64 = (uint64_t)v44[1].i64;
    if (v13 == v38)
    {
LABEL_42:
      *((_QWORD *)this + 8) = v44;
      *((_QWORD *)this + 9) = i64;
      *((_QWORD *)this + 10) = v45;
LABEL_43:
      operator delete(v13);
      goto LABEL_44;
    }
  }
  else
  {
    v44 = (int64x2_t *)(16 * v39);
    v45 = 0;
    *(int64x2_t *)(16 * v39) = v36;
    i64 = 16 * v39 + 16;
    if (v13 == v38)
      goto LABEL_42;
  }
  do
  {
    v44[-1] = v13[-1];
    --v44;
    --v13;
  }
  while (v13 != v38);
  v13 = (int64x2_t *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v44;
  *((_QWORD *)this + 9) = i64;
  *((_QWORD *)this + 10) = v45;
  if (v13)
    goto LABEL_43;
LABEL_44:
  *((_QWORD *)this + 9) = i64;
}

void ClipperLib::ClipperOffset::DoMiter(ClipperLib::ClipperOffset *this, int a2, int a3, double a4)
{
  float64x2_t v5;
  int64x2_t v12;
  unint64_t v13;
  int64x2_t *v14;
  int64x2_t *v15;
  int64x2_t **v16;
  int64x2_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  int64x2_t *v23;
  char *v24;
  int64x2_t *v25;
  int64x2_t v26;

  v5 = vmlaq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(*((_QWORD *)this + 5) + 16 * a2)), vaddq_f64(*(float64x2_t *)(*((_QWORD *)this + 11) + 16 * a2), *(float64x2_t *)(*((_QWORD *)this + 11) + 16 * a3)), *((double *)this + 14) / a4);
  __asm
  {
    FMOV            V2.2D, #0.5
    FMOV            V3.2D, #-0.5
  }
  v12 = vcvtq_s64_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(v5), _Q3, _Q2), v5));
  v14 = (int64x2_t *)*((_QWORD *)this + 9);
  v13 = *((_QWORD *)this + 10);
  if ((unint64_t)v14 < v13)
  {
    *v14 = v12;
    v15 = v14 + 1;
    goto LABEL_18;
  }
  v16 = (int64x2_t **)((char *)this + 64);
  v17 = (int64x2_t *)*((_QWORD *)this + 8);
  v18 = v14 - v17;
  v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 60)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v20 = v13 - (_QWORD)v17;
  if (v20 >> 3 > v19)
    v19 = v20 >> 3;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
    v21 = 0xFFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  if (v21)
  {
    v26 = v12;
    if (v21 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v22 = (char *)operator new(16 * v21);
    v23 = (int64x2_t *)&v22[16 * v18];
    v24 = &v22[16 * v21];
    *v23 = v26;
    v15 = v23 + 1;
    if (v14 == v17)
      goto LABEL_16;
    goto LABEL_14;
  }
  v23 = (int64x2_t *)(16 * v18);
  v24 = 0;
  v25 = (int64x2_t *)(16 * v18);
  *v25 = v12;
  v15 = v25 + 1;
  if (v14 != v17)
  {
    do
    {
LABEL_14:
      v23[-1] = v14[-1];
      --v23;
      --v14;
    }
    while (v14 != v17);
    v14 = *v16;
  }
LABEL_16:
  *((_QWORD *)this + 8) = v23;
  *((_QWORD *)this + 9) = v15;
  *((_QWORD *)this + 10) = v24;
  if (v14)
    operator delete(v14);
LABEL_18:
  *((_QWORD *)this + 9) = v15;
}

uint64_t *ClipperLib::ReversePaths(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  unint64_t v9;
  __int128 v10;
  BOOL v11;

  v2 = *result;
  v1 = result[1];
  if (v1 != *result)
  {
    v3 = 0;
    do
    {
      v4 = (unint64_t *)(v2 + 24 * v3);
      v5 = *v4;
      v6 = v4[1];
      v7 = (_OWORD *)(v6 - 16);
      if (v5 != v6 && (unint64_t)v7 > v5)
      {
        v9 = v5 + 16;
        do
        {
          v10 = *(_OWORD *)(v9 - 16);
          *(_OWORD *)(v9 - 16) = *v7;
          *v7-- = v10;
          v11 = v9 >= (unint64_t)v7;
          v9 += 16;
        }
        while (!v11);
        v2 = *result;
        v1 = result[1];
      }
      ++v3;
    }
    while (v3 < 0xAAAAAAAAAAAAAAABLL * ((v1 - v2) >> 3));
  }
  return result;
}

void ClipperLib::SimplifyPolygon(int64x2_t **a1, uint64_t *a2, int a3)
{
  void (**v5)(ClipperLib::Clipper *__hidden);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  v21 = 0u;
  v22 = 0u;
  v5 = &off_24F04F200;
  v20 = &unk_24F04F248;
  v12 = 0;
  v13 = 0;
  v23 = 0;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v18 = 0;
  v27 = 0;
  v19 = 1;
  ClipperLib::ClipperBase::AddPath((uint64_t)&v20, a1, 0, 1);
  ClipperLib::Clipper::Execute((uint64_t)&v5, 1, a2, a3, a3);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&v5);
}

void sub_227B9D874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a9);
  _Unwind_Resume(a1);
}

void ClipperLib::SimplifyPolygons(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  void (**v9)(ClipperLib::Clipper *__hidden);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  v25 = 0u;
  v26 = 0u;
  v9 = &off_24F04F200;
  v24 = &unk_24F04F248;
  v16 = 0;
  v17 = 0;
  v27 = 0;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v21 = 0;
  v22 = 0;
  v31 = 0;
  v23 = 1;
  v5 = *a1;
  if (a1[1] != *a1)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      ClipperLib::ClipperBase::AddPath((uint64_t)&v24, (int64x2_t **)(v5 + v7), 0, 1);
      ++v8;
      v5 = *a1;
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  }
  ClipperLib::Clipper::Execute((uint64_t)&v9, 1, a2, a3, a3);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&v9);
}

void sub_227B9D9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a9);
  _Unwind_Resume(a1);
}

void sub_227B9D9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a9);
  _Unwind_Resume(a1);
}

void ClipperLib::SimplifyPolygons(uint64_t *a1, int a2)
{
  ClipperLib::SimplifyPolygons(a1, a1, a2);
}

double ClipperLib::DistanceFromLineSqrd(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;

  v3 = a2[1];
  v4 = (double)(v3 - a3[1]);
  v5 = (double)(*a3 - *a2);
  v6 = ((double)a1[1] - (double)v3) * v5 + ((double)*a1 - (double)*a2) * v4;
  return v6 * v6 / (v4 * v4 + v5 * v5);
}

BOOL ClipperLib::SlopesNearCollinear(uint64_t *a1, uint64_t *a2, uint64_t *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  double v27;

  v5 = *a1;
  v4 = a1[1];
  v7 = *a2;
  v6 = a2[1];
  if (*a1 - *a2 >= 0)
    v8 = *a1 - *a2;
  else
    v8 = *a2 - *a1;
  v9 = v4 - v6;
  if (v4 - v6 >= 0)
    v10 = v4 - v6;
  else
    v10 = v6 - v4;
  if (v8 <= v10)
  {
    v18 = a3[1];
    if (v4 <= v6 == v4 < v18)
    {
      if (v4 >= v6 == v6 < v18)
      {
        v12 = (double)v9;
        v13 = (double)(v7 - v5);
        v14 = (double)v5;
        v15 = (double)v4;
        v16 = (double)*a3;
        v17 = (double)v18;
        goto LABEL_19;
      }
      v19 = (double)(v4 - v18);
      v20 = (double)(*a3 - v5);
      v21 = (double)v5;
      v22 = (double)v4;
      v23 = (double)v7;
      v24 = (double)v6;
    }
    else
    {
      v19 = (double)(v6 - v18);
      v20 = (double)(*a3 - v7);
      v21 = (double)v7;
      v22 = (double)v6;
      v23 = (double)v5;
      v24 = (double)v4;
    }
    return ((v23 - v21) * v19 + (v24 - v22) * v20) * ((v23 - v21) * v19 + (v24 - v22) * v20) / (v19 * v19 + v20 * v20) < a4;
  }
  v11 = *a3;
  if (v7 >= v5 != *a3 > v5)
  {
    v12 = (double)(v6 - a3[1]);
    v13 = (double)(v11 - v7);
    v14 = (double)v7;
    v15 = (double)v6;
    v16 = (double)v5;
    v17 = (double)v4;
LABEL_19:
    v27 = (v17 - v15) * v13 + (v16 - v14) * v12;
    return v27 * v27 / (v13 * v13 + v12 * v12) < a4;
  }
  v25 = v7 - v5;
  if (v7 <= v5 != v11 > v7)
  {
    v12 = (double)(v4 - a3[1]);
    v13 = (double)(*a3 - v5);
    v14 = (double)v5;
    v15 = (double)v4;
    v16 = (double)v7;
    v17 = (double)v6;
    goto LABEL_19;
  }
  v12 = (double)v9;
  v13 = (double)v25;
  v27 = ((double)v11 - (double)v5) * (double)v9 + ((double)a3[1] - (double)v4) * (double)v25;
  return v27 * v27 / (v13 * v13 + v12 * v12) < a4;
}

BOOL ClipperLib::PointsAreClose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return ((double)a2 - (double)a4) * ((double)a2 - (double)a4) + ((double)a1 - (double)a3) * ((double)a1 - (double)a3) <= a5;
}

uint64_t ClipperLib::ExcludeOp(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32) = v1;
  *(_DWORD *)v1 = 0;
  return v1;
}

__int128 **ClipperLib::CleanPolygon(__int128 **result, uint64_t a2, double a3)
{
  uint64_t v4;
  __int128 **v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  double v21;
  int *v22;
  int v23;
  int *v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v4 = (char *)result[1] - (char *)*result;
  if (v4)
  {
    v6 = result;
    v7 = v4 >> 4;
    v8 = 40 * (v4 >> 4);
    is_mul_ok(v4 >> 4, 0x28uLL);
    v9 = (_DWORD *)operator new[]();
    v10 = 0;
    do
    {
      v11 = &v9[v10 / 4];
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
      v10 += 40;
    }
    while (v8 != v10);
    if (v7 <= 1)
      v12 = 1;
    else
      v12 = v7;
    v13 = *v6;
    v14 = -v12;
    v15 = 1;
    v16 = v9;
    do
    {
      v17 = *v13++;
      *(_OWORD *)(v16 + 2) = v17;
      if (v7 == v15)
        v18 = 0;
      else
        v18 = v15;
      v19 = 10 * v18;
      *((_QWORD *)v16 + 3) = &v9[v19];
      *(_QWORD *)&v9[v19 + 8] = v16;
      *v16 = 0;
      v16 += 10;
      ++v15;
    }
    while (v14 + v15 != 1);
    if (*v9)
    {
      v20 = v9;
      goto LABEL_25;
    }
    v21 = a3 * a3;
    v22 = v9;
    while (1)
    {
      v24 = (int *)*((_QWORD *)v22 + 3);
      v20 = (int *)*((_QWORD *)v22 + 4);
      if (v24 == v20)
      {
        v20 = v22;
LABEL_25:
        if (v7 >= 3)
          v29 = v7;
        else
          v29 = 0;
        v30 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
        if (v29 <= v30)
        {
          if (v29 < v30)
            *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 16 * v29;
        }
        else
        {
          std::vector<ClipperLib::IntPoint>::__append((char **)a2, v29 - v30);
        }
        if (v7 >= 3)
        {
          v31 = 0;
          do
          {
            *(_OWORD *)(*(_QWORD *)a2 + v31) = *(_OWORD *)(v20 + 2);
            v20 = (int *)*((_QWORD *)v20 + 3);
            v31 += 16;
            --v7;
          }
          while (v7);
        }
        JUMPOUT(0x22E2A5088);
      }
      v25 = vcvtq_f64_s64(*(int64x2_t *)(v20 + 2));
      v26 = vsubq_f64(vcvtq_f64_s64(*(int64x2_t *)(v22 + 2)), v25);
      if (vaddvq_f64(vmulq_f64(v26, v26)) <= v21)
        goto LABEL_16;
      v27 = vsubq_f64(v25, vcvtq_f64_s64(*(int64x2_t *)(v24 + 2)));
      if (vaddvq_f64(vmulq_f64(v27, v27)) <= v21)
      {
        v23 = 0;
        v28 = *((_QWORD *)v24 + 4);
        *(_QWORD *)(v28 + 24) = *((_QWORD *)v24 + 3);
        *(_QWORD *)(*((_QWORD *)v24 + 3) + 32) = v28;
        *(_DWORD *)v28 = 0;
        v20 = (int *)*((_QWORD *)v22 + 4);
        *((_QWORD *)v20 + 3) = *((_QWORD *)v22 + 3);
        *(_QWORD *)(*((_QWORD *)v22 + 3) + 32) = v20;
        *v20 = 0;
        v7 -= 2;
        goto LABEL_17;
      }
      if (ClipperLib::SlopesNearCollinear((uint64_t *)v20 + 1, (uint64_t *)v22 + 1, (uint64_t *)v24 + 1, v21))
      {
LABEL_16:
        v23 = 0;
        *((_QWORD *)v20 + 3) = v24;
        *(_QWORD *)(*((_QWORD *)v22 + 3) + 32) = v20;
        *v20 = 0;
        --v7;
      }
      else
      {
        *v22 = 1;
        v23 = *v24;
        v20 = v24;
      }
LABEL_17:
      v22 = v20;
      if (v23)
        goto LABEL_25;
    }
  }
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  return result;
}

__int128 **ClipperLib::CleanPolygon(__int128 **a1, double a2)
{
  return ClipperLib::CleanPolygon(a1, (uint64_t)a1, a2);
}

__int128 **ClipperLib::CleanPolygons(__int128 **result, _QWORD *a2, double a3)
{
  __int128 *v3;
  __int128 **v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *result;
  if (result[1] != *result)
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    do
    {
      result = ClipperLib::CleanPolygon((__int128 **)((char *)v3 + v7), *a2 + v7, a3);
      ++v8;
      v3 = *v6;
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
  }
  return result;
}

__int128 **ClipperLib::CleanPolygons(__int128 **result, double a2)
{
  __int128 *v2;
  __int128 **v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *result;
  if (result[1] != *result)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    do
    {
      result = ClipperLib::CleanPolygon((__int128 **)((char *)v2 + v5), (uint64_t)v2 + v5, a2);
      ++v6;
      v2 = *v4;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * (((char *)v4[1] - (char *)*v4) >> 3));
  }
  return result;
}

void ClipperLib::Minkowski(uint64_t *a1, uint64_t *a2, char **a3, char a4, unsigned int a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t *v15;
  uint64_t v16;
  unint64_t v17;
  int64x2_t *v18;
  int64x2_t v19;
  int64x2_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  int64x2_t *v26;
  int64x2_t *v27;
  char *v28;
  void *v29;
  int64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int64x2_t *v36;
  uint64_t v37;
  unint64_t v38;
  int64x2_t *v39;
  int64x2_t v40;
  int64x2_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  int64x2_t *v47;
  int64x2_t *v48;
  char *v49;
  void *v50;
  int64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  void *v58;
  void *v59;
  char **v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int64x2_t *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float64x2_t v77;
  float64x2_t v78;
  char *v79;
  char *v80;
  __int128 v81;
  BOOL v82;
  char *v83;
  void *v84;
  int64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  void *v92;
  char *v93;
  void *v94;
  void *v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int64x2_t v101;
  int64x2_t v102;
  unint64_t v105;
  void *__p;
  int64x2_t *v107;
  char *i8;
  void *v109;
  char *v110;
  unint64_t v111;

  v97 = *a1;
  v98 = a1[1];
  v9 = *a2;
  v8 = a2[1];
  v10 = (v8 - *a2) >> 4;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  std::vector<std::vector<ClipperLib::IntPoint>>::reserve((uint64_t)&v109, v10);
  v96 = a5;
  v11 = v98 - v97;
  v12 = (v98 - v97) >> 4;
  if ((a4 & 1) == 0)
  {
    if (v8 == v9)
      goto LABEL_76;
    v34 = 0;
    if (v10 <= 1)
      v35 = 1;
    else
      v35 = v10;
    v100 = v35;
    while (1)
    {
      v36 = 0;
      __p = 0;
      v107 = 0;
      i8 = 0;
      if (v11 >= 0x10)
      {
        if ((v11 & 0x8000000000000000) != 0)
          _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
        v36 = (int64x2_t *)operator new(v11);
        __p = v36;
        v107 = v36;
        i8 = v36[v12].i8;
      }
      v37 = *a1;
      if (a1[1] != *a1)
        break;
LABEL_68:
      v49 = v110;
      if ((unint64_t)v110 >= v111)
      {
        v54 = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>((char **)&v109, (uint64_t)&__p);
        v11 = v98 - v97;
      }
      else
      {
        *(_QWORD *)v110 = 0;
        *((_QWORD *)v49 + 1) = 0;
        *((_QWORD *)v49 + 2) = 0;
        v50 = __p;
        v51 = (char *)v107 - (_BYTE *)__p;
        if (v107 != __p)
        {
          if (v51 < 0)
            _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
          v52 = (char *)operator new((char *)v107 - (_BYTE *)__p);
          *(_QWORD *)v49 = v52;
          *((_QWORD *)v49 + 1) = v52;
          v53 = &v52[16 * (v51 >> 4)];
          *((_QWORD *)v49 + 2) = v53;
          memcpy(v52, v50, v51);
          *((_QWORD *)v49 + 1) = v53;
        }
        v54 = v49 + 24;
        v11 = v98 - v97;
      }
      v110 = v54;
      if (__p)
      {
        v107 = (int64x2_t *)__p;
        operator delete(__p);
      }
      if (++v34 == v100)
        goto LABEL_76;
    }
    v38 = 0;
    while (1)
    {
      v40 = vsubq_s64(*(int64x2_t *)(*a2 + 16 * v34), *(int64x2_t *)(v37 + 16 * v38));
      if (v36 >= (int64x2_t *)i8)
        break;
      *v36 = v40;
      v39 = v36 + 1;
LABEL_51:
      v107 = v39;
      ++v38;
      v37 = *a1;
      v36 = v39;
      if (v38 >= (a1[1] - *a1) >> 4)
        goto LABEL_68;
    }
    v41 = (int64x2_t *)__p;
    v42 = ((char *)v36 - (_BYTE *)__p) >> 4;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 60)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v44 = i8 - (_BYTE *)__p;
    if ((i8 - (_BYTE *)__p) >> 3 > v43)
      v43 = v44 >> 3;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
      v45 = 0xFFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    if (v45)
    {
      v102 = v40;
      if (v45 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v46 = (char *)operator new(16 * v45);
      v47 = (int64x2_t *)&v46[16 * v42];
      *v47 = v102;
      v39 = v47 + 1;
      if (v36 == v41)
        goto LABEL_66;
    }
    else
    {
      v46 = 0;
      v47 = (int64x2_t *)(16 * v42);
      v48 = (int64x2_t *)(16 * v42);
      *v48 = v40;
      v39 = v48 + 1;
      if (v36 == v41)
        goto LABEL_66;
    }
    do
    {
      v47[-1] = v36[-1];
      --v47;
      --v36;
    }
    while (v36 != v41);
    v36 = (int64x2_t *)__p;
LABEL_66:
    __p = v47;
    v107 = v39;
    i8 = &v46[16 * v45];
    if (v36)
      operator delete(v36);
    goto LABEL_51;
  }
  if (v8 != v9)
  {
    v13 = 0;
    if (v10 <= 1)
      v14 = 1;
    else
      v14 = v10;
    v99 = v14;
    while (1)
    {
      v15 = 0;
      __p = 0;
      v107 = 0;
      i8 = 0;
      if (v11 >= 0x10)
      {
        if ((v11 & 0x8000000000000000) != 0)
          _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
        v15 = (int64x2_t *)operator new(v11);
        __p = v15;
        v107 = v15;
        i8 = v15[v12].i8;
      }
      v16 = *a1;
      if (a1[1] != *a1)
        break;
LABEL_31:
      v28 = v110;
      if ((unint64_t)v110 >= v111)
      {
        v33 = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>((char **)&v109, (uint64_t)&__p);
        v11 = v98 - v97;
      }
      else
      {
        *(_QWORD *)v110 = 0;
        *((_QWORD *)v28 + 1) = 0;
        *((_QWORD *)v28 + 2) = 0;
        v29 = __p;
        v30 = (char *)v107 - (_BYTE *)__p;
        if (v107 != __p)
        {
          if (v30 < 0)
            _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
          v31 = (char *)operator new((char *)v107 - (_BYTE *)__p);
          *(_QWORD *)v28 = v31;
          *((_QWORD *)v28 + 1) = v31;
          v32 = &v31[16 * (v30 >> 4)];
          *((_QWORD *)v28 + 2) = v32;
          memcpy(v31, v29, v30);
          *((_QWORD *)v28 + 1) = v32;
        }
        v33 = v28 + 24;
        v11 = v98 - v97;
      }
      v110 = v33;
      if (__p)
      {
        v107 = (int64x2_t *)__p;
        operator delete(__p);
      }
      if (++v13 == v99)
        goto LABEL_76;
    }
    v17 = 0;
    while (1)
    {
      v19 = vaddq_s64(*(int64x2_t *)(v16 + 16 * v17), *(int64x2_t *)(*a2 + 16 * v13));
      if (v15 >= (int64x2_t *)i8)
        break;
      *v15 = v19;
      v18 = v15 + 1;
LABEL_14:
      v107 = v18;
      ++v17;
      v16 = *a1;
      v15 = v18;
      if (v17 >= (a1[1] - *a1) >> 4)
        goto LABEL_31;
    }
    v20 = (int64x2_t *)__p;
    v21 = ((char *)v15 - (_BYTE *)__p) >> 4;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v23 = i8 - (_BYTE *)__p;
    if ((i8 - (_BYTE *)__p) >> 3 > v22)
      v22 = v23 >> 3;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
      v24 = 0xFFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      v101 = v19;
      if (v24 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v25 = (char *)operator new(16 * v24);
      v26 = (int64x2_t *)&v25[16 * v21];
      *v26 = v101;
      v18 = v26 + 1;
      if (v15 == v20)
        goto LABEL_29;
    }
    else
    {
      v25 = 0;
      v26 = (int64x2_t *)(16 * v21);
      v27 = (int64x2_t *)(16 * v21);
      *v27 = v19;
      v18 = v27 + 1;
      if (v15 == v20)
        goto LABEL_29;
    }
    do
    {
      v26[-1] = v15[-1];
      --v26;
      --v15;
    }
    while (v15 != v20);
    v15 = (int64x2_t *)__p;
LABEL_29:
    __p = v26;
    v107 = v18;
    i8 = &v25[16 * v24];
    if (v15)
      operator delete(v15);
    goto LABEL_14;
  }
LABEL_76:
  v56 = *a3;
  v55 = a3[1];
  if (v55 != *a3)
  {
    v57 = a3[1];
    do
    {
      v59 = (void *)*((_QWORD *)v57 - 3);
      v57 -= 24;
      v58 = v59;
      if (v59)
      {
        *((_QWORD *)v55 - 2) = v58;
        operator delete(v58);
      }
      v55 = v57;
    }
    while (v57 != v56);
  }
  a3[1] = v56;
  std::vector<std::vector<ClipperLib::IntPoint>>::reserve((uint64_t)a3, v10 + v96 + (v10 + v96) * v12);
  v105 = v10 - (v96 ^ 1);
  v60 = a3;
  if (v105 && v98 != v97)
  {
    v61 = 0;
    if (v12 <= 1)
      v62 = 1;
    else
      v62 = (v98 - v97) >> 4;
    do
    {
      v63 = 0;
      v64 = v61 + 1;
      do
      {
        __p = 0;
        v107 = 0;
        i8 = 0;
        v65 = (int64x2_t *)operator new(0x40uLL);
        __p = v65;
        v107 = v65;
        i8 = v65[4].i8;
        v66 = 24 * (v61 % v10);
        v67 = (char *)v109;
        v68 = (char *)v109;
        v69 = 16 * (v63 % v12);
        *v65 = *(int64x2_t *)(*(_QWORD *)((char *)v109 + v66) + v69);
        v107 = v65 + 1;
        v70 = 24 * (v64 % v10);
        v65[1] = *(int64x2_t *)(*(_QWORD *)&v67[v70] + v69);
        v107 = v65 + 2;
        v71 = 16 * (++v63 % v12);
        v65[2] = *(int64x2_t *)(*(_QWORD *)&v67[v70] + v71);
        v107 = v65 + 3;
        v65[3] = *(int64x2_t *)(*(_QWORD *)&v68[v66] + v71);
        v107 = v65 + 4;
        v72 = (char *)&v65[4] - (_BYTE *)__p;
        if ((int)(v72 >> 4) >= 3)
        {
          v73 = 0;
          v74 = (v72 >> 4) - 1;
          v75 = (v72 >> 4);
          v76 = 0.0;
          do
          {
            v77 = vcvtq_f64_s64(*((int64x2_t *)__p + (int)v74));
            v78 = vcvtq_f64_s64(*((int64x2_t *)__p + v73));
            v76 = vmulq_laneq_f64(vaddq_f64(v77, v78), vsubq_f64(v77, v78), 1).f64[0] + v76;
            LODWORD(v74) = v73++;
          }
          while (v75 != v73);
          if (v76 * -0.5 < 0.0 && __p != &v65[4])
          {
            v79 = v65[3].i8;
            if (&v65[3] > __p)
            {
              v80 = (char *)__p + 16;
              do
              {
                v81 = *((_OWORD *)v80 - 1);
                *((_OWORD *)v80 - 1) = *(_OWORD *)v79;
                *(_OWORD *)v79 = v81;
                v79 -= 16;
                v82 = v80 >= v79;
                v80 += 16;
              }
              while (!v82);
            }
          }
        }
        v83 = v60[1];
        if (v83 >= v60[2])
        {
          v89 = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(v60, (uint64_t)&__p);
        }
        else
        {
          *(_QWORD *)v83 = 0;
          *((_QWORD *)v83 + 1) = 0;
          *((_QWORD *)v83 + 2) = 0;
          v84 = __p;
          v85 = (char *)v107 - (_BYTE *)__p;
          if (v107 != __p)
          {
            if (v85 < 0)
              _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
            v86 = v62;
            v87 = (char *)operator new((char *)v107 - (_BYTE *)__p);
            *(_QWORD *)v83 = v87;
            *((_QWORD *)v83 + 1) = v87;
            v88 = &v87[16 * (v85 >> 4)];
            *((_QWORD *)v83 + 2) = v88;
            memcpy(v87, v84, v85);
            *((_QWORD *)v83 + 1) = v88;
            v62 = v86;
          }
          v89 = v83 + 24;
          v60 = a3;
          a3[1] = v83 + 24;
        }
        v60[1] = v89;
        if (__p)
        {
          v107 = (int64x2_t *)__p;
          operator delete(__p);
        }
      }
      while (v63 != v62);
      ++v61;
    }
    while (v64 != v105);
  }
  v90 = (char *)v109;
  if (v109)
  {
    v91 = v110;
    v92 = v109;
    if (v110 != v109)
    {
      v93 = v110;
      do
      {
        v95 = (void *)*((_QWORD *)v93 - 3);
        v93 -= 24;
        v94 = v95;
        if (v95)
        {
          *((_QWORD *)v91 - 2) = v94;
          operator delete(v94);
        }
        v91 = v93;
      }
      while (v93 != v90);
      v92 = v109;
    }
    v110 = v90;
    operator delete(v92);
  }
}

void sub_227B9E760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::vector<std::vector<ClipperLib::IntPoint>>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227B9E774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;
  void *v25;

  v25 = *(void **)v23;
  if (*(_QWORD *)v23)
  {
    *(_QWORD *)(v23 + 8) = v25;
    operator delete(v25);
  }
  a23 = v23;
  if (__p)
    operator delete(__p);
  std::vector<std::vector<ClipperLib::IntPoint>>::~vector[abi:ne180100](&a22);
  _Unwind_Resume(a1);
}

void ClipperLib::MinkowskiSum(uint64_t *a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  void (**v8)(ClipperLib::Clipper *__hidden);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;

  ClipperLib::Minkowski(a1, a2, (char **)a3, 1, a4);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v24 = 0u;
  v25 = 0u;
  v8 = &off_24F04F200;
  v23 = &unk_24F04F248;
  v15 = 0;
  v16 = 0;
  v26 = 0;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v30 = 0;
  v5 = *(char **)a3;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)a3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      ClipperLib::ClipperBase::AddPath((uint64_t)&v23, (int64x2_t **)&v5[v6], 0, 1);
      ++v7;
      v5 = *(char **)a3;
      v6 += 24;
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  }
  ClipperLib::Clipper::Execute((uint64_t)&v8, 1, (uint64_t *)a3, 1, 1);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&v8);
}

void sub_227B9E91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a9);
  _Unwind_Resume(a1);
}

void sub_227B9E930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a9);
  _Unwind_Resume(a1);
}

void ClipperLib::TranslatePath(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  int64x2_t v20;
  unint64_t v21;
  int64x2_t v22;
  const double *v23;
  double *v24;
  unint64_t v25;
  const double *v26;
  double *v27;
  int64x2_t v28;
  unint64_t v29;
  uint64_t v30;
  int64x2_t *v31;
  int64x2_t *v32;
  int64x2_t v33;
  float64x2x2_t v34;
  float64x2x2_t v35;
  float64x2x2_t v36;

  v8 = *a1;
  v9 = (uint64_t)(a1[1] - *a1) >> 4;
  v10 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
  if (v9 <= v10)
  {
    if (v9 < v10)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 16 * v9;
  }
  else
  {
    std::vector<ClipperLib::IntPoint>::__append((char **)a2, v9 - v10);
    v8 = *a1;
  }
  v11 = a1[1];
  if (v11 != v8)
  {
    v12 = (uint64_t)(v11 - v8) >> 4;
    v13 = *(char **)a2;
    if (v12 <= 1)
      v12 = 1;
    if (v12 < 0x10
      || ((v14 = 16 * (v12 - 1), v15 = &v13[v14], v16 = (unint64_t)&v13[v14 + 8], v15 >= v13)
        ? (v17 = v16 >= (unint64_t)(v13 + 8))
        : (v17 = 0),
          v17 ? (v18 = (v12 - 1) >> 60 == 0) : (v18 = 0),
          !v18
       || ((unint64_t)v13 < v8 + 16 * v12 ? (v19 = v8 >= (unint64_t)&v13[16 * v12]) : (v19 = 1), !v19)))
    {
      v21 = 0;
LABEL_27:
      v28.i64[0] = a3;
      v28.i64[1] = a4;
      v29 = v12 - v21;
      v30 = 16 * v21;
      v31 = (int64x2_t *)(v8 + v30);
      v32 = (int64x2_t *)&v13[v30];
      do
      {
        v33 = *v31++;
        *v32++ = vaddq_s64(v33, v28);
        --v29;
      }
      while (v29);
      return;
    }
    v20 = vdupq_n_s64(a3);
    v21 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    v22 = vdupq_n_s64(a4);
    v23 = (const double *)(v8 + 32);
    v24 = (double *)(v13 + 32);
    v25 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v26 = v23 - 4;
      v34 = vld2q_f64(v26);
      v35 = vld2q_f64(v23);
      v36.val[0] = (float64x2_t)vaddq_s64((int64x2_t)v34.val[0], v20);
      v36.val[1] = (float64x2_t)vaddq_s64((int64x2_t)v34.val[1], v22);
      v27 = v24 - 4;
      vst2q_f64(v27, v36);
      v34.val[0] = (float64x2_t)vaddq_s64((int64x2_t)v35.val[0], v20);
      v34.val[1] = (float64x2_t)vaddq_s64((int64x2_t)v35.val[1], v22);
      vst2q_f64(v24, v34);
      v24 += 8;
      v23 += 8;
      v25 -= 4;
    }
    while (v25);
    if (v12 != v21)
      goto LABEL_27;
  }
}

void ClipperLib::MinkowskiSum(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v4;
  unint64_t i;
  void *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t *v14;
  int64x2_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  int64x2_t v26;
  unint64_t v27;
  int64x2_t v28;
  const double *v29;
  double *v30;
  unint64_t v31;
  const double *v32;
  double *v33;
  unint64_t v34;
  uint64_t v35;
  int64x2_t *v36;
  int64x2_t *v37;
  int64x2_t v38;
  char *v39;
  char *v40;
  void *v41;
  void *v42;
  int64x2_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *__p;
  char *v49;
  uint64_t v50;
  void (**v51)(ClipperLib::Clipper *__hidden);
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  void *v66;
  __int128 v67;
  __int128 v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  float64x2x2_t v74;
  float64x2x2_t v75;
  float64x2x2_t v76;

  v70 = 0;
  v71 = 0;
  v72 = 0;
  v67 = 0u;
  v68 = 0u;
  v51 = &off_24F04F200;
  v66 = &unk_24F04F248;
  v58 = 0;
  v59 = 0;
  v69 = 0;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v61 = 0;
  v62 = 0;
  v60 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v73 = 0;
  v4 = *a2;
  if (a2[1] != *a2)
  {
    for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3); ++i)
    {
      __p = 0;
      v49 = 0;
      v50 = 0;
      ClipperLib::Minkowski(a1, (uint64_t *)(v4 + 24 * i), (char **)&__p, 1, a4);
      v10 = v49;
      if (v49 != __p)
      {
        v11 = 0;
        v12 = 0;
        v13 = (char *)&v51 + (_QWORD)*(v51 - 3);
        v10 = (char *)__p;
        do
        {
          ClipperLib::ClipperBase::AddPath((uint64_t)v13, (int64x2_t **)&v10[v11], 0, 1);
          ++v12;
          v10 = (char *)__p;
          v11 += 24;
        }
        while (v12 < 0xAAAAAAAAAAAAAAABLL * ((v49 - (_BYTE *)__p) >> 3));
      }
      if (!a4)
        goto LABEL_39;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v14 = (unint64_t *)(*a2 + 24 * i);
      v15 = *(int64x2_t *)*a1;
      v16 = *v14;
      v17 = v14[1];
      if (v17 != *v14)
      {
        v44 = *(int64x2_t *)*a1;
        std::vector<ClipperLib::IntPoint>::__append((char **)&v45, (uint64_t)(v17 - *v14) >> 4);
        v16 = *v14;
        v17 = v14[1];
        v15 = v44;
      }
      if (v17 != v16)
      {
        v18 = (uint64_t)(v17 - v16) >> 4;
        v19 = (char *)v45;
        if (v18 <= 1)
          v18 = 1;
        if (v18 >= 0x10
          && ((v20 = 16 * (v18 - 1), v21 = (char *)v45 + v20, v22 = (char *)v45 + v20 + 8, v21 >= v45)
            ? (v23 = v22 >= (char *)v45 + 8)
            : (v23 = 0),
              v23 ? (v24 = (v18 - 1) >> 60 == 0) : (v24 = 0),
              v24
           && ((unint64_t)v45 < v16 + 16 * v18 ? (v25 = v16 >= (unint64_t)v45 + 16 * v18) : (v25 = 1), v25)))
        {
          v26 = vdupq_lane_s64(v15.i64[0], 0);
          v27 = v18 & 0xFFFFFFFFFFFFFFFCLL;
          v28 = vdupq_laneq_s64(v15, 1);
          v29 = (const double *)(v16 + 32);
          v30 = (double *)((char *)v45 + 32);
          v31 = v18 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v32 = v29 - 4;
            v74 = vld2q_f64(v32);
            v75 = vld2q_f64(v29);
            v76.val[0] = (float64x2_t)vaddq_s64((int64x2_t)v74.val[0], v26);
            v76.val[1] = (float64x2_t)vaddq_s64((int64x2_t)v74.val[1], v28);
            v33 = v30 - 4;
            vst2q_f64(v33, v76);
            v74.val[0] = (float64x2_t)vaddq_s64((int64x2_t)v75.val[0], v26);
            v74.val[1] = (float64x2_t)vaddq_s64((int64x2_t)v75.val[1], v28);
            vst2q_f64(v30, v74);
            v30 += 8;
            v29 += 8;
            v31 -= 4;
          }
          while (v31);
          if (v18 == v27)
            goto LABEL_36;
        }
        else
        {
          v27 = 0;
        }
        v34 = v18 - v27;
        v35 = 16 * v27;
        v36 = (int64x2_t *)&v19[v35];
        v37 = (int64x2_t *)(v16 + v35);
        do
        {
          v38 = *v37++;
          *v36++ = vaddq_s64(v38, v15);
          --v34;
        }
        while (v34);
      }
LABEL_36:
      ClipperLib::ClipperBase::AddPath((uint64_t)&v51 + (_QWORD)*(v51 - 3), (int64x2_t **)&v45, 1, 1);
      if (v45)
      {
        v46 = v45;
        operator delete(v45);
      }
      v10 = (char *)__p;
LABEL_39:
      if (v10)
      {
        v39 = v49;
        v9 = v10;
        if (v49 != v10)
        {
          v40 = v49;
          do
          {
            v42 = (void *)*((_QWORD *)v40 - 3);
            v40 -= 24;
            v41 = v42;
            if (v42)
            {
              *((_QWORD *)v39 - 2) = v41;
              operator delete(v41);
            }
            v39 = v40;
          }
          while (v40 != v10);
          v9 = __p;
        }
        v49 = v10;
        operator delete(v9);
      }
      v4 = *a2;
    }
  }
  ClipperLib::Clipper::Execute((uint64_t)&v51, 1, a3, 1, 1);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&v51);
}

void sub_227B9EDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)va);
  _Unwind_Resume(a1);
}

void sub_227B9EDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
  {
    operator delete(__p);
    std::vector<std::vector<ClipperLib::IntPoint>>::~vector[abi:ne180100](&a17);
    ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a20);
    _Unwind_Resume(a1);
  }
  std::vector<std::vector<ClipperLib::IntPoint>>::~vector[abi:ne180100](&a17);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a20);
  _Unwind_Resume(a1);
}

void ClipperLib::MinkowskiDiff(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  void (**v7)(ClipperLib::Clipper *__hidden);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;

  ClipperLib::Minkowski(a1, a2, (char **)a3, 0, 1u);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v23 = 0u;
  v24 = 0u;
  v7 = &off_24F04F200;
  v22 = &unk_24F04F248;
  v14 = 0;
  v15 = 0;
  v25 = 0;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v29 = 0;
  v4 = *(char **)a3;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)a3)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ClipperLib::ClipperBase::AddPath((uint64_t)&v22, (int64x2_t **)&v4[v5], 0, 1);
      ++v6;
      v4 = *(char **)a3;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3));
  }
  ClipperLib::Clipper::Execute((uint64_t)&v7, 1, (uint64_t *)a3, 1, 1);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&v7);
}

void sub_227B9EF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a9);
  _Unwind_Resume(a1);
}

void sub_227B9EF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a9);
  _Unwind_Resume(a1);
}

char *ClipperLib::AddPolyNodeToPaths(char *result, uint64_t a2, uint64_t a3)
{
  char *v5;
  _QWORD *v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 != 1)
  {
    v5 = result;
    if (((_DWORD)a2 != 2 || !result[68]) && *((_QWORD *)result + 1) != *((_QWORD *)result + 2))
    {
      v6 = *(_QWORD **)(a3 + 8);
      if ((unint64_t)v6 >= *(_QWORD *)(a3 + 16))
      {
        result = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>((char **)a3, (uint64_t)(result + 8));
      }
      else
      {
        *v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        v8 = (_BYTE *)*((_QWORD *)result + 1);
        v7 = (_BYTE *)*((_QWORD *)result + 2);
        v9 = v7 - v8;
        if (v7 != v8)
        {
          if (v9 < 0)
            _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
          v10 = (char *)operator new(v7 - v8);
          *v6 = v10;
          v6[1] = v10;
          v11 = &v10[16 * (v9 >> 4)];
          v6[2] = v11;
          memcpy(v10, v8, v9);
          v6[1] = v11;
        }
        result = (char *)(v6 + 3);
        *(_QWORD *)(a3 + 8) = v6 + 3;
      }
      *(_QWORD *)(a3 + 8) = result;
    }
    v12 = *((_QWORD *)v5 + 4);
    if ((int)((unint64_t)(*((_QWORD *)v5 + 5) - v12) >> 3) >= 1)
    {
      v13 = 0;
      do
      {
        result = (char *)ClipperLib::AddPolyNodeToPaths(*(_QWORD *)(v12 + 8 * v13++), a2, a3);
        v12 = *((_QWORD *)v5 + 4);
      }
      while (v13 < (int)((unint64_t)(*((_QWORD *)v5 + 5) - v12) >> 3));
    }
  }
  return result;
}

void sub_227B9F094(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *ClipperLib::PolyTreeToPaths(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    v6 = a2[1];
    do
    {
      v8 = *(void **)(v6 - 24);
      v6 -= 24;
      v7 = v8;
      if (v8)
      {
        *(_QWORD *)(v4 - 16) = v7;
        operator delete(v7);
      }
      v4 = v6;
    }
    while (v6 != v5);
    a2[1] = v5;
  }
  v9 = *(_QWORD **)(a1 + 80);
  v10 = (*(_QWORD *)(a1 + 88) - (_QWORD)v9) >> 3;
  if ((int)v10 >= 1)
    LODWORD(v10) = v10 - (**(_QWORD **)(a1 + 32) != *v9);
  std::vector<std::vector<ClipperLib::IntPoint>>::reserve((uint64_t)a2, (int)v10);
  return ClipperLib::AddPolyNodeToPaths((char *)a1, 0, (uint64_t)a2);
}

char *ClipperLib::ClosedPathsFromPolyTree(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    v6 = a2[1];
    do
    {
      v8 = *(void **)(v6 - 24);
      v6 -= 24;
      v7 = v8;
      if (v8)
      {
        *(_QWORD *)(v4 - 16) = v7;
        operator delete(v7);
      }
      v4 = v6;
    }
    while (v6 != v5);
    a2[1] = v5;
  }
  v9 = *(_QWORD **)(a1 + 80);
  v10 = (*(_QWORD *)(a1 + 88) - (_QWORD)v9) >> 3;
  if ((int)v10 >= 1)
    LODWORD(v10) = v10 - (**(_QWORD **)(a1 + 32) != *v9);
  std::vector<std::vector<ClipperLib::IntPoint>>::reserve((uint64_t)a2, (int)v10);
  return ClipperLib::AddPolyNodeToPaths((char *)a1, 2, (uint64_t)a2);
}

void ClipperLib::OpenPathsFromPolyTree(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;

  v5 = *(char **)a2;
  v4 = *(char **)(a2 + 8);
  if (v4 != *(char **)a2)
  {
    v6 = *(char **)(a2 + 8);
    do
    {
      v8 = (void *)*((_QWORD *)v6 - 3);
      v6 -= 24;
      v7 = v8;
      if (v8)
      {
        *((_QWORD *)v4 - 2) = v7;
        operator delete(v7);
      }
      v4 = v6;
    }
    while (v6 != v5);
    *(_QWORD *)(a2 + 8) = v5;
  }
  v9 = *(_QWORD **)(a1 + 80);
  v10 = (*(_QWORD *)(a1 + 88) - (_QWORD)v9) >> 3;
  if ((int)v10 >= 1)
    LODWORD(v10) = v10 - (**(_QWORD **)(a1 + 32) != *v9);
  std::vector<std::vector<ClipperLib::IntPoint>>::reserve(a2, (int)v10);
  v12 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if ((int)((unint64_t)(v11 - v12) >> 3) >= 1)
  {
    v13 = 0;
    do
    {
      v15 = *(_QWORD *)(v12 + 8 * v13);
      if (*(_BYTE *)(v15 + 68))
      {
        v16 = *(_QWORD **)(a2 + 8);
        if ((unint64_t)v16 >= *(_QWORD *)(a2 + 16))
        {
          v14 = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>((char **)a2, v15 + 8);
        }
        else
        {
          *v16 = 0;
          v16[1] = 0;
          v16[2] = 0;
          v18 = *(_BYTE **)(v15 + 8);
          v17 = *(_BYTE **)(v15 + 16);
          v19 = v17 - v18;
          if (v17 != v18)
          {
            if (v19 < 0)
              _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
            v20 = (char *)operator new(v17 - v18);
            *v16 = v20;
            v16[1] = v20;
            v21 = &v20[16 * (v19 >> 4)];
            v16[2] = v21;
            memcpy(v20, v18, v19);
            v16[1] = v21;
          }
          v14 = (char *)(v16 + 3);
          *(_QWORD *)(a2 + 8) = v16 + 3;
        }
        *(_QWORD *)(a2 + 8) = v14;
        v12 = *(_QWORD *)(a1 + 32);
        v11 = *(_QWORD *)(a1 + 40);
      }
      ++v13;
    }
    while (v13 < (int)((unint64_t)(v11 - v12) >> 3));
  }
}

void sub_227B9F358(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

_QWORD *ClipperLib::operator<<(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)",", 1);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)")", 1);
  return a1;
}

_QWORD *ClipperLib::operator<<(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = (v3 - *a2) >> 4;
    v5 = v4 - 1;
    if (v4 != 1)
    {
      v6 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
        v7 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)",", 1);
        v8 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"), ", 3);
        v6 += 16;
        --v5;
      }
      while (v5);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)",", 1);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")\n", 2);
  }
  return a1;
}

_QWORD *ClipperLib::operator<<(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  if (a2[1] != *a2)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ClipperLib::operator<<(a1, (_QWORD *)(v3 + v5));
      ++v6;
      v3 = *a2;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n", 1);
  return a1;
}

uint64_t ClipperLib::clipperException::what(ClipperLib::clipperException *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

char *std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  void *v22;
  void *v23;
  char *v25;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3) + 1;
  if (v6 > 0xAAAAAAAAAAAAAAALL)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[8 * (v5 >> 3)];
  v11 = &v9[24 * v8];
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  v12 = *(const void **)a2;
  v13 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v13)
  {
    v14 = &v9[v5];
    if (v13 < 0)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v15 = (char *)operator new(v13);
    *(_QWORD *)v10 = v15;
    v16 = &v15[16 * (v13 >> 4)];
    *((_QWORD *)v14 + 1) = v15;
    *((_QWORD *)v14 + 2) = v16;
    memcpy(v15, v12, v13);
    *((_QWORD *)v14 + 1) = v16;
  }
  v17 = v10 + 24;
  v25 = v10 + 24;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v17;
    a1[2] = v11;
  }
  else
  {
    do
    {
      v18 = v10;
      *((_QWORD *)v10 - 2) = 0;
      *((_QWORD *)v10 - 1) = 0;
      v19 = *(_OWORD *)(v3 - 24);
      v3 -= 24;
      *(_OWORD *)(v10 - 24) = v19;
      v10 -= 24;
      *((_QWORD *)v18 - 1) = *((_QWORD *)v3 + 2);
      *(_QWORD *)v3 = 0;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
    }
    while (v3 != v4);
    v20 = *a1;
    v3 = a1[1];
    v17 = v25;
    *a1 = v10;
    a1[1] = v25;
    a1[2] = v11;
    if (v3 != v20)
    {
      v21 = v3;
      do
      {
        v23 = (void *)*((_QWORD *)v21 - 3);
        v21 -= 24;
        v22 = v23;
        if (v23)
        {
          *((_QWORD *)v3 - 2) = v22;
          operator delete(v22);
        }
        v3 = v21;
      }
      while (v21 != v20);
      v3 = v20;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_227B9F840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 24;
        v4 = *(void **)(v2 - 24);
        *(_QWORD *)(a1 + 16) = v2 - 24;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 16) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *,false>(__n128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5, __n128 result)
{
  __n128 *v10;
  __int128 *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 *v17;
  int64_t v18;
  int64_t v19;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  uint64_t v27;
  __n128 v28;
  __n128 v29;
  __int128 *v30;
  unint64_t v31;
  __n128 *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __n128 v40;
  __n128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __n128 *v45;
  __n128 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  __n128 v52;
  __n128 v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  __n128 v57;
  int64_t v58;
  int64_t v59;
  __n128 v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  __int128 *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  BOOL v73;
  __n128 v74;
  uint64_t v75;
  unint64_t v76;
  __int128 *v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  __n128 *v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  __n128 *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 *v91;
  BOOL v93;
  uint64_t v94;
  __n128 *v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  int64_t v103;
  __int128 *v104;
  int64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __n128 v110;
  __n128 v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  __int128 v119;
  __n128 v120;
  __int128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;

LABEL_1:
  v10 = (__n128 *)((char *)a2 - 24);
  v11 = a2 - 3;
  v12 = (uint64_t *)a2 - 9;
  v13 = (unint64_t)a1;
  while (2)
  {
    a1 = (__n128 *)v13;
    v14 = (uint64_t)a2 - v13;
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v13) >> 3);
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        if (*(_QWORD *)v13 < (int64_t)v10->n128_u64[0])
          goto LABEL_100;
        return result;
      case 3uLL:
        v83 = (__n128 *)(v13 + 24);
        v84 = *(_QWORD *)(v13 + 24);
        v85 = v10->n128_u64[0];
        if (*(_QWORD *)v13 >= v84)
        {
          if (v84 < v85)
          {
            result = *v83;
            v165 = *(_QWORD *)(v13 + 40);
            v100 = *((_QWORD *)a2 - 1);
            *v83 = *v10;
            *(_QWORD *)(v13 + 40) = v100;
            *((_QWORD *)a2 - 1) = v165;
            *v10 = result;
            goto LABEL_144;
          }
        }
        else if (v84 >= v85)
        {
          v167 = *(_QWORD *)(v13 + 16);
          v135 = *(__n128 *)v13;
          *(__n128 *)v13 = *v83;
          *(_QWORD *)(v13 + 16) = *(_QWORD *)(v13 + 40);
          result = v135;
          *v83 = v135;
          *(_QWORD *)(v13 + 40) = v167;
          if (*(_QWORD *)(v13 + 24) < (int64_t)v10->n128_u64[0])
          {
            result = *v83;
            v168 = *(_QWORD *)(v13 + 40);
            v106 = *((_QWORD *)a2 - 1);
            *v83 = *v10;
            *(_QWORD *)(v13 + 40) = v106;
            *((_QWORD *)a2 - 1) = v168;
            *v10 = result;
          }
        }
        else
        {
LABEL_100:
          v163 = *(_QWORD *)(v13 + 16);
          v130 = *(__n128 *)v13;
          v86 = *v10;
          *(_QWORD *)(v13 + 16) = *((_QWORD *)a2 - 1);
          *(__n128 *)v13 = v86;
          result = v130;
          *((_QWORD *)a2 - 1) = v163;
          *v10 = v130;
        }
        return result;
      case 4uLL:
        v83 = (__n128 *)(v13 + 24);
        v87 = *(_QWORD *)(v13 + 24);
        v88 = (__n128 *)(v13 + 48);
        v89 = *(_QWORD *)(v13 + 48);
        if (*(_QWORD *)v13 >= v87)
        {
          if (v87 < v89)
          {
            v101 = *(_QWORD *)(v13 + 40);
            result = *v83;
            *v83 = *v88;
            *(_QWORD *)(v13 + 40) = *(_QWORD *)(v13 + 64);
            *v88 = result;
            *(_QWORD *)(v13 + 64) = v101;
            if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 24))
            {
              v166 = *(_QWORD *)(v13 + 16);
              v133 = *(__n128 *)v13;
              *(__n128 *)v13 = *v83;
              *(_QWORD *)(v13 + 16) = *(_QWORD *)(v13 + 40);
              result = v133;
              *v83 = v133;
              *(_QWORD *)(v13 + 40) = v166;
            }
          }
        }
        else
        {
          if (v87 >= v89)
          {
            v169 = *(_QWORD *)(v13 + 16);
            v136 = *(__n128 *)v13;
            *(__n128 *)v13 = *v83;
            *(_QWORD *)(v13 + 16) = *(_QWORD *)(v13 + 40);
            result = v136;
            *v83 = v136;
            *(_QWORD *)(v13 + 40) = v169;
            if (*(_QWORD *)(v13 + 24) >= v89)
              goto LABEL_141;
            v90 = *(_QWORD *)(v13 + 40);
            result = *v83;
            *v83 = *v88;
            *(_QWORD *)(v13 + 40) = *(_QWORD *)(v13 + 64);
            *v88 = result;
          }
          else
          {
            v164 = *(_QWORD *)(v13 + 16);
            v131 = *(__n128 *)v13;
            *(__n128 *)v13 = *v88;
            *(_QWORD *)(v13 + 16) = *(_QWORD *)(v13 + 64);
            result = v131;
            *v88 = v131;
            v90 = v164;
          }
          *(_QWORD *)(v13 + 64) = v90;
        }
LABEL_141:
        if ((int64_t)v88->n128_u64[0] < (int64_t)v10->n128_u64[0])
        {
          result = *v88;
          v170 = *(_QWORD *)(v13 + 64);
          v107 = *((_QWORD *)a2 - 1);
          *v88 = *v10;
          *(_QWORD *)(v13 + 64) = v107;
          *((_QWORD *)a2 - 1) = v170;
          *v10 = result;
          if ((int64_t)v83->n128_u64[0] < (int64_t)v88->n128_u64[0])
          {
            v108 = *(_QWORD *)(v13 + 40);
            result = *v83;
            *v83 = *v88;
            *(_QWORD *)(v13 + 40) = *(_QWORD *)(v13 + 64);
            *v88 = result;
            *(_QWORD *)(v13 + 64) = v108;
LABEL_144:
            if (*(_QWORD *)v13 < *(_QWORD *)(v13 + 24))
            {
              v171 = *(_QWORD *)(v13 + 16);
              v137 = *(__n128 *)v13;
              *(__n128 *)v13 = *v83;
              *(_QWORD *)(v13 + 16) = v83[1].n128_u64[0];
              result = v137;
              *v83 = v137;
              v83[1].n128_u64[0] = v171;
            }
          }
        }
        return result;
      case 5uLL:
        result.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__n128 *)v13, (__n128 *)(v13 + 24), (uint64_t *)(v13 + 48), v13 + 72, (uint64_t)a2 - 24, result).n128_u64[0];
        return result;
      default:
        if (v14 > 575)
        {
          if (!a4)
          {
            if ((__int128 *)v13 != a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *,ClipperLib::LocalMinimum *>(v13, a2, a2);
            return result;
          }
          v16 = v15 >> 1;
          v17 = (__n128 *)(v13 + 24 * (v15 >> 1));
          v18 = v10->n128_u64[0];
          if ((unint64_t)v14 < 0xC01)
          {
            v21 = *(_QWORD *)v13;
            if ((int64_t)v17->n128_u64[0] >= *(_QWORD *)v13)
            {
              if (v21 < v18)
              {
                v142 = *(_QWORD *)(v13 + 16);
                v116 = *(__n128 *)v13;
                v25 = *v10;
                *(_QWORD *)(v13 + 16) = *((_QWORD *)a2 - 1);
                *(__n128 *)v13 = v25;
                *((_QWORD *)a2 - 1) = v142;
                *v10 = v116;
                if ((int64_t)v17->n128_u64[0] < *(_QWORD *)v13)
                {
                  v143 = v17[1].n128_u64[0];
                  v117 = *v17;
                  v26 = *(__n128 *)v13;
                  v17[1].n128_u64[0] = *(_QWORD *)(v13 + 16);
                  *v17 = v26;
                  *(_QWORD *)(v13 + 16) = v143;
                  *(__n128 *)v13 = v117;
                  --a4;
                  v27 = *(_QWORD *)v13;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v21 >= v18)
            {
              v148 = v17[1].n128_u64[0];
              v120 = *v17;
              v40 = *(__n128 *)v13;
              v17[1].n128_u64[0] = *(_QWORD *)(v13 + 16);
              *v17 = v40;
              *(_QWORD *)(v13 + 16) = v148;
              *(__n128 *)v13 = v120;
              if (*(_QWORD *)v13 >= (int64_t)v10->n128_u64[0])
                goto LABEL_31;
              v139 = *(_QWORD *)(v13 + 16);
              v113 = *(__n128 *)v13;
              v41 = *v10;
              *(_QWORD *)(v13 + 16) = *((_QWORD *)a2 - 1);
              *(__n128 *)v13 = v41;
            }
            else
            {
              v139 = v17[1].n128_u64[0];
              v113 = *v17;
              v22 = *v10;
              v17[1].n128_u64[0] = *((_QWORD *)a2 - 1);
              *v17 = v22;
            }
            *((_QWORD *)a2 - 1) = v139;
            *v10 = v113;
LABEL_31:
            --a4;
            v27 = *(_QWORD *)v13;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v19 = v17->n128_u64[0];
          if (*(_QWORD *)v13 >= (int64_t)v17->n128_u64[0])
          {
            if (v19 < v18)
            {
              v140 = v17[1].n128_u64[0];
              v114 = *v17;
              v23 = *v10;
              v17[1].n128_u64[0] = *((_QWORD *)a2 - 1);
              *v17 = v23;
              *((_QWORD *)a2 - 1) = v140;
              *v10 = v114;
              if (*(_QWORD *)v13 < (int64_t)v17->n128_u64[0])
              {
                v141 = *(_QWORD *)(v13 + 16);
                v115 = *(__n128 *)v13;
                v24 = *v17;
                *(_QWORD *)(v13 + 16) = v17[1].n128_u64[0];
                *(__n128 *)v13 = v24;
                v17[1].n128_u64[0] = v141;
                *v17 = v115;
              }
            }
          }
          else
          {
            if (v19 >= v18)
            {
              v144 = *(_QWORD *)(v13 + 16);
              v118 = *(__n128 *)v13;
              v28 = *v17;
              *(_QWORD *)(v13 + 16) = v17[1].n128_u64[0];
              *(__n128 *)v13 = v28;
              v17[1].n128_u64[0] = v144;
              *v17 = v118;
              if ((int64_t)v17->n128_u64[0] >= (int64_t)v10->n128_u64[0])
                goto LABEL_22;
              v138 = v17[1].n128_u64[0];
              v112 = *v17;
              v29 = *v10;
              v17[1].n128_u64[0] = *((_QWORD *)a2 - 1);
              *v17 = v29;
            }
            else
            {
              v138 = *(_QWORD *)(v13 + 16);
              v112 = *(__n128 *)v13;
              v20 = *v10;
              *(_QWORD *)(v13 + 16) = *((_QWORD *)a2 - 1);
              *(__n128 *)v13 = v20;
            }
            *((_QWORD *)a2 - 1) = v138;
            *v10 = v112;
          }
LABEL_22:
          v30 = (__int128 *)(v13 + 24);
          v31 = v13 + 24 * v16;
          v32 = (__n128 *)(v31 - 24);
          v33 = *(_QWORD *)(v31 - 24);
          v34 = *(_QWORD *)v11;
          if (*(_QWORD *)(v13 + 24) >= v33)
          {
            if (v33 < v34)
            {
              v146 = *(_QWORD *)(v31 - 8);
              v119 = (__int128)*v32;
              v37 = *v11;
              *(_QWORD *)(v31 - 8) = *((_QWORD *)a2 - 4);
              *v32 = (__n128)v37;
              *((_QWORD *)a2 - 4) = v146;
              *v11 = v119;
              if (*(_QWORD *)v30 < (int64_t)v32->n128_u64[0])
              {
                v38 = *v30;
                v147 = *(_QWORD *)(v13 + 40);
                v39 = *(_QWORD *)(v31 - 8);
                *v30 = (__int128)*v32;
                *(_QWORD *)(v13 + 40) = v39;
                *(_QWORD *)(v31 - 8) = v147;
                *v32 = (__n128)v38;
              }
            }
          }
          else
          {
            if (v33 >= v34)
            {
              v42 = *v30;
              v149 = *(_QWORD *)(v13 + 40);
              v43 = *(_QWORD *)(v31 - 8);
              *v30 = (__int128)*v32;
              *(_QWORD *)(v13 + 40) = v43;
              *(_QWORD *)(v31 - 8) = v149;
              *v32 = (__n128)v42;
              if ((int64_t)v32->n128_u64[0] >= *(_QWORD *)v11)
                goto LABEL_36;
              v150 = *(_QWORD *)(v31 - 8);
              v121 = (__int128)*v32;
              v44 = *v11;
              *(_QWORD *)(v31 - 8) = *((_QWORD *)a2 - 4);
              *v32 = (__n128)v44;
              v35 = v121;
              *((_QWORD *)a2 - 4) = v150;
            }
            else
            {
              v35 = *v30;
              v145 = *(_QWORD *)(v13 + 40);
              v36 = *((_QWORD *)a2 - 4);
              *v30 = *v11;
              *(_QWORD *)(v13 + 40) = v36;
              *((_QWORD *)a2 - 4) = v145;
            }
            *v11 = v35;
          }
LABEL_36:
          v45 = (__n128 *)(v13 + 48);
          v48 = *(_QWORD *)(v31 + 24);
          v46 = (__n128 *)(v31 + 24);
          v47 = v48;
          v49 = *v12;
          if (*(_QWORD *)(v13 + 48) >= v48)
          {
            if (v47 < v49)
            {
              v152 = v46[1].n128_i64[0];
              v122 = *v46;
              v52 = *(__n128 *)v12;
              v46[1].n128_u64[0] = *((_QWORD *)a2 - 7);
              *v46 = v52;
              *((_QWORD *)a2 - 7) = v152;
              *(__n128 *)v12 = v122;
              if ((int64_t)v45->n128_u64[0] < (int64_t)v46->n128_u64[0])
              {
                v53 = *v45;
                v153 = *(_QWORD *)(v13 + 64);
                v54 = v46[1].n128_i64[0];
                *v45 = *v46;
                *(_QWORD *)(v13 + 64) = v54;
                v46[1].n128_u64[0] = v153;
                *v46 = v53;
              }
            }
          }
          else
          {
            if (v47 >= v49)
            {
              v55 = *v45;
              v154 = *(_QWORD *)(v13 + 64);
              v56 = v46[1].n128_i64[0];
              *v45 = *v46;
              *(_QWORD *)(v13 + 64) = v56;
              v46[1].n128_u64[0] = v154;
              *v46 = v55;
              if ((int64_t)v46->n128_u64[0] >= *v12)
                goto LABEL_45;
              v155 = v46[1].n128_i64[0];
              v123 = *v46;
              v57 = *(__n128 *)v12;
              v46[1].n128_u64[0] = *((_QWORD *)a2 - 7);
              *v46 = v57;
              v50 = v123;
              *((_QWORD *)a2 - 7) = v155;
            }
            else
            {
              v50 = *v45;
              v151 = *(_QWORD *)(v13 + 64);
              v51 = *((_QWORD *)a2 - 7);
              *v45 = *(__n128 *)v12;
              *(_QWORD *)(v13 + 64) = v51;
              *((_QWORD *)a2 - 7) = v151;
            }
            *(__n128 *)v12 = v50;
          }
LABEL_45:
          v58 = v17->n128_u64[0];
          v59 = v46->n128_u64[0];
          if ((int64_t)v32->n128_u64[0] >= (int64_t)v17->n128_u64[0])
          {
            if (v58 < v59)
            {
              v157 = v17[1].n128_u64[0];
              v125 = *v17;
              *v17 = *v46;
              v17[1].n128_u64[0] = v46[1].n128_u64[0];
              v46[1].n128_u64[0] = v157;
              *v46 = v125;
              if ((int64_t)v32->n128_u64[0] < (int64_t)v17->n128_u64[0])
              {
                v158 = v32[1].n128_u64[0];
                v126 = *v32;
                *v32 = *v17;
                v32[1].n128_u64[0] = v17[1].n128_u64[0];
                v17[1].n128_u64[0] = v158;
                *v17 = v126;
              }
            }
          }
          else
          {
            if (v58 >= v59)
            {
              v159 = v32[1].n128_u64[0];
              v127 = *v32;
              *v32 = *v17;
              v32[1].n128_u64[0] = v17[1].n128_u64[0];
              v17[1].n128_u64[0] = v159;
              *v17 = v127;
              if ((int64_t)v17->n128_u64[0] >= (int64_t)v46->n128_u64[0])
                goto LABEL_54;
              v156 = v17[1].n128_u64[0];
              v124 = *v17;
              *v17 = *v46;
              v17[1].n128_u64[0] = v46[1].n128_u64[0];
            }
            else
            {
              v156 = v32[1].n128_u64[0];
              v124 = *v32;
              *v32 = *v46;
              v32[1].n128_u64[0] = v46[1].n128_u64[0];
            }
            v46[1].n128_u64[0] = v156;
            *v46 = v124;
          }
LABEL_54:
          v160 = *(_QWORD *)(v13 + 16);
          v128 = *(__n128 *)v13;
          v60 = *v17;
          *(_QWORD *)(v13 + 16) = v17[1].n128_u64[0];
          *(__n128 *)v13 = v60;
          v17[1].n128_u64[0] = v160;
          *v17 = v128;
          --a4;
          v27 = *(_QWORD *)v13;
          if ((a5 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (v27 >= *(_QWORD *)(v13 - 24))
          {
            v111 = *(__n128 *)(v13 + 8);
            if ((int64_t)v10->n128_u64[0] >= v27)
            {
              v76 = v13 + 24;
              do
              {
                v13 = v76;
                if (v76 >= (unint64_t)a2)
                  break;
                v76 += 24;
              }
              while (*(_QWORD *)v13 >= v27);
            }
            else
            {
              do
              {
                v75 = *(_QWORD *)(v13 + 24);
                v13 += 24;
              }
              while (v75 >= v27);
            }
            v77 = a2;
            if (v13 < (unint64_t)a2)
            {
              v77 = a2;
              do
              {
                v78 = *((_QWORD *)v77 - 3);
                v77 = (__int128 *)((char *)v77 - 24);
              }
              while (v78 < v27);
            }
            while (v13 < (unint64_t)v77)
            {
              v162 = *(_QWORD *)(v13 + 16);
              v129 = *(__n128 *)v13;
              v79 = (__n128)*v77;
              *(_QWORD *)(v13 + 16) = *((_QWORD *)v77 + 2);
              *(__n128 *)v13 = v79;
              *((_QWORD *)v77 + 2) = v162;
              *v77 = (__int128)v129;
              do
              {
                v80 = *(_QWORD *)(v13 + 24);
                v13 += 24;
              }
              while (v80 >= v27);
              do
              {
                v81 = *((_QWORD *)v77 - 3);
                v77 = (__int128 *)((char *)v77 - 24);
              }
              while (v81 < v27);
            }
            if ((__n128 *)(v13 - 24) != a1)
            {
              v82 = *(__n128 *)(v13 - 24);
              a1[1].n128_u64[0] = *(_QWORD *)(v13 - 8);
              *a1 = v82;
            }
            a5 = 0;
            *(_QWORD *)(v13 - 24) = v27;
            result = v111;
            *(__n128 *)(v13 - 16) = v111;
            continue;
          }
LABEL_56:
          v110 = *(__n128 *)(v13 + 8);
          v61 = v13;
          do
          {
            v62 = v61;
            v63 = *(_QWORD *)(v61 + 24);
            v61 += 24;
          }
          while (v27 < v63);
          v64 = a2;
          if (v62 == v13)
          {
            v64 = a2;
            do
            {
              if (v61 >= (unint64_t)v64)
                break;
              v66 = *((_QWORD *)v64 - 3);
              v64 = (__int128 *)((char *)v64 - 24);
            }
            while (v27 >= v66);
          }
          else
          {
            do
            {
              v65 = *((_QWORD *)v64 - 3);
              v64 = (__int128 *)((char *)v64 - 24);
            }
            while (v27 >= v65);
          }
          v13 = v61;
          if (v61 < (unint64_t)v64)
          {
            v67 = (unint64_t)v64;
            do
            {
              v68 = *(__n128 *)v13;
              v161 = *(_QWORD *)(v13 + 16);
              v69 = *(_QWORD *)(v67 + 16);
              *(_OWORD *)v13 = *(_OWORD *)v67;
              *(_QWORD *)(v13 + 16) = v69;
              *(_QWORD *)(v67 + 16) = v161;
              *(__n128 *)v67 = v68;
              do
              {
                v70 = *(_QWORD *)(v13 + 24);
                v13 += 24;
              }
              while (v27 < v70);
              do
              {
                v71 = *(_QWORD *)(v67 - 24);
                v67 -= 24;
              }
              while (v27 >= v71);
            }
            while (v13 < v67);
          }
          if ((__n128 *)(v13 - 24) != a1)
          {
            v72 = *(__n128 *)(v13 - 24);
            a1[1].n128_u64[0] = *(_QWORD *)(v13 - 8);
            *a1 = v72;
          }
          *(_QWORD *)(v13 - 24) = v27;
          *(__n128 *)(v13 - 16) = v110;
          if (v61 < (unint64_t)v64)
            goto LABEL_75;
          v73 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(a1, (__int8 *)(v13 - 24), v110);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__n128 *)v13, (__int8 *)a2, v74))
          {
            if (v73)
              continue;
LABEL_75:
            std::__introsort<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *,false>(a1, v13 - 24, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          a2 = (__int128 *)(v13 - 24);
          if (v73)
            return result;
          goto LABEL_1;
        }
        v91 = (__int128 *)(v13 + 24);
        v93 = (__int128 *)v13 == a2 || v91 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v93)
          {
            v94 = 0;
            v95 = (__n128 *)v13;
            do
            {
              v97 = *(_QWORD *)v91;
              if ((int64_t)v95->n128_u64[0] < *(_QWORD *)v91)
              {
                v98 = 0;
                v132 = v95[2];
                do
                {
                  v99 = (char *)v95 + v98;
                  *(__n128 *)(v99 + 24) = *(__n128 *)((char *)v95 + v98);
                  *((_QWORD *)v99 + 5) = v95[1].n128_u64[v98 / 8];
                  if (v94 == v98)
                  {
                    v96 = (_QWORD *)v13;
                    goto LABEL_115;
                  }
                  v98 -= 24;
                }
                while (*((_QWORD *)v99 - 3) < v97);
                v96 = (_QWORD *)((char *)v91 + v98);
LABEL_115:
                *v96 = v97;
                result = v132;
                *(__n128 *)(v96 + 1) = v132;
              }
              v91 = (__int128 *)((char *)v91 + 24);
              v95 = (__n128 *)((char *)v95 + 24);
              v94 -= 24;
            }
            while (v91 != a2);
          }
        }
        else if (!v93)
        {
          do
          {
            v102 = v91;
            v103 = a1[1].n128_i64[1];
            if ((int64_t)a1->n128_u64[0] < v103)
            {
              v134 = a1[2];
              v104 = v102;
              do
              {
                *v104 = *(__int128 *)((char *)v104 - 24);
                *((_QWORD *)v104 + 2) = *((_QWORD *)v104 - 1);
                v105 = *((_QWORD *)v104 - 6);
                v104 = (__int128 *)((char *)v104 - 24);
              }
              while (v105 < v103);
              *(_QWORD *)v104 = v103;
              result = v134;
              *(__int128 *)((char *)v104 + 8) = (__int128)v134;
            }
            v91 = (__int128 *)((char *)v102 + 24);
            a1 = (__n128 *)v102;
          }
          while ((__int128 *)((char *)v102 + 24) != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(__n128 *a1, __int8 *a2, __n128 a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  __n128 v10;
  __n128 *v11;
  uint64_t v12;
  __n128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  unint64_t v19;
  uint64_t v20;
  __n128 *v21;
  uint64_t v22;
  __n128 *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  __n128 v32;
  unint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  __n128 v41;
  __int8 *v42;
  uint64_t v43;
  int v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 *v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  __n128 v53;
  unint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  __n128 v58;
  unint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  __n128 v63;
  __n128 v64;

  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - (__int8 *)a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return 1;
    case 2uLL:
      v12 = *((_QWORD *)a2 - 3);
      v11 = (__n128 *)(a2 - 24);
      if ((int64_t)a1->n128_u64[0] < v12)
        goto LABEL_10;
      return 1;
    case 3uLL:
      v13 = (__n128 *)((char *)a1 + 24);
      v14 = a1[1].n128_i64[1];
      v16 = *((_QWORD *)a2 - 3);
      v11 = (__n128 *)(a2 - 24);
      v15 = v16;
      if ((int64_t)a1->n128_u64[0] < v14)
      {
        if (v14 < v15)
        {
LABEL_10:
          v17 = a1[1].n128_i64[0];
          v18 = *a1;
          v19 = v11[1].n128_u64[0];
          *a1 = *v11;
          a1[1].n128_u64[0] = v19;
          *v11 = v18;
          v11[1].n128_u64[0] = v17;
          return 1;
        }
        v50 = a1[1].n128_i64[0];
        v51 = *a1;
        *a1 = *v13;
        a1[1].n128_u64[0] = a1[2].n128_u64[1];
        *v13 = v51;
        a1[2].n128_u64[1] = v50;
        if ((int64_t)a1[1].n128_u64[1] < (int64_t)v11->n128_u64[0])
        {
          v52 = a1[2].n128_i64[1];
          v53 = *v13;
          v54 = v11[1].n128_u64[0];
          *v13 = *v11;
          a1[2].n128_u64[1] = v54;
          *v11 = v53;
          v11[1].n128_u64[0] = v52;
          return 1;
        }
        return 1;
      }
      if (v14 >= v15)
        return 1;
      v31 = a1[2].n128_i64[1];
      v32 = *v13;
      v33 = v11[1].n128_u64[0];
      *v13 = *v11;
      a1[2].n128_u64[1] = v33;
      *v11 = v32;
      v11[1].n128_u64[0] = v31;
      if ((int64_t)a1->n128_u64[0] >= (int64_t)a1[1].n128_u64[1])
        return 1;
      goto LABEL_45;
    case 4uLL:
      v13 = (__n128 *)((char *)a1 + 24);
      v20 = a1[1].n128_i64[1];
      v21 = a1 + 3;
      v22 = a1[3].n128_i64[0];
      v23 = (__n128 *)(a2 - 24);
      v24 = a1->n128_u64[0];
      if ((int64_t)a1->n128_u64[0] >= v20)
      {
        if (v20 < v22)
        {
          v34 = a1[2].n128_i64[1];
          v35 = *v13;
          *v13 = *v21;
          a1[2].n128_u64[1] = a1[4].n128_u64[0];
          *v21 = v35;
          a1[4].n128_u64[0] = v34;
          if (v24 < (int64_t)v13->n128_u64[0])
          {
            v36 = a1[1].n128_i64[0];
            v37 = *a1;
            *a1 = *v13;
            a1[1].n128_u64[0] = a1[2].n128_u64[1];
            *v13 = v37;
            a1[2].n128_u64[1] = v36;
          }
        }
      }
      else
      {
        if (v20 >= v22)
        {
          v55 = a1[1].n128_i64[0];
          v56 = *a1;
          *a1 = *v13;
          a1[1].n128_u64[0] = a1[2].n128_u64[1];
          *v13 = v56;
          a1[2].n128_u64[1] = v55;
          if ((int64_t)a1[1].n128_u64[1] >= v22)
            goto LABEL_42;
          v25 = a1[2].n128_i64[1];
          v26 = *v13;
          *v13 = *v21;
          a1[2].n128_u64[1] = a1[4].n128_u64[0];
        }
        else
        {
          v25 = a1[1].n128_i64[0];
          v26 = *a1;
          *a1 = *v21;
          a1[1].n128_u64[0] = a1[4].n128_u64[0];
        }
        *v21 = v26;
        a1[4].n128_u64[0] = v25;
      }
LABEL_42:
      if ((int64_t)v21->n128_u64[0] >= (int64_t)v23->n128_u64[0])
        return 1;
      v57 = a1[4].n128_i64[0];
      v58 = *v21;
      v59 = *((_QWORD *)a2 - 1);
      *v21 = *v23;
      a1[4].n128_u64[0] = v59;
      *v23 = v58;
      *((_QWORD *)a2 - 1) = v57;
      if ((int64_t)v13->n128_u64[0] >= (int64_t)v21->n128_u64[0])
        return 1;
      v60 = a1[2].n128_i64[1];
      v61 = *v13;
      *v13 = *v21;
      a1[2].n128_u64[1] = a1[4].n128_u64[0];
      *v21 = v61;
      a1[4].n128_u64[0] = v60;
      if ((int64_t)a1->n128_u64[0] >= (int64_t)a1[1].n128_u64[1])
        return 1;
LABEL_45:
      v62 = a1[1].n128_i64[0];
      v63 = *a1;
      *a1 = *v13;
      a1[1].n128_u64[0] = v13[1].n128_u64[0];
      *v13 = v63;
      v13[1].n128_u64[0] = v62;
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(a1, (__n128 *)((char *)a1 + 24), (uint64_t *)&a1[3], (uint64_t)&a1[4].n128_i64[1], (uint64_t)(a2 - 24), a3);
      return 1;
    default:
      v4 = a1 + 3;
      v5 = a1[3].n128_i64[0];
      v6 = (__n128 *)((char *)a1 + 24);
      v7 = a1[1].n128_i64[1];
      v8 = a1->n128_u64[0];
      if ((int64_t)a1->n128_u64[0] >= v7)
      {
        if (v7 < v5)
        {
          v27 = a1[2].n128_i64[1];
          v28 = *v6;
          *v6 = *v4;
          a1[2].n128_u64[1] = a1[4].n128_u64[0];
          *v4 = v28;
          a1[4].n128_u64[0] = v27;
          if (v8 < (int64_t)v6->n128_u64[0])
          {
            v29 = a1[1].n128_i64[0];
            v30 = *a1;
            *a1 = *v6;
            a1[1].n128_u64[0] = a1[2].n128_u64[1];
            *v6 = v30;
            a1[2].n128_u64[1] = v29;
          }
        }
      }
      else if (v7 >= v5)
      {
        v38 = a1[1].n128_i64[0];
        v39 = *a1;
        *a1 = *v6;
        a1[1].n128_u64[0] = a1[2].n128_u64[1];
        *v6 = v39;
        a1[2].n128_u64[1] = v38;
        if ((int64_t)a1[1].n128_u64[1] < v5)
        {
          v40 = a1[2].n128_i64[1];
          v41 = *v6;
          *v6 = *v4;
          a1[2].n128_u64[1] = a1[4].n128_u64[0];
          *v4 = v41;
          a1[4].n128_u64[0] = v40;
        }
      }
      else
      {
        v9 = a1[1].n128_i64[0];
        v10 = *a1;
        *a1 = *v4;
        a1[1].n128_u64[0] = a1[4].n128_u64[0];
        *v4 = v10;
        a1[4].n128_u64[0] = v9;
      }
      v42 = &a1[4].n128_i8[8];
      if (&a1[4].n128_i8[8] == a2)
        return 1;
      v43 = 0;
      v44 = 0;
      break;
  }
  while (1)
  {
    v45 = v4->n128_u64[0];
    v46 = *(_QWORD *)v42;
    if (v45 < *(_QWORD *)v42)
      break;
LABEL_35:
    v4 = (__n128 *)v42;
    v43 += 24;
    v42 += 24;
    if (v42 == a2)
      return 1;
  }
  v64 = *(__n128 *)(v42 + 8);
  v47 = v43;
  do
  {
    v48 = (uint64_t)a1 + v47;
    *(__n128 *)(v48 + 72) = *(__n128 *)((char *)a1 + v47 + 48);
    *(_QWORD *)(v48 + 88) = *(unint64_t *)((char *)a1[4].n128_u64 + v47);
    if (v47 == -48)
    {
      a1->n128_u64[0] = v46;
      *(__n128 *)((char *)a1 + 8) = v64;
      if (++v44 != 8)
        goto LABEL_35;
      return v42 + 24 == a2;
    }
    v47 -= 24;
  }
  while (*(_QWORD *)(v48 + 24) < v46);
  v49 = (__n128 *)((char *)a1 + v47);
  v49[4].n128_u64[1] = v46;
  v49[5] = v64;
  if (++v44 != 8)
    goto LABEL_35;
  return v42 + 24 == a2;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(__n128 *a1, __n128 *a2, uint64_t *a3, uint64_t a4, uint64_t a5, __n128 result)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v6 = a2->n128_u64[0];
  v7 = *a3;
  if ((int64_t)a1->n128_u64[0] >= (int64_t)a2->n128_u64[0])
  {
    if (v6 < v7)
    {
      v10 = a2[1].n128_i64[0];
      result = *a2;
      v11 = a3[2];
      *a2 = *(__n128 *)a3;
      a2[1].n128_u64[0] = v11;
      *(__n128 *)a3 = result;
      a3[2] = v10;
      if ((int64_t)a1->n128_u64[0] < (int64_t)a2->n128_u64[0])
      {
        v12 = a1[1].n128_u64[0];
        result = *a1;
        v13 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v13;
        *a2 = result;
        a2[1].n128_u64[0] = v12;
      }
    }
  }
  else
  {
    if (v6 < v7)
    {
      v8 = a1[1].n128_u64[0];
      result = *a1;
      v9 = a3[2];
      *a1 = *(__n128 *)a3;
      a1[1].n128_u64[0] = v9;
LABEL_9:
      *(__n128 *)a3 = result;
      a3[2] = v8;
      goto LABEL_10;
    }
    v14 = a1[1].n128_u64[0];
    result = *a1;
    v15 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v15;
    *a2 = result;
    a2[1].n128_u64[0] = v14;
    if ((int64_t)a2->n128_u64[0] < *a3)
    {
      v8 = a2[1].n128_u64[0];
      result = *a2;
      v16 = a3[2];
      *a2 = *(__n128 *)a3;
      a2[1].n128_u64[0] = v16;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*a3 < *(_QWORD *)a4)
  {
    v17 = a3[2];
    result = *(__n128 *)a3;
    v18 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v18;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v17;
    if ((int64_t)a2->n128_u64[0] < *a3)
    {
      v19 = a2[1].n128_i64[0];
      result = *a2;
      v20 = a3[2];
      *a2 = *(__n128 *)a3;
      a2[1].n128_u64[0] = v20;
      *(__n128 *)a3 = result;
      a3[2] = v19;
      if ((int64_t)a1->n128_u64[0] < (int64_t)a2->n128_u64[0])
      {
        v21 = a1[1].n128_u64[0];
        result = *a1;
        v22 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v22;
        *a2 = result;
        a2[1].n128_u64[0] = v21;
      }
    }
  }
  if (*(_QWORD *)a4 < *(_QWORD *)a5)
  {
    v23 = *(_QWORD *)(a4 + 16);
    result = *(__n128 *)a4;
    v24 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v24;
    *(__n128 *)a5 = result;
    *(_QWORD *)(a5 + 16) = v23;
    if (*a3 < *(_QWORD *)a4)
    {
      v25 = a3[2];
      result = *(__n128 *)a3;
      v26 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v26;
      *(__n128 *)a4 = result;
      *(_QWORD *)(a4 + 16) = v25;
      if ((int64_t)a2->n128_u64[0] < *a3)
      {
        v27 = a2[1].n128_i64[0];
        result = *a2;
        v28 = a3[2];
        *a2 = *(__n128 *)a3;
        a2[1].n128_u64[0] = v28;
        *(__n128 *)a3 = result;
        a3[2] = v27;
        if ((int64_t)a1->n128_u64[0] < (int64_t)a2->n128_u64[0])
        {
          v29 = a1[1].n128_u64[0];
          result = *a1;
          v30 = a2[1].n128_u64[0];
          *a1 = *a2;
          a1[1].n128_u64[0] = v30;
          *a2 = result;
          a2[1].n128_u64[0] = v29;
        }
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *,ClipperLib::LocalMinimum *>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  uint64_t v24;
  int64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  int64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;

  if ((__int128 *)a1 == a2)
    return a3;
  v3 = (uint64_t)a2 - a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  if ((uint64_t)a2 - a1 >= 25 && (unint64_t)v3 >= 0x30)
  {
    v41 = (unint64_t)(v4 - 2) >> 1;
    v42 = a1 + 24;
    v43 = v41;
    do
    {
      if (v41 >= v43)
      {
        v44 = (2 * v43) | 1;
        v45 = (_QWORD *)(v42 + 48 * v43);
        if (2 * v43 + 2 >= v4)
        {
          v47 = (_QWORD *)(a1 + 24 * v43);
          v48 = *v47;
          if (*v47 >= *v45)
            goto LABEL_67;
        }
        else
        {
          v46 = v45[3];
          if (v46 < *v45)
          {
            v45 += 3;
            v44 = 2 * v43 + 2;
          }
          else
          {
            v46 = *v45;
          }
          v47 = (_QWORD *)(a1 + 24 * v43);
          v48 = *v47;
          if (*v47 >= v46)
          {
LABEL_67:
            v55 = *(_OWORD *)(v47 + 1);
            while (1)
            {
              v50 = v47;
              v47 = v45;
              v51 = *(_OWORD *)v45;
              v50[2] = v45[2];
              *(_OWORD *)v50 = v51;
              if (v41 < v44)
                break;
              v52 = (2 * v44) | 1;
              v45 = (_QWORD *)(v42 + 48 * v44);
              v44 = 2 * v44 + 2;
              if (v44 < v4)
              {
                v49 = v45[3];
                if (v49 < *v45)
                {
                  v45 += 3;
                }
                else
                {
                  v49 = *v45;
                  v44 = v52;
                }
                if (v48 < v49)
                  break;
              }
              else
              {
                v44 = v52;
                if (v48 < *v45)
                  break;
              }
            }
            *v47 = v48;
            *(_OWORD *)(v47 + 1) = v55;
          }
        }
      }
      v26 = v43-- <= 0;
    }
    while (!v26);
  }
  v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 48)
    {
      v6 = a2;
      do
      {
        if (*(_QWORD *)a1 < *(_QWORD *)v6)
        {
          v7 = *((_QWORD *)v6 + 2);
          v8 = *v6;
          v9 = *(_QWORD *)(a1 + 16);
          *v6 = *(_OWORD *)a1;
          *((_QWORD *)v6 + 2) = v9;
          *(_OWORD *)a1 = v8;
          *(_QWORD *)(a1 + 16) = v7;
        }
        v6 = (__int128 *)((char *)v6 + 24);
      }
      while (v6 != a3);
LABEL_36:
      v5 = a3;
      goto LABEL_37;
    }
    v10 = (uint64_t *)(a1 + 24);
    v11 = (uint64_t *)(a1 + 48);
    v12 = a2;
    while (1)
    {
      if (*(_QWORD *)a1 < *(_QWORD *)v12)
      {
        v13 = *((_QWORD *)v12 + 2);
        v14 = *v12;
        v15 = *(_QWORD *)(a1 + 16);
        *v12 = *(_OWORD *)a1;
        *((_QWORD *)v12 + 2) = v15;
        *(_OWORD *)a1 = v14;
        *(_QWORD *)(a1 + 16) = v13;
        if ((unint64_t)v4 <= 2)
        {
          v17 = (uint64_t *)(a1 + 24);
          v18 = 1;
          v19 = *(_QWORD *)a1;
          if (*(_QWORD *)a1 >= *v10)
            goto LABEL_27;
        }
        else
        {
          if (*v11 >= *v10)
            v16 = *v10;
          else
            v16 = *v11;
          if (*v11 >= *v10)
            v17 = (uint64_t *)(a1 + 24);
          else
            v17 = (uint64_t *)(a1 + 48);
          if (*v11 >= *v10)
            v18 = 1;
          else
            v18 = 2;
          v19 = *(_QWORD *)a1;
          if (*(_QWORD *)a1 >= v16)
          {
LABEL_27:
            v53 = *(_OWORD *)(a1 + 8);
            v20 = (_QWORD *)a1;
            while (1)
            {
              v22 = v20;
              v20 = v17;
              v23 = *(_OWORD *)v17;
              v22[2] = v17[2];
              *(_OWORD *)v22 = v23;
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v18)
                break;
              v24 = (2 * v18) | 1;
              v17 = &v10[6 * v18];
              v18 = 2 * v18 + 2;
              if (v18 < v4)
              {
                v21 = v17[3];
                if (v21 < *v17)
                {
                  v17 += 3;
                }
                else
                {
                  v21 = *v17;
                  v18 = v24;
                }
                if (v19 < v21)
                  break;
              }
              else
              {
                v18 = v24;
                if (v19 < *v17)
                  break;
              }
            }
            *v20 = v19;
            *(_OWORD *)(v20 + 1) = v53;
          }
        }
      }
      v12 = (__int128 *)((char *)v12 + 24);
      if (v12 == a3)
        goto LABEL_36;
    }
  }
LABEL_37:
  if (v3 >= 25)
  {
    v25 = v3 / 0x18uLL;
    do
    {
      v27 = 0;
      v54 = *(_OWORD *)a1;
      v56 = *(_QWORD *)(a1 + 16);
      v28 = a1;
      do
      {
        v30 = v28 + 24 * v27 + 24;
        v31 = (2 * v27) | 1;
        v32 = 2 * v27 + 2;
        if (v32 < v25 && *(_QWORD *)(v30 + 24) < *(_QWORD *)v30)
        {
          v30 += 24;
          v31 = v32;
        }
        v29 = *(_OWORD *)v30;
        *(_QWORD *)(v28 + 16) = *(_QWORD *)(v30 + 16);
        *(_OWORD *)v28 = v29;
        v28 = v30;
        v27 = v31;
      }
      while (v31 <= (uint64_t)((unint64_t)(v25 - 2) >> 1));
      a2 = (__int128 *)((char *)a2 - 24);
      if ((__int128 *)v30 == a2)
      {
        *(_QWORD *)(v30 + 16) = v56;
        *(_OWORD *)v30 = v54;
      }
      else
      {
        v33 = *a2;
        *(_QWORD *)(v30 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)v30 = v33;
        *a2 = v54;
        *((_QWORD *)a2 + 2) = v56;
        v34 = v30 - a1 + 24;
        if (v34 >= 25)
        {
          v35 = (v34 / 0x18uLL - 2) >> 1;
          v36 = a1 + 24 * v35;
          v37 = *(_QWORD *)v30;
          if (*(_QWORD *)v30 < *(_QWORD *)v36)
          {
            v57 = *(_OWORD *)(v30 + 8);
            do
            {
              v38 = v30;
              v30 = v36;
              v39 = *(_OWORD *)v36;
              *(_QWORD *)(v38 + 16) = *(_QWORD *)(v36 + 16);
              *(_OWORD *)v38 = v39;
              if (!v35)
                break;
              v35 = (v35 - 1) >> 1;
              v36 = a1 + 24 * v35;
            }
            while (v37 < *(_QWORD *)v36);
            *(_QWORD *)v30 = v37;
            *(_OWORD *)(v30 + 8) = v57;
          }
        }
      }
      v26 = v25-- <= 2;
    }
    while (!v26);
  }
  return v5;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **,false>(uint64_t result, int8x16_t *a2, unsigned int (**a3)(uint64_t), uint64_t a4, char a5)
{
  int8x16_t *v7;
  int8x16_t *v8;
  uint64_t *v9;
  int8x16_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int (*v14)(uint64_t);
  char v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int8 *v27;
  char v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  int8x16_t *v50;
  int8x16_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x16_t *v55;
  int8x16_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  BOOL v61;
  uint64_t v62;
  int8x16_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  int8x16_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int8x16_t *v79;
  BOOL v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;

  v7 = (int8x16_t *)result;
LABEL_2:
  v8 = a2;
  v9 = &a2[-1].i64[1];
  v10 = v7;
  while (2)
  {
    v7 = v10;
    v11 = (char *)v8 - (char *)v10;
    v12 = ((char *)v8 - (char *)v10) >> 3;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10->i64[0]);
        if ((_DWORD)result)
        {
          v69 = v10->i64[0];
          v10->i64[0] = *v9;
          goto LABEL_137;
        }
        return result;
      case 3uLL:
        v70 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[1], v10->i64[0]);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10->i64[1]);
        if ((v70 & 1) != 0)
        {
          v71 = v10->i64[0];
          if ((_DWORD)result)
          {
            v10->i64[0] = *v9;
            *v9 = v71;
          }
          else
          {
            v10->i64[0] = v10->i64[1];
            v10->i64[1] = v71;
            result = ((uint64_t (*)(uint64_t))*a3)(*v9);
            if ((_DWORD)result)
            {
              v69 = v10->i64[1];
              v10->i64[1] = *v9;
LABEL_137:
              *v9 = v69;
            }
          }
        }
        else if ((_DWORD)result)
        {
          v87 = v10->i64[1];
          v10->i64[1] = *v9;
          *v9 = v87;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[1], v10->i64[0]);
          goto LABEL_126;
        }
        return result;
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(p2t::Point const*,p2t::Point const*),p2t::Point**>(v10, &v10->i64[1], (int8x16_t *)v10[1].i64, v9, a3);
      case 5uLL:
        v72 = v10 + 1;
        v73 = &v10[1].i64[1];
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(p2t::Point const*,p2t::Point const*),p2t::Point**>(v10, &v10->i64[1], (int8x16_t *)v10[1].i64, &v10[1].i64[1], a3);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10[1].i64[1]);
        if ((_DWORD)result)
        {
          v74 = *v73;
          *v73 = *v9;
          *v9 = v74;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v73, v72->i64[0]);
          if ((_DWORD)result)
          {
            v75 = v72->i64[0];
            v72->i64[0] = *v73;
            *v73 = v75;
            result = ((uint64_t (*)(void))*a3)();
            if ((_DWORD)result)
            {
              v77 = v10->i64[1];
              v76 = v10[1].i64[0];
              v78 = v10->i64[0];
              v10->i64[1] = v76;
              v10[1].i64[0] = v77;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v76, v78);
LABEL_126:
              if ((_DWORD)result)
                *v10 = vextq_s8(*v10, *v10, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v11 > 191)
        {
          if (!a4)
          {
            if (v10 != v8)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(p2t::Point const*,p2t::Point const*),p2t::Point**,p2t::Point**>(v10, a2, a2, (unsigned int (**)(_QWORD, uint64_t))a3);
            return result;
          }
          v13 = v12 >> 1;
          v14 = *a3;
          if ((unint64_t)v11 >= 0x401)
          {
            v15 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v10->i64[v13], v10->i64[0]);
            v16 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10->i64[v13]);
            if ((v15 & 1) != 0)
            {
              v17 = v10->i64[0];
              if (v16)
              {
                v10->i64[0] = *v9;
                *v9 = v17;
              }
              else
              {
                v10->i64[0] = v10->i64[v13];
                v10->i64[v13] = v17;
                if ((*a3)(*v9))
                {
                  v26 = v10->i64[v13];
                  v10->i64[v13] = *v9;
                  *v9 = v26;
                }
              }
            }
            else if (v16)
            {
              v22 = v10->i64[v13];
              v10->i64[v13] = *v9;
              *v9 = v22;
              if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v10->i64[v13], v10->i64[0]))
              {
                v23 = v10->i64[0];
                v10->i64[0] = v10->i64[v13];
                v10->i64[v13] = v23;
              }
            }
            v27 = &v10->i8[8 * v13];
            v28 = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*((_QWORD *)v27 - 1), v10->i64[1]);
            v29 = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v8[-1].i64[0], *((_QWORD *)v27 - 1));
            if ((v28 & 1) != 0)
            {
              v30 = v10->i64[1];
              if (v29)
              {
                v10->i64[1] = v8[-1].i64[0];
                v8[-1].i64[0] = v30;
              }
              else
              {
                v10->i64[1] = *((_QWORD *)v27 - 1);
                *((_QWORD *)v27 - 1) = v30;
                if ((*a3)(v8[-1].i64[0]))
                {
                  v34 = *((_QWORD *)v27 - 1);
                  *((_QWORD *)v27 - 1) = v8[-1].i64[0];
                  v8[-1].i64[0] = v34;
                }
              }
            }
            else if (v29)
            {
              v31 = *((_QWORD *)v27 - 1);
              *((_QWORD *)v27 - 1) = v8[-1].i64[0];
              v8[-1].i64[0] = v31;
              if (((unsigned int (*)(_QWORD, uint64_t))*a3)(*((_QWORD *)v27 - 1), v10->i64[1]))
              {
                v32 = v10->i64[1];
                v10->i64[1] = *((_QWORD *)v27 - 1);
                *((_QWORD *)v27 - 1) = v32;
              }
            }
            v35 = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*((_QWORD *)v27 + 1), v10[1].i64[0]);
            v36 = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v8[-2].i64[1], *((_QWORD *)v27 + 1));
            if ((v35 & 1) != 0)
            {
              v37 = v10[1].i64[0];
              if (v36)
              {
                v10[1].i64[0] = v8[-2].i64[1];
                v8[-2].i64[1] = v37;
              }
              else
              {
                v10[1].i64[0] = *((_QWORD *)v27 + 1);
                *((_QWORD *)v27 + 1) = v37;
                if ((*a3)(v8[-2].i64[1]))
                {
                  v40 = *((_QWORD *)v27 + 1);
                  *((_QWORD *)v27 + 1) = v8[-2].i64[1];
                  v8[-2].i64[1] = v40;
                }
              }
            }
            else if (v36)
            {
              v38 = *((_QWORD *)v27 + 1);
              *((_QWORD *)v27 + 1) = v8[-2].i64[1];
              v8[-2].i64[1] = v38;
              if (((unsigned int (*)(_QWORD, uint64_t))*a3)(*((_QWORD *)v27 + 1), v10[1].i64[0]))
              {
                v39 = v10[1].i64[0];
                v10[1].i64[0] = *((_QWORD *)v27 + 1);
                *((_QWORD *)v27 + 1) = v39;
              }
            }
            v41 = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v10->i64[v13], *((_QWORD *)v27 - 1));
            v42 = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*((_QWORD *)v27 + 1), v10->i64[v13]);
            if ((v41 & 1) != 0)
            {
              v43 = *((_QWORD *)v27 - 1);
              if (v42)
              {
                *((_QWORD *)v27 - 1) = *((_QWORD *)v27 + 1);
                *((_QWORD *)v27 + 1) = v43;
                v44 = v10->i64[v13];
                goto LABEL_52;
              }
              *((_QWORD *)v27 - 1) = v10->i64[v13];
              v10->i64[v13] = v43;
              v47 = (*a3)(*((_QWORD *)v27 + 1));
              v44 = v10->i64[v13];
              if (v47)
              {
                v46 = *((_QWORD *)v27 + 1);
                v10->i64[v13] = v46;
                *((_QWORD *)v27 + 1) = v44;
                goto LABEL_51;
              }
            }
            else
            {
              v44 = v10->i64[v13];
              if (v42)
              {
                v10->i64[v13] = *((_QWORD *)v27 + 1);
                *((_QWORD *)v27 + 1) = v44;
                v45 = ((uint64_t (*)(void))*a3)();
                v44 = v10->i64[v13];
                if (v45)
                {
                  v46 = *((_QWORD *)v27 - 1);
                  *((_QWORD *)v27 - 1) = v44;
                  v10->i64[v13] = v46;
LABEL_51:
                  v44 = v46;
                }
              }
            }
LABEL_52:
            v48 = v10->i64[0];
            v10->i64[0] = v44;
            v10->i64[v13] = v48;
            --a4;
            v21 = v10->i64[0];
            if ((a5 & 1) != 0)
              goto LABEL_54;
            goto LABEL_53;
          }
          v18 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v10->i64[0], v10->i64[v13]);
          v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v9, v10->i64[0]);
          if ((v18 & 1) != 0)
          {
            v20 = v10->i64[v13];
            if (v19)
            {
              v10->i64[v13] = *v9;
              *v9 = v20;
              --a4;
              v21 = v10->i64[0];
              if ((a5 & 1) != 0)
                goto LABEL_54;
              goto LABEL_53;
            }
            v10->i64[v13] = v10->i64[0];
            v10->i64[0] = v20;
            if ((*a3)(*v9))
            {
              v33 = v10->i64[0];
              v10->i64[0] = *v9;
              *v9 = v33;
            }
          }
          else if (v19)
          {
            v24 = v10->i64[0];
            v10->i64[0] = *v9;
            *v9 = v24;
            if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v10->i64[0], v10->i64[v13]))
            {
              v25 = v10->i64[v13];
              v10->i64[v13] = v10->i64[0];
              v10->i64[0] = v25;
              --a4;
              v21 = v25;
              if ((a5 & 1) != 0)
                goto LABEL_54;
              goto LABEL_53;
            }
          }
          --a4;
          v21 = v10->i64[0];
          if ((a5 & 1) != 0)
            goto LABEL_54;
LABEL_53:
          v49 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10[-1].i64[1], v21);
          v21 = v10->i64[0];
          if ((v49 & 1) == 0)
          {
            result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v10->i64[0], *v9);
            if ((result & 1) != 0)
            {
              do
              {
                v62 = v10->i64[1];
                v10 = (int8x16_t *)((char *)v10 + 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v62);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v63 = (int8x16_t *)&v10->u64[1];
              do
              {
                v10 = v63;
                if (v63 >= v8)
                  break;
                v63 = (int8x16_t *)((char *)v63 + 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v10->i64[0]);
              }
              while (!(_DWORD)result);
            }
            if (v10 < v8)
            {
              v8 = a2;
              do
              {
                v64 = v8[-1].i64[1];
                v8 = (int8x16_t *)((char *)v8 - 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v64);
              }
              while ((result & 1) != 0);
            }
            while (v10 < v8)
            {
              v65 = v10->i64[0];
              v10->i64[0] = v8->i64[0];
              v8->i64[0] = v65;
              do
              {
                v66 = v10->i64[1];
                v10 = (int8x16_t *)((char *)v10 + 8);
              }
              while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v21, v66));
              do
              {
                v67 = v8[-1].i64[1];
                v8 = (int8x16_t *)((char *)v8 - 8);
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v21, v67);
              }
              while ((result & 1) != 0);
            }
            v68 = &v10[-1].i64[1];
            if (&v10[-1].u64[1] != (unint64_t *)v7)
              v7->i64[0] = *v68;
            a5 = 0;
            *v68 = v21;
            v8 = a2;
            continue;
          }
LABEL_54:
          v50 = v10;
          do
          {
            v51 = v50;
            v52 = v50->i64[1];
            v50 = (int8x16_t *)((char *)v50 + 8);
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v52, v21) & 1) != 0);
          if (v51 == v10)
          {
            v8 = a2;
            do
            {
              if (v50 >= v8)
                break;
              v54 = v8[-1].i64[1];
              v8 = (int8x16_t *)((char *)v8 - 8);
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v54, v21) & 1) == 0);
          }
          else
          {
            do
            {
              v53 = v8[-1].i64[1];
              v8 = (int8x16_t *)((char *)v8 - 8);
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v53, v21));
          }
          if (v50 < v8)
          {
            v55 = v50;
            v56 = v8;
            do
            {
              v57 = v55->i64[0];
              v55->i64[0] = v56->i64[0];
              v56->i64[0] = v57;
              do
              {
                v51 = v55;
                v58 = v55->i64[1];
                v55 = (int8x16_t *)((char *)v55 + 8);
              }
              while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v58, v21) & 1) != 0);
              do
              {
                v59 = v56[-1].i64[1];
                v56 = (int8x16_t *)((char *)v56 - 8);
              }
              while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v59, v21));
            }
            while (v55 < v56);
          }
          if (v51 != v7)
            v7->i64[0] = v51->i64[0];
          v51->i64[0] = v21;
          v60 = v50 >= v8;
          v8 = a2;
          if (!v60)
            goto LABEL_74;
          v61 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v7, v51, a3);
          v10 = (int8x16_t *)&v51->u64[1];
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(&v51->i64[1], a2, a3);
          if (!(_DWORD)result)
          {
            if (v61)
              continue;
LABEL_74:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **,false>(v7, v51, a3, a4, a5 & 1);
            a5 = 0;
            v10 = (int8x16_t *)&v51->u64[1];
            continue;
          }
          a2 = v51;
          if (v61)
            return result;
          goto LABEL_2;
        }
        v79 = (int8x16_t *)&v10->u64[1];
        v81 = v10 == v8 || v79 == v8;
        if ((a5 & 1) != 0)
        {
          if (!v81)
          {
            v82 = 0;
            v83 = (uint64_t *)v10;
            do
            {
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v79->i64[0], *v83);
              if ((_DWORD)result)
              {
                v85 = 0;
                v86 = v79->i64[0];
                do
                {
                  v83[v85 / 8 + 1] = v83[v85 / 8];
                  if (v82 == v85)
                  {
                    v84 = (uint64_t *)v10;
                    goto LABEL_115;
                  }
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v86, v83[v85 / 8 - 1]);
                  v85 -= 8;
                }
                while ((result & 1) != 0);
                v84 = &v79->i64[v85 / 8];
LABEL_115:
                *v84 = v86;
              }
              v79 = (int8x16_t *)((char *)v79 + 8);
              v82 -= 8;
              ++v83;
            }
            while (v79 != a2);
          }
        }
        else if (!v81)
        {
          do
          {
            v89 = v7->i64[0];
            v88 = v7->i64[1];
            v7 = v79;
            result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v88, v89);
            if ((_DWORD)result)
            {
              v90 = v79->i64[0];
              v91 = (uint64_t *)v79;
              do
              {
                v92 = v91;
                v93 = *--v91;
                *v92 = v93;
                result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v90, *(v92 - 2));
              }
              while ((result & 1) != 0);
              *v91 = v90;
            }
            v79 = (int8x16_t *)((char *)v79 + 8);
          }
          while (&v7->u64[1] != (unint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(_QWORD *a1, _QWORD *a2, unsigned int (**a3)(uint64_t))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      v9 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
      v10 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), a1[1]);
      if ((v9 & 1) != 0)
      {
        v11 = *a1;
        if (v10)
        {
          *a1 = *(a2 - 1);
          *(a2 - 1) = v11;
        }
        else
        {
          *a1 = a1[1];
          a1[1] = v11;
          if ((*a3)(*(a2 - 1)))
          {
            v26 = a1[1];
            a1[1] = *(a2 - 1);
            *(a2 - 1) = v26;
          }
        }
      }
      else if (v10)
      {
        v24 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v24;
        v19 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
LABEL_17:
        if (v19)
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(p2t::Point const*,p2t::Point const*),p2t::Point**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v12 = a1 + 2;
      v13 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(p2t::Point const*,p2t::Point const*),p2t::Point**>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), a1[3]))
        return 1;
      v14 = *v13;
      *v13 = *(a2 - 1);
      *(a2 - 1) = v14;
      if (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*v13, *v12))
        return 1;
      v15 = *v12;
      *v12 = *v13;
      *v13 = v15;
      if (!((unsigned int (*)(void))*a3)())
        return 1;
      v17 = a1[1];
      v16 = a1[2];
      v18 = *a1;
      a1[1] = v16;
      a1[2] = v17;
      v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v16, v18);
      goto LABEL_17;
    default:
      v20 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[1], *a1);
      v21 = a1 + 2;
      v22 = ((uint64_t (*)(_QWORD, _QWORD))*a3)(a1[2], a1[1]);
      if ((v20 & 1) != 0)
      {
        v23 = *a1;
        if (v22)
        {
          *a1 = a1[2];
          a1[2] = v23;
        }
        else
        {
          v27 = a1[2];
          *a1 = a1[1];
          a1[1] = v23;
          if ((*a3)(v27))
            *(int8x16_t *)(a1 + 1) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
        }
      }
      else if (v22)
      {
        v25 = a1[1];
        a1[1] = a1[2];
        a1[2] = v25;
        if (((unsigned int (*)(void))*a3)())
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
      }
      v28 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v29 = 0;
      v30 = 0;
      break;
  }
  while (!((unsigned int (*)(_QWORD, _QWORD))*a3)(*v28, *v21))
  {
LABEL_35:
    v21 = v28;
    v29 += 8;
    if (++v28 == a2)
      return 1;
  }
  v31 = *v28;
  v32 = v29;
  do
  {
    v33 = (char *)a1 + v32;
    *(_QWORD *)((char *)a1 + v32 + 24) = *(_QWORD *)((char *)a1 + v32 + 16);
    if (v32 == -16)
    {
      *a1 = v31;
      if (++v30 != 8)
        goto LABEL_35;
      return v28 + 1 == a2;
    }
    v32 -= 8;
  }
  while ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v31, *((_QWORD *)v33 + 1)) & 1) != 0);
  *(_QWORD *)((char *)a1 + v32 + 24) = v31;
  if (++v30 != 8)
    goto LABEL_35;
  return v28 + 1 == a2;
}

_QWORD *std::vector<ClipperLib::IntPoint>::__assign_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_22;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v12 = 0xFFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 60)
LABEL_22:
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v13 = 2 * v12;
    result = operator new(16 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 4;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[16 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void std::vector<ClipperLib::IntPoint>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x22E2A501C](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x22E2A5028](v13);
  return a1;
}

void sub_227BA21C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x22E2A5028](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x227BA21A8);
}

void sub_227BA2210(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_227BA23AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_227BA2414(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA2428(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA247C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA24EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BA2640(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  __cxa_guard_abort(&qword_25591E728);
  _Unwind_Resume(a1);
}

void sub_227BA2744(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227BA275C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BA2770(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_227BA28D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227BA28E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BA28FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BA2910(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_227BA2EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_227BA3070()
{
  JUMPOUT(0x227BA3028);
}

void sub_227BA3078()
{
  JUMPOUT(0x227BA302CLL);
}

void sub_227BA3080()
{
  JUMPOUT(0x227BA302CLL);
}

void sub_227BA3110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BA31B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA3218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)GKNoise;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_227BA32AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_227BA32C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BA33B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_227BA3580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_227BA3884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_227BA3A1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA3A2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BA3A40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_227BA3A5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227BA3A74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BA3ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BA3B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BA3BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BA3C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BA3C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BA3CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_227BA3D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BA3D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_227BA3DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BA3DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BA3E28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA3E94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA3F00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA3F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_227BA3F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BA3FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_227BA3FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BA4064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_227BA407C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BA40E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_227BA40FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BA4164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_227BA417C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BA4214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_227BA4234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_227BA42EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_227BA4308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_227BA4404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227BA441C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BA4430(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA44C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA4568(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BA457C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA4624(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BA4638(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA46F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BA470C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA47C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA48F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA4A2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA4B14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA4C88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA4E2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA4F94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_227BA506C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_227BA5268(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227BA563C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA573C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA574C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227BA5764(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BA5778(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA58AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BA58C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227BA58DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BA5ABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA5B98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA5BA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BA5BBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA5D08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA5E8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA60D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA6204(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA6214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA6310(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA6320(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA641C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA642C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA6528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA6538(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA663C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA664C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA67A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA67B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA67C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA67D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA6998(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA69A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA69B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void OpenSteer::PolylinePathway::~PolylinePathway(OpenSteer::PolylinePathway *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24F04F318;
  v2 = *((_QWORD *)this + 10);
  if (v2)
    MEMORY[0x22E2A5088](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    MEMORY[0x22E2A5088](v3, 0x1000C803E1C8BA9);
  v4 = *((_QWORD *)this + 11);
  if (v4)
    MEMORY[0x22E2A5088](v4, 0x1000C803E1C8BA9);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24F04F318;
  v2 = *((_QWORD *)this + 10);
  if (v2)
    MEMORY[0x22E2A5088](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    MEMORY[0x22E2A5088](v3, 0x1000C803E1C8BA9);
  v4 = *((_QWORD *)this + 11);
  if (v4)
    MEMORY[0x22E2A5088](v4, 0x1000C803E1C8BA9);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_24F04F318;
  v2 = *((_QWORD *)this + 10);
  if (v2)
    MEMORY[0x22E2A5088](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    MEMORY[0x22E2A5088](v3, 0x1000C803E1C8BA9);
  v4 = *((_QWORD *)this + 11);
  if (v4)
    MEMORY[0x22E2A5088](v4, 0x1000C803E1C8BA9);
  JUMPOUT(0x22E2A50A0);
}

OpenSteer::PolylinePathway *OpenSteer::PolylinePathway::PolylinePathway(OpenSteer::PolylinePathway *this, int a2, const Vec3 *a3, float a4, int a5)
{
  *(_QWORD *)this = &off_24F04F318;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 0;
  OpenSteer::PolylinePathway::initialize(this, a2, a3, a4, a5);
  return this;
}

{
  *(_QWORD *)this = &off_24F04F318;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 0;
  OpenSteer::PolylinePathway::initialize(this, a2, a3, a4, a5);
  return this;
}

void OpenSteer::PolylinePathway::initialize(OpenSteer::PolylinePathway *this, int a2, const Vec3 *a3, float a4, int a5)
{
  int v7;
  void *v8;
  void *v9;
  int v10;
  char *v11;
  float32x4_t v12;
  float32x4_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  const Vec3 *v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;

  *((float *)this + 6) = a4;
  *((_BYTE *)this + 28) = a5;
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 24) = 0;
  if (a5)
    *((_DWORD *)this + 2) = a2 + 1;
  *((_QWORD *)this + 10) = operator new[]();
  v7 = *((_DWORD *)this + 2);
  is_mul_ok(v7, 0xCuLL);
  v8 = (void *)operator new[]();
  v9 = v8;
  if (v7)
    bzero(v8, 12 * ((12 * v7 - 12) / 0xCuLL) + 12);
  *((_QWORD *)this + 2) = v9;
  v10 = *((_DWORD *)this + 2);
  is_mul_ok(v10, 0xCuLL);
  v11 = (char *)operator new[]();
  v14 = v11;
  if (v10)
    bzero(v11, 12 * ((12 * v10 - 12) / 0xCuLL) + 12);
  *((_QWORD *)this + 11) = v14;
  v15 = *((unsigned int *)this + 2);
  if ((int)v15 >= 1)
  {
    v16 = *((unsigned __int8 *)this + 28);
    v17 = *((_QWORD *)this + 2);
    v18 = *(_QWORD *)&a3->x;
    *(float *)(v17 + 8) = a3->z;
    *(_QWORD *)v17 = v18;
    if ((_DWORD)v15 != 1)
    {
      v19 = 0;
      v20 = (v15 - 1) - 1;
      v21 = v17 + 12;
      v22 = v14 + 12;
      v23 = *((_QWORD *)this + 10) + 4;
      v24 = v15 - 1;
      do
      {
        if (v20 != v19 || v16 == 0)
          v26 = v19 + 1;
        else
          v26 = 0;
        v27 = &a3[v26];
        v13.i64[0] = *(_QWORD *)&v27->x;
        v13.i32[2] = LODWORD(v27->z);
        *(_DWORD *)(v21 + 8) = v13.i32[2];
        *(_QWORD *)v21 = v13.i64[0];
        v21 += 12;
        v28 = v17 + 12 * v19;
        v12.i64[0] = *(_QWORD *)v28;
        v12.i32[2] = *(_DWORD *)(v28 + 8);
        v29 = vsubq_f32(v13, v12);
        *((_DWORD *)v22 + 2) = v29.i32[2];
        *(_QWORD *)v22 = v29.i64[0];
        v30 = vmulq_f32(v29, v29);
        v30.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v30.f32) + v30.f32[2]);
        *(_DWORD *)(v23 + 4 * v19) = v30.i32[0];
        v13.i64[0] = *(_QWORD *)v22;
        v13.i32[2] = *((_DWORD *)v22 + 2);
        v12 = vmulq_n_f32(v13, 1.0 / v30.f32[0]);
        *((_DWORD *)v22 + 2) = v12.i32[2];
        *(_QWORD *)v22 = v12.i64[0];
        v22 += 12;
        *((float *)this + 24) = *((float *)this + 24) + *(float *)(v23 + 4 * v19++);
      }
      while (v24 != v19);
    }
  }
}

float OpenSteer::PolylinePathway::mapPointToPath(OpenSteer::PolylinePathway *this, const Vec3 *a2, Vec3 *a3, float *a4)
{
  float v7;
  float v8;
  float v9;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;

  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  if (*((int *)this + 2) >= 2)
  {
    v11 = 3.4028e38;
    v12 = 1;
    v13 = 12;
    do
    {
      v14 = *((_QWORD *)this + 11);
      *((_DWORD *)this + 8) = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v12);
      v15 = v14 + v13;
      v16 = *(_QWORD *)(v14 + v13);
      *((_DWORD *)this + 18) = *(_DWORD *)(v15 + 8);
      *((_QWORD *)this + 8) = v16;
      v17 = OpenSteer::PolylinePathway::pointToSegmentDistance(this, a2, (const Vec3 *)(*((_QWORD *)this + 2) + v13 - 12), (const Vec3 *)(*((_QWORD *)this + 2) + v13));
      if (v17 < v11)
      {
        v9 = *((float *)this + 13);
        v8 = *((float *)this + 14);
        v7 = *((float *)this + 15);
        v18 = *((_QWORD *)this + 8);
        a3->z = *((float *)this + 18);
        *(_QWORD *)&a3->x = v18;
        v11 = v17;
      }
      ++v12;
      v13 += 12;
    }
    while (v12 < *((int *)this + 2));
  }
  *a4 = sqrtf((float)((float)((float)(v9 - a2->x) * (float)(v9 - a2->x)) + (float)((float)(v8 - a2->y) * (float)(v8 - a2->y)))+ (float)((float)(v7 - a2->z) * (float)(v7 - a2->z)))- *((float *)this + 6);
  return v9;
}

float OpenSteer::PolylinePathway::pointToSegmentDistance(OpenSteer::PolylinePathway *this, const Vec3 *a2, const Vec3 *a3, const Vec3 *a4)
{
  float v4;
  float v6;
  float v13;
  float v14;
  uint64_t v15;
  float v16;
  float32x2_t v17;
  float32x2_t v18;
  float v19;
  uint64_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float y;
  float v31;

  v4 = a2->z - a3->z;
  _D2 = vsub_f32(*(float32x2_t *)&a2->x, *(float32x2_t *)&a3->x);
  *((float32x2_t *)this + 5) = _D2;
  *((float *)this + 12) = v4;
  v6 = *((float *)this + 16);
  _S1 = *((float *)this + 17);
  __asm { FMLA            S4, S1, V2.S[1] }
  v13 = *((float *)this + 18);
  v14 = _S4 + (float)(v13 * v4);
  *((float *)this + 9) = v14;
  if (v14 < 0.0)
  {
    v15 = *(_QWORD *)&a3->x;
    *((_DWORD *)this + 15) = LODWORD(a3->z);
    *(_QWORD *)((char *)this + 52) = v15;
    *((_DWORD *)this + 9) = 0;
    v16 = a2->x - a3->x;
    v17 = *(float32x2_t *)&a2->y;
    v18 = *(float32x2_t *)&a3->y;
LABEL_5:
    v21 = vsub_f32(v17, v18);
    v22 = vmul_f32(v21, v21);
    return sqrtf((float)(v22.f32[0] + (float)(v16 * v16)) + v22.f32[1]);
  }
  v19 = *((float *)this + 8);
  if (v14 > v19)
  {
    v20 = *(_QWORD *)&a4->x;
    *((_DWORD *)this + 15) = LODWORD(a4->z);
    *(_QWORD *)((char *)this + 52) = v20;
    *((float *)this + 9) = v19;
    v16 = a2->x - a4->x;
    v17 = *(float32x2_t *)&a2->y;
    v18 = *(float32x2_t *)&a4->y;
    goto LABEL_5;
  }
  v24 = v14 * v6;
  v25 = v14 * _S1;
  v26 = v14 * v13;
  *((float *)this + 13) = v24;
  *((float *)this + 14) = v25;
  *((float *)this + 15) = v26;
  v27 = a3->x + v24;
  v28 = a3->y + v25;
  v29 = a3->z + v26;
  *((float *)this + 13) = v27;
  *((float *)this + 14) = v28;
  y = a2->y;
  v31 = a2->x - v27;
  *((float *)this + 15) = v29;
  return sqrtf((float)((float)(v31 * v31) + (float)((float)(y - v28) * (float)(y - v28)))+ (float)((float)(a2->z - v29) * (float)(a2->z - v29)));
}

float OpenSteer::PolylinePathway::mapPointToPathDistance(OpenSteer::PolylinePathway *this, const Vec3 *a2)
{
  float v2;
  float v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;

  v2 = 0.0;
  if (*((int *)this + 2) >= 2)
  {
    v5 = 0.0;
    v6 = 3.4028e38;
    v7 = 1;
    v8 = 12;
    do
    {
      v9 = *((_QWORD *)this + 11);
      *((_DWORD *)this + 8) = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v7);
      v10 = v9 + v8;
      v11 = *(_QWORD *)(v9 + v8);
      *((_DWORD *)this + 18) = *(_DWORD *)(v10 + 8);
      *((_QWORD *)this + 8) = v11;
      v12 = OpenSteer::PolylinePathway::pointToSegmentDistance(this, a2, (const Vec3 *)(*((_QWORD *)this + 2) + v8 - 12), (const Vec3 *)(*((_QWORD *)this + 2) + v8));
      if (v12 < v6)
      {
        v2 = *((float *)this + 9) + v5;
        v6 = v12;
      }
      v5 = *((float *)this + 8) + v5;
      ++v7;
      v8 += 12;
    }
    while (v7 < *((int *)this + 2));
  }
  return v2;
}

float32x2_t OpenSteer::PolylinePathway::mapPathDistanceToPoint(OpenSteer::PolylinePathway *this, float a2)
{
  float v2;
  uint64_t v4;
  float32x2_t result;
  uint64_t v6;
  uint64_t v7;
  float v8;

  v2 = a2;
  if (*((_BYTE *)this + 28))
  {
    v2 = fmodf(a2, *((float *)this + 24));
  }
  else
  {
    if (a2 < 0.0)
      return **((float32x2_t **)this + 2);
    if (*((float *)this + 24) <= a2)
      return *(float32x2_t *)(*((_QWORD *)this + 2) + 12 * *((int *)this + 2) - 12);
  }
  v4 = *((unsigned int *)this + 2);
  result = 0;
  if ((int)v4 >= 2)
  {
    v6 = *((_QWORD *)this + 10);
    v7 = 1;
    while (1)
    {
      v8 = *(float *)(v6 + 4 * v7);
      *((float *)this + 8) = v8;
      if (v8 >= v2)
        break;
      v2 = v2 - v8;
      if (v4 == ++v7)
        return result;
    }
    return vmla_n_f32(*(float32x2_t *)(*((_QWORD *)this + 2) + 12 * ((int)v7 - 1)), vsub_f32(*(float32x2_t *)(*((_QWORD *)this + 2) + 12 * v7), *(float32x2_t *)(*((_QWORD *)this + 2) + 12 * ((int)v7 - 1))), v2 / v8);
  }
  return result;
}

void sub_227BA73BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BA73D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA7478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BA748C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t p2t::Triangle::Triangle(uint64_t this, Point *a2, Point *a3, Point *a4)
{
  *(_QWORD *)(this + 8) = a2;
  *(_QWORD *)(this + 16) = a3;
  *(_DWORD *)this = 0;
  *(_WORD *)(this + 4) = 0;
  *(_QWORD *)(this + 24) = a4;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_BYTE *)(this + 56) = 0;
  return this;
}

_QWORD *p2t::Triangle::MarkNeighbor(_QWORD *this, Point *a2, Point *a3, p2t::Triangle *a4)
{
  Point *v4;
  Point *v5;
  BOOL v6;
  BOOL v7;
  Point *v8;
  _BOOL4 v10;
  _BOOL4 v14;
  BOOL v15;

  v4 = (Point *)this[2];
  v5 = (Point *)this[3];
  v6 = v5 == a2 && v4 == a3;
  if (v6 || (v5 == a3 ? (v7 = v4 == a2) : (v7 = 0), v7))
  {
    this[4] = a4;
  }
  else
  {
    v8 = (Point *)this[1];
    v10 = v5 == a2 && v8 == a3;
    if ((v8 != a2 || v5 != a3) && !v10)
    {
      v14 = v4 == a2 && v8 == a3;
      v15 = v8 == a2 && v4 == a3;
      if (!v15 && !v14)
        p2t::Triangle::MarkNeighbor((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
      this[6] = a4;
    }
    else
    {
      this[5] = a4;
    }
  }
  return this;
}

_QWORD *p2t::Triangle::MarkNeighbor(_QWORD *this, p2t::Triangle *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _BOOL4 v18;
  BOOL v19;
  _BOOL4 v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL4 v32;
  BOOL v33;
  _BOOL4 v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  _BOOL4 v42;
  BOOL v43;
  _BOOL4 v45;
  BOOL v46;

  v3 = this[2];
  v4 = this[3];
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 2);
  v7 = v5 == v3 || v6 == v3;
  v8 = *((_QWORD *)a2 + 3);
  v9 = v7 || v8 == v3;
  v10 = v9;
  if (v9)
  {
    v11 = v5 == v4 || v6 == v4;
    if (v11 || v8 == v4)
    {
      this[4] = a2;
      v13 = *((_QWORD *)a2 + 2);
      v14 = *((_QWORD *)a2 + 3);
      v15 = v14 == v3 && v13 == v4;
      if (!v15 && (v14 != v4 || v13 != v3))
      {
        v16 = *((_QWORD *)a2 + 1);
        v18 = v14 == v3 && v16 == v4;
        v19 = v16 == v3 && v14 == v4;
        if (!v19 && !v18)
        {
          v21 = v13 == v3 && v16 == v4;
          v22 = v16 == v3 && v13 == v4;
          if (!v22 && !v21)
            p2t::Triangle::MarkNeighbor((uint64_t)this, (uint64_t)a2, a3);
          goto LABEL_120;
        }
        goto LABEL_121;
      }
      goto LABEL_95;
    }
  }
  v23 = this[1];
  if (v5 == v23 || v6 == v23 || v8 == v23)
  {
    if (v5 != v4 && v6 != v4 && v8 != v4)
    {
      if (!v10)
        return this;
      this[6] = a2;
      v37 = *((_QWORD *)a2 + 2);
      v38 = *((_QWORD *)a2 + 3);
      if (__PAIR128__(v38, v37) == __PAIR128__(v23, v3) || v38 == v3 && v37 == v23)
        goto LABEL_95;
      v40 = *((_QWORD *)a2 + 1);
      v42 = v38 == v23 && v40 == v3;
      v43 = v40 == v23 && v38 == v3;
      if (!v43 && !v42)
      {
        v45 = v37 == v23 && v40 == v3;
        v46 = v40 == v23 && v37 == v3;
        if (!v46 && !v45)
          p2t::Triangle::MarkNeighbor((uint64_t)this, (uint64_t)a2, a3);
LABEL_120:
        v39 = (char *)a2 + 48;
        goto LABEL_96;
      }
      goto LABEL_121;
    }
    this[5] = a2;
    v28 = *((_QWORD *)a2 + 2);
    v29 = *((_QWORD *)a2 + 3);
    if (__PAIR128__(v29, v28) != __PAIR128__(v23, v4) && (v29 != v4 || v28 != v23))
    {
      v30 = *((_QWORD *)a2 + 1);
      v32 = v29 == v23 && v30 == v4;
      v33 = v30 == v23 && v29 == v4;
      if (!v33 && !v32)
      {
        v35 = v28 == v23 && v30 == v4;
        v36 = v30 == v23 && v28 == v4;
        if (!v36 && !v35)
          p2t::Triangle::MarkNeighbor((uint64_t)this, (uint64_t)a2, a3);
        goto LABEL_120;
      }
LABEL_121:
      v39 = (char *)a2 + 40;
      goto LABEL_96;
    }
LABEL_95:
    v39 = (char *)a2 + 32;
LABEL_96:
    *(_QWORD *)v39 = this;
  }
  return this;
}

double p2t::Triangle::Clear(p2t::Triangle *this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  p2t::Triangle *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  p2t::Triangle *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  p2t::Triangle *v12;
  double result;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    v2 = (_QWORD *)(v1 + 32);
    if (*(p2t::Triangle **)(v1 + 32) != this)
    {
      v4 = *(p2t::Triangle **)(v1 + 40);
      v3 = (_QWORD *)(v1 + 40);
      if (v4 == this)
        v2 = v3;
      else
        v2 = v3 + 1;
    }
    *v2 = 0;
  }
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    v6 = (_QWORD *)(v5 + 32);
    if (*(p2t::Triangle **)(v5 + 32) != this)
    {
      v8 = *(p2t::Triangle **)(v5 + 40);
      v7 = (_QWORD *)(v5 + 40);
      if (v8 == this)
        v6 = v7;
      else
        v6 = v7 + 1;
    }
    *v6 = 0;
  }
  v9 = *((_QWORD *)this + 6);
  if (v9)
  {
    v10 = (_QWORD *)(v9 + 32);
    if (*(p2t::Triangle **)(v9 + 32) != this)
    {
      v12 = *(p2t::Triangle **)(v9 + 40);
      v11 = (_QWORD *)(v9 + 40);
      if (v12 == this)
        v10 = v11;
      else
        v10 = v11 + 1;
    }
    *v10 = 0;
  }
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

uint64_t p2t::Triangle::ClearNeighbor(uint64_t this, p2t::Triangle *a2)
{
  _QWORD *v2;
  p2t::Triangle *v3;

  v2 = (_QWORD *)(this + 32);
  if (*(p2t::Triangle **)(this + 32) != a2)
  {
    v3 = *(p2t::Triangle **)(this + 40);
    this += 40;
    if (v3 == a2)
      v2 = (_QWORD *)this;
    else
      v2 = (_QWORD *)(this + 8);
  }
  *v2 = 0;
  return this;
}

_QWORD *p2t::Triangle::ClearNeighbors(_QWORD *this)
{
  this[4] = 0;
  this[5] = 0;
  this[6] = 0;
  return this;
}

uint64_t p2t::Triangle::ClearDelunayEdges(uint64_t this)
{
  *(_BYTE *)(this + 5) = 0;
  *(_WORD *)(this + 3) = 0;
  return this;
}

Point *p2t::Triangle::OppositePoint(p2t::Triangle *this, p2t::Triangle *a2, Point *a3)
{
  Point *v3;
  Point *v4;
  Point *v5;

  v3 = (Point *)*((_QWORD *)a2 + 1);
  if (v3 == a3)
  {
    v4 = (Point *)*((_QWORD *)a2 + 3);
    goto LABEL_6;
  }
  v4 = (Point *)*((_QWORD *)a2 + 2);
  if (v4 != a3)
  {
    if (*((Point **)a2 + 3) != a3)
      p2t::Triangle::OppositePoint((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
LABEL_6:
    v5 = (Point *)*((_QWORD *)this + 1);
    if (v5 != v4)
      goto LABEL_7;
    return (Point *)*((_QWORD *)this + 3);
  }
  v4 = (Point *)*((_QWORD *)a2 + 1);
  v5 = (Point *)*((_QWORD *)this + 1);
  if (v5 == v3)
    return (Point *)*((_QWORD *)this + 3);
LABEL_7:
  if (*((Point **)this + 2) == v4)
    return v5;
  if (*((Point **)this + 3) != v4)
    p2t::Triangle::OppositePoint((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
  return (Point *)*((_QWORD *)this + 2);
}

Point *p2t::Triangle::PointCW(p2t::Triangle *this, Point *a2, uint64_t a3)
{
  Point *v4;
  Point *result;

  v4 = (Point *)*((_QWORD *)this + 1);
  if (v4 == a2)
    return (Point *)*((_QWORD *)this + 3);
  result = (Point *)*((_QWORD *)this + 2);
  if (result == a2)
    return v4;
  if (*((Point **)this + 3) != a2)
    p2t::Triangle::OppositePoint((uint64_t)result, (uint64_t)a2, a3);
  return result;
}

_QWORD *p2t::Triangle::Legalize(_QWORD *this, Point *a2)
{
  uint64_t v2;

  v2 = this[1];
  this[1] = this[3];
  this[2] = v2;
  this[3] = a2;
  return this;
}

_QWORD *p2t::Triangle::Legalize(_QWORD *this, Point *a2, Point *a3)
{
  _QWORD *v3;
  Point *v4;
  Point *v5;
  uint64_t v6;

  v3 = this + 1;
  v4 = (Point *)this[1];
  if (v4 == a2)
  {
    v6 = this[3];
    this += 3;
    *(this - 2) = v6;
    *(this - 1) = a2;
    *this = a3;
  }
  else
  {
    v5 = (Point *)this[2];
    if (v5 == a2)
    {
      this[2] = v4;
      this[3] = a2;
      *v3 = a3;
    }
    else
    {
      if ((Point *)this[3] != a2)
        p2t::Triangle::Legalize();
      this[1] = a2;
      this[3] = v5;
      this += 2;
      v3[1] = a3;
    }
  }
  return this;
}

uint64_t p2t::Triangle::Index(const Point **this, const Point *a2)
{
  if (this[1] == a2)
    return 0;
  if (this[2] == a2)
    return 1;
  if (this[3] != a2)
    p2t::Triangle::Index();
  return 2;
}

uint64_t p2t::Triangle::EdgeIndex(p2t::Triangle *this, const Point *a2, const Point *a3)
{
  const Point *v3;
  const Point *v4;
  const Point *v5;

  v3 = (const Point *)*((_QWORD *)this + 1);
  v4 = (const Point *)*((_QWORD *)this + 2);
  if (v3 == a2)
  {
    if (v4 != a3)
    {
      if (*((const Point **)this + 3) != a3)
        return 0xFFFFFFFFLL;
      return 1;
    }
    return 2;
  }
  v5 = (const Point *)*((_QWORD *)this + 3);
  if (v4 != a2)
  {
    if (v5 != a2)
      return 0xFFFFFFFFLL;
    if (v3 != a3)
    {
      if (v4 == a3)
        return 0;
      return 0xFFFFFFFFLL;
    }
    return 1;
  }
  if (v5 != a3)
  {
    if (v3 != a3)
      return 0xFFFFFFFFLL;
    return 2;
  }
  return 0;
}

uint64_t p2t::Triangle::MarkConstrainedEdge(uint64_t this, int a2)
{
  *(_BYTE *)(this + a2) = 1;
  return this;
}

uint64_t p2t::Triangle::MarkConstrainedEdge(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _BOOL4 v7;
  BOOL v8;
  uint64_t v9;
  _BOOL4 v12;

  v2 = *a2;
  v3 = a2[1];
  v5 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  if (v5 != v3)
  {
    v6 = v4 == v3;
    v8 = v5 == v2;
    v7 = v5 == v2;
    v8 = v8 && v4 == v3;
    if (!v8)
    {
      v9 = *(_QWORD *)(result + 24);
      goto LABEL_7;
    }
LABEL_29:
    *(_BYTE *)(result + 2) = 1;
    return result;
  }
  if (v4 == v2)
    goto LABEL_29;
  v6 = v4 == v3;
  v7 = v3 == v2;
  if (v3 == v2 && v4 == v3)
    goto LABEL_29;
  v9 = *(_QWORD *)(result + 24);
  if (v9 == v2)
  {
LABEL_28:
    *(_BYTE *)(result + 1) = 1;
    return result;
  }
LABEL_7:
  if (v7 && v9 == v3)
    goto LABEL_28;
  if (v9 != v2)
    v6 = 0;
  v12 = v4 == v2 && v9 == v3;
  if (v6 || v12)
    *(_BYTE *)result = 1;
  return result;
}

uint64_t p2t::Triangle::MarkConstrainedEdge(uint64_t this, Point *a2, Point *a3)
{
  Point *v3;
  Point *v4;
  BOOL v5;
  _BOOL4 v6;
  BOOL v7;
  Point *v8;
  _BOOL4 v11;

  v4 = *(Point **)(this + 8);
  v3 = *(Point **)(this + 16);
  if (v4 != a3)
  {
    v5 = v3 == a3;
    v7 = v4 == a2;
    v6 = v4 == a2;
    v7 = v7 && v3 == a3;
    if (!v7)
    {
      v8 = *(Point **)(this + 24);
      goto LABEL_7;
    }
LABEL_29:
    *(_BYTE *)(this + 2) = 1;
    return this;
  }
  if (v3 == a2)
    goto LABEL_29;
  v5 = v3 == a3;
  v7 = v4 == a2;
  v6 = v4 == a2;
  if (v7 && v3 == a3)
    goto LABEL_29;
  v8 = *(Point **)(this + 24);
  if (v8 == a2)
  {
LABEL_28:
    *(_BYTE *)(this + 1) = 1;
    return this;
  }
LABEL_7:
  if (v6 && v8 == a3)
    goto LABEL_28;
  if (v8 != a2)
    v5 = 0;
  v11 = v3 == a2 && v8 == a3;
  if (v5 || v11)
    *(_BYTE *)this = 1;
  return this;
}

Point *p2t::Triangle::PointCCW(p2t::Triangle *this, Point *a2)
{
  Point *result;
  Point *v4;
  Point *v5;

  result = (Point *)*((_QWORD *)this + 1);
  v4 = (Point *)*((_QWORD *)this + 2);
  if (result == a2)
    return (Point *)*((_QWORD *)this + 2);
  v5 = (Point *)*((_QWORD *)this + 3);
  if (v4 == a2)
    return v5;
  if (v5 != a2)
    p2t::Triangle::PointCCW();
  return result;
}

uint64_t p2t::Triangle::NeighborCW(p2t::Triangle *this, Point *a2)
{
  char *v2;

  if (*((Point **)this + 1) == a2)
    return *((_QWORD *)this + 5);
  v2 = (char *)this + 32;
  if (*((Point **)this + 2) == a2)
    v2 = (char *)this + 48;
  return *(_QWORD *)v2;
}

uint64_t p2t::Triangle::NeighborCCW(p2t::Triangle *this, Point *a2)
{
  char *v2;

  if (*((Point **)this + 1) == a2)
    return *((_QWORD *)this + 6);
  v2 = (char *)this + 40;
  if (*((Point **)this + 2) == a2)
    v2 = (char *)this + 32;
  return *(_QWORD *)v2;
}

uint64_t p2t::Triangle::GetConstrainedEdgeCCW(Point **this, Point *a2)
{
  Point **v2;

  if (this[1] == a2)
    return *((unsigned __int8 *)this + 2);
  if (this[2] == a2)
    v2 = this;
  else
    v2 = (Point **)((char *)this + 1);
  return *(unsigned __int8 *)v2;
}

uint64_t p2t::Triangle::GetConstrainedEdgeCW(Point **this, Point *a2)
{
  Point **v2;

  if (this[1] == a2)
    return *((unsigned __int8 *)this + 1);
  if (this[2] == a2)
    v2 = (Point **)((char *)this + 2);
  else
    v2 = this;
  return *(unsigned __int8 *)v2;
}

uint64_t p2t::Triangle::SetConstrainedEdgeCCW(uint64_t this, Point *a2, char a3)
{
  if (*(Point **)(this + 8) == a2)
  {
    *(_BYTE *)(this + 2) = a3;
  }
  else if (*(Point **)(this + 16) == a2)
  {
    *(_BYTE *)this = a3;
  }
  else
  {
    *(_BYTE *)(this + 1) = a3;
  }
  return this;
}

uint64_t p2t::Triangle::SetConstrainedEdgeCW(uint64_t this, Point *a2, char a3)
{
  if (*(Point **)(this + 8) == a2)
  {
    *(_BYTE *)(this + 1) = a3;
  }
  else if (*(Point **)(this + 16) == a2)
  {
    *(_BYTE *)(this + 2) = a3;
  }
  else
  {
    *(_BYTE *)this = a3;
  }
  return this;
}

uint64_t p2t::Triangle::GetDelunayEdgeCCW(Point **this, Point *a2)
{
  unsigned __int8 *v2;

  if (this[1] == a2)
    return *((unsigned __int8 *)this + 5);
  v2 = (unsigned __int8 *)this + 4;
  if (this[2] == a2)
    v2 = (unsigned __int8 *)this + 3;
  return *v2;
}

uint64_t p2t::Triangle::GetDelunayEdgeCW(Point **this, Point *a2)
{
  unsigned __int8 *v2;

  if (this[1] == a2)
    return *((unsigned __int8 *)this + 4);
  v2 = (unsigned __int8 *)this + 3;
  if (this[2] == a2)
    v2 = (unsigned __int8 *)this + 5;
  return *v2;
}

uint64_t p2t::Triangle::SetDelunayEdgeCCW(uint64_t this, Point *a2, char a3)
{
  _BYTE *v3;

  if (*(Point **)(this + 8) == a2)
  {
    *(_BYTE *)(this + 5) = a3;
  }
  else
  {
    v3 = (_BYTE *)(this + 4);
    if (*(Point **)(this + 16) == a2)
      v3 = (_BYTE *)(this + 3);
    *v3 = a3;
  }
  return this;
}

uint64_t p2t::Triangle::SetDelunayEdgeCW(uint64_t this, Point *a2, char a3)
{
  _BYTE *v3;

  if (*(Point **)(this + 8) == a2)
  {
    *(_BYTE *)(this + 4) = a3;
  }
  else
  {
    v3 = (_BYTE *)(this + 3);
    if (*(Point **)(this + 16) == a2)
      v3 = (_BYTE *)(this + 5);
    *v3 = a3;
  }
  return this;
}

uint64_t p2t::Triangle::NeighborAcross(p2t::Triangle *this, Point *a2)
{
  char *v2;

  if (*((Point **)this + 1) == a2)
    return *((_QWORD *)this + 4);
  v2 = (char *)this + 48;
  if (*((Point **)this + 2) == a2)
    v2 = (char *)this + 40;
  return *(_QWORD *)v2;
}

uint64_t p2t::Triangle::DebugPrint(p2t::Triangle *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  std::locale v9;

  v1 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)",", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" ", 1);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)",", 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" ", 1);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)",", 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v7 = std::locale::use_facet(&v9, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v9);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_227BA7F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 55, a4);
}

void OUTLINED_FUNCTION_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 221, a4);
}

_QWORD *OpenSteer::PlugIn::PlugIn(_QWORD *this)
{
  uint64_t v1;

  *this = &unk_24F04F378;
  v1 = OpenSteer::PlugIn::itemsInRegistry++;
  OpenSteer::PlugIn::registry[v1] = (uint64_t)this;
  return this;
}

uint64_t OpenSteer::PlugIn::addToRegistry(uint64_t this)
{
  uint64_t v1;

  v1 = OpenSteer::PlugIn::itemsInRegistry++;
  OpenSteer::PlugIn::registry[v1] = this;
  return this;
}

uint64_t OpenSteer::PlugIn::next(OpenSteer::PlugIn *this)
{
  uint64_t v1;
  uint64_t v3;

  if (OpenSteer::PlugIn::itemsInRegistry < 1)
    return 0;
  v1 = 0;
  while ((OpenSteer::PlugIn *)OpenSteer::PlugIn::registry[v1] != this)
  {
    if (OpenSteer::PlugIn::itemsInRegistry == ++v1)
      return 0;
  }
  if (OpenSteer::PlugIn::itemsInRegistry - 1 == (_DWORD)v1)
    v3 = 0;
  else
    v3 = (v1 + 1);
  return OpenSteer::PlugIn::registry[v3];
}

uint64_t OpenSteer::PlugIn::findByName(OpenSteer::PlugIn *this, const char *a2)
{
  uint64_t v2;
  uint64_t v4;
  const char *v5;

  v2 = 0;
  if (this && OpenSteer::PlugIn::itemsInRegistry >= 1)
  {
    v4 = 0;
    while (1)
    {
      v2 = OpenSteer::PlugIn::registry[v4];
      v5 = (const char *)(*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v2 + 40))(v2, a2);
      if (v5)
      {
        if (!strcmp((const char *)this, v5))
          break;
      }
      if (++v4 >= OpenSteer::PlugIn::itemsInRegistry)
        return 0;
    }
  }
  return v2;
}

uint64_t (*OpenSteer::PlugIn::applyToAll(uint64_t (*this)(uint64_t, void (*)(OpenSteer::PlugIn *)), void (*a2)(OpenSteer::PlugIn *)))(uint64_t, void (*)(OpenSteer::PlugIn *))
{
  uint64_t (*v2)(uint64_t, void (*)(OpenSteer::PlugIn *));
  uint64_t v3;

  if (OpenSteer::PlugIn::itemsInRegistry >= 1)
  {
    v2 = this;
    v3 = 0;
    do
      this = (uint64_t (*)(uint64_t, void (*)(OpenSteer::PlugIn *)))v2(OpenSteer::PlugIn::registry[v3++], a2);
    while (v3 < OpenSteer::PlugIn::itemsInRegistry);
  }
  return this;
}

void OpenSteer::PlugIn::sortBySelectionOrder(OpenSteer::PlugIn *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;

  v1 = OpenSteer::PlugIn::itemsInRegistry;
  if (OpenSteer::PlugIn::itemsInRegistry >= 2)
  {
    v2 = 0;
    v3 = 1;
    do
    {
      v4 = v2 + 1;
      if (v2 + 1 < v1)
      {
        v5 = v3;
        do
        {
          v6 = (*(float (**)(uint64_t))(*(_QWORD *)OpenSteer::PlugIn::registry[v2] + 48))(OpenSteer::PlugIn::registry[v2]);
          if (v6 > (*(float (**)(uint64_t))(*(_QWORD *)OpenSteer::PlugIn::registry[v5] + 48))(OpenSteer::PlugIn::registry[v5]))
          {
            v7 = OpenSteer::PlugIn::registry[v2];
            OpenSteer::PlugIn::registry[v2] = OpenSteer::PlugIn::registry[v5];
            OpenSteer::PlugIn::registry[v5] = v7;
          }
          ++v5;
          v1 = OpenSteer::PlugIn::itemsInRegistry;
        }
        while (OpenSteer::PlugIn::itemsInRegistry > (int)v5);
      }
      ++v3;
      ++v2;
    }
    while (v4 < v1 - 1);
  }
}

uint64_t OpenSteer::PlugIn::findDefault(OpenSteer::PlugIn *this)
{
  uint64_t v1;
  uint64_t *i;

  if (!OpenSteer::PlugIn::itemsInRegistry)
    return 0;
  if (OpenSteer::PlugIn::itemsInRegistry < 1)
  {
    i = OpenSteer::PlugIn::registry;
  }
  else
  {
    v1 = 0;
    for (i = OpenSteer::PlugIn::registry; !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*i + 56))(*i); ++i)
    {
      if (++v1 >= OpenSteer::PlugIn::itemsInRegistry)
        return OpenSteer::PlugIn::registry[0];
    }
  }
  return *i;
}

uint64_t OpenSteer::PlugIn::reset(OpenSteer::PlugIn *this)
{
  (*(void (**)(OpenSteer::PlugIn *))(*(_QWORD *)this + 24))(this);
  return (**(uint64_t (***)(OpenSteer::PlugIn *))this)(this);
}

float OpenSteer::PlugIn::selectionOrderSortKey(OpenSteer::PlugIn *this)
{
  return 1.0;
}

uint64_t OpenSteer::PlugIn::requestInitialSelection(OpenSteer::PlugIn *this)
{
  return 0;
}

_QWORD *OpenSteer::PolygonObstacle::PolygonObstacle(_QWORD *this)
{
  *this = &off_24F04F418;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &off_24F04F418;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

_QWORD *OpenSteer::PolygonObstacle::PolygonObstacle(_QWORD *a1, _QWORD *a2)
{
  unint64_t *v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v21;
  BOOL v23;
  unint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &off_24F04F418;
  a1[2] = 0;
  a1[3] = 0;
  v5 = (_OWORD *)*a2;
  v6 = (_OWORD *)a2[1];
  v7 = (uint64_t)v6 - *a2;
  v8 = v7 / 12;
  if ((unint64_t)(v7 + 11) >= 0x17)
  {
    std::vector<OpenSteer::Vec3>::__append((uint64_t)(a1 + 1), v8);
    v5 = (_OWORD *)*a2;
    v6 = (_OWORD *)a2[1];
    v8 = ((uint64_t)v6 - *a2) / 12;
  }
  if (v6 != v5)
  {
    v9 = *v4;
    if (v8 <= 1)
      v10 = 1;
    else
      v10 = v8;
    if (v10 < 0xC)
    {
      v11 = 0;
LABEL_9:
      v12 = v9 + 12 * v11;
      v13 = (char *)v5 + 12 * v11;
      v14 = v10 - v11;
      do
      {
        v15 = *(_QWORD *)v13;
        *(_DWORD *)(v12 + 8) = *((_DWORD *)v13 + 2);
        *(_QWORD *)v12 = v15;
        v12 += 12;
        v13 += 12;
        --v14;
      }
      while (v14);
      return a1;
    }
    v11 = 0;
    v17 = v9 + 12 * v10;
    v18 = v17 - 8;
    v19 = (unint64_t)v5 + 12 * v10;
    v21 = v9 + 4 < v19 - 4 && (unint64_t)v5 + 4 < v17 - 4;
    v23 = v9 + 8 < v19 && (unint64_t)v5 + 8 < v17;
    if ((unint64_t)v5 < v18 && v9 < v19 - 8)
      goto LABEL_9;
    if (v21)
      goto LABEL_9;
    if (v23)
      goto LABEL_9;
    v11 = v10 & 0xFFFFFFFFFFFFFFF8;
    v25 = v10 & 0xFFFFFFFFFFFFFFF8;
    v26 = v5;
    v27 = (_OWORD *)*v4;
    do
    {
      v28 = v26[1];
      v30 = v26[4];
      v29 = v26[5];
      v31 = v26[2];
      v32 = v26[3];
      *v27 = *v26;
      v27[1] = v28;
      v27[2] = v31;
      v27[3] = v32;
      v27[4] = v30;
      v27[5] = v29;
      v27 += 6;
      v26 += 6;
      v25 -= 8;
    }
    while (v25);
    if (v10 != v11)
      goto LABEL_9;
  }
  return a1;
}

{
  unint64_t *v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v22;
  BOOL v24;
  unint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  a1[1] = 0;
  v4 = a1 + 1;
  *a1 = &off_24F04F418;
  a1[2] = 0;
  a1[3] = 0;
  v5 = (_OWORD *)*a2;
  v6 = (_OWORD *)a2[1];
  v7 = (uint64_t)v6 - *a2;
  v8 = v7 / 12;
  if ((unint64_t)(v7 + 11) >= 0x17)
  {
    std::vector<OpenSteer::Vec3>::__append((uint64_t)(a1 + 1), v8);
    v5 = (_OWORD *)*a2;
    v6 = (_OWORD *)a2[1];
    v8 = ((uint64_t)v6 - *a2) / 12;
  }
  if (v6 != v5)
  {
    v9 = *v4;
    if (v8 <= 1)
      v10 = 1;
    else
      v10 = v8;
    if (v10 < 0xC)
    {
      v11 = 0;
LABEL_9:
      v12 = v10 - v11;
      v13 = 12 * v11;
      v14 = v9 + v13;
      v15 = (char *)v5 + v13;
      do
      {
        v16 = *(_QWORD *)v15;
        *(_DWORD *)(v14 + 8) = *((_DWORD *)v15 + 2);
        *(_QWORD *)v14 = v16;
        v14 += 12;
        v15 += 12;
        --v12;
      }
      while (v12);
      return a1;
    }
    v11 = 0;
    v18 = v9 + 12 * v10;
    v19 = v18 - 8;
    v20 = (unint64_t)v5 + 12 * v10;
    v22 = v9 + 4 < v20 - 4 && (unint64_t)v5 + 4 < v18 - 4;
    v24 = v9 + 8 < v20 && (unint64_t)v5 + 8 < v18;
    if ((unint64_t)v5 < v19 && v9 < v20 - 8)
      goto LABEL_9;
    if (v22)
      goto LABEL_9;
    if (v24)
      goto LABEL_9;
    v11 = v10 & 0xFFFFFFFFFFFFFFF8;
    v26 = v10 & 0xFFFFFFFFFFFFFFF8;
    v27 = v5;
    v28 = (_OWORD *)*v4;
    do
    {
      v29 = v27[1];
      v31 = v27[4];
      v30 = v27[5];
      v32 = v27[2];
      v33 = v27[3];
      *v28 = *v27;
      v28[1] = v29;
      v28[2] = v32;
      v28[3] = v33;
      v28[4] = v31;
      v28[5] = v30;
      v28 += 6;
      v27 += 6;
      v26 -= 8;
    }
    while (v26);
    if (v10 != v11)
      goto LABEL_9;
  }
  return a1;
}

void sub_227BA84DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_227BA8684(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

float OpenSteer::PolygonObstacle::steerToAvoid()
{
  return *(float *)&_static_vec3_zero;
}

void OpenSteer::PolygonObstacle::findIntersectionWithVehiclePath(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  float32x2_t v4;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  __int128 v18;
  float32x2_t v19;
  unint64_t v20;
  float v21;
  __int128 v22;
  float32x2_t v23;
  int32x2_t v24;
  unint64_t v25;
  float32x2_t v26;
  unint64_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  __int128 v35;
  unsigned int v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  void *__p;
  _BYTE *v41;
  uint64_t v42;

  *(_DWORD *)a3 = 0;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2) >= 3)
  {
    v36 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2));
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
    v33 = v8;
    v32 = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(*(_QWORD *)a2 + 192))(a2));
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 192))(a2);
    __p = 0;
    v41 = 0;
    v42 = 0;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 16);
    if (v11 != v10)
    {
      v31 = v9;
      _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm((char **)&__p, 0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 2));
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 16);
      v9 = v31;
    }
    if (v11 != v10)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        v14 = (_DWORD *)(v10 + v12);
        LODWORD(v15) = *v14;
        HIDWORD(v15) = v14[2];
        *((_QWORD *)__p + v13++) = v15;
        v10 = *(_QWORD *)(a1 + 8);
        v12 += 12;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 16) - v10) >> 2) > v13);
    }
    v16 = (char *)__p;
    if (v41 == __p)
    {
      *(_QWORD *)&v35 = 0;
      v4.i32[0] = 2139095039;
      v30 = 3.4028e38;
    }
    else
    {
      v17 = 0;
      v37 = (float32x2_t)__PAIR64__(v33, v36);
      *((_QWORD *)&v18 + 1) = a4.n128_u64[1];
      v19 = vmla_n_f32(v37, (float32x2_t)__PAIR64__(v9, v32), a4.n128_f32[0]);
      v20 = (v41 - (_BYTE *)__p) >> 3;
      v21 = 3.4028e38;
      v4.i32[0] = 2139095039;
      *(_QWORD *)&v18 = 0;
      v35 = v18;
      do
      {
        v25 = v17 + 1;
        v26 = *(float32x2_t *)&v16[8 * v17];
        if (v20 > v17 + 1)
          v27 = v17 + 1;
        else
          v27 = 0;
        v28 = *(float32x2_t *)&v16[8 * v27];
        v38 = 0;
        v39 = 0;
        GKClosestPointsBetweenLineSegments(&v39, (double *)&v38, v26, v28, v37, v19);
        v29 = vsub_f32(v38, v39);
        v30 = vaddv_f32(vmul_f32(v29, v29));
        if (v30 < v21)
        {
          *((_QWORD *)&v22 + 1) = *((_QWORD *)&v35 + 1);
          v23 = vsub_f32(v39, v37);
          v24 = (int32x2_t)vmul_f32(v23, v23);
          *(int8x8_t *)&v22 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v4, vadd_f32((float32x2_t)v24, (float32x2_t)vdup_lane_s32(v24, 1))), 0), (int8x8_t)v39, *(int8x8_t *)&v35);
          v35 = v22;
          v4.f32[0] = fminf(vaddv_f32((float32x2_t)v24), v4.f32[0]);
          v21 = v30;
        }
        else
        {
          v30 = v21;
        }
        v16 = (char *)__p;
        v20 = (v41 - (_BYTE *)__p) >> 3;
        v17 = v25;
      }
      while (v20 > v25);
    }
    if (v30 <= (*(float (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2))
    {
      *(_DWORD *)a3 = 1;
      *(float *)(a3 + 4) = sqrtf(v4.f32[0]);
      *(_QWORD *)(a3 + 8) = v35;
      *(_DWORD *)(a3 + 16) = DWORD1(v35);
      *(_QWORD *)(a3 + 32) = a1;
    }
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
  }
}

void sub_227BA8944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t GKDoesLineSegmentIntersectPolygon(uint64_t a1, int a2, float32x2_t a3, float32x2_t a4)
{
  uint64_t v4;
  int32x2_t v5;
  float32x2_t v6;
  char v7;
  float32x4_t v8;
  int16x4_t v9;
  uint64_t v10;
  float32x2_t v11;
  uint64_t v12;
  float32x2_t v13;
  BOOL v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  float32x2_t v19;

  if (a2 >= 1)
  {
    v4 = 0;
    v5 = (int32x2_t)vsub_f32(a4, a3);
    v6 = (float32x2_t)vrev64_s32(v5);
    v7 = 1;
    while (1)
    {
      v10 = v4 + 1;
      v11 = *(float32x2_t *)(a1 + 8 * v4);
      if (v4 + 1 < (unint64_t)a2)
        v12 = v4 + 1;
      else
        v12 = 0;
      v13 = *(float32x2_t *)(a1 + 8 * v12);
      v14 = v4 + 1 < (unint64_t)a2;
      v15 = vsub_f32(v13, v11);
      v16 = vsub_f32(v11, a3);
      v17 = vmul_f32(v15, v6);
      v18 = (int32x2_t)vsub_f32(v17, (float32x2_t)vdup_lane_s32((int32x2_t)v17, 1));
      v19 = vmls_lane_f32(vmul_lane_f32((float32x2_t)vzip1_s32(v5, (int32x2_t)v15), v16, 1), (float32x2_t)vzip2_s32(v5, (int32x2_t)v15), v16, 0);
      if (*(float *)v18.i32 == 0.0)
      {
        if (v19.f32[1] == 0.0 && v19.f32[0] == 0.0)
          return v7 & 1;
      }
      else
      {
        *(float32x2_t *)v8.f32 = vdiv_f32(v19, (float32x2_t)vdup_lane_s32(v18, 0));
        v8.i64[1] = v8.i64[0];
        v9.i32[0] = vmovn_s32(vcgeq_f32((float32x4_t)xmmword_227BC0320, v8)).u32[0];
        v9.i32[1] = vmovn_s32(vcgeq_f32(v8, (float32x4_t)xmmword_227BC0320)).i32[1];
        if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v9, 0xFuLL))) & 1) != 0)
          return v7 & 1;
      }
      ++v4;
      v7 = v14;
      if (a2 == v10)
        return v7 & 1;
    }
  }
  return 0;
}

void GKGetLineSegmentPolygonIntersectionPoints(uint64_t a1@<X0>, int a2@<W1>, float32x2_t **a3@<X8>, float32x2_t a4@<D0>, float32x2_t a5@<D1>)
{
  float32x2_t *v9;
  unint64_t v10;
  int32x2_t v11;
  float32x2_t v12;
  unint64_t v13;
  float32x2_t *v14;
  int32x2_t v15;
  uint64_t v16;
  int32x2_t v17;
  int32x2_t v18;
  float32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  float32x2_t v22;
  float32x4_t v24;
  int16x4_t v25;
  float32x2_t v26;
  float32x2_t v27;
  unint64_t v28;
  float32x2_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  float32x2_t *v35;
  float32x2_t *v36;
  float32x2_t v37;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2 >= 1)
  {
    v9 = 0;
    v10 = 0;
    v11 = (int32x2_t)vsub_f32(a5, a4);
    v12 = (float32x2_t)vrev64_s32(v11);
    v13 = a2;
    while (1)
    {
      v15 = *(int32x2_t *)(a1 + 8 * v10++);
      v16 = v10;
      if (v10 >= v13)
        v16 = 0;
      v17 = *(int32x2_t *)(a1 + 8 * v16);
      v18 = (int32x2_t)vsub_f32((float32x2_t)v17, (float32x2_t)v15);
      v19 = vsub_f32((float32x2_t)v15, a4);
      v20 = (int32x2_t)vmul_f32((float32x2_t)v18, v12);
      v21 = (int32x2_t)vsub_f32((float32x2_t)v20, (float32x2_t)vdup_lane_s32(v20, 1));
      v22 = vmls_lane_f32(vmul_lane_f32((float32x2_t)vzip1_s32(v11, v18), v19, 1), (float32x2_t)vzip2_s32(v11, v18), v19, 0);
      if (*(float *)v21.i32 == 0.0)
      {
        if (v22.f32[1] != 0.0 || v22.f32[0] != 0.0)
          goto LABEL_5;
      }
      else
      {
        *(float32x2_t *)v24.f32 = vdiv_f32(v22, (float32x2_t)vdup_lane_s32(v21, 0));
        v24.i64[1] = v24.i64[0];
        v25.i32[0] = vmovn_s32(vcgeq_f32((float32x4_t)xmmword_227BC0320, v24)).u32[0];
        v25.i32[1] = vmovn_s32(vcgeq_f32(v24, (float32x4_t)xmmword_227BC0320)).i32[1];
        if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v25, 0xFuLL))) & 1) == 0)
          goto LABEL_5;
      }
      v26 = GKGetLineSegmentToLineSegmentIntersectionPoint(v15, v17, (int32x2_t)a4, (int32x2_t)a5);
      v27 = v26;
      v28 = (unint64_t)a3[2];
      if ((unint64_t)v9 >= v28)
        break;
      *v9 = v26;
      v14 = v9 + 1;
LABEL_4:
      a3[1] = v14;
      v9 = v14;
LABEL_5:
      if (v10 == v13)
        return;
    }
    v29 = *a3;
    v30 = v9 - *a3;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 61)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v32 = v28 - (_QWORD)v29;
    if (v32 >> 2 > v31)
      v31 = v32 >> 2;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33)
    {
      if (v33 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v34 = (char *)operator new(8 * v33);
      v35 = (float32x2_t *)&v34[8 * v30];
      *v35 = v27;
      v14 = v35 + 1;
      if (v9 == v29)
      {
LABEL_26:
        *a3 = v35;
        a3[1] = v14;
        a3[2] = (float32x2_t *)&v34[8 * v33];
        if (!v9)
          goto LABEL_4;
        goto LABEL_31;
      }
    }
    else
    {
      v34 = 0;
      v35 = (float32x2_t *)(8 * v30);
      v36 = (float32x2_t *)(8 * v30);
      *v36 = v26;
      v14 = v36 + 1;
      if (v9 == v29)
        goto LABEL_26;
    }
    do
    {
      v37 = v9[-1];
      --v9;
      v35[-1] = v37;
      --v35;
    }
    while (v9 != v29);
    v9 = *a3;
    *a3 = v35;
    a3[1] = v14;
    a3[2] = (float32x2_t *)&v34[8 * v33];
    if (!v9)
      goto LABEL_4;
LABEL_31:
    operator delete(v9);
    goto LABEL_4;
  }
}

void sub_227BA8C74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void OpenSteer::PolygonObstacle::~PolygonObstacle(OpenSteer::PolygonObstacle *this)
{
  void *v2;

  *(_QWORD *)this = &off_24F04F418;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24F04F418;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22E2A50A0);
}

void std::vector<OpenSteer::Vec3>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  int v18;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 2) >= a2)
  {
    if (a2)
    {
      v12 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(12 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[12 * v7];
    v14 = &v11[12 * v10];
    v15 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_QWORD *)(v5 - 3);
        v5 -= 3;
        v18 = v5[2];
        *(_QWORD *)(v13 - 12) = v17;
        v13 -= 12;
        *((_DWORD *)v13 + 2) = v18;
      }
      while (v5 != v6);
      v5 = *(_DWORD **)a1;
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v14;
    if (v5)
      operator delete(v5);
  }
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      v12 = 8 * a2;
      bzero(a1[1], 8 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 3;
    v8 = v7 + a2;
    if ((v7 + a2) >> 61)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v9 = v4 - v6;
    if (v9 >> 2 > v8)
      v8 = v9 >> 2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(8 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[8 * v7];
    v14 = 8 * a2;
    v15 = &v11[8 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

void sub_227BA9C8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2A50A0](v1, 0x10A1C40803BBFE3);
  _Unwind_Resume(a1);
}

void sub_227BA9D94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA9DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)GKGraphNode;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_227BA9E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BA9F90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BA9FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BAA0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BAA0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BAA0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_227BAA1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_227BAA464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_227BAA57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BAA60C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2A50A0](v1, 0x10A1C4073C85EA4);
  _Unwind_Resume(a1);
}

void sub_227BAA71C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BAA7BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BAA828(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BAA938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BAA94C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BAA95C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BAA9F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BAAA74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2A50A0](v1, 0x10A1C40C1486C86);
  _Unwind_Resume(a1);
}

void sub_227BAAB80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BAAC20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BAAC8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BAADB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BAADC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BAADDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BAADEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BAAEA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BAAF20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2A50A0](v1, 0x10A1C4073C85EA4);
  _Unwind_Resume(a1);
}

void sub_227BAB088(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BAB0F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BAB1A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BAB1C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BAB258(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BAB474(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double getGradientCoherentNoise(double *a1, __int16 a2)
{
  __int128 v2;
  int v3;
  int v4;
  double v5;
  int v6;
  int v7;
  int v8;
  double v9;
  double v10;
  double v11;
  __int16 v12;
  double *v13;
  double v14;
  double *v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  double *v20;
  double v21;
  double *v22;
  double v23;
  double v24;
  double *v25;
  double v26;
  double *v27;
  double v28;
  double *v29;

  v2 = *(_OWORD *)a1;
  v3 = (int)*a1 - (*a1 <= 0.0);
  v4 = (int)a1[1] - (a1[1] <= 0.0);
  v5 = a1[2];
  v6 = (int)v5 - (v5 <= 0.0);
  v7 = v4 + 1;
  v8 = v6 + 1;
  v9 = *a1 - (double)v3;
  v10 = a1[1] - (double)v4;
  v11 = v5 - (double)v6;
  v12 = 31337 * v4;
  LOWORD(v4) = 1619 * v3 + 31337 * v4;
  LOWORD(v6) = 1013 * a2 + 6971 * v6;
  v13 = (double *)((char *)&g_randomVectors + 32 * ((v6 + v4) ^ ((unsigned __int16)(v6 + v4) >> 8)));
  v14 = (v10 * v13[1] + v9 * *v13 + v11 * v13[2]) * 2.12;
  v15 = (double *)((char *)&g_randomVectors
                 + 32
                 * ((v6 + 83 * v3 + 83 + v12) ^ ((unsigned __int16)(v6 + 1619 * v3 + 1619 + v12) >> 8)));
  *(double *)&v2 = *(double *)&v2 - (double)(v3 + 1);
  v16 = v14 + -(v14 - (v10 * v15[1] + v15[2] * v11 + *(double *)&v2 * *v15) * 2.12) * v9;
  v17 = (double *)((char *)&g_randomVectors
                 + 32
                 * ((v6 + v12 + 105 + 83 * v3) ^ ((unsigned __int16)(v6 + v12 + 31337 + 1619 * v3) >> 8)));
  v18 = *((double *)&v2 + 1) - (double)v7;
  v19 = (*v17 * v9 + v17[1] * v18 + v17[2] * v11) * 2.12;
  v20 = (double *)((char *)&g_randomVectors
                 + 32
                 * ((v6 + 83 * v3 + 83 + v12 + 105) ^ ((unsigned __int16)(v6
                                                                                         + 1619 * v3
                                                                                         + 1619
                                                                                         + v12
                                                                                         + 31337) >> 8)));
  v21 = v16 + (v19 - v16 + -(v19 - (*v20 * *(double *)&v2 + v20[1] * v18 + v20[2] * v11) * 2.12) * v9) * v10;
  v22 = (double *)((char *)&g_randomVectors
                 + 32 * ((v6 + 59 + v4) ^ ((unsigned __int16)(v6 + 6971 + v4) >> 8)));
  v23 = v5 - (double)v8;
  v24 = (*v22 * v9 + v22[1] * v10 + v22[2] * v23) * 2.12;
  v25 = (double *)((char *)&g_randomVectors
                 + 32
                 * ((v6 + 59 + 83 * v3 + 83 + v12) ^ ((unsigned __int16)(v6
                                                                                        + 6971
                                                                                        + 1619 * v3
                                                                                        + 1619
                                                                                        + v12) >> 8)));
  v26 = v24 + -(v24 - (*v25 * *(double *)&v2 + v25[1] * v10 + v25[2] * v23) * 2.12) * v9;
  v27 = (double *)((char *)&g_randomVectors
                 + 32
                 * ((v6 + 59 + v12 + 105 + 83 * v3) ^ ((unsigned __int16)(v6
                                                                                         + 6971
                                                                                         + v12
                                                                                         + 31337
                                                                                         + 1619 * v3) >> 8)));
  v28 = (*v27 * v9 + v27[1] * v18 + v27[2] * v23) * 2.12;
  v29 = (double *)((char *)&g_randomVectors
                 + 32
                 * ((v6 + 59 + 83 * v3 + 83 + v12 + 105) ^ ((unsigned __int16)(v6
                                                                                              + 6971
                                                                                              + 1619 * v3
                                                                                              + 1619
                                                                                              + v12
                                                                                              + 31337) >> 8)));
  return v21
       + (v26 - v21 + (v28 - v26 + -(v28 - (*v29 * *(double *)&v2 + v29[1] * v18 + v29[2] * v23) * 2.12) * v9) * v10)
       * v11;
}

float64_t getCoherentNoise(int8x16_t *a1, __int32 a2, int8x16_t a3)
{
  int32x4_t v3;
  int32x4_t v4;
  int v5;
  __int16 v6;
  char *v7;
  int64x2_t v8;
  float64x2_t v9;

  v3 = (int32x4_t)vextq_s8(a3, a3, 4uLL);
  v4 = vzip1q_s32(v3, (int32x4_t)a3);
  v5 = a3.i32[0];
  v4.i32[3] = a2;
  v6 = vaddvq_s32(vmulq_s32(v4, (int32x4_t)xmmword_227BC0360));
  v7 = (char *)&g_randomVectors + 32 * (v6 ^ HIBYTE(v6));
  v8.i64[0] = v3.i32[0];
  v8.i64[1] = v3.i32[1];
  v9 = vmulq_f64(*(float64x2_t *)(v7 + 8), vsubq_f64((float64x2_t)vextq_s8(*a1, a1[1], 8uLL), vcvtq_f64_s64(v8)));
  return (v9.f64[0] + (*(double *)a1->i64 - (double)v5) * *(double *)v7 + v9.f64[1]) * 2.12;
}

double lerp(double a1, double a2, double a3)
{
  return a1 + (a2 - a1) * a3;
}

double curveMap(double a1)
{
  return a1 * a1 * (3.0 - (a1 + a1));
}

void sub_227BAB99C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BABAD4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x22E2A50A0](v2, 0xA1C40BD48D6D6);

  _Unwind_Resume(a1);
}

void sub_227BABB38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BABCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);

  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227BABCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227BABCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);

  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227BABDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);

  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227BABDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227BABDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);

  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227BABEEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t GKCOctreeNode<NSObject>::GKCOctreeNode(uint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float a5)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  GKOctreeNode *v9;
  void *v10;

  *(float32x4_t *)(a1 + 16) = a3;
  *(float32x4_t *)(a1 + 32) = a4;
  *(_QWORD *)a1 = &off_24F04F490;
  v6 = vsubq_f32(a4, a3);
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  v8 = vmulq_f32(v6, v7);
  *(float32x4_t *)(a1 + 64) = v6;
  *(float32x4_t *)(a1 + 80) = vaddq_f32(v8, a3);
  *(float *)(a1 + 96) = a5;
  *(_QWORD *)(a1 + 104) = a2;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(float32x4_t *)(a1 + 48) = v8;
  v9 = objc_alloc_init(GKOctreeNode);
  v10 = *(void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v9;

  objc_msgSend(*(id *)(a1 + 200), "setCOctreeNode:", a1);
  return a1;
}

void sub_227BABF84(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 176);
  if (v3)
    GKCOctreeNode<NSObject>::GKCOctreeNode(v1, v3);
  _Unwind_Resume(a1);
}

_QWORD *GKCOctree<NSObject>::~GKCOctree(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24F04F460;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void GKCOctree<NSObject>::~GKCOctree(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_24F04F460;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x22E2A50A0);
}

void GKCOctreeNode<NSObject>::~GKCOctreeNode(uint64_t a1)
{
  GKCOctreeNode<NSObject>::~GKCOctreeNode(a1);
  JUMPOUT(0x22E2A50A0);
}

uint64_t GKCOctreeNode<NSObject>::~GKCOctreeNode(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;

  *(_QWORD *)a1 = &off_24F04F490;
  v3 = (_OWORD *)(a1 + 112);
  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *(_QWORD *)(a1 + 120);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 128);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 136);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 144);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 152);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 160);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 168);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  v11 = *(_QWORD *)(a1 + 176);
  for (i = *(_QWORD *)(a1 + 184); i != v11; i -= 8)
  {
    v13 = *(void **)(i - 8);

  }
  *(_QWORD *)(a1 + 184) = v11;

  v14 = *(_QWORD *)(a1 + 176);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 184);
    v16 = *(void **)(a1 + 176);
    if (v15 != v14)
    {
      do
      {
        v17 = *(void **)(v15 - 8);
        v15 -= 8;

      }
      while (v15 != v14);
      v16 = *(void **)(a1 + 176);
    }
    *(_QWORD *)(a1 + 184) = v14;
    operator delete(v16);
  }
  return a1;
}

uint64_t GKCOctreeNode<NSObject>::addPoint(uint64_t a1, void *a2, int8x16_t a3)
{
  id v4;
  id v5;
  float v6;
  _QWORD *v9;
  int8x16_t v10;
  float32x2_t v11;
  int32x2_t v12;
  _BOOL4 v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v21;

  v4 = a2;
  v5 = v4;
  v21 = v4;
  v6 = *(float *)(a1 + 96);
  if (*(float *)(a1 + 48) < v6 || *(float *)(a1 + 52) < v6 || *(float *)(a1 + 56) < v6)
  {
    v9 = *(_QWORD **)(a1 + 184);
    if ((unint64_t)v9 >= *(_QWORD *)(a1 + 192))
    {
      v18 = std::vector<NSObject * {__strong}>::__push_back_slow_path<NSObject * const {__strong}&>((_QWORD *)(a1 + 176), &v21);
      v5 = v21;
      *(_QWORD *)(a1 + 184) = v18;
    }
    else
    {
      v5 = v4;
      *v9 = v5;
      *(_QWORD *)(a1 + 184) = v9 + 1;
    }
  }
  else
  {
    v10 = *(int8x16_t *)(a1 + 80);
    v11.i32[1] = v10.i32[1];
    v11.i32[0] = vextq_s8(v10, v10, 8uLL).u32[0];
    v12 = vcge_f32(vrnd_f32((float32x2_t)__PAIR64__(a3.u32[1], vextq_s8(a3, a3, 8uLL).u32[0])), v11);
    v13 = *(float *)v10.i32 <= truncf(*(float *)a3.i32);
    if ((v12.i8[4] & 1) != 0)
      v14 = 2;
    else
      v14 = 0;
    if ((v12.i8[0] & 1) != 0)
      v15 = 4;
    else
      v15 = 0;
    v16 = v14 | v13 | v15;
    v17 = a1 + 8 * v16;
    if (!*(_QWORD *)(v17 + 112))
      __asm { BR              X10 }
    a1 = GKCOctreeNode<NSObject>::addPoint(*(_QWORD *)(v17 + 112), v4, (__n128)a3);
  }

  return a1;
}

void sub_227BAC2D0(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  float32x4_t v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;

  v6 = *(float32x4_t *)(v4 + 16);
  v6.i32[1] = HIDWORD(a4);
  v8 = *(float32x4_t *)(v4 + 48);
  v9 = v6;
  v7 = operator new();
  GKCOctreeNode<NSObject>::GKCOctreeNode(v7, v4, v9, vaddq_f32(v8, v9), *(float *)(v4 + 96));
  *(_QWORD *)(v5 + 112) = v7;
  JUMPOUT(0x227BAC274);
}

void sub_227BAC360(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x22E2A50A0](v2, 0x10A1C40256F229BLL);

  _Unwind_Resume(a1);
}

void sub_227BAC388(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_227BAC39C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::vector<NSObject * {__strong}>::push_back[abi:ne180100](_QWORD *a1, id *a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = (_QWORD *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    result = std::vector<NSObject * {__strong}>::__push_back_slow_path<NSObject * const {__strong}&>(a1, a2);
    a1[1] = result;
  }
  else
  {
    result = *a2;
    *v3 = result;
    a1[1] = v3 + 1;
  }
  return result;
}

uint64_t GKCOctreeNode<NSObject>::createNodeForOctant(uint64_t a1, int a2)
{
  uint64_t v2;
  float32x4_t v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;

  v2 = a1 + 8 * a2;
  if (*(_QWORD *)(v2 + 112))
    return *(_QWORD *)(v2 + 112);
  switch(a2)
  {
    case 0:
      v5 = *(float32x4_t *)(a1 + 16);
      break;
    case 1:
      v5 = *(float32x4_t *)(a1 + 16);
      v5.i32[0] = *(_DWORD *)(a1 + 80);
      break;
    case 2:
    case 3:
      v5 = *(float32x4_t *)(a1 + 16);
      v5.i32[1] = *(_DWORD *)(a1 + 84);
      break;
    case 4:
      v5 = *(float32x4_t *)(a1 + 16);
      v5.i32[2] = *(_DWORD *)(a1 + 88);
      break;
    case 5:
      v5 = *(float32x4_t *)(a1 + 80);
      v5.i32[1] = *(_DWORD *)(a1 + 20);
      break;
    case 6:
      v5 = *(float32x4_t *)(a1 + 80);
      v5.i32[2] = *(_DWORD *)(a1 + 24);
      break;
    case 7:
      v5 = *(float32x4_t *)(a1 + 80);
      break;
    default:
      GKCOctreeNode<NSObject>::createNodeForOctant();
  }
  v7 = v5;
  v8 = vaddq_f32(*(float32x4_t *)(a1 + 48), v5);
  v6 = operator new();
  GKCOctreeNode<NSObject>::GKCOctreeNode(v6, a1, v7, v8, *(float *)(a1 + 96));
  *(_QWORD *)(v2 + 112) = v6;
  return v6;
}

void sub_227BAC510(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2A50A0](v1, 0x10A1C40256F229BLL);
  _Unwind_Resume(a1);
}

uint64_t GKCOctreeNode<NSObject>::addBox(uint64_t a1, void *a2, float32x4_t a3, float32x4_t a4)
{
  id v5;
  float32x4_t *v6;
  float32x4_t v7;
  float v8;
  float v9;
  _QWORD *v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  BOOL v17;
  float32x4_t v18;
  BOOL v19;
  BOOL v20;
  float32x4_t v21;
  BOOL v22;
  BOOL v23;
  BOOL v25;
  BOOL v26;
  float v28;
  BOOL v29;
  BOOL v30;
  float32x4_t v32;
  float32x4_t v33;
  __n128 v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  uint64_t v40;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  __int128 v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v54;
  id v55;
  float32x4_t v56;
  float32x4_t v57;

  v56 = a4;
  v57 = a3;
  v5 = a2;
  v55 = v5;
  v6 = (float32x4_t *)(a1 + 48);
  v7 = *(float32x4_t *)(a1 + 48);
  LODWORD(v8) = HIDWORD(*(_QWORD *)(a1 + 48));
  v9 = *(float *)(a1 + 96);
  if (v7.f32[0] <= v9 || v8 <= v9)
  {
    v11 = *(_QWORD **)(a1 + 184);
    if ((unint64_t)v11 >= *(_QWORD *)(a1 + 192))
    {
      *(_QWORD *)(a1 + 184) = std::vector<NSObject * {__strong}>::__push_back_slow_path<NSObject * const {__strong}&>((_QWORD *)(a1 + 176), &v55);
    }
    else
    {
      *v11 = v5;
      *(_QWORD *)(a1 + 184) = v11 + 1;
    }
    goto LABEL_75;
  }
  v12 = *(float32x4_t *)(a1 + 16);
  v13 = *(float32x4_t *)(a1 + 80);
  v14 = a3.f32[0];
  v15 = vaddq_f32(a4, a3);
  v16 = vaddq_f32(v12, v7);
  v17 = v15.f32[0] > v16.f32[0] || a3.f32[0] < v12.f32[0];
  if (!v17 && a3.f32[1] >= v13.f32[1])
  {
    v18 = *(float32x4_t *)(a1 + 16);
    v18.i32[1] = HIDWORD(*(_QWORD *)(a1 + 80));
    v19 = v15.f32[1] > (float)(v13.f32[1] + v8);
    if (a3.f32[2] < v12.f32[2])
      v19 = 1;
    if (!v19 && v15.f32[2] <= v16.f32[2])
    {
      if (!*(_QWORD *)(a1 + 136))
      {
        v44 = *v6;
        v48 = v18;
        v37 = operator new();
        GKCOctreeNode<NSObject>::GKCOctreeNode(v37, a1, v48, vaddq_f32(v44, v48), *(float *)(a1 + 96));
        *(_QWORD *)(a1 + 136) = v37;
      }
      goto LABEL_73;
    }
    v14 = a3.f32[0];
    if (!v19 && v15.f32[2] <= v16.f32[2])
    {
      if (!*(_QWORD *)(a1 + 128))
      {
        v47 = *v6;
        v51 = v18;
        v42 = operator new();
        GKCOctreeNode<NSObject>::GKCOctreeNode(v42, a1, v51, vaddq_f32(v47, v51), *(float *)(a1 + 96));
        *(_QWORD *)(a1 + 128) = v42;
      }
      goto LABEL_73;
    }
  }
  v20 = v14 < v13.f32[0];
  v21 = vaddq_f32(v13, v7);
  if (v15.f32[0] > v21.f32[0])
    v20 = 1;
  if (!v20)
  {
    v22 = a3.f32[1] >= v12.f32[1] && v15.f32[1] <= (float)(v12.f32[1] + v8);
    v23 = !v22 || a3.f32[2] < v12.f32[2];
    if (!v23 && v15.f32[2] <= v16.f32[2])
    {
      if (!*(_QWORD *)(a1 + 120))
      {
        v45 = *(_OWORD *)(a1 + 80);
        v49 = *(float32x4_t *)(a1 + 16);
        v43 = *v6;
        v38 = operator new();
        v39 = v49;
        v39.i32[0] = v45;
        GKCOctreeNode<NSObject>::GKCOctreeNode(v38, a1, v39, vaddq_f32(v43, v39), *(float *)(a1 + 96));
        *(_QWORD *)(a1 + 120) = v38;
      }
      goto LABEL_73;
    }
  }
  if (!v17)
  {
    v25 = a3.f32[1] >= v12.f32[1] && v15.f32[1] <= (float)(v12.f32[1] + v8);
    v26 = !v25 || a3.f32[2] < v12.f32[2];
    if (!v26 && v15.f32[2] <= v16.f32[2])
    {
      if (!*(_QWORD *)(a1 + 112))
      {
        v46 = *v6;
        v50 = *(float32x4_t *)(a1 + 16);
        v40 = operator new();
        GKCOctreeNode<NSObject>::GKCOctreeNode(v40, a1, v50, vaddq_f32(v46, v50), *(float *)(a1 + 96));
        *(_QWORD *)(a1 + 112) = v40;
      }
LABEL_73:
      v36 = GKCOctreeNode<NSObject>::addBox((__n128)a3, (__n128)a4);
      goto LABEL_74;
    }
  }
  if (!v20)
  {
    v28 = v13.f32[1] + v8;
    v29 = a3.f32[1] >= v13.f32[1] && v15.f32[1] <= v28;
    v30 = !v29 || a3.f32[2] < v13.f32[2];
    if (!v30 && v15.f32[2] <= v21.f32[2])
    {
      GKCOctreeNode<NSObject>::createNodeForOctant(a1, 7);
      v35 = (__n128)a4;
      v34 = (__n128)a3;
      goto LABEL_62;
    }
  }
  v13.i32[2] = *(_QWORD *)(a1 + 24);
  v54 = v13;
  if (isBoxInsideBox(&v57, &v56, &v54, (float32x4_t *)(a1 + 48)))
  {
    GKCOctreeNode<NSObject>::createNodeForOctant(a1, 6);
LABEL_61:
    v35 = (__n128)v56;
    v34 = (__n128)v57;
LABEL_62:
    v36 = GKCOctreeNode<NSObject>::addBox(v34, v35);
LABEL_74:
    a1 = v36;
    goto LABEL_75;
  }
  v32 = *(float32x4_t *)(a1 + 80);
  v32.i32[1] = *(_DWORD *)(a1 + 20);
  v54 = v32;
  if (isBoxInsideBox(&v57, &v56, &v54, (float32x4_t *)(a1 + 48)))
  {
    GKCOctreeNode<NSObject>::createNodeForOctant(a1, 5);
    goto LABEL_61;
  }
  v33 = *(float32x4_t *)(a1 + 16);
  v33.i32[2] = *(_DWORD *)(a1 + 88);
  v54 = v33;
  if (isBoxInsideBox(&v57, &v56, &v54, (float32x4_t *)(a1 + 48)))
  {
    GKCOctreeNode<NSObject>::createNodeForOctant(a1, 4);
    goto LABEL_61;
  }
  std::vector<NSObject * {__strong}>::push_back[abi:ne180100]((_QWORD *)(a1 + 176), &v55);
LABEL_75:

  return a1;
}

void sub_227BAC938(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x22E2A50A0](v1, 0x10A1C40256F229BLL);

  _Unwind_Resume(a1);
}

void sub_227BAC970(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

BOOL isBoxInsideBox(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  int16x4_t v6;
  _BOOL8 result;

  v4 = *a1;
  v5 = *a3;
  result = 0;
  if ((vmovn_s32(vcgtq_f32(*a3, *a1)).u8[0] & 1) == 0)
  {
    v6 = vmovn_s32(vcgtq_f32(vaddq_f32(*a2, v4), vaddq_f32(*a4, v5)));
    if ((v6.i8[0] & 1) == 0
      && v4.f32[1] >= v5.f32[1]
      && (v6.i8[2] & 1) == 0
      && v4.f32[2] >= v5.f32[2]
      && (v6.i8[4] & 1) == 0)
    {
      return 1;
    }
  }
  return result;
}

id *GKCOctreeNode<NSObject>::queryPoint(id *result, uint64_t a2, int8x16_t a3)
{
  float v3;
  int8x8_t v6;
  _BOOL8 v7;
  int32x2_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  void **v15;
  void **v16;

  v3 = *((float *)result + 24);
  if (*((float *)result + 12) <= v3 || *((float *)result + 13) <= v3 || *((float *)result + 14) <= v3)
  {
LABEL_24:
    v15 = (void **)result[22];
    v16 = (void **)result[23];
    if (v16 != v15)
      return std::vector<NSObject * {__strong}>::__insert_with_size[abi:ne180100]<std::__wrap_iter<NSObject * const {__strong}*>,NSObject * const {__strong}*>((id **)a2, *(_QWORD *)(a2 + 8), v15, v16, v16 - v15);
  }
  else
  {
    v6 = (int8x8_t)vextq_s8(a3, a3, 8uLL).u64[0];
    while (1)
    {
      v7 = *((float *)result + 20) <= truncf(*(float *)a3.i32);
      v8 = vcge_f32(vrnd_f32((float32x2_t)vext_s8(*(int8x8_t *)a3.i8, v6, 4uLL)), *(float32x2_t *)((char *)result + 84));
      v9 = (v8.i8[0] & 1) != 0 ? 2 : 0;
      v10 = v9 | v7;
      v11 = (v8.i8[4] & 1) != 0 ? 4 : 0;
      result = (id *)result[(v10 | v11) + 14];
      if (!result)
        break;
      v12 = *((float *)result + 24);
      if (*((float *)result + 12) <= v12 || *((float *)result + 13) <= v12 || *((float *)result + 14) <= v12)
        goto LABEL_24;
    }
  }
  return result;
}

id *GKCOctreeNode<NSObject>::queryBox(id *result, float32x4_t *a2, float32x4_t *a3, uint64_t a4)
{
  id *v7;
  void **v8;
  void **v9;
  float32x4_t v10;
  float v11;
  float32x4_t v12;
  float v13;
  float v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int16x4_t v19;
  float32x4_t v20;
  int16x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int16x4_t v29;
  int16x4_t v30;
  float32x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int16x4_t v36;
  float v37;
  BOOL v38;
  float32x4_t v39;
  float32x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  float32x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  float32x4_t v47;
  int16x4_t v48;
  float32x4_t v49;
  int16x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int16x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int16x4_t v58;
  int16x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int16x4_t v63;
  float v64;
  BOOL v65;
  BOOL v66;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int16x4_t v74;
  int16x4_t v75;
  float32x4_t v76;
  int16x4_t v77;
  int16x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int16x4_t v84;
  int16x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;

  v7 = result;
  while (1)
  {
    while (1)
    {
      v8 = (void **)v7[22];
      v9 = (void **)v7[23];
      if (v9 != v8)
        result = std::vector<NSObject * {__strong}>::__insert_with_size[abi:ne180100]<std::__wrap_iter<NSObject * const {__strong}*>,NSObject * const {__strong}*>((id **)a4, *(_QWORD *)(a4 + 8), v8, v9, v9 - v8);
      v10 = *a2;
      v11 = COERCE_FLOAT(a2->i64[1]);
      v12 = *((float32x4_t *)v7 + 5);
      v13 = COERCE_FLOAT(v7[11]);
      LODWORD(v14) = HIDWORD(a2->i64[0]);
      LODWORD(v15) = HIDWORD(v7[10]);
      if (v11 <= v13)
        break;
      if (v14 >= v15)
      {
        v34 = *a3;
        v35 = vaddq_f32(*a3, v10);
        v36 = vmovn_s32(vcgtq_f32(v35, v12));
        if ((v36.i8[2] & 1) == 0)
        {
          v51 = *((float32x4_t *)v7 + 1);
          if ((v36.i8[0] & 1) != 0)
          {
            v52 = *((float32x4_t *)v7 + 3);
            v53 = vmovn_s32(vcgtq_f32(vaddq_f32(v52, v12), v10));
            if ((v53.i8[0] & 1) != 0
              && (vmovn_s32(vcgtq_f32(v35, v51)).i8[2] & 1) != 0
              && (vmovn_s32(vcgtq_f32(vaddq_f32(v52, v51), v10)).i8[2] & 1) != 0
              && (v36.i8[4] & 1) != 0
              && (v53.i8[4] & 1) != 0)
            {
              result = (id *)v7[19];
              if (result)
              {
                result = (id *)GKCOctreeNode<NSObject>::queryBox(result, a2, a3, a4);
                v51 = *((float32x4_t *)v7 + 1);
                v12 = *((float32x4_t *)v7 + 5);
                v10 = *a2;
                v34 = *a3;
                v35.i32[0] = vaddq_f32(*a3, *a2).u32[0];
              }
            }
          }
          if (v51.f32[0] < v35.f32[0])
          {
            v54 = *((float32x4_t *)v7 + 3);
            v55 = vaddq_f32(v54, v51);
            if (v55.f32[0] > v10.f32[0])
            {
              v56 = vaddq_f32(v34, v10);
              if ((vmovn_s32(vcgtq_f32(v56, v51)).i8[2] & 1) != 0
                && (vmovn_s32(vcgtq_f32(v55, v10)).i8[2] & 1) != 0
                && (vmovn_s32(vcgtq_f32(v56, v12)).i32[1] & 1) != 0
                && (vmovn_s32(vcgtq_f32(vaddq_f32(v54, v12), v10)).i32[1] & 1) != 0)
              {
                result = (id *)v7[18];
                if (result)
                {
                  result = (id *)GKCOctreeNode<NSObject>::queryBox(result, a2, a3, a4);
                  v12 = *((float32x4_t *)v7 + 5);
                  v10 = *a2;
                  v34 = *a3;
                  v35.i32[0] = vaddq_f32(*a3, *a2).u32[0];
                }
              }
            }
          }
          if (v12.f32[0] >= v35.f32[0])
            goto LABEL_92;
          v57 = vaddq_f32(*((float32x4_t *)v7 + 3), v12);
          if (v57.f32[0] <= v10.f32[0])
            goto LABEL_92;
          v58 = vmovn_s32(vcgtq_f32(vaddq_f32(v34, v10), v12));
          if ((v58.i8[2] & 1) == 0)
            goto LABEL_92;
          v59 = vmovn_s32(vcgtq_f32(v57, v10));
          if ((v59.i8[2] & 1) == 0 || (v58.i8[4] & 1) == 0 || (v59.i8[4] & 1) == 0)
            goto LABEL_92;
LABEL_47:
          result = (id *)v7[21];
          if (result)
          {
            result = (id *)GKCOctreeNode<NSObject>::queryBox(result, a2, a3, a4);
            v12 = *((float32x4_t *)v7 + 5);
            v10 = *a2;
            v34 = *a3;
            v35.i32[0] = vaddq_f32(*a3, *a2).u32[0];
          }
          goto LABEL_92;
        }
        if ((v36.i8[0] & 1) != 0)
        {
          v37 = *((float *)v7 + 13) + v15;
          v38 = (float)(*((float *)v7 + 12) + v12.f32[0]) <= v10.f32[0] || v37 <= v14;
          if (!v38 && (v36.i8[4] & 1) != 0 && (float)(*((float *)v7 + 14) + v13) > v11)
            goto LABEL_47;
        }
LABEL_92:
        if (v12.f32[0] >= v35.f32[0])
          return result;
        v60 = *((float32x4_t *)v7 + 3);
        if ((float)(v60.f32[0] + v12.f32[0]) <= v10.f32[0])
          return result;
        v61 = vaddq_f32(v34, v10);
        if ((vmovn_s32(vcgtq_f32(v61, v12)).i8[2] & 1) == 0)
          return result;
        if ((vmovn_s32(vcgtq_f32(vaddq_f32(v60, v12), v10)).i8[2] & 1) == 0)
          return result;
        v62 = *((float32x4_t *)v7 + 1);
        if ((vmovn_s32(vcgtq_f32(v61, v62)).i32[1] & 1) == 0)
          return result;
        if ((vmovn_s32(vcgtq_f32(vaddq_f32(v60, v62), v10)).i32[1] & 1) == 0)
          return result;
        v7 = (id *)v7[20];
        if (!v7)
          return result;
      }
      else
      {
        v16 = *((float32x4_t *)v7 + 1);
        v17 = *a3;
        v18 = vaddq_f32(*a3, v10);
        v19 = vmovn_s32(vcgtq_f32(v18, v12));
        if ((v19.i8[0] & 1) != 0)
        {
          v20 = *((float32x4_t *)v7 + 3);
          v21 = vmovn_s32(vcgtq_f32(vaddq_f32(v20, v12), v10));
          if ((v21.i8[0] & 1) != 0
            && (vmovn_s32(vcgtq_f32(v18, v16)).i8[2] & 1) != 0
            && (vmovn_s32(vcgtq_f32(vaddq_f32(v20, v16), v10)).i8[2] & 1) != 0
            && (v19.i8[4] & 1) != 0
            && (v21.i8[4] & 1) != 0)
          {
            result = (id *)v7[19];
            if (result)
            {
              result = (id *)GKCOctreeNode<NSObject>::queryBox(result, a2, a3, a4);
              v16 = *((float32x4_t *)v7 + 1);
              v12 = *((float32x4_t *)v7 + 5);
              v10 = *a2;
              v17 = *a3;
              v18.i32[0] = vaddq_f32(*a3, *a2).u32[0];
            }
          }
        }
        if (v16.f32[0] >= v18.f32[0])
          return result;
        v22 = *((float32x4_t *)v7 + 3);
        v23 = vaddq_f32(v22, v16);
        if (v23.f32[0] <= v10.f32[0])
          return result;
        v24 = vaddq_f32(v17, v10);
        if ((vmovn_s32(vcgtq_f32(v24, v16)).i8[2] & 1) == 0
          || (vmovn_s32(vcgtq_f32(v23, v10)).i8[2] & 1) == 0
          || (vmovn_s32(vcgtq_f32(v24, v12)).i32[1] & 1) == 0
          || (vmovn_s32(vcgtq_f32(vaddq_f32(v22, v12), v10)).i32[1] & 1) == 0)
        {
          return result;
        }
LABEL_191:
        v7 = (id *)v7[18];
        if (!v7)
          return result;
      }
    }
    v25 = *a3;
    v26 = vaddq_f32(*a3, v10);
    if (v26.f32[2] >= v13)
      break;
    if (v14 >= v15)
    {
      v46 = vmovn_s32(vcgtq_f32(v26, v12));
      v47 = *((float32x4_t *)v7 + 1);
      if ((v46.i8[2] & 1) == 0)
      {
        if ((v46.i8[0] & 1) != 0)
        {
          v73 = *((float32x4_t *)v7 + 3);
          if ((vmovn_s32(vcgtq_f32(vaddq_f32(v73, v12), v10)).u8[0] & 1) != 0)
          {
            v74 = vmovn_s32(vcgtq_f32(v26, v47));
            if ((v74.i8[2] & 1) != 0)
            {
              v75 = vmovn_s32(vcgtq_f32(vaddq_f32(v73, v47), v10));
              if ((v75.i8[2] & 1) != 0 && (v74.i8[4] & 1) != 0 && (v75.i8[4] & 1) != 0)
              {
                result = (id *)v7[15];
                if (result)
                {
                  result = (id *)GKCOctreeNode<NSObject>::queryBox(result, a2, a3, a4);
                  v47 = *((float32x4_t *)v7 + 1);
                  v10 = *a2;
                  v25 = *a3;
                  v26.i32[0] = vaddq_f32(*a3, *a2).u32[0];
                }
              }
            }
          }
        }
        if (v47.f32[0] < v26.f32[0])
        {
          v76 = vaddq_f32(*((float32x4_t *)v7 + 3), v47);
          if (v76.f32[0] > v10.f32[0])
          {
            v77 = vmovn_s32(vcgtq_f32(vaddq_f32(v25, v10), v47));
            if ((v77.i8[2] & 1) != 0)
            {
              v78 = vmovn_s32(vcgtq_f32(v76, v10));
              if ((v78.i8[2] & 1) != 0 && (v77.i8[4] & 1) != 0 && (v78.i8[4] & 1) != 0)
              {
                result = (id *)v7[14];
                if (result)
                {
                  result = (id *)GKCOctreeNode<NSObject>::queryBox(result, a2, a3, a4);
                  v47 = *((float32x4_t *)v7 + 1);
                  v10 = *a2;
                  v25 = *a3;
                  v26.i32[0] = vaddq_f32(*a3, *a2).u32[0];
                }
              }
            }
          }
        }
        v12 = *((float32x4_t *)v7 + 5);
        if (v47.f32[0] >= v26.f32[0])
          goto LABEL_153;
        v79 = *((float32x4_t *)v7 + 3);
        if ((float)(v79.f32[0] + v47.f32[0]) <= v10.f32[0])
          goto LABEL_153;
        v80 = vaddq_f32(v25, v10);
        if ((vmovn_s32(vcgtq_f32(v80, v12)).i8[2] & 1) == 0
          || (vmovn_s32(vcgtq_f32(vaddq_f32(v79, v12), v10)).i8[2] & 1) == 0
          || (vmovn_s32(vcgtq_f32(v80, v47)).i32[1] & 1) == 0)
        {
          goto LABEL_153;
        }
        v71 = vaddq_f32(v79, v47);
LABEL_150:
        if ((vmovn_s32(vcgtq_f32(v71, v10)).i32[1] & 1) != 0)
          goto LABEL_151;
        goto LABEL_153;
      }
      v48 = vmovn_s32(vcgtq_f32(v26, v47));
      if ((v48.i8[0] & 1) != 0)
      {
        v49 = *((float32x4_t *)v7 + 3);
        v50 = vmovn_s32(vcgtq_f32(vaddq_f32(v49, v47), v10));
        if ((v50.i8[0] & 1) != 0
          && (vmovn_s32(vcgtq_f32(vaddq_f32(v49, v12), v10)).i8[2] & 1) != 0
          && (v48.i8[4] & 1) != 0
          && (v50.i8[4] & 1) != 0)
        {
LABEL_151:
          result = (id *)v7[17];
          if (result)
          {
            result = (id *)GKCOctreeNode<NSObject>::queryBox(result, a2, a3, a4);
            v47 = *((float32x4_t *)v7 + 1);
            v12 = *((float32x4_t *)v7 + 5);
            v10 = *a2;
            v25 = *a3;
            v26.i32[0] = vaddq_f32(*a3, *a2).u32[0];
          }
        }
      }
LABEL_153:
      if (v47.f32[0] >= v26.f32[0])
        return result;
      v81 = *((float32x4_t *)v7 + 3);
      if ((float)(v81.f32[0] + v47.f32[0]) <= v10.f32[0])
        return result;
      v82 = vaddq_f32(v25, v10);
      if ((vmovn_s32(vcgtq_f32(v82, v12)).i8[2] & 1) == 0)
        return result;
      if ((vmovn_s32(vcgtq_f32(vaddq_f32(v81, v12), v10)).i8[2] & 1) == 0)
        return result;
      if ((vmovn_s32(vcgtq_f32(v82, v47)).i32[1] & 1) == 0)
        return result;
      if ((vmovn_s32(vcgtq_f32(vaddq_f32(v81, v47), v10)).i32[1] & 1) == 0)
        return result;
      v7 = (id *)v7[16];
      if (!v7)
        return result;
    }
    else
    {
      v27 = *((float32x4_t *)v7 + 1);
      if ((vmovn_s32(vcgtq_f32(v26, v12)).u8[0] & 1) != 0)
      {
        v28 = *((float32x4_t *)v7 + 3);
        if ((vmovn_s32(vcgtq_f32(vaddq_f32(v28, v12), v10)).u8[0] & 1) != 0)
        {
          v29 = vmovn_s32(vcgtq_f32(v26, v27));
          if ((v29.i8[2] & 1) != 0)
          {
            v30 = vmovn_s32(vcgtq_f32(vaddq_f32(v28, v27), v10));
            if ((v30.i8[2] & 1) != 0 && (v29.i8[4] & 1) != 0 && (v30.i8[4] & 1) != 0)
            {
              result = (id *)v7[15];
              if (result)
              {
                result = (id *)GKCOctreeNode<NSObject>::queryBox(result, a2, a3, a4);
                v27 = *((float32x4_t *)v7 + 1);
                v10 = *a2;
                v25 = *a3;
                v26.i32[0] = vaddq_f32(*a3, *a2).u32[0];
              }
            }
          }
        }
      }
      if (v27.f32[0] >= v26.f32[0])
        return result;
      v31 = vaddq_f32(*((float32x4_t *)v7 + 3), v27);
      if (v31.f32[0] <= v10.f32[0])
        return result;
      v32 = vmovn_s32(vcgtq_f32(vaddq_f32(v25, v10), v27));
      if ((v32.i8[2] & 1) == 0)
        return result;
      v33 = vmovn_s32(vcgtq_f32(v31, v10));
      if ((v33.i8[2] & 1) == 0)
        return result;
      if ((v32.i8[4] & 1) == 0)
        return result;
      if ((v33.i8[4] & 1) == 0)
        return result;
      v7 = (id *)v7[14];
      if (!v7)
        return result;
    }
  }
  if (v14 >= v15)
  {
    v63 = vmovn_s32(vcgtq_f32(v26, v12));
    if ((v63.i8[2] & 1) == 0)
    {
      v39 = *((float32x4_t *)v7 + 1);
      if ((v63.i8[0] & 1) != 0)
      {
        v83 = *((float32x4_t *)v7 + 3);
        if ((vmovn_s32(vcgtq_f32(vaddq_f32(v83, v12), v10)).u8[0] & 1) != 0)
        {
          v84 = vmovn_s32(vcgtq_f32(v26, v39));
          if ((v84.i8[2] & 1) != 0)
          {
            v85 = vmovn_s32(vcgtq_f32(vaddq_f32(v83, v39), v10));
            if ((v85.i8[2] & 1) != 0 && (v84.i8[4] & 1) != 0 && (v85.i8[4] & 1) != 0)
            {
              result = (id *)v7[15];
              if (result)
              {
                result = (id *)GKCOctreeNode<NSObject>::queryBox(result, a2, a3, a4);
                v39 = *((float32x4_t *)v7 + 1);
                v10 = *a2;
                v25 = *a3;
                v26.i32[0] = vaddq_f32(*a3, *a2).u32[0];
              }
            }
          }
        }
      }
      if (v39.f32[0] < v26.f32[0])
      {
        v86 = *((float32x4_t *)v7 + 3);
        if ((float)(v86.f32[0] + v39.f32[0]) > v10.f32[0])
        {
          v44 = vmovn_s32(vcgtq_f32(vaddq_f32(v25, v10), v39));
          if ((v44.i8[2] & 1) != 0)
          {
            v45 = vmovn_s32(vcgtq_f32(vaddq_f32(v86, v39), v10));
            if ((v45.i8[2] & 1) != 0)
              goto LABEL_173;
          }
        }
      }
      goto LABEL_177;
    }
    if ((v63.i8[0] & 1) != 0)
    {
      v64 = *((float *)v7 + 13) + v15;
      v65 = (float)(*((float *)v7 + 12) + v12.f32[0]) <= v10.f32[0] || v64 <= v14;
      v66 = !v65 && v13 < v26.f32[2];
      if (v66 && (float)(*((float *)v7 + 14) + v13) > v11)
      {
        result = (id *)v7[21];
        if (result)
        {
          result = (id *)GKCOctreeNode<NSObject>::queryBox(result, a2, a3, a4);
          v12 = *((float32x4_t *)v7 + 5);
          v10 = *a2;
          v25 = *a3;
          v26.i32[0] = vaddq_f32(*a3, *a2).u32[0];
        }
      }
    }
    v47 = *((float32x4_t *)v7 + 1);
    if (v12.f32[0] < v26.f32[0])
    {
      v68 = *((float32x4_t *)v7 + 3);
      if ((float)(v68.f32[0] + v12.f32[0]) > v10.f32[0])
      {
        v69 = vaddq_f32(v25, v10);
        if ((vmovn_s32(vcgtq_f32(v69, v12)).i8[2] & 1) != 0
          && (vmovn_s32(vcgtq_f32(vaddq_f32(v68, v12), v10)).i8[2] & 1) != 0
          && (vmovn_s32(vcgtq_f32(v69, v47)).i32[1] & 1) != 0
          && (vmovn_s32(vcgtq_f32(vaddq_f32(v68, v47), v10)).i32[1] & 1) != 0)
        {
          result = (id *)v7[20];
          if (result)
          {
            result = (id *)GKCOctreeNode<NSObject>::queryBox(result, a2, a3, a4);
            v47 = *((float32x4_t *)v7 + 1);
            v12 = *((float32x4_t *)v7 + 5);
            v10 = *a2;
            v25 = *a3;
            v26.i32[0] = vaddq_f32(*a3, *a2).u32[0];
          }
        }
      }
    }
    if (v47.f32[0] >= v26.f32[0])
      goto LABEL_153;
    v70 = *((float32x4_t *)v7 + 3);
    v71 = vaddq_f32(v70, v47);
    if (v71.f32[0] <= v10.f32[0])
      goto LABEL_153;
    v72 = vaddq_f32(v25, v10);
    if ((vmovn_s32(vcgtq_f32(v72, v12)).i8[2] & 1) == 0
      || (vmovn_s32(vcgtq_f32(vaddq_f32(v70, v12), v10)).i8[2] & 1) == 0
      || (vmovn_s32(vcgtq_f32(v72, v47)).i32[1] & 1) == 0)
    {
      goto LABEL_153;
    }
    goto LABEL_150;
  }
  v39 = *((float32x4_t *)v7 + 1);
  if ((vmovn_s32(vcgtq_f32(v26, v12)).u8[0] & 1) != 0)
  {
    v40 = *((float32x4_t *)v7 + 3);
    if ((vmovn_s32(vcgtq_f32(vaddq_f32(v40, v12), v10)).u8[0] & 1) != 0)
    {
      v41 = vmovn_s32(vcgtq_f32(v26, v39));
      if ((v41.i8[2] & 1) != 0)
      {
        v42 = vmovn_s32(vcgtq_f32(vaddq_f32(v40, v39), v10));
        if ((v42.i8[2] & 1) != 0 && (v41.i8[4] & 1) != 0 && (v42.i8[4] & 1) != 0)
        {
          result = (id *)v7[15];
          if (result)
          {
            result = (id *)GKCOctreeNode<NSObject>::queryBox(result, a2, a3, a4);
            v39 = *((float32x4_t *)v7 + 1);
            v10 = *a2;
            v25 = *a3;
            v26.i32[0] = vaddq_f32(*a3, *a2).u32[0];
          }
        }
      }
    }
  }
  if (v39.f32[0] < v26.f32[0])
  {
    v43 = vaddq_f32(*((float32x4_t *)v7 + 3), v39);
    if (v43.f32[0] > v10.f32[0])
    {
      v44 = vmovn_s32(vcgtq_f32(vaddq_f32(v25, v10), v39));
      if ((v44.i8[2] & 1) != 0)
      {
        v45 = vmovn_s32(vcgtq_f32(v43, v10));
        if ((v45.i8[2] & 1) != 0)
        {
LABEL_173:
          if ((v44.i8[4] & 1) != 0 && (v45.i8[4] & 1) != 0)
          {
            result = (id *)v7[14];
            if (result)
            {
              result = (id *)GKCOctreeNode<NSObject>::queryBox(result, a2, a3, a4);
              v39 = *((float32x4_t *)v7 + 1);
              v10 = *a2;
              v25 = *a3;
              v26.i32[0] = vaddq_f32(*a3, *a2).u32[0];
            }
          }
        }
      }
    }
  }
LABEL_177:
  v87 = *((float32x4_t *)v7 + 5);
  if (v87.f32[0] < v26.f32[0])
  {
    v88 = *((float32x4_t *)v7 + 3);
    v89 = vaddq_f32(v88, v87);
    if (v89.f32[0] > v10.f32[0])
    {
      v90 = vaddq_f32(v25, v10);
      if ((vmovn_s32(vcgtq_f32(v90, v39)).i8[2] & 1) != 0
        && (vmovn_s32(vcgtq_f32(vaddq_f32(v88, v39), v10)).i8[2] & 1) != 0
        && (vmovn_s32(vcgtq_f32(v90, v87)).i32[1] & 1) != 0
        && (vmovn_s32(vcgtq_f32(v89, v10)).i32[1] & 1) != 0)
      {
        result = (id *)v7[19];
        if (result)
        {
          result = (id *)GKCOctreeNode<NSObject>::queryBox(result, a2, a3, a4);
          v39 = *((float32x4_t *)v7 + 1);
          v87 = *((float32x4_t *)v7 + 5);
          v10 = *a2;
          v25 = *a3;
          v26.i32[0] = vaddq_f32(*a3, *a2).u32[0];
        }
      }
    }
  }
  if (v39.f32[0] < v26.f32[0])
  {
    v91 = *((float32x4_t *)v7 + 3);
    v92 = vaddq_f32(v91, v39);
    if (v92.f32[0] > v10.f32[0])
    {
      v93 = vaddq_f32(v25, v10);
      if ((vmovn_s32(vcgtq_f32(v93, v39)).i8[2] & 1) != 0
        && (vmovn_s32(vcgtq_f32(v92, v10)).i8[2] & 1) != 0
        && (vmovn_s32(vcgtq_f32(v93, v87)).i32[1] & 1) != 0
        && (vmovn_s32(vcgtq_f32(vaddq_f32(v91, v87), v10)).i32[1] & 1) != 0)
      {
        goto LABEL_191;
      }
    }
  }
  return result;
}

uint64_t GKCOctreeNode<NSObject>::removeDataRecursive(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  void *v13;
  void *v14;

  v3 = a2;
  v4 = v3;
  v5 = (_QWORD *)a1[22];
  v6 = (_QWORD *)a1[23];
  if (v5 == v6)
  {
LABEL_4:

    v7 = a1[14];
    if (!v7 || (GKCOctreeNode<NSObject>::removeDataRecursive(v7, v4) & 1) == 0)
    {
      v8 = a1[15];
      if (!v8 || (GKCOctreeNode<NSObject>::removeDataRecursive(v8, v4) & 1) == 0)
      {
        v9 = a1[16];
        if (!v9 || (GKCOctreeNode<NSObject>::removeDataRecursive(v9, v4) & 1) == 0)
        {
          v10 = a1[17];
          if (!v10 || (GKCOctreeNode<NSObject>::removeDataRecursive(v10, v4) & 1) == 0)
          {

            return 0;
          }
        }
      }
    }
  }
  else
  {
    while ((id)*v5 != v3)
    {
      if (++v5 == v6)
        goto LABEL_4;
    }
    v12 = v5 + 1;
    if (v5 + 1 != v6)
    {
      do
      {
        v5 = v12;
        v13 = (void *)*(v12 - 1);
        *(v12 - 1) = *v12;
        *v12 = 0;

        v12 = v5 + 1;
      }
      while (v5 + 1 != v6);
      v6 = (_QWORD *)a1[23];
    }
    while (v6 != v5)
    {
      v14 = (void *)*--v6;

    }
    a1[23] = v5;

  }
  return 1;
}

void sub_227BAD6E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_0_0(uint64_t a1, uint64_t a2)
{
  return a2;
}

_QWORD *GKCPolygonObstacle::GKCPolygonObstacle(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  char **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = &off_24F04F4C0;
  a1[1] = 0;
  v6 = (char **)(a1 + 1);
  a1[2] = 0;
  a1[3] = 0;
  OpenSteer::PolygonObstacle::PolygonObstacle(a1 + 4);
  a1[8] = 0;
  v7 = a1[1];
  v8 = (a1[2] - v7) >> 3;
  if (a3 <= v8)
  {
    if (a3 < v8)
      a1[2] = v7 + 8 * a3;
  }
  else
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm(v6, a3 - v8);
  }
  v9 = a1[5];
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[6] - v9) >> 2);
  if (a3 > v10)
  {
    std::vector<OpenSteer::Vec3>::__append((uint64_t)(a1 + 5), a3 - v10);
LABEL_10:
    v11 = 0;
    v12 = 0;
    do
    {
      *(_QWORD *)&(*v6)[8 * v12] = *(_QWORD *)(a2 + 8 * v12);
      v13 = *(_QWORD *)(a2 + 8 * v12);
      v14 = a1[5] + v11;
      *(_QWORD *)v14 = v13;
      *(_DWORD *)(v14 + 8) = HIDWORD(v13);
      ++v12;
      v11 += 12;
    }
    while (a3 != v12);
    return a1;
  }
  if (a3 < v10)
    a1[6] = v9 + 12 * a3;
  if (a3)
    goto LABEL_10;
  return a1;
}

void sub_227BAD81C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v1[4] = &off_24F04F418;
  v4 = (void *)v1[5];
  if (v4)
  {
    v1[6] = v4;
    operator delete(v4);
    v5 = *v2;
    if (!*v2)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  v1[2] = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

void GKCPolygonObstacle::~GKCPolygonObstacle(GKCPolygonObstacle *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F04F4C0;
  *((_QWORD *)this + 4) = &off_24F04F418;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F04F4C0;
  *((_QWORD *)this + 4) = &off_24F04F418;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24F04F4C0;
  *((_QWORD *)this + 4) = &off_24F04F418;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22E2A50A0);
}

BOOL GKCPolygonObstacle::intersectsLineFrom(uint64_t a1, float32x2_t *a2, float32x2_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int32x2_t v7;
  float32x2_t v8;
  unint64_t v9;
  BOOL v10;
  float32x4_t v11;
  int16x4_t v12;
  float32x2_t v13;
  unint64_t v14;
  unint64_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  int32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16) - v3;
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    v5 = 0;
    v6 = v4 >> 3;
    v7 = (int32x2_t)vsub_f32(*a3, *a2);
    v8 = (float32x2_t)vrev64_s32(v7);
    v9 = ((unint64_t)v4 >> 3);
    v10 = 1;
    while (1)
    {
      v13 = *(float32x2_t *)(v3 + 8 * v5);
      v14 = v5 + 1;
      if (v6 > v5 + 1)
        v15 = v5 + 1;
      else
        v15 = 0;
      v16 = vsub_f32(*(float32x2_t *)(v3 + 8 * v15), v13);
      v17 = vmul_f32(v8, v16);
      v18 = vsub_f32(v13, *a2);
      v19 = (int32x2_t)vsub_f32(v17, (float32x2_t)vdup_lane_s32((int32x2_t)v17, 1));
      v20 = vmul_f32((float32x2_t)__PAIR64__(v18.u32[1], v7.u32[0]), (float32x2_t)vext_s8((int8x8_t)v18, (int8x8_t)v16, 4uLL));
      v21 = (float32x2_t)vext_s8((int8x8_t)v7, (int8x8_t)v18, 4uLL);
      v18.i32[1] = v16.i32[1];
      v22 = vmls_f32(v20, v21, v18);
      if (*(float *)v19.i32 == 0.0)
      {
        if (v22.f32[1] == 0.0 && v22.f32[0] == 0.0)
          return v10;
      }
      else
      {
        *(float32x2_t *)v11.f32 = vdiv_f32(v22, (float32x2_t)vdup_lane_s32(v19, 0));
        v11.i64[1] = v11.i64[0];
        v12.i32[0] = vmovn_s32(vcgeq_f32((float32x4_t)xmmword_227BC0320, v11)).u32[0];
        v12.i32[1] = vmovn_s32(vcgeq_f32(v11, (float32x4_t)xmmword_227BC0320)).i32[1];
        if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v12, 0xFuLL))) & 1) != 0)
          return v10;
      }
      v10 = v14 < v9;
      v5 = v14;
      if (v9 == v14)
        return v10;
    }
  }
  return 0;
}

BOOL GKCPolygonObstacle::intersectsPoint(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v10;
  float v11;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if ((int)(v3 >> 3) < 1)
  {
    return 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = (v3 >> 3) - 1;
    LODWORD(v7) = HIDWORD(*a2);
    v8 = (v3 >> 3);
    do
    {
      v9 = 8 * (int)v6;
      v6 = v4;
      v10 = *(float32x2_t *)(v2 + v9);
      LODWORD(v11) = HIDWORD(*(_QWORD *)(v2 + 8 * v4));
      if (v11 <= v7 == v10.f32[1] > v7
        && COERCE_FLOAT(*a2) < (float)((float)((float)((float)(v7 - v11)
                                                     * vsub_f32(v10, *(float32x2_t *)(v2 + 8 * v4)).f32[0])
                                             / (float)(v10.f32[1] - v11))
                                     + COERCE_FLOAT(*(_QWORD *)(v2 + 8 * v4))))
      {
        v5 = !v5;
      }
      ++v4;
    }
    while (v8 != v6 + 1);
  }
  return v5;
}

id GKCPolygonObstacle::extrudeObstacle(GKCPolygonObstacle *this, GKCPolygonObstacle *a2, float32_t a3)
{
  uint64_t v3;
  float32x2_t *v6;
  uint64_t v7;
  float32x2_t v8;
  uint64_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  void *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x2_t v35;
  uint64_t v36;
  float32x2_t v37;
  float32x2_t v38;
  uint64_t v39;
  uint64_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  int32x2_t v55;
  int32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  void *__p;
  void *v61;
  uint64_t v62;

  __p = 0;
  v61 = 0;
  v62 = 0;
  v3 = *((_QWORD *)this + 2) - *((_QWORD *)this + 1);
  if (!v3)
  {
    v7 = 0;
    goto LABEL_11;
  }
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm((char **)&__p, v3 >> 3);
  v6 = (float32x2_t *)*((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2) - (_QWORD)v6;
  v8.i32[0] = 955908096;
  if (a3 > 0.0)
    v8.f32[0] = a3;
  if ((int)((unint64_t)v7 >> 3) >= 1)
  {
    v9 = ((unint64_t)v7 >> 3);
    v10 = v6[((v7 << 29) - 0x100000000) >> 32];
    v11 = v6[v7 << 29 > 0x1FFFFFFFFLL];
    v12 = vsub_f32(*v6, v10);
    v13 = vmul_f32(v12, v12);
    v13.i32[0] = vadd_f32(v13, (float32x2_t)vdup_lane_s32((int32x2_t)v13, 1)).u32[0];
    v14 = vrsqrte_f32((float32x2_t)v13.u32[0]);
    v15 = vmul_n_f32(v12, vmul_f32(vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v14, v14)), v14).f32[0]);
    v16 = vsub_f32(v11, *v6);
    v17 = vmul_f32(v16, v16);
    v17.i32[0] = vadd_f32(v17, (float32x2_t)vdup_lane_s32((int32x2_t)v17, 1)).u32[0];
    v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
    v19 = vmul_n_f32(v16, vmul_f32(vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)), v18).f32[0]);
    v20 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v19), v15);
    LODWORD(v21) = vsub_f32(v20, (float32x2_t)vdup_lane_s32((int32x2_t)v20, 1)).u32[0];
    if (fabsf(v21) == 0.00000011921)
    {
      v22 = vsub_f32(v11, v10);
      v23 = vmul_f32(v22, v22);
      v23.i32[0] = vadd_f32(v23, (float32x2_t)vdup_lane_s32((int32x2_t)v23, 1)).u32[0];
      v24 = vrsqrte_f32((float32x2_t)v23.u32[0]);
      v25 = (int32x2_t)vmul_f32(vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v24, v24)), v24);
      v26 = (int32x2_t)vmul_n_f32(v22, *(float *)v25.i32);
      *(float *)v25.i32 = -*(float *)&v26.i32[1];
      v27 = (float32x2_t)vzip1_s32(v25, v26);
      v28 = vmul_f32(v27, v27);
      v28.i32[0] = vadd_f32(v28, (float32x2_t)vdup_lane_s32((int32x2_t)v28, 1)).u32[0];
      v29 = vrsqrte_f32((float32x2_t)v28.u32[0]);
      *(float32x2_t *)__p = vmul_n_f32(v27, vmul_f32(vmul_f32(v29, v8), vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v29, v29))).f32[0]);
      if (v9 != 1)
      {
LABEL_14:
        v32 = 0;
        v33 = (int)(v7 >> 3);
        v34 = 1;
        do
        {
          v36 = *((_QWORD *)this + 1);
          v37 = *(float32x2_t *)(v36 + 8 * v34);
          v38 = *(float32x2_t *)(v36 + (v32 >> 29));
          v39 = v34 + 1;
          v40 = (v34 + 1);
          if (v34 + 1 >= v33)
            v40 = 0;
          v41 = *(float32x2_t *)(v36 + 8 * v40);
          v42 = vsub_f32(v37, v38);
          v43 = vmul_f32(v42, v42);
          v43.i32[0] = vadd_f32(v43, (float32x2_t)vdup_lane_s32((int32x2_t)v43, 1)).u32[0];
          v44 = vrsqrte_f32((float32x2_t)v43.u32[0]);
          v45 = vmul_n_f32(v42, vmul_f32(vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v44, v44)), v44).f32[0]);
          v46 = vsub_f32(v41, v37);
          v47 = vmul_f32(v46, v46);
          v47.i32[0] = vadd_f32(v47, (float32x2_t)vdup_lane_s32((int32x2_t)v47, 1)).u32[0];
          v48 = vrsqrte_f32((float32x2_t)v47.u32[0]);
          v49 = vmul_n_f32(v46, vmul_f32(vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v48, v48)), v48).f32[0]);
          v50 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v49), v45);
          LODWORD(v51) = vsub_f32(v50, (float32x2_t)vdup_lane_s32((int32x2_t)v50, 1)).u32[0];
          if (fabsf(v51) == 0.00000011921)
          {
            v52 = vsub_f32(v41, v38);
            v53 = vmul_f32(v52, v52);
            v53.i32[0] = vadd_f32(v53, (float32x2_t)vdup_lane_s32((int32x2_t)v53, 1)).u32[0];
            v54 = vrsqrte_f32((float32x2_t)v53.u32[0]);
            v55 = (int32x2_t)vmul_f32(vrsqrts_f32((float32x2_t)v53.u32[0], vmul_f32(v54, v54)), v54);
            v56 = (int32x2_t)vmul_n_f32(v52, *(float *)v55.i32);
            *(float *)v55.i32 = -*(float *)&v56.i32[1];
            v57 = (float32x2_t)vzip1_s32(v55, v56);
            v58 = vmul_f32(v57, v57);
            v58.i32[0] = vadd_f32(v58, (float32x2_t)vdup_lane_s32((int32x2_t)v58, 1)).u32[0];
            v59 = vrsqrte_f32((float32x2_t)v58.u32[0]);
            v35 = vmul_n_f32(v57, vmul_f32(vmul_f32(v59, v8), vrsqrts_f32((float32x2_t)v58.u32[0], vmul_f32(v59, v59))).f32[0]);
          }
          else
          {
            v35 = vmla_n_f32(v37, vsub_f32(v45, v49), v8.f32[0] / v51);
          }
          *((float32x2_t *)__p + v34) = v35;
          v32 += 0x100000000;
          ++v34;
        }
        while (v9 != v39);
      }
    }
    else
    {
      *(float32x2_t *)__p = vmla_n_f32(*v6, vsub_f32(v15, v19), v8.f32[0] / v21);
      if (v9 != 1)
        goto LABEL_14;
    }
    v7 = *((_QWORD *)this + 2) - *((_QWORD *)this + 1);
  }
LABEL_11:
  +[GKPolygonObstacle obstacleWithPoints:count:](GKPolygonObstacle, "obstacleWithPoints:count:", __p, v7 >> 3);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  if (__p)
  {
    v61 = __p;
    operator delete(__p);
  }
  return v30;
}

void sub_227BADE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_227BAF44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_227BAF4E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BAF734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;

  if (!__p)
  {

    _Unwind_Resume(a1);
  }
  operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_227BAFA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE8__appendEm(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 1);
        v5 -= 16;
        *((_OWORD *)v13 - 1) = v17;
        v13 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *p2t::AdvancingFront::AdvancingFront(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  result[2] = a2;
  return result;
}

uint64_t p2t::AdvancingFront::LocateNode(p2t::AdvancingFront *this, double *a2)
{
  uint64_t result;
  double v4;

  result = *((_QWORD *)this + 2);
  v4 = *a2;
  if (*a2 >= *(double *)(result + 32))
  {
    while (1)
    {
      result = *(_QWORD *)(result + 16);
      if (!result)
        break;
      if (v4 < *(double *)(result + 32))
      {
        result = *(_QWORD *)(result + 24);
LABEL_8:
        *((_QWORD *)this + 2) = result;
        return result;
      }
    }
  }
  else
  {
    while (1)
    {
      result = *(_QWORD *)(result + 24);
      if (!result)
        break;
      if (v4 >= *(double *)(result + 32))
        goto LABEL_8;
    }
  }
  return result;
}

uint64_t p2t::AdvancingFront::FindSearchNode(p2t::AdvancingFront *this, const double *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t p2t::AdvancingFront::LocatePoint(p2t::AdvancingFront *this, const Point *a2)
{
  uint64_t result;
  double v4;

  result = *((_QWORD *)this + 2);
  v4 = **(double **)result;
  if (*(double *)&a2->v == v4)
  {
    if (*(const Point **)result != a2)
    {
      if (**(const Point ***)(result + 24) == a2)
      {
        result = *(_QWORD *)(result + 24);
      }
      else
      {
        result = *(_QWORD *)(result + 16);
        if (*(const Point **)result != a2)
          p2t::AdvancingFront::LocatePoint();
      }
    }
LABEL_14:
    *((_QWORD *)this + 2) = result;
  }
  else if (*(double *)&a2->v >= v4)
  {
    while (1)
    {
      result = *(_QWORD *)(result + 16);
      if (!result)
        break;
      if (*(const Point **)result == a2)
        goto LABEL_14;
    }
  }
  else
  {
    while (1)
    {
      result = *(_QWORD *)(result + 24);
      if (!result)
        break;
      if (*(const Point **)result == a2)
        goto LABEL_14;
    }
  }
  return result;
}

BOOL pointOnLine(double a1, double a2, double a3)
{
  float v3;
  BOOL v4;
  float v5;
  float v6;

  v3 = fmaxf(*(float *)&a2, *(float *)&a3);
  v4 = *(float *)&a1 >= fminf(*(float *)&a2, *(float *)&a3) && *(float *)&a1 <= v3;
  v5 = fminf(*((float *)&a2 + 1), *((float *)&a3 + 1));
  v6 = fmaxf(*((float *)&a2 + 1), *((float *)&a3 + 1));
  return v4 && *((float *)&a1 + 1) >= v5 && *((float *)&a1 + 1) <= v6;
}

uint64_t orientation(float32x2_t a1, float32x2_t a2, float32x2_t a3)
{
  float32x2_t v3;
  int v4;
  unsigned int v5;

  v3 = vmul_f32(vsub_f32(a3, a2), (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(a2, a1)));
  v4 = (int)vsub_f32(v3, (float32x2_t)vdup_lane_s32((int32x2_t)v3, 1)).f32[0];
  if (v4 >= 1)
    v5 = 1;
  else
    v5 = 2;
  if (v4)
    return v5;
  else
    return 0;
}

float32x2_t GKGetClosestPointOnLineSegmentToPoint(float32x2_t a1, float32x2_t a2, float32x2_t a3)
{
  float32x2_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float v7;
  float v8;

  v3 = vsub_f32(a3, a1);
  v4 = vsub_f32(a2, a1);
  v5 = (float32x2_t)vext_s8((int8x8_t)v3, (int8x8_t)v4, 4uLL);
  v3.i32[1] = v4.i32[1];
  v6 = vmla_f32(vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v4), v5), v4, v3);
  v7 = vdiv_f32(v6, (float32x2_t)vdup_lane_s32((int32x2_t)v6, 1)).f32[0];
  v8 = 0.0;
  if (v7 >= 0.0)
  {
    v8 = v7;
    if (v7 > 1.0)
      v8 = 1.0;
  }
  return vmla_n_f32(a1, v4, v8);
}

float32x2_t GKGetLineSegmentToLineSegmentIntersectionPoint(int32x2_t a1, int32x2_t a2, int32x2_t a3, int32x2_t a4)
{
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  int32x2_t v10;
  float32x2_t result;
  float32x2_t v12;
  unsigned __int32 v13;
  float32x2_t v14;
  int32x2_t v15;
  float32x2_t v16;

  v4 = (float32x2_t)vzip2_s32(a3, a1);
  v5 = vsub_f32((float32x2_t)vzip2_s32(a4, a2), v4);
  v6 = (float32x2_t)vzip1_s32(a3, a1);
  v7 = vsub_f32(v6, (float32x2_t)vzip1_s32(a4, a2));
  v8 = (float32x2_t)vrev64_s32((int32x2_t)v5);
  v9 = vmul_f32(v8, v7);
  v10 = (int32x2_t)vsub_f32(v9, (float32x2_t)vdup_lane_s32((int32x2_t)v9, 1));
  result = 0;
  if (*(float *)v10.i32 != 0.0)
  {
    v12 = vadd_f32(vmul_f32(v5, v6), vmul_f32(v7, v4));
    v13 = vmul_lane_f32(v7, v12, 1).u32[0];
    v14.i32[0] = vmul_lane_f32(v12, v7, 1).u32[0];
    v15 = (int32x2_t)vmul_f32(v12, v8);
    v16 = (float32x2_t)vdup_lane_s32(v15, 0);
    v16.i32[0] = v13;
    v14.i32[1] = v15.i32[1];
    return vdiv_f32(vsub_f32(v16, v14), (float32x2_t)vdup_lane_s32(v10, 0));
  }
  return result;
}

uint64_t GKGetLineToLineIntersection(float32x2_t *a1, float32x2_t a2, float32x2_t a3, float32x2_t a4, float32x2_t a5)
{
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;

  v5 = vsub_f32(a3, a2);
  v6 = vsub_f32(a5, a4);
  v7 = vdiv_f32((float32x2_t)vzip2_s32((int32x2_t)v5, (int32x2_t)v6), (float32x2_t)vzip1_s32((int32x2_t)v5, (int32x2_t)v6));
  if ((vmvn_s8((int8x8_t)vceq_f32(v7, (float32x2_t)vdup_lane_s32((int32x2_t)v7, 1))).u8[0] & 1) == 0)
    return 0;
  v8 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v6), v5);
  v9 = vsub_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1));
  if (v9.f32[0] == 0.0)
    return 0;
  v10 = vmul_f32(v6, (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(a2, a4)));
  *a1 = vmla_n_f32(a2, v5, vdiv_f32(vsub_f32(v10, (float32x2_t)vdup_lane_s32((int32x2_t)v10, 1)), v9).f32[0]);
  return 1;
}

BOOL GKDoesCircleIntersectLine(float32x2_t a1, float a2, float32x2_t a3, float32x2_t a4)
{
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;

  v4 = vsub_f32(a4, a3);
  v5 = vmul_f32(v4, v4);
  v6 = vsub_f32(a1, a3);
  v7 = vmul_f32(v4, v6);
  v8 = vmul_f32(v6, v6);
  v8.f32[0] = (float)-(float)(v8.f32[1] - (float)(a2 * a2)) - v8.f32[0];
  v9 = vdiv_f32(vadd_f32(v7, (float32x2_t)vdup_lane_s32((int32x2_t)v7, 1)), vadd_f32(v5, (float32x2_t)vdup_lane_s32((int32x2_t)v5, 1)));
  return (float)(vmul_f32(v9, v9).f32[0] + (float)(v8.f32[0] / vaddv_f32(v5))) >= 0.0;
}

float GKGetCircleToLineIntersectionPoints(_DWORD *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t a4, float a5, float32x2_t a6, float32x2_t a7)
{
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float v14;
  float result;
  float v16;
  float v17;
  float32x2_t v18;

  v7 = vsub_f32(a7, a6);
  v8 = vsub_f32(a4, a6);
  v9 = (float32x2_t)vext_s8((int8x8_t)v8, (int8x8_t)v7, 4uLL);
  v10 = (float32x2_t)__PAIR64__(v7.u32[1], v8.u32[0]);
  v11 = vmul_f32(v8, v8);
  v12 = (float32x2_t)vrev64_s32((int32x2_t)v7);
  v13 = vmla_f32(vmul_f32(v12, v9), v7, v10);
  v14 = (float)-(float)(v11.f32[1] - (float)(a5 * a5)) - v11.f32[0];
  result = v13.f32[0] / v13.f32[1];
  v16 = (float)(v14 / v13.f32[1]) + (float)(result * result);
  if (v16 >= 0.0)
  {
    v17 = sqrtf(v16);
    v12.f32[0] = v17 - result;
    v18 = vmls_lane_f32(a6, v7, v12, 0);
    if (v16 == 0.0)
    {
      *a1 = 1;
      *a2 = v18;
    }
    else
    {
      result = v17 + result;
      *a1 = 2;
      *a2 = v18;
      *a3 = vmla_n_f32(a6, v7, result);
    }
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

BOOL GKDoesCircleIntersectLineSegment(float32x2_t a1, float a2, double a3, double a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;

  v7 = 0;
  GKGetCircleToLineSegmentIntersectionPoints(&v7, &v6, &v5, a1, a2, a3, a4);
  return v7 > 0;
}

_DWORD *GKGetCircleToLineSegmentIntersectionPoints(_DWORD *result, _QWORD *a2, _QWORD *a3, float32x2_t a4, float a5, double a6, double a7)
{
  float32x2_t v7;
  float v9;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  BOOL v23;
  float v24;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  BOOL v32;
  float v33;
  float v34;

  *result = 0;
  v7 = vsub_f32(*(float32x2_t *)&a7, *(float32x2_t *)&a6);
  _S7 = *((float *)&a7 + 1) - *((float *)&a6 + 1);
  v9 = vmul_f32(v7, v7).f32[0] + (float)(_S7 * _S7);
  if (v9 == 0.0)
    return result;
  _D0 = vsub_f32(a4, *(float32x2_t *)&a6);
  __asm { FMLA            S16, S7, V0.S[1] }
  v15 = _S16 / v9;
  v16 = (float)((float)((float)-(float)((float)(_D0.f32[1] * _D0.f32[1]) - (float)(a5 * a5)) - vmul_f32(_D0, _D0).f32[0])
              / v9)
      + (float)(v15 * v15);
  if (v16 < 0.0)
    return result;
  v17 = sqrtf(v16);
  v18 = *(float *)&a6 - (float)((float)(v17 - v15) * v7.f32[0]);
  v19 = *((float *)&a6 + 1) - (float)((float)(v17 - v15) * _S7);
  *(float *)&v20 = v18;
  *((float *)&v20 + 1) = v19;
  if (v16 == 0.0)
  {
    v21 = fminf(*(float *)&a6, *(float *)&a7);
    v22 = fmaxf(*(float *)&a6, *(float *)&a7);
    v23 = v18 >= v21 && v18 <= v22;
    *(float *)&a6 = fminf(*((float *)&a6 + 1), *((float *)&a7 + 1));
    v24 = fmaxf(*((float *)&a6 + 1), *((float *)&a7 + 1));
    if (!v23 || v19 < *(float *)&a6 || v19 > v24)
      return result;
LABEL_49:
    *result = 1;
    *a2 = v20;
    return result;
  }
  v27 = v17 + v15;
  v28 = *(float *)&a6 + (float)((float)(v17 + v15) * v7.f32[0]);
  v29 = *((float *)&a6 + 1) + (float)(v27 * _S7);
  v30 = fminf(*(float *)&a6, *(float *)&a7);
  v31 = fmaxf(*(float *)&a6, *(float *)&a7);
  v32 = v18 >= v30 && v18 <= v31;
  v33 = fminf(*((float *)&a6 + 1), *((float *)&a7 + 1));
  v34 = fmaxf(*((float *)&a6 + 1), *((float *)&a7 + 1));
  if (v32 && v19 >= v33 && v19 <= v34)
  {
    if (v28 >= v30 && v28 <= v31 && v29 >= v33 && v29 <= v34)
    {
      *result = 2;
      *a2 = v20;
      *a3 = __PAIR64__(LODWORD(v29), LODWORD(v28));
      return result;
    }
    goto LABEL_49;
  }
  if (v28 >= v30 && v28 <= v31 && v29 >= v33 && v29 <= v34)
  {
    *result = 1;
    *a2 = __PAIR64__(LODWORD(v29), LODWORD(v28));
  }
  return result;
}

BOOL GKDoesCircleIntersectPolygon(uint64_t a1, int a2, double a3, float a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v14;
  _BOOL4 v15;
  float32x2_t v16;
  float v17;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v7 = 0;
  v8 = a2 - 1;
  v9 = a2 & ~(a2 >> 31);
  while (v9 != v7)
  {
    v10 = v7 + 1;
    v11 = *(double *)(a1 + 8 * (((int)v7 + 1) % v8));
    v12 = *(double *)(a1 + 8 * v7);
    v21 = 0;
    GKGetCircleToLineSegmentIntersectionPoints(&v21, &v20, &v19, *(float32x2_t *)&a3, a4, v12, v11);
    v7 = v10;
    if (v21 > 0)
      return 1;
  }
  if (a2 < 1)
  {
    return 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = *(float32x2_t *)(a1 + 8 * v8);
      LODWORD(v17) = HIDWORD(*(_QWORD *)(a1 + 8 * v14));
      if (v17 <= *((float *)&a3 + 1) == v16.f32[1] > *((float *)&a3 + 1)
        && *(float *)&a3 < (float)((float)((float)((float)(*((float *)&a3 + 1) - v17)
                                                 * vsub_f32(v16, *(float32x2_t *)(a1 + 8 * v14)).f32[0])
                                         / (float)(v16.f32[1] - v17))
                                 + COERCE_FLOAT(*(_QWORD *)(a1 + 8 * v14))))
      {
        v15 = !v15;
      }
      v8 = v14++;
    }
    while (a2 != v14);
  }
  return v15;
}

float Clamp(float a1, float a2, float a3)
{
  float v3;

  v3 = fminf(a1, a3);
  if (a1 >= a2)
    return v3;
  else
    return a2;
}

float32x2_t GKClosestPointsBetweenLineSegments(float32x2_t *a1, double *a2, float32x2_t result, float32x2_t a4, float32x2_t a5, float32x2_t a6)
{
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float v9;
  float32x2_t v10;
  float v11;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float v17;
  float v18;
  float v19;
  float32x2_t v20;
  float v21;
  float32x2_t v22;
  float v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float v27;
  float32x2_t v28;

  v6 = vsub_f32(a4, result);
  v7 = vsub_f32(a6, a5);
  v8 = vmul_f32(v6, v6);
  v9 = vaddv_f32(v8);
  v10 = vmul_f32(v7, v7);
  v11 = vaddv_f32(v10);
  if (v9 <= 0.00000011921 && v11 <= 0.00000011921)
  {
    *a1 = result;
    *a2 = *(double *)&a5;
    return result;
  }
  v13 = vsub_f32(result, a5);
  v14 = vadd_f32(v10, (float32x2_t)vdup_lane_s32((int32x2_t)v10, 1));
  v15 = vmul_f32(v7, v13);
  v16 = vadd_f32(v15, (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1));
  if (v9 <= 0.00000011921)
  {
    v17 = fminf(vdiv_f32(v16, v14).f32[0], 1.0);
    v18 = 0.0;
    v19 = fmaxf(v17, 0.0);
LABEL_7:
    result = vmla_n_f32(result, v6, v18);
    *a1 = result;
    *(float32x2_t *)a2 = vmla_n_f32(a5, v7, v19);
    return result;
  }
  v20 = vmul_f32(v13, v6);
  v21 = vaddv_f32(v20);
  if (v11 <= 0.00000011921)
    goto LABEL_12;
  v22 = vadd_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1));
  v23 = vaddv_f32(v15);
  v24 = vmul_f32(v7, v6);
  v25 = vadd_f32(v20, (float32x2_t)vdup_lane_s32((int32x2_t)v20, 1));
  v26 = vadd_f32(v24, (float32x2_t)vdup_lane_s32((int32x2_t)v24, 1));
  v27 = vaddv_f32(v24);
  v28 = vmls_f32(vmul_f32(v14, v22), v26, v26);
  if (v28.f32[0] == 0.0)
  {
    v18 = 0.0;
    v19 = (float)(v23 + (float)(0.0 * v27)) / v11;
    if (v19 < 0.0)
      goto LABEL_12;
  }
  else
  {
    v18 = fmaxf(fminf(vdiv_f32(vmls_f32(vmul_f32(v26, v16), v14, v25), v28).f32[0], 1.0), 0.0);
    v19 = (float)(v23 + (float)(v18 * v27)) / v11;
    if (v19 < 0.0)
    {
LABEL_12:
      result = vmla_n_f32(result, v6, fmaxf(fminf((float)-v21 / v9, 1.0), 0.0));
      *a1 = result;
      *(float32x2_t *)a2 = vmla_n_f32(a5, v7, 0.0);
      return result;
    }
  }
  if (v19 <= 1.0)
    goto LABEL_7;
  result = vmla_n_f32(result, v6, fmaxf(fminf(vdiv_f32(vsub_f32(v26, v25), v22).f32[0], 1.0), 0.0));
  *a1 = result;
  *(float32x2_t *)a2 = vmla_n_f32(a5, v7, 1.0);
  return result;
}

uint64_t p2t::Orient2d(float64x2_t *this, Point *a2, Point *a3, Point *a4)
{
  int8x16_t v4;
  float64x2_t v5;
  double v6;

  v4 = (int8x16_t)vsubq_f64(*(float64x2_t *)&a2->v, *(float64x2_t *)&a3->v);
  v5 = vmulq_f64((float64x2_t)vextq_s8(v4, v4, 8uLL), vsubq_f64(*this, *(float64x2_t *)&a3->v));
  v6 = vsubq_f64(v5, (float64x2_t)vdupq_laneq_s64((int64x2_t)v5, 1)).f64[0];
  if (v6 >= 1.0e-12 || v6 <= -1.0e-12)
    return v6 > 0.0;
  else
    return 2;
}

BOOL p2t::InScanArea(p2t *this, Point *a2, Point *a3, Point *a4, Point *a5)
{
  double v5;
  double v6;

  v5 = *((double *)this + 1);
  v6 = *(double *)&a4[2].v;
  return (*(double *)&a2[2].v - v5) * (*(double *)&a4->v - *(double *)&a2->v)
       + (v6 - *(double *)&a2[2].v) * (*(double *)this - *(double *)&a2->v) < -1.0e-12
      && (*(double *)&a3[2].v - v5) * (*(double *)&a4->v - *(double *)&a3->v)
       + (v6 - *(double *)&a3[2].v) * (*(double *)this - *(double *)&a3->v) > 1.0e-12;
}

void p2t::Sweep::Triangulate(p2t::Sweep *this, p2t::SweepContext *a2)
{
  uint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  p2t::Triangle *v8;
  Point *v9;
  void *__p;

  p2t::SweepContext::InitTriangulation(a2);
  __p = 0;
  v5 = *(const void **)this;
  v4 = *((_QWORD *)this + 1);
  v6 = v4 - *(_QWORD *)this;
  if (v4 != *(_QWORD *)this)
  {
    if ((v6 & 0x8000000000000000) != 0)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    __p = operator new(v4 - *(_QWORD *)this);
    memcpy(__p, v5, v6);
  }
  p2t::SweepContext::CreateAdvancingFront((uint64_t)a2);
  if (__p)
    operator delete(__p);
  p2t::Sweep::SweepPoints(this, a2);
  v7 = *(_QWORD *)(**((_QWORD **)a2 + 19) + 16);
  v9 = *(Point **)v7;
  v8 = *(p2t::Triangle **)(v7 + 8);
  if ((p2t::Triangle::GetConstrainedEdgeCW((Point **)v8, *(Point **)v7) & 1) == 0)
  {
    do
      v8 = (p2t::Triangle *)p2t::Triangle::NeighborCCW(v8, v9);
    while (!p2t::Triangle::GetConstrainedEdgeCW((Point **)v8, v9));
  }
  p2t::SweepContext::MeshClean(a2, v8);
}

void sub_227BB1458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void p2t::Sweep::SweepPoints(p2t::Sweep *this, p2t::SweepContext *a2)
{
  uint64_t Point;
  double **Node;
  double **v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  Point **v10;
  Point *v11;
  Point *v12;
  p2t::Triangle *v13;
  int v14;
  int v15;
  uint64_t v16;
  Point *v17;
  double v18;
  double **v19;
  double *v20;
  double v21;
  double **v22;
  double v23;
  BOOL v24;
  double v25;
  double *v26;
  double *v27;
  double *v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  BOOL v34;
  double *v35;
  double v36;
  double v37;
  double v38;
  BOOL v39;
  double v40;
  Point **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Point *v47;
  double v48;
  double v49;
  BOOL v50;
  double v51;
  BOOL v52;
  Point **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Point *v58;
  double v59;
  double v60;
  BOOL v61;
  double v62;
  BOOL v63;
  double **v64;
  double *v65;
  double v66;
  double **v67;
  double v68;
  BOOL v69;
  double v70;
  double *v71;
  double *v72;
  double *v73;
  double *v74;
  double v75;
  double v76;
  double v77;
  double v78;
  BOOL v79;
  double *v80;
  double v81;
  double v82;
  double v83;
  BOOL v84;
  double v85;
  Point **v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  Point *v92;
  double v93;
  double v94;
  BOOL v95;
  double v96;
  BOOL v97;
  Point **v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Point *v103;
  double v104;
  double v105;
  BOOL v106;
  double v107;
  BOOL v108;
  int v109;

  v109 = 1;
  if ((int)((*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 3) >= 2)
  {
    do
    {
      Point = p2t::SweepContext::GetPoint(a2, &v109);
      Node = (double **)p2t::SweepContext::LocateNode((p2t::AdvancingFront **)a2, (Point *)Point);
      v6 = (double **)p2t::Sweep::NewFrontTriangle(this, a2, (Point *)Point, (uint64_t)Node);
      if (*(double *)Point <= **Node + 1.0e-12)
        p2t::Sweep::Fill(this, a2, (uint64_t)Node);
      p2t::Sweep::FillAdvancingFront((uint64_t)this, a2, v6);
      v7 = *(_QWORD *)(Point + 16);
      if (*(_QWORD *)(Point + 24) != v7)
      {
        v8 = 0;
        v9 = 0;
        do
        {
          v10 = *(Point ***)(v7 + 8 * v8);
          *((_QWORD *)a2 + 8) = v10;
          v11 = *v10;
          v12 = v10[1];
          *((_BYTE *)a2 + 72) = *(double *)&(*v10)->v > *(double *)&v12->v;
          v13 = (p2t::Triangle *)v6[1];
          v14 = p2t::Triangle::EdgeIndex(v13, v11, v12);
          if (v14 == -1)
          {
            v17 = *v10;
            v18 = *(double *)&(*v10)->v;
            if (*((_BYTE *)a2 + 72))
            {
              v19 = (double **)v6[2];
              v20 = *v19;
              v21 = **v19;
              if (v21 < v18)
              {
                v22 = v6;
                do
                {
                  v23 = (*(double *)&v17[2].v - *(double *)&v10[1][2].v) * (v21 - v18)
                      + (v20[1] - *(double *)&v17[2].v) * (*(double *)&v10[1]->v - v18);
                  v24 = v23 >= 1.0e-12 || v23 <= -1.0e-12;
                  if (v24 && v23 > 0.0)
                  {
                    while (1)
                    {
                      v25 = **v22;
LABEL_25:
                      if (v25 >= v18)
                        break;
                      v26 = v22[2];
                      v27 = *(double **)v26;
                      v28 = (double *)*((_QWORD *)v26 + 2);
                      v29 = *(double **)v28;
                      v30 = **(double **)v28;
                      v31 = *(double *)(*(_QWORD *)v28 + 8);
                      v32 = **(double **)v26;
                      v33 = (v30 - v32) * ((*v22)[1] - v31) + (*(double *)(*(_QWORD *)v26 + 8) - v31) * (v25 - v30);
                      v34 = v33 >= 1.0e-12 || v33 <= -1.0e-12;
                      if (v34 && v33 > 0.0)
                      {
                        do
                        {
                          v53 = (Point **)operator new();
                          p2t::Triangle::Triangle((uint64_t)v53, **((Point ***)v26 + 3), *(Point **)v26, **((Point ***)v26 + 2));
                          p2t::Triangle::MarkNeighbor(v53, *(p2t::Triangle **)(*((_QWORD *)v26 + 3) + 8), v54);
                          p2t::Triangle::MarkNeighbor(v53, *((p2t::Triangle **)v26 + 1), v55);
                          p2t::SweepContext::AddToMap(a2, (uint64_t)v53);
                          v56 = *((_QWORD *)v26 + 3);
                          *(double *)(v56 + 16) = v26[2];
                          *(_QWORD *)(*((_QWORD *)v26 + 2) + 24) = v56;
                          if ((p2t::Sweep::Legalize(this, a2, (p2t::Triangle *)v53) & 1) == 0)
                            p2t::SweepContext::MapTriangleToNodes((uint64_t)a2, v53, v57);
                          v26 = v22[2];
                          v58 = *(Point **)v26;
                          v17 = *v10;
                          v18 = *(double *)&(*v10)->v;
                          if (*(Point **)v26 == *v10)
                            break;
                          v59 = *(double *)&v58[2].v;
                          v60 = (v18 - *(double *)&v58->v) * (*(double *)&v10[1][2].v - *(double *)&v17[2].v)
                              + (v59 - *(double *)&v17[2].v) * (*(double *)&v10[1]->v - v18);
                          v61 = v60 >= 1.0e-12 || v60 <= -1.0e-12;
                          if (!v61 || v60 <= 0.0)
                            break;
                          v62 = (*(double *)(**((_QWORD **)v26 + 2) + 8) - (*v22)[1])
                              * (*(double *)&v58->v - ***((double ***)v26 + 2))
                              + (v59 - *(double *)(**((_QWORD **)v26 + 2) + 8)) * (**v22 - ***((double ***)v26 + 2));
                          v63 = v62 >= 1.0e-12 || v62 <= -1.0e-12;
                        }
                        while (v63 && v62 > 0.0);
                        break;
                      }
                      while (1)
                      {
                        v35 = v28;
                        v36 = v27[1];
                        v27 = v29;
                        v37 = v32;
                        v32 = v30;
                        v28 = (double *)*((_QWORD *)v28 + 2);
                        v29 = *(double **)v28;
                        v30 = **(double **)v28;
                        v38 = (*(double *)(*(_QWORD *)v28 + 8) - v36) * (v32 - v30)
                            + (v31 - *(double *)(*(_QWORD *)v28 + 8)) * (v37 - v30);
                        v39 = v38 >= 1.0e-12 || v38 <= -1.0e-12;
                        if (v39 && v38 > 0.0)
                          break;
                        v40 = (*(double *)&v17[2].v - *(double *)&v10[1][2].v) * (v32 - v18)
                            + (v31 - *(double *)&v17[2].v) * (*(double *)&v10[1]->v - v18);
                        if (v40 >= 1.0e-12 || v40 <= -1.0e-12)
                        {
                          v24 = v40 <= 0.0;
                          v31 = *(double *)(*(_QWORD *)v28 + 8);
                          v26 = v35;
                          if (!v24)
                            continue;
                        }
                        goto LABEL_25;
                      }
                      do
                      {
                        v42 = (Point **)operator new();
                        p2t::Triangle::Triangle((uint64_t)v42, **((Point ***)v35 + 3), *(Point **)v35, **((Point ***)v35 + 2));
                        p2t::Triangle::MarkNeighbor(v42, *(p2t::Triangle **)(*((_QWORD *)v35 + 3) + 8), v43);
                        p2t::Triangle::MarkNeighbor(v42, *((p2t::Triangle **)v35 + 1), v44);
                        p2t::SweepContext::AddToMap(a2, (uint64_t)v42);
                        v45 = *((_QWORD *)v35 + 3);
                        *(double *)(v45 + 16) = v35[2];
                        *(_QWORD *)(*((_QWORD *)v35 + 2) + 24) = v45;
                        if ((p2t::Sweep::Legalize(this, a2, (p2t::Triangle *)v42) & 1) == 0)
                          p2t::SweepContext::MapTriangleToNodes((uint64_t)a2, v42, v46);
                        v35 = (double *)*((_QWORD *)v26 + 2);
                        v47 = *(Point **)v35;
                        v17 = *v10;
                        v18 = *(double *)&(*v10)->v;
                        if (*(Point **)v35 == *v10)
                          break;
                        v48 = *(double *)&v47[2].v;
                        v49 = (v18 - *(double *)&v47->v) * (*(double *)&v10[1][2].v - *(double *)&v17[2].v)
                            + (v48 - *(double *)&v17[2].v) * (*(double *)&v10[1]->v - v18);
                        v50 = v49 >= 1.0e-12 || v49 <= -1.0e-12;
                        if (!v50 || v49 <= 0.0)
                          break;
                        v51 = (*(double *)(**((_QWORD **)v35 + 2) + 8) - *(double *)(*(_QWORD *)v26 + 8))
                            * (*(double *)&v47->v - ***((double ***)v35 + 2))
                            + (v48 - *(double *)(**((_QWORD **)v35 + 2) + 8))
                            * (**(double **)v26 - ***((double ***)v35 + 2));
                        v52 = v51 >= 1.0e-12 || v51 <= -1.0e-12;
                      }
                      while (v52 && v51 > 0.0);
                    }
                    v19 = v22;
                  }
                  v22 = v19;
                  v19 = (double **)v19[2];
                  v20 = *v19;
                  v21 = **v19;
                }
                while (v21 < v18);
              }
            }
            else
            {
              v64 = (double **)v6[3];
              v65 = *v64;
              v66 = **v64;
              if (v66 > v18)
              {
                v67 = v6;
                do
                {
                  v68 = (*(double *)&v17[2].v - *(double *)&v10[1][2].v) * (v66 - v18)
                      + (v65[1] - *(double *)&v17[2].v) * (*(double *)&v10[1]->v - v18);
                  v69 = v68 >= 1.0e-12 || v68 <= -1.0e-12;
                  if (v69 && v68 <= 0.0)
                  {
                    while (1)
                    {
                      v70 = **v67;
LABEL_89:
                      if (v70 <= v18)
                        break;
                      v71 = v67[3];
                      v72 = *(double **)v71;
                      v73 = (double *)*((_QWORD *)v71 + 3);
                      v74 = *(double **)v73;
                      v75 = **(double **)v73;
                      v76 = *(double *)(*(_QWORD *)v73 + 8);
                      v77 = **(double **)v71;
                      v78 = (v75 - v77) * ((*v67)[1] - v76) + (*(double *)(*(_QWORD *)v71 + 8) - v76) * (v70 - v75);
                      v79 = v78 >= 1.0e-12 || v78 <= -1.0e-12;
                      if (v79 && v78 <= 0.0)
                      {
                        do
                        {
                          v98 = (Point **)operator new();
                          p2t::Triangle::Triangle((uint64_t)v98, **((Point ***)v71 + 3), *(Point **)v71, **((Point ***)v71 + 2));
                          p2t::Triangle::MarkNeighbor(v98, *(p2t::Triangle **)(*((_QWORD *)v71 + 3) + 8), v99);
                          p2t::Triangle::MarkNeighbor(v98, *((p2t::Triangle **)v71 + 1), v100);
                          p2t::SweepContext::AddToMap(a2, (uint64_t)v98);
                          v101 = *((_QWORD *)v71 + 3);
                          *(double *)(v101 + 16) = v71[2];
                          *(_QWORD *)(*((_QWORD *)v71 + 2) + 24) = v101;
                          if ((p2t::Sweep::Legalize(this, a2, (p2t::Triangle *)v98) & 1) == 0)
                            p2t::SweepContext::MapTriangleToNodes((uint64_t)a2, v98, v102);
                          v71 = v67[3];
                          v103 = *(Point **)v71;
                          v17 = *v10;
                          v18 = *(double *)&(*v10)->v;
                          if (*(Point **)v71 == *v10)
                            break;
                          v104 = *(double *)&v103[2].v;
                          v105 = (v18 - *(double *)&v103->v) * (*(double *)&v10[1][2].v - *(double *)&v17[2].v)
                               + (v104 - *(double *)&v17[2].v) * (*(double *)&v10[1]->v - v18);
                          v106 = v105 >= 1.0e-12 || v105 <= -1.0e-12;
                          if (!v106 || v105 > 0.0)
                            break;
                          v107 = (*(double *)(**((_QWORD **)v71 + 3) + 8) - (*v67)[1])
                               * (*(double *)&v103->v - ***((double ***)v71 + 3))
                               + (v104 - *(double *)(**((_QWORD **)v71 + 3) + 8)) * (**v67 - ***((double ***)v71 + 3));
                          v108 = v107 >= 1.0e-12 || v107 <= -1.0e-12;
                        }
                        while (v108 && v107 <= 0.0);
                        break;
                      }
                      while (1)
                      {
                        v80 = v73;
                        v81 = v72[1];
                        v72 = v74;
                        v82 = v77;
                        v77 = v75;
                        v73 = (double *)*((_QWORD *)v73 + 3);
                        v74 = *(double **)v73;
                        v75 = **(double **)v73;
                        v83 = (*(double *)(*(_QWORD *)v73 + 8) - v81) * (v77 - v75)
                            + (v76 - *(double *)(*(_QWORD *)v73 + 8)) * (v82 - v75);
                        v84 = v83 >= 1.0e-12 || v83 <= -1.0e-12;
                        if (v84 && v83 <= 0.0)
                          break;
                        v85 = (*(double *)&v17[2].v - *(double *)&v10[1][2].v) * (v77 - v18)
                            + (v76 - *(double *)&v17[2].v) * (*(double *)&v10[1]->v - v18);
                        if (v85 >= 1.0e-12 || v85 <= -1.0e-12)
                        {
                          v24 = v85 <= 0.0;
                          v76 = *(double *)(*(_QWORD *)v73 + 8);
                          v71 = v80;
                          if (v24)
                            continue;
                        }
                        goto LABEL_89;
                      }
                      do
                      {
                        v87 = (Point **)operator new();
                        p2t::Triangle::Triangle((uint64_t)v87, **((Point ***)v80 + 3), *(Point **)v80, **((Point ***)v80 + 2));
                        p2t::Triangle::MarkNeighbor(v87, *(p2t::Triangle **)(*((_QWORD *)v80 + 3) + 8), v88);
                        p2t::Triangle::MarkNeighbor(v87, *((p2t::Triangle **)v80 + 1), v89);
                        p2t::SweepContext::AddToMap(a2, (uint64_t)v87);
                        v90 = *((_QWORD *)v80 + 3);
                        *(double *)(v90 + 16) = v80[2];
                        *(_QWORD *)(*((_QWORD *)v80 + 2) + 24) = v90;
                        if ((p2t::Sweep::Legalize(this, a2, (p2t::Triangle *)v87) & 1) == 0)
                          p2t::SweepContext::MapTriangleToNodes((uint64_t)a2, v87, v91);
                        v80 = (double *)*((_QWORD *)v71 + 3);
                        v92 = *(Point **)v80;
                        v17 = *v10;
                        v18 = *(double *)&(*v10)->v;
                        if (*(Point **)v80 == *v10)
                          break;
                        v93 = *(double *)&v92[2].v;
                        v94 = (v18 - *(double *)&v92->v) * (*(double *)&v10[1][2].v - *(double *)&v17[2].v)
                            + (v93 - *(double *)&v17[2].v) * (*(double *)&v10[1]->v - v18);
                        v95 = v94 >= 1.0e-12 || v94 <= -1.0e-12;
                        if (!v95 || v94 > 0.0)
                          break;
                        v96 = (*(double *)(**((_QWORD **)v80 + 3) + 8) - *(double *)(*(_QWORD *)v71 + 8))
                            * (*(double *)&v92->v - ***((double ***)v80 + 3))
                            + (v93 - *(double *)(**((_QWORD **)v80 + 3) + 8))
                            * (**(double **)v71 - ***((double ***)v80 + 3));
                        v97 = v96 >= 1.0e-12 || v96 <= -1.0e-12;
                      }
                      while (v97 && v96 <= 0.0);
                    }
                    v64 = v67;
                  }
                  v67 = v64;
                  v64 = (double **)v64[3];
                  v65 = *v64;
                  v66 = **v64;
                }
                while (v66 > v18);
              }
            }
            p2t::Sweep::EdgeEvent(this, a2, v17, (float64x2_t *)v10[1], (p2t::Triangle *)v6[1], v10[1]);
          }
          else
          {
            v15 = v14;
            p2t::Triangle::MarkConstrainedEdge((uint64_t)v13, v14);
            v16 = *((_QWORD *)v13 + v15 + 4);
            if (v16)
              p2t::Triangle::MarkConstrainedEdge(v16, v11, v12);
          }
          v7 = *(_QWORD *)(Point + 16);
          v8 = ++v9;
        }
        while (v9 < (unint64_t)((*(_QWORD *)(Point + 24) - v7) >> 3));
      }
      ++v109;
    }
    while (v109 < (int)((*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 3));
  }
}

void sub_227BB1D80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2A50A0](v1, 0x1020C403BE5E226);
  _Unwind_Resume(a1);
}

void p2t::Sweep::FinalizationPolygon(p2t::Sweep *this, p2t::SweepContext *a2)
{
  uint64_t v3;
  p2t::Triangle *v4;
  Point *v5;

  v3 = *(_QWORD *)(**((_QWORD **)a2 + 19) + 16);
  v5 = *(Point **)v3;
  v4 = *(p2t::Triangle **)(v3 + 8);
  if ((p2t::Triangle::GetConstrainedEdgeCW((Point **)v4, *(Point **)v3) & 1) == 0)
  {
    do
      v4 = (p2t::Triangle *)p2t::Triangle::NeighborCCW(v4, v5);
    while (!p2t::Triangle::GetConstrainedEdgeCW((Point **)v4, v5));
  }
  p2t::SweepContext::MeshClean(a2, v4);
}

_QWORD *p2t::Sweep::PointEvent(p2t::Sweep *this, p2t::AdvancingFront **a2, Point *a3)
{
  double **Node;
  _QWORD *v7;

  Node = (double **)p2t::SweepContext::LocateNode(a2, a3);
  v7 = p2t::Sweep::NewFrontTriangle(this, (p2t::SweepContext *)a2, a3, (uint64_t)Node);
  if (*(double *)&a3->v <= **Node + 1.0e-12)
    p2t::Sweep::Fill(this, (p2t::SweepContext *)a2, (uint64_t)Node);
  p2t::Sweep::FillAdvancingFront((uint64_t)this, (p2t::SweepContext *)a2, v7);
  return v7;
}

uint64_t p2t::Sweep::EdgeEvent(p2t::Sweep *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double *v8;
  Point *v9;
  p2t::Triangle *v10;
  int v11;
  int v12;
  uint64_t result;

  *(_QWORD *)(a2 + 64) = a3;
  v8 = *(double **)a3;
  v9 = *(Point **)(a3 + 8);
  *(_BYTE *)(a2 + 72) = **(double **)a3 > *(double *)&v9->v;
  v10 = *(p2t::Triangle **)(a4 + 8);
  v11 = p2t::Triangle::EdgeIndex(v10, (const Point *)v8, v9);
  if (v11 == -1)
  {
    p2t::Sweep::FillEdgeEvent((uint64_t)a1, (p2t::SweepContext *)a2, (double **)a3, a4);
    return p2t::Sweep::EdgeEvent(a1, (p2t::SweepContext *)a2, *(Point **)a3, *(float64x2_t **)(a3 + 8), *(p2t::Triangle **)(a4 + 8), *(Point **)(a3 + 8));
  }
  else
  {
    v12 = v11;
    p2t::Triangle::MarkConstrainedEdge((uint64_t)v10, v11);
    result = *((_QWORD *)v10 + v12 + 4);
    if (result)
      return p2t::Triangle::MarkConstrainedEdge(result, (Point *)v8, v9);
  }
  return result;
}

_QWORD *p2t::Sweep::NewFrontTriangle(p2t::Sweep *a1, p2t::SweepContext *a2, Point *a3, uint64_t a4)
{
  Point **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v8 = (Point **)operator new();
  p2t::Triangle::Triangle((uint64_t)v8, a3, *(Point **)a4, **(Point ***)(a4 + 16));
  p2t::Triangle::MarkNeighbor(v8, *(p2t::Triangle **)(a4 + 8), v9);
  p2t::SweepContext::AddToMap(a2, (uint64_t)v8);
  v10 = (_QWORD *)operator new();
  v11 = v10;
  *v10 = a3;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = *(_QWORD *)&a3->v;
  v13 = (char *)*((_QWORD *)a1 + 1);
  v12 = *((_QWORD *)a1 + 2);
  if ((unint64_t)v13 < v12)
  {
    *(_QWORD *)v13 = v10;
    v14 = (uint64_t)(v13 + 8);
    goto LABEL_23;
  }
  v15 = *(char **)a1;
  v16 = (uint64_t)&v13[-*(_QWORD *)a1];
  v17 = v16 >> 3;
  v18 = (v16 >> 3) + 1;
  if (v18 >> 61)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v19 = v12 - (_QWORD)v15;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v21 = operator new(8 * v20);
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    *v22 = v11;
    v14 = (uint64_t)(v22 + 1);
    v24 = (char *)(v13 - v15);
    if (v13 == v15)
      goto LABEL_21;
    goto LABEL_14;
  }
  v21 = 0;
  v22 = (_QWORD *)(8 * v17);
  v23 = 0;
  *(_QWORD *)(8 * v17) = v11;
  v14 = 8 * v17 + 8;
  v24 = (char *)(v13 - v15);
  if (v13 != v15)
  {
LABEL_14:
    v25 = (unint64_t)(v24 - 8);
    if (v25 < 0x58)
      goto LABEL_30;
    if ((unint64_t)(v13 - v21 - v16) < 0x20)
      goto LABEL_30;
    v26 = (v25 >> 3) + 1;
    v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
    v28 = &v13[-v27];
    v22 = (_QWORD *)((char *)v22 - v27);
    v29 = &v21[8 * v17 - 16];
    v30 = v13 - 16;
    v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v32 = *(_OWORD *)v30;
      *(v29 - 1) = *((_OWORD *)v30 - 1);
      *v29 = v32;
      v29 -= 2;
      v30 -= 32;
      v31 -= 4;
    }
    while (v31);
    v13 = v28;
    if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_30:
      do
      {
        v33 = *((_QWORD *)v13 - 1);
        v13 -= 8;
        *--v22 = v33;
      }
      while (v13 != v15);
    }
    v13 = *(char **)a1;
  }
LABEL_21:
  *(_QWORD *)a1 = v22;
  *((_QWORD *)a1 + 1) = v14;
  *((_QWORD *)a1 + 2) = v23;
  if (v13)
    operator delete(v13);
LABEL_23:
  *((_QWORD *)a1 + 1) = v14;
  v34 = *(_QWORD *)(a4 + 16);
  v11[2] = v34;
  v11[3] = a4;
  *(_QWORD *)(v34 + 24) = v11;
  *(_QWORD *)(a4 + 16) = v11;
  if ((p2t::Sweep::Legalize(a1, a2, (p2t::Triangle *)v8) & 1) == 0)
    p2t::SweepContext::MapTriangleToNodes((uint64_t)a2, v8, v35);
  return v11;
}

void sub_227BB21D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2A50A0](v1, 0x1020C403BE5E226);
  _Unwind_Resume(a1);
}

uint64_t p2t::Sweep::Fill(p2t::Sweep *a1, p2t::SweepContext *a2, uint64_t a3)
{
  p2t::Triangle *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v6 = (p2t::Triangle *)operator new();
  p2t::Triangle::Triangle((uint64_t)v6, **(Point ***)(a3 + 24), *(Point **)a3, **(Point ***)(a3 + 16));
  p2t::Triangle::MarkNeighbor(v6, *(p2t::Triangle **)(*(_QWORD *)(a3 + 24) + 8), v7);
  p2t::Triangle::MarkNeighbor(v6, *(p2t::Triangle **)(a3 + 8), v8);
  p2t::SweepContext::AddToMap(a2, (uint64_t)v6);
  v9 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(*(_QWORD *)(a3 + 16) + 24) = v9;
  result = p2t::Sweep::Legalize(a1, a2, v6);
  if ((result & 1) == 0)
    return p2t::SweepContext::MapTriangleToNodes((uint64_t)a2, (Point **)v6, v11);
  return result;
}

void sub_227BB22BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2A50A0](v1, 0x1020C403BE5E226);
  _Unwind_Resume(a1);
}

void p2t::Sweep::FillAdvancingFront(uint64_t a1, p2t::SweepContext *a2, _QWORD *a3)
{
  p2t::Sweep *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = (p2t::Sweep *)a1;
  v6 = a3[2];
  v7 = (uint64_t *)(v6 + 16);
  if (*(_QWORD *)(v6 + 16))
  {
    do
    {
      a1 = p2t::Sweep::LargeHole_DontFill(a1, v6);
      if ((a1 & 1) != 0)
        break;
      a1 = p2t::Sweep::Fill(v5, a2, v6);
      v6 = *v7;
      v8 = *v7;
      v9 = *(_QWORD *)(v8 + 16);
      v7 = (uint64_t *)(v8 + 16);
    }
    while (v9);
  }
  v10 = a3[3];
  v11 = (uint64_t *)(v10 + 24);
  if (*(_QWORD *)(v10 + 24))
  {
    do
    {
      if (p2t::Sweep::LargeHole_DontFill(a1, v10))
        break;
      a1 = p2t::Sweep::Fill(v5, a2, v10);
      v10 = *v11;
      v12 = *v11;
      v13 = *(_QWORD *)(v12 + 24);
      v11 = (uint64_t *)(v12 + 24);
    }
    while (v13);
  }
  v14 = a3[2];
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      if (atan2(*(double *)(*a3 + 8) - *(double *)(*(_QWORD *)v15 + 8), *(double *)*a3 - **(double **)v15) < 2.35619449)
        p2t::Sweep::FillBasin((uint64_t)v5, (uint64_t)a2, (uint64_t)a3);
    }
  }
}

BOOL p2t::Sweep::IsEdgeSideOfTriangle(p2t::Sweep *this, p2t::Triangle *a2, Point *a3, Point *a4)
{
  int v7;
  uint64_t v8;

  v7 = p2t::Triangle::EdgeIndex(a2, a3, a4);
  if (v7 != -1)
  {
    p2t::Triangle::MarkConstrainedEdge((uint64_t)a2, v7);
    v8 = *((_QWORD *)a2 + v7 + 4);
    if (v8)
      p2t::Triangle::MarkConstrainedEdge(v8, a3, a4);
  }
  return v7 != -1;
}

uint64_t p2t::Sweep::FillEdgeEvent(uint64_t result, p2t::SweepContext *a2, double **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  double *v8;
  double v9;
  uint64_t v10;
  double *v11;
  double i;
  double v13;
  uint64_t v15;
  double *v16;
  double j;
  double v18;
  BOOL v19;

  v4 = a4;
  v7 = result;
  v8 = *a3;
  v9 = **a3;
  if (*((_BYTE *)a2 + 72))
  {
    v10 = *(_QWORD *)(a4 + 16);
    v11 = *(double **)v10;
    for (i = **(double **)v10; i < v9; i = **(double **)v10)
    {
      v13 = (v8[1] - a3[1][1]) * (i - v9) + (v11[1] - v8[1]) * (*a3[1] - v9);
      if ((v13 >= 1.0e-12 || v13 <= -1.0e-12) && v13 > 0.0)
      {
        result = p2t::Sweep::FillRightBelowEdgeEvent(v7, a2, a3, v4);
        v8 = *a3;
        v9 = **a3;
        v10 = v4;
      }
      v4 = v10;
      v10 = *(_QWORD *)(v10 + 16);
      v11 = *(double **)v10;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    v16 = *(double **)v15;
    for (j = **(double **)v15; j > v9; j = **(double **)v15)
    {
      v18 = (v8[1] - a3[1][1]) * (j - v9) + (v16[1] - v8[1]) * (*a3[1] - v9);
      v19 = v18 >= 1.0e-12 || v18 <= -1.0e-12;
      if (v19 && v18 <= 0.0)
      {
        result = p2t::Sweep::FillLeftBelowEdgeEvent(v7, a2, a3, v4);
        v8 = *a3;
        v9 = **a3;
        v15 = v4;
      }
      v4 = v15;
      v15 = *(_QWORD *)(v15 + 24);
      v16 = *(double **)v15;
    }
  }
  return result;
}

uint64_t p2t::Sweep::EdgeEvent(p2t::Sweep *this, p2t::SweepContext *a2, Point *a3, float64x2_t *a4, p2t::Triangle *a5, Point *a6)
{
  p2t::Triangle *v7;
  float64x2_t *v8;
  int v12;
  int v13;
  Point *v14;
  uint64_t result;
  Point *v16;
  uint64_t v17;
  int8x16_t v18;
  float64x2_t v19;
  double v20;
  Point *v21;
  int8x16_t v22;
  float64x2_t v23;
  double v24;
  float64x2_t *v25;
  float64x2_t *v26;
  double v27;
  _BYTE v28[16];
  _BYTE v29[16];

  v7 = a5;
  v8 = a4;
  v12 = p2t::Triangle::EdgeIndex(a5, a3, (const Point *)a4);
  if (v12 == -1)
  {
    while (1)
    {
      v16 = p2t::Triangle::PointCCW(v7, a6);
      v18 = (int8x16_t)vsubq_f64(*(float64x2_t *)&v16->v, *(float64x2_t *)&a3->v);
      v19 = vmulq_f64((float64x2_t)vextq_s8(v18, v18, 8uLL), vsubq_f64(*v8, *(float64x2_t *)&a3->v));
      v20 = vsubq_f64(v19, (float64x2_t)vdupq_laneq_s64((int64x2_t)v19, 1)).f64[0];
      if (v20 > -1.0e-12 && v20 < 1.0e-12)
        break;
      v27 = v20;
      v21 = p2t::Triangle::PointCW(v7, a6, v17);
      v22 = (int8x16_t)vsubq_f64(*(float64x2_t *)&v21->v, *(float64x2_t *)&a3->v);
      v23 = vmulq_f64((float64x2_t)vextq_s8(v22, v22, 8uLL), vsubq_f64(*v8, *(float64x2_t *)&a3->v));
      v24 = vsubq_f64(v23, (float64x2_t)vdupq_laneq_s64((int64x2_t)v23, 1)).f64[0];
      if (v24 > -1.0e-12 && v24 < 1.0e-12)
      {
        v14 = v21;
        v26 = (float64x2_t *)*((_QWORD *)v7 + 1);
        if (v26 != v8 && *((float64x2_t **)v7 + 2) != v8 && *((float64x2_t **)v7 + 3) != v8
          || v26 != (float64x2_t *)v21 && *((Point **)v7 + 2) != v21 && *((Point **)v7 + 3) != v21)
        {
          p2t::Sweep::EdgeEvent((uint64_t)v28);
        }
LABEL_28:
        p2t::Triangle::MarkConstrainedEdge((uint64_t)v7, (Point *)v8, v14);
        *(_QWORD *)(*((_QWORD *)a2 + 8) + 8) = v14;
        v7 = (p2t::Triangle *)p2t::Triangle::NeighborAcross(v7, a6);
        v13 = p2t::Triangle::EdgeIndex(v7, a3, v14);
        a6 = v14;
        v8 = (float64x2_t *)v14;
        if (v13 != -1)
          goto LABEL_3;
      }
      else
      {
        if (v27 > 0.0 == v24 <= 0.0)
          return p2t::Sweep::FlipEdgeEvent(this, a2, a3, (Point *)v8, v7, a6);
        if (v27 > 0.0)
        {
          v7 = (p2t::Triangle *)p2t::Triangle::NeighborCW(v7, a6);
          v12 = p2t::Triangle::EdgeIndex(v7, a3, (const Point *)v8);
          if (v12 != -1)
            goto LABEL_2;
        }
        else
        {
          v7 = (p2t::Triangle *)p2t::Triangle::NeighborCCW(v7, a6);
          v12 = p2t::Triangle::EdgeIndex(v7, a3, (const Point *)v8);
          if (v12 != -1)
            goto LABEL_2;
        }
      }
    }
    v14 = v16;
    v25 = (float64x2_t *)*((_QWORD *)v7 + 1);
    if (v25 != v8 && *((float64x2_t **)v7 + 2) != v8 && *((float64x2_t **)v7 + 3) != v8
      || v25 != (float64x2_t *)v16 && *((Point **)v7 + 2) != v16 && *((Point **)v7 + 3) != v16)
    {
      p2t::Sweep::EdgeEvent((uint64_t)v29);
    }
    goto LABEL_28;
  }
LABEL_2:
  v13 = v12;
  v14 = (Point *)v8;
LABEL_3:
  p2t::Triangle::MarkConstrainedEdge((uint64_t)v7, v13);
  result = *((_QWORD *)v7 + v13 + 4);
  if (result)
    return p2t::Triangle::MarkConstrainedEdge(result, a3, v14);
  return result;
}

uint64_t p2t::Sweep::FlipEdgeEvent(p2t::Sweep *this, p2t::SweepContext *a2, Point *a3, Point *a4, p2t::Triangle *a5, Point *a6)
{
  p2t::Triangle *v7;
  p2t::Triangle *v12;
  Point *v13;
  Point *v14;
  double v15;
  _BOOL4 v16;
  _BOOL4 v17;
  p2t::Triangle *v18;
  double *v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double **v36;
  double *v37;
  double *v39;
  double v41;
  int v42;
  Point *v44;

  v7 = a5;
  v12 = (p2t::Triangle *)p2t::Triangle::NeighborAcross(a5, a6);
  v13 = p2t::Triangle::OppositePoint(v12, v7, a6);
  if (!v13)
LABEL_38:
    p2t::Sweep::FlipEdgeEvent();
  v14 = v13;
  while (1)
  {
    v19 = (double *)p2t::Triangle::PointCCW(v7, a6);
    v21 = (double *)p2t::Triangle::PointCW(v7, a6, v20);
    v24 = *(double *)&a6[2].v;
    v25 = *(double *)&v14->v;
    v26 = *(double *)&v14[2].v;
    if ((v19[1] - v24) * (*(double *)&v14->v - *v19) + (v26 - v19[1]) * (*(double *)&a6->v - *v19) >= -1.0e-12
      || (v21[1] - v24) * (v25 - *v21) + (v26 - v21[1]) * (*(double *)&a6->v - *v21) <= 1.0e-12)
    {
      break;
    }
    p2t::Sweep::RotateTrianglePair((p2t::Sweep *)v21, v7, a6, v12, v14);
    p2t::SweepContext::MapTriangleToNodes((uint64_t)a2, (Point **)v7, v27);
    result = p2t::SweepContext::MapTriangleToNodes((uint64_t)a2, (Point **)v12, v28);
    v31 = *(double *)&a4->v;
    v30 = *(double *)&a4[2].v;
    v32 = *(double *)&a3->v;
    v33 = *(double *)&a3[2].v;
    v34 = *(double *)&v14->v;
    v35 = *(double *)&v14[2].v;
    if (*(double *)&a6->v == *(double *)&a4->v && *(double *)&a6[2].v == v30 && v34 == v32 && v35 == v33)
    {
      v36 = (double **)*((_QWORD *)a2 + 8);
      v37 = v36[1];
      if (v31 == *v37 && v30 == v37[1])
      {
        v39 = *v36;
        if (v32 == *v39 && v33 == v39[1])
        {
          p2t::Triangle::MarkConstrainedEdge((uint64_t)v7, a3, a4);
          p2t::Triangle::MarkConstrainedEdge((uint64_t)v12, a3, a4);
          p2t::Sweep::Legalize(this, a2, v7);
          return p2t::Sweep::Legalize(this, a2, v12);
        }
      }
      return result;
    }
    v15 = (v32 - v34) * (v30 - v33) + (v35 - v33) * (v31 - v32);
    v16 = v15 <= -1.0e-12;
    if (v15 >= 1.0e-12)
      v16 = 1;
    v17 = v15 > 0.0;
    if (v16 && v17)
      v18 = v12;
    else
      v18 = v7;
    if (!v16 || !v17)
      v7 = v12;
    *((_BYTE *)v18 + (int)p2t::Triangle::EdgeIndex(v18, a6, v14) + 3) = 1;
    p2t::Sweep::Legalize(this, a2, v18);
    p2t::Triangle::ClearDelunayEdges((uint64_t)v18);
    v12 = (p2t::Triangle *)p2t::Triangle::NeighborAcross(v7, a6);
    v14 = p2t::Triangle::OppositePoint(v12, v7, a6);
    if (!v14)
      goto LABEL_38;
  }
  v41 = (*(double *)&a3[2].v - *(double *)&a4[2].v) * (v25 - *(double *)&a3->v)
      + (v26 - *(double *)&a3[2].v) * (*(double *)&a4->v - *(double *)&a3->v);
  v42 = v41 > 0.0;
  if (v41 < 1.0e-12 && v41 > -1.0e-12)
    v42 = 2;
  if (v42 == 1)
  {
    v44 = p2t::Triangle::PointCW(v12, v14, v23);
  }
  else
  {
    if (v42)
      p2t::Sweep::FlipEdgeEvent((uint64_t)v21, v22, v23);
    v44 = p2t::Triangle::PointCCW(v12, v14);
  }
  p2t::Sweep::FlipScanEdgeEvent(this, a2, a3, a4, v7, v12, v44);
  return p2t::Sweep::EdgeEvent(this, a2, a3, a4, v7, a6);
}

uint64_t p2t::Sweep::Legalize(p2t::Sweep *this, p2t::SweepContext *a2, p2t::Triangle *a3)
{
  _BYTE *v6;
  const Point **v7;
  uint64_t v8;
  Point *v9;
  int v10;
  _BYTE *v11;
  int v12;
  uint64_t result;
  int v14;
  char v15;
  double *v16;
  uint64_t v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double *v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double *v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;

  v6 = (char *)a3 + 3;
  if (!*((_BYTE *)a3 + 3))
  {
    v7 = (const Point **)*((_QWORD *)a3 + 4);
    if (v7)
    {
      v8 = *((_QWORD *)a3 + 1);
      v9 = p2t::Triangle::OppositePoint(*((p2t::Triangle **)a3 + 4), a3, (Point *)v8);
      v10 = p2t::Triangle::Index(v7, v9);
      if (*((_BYTE *)v7 + v10) || (v11 = (char *)v7 + v10 + 3, *v11))
      {
        *(_BYTE *)a3 = *((_BYTE *)v7 + v10);
      }
      else
      {
        v16 = (double *)p2t::Triangle::PointCCW(a3, (Point *)v8);
        v18 = (double *)p2t::Triangle::PointCW(a3, (Point *)v8, v17);
        v19 = *(double *)&v9[2].v;
        v20 = *(double *)v8 - *(double *)&v9->v;
        v21 = *(double *)(v8 + 8) - v19;
        v22 = *v16 - *(double *)&v9->v;
        v23 = v16[1] - v19;
        v24 = -(v22 * v21 - v23 * v20);
        if (v24 > 0.0)
        {
          v25 = *v18 - *(double *)&v9->v;
          v26 = v18[1] - v19;
          v27 = -(v26 * v20 - v25 * v21);
          if (v27 > 0.0
            && v27 * (v22 * v22 + v23 * v23)
             + -(v25 * v23 - v26 * v22) * (v20 * v20 + v21 * v21)
             + (v25 * v25 + v26 * v26) * v24 > 0.0)
          {
            goto LABEL_28;
          }
        }
      }
    }
  }
  v6 = (char *)a3 + 4;
  if (!*((_BYTE *)a3 + 4))
  {
    v7 = (const Point **)*((_QWORD *)a3 + 5);
    if (v7)
    {
      v8 = *((_QWORD *)a3 + 2);
      v9 = p2t::Triangle::OppositePoint(*((p2t::Triangle **)a3 + 5), a3, (Point *)v8);
      v12 = p2t::Triangle::Index(v7, v9);
      if (*((_BYTE *)v7 + v12) || (v11 = (char *)v7 + v12 + 3, *v11))
      {
        *((_BYTE *)a3 + 1) = *((_BYTE *)v7 + v12);
      }
      else
      {
        v28 = (double *)p2t::Triangle::PointCCW(a3, (Point *)v8);
        v18 = (double *)p2t::Triangle::PointCW(a3, (Point *)v8, v29);
        v30 = *(double *)&v9[2].v;
        v31 = *(double *)v8 - *(double *)&v9->v;
        v32 = *(double *)(v8 + 8) - v30;
        v33 = *v28 - *(double *)&v9->v;
        v34 = v28[1] - v30;
        v35 = -(v33 * v32 - v34 * v31);
        if (v35 > 0.0)
        {
          v36 = *v18 - *(double *)&v9->v;
          v37 = v18[1] - v30;
          v38 = -(v37 * v31 - v36 * v32);
          if (v38 > 0.0
            && v38 * (v33 * v33 + v34 * v34)
             + -(v36 * v34 - v37 * v33) * (v31 * v31 + v32 * v32)
             + (v36 * v36 + v37 * v37) * v35 > 0.0)
          {
            goto LABEL_28;
          }
        }
      }
    }
  }
  v6 = (char *)a3 + 5;
  if (*((_BYTE *)a3 + 5))
    return 0;
  v7 = (const Point **)*((_QWORD *)a3 + 6);
  if (!v7)
    return 0;
  v8 = *((_QWORD *)a3 + 3);
  v9 = p2t::Triangle::OppositePoint(*((p2t::Triangle **)a3 + 6), a3, (Point *)v8);
  v14 = p2t::Triangle::Index(v7, v9);
  v15 = *((_BYTE *)v7 + v14);
  if (v15 || (v11 = (char *)v7 + v14 + 3, *v11))
  {
    result = 0;
    *((_BYTE *)a3 + 2) = v15;
    return result;
  }
  v39 = (double *)p2t::Triangle::PointCCW(a3, (Point *)v8);
  v18 = (double *)p2t::Triangle::PointCW(a3, (Point *)v8, v40);
  v41 = *(double *)&v9[2].v;
  v42 = *(double *)v8 - *(double *)&v9->v;
  v43 = *(double *)(v8 + 8) - v41;
  v44 = *v39 - *(double *)&v9->v;
  v45 = v39[1] - v41;
  v46 = -(v44 * v43 - v45 * v42);
  if (v46 <= 0.0)
    return 0;
  v47 = *v18 - *(double *)&v9->v;
  v48 = v18[1] - v41;
  v49 = -(v48 * v42 - v47 * v43);
  if (v49 <= 0.0
    || v49 * (v44 * v44 + v45 * v45)
     + -(v47 * v45 - v48 * v44) * (v42 * v42 + v43 * v43)
     + (v47 * v47 + v48 * v48) * v46 <= 0.0)
  {
    return 0;
  }
LABEL_28:
  *v6 = 1;
  *v11 = 1;
  p2t::Sweep::RotateTrianglePair((p2t::Sweep *)v18, a3, (Point *)v8, (p2t::Triangle *)v7, v9);
  if ((p2t::Sweep::Legalize(this, a2, a3) & 1) == 0)
    p2t::SweepContext::MapTriangleToNodes((uint64_t)a2, (Point **)a3, v50);
  if ((p2t::Sweep::Legalize(this, a2, (p2t::Triangle *)v7) & 1) == 0)
    p2t::SweepContext::MapTriangleToNodes((uint64_t)a2, (Point **)v7, v51);
  *v6 = 0;
  *v11 = 0;
  return 1;
}

BOOL p2t::Sweep::LargeHole_DontFill(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  _BOOL8 result;

  v3 = *(_QWORD **)(a2 + 16);
  v2 = *(_QWORD **)(a2 + 24);
  v4 = **(double **)a2;
  v5 = *(double *)(*(_QWORD *)a2 + 8);
  v6 = *(double *)*v3 - v4;
  v7 = *(double *)(*v3 + 8) - v5;
  v8 = *(double *)*v2 - v4;
  v9 = *(double *)(*v2 + 8) - v5;
  v10 = atan2(-(v8 * v7 - v9 * v6), v8 * v6 + v9 * v7);
  result = 0;
  if (v10 > 1.57079633 || v10 < -1.57079633)
  {
    v11 = v3[2];
    if (!v11
      || (v12 = atan2(-((*(double *)(*(_QWORD *)v11 + 8) - v5) * v8 - (**(double **)v11 - v4) * v9), (**(double **)v11 - v4) * v8 + (*(double *)(*(_QWORD *)v11 + 8) - v5) * v9), v12 > 1.57079633)|| v12 < 0.0)
    {
      v13 = v2[3];
      if (!v13)
        return 1;
      v14 = atan2(-((**(double **)v13 - v4) * v7 - (*(double *)(*(_QWORD *)v13 + 8) - v5) * v6), (**(double **)v13 - v4) * v6 + (*(double *)(*(_QWORD *)v13 + 8) - v5) * v7);
      if (v14 > 1.57079633 || v14 < 0.0)
        return 1;
    }
  }
  return result;
}

double p2t::Sweep::BasinAngle(uint64_t a1, _QWORD *a2)
{
  double *v2;

  v2 = **(double ***)(a2[2] + 16);
  return atan2(*(double *)(*a2 + 8) - v2[1], *(double *)*a2 - *v2);
}

uint64_t p2t::Sweep::FillBasin(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  float64x2_t v4;
  float64x2_t v5;
  int8x16_t v6;
  float64x2_t v7;
  double v8;
  double **v11;
  double **v12;
  double ***v13;
  double ***v14;
  double **v15;
  double *v16;
  double *v17;
  double v18;
  double v19;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(float64x2_t *)**(_QWORD **)(v3 + 16);
  v5 = vsubq_f64(*(float64x2_t *)*(_QWORD *)a3, v4);
  v6 = (int8x16_t)vsubq_f64(*(float64x2_t *)*(_QWORD *)v3, v4);
  v7 = vmulq_f64((float64x2_t)vextq_s8(v6, v6, 8uLL), v5);
  v8 = vsubq_f64(v7, (float64x2_t)vdupq_laneq_s64((int64x2_t)v7, 1)).f64[0];
  if (v8 < 1.0e-12 && v8 > -1.0e-12 || v8 <= 0.0)
    v11 = *(double ***)(a3 + 16);
  else
    v11 = *(double ***)(v3 + 16);
  *(_QWORD *)(a2 + 24) = v11;
  v12 = v11;
  do
  {
    v13 = (double ***)v12;
    v12 = (double **)v12[2];
  }
  while (v12 && *((double *)*v13 + 1) >= (*v12)[1]);
  *(_QWORD *)(a2 + 32) = v13;
  if (v13 != (double ***)v11)
  {
    v14 = v13;
    do
    {
      v15 = (double **)v14;
      v14 = (double ***)v14[2];
    }
    while (v14 && (*v15)[1] < *((double *)*v14 + 1));
    *(_QWORD *)(a2 + 40) = v15;
    if (v15 != (double **)v13)
    {
      v16 = *v15;
      v17 = *v11;
      v18 = v17[1];
      v19 = v16[1];
      *(double *)(a2 + 48) = *v16 - *v17;
      *(_BYTE *)(a2 + 56) = v18 > v19;
      return p2t::Sweep::FillBasinReq(result, a2, v13);
    }
  }
  return result;
}

BOOL p2t::Sweep::AngleExceeds90Degrees(p2t::Sweep *this, Point *a2, Point *a3, Point *a4)
{
  double v4;
  double v5;

  v4 = *(double *)&a2[2].v;
  v5 = atan2(-((*(double *)&a4->v - *(double *)&a2->v) * (*(double *)&a3[2].v - v4)- (*(double *)&a4[2].v - v4) * (*(double *)&a3->v - *(double *)&a2->v)), (*(double *)&a4->v - *(double *)&a2->v) * (*(double *)&a3->v - *(double *)&a2->v)+ (*(double *)&a4[2].v - v4) * (*(double *)&a3[2].v - v4));
  return v5 < -1.57079633 || v5 > 1.57079633;
}

BOOL p2t::Sweep::AngleExceedsPlus90DegreesOrIsNegative(p2t::Sweep *this, Point *a2, Point *a3, Point *a4)
{
  double v4;
  double v5;

  v4 = *(double *)&a2[2].v;
  v5 = atan2(-((*(double *)&a4->v - *(double *)&a2->v) * (*(double *)&a3[2].v - v4)- (*(double *)&a4[2].v - v4) * (*(double *)&a3->v - *(double *)&a2->v)), (*(double *)&a4->v - *(double *)&a2->v) * (*(double *)&a3->v - *(double *)&a2->v)+ (*(double *)&a4[2].v - v4) * (*(double *)&a3[2].v - v4));
  return v5 < 0.0 || v5 > 1.57079633;
}

long double p2t::Sweep::Angle(p2t::Sweep *this, Point *a2, Point *a3, Point *a4)
{
  double v4;

  v4 = *(double *)&a2[2].v;
  return atan2(-((*(double *)&a4->v - *(double *)&a2->v) * (*(double *)&a3[2].v - v4)- (*(double *)&a4[2].v - v4) * (*(double *)&a3->v - *(double *)&a2->v)), (*(double *)&a4->v - *(double *)&a2->v) * (*(double *)&a3->v - *(double *)&a2->v)+ (*(double *)&a4[2].v - v4) * (*(double *)&a3[2].v - v4));
}

double p2t::Sweep::HoleAngle(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  double v4;
  double v5;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = **(double ***)(a2 + 16);
  v4 = **(double **)a2;
  v5 = *(double *)(*(_QWORD *)a2 + 8);
  return atan2(-((**(double **)v2 - v4) * (v3[1] - v5) - (*(double *)(*(_QWORD *)v2 + 8) - v5) * (*v3 - v4)), (**(double **)v2 - v4) * (*v3 - v4) + (*(double *)(*(_QWORD *)v2 + 8) - v5) * (v3[1] - v5));
}

BOOL p2t::Sweep::Incircle(p2t::Sweep *this, Point *a2, Point *a3, Point *a4, Point *a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  v5 = *(double *)&a5[2].v;
  v6 = *(double *)&a2->v - *(double *)&a5->v;
  v7 = *(double *)&a2[2].v - v5;
  v8 = *(double *)&a3->v - *(double *)&a5->v;
  v9 = *(double *)&a3[2].v - v5;
  v10 = -(v8 * v7 - v9 * v6);
  if (v10 <= 0.0)
    return 0;
  v11 = *(double *)&a4->v - *(double *)&a5->v;
  v12 = *(double *)&a4[2].v - v5;
  v13 = -(v12 * v6 - v11 * v7);
  return v13 > 0.0
      && v13 * (v8 * v8 + v9 * v9) + -(v11 * v9 - v12 * v8) * (v6 * v6 + v7 * v7) + (v11 * v11 + v12 * v12) * v10 > 0.0;
}

_QWORD *p2t::Sweep::RotateTrianglePair(p2t::Sweep *this, p2t::Triangle *a2, Point *a3, p2t::Triangle *a4, Point *a5)
{
  char ConstrainedEdgeCCW;
  char ConstrainedEdgeCW;
  char DelunayEdgeCCW;
  char DelunayEdgeCW;
  char v13;
  char v14;
  uint64_t v15;
  char v17;
  char v18;
  p2t::Triangle *v19;
  p2t::Triangle *v20;
  p2t::Triangle *v21;
  p2t::Triangle *v22;

  v19 = (p2t::Triangle *)p2t::Triangle::NeighborCCW(a2, a3);
  v20 = (p2t::Triangle *)p2t::Triangle::NeighborCW(a2, a3);
  v21 = (p2t::Triangle *)p2t::Triangle::NeighborCCW(a4, a5);
  v22 = (p2t::Triangle *)p2t::Triangle::NeighborCW(a4, a5);
  ConstrainedEdgeCCW = p2t::Triangle::GetConstrainedEdgeCCW((Point **)a2, a3);
  ConstrainedEdgeCW = p2t::Triangle::GetConstrainedEdgeCW((Point **)a2, a3);
  v18 = p2t::Triangle::GetConstrainedEdgeCCW((Point **)a4, a5);
  v17 = p2t::Triangle::GetConstrainedEdgeCW((Point **)a4, a5);
  DelunayEdgeCCW = p2t::Triangle::GetDelunayEdgeCCW((Point **)a2, a3);
  DelunayEdgeCW = p2t::Triangle::GetDelunayEdgeCW((Point **)a2, a3);
  v13 = p2t::Triangle::GetDelunayEdgeCCW((Point **)a4, a5);
  v14 = p2t::Triangle::GetDelunayEdgeCW((Point **)a4, a5);
  p2t::Triangle::Legalize(a2, a3, a5);
  p2t::Triangle::Legalize(a4, a5, a3);
  p2t::Triangle::SetDelunayEdgeCCW((uint64_t)a4, a3, DelunayEdgeCCW);
  p2t::Triangle::SetDelunayEdgeCW((uint64_t)a2, a3, DelunayEdgeCW);
  p2t::Triangle::SetDelunayEdgeCCW((uint64_t)a2, a5, v13);
  p2t::Triangle::SetDelunayEdgeCW((uint64_t)a4, a5, v14);
  p2t::Triangle::SetConstrainedEdgeCCW((uint64_t)a4, a3, ConstrainedEdgeCCW);
  p2t::Triangle::SetConstrainedEdgeCW((uint64_t)a2, a3, ConstrainedEdgeCW);
  p2t::Triangle::SetConstrainedEdgeCCW((uint64_t)a2, a5, v18);
  p2t::Triangle::SetConstrainedEdgeCW((uint64_t)a4, a5, v17);
  p2t::Triangle::ClearNeighbors(a2);
  p2t::Triangle::ClearNeighbors(a4);
  if (v19)
    p2t::Triangle::MarkNeighbor(a4, v19, v15);
  if (v20)
    p2t::Triangle::MarkNeighbor(a2, v20, v15);
  if (v21)
    p2t::Triangle::MarkNeighbor(a2, v21, v15);
  if (v22)
    p2t::Triangle::MarkNeighbor(a4, v22, v15);
  return p2t::Triangle::MarkNeighbor(a2, a4, v15);
}

uint64_t p2t::Sweep::FillBasinReq(uint64_t result, uint64_t a2, double ***a3)
{
  uint64_t v3;
  double ***v4;
  p2t::Sweep *v6;
  double **v7;
  double ***v8;
  double v9;
  double ***v10;
  double ***v11;
  double ***v12;
  double v13;
  double v15;
  BOOL v16;

  v3 = a2 + 24;
  if (!*(_BYTE *)(a2 + 56))
    v3 = a2 + 40;
  if (*(double *)(a2 + 48) <= *(double *)(**(_QWORD **)v3 + 8) - *((double *)*a3 + 1))
  {
    v4 = a3;
    v6 = (p2t::Sweep *)result;
    do
    {
      result = p2t::Sweep::Fill(v6, (p2t::SweepContext *)a2, (uint64_t)v4);
      v10 = *(double ****)(a2 + 24);
      v8 = (double ***)v4[2];
      v11 = (double ***)v4[3];
      v12 = *(double ****)(a2 + 40);
      if (v11 == v10)
      {
        if (v8 == v12)
          return result;
        v9 = *((double *)*v8 + 1);
        v15 = (**v8[2] - *(double *)*v8) * (*((double *)*v4 + 1) - (*v8[2])[1])
            + (v9 - (*v8[2])[1]) * (*(double *)*v4 - **v8[2]);
        v16 = v15 >= 1.0e-12 || v15 <= -1.0e-12;
        if (v16 && v15 <= 0.0)
          return result;
      }
      else if (v8 == v12)
      {
        v9 = *((double *)*v11 + 1);
        v13 = (**v11[3] - *(double *)*v11) * (*((double *)*v4 + 1) - (*v11[3])[1])
            + (v9 - (*v11[3])[1]) * (*(double *)*v4 - **v11[3]);
        if (v13 >= 1.0e-12 || v13 <= -1.0e-12)
        {
          v12 = (double ***)v4[2];
          v8 = (double ***)v4[3];
          if (v13 > 0.0)
            return result;
        }
        else
        {
          v12 = (double ***)v4[2];
          v8 = (double ***)v4[3];
        }
      }
      else
      {
        v7 = *v11;
        if (*((double *)*v11 + 1) < *((double *)*v8 + 1))
          v8 = (double ***)v4[3];
        else
          v7 = *v8;
        v9 = *((double *)v7 + 1);
      }
      if (!*(_BYTE *)(a2 + 56))
        v10 = v12;
      v4 = v8;
    }
    while (*(double *)(a2 + 48) <= *((double *)*v10 + 1) - v9);
  }
  return result;
}

BOOL p2t::Sweep::IsShallow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 + 24;
  if (!*(_BYTE *)(a2 + 56))
    v3 = a2 + 40;
  return *(double *)(a2 + 48) > *(double *)(**(_QWORD **)v3 + 8) - *(double *)(*(_QWORD *)a3 + 8);
}

uint64_t p2t::Sweep::FillRightAboveEdgeEvent(uint64_t result, p2t::SweepContext *a2, double **a3, uint64_t a4)
{
  uint64_t v4;
  double *v5;
  double v6;
  double *v7;
  double v8;
  uint64_t v9;
  uint64_t v12;
  double v13;

  v4 = *(_QWORD *)(a4 + 16);
  v5 = *(double **)v4;
  v6 = **(double **)v4;
  v7 = *a3;
  v8 = **a3;
  if (v6 < v8)
  {
    v9 = a4;
    v12 = result;
    do
    {
      v13 = (v7[1] - a3[1][1]) * (v6 - v8) + (v5[1] - v7[1]) * (*a3[1] - v8);
      if ((v13 >= 1.0e-12 || v13 <= -1.0e-12) && v13 > 0.0)
      {
        result = p2t::Sweep::FillRightBelowEdgeEvent(v12, a2, a3, v9);
        v7 = *a3;
        v8 = **a3;
        v4 = v9;
      }
      v9 = v4;
      v4 = *(_QWORD *)(v4 + 16);
      v5 = *(double **)v4;
      v6 = **(double **)v4;
    }
    while (v6 < v8);
  }
  return result;
}

uint64_t p2t::Sweep::FillLeftAboveEdgeEvent(uint64_t result, p2t::SweepContext *a2, double **a3, uint64_t a4)
{
  uint64_t v4;
  double *v5;
  double v6;
  double *v7;
  double v8;
  uint64_t v9;
  uint64_t v12;
  double v13;

  v4 = *(_QWORD *)(a4 + 24);
  v5 = *(double **)v4;
  v6 = **(double **)v4;
  v7 = *a3;
  v8 = **a3;
  if (v6 > v8)
  {
    v9 = a4;
    v12 = result;
    do
    {
      v13 = (v7[1] - a3[1][1]) * (v6 - v8) + (v5[1] - v7[1]) * (*a3[1] - v8);
      if ((v13 >= 1.0e-12 || v13 <= -1.0e-12) && v13 <= 0.0)
      {
        result = p2t::Sweep::FillLeftBelowEdgeEvent(v12, a2, a3, v9);
        v7 = *a3;
        v8 = **a3;
        v4 = v9;
      }
      v9 = v4;
      v4 = *(_QWORD *)(v4 + 24);
      v5 = *(double **)v4;
      v6 = **(double **)v4;
    }
    while (v6 > v8);
  }
  return result;
}

uint64_t p2t::Sweep::FillRightBelowEdgeEvent(uint64_t result, p2t::SweepContext *a2, _QWORD *a3, uint64_t a4)
{
  double *v4;
  double v5;
  p2t::Sweep *v9;
  double ***v10;
  double v11;
  BOOL v12;
  double v13;
  double v14;
  BOOL v15;
  double v16;
  BOOL v17;
  double *v18;

  v4 = *(double **)a4;
  v5 = **(double **)a4;
  if (v5 < *(double *)*a3)
  {
    v9 = (p2t::Sweep *)result;
    while (1)
    {
      v10 = *(double ****)(a4 + 16);
      v11 = (**v10[2] - *(double *)*v10) * (v4[1] - (*v10[2])[1])
          + (*((double *)*v10 + 1) - (*v10[2])[1]) * (v5 - **v10[2]);
      v12 = v11 >= 1.0e-12 || v11 <= -1.0e-12;
      if (v12 && v11 > 0.0)
        break;
      result = p2t::Sweep::FillRightConvexEdgeEvent((uint64_t)v9, a2, a3, a4);
      v4 = *(double **)a4;
      v5 = **(double **)a4;
      if (v5 >= *(double *)*a3)
        return result;
    }
    do
    {
      result = p2t::Sweep::Fill(v9, a2, (uint64_t)v10);
      v10 = *(double ****)(a4 + 16);
      v18 = (double *)*v10;
      if (*v10 == (double **)*a3)
        break;
      v13 = v18[1];
      v14 = (*(double *)*a3 - *v18) * (*(double *)(a3[1] + 8) - *(double *)(*a3 + 8))
          + (v13 - *(double *)(*a3 + 8)) * (*(double *)a3[1] - *(double *)*a3);
      v15 = v14 >= 1.0e-12 || v14 <= -1.0e-12;
      if (!v15 || v14 <= 0.0)
        break;
      v16 = ((*v10[2])[1] - *(double *)(*(_QWORD *)a4 + 8)) * (*v18 - **v10[2])
          + (v13 - (*v10[2])[1]) * (**(double **)a4 - **v10[2]);
      v17 = v16 >= 1.0e-12 || v16 <= -1.0e-12;
    }
    while (v17 && v16 > 0.0);
  }
  return result;
}

uint64_t p2t::Sweep::FillRightConcaveEdgeEvent(p2t::Sweep *a1, p2t::SweepContext *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t result;
  double *v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  BOOL v15;

  v8 = a4[2];
  do
  {
    result = p2t::Sweep::Fill(a1, a2, v8);
    v8 = a4[2];
    v10 = *(double **)v8;
    if (*(_QWORD *)v8 == *a3)
      break;
    v11 = v10[1];
    v12 = (*(double *)*a3 - *v10) * (*(double *)(a3[1] + 8) - *(double *)(*a3 + 8))
        + (v11 - *(double *)(*a3 + 8)) * (*(double *)a3[1] - *(double *)*a3);
    v13 = v12 >= 1.0e-12 || v12 <= -1.0e-12;
    if (!v13 || v12 <= 0.0)
      break;
    v14 = (*(double *)(**(_QWORD **)(v8 + 16) + 8) - *(double *)(*a4 + 8)) * (*v10 - ***(double ***)(v8 + 16))
        + (v11 - *(double *)(**(_QWORD **)(v8 + 16) + 8)) * (*(double *)*a4 - ***(double ***)(v8 + 16));
    v15 = v14 >= 1.0e-12 || v14 <= -1.0e-12;
  }
  while (v15 && v14 > 0.0);
  return result;
}

uint64_t p2t::Sweep::FillRightConvexEdgeEvent(uint64_t result, p2t::SweepContext *a2, _QWORD *a3, uint64_t a4)
{
  p2t::Sweep *v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  BOOL v18;
  double v19;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  BOOL v25;
  double *v26;

  v6 = (p2t::Sweep *)result;
  v7 = *(_QWORD *)(a4 + 16);
  v8 = *(double **)v7;
  v9 = *(_QWORD *)(v7 + 16);
  v10 = *(double **)v9;
  v11 = **(double **)v7;
  v12 = **(double **)v9;
  v13 = *(double *)(*(_QWORD *)v9 + 8);
  while (1)
  {
    v14 = v9;
    v15 = v8[1];
    v8 = v10;
    v16 = v11;
    v11 = v12;
    v9 = *(_QWORD *)(v9 + 16);
    v10 = *(double **)v9;
    v12 = **(double **)v9;
    v17 = (v12 - v11) * (v15 - *(double *)(*(_QWORD *)v9 + 8))
        + (v13 - *(double *)(*(_QWORD *)v9 + 8)) * (v16 - v12);
    v18 = v17 >= 1.0e-12 || v17 <= -1.0e-12;
    if (v18 && v17 > 0.0)
      break;
    v19 = (*(double *)(*a3 + 8) - *(double *)(a3[1] + 8)) * (v11 - *(double *)*a3)
        + (v13 - *(double *)(*a3 + 8)) * (*(double *)a3[1] - *(double *)*a3);
    if (v19 >= 1.0e-12 || v19 <= -1.0e-12)
    {
      v18 = v19 <= 0.0;
      v13 = *(double *)(*(_QWORD *)v9 + 8);
      v7 = v14;
      if (!v18)
        continue;
    }
    return result;
  }
  do
  {
    result = p2t::Sweep::Fill(v6, a2, v14);
    v14 = *(_QWORD *)(v7 + 16);
    v26 = *(double **)v14;
    if (*(_QWORD *)v14 == *a3)
      break;
    v21 = v26[1];
    v22 = (*(double *)*a3 - *v26) * (*(double *)(a3[1] + 8) - *(double *)(*a3 + 8))
        + (v21 - *(double *)(*a3 + 8)) * (*(double *)a3[1] - *(double *)*a3);
    v23 = v22 >= 1.0e-12 || v22 <= -1.0e-12;
    if (!v23 || v22 <= 0.0)
      break;
    v24 = (*(double *)(**(_QWORD **)(v14 + 16) + 8) - *(double *)(*(_QWORD *)v7 + 8))
        * (*v26 - ***(double ***)(v14 + 16))
        + (v21 - *(double *)(**(_QWORD **)(v14 + 16) + 8)) * (**(double **)v7 - ***(double ***)(v14 + 16));
    v25 = v24 >= 1.0e-12 || v24 <= -1.0e-12;
  }
  while (v25 && v24 > 0.0);
  return result;
}

uint64_t p2t::Sweep::FillLeftBelowEdgeEvent(uint64_t result, p2t::SweepContext *a2, _QWORD *a3, uint64_t a4)
{
  double *v4;
  double v5;
  p2t::Sweep *v9;
  double ***v10;
  double v11;
  BOOL v12;
  double v13;
  double v14;
  BOOL v15;
  double v16;
  BOOL v17;
  double *v18;

  v4 = *(double **)a4;
  v5 = **(double **)a4;
  if (v5 > *(double *)*a3)
  {
    v9 = (p2t::Sweep *)result;
    while (1)
    {
      v10 = *(double ****)(a4 + 24);
      v11 = (**v10[3] - *(double *)*v10) * (v4[1] - (*v10[3])[1])
          + (*((double *)*v10 + 1) - (*v10[3])[1]) * (v5 - **v10[3]);
      v12 = v11 >= 1.0e-12 || v11 <= -1.0e-12;
      if (v12 && v11 <= 0.0)
        break;
      result = p2t::Sweep::FillLeftConvexEdgeEvent((uint64_t)v9, a2, a3, a4);
      v4 = *(double **)a4;
      v5 = **(double **)a4;
      if (v5 <= *(double *)*a3)
        return result;
    }
    do
    {
      result = p2t::Sweep::Fill(v9, a2, (uint64_t)v10);
      v10 = *(double ****)(a4 + 24);
      v18 = (double *)*v10;
      if (*v10 == (double **)*a3)
        break;
      v13 = v18[1];
      v14 = (*(double *)*a3 - *v18) * (*(double *)(a3[1] + 8) - *(double *)(*a3 + 8))
          + (v13 - *(double *)(*a3 + 8)) * (*(double *)a3[1] - *(double *)*a3);
      v15 = v14 >= 1.0e-12 || v14 <= -1.0e-12;
      if (!v15 || v14 > 0.0)
        break;
      v16 = ((*v10[3])[1] - *(double *)(*(_QWORD *)a4 + 8)) * (*v18 - **v10[3])
          + (v13 - (*v10[3])[1]) * (**(double **)a4 - **v10[3]);
      v17 = v16 >= 1.0e-12 || v16 <= -1.0e-12;
    }
    while (v17 && v16 <= 0.0);
  }
  return result;
}

uint64_t p2t::Sweep::FillLeftConcaveEdgeEvent(p2t::Sweep *a1, p2t::SweepContext *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t result;
  double *v10;
  double v11;
  double v12;
  BOOL v13;
  double v14;
  BOOL v15;

  v8 = a4[3];
  do
  {
    result = p2t::Sweep::Fill(a1, a2, v8);
    v8 = a4[3];
    v10 = *(double **)v8;
    if (*(_QWORD *)v8 == *a3)
      break;
    v11 = v10[1];
    v12 = (*(double *)*a3 - *v10) * (*(double *)(a3[1] + 8) - *(double *)(*a3 + 8))
        + (v11 - *(double *)(*a3 + 8)) * (*(double *)a3[1] - *(double *)*a3);
    v13 = v12 >= 1.0e-12 || v12 <= -1.0e-12;
    if (!v13 || v12 > 0.0)
      break;
    v14 = (*(double *)(**(_QWORD **)(v8 + 24) + 8) - *(double *)(*a4 + 8)) * (*v10 - ***(double ***)(v8 + 24))
        + (v11 - *(double *)(**(_QWORD **)(v8 + 24) + 8)) * (*(double *)*a4 - ***(double ***)(v8 + 24));
    v15 = v14 >= 1.0e-12 || v14 <= -1.0e-12;
  }
  while (v15 && v14 <= 0.0);
  return result;
}

uint64_t p2t::Sweep::FillLeftConvexEdgeEvent(uint64_t result, p2t::SweepContext *a2, _QWORD *a3, uint64_t a4)
{
  p2t::Sweep *v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  BOOL v18;
  double v19;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  BOOL v25;
  double *v26;

  v6 = (p2t::Sweep *)result;
  v7 = *(_QWORD *)(a4 + 24);
  v8 = *(double **)v7;
  v9 = *(_QWORD *)(v7 + 24);
  v10 = *(double **)v9;
  v11 = **(double **)v7;
  v12 = **(double **)v9;
  v13 = *(double *)(*(_QWORD *)v9 + 8);
  while (1)
  {
    v14 = v9;
    v15 = v8[1];
    v8 = v10;
    v16 = v11;
    v11 = v12;
    v9 = *(_QWORD *)(v9 + 24);
    v10 = *(double **)v9;
    v12 = **(double **)v9;
    v17 = (v12 - v11) * (v15 - *(double *)(*(_QWORD *)v9 + 8))
        + (v13 - *(double *)(*(_QWORD *)v9 + 8)) * (v16 - v12);
    v18 = v17 >= 1.0e-12 || v17 <= -1.0e-12;
    if (v18 && v17 <= 0.0)
      break;
    v19 = (*(double *)(*a3 + 8) - *(double *)(a3[1] + 8)) * (v11 - *(double *)*a3)
        + (v13 - *(double *)(*a3 + 8)) * (*(double *)a3[1] - *(double *)*a3);
    if (v19 >= 1.0e-12 || v19 <= -1.0e-12)
    {
      v18 = v19 <= 0.0;
      v13 = *(double *)(*(_QWORD *)v9 + 8);
      v7 = v14;
      if (v18)
        continue;
    }
    return result;
  }
  do
  {
    result = p2t::Sweep::Fill(v6, a2, v14);
    v14 = *(_QWORD *)(v7 + 24);
    v26 = *(double **)v14;
    if (*(_QWORD *)v14 == *a3)
      break;
    v21 = v26[1];
    v22 = (*(double *)*a3 - *v26) * (*(double *)(a3[1] + 8) - *(double *)(*a3 + 8))
        + (v21 - *(double *)(*a3 + 8)) * (*(double *)a3[1] - *(double *)*a3);
    v23 = v22 >= 1.0e-12 || v22 <= -1.0e-12;
    if (!v23 || v22 > 0.0)
      break;
    v24 = (*(double *)(**(_QWORD **)(v14 + 24) + 8) - *(double *)(*(_QWORD *)v7 + 8))
        * (*v26 - ***(double ***)(v14 + 24))
        + (v21 - *(double *)(**(_QWORD **)(v14 + 24) + 8)) * (**(double **)v7 - ***(double ***)(v14 + 24));
    v25 = v24 >= 1.0e-12 || v24 <= -1.0e-12;
  }
  while (v25 && v24 <= 0.0);
  return result;
}

p2t::Triangle *p2t::Sweep::NextFlipTriangle(p2t::Sweep *this, p2t::SweepContext *a2, int a3, p2t::Triangle *a4, p2t::Triangle *a5, Point *a6, Point *a7)
{
  p2t::Triangle *v9;
  p2t::Triangle *v10;

  if (a3 == 1)
    v9 = a5;
  else
    v9 = a4;
  if (a3 == 1)
    v10 = a4;
  else
    v10 = a5;
  *((_BYTE *)v9 + (int)p2t::Triangle::EdgeIndex(v9, a6, a7) + 3) = 1;
  p2t::Sweep::Legalize(this, a2, v9);
  p2t::Triangle::ClearDelunayEdges((uint64_t)v9);
  return v10;
}

Point *p2t::Sweep::NextFlipPoint(p2t::Sweep *this, Point *a2, Point *a3, p2t::Triangle *a4, Point *a5)
{
  int8x16_t v5;
  float64x2_t v6;
  double v7;
  int v8;
  BOOL v9;
  BOOL v10;

  v5 = (int8x16_t)vsubq_f64(*(float64x2_t *)&a5->v, *(float64x2_t *)&a2->v);
  v6 = vmulq_f64((float64x2_t)vextq_s8(v5, v5, 8uLL), vsubq_f64(*(float64x2_t *)&a3->v, *(float64x2_t *)&a2->v));
  v7 = vsubq_f64(v6, (float64x2_t)vdupq_laneq_s64((int64x2_t)v6, 1)).f64[0];
  v8 = v7 > 0.0;
  if (v7 < 1.0e-12)
  {
    v9 = v7 == -1.0e-12;
    v10 = v7 < -1.0e-12;
  }
  else
  {
    v9 = 1;
    v10 = 0;
  }
  if (!v10 && !v9)
    v8 = 2;
  if (v8 == 1)
    return p2t::Triangle::PointCW(a4, a5, (uint64_t)a3);
  if (v8)
    p2t::Sweep::FlipEdgeEvent((uint64_t)this, (uint64_t)a2, (uint64_t)a3);
  return p2t::Triangle::PointCCW(a4, a5);
}

uint64_t p2t::Sweep::FlipScanEdgeEvent(p2t::Sweep *this, p2t::SweepContext *a2, Point *a3, Point *a4, p2t::Triangle *a5, p2t::Triangle *a6, Point *a7)
{
  p2t::Triangle *v14;
  Point *v15;
  double *v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;

  while (1)
  {
    v14 = a6;
    a6 = (p2t::Triangle *)p2t::Triangle::NeighborAcross(a6, a7);
    v15 = p2t::Triangle::OppositePoint(a6, v14, a7);
    v16 = (double *)p2t::Triangle::PointCCW(a5, a4);
    v18 = (double *)p2t::Triangle::PointCW(a5, a4, v17);
    v21 = *(double *)&a4->v;
    v22 = *(double *)&a4[2].v;
    v23 = *(double *)&v15->v;
    v24 = *(double *)&v15[2].v;
    if ((v16[1] - v22) * (*(double *)&v15->v - *v16) + (v24 - v16[1]) * (*(double *)&a4->v - *v16) < -1.0e-12
      && (v18[1] - v22) * (v23 - *v18) + (v24 - v18[1]) * (v21 - *v18) > 1.0e-12)
    {
      break;
    }
    v25 = (*(double *)&a3[2].v - v22) * (v23 - *(double *)&a3->v)
        + (v24 - *(double *)&a3[2].v) * (v21 - *(double *)&a3->v);
    v26 = v25 > 0.0;
    if (v25 < 1.0e-12 && v25 > -1.0e-12)
      v26 = 2;
    if (v26 == 1)
    {
      a7 = p2t::Triangle::PointCW(a6, v15, v20);
    }
    else
    {
      if (v26)
        p2t::Sweep::FlipEdgeEvent((uint64_t)v18, v19, v20);
      a7 = p2t::Triangle::PointCCW(a6, v15);
    }
  }
  return p2t::Sweep::FlipEdgeEvent(this, a2, a4, v15, a6, v15);
}

void p2t::Sweep::~Sweep(p2t::Sweep *this)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;

  v2 = *(_QWORD **)this;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    do
    {
      if (v2[v5])
      {
        MEMORY[0x22E2A50A0](v2[v5], 0x1020C40DBF2485DLL);
        v2 = *(_QWORD **)this;
        v3 = (_QWORD *)*((_QWORD *)this + 1);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  if (v2)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void OUTLINED_FUNCTION_0_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 771, a4);
}

uint64_t *p2t::CDT::CDT(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  void *__p;
  void *v12;
  char *v13;

  v4 = operator new();
  v12 = 0;
  v13 = 0;
  __p = 0;
  v5 = *(const void **)a2;
  v6 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v6)
  {
    if (v6 < 0)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v7 = (char *)operator new(v6);
    v8 = &v7[8 * (v6 >> 3)];
    __p = v7;
    v13 = v8;
    memcpy(v7, v5, v6);
    v12 = v8;
  }
  p2t::SweepContext::SweepContext(v4, &__p);
  *a1 = v4;
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  v9 = (_QWORD *)operator new();
  v9[1] = 0;
  v9[2] = 0;
  *v9 = 0;
  a1[1] = (uint64_t)v9;
  return a1;
}

void sub_227BB44C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (__p)
    operator delete(__p);
  MEMORY[0x22E2A50A0](v11, 0x10A0C408F860618);
  _Unwind_Resume(a1);
}

void p2t::CDT::AddHole(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;
  void *__p;
  void *v9;
  char *v10;

  v2 = *a1;
  v9 = 0;
  v10 = 0;
  __p = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if (v5 < 0)
      _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    v7 = &v6[8 * (v5 >> 3)];
    __p = v6;
    v10 = v7;
    memcpy(v6, v4, v5);
    v9 = v7;
  }
  p2t::SweepContext::AddHole(v2, &__p);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_227BB4594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void p2t::CDT::AddPoint(p2t::SweepContext **this, Point *a2)
{
  p2t::SweepContext::AddPoint(*this, a2);
}

void p2t::CDT::Triangulate(p2t::Sweep **this)
{
  p2t::Sweep::Triangulate(this[1], *this);
}

_QWORD *p2t::CDT::GetTriangles@<X0>(p2t::CDT *this@<X0>, _QWORD *a2@<X8>)
{
  return p2t::SweepContext::GetTriangles(*(_QWORD **)this, a2);
}

_QWORD *p2t::CDT::GetMap@<X0>(p2t::CDT *this@<X0>, _QWORD *a2@<X8>)
{
  return p2t::SweepContext::GetMap(*(_QWORD **)this, a2);
}

void p2t::CDT::~CDT(p2t::SweepContext **this)
{
  p2t::SweepContext *v2;
  p2t::Sweep *v3;

  v2 = *this;
  if (v2)
  {
    p2t::SweepContext::~SweepContext(v2);
    MEMORY[0x22E2A50A0]();
  }
  v3 = this[1];
  if (v3)
  {
    p2t::Sweep::~Sweep(v3);
    MEMORY[0x22E2A50A0]();
  }
}

void sub_227BB4848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a13);

  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227BB4A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a11);

  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227BB4CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a13);

  std::vector<NSObject * {__strong}>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_227BB52E8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  if (v2)
  {
    v7 = 8 * *(_QWORD *)(v5 - 168);
    do
    {

      v7 -= 8;
    }
    while (v7 != -8);
  }

  _Unwind_Resume(a1);
}

void sub_227BB543C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BB544C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void makeHeap(id **a1, uint64_t **a2)
{
  id *v4;
  id *v5;
  unint64_t v6;
  int v7;
  uint64_t **v8;
  id v9;
  void *v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  void *v16;
  uint64_t *v17;
  uint64_t *v18;
  float v19;
  uint64_t **v20;
  uint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  id v32;

  if (a1 && a1[1] != *a1)
  {
    v32 = **a1;
    v5 = *a1;
    v4 = a1[1];
    if (v4 != *a1)
    {
      v6 = 0;
      v7 = 0;
      v8 = a2 + 1;
      while (1)
      {
        v9 = v5[v6];
        v10 = v9;
        v11 = *v8;
        v12 = a2 + 1;
        v13 = (uint64_t *)(a2 + 1);
        if (*v8)
          break;
LABEL_13:
        v16 = operator new(0x30uLL);
        *((_QWORD *)v16 + 4) = v10;
        *((_DWORD *)v16 + 10) = 0;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = v13;
        *v12 = (uint64_t *)v16;
        v17 = (uint64_t *)**a2;
        v18 = (uint64_t *)v16;
        if (v17)
        {
          *a2 = v17;
          v18 = *v12;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a2[1], v18);
        v11 = a2[1];
        a2[2] = (uint64_t *)((char *)a2[2] + 1);
        v19 = *((float *)v16 + 10);
        v20 = a2 + 1;
        v21 = (uint64_t *)(a2 + 1);
        if (!v11)
          goto LABEL_24;
        while (1)
        {
LABEL_20:
          while (1)
          {
            v21 = v11;
            v22 = v11[4];
            if ((unint64_t)v32 >= v22)
              break;
            v11 = (uint64_t *)*v21;
            v20 = (uint64_t **)v21;
            if (!*v21)
              goto LABEL_24;
          }
          if (v22 >= (unint64_t)v32)
            break;
          v11 = (uint64_t *)v21[1];
          if (!v11)
          {
            v20 = (uint64_t **)(v21 + 1);
            goto LABEL_24;
          }
        }
        if (v19 >= *((float *)v21 + 10))
          goto LABEL_5;
LABEL_29:
        v26 = v10;

        v32 = v26;
        v7 = v6;
LABEL_5:

        ++v6;
        v5 = *a1;
        v4 = a1[1];
        if (v6 >= v4 - *a1)
          goto LABEL_32;
      }
      v14 = *v8;
      while (1)
      {
        while (1)
        {
          v13 = v14;
          v15 = v14[4];
          if ((unint64_t)v9 >= v15)
            break;
          v14 = (uint64_t *)*v13;
          v12 = (uint64_t **)v13;
          if (!*v13)
            goto LABEL_13;
        }
        if (v15 >= (unint64_t)v9)
          break;
        v14 = (uint64_t *)v13[1];
        if (!v14)
        {
          v12 = (uint64_t **)(v13 + 1);
          goto LABEL_13;
        }
      }
      v19 = *((float *)v13 + 10);
      v20 = a2 + 1;
      v21 = (uint64_t *)(a2 + 1);
      if (v11)
        goto LABEL_20;
LABEL_24:
      v23 = operator new(0x30uLL);
      v23[4] = v32;
      *((_DWORD *)v23 + 10) = 0;
      *v23 = 0;
      v23[1] = 0;
      v23[2] = v21;
      *v20 = v23;
      v24 = (uint64_t *)**a2;
      v25 = v23;
      if (v24)
      {
        *a2 = v24;
        v25 = *v20;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a2[1], v25);
      a2[2] = (uint64_t *)((char *)a2[2] + 1);
      if (v19 >= *((float *)v23 + 10))
        goto LABEL_5;
      goto LABEL_29;
    }
    v7 = 0;
    v5 = a1[1];
LABEL_32:
    v27 = v7;
    v28 = *(v4 - 1);
    *(v4 - 1) = 0;
    v29 = v5[v27];
    v5[v27] = 0;
    v30 = *(v4 - 1);
    *(v4 - 1) = v29;

    v31 = v5[v27];
    v5[v27] = v28;

  }
}

void sub_227BB56F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t *makeHeap(uint64_t *result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t **v3;
  unint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  char *v13;
  uint64_t *v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  float v19;
  uint64_t **v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;

  if (result)
  {
    v2 = result;
    v3 = (uint64_t **)*result;
    if (result[1] != *result)
    {
      v5 = 0;
      v6 = 0;
      v7 = *v3;
      v8 = a2 + 1;
      do
      {
        v10 = v3[v5];
        v11 = *v8;
        v12 = v8;
        v13 = (char *)v8;
        if (*v8)
        {
          v14 = *v8;
          while (1)
          {
            while (1)
            {
              v13 = (char *)v14;
              v15 = v14[4];
              if ((unint64_t)v10 >= v15)
                break;
              v14 = *(uint64_t **)v13;
              v12 = (uint64_t **)v13;
              if (!*(_QWORD *)v13)
                goto LABEL_15;
            }
            if (v15 >= (unint64_t)v10)
              break;
            v14 = (uint64_t *)*((_QWORD *)v13 + 1);
            if (!v14)
            {
              v12 = (uint64_t **)(v13 + 8);
              goto LABEL_15;
            }
          }
        }
        else
        {
LABEL_15:
          v16 = v13;
          v13 = (char *)operator new(0x30uLL);
          *((_QWORD *)v13 + 4) = v10;
          *((_DWORD *)v13 + 10) = 0;
          *(_QWORD *)v13 = 0;
          *((_QWORD *)v13 + 1) = 0;
          *((_QWORD *)v13 + 2) = v16;
          *v12 = (uint64_t *)v13;
          v17 = (uint64_t *)**a2;
          v18 = (uint64_t *)v13;
          if (v17)
          {
            *a2 = v17;
            v18 = *v12;
          }
          result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a2[1], v18);
          v11 = a2[1];
          a2[2] = (uint64_t *)((char *)a2[2] + 1);
        }
        v19 = *((float *)v13 + 10);
        v20 = v8;
        v21 = v8;
        if (v11)
        {
          while (1)
          {
            while (1)
            {
              v21 = (uint64_t **)v11;
              v22 = v11[4];
              if ((unint64_t)v7 >= v22)
                break;
              v11 = *v21;
              v20 = v21;
              if (!*v21)
                goto LABEL_25;
            }
            if (v22 >= (unint64_t)v7)
              break;
            v11 = v21[1];
            if (!v11)
            {
              v20 = v21 + 1;
              goto LABEL_25;
            }
          }
        }
        else
        {
LABEL_25:
          v23 = (uint64_t *)v21;
          v21 = (uint64_t **)operator new(0x30uLL);
          v21[4] = v7;
          *((_DWORD *)v21 + 10) = 0;
          *v21 = 0;
          v21[1] = 0;
          v21[2] = v23;
          *v20 = (uint64_t *)v21;
          v24 = (uint64_t *)**a2;
          v25 = (uint64_t *)v21;
          if (v24)
          {
            *a2 = v24;
            v25 = *v20;
          }
          result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a2[1], v25);
          a2[2] = (uint64_t *)((char *)a2[2] + 1);
        }
        if (v19 < *((float *)v21 + 10))
        {
          v7 = v10;
          v6 = v5;
        }
        ++v5;
        v3 = (uint64_t **)*v2;
        v9 = v2[1];
      }
      while (v5 < (v9 - *v2) >> 3);
      v26 = v6;
      v27 = *(uint64_t **)(v9 - 8);
      *(_QWORD *)(v9 - 8) = v3[v26];
      v3[v26] = v27;
    }
  }
  return result;
}

void GKFindPath(unint64_t a1, uint64_t *a2, char **a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  unint64_t *v35;
  char *v36;
  int64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  uint64_t *v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _OWORD *v66;
  __int128 *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t *j;
  unint64_t v72;
  char *v73;
  uint64_t *v74;
  uint64_t **v75;
  uint64_t **v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  BOOL v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  _BYTE *v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  uint64_t *v92;
  float v93;
  char *v94;
  float v95;
  uint64_t *v96;
  uint64_t **v97;
  uint64_t **v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t **v103;
  uint64_t **v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  _BYTE *v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t **v121;
  uint64_t **v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  _BYTE *v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  float v138;
  uint64_t *v139;
  uint64_t **v140;
  uint64_t **v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  _BYTE *v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _BYTE *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  _OWORD *v171;
  char *v172;
  uint64_t v173;
  __int128 v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t **v181;
  uint64_t *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  _BYTE *v190;
  uint64_t **v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t **v195;
  _OWORD *v196;
  uint64_t **v197;
  uint64_t v198;
  __int128 v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t **i;
  uint64_t **v203;
  unint64_t v204;
  uint64_t *v205;
  uint64_t *v206;
  char *v207;
  char *v208;
  char *v209;
  unint64_t v211;
  uint64_t v212;
  BOOL v213;
  char **v214;
  uint64_t **v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t **v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t **v222;
  uint64_t *v223;
  uint64_t v224;
  void *__p;
  char *v226;
  char *v227;
  char *v228;
  char *v229;
  char *v230;

  v228 = 0;
  v229 = 0;
  v230 = 0;
  __p = 0;
  v226 = 0;
  v227 = 0;
  v223 = 0;
  v224 = 0;
  v221 = 0;
  v222 = &v223;
  v219 = &v220;
  v220 = 0;
  v217 = 0;
  v218 = 0;
  v216 = &v217;
  v5 = operator new(0x30uLL);
  v5[4] = a1;
  *((_DWORD *)v5 + 10) = 0;
  *v5 = 0;
  v5[1] = 0;
  v5[2] = &v220;
  v219 = (uint64_t **)v5;
  v220 = v5;
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v5, v5);
  ++v221;
  *((_DWORD *)v5 + 10) = 0;
  v6 = v223;
  v7 = &v223;
LABEL_3:
  v8 = v7;
  if (v6)
  {
    while (1)
    {
      v7 = (uint64_t **)v6;
      v9 = v6[4];
      if (v9 > a1)
      {
        v6 = *v7;
        goto LABEL_3;
      }
      if (v9 >= a1)
        break;
      v6 = v7[1];
      if (!v6)
      {
        v8 = v7 + 1;
        goto LABEL_8;
      }
    }
    *((_DWORD *)v7 + 10) = 0;
    v12 = v217;
    v13 = &v217;
    v14 = &v217;
    if (v217)
      goto LABEL_13;
  }
  else
  {
LABEL_8:
    v10 = operator new(0x30uLL);
    v10[4] = a1;
    *((_DWORD *)v10 + 10) = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v7;
    *v8 = v10;
    v11 = v10;
    if (*v222)
    {
      v222 = (uint64_t **)*v222;
      v11 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v223, v11);
    ++v224;
    *((_DWORD *)v10 + 10) = 0;
    v12 = v217;
    v13 = &v217;
    v14 = &v217;
    if (v217)
    {
LABEL_13:
      v15 = v12;
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v15;
          v16 = v15[4];
          if (v16 <= a1)
            break;
          v15 = *v13;
          v14 = v13;
          if (!*v13)
            goto LABEL_19;
        }
        if (v16 >= a1)
          break;
        v15 = v13[1];
        if (!v15)
        {
          v14 = v13 + 1;
          goto LABEL_19;
        }
      }
      v13[5] = 0;
      v19 = &v217;
      v20 = &v217;
      v21 = (unint64_t)a2;
      if (v12)
        goto LABEL_26;
      goto LABEL_30;
    }
  }
LABEL_19:
  v17 = (uint64_t *)operator new(0x30uLL);
  v17[4] = a1;
  v17[5] = 0;
  *v17 = 0;
  v17[1] = 0;
  v17[2] = (uint64_t)v13;
  *v14 = v17;
  v18 = v17;
  if (*v216)
  {
    v216 = (uint64_t **)*v216;
    v18 = *v14;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v217, v18);
  v12 = v217;
  ++v218;
  v17[5] = 0;
  v19 = &v217;
  v20 = &v217;
  v21 = (unint64_t)a2;
  if (v12)
  {
    while (1)
    {
LABEL_26:
      while (1)
      {
        v19 = (uint64_t **)v12;
        v22 = v12[4];
        if (v22 <= v21)
          break;
        v12 = *v19;
        v20 = v19;
        if (!*v19)
          goto LABEL_30;
      }
      if (v22 >= v21)
        break;
      v12 = v19[1];
      if (!v12)
      {
        v20 = v19 + 1;
        goto LABEL_30;
      }
    }
    v19[5] = 0;
    v26 = v226;
    v25 = v227;
    if (v226 < v227)
      goto LABEL_33;
    goto LABEL_35;
  }
LABEL_30:
  v23 = (uint64_t *)operator new(0x30uLL);
  v23[4] = (uint64_t)a2;
  v23[5] = 0;
  *v23 = 0;
  v23[1] = 0;
  v23[2] = (uint64_t)v19;
  *v20 = v23;
  v24 = v23;
  if (*v216)
  {
    v216 = (uint64_t **)*v216;
    v24 = *v20;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v217, v24);
  ++v218;
  v23[5] = 0;
  v26 = v226;
  v25 = v227;
  if (v226 < v227)
  {
LABEL_33:
    *(_QWORD *)v26 = a1;
    v27 = (uint64_t)(v26 + 8);
    goto LABEL_55;
  }
LABEL_35:
  v28 = (char *)__p;
  v29 = v26 - (_BYTE *)__p;
  v30 = (v26 - (_BYTE *)__p) >> 3;
  v31 = v30 + 1;
  if ((unint64_t)(v30 + 1) >> 61)
    _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
  v32 = v25 - (_BYTE *)__p;
  if (v32 >> 2 > v31)
    v31 = v32 >> 2;
  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
    v33 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v33 = v31;
  if (!v33)
  {
    v34 = 0;
    v35 = (unint64_t *)(8 * v30);
    v36 = 0;
    *(_QWORD *)(8 * v30) = a1;
    v27 = 8 * v30 + 8;
    v37 = v26 - v28;
    if (v26 != v28)
      goto LABEL_44;
LABEL_53:
    __p = v35;
    v226 = (char *)v27;
    v227 = v36;
    if (!v26)
      goto LABEL_55;
    goto LABEL_54;
  }
  if (v33 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v34 = operator new(8 * v33);
  v35 = (unint64_t *)&v34[8 * v30];
  v36 = &v34[8 * v33];
  *v35 = a1;
  v27 = (uint64_t)(v35 + 1);
  v37 = v26 - v28;
  if (v26 == v28)
    goto LABEL_53;
LABEL_44:
  v38 = v37 - 8;
  if (v38 < 0x58)
    goto LABEL_354;
  if ((unint64_t)(v26 - v34 - v29) < 0x20)
    goto LABEL_354;
  v39 = (v38 >> 3) + 1;
  v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
  v41 = &v26[-v40];
  v35 = (unint64_t *)((char *)v35 - v40);
  v42 = &v34[8 * v30 - 16];
  v43 = v26 - 16;
  v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v45 = *(_OWORD *)v43;
    *(v42 - 1) = *((_OWORD *)v43 - 1);
    *v42 = v45;
    v42 -= 2;
    v43 -= 32;
    v44 -= 4;
  }
  while (v44);
  v26 = v41;
  if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_354:
    do
    {
      v46 = *((_QWORD *)v26 - 1);
      v26 -= 8;
      *--v35 = v46;
    }
    while (v26 != v28);
  }
  v26 = (char *)__p;
  __p = v35;
  v226 = (char *)v27;
  v227 = v36;
  if (v26)
LABEL_54:
    operator delete(v26);
LABEL_55:
  v226 = (char *)v27;
  makeHeap((uint64_t *)&__p, (uint64_t **)&v222);
  v214 = a3;
  v47 = v226;
  v48 = a2;
  if (__p == v226)
    goto LABEL_339;
  while (2)
  {
    v51 = (uint64_t *)*((_QWORD *)v47 - 1);
    v49 = v47 - 8;
    v50 = v51;
    if (v51 == v48)
    {
      if (!v48)
        goto LABEL_331;
LABEL_299:
      v181 = (uint64_t **)v214[1];
      v180 = (unint64_t)v214[2];
      if ((unint64_t)v181 < v180)
      {
        v182 = v48;
        *v181 = v48;
        v183 = (uint64_t)(v181 + 1);
LABEL_321:
        v214[1] = (char *)v183;
        v201 = v217;
        for (i = &v217; ; v201 = *i)
        {
          v203 = i;
          if (!v201)
            goto LABEL_328;
          while (1)
          {
            i = (uint64_t **)v201;
            v204 = v201[4];
            if ((unint64_t)v182 < v204)
              break;
            if (v204 >= (unint64_t)v182)
            {
              v48 = i[5];
              if (v48)
                goto LABEL_299;
LABEL_331:
              v207 = *v214;
              v208 = v214[1];
              v209 = v208 - 8;
              if (*v214 != v208 && v209 > v207)
              {
                v211 = (unint64_t)(v207 + 8);
                do
                {
                  v212 = *(_QWORD *)(v211 - 8);
                  *(_QWORD *)(v211 - 8) = *(_QWORD *)v209;
                  *(_QWORD *)v209 = v212;
                  v209 -= 8;
                  v213 = v211 >= (unint64_t)v209;
                  v211 += 8;
                }
                while (!v213);
              }
              goto LABEL_339;
            }
            v201 = i[1];
            if (!v201)
            {
              v203 = i + 1;
LABEL_328:
              v205 = (uint64_t *)operator new(0x30uLL);
              v205[4] = (uint64_t)v182;
              v205[5] = 0;
              *v205 = 0;
              v205[1] = 0;
              v205[2] = (uint64_t)i;
              *v203 = v205;
              v206 = v205;
              if (*v216)
              {
                v216 = (uint64_t **)*v216;
                v206 = *v203;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v217, v206);
              ++v218;
              v48 = (uint64_t *)v205[5];
              if (!v48)
                goto LABEL_331;
              goto LABEL_299;
            }
          }
        }
      }
      v184 = *v214;
      v185 = (char *)v181 - *v214;
      v186 = v185 >> 3;
      v187 = (v185 >> 3) + 1;
      if (v187 >> 61)
        _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
      v188 = v180 - (_QWORD)v184;
      if (v188 >> 2 > v187)
        v187 = v188 >> 2;
      if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFF8)
        v189 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v189 = v187;
      if (v189)
      {
        if (v189 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v190 = operator new(8 * v189);
        v182 = v48;
        v191 = (uint64_t **)&v190[8 * v186];
        *v191 = v48;
        v183 = (uint64_t)(v191 + 1);
        if (v181 == (uint64_t **)v184)
          goto LABEL_319;
      }
      else
      {
        v182 = v48;
        v190 = 0;
        v191 = (uint64_t **)(8 * v186);
        *(_QWORD *)(8 * v186) = v48;
        v183 = 8 * v186 + 8;
        if (v181 == (uint64_t **)v184)
        {
LABEL_319:
          *v214 = (char *)v191;
          v214[1] = (char *)v183;
          v214[2] = &v190[8 * v189];
          if (v181)
            operator delete(v181);
          goto LABEL_321;
        }
      }
      v192 = (char *)(v181 - 1) - v184;
      if (v192 < 0x58)
        goto LABEL_355;
      if ((unint64_t)((char *)v181 - &v190[v185]) < 0x20)
        goto LABEL_355;
      v193 = (v192 >> 3) + 1;
      v194 = 8 * (v193 & 0x3FFFFFFFFFFFFFFCLL);
      v195 = &v181[v194 / 0xFFFFFFFFFFFFFFF8];
      v191 = (uint64_t **)((char *)v191 - v194);
      v196 = &v190[8 * v186 - 16];
      v197 = v181 - 2;
      v198 = v193 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v199 = *(_OWORD *)v197;
        *(v196 - 1) = *((_OWORD *)v197 - 1);
        *v196 = v199;
        v196 -= 2;
        v197 -= 4;
        v198 -= 4;
      }
      while (v198);
      v181 = v195;
      if (v193 != (v193 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_355:
        do
        {
          v200 = *--v181;
          *--v191 = v200;
        }
        while (v181 != (uint64_t **)v184);
      }
      v181 = (uint64_t **)*v214;
      goto LABEL_319;
    }
    v226 = v49;
    makeHeap((uint64_t *)&__p, (uint64_t **)&v222);
    v52 = v228;
    v53 = v229;
    v54 = v228;
    if (v228 != v229)
    {
      while (*(uint64_t **)v54 != v50)
      {
        v54 += 8;
        if (v54 == v229)
        {
          v54 = v229;
          break;
        }
      }
    }
    if (v54 != v229)
      goto LABEL_87;
    if (v229 >= v230)
    {
      v56 = (v229 - v228) >> 3;
      v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 61)
        _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
      v58 = v230 - v228;
      if ((v230 - v228) >> 2 > v57)
        v57 = v58 >> 2;
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
        v59 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v59 = v57;
      if (v59)
      {
        if (v59 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v60 = operator new(8 * v59);
        v61 = &v60[8 * v56];
        *(_QWORD *)v61 = v50;
        v55 = (uint64_t)(v61 + 8);
        if (v52 != v53)
        {
LABEL_75:
          v62 = v53 - 8 - v52;
          if (v62 < 0x58)
            goto LABEL_356;
          if ((unint64_t)(v52 - v60) < 0x20)
            goto LABEL_356;
          v63 = (v62 >> 3) + 1;
          v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
          v65 = &v53[-v64];
          v61 -= v64;
          v66 = &v60[8 * v56 - 16];
          v67 = (__int128 *)(v53 - 16);
          v68 = v63 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v69 = *v67;
            *(v66 - 1) = *(v67 - 1);
            *v66 = v69;
            v66 -= 2;
            v67 -= 2;
            v68 -= 4;
          }
          while (v68);
          v53 = v65;
          if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_356:
            do
            {
              v70 = *((_QWORD *)v53 - 1);
              v53 -= 8;
              *((_QWORD *)v61 - 1) = v70;
              v61 -= 8;
            }
            while (v53 != v52);
          }
          v52 = v228;
          v228 = v61;
          v230 = &v60[8 * v59];
          if (!v52)
            goto LABEL_86;
          goto LABEL_85;
        }
      }
      else
      {
        v60 = 0;
        v61 = (char *)(8 * v56);
        *(_QWORD *)(8 * v56) = v50;
        v55 = 8 * v56 + 8;
        if (v52 != v53)
          goto LABEL_75;
      }
      v228 = v61;
      v230 = &v60[8 * v59];
      if (!v52)
        goto LABEL_86;
LABEL_85:
      operator delete(v52);
      goto LABEL_86;
    }
    *(_QWORD *)v229 = v50;
    v55 = (uint64_t)(v53 + 8);
LABEL_86:
    v229 = (char *)v55;
    v48 = a2;
LABEL_87:
    for (j = (unint64_t *)v50[1]; j != (unint64_t *)v50[2]; ++j)
    {
      v72 = *j;
      v73 = v228;
      if (v228 != v229)
      {
        while (*(_QWORD *)v73 != v72)
        {
          v73 += 8;
          if (v73 == v229)
          {
            v73 = v229;
            break;
          }
        }
      }
      if (v73 == v229)
      {
        v74 = v220;
        v75 = &v220;
LABEL_97:
        v76 = v75;
        if (v74)
        {
          while (1)
          {
            v75 = (uint64_t **)v74;
            v77 = v74[4];
            if ((unint64_t)v50 < v77)
            {
              v74 = *v75;
              goto LABEL_97;
            }
            if (v77 >= (unint64_t)v50)
              break;
            v74 = v75[1];
            if (!v74)
            {
              v76 = v75 + 1;
              goto LABEL_102;
            }
          }
          v91 = *((float *)v75 + 10);
        }
        else
        {
LABEL_102:
          v78 = (uint64_t *)operator new(0x30uLL);
          v78[4] = (uint64_t)v50;
          *((_DWORD *)v78 + 10) = 0;
          *v78 = 0;
          v78[1] = 0;
          v78[2] = (uint64_t)v75;
          *v76 = v78;
          if (*v219)
          {
            v219 = (uint64_t **)*v219;
            v78 = *v76;
          }
          v79 = v220;
          v80 = v78 == v220;
          *((_BYTE *)v78 + 24) = v78 == v220;
          if (!v80)
          {
            do
            {
              v81 = v78[2];
              if (*(_BYTE *)(v81 + 24))
                break;
              v82 = *(uint64_t **)(v81 + 16);
              v83 = *v82;
              if (*v82 == v81)
              {
                v86 = v82[1];
                if (!v86 || (v87 = *(unsigned __int8 *)(v86 + 24), v84 = (_BYTE *)(v86 + 24), v87))
                {
                  if (*(uint64_t **)v81 == v78)
                  {
                    *(_BYTE *)(v81 + 24) = 1;
                    *((_BYTE *)v82 + 24) = 0;
                    v90 = *(_QWORD *)(v81 + 8);
                    *v82 = v90;
                    if (v90)
                      goto LABEL_119;
                  }
                  else
                  {
                    v88 = *(uint64_t **)(v81 + 8);
                    v89 = *v88;
                    *(_QWORD *)(v81 + 8) = *v88;
                    if (v89)
                    {
                      *(_QWORD *)(v89 + 16) = v81;
                      v82 = *(uint64_t **)(v81 + 16);
                    }
                    v88[2] = (uint64_t)v82;
                    *(_QWORD *)(*(_QWORD *)(v81 + 16) + 8 * (**(_QWORD **)(v81 + 16) != v81)) = v88;
                    *v88 = v81;
                    *(_QWORD *)(v81 + 16) = v88;
                    v82 = (uint64_t *)v88[2];
                    v81 = *v82;
                    *((_BYTE *)v88 + 24) = 1;
                    *((_BYTE *)v82 + 24) = 0;
                    v90 = *(_QWORD *)(v81 + 8);
                    *v82 = v90;
                    if (v90)
LABEL_119:
                      *(_QWORD *)(v90 + 16) = v82;
                  }
                  *(_QWORD *)(v81 + 16) = v82[2];
                  *(_QWORD *)(v82[2] + 8 * (*(_QWORD *)v82[2] != (_QWORD)v82)) = v81;
                  *(_QWORD *)(v81 + 8) = v82;
LABEL_126:
                  v82[2] = v81;
                  break;
                }
              }
              else if (!v83 || (v85 = *(unsigned __int8 *)(v83 + 24), v84 = (_BYTE *)(v83 + 24), v85))
              {
                if (*(uint64_t **)v81 == v78)
                {
                  v176 = v78[1];
                  *(_QWORD *)v81 = v176;
                  if (v176)
                  {
                    *(_QWORD *)(v176 + 16) = v81;
                    v82 = *(uint64_t **)(v81 + 16);
                  }
                  v78[2] = (uint64_t)v82;
                  *(_QWORD *)(*(_QWORD *)(v81 + 16) + 8 * (**(_QWORD **)(v81 + 16) != v81)) = v78;
                  v78[1] = v81;
                  *(_QWORD *)(v81 + 16) = v78;
                  v82 = (uint64_t *)v78[2];
                  *((_BYTE *)v78 + 24) = 1;
                  *((_BYTE *)v82 + 24) = 0;
                  v81 = v82[1];
                  v92 = *(uint64_t **)v81;
                  v82[1] = *(_QWORD *)v81;
                  if (v92)
LABEL_124:
                    v92[2] = (uint64_t)v82;
                }
                else
                {
                  *(_BYTE *)(v81 + 24) = 1;
                  *((_BYTE *)v82 + 24) = 0;
                  v81 = v82[1];
                  v92 = *(uint64_t **)v81;
                  v82[1] = *(_QWORD *)v81;
                  if (v92)
                    goto LABEL_124;
                }
                *(_QWORD *)(v81 + 16) = v82[2];
                *(_QWORD *)(v82[2] + 8 * (*(_QWORD *)v82[2] != (_QWORD)v82)) = v81;
                *(_QWORD *)v81 = v82;
                goto LABEL_126;
              }
              *(_BYTE *)(v81 + 24) = 1;
              v78 = v82;
              *((_BYTE *)v82 + 24) = v82 == v79;
              *v84 = 1;
            }
            while (v82 != v79);
          }
          ++v221;
          v91 = 0.0;
        }
        (*(void (**)(uint64_t *, unint64_t))(*v50 + 24))(v50, v72);
        v94 = (char *)__p;
        if (__p != v226)
        {
          while (*(_QWORD *)v94 != v72)
          {
            v94 += 8;
            if (v94 == v226)
            {
              v94 = v226;
              break;
            }
          }
        }
        v95 = v93 + v91;
        if (v94 != v226)
        {
          v96 = v220;
          v97 = &v220;
LABEL_135:
          v98 = v97;
          if (v96)
          {
            while (1)
            {
              v97 = (uint64_t **)v96;
              v99 = v96[4];
              if (v72 < v99)
              {
                v96 = *v97;
                goto LABEL_135;
              }
              if (v99 >= v72)
                break;
              v96 = v97[1];
              if (!v96)
              {
                v98 = v97 + 1;
                goto LABEL_140;
              }
            }
            if (v95 >= *((float *)v97 + 10))
              continue;
          }
          else
          {
LABEL_140:
            v100 = operator new(0x30uLL);
            v100[4] = v72;
            *((_DWORD *)v100 + 10) = 0;
            *v100 = 0;
            v100[1] = 0;
            v100[2] = v97;
            *v98 = v100;
            v101 = v100;
            if (*v219)
            {
              v219 = (uint64_t **)*v219;
              v101 = *v98;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v220, v101);
            ++v221;
            if (v95 >= *((float *)v100 + 10))
              continue;
          }
        }
        v102 = v217;
        v103 = &v217;
LABEL_147:
        v104 = v103;
        if (v102)
        {
          while (1)
          {
            v103 = (uint64_t **)v102;
            v105 = v102[4];
            if (v72 < v105)
            {
              v102 = *v103;
              goto LABEL_147;
            }
            if (v105 >= v72)
              break;
            v102 = v103[1];
            if (!v102)
            {
              v104 = v103 + 1;
              goto LABEL_152;
            }
          }
          v106 = (uint64_t *)v103;
        }
        else
        {
LABEL_152:
          v106 = (uint64_t *)operator new(0x30uLL);
          v106[4] = v72;
          v106[5] = 0;
          *v106 = 0;
          v106[1] = 0;
          v106[2] = (uint64_t)v103;
          *v104 = v106;
          v107 = v106;
          if (*v216)
          {
            v216 = (uint64_t **)*v216;
            v107 = *v104;
          }
          v108 = v217;
          v80 = v107 == v217;
          *((_BYTE *)v107 + 24) = v107 == v217;
          if (!v80)
          {
            do
            {
              v109 = v107[2];
              if (*(_BYTE *)(v109 + 24))
                break;
              v110 = *(uint64_t **)(v109 + 16);
              v111 = *v110;
              if (*v110 == v109)
              {
                v114 = v110[1];
                if (!v114 || (v115 = *(unsigned __int8 *)(v114 + 24), v112 = (_BYTE *)(v114 + 24), v115))
                {
                  if (*(uint64_t **)v109 == v107)
                  {
                    *(_BYTE *)(v109 + 24) = 1;
                    *((_BYTE *)v110 + 24) = 0;
                    v118 = *(_QWORD *)(v109 + 8);
                    *v110 = v118;
                    if (v118)
                      goto LABEL_169;
                  }
                  else
                  {
                    v116 = *(uint64_t **)(v109 + 8);
                    v117 = *v116;
                    *(_QWORD *)(v109 + 8) = *v116;
                    if (v117)
                    {
                      *(_QWORD *)(v117 + 16) = v109;
                      v110 = *(uint64_t **)(v109 + 16);
                    }
                    v116[2] = (uint64_t)v110;
                    *(_QWORD *)(*(_QWORD *)(v109 + 16) + 8 * (**(_QWORD **)(v109 + 16) != v109)) = v116;
                    *v116 = v109;
                    *(_QWORD *)(v109 + 16) = v116;
                    v110 = (uint64_t *)v116[2];
                    v109 = *v110;
                    *((_BYTE *)v116 + 24) = 1;
                    *((_BYTE *)v110 + 24) = 0;
                    v118 = *(_QWORD *)(v109 + 8);
                    *v110 = v118;
                    if (v118)
LABEL_169:
                      *(_QWORD *)(v118 + 16) = v110;
                  }
                  *(_QWORD *)(v109 + 16) = v110[2];
                  *(_QWORD *)(v110[2] + 8 * (*(_QWORD *)v110[2] != (_QWORD)v110)) = v109;
                  *(_QWORD *)(v109 + 8) = v110;
LABEL_176:
                  v110[2] = v109;
                  break;
                }
              }
              else if (!v111 || (v113 = *(unsigned __int8 *)(v111 + 24), v112 = (_BYTE *)(v111 + 24), v113))
              {
                if (*(uint64_t **)v109 == v107)
                {
                  v177 = v107[1];
                  *(_QWORD *)v109 = v177;
                  if (v177)
                  {
                    *(_QWORD *)(v177 + 16) = v109;
                    v110 = *(uint64_t **)(v109 + 16);
                  }
                  v107[2] = (uint64_t)v110;
                  *(_QWORD *)(*(_QWORD *)(v109 + 16) + 8 * (**(_QWORD **)(v109 + 16) != v109)) = v107;
                  v107[1] = v109;
                  *(_QWORD *)(v109 + 16) = v107;
                  v110 = (uint64_t *)v107[2];
                  *((_BYTE *)v107 + 24) = 1;
                  *((_BYTE *)v110 + 24) = 0;
                  v109 = v110[1];
                  v119 = *(uint64_t **)v109;
                  v110[1] = *(_QWORD *)v109;
                  if (v119)
LABEL_174:
                    v119[2] = (uint64_t)v110;
                }
                else
                {
                  *(_BYTE *)(v109 + 24) = 1;
                  *((_BYTE *)v110 + 24) = 0;
                  v109 = v110[1];
                  v119 = *(uint64_t **)v109;
                  v110[1] = *(_QWORD *)v109;
                  if (v119)
                    goto LABEL_174;
                }
                *(_QWORD *)(v109 + 16) = v110[2];
                *(_QWORD *)(v110[2] + 8 * (*(_QWORD *)v110[2] != (_QWORD)v110)) = v109;
                *(_QWORD *)v109 = v110;
                goto LABEL_176;
              }
              *(_BYTE *)(v109 + 24) = 1;
              v107 = v110;
              *((_BYTE *)v110 + 24) = v110 == v108;
              *v112 = 1;
            }
            while (v110 != v108);
          }
          ++v218;
        }
        v106[5] = (uint64_t)v50;
        v120 = v220;
        v121 = &v220;
LABEL_180:
        v122 = v121;
        if (v120)
        {
          while (1)
          {
            v121 = (uint64_t **)v120;
            v123 = v120[4];
            if (v72 < v123)
            {
              v120 = *v121;
              goto LABEL_180;
            }
            if (v123 >= v72)
              break;
            v120 = v121[1];
            if (!v120)
            {
              v122 = v121 + 1;
              goto LABEL_185;
            }
          }
          v124 = v121;
        }
        else
        {
LABEL_185:
          v124 = operator new(0x30uLL);
          v124[4] = v72;
          *((_DWORD *)v124 + 10) = 0;
          *v124 = 0;
          v124[1] = 0;
          v124[2] = v121;
          *v122 = v124;
          v125 = v124;
          if (*v219)
          {
            v219 = (uint64_t **)*v219;
            v125 = *v122;
          }
          v126 = v220;
          v80 = v125 == v220;
          *((_BYTE *)v125 + 24) = v125 == v220;
          if (!v80)
          {
            do
            {
              v127 = v125[2];
              if (*(_BYTE *)(v127 + 24))
                break;
              v128 = *(uint64_t **)(v127 + 16);
              v129 = *v128;
              if (*v128 == v127)
              {
                v132 = v128[1];
                if (!v132 || (v133 = *(unsigned __int8 *)(v132 + 24), v130 = (_BYTE *)(v132 + 24), v133))
                {
                  if (*(uint64_t **)v127 == v125)
                  {
                    *(_BYTE *)(v127 + 24) = 1;
                    *((_BYTE *)v128 + 24) = 0;
                    v136 = *(_QWORD *)(v127 + 8);
                    *v128 = v136;
                    if (v136)
                      goto LABEL_202;
                  }
                  else
                  {
                    v134 = *(uint64_t **)(v127 + 8);
                    v135 = *v134;
                    *(_QWORD *)(v127 + 8) = *v134;
                    if (v135)
                    {
                      *(_QWORD *)(v135 + 16) = v127;
                      v128 = *(uint64_t **)(v127 + 16);
                    }
                    v134[2] = (uint64_t)v128;
                    *(_QWORD *)(*(_QWORD *)(v127 + 16) + 8 * (**(_QWORD **)(v127 + 16) != v127)) = v134;
                    *v134 = v127;
                    *(_QWORD *)(v127 + 16) = v134;
                    v128 = (uint64_t *)v134[2];
                    v127 = *v128;
                    *((_BYTE *)v134 + 24) = 1;
                    *((_BYTE *)v128 + 24) = 0;
                    v136 = *(_QWORD *)(v127 + 8);
                    *v128 = v136;
                    if (v136)
LABEL_202:
                      *(_QWORD *)(v136 + 16) = v128;
                  }
                  *(_QWORD *)(v127 + 16) = v128[2];
                  *(_QWORD *)(v128[2] + 8 * (*(_QWORD *)v128[2] != (_QWORD)v128)) = v127;
                  *(_QWORD *)(v127 + 8) = v128;
LABEL_209:
                  v128[2] = v127;
                  break;
                }
              }
              else if (!v129 || (v131 = *(unsigned __int8 *)(v129 + 24), v130 = (_BYTE *)(v129 + 24), v131))
              {
                if (*(uint64_t **)v127 == v125)
                {
                  v178 = v125[1];
                  *(_QWORD *)v127 = v178;
                  if (v178)
                  {
                    *(_QWORD *)(v178 + 16) = v127;
                    v128 = *(uint64_t **)(v127 + 16);
                  }
                  v125[2] = (uint64_t)v128;
                  *(_QWORD *)(*(_QWORD *)(v127 + 16) + 8 * (**(_QWORD **)(v127 + 16) != v127)) = v125;
                  v125[1] = v127;
                  *(_QWORD *)(v127 + 16) = v125;
                  v128 = (uint64_t *)v125[2];
                  *((_BYTE *)v125 + 24) = 1;
                  *((_BYTE *)v128 + 24) = 0;
                  v127 = v128[1];
                  v137 = *(uint64_t **)v127;
                  v128[1] = *(_QWORD *)v127;
                  if (v137)
LABEL_207:
                    v137[2] = (uint64_t)v128;
                }
                else
                {
                  *(_BYTE *)(v127 + 24) = 1;
                  *((_BYTE *)v128 + 24) = 0;
                  v127 = v128[1];
                  v137 = *(uint64_t **)v127;
                  v128[1] = *(_QWORD *)v127;
                  if (v137)
                    goto LABEL_207;
                }
                *(_QWORD *)(v127 + 16) = v128[2];
                *(_QWORD *)(v128[2] + 8 * (*(_QWORD *)v128[2] != (_QWORD)v128)) = v127;
                *(_QWORD *)v127 = v128;
                goto LABEL_209;
              }
              *(_BYTE *)(v127 + 24) = 1;
              v125 = v128;
              *((_BYTE *)v128 + 24) = v128 == v126;
              *v130 = 1;
            }
            while (v128 != v126);
          }
          ++v221;
        }
        *((float *)v124 + 10) = v95;
        v138 = (*(float (**)(unint64_t, uint64_t *))(*(_QWORD *)v72 + 16))(v72, v48);
        v139 = v223;
        v140 = &v223;
LABEL_213:
        v141 = v140;
        if (v139)
        {
          while (1)
          {
            v140 = (uint64_t **)v139;
            v142 = v139[4];
            if (v72 < v142)
            {
              v139 = *v140;
              goto LABEL_213;
            }
            if (v142 >= v72)
              break;
            v139 = v140[1];
            if (!v139)
            {
              v141 = v140 + 1;
              goto LABEL_218;
            }
          }
          *((float *)v140 + 10) = v138 + v95;
          v157 = (char *)__p;
          v156 = v226;
          v158 = (char *)__p;
          if (__p != v226)
            goto LABEL_245;
        }
        else
        {
LABEL_218:
          v143 = operator new(0x30uLL);
          v143[4] = v72;
          *((_DWORD *)v143 + 10) = 0;
          *v143 = 0;
          v143[1] = 0;
          v143[2] = v140;
          *v141 = v143;
          v144 = v143;
          if (*v222)
          {
            v222 = (uint64_t **)*v222;
            v144 = *v141;
          }
          v145 = v223;
          v80 = v144 == v223;
          *((_BYTE *)v144 + 24) = v144 == v223;
          if (!v80)
          {
            do
            {
              v146 = v144[2];
              if (*(_BYTE *)(v146 + 24))
                break;
              v147 = *(uint64_t **)(v146 + 16);
              v148 = *v147;
              if (*v147 == v146)
              {
                v151 = v147[1];
                if (!v151 || (v152 = *(unsigned __int8 *)(v151 + 24), v149 = (_BYTE *)(v151 + 24), v152))
                {
                  if (*(uint64_t **)v146 == v144)
                  {
                    *(_BYTE *)(v146 + 24) = 1;
                    *((_BYTE *)v147 + 24) = 0;
                    v155 = *(_QWORD *)(v146 + 8);
                    *v147 = v155;
                    if (v155)
                      goto LABEL_235;
                  }
                  else
                  {
                    v153 = *(uint64_t **)(v146 + 8);
                    v154 = *v153;
                    *(_QWORD *)(v146 + 8) = *v153;
                    if (v154)
                    {
                      *(_QWORD *)(v154 + 16) = v146;
                      v147 = *(uint64_t **)(v146 + 16);
                    }
                    v153[2] = (uint64_t)v147;
                    *(_QWORD *)(*(_QWORD *)(v146 + 16) + 8 * (**(_QWORD **)(v146 + 16) != v146)) = v153;
                    *v153 = v146;
                    *(_QWORD *)(v146 + 16) = v153;
                    v147 = (uint64_t *)v153[2];
                    v146 = *v147;
                    *((_BYTE *)v153 + 24) = 1;
                    *((_BYTE *)v147 + 24) = 0;
                    v155 = *(_QWORD *)(v146 + 8);
                    *v147 = v155;
                    if (v155)
LABEL_235:
                      *(_QWORD *)(v155 + 16) = v147;
                  }
                  *(_QWORD *)(v146 + 16) = v147[2];
                  *(_QWORD *)(v147[2] + 8 * (*(_QWORD *)v147[2] != (_QWORD)v147)) = v146;
                  *(_QWORD *)(v146 + 8) = v147;
LABEL_243:
                  v147[2] = v146;
                  break;
                }
              }
              else if (!v148 || (v150 = *(unsigned __int8 *)(v148 + 24), v149 = (_BYTE *)(v148 + 24), v150))
              {
                if (*(uint64_t **)v146 == v144)
                {
                  v179 = v144[1];
                  *(_QWORD *)v146 = v179;
                  if (v179)
                  {
                    *(_QWORD *)(v179 + 16) = v146;
                    v147 = *(uint64_t **)(v146 + 16);
                  }
                  v144[2] = (uint64_t)v147;
                  *(_QWORD *)(*(_QWORD *)(v146 + 16) + 8 * (**(_QWORD **)(v146 + 16) != v146)) = v144;
                  v144[1] = v146;
                  *(_QWORD *)(v146 + 16) = v144;
                  v147 = (uint64_t *)v144[2];
                  *((_BYTE *)v144 + 24) = 1;
                  *((_BYTE *)v147 + 24) = 0;
                  v146 = v147[1];
                  v159 = *(uint64_t **)v146;
                  v147[1] = *(_QWORD *)v146;
                  if (v159)
LABEL_241:
                    v159[2] = (uint64_t)v147;
                }
                else
                {
                  *(_BYTE *)(v146 + 24) = 1;
                  *((_BYTE *)v147 + 24) = 0;
                  v146 = v147[1];
                  v159 = *(uint64_t **)v146;
                  v147[1] = *(_QWORD *)v146;
                  if (v159)
                    goto LABEL_241;
                }
                *(_QWORD *)(v146 + 16) = v147[2];
                *(_QWORD *)(v147[2] + 8 * (*(_QWORD *)v147[2] != (_QWORD)v147)) = v146;
                *(_QWORD *)v146 = v147;
                goto LABEL_243;
              }
              *(_BYTE *)(v146 + 24) = 1;
              v144 = v147;
              *((_BYTE *)v147 + 24) = v147 == v145;
              *v149 = 1;
            }
            while (v147 != v145);
          }
          ++v224;
          *((float *)v143 + 10) = v138 + v95;
          v157 = (char *)__p;
          v156 = v226;
          v158 = (char *)__p;
          if (__p != v226)
          {
LABEL_245:
            while (*(_QWORD *)v158 != v72)
            {
              v158 += 8;
              if (v158 == v156)
              {
                v158 = v156;
                break;
              }
            }
          }
        }
        if (v158 == v156)
        {
          if (v156 < v227)
          {
            *(_QWORD *)v156 = v72;
            v160 = (uint64_t)(v156 + 8);
LABEL_275:
            v226 = (char *)v160;
            makeHeap((uint64_t *)&__p, (uint64_t **)&v222);
            v48 = a2;
            continue;
          }
          v161 = (v156 - v157) >> 3;
          v162 = v161 + 1;
          if ((unint64_t)(v161 + 1) >> 61)
            _ZNKSt3__16vectorI12GKCRTreeNodeI8NSObjectDv2_fENS_9allocatorIS4_EEE20__throw_length_errorB8ne180100Ev();
          v163 = v227 - v157;
          if ((v227 - v157) >> 2 > v162)
            v162 = v163 >> 2;
          if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8)
            v164 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v164 = v162;
          if (v164)
          {
            if (v164 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v165 = operator new(8 * v164);
            v166 = (unint64_t *)&v165[8 * v161];
            *v166 = v72;
            v160 = (uint64_t)(v166 + 1);
            if (v157 != v156)
              goto LABEL_260;
LABEL_273:
            __p = v166;
            v226 = (char *)v160;
            v227 = &v165[8 * v164];
            if (!v157)
              goto LABEL_275;
          }
          else
          {
            v165 = 0;
            v166 = (unint64_t *)(8 * v161);
            *(_QWORD *)(8 * v161) = v72;
            v160 = 8 * v161 + 8;
            if (v157 == v156)
              goto LABEL_273;
LABEL_260:
            v167 = v156 - 8 - v157;
            if (v167 < 0x58)
              goto LABEL_357;
            if ((unint64_t)(v157 - v165) < 0x20)
              goto LABEL_357;
            v168 = (v167 >> 3) + 1;
            v169 = 8 * (v168 & 0x3FFFFFFFFFFFFFFCLL);
            v170 = &v156[-v169];
            v166 = (unint64_t *)((char *)v166 - v169);
            v171 = &v165[8 * v161 - 16];
            v172 = v156 - 16;
            v173 = v168 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v174 = *(_OWORD *)v172;
              *(v171 - 1) = *((_OWORD *)v172 - 1);
              *v171 = v174;
              v171 -= 2;
              v172 -= 32;
              v173 -= 4;
            }
            while (v173);
            v156 = v170;
            if (v168 != (v168 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_357:
              do
              {
                v175 = *((_QWORD *)v156 - 1);
                v156 -= 8;
                *--v166 = v175;
              }
              while (v156 != v157);
            }
            v157 = (char *)__p;
            __p = v166;
            v226 = (char *)v160;
            v227 = &v165[8 * v164];
            if (!v157)
              goto LABEL_275;
          }
          operator delete(v157);
          goto LABEL_275;
        }
      }
    }
    v47 = v226;
    if (__p != v226)
      continue;
    break;
  }
LABEL_339:
  std::__tree<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::__map_value_compare<p2t::Triangle *,std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::less<p2t::Triangle *>,true>,std::allocator<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>>>::destroy((uint64_t)&v216, v217);
  std::__tree<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::__map_value_compare<p2t::Triangle *,std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::less<p2t::Triangle *>,true>,std::allocator<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>>>::destroy((uint64_t)&v219, v220);
  std::__tree<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::__map_value_compare<p2t::Triangle *,std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::less<p2t::Triangle *>,true>,std::allocator<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>>>::destroy((uint64_t)&v222, v223);
  if (__p)
  {
    v226 = (char *)__p;
    operator delete(__p);
  }
  if (v228)
    operator delete(v228);
}

void sub_227BB6D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16, uint64_t a17, char a18, _QWORD *a19, uint64_t a20,char a21,_QWORD *a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;
  void *v27;

  std::__tree<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::__map_value_compare<p2t::Triangle *,std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::less<p2t::Triangle *>,true>,std::allocator<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>>>::destroy((uint64_t)&a15, a16);
  std::__tree<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::__map_value_compare<p2t::Triangle *,std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::less<p2t::Triangle *>,true>,std::allocator<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>>>::destroy((uint64_t)&a18, a19);
  std::__tree<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::__map_value_compare<p2t::Triangle *,std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>,std::less<p2t::Triangle *>,true>,std::allocator<std::__value_type<p2t::Triangle *,GKTriangleGraphNodes>>>::destroy((uint64_t)&a21, a22);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
    v27 = *(void **)(v25 - 128);
    if (!v27)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v27 = *(void **)(v25 - 128);
    if (!v27)
      goto LABEL_3;
  }
  *(_QWORD *)(v25 - 120) = v27;
  operator delete(v27);
  _Unwind_Resume(a1);
}

id GKFindPath(GKGraphNode *a1, GKGraphNode *a2)
{
  GKGraphNode *v3;
  _QWORD *v4;
  uint64_t *v5;
  GKGraphNode *v6;
  uint64_t **v7;
  uint64_t **v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  void *v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  void *v25;
  id *v26;
  id *v27;
  uint64_t *v28;
  id *v29;
  id *v30;
  id *v31;
  id *v32;
  id *v33;
  void *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id *v39;
  uint64_t *v40;
  id v41;
  uint64_t **v42;
  uint64_t **v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  BOOL v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  _BYTE *v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  uint64_t *v59;
  float v60;
  id *v61;
  id v62;
  float v63;
  uint64_t *v64;
  uint64_t **v65;
  uint64_t **v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  id v70;
  uint64_t *v71;
  uint64_t **v72;
  uint64_t **v73;
  unint64_t v74;
  void *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _BYTE *v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  id v90;
  uint64_t **v91;
  uint64_t **v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  _BYTE *v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  float v108;
  float v109;
  uint64_t *v110;
  id v111;
  uint64_t **v112;
  uint64_t **v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  _BYTE *v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  id *v128;
  id *v129;
  uint64_t *v130;
  id *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  void *v137;
  GKGraphNode *v138;
  void *v139;
  id v140;
  uint64_t *v141;
  uint64_t **v142;
  uint64_t **v143;
  unint64_t v144;
  void *v145;
  uint64_t *v146;
  uint64_t *v147;
  void *v148;
  id v149;
  id *v150;
  id *v151;
  void *v152;
  void *v153;
  id *v154;
  id *v155;
  void *v156;
  void *v157;
  GKGraphNode *v159;
  id v160;
  id obj;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t **v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t **v168;
  uint64_t *v169;
  uint64_t v170;
  void *__p;
  id *v172;
  unint64_t v173;
  void *v174;
  id *v175;
  unint64_t v176;
  GKGraphNode *v177;

  v3 = a1;
  v177 = v3;
  v174 = 0;
  v175 = 0;
  v176 = 0;
  __p = 0;
  v172 = 0;
  v173 = 0;
  v169 = 0;
  v170 = 0;
  v159 = a2;
  v167 = 0;
  v168 = &v169;
  v165 = &v166;
  v166 = 0;
  v163 = 0;
  v164 = 0;
  v162 = &v163;
  v4 = operator new(0x30uLL);
  v4[4] = v3;
  *((_DWORD *)v4 + 10) = 0;
  *v4 = 0;
  v4[1] = 0;
  v4[2] = &v166;
  v166 = v4;
  if (*v165)
    v165 = (uint64_t **)*v165;
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v4, v4);
  ++v167;
  *((_DWORD *)v4 + 10) = 0;
  v5 = v169;
  v6 = v177;
  v7 = &v169;
LABEL_5:
  v8 = v7;
  if (v5)
  {
    while (1)
    {
      v7 = (uint64_t **)v5;
      v9 = v5[4];
      if ((unint64_t)v177 < v9)
      {
        v5 = *v7;
        goto LABEL_5;
      }
      if (v9 >= (unint64_t)v177)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v8 = v7 + 1;
        goto LABEL_10;
      }
    }
    *((_DWORD *)v7 + 10) = 0;
    v12 = v163;
    v13 = &v163;
    v14 = &v163;
    if (v163)
      goto LABEL_17;
    goto LABEL_21;
  }
LABEL_10:
  v10 = operator new(0x30uLL);
  v10[4] = v6;
  *((_DWORD *)v10 + 10) = 0;
  *v10 = 0;
  v10[1] = 0;
  v10[2] = v7;
  *v8 = v10;
  v11 = v10;
  if (*v168)
  {
    v168 = (uint64_t **)*v168;
    v11 = *v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v169, v11);
  ++v170;
  v6 = v177;
  *((_DWORD *)v10 + 10) = 0;
  v12 = v163;
  v13 = &v163;
  v14 = &v163;
  if (!v163)
  {
LABEL_21:
    v16 = (uint64_t *)operator new(0x30uLL);
    v16[4] = (uint64_t)v6;
    v16[5] = 0;
    *v16 = 0;
    v16[1] = 0;
    v16[2] = (uint64_t)v14;
    *v13 = v16;
    v17 = v16;
    if (*v162)
    {
      v162 = (uint64_t **)*v162;
      v17 = *v13;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v163, v17);
    ++v164;
    goto LABEL_25;
  }
  while (1)
  {
LABEL_17:
    while (1)
    {
      v14 = (uint64_t **)v12;
      v15 = v12[4];
      if ((unint64_t)v6 >= v15)
        break;
      v12 = *v14;
      v13 = v14;
      if (!*v14)
        goto LABEL_21;
    }
    if (v15 >= (unint64_t)v6)
      break;
    v12 = v14[1];
    if (!v12)
    {
      v13 = v14 + 1;
      goto LABEL_21;
    }
  }
  v16 = (uint64_t *)v14;
LABEL_25:
  v18 = (void *)v16[5];
  v16[5] = 0;

  v19 = v163;
  v20 = &v163;
  v21 = &v163;
  if (v163)
  {
    while (1)
    {
      while (1)
      {
        v21 = (uint64_t **)v19;
        v22 = v19[4];
        if (v22 <= (unint64_t)v159)
          break;
        v19 = *v21;
        v20 = v21;
        if (!*v21)
          goto LABEL_32;
      }
      if (v22 >= (unint64_t)v159)
        break;
      v19 = v21[1];
      if (!v19)
      {
        v20 = v21 + 1;
        goto LABEL_32;
      }
    }
    v28 = v21[5];
    v21[5] = 0;

    v26 = v172;
    if ((unint64_t)v172 >= v173)
      goto LABEL_37;
LABEL_35:
    *v26 = v177;
    v27 = v26 + 1;
    goto LABEL_38;
  }
LABEL_32:
  v23 = (uint64_t *)operator new(0x30uLL);
  v23[4] = (uint64_t)v159;
  v23[5] = 0;
  *v23 = 0;
  v23[1] = 0;
  v23[2] = (uint64_t)v21;
  *v20 = v23;
  v24 = v23;
  if (*v162)
  {
    v162 = (uint64_t **)*v162;
    v24 = *v20;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v163, v24);
  ++v164;
  v25 = (void *)v23[5];
  v23[5] = 0;

  v26 = v172;
  if ((unint64_t)v172 < v173)
    goto LABEL_35;
LABEL_37:
  v27 = (id *)std::vector<NSObject * {__strong}>::__push_back_slow_path<NSObject * const {__strong}&>(&__p, (id *)&v177);
LABEL_38:
  v172 = v27;
  makeHeap((id **)&__p, (uint64_t **)&v168);
  v29 = v172;
  if (__p == v172)
  {
LABEL_242:
    objc_msgSend(MEMORY[0x24BDBCE30], "array");
    v136 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    while (1)
    {
      obj = *(v29 - 1);
      if (obj == v159)
        break;
      v30 = v172 - 1;

      v172 = v30;
      makeHeap((id **)&__p, (uint64_t **)&v168);
      v31 = (id *)v174;
      v32 = v175;
      if (v174 != v175)
      {
        while (*v31 != obj)
        {
          if (++v31 == v175)
          {
            v31 = v175;
            break;
          }
        }
      }
      if (v31 == v175)
      {
        if ((unint64_t)v175 >= v176)
        {
          v33 = (id *)std::vector<NSObject * {__strong}>::__push_back_slow_path<NSObject * const {__strong}&>(&v174, &obj);
        }
        else
        {
          *v32 = obj;
          v33 = v32 + 1;
        }
        v175 = v33;
      }
      objc_msgSend(obj, "connectedNodes");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v35 = objc_msgSend(v34, "count");

      v36 = v35;
      if (v35)
      {
        v37 = 0;
        while (1)
        {
          objc_msgSend(obj, "connectedNodes");
          v38 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v38, "objectAtIndexedSubscript:", v37);
          v160 = (id)objc_claimAutoreleasedReturnValue();

          v39 = (id *)v174;
          if (v174 != v175)
          {
            while (*v39 != v160)
            {
              if (++v39 == v175)
              {
                v39 = v175;
                break;
              }
            }
          }
          if (v39 != v175)
            goto LABEL_54;
          v40 = v166;
          v41 = obj;
          v42 = &v166;
          v43 = &v166;
          if (v166)
          {
            while (1)
            {
              while (1)
              {
                v43 = (uint64_t **)v40;
                v44 = v40[4];
                if ((unint64_t)obj >= v44)
                  break;
                v40 = *v43;
                v42 = v43;
                if (!*v43)
                  goto LABEL_66;
              }
              if (v44 >= (unint64_t)obj)
                break;
              v40 = v43[1];
              if (!v40)
              {
                v42 = v43 + 1;
                goto LABEL_66;
              }
            }
            v58 = *((float *)v43 + 10);
          }
          else
          {
LABEL_66:
            v45 = (uint64_t *)operator new(0x30uLL);
            v45[4] = (uint64_t)v41;
            *((_DWORD *)v45 + 10) = 0;
            *v45 = 0;
            v45[1] = 0;
            v45[2] = (uint64_t)v43;
            *v42 = v45;
            if (*v165)
            {
              v165 = (uint64_t **)*v165;
              v45 = *v42;
            }
            v46 = v166;
            v47 = v45 == v166;
            *((_BYTE *)v45 + 24) = v45 == v166;
            if (!v47)
            {
              do
              {
                v48 = v45[2];
                if (*(_BYTE *)(v48 + 24))
                  break;
                v49 = *(uint64_t **)(v48 + 16);
                v50 = *v49;
                if (*v49 == v48)
                {
                  v53 = v49[1];
                  if (!v53 || (v54 = *(unsigned __int8 *)(v53 + 24), v51 = (_BYTE *)(v53 + 24), v54))
                  {
                    if (*(uint64_t **)v48 == v45)
                    {
                      *(_BYTE *)(v48 + 24) = 1;
                      *((_BYTE *)v49 + 24) = 0;
                      v57 = *(_QWORD *)(v48 + 8);
                      *v49 = v57;
                      if (v57)
                        goto LABEL_83;
                    }
                    else
                    {
                      v55 = *(uint64_t **)(v48 + 8);
                      v56 = *v55;
                      *(_QWORD *)(v48 + 8) = *v55;
                      if (v56)
                      {
                        *(_QWORD *)(v56 + 16) = v48;
                        v49 = *(uint64_t **)(v48 + 16);
                      }
                      v55[2] = (uint64_t)v49;
                      *(_QWORD *)(*(_QWORD *)(v48 + 16) + 8 * (**(_QWORD **)(v48 + 16) != v48)) = v55;
                      *v55 = v48;
                      *(_QWORD *)(v48 + 16) = v55;
                      v49 = (uint64_t *)v55[2];
                      v48 = *v49;
                      *((_BYTE *)v55 + 24) = 1;
                      *((_BYTE *)v49 + 24) = 0;
                      v57 = *(_QWORD *)(v48 + 8);
                      *v49 = v57;
                      if (v57)
LABEL_83:
                        *(_QWORD *)(v57 + 16) = v49;
                    }
                    *(_QWORD *)(v48 + 16) = v49[2];
                    *(_QWORD *)(v49[2] + 8 * (*(_QWORD *)v49[2] != (_QWORD)v49)) = v48;
                    *(_QWORD *)(v48 + 8) = v49;
LABEL_90:
                    v49[2] = v48;
                    break;
                  }
                }
                else if (!v50 || (v52 = *(unsigned __int8 *)(v50 + 24), v51 = (_BYTE *)(v50 + 24), v52))
                {
                  if (*(uint64_t **)v48 == v45)
                  {
                    v132 = v45[1];
                    *(_QWORD *)v48 = v132;
                    if (v132)
                    {
                      *(_QWORD *)(v132 + 16) = v48;
                      v49 = *(uint64_t **)(v48 + 16);
                    }
                    v45[2] = (uint64_t)v49;
                    *(_QWORD *)(*(_QWORD *)(v48 + 16) + 8 * (**(_QWORD **)(v48 + 16) != v48)) = v45;
                    v45[1] = v48;
                    *(_QWORD *)(v48 + 16) = v45;
                    v49 = (uint64_t *)v45[2];
                    *((_BYTE *)v45 + 24) = 1;
                    *((_BYTE *)v49 + 24) = 0;
                    v48 = v49[1];
                    v59 = *(uint64_t **)v48;
                    v49[1] = *(_QWORD *)v48;
                    if (v59)
LABEL_88:
                      v59[2] = (uint64_t)v49;
                  }
                  else
                  {
                    *(_BYTE *)(v48 + 24) = 1;
                    *((_BYTE *)v49 + 24) = 0;
                    v48 = v49[1];
                    v59 = *(uint64_t **)v48;
                    v49[1] = *(_QWORD *)v48;
                    if (v59)
                      goto LABEL_88;
                  }
                  *(_QWORD *)(v48 + 16) = v49[2];
                  *(_QWORD *)(v49[2] + 8 * (*(_QWORD *)v49[2] != (_QWORD)v49)) = v48;
                  *(_QWORD *)v48 = v49;
                  goto LABEL_90;
                }
                *(_BYTE *)(v48 + 24) = 1;
                v45 = v49;
                *((_BYTE *)v49 + 24) = v49 == v46;
                *v51 = 1;
              }
              while (v49 != v46);
            }
            ++v167;
            v58 = 0.0;
            v41 = obj;
          }
          objc_msgSend(v41, "costToNode:", v160);
          v61 = (id *)__p;
          v62 = v160;
          if (__p != v172)
          {
            while (*v61 != v160)
            {
              if (++v61 == v172)
              {
                v61 = v172;
                break;
              }
            }
          }
          v63 = v60 + v58;
          if (v61 == v172)
            goto LABEL_110;
          v64 = v166;
          v65 = &v166;
          v66 = &v166;
          if (v166)
            break;
LABEL_104:
          v68 = operator new(0x30uLL);
          v68[4] = v62;
          *((_DWORD *)v68 + 10) = 0;
          *v68 = 0;
          v68[1] = 0;
          v68[2] = v66;
          *v65 = v68;
          v69 = v68;
          if (*v165)
          {
            v165 = (uint64_t **)*v165;
            v69 = *v65;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v166, v69);
          ++v167;
          if (v63 < *((float *)v68 + 10))
            goto LABEL_109;
LABEL_54:

          if (++v37 == v36)
            goto LABEL_40;
        }
        while (1)
        {
          while (1)
          {
            v66 = (uint64_t **)v64;
            v67 = v64[4];
            if ((unint64_t)v160 >= v67)
              break;
            v64 = *v66;
            v65 = v66;
            if (!*v66)
              goto LABEL_104;
          }
          if (v67 >= (unint64_t)v160)
            break;
          v64 = v66[1];
          if (!v64)
          {
            v65 = v66 + 1;
            goto LABEL_104;
          }
        }
        if (v63 >= *((float *)v66 + 10))
          goto LABEL_54;
LABEL_109:
        v62 = v160;
LABEL_110:
        v70 = obj;
        v71 = v163;
        v72 = &v163;
        v73 = &v163;
        if (v163)
        {
          while (1)
          {
            while (1)
            {
              v73 = (uint64_t **)v71;
              v74 = v71[4];
              if ((unint64_t)v62 >= v74)
                break;
              v71 = *v73;
              v72 = v73;
              if (!*v73)
                goto LABEL_117;
            }
            if (v74 >= (unint64_t)v62)
              break;
            v71 = v73[1];
            if (!v71)
            {
              v72 = v73 + 1;
              goto LABEL_117;
            }
          }
          v75 = v73;
        }
        else
        {
LABEL_117:
          v75 = operator new(0x30uLL);
          *((_QWORD *)v75 + 4) = v62;
          *((_QWORD *)v75 + 5) = 0;
          *(_QWORD *)v75 = 0;
          *((_QWORD *)v75 + 1) = 0;
          *((_QWORD *)v75 + 2) = v73;
          *v72 = (uint64_t *)v75;
          v76 = (uint64_t *)v75;
          if (*v162)
          {
            v162 = (uint64_t **)*v162;
            v76 = *v72;
          }
          v77 = v163;
          v47 = v76 == v163;
          *((_BYTE *)v76 + 24) = v76 == v163;
          if (!v47)
          {
            do
            {
              v78 = v76[2];
              if (*(_BYTE *)(v78 + 24))
                break;
              v79 = *(uint64_t **)(v78 + 16);
              v80 = *v79;
              if (*v79 == v78)
              {
                v83 = v79[1];
                if (!v83 || (v84 = *(unsigned __int8 *)(v83 + 24), v81 = (_BYTE *)(v83 + 24), v84))
                {
                  if (*(uint64_t **)v78 == v76)
                  {
                    *(_BYTE *)(v78 + 24) = 1;
                    *((_BYTE *)v79 + 24) = 0;
                    v87 = *(_QWORD *)(v78 + 8);
                    *v79 = v87;
                    if (v87)
                      goto LABEL_134;
                  }
                  else
                  {
                    v85 = *(uint64_t **)(v78 + 8);
                    v86 = *v85;
                    *(_QWORD *)(v78 + 8) = *v85;
                    if (v86)
                    {
                      *(_QWORD *)(v86 + 16) = v78;
                      v79 = *(uint64_t **)(v78 + 16);
                    }
                    v85[2] = (uint64_t)v79;
                    *(_QWORD *)(*(_QWORD *)(v78 + 16) + 8 * (**(_QWORD **)(v78 + 16) != v78)) = v85;
                    *v85 = v78;
                    *(_QWORD *)(v78 + 16) = v85;
                    v79 = (uint64_t *)v85[2];
                    v78 = *v79;
                    *((_BYTE *)v85 + 24) = 1;
                    *((_BYTE *)v79 + 24) = 0;
                    v87 = *(_QWORD *)(v78 + 8);
                    *v79 = v87;
                    if (v87)
LABEL_134:
                      *(_QWORD *)(v87 + 16) = v79;
                  }
                  *(_QWORD *)(v78 + 16) = v79[2];
                  *(_QWORD *)(v79[2] + 8 * (*(_QWORD *)v79[2] != (_QWORD)v79)) = v78;
                  *(_QWORD *)(v78 + 8) = v79;
LABEL_141:
                  v79[2] = v78;
                  break;
                }
              }
              else if (!v80 || (v82 = *(unsigned __int8 *)(v80 + 24), v81 = (_BYTE *)(v80 + 24), v82))
              {
                if (*(uint64_t **)v78 == v76)
                {
                  v133 = v76[1];
                  *(_QWORD *)v78 = v133;
                  if (v133)
                  {
                    *(_QWORD *)(v133 + 16) = v78;
                    v79 = *(uint64_t **)(v78 + 16);
                  }
                  v76[2] = (uint64_t)v79;
                  *(_QWORD *)(*(_QWORD *)(v78 + 16) + 8 * (**(_QWORD **)(v78 + 16) != v78)) = v76;
                  v76[1] = v78;
                  *(_QWORD *)(v78 + 16) = v76;
                  v79 = (uint64_t *)v76[2];
                  *((_BYTE *)v76 + 24) = 1;
                  *((_BYTE *)v79 + 24) = 0;
                  v78 = v79[1];
                  v88 = *(uint64_t **)v78;
                  v79[1] = *(_QWORD *)v78;
                  if (v88)
LABEL_139:
                    v88[2] = (uint64_t)v79;
                }
                else
                {
                  *(_BYTE *)(v78 + 24) = 1;
                  *((_BYTE *)v79 + 24) = 0;
                  v78 = v79[1];
                  v88 = *(uint64_t **)v78;
                  v79[1] = *(_QWORD *)v78;
                  if (v88)
                    goto LABEL_139;
                }
                *(_QWORD *)(v78 + 16) = v79[2];
                *(_QWORD *)(v79[2] + 8 * (*(_QWORD *)v79[2] != (_QWORD)v79)) = v78;
                *(_QWORD *)v78 = v79;
                goto LABEL_141;
              }
              *(_BYTE *)(v78 + 24) = 1;
              v76 = v79;
              *((_BYTE *)v79 + 24) = v79 == v77;
              *v81 = 1;
            }
            while (v79 != v77);
          }
          ++v164;
        }
        objc_storeStrong((id *)v75 + 5, v70);
        v89 = v166;
        v90 = v160;
        v91 = &v166;
        v92 = &v166;
        if (v166)
        {
          while (1)
          {
            while (1)
            {
              v92 = (uint64_t **)v89;
              v93 = v89[4];
              if ((unint64_t)v160 >= v93)
                break;
              v89 = *v92;
              v91 = v92;
              if (!*v92)
                goto LABEL_150;
            }
            if (v93 >= (unint64_t)v160)
              break;
            v89 = v92[1];
            if (!v89)
            {
              v91 = v92 + 1;
              goto LABEL_150;
            }
          }
          v94 = v92;
        }
        else
        {
LABEL_150:
          v94 = operator new(0x30uLL);
          v94[4] = v90;
          *((_DWORD *)v94 + 10) = 0;
          *v94 = 0;
          v94[1] = 0;
          v94[2] = v92;
          *v91 = v94;
          v95 = v94;
          if (*v165)
          {
            v165 = (uint64_t **)*v165;
            v95 = *v91;
          }
          v96 = v166;
          v47 = v95 == v166;
          *((_BYTE *)v95 + 24) = v95 == v166;
          if (!v47)
          {
            do
            {
              v97 = v95[2];
              if (*(_BYTE *)(v97 + 24))
                break;
              v98 = *(uint64_t **)(v97 + 16);
              v99 = *v98;
              if (*v98 == v97)
              {
                v102 = v98[1];
                if (!v102 || (v103 = *(unsigned __int8 *)(v102 + 24), v100 = (_BYTE *)(v102 + 24), v103))
                {
                  if (*(uint64_t **)v97 == v95)
                  {
                    *(_BYTE *)(v97 + 24) = 1;
                    *((_BYTE *)v98 + 24) = 0;
                    v106 = *(_QWORD *)(v97 + 8);
                    *v98 = v106;
                    if (v106)
                      goto LABEL_167;
                  }
                  else
                  {
                    v104 = *(uint64_t **)(v97 + 8);
                    v105 = *v104;
                    *(_QWORD *)(v97 + 8) = *v104;
                    if (v105)
                    {
                      *(_QWORD *)(v105 + 16) = v97;
                      v98 = *(uint64_t **)(v97 + 16);
                    }
                    v104[2] = (uint64_t)v98;
                    *(_QWORD *)(*(_QWORD *)(v97 + 16) + 8 * (**(_QWORD **)(v97 + 16) != v97)) = v104;
                    *v104 = v97;
                    *(_QWORD *)(v97 + 16) = v104;
                    v98 = (uint64_t *)v104[2];
                    v97 = *v98;
                    *((_BYTE *)v104 + 24) = 1;
                    *((_BYTE *)v98 + 24) = 0;
                    v106 = *(_QWORD *)(v97 + 8);
                    *v98 = v106;
                    if (v106)
LABEL_167:
                      *(_QWORD *)(v106 + 16) = v98;
                  }
                  *(_QWORD *)(v97 + 16) = v98[2];
                  *(_QWORD *)(v98[2] + 8 * (*(_QWORD *)v98[2] != (_QWORD)v98)) = v97;
                  *(_QWORD *)(v97 + 8) = v98;
LABEL_174:
                  v98[2] = v97;
                  break;
                }
              }
              else if (!v99 || (v101 = *(unsigned __int8 *)(v99 + 24), v100 = (_BYTE *)(v99 + 24), v101))
              {
                if (*(uint64_t **)v97 == v95)
                {
                  v134 = v95[1];
                  *(_QWORD *)v97 = v134;
                  if (v134)
                  {
                    *(_QWORD *)(v134 + 16) = v97;
                    v98 = *(uint64_t **)(v97 + 16);
                  }
                  v95[2] = (uint64_t)v98;
                  *(_QWORD *)(*(_QWORD *)(v97 + 16) + 8 * (**(_QWORD **)(v97 + 16) != v97)) = v95;
                  v95[1] = v97;
                  *(_QWORD *)(v97 + 16) = v95;
                  v98 = (uint64_t *)v95[2];
                  *((_BYTE *)v95 + 24) = 1;
                  *((_BYTE *)v98 + 24) = 0;
                  v97 = v98[1];
                  v107 = *(uint64_t **)v97;
                  v98[1] = *(_QWORD *)v97;
                  if (v107)
LABEL_172:
                    v107[2] = (uint64_t)v98;
                }
                else
                {
                  *(_BYTE *)(v97 + 24) = 1;
                  *((_BYTE *)v98 + 24) = 0;
                  v97 = v98[1];
                  v107 = *(uint64_t **)v97;
                  v98[1] = *(_QWORD *)v97;
                  if (v107)
                    goto LABEL_172;
                }
                *(_QWORD *)(v97 + 16) = v98[2];
                *(_QWORD *)(v98[2] + 8 * (*(_QWORD *)v98[2] != (_QWORD)v98)) = v97;
                *(_QWORD *)v97 = v98;
                goto LABEL_174;
              }
              *(_BYTE *)(v97 + 24) = 1;
              v95 = v98;
              *((_BYTE *)v98 + 24) = v98 == v96;
              *v100 = 1;
            }
            while (v98 != v96);
          }
          ++v167;
          v90 = v160;
        }
        *((float *)v94 + 10) = v63;
        objc_msgSend(v90, "estimatedCostToNode:", v159);
        v109 = v108;
        v110 = v169;
        v111 = v160;
        v112 = &v169;
LABEL_178:
        v113 = v112;
        if (v110)
        {
          while (1)
          {
            v112 = (uint64_t **)v110;
            v114 = v110[4];
            if ((unint64_t)v160 < v114)
            {
              v110 = *v112;
              goto LABEL_178;
            }
            if (v114 >= (unint64_t)v160)
              break;
            v110 = v112[1];
            if (!v110)
            {
              v113 = v112 + 1;
              goto LABEL_183;
            }
          }
          *((float *)v112 + 10) = v108 + v63;
          v128 = (id *)__p;
          v129 = v172;
          if (__p != v172)
            goto LABEL_210;
        }
        else
        {
LABEL_183:
          v115 = operator new(0x30uLL);
          v115[4] = v111;
          *((_DWORD *)v115 + 10) = 0;
          *v115 = 0;
          v115[1] = 0;
          v115[2] = v112;
          *v113 = v115;
          v116 = v115;
          if (*v168)
          {
            v168 = (uint64_t **)*v168;
            v116 = *v113;
          }
          v117 = v169;
          v47 = v116 == v169;
          *((_BYTE *)v116 + 24) = v116 == v169;
          if (!v47)
          {
            do
            {
              v118 = v116[2];
              if (*(_BYTE *)(v118 + 24))
                break;
              v119 = *(uint64_t **)(v118 + 16);
              v120 = *v119;
              if (*v119 == v118)
              {
                v123 = v119[1];
                if (!v123 || (v124 = *(unsigned __int8 *)(v123 + 24), v121 = (_BYTE *)(v123 + 24), v124))
                {
                  if (*(uint64_t **)v118 == v116)
                  {
                    *(_BYTE *)(v118 + 24) = 1;
                    *((_BYTE *)v119 + 24) = 0;
                    v127 = *(_QWORD *)(v118 + 8);
                    *v119 = v127;
                    if (v127)
                      goto LABEL_200;
                  }
                  else
                  {
                    v125 = *(uint64_t **)(v118 + 8);
                    v126 = *v125;
                    *(_QWORD *)(v118 + 8) = *v125;
                    if (v126)
                    {
                      *(_QWORD *)(v126 + 16) = v118;
                      v119 = *(uint64_t **)(v118 + 16);
                    }
                    v125[2] = (uint64_t)v119;
                    *(_QWORD *)(*(_QWORD *)(v118 + 16) + 8 * (**(_QWORD **)(v118 + 16) != v118)) = v125;
                    *v125 = v118;
                    *(_QWORD *)(v118 + 16) = v125;
                    v119 = (uint64_t *)v125[2];
                    v118 = *v119;
                    *((_BYTE *)v125 + 24) = 1;
                    *((_BYTE *)v119 + 24) = 0;
                    v127 = *(_QWORD *)(v118 + 8);
                    *v119 = v127;
                    if (v127)
LABEL_200:
                      *(_QWORD *)(v127 + 16) = v119;
                  }
                  *(_QWORD *)(v118 + 16) = v119[2];
                  *(_QWORD *)(v119[2] + 8 * (*(_QWORD *)v119[2] != (_QWORD)v119)) = v118;
                  *(_QWORD *)(v118 + 8) = v119;
LABEL_208:
                  v119[2] = v118;
                  break;
                }
              }
              else if (!v120 || (v122 = *(unsigned __int8 *)(v120 + 24), v121 = (_BYTE *)(v120 + 24), v122))
              {
                if (*(uint64_t **)v118 == v116)
                {
                  v135 = v116[1];
                  *(_QWORD *)v118 = v135;
                  if (v135)
                  {
                    *(_QWORD *)(v135 + 16) = v118;
                    v119 = *(uint64_t **)(v118 + 16);
                  }
                  v116[2] = (uint64_t)v119;
                  *(_QWORD *)(*(_QWORD *)(v118 + 16) + 8 * (**(_QWORD **)(v118 + 16) != v118)) = v116;
                  v116[1] = v118;
                  *(_QWORD *)(v118 + 16) = v116;
                  v119 = (uint64_t *)v116[2];
                  *((_BYTE *)v116 + 24) = 1;
                  *((_BYTE *)v119 + 24) = 0;
                  v118 = v119[1];
                  v130 = *(uint64_t **)v118;
                  v119[1] = *(_QWORD *)v118;
                  if (v130)
LABEL_206:
                    v130[2] = (uint64_t)v119;
                }
                else
                {
                  *(_BYTE *)(v118 + 24) = 1;
                  *((_BYTE *)v119 + 24) = 0;
                  v118 = v119[1];
                  v130 = *(uint64_t **)v118;
                  v119[1] = *(_QWORD *)v118;
                  if (v130)
                    goto LABEL_206;
                }
                *(_QWORD *)(v118 + 16) = v119[2];
                *(_QWORD *)(v119[2] + 8 * (*(_QWORD *)v119[2] != (_QWORD)v119)) = v118;
                *(_QWORD *)v118 = v119;
                goto LABEL_208;
              }
              *(_BYTE *)(v118 + 24) = 1;
              v116 = v119;
              *((_BYTE *)v119 + 24) = v119 == v117;
              *v121 = 1;
            }
            while (v119 != v117);
          }
          ++v170;
          *((float *)v115 + 10) = v109 + v63;
          v128 = (id *)__p;
          v129 = v172;
          if (__p != v172)
          {
LABEL_210:
            while (*v128 != v160)
            {
              if (++v128 == v129)
              {
                v128 = v129;
                break;
              }
            }
          }
        }
        if (v128 == v129)
        {
          if ((unint64_t)v129 >= v173)
          {
            v131 = (id *)std::vector<NSObject * {__strong}>::__push_back_slow_path<NSObject * const {__strong}&>(&__p, &v160);
          }
          else
          {
            *v129 = v160;
            v131 = v129 + 1;
          }
          v172 = v131;
          makeHeap((id **)&__p, (uint64_t **)&v168);
        }
        goto LABEL_54;
      }
LABEL_40:

      v29 = v172;
      if (__p == v172)
        goto LABEL_242;
    }

    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v137 = (void *)objc_claimAutoreleasedReturnValue();
    v138 = v159;
    if (v138)
    {
      v139 = v138;
      do
      {
        while (1)
        {
          objc_msgSend(v137, "addObject:", v139);
          v141 = v163;
          v142 = &v163;
          v143 = &v163;
          if (v163)
            break;
LABEL_253:
          v145 = operator new(0x30uLL);
          *((_QWORD *)v145 + 4) = v139;
          *((_QWORD *)v145 + 5) = 0;
          *(_QWORD *)v145 = 0;
          *((_QWORD *)v145 + 1) = 0;
          *((_QWORD *)v145 + 2) = v143;
          *v142 = (uint64_t *)v145;
          v146 = (uint64_t *)v145;
          if (*v162)
          {
            v162 = (uint64_t **)*v162;
            v146 = *v142;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v163, v146);
          ++v164;
          v140 = *((id *)v145 + 5);

          v139 = v140;
          if (!v140)
            goto LABEL_256;
        }
        while (1)
        {
          while (1)
          {
            v143 = (uint64_t **)v141;
            v144 = v141[4];
            if ((unint64_t)v139 >= v144)
              break;
            v141 = *v143;
            v142 = v143;
            if (!*v143)
              goto LABEL_253;
          }
          if (v144 >= (unint64_t)v139)
            break;
          v141 = v143[1];
          if (!v141)
          {
            v142 = v143 + 1;
            goto LABEL_253;
          }
        }
        v147 = v143[5];

        v139 = v147;
      }
      while (v147);
    }
LABEL_256:
    objc_msgSend(v137, "reverseObjectEnumerator");
    v148 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v148, "allObjects");
    v136 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v149 = v136;

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v162, v163);
  std::__tree<std::__value_type<GKGraphNode * {__strong},float>,std::__map_value_compare<GKGraphNode * {__strong},std::__value_type<GKGraphNode * {__strong},float>,std::less<GKGraphNode * {__strong}>,true>,std::allocator<std::__value_type<GKGraphNode * {__strong},float>>>::destroy((uint64_t)&v165, v166);
  std::__tree<std::__value_type<GKGraphNode * {__strong},float>,std::__map_value_compare<GKGraphNode * {__strong},std::__value_type<GKGraphNode * {__strong},float>,std::less<GKGraphNode * {__strong}>,true>,std::allocator<std::__value_type<GKGraphNode * {__strong},float>>>::destroy((uint64_t)&v168, v169);
  v150 = (id *)__p;
  if (__p)
  {
    v151 = v172;
    v152 = __p;
    if (v172 != __p)
    {
      do
      {
        v153 = *--v151;

      }
      while (v151 != v150);
      v152 = __p;
    }
    v172 = v150;
    operator delete(v152);
  }
  v154 = (id *)v174;
  if (v174)
  {
    v155 = v175;
    v156 = v174;
    if (v175 != v174)
    {
      do
      {
        v157 = *--v155;

      }
      while (v155 != v154);
      v156 = v174;
    }
    v175 = v154;
    operator delete(v156);
  }

  return v149;
}

void sub_227BB7F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15, uint64_t a16, char a17, _QWORD *a18, uint64_t a19, char a20,_QWORD *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&a14, a15);
  std::__tree<std::__value_type<GKGraphNode * {__strong},float>,std::__map_value_compare<GKGraphNode * {__strong},std::__value_type<GKGraphNode * {__strong},float>,std::less<GKGraphNode * {__strong}>,true>,std::allocator<std::__value_type<GKGraphNode * {__strong},float>>>::destroy((uint64_t)&a17, a18);
  std::__tree<std::__value_type<GKGraphNode * {__strong},float>,std::__map_value_compare<GKGraphNode * {__strong},std::__value_type<GKGraphNode * {__strong},float>,std::less<GKGraphNode * {__strong}>,true>,std::allocator<std::__value_type<GKGraphNode * {__strong},float>>>::destroy((uint64_t)&a20, a21);
  std::vector<NSObject * {__strong}>::~vector[abi:ne180100](&a23);
  std::vector<NSObject * {__strong}>::~vector[abi:ne180100](&a26);

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<GKGraphNode * {__strong},float>,std::__map_value_compare<GKGraphNode * {__strong},std::__value_type<GKGraphNode * {__strong},float>,std::less<GKGraphNode * {__strong}>,true>,std::allocator<std::__value_type<GKGraphNode * {__strong},float>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<GKGraphNode * {__strong},float>,std::__map_value_compare<GKGraphNode * {__strong},std::__value_type<GKGraphNode * {__strong},float>,std::less<GKGraphNode * {__strong}>,true>,std::allocator<std::__value_type<GKGraphNode * {__strong},float>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<GKGraphNode * {__strong},float>,std::__map_value_compare<GKGraphNode * {__strong},std::__value_type<GKGraphNode * {__strong},float>,std::less<GKGraphNode * {__strong}>,true>,std::allocator<std::__value_type<GKGraphNode * {__strong},float>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

void sub_227BB80D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BB8EB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2A50A0](v1, 0x10A1C40E6F5D9E2);
  _Unwind_Resume(a1);
}

void sub_227BB8F6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BB8FE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BB9050(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BB923C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227BB92BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BB9334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_227BB93B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_227BB94D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BB961C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BB9690(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BB9718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_227BB97A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_227BB9838(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_227BB9FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_227BBA19C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BBA1AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BBA1BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void RepairGKSceneNodeReferencesRelativeToScene(void *a1, void *a2)
{
  id v3;
  uint64_t i;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t j;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id obj;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  objc_msgSend(a1, "entities");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v17)
  {
    v16 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v17; ++i)
      {
        if (*(_QWORD *)v23 != v16)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * i);
        v18 = 0u;
        v19 = 0u;
        v20 = 0u;
        v21 = 0u;
        objc_msgSend(v5, "components");
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
        if (v7)
        {
          v8 = v7;
          v9 = *(_QWORD *)v19;
          do
          {
            for (j = 0; j != v8; ++j)
            {
              if (*(_QWORD *)v19 == v9)
              {
                v11 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * j);
                if (!objc_msgSend(v11, "conformsToProtocol:", &unk_25591FAA0))
                  continue;
              }
              else
              {
                objc_enumerationMutation(v6);
                v11 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * j);
                if (!objc_msgSend(v11, "conformsToProtocol:", &unk_25591FAA0))
                  continue;
              }
              v12 = v11;
              objc_msgSend(v12, "serializableNodeIndexPath");
              v13 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v3, "_subnodeFromIndexPath:", v13);
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v12, "setNode:", v14);

              objc_msgSend(v12, "setSerializableNodeIndexPath:", 0);
            }
            v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
          }
          while (v8);
        }

      }
      v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    }
    while (v17);
  }

}

void sub_227BBB7C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x22E2A50A0](v1, 0x1081C40AB1E6056);
  _Unwind_Resume(a1);
}

void sub_227BBB8F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BBBA44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BBBAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_227BBBC20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BBBE9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_227BBC004(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_227BBC0BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *p2t::SweepContext::GetMap(uint64_t **a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t *v7;

  result = *a1;
  v5 = *result;
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(a2 + 8);
  **(_QWORD **)(a2 + 8) = v5;
  *a3 = 0;
  if (result != a4)
  {
    do
    {
      v7 = (uint64_t *)result[1];
      operator delete(result);
      result = v7;
    }
    while (v7 != a4);
  }
  return result;
}

void p2t::Edge::Edge()
{
  __assert_rtn("Edge", "shapes.h", 141, "false");
}

void GKCObstacleGraph::removeObstacle()
{
  __assert_rtn("removeObstacle", "GKCGraph.mm", 493, "findIt != _extrudedObjCObstacles.end()");
}

void GKCQuadTreeNode<NSObject>::GKCQuadTreeNode(uint64_t a1, char *a2, void **a3)
{
  char *v5;
  void *v6;
  void *v8;

  v5 = *(char **)(a1 + 96);
  v6 = a2;
  if (v5 != a2)
  {
    do
    {
      v8 = (void *)*((_QWORD *)v5 - 1);
      v5 -= 8;

    }
    while (v5 != a2);
    v6 = *a3;
  }
  *(_QWORD *)(a1 + 96) = a2;
  operator delete(v6);
}

void p2t::Triangle::MarkNeighbor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0("MarkNeighbor", "shapes.cc", a3, "0");
}

void p2t::Triangle::OppositePoint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1("PointCW", "shapes.cc", a3, "0");
}

void p2t::Triangle::Legalize()
{
  __assert_rtn("Legalize", "shapes.cc", 149, "0");
}

void p2t::Triangle::Index()
{
  __assert_rtn("Index", "shapes.cc", 162, "0");
}

void p2t::Triangle::PointCCW()
{
  __assert_rtn("PointCCW", "shapes.cc", 234, "0");
}

void GKCOctreeNode<NSObject>::GKCOctreeNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void **v6;
  char v7;
  void **v8;
  void *v9;

  v5 = (void *)OUTLINED_FUNCTION_0_0(a1, a2);
  if (!v7)
  {
    v8 = v6;
    do
    {
      v9 = *(void **)(v4 - 8);
      v4 -= 8;

    }
    while (v4 != v2);
    v5 = *v8;
  }
  *(_QWORD *)(v3 + 184) = v2;
  operator delete(v5);
}

void GKCOctreeNode<NSObject>::createNodeForOctant()
{
  __assert_rtn("createNodeForOctant", "GKCOctree.h", 501, "false");
}

void p2t::AdvancingFront::LocatePoint()
{
  __assert_rtn("LocatePoint", "advancing_front.cc", 85, "0");
}

void p2t::Sweep::EdgeEvent(uint64_t a1)
{
  uint64_t v1;

  v1 = MEMORY[0x22E2A4FD4](a1, "EdgeEvent - collinear points not supported");
  MEMORY[0x22E2A4FE0](v1);
  __assert_rtn("EdgeEvent", "sweep.cc", 125, "0");
}

{
  uint64_t v1;

  v1 = MEMORY[0x22E2A4FD4](a1, "EdgeEvent - collinear points not supported");
  MEMORY[0x22E2A4FE0](v1);
  __assert_rtn("EdgeEvent", "sweep.cc", 142, "0");
}

void p2t::Sweep::FlipEdgeEvent()
{
  __assert_rtn("FlipEdgeEvent", "sweep.cc", 710, "0");
}

void p2t::Sweep::FlipEdgeEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_1("NextFlipPoint", "sweep.cc", a3, "0");
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x24BDD0B80](aClassName);
}

NSZone *NSDefaultMallocZone(void)
{
  return (NSZone *)MEMORY[0x24BDD0BC8]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x24BDD1000](format);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x24BDD1218](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x24BDD1240](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x24BDD1268](aSelector);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x24BDE8CC8](rnd, count, bytes);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x24BEDAB60](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

uint64_t std::ostream::put()
{
  return MEMORY[0x24BEDAEE0]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x24BEDAEE8]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF30]();
}

{
  return MEMORY[0x24BEDAF78]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_24F04E7B8();
}

void operator delete(void *__p)
{
  off_24F04E7C0(__p);
}

uint64_t operator delete()
{
  return off_24F04E7C8();
}

uint64_t operator new[]()
{
  return off_24F04E7D0();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24F04E7D8(__sz);
}

uint64_t operator new()
{
  return off_24F04E7E0();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x24BEDB968](lpsrc, lpstype, lpdtype, s2d);
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x24BDAC890](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x24BDAC898](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t _dyld_get_prog_image_header()
{
  return MEMORY[0x24BDACA60]();
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB88](dso, log, type, format, buf, *(_QWORD *)&size);
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x24BDAD108](__x);
  return result;
}

uint32_t arc4random(void)
{
  return MEMORY[0x24BDAD158]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x24BDAD170](*(_QWORD *)&__upper_bound);
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x24BDAD220](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAD228](a1, a2);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

float cosf(float a1)
{
  float result;

  MEMORY[0x24BDADBE8](a1);
  return result;
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

uint64_t dyld_image_path_containing_address()
{
  return MEMORY[0x24BDAE108]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x24BDAE148]();
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAE3F8](a1, a2);
  return result;
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

uint64_t objc_copyClassesForImage()
{
  return MEMORY[0x24BEDD008]();
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x24BEDD038](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x24BEDD078](exception);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x24BEDD0E8](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x24BEDD160]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD408](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x24BEDD420](location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD458](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAF688](__x, __y);
  return result;
}

int rand(void)
{
  return MEMORY[0x24BDAFA38]();
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x24BDB0138](__x);
  return result;
}

