void SKCLightNode::SKCLightNode(SKCLightNode *this)
{
  uint64_t v1;

  SKCNode::SKCNode(this);
  *(_QWORD *)v1 = off_1EA4FDDE8;
  *(_QWORD *)(v1 + 560) = 0;
  *(_QWORD *)(v1 + 576) = 0;
  *(_QWORD *)(v1 + 568) = 0;
  *(_BYTE *)(v1 + 584) = 1;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v1 + 592) = _Q0;
  *(_OWORD *)(v1 + 608) = xmmword_1DC9217E0;
  *(_OWORD *)(v1 + 624) = xmmword_1DC9217F0;
  *(_QWORD *)(v1 + 640) = 0x13F800000;
}

uint64_t SKCLightNode::generatesVisibleGeometry(SKCLightNode *this, const simd_float4x4 *a2)
{
  return 1;
}

double SKCLightNode::getBatchInfo@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 12) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_QWORD *)&result = 0x300000000;
  *(_QWORD *)(a1 + 4) = 0x300000000;
  *(_BYTE *)a1 = 1;
  return result;
}

uint64_t SKCLightNode::getNeedsCustomRenderOps()
{
  return 1;
}

uint64_t SKCLightNode::addBatchRenderElements()
{
  return 0;
}

ShadowInfo *SKCLightNode::addRenderOps(ShadowInfo *result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  ShadowInfo *v8;
  unint64_t v9;
  int v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  jet_buffer_pool **v14;
  jet_buffer_pool *v15;
  uint64_t v16;
  std::__shared_weak_count *size;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _OWORD *data;
  uint64_t v24;
  float32x2_t **v25;
  float32x2_t **v26;
  unsigned int v27;
  float32x2_t *v28;
  __int128 v29;
  float32x2_t v30;
  float32x2_t v31;
  __int128 v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t current_buffer;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float32x4_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float32x4_t v80;
  std::string __str;
  uint64_t v82;
  std::__shared_weak_count *v83;

  v3 = *((_QWORD *)result + 72);
  if (v3)
  {
    v5 = *(_QWORD *)(v3 + 32);
    v4 = *(_QWORD *)(v3 + 40);
    if (v5 != v4)
    {
      v8 = result;
      v9 = (unint64_t)(v4 - v5) >> 3;
      v10 = 4 * v9;
      v11 = 3 * v9;
      if (*(_DWORD *)(a2[50] + 48) < (2 * v11))
      {
        v12 = a2 + 50;
        SKCRendererEnsureBufferCapacity(a2 + 50, 0, 2 * v11);
        SKCRendererGenerateQuadIndexBufferData<unsigned short>((unsigned int **)a2 + 50);
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v12 + 24))(*v12, 0, 0);
      }
      v13 = (v10 + 4);
      v14 = (jet_buffer_pool **)((char *)v8 + 560);
      v15 = (jet_buffer_pool *)*((_QWORD *)v8 + 70);
      if (!v15
        || *((_DWORD *)v15 + 4) < v13
        && (std::shared_ptr<jet_buffer_pool>::reset[abi:ne180100]((_QWORD *)v8 + 70), (v15 = *v14) == 0))
      {
        SKCRenderer::getBackingContext(a2[13], &v82);
        v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v82 + 16))(v82, 0, 4, v13);
        std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&__str, v16);
        std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)v8 + 560, (__int128 *)&__str);
        size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_)
        {
          v18 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v20 = v83;
        if (v83)
        {
          p_shared_owners = (unint64_t *)&v83->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v15 = *v14;
      }
      jet_buffer_pool::next_buffer(v15);
      data = (_OWORD *)jet_buffer_pool::get_data(*((jet_buffer_pool **)v8 + 70));
      *data = xmmword_1DC921800;
      data[1] = xmmword_1DC921810;
      data[2] = xmmword_1DC921820;
      data[3] = xmmword_1DC921830;
      v24 = *((_QWORD *)v8 + 72);
      v25 = *(float32x2_t ***)(v24 + 32);
      v26 = *(float32x2_t ***)(v24 + 40);
      if (v25 != v26)
      {
        v27 = 4;
        do
        {
          v28 = *v25++;
          *(float32x2_t *)&v29 = v28[1];
          *((_QWORD *)&v29 + 1) = 0x3F80000000000000;
          data[v27] = v29;
          *(float32x2_t *)&v29 = *v28;
          *((_QWORD *)&v29 + 1) = 0x3F80000000000000;
          data[v27 + 1] = v29;
          v30 = vsub_f32(*v28, *(float32x2_t *)(*((_QWORD *)v8 + 72) + 16));
          *(float32x2_t *)&v29 = vmla_n_f32(*v28, v30, 20.0/ sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v30, v30).i32[1]), v30.f32[0], v30.f32[0])));
          *((_QWORD *)&v29 + 1) = 0x3F80000000000000;
          data[v27 + 2] = v29;
          v31 = v28[1];
          *(float32x2_t *)&v29 = vsub_f32(v31, *(float32x2_t *)(*((_QWORD *)v8 + 72) + 16));
          *(float32x2_t *)&v32 = vmla_n_f32(v31, *(float32x2_t *)&v29, 20.0/ sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)&v29, *(float32x2_t *)&v29).i32[1]), *(float *)&v29, *(float *)&v29)));
          v33 = v27 + 3;
          *((_QWORD *)&v32 + 1) = 0x3F80000000000000;
          v27 += 4;
          data[v33] = v32;
        }
        while (v25 != v26);
      }
      jet_buffer_pool::commit_data(*((jet_buffer_pool **)v8 + 70));
      v80 = *((float32x4_t *)v8 + 39);
      v34 = *a3;
      v35 = a2[17];
      v36 = (uint64_t *)(*a3 + 8);
      LODWORD(__str.__r_.__value_.__l.__data_) = 31;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v36, (int *)&__str);
      v37 = *(_QWORD *)(v34 + 16);
      *(_QWORD *)(v37 - 80) = v35;
      *(_OWORD *)(v37 - 64) = xmmword_1DC921840;
      *(_QWORD *)(v37 - 48) = 0x2300000000;
      v38 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&__str, "a_position");
      current_buffer = jet_buffer_pool::get_current_buffer(*((jet_buffer_pool **)v8 + 70));
      LODWORD(v82) = 5;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v38 + 8), (int *)&v82);
      v40 = *(_QWORD *)(v38 + 16);
      *(_QWORD *)(v40 - 80) = current_buffer;
      std::string::operator=((std::string *)(v40 - 176), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v41 = *a3;
      v42 = a2[68];
      v43 = (uint64_t *)(*a3 + 8);
      LODWORD(__str.__r_.__value_.__l.__data_) = 2;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v43, (int *)&__str);
      *(_QWORD *)(*(_QWORD *)(v41 + 16) - 80) = v42;
      v44 = *a3;
      v45 = (uint64_t *)(*a3 + 8);
      LODWORD(__str.__r_.__value_.__l.__data_) = 10;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v45, (int *)&__str);
      *(_DWORD *)(*(_QWORD *)(v44 + 16) - 64) = 0;
      v46 = *a3;
      v47 = a2[50];
      v48 = (uint64_t *)(*a3 + 8);
      LODWORD(__str.__r_.__value_.__l.__data_) = 4;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v48, (int *)&__str);
      v49 = *(_QWORD *)(v46 + 16);
      *(_QWORD *)(v49 - 80) = v47;
      *(_QWORD *)(v49 - 64) = 3;
      *(_DWORD *)(v49 - 56) = 6;
      v50 = a2[83];
      ++*(_DWORD *)(v50 + 164);
      ++*(_DWORD *)(v50 + 148);
      v51 = (*(_QWORD *)(*((_QWORD *)v8 + 72) + 40) - *(_QWORD *)(*((_QWORD *)v8 + 72) + 32)) >> 3;
      v52 = *a3;
      v53 = (uint64_t *)(*a3 + 8);
      LODWORD(__str.__r_.__value_.__l.__data_) = 10;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v53, (int *)&__str);
      *(_DWORD *)(*(_QWORD *)(v52 + 16) - 64) = 1;
      v54 = *a3;
      v55 = a2[50];
      v56 = (uint64_t *)(*a3 + 8);
      LODWORD(__str.__r_.__value_.__l.__data_) = 4;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v56, (int *)&__str);
      v57 = *(_QWORD *)(v54 + 16);
      *(_QWORD *)(v57 - 80) = v55;
      *(_QWORD *)(v57 - 64) = 0x600000003;
      *(_DWORD *)(v57 - 56) = 6 * v51;
      v58 = a2[83];
      ++*(_DWORD *)(v58 + 164);
      *(_DWORD *)(v58 + 148) += v51;
      v59 = *a3;
      v60 = a2[19];
      v61 = (uint64_t *)(*a3 + 8);
      LODWORD(__str.__r_.__value_.__l.__data_) = 31;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v61, (int *)&__str);
      v62 = *(_QWORD *)(v59 + 16);
      *(_QWORD *)(v62 - 80) = v60;
      *(_OWORD *)(v62 - 64) = xmmword_1DC921850;
      *(_QWORD *)(v62 - 48) = 0x230000000FLL;
      v63 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&__str, "a_position");
      v64 = jet_buffer_pool::get_current_buffer(*((jet_buffer_pool **)v8 + 70));
      LODWORD(v82) = 5;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v63 + 8), (int *)&v82);
      v65 = *(_QWORD *)(v63 + 16);
      *(_QWORD *)(v65 - 80) = v64;
      std::string::operator=((std::string *)(v65 - 176), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v66 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&__str, "u_color");
      LODWORD(v82) = 25;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v66 + 8), (int *)&v82);
      v67 = *(_QWORD *)(v66 + 16);
      std::string::operator=((std::string *)(v67 - 176), &__str);
      v68 = v80;
      v68.i32[3] = 1.0;
      *(float32x4_t *)(v67 - 64) = vmulq_laneq_f32(v68, v80, 3);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v69 = *a3;
      v70 = a2[70];
      v71 = (uint64_t *)(*a3 + 8);
      LODWORD(__str.__r_.__value_.__l.__data_) = 2;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v71, (int *)&__str);
      *(_QWORD *)(*(_QWORD *)(v69 + 16) - 80) = v70;
      v72 = *a3;
      v73 = (uint64_t *)(*a3 + 8);
      LODWORD(__str.__r_.__value_.__l.__data_) = 10;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v73, (int *)&__str);
      *(_DWORD *)(*(_QWORD *)(v72 + 16) - 64) = 0;
      v74 = *a3;
      v75 = a2[50];
      v76 = (uint64_t *)(*a3 + 8);
      LODWORD(__str.__r_.__value_.__l.__data_) = 4;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v76, (int *)&__str);
      v77 = *(_QWORD *)(v74 + 16);
      *(_QWORD *)(v77 - 80) = v75;
      *(_QWORD *)(v77 - 64) = 3;
      *(_DWORD *)(v77 - 56) = 6;
      v78 = a2[83];
      ++*(_DWORD *)(v78 + 164);
      ++*(_DWORD *)(v78 + 148);
      v79 = *a3;
      LODWORD(__str.__r_.__value_.__l.__data_) = 2;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v79 + 8), (int *)&__str);
      *(_QWORD *)(*(_QWORD *)(v79 + 16) - 80) = 0;
      result = (ShadowInfo *)*((_QWORD *)v8 + 72);
      if (result)
      {
        ShadowInfo::~ShadowInfo(result);
        result = (ShadowInfo *)MEMORY[0x1DF0CF560]();
      }
      *((_QWORD *)v8 + 72) = 0;
    }
  }
  return result;
}

void sub_1DC855FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t SKCRendererGenerateQuadIndexBufferData<unsigned short>(unsigned int **a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t i;

  v1 = *a1;
  v2 = v1[12];
  result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
  if ((_DWORD)v2)
  {
    for (i = 0; i != v2; ++i)
      *(_WORD *)(result + 2 * i) = word_1DC9218A0[i % 6] + 4 * (i / 6);
  }
  return result;
}

void std::shared_ptr<jet_buffer_pool>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void SKCLightNode::generateShadowGeometry(uint64_t a1, float32x4_t ***a2, float32x4_t a3)
{
  ShadowInfo *v5;
  uint64_t v6;
  _QWORD *v7;
  char **v8;
  float32x4_t **v9;
  float32x4_t **v10;
  float32x4_t *v11;
  __n128 v13;
  __n128 v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  simd_float4 v44;
  simd_float4 v45;
  simd_float4 v46;
  simd_float4 v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float v63;
  _OWORD *v64;
  _OWORD *v65;
  __int128 v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  _OWORD *v84;
  _OWORD *v85;
  __int128 v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  _OWORD *v100;
  _OWORD *v101;
  __int128 v102;
  unint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  _OWORD *v115;
  _OWORD *v116;
  unint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *p_shared_owners;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  float32x4_t v134;
  __n128 v135;
  __n128 v136;
  uint64_t v137;
  __n128 v138;
  float32x4_t v140;
  uint64_t v141;
  float32x4_t v142;
  unint64_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  simd_float4x4 v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  simd_float4x4 v152;
  simd_float4x4 v153;

  v5 = *(ShadowInfo **)(a1 + 576);
  if (v5)
  {
    ShadowInfo::~ShadowInfo(v5);
    MEMORY[0x1DF0CF560]();
  }
  v132 = a1;
  *(_QWORD *)(a1 + 576) = 0;
  v6 = operator new();
  v7 = (_QWORD *)v6;
  *(_OWORD *)(v6 + 32) = 0u;
  v8 = (char **)(v6 + 32);
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)v6 = 0u;
  *(float32x4_t *)(v6 + 16) = a3;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    v133 = v6 + 48;
    do
    {
      v11 = *v9;
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)(*v9)->i64[0] + 136))(&v150);
      if (!v150 || (v16 = *(_QWORD *)(v150 + 8), v17 = *(_QWORD *)(v150 + 16), v18 = v17 - v16, v17 == v16))
      {
        memset(&v149, 0, sizeof(v149));
        *(double *)v44.i64 = (*(double (**)(uint64_t))(*(_QWORD *)v11->i64[0] + 120))(v11->i64[0]);
        v149.columns[0] = v44;
        v149.columns[1] = v45;
        v149.columns[2] = v46;
        v149.columns[3] = v47;
        (*(void (**)(uint64_t))(*(_QWORD *)v11->i64[0] + 112))(v11->i64[0]);
        v52 = 0;
        v152 = v149;
        do
        {
          v153.columns[v52] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v48, COERCE_FLOAT(*(_OWORD *)&v152.columns[v52])), v49, *(float32x2_t *)v152.columns[v52].f32, 1), v50, (float32x4_t)v152.columns[v52], 2), v51, (float32x4_t)v152.columns[v52], 3);
          ++v52;
        }
        while (v52 != 4);
        v53 = 0;
        v149.columns[2] = v153.columns[2];
        v149.columns[3] = v153.columns[3];
        v54 = v11[2];
        v55 = v11[3];
        v56 = v11[4];
        v57 = v11[5];
        v152 = v153;
        do
        {
          v153.columns[v53] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v54, COERCE_FLOAT(*(_OWORD *)&v152.columns[v53])), v55, *(float32x2_t *)v152.columns[v53].f32, 1), v56, (float32x4_t)v152.columns[v53], 2), v57, (float32x4_t)v152.columns[v53], 3);
          ++v53;
        }
        while (v53 != 4);
        v149 = v153;
        *(double *)v58.i64 = SKCBoundingBoxGetVerts(&v149);
        v146 = v60;
        v148 = v59;
        v138 = (__n128)v58;
        v61 = vsubq_f32(v58, a3);
        v141 = v62.i64[0];
        v63 = v61.f32[1];
        v143 = vsubq_f32(v62, a3).u64[0];
        v136 = (__n128)v61;
        if (vmlas_n_f32((float)-v61.f32[1] * *(float *)&v143, *((float *)&v143 + 1), v61.f32[0]) < 0.0)
        {
          v64 = (_OWORD *)operator new();
          v65 = v64;
          *(_QWORD *)&v66 = v138.n128_u64[0];
          *((_QWORD *)&v66 + 1) = v141;
          *v64 = v66;
          v68 = (_QWORD *)v7[5];
          v67 = v7[6];
          if ((unint64_t)v68 >= v67)
          {
            v70 = ((char *)v68 - *v8) >> 3;
            if ((unint64_t)(v70 + 1) >> 61)
              std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
            v71 = v67 - (_QWORD)*v8;
            v72 = v71 >> 2;
            if (v71 >> 2 <= (unint64_t)(v70 + 1))
              v72 = v70 + 1;
            if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
              v73 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v73 = v72;
            if (v73)
              v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v133, v73);
            else
              v74 = 0;
            v75 = &v74[8 * v70];
            *(_QWORD *)v75 = v65;
            v69 = v75 + 8;
            v77 = (char *)v7[4];
            v76 = (char *)v7[5];
            if (v76 != v77)
            {
              do
              {
                v78 = *((_QWORD *)v76 - 1);
                v76 -= 8;
                *((_QWORD *)v75 - 1) = v78;
                v75 -= 8;
              }
              while (v76 != v77);
              v76 = *v8;
            }
            v7[4] = v75;
            v7[5] = v69;
            v7[6] = &v74[8 * v73];
            if (v76)
              operator delete(v76);
          }
          else
          {
            *v68 = v64;
            v69 = v68 + 1;
          }
          v7[5] = v69;
        }
        _Q0 = (__n128)a3;
        _S1 = v143;
        v134 = vsubq_f32(v148, a3);
        __asm { FMLA            S0, S1, V2.S[1] }
        if (_Q0.n128_f32[0] < 0.0)
        {
          v84 = (_OWORD *)operator new();
          v85 = v84;
          _Q0 = (__n128)v148;
          *(_QWORD *)&v86 = v141;
          *((_QWORD *)&v86 + 1) = v148.i64[0];
          *v84 = v86;
          v88 = (_QWORD *)v7[5];
          v87 = v7[6];
          if ((unint64_t)v88 >= v87)
          {
            v90 = ((char *)v88 - *v8) >> 3;
            if ((unint64_t)(v90 + 1) >> 61)
              std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
            v91 = v87 - (_QWORD)*v8;
            v92 = v91 >> 2;
            if (v91 >> 2 <= (unint64_t)(v90 + 1))
              v92 = v90 + 1;
            if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
              v93 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v93 = v92;
            if (v93)
              v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v133, v93);
            else
              v94 = 0;
            v95 = &v94[8 * v90];
            *(_QWORD *)v95 = v85;
            v89 = v95 + 8;
            v97 = (char *)v7[4];
            v96 = (char *)v7[5];
            if (v96 != v97)
            {
              do
              {
                v98 = *((_QWORD *)v96 - 1);
                v96 -= 8;
                *((_QWORD *)v95 - 1) = v98;
                v95 -= 8;
              }
              while (v96 != v97);
              v96 = *v8;
            }
            v7[4] = v95;
            v7[5] = v89;
            v7[6] = &v94[8 * v93];
            if (v96)
              operator delete(v96);
          }
          else
          {
            *v88 = v84;
            v89 = v88 + 1;
          }
          v7[5] = v89;
        }
        _Q3 = (__n128)v134;
        v144 = vsubq_f32(v146, a3);
        __asm { FMLA            S0, S3, V1.S[1] }
        if (_S0 < 0.0)
        {
          v100 = (_OWORD *)operator new();
          v101 = v100;
          _Q0 = (__n128)v146;
          *(_QWORD *)&v102 = v148.i64[0];
          *((_QWORD *)&v102 + 1) = v146.i64[0];
          *v100 = v102;
          v104 = (_QWORD *)v7[5];
          v103 = v7[6];
          if ((unint64_t)v104 >= v103)
          {
            v106 = ((char *)v104 - *v8) >> 3;
            if ((unint64_t)(v106 + 1) >> 61)
              std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
            v107 = v103 - (_QWORD)*v8;
            v108 = v107 >> 2;
            if (v107 >> 2 <= (unint64_t)(v106 + 1))
              v108 = v106 + 1;
            if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8)
              v109 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v109 = v108;
            if (v109)
              v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v133, v109);
            else
              v110 = 0;
            v111 = &v110[8 * v106];
            *(_QWORD *)v111 = v101;
            v105 = v111 + 8;
            v113 = (char *)v7[4];
            v112 = (char *)v7[5];
            if (v112 != v113)
            {
              do
              {
                v114 = *((_QWORD *)v112 - 1);
                v112 -= 8;
                *((_QWORD *)v111 - 1) = v114;
                v111 -= 8;
              }
              while (v112 != v113);
              v112 = *v8;
            }
            v7[4] = v111;
            v7[5] = v105;
            v7[6] = &v110[8 * v109];
            if (v112)
              operator delete(v112);
          }
          else
          {
            *v104 = v100;
            v105 = v104 + 1;
          }
          v7[5] = v105;
        }
        v14 = (__n128)v144;
        v13 = v136;
        _Q0.n128_f32[0] = (float)(v144.f32[0] * v63) - (float)(v144.f32[1] * v136.n128_f32[0]);
        if (_Q0.n128_f32[0] < 0.0)
        {
          v115 = (_OWORD *)operator new();
          v116 = v115;
          _Q0 = v138;
          v13.n128_u64[0] = v146.i64[0];
          v13.n128_u64[1] = v138.n128_u64[0];
          *v115 = v13;
          v118 = (_QWORD *)v7[5];
          v117 = v7[6];
          if ((unint64_t)v118 >= v117)
          {
            v120 = ((char *)v118 - *v8) >> 3;
            if ((unint64_t)(v120 + 1) >> 61)
              std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
            v121 = v117 - (_QWORD)*v8;
            v122 = v121 >> 2;
            if (v121 >> 2 <= (unint64_t)(v120 + 1))
              v122 = v120 + 1;
            if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
              v123 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v123 = v122;
            if (v123)
              v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v133, v123);
            else
              v124 = 0;
            v125 = &v124[8 * v120];
            *(_QWORD *)v125 = v116;
            v119 = v125 + 8;
            v127 = (char *)v7[4];
            v126 = (char *)v7[5];
            if (v126 != v127)
            {
              do
              {
                v128 = *((_QWORD *)v126 - 1);
                v126 -= 8;
                *((_QWORD *)v125 - 1) = v128;
                v125 -= 8;
              }
              while (v126 != v127);
              v126 = *v8;
            }
            v7[4] = v125;
            v7[5] = v119;
            v7[6] = &v124[8 * v123];
            if (v126)
              operator delete(v126);
          }
          else
          {
            *v118 = v115;
            v119 = v118 + 1;
          }
          v7[5] = v119;
        }
      }
      else if ((int)(v18 >> 3) >= 1)
      {
        v19 = 0;
        v20 = 0;
        v145 = v11[3];
        v147 = v11[2];
        v21 = (v18 >> 3) - 1;
        v22 = (v18 >> 3);
        v23 = (float *)(v16 + 4);
        v140 = v11[5];
        v142 = v11[4];
        do
        {
          v24 = v21 << 32;
          v21 = v19;
          _Q3.n128_u64[1] = 0;
          _Q0 = (__n128)vaddq_f32(v140, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v147, *(v23 - 1)), v145, *v23), (float32x4_t)0, v142));
          v13 = (__n128)vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v147, *(float *)(v16 + (v24 >> 29))), v145, *(float *)(v16 + (v24 >> 29) + 4)), (float32x4_t)0, v142);
          v14 = (__n128)vaddq_f32(v140, (float32x4_t)v13);
          v13.n128_u32[0] = _Q0.n128_u32[1];
          _Q3.n128_u64[0] = v14.n128_u32[1];
          if (_Q0.n128_f32[1] <= a3.f32[1] == v14.n128_f32[1] > a3.f32[1])
          {
            v14 = (__n128)vsubq_f32((float32x4_t)v14, (float32x4_t)_Q0);
            v14.n128_f32[0] = (float)(a3.f32[1] - _Q0.n128_f32[1]) * v14.n128_f32[0];
            _Q0.n128_f32[0] = _Q0.n128_f32[0] + (float)(v14.n128_f32[0] / (float)(_Q3.n128_f32[0] - _Q0.n128_f32[1]));
            v13 = (__n128)a3;
            if (a3.f32[0] < _Q0.n128_f32[0])
              ++v20;
          }
          ++v19;
          v23 += 2;
        }
        while (v22 != v21 + 1);
        if ((v20 & 1) == 0)
        {
          v25 = 0;
          do
          {
            v26 = v25 + 1;
            v27 = *(_QWORD *)(v150 + 8);
            _Q3 = (__n128)v147;
            v28 = vaddq_f32(v140, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v147, *(float *)(v27 + 8 * v25)), v145, *(float *)(v27 + 8 * v25 + 4)), (float32x4_t)0, v142));
            if (v25 + 1 == v22)
              v29 = 0;
            else
              v29 = (v25 + 1);
            v14 = (__n128)vaddq_f32(v140, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v147, *(float *)(v27 + 8 * v29)), v145, *(float *)(v27 + 8 * v29 + 4)), (float32x4_t)0, v142));
            v135 = v14;
            v137 = v28.i64[0];
            _Q0 = (__n128)vsubq_f32(v28, a3);
            v13 = (__n128)vsubq_f32((float32x4_t)v14, a3);
            v14.n128_u32[0] = v13.n128_u32[1];
            _Q3.n128_f32[0] = -_Q0.n128_f32[1];
            v13.n128_f32[0] = vmlas_n_f32((float)-_Q0.n128_f32[1] * v13.n128_f32[0], v13.n128_f32[1], _Q0.n128_f32[0]);
            if (v13.n128_f32[0] < 0.0)
            {
              v30 = (_OWORD *)operator new();
              v31 = v30;
              v13 = v135;
              _Q0.n128_u64[0] = v137;
              _Q0.n128_u64[1] = v135.n128_u64[0];
              *v30 = _Q0;
              v33 = (_QWORD *)v7[5];
              v32 = v7[6];
              if ((unint64_t)v33 >= v32)
              {
                v35 = ((char *)v33 - *v8) >> 3;
                if ((unint64_t)(v35 + 1) >> 61)
                  std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
                v36 = v32 - (_QWORD)*v8;
                v37 = v36 >> 2;
                if (v36 >> 2 <= (unint64_t)(v35 + 1))
                  v37 = v35 + 1;
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
                  v38 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v38 = v37;
                if (v38)
                  v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v133, v38);
                else
                  v39 = 0;
                v40 = &v39[8 * v35];
                *(_QWORD *)v40 = v31;
                v34 = v40 + 8;
                v42 = (char *)v7[4];
                v41 = (char *)v7[5];
                if (v41 != v42)
                {
                  do
                  {
                    v43 = *((_QWORD *)v41 - 1);
                    v41 -= 8;
                    *((_QWORD *)v40 - 1) = v43;
                    v40 -= 8;
                  }
                  while (v41 != v42);
                  v41 = *v8;
                }
                v7[4] = v40;
                v7[5] = v34;
                v7[6] = &v39[8 * v38];
                if (v41)
                  operator delete(v41);
              }
              else
              {
                *v33 = v30;
                v34 = v33 + 1;
              }
              v7[5] = v34;
            }
            v25 = v26;
          }
          while (v26 != v22);
        }
      }
      v129 = v151;
      if (v151)
      {
        p_shared_owners = (unint64_t *)&v151->__shared_owners_;
        do
          v131 = __ldaxr(p_shared_owners);
        while (__stlxr(v131 - 1, p_shared_owners));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *, __n128, __n128, __n128, __n128))v129->__on_zero_shared)(v129, _Q0, v13, v14, _Q3);
          std::__shared_weak_count::__release_weak(v129);
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  *(_QWORD *)(v132 + 576) = v7;
}

void sub_1DC8569AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void SKCLightNode::~SKCLightNode(SKCLightNode *this)
{
  ShadowInfo *v2;

  *(_QWORD *)this = off_1EA4FDDE8;
  v2 = (ShadowInfo *)*((_QWORD *)this + 72);
  if (v2)
  {
    ShadowInfo::~ShadowInfo(v2);
    MEMORY[0x1DF0CF560]();
  }
  *((_QWORD *)this + 72) = 0;
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 560);
  SKCNode::~SKCNode((id *)this);
}

{
  SKCLightNode::~SKCLightNode(this);
  JUMPOUT(0x1DF0CF560);
}

uint64_t SKCLightNode::isLightNode(SKCLightNode *this)
{
  return 1;
}

uint64_t std::vector<jet_render_op>::emplace_back<jet_render_opcode>(uint64_t *a1, int *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  _QWORD v18[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 6);
    v11 = v10 + 1;
    if (v10 + 1 > 0x155555555555555)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 6);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0xAAAAAAAAAAAAAALL)
      v13 = 0x155555555555555;
    else
      v13 = v11;
    v18[4] = result;
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<jet_render_op>>(result, v13);
    v15 = &v14[192 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[192 * v16];
    v17 = *a2;
    *(_QWORD *)v15 = &off_1EA4FDEE8;
    *((_DWORD *)v15 + 2) = v17;
    *((_QWORD *)v15 + 3) = 0;
    *((_QWORD *)v15 + 4) = 0;
    *((_QWORD *)v15 + 2) = 0;
    *((_QWORD *)v15 + 8) = 0;
    *((_QWORD *)v15 + 12) = 0;
    v18[2] = v15 + 192;
    std::vector<jet_render_op>::__swap_out_circular_buffer(a1, v18);
    v9 = a1[1];
    result = std::__split_buffer<jet_render_op>::~__split_buffer((uint64_t)v18);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)v7 = &off_1EA4FDEE8;
    *(_DWORD *)(v7 + 8) = v8;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 64) = 0;
    *(_QWORD *)(v7 + 96) = 0;
    v9 = v7 + 192;
    a1[1] = v7 + 192;
  }
  a1[1] = v9;
  return result;
}

void sub_1DC856BAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<jet_render_op>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void jet_render_op::~jet_render_op(jet_render_op *this)
{
  jet_render_op::~jet_render_op(this);
  JUMPOUT(0x1DF0CF560);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  jet_render_op *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1EA4FDEE8;
  v2 = (char *)this + 72;
  v3 = (char *)*((_QWORD *)this + 12);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (jet_render_op *)*((_QWORD *)this + 8);
  if (v5 == (jet_render_op *)((char *)this + 40))
  {
    v6 = 4;
    v5 = (jet_render_op *)((char *)this + 40);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

uint64_t std::vector<jet_render_op>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<jet_render_op>,std::reverse_iterator<jet_render_op*>,std::reverse_iterator<jet_render_op*>,std::reverse_iterator<jet_render_op*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<jet_render_op>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1EA4FD690, MEMORY[0x1E0DE42D0]);
}

void sub_1DC856D48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<jet_render_op>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(192 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<jet_render_op>,std::reverse_iterator<jet_render_op*>,std::reverse_iterator<jet_render_op*>,std::reverse_iterator<jet_render_op*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = a7 - 192;
  while (a3 + v11 != a5)
  {
    v13 = v12 + v11;
    v11 -= 192;
    std::allocator<jet_render_op>::construct[abi:ne180100]<jet_render_op,jet_render_op const&>(a1, v13, v11 + a3);
  }
  return a6;
}

__n128 std::allocator<jet_render_op>::construct[abi:ne180100]<jet_render_op,jet_render_op const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a2 = &off_1EA4FDEE8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  v5 = (std::string *)(a2 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  std::__function::__value_func<void ()(jet_context *)>::__value_func[abi:ne180100](a2 + 40, a3 + 40);
  std::__function::__value_func<void ()(jet_context *)>::__value_func[abi:ne180100](a2 + 72, a3 + 72);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  result = *(__n128 *)(a3 + 128);
  v8 = *(_OWORD *)(a3 + 144);
  v9 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
  *(_OWORD *)(a2 + 176) = v9;
  *(__n128 *)(a2 + 128) = result;
  *(_OWORD *)(a2 + 144) = v8;
  return result;
}

void sub_1DC856F34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v5 = *(_QWORD **)(v1 + 64);
  if (v5 == v3)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v3 = *(_QWORD **)(v1 + 64);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_6:
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t std::__function::__value_func<void ()(jet_context *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__split_buffer<jet_render_op>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 192);
    *(_QWORD *)(a1 + 16) = i - 192;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ShadowInfo::~ShadowInfo(ShadowInfo *this)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)*((_QWORD *)this + 4);
  v3 = (_QWORD *)*((_QWORD *)this + 5);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x1DF0CF560](*v2, 0x1000C40E0EAB150);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 4);
  }
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
}

uint64_t std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_QWORD *std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1EA4FDF18;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DC8571FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_buffer_pool *,std::shared_ptr<jet_buffer_pool>::__shared_ptr_default_delete<jet_buffer_pool,jet_buffer_pool>,std::allocator<jet_buffer_pool>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

uint64_t std::__shared_ptr_pointer<jet_buffer_pool *,std::shared_ptr<jet_buffer_pool>::__shared_ptr_default_delete<jet_buffer_pool,jet_buffer_pool>,std::allocator<jet_buffer_pool>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_buffer_pool *,std::shared_ptr<jet_buffer_pool>::__shared_ptr_default_delete<jet_buffer_pool,jet_buffer_pool>,std::allocator<jet_buffer_pool>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void sub_1DC857504(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x10A1C4099F0538BLL);

  _Unwind_Resume(a1);
}

SKCAction *SKCReferencedAction::setReferencedCAction(SKCReferencedAction *this, SKCAction *a2)
{
  SKCAction *result;
  int v5;

  if (a2)
    ++a2->var1;
  result = this->var19;
  if (result)
  {
    v5 = result->var1 - 1;
    result->var1 = v5;
    if (!v5)
      result = (SKCAction *)(*((uint64_t (**)(SKCAction *))result->var0 + 1))(result);
  }
  this->var19 = a2;
  return result;
}

void sub_1DC85773C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x1DF0CF560](v3, 0x10A1C4099F0538BLL);

  _Unwind_Resume(a1);
}

void sub_1DC8577E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC857894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC85796C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC857A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC857C38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCReferencedAction::~SKCReferencedAction(SKCReferencedAction *this)
{
  SKCReferencedAction::~SKCReferencedAction(this);
  JUMPOUT(0x1DF0CF560);
}

{
  SKCAction *var19;
  int v3;

  this->var0 = (void **)&off_1EA4FDF90;
  var19 = this->var19;
  if (var19)
  {
    v3 = var19->var1 - 1;
    var19->var1 = v3;
    if (!v3)
      (*((void (**)(SKCAction *))var19->var0 + 1))(var19);
  }
  this->var19 = 0;
  SKCAction::~SKCAction((SKCAction *)this);
}

SKCAction *SKCReferencedAction::setBaseSpeed(SKCReferencedAction *this, float a2)
{
  SKCAction *result;

  if (!this->var19)
    objc_msgSend(this->var4, "_ensureReferencedAction");
  SKCAction::setBaseSpeed((SKCAction *)this, a2);
  result = this->var19;
  if (result)
    return (SKCAction *)(*((uint64_t (**)(SKCAction *, float))result->var0 + 5))(result, this->var17 * this->var16);
  return result;
}

SKCAction *SKCReferencedAction::setSpeed(SKCReferencedAction *this, float a2)
{
  SKCAction *result;

  if (!this->var19)
    objc_msgSend(this->var4, "_ensureReferencedAction");
  SKCAction::setSpeed((SKCAction *)this, a2);
  result = this->var19;
  if (result)
    return (SKCAction *)(*((uint64_t (**)(SKCAction *, float))result->var0 + 5))(result, this->var17 * this->var16);
  return result;
}

void SKCReferencedAction::cpp_updateWithTargetForTime(SKCReferencedAction *this, SKCNode *a2, double a3)
{
  SKCAction *var19;
  SKCAction *v7;
  double v8;

  var19 = this->var19;
  if (!var19)
  {
    objc_msgSend(this->var4, "_ensureReferencedAction");
    var19 = this->var19;
  }
  if (var19->var5)
    (*((void (**)(SKCAction *, SKCNode *, double))var19->var0 + 7))(var19, a2, a3);
  else
    SKCAction::updateWithTargetForTime(var19, a2, a3);
  v7 = this->var19;
  if (!v7->var5)
  {
    if (!objc_msgSend(v7->var4, "finished"))
      return;
    v7 = this->var19;
    goto LABEL_11;
  }
  if (v7->var11)
  {
LABEL_11:
    v8 = (*((double (**)(SKCAction *))v7->var0 + 2))(v7);
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, a2, v8);
    this->var10 = (*((double (**)(SKCAction *))this->var19->var0 + 2))(this->var19);
  }
}

uint64_t SKCReferencedAction::cpp_wasAddedToTargetAtTime(SKCReferencedAction *this, SKCNode *a2, double a3)
{
  if (!this->var19)
    objc_msgSend(this->var4, "_ensureReferencedAction");
  SKCAction::cpp_wasAddedToTargetAtTime((SKCAction *)this, a2, a3);
  return SKCAction::wasAddedToTargetAtTime(this->var19, a2, a3);
}

SKCAction *SKCReferencedAction::cpp_wasRemovedFromTargetAtTime(SKCReferencedAction *this, SKCNode *a2, double a3)
{
  SKCAction *result;

  SKCAction::cpp_wasRemovedFromTargetAtTime((SKCAction *)this, a2, a3);
  result = this->var19;
  if (result)
    return (SKCAction *)SKCAction::wasRemovedFromTargetAtTime(result, a2, a3);
  return result;
}

uint64_t SKCReferencedAction::cpp_willStartWithTargetAtTime(SKCReferencedAction *this, SKCNode *a2, double a3)
{
  if (!this->var19)
    objc_msgSend(this->var4, "_ensureReferencedAction");
  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  return SKCAction::willStartWithTargetAtTime(this->var19, a2, a3);
}

uint64_t SKCReferencedAction::cpp_wasPausedWithTargetAtTime(SKCReferencedAction *this, SKCNode *a2, double a3)
{
  if (!this->var19)
    objc_msgSend(this->var4, "_ensureReferencedAction");
  SKCAction::cpp_wasPausedWithTargetAtTime((SKCAction *)this, a2, a3);
  return SKCAction::wasPausedWithTargetAtTime(this->var19, a2, a3);
}

uint64_t SKCReferencedAction::cpp_willResumeWithTargetAtTime(SKCReferencedAction *this, SKCNode *a2, double a3)
{
  if (!this->var19)
    objc_msgSend(this->var4, "_ensureReferencedAction");
  SKCAction::cpp_willResumeWithTargetAtTime((SKCAction *)this, a2, a3);
  return SKCAction::willResumeWithTargetAtTime(this->var19, a2, a3);
}

void sub_1DC8580C8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1DF0CF560](v3, 0x10A1C4017155BB2);

  _Unwind_Resume(a1);
}

void sub_1DC85829C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC858334(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC858874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC85891C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC858BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC858E20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC858EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC859C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,char a25,_QWORD *a26,uint64_t a27,char a28,_QWORD *a29,uint64_t a30,char a31,_QWORD *a32)
{
  void *v32;
  void *v33;
  void *v34;

  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy((uint64_t)&a25, a26);
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy((uint64_t)&a28, a29);
  std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::destroy((uint64_t)&a31, a32);

  _Unwind_Resume(a1);
}

void sub_1DC85A018(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DC85A1A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC85A390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _WORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[16] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned int,double>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,double>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,double>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__tree_node<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,void *> *,long>>(uint64_t **result, id *a2, id *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  id *v9;
  id *v10;
  BOOL v11;
  id *v12;
  id *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_WORD *)v8 + 16) = *((_WORD *)v9 + 16);
          objc_storeStrong((id *)v8 + 5, v9[5]);
          std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__node_insert_multi(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (id *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (id *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (id *)v9[2];
              v11 = *a2 == v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__emplace_multi<std::pair<unsigned short const,SKSpriteNode * {__strong}> const&>(v5, a2 + 4);
      v12 = (id *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (id *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (id *)a2[2];
          v11 = *v13 == a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1DC85A924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(unsigned __int16 *)(a2 + 32) >= *((unsigned __int16 *)v4 + 16))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

_QWORD *std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

_WORD *std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__emplace_multi<std::pair<unsigned short const,SKSpriteNode * {__strong}> const&>(uint64_t **a1, id *a2)
{
  _WORD *v4;
  unsigned int v5;
  id v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;

  v4 = operator new(0x30uLL);
  v5 = *(unsigned __int16 *)a2;
  v4[16] = v5;
  v6 = a2[1];
  v7 = a1 + 1;
  v8 = a1[1];
  *((_QWORD *)v4 + 5) = v6;
  if (v8)
  {
    do
    {
      while (1)
      {
        v7 = (uint64_t **)v8;
        if (v5 >= *((unsigned __int16 *)v8 + 16))
          break;
        v8 = (uint64_t *)*v8;
        v9 = v7;
        if (!*v7)
          goto LABEL_8;
      }
      v8 = (uint64_t *)v8[1];
    }
    while (v8);
    v9 = v7 + 1;
  }
  else
  {
    v9 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v7, v9, (uint64_t *)v4);
  return v4;
}

uint64_t **std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned short,double>,std::__tree_node<std::__value_type<unsigned short,double>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_WORD *)v8 + 16) = *((_WORD *)v9 + 16);
          v8[5] = v9[5];
          std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__node_insert_multi(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::__emplace_multi<std::pair<unsigned short const,double> const&>(v5, (_OWORD *)a2 + 2);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1DC85AC38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

unsigned __int16 *std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::__emplace_multi<std::pair<unsigned short const,double> const&>(uint64_t **a1, _OWORD *a2)
{
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (unsigned __int16 *)operator new(0x30uLL);
  v5 = v4;
  *((_OWORD *)v4 + 2) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v4[16] >= *((unsigned __int16 *)v7 + 16))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v5;
}

uint64_t **std::__tree<std::__value_type<unsigned int,double>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,double>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,double>,std::__tree_node<std::__value_type<unsigned int,double>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          v8[5] = v9[5];
          std::__tree<std::__value_type<unsigned int,double>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,double>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,double>>>::__node_insert_multi(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<unsigned int,double>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,double>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,double>>>::__emplace_multi<std::pair<unsigned int const,double> const&>(v5, (_OWORD *)a2 + 2);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1DC85AE88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<unsigned int,double>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,double>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,double>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

_OWORD *std::__tree<std::__value_type<unsigned int,double>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,double>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,double>>>::__emplace_multi<std::pair<unsigned int const,double> const&>(uint64_t **a1, _OWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = operator new(0x30uLL);
  v5 = v4;
  v4[2] = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (*((_DWORD *)v4 + 8) >= *((_DWORD *)v7 + 8))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v5;
}

void sub_1DC85B048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC85B0A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0CF560](v1, 0x10E1C40B9250594);
  _Unwind_Resume(a1);
}

void sub_1DC85B174(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC85B4F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC85BA28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1DC85BE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1DC85BEE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC85BF4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC85BFB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC85C014(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCLabelNode::setFontName(id *this, NSString *a2)
{
  objc_storeStrong(this + 73, a2);
  *((_BYTE *)this + 713) = 1;
  SKCNode::setDirty((SKCNode *)this);
}

void sub_1DC85C21C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_1DC85C304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC85C55C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC85C688(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DC85CFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1DC85D90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1DC85DBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC85DCFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC85DE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC85DEA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0CF560](v1, 0x10A1C40A8740AABLL);
  _Unwind_Resume(a1);
}

void sub_1DC85E3D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC85E77C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC85EAB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DC85EBDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC85ECC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC85ED58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC85EE18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC85EEFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC85F0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DC85F19C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC85F23C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC85F2E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC85F338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)SKTileMapNode;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_1DC85F44C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC85F580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC85F730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC85F8A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC85F9F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC85FB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1DC85FE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1DC85FFE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1DC86024C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1DC8605BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1DC8609E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1DC860FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

_QWORD *setCorrectAdjacencyDataForTileSetType(_QWORD *result, const uint64_t **a2, const uint64_t **a3, SKTileSetType a4, char a5, char a6)
{
  const uint64_t *v6;
  BOOL v7;
  const uint64_t *v8;
  const uint64_t *v9;

  if (a4 >= SKTileSetTypeHexagonalFlat)
  {
    if (a4 == SKTileSetTypeHexagonalPointy)
    {
      *result = 6;
      v6 = (const uint64_t *)&kHexPointyOddRowXOffsets;
      v7 = (a6 & 1) == 0;
      if ((a6 & 1) == 0)
        v6 = (const uint64_t *)&kHexPointyEvenRowXOffsets;
      v8 = (const uint64_t *)&kHexPointyOddRowYOffsets;
      v9 = (const uint64_t *)&kHexPointyEvenRowYOffsets;
    }
    else
    {
      if (a4 != SKTileSetTypeHexagonalFlat)
        return result;
      *result = 6;
      v6 = (const uint64_t *)&kHexFlatOddColumnXOffsets;
      v7 = (a5 & 1) == 0;
      if ((a5 & 1) == 0)
        v6 = (const uint64_t *)&kHexFlatEvenColumnXOffsets;
      v8 = (const uint64_t *)&kHexFlatOddColumnYOffsets;
      v9 = (const uint64_t *)&kHexFlatEvenColumnYOffsets;
    }
    if (v7)
      v8 = v9;
    *a2 = v6;
    *a3 = v8;
  }
  return result;
}

void sub_1DC861E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  std::deque<unsigned int>::~deque[abi:ne180100](&STACK[0x200]);
  _Unwind_Resume(a1);
}

void std::deque<unsigned int>::push_back(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<unsigned int>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1DC8626E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *getHexIndexFromPoint(_QWORD *result, int *a2, int *a3, float a4, float a5)
{
  float v5;
  float v6;
  int v7;
  int v8;
  int v9;
  float v10;
  int v11;
  float v12;
  int v13;

  v5 = (float)(a4 * 3.0) * 0.5;
  v6 = COERCE_FLOAT(*result) / v5;
  v7 = vcvtms_s32_f32(v6);
  v8 = (int)(float)(COERCE_FLOAT(*result) - (float)(v5 * (float)(int)floorf(v6)));
  if (v7 >= 0)
    v9 = v7 & 1;
  else
    v9 = -(v7 & 1);
  v10 = (float)(int)(float)(COERCE_FLOAT(HIDWORD(*result)) - (float)((float)((float)v9 * a5) * 0.5));
  v11 = vcvtms_s32_f32(v10 / a5);
  v12 = (float)(int)(float)(v10 - (float)(a5 * (float)(int)floorf(v10 / a5)));
  v13 = (int)(float)((float)(a4 * 0.5) - (float)((float)(v12 * a4) / a5));
  if (v13 < 0)
    v13 = -v13;
  if (v13 >= v8)
  {
    *a2 = v7 - 1;
    *a3 = v9 + v11;
    if ((float)(a5 * 0.5) <= v12)
      return result;
    v11 = v9 + v11 - 1;
  }
  else
  {
    *a2 = v7;
  }
  *a3 = v11;
  return result;
}

void sub_1DC862A84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC862D5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC863024(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC863284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC863594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15)
{

  _Unwind_Resume(a1);
}

void sub_1DC863688(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC863ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1DC8644D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t std::deque<unsigned int>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned int *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<unsigned int *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void std::deque<unsigned int>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned int *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned int *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned int *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned int *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1DC8649A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<unsigned int *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<unsigned int *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

_QWORD *std::__find_segment_if[abi:ne180100]<std::__deque_iterator<unsigned int,unsigned int *,unsigned int &,unsigned int **,long,1024l>,std::__find_segment<unsigned long>,std::__identity>(_QWORD *result, _DWORD *a2, _QWORD *a3, _DWORD *a4, unint64_t *a5)
{
  _DWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;

  v5 = a2;
  v6 = *a5;
  if (result == a3)
  {
    v13 = a4;
    if (!HIDWORD(v6))
    {
      v13 = v5;
      if (v5 != a4)
      {
        while (*v13 != (_DWORD)v6)
        {
          if (++v13 == a4)
          {
            v13 = a4;
            break;
          }
        }
      }
    }
    if (result && (_DWORD *)(*result + 4096) == v13)
      ++result;
  }
  else
  {
    v7 = *result + 4096;
    v8 = HIDWORD(v6);
    if (HIDWORD(v6))
      v9 = 1;
    else
      v9 = v7 == (_QWORD)a2;
    if (v9)
      goto LABEL_7;
    while (*a2 != (_DWORD)v6)
    {
      if (++a2 == (_DWORD *)v7)
        goto LABEL_7;
    }
    if (a2 == (_DWORD *)v7)
    {
LABEL_7:
      v10 = result + 1;
      if (result + 1 == a3)
      {
        v11 = result;
LABEL_25:
        v14 = (_DWORD *)*a3;
        v15 = a4;
        if (!v8)
        {
          if (v14 == a4)
            return a3;
          v15 = (_DWORD *)*a3;
          while (*v15 != (_DWORD)v6)
          {
            if (++v15 == a4)
            {
              v15 = a4;
              break;
            }
          }
        }
        result = a3;
        if (v14 + 1024 == v15)
          return v11 + 2;
      }
      else
      {
        while (1)
        {
          v11 = v10;
          if (!v8)
            break;
LABEL_14:
          v10 = v11 + 1;
          if (v11 + 1 == a3)
            goto LABEL_25;
        }
        v12 = 0;
        while (*(_DWORD *)(*v11 + v12) != (_DWORD)v6)
        {
          v12 += 4;
          if (v12 == 4096)
            goto LABEL_14;
        }
        return v11;
      }
    }
  }
  return result;
}

id PointLight_vsh()
{
  return (id)PointLight_vsh_src;
}

id PointLightWithVertexTransform_vsh()
{
  return (id)PointLightWithVertexTransform_vsh_src;
}

id PointLight_fsh()
{
  if (PointLight_fsh::once != -1)
    dispatch_once(&PointLight_fsh::once, &__block_literal_global_0);
  return (id)PointLight_fsh::shader;
}

id PointLightRectTexture_fsh()
{
  if (PointLightRectTexture_fsh::once != -1)
    dispatch_once(&PointLightRectTexture_fsh::once, &__block_literal_global_10);
  return (id)PointLightRectTexture_fsh::shader;
}

id PointLightRectTexture2_fsh()
{
  if (PointLightRectTexture2_fsh::once != -1)
    dispatch_once(&PointLightRectTexture2_fsh::once, &__block_literal_global_15);
  return (id)PointLightRectTexture2_fsh::shader;
}

id PointLightAllRectTextures_fsh()
{
  if (PointLightAllRectTextures_fsh::once != -1)
    dispatch_once(&PointLightAllRectTextures_fsh::once, &__block_literal_global_16);
  return (id)PointLightAllRectTextures_fsh::shader;
}

void sub_1DC865280(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0CF560](v1, 0x10A1C403B5F1E55);
  _Unwind_Resume(a1);
}

void sub_1DC865388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8655B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DC8656D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC865898(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8659DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1DC865A70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC865B58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC865D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  void *v15;
  id *v16;
  id *v17;

  v17 = v16;
  objc_destroyWeak(v17);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1DC865E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC865F0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC866094(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1DC866244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1DC8663D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DC8664D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1DC8665C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1DC8666BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC86682C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DC866900(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC866A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC866B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC866C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DC866D64(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC866E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC866F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC8670F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DC8671CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC8672FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8673EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC86755C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DC867630(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC867760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC867850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC8679C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DC867A94(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC867BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC867CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC867E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DC867EF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC868028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC868134(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC868640(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v4 - 80);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v4 - 64);

  _Unwind_Resume(a1);
}

void sub_1DC868C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v30 - 144);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v30 - 120);

  _Unwind_Resume(a1);
}

void sub_1DC86904C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  void *v16;
  uint64_t v17;
  va_list va;

  va_start(va, a15);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v17 - 96);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v17 - 80);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v17 - 64);

  _Unwind_Resume(a1);
}

void sub_1DC8693F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v3 - 96);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v3 - 80);
  _Unwind_Resume(a1);
}

void sub_1DC8695A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DC86979C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1DC869C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a25);

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v30 - 144);

  _Unwind_Resume(a1);
}

void sub_1DC869D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  glContextUse::~glContextUse((glContextUse *)va);
  _Unwind_Resume(a1);
}

void sub_1DC869DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  glContextUse::~glContextUse((glContextUse *)&a9);
  _Unwind_Resume(a1);
}

void sub_1DC869F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  uint64_t v12;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1DF0CF560](v12, 0x10A0C40B78ACC54);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void sub_1DC86A184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DC86A458(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void glContextUse::glContextUse(glContextUse *this, EAGLContext *a2)
{
  EAGLContext *v3;
  EAGLContext *v4;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0CD0958], "currentContext");
  *(_QWORD *)this = objc_claimAutoreleasedReturnValue();
  v4 = v3;
  *((_QWORD *)this + 1) = v4;
  if (*(EAGLContext **)this != v4)
    objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", v4);

}

void sub_1DC86A578(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;

  _Unwind_Resume(a1);
}

void glContextUse::~glContextUse(glContextUse *this)
{
  void *v2;

  v2 = *(void **)this;
  if (*(_QWORD *)this != *((_QWORD *)this + 1))
  {
    objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:");
    v2 = (void *)*((_QWORD *)this + 1);
  }

}

_QWORD *std::shared_ptr<jet_framebuffer>::shared_ptr[abi:ne180100]<jet_framebuffer,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1EA4FE200;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DC86A644(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_framebuffer *,std::shared_ptr<jet_framebuffer>::__shared_ptr_default_delete<jet_framebuffer,jet_framebuffer>,std::allocator<jet_framebuffer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

uint64_t std::__shared_ptr_pointer<jet_framebuffer *,std::shared_ptr<jet_framebuffer>::__shared_ptr_default_delete<jet_framebuffer,jet_framebuffer>,std::allocator<jet_framebuffer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_framebuffer *,std::shared_ptr<jet_framebuffer>::__shared_ptr_default_delete<jet_framebuffer,jet_framebuffer>,std::allocator<jet_framebuffer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1EA4FE278;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DC86A73C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 128))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_texture *,std::shared_ptr<jet_texture>::__shared_ptr_default_delete<jet_texture,jet_texture>,std::allocator<jet_texture>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

uint64_t std::__shared_ptr_pointer<jet_texture *,std::shared_ptr<jet_texture>::__shared_ptr_default_delete<jet_texture,jet_texture>,std::allocator<jet_texture>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_texture *,std::shared_ptr<jet_texture>::__shared_ptr_default_delete<jet_texture,jet_texture>,std::allocator<jet_texture>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<jet_context>::shared_ptr[abi:ne180100]<jet_context_Metal,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1EA4FE2F0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DC86A834(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 128))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_context_Metal *,std::shared_ptr<jet_context>::__shared_ptr_default_delete<jet_context,jet_context_Metal>,std::allocator<jet_context_Metal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

uint64_t std::__shared_ptr_pointer<jet_context_Metal *,std::shared_ptr<jet_context>::__shared_ptr_default_delete<jet_context,jet_context_Metal>,std::allocator<jet_context_Metal>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_context_Metal *,std::shared_ptr<jet_context>::__shared_ptr_default_delete<jet_context,jet_context_Metal>,std::allocator<jet_context_Metal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<jet_context_OpenGL>::shared_ptr[abi:ne180100]<jet_context_OpenGL,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1EA4FE368;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DC86A92C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 128))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_context_OpenGL *,std::shared_ptr<jet_context_OpenGL>::__shared_ptr_default_delete<jet_context_OpenGL,jet_context_OpenGL>,std::allocator<jet_context_OpenGL>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

uint64_t std::__shared_ptr_pointer<jet_context_OpenGL *,std::shared_ptr<jet_context_OpenGL>::__shared_ptr_default_delete<jet_context_OpenGL,jet_context_OpenGL>,std::allocator<jet_context_OpenGL>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_context_OpenGL *,std::shared_ptr<jet_context_OpenGL>::__shared_ptr_default_delete<jet_context_OpenGL,jet_context_OpenGL>,std::allocator<jet_context_OpenGL>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1DC86B104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC86B160(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC86B1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC86B234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC86B290(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC86B2E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC86B350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC86B3AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC86B414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC86B470(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC86B4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC86B534(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC86B59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC86B5F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC86B660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC86B6BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC86B724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC86B780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC86B7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC86B844(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC86B8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC86B908(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC86BA74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC86C034(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1DC86C188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_1DC86C8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  glContextUse::~glContextUse((glContextUse *)va);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1DC86CC34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC86D04C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC86D130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC86D1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC86D4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_1DC86DB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1DC86DF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1DC86E33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_1DC86E840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va3);

  _Unwind_Resume(a1);
}

void sub_1DC86EC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1DC86EE64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC86F238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1DC86F658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1DC86F7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1DC86F850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC86F8C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC86F9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;
  void *v15;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1DC86FAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1DC86FFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,char *a25)
{
  void *v25;

  std::__tree<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::__map_value_compare<SKNode * {__strong},std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::less<SKNode * {__strong}>,true>,std::allocator<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>>>::destroy((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

id std::vector<UITouch * {__strong}>::push_back[abi:ne180100](char **a1, id *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  id result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)*a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v25 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v4, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    v24 = v16;
    *(_QWORD *)v15 = *a2;
    v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v9 = (char *)v23.i64[1];
      v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v16;
    v24 = v21;
    v22 = v20.i64[0];
    result = (id)std::__split_buffer<UITouch * {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    result = *a2;
    *(_QWORD *)v7 = result;
    v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void sub_1DC87041C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,char *a25)
{
  void *v25;

  std::__tree<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::__map_value_compare<SKNode * {__strong},std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::less<SKNode * {__strong}>,true>,std::allocator<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>>>::destroy((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

void sub_1DC870834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,char *a35)
{
  void *v35;

  std::__tree<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::__map_value_compare<SKNode * {__strong},std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::less<SKNode * {__strong}>,true>,std::allocator<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>>>::destroy((uint64_t)&a34, a35);
  _Unwind_Resume(a1);
}

void sub_1DC870C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,char *a35)
{
  void *v35;

  std::__tree<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::__map_value_compare<SKNode * {__strong},std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::less<SKNode * {__strong}>,true>,std::allocator<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>>>::destroy((uint64_t)&a34, a35);
  _Unwind_Resume(a1);
}

void sub_1DC870E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)SKView;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1DC870FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  v11 = v10;

  _Unwind_Resume(a1);
}

void sub_1DC8711B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC871374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC871430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8718FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8719B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC871A28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC871D8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DC871F90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC872164(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC87244C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC872838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DC872930(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC872B94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC872D34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC872E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC872EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC872F88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC873020(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1DC873234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1DC8733E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DC8734C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC87361C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8739C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

void sub_1DC873CD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::__map_value_compare<SKNode * {__strong},std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::less<SKNode * {__strong}>,true>,std::allocator<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::__map_value_compare<SKNode * {__strong},std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::less<SKNode * {__strong}>,true>,std::allocator<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::__map_value_compare<SKNode * {__strong},std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::less<SKNode * {__strong}>,true>,std::allocator<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 40);
    std::vector<UITouch * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v4);

    operator delete(a2);
  }
}

void std::vector<UITouch * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::__tree<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::__map_value_compare<SKNode * {__strong},std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::less<SKNode * {__strong}>,true>,std::allocator<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>>>::__emplace_unique_key_args<SKNode * {__strong},std::piecewise_construct_t const&,std::tuple<SKNode * const {__strong}&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v11[4] = (uint64_t)**a4;
    v11[5] = 0;
    v11[6] = 0;
    v11[7] = 0;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t std::__split_buffer<UITouch * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1DC87430C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1081C40F32963C4);

  _Unwind_Resume(a1);
}

void sub_1DC8745F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1DC874718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC87490C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC874ADC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DC874C08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void SKCPlaySound::SKCPlaySound(SKCPlaySound *this, SKCAction *a2)
{
  uint64_t v4;

  SKCAction::SKCAction((SKCAction *)this);
  *(_QWORD *)v4 = &off_1EA4FE4D0;
  *(_QWORD *)(v4 + 112) = 0;
  this->var4 = a2->var4;
  *(_OWORD *)&this->var6 = *(_OWORD *)&a2->var6;
  this->var12 = a2->var12;
  this->var11 = a2->var11;
  *(_QWORD *)&this->var8 = *(_QWORD *)&a2->var8;
  this->var14 = a2->var14;
  this->var5 = 1;
  objc_storeWeak((id *)(v4 + 112), 0);
  this->var20 = 0;
}

void SKCPlaySound::~SKCPlaySound(SKCPlaySound *this)
{
  objc_destroyWeak(&this->var19);
  SKCAction::~SKCAction((SKCAction *)this);
}

{
  objc_destroyWeak(&this->var19);
  SKCAction::~SKCAction((SKCAction *)this);
  JUMPOUT(0x1DF0CF560);
}

void SKCPlaySound::cpp_updateWithTargetForTime(SKCPlaySound *this, SKCNode *a2, double a3)
{
  id WeakRetained;
  id v7;
  SKSoundSource *v8;
  float v9;

  if (!this->var20)
  {
    WeakRetained = objc_loadWeakRetained(&this->var19);

    if (WeakRetained)
    {
      this->var20 = 1;
      v7 = objc_loadWeakRetained(&this->var19);
      objc_msgSend(v7, "play");

      v8 = (SKSoundSource *)objc_loadWeakRetained(&this->var19);
      SKCRendererRegisterSoundSource(v8);

    }
  }
  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  if ((COERCE_UNSIGNED_INT(v9 + -1.0) & 0x60000000) == 0)
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, a2, a3);
}

void sub_1DC874E2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

SKCAction *SKCPlaySound::cpp_willStartWithTargetAtTime(SKCPlaySound *this, SKCNode *a2, double a3)
{
  SKCAction *result;

  result = SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  this->var20 = 0;
  return result;
}

void sub_1DC874F48(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1081C4082519AB5);

  _Unwind_Resume(a1);
}

void sub_1DC874FD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8750DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x1DF0CF560](v3, 0x1081C4082519AB5);

  _Unwind_Resume(a1);
}

void sub_1DC875188(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC875228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCCustomAction::SKCCustomAction(SKCCustomAction *this, SKCAction *a2)
{
  uint64_t v3;

  SKCAction::SKCAction((SKCAction *)this);
  *(_QWORD *)v3 = &off_1EA4FE568;
  *(_QWORD *)(v3 + 24) = a2->var4;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(_QWORD *)(v3 + 56) = *(_QWORD *)&a2->var8;
  *(_QWORD *)(v3 + 88) = a2->var14;
  *(_BYTE *)(v3 + 32) = 1;
  *(_QWORD *)(v3 + 112) = 0;
}

void SKCCustomAction::~SKCCustomAction(SKCCustomAction *this)
{

  SKCAction::~SKCAction((SKCAction *)this);
}

{

  SKCAction::~SKCAction((SKCAction *)this);
  JUMPOUT(0x1DF0CF560);
}

SKCAction *SKCCustomAction::cpp_updateWithTargetForTime(SKCCustomAction *this, SKCNode *a2, double a3)
{
  float v6;
  float v7;
  SKCAction *result;

  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  v7 = v6;
  result = (SKCAction *)this->var19;
  if (result)
    result = (SKCAction *)((uint64_t (*)(SKCAction *, _QWORD, double))result->var3)(result, *((_QWORD *)a2 + 1), (float)(v6 * this->var2));
  if ((COERCE_UNSIGNED_INT(v7 + -1.0) & 0x60000000) == 0)
    return SKCAction::didFinishWithTargetAtTime((SKCAction *)this, a2, a3);
  return result;
}

void sub_1DC875468(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC875500(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8755B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC87564C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC875738(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0CF560](v1, 0x10A1C40EA495629);
  _Unwind_Resume(a1);
}

void SKCTransitionNode::SKCTransitionNode(SKCTransitionNode *this)
{
  uint64_t v1;

  SKCNode::SKCNode(this);
  *(_QWORD *)v1 = off_1EA4FE600;
  *(_DWORD *)(v1 + 560) = 0;
  *(_QWORD *)(v1 + 568) = 0;
  *(_WORD *)(v1 + 576) = 257;
  *(_OWORD *)(v1 + 592) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_OWORD *)(v1 + 624) = 0u;
  *(_OWORD *)(v1 + 640) = 0u;
  *(_OWORD *)(v1 + 656) = 0u;
  *(_OWORD *)(v1 + 672) = 0u;
  *(_OWORD *)(v1 + 688) = 0u;
  *(_OWORD *)(v1 + 704) = 0u;
  *(_QWORD *)(v1 + 720) = 0;
}

double SKCTransitionNode::getBatchInfo@<D0>(uint64_t a1@<X8>, uint64_t a2@<X0>)
{
  double result;

  if (!*(_QWORD *)(a2 + 600) && !*(_BYTE *)(a2 + 726))
    return SKCNode::getBatchInfo(a1);
  *(_DWORD *)(a1 + 12) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_QWORD *)&result = 0x300000010;
  *(_QWORD *)(a1 + 4) = 0x300000010;
  *(_BYTE *)a1 = 1;
  return result;
}

void SKCTransitionNode::subclassRecomputeFlags(SKCTransitionNode *this)
{
  SKCNode::setFlags(this, 66, 1);
  *((_DWORD *)this + 69) |= 0x42u;
}

BOOL SKCTransitionNode::getNeedsCustomRenderOps(uint64_t a1)
{
  return *(_QWORD *)(a1 + 600) || *(_BYTE *)(a1 + 726);
}

uint64_t SKCTransitionNode::getMaxBatchRenderElementCount(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 600) || *(_BYTE *)(a1 + 726))
    return 16;
  else
    return 0;
}

uint64_t SKCTransitionNode::addBatchRenderElements(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 600))
    return 0;
  else
    return SKCNode::addBatchRenderElements();
}

void SKCTransitionNode::addRenderOps(float32x4_t *a1, int *a2, _QWORD *a3)
{
  float32x4_t *v6;
  int v7;
  std::__shared_weak_count *v9;
  __int128 v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  float v21;
  unsigned int v22;
  float v23;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  float v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  int v46;
  char v47;
  std::__shared_weak_count *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  std::__shared_weak_count *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  char v64;
  char v65;
  char v66;
  char v67;
  int8x16_t v68;
  std::__shared_weak_count *v69;
  float32x4_t v70;
  std::__shared_weak_count *v71;
  char v72;
  char v73;
  char v74;
  char v75;
  float32x4_t v76;
  float32x4_t v77;
  int v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  int8x16_t v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  float32x4_t v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  float32x4_t v93;
  __float2 v94;
  unint64_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  unint64_t v99;
  float32x4_t v100;
  unint64_t v101;
  float32x4_t v102;
  unint64_t v103;
  unint64_t v104;
  __float2 v105;
  unint64_t v106;
  float32x4_t v107;
  float32x4_t v108;
  unint64_t v109;
  float32x4_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  float32x4_t v114;
  unint64_t v115;
  float v116;
  __float2 v117;
  unint64_t v118;
  float32x4_t v119;
  float32x4_t v120;
  unint64_t v121;
  float32x4_t v122;
  unint64_t v123;
  float v124;
  __float2 v125;
  unint64_t v126;
  float32x4_t v127;
  float32x4_t v128;
  unint64_t v129;
  float32x4_t v130;
  unint64_t v131;
  int v132;
  int v133;
  unsigned int v134;
  uint64_t i;
  uint64_t v136;
  float *v137;
  uint64_t v138;
  int16x8_t v139;
  int16x8_t v140;
  unsigned __int32 v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int32 v144;
  float32x4_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  _DWORD *v169;
  unsigned int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _DWORD *v181;
  unsigned int v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float v205;
  float32x4_t v206;
  float32x4_t v207;
  float v208;
  float v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  __int128 v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  __int128 v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  _QWORD v245[5];
  float v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  uint64_t v249;
  std::__shared_weak_count *v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  _BYTE __str[32];
  float32x4_t v256;
  float32x4_t v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  int32x4_t v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  uint64_t v283;
  simd_float4x4 v284;
  simd_float4x4 v285;

  v283 = *MEMORY[0x1E0C80C00];
  if (a1[37].i64[1] || a1[45].i8[6])
  {
    v6 = (float32x4_t *)MEMORY[0x1E0C83FF0];
    v235 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
    v236 = *(float32x4_t *)MEMORY[0x1E0C83FF0];
    v237 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
    v241 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 32);
    SKCRenderer::getBackingContext(*((_QWORD *)a2 + 13), &v266);
    v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v266 + 136))(v266);
    _Q0.i64[1] = 0xBEAAAAAB3BDA740ELL;
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v266 + 1);
    v11 = v237;
    *(_QWORD *)&v10 = v241;
    if (*((_QWORD *)&v266 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v266 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        _Q0.i64[1] = 0xBEAAAAAB3BDA740ELL;
        v11 = v237;
        *(_QWORD *)&v10 = v241;
      }
    }
    *((_QWORD *)&v10 + 1) = 0xBEAAAAAB3BDA740ELL;
    if (v7 == 1)
    {
      v14 = 0;
      v15 = *v6;
      v16 = v6[1];
      v17 = v6[2];
      v18 = v6[3];
      v19.i64[0] = 0;
      v19.i64[1] = __PAIR64__(v18.u32[3], 1.0);
      v258 = (__int128)v236;
      v259 = (__int128)v235;
      v260 = v10;
      v261 = v11;
      do
      {
        *(__int128 *)((char *)&v266 + v14) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(*(__int128 *)((char *)&v258 + v14))), v16, *(float32x2_t *)((char *)&v258 + v14), 1), v17, *(float32x4_t *)((char *)&v258 + v14), 2), v19, *(float32x4_t *)((char *)&v258 + v14), 3);
        v14 += 16;
      }
      while (v14 != 64);
      v20 = 0;
      v15.i32[0] = 1.0;
      v16.i32[1] = 1.0;
      v17.i32[2] = 0.5;
      v258 = v266;
      v259 = v267;
      v260 = v268;
      v261 = v269;
      do
      {
        *(__int128 *)((char *)&v266 + v20) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(*(__int128 *)((char *)&v258 + v20))), v16, *(float32x2_t *)((char *)&v258 + v20), 1), v17, *(float32x4_t *)((char *)&v258 + v20), 2), v18, *(float32x4_t *)((char *)&v258 + v20), 3);
        v20 += 16;
      }
      while (v20 != 64);
      _Q0.i64[1] = *((_QWORD *)&v267 + 1);
      v10 = v268;
      v235 = (float32x4_t)v267;
      v236 = (float32x4_t)v266;
      v11 = v269;
    }
    v21 = a1[45].f32[0];
    if (v21 > 1.0)
      v21 = 1.0;
    v22 = *a2;
    v23 = 0.0;
    v279 = 0u;
    v280 = 0u;
    if (v21 >= 0.0)
      v23 = v21;
    v281 = 0uLL;
    v282 = 0uLL;
    DWORD2(v279) = 1065353216;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)&v280 = _Q0.i64[0];
    HIDWORD(v280) = 1065353216;
    v274 = 0uLL;
    v276 = 0x3F80000000000000;
    v277 = 0uLL;
    v278 = 0uLL;
    DWORD2(v274) = 1065353216;
    v275 = _Q0.i64[0];
    v270 = xmmword_1DC921DB0;
    v271 = unk_1DC921DC0;
    v272 = xmmword_1DC921DD0;
    v273 = unk_1DC921DE0;
    v266 = xmmword_1DC921D70[0];
    v267 = unk_1DC921D80;
    v268 = xmmword_1DC921D90;
    v269 = unk_1DC921DA0;
    v28 = a1[38].i64[0];
    v29 = (std::__shared_weak_count *)a1[38].i64[1];
    v249 = v28;
    v250 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(p_shared_owners);
      while (__stxr(v31 + 1, p_shared_owners));
    }
    v32 = v23 * (float)(v23 * (float)((float)(v23 * -2.0) + 3.0));
    v33 = a1[39].i64[0];
    v34 = (std::__shared_weak_count *)a1[39].i64[1];
    v247 = v33;
    v248 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = 1.0 - v32;
    v38 = *v6;
    v39 = v6[1];
    v40 = *v6;
    v41 = (int32x4_t)v39;
    v42 = v6[2];
    v43 = v6[3];
    v258 = (__int128)v40;
    v259 = (__int128)v39;
    v44 = (int32x4_t)v6[3];
    v260 = (__int128)v6[2];
    v261 = (__int128)v44;
    v262 = v40;
    v263 = v39;
    __asm { FMOV            V19.4S, #1.0 }
    v46 = a1[35].i32[0] - 1;
    v264 = (float32x4_t)v260;
    v265 = v44;
    switch(v46)
    {
      case 0:
        v205 = 1.0 - v32;
        v219 = v43;
        v223 = v42;
        v227 = v39;
        v231 = v38;
        v214 = v32;
        std::shared_ptr<jet_texture>::operator=[abi:ne180100](&v247, (uint64_t *)a2 + 54);
        v210 = a1[19];
        if (v214 >= 0.5)
        {
          std::shared_ptr<jet_texture>::operator=[abi:ne180100](&v249, (uint64_t *)&a1[39]);
          v47 = 0;
          v32 = v205 + v205;
        }
        else
        {
          std::shared_ptr<jet_texture>::operator=[abi:ne180100](&v249, (uint64_t *)&a1[38]);
          v47 = 0;
          v32 = v214 + v214;
        }
        v78 = 1;
        goto LABEL_87;
      case 1:
        v238 = (float32x4_t)v11;
        v242 = (float32x4_t)v10;
        v211 = _Q19;
        v215 = v32;
        if (v32 <= 0.5)
        {
          v220 = v43;
          v224 = v42;
          v202 = v42;
          v206 = v43;
          v228 = v39;
          v232 = v38;
          v195 = v38;
          v198 = v39;
        }
        else
        {
          v48 = v250;
          v249 = v33;
          v250 = v248;
          v247 = v28;
          v248 = v48;
          v284.columns[0] = (simd_float4)v38;
          v284.columns[1] = (simd_float4)v39;
          v284.columns[2] = (simd_float4)v42;
          v284.columns[3] = (simd_float4)v43;
          *(double *)v49.i64 = sk_matrix_scale(v284, -1.0, 1.0, 1.0);
          v228 = v6[1];
          v232 = *v6;
          v220 = v6[3];
          v224 = v6[2];
          v32 = v215;
          v202 = v50;
          v206 = v51;
          v195 = v49;
          v198 = v52;
        }
        v116 = v32 * 3.14159265;
        v117 = __sincosf_stret(v116);
        v118 = 0;
        v119 = v232;
        v119.i32[0] = LODWORD(v117.__cosval);
        v120 = v224;
        v120.i32[0] = LODWORD(v117.__sinval);
        v120.i32[2] = LODWORD(v117.__cosval);
        v251 = v195;
        v252 = v198;
        v253 = v202;
        v254 = v206;
        do
        {
          v119.f32[2] = -v117.__sinval;
          *(float32x4_t *)&__str[v118] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v119, COERCE_FLOAT(*(_OWORD *)((char *)&v251 + v118))), v228, *(float32x2_t *)&v251.f32[v118 / 4], 1), v120, *(float32x4_t *)((char *)&v251 + v118), 2), v220, *(float32x4_t *)((char *)&v251 + v118), 3);
          v118 += 16;
        }
        while (v118 != 64);
        v121 = 0;
        _Q19 = v211;
        v122.i64[0] = 0;
        v122.i64[1] = __PAIR64__(v220.u32[3], -(float)((float)(vabds_f32(0.5, v215) * -2.0) + 1.0));
        v251 = *(float32x4_t *)__str;
        v252 = *(float32x4_t *)&__str[16];
        v253 = v256;
        v254 = v257;
        do
        {
          *(float32x4_t *)&__str[v121] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v232, COERCE_FLOAT(*(_OWORD *)((char *)&v251 + v121))), v228, *(float32x2_t *)&v251.f32[v121 / 4], 1), v224, *(float32x4_t *)((char *)&v251 + v121), 2), v122, *(float32x4_t *)((char *)&v251 + v121), 3);
          v121 += 16;
        }
        while (v121 != 64);
        v123 = 0;
        v251 = *(float32x4_t *)__str;
        v252 = *(float32x4_t *)&__str[16];
        v253 = v256;
        v254 = v257;
        do
        {
          v40 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v236, COERCE_FLOAT(*(_OWORD *)((char *)&v251 + v123))), v235, *(float32x2_t *)&v251.f32[v123 / 4], 1), v242, *(float32x4_t *)((char *)&v251 + v123), 2), v238, *(float32x4_t *)((char *)&v251 + v123), 3);
          *(float32x4_t *)&__str[v123] = v40;
          v123 += 16;
        }
        while (v123 != 64);
        goto LABEL_103;
      case 2:
        v239 = (float32x4_t)v11;
        v243 = (float32x4_t)v10;
        v212 = _Q19;
        v216 = v32;
        if (v32 <= 0.5)
        {
          v221 = v43;
          v225 = v42;
          v203 = v42;
          v207 = v43;
          v196 = v38;
          v199 = v39;
          v229 = v39;
          v233 = v38;
        }
        else
        {
          v53 = v250;
          v249 = v33;
          v250 = v248;
          v247 = v28;
          v248 = v53;
          v285.columns[0] = (simd_float4)v38;
          v285.columns[1] = (simd_float4)v39;
          v285.columns[2] = (simd_float4)v42;
          v285.columns[3] = (simd_float4)v43;
          *(double *)v54.i64 = sk_matrix_scale(v285, 1.0, -1.0, 1.0);
          v229 = v6[1];
          v233 = *v6;
          v221 = v6[3];
          v225 = v6[2];
          v32 = v216;
          v203 = v55;
          v207 = v56;
          v196 = v54;
          v199 = v57;
        }
        v124 = v32 * 3.14159265;
        v125 = __sincosf_stret(v124);
        v126 = 0;
        v127 = v229;
        v127.i32[1] = LODWORD(v125.__cosval);
        v127.i32[2] = LODWORD(v125.__sinval);
        v128 = v225;
        v128.f32[1] = -v125.__sinval;
        v128.i32[2] = LODWORD(v125.__cosval);
        v251 = v196;
        v252 = v199;
        v253 = v203;
        v254 = v207;
        do
        {
          *(float32x4_t *)&__str[v126] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v233, COERCE_FLOAT(*(_OWORD *)((char *)&v251 + v126))), v127, *(float32x2_t *)&v251.f32[v126 / 4], 1), v128, *(float32x4_t *)((char *)&v251 + v126), 2), v221, *(float32x4_t *)((char *)&v251 + v126), 3);
          v126 += 16;
        }
        while (v126 != 64);
        v129 = 0;
        _Q19 = v212;
        v130.i64[0] = 0;
        v130.i64[1] = __PAIR64__(v221.u32[3], -(float)((float)(vabds_f32(0.5, v216) * -2.0) + 1.0));
        v251 = *(float32x4_t *)__str;
        v252 = *(float32x4_t *)&__str[16];
        v253 = v256;
        v254 = v257;
        do
        {
          *(float32x4_t *)&__str[v129] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v233, COERCE_FLOAT(*(_OWORD *)((char *)&v251 + v129))), v229, *(float32x2_t *)&v251.f32[v129 / 4], 1), v225, *(float32x4_t *)((char *)&v251 + v129), 2), v130, *(float32x4_t *)((char *)&v251 + v129), 3);
          v129 += 16;
        }
        while (v129 != 64);
        v131 = 0;
        v251 = *(float32x4_t *)__str;
        v252 = *(float32x4_t *)&__str[16];
        v253 = v256;
        v254 = v257;
        do
        {
          v40 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v236, COERCE_FLOAT(*(_OWORD *)((char *)&v251 + v131))), v235, *(float32x2_t *)&v251.f32[v131 / 4], 1), v243, *(float32x4_t *)((char *)&v251 + v131), 2), v239, *(float32x4_t *)((char *)&v251 + v131), 3);
          *(float32x4_t *)&__str[v131] = v40;
          v131 += 16;
        }
        while (v131 != 64);
LABEL_103:
        v78 = 0;
        v38 = *(float32x4_t *)__str;
        v39 = *(float32x4_t *)&__str[16];
        v47 = 1;
        goto LABEL_104;
      case 3:
        _Q0.i32[0] = 0;
        v47 = 0;
        v58 = v250;
        v249 = v33;
        v250 = v248;
        v247 = v28;
        v248 = v58;
        v40.f32[0] = v32 + v32;
        goto LABEL_47;
      case 4:
        _Q0.i32[0] = 0;
        v47 = 0;
        v59 = v250;
        v249 = v33;
        v250 = v248;
        v247 = v28;
        v248 = v59;
        v40.f32[0] = v32 * -2.0;
        goto LABEL_47;
      case 5:
        _Q0.i32[0] = 0;
        v47 = 0;
        v79 = v250;
        v249 = v33;
        v250 = v248;
        v247 = v28;
        v248 = v79;
        v40.f32[0] = v32 + v32;
        goto LABEL_49;
      case 6:
        _Q0.i32[0] = 0;
        v47 = 0;
        v80 = v250;
        v249 = v33;
        v250 = v248;
        v247 = v28;
        v248 = v80;
        v40.f32[0] = v32 * -2.0;
        goto LABEL_49;
      case 7:
        _Q0.i32[0] = 0;
        v47 = 0;
        v40.f32[0] = v37 + v37;
        goto LABEL_47;
      case 8:
        _Q0.i32[0] = 0;
        v47 = 0;
        v40.f32[0] = v37 * -2.0;
LABEL_47:
        v81.i32[0] = 0;
        v81.i32[2] = 0;
        v81.i32[1] = v40.i32[0];
        goto LABEL_50;
      case 9:
        _Q0.i32[0] = 0;
        v47 = 0;
        v40.f32[0] = v37 + v37;
        goto LABEL_49;
      case 10:
        _Q0.i32[0] = 0;
        v47 = 0;
        v40.f32[0] = v37 * -2.0;
LABEL_49:
        v81.i32[2] = 0;
        v81.i64[0] = v40.u32[0];
LABEL_50:
        v40.i32[0] &= 0x60000000u;
        v81.i32[3] = v43.i32[3];
        v68 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v40, _Q0), 0), (int8x16_t)v43, v81);
        goto LABEL_53;
      case 11:
        _Q0.i32[0] = 0;
        v47 = 0;
        v40.i64[0] = 0;
        v40.i32[2] = 0;
        v40.i32[3] = v43.i32[3];
        v60 = (int8x16_t)v40;
        *(float *)&v60.i32[1] = v32 + v32;
        v41.i32[0] = COERCE_UNSIGNED_INT(v32 + v32) & 0x60000000;
        v61 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v41, _Q0), 0);
        *(float *)v44.i32 = v37 * -2.0;
        v40.f32[1] = v37 * -2.0;
        goto LABEL_52;
      case 12:
        _Q0.i32[0] = 0;
        v47 = 0;
        v63.i64[0] = 0;
        v63.i32[2] = 0;
        v63.i32[3] = v43.i32[3];
        v62 = v63;
        *(float *)&v62.i32[1] = v32 * -2.0;
        v40.i32[0] = COERCE_UNSIGNED_INT(v32 * -2.0) & 0x60000000;
        v40 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v40, _Q0), 0);
        *(float *)v44.i32 = v37 + v37;
        *(float *)&v63.i32[1] = v37 + v37;
        goto LABEL_39;
      case 13:
        _Q0.i32[0] = 0;
        v47 = 0;
        v82 = 0;
        v83 = 0;
        v84 = 0;
        v85 = 0;
        v40.i32[1] = 0;
        v40.i32[2] = 0;
        v40.i32[3] = v43.i32[3];
        v60 = (int8x16_t)v40;
        *(float *)v60.i32 = v32 + v32;
        v41.i32[0] = COERCE_UNSIGNED_INT(v32 + v32) & 0x60000000;
        v61 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v41, _Q0), 0);
        *(float *)v44.i32 = v37 * -2.0;
        v40.f32[0] = v37 * -2.0;
LABEL_52:
        v44.i32[0] &= 0x60000000u;
        v68 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v44, _Q0), 0), (int8x16_t)v43, (int8x16_t)v40);
        v43 = (float32x4_t)vbslq_s8(v61, (int8x16_t)v43, v60);
        goto LABEL_53;
      case 14:
        _Q0.i32[0] = 0;
        v47 = 0;
        v64 = 0;
        v65 = 0;
        v66 = 0;
        v67 = 0;
        v63.i32[1] = 0;
        v63.i32[2] = 0;
        v63.i32[3] = v43.i32[3];
        v62 = v63;
        *(float *)v62.i32 = v32 * -2.0;
        v40.i32[0] = COERCE_UNSIGNED_INT(v32 * -2.0) & 0x60000000;
        v40 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v40, _Q0), 0);
        *(float *)v44.i32 = v37 + v37;
        *(float *)v63.i32 = v37 + v37;
LABEL_39:
        v44.i32[0] &= 0x60000000u;
        v68 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v44, _Q0), 0), (int8x16_t)v43, v63);
        v43 = (float32x4_t)vbslq_s8((int8x16_t)v40, (int8x16_t)v43, v62);
LABEL_53:
        v258 = (__int128)v38;
        v259 = (__int128)v39;
        v260 = (__int128)v42;
        v261 = (__int128)v68;
        goto LABEL_54;
      case 15:
        v47 = 0;
        v69 = v250;
        v249 = v33;
        v250 = v248;
        v247 = v28;
        v248 = v69;
        v266 = xmmword_1DC921800;
        v267 = xmmword_1DC921810;
        v268 = xmmword_1DC921D10;
        v269 = xmmword_1DC921D20;
        *(_QWORD *)&v274 = 0;
        *((_QWORD *)&v274 + 1) = 1065353216;
        v275 = 0x3F0000003F800000;
        v270 = xmmword_1DC921D20;
        v271 = xmmword_1DC921D10;
        v272 = xmmword_1DC921820;
        v273 = xmmword_1DC921830;
        v276 = 0x3F00000000000000;
        *(_QWORD *)&v277 = 0x3F00000000000000;
        *((_QWORD *)&v277 + 1) = 0x3F0000003F800000;
        *(_QWORD *)&v278 = _Q0.i64[0];
        *((_QWORD *)&v278 + 1) = 0x3F80000000000000;
        v40 = (float32x4_t)vtrn2q_s32(vrev64q_s32((int32x4_t)0), (int32x4_t)v43);
        v70 = v40;
        v70.f32[1] = -v32;
        v258 = (__int128)v38;
        v259 = (__int128)v39;
        v260 = (__int128)v42;
        v261 = (__int128)v70;
        v40.f32[1] = v32;
        goto LABEL_56;
      case 16:
        v47 = 0;
        v71 = v250;
        v249 = v33;
        v250 = v248;
        v247 = v28;
        v248 = v71;
        v266 = xmmword_1DC921800;
        v267 = xmmword_1DC921CD0;
        v268 = xmmword_1DC921CE0;
        v269 = xmmword_1DC921830;
        *(_QWORD *)&v274 = 0;
        *((_QWORD *)&v274 + 1) = 1056964608;
        v275 = 0x3F8000003F000000;
        v270 = xmmword_1DC921CD0;
        v271 = xmmword_1DC921810;
        v272 = xmmword_1DC921820;
        v273 = xmmword_1DC921CE0;
        v276 = 0x3F80000000000000;
        *(_QWORD *)&v277 = 1056964608;
        *((_QWORD *)&v277 + 1) = 1065353216;
        *(_QWORD *)&v278 = _Q0.i64[0];
        *((_QWORD *)&v278 + 1) = 0x3F8000003F000000;
        v72 = 0;
        v73 = 0;
        v74 = 0;
        v75 = 0;
        v40.i32[1] = 0;
        v40.i32[2] = 0;
        v40.i32[3] = v43.i32[3];
        v76 = v40;
        v76.f32[0] = -v32;
        v258 = (__int128)v38;
        v259 = (__int128)v39;
        v260 = (__int128)v42;
        v261 = (__int128)v76;
        v40.f32[0] = v32;
        goto LABEL_56;
      case 17:
        v47 = 0;
        v266 = xmmword_1DC921800;
        v267 = xmmword_1DC921810;
        v268 = xmmword_1DC921D10;
        v269 = xmmword_1DC921D20;
        *(_QWORD *)&v274 = 0;
        *((_QWORD *)&v274 + 1) = 1065353216;
        v275 = 0x3F0000003F800000;
        v270 = xmmword_1DC921D20;
        v271 = xmmword_1DC921D10;
        v272 = xmmword_1DC921820;
        v273 = xmmword_1DC921830;
        v276 = 0x3F00000000000000;
        *(_QWORD *)&v277 = 0x3F00000000000000;
        *((_QWORD *)&v277 + 1) = 0x3F0000003F800000;
        *(_QWORD *)&v278 = _Q0.i64[0];
        *((_QWORD *)&v278 + 1) = 0x3F80000000000000;
        v40 = (float32x4_t)vtrn2q_s32(vrev64q_s32((int32x4_t)0), (int32x4_t)v43);
        v77 = v40;
        v77.f32[1] = -v37;
        v258 = (__int128)v38;
        v259 = (__int128)v39;
        v260 = (__int128)v42;
        v261 = (__int128)v77;
        v40.f32[1] = 1.0 - v32;
        goto LABEL_56;
      case 18:
        v47 = 0;
        v266 = xmmword_1DC921800;
        v267 = xmmword_1DC921CD0;
        v268 = xmmword_1DC921CE0;
        v269 = xmmword_1DC921830;
        *(_QWORD *)&v274 = 0;
        *((_QWORD *)&v274 + 1) = 1056964608;
        v275 = 0x3F8000003F000000;
        v270 = xmmword_1DC921CD0;
        v271 = xmmword_1DC921810;
        v272 = xmmword_1DC921820;
        v273 = xmmword_1DC921CE0;
        v276 = 0x3F80000000000000;
        *(_QWORD *)&v277 = 1056964608;
        *((_QWORD *)&v277 + 1) = 1065353216;
        *(_QWORD *)&v278 = _Q0.i64[0];
        *((_QWORD *)&v278 + 1) = 0x3F8000003F000000;
        v86 = 0;
        v87 = 0;
        v88 = 0;
        v89 = 0;
        v40.i32[1] = 0;
        v40.i32[2] = 0;
        v40.i32[3] = v43.i32[3];
        v90 = v40;
        v90.f32[0] = -v37;
        v258 = (__int128)v38;
        v259 = (__int128)v39;
        v260 = (__int128)v42;
        v261 = (__int128)v90;
        v40.f32[0] = 1.0 - v32;
LABEL_56:
        v262 = v38;
        v263 = v39;
        v78 = 2;
        v32 = 1.0;
        v37 = 1.0;
        v264 = v42;
        v265 = (int32x4_t)v40;
        break;
      case 19:
        v208 = 1.0 - v32;
        v240 = (float32x4_t)v11;
        v244 = (float32x4_t)v10;
        v91 = 0;
        v92 = v250;
        v249 = v33;
        v250 = v248;
        v213 = 1.0 - fminf(fmaxf(v32 + -0.4, 0.0), 1.0);
        v247 = v28;
        v248 = v92;
        v266 = xmmword_1DC921800;
        v267 = xmmword_1DC921CD0;
        v268 = xmmword_1DC921CE0;
        v269 = xmmword_1DC921830;
        *(_QWORD *)&v274 = 0;
        *((_QWORD *)&v274 + 1) = 1056964608;
        v275 = 0x3F8000003F000000;
        v270 = xmmword_1DC921CD0;
        v271 = xmmword_1DC921810;
        v272 = xmmword_1DC921820;
        v273 = xmmword_1DC921CE0;
        v276 = 0x3F80000000000000;
        *(_QWORD *)&v277 = 1056964608;
        *((_QWORD *)&v277 + 1) = 1065353216;
        *(_QWORD *)&v278 = _Q0.i64[0];
        *((_QWORD *)&v278 + 1) = 0x3F8000003F000000;
        v93.i64[0] = 1065353216;
        v93.i32[2] = 0;
        v222 = v43;
        v93.i32[3] = v43.i32[3];
        v251 = (float32x4_t)v258;
        v252 = (float32x4_t)v259;
        v253 = (float32x4_t)v260;
        v254 = (float32x4_t)v261;
        do
        {
          *(float32x4_t *)&__str[v91] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, COERCE_FLOAT(*(_OWORD *)((char *)&v251 + v91))), v39, *(float32x2_t *)&v251.f32[v91 / 4], 1), v42, *(float32x4_t *)((char *)&v251 + v91), 2), v93, *(float32x4_t *)((char *)&v251 + v91), 3);
          v91 += 16;
        }
        while (v91 != 64);
        v204 = v93;
        v193 = *(float32x4_t *)&__str[16];
        v197 = *(float32x4_t *)__str;
        v191 = v256;
        v200 = v257;
        v258 = *(_OWORD *)__str;
        v259 = *(_OWORD *)&__str[16];
        v260 = (__int128)v256;
        v261 = (__int128)v257;
        v217 = v32 * 0.75;
        v230 = v39;
        v234 = v38;
        v226 = v42;
        v94 = __sincosf_stret(v217 + v217);
        v95 = 0;
        v96 = v234;
        v96.i32[0] = LODWORD(v94.__cosval);
        v97 = v226;
        v97.i32[0] = LODWORD(v94.__sinval);
        v97.i32[2] = LODWORD(v94.__cosval);
        v251 = v197;
        v252 = v193;
        v253 = v191;
        v254 = v200;
        v98 = v222;
        do
        {
          v96.f32[2] = -v94.__sinval;
          *(float32x4_t *)&__str[v95] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v96, COERCE_FLOAT(*(_OWORD *)((char *)&v251 + v95))), v230, *(float32x2_t *)&v251.f32[v95 / 4], 1), v97, *(float32x4_t *)((char *)&v251 + v95), 2), v222, *(float32x4_t *)((char *)&v251 + v95), 3);
          v95 += 16;
        }
        while (v95 != 64);
        v99 = 0;
        v100.i64[0] = 3212836864;
        v100.i32[2] = 0;
        v100.i32[3] = v222.i32[3];
        v251 = *(float32x4_t *)__str;
        v252 = *(float32x4_t *)&__str[16];
        v253 = v256;
        v254 = v257;
        do
        {
          *(float32x4_t *)&__str[v99] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v234, COERCE_FLOAT(*(_OWORD *)((char *)&v251 + v99))), v230, *(float32x2_t *)&v251.f32[v99 / 4], 1), v226, *(float32x4_t *)((char *)&v251 + v99), 2), v100, *(float32x4_t *)((char *)&v251 + v99), 3);
          v99 += 16;
        }
        while (v99 != 64);
        v101 = 0;
        v258 = *(_OWORD *)__str;
        v259 = *(_OWORD *)&__str[16];
        v260 = (__int128)v256;
        v261 = (__int128)v257;
        v98.i32[1] = 0;
        v201 = v98;
        v102 = v98;
        v251 = *(float32x4_t *)__str;
        v252 = *(float32x4_t *)&__str[16];
        v253 = v256;
        v254 = v257;
        do
        {
          v102.f32[2] = v217 * -0.5;
          v102.f32[0] = -v217;
          *(float32x4_t *)&__str[v101] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v234, COERCE_FLOAT(*(_OWORD *)((char *)&v251 + v101))), v230, *(float32x2_t *)&v251.f32[v101 / 4], 1), v226, *(float32x4_t *)((char *)&v251 + v101), 2), v102, *(float32x4_t *)((char *)&v251 + v101), 3);
          v101 += 16;
        }
        while (v101 != 64);
        v103 = 0;
        v251 = *(float32x4_t *)__str;
        v252 = *(float32x4_t *)&__str[16];
        v253 = v256;
        v254 = v257;
        do
        {
          *(float32x4_t *)&__str[v103] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v236, COERCE_FLOAT(*(_OWORD *)((char *)&v251 + v103))), v235, *(float32x2_t *)&v251.f32[v103 / 4], 1), v244, *(float32x4_t *)((char *)&v251 + v103), 2), v240, *(float32x4_t *)((char *)&v251 + v103), 3);
          v103 += 16;
        }
        while (v103 != 64);
        v104 = 0;
        v258 = *(_OWORD *)__str;
        v259 = *(_OWORD *)&__str[16];
        v260 = (__int128)v256;
        v261 = (__int128)v257;
        v251 = v262;
        v252 = v263;
        v253 = v264;
        v254 = (float32x4_t)v265;
        do
        {
          *(float32x4_t *)&__str[v104] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v234, COERCE_FLOAT(*(_OWORD *)((char *)&v251 + v104))), v230, *(float32x2_t *)&v251.f32[v104 / 4], 1), v226, *(float32x4_t *)((char *)&v251 + v104), 2), v100, *(float32x4_t *)((char *)&v251 + v104), 3);
          v104 += 16;
        }
        while (v104 != 64);
        v192 = *(float32x4_t *)&__str[16];
        v194 = *(float32x4_t *)__str;
        v189 = v257;
        v190 = v256;
        v262 = *(float32x4_t *)__str;
        v263 = *(float32x4_t *)&__str[16];
        v264 = v256;
        v265 = (int32x4_t)v257;
        v105 = __sincosf_stret(v217 * -2.0);
        v106 = 0;
        v107 = v234;
        v107.i32[0] = LODWORD(v105.__cosval);
        v108 = v226;
        v108.i32[0] = LODWORD(v105.__sinval);
        v108.i32[2] = LODWORD(v105.__cosval);
        v251 = v194;
        v252 = v192;
        v253 = v190;
        v254 = v189;
        do
        {
          v107.f32[2] = -v105.__sinval;
          *(float32x4_t *)&__str[v106] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v107, COERCE_FLOAT(*(_OWORD *)((char *)&v251 + v106))), v230, *(float32x2_t *)&v251.f32[v106 / 4], 1), v108, *(float32x4_t *)((char *)&v251 + v106), 2), v222, *(float32x4_t *)((char *)&v251 + v106), 3);
          v106 += 16;
        }
        while (v106 != 64);
        v109 = 0;
        v251 = *(float32x4_t *)__str;
        v252 = *(float32x4_t *)&__str[16];
        v253 = v256;
        v254 = v257;
        v110 = v201;
        do
        {
          *(float32x4_t *)&__str[v109] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v234, COERCE_FLOAT(*(_OWORD *)((char *)&v251 + v109))), v230, *(float32x2_t *)&v251.f32[v109 / 4], 1), v226, *(float32x4_t *)((char *)&v251 + v109), 2), v204, *(float32x4_t *)((char *)&v251 + v109), 3);
          v109 += 16;
        }
        while (v109 != 64);
        v111 = 0;
        v262 = *(float32x4_t *)__str;
        v263 = *(float32x4_t *)&__str[16];
        v264 = v256;
        v265 = (int32x4_t)v257;
        v110.f32[0] = v217;
        v251 = *(float32x4_t *)__str;
        v252 = *(float32x4_t *)&__str[16];
        v253 = v256;
        v254 = v257;
        do
        {
          v110.f32[2] = v217 * -0.5;
          *(float32x4_t *)&__str[v111] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v234, COERCE_FLOAT(*(_OWORD *)((char *)&v251 + v111))), v230, *(float32x2_t *)&v251.f32[v111 / 4], 1), v226, *(float32x4_t *)((char *)&v251 + v111), 2), v110, *(float32x4_t *)((char *)&v251 + v111), 3);
          v111 += 16;
        }
        while (v111 != 64);
        v112 = 0;
        v251 = *(float32x4_t *)__str;
        v252 = *(float32x4_t *)&__str[16];
        v253 = v256;
        v254 = v257;
        do
        {
          *(float32x4_t *)&__str[v112] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v236, COERCE_FLOAT(*(_OWORD *)((char *)&v251 + v112))), v235, *(float32x2_t *)&v251.f32[v112 / 4], 1), v244, *(float32x4_t *)((char *)&v251 + v112), 2), v240, *(float32x4_t *)((char *)&v251 + v112), 3);
          v112 += 16;
        }
        while (v112 != 64);
        v113 = 0;
        v262 = *(float32x4_t *)__str;
        v263 = *(float32x4_t *)&__str[16];
        v264 = v256;
        v265 = (int32x4_t)v257;
        v114.i64[0] = 0;
        v114.f32[2] = v208 * -4.0;
        v114.i32[3] = v222.i32[3];
        v251 = v234;
        v252 = v230;
        v253 = v226;
        v254 = v222;
        do
        {
          *(float32x4_t *)&__str[v113] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v234, COERCE_FLOAT(*(_OWORD *)((char *)&v251 + v113))), v230, *(float32x2_t *)&v251.f32[v113 / 4], 1), v226, *(float32x4_t *)((char *)&v251 + v113), 2), v114, *(float32x4_t *)((char *)&v251 + v113), 3);
          v113 += 16;
        }
        while (v113 != 64);
        v115 = 0;
        __asm { FMOV            V19.4S, #1.0 }
        _Q19.f32[0] = v213;
        _Q19.f32[1] = v213;
        v251 = *(float32x4_t *)__str;
        v252 = *(float32x4_t *)&__str[16];
        v253 = v256;
        v254 = v257;
        do
        {
          v40 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v236, COERCE_FLOAT(*(_OWORD *)((char *)&v251 + v115))), v235, *(float32x2_t *)&v251.f32[v115 / 4], 1), v244, *(float32x4_t *)((char *)&v251 + v115), 2), v240, *(float32x4_t *)((char *)&v251 + v115), 3);
          *(float32x4_t *)&__str[v115] = v40;
          v115 += 16;
        }
        while (v115 != 64);
        v47 = 0;
        _Q19.f32[2] = v213;
        v38 = *(float32x4_t *)__str;
        v39 = *(float32x4_t *)&__str[16];
        v78 = 2;
LABEL_104:
        v32 = 1.0;
        v37 = 1.0;
        v42 = v256;
        v43 = v257;
        break;
      case 20:
        if ((*((_BYTE *)a2 + 581) & 8) != 0)
        {
          v47 = 0;
LABEL_54:
          v78 = 1;
          v32 = 1.0;
          v37 = 1.0;
        }
        else
        {
          v209 = 1.0 - v32;
          v210 = _Q19;
          v219 = v43;
          v223 = v42;
          v227 = v39;
          v231 = v38;
          v245[0] = MEMORY[0x1E0C809B0];
          v245[1] = 3221225472;
          v245[2] = ___ZN17SKCTransitionNode12addRenderOpsEP13SKCRenderInfoRKNSt3__110shared_ptrI18jet_command_bufferEE_block_invoke;
          v245[3] = &__block_descriptor_44_e69_v24__0_shared_ptr_jet_context____jet_context_____shared_weak_count__8l;
          v245[4] = a1;
          v218 = v32;
          v246 = v32;
          SKCPerformResourceOperation(v245);
          v37 = v209;
          if (a1[40].i64[0])
          {
            std::shared_ptr<jet_texture>::operator=[abi:ne180100](&v249, (uint64_t *)&a1[40]);
            v78 = 0;
            v47 = 1;
            v32 = 1.0;
LABEL_87:
            v37 = 1.0;
            v39 = v227;
            v38 = v231;
            v43 = v219;
            v42 = v223;
            _Q19 = v210;
          }
          else
          {
            v47 = 0;
            v78 = 1;
            v39 = v227;
            v38 = v231;
            v43 = v219;
            v42 = v223;
            _Q19 = v210;
            v32 = v218;
          }
        }
        break;
      default:
        v47 = 0;
        v78 = 1;
        break;
    }
    v132 = 6 * (v22 >> 2);
    v133 = a1[45].u8[7];
    v134 = 4 * v78;
    if (v133)
    {
      for (i = 0; i != 32; i += 8)
        *(float *)((char *)&v279 + i + 4) = 1.0 - *(float *)((char *)&v279 + i + 4);
      if ((v47 & 1) == 0)
      {
        if (v134 <= 1)
          v136 = 1;
        else
          v136 = v134;
        v137 = (float *)&v274 + 1;
        do
        {
          *v137 = 1.0 - *v137;
          v137 += 2;
          --v136;
        }
        while (v136);
      }
    }
    v138 = 0;
    v40.f32[0] = v37 * 255.0;
    v139 = (int16x8_t)vcvtq_s32_f32(v40);
    *(int16x4_t *)v139.i8 = vdup_lane_s16(vmovn_s32((int32x4_t)v139), 0);
    v140 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(_Q19, v32), (float32x4_t)vdupq_n_s32(0x437F0000u)));
    v141 = vmovn_s16(v139).u32[0];
    do
    {
      *(float32x4_t *)(*((_QWORD *)a2 + 3) + 16 * (v138 + *a2)) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, COERCE_FLOAT(xmmword_1DC921D70[v138])), v39, *(float32x2_t *)&xmmword_1DC921D70[v138], 1), v42, (float32x4_t)xmmword_1DC921D70[v138], 2), v43, (float32x4_t)xmmword_1DC921D70[v138], 3);
      *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * (v138 + *a2)) = *((_QWORD *)&v279 + v138);
      *(_DWORD *)(*((_QWORD *)a2 + 1) + 4 * (v138++ + *a2)) = v141;
    }
    while (v138 != 4);
    if ((v47 & 1) == 0)
    {
      v142 = 0;
      *(int16x4_t *)v140.i8 = vmovn_s32((int32x4_t)v140);
      if (v134 <= 1)
        v143 = 1;
      else
        v143 = v134;
      v144 = vmovn_s16(v140).u32[0];
      do
      {
        v145 = (float32x4_t *)(&v258 + 4 * (unint64_t)(v142 >> 2));
        *(float32x4_t *)(*((_QWORD *)a2 + 3) + 16 * (v142 + *a2 + 4)) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v145, COERCE_FLOAT(*(&v266 + v142))), v145[1], *(float32x2_t *)(&v266 + v142), 1), v145[2], *((float32x4_t *)&v266 + v142), 2), v145[3], *((float32x4_t *)&v266 + v142), 3);
        *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * (v142 + *a2 + 4)) = *((_QWORD *)&v274 + v142);
        *(_DWORD *)(*((_QWORD *)a2 + 1) + 4 * (v142++ + *a2 + 4)) = v144;
      }
      while (v143 != v142);
    }
    v146 = *a3;
    v147 = *((_QWORD *)a2 + 21);
    v148 = (uint64_t *)(*a3 + 8);
    *(_DWORD *)__str = 31;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v148, (int *)__str);
    v149 = *(_QWORD *)(v146 + 16);
    *(_QWORD *)(v149 - 80) = v147;
    *(_OWORD *)(v149 - 64) = xmmword_1DC921850;
    *(_QWORD *)(v149 - 48) = 0x230000000FLL;
    v150 = *a3;
    std::string::basic_string[abi:ne180100]<0>(__str, "a_position");
    v151 = *((_QWORD *)a2 + 41);
    v251.i32[0] = 5;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v150 + 8), (int *)&v251);
    v152 = *(_QWORD *)(v150 + 16);
    *(_QWORD *)(v152 - 80) = v151;
    std::string::operator=((std::string *)(v152 - 176), (const std::string *)__str);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    v153 = *a3;
    std::string::basic_string[abi:ne180100]<0>(__str, "a_color");
    v154 = *((_QWORD *)a2 + 42);
    v251.i32[0] = 5;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v153 + 8), (int *)&v251);
    v155 = *(_QWORD *)(v153 + 16);
    *(_QWORD *)(v155 - 80) = v154;
    std::string::operator=((std::string *)(v155 - 176), (const std::string *)__str);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    v156 = *a3;
    std::string::basic_string[abi:ne180100]<0>(__str, "a_tex_coord");
    v157 = *((_QWORD *)a2 + 43);
    v251.i32[0] = 5;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v156 + 8), (int *)&v251);
    v158 = *(_QWORD *)(v156 + 16);
    *(_QWORD *)(v158 - 80) = v157;
    std::string::operator=((std::string *)(v158 - 176), (const std::string *)__str);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    v159 = *a3;
    std::string::basic_string[abi:ne180100]<0>(__str, "u_texture");
    v160 = v249;
    v251.i32[0] = 8;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v159 + 8), (int *)&v251);
    v161 = *(_QWORD *)(v159 + 16);
    *(_QWORD *)(v161 - 80) = v160;
    std::string::operator=((std::string *)(v161 - 176), (const std::string *)__str);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    v162 = *a3;
    std::string::basic_string[abi:ne180100]<0>(__str, "u_texture");
    v163 = *((_QWORD *)a2 + 60);
    v251.i32[0] = 30;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v162 + 8), (int *)&v251);
    v164 = *(_QWORD *)(v162 + 16);
    *(_QWORD *)(v164 - 80) = v163;
    std::string::operator=((std::string *)(v164 - 176), (const std::string *)__str);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    v165 = *a3;
    v166 = *((_QWORD *)a2 + 50);
    v167 = (uint64_t *)(*a3 + 8);
    *(_DWORD *)__str = 4;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v167, (int *)__str);
    v168 = *(_QWORD *)(v165 + 16);
    *(_QWORD *)(v168 - 80) = v166;
    *(_DWORD *)(v168 - 64) = 3;
    *(_DWORD *)(v168 - 60) = v132;
    *(_DWORD *)(v168 - 56) = 6;
    v169 = (_DWORD *)*((_QWORD *)a2 + 83);
    v170 = v169[43];
    v171 = v132 + 6;
    if (v170 <= v132 + 6)
      v170 = v132 + 6;
    v169[43] = v170;
    ++v169[41];
    ++v169[37];
    if ((v47 & 1) == 0)
    {
      v172 = *a3;
      std::string::basic_string[abi:ne180100]<0>(__str, "u_texture");
      v173 = v247;
      v251.i32[0] = 8;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v172 + 8), (int *)&v251);
      v174 = *(_QWORD *)(v172 + 16);
      *(_QWORD *)(v174 - 80) = v173;
      std::string::operator=((std::string *)(v174 - 176), (const std::string *)__str);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      v175 = *a3;
      std::string::basic_string[abi:ne180100]<0>(__str, "u_texture");
      v176 = *((_QWORD *)a2 + 60);
      v251.i32[0] = 30;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v175 + 8), (int *)&v251);
      v177 = *(_QWORD *)(v175 + 16);
      *(_QWORD *)(v177 - 80) = v176;
      std::string::operator=((std::string *)(v177 - 176), (const std::string *)__str);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      v178 = *a3;
      v179 = *((_QWORD *)a2 + 50);
      *(_DWORD *)__str = 4;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v178 + 8), (int *)__str);
      v180 = *(_QWORD *)(v178 + 16);
      *(_QWORD *)(v180 - 80) = v179;
      *(_DWORD *)(v180 - 64) = 3;
      *(_DWORD *)(v180 - 60) = v171;
      *(_DWORD *)(v180 - 56) = 6 * v78;
      v181 = (_DWORD *)*((_QWORD *)a2 + 83);
      v182 = v171 + 6 * v78;
      if (v181[43] > v182)
        v182 = v181[43];
      v181[43] = v182;
      ++v181[41];
      v181[37] += v78;
    }
    *a2 += v134 + 4;
    v183 = v248;
    if (v248)
    {
      v184 = (unint64_t *)&v248->__shared_owners_;
      do
        v185 = __ldaxr(v184);
      while (__stlxr(v185 - 1, v184));
      if (!v185)
      {
        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
        std::__shared_weak_count::__release_weak(v183);
      }
    }
    v186 = v250;
    if (v250)
    {
      v187 = (unint64_t *)&v250->__shared_owners_;
      do
        v188 = __ldaxr(v187);
      while (__stlxr(v188 - 1, v187));
      if (!v188)
      {
        ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
        std::__shared_weak_count::__release_weak(v186);
      }
    }
  }
  else
  {
    SKCNode::addRenderOps(a1, a2, a3);
  }
}

void sub_1DC877040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,char a53)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  _Unwind_Resume(a1);
}

double sk_matrix_scale(simd_float4x4 a1, float32_t a2, float32_t a3, float32_t a4)
{
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  _OWORD v10[4];
  __int128 v11;

  v4 = 0;
  v6 = *(float32x4_t *)MEMORY[0x1E0C83FF0];
  v7 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
  v8 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32);
  v5 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
  v6.f32[0] = a2;
  v7.f32[1] = a3;
  v8.f32[2] = a4;
  v10[2] = a1.columns[2];
  v10[3] = a1.columns[3];
  do
  {
    *(__int128 *)((char *)&v11 + v4 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v10[v4])), v7, *(float32x2_t *)&v10[v4], 1), v8, (float32x4_t)v10[v4], 2), v5, (float32x4_t)v10[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  return *(double *)&v11;
}

_QWORD *std::shared_ptr<jet_texture>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void ___ZN17SKCTransitionNode12addRenderOpsEP13SKCRenderInfoRKNSt3__110shared_ptrI18jet_command_bufferEE_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;

  v4 = *(_QWORD *)(a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 48))(*a2, *(_QWORD *)(v4 + 608));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 48))(*a2, *(_QWORD *)(v4 + 624));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(id *)(v4 + 568);
  objc_msgSend(v7, "setValue:forKey:", v5, CFSTR("inputImage"));
  objc_msgSend(v7, "setValue:forKey:", v6, CFSTR("inputTargetImage"));
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(float *)(a1 + 40));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setValue:forKey:", v8, CFSTR("inputTime"));

  objc_msgSend(v7, "valueForKey:", CFSTR("outputImage"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*a2 + 40))(*a2, v9);
    std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v14, v10);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](v4 + 640, &v14);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    std::shared_ptr<jet_buffer_pool>::reset[abi:ne180100]((_QWORD *)(v4 + 640));
  }

}

void sub_1DC87731C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

char *SKCTransitionNode::addRenderableChildren(char *result, uint64_t a2, uint64_t a3)
{
  if (!*((_QWORD *)result + 75))
    return SKCNode::addRenderableChildren(result, a2, a3);
  return result;
}

void SKCTransitionNode::ensure_framebuffers(uint64_t a1, uint64_t a2, __n128 a3)
{
  _QWORD *v5;
  unsigned int (***v6)(_QWORD);
  unsigned __int32 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t texture_2d;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned int (***v29)(_QWORD);
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  __n128 v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  __int128 v71;

  v68 = a3;
  if (!*(_BYTE *)(a1 + 576) || !*(_BYTE *)(a1 + 724))
  {
    v5 = (_QWORD *)(a1 + 608);
    v6 = *(unsigned int (****)(_QWORD))(a1 + 608);
    if (!v6)
      goto LABEL_17;
    if ((**v6)(v6) < a3.n128_u32[2]
      || (v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 8))(*v5),
          a3.n128_u32[2] = v68.n128_u32[2],
          v7 < v68.n128_u32[3]))
    {
      v71 = 0uLL;
      std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 608, &v71);
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
      if (*((_QWORD *)&v71 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v71 = 0uLL;
      std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 656, &v71);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
      a3.n128_u32[2] = v68.n128_u32[2];
      if (*((_QWORD *)&v71 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v68);
          std::__shared_weak_count::__release_weak(v11);
          a3.n128_u32[2] = v68.n128_u32[2];
        }
      }
    }
    if (!*v5)
    {
LABEL_17:
      SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v69);
      texture_2d = jet_context::create_texture_2d();
      std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v71, texture_2d);
      std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 608, &v71);
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
      if (*((_QWORD *)&v71 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = v70;
      if (v70)
      {
        p_shared_owners = (unint64_t *)&v70->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v69);
      v21 = jet_context::create_texture_2d();
      std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v71, v21);
      std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 656, &v71);
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
      a3 = v68;
      if (*((_QWORD *)&v71 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v22->__on_zero_shared)(v22, v68);
          std::__shared_weak_count::__release_weak(v22);
          a3 = v68;
        }
      }
      v25 = v70;
      if (v70)
      {
        v26 = (unint64_t *)&v70->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v25->__on_zero_shared)(v25, a3);
          std::__shared_weak_count::__release_weak(v25);
          a3.n128_u32[2] = v68.n128_u32[2];
        }
      }
    }
  }
  if (!*(_BYTE *)(a1 + 577) || !*(_BYTE *)(a1 + 725))
  {
    v28 = (_QWORD *)(a1 + 624);
    v29 = *(unsigned int (****)(_QWORD))(a1 + 624);
    if (!v29)
      goto LABEL_53;
    if ((**v29)(v29) < a3.n128_u32[2]
      || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v28 + 8))(*v28) < v68.n128_u32[3])
    {
      v71 = 0uLL;
      std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 624, &v71);
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
      if (*((_QWORD *)&v71 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v71 = 0uLL;
      std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 672, &v71);
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
      if (*((_QWORD *)&v71 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
    if (!*v28)
    {
LABEL_53:
      SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v69);
      v36 = jet_context::create_texture_2d();
      std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v71, v36);
      std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 624, &v71);
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
      if (*((_QWORD *)&v71 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = v70;
      if (v70)
      {
        v41 = (unint64_t *)&v70->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v69);
      v43 = jet_context::create_texture_2d();
      std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v71, v43);
      std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 672, &v71);
      v44 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
      if (*((_QWORD *)&v71 + 1))
      {
        v45 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v47 = v70;
      if (v70)
      {
        v48 = (unint64_t *)&v70->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
    }
  }
  if (!*(_QWORD *)(a1 + 688))
  {
    SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v69);
    v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 112))(v69);
    std::shared_ptr<jet_framebuffer>::shared_ptr[abi:ne180100]<jet_framebuffer,void>(&v71, v61);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 688, &v71);
    v62 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1))
    {
      v63 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v65 = v70;
    if (v70)
    {
      v66 = (unint64_t *)&v70->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
  }
  v50 = *(_QWORD **)(a1 + 704);
  if (!v50)
  {
    SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v69);
    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 112))(v69);
    std::shared_ptr<jet_framebuffer>::shared_ptr[abi:ne180100]<jet_framebuffer,void>(&v71, v51);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 704, &v71);
    v52 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1))
    {
      v53 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = v70;
    if (v70)
    {
      v56 = (unint64_t *)&v70->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v50 = *(_QWORD **)(a1 + 704);
  }
  v58 = *(_QWORD **)(a1 + 688);
  v58[2] = *(_QWORD *)(a1 + 608);
  v59 = *(_QWORD *)(a1 + 656);
  v58[26] = v59;
  v58[29] = v59;
  v50[2] = *(_QWORD *)(a1 + 624);
  v60 = *(_QWORD *)(a1 + 672);
  v50[26] = v60;
  v50[29] = v60;
}

void sub_1DC877A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SKCTransitionNode::addRequistePasses(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  std::__shared_weak_count *v69;
  uint64_t *v70;
  std::__shared_weak_count *v71;
  _QWORD *v72;
  std::__shared_weak_count *v73;
  uint64_t *v74;
  std::__shared_weak_count *v75;

  if (*(_QWORD *)(a1 + 600) && !*(_BYTE *)(a1 + 726))
  {
    SKCTransitionNode::ensure_framebuffers(a1, a2, *(__n128 *)(*(_QWORD *)(*a3 + 16) + 48));
    v5 = operator new();
    *(_QWORD *)v5 = v5;
    *(_QWORD *)(v5 + 8) = v5;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = v5 + 24;
    *(_QWORD *)(v5 + 32) = v5 + 24;
    *(_QWORD *)(v5 + 40) = 0;
    v6 = (_OWORD *)MEMORY[0x1E0C83FF0];
    *(_QWORD *)(v5 + 80) = 0;
    v7 = v6[1];
    *(_OWORD *)(v5 + 96) = *v6;
    *(_OWORD *)(v5 + 112) = v7;
    v8 = v6[3];
    *(_OWORD *)(v5 + 128) = v6[2];
    *(_OWORD *)(v5 + 144) = v8;
    *(_BYTE *)(v5 + 160) = 0;
    *(_BYTE *)(v5 + 192) = 0;
    *(_BYTE *)(v5 + 224) = 0;
    std::shared_ptr<SKCRenderPass>::shared_ptr[abi:ne180100]<SKCRenderPass,void>(&v74, v5);
    v9 = *(_QWORD *)(a1 + 688);
    v74[10] = v9;
    *(_OWORD *)(v9 + 32) = *(_OWORD *)(*(_QWORD *)(a1 + 592) + 304);
    v10 = operator new();
    *(_QWORD *)v10 = &off_1EA4FE720;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = v10 + 32;
    *(_QWORD *)(v10 + 40) = v10 + 32;
    *(_QWORD *)(v10 + 48) = 0;
    *(_QWORD *)(v10 + 56) = v10 + 56;
    *(_QWORD *)(v10 + 64) = v10 + 56;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_QWORD *)(v10 + 120) = 0;
    v11 = v6[3];
    *(_OWORD *)(v10 + 160) = v6[2];
    *(_OWORD *)(v10 + 176) = v11;
    v12 = v6[1];
    *(_OWORD *)(v10 + 128) = *v6;
    *(_OWORD *)(v10 + 144) = v12;
    *(_BYTE *)(v10 + 192) = 0;
    std::shared_ptr<SKCRenderSortGroup>::shared_ptr[abi:ne180100]<SKCRenderSortGroup,void>(&v72, v10);
    v13 = v72;
    v14 = *(_QWORD *)(a1 + 592);
    v15 = (_QWORD *)v72[2];
    v16 = v72[3];
    if ((unint64_t)v15 >= v16)
    {
      v18 = (void **)(v72 + 1);
      v19 = v72[1];
      v20 = ((uint64_t)v15 - v19) >> 3;
      if ((unint64_t)(v20 + 1) >> 61)
        std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
      v21 = v16 - v19;
      v22 = v21 >> 2;
      if (v21 >> 2 <= (unint64_t)(v20 + 1))
        v22 = v20 + 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)(v72 + 3), v23);
      else
        v24 = 0;
      v25 = &v24[8 * v20];
      v26 = &v24[8 * v23];
      *(_QWORD *)v25 = v14;
      v17 = v25 + 8;
      v28 = (char *)v13[1];
      v27 = (char *)v13[2];
      if (v27 != v28)
      {
        do
        {
          v29 = *((_QWORD *)v27 - 1);
          v27 -= 8;
          *((_QWORD *)v25 - 1) = v29;
          v25 -= 8;
        }
        while (v27 != v28);
        v27 = (char *)*v18;
      }
      v13[1] = v25;
      v13[2] = v17;
      v13[3] = v26;
      if (v27)
        operator delete(v27);
    }
    else
    {
      *v15 = v14;
      v17 = v15 + 1;
    }
    v13[2] = v17;
    std::list<std::shared_ptr<SKCRenderSortGroup>>::push_back(v74, &v72);
    v30 = v74;
    *((_OWORD *)v74 + 3) = *(_OWORD *)(*(_QWORD *)(*a3 + 16) + 48);
    *((_OWORD *)v30 + 4) = *(_OWORD *)(*(_QWORD *)(*a3 + 16) + 64);
    v31 = operator new();
    *(_QWORD *)v31 = v31;
    *(_QWORD *)(v31 + 8) = v31;
    *(_QWORD *)(v31 + 16) = 0;
    *(_QWORD *)(v31 + 24) = v31 + 24;
    *(_QWORD *)(v31 + 32) = v31 + 24;
    *(_QWORD *)(v31 + 40) = 0;
    *(_QWORD *)(v31 + 80) = 0;
    v32 = v6[1];
    *(_OWORD *)(v31 + 96) = *v6;
    *(_OWORD *)(v31 + 112) = v32;
    v33 = v6[3];
    *(_OWORD *)(v31 + 128) = v6[2];
    *(_OWORD *)(v31 + 144) = v33;
    *(_BYTE *)(v31 + 160) = 0;
    *(_BYTE *)(v31 + 192) = 0;
    *(_BYTE *)(v31 + 224) = 0;
    std::shared_ptr<SKCRenderPass>::shared_ptr[abi:ne180100]<SKCRenderPass,void>(&v70, v31);
    v34 = *(_QWORD *)(a1 + 704);
    v70[10] = v34;
    *(_OWORD *)(v34 + 32) = *(_OWORD *)(*(_QWORD *)(a1 + 600) + 304);
    v35 = operator new();
    *(_QWORD *)v35 = &off_1EA4FE720;
    *(_QWORD *)(v35 + 8) = 0;
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)(v35 + 24) = 0;
    *(_QWORD *)(v35 + 32) = v35 + 32;
    *(_QWORD *)(v35 + 40) = v35 + 32;
    *(_QWORD *)(v35 + 48) = 0;
    *(_QWORD *)(v35 + 56) = v35 + 56;
    *(_QWORD *)(v35 + 64) = v35 + 56;
    *(_OWORD *)(v35 + 72) = 0u;
    *(_OWORD *)(v35 + 88) = 0u;
    *(_OWORD *)(v35 + 104) = 0u;
    *(_QWORD *)(v35 + 120) = 0;
    v36 = v6[3];
    *(_OWORD *)(v35 + 160) = v6[2];
    *(_OWORD *)(v35 + 176) = v36;
    v37 = v6[1];
    *(_OWORD *)(v35 + 128) = *v6;
    *(_OWORD *)(v35 + 144) = v37;
    *(_BYTE *)(v35 + 192) = 0;
    std::shared_ptr<SKCRenderSortGroup>::shared_ptr[abi:ne180100]<SKCRenderSortGroup,void>(&v68, v35);
    v38 = v68;
    v39 = *(_QWORD *)(a1 + 600);
    v40 = (_QWORD *)v68[2];
    v41 = v68[3];
    if ((unint64_t)v40 >= v41)
    {
      v43 = (void **)(v68 + 1);
      v44 = v68[1];
      v45 = ((uint64_t)v40 - v44) >> 3;
      if ((unint64_t)(v45 + 1) >> 61)
        std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
      v46 = v41 - v44;
      v47 = v46 >> 2;
      if (v46 >> 2 <= (unint64_t)(v45 + 1))
        v47 = v45 + 1;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
        v48 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v48 = v47;
      if (v48)
        v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)(v68 + 3), v48);
      else
        v49 = 0;
      v50 = &v49[8 * v45];
      v51 = &v49[8 * v48];
      *(_QWORD *)v50 = v39;
      v42 = v50 + 8;
      v53 = (char *)v38[1];
      v52 = (char *)v38[2];
      if (v52 != v53)
      {
        do
        {
          v54 = *((_QWORD *)v52 - 1);
          v52 -= 8;
          *((_QWORD *)v50 - 1) = v54;
          v50 -= 8;
        }
        while (v52 != v53);
        v52 = (char *)*v43;
      }
      v38[1] = v50;
      v38[2] = v42;
      v38[3] = v51;
      if (v52)
        operator delete(v52);
    }
    else
    {
      *v40 = v39;
      v42 = v40 + 1;
    }
    v38[2] = v42;
    std::list<std::shared_ptr<SKCRenderSortGroup>>::push_back(v70, &v68);
    v55 = v70;
    *((_OWORD *)v70 + 3) = *(_OWORD *)(*(_QWORD *)(*a3 + 16) + 48);
    *((_OWORD *)v55 + 4) = *(_OWORD *)(*(_QWORD *)(*a3 + 16) + 64);
    std::list<std::shared_ptr<SKCRenderSortGroup>>::push_back(a3, &v74);
    std::list<std::shared_ptr<SKCRenderSortGroup>>::push_back(a3, &v70);
    *(_WORD *)(a1 + 724) = 257;
    v56 = v69;
    if (v69)
    {
      p_shared_owners = (unint64_t *)&v69->__shared_owners_;
      do
        v58 = __ldaxr(p_shared_owners);
      while (__stlxr(v58 - 1, p_shared_owners));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v59 = v71;
    if (v71)
    {
      v60 = (unint64_t *)&v71->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    v62 = v73;
    if (v73)
    {
      v63 = (unint64_t *)&v73->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v65 = v75;
    if (v75)
    {
      v66 = (unint64_t *)&v75->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
  }
  else
  {
    SKCNode::addRequistePasses(a1, a2, a3);
  }
}

void sub_1DC877F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *std::list<std::shared_ptr<SKCRenderSortGroup>>::push_back(uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  result = operator new(0x20uLL);
  v5 = a2[1];
  result[2] = *a2;
  result[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *a1;
  *result = *a1;
  result[1] = a1;
  *(_QWORD *)(v8 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

uint64_t SKCTransitionNode::setFlipTextures(uint64_t this, char a2)
{
  *(_BYTE *)(this + 727) = a2;
  return this;
}

uint64_t SKCTransitionNode::getFlipTextures(SKCTransitionNode *this)
{
  return *((unsigned __int8 *)this + 727);
}

uint64_t SKCTransitionNode::setIgnoreScenes(uint64_t this, char a2)
{
  *(_BYTE *)(this + 726) = a2;
  return this;
}

uint64_t SKCTransitionNode::getIgnoreScenes(SKCTransitionNode *this)
{
  return *((unsigned __int8 *)this + 726);
}

_QWORD *SKCTransitionNode::setInputTextures(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::shared_ptr<jet_texture>::operator=[abi:ne180100]((_QWORD *)(a1 + 608), a2);
  return std::shared_ptr<jet_texture>::operator=[abi:ne180100]((_QWORD *)(a1 + 624), a3);
}

void SKCTransitionNode::~SKCTransitionNode(SKCTransitionNode *this)
{
  void *v2;

  *(_QWORD *)this = off_1EA4FE600;
  *((_OWORD *)this + 37) = 0u;
  v2 = (void *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 704);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 688);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 672);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 656);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 640);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 624);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 608);

  SKCNode::~SKCNode((id *)this);
}

{
  SKCTransitionNode::~SKCTransitionNode(this);
  JUMPOUT(0x1DF0CF560);
}

uint64_t SKCNode::isLightNode(SKCNode *this)
{
  return 0;
}

void SKCRenderSortGroup::~SKCRenderSortGroup(SKCRenderSortGroup *this)
{
  SKCRenderSortGroup::~SKCRenderSortGroup(this);
  JUMPOUT(0x1DF0CF560);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = &off_1EA4FE720;
  v2 = (_QWORD *)((char *)this + 32);
  for (i = (_QWORD *)*((_QWORD *)this + 5); i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1DF0CF560](v4, 0x1020C40601E13ABLL);
  }
  std::__list_imp<SKCRenderSortInfo *>::clear(v2);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  std::__list_imp<SKCRenderSortInfo *>::clear((_QWORD *)this + 7);
  std::__list_imp<SKCRenderSortInfo *>::clear(v2);
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
}

_QWORD *std::__list_imp<SKCRenderSortInfo *>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

_QWORD *std::shared_ptr<SKCRenderPass>::shared_ptr[abi:ne180100]<SKCRenderPass,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v6;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1EA4FE750;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  v6 = 0;
  std::unique_ptr<SKCRenderPass>::reset[abi:ne180100](&v6, 0);
  return a1;
}

void sub_1DC8782A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<SKCRenderPass>::reset[abi:ne180100]((uint64_t **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<SKCRenderPass *,std::shared_ptr<SKCRenderPass>::__shared_ptr_default_delete<SKCRenderPass,SKCRenderPass>,std::allocator<SKCRenderPass>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

void std::__shared_ptr_pointer<SKCRenderPass *,std::shared_ptr<SKCRenderPass>::__shared_ptr_default_delete<SKCRenderPass,SKCRenderPass>,std::allocator<SKCRenderPass>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<SKCRenderPass>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<SKCRenderPass *,std::shared_ptr<SKCRenderPass>::__shared_ptr_default_delete<SKCRenderPass,SKCRenderPass>,std::allocator<SKCRenderPass>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<SKCRenderPass>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear(a2 + 3);
    std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear(a2);
    JUMPOUT(0x1DF0CF560);
  }
}

void std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t **std::unique_ptr<SKCRenderPass>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear(v2 + 3);
    std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear(v2);
    JUMPOUT(0x1DF0CF560);
  }
  return result;
}

_QWORD *std::shared_ptr<SKCRenderSortGroup>::shared_ptr[abi:ne180100]<SKCRenderSortGroup,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1EA4FE7C8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DC878488(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<SKCRenderSortGroup *,std::shared_ptr<SKCRenderSortGroup>::__shared_ptr_default_delete<SKCRenderSortGroup,SKCRenderSortGroup>,std::allocator<SKCRenderSortGroup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

uint64_t std::__shared_ptr_pointer<SKCRenderSortGroup *,std::shared_ptr<SKCRenderSortGroup>::__shared_ptr_default_delete<SKCRenderSortGroup,SKCRenderSortGroup>,std::allocator<SKCRenderSortGroup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<SKCRenderSortGroup *,std::shared_ptr<SKCRenderSortGroup>::__shared_ptr_default_delete<SKCRenderSortGroup,SKCRenderSortGroup>,std::allocator<SKCRenderSortGroup>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void SKCCropNode::SKCCropNode(SKCCropNode *this)
{
  uint64_t v1;

  SKCNode::SKCNode(this);
  *(_QWORD *)v1 = off_1EA4FE840;
  *(_BYTE *)(v1 + 560) = 0;
  *(_WORD *)(v1 + 688) = 0;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_OWORD *)(v1 + 600) = 0u;
  *(_OWORD *)(v1 + 616) = 0u;
  *(_OWORD *)(v1 + 632) = 0u;
  *(_OWORD *)(v1 + 648) = 0u;
  *(_QWORD *)(v1 + 664) = 0;
}

void SKCCropNode::checkShouldUseStencilMethod(SKCCropNode *this, SKCRenderInfo *a2)
{
  uint64_t **v3;
  char v4;
  uint64_t v5;
  _QWORD v6[5];
  _QWORD v7[5];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  if (*((_BYTE *)this + 688))
  {
    *((_BYTE *)this + 560) = 0;
  }
  else
  {
    v3 = (uint64_t **)*((_QWORD *)this + 71);
    if (!v3 || (*((_BYTE *)a2 + 580) & 0x80) != 0)
    {
      *((_BYTE *)this + 560) = 1;
    }
    else
    {
      v8 = 0;
      v9 = &v8;
      v10 = 0x2020000000;
      v11 = 0;
      if (*((_BYTE *)a2 + 576))
      {
        v4 = 0;
        v11 = 1;
      }
      else
      {
        v5 = MEMORY[0x1E0C809B0];
        v7[0] = MEMORY[0x1E0C809B0];
        v7[1] = 3221225472;
        v7[2] = ___ZN11SKCCropNode27checkShouldUseStencilMethodEP13SKCRenderInfo_block_invoke;
        v7[3] = &unk_1EA4FE920;
        v7[4] = &v8;
        SKCNode::walkDown(v3, v7, 1, 1);
        if (*((_BYTE *)v9 + 24))
        {
          v4 = 0;
        }
        else
        {
          v6[0] = v5;
          v6[1] = 3221225472;
          v6[2] = ___ZN11SKCCropNode27checkShouldUseStencilMethodEP13SKCRenderInfo_block_invoke_2;
          v6[3] = &unk_1EA4FE920;
          v6[4] = &v8;
          SKCNode::walkDown((uint64_t **)this, v6, 0, 1);
          v4 = *((_BYTE *)v9 + 24) ^ 1;
        }
      }
      *((_BYTE *)this + 560) = v4;
      _Block_object_dispose(&v8, 8);
    }
  }
}

void sub_1DC878698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN11SKCCropNode27checkShouldUseStencilMethodEP13SKCRenderInfo_block_invoke(uint64_t a1, SKCNode *a2, _BYTE *a3)
{
  uint64_t result;

  result = maskNodeRequiresAlphaMask(a2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

uint64_t maskNodeRequiresAlphaMask(SKCNode *a1)
{
  _QWORD *v2;
  _QWORD *v4;

  if (!a1)
    return 0;
  if (v2)
  {
    if (!v2[74])
      return 0;
  }
  {
    if (!v4)
    {
      if (!v4)
        return 0;
    }
    if (!v4[72])
      return 0;
  }
  return 1;
}

uint64_t SKCCropNode::generatesVisibleGeometry(SKCCropNode *this, const simd_float4x4 *a2)
{
  return 1;
}

void SKCCropNode::setMaskNode(SKCNode *this, SKCNode *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 71);
  if (v2)
    *(_QWORD *)(v2 + 80) = 0;
  *((_QWORD *)this + 71) = a2;
  if (a2)
    *((_QWORD *)a2 + 10) = this;
  SKCNode::setDirty(this);
}

uint64_t SKCCropNode::update(SKCCropNode *this, double a2, float a3)
{
  uint64_t result;

  SKCNode::update(this, a2, 1.0);
  result = *((_QWORD *)this + 71);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t, double, float))(*(_QWORD *)result + 152))(result, a2, 1.0);
    *((_DWORD *)this + 69) |= *(_DWORD *)(*((_QWORD *)this + 71) + 276) | *(_DWORD *)(*((_QWORD *)this + 71) + 272);
  }
  return result;
}

double SKCCropNode::getBatchInfo@<D0>(uint64_t a1@<X8>, uint64_t a2@<X0>, uint64_t a3@<X1>)
{
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_QWORD *)(a2 + 568) || (*(_BYTE *)(a3 + 580) & 0x80) != 0 || *(_BYTE *)(a2 + 560))
    return SKCNode::getBatchInfo(a1);
  v4 = *(_QWORD *)(a2 + 656);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v5 = 312;
  if (!*(_BYTE *)(a2 + 689))
    v5 = 296;
  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 48) = 0uLL;
  *(_OWORD *)(a1 + 60) = 0uLL;
  v6 = *(_QWORD *)(a3 + v5);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 12) = 0;
  *(_QWORD *)&result = 0x300000004;
  *(_QWORD *)(a1 + 4) = 0x300000004;
  return result;
}

uint64_t SKCCropNode::getMaxBatchRenderElementCount(uint64_t a1)
{
  return 4 * (*(_BYTE *)(a1 + 560) == 0);
}

uint64_t SKCCropNode::addBatchRenderElements(float32x4_t *a1, float32x4_t *a2, float32x4_t a3)
{
  uint64_t v4;
  int16x8_t v5;
  float32x4_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  __int128 v15;
  __int128 v16;
  unsigned __int32 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!a1[35].i64[1] || a2[36].i8[4] < 0 || a1[35].i8[0])
    return SKCNode::addBatchRenderElements();
  v4 = 0;
  a3.f32[0] = fminf(fmaxf(a1[20].f32[1] * a2[6].f32[0], 0.0), 1.0) * 255.0;
  v5 = (int16x8_t)vcvtq_s32_f32(a3);
  *(int16x4_t *)v5.i8 = vdup_lane_s16(vmovn_s32((int32x4_t)v5), 0);
  v6 = a1[42];
  *((_QWORD *)&v7 + 1) = 0x3F80000000000000;
  *(_QWORD *)&v8 = a1[42].i64[0];
  *((_QWORD *)&v8 + 1) = 0x3F80000000000000;
  v9 = xmmword_1DC9217E0;
  LODWORD(v9) = vaddq_f32(v6, (float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2)).u32[0];
  v10 = v9;
  DWORD1(v10) = DWORD1(v8);
  DWORD1(v9) = vaddq_f32(v6, (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)&v6, 3)).i32[1];
  v23 = v8;
  v24 = v10;
  *(_QWORD *)&v7 = __PAIR64__(DWORD1(v9), v6.u32[0]);
  v25 = v9;
  v26 = v7;
  v11 = a2[2];
  v12 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  do
  {
    *(__int128 *)((char *)&v23 + v4) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v11, COERCE_FLOAT(*(__int128 *)((char *)&v23 + v4))), v12, *(float32x2_t *)((char *)&v23 + v4), 1), v13, *(float32x4_t *)((char *)&v23 + v4), 2), v14, *(float32x4_t *)((char *)&v23 + v4), 3);
    v4 += 16;
  }
  while (v4 != 64);
  v15 = v24;
  *(_OWORD *)(a2[1].i64[1] + 16 * a2->u32[0]) = v23;
  *(_OWORD *)(a2[1].i64[1] + 16 * (a2->i32[0] + 1)) = v15;
  v16 = v26;
  *(_OWORD *)(a2[1].i64[1] + 16 * (a2->i32[0] + 2)) = v25;
  *(_OWORD *)(a2[1].i64[1] + 16 * (a2->i32[0] + 3)) = v16;
  *(_QWORD *)(a2[1].i64[0] + 8 * a2->u32[0]) = 0;
  *(_QWORD *)(a2[1].i64[0] + 8 * (a2->i32[0] + 1)) = 1065353216;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a2[1].i64[0] + 8 * (a2->i32[0] + 2)) = _D1;
  *(_QWORD *)(a2[1].i64[0] + 8 * (a2->i32[0] + 3)) = 0x3F80000000000000;
  v22 = vmovn_s16(v5).u32[0];
  *(_DWORD *)(a2->i64[1] + 4 * a2->u32[0]) = v22;
  *(_DWORD *)(a2->i64[1] + 4 * (a2->i32[0] + 1)) = v22;
  *(_DWORD *)(a2->i64[1] + 4 * (a2->i32[0] + 2)) = v22;
  *(_DWORD *)(a2->i64[1] + 4 * (a2->i32[0] + 3)) = v22;
  return 4;
}

void SKCCropNode::addRenderableChildren(SKCCropNode *a1, SKCRenderInfo *a2, uint64_t a3)
{
  SKCCropNode::checkShouldUseStencilMethod(a1, a2);
  if (!*((_QWORD *)a1 + 71) || (*((_BYTE *)a2 + 580) & 0x80) != 0)
    SKCNode::addRenderableChildren((char *)a1, (uint64_t)a2, a3);
}

void SKCCropNode::ensure_framebuffers(uint64_t a1, uint64_t a2)
{
  float32x4_t *v4;
  simd_float4 v5;
  simd_float4 v6;
  simd_float4 v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  simd_float4 v12;
  simd_float4 v13;
  simd_float4 v14;
  float32x4_t *v15;
  float32x4_t AABB;
  int v17;
  float32x2_t v18;
  __n128 v19;
  float v20;
  float v21;
  float v22;
  _QWORD *v23;
  unsigned int (***v24)(_QWORD);
  float v25;
  __n128 v26;
  __n128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t texture_2d;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  float32x2_t v79;
  __n128 v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  simd_float4x4 v84;
  _QWORD v85[5];
  uint64_t v86;
  float32x4_t *v87;
  uint64_t v88;
  __n128 (*v89)(uint64_t, uint64_t);
  uint64_t (*v90)();
  const char *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;

  v86 = 0;
  v87 = (float32x4_t *)&v86;
  v88 = 0x7012000000;
  v89 = __Block_byref_object_copy_;
  v90 = __Block_byref_object_dispose_;
  v91 = "";
  v92 = SKCBoundingBoxEmpty;
  v93 = xmmword_1DC9223B0;
  v94 = xmmword_1DC9223C0;
  v95 = xmmword_1DC9223D0;
  v85[0] = MEMORY[0x1E0C809B0];
  v85[1] = 3221225472;
  v85[2] = ___ZN11SKCCropNode19ensure_framebuffersEP13SKCRenderInfoDv4_j_block_invoke;
  v85[3] = &unk_1EA4FE920;
  v85[4] = &v86;
  SKCNode::walkChildren((char **)a1, v85, 0, 1);
  v4 = v87;
  if (*(_BYTE *)(a1 + 689))
  {
    v84.columns[0] = (simd_float4)SKCNode::getAccumulatedBoundingBox((char **)*(_QWORD *)(a1 + 568));
    v84.columns[1] = v5;
    v84.columns[2] = v6;
    v84.columns[3] = v7;
    v8 = SKCBoundingBoxUnion((const simd_float4x4 *)&v4[3], &v84);
  }
  else
  {
    v84.columns[0] = (simd_float4)SKCNode::getAccumulatedBoundingBox((char **)*(_QWORD *)(a1 + 568));
    v84.columns[1] = v12;
    v84.columns[2] = v13;
    v84.columns[3] = v14;
    *(double *)v8.i64 = SKCBoundingBoxIntersection((const simd_float4x4 *)&v4[3], &v84);
  }
  v15 = v87;
  v87[3] = v8;
  v15[4] = v9;
  v15[5] = v10;
  v15[6] = v11;
  AABB = SKCBoundingBoxGetAABB((const simd_float4x4 *)&v15[3]);
  v79 = vmaxnm_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)AABB, (int8x16_t)AABB, 8uLL), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  *(float32x2_t *)&AABB.u32[2] = v79;
  *(float32x4_t *)(a1 + 672) = AABB;
  SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v84);
  v17 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v84.columns[0].i64[0] + 152))(v84.columns[0].i64[0], 0);
  v18 = vrndp_f32(v79);
  v19.n128_u64[0] = (unint64_t)vmaxnm_f32(vadd_f32(v18, v18), (float32x2_t)0x4000000040000000);
  v20 = (float)v17;
  if (v19.n128_f32[0] > (float)v17)
  {
    v21 = v19.n128_f32[0] - v20;
    v19.n128_f32[0] = (float)v17;
    *(float *)(a1 + 680) = *(float *)(a1 + 680) + (float)(v21 * -0.5);
  }
  v22 = v19.n128_f32[1];
  if (v19.n128_f32[1] > v20)
  {
    v19.n128_f32[1] = (float)v17;
    *(float *)(a1 + 684) = *(float *)(a1 + 684) + (float)((float)(v22 - v20) * -0.5);
  }
  v80 = v19;
  v23 = (_QWORD *)(a1 + 608);
  v24 = *(unsigned int (****)(_QWORD))(a1 + 608);
  if (!v24)
    goto LABEL_27;
  v25 = (float)(**v24)(v24);
  if (v80.n128_f32[0] > v25
    || (v26.n128_f32[0] = (float)(*(unsigned int (**)(_QWORD, float, __n128))(*(_QWORD *)*v23 + 8))(*v23, v25, v80), v27 = v80, v27.n128_u32[0] = v80.n128_u32[1], v80.n128_f32[1] > v26.n128_f32[0]))
  {
    v83 = 0uLL;
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 608, &v83);
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    if (*((_QWORD *)&v83 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v83 = 0uLL;
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 656, &v83);
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    if (*((_QWORD *)&v83 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v83 = 0uLL;
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 624, &v83);
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    if (*((_QWORD *)&v83 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  if (!*v23)
  {
LABEL_27:
    SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v81);
    texture_2d = jet_context::create_texture_2d();
    std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v83, texture_2d);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 608, &v83);
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    if (*((_QWORD *)&v83 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = v82;
    if (v82)
    {
      p_shared_owners = (unint64_t *)&v82->__shared_owners_;
      do
        v43 = __ldaxr(p_shared_owners);
      while (__stlxr(v43 - 1, p_shared_owners));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v81);
    v44 = jet_context::create_texture_2d();
    std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v83, v44);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 656, &v83);
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    if (*((_QWORD *)&v83 + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = v82;
    if (v82)
    {
      v49 = (unint64_t *)&v82->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v81);
    v51 = jet_context::create_texture_2d();
    std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v83, v51);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 624, &v83);
    v52 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    if (*((_QWORD *)&v83 + 1))
    {
      v53 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = v82;
    if (v82)
    {
      v56 = (unint64_t *)&v82->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
  v58 = *(_QWORD **)(a1 + 592);
  if (!v58)
  {
    SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v81);
    v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 112))(v81);
    std::shared_ptr<jet_framebuffer>::shared_ptr[abi:ne180100]<jet_framebuffer,void>(&v83, v59);
    v60 = a1 + 592;
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 592, &v83);
    v61 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    if (*((_QWORD *)&v83 + 1))
    {
      v62 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    v64 = v82;
    if (v82)
    {
      v65 = (unint64_t *)&v82->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v81);
    v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 112))(v81);
    std::shared_ptr<jet_framebuffer>::shared_ptr[abi:ne180100]<jet_framebuffer,void>(&v83, v67);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 640, &v83);
    v68 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
    if (*((_QWORD *)&v83 + 1))
    {
      v69 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = v82;
    if (v82)
    {
      v72 = (unint64_t *)&v82->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v26 = 0uLL;
    *(_OWORD *)(*(_QWORD *)v60 + 32) = 0u;
    *(_OWORD *)(*(_QWORD *)(a1 + 640) + 32) = 0u;
    v58 = *(_QWORD **)v60;
  }
  v58[2] = *(_QWORD *)(a1 + 608);
  v74 = *(_QWORD *)(a1 + 624);
  v58[26] = v74;
  v58[29] = v74;
  v75 = *(_QWORD **)(a1 + 640);
  v75[2] = *(_QWORD *)(a1 + 656);
  v75[26] = v74;
  v75[29] = v74;
  v76 = (std::__shared_weak_count *)v84.columns[0].i64[1];
  if (v84.columns[0].i64[1])
  {
    v77 = (unint64_t *)(v84.columns[0].i64[1] + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *, __n128, __n128))v76->__on_zero_shared)(v76, v26, v27);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  _Block_object_dispose(&v86, 8);
}

void sub_1DC8792EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void ___ZN11SKCCropNode19ensure_framebuffersEP13SKCRenderInfoDv4_j_block_invoke(uint64_t a1, char **this)
{
  const simd_float4x4 *v3;
  simd_float4 v4;
  simd_float4 v5;
  simd_float4 v6;
  float32x4_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  simd_float4x4 v12;

  v3 = (const simd_float4x4 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  v12.columns[0] = (simd_float4)SKCNode::getAccumulatedBoundingBox(this);
  v12.columns[1] = v4;
  v12.columns[2] = v5;
  v12.columns[3] = v6;
  v7 = SKCBoundingBoxUnion(v3, &v12);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(float32x4_t *)(v8 + 48) = v7;
  *(_OWORD *)(v8 + 64) = v9;
  *(_OWORD *)(v8 + 80) = v10;
  *(_OWORD *)(v8 + 96) = v11;
}

void SKCCropNode::addRequistePasses(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;
  uint64_t *v55;
  std::__shared_weak_count *v56;

  if (!*(_QWORD *)(a1 + 568) || (*(_BYTE *)(a2 + 580) & 0x80) != 0 || *(_BYTE *)(a1 + 560))
  {
    SKCNode::addRequistePasses(a1, a2, a3);
  }
  else
  {
    SKCCropNode::ensure_framebuffers(a1, a2);
    v6 = (***(uint64_t (****)(_QWORD))(a1 + 608))(*(_QWORD *)(a1 + 608));
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 608) + 8))(*(_QWORD *)(a1 + 608));
    v8 = operator new();
    *(_QWORD *)v8 = v8;
    *(_QWORD *)(v8 + 8) = v8;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = v8 + 24;
    *(_QWORD *)(v8 + 32) = v8 + 24;
    *(_QWORD *)(v8 + 40) = 0;
    v9 = (_OWORD *)MEMORY[0x1E0C83FF0];
    *(_QWORD *)(v8 + 80) = 0;
    v10 = v9[1];
    *(_OWORD *)(v8 + 96) = *v9;
    *(_OWORD *)(v8 + 112) = v10;
    v11 = v9[3];
    *(_OWORD *)(v8 + 128) = v9[2];
    *(_OWORD *)(v8 + 144) = v11;
    *(_BYTE *)(v8 + 160) = 0;
    *(_BYTE *)(v8 + 192) = 0;
    *(_BYTE *)(v8 + 224) = 0;
    std::shared_ptr<SKCRenderPass>::shared_ptr[abi:ne180100]<SKCRenderPass,void>(&v55, v8);
    v12 = v55;
    v55[10] = *(_QWORD *)(a1 + 640);
    *(_QWORD *)&v13 = 0;
    *((_QWORD *)&v13 + 1) = __PAIR64__(v7, v6);
    v52 = v13;
    *((_OWORD *)v12 + 3) = v13;
    *((_OWORD *)v12 + 4) = *(_OWORD *)(a1 + 672);
    v14 = operator new();
    *(_QWORD *)v14 = &off_1EA4FE720;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    *(_QWORD *)(v14 + 32) = v14 + 32;
    *(_QWORD *)(v14 + 40) = v14 + 32;
    *(_QWORD *)(v14 + 48) = 0;
    *(_QWORD *)(v14 + 56) = v14 + 56;
    *(_QWORD *)(v14 + 64) = v14 + 56;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 104) = 0u;
    *(_QWORD *)(v14 + 120) = 0;
    v15 = v9[3];
    *(_OWORD *)(v14 + 160) = v9[2];
    *(_OWORD *)(v14 + 176) = v15;
    v16 = v9[1];
    *(_OWORD *)(v14 + 128) = *v9;
    *(_OWORD *)(v14 + 144) = v16;
    *(_BYTE *)(v14 + 192) = 0;
    std::shared_ptr<SKCRenderSortGroup>::shared_ptr[abi:ne180100]<SKCRenderSortGroup,void>(&v53, v14);
    v17 = v53;
    v18 = (_QWORD *)v53[2];
    v19 = v53[3];
    if ((unint64_t)v18 >= v19)
    {
      v21 = (void **)(v53 + 1);
      v22 = v53[1];
      v23 = ((uint64_t)v18 - v22) >> 3;
      if ((unint64_t)(v23 + 1) >> 61)
        std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
      v24 = v19 - v22;
      v25 = v24 >> 2;
      if (v24 >> 2 <= (unint64_t)(v23 + 1))
        v25 = v23 + 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)(v53 + 3), v26);
      else
        v27 = 0;
      v28 = &v27[8 * v23];
      v29 = &v27[8 * v26];
      *(_QWORD *)v28 = *(_QWORD *)(a1 + 568);
      v20 = v28 + 8;
      v31 = (char *)v17[1];
      v30 = (char *)v17[2];
      if (v30 != v31)
      {
        do
        {
          v32 = *((_QWORD *)v30 - 1);
          v30 -= 8;
          *((_QWORD *)v28 - 1) = v32;
          v28 -= 8;
        }
        while (v30 != v31);
        v30 = (char *)*v21;
      }
      v17[1] = v28;
      v17[2] = v20;
      v17[3] = v29;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *v18 = *(_QWORD *)(a1 + 568);
      v20 = v18 + 1;
    }
    v17[2] = v20;
    std::list<std::shared_ptr<SKCRenderSortGroup>>::push_back(v55, &v53);
    std::list<std::shared_ptr<SKCRenderSortGroup>>::push_back(a3, &v55);
    v33 = v54;
    if (v54)
    {
      p_shared_owners = (unint64_t *)&v54->__shared_owners_;
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = v56;
    if (v56)
    {
      v37 = (unint64_t *)&v56->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = operator new();
    *(_QWORD *)v39 = v39;
    *(_QWORD *)(v39 + 8) = v39;
    *(_QWORD *)(v39 + 16) = 0;
    *(_QWORD *)(v39 + 24) = v39 + 24;
    *(_QWORD *)(v39 + 32) = v39 + 24;
    *(_QWORD *)(v39 + 40) = 0;
    *(_QWORD *)(v39 + 80) = 0;
    v40 = v9[1];
    *(_OWORD *)(v39 + 96) = *v9;
    *(_OWORD *)(v39 + 112) = v40;
    v41 = v9[3];
    *(_OWORD *)(v39 + 128) = v9[2];
    *(_OWORD *)(v39 + 144) = v41;
    *(_BYTE *)(v39 + 160) = 0;
    *(_BYTE *)(v39 + 192) = 0;
    *(_BYTE *)(v39 + 224) = 0;
    std::shared_ptr<SKCRenderPass>::shared_ptr[abi:ne180100]<SKCRenderPass,void>(&v55, v39);
    v42 = v55;
    v55[10] = *(_QWORD *)(a1 + 592);
    *((_OWORD *)v42 + 3) = v52;
    *((_OWORD *)v42 + 4) = *(_OWORD *)(a1 + 672);
    v43 = operator new();
    *(_QWORD *)v43 = &off_1EA4FE720;
    *(_QWORD *)(v43 + 8) = 0;
    *(_QWORD *)(v43 + 16) = 0;
    *(_QWORD *)(v43 + 24) = 0;
    *(_QWORD *)(v43 + 32) = v43 + 32;
    *(_QWORD *)(v43 + 40) = v43 + 32;
    *(_QWORD *)(v43 + 48) = 0;
    *(_QWORD *)(v43 + 56) = v43 + 56;
    *(_QWORD *)(v43 + 64) = v43 + 56;
    *(_OWORD *)(v43 + 72) = 0u;
    *(_OWORD *)(v43 + 88) = 0u;
    *(_OWORD *)(v43 + 104) = 0u;
    *(_QWORD *)(v43 + 120) = 0;
    v44 = v9[3];
    *(_OWORD *)(v43 + 160) = v9[2];
    *(_OWORD *)(v43 + 176) = v44;
    v45 = v9[1];
    *(_OWORD *)(v43 + 128) = *v9;
    *(_OWORD *)(v43 + 144) = v45;
    *(_BYTE *)(v43 + 192) = 0;
    std::shared_ptr<SKCRenderSortGroup>::shared_ptr[abi:ne180100]<SKCRenderSortGroup,void>(&v53, v43);
    SKCNode::addRenderableChildren((char *)a1, a2, (uint64_t)(v53 + 1));
    std::list<std::shared_ptr<SKCRenderSortGroup>>::push_back(v55, &v53);
    std::list<std::shared_ptr<SKCRenderSortGroup>>::push_back(a3, &v55);
    v46 = v54;
    if (v54)
    {
      v47 = (unint64_t *)&v54->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = v56;
    if (v56)
    {
      v50 = (unint64_t *)&v56->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }
}

void sub_1DC879834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SKCCropNode::addSubGroups(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  float32x4_t *v6;
  simd_float4 v7;
  simd_float4 v8;
  simd_float4 v9;
  float32x4_t v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  __int128 v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  jet_buffer_pool **v24;
  jet_buffer_pool *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _OWORD *data;
  uint64_t v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  jet_command_buffer *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t current_buffer;
  uint64_t v41;
  int v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  _QWORD *v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  jet_command_buffer *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  jet_command_buffer *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  simd_float4 v99;
  simd_float4 v100;
  simd_float4 v101;
  simd_float4 v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  _QWORD v107[5];
  uint64_t v108;
  float32x4_t *v109;
  uint64_t v110;
  __n128 (*v111)(uint64_t, uint64_t);
  uint64_t (*v112)();
  const char *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _OWORD v118[4];
  simd_float4x4 __str;
  int v120;

  if (!*(_QWORD *)(a1 + 568) || (*(_BYTE *)(a2 + 580) & 0x80) != 0)
  {
    SKCNode::addSubGroups(a1, a2, a3);
  }
  else if (*(_BYTE *)(a1 + 560))
  {
    v110 = 0x7012000000;
    v114 = SKCBoundingBoxEmpty;
    v115 = xmmword_1DC9223B0;
    v116 = xmmword_1DC9223C0;
    v108 = 0;
    v109 = (float32x4_t *)&v108;
    v111 = __Block_byref_object_copy_;
    v112 = __Block_byref_object_dispose_;
    v113 = "";
    v117 = xmmword_1DC9223D0;
    v107[0] = MEMORY[0x1E0C809B0];
    v107[1] = 3221225472;
    v107[2] = ___ZN11SKCCropNode12addSubGroupsEP13SKCRenderInfoPNSt3__14listINS2_10shared_ptrI18SKCRenderSortGroupEENS2_9allocatorIS6_EEEE_block_invoke;
    v107[3] = &unk_1EA4FE920;
    v107[4] = &v108;
    SKCNode::walkChildren((char **)a1, v107, 0, 1);
    v6 = v109;
    __str.columns[0] = (simd_float4)SKCNode::getAccumulatedBoundingBox((char **)*(_QWORD *)(a1 + 568));
    __str.columns[1] = v7;
    __str.columns[2] = v8;
    __str.columns[3] = v9;
    v10 = SKCBoundingBoxUnion((const simd_float4x4 *)&v6[3], &__str);
    v11 = v109;
    v109[3] = v10;
    v11[4] = v12;
    v11 += 3;
    v11[2] = v13;
    v11[3] = v14;
    *(double *)&v15 = SKCBoundingBoxGetVerts((const simd_float4x4 *)v11);
    v16 = 0;
    v17 = *(float32x4_t *)(a2 + 32);
    v18 = *(float32x4_t *)(a2 + 48);
    v19 = *(float32x4_t *)(a2 + 64);
    v20 = *(float32x4_t *)(a2 + 80);
    v118[0] = v15;
    v118[1] = v21;
    v118[2] = v22;
    v118[3] = v23;
    do
    {
      __str.columns[v16] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(v118[v16])), v18, *(float32x2_t *)&v118[v16], 1), v19, (float32x4_t)v118[v16], 2), v20, (float32x4_t)v118[v16], 3);
      ++v16;
    }
    while (v16 != 4);
    v101 = __str.columns[2];
    v102 = __str.columns[0];
    v99 = __str.columns[1];
    v100 = __str.columns[3];
    SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), v118);
    v24 = (jet_buffer_pool **)(a1 + 576);
    v25 = *(jet_buffer_pool **)(a1 + 576);
    if (!v25)
    {
      v26 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)&v118[0] + 16))(*(_QWORD *)&v118[0], 0, 4, 6);
      std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&__str, v26);
      std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 576, (__int128 *)&__str);
      v27 = (std::__shared_weak_count *)__str.columns[0].i64[1];
      if (__str.columns[0].i64[1])
      {
        v28 = (unint64_t *)(__str.columns[0].i64[1] + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v25 = *v24;
    }
    jet_buffer_pool::next_buffer(v25);
    data = (_OWORD *)jet_buffer_pool::get_data(*v24);
    *data = v102;
    data[1] = v99;
    data[2] = v101;
    data[3] = v101;
    data[4] = v100;
    data[5] = v102;
    v31 = operator new();
    *(_QWORD *)v31 = &off_1EA4FE720;
    *(_QWORD *)(v31 + 8) = 0;
    *(_QWORD *)(v31 + 16) = 0;
    *(_QWORD *)(v31 + 24) = 0;
    *(_QWORD *)(v31 + 32) = v31 + 32;
    *(_QWORD *)(v31 + 40) = v31 + 32;
    *(_QWORD *)(v31 + 48) = 0;
    *(_QWORD *)(v31 + 56) = v31 + 56;
    *(_QWORD *)(v31 + 64) = v31 + 56;
    *(_OWORD *)(v31 + 72) = 0u;
    *(_OWORD *)(v31 + 88) = 0u;
    *(_OWORD *)(v31 + 104) = 0u;
    *(_QWORD *)(v31 + 120) = 0;
    v32 = (_OWORD *)MEMORY[0x1E0C83FF0];
    v33 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
    *(_OWORD *)(v31 + 160) = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 32);
    *(_OWORD *)(v31 + 176) = v33;
    v34 = v32[1];
    *(_OWORD *)(v31 + 128) = *v32;
    *(_OWORD *)(v31 + 144) = v34;
    *(_BYTE *)(v31 + 192) = 0;
    std::shared_ptr<SKCRenderSortGroup>::shared_ptr[abi:ne180100]<SKCRenderSortGroup,void>(&v105, v31);
    *(_BYTE *)(v105 + 192) = 1;
    v35 = (jet_command_buffer *)operator new();
    jet_command_buffer::jet_command_buffer(v35, 0xAuLL);
    std::shared_ptr<jet_command_buffer>::shared_ptr[abi:ne180100]<jet_command_buffer,void>(&v103, (uint64_t)v35);
    jet_buffer_pool::commit_data(*v24);
    v36 = v103;
    v37 = *(_QWORD *)(a2 + 136);
    __str.columns[0].i32[0] = 31;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v103 + 8), (int *)&__str);
    v38 = *(_QWORD *)(v36 + 16);
    *(_QWORD *)(v38 - 80) = v37;
    *(_OWORD *)(v38 - 64) = xmmword_1DC921840;
    *(_QWORD *)(v38 - 48) = 0x2300000000;
    v39 = v103;
    std::string::basic_string[abi:ne180100]<0>(&__str, "a_position");
    current_buffer = jet_buffer_pool::get_current_buffer(*v24);
    v120 = 5;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v39 + 8), &v120);
    v41 = *(_QWORD *)(v39 + 16);
    *(_QWORD *)(v41 - 80) = current_buffer;
    std::string::operator=((std::string *)(v41 - 176), (const std::string *)&__str);
    if (__str.columns[1].i8[7] < 0)
      operator delete((void *)__str.columns[0].i64[0]);
    v42 = *(unsigned __int8 *)(a1 + 689);
    v43 = *(_BYTE *)(a1 + 689) == 0;
    v44 = v103;
    v45 = *(_QWORD *)(a2 + 544);
    __str.columns[0].i32[0] = 2;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v103 + 8), (int *)&__str);
    *(_QWORD *)(*(_QWORD *)(v44 + 16) - 80) = v45;
    v46 = v103;
    __str.columns[0].i32[0] = 10;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v103 + 8), (int *)&__str);
    *(_DWORD *)(*(_QWORD *)(v46 + 16) - 64) = v42;
    v47 = v103;
    __str.columns[0].i32[0] = 3;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v103 + 8), (int *)&__str);
    v48 = *(_QWORD *)(v47 + 16);
    *(_QWORD *)(v48 - 64) = 3;
    *(_DWORD *)(v48 - 56) = 6;
    v49 = v103;
    __str.columns[0].i32[0] = 10;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v103 + 8), (int *)&__str);
    *(_DWORD *)(*(_QWORD *)(v49 + 16) - 64) = v43;
    std::shared_ptr<jet_texture>::operator=[abi:ne180100]((_QWORD *)(v105 + 80), &v103);
    v50 = (_QWORD *)v105;
    v51 = *(_QWORD **)(v105 + 16);
    v52 = *(_QWORD *)(v105 + 24);
    if ((unint64_t)v51 >= v52)
    {
      v54 = (void **)(v105 + 8);
      v55 = *(_QWORD *)(v105 + 8);
      v56 = ((uint64_t)v51 - v55) >> 3;
      if ((unint64_t)(v56 + 1) >> 61)
        std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
      v57 = v52 - v55;
      v58 = v57 >> 2;
      if (v57 >> 2 <= (unint64_t)(v56 + 1))
        v58 = v56 + 1;
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
        v59 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v59 = v58;
      if (v59)
        v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v105 + 24, v59);
      else
        v60 = 0;
      v61 = &v60[8 * v56];
      v62 = &v60[8 * v59];
      *(_QWORD *)v61 = *(_QWORD *)(a1 + 568);
      v53 = v61 + 8;
      v64 = (char *)v50[1];
      v63 = (char *)v50[2];
      if (v63 != v64)
      {
        do
        {
          v65 = *((_QWORD *)v63 - 1);
          v63 -= 8;
          *((_QWORD *)v61 - 1) = v65;
          v61 -= 8;
        }
        while (v63 != v64);
        v63 = (char *)*v54;
      }
      v50[1] = v61;
      v50[2] = v53;
      v50[3] = v62;
      if (v63)
        operator delete(v63);
    }
    else
    {
      *v51 = *(_QWORD *)(a1 + 568);
      v53 = v51 + 1;
    }
    v50[2] = v53;
    std::list<std::shared_ptr<SKCRenderSortGroup>>::push_back(a3, &v105);
    v66 = v104;
    if (v104)
    {
      p_shared_owners = (unint64_t *)&v104->__shared_owners_;
      do
        v68 = __ldaxr(p_shared_owners);
      while (__stlxr(v68 - 1, p_shared_owners));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v69 = v106;
    if (v106)
    {
      v70 = (unint64_t *)&v106->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v72 = operator new();
    *(_QWORD *)v72 = &off_1EA4FE720;
    *(_QWORD *)(v72 + 8) = 0;
    *(_QWORD *)(v72 + 16) = 0;
    *(_QWORD *)(v72 + 24) = 0;
    *(_QWORD *)(v72 + 32) = v72 + 32;
    *(_QWORD *)(v72 + 40) = v72 + 32;
    *(_QWORD *)(v72 + 48) = 0;
    *(_QWORD *)(v72 + 56) = v72 + 56;
    *(_QWORD *)(v72 + 64) = v72 + 56;
    *(_OWORD *)(v72 + 72) = 0u;
    *(_OWORD *)(v72 + 88) = 0u;
    *(_OWORD *)(v72 + 104) = 0u;
    *(_QWORD *)(v72 + 120) = 0;
    v73 = v32[3];
    *(_OWORD *)(v72 + 160) = v32[2];
    *(_OWORD *)(v72 + 176) = v73;
    v74 = v32[1];
    *(_OWORD *)(v72 + 128) = *v32;
    *(_OWORD *)(v72 + 144) = v74;
    *(_BYTE *)(v72 + 192) = 0;
    std::shared_ptr<SKCRenderSortGroup>::shared_ptr[abi:ne180100]<SKCRenderSortGroup,void>(&__str, v72);
    v75 = (jet_command_buffer *)operator new();
    jet_command_buffer::jet_command_buffer(v75, 0xAuLL);
    std::shared_ptr<jet_command_buffer>::shared_ptr[abi:ne180100]<jet_command_buffer,void>(&v105, (uint64_t)v75);
    v76 = v105;
    v77 = *(_QWORD *)(a2 + 168);
    LODWORD(v103) = 31;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v105 + 8), (int *)&v103);
    v78 = *(_QWORD *)(v76 + 16);
    *(_QWORD *)(v78 - 80) = v77;
    *(_OWORD *)(v78 - 64) = xmmword_1DC921840;
    *(_QWORD *)(v78 - 48) = 0x210000000FLL;
    v79 = v105;
    v80 = *(_QWORD *)(a2 + 560);
    LODWORD(v103) = 2;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v105 + 8), (int *)&v103);
    *(_QWORD *)(*(_QWORD *)(v79 + 16) - 80) = v80;
    v81 = v105;
    LODWORD(v103) = 10;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v105 + 8), (int *)&v103);
    *(_DWORD *)(*(_QWORD *)(v81 + 16) - 64) = 0;
    std::shared_ptr<jet_texture>::operator=[abi:ne180100]((_QWORD *)(__str.columns[0].i64[0] + 80), &v105);
    v82 = (jet_command_buffer *)operator new();
    jet_command_buffer::jet_command_buffer(v82, 0xAuLL);
    std::shared_ptr<jet_command_buffer>::shared_ptr[abi:ne180100]<jet_command_buffer,void>(&v103, (uint64_t)v82);
    v83 = v103;
    v120 = 2;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v103 + 8), &v120);
    *(_QWORD *)(*(_QWORD *)(v83 + 16) - 80) = 0;
    v84 = v103;
    v85 = *(_QWORD *)(a2 + 168);
    v120 = 31;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v103 + 8), &v120);
    v86 = *(_QWORD *)(v84 + 16);
    *(_QWORD *)(v86 - 80) = v85;
    *(_OWORD *)(v86 - 64) = xmmword_1DC921850;
    *(_QWORD *)(v86 - 48) = 0x30000000FLL;
    std::shared_ptr<jet_texture>::operator=[abi:ne180100]((_QWORD *)(__str.columns[0].i64[0] + 96), &v103);
    SKCNode::addRenderableChildren((char *)a1, a2, __str.columns[0].i64[0] + 8);
    std::list<std::shared_ptr<SKCRenderSortGroup>>::push_back(a3, &__str);
    v87 = v104;
    if (v104)
    {
      v88 = (unint64_t *)&v104->__shared_owners_;
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
      {
        ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
        std::__shared_weak_count::__release_weak(v87);
      }
    }
    v90 = v106;
    if (v106)
    {
      v91 = (unint64_t *)&v106->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    v93 = (std::__shared_weak_count *)__str.columns[0].i64[1];
    if (__str.columns[0].i64[1])
    {
      v94 = (unint64_t *)(__str.columns[0].i64[1] + 8);
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    v96 = (std::__shared_weak_count *)*((_QWORD *)&v118[0] + 1);
    if (*((_QWORD *)&v118[0] + 1))
    {
      v97 = (unint64_t *)(*((_QWORD *)&v118[0] + 1) + 8);
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    _Block_object_dispose(&v108, 8);
  }
}

void sub_1DC87A0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v27 - 224);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void ___ZN11SKCCropNode12addSubGroupsEP13SKCRenderInfoPNSt3__14listINS2_10shared_ptrI18SKCRenderSortGroupEENS2_9allocatorIS6_EEEE_block_invoke(uint64_t a1, char **this)
{
  const simd_float4x4 *v3;
  simd_float4 v4;
  simd_float4 v5;
  simd_float4 v6;
  float32x4_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  simd_float4x4 v12;

  v3 = (const simd_float4x4 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  v12.columns[0] = (simd_float4)SKCNode::getAccumulatedBoundingBox(this);
  v12.columns[1] = v4;
  v12.columns[2] = v5;
  v12.columns[3] = v6;
  v7 = SKCBoundingBoxUnion(v3, &v12);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(float32x4_t *)(v8 + 48) = v7;
  *(_OWORD *)(v8 + 64) = v9;
  *(_OWORD *)(v8 + 80) = v10;
  *(_OWORD *)(v8 + 96) = v11;
}

void SKCCropNode::setForceAlphaMask(SKCNode *this, char a2)
{
  *((_BYTE *)this + 688) = a2;
  SKCNode::setDirty(this);
}

void SKCCropNode::setInvertMask(SKCNode *this, char a2)
{
  *((_BYTE *)this + 689) = a2;
  SKCNode::setDirty(this);
}

void SKCCropNode::~SKCCropNode(SKCCropNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1EA4FE840;
  v2 = *((_QWORD *)this + 71);
  if (v2 && *(SKCCropNode **)(v2 + 80) == this)
    *(_QWORD *)(v2 + 80) = 0;
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 656);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 640);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 624);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 608);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 592);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 576);
  SKCNode::~SKCNode((id *)this);
}

{
  SKCCropNode::~SKCCropNode(this);
  JUMPOUT(0x1DF0CF560);
}

void jet_command_buffer::jet_command_buffer(jet_command_buffer *this, unint64_t a2)
{
  *(_QWORD *)this = off_1EA4FE968;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<jet_render_op>::reserve((uint64_t *)this + 1, a2);
}

void sub_1DC87A340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<jet_render_op>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<jet_render_op>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 6) < a2)
  {
    if (a2 >= 0x155555555555556)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<jet_render_op>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 192 * v6;
    std::vector<jet_render_op>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<jet_render_op>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1DC87A3F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<jet_render_op>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void jet_command_buffer::~jet_command_buffer(jet_command_buffer *this)
{
  void **v1;

  *(_QWORD *)this = off_1EA4FE968;
  v1 = (void **)((char *)this + 8);
  std::vector<jet_render_op>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(_QWORD *)this = off_1EA4FE968;
  v2 = (void **)((char *)this + 8);
  std::vector<jet_render_op>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x1DF0CF560](this, 0xA1C4030951706);
}

void std::vector<jet_render_op>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 192;
      v7 = v4 - 192;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 192;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::shared_ptr<jet_command_buffer>::shared_ptr[abi:ne180100]<jet_command_buffer,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1EA4FE998;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DC87A584(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_command_buffer *,std::shared_ptr<jet_command_buffer>::__shared_ptr_default_delete<jet_command_buffer,jet_command_buffer>,std::allocator<jet_command_buffer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

uint64_t std::__shared_ptr_pointer<jet_command_buffer *,std::shared_ptr<jet_command_buffer>::__shared_ptr_default_delete<jet_command_buffer,jet_command_buffer>,std::allocator<jet_command_buffer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_command_buffer *,std::shared_ptr<jet_command_buffer>::__shared_ptr_default_delete<jet_command_buffer,jet_command_buffer>,std::allocator<jet_command_buffer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1DC87A7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC87A848(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1081C403602C3BFLL);

  _Unwind_Resume(a1);
}

void sub_1DC87A97C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC87AA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC87AB98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC87AEB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC87AF84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC87B058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC87B12C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC87B3A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC87B42C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC87B58C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC87B60C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC87B878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1DC87B974(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC87BB08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1DC87C194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1DC87C610(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC87C700(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC87C8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC87C944(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC87C9E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC87CB70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1DC87CC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC87CDA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t std::deque<SKAction * {__strong}>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 9];
    v7 = (void **)((char *)*v6 + 8 * (v5 & 0x1FF));
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    if (v7 != (void **)v8)
    {
      do
      {
        v9 = *v7++;

        if ((char *)v7 - (_BYTE *)*v6 == 4096)
        {
          v10 = (void **)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (void **)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 256;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_16;
    v13 = 512;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<unsigned int *>::~__split_buffer((uint64_t)a1);
}

id std::deque<SKAction * {__strong}>::push_back(_QWORD *a1, id *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  id result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = ((v5 - v4) << 6) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<SKAction * {__strong}>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = (_QWORD *)(*(_QWORD *)(v4 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF));
  }
  result = *a2;
  *v8 = result;
  ++a1[5];
  return result;
}

void std::deque<SKAction * {__strong}>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned int *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned int *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned int *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned int *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1DC87D2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<SKAction * {__strong}>::pop_back(_QWORD *a1)
{
  unint64_t v2;

  v2 = a1[5] + a1[4] - 1;

  --a1[5];
  return std::deque<SKAction * {__strong}>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<SKAction * {__strong}>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_1DC87D50C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1081C4074C3173BLL);

  _Unwind_Resume(a1);
}

void sub_1DC87D824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC87D980(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC87DB5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC87DD60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC87DF04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC87E090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCAnimate::~SKCAnimate(SKCAnimate *this)
{
  SKCAnimate::~SKCAnimate(this);
  JUMPOUT(0x1DF0CF560);
}

{
  void **v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void **v6;

  *(_QWORD *)this = &off_1EA4FEA70;
  v2 = (void **)((char *)this + 112);
  v3 = *((_QWORD *)this + 14);
  for (i = *((_QWORD *)this + 15); i != v3; i -= 8)
  {
    v5 = *(void **)(i - 8);

  }
  *((_QWORD *)this + 15) = v3;

  v6 = v2;
  std::vector<UITouch * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v6);
  SKCAction::~SKCAction((SKCAction *)this);
}

void SKCAnimate::cpp_updateWithTargetForTime(SKCAction *this, SKCNode *a2, double a3)
{
  float v6;
  void **var0;
  unint64_t v8;
  unint64_t v9;
  SKTexture *v10;
  id *v11;
  id *v12;
  SKTexture *v13;
  __int128 v14;
  void **v15;
  SKTexture *v16;
  double v17;
  double v18;
  __int128 v19;

  SKCAction::cpp_ratioForTime(this, a3);
  var0 = this[1].var0;
  v8 = (uint64_t)(*(_QWORD *)&this[1].var1 - (_QWORD)var0) >> 3;
  v9 = (int)(v6 * (double)v8);
  if (v8 <= v9)
  {
    v10 = 0;
    if (!a2)
      goto LABEL_22;
  }
  else
  {
    v10 = var0[v9];
    if (!a2)
      goto LABEL_22;
  }
  if (v11)
  {
    v12 = v11;
    if (v8 <= v9)
    {
      if (LOBYTE(this[1].var7))
      {
        v13 = *(SKTexture **)&this[1].var5;
        if (BYTE2(this[1].var7))
          SKCSpriteNode::setSecondaryTexture(v11, v13);
        else
          SKCSpriteNode::setPrimaryTexture(v11, v13);
        if (BYTE1(this[1].var7))
        {
          *(double *)&v14 = this[1].var6;
          v19 = v14;
          SKCNode::setSize((uint64_t)v12, &v19);
        }
      }
      else
      {
        v15 = *(void ***)&this[1].var1;
        if (v15 == this[1].var0)
          std::vector<SKTexture * {__strong}>::__throw_out_of_range[abi:ne180100]();
        v16 = *(v15 - 1);

        v10 = v16;
      }
      SKCAction::didFinishWithTargetAtTime(this, a2, a3);
    }
    if (v10)
    {
      if (BYTE2(this[1].var7))
        SKCSpriteNode::setSecondaryTexture(v12, v10);
      else
        SKCSpriteNode::setPrimaryTexture(v12, v10);
      if (BYTE1(this[1].var7))
      {
        -[SKTexture size](v10, "size");
        *(float *)&v17 = v17;
        *(float *)&v18 = v18;
        v19 = __PAIR64__(LODWORD(v18), LODWORD(v17));
        SKCNode::setSize((uint64_t)v12, &v19);
      }
    }
  }
LABEL_22:

}

void sub_1DC87E29C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 SKCAnimate::cpp_wasRemovedFromTargetAtTime(SKCAnimate *this, SKCNode *lpsrc, double a3)
{
  id *v4;
  __n128 result;
  __n128 *v6;
  SKTexture *v7;

  if (lpsrc)
  {
    if (v4)
    {
      if (*((_BYTE *)this + 160))
      {
        v6 = (__n128 *)v4;
        v7 = (SKTexture *)*((_QWORD *)this + 18);
        if (*((_BYTE *)this + 162))
          SKCSpriteNode::setSecondaryTexture(v4, v7);
        else
          SKCSpriteNode::setPrimaryTexture(v4, v7);
        if (*((_BYTE *)this + 161))
        {
          result = v6[21];
          *((_QWORD *)this + 19) = result.n128_u64[0];
        }
      }
    }
  }
  return result;
}

__n128 SKCAnimate::cpp_willStartWithTargetAtTime(SKCAnimate *this, SKCNode *a2, double a3)
{
  __n128 result;
  __n128 *v6;
  __n128 *v7;
  uint64_t v8;

  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  if (a2)
  {
    if (v6)
    {
      if (*((_BYTE *)this + 160))
      {
        v7 = v6;
        v8 = 76;
        if (!*((_BYTE *)this + 162))
          v8 = 75;
        objc_storeStrong((id *)this + 18, (id)v6->n128_u64[v8]);
        if (*((_BYTE *)this + 161))
        {
          result = v7[21];
          *((_QWORD *)this + 19) = result.n128_u64[0];
        }
      }
    }
  }
  return result;
}

void std::vector<SKTexture * {__strong}>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1EA4FD698, MEMORY[0x1E0DE42E0]);
}

void sub_1DC87E47C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void sub_1DC87E59C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1081C40C35AEBB7);

  _Unwind_Resume(a1);
}

void sub_1DC87E6C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DC87EB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1DC87ECAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC87EF20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void SKCAnimateMesh::~SKCAnimateMesh(SKCAnimateMesh *this)
{
  SKCAnimateMesh::~SKCAnimateMesh(this);
  JUMPOUT(0x1DF0CF560);
}

{
  id var21;
  id var20;
  id var19;

  this->var0 = (void **)&off_1EA4FEB08;
  var21 = this->var21;
  this->var21 = 0;

  var20 = this->var20;
  this->var20 = 0;

  var19 = this->var19;
  this->var19 = 0;

  SKCAction::~SKCAction((SKCAction *)this);
}

void SKCAnimateMesh::cpp_updateWithTargetForTime(SKCAnimateMesh *this, id *a2, double a3)
{
  float v6;
  float v7;
  void *v8;
  float v9;
  id v10;

  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  v7 = v6;
  v10 = a2[1];
  if (v10 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    SKCAnimateMesh::meshForRatio(this, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setWarpGeometry:", v8);

  }
  SKCAction::ratioForTime((SKCAction *)this, a3);
  if ((COERCE_UNSIGNED_INT(v9 + -1.0) & 0x60000000) == 0)
    (*((void (**)(SKCAnimateMesh *, id *, double))this->var0 + 13))(this, a2, a3);

}

void sub_1DC87F118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void SKCAnimateMesh::cpp_wasRemovedFromTargetAtTime(SKCAnimateMesh *this, id *a2, double a3)
{
  id v5;

  SKCAction::cpp_wasRemovedFromTargetAtTime((SKCAction *)this, (SKCNode *)a2, a3);
  v5 = a2[1];
  if (v5 && (objc_opt_respondsToSelector() & 1) != 0 && this->var22)
    objc_msgSend(v5, "setWarpGeometry:", this->var21);

}

void sub_1DC87F1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SKCAnimateMesh::cpp_willStartWithTargetAtTime(SKCAnimateMesh *this, id *a2, double a3)
{
  id v5;
  void *v6;
  char v7;
  void *v8;
  id var21;
  void *v10;

  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, a3);
  v5 = a2[1];
  v6 = v5;
  if (v5)
  {
    v10 = v5;
    v7 = objc_opt_respondsToSelector();
    v6 = v10;
    if ((v7 & 1) != 0)
    {
      objc_msgSend(v10, "warpGeometry");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      var21 = this->var21;
      this->var21 = v8;

      v6 = v10;
    }
  }

}

void sub_1DC87F228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SKCAnimateMesh::cpp_didFinishWithTargetAtTime(SKCAnimateMesh *this, id *a2, double a3)
{
  id v5;

  SKCAction::cpp_didFinishWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, a3);
  v5 = a2[1];
  if (v5 && (objc_opt_respondsToSelector() & 1) != 0 && this->var22)
    objc_msgSend(v5, "setWarpGeometry:", this->var21);

}

void sub_1DC87F2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id SKCAnimateMesh::meshForRatio(SKCAnimateMesh *this, float a2)
{
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  int v10;
  int32x2_t v11;
  uint64_t v12;
  float32x2_t v13;
  uint64_t v14;
  float32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x2_t v18;
  uint64_t v19;
  SKWarpGeometryGrid *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  void *__p[3];
  void *v28[3];
  id v29;
  id v30;
  float v31;

  v4 = (void *)MEMORY[0x1DF0CFADC]();
  v31 = 0.0;
  v29 = 0;
  v30 = 0;
  SKCAnimateMesh::choosewarpsForRatio((uint64_t)this, &v30, &v29, &v31, a2);
  v5 = v30;
  v6 = v29;
  v7 = objc_msgSend(v5, "numberOfColumns");
  if (v7 == objc_msgSend(v6, "numberOfColumns")
    && (v8 = objc_msgSend(v5, "numberOfRows"), v8 == objc_msgSend(v6, "numberOfRows")))
  {
    v9 = v31;
    v10 = objc_msgSend(v5, "vertexCount");
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEEC2Em(v28, v10);
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEEC2Em(__p, v10);
    if (v10 >= 1)
    {
      v12 = 0;
      *(float *)v11.i32 = 1.0 - v9;
      v13 = (float32x2_t)vdup_lane_s32(v11, 0);
      v14 = 8 * v10;
      do
      {
        v15 = *(float32x2_t *)(objc_msgSend(v5, "sourcePositions") + v12);
        v16 = objc_msgSend(v6, "sourcePositions");
        *(float32x2_t *)((char *)v28[0] + v12) = vmla_f32(vmul_n_f32(*(float32x2_t *)(v16 + v12), v31), v13, v15);
        v12 += 8;
      }
      while (v14 != v12);
      v17 = 0;
      do
      {
        v18 = *(float32x2_t *)(objc_msgSend(v5, "destPositions") + v17);
        v19 = objc_msgSend(v6, "destPositions");
        *(float32x2_t *)((char *)__p[0] + v17) = vmla_f32(vmul_n_f32(*(float32x2_t *)(v19 + v17), v31), v13, v18);
        v17 += 8;
      }
      while (v14 != v17);
    }
    v20 = [SKWarpGeometryGrid alloc];
    v21 = objc_msgSend(v5, "numberOfColumns");
    v22 = objc_msgSend(v5, "numberOfRows");
    v23 = -[SKWarpGeometryGrid initWithColumns:rows:sourcePositions:destPositions:](v20, "initWithColumns:rows:sourcePositions:destPositions:", v21, v22, v28[0], __p[0]);

    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v28[0])
    {
      v28[1] = v28[0];
      operator delete(v28[0]);
    }
    v24 = 1;
    v25 = (void *)v23;
  }
  else
  {

    v25 = 0;
    v24 = 0;
  }
  objc_autoreleasePoolPop(v4);
  if (v24)
    v6 = v25;

  return v6;
}

void sub_1DC87F53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;
  void *v15;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void SKCAnimateMesh::choosewarpsForRatio(uint64_t a1, _QWORD *a2, _QWORD *a3, float *a4, float a5)
{
  float v10;
  id v11;
  void *v12;
  void *v13;
  float v14;
  float v15;
  int v16;
  int v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  float v22;
  float v23;
  void *v24;
  void *v25;
  float v26;
  float v27;
  uint64_t v28;
  void *v29;
  void *v30;
  float v31;
  uint64_t v32;
  void *v33;
  float v34;
  uint64_t v35;
  void *v36;
  float v37;
  id v38;
  float v39;
  id v40;

  v10 = *(float *)(a1 + 56);
  v11 = *(id *)(a1 + 128);
  objc_msgSend(*(id *)(a1 + 112), "lastObject");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(*(id *)(a1 + 120), "lastObject");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "floatValue");
  v15 = v14;

  v16 = objc_msgSend(*(id *)(a1 + 120), "count");
  v17 = v16;
  v18 = v10 * a5;
  if (v16 < 1)
    goto LABEL_9;
  v19 = 0;
  v20 = v16;
  while (1)
  {
    objc_msgSend(*(id *)(a1 + 120), "objectAtIndexedSubscript:", v19);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "floatValue");
    v23 = v22;

    if (v18 < v23)
      break;
    if (v20 == ++v19)
    {
      LODWORD(v19) = v17;
      break;
    }
  }
  if ((_DWORD)v19)
  {
    v24 = *(void **)(a1 + 120);
    if ((_DWORD)v19 == v17)
    {
      objc_msgSend(v24, "lastObject");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v25, "floatValue");
      v27 = v26;

      objc_msgSend(*(id *)(a1 + 112), "lastObject");
      v28 = objc_claimAutoreleasedReturnValue();
      v29 = v11;
      v11 = (id)v28;
      goto LABEL_12;
    }
    objc_msgSend(v24, "objectAtIndexedSubscript:", (int)v19 - 1);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "floatValue");
    v27 = v34;

    objc_msgSend(*(id *)(a1 + 112), "objectAtIndexedSubscript:", (int)v19 - 1);
    v35 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(*(id *)(a1 + 120), "objectAtIndexedSubscript:", v19);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v36, "floatValue");
    v15 = v37;

    objc_msgSend(*(id *)(a1 + 112), "objectAtIndexedSubscript:", v19);
    v32 = objc_claimAutoreleasedReturnValue();
    v29 = v12;
    v11 = (id)v35;
  }
  else
  {
LABEL_9:
    objc_msgSend(*(id *)(a1 + 120), "objectAtIndexedSubscript:", 0);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "floatValue");
    v15 = v31;

    objc_msgSend(*(id *)(a1 + 112), "objectAtIndexedSubscript:", 0);
    v32 = objc_claimAutoreleasedReturnValue();
    v27 = 0.0;
    v29 = v12;
  }
  v12 = (void *)v32;
LABEL_12:

  v40 = objc_retainAutorelease(v11);
  *a2 = v40;
  v38 = objc_retainAutorelease(v12);
  *a3 = v38;
  v39 = 1.0;
  if ((float)(v15 - v27) > 0.0)
    v39 = (float)(v18 - v27) / (float)(v15 - v27);
  *a4 = v39;

}

void sub_1DC87F7D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEEC2Em(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1DC87F884(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *_ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_1DC87F9B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC87FA80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC87FB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC87FC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC87FC98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC87FCEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC87FD40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC87FE04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC87FF3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8802E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC880604(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC880768(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void SKCAction::SKCAction(SKCAction *this)
{
  this->var0 = (void **)&off_1EA4FEBA0;
  this->var1 = 0;
  *(id *)((char *)&this->var3 + 4) = 0;
  *(_QWORD *)&this->var2 = 0;
  *(id *)((char *)&this->var4 + 1) = 0;
  *(_OWORD *)&this->var6 = xmmword_1DC922160;
  *(_QWORD *)&this->var8 = 0;
  this->var10 = -1.0;
  *(_WORD *)&this->var11 = 0;
  this->var13 = 0;
  this->var14 = 0;
  this->var15 = 0.0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)&this->var16 = _D0;
  this->var18 = 1.0;
}

void SKCAction::SKCAction(SKCAction *this, const SKCAction *a2)
{
  this->var0 = (void **)&off_1EA4FEBA0;
  this->var1 = 0;
  this->var2 = 0.0;
  this->var3 = (id)MEMORY[0x1DF0CFCB0](a2->var3);
  this->var4 = 0;
  this->var5 = 1;
  *(_OWORD *)&this->var6 = *(_OWORD *)&a2->var6;
  *(_QWORD *)&this->var8 = *(_QWORD *)&a2->var8;
  this->var10 = -1.0;
  *(_WORD *)&this->var11 = *(_WORD *)&a2->var11;
  this->var15 = 0.0;
  this->var13 = 0;
  this->var14 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)&this->var16 = _D0;
  this->var18 = 1.0;
}

void SKCAction::~SKCAction(SKCAction *this)
{
  this->var0 = (void **)&off_1EA4FEBA0;

}

{
  this->var0 = (void **)&off_1EA4FEBA0;

}

{
  this->var0 = (void **)&off_1EA4FEBA0;

  JUMPOUT(0x1DF0CF560);
}

void SKCAction::cpp_adjustedTime(SKCAction *this, double a2)
{
  float v2;
  float var2;
  float v4;
  float v5;
  int64_t var14;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float (**var3)(float);

  v2 = a2 - this->var6;
  var2 = this->var2;
  if ((LODWORD(var2) & 0x60000000) != 0)
    v4 = this->var2;
  else
    v4 = 0.000001;
  if (((LODWORD(var2) | LODWORD(v2)) & 0x60000000) == 0)
    v2 = 0.000001;
  v5 = v2 / v4;
  var14 = this->var14;
  if (var14 == 1)
  {
    v9 = fminf(fmaxf(v5, 0.0), 1.0);
    v5 = v9 * (float)(v9 * (float)(2.0 - v9));
  }
  else if (var14 == 2)
  {
    v10 = 1.0 - fminf(fmaxf(v5, 0.0), 1.0);
    v5 = (float)((float)-(float)((float)(2.0 - v10) * v10) * v10) + 1.0;
  }
  else
  {
    v7 = fminf(fmaxf(v5, 0.0), 1.0);
    v8 = v7 * (float)(v7 * (float)((float)(v7 * -2.0) + 3.0));
    if (var14 == 3)
      v5 = v8;
  }
  v11 = fminf(fmaxf(v5, 0.0), 1.0);
  var3 = (float (**)(float))this->var3;
  if (var3)
    fminf(fmaxf(var3[2](v11), 0.0), 1.0);
}

void SKCAction::cpp_ratioForTime(SKCAction *this, double a2)
{
  float v2;
  float var2;
  float v4;
  float v5;
  float var15;
  float var18;
  float v8;
  float v9;
  float v10;
  float v11;
  float (**var3)(float);

  v2 = a2 - this->var6;
  var2 = this->var2;
  v4 = var2;
  if ((LODWORD(var2) & 0x60000000) == 0)
    var2 = 0.000001;
  if (((LODWORD(v4) | LODWORD(v2)) & 0x60000000) == 0)
    v2 = 0.000001;
  v5 = v2 / var2;
  switch(this->var14)
  {
    case 1:
      v8 = fminf(fmaxf(this->var15 + (float)(this->var18 * v5), 0.0), 1.0);
      v9 = 2.0 - v8;
      goto LABEL_11;
    case 2:
      var15 = 1.0;
      v5 = 1.0 - fminf(fmaxf(this->var15 + (float)(this->var18 * v5), 0.0), 1.0);
      var18 = -(float)((float)(2.0 - v5) * v5);
      goto LABEL_9;
    case 3:
      v8 = fminf(fmaxf(this->var15 + (float)(this->var18 * v5), 0.0), 1.0);
      v9 = (float)(v8 * -2.0) + 3.0;
LABEL_11:
      v10 = v8 * (float)(v8 * v9);
      goto LABEL_12;
    default:
      var15 = this->var15;
      var18 = this->var18;
LABEL_9:
      v10 = var15 + (float)(var18 * v5);
LABEL_12:
      v11 = fminf(fmaxf(v10, 0.0), 1.0);
      var3 = (float (**)(float))this->var3;
      if (var3)
        fminf(fmaxf(var3[2](v11), 0.0), 1.0);
      return;
  }
}

uint64_t SKCAction::cpp_reverse(SKCAction *this)
{
  return 0;
}

uint64_t SKCAction::cpp_copy(SKCAction *this)
{
  return 0;
}

void SKCAction::cpp_updateWithTargetForTime(SKCAction *this, SKCNode *a2, double a3)
{
  float v6;

  SKCAction::cpp_ratioForTime(this, a3);
  if ((COERCE_UNSIGNED_INT(v6 + -1.0) & 0x60000000) == 0)
    SKCAction::didFinishWithTargetAtTime(this, a2, a3);
}

SKCAction *SKCAction::didFinishWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  SKCAction *v5;

  v5 = this;
  if (!this->var11)
  {
    this->var11 = 1;
    this = (SKCAction *)this->var13;
    if (this)
      this = (SKCAction *)((uint64_t (*)(void))this->var3)();
  }
  if (v5->var5)
    return (SKCAction *)(*((uint64_t (**)(SKCAction *, SKCNode *, double))v5->var0 + 13))(v5, a2, a3);
  return this;
}

SKCAction *SKCAction::cpp_wasAddedToTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  SKCAction *v3;
  float var8;
  float var9;
  float v6;
  float v7;
  float v8;

  v3 = this;
  this->var11 = 0;
  this->var18 = this->var17 * this->var16;
  var8 = this->var8;
  var9 = this->var9;
  if ((LODWORD(var9) & 0x60000000) != 0)
  {
    v6 = var9 * 0.5;
    v7 = var8 - v6;
    v8 = v6 + var8;
    this = (SKCAction *)rand();
    var8 = v7 + (float)((float)((float)(int)this * 4.6566e-10) * (float)(v8 - v7));
    if (var8 < 0.0)
      var8 = 0.0;
  }
  v3->var2 = var8;
  return this;
}

SKCAction *SKCAction::cpp_wasRemovedFromTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  *(_WORD *)&this->var11 = 1;
  return this;
}

SKCAction *SKCAction::cpp_willStartWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  this->var6 = a3;
  this->var15 = 0.0;
  *(_WORD *)&this->var11 = 256;
  return this;
}

SKCAction *SKCAction::cpp_wasPausedWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  this->var7 = a3;
  return this;
}

double SKCAction::cpp_willResumeWithTargetAtTime(SKCAction *this, SKCNode *a2, double result)
{
  double var7;

  var7 = this->var7;
  if (var7 > 0.0)
  {
    result = result - var7 + this->var6;
    this->var6 = result;
    this->var7 = -1.0;
  }
  return result;
}

SKCAction *SKCAction::cpp_didFinishWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  *(_WORD *)&this->var11 = 1;
  return this;
}

uint64_t SKCAction::reverse(SKCAction *this)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(this->var4, "reversedAction");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "caction");

  return v2;
}

void sub_1DC880DEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SKCAction::copy(SKCAction *this)
{
  void *v1;
  uint64_t v2;

  v1 = (void *)objc_msgSend(this->var4, "copy");
  v2 = objc_msgSend(v1, "caction");

  return v2;
}

void sub_1DC880E30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SKCAction::updateWithTargetForTime(SKCAction *this, SKCNode *a2, double a3)
{
  if (this->var5)
    return (*((uint64_t (**)(SKCAction *, SKCNode *, double))this->var0 + 7))(this, a2, a3);
  else
    return objc_msgSend(this->var4, "updateWithTarget:forTime:", *((_QWORD *)a2 + 1), a3);
}

uint64_t SKCAction::wasAddedToTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  this->var10 = -1.0;
  if (this->var5)
    return (*((uint64_t (**)(SKCAction *, SKCNode *, double))this->var0 + 8))(this, a2, a3);
  else
    return objc_msgSend(this->var4, "wasAddedToTarget:atTime:", *((_QWORD *)a2 + 1), a3);
}

uint64_t SKCAction::wasRemovedFromTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  if (this->var5)
    return (*((uint64_t (**)(SKCAction *, SKCNode *, double))this->var0 + 9))(this, a2, a3);
  else
    return objc_msgSend(this->var4, "wasRemovedFromTarget:atTime:", *((_QWORD *)a2 + 1), a3);
}

uint64_t SKCAction::willStartWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  this->var10 = -1.0;
  if (this->var5)
    return (*((uint64_t (**)(SKCAction *, SKCNode *, double))this->var0 + 10))(this, a2, a3);
  else
    return objc_msgSend(this->var4, "willStartWithTarget:atTime:", *((_QWORD *)a2 + 1), a3);
}

uint64_t SKCAction::wasPausedWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  if (this->var5)
    return (*((uint64_t (**)(SKCAction *, SKCNode *, double))this->var0 + 11))(this, a2, a3);
  else
    return objc_msgSend(this->var4, "wasPausedWithTarget:atTime:", *((_QWORD *)a2 + 1), a3);
}

uint64_t SKCAction::willResumeWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  if (this->var5)
    return (*((uint64_t (**)(SKCAction *, SKCNode *, double))this->var0 + 12))(this, a2, a3);
  else
    return objc_msgSend(this->var4, "willResumeWithTarget:atTime:", *((_QWORD *)a2 + 1), a3);
}

float SKCAction::setSpeed(SKCAction *this, float a2)
{
  double v4;
  double var7;
  double var6;
  float v7;
  float result;

  v4 = skCurrentTime();
  var6 = this->var6;
  var7 = this->var7;
  if (var7 > var6)
  {
    this->var6 = var6 + v4 - var7;
    this->var7 = v4;
  }
  SKCAction::cpp_ratioForTime(this, v4);
  this->var15 = v7;
  this->var6 = v4;
  result = this->var16 * a2;
  this->var17 = a2;
  this->var18 = result;
  return result;
}

float SKCAction::setBaseSpeed(SKCAction *this, float a2)
{
  double v4;
  double var7;
  double var6;
  float v7;
  float result;

  v4 = skCurrentTime();
  var6 = this->var6;
  var7 = this->var7;
  if (var7 > var6)
  {
    this->var6 = var6 + v4 - var7;
    this->var7 = v4;
  }
  SKCAction::cpp_ratioForTime(this, v4);
  this->var6 = v4;
  this->var15 = v7;
  this->var16 = a2;
  result = this->var17 * a2;
  this->var18 = result;
  return result;
}

double SKCAction::finishTime(SKCAction *this)
{
  double result;

  result = this->var10;
  if (result < 0.0)
    return this->var6 + (float)(this->var2 * (float)((float)(1.0 - this->var15) / this->var18));
  return result;
}

void sub_1DC88110C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1081C4060FE593ELL);

  _Unwind_Resume(a1);
}

void sub_1DC881390(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8815AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC881668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8816F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCColorize::SKCColorize(SKCColorize *this, SKCAction *a2)
{
  uint64_t v3;

  SKCAction::SKCAction((SKCAction *)this);
  *(_QWORD *)v3 = &off_1EA4FEC30;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(_QWORD *)(v3 + 56) = *(_QWORD *)&a2->var8;
  *(_QWORD *)(v3 + 88) = a2->var14;
  *(_BYTE *)(v3 + 32) = 1;
}

void SKCColorize::~SKCColorize(SKCColorize *this)
{
  SKCAction::~SKCAction((SKCAction *)this);
  JUMPOUT(0x1DF0CF560);
}

void SKCColorize::cpp_updateWithTargetForTime(SKCColorize *this, float32x4_t *a2, double a3)
{
  float v6;
  float v7;
  void (*v8)(float32x4_t *, float32x4_t *);
  float v9;
  float var2;
  float v11;
  float32x4_t v12;
  float v13;
  float32x4_t v14;

  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  v7 = v6;
  v13 = v6;
  if (!BYTE4(this[1].var3))
  {
    v8 = *(void (**)(float32x4_t *, float32x4_t *))(a2->i64[0] + 184);
    v12 = vmlaq_n_f32(vnegq_f32(*(float32x4_t *)&this->var21.var3), *(float32x4_t *)&this[1].var0, v6);
    v14 = vaddq_f32(v12, a2[19]);
    v8(a2, &v14);
    v7 = v13;
    *(float32x4_t *)&this->var21.var3 = vaddq_f32(v12, *(float32x4_t *)&this->var21.var3);
  }
  v9 = *(float *)&this[1].var3;
  if ((LODWORD(v9) & 0x60000000) != 0)
  {
    var2 = this->var23.var2;
    v11 = -(float)(var2 - (float)(v7 * v9));
    v14.f32[0] = a2[20].f32[0] - (float)(var2 - (float)(v7 * v9));
    (*(void (**)(float32x4_t *, float32x4_t *))(a2->i64[0] + 192))(a2, &v14);
    v7 = v13;
    this->var23.var2 = v11 + this->var23.var2;
  }
  if ((COERCE_UNSIGNED_INT(v7 + -1.0) & 0x60000000) == 0)
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, a3);
}

float32x4_t SKCColorize::cpp_willStartWithTargetAtTime(SKCColorize *this, float32x4_t *a2, double a3)
{
  float32x4_t result;

  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, a3);
  this->var23.var2 = 0.0;
  *(_QWORD *)&this->var21.var3 = 0;
  *(_QWORD *)&this->var23.var0 = 0;
  *(float *)&this[1].var3 = this->var20 - a2[20].f32[0];
  result = vsubq_f32((float32x4_t)this->var19, a2[19]);
  *(float32x4_t *)&this[1].var0 = result;
  return result;
}

void sub_1DC881ADC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1081C40AE107041);

  _Unwind_Resume(a1);
}

void sub_1DC881D04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC881EA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC881F44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC881FB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC88201C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC882088(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC882110(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCFade::~SKCFade(SKCFade *this)
{
  SKCAction::~SKCAction((SKCAction *)this);
  JUMPOUT(0x1DF0CF560);
}

void SKCFade::cpp_updateWithTargetForTime(SKCFade *this, SKCNode *a2, double a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  v7 = v6;
  if (this->var22)
  {
    v8 = v6 * this->var19;
    v10 = v8 + (float)(*((float *)a2 + 81) - this->var21);
    SKCNode::setAlpha(a2, &v10);
    this->var21 = v8;
  }
  else
  {
    v9 = (float)(v6 * this->var19) + (float)(this->var21 * (float)(1.0 - v6));
    SKCNode::setAlpha(a2, &v9);
  }
  if ((COERCE_UNSIGNED_INT(v7 + -1.0) & 0x60000000) == 0)
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, a2, a3);
}

SKCAction *SKCFade::cpp_willStartWithTargetAtTime(SKCFade *this, SKCNode *a2, double a3)
{
  SKCAction *result;
  float v6;

  result = SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  v6 = 0.0;
  if (!this->var22)
    v6 = *((float *)a2 + 81);
  this->var21 = v6;
  return result;
}

void sub_1DC8823AC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x10A1C40D98AE659);

  _Unwind_Resume(a1);
}

void sub_1DC882648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_QWORD *SKCGroup::addCAction(_QWORD *this, SKCAction *a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a2)
  {
    v3 = this;
    ++a2->var1;
    this = operator new(0x18uLL);
    v4 = v3[14];
    v3 += 14;
    this[1] = v3;
    this[2] = a2;
    *this = v4;
    *(_QWORD *)(v4 + 8) = this;
    *v3 = this;
    ++v3[2];
  }
  return this;
}

void sub_1DC88277C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC882A34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC882B30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC882CA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC882E04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCGroup::~SKCGroup(SKCAction *this)
{
  SKCGroup::~SKCGroup(this);
  JUMPOUT(0x1DF0CF560);
}

{
  SKCAction *v2;
  SKCAction *i;
  _DWORD *var3;
  int v5;
  BOOL v6;

  this->var0 = (void **)&off_1EA4FED60;
  v2 = this + 1;
  for (i = *(SKCAction **)&this[1].var1; i != v2; i = *(SKCAction **)&i->var1)
  {
    var3 = i->var3;
    v5 = var3[2] - 1;
    var3[2] = v5;
    if (var3)
      v6 = v5 == 0;
    else
      v6 = 0;
    if (v6)
      (*(void (**)(_DWORD *))(*(_QWORD *)var3 + 8))(var3);
  }
  std::__list_imp<SKCRenderSortInfo *>::clear(v2);
  std::__list_imp<SKCRenderSortInfo *>::clear(v2);
  SKCAction::~SKCAction(this);
}

void SKCGroup::setBaseSpeed(SKCAction *this, float a2)
{
  uint64_t v3;
  float v4;

  SKCAction::setBaseSpeed(this, a2);
  v3 = *(_QWORD *)&this[1].var1;
  if ((SKCAction *)v3 != &this[1])
  {
    v4 = this->var16 * this->var17;
    do
    {
      (*(void (**)(_QWORD, float))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), v4);
      v3 = *(_QWORD *)(v3 + 8);
    }
    while ((SKCAction *)v3 != &this[1]);
  }
}

void SKCGroup::setSpeed(SKCAction *this, float a2)
{
  uint64_t v3;
  float v4;

  SKCAction::setSpeed(this, a2);
  v3 = *(_QWORD *)&this[1].var1;
  if ((SKCAction *)v3 != &this[1])
  {
    v4 = this->var16 * this->var17;
    do
    {
      (*(void (**)(_QWORD, float))(**(_QWORD **)(v3 + 16) + 40))(*(_QWORD *)(v3 + 16), v4);
      v3 = *(_QWORD *)(v3 + 8);
    }
    while ((SKCAction *)v3 != &this[1]);
  }
}

uint64_t SKCGroup::cpp_updateWithTargetForTime(SKCAction *this, SKCNode *a2, double a3)
{
  double v5;
  double v6;
  SKCAction *v7;
  int v8;
  SKCAction *var3;
  uint64_t result;

  SKCAction::cpp_adjustedTime(this, a3);
  v6 = v5;
  v7 = *(SKCAction **)&this[1].var1;
  if (v7 == &this[1])
    return (uint64_t)SKCAction::didFinishWithTargetAtTime(this, a2, v6);
  v8 = 1;
  do
  {
    var3 = (SKCAction *)v7->var3;
    if (var3->var5)
    {
      if (var3->var11)
        goto LABEL_6;
LABEL_5:
      SKCAction::updateWithTargetForTime(var3, a2, v6);
      goto LABEL_6;
    }
    if ((objc_msgSend(var3->var4, "finished") & 1) == 0)
      goto LABEL_5;
LABEL_6:
    if (var3->var5)
      result = var3->var11;
    else
      result = objc_msgSend(var3->var4, "finished");
    v8 &= result;
    v7 = *(SKCAction **)&v7->var1;
  }
  while (v7 != &this[1]);
  if (v8)
    return (uint64_t)SKCAction::didFinishWithTargetAtTime(this, a2, v6);
  return result;
}

SKCAction *SKCGroup::cpp_wasAddedToTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  SKCAction *result;
  char *v7;
  uint64_t i;

  result = SKCAction::cpp_wasAddedToTargetAtTime(this, a2, a3);
  v7 = (char *)&this[1];
  for (i = *(_QWORD *)&this[1].var1; (char *)i != v7; i = *(_QWORD *)(i + 8))
    result = (SKCAction *)SKCAction::wasAddedToTargetAtTime(*(SKCAction **)(i + 16), a2, a3);
  return result;
}

void SKCGroup::cpp_wasRemovedFromTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  double v6;
  char *v7;
  uint64_t v8;
  double v9;

  SKCAction::cpp_wasRemovedFromTargetAtTime(this, a2, a3);
  SKCAction::cpp_adjustedTime(this, a3);
  v7 = (char *)&this[1];
  v8 = *(_QWORD *)&this[1].var1;
  if ((char *)v8 != v7)
  {
    v9 = v6;
    do
    {
      SKCAction::wasRemovedFromTargetAtTime(*(SKCAction **)(v8 + 16), a2, v9);
      v8 = *(_QWORD *)(v8 + 8);
    }
    while ((char *)v8 != v7);
  }
}

void SKCGroup::cpp_willStartWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  double v6;
  char *v7;
  uint64_t v8;
  double v9;

  SKCAction::cpp_willStartWithTargetAtTime(this, a2, a3);
  SKCAction::cpp_adjustedTime(this, a3);
  v7 = (char *)&this[1];
  v8 = *(_QWORD *)&this[1].var1;
  if ((char *)v8 != v7)
  {
    v9 = v6;
    do
    {
      SKCAction::willStartWithTargetAtTime(*(SKCAction **)(v8 + 16), a2, v9);
      v8 = *(_QWORD *)(v8 + 8);
    }
    while ((char *)v8 != v7);
  }
}

void SKCGroup::cpp_wasPausedWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  double v6;
  char *v7;
  uint64_t v8;
  double v9;

  SKCAction::cpp_wasPausedWithTargetAtTime(this, a2, a3);
  SKCAction::cpp_adjustedTime(this, a3);
  v7 = (char *)&this[1];
  v8 = *(_QWORD *)&this[1].var1;
  if ((char *)v8 != v7)
  {
    v9 = v6;
    do
    {
      SKCAction::wasPausedWithTargetAtTime(*(SKCAction **)(v8 + 16), a2, v9);
      v8 = *(_QWORD *)(v8 + 8);
    }
    while ((char *)v8 != v7);
  }
}

void SKCGroup::cpp_willResumeWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  double v6;
  char *v7;
  uint64_t v8;
  double v9;

  SKCAction::cpp_willResumeWithTargetAtTime(this, a2, a3);
  SKCAction::cpp_adjustedTime(this, a3);
  v7 = (char *)&this[1];
  v8 = *(_QWORD *)&this[1].var1;
  if ((char *)v8 != v7)
  {
    v9 = v6;
    do
    {
      SKCAction::willResumeWithTargetAtTime(*(SKCAction **)(v8 + 16), a2, v9);
      v8 = *(_QWORD *)(v8 + 8);
    }
    while ((char *)v8 != v7);
  }
}

void sub_1DC8833D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0CF560](v1, 0x10A1C40007774FCLL);
  _Unwind_Resume(a1);
}

void sub_1DC883488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC883528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC88360C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8836CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC883930(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC883A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC883C7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC883F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1DC883FC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC884264(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

__n128 createV3fFromData(NSData *a1)
{
  NSData *v1;
  NSData *v2;
  NSData *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  __int128 v11;
  __int128 v12;

  v1 = a1;
  v2 = v1;
  v11 = 0u;
  if (v1)
  {
    v3 = objc_retainAutorelease(v1);
    v4 = -[NSData bytes](v3, "bytes");
    v5 = -[NSData length](v3, "length") >> 2;
    if ((_DWORD)v5)
    {
      if ((int)v5 < 1)
      {
        v9 = 0uLL;
      }
      else
      {
        v6 = 0;
        if ((int)v5 >= 3)
          v5 = 3;
        else
          v5 = v5;
        v7 = 0uLL;
        do
        {
          v8 = bswap32(*(_DWORD *)(v4 + 4 * v6));
          v12 = v7;
          *(_DWORD *)((unint64_t)&v12 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3))) = v8;
          v9 = v12;
          HIDWORD(v9) = HIDWORD(v7);
          ++v6;
          v7 = v9;
        }
        while (v5 != v6);
      }
      v11 = v9;
    }
  }

  return (__n128)v11;
}

void sub_1DC884374(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC88463C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v4;

  _Unwind_Resume(a1);
}

void sub_1DC8848AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8849E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC884B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC884E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1DC884F50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC884FA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC884FF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC885064(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8850C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC885170(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8852A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC885340(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC88545C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8854F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC885610(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8856A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8857C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC88585C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC88597C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC885A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC885AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC885B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC885C40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC885D1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC885E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC885F30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC886008(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC886124(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8861BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8862D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC886370(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC88648C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC886524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC886640(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8866D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC886818(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1081C40F5A01273);

  _Unwind_Resume(a1);
}

void sub_1DC886BE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC886EEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC886FBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC887054(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8870D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC887158(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8871D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC88725C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCMove::SKCMove(SKCMove *this, SKCAction *a2)
{
  uint64_t v3;

  SKCAction::SKCAction((SKCAction *)this);
  *(_QWORD *)v3 = &off_1EA4FEE08;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(_QWORD *)(v3 + 56) = *(_QWORD *)&a2->var8;
  *(_QWORD *)(v3 + 88) = a2->var14;
  *(_BYTE *)(v3 + 32) = 1;
}

void SKCMove::~SKCMove(SKCMove *this)
{
  SKCAction::~SKCAction((SKCAction *)this);
  JUMPOUT(0x1DF0CF560);
}

void SKCMove::cpp_updateWithTargetForTime(SKCMove *this, __n128 *a2, double a3)
{
  float v6;
  float v7;
  __n128 v8;
  float v9;
  float v10;
  float v11;
  __n128 v12;
  float v13;
  __n128 Translation;

  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  v7 = v6;
  Translation = SKCNode::getTranslation(a2);
  v8 = SKCNode::getTranslation(a2);
  v9 = v8.n128_f32[1];
  if (this->var24)
  {
    v10 = v7 - this->var19;
    if (this->var25)
    {
      v11 = v10 * this->var21.var0;
      v12 = Translation;
      v12.n128_f32[0] = Translation.n128_f32[0] + v11;
      this->var20.var0 = this->var20.var0 - v11;
    }
    else
    {
      v12 = Translation;
    }
    if (this->var26)
    {
      v13 = v10 * this->var21.var1;
      v9 = v9 + v13;
      this->var20.var1 = this->var20.var1 - v13;
    }
  }
  else
  {
    if (this->var23)
      goto LABEL_13;
    v12 = Translation;
    if (this->var25)
      v12.n128_f32[0] = (float)(v7 * this->var21.var0) + (float)(this->var20.var0 * (float)(1.0 - v7));
    if (this->var26)
      v9 = (float)(v7 * this->var21.var1) + (float)(this->var20.var1 * (float)(1.0 - v7));
  }
  Translation = v12;
  SKCNode::setTranslation((SKCNode *)a2, v12, v9);
LABEL_13:
  this->var19 = v7;
  if ((COERCE_UNSIGNED_INT(v7 + -1.0) & 0x60000000) == 0)
  {
    if (this->var24)
    {
      v8.n128_f32[0] = Translation.n128_f32[0] + this->var20.var0;
      SKCNode::setTranslation((SKCNode *)a2, v8, v9 + this->var20.var1);
      this->var20.var0 = 0.0;
      this->var20.var1 = 0.0;
    }
    else if (!this->var23)
    {
      SKCNode::getTranslation(a2);
      SKCNode::getTranslation(a2);
      SKCNode::setTranslation((SKCNode *)a2, Translation, v9);
    }
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, a3);
  }
}

void SKCMove::cpp_willStartWithTargetAtTime(SKCMove *this, SKCNode *a2, double a3)
{
  unsigned __int32 v5;

  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  this->var19 = 0.0;
  if (a2
  {
    NSLog(CFSTR("SKScene: Animating the position of a SKScene has no effect."));
  }
  if (this->var24)
  {
    this->var20 = this->var21;
  }
  else
  {
    v5 = SKCNode::getTranslation((__n128 *)a2).n128_u32[0];
    this->var20 = ($94F468A8D4C62B317260615823C2B210)__PAIR64__(SKCNode::getTranslation((__n128 *)a2).n128_u32[1], v5);
  }
}

void SKCAudioNode::SKCAudioNode(SKCAudioNode *this)
{
  uint64_t v1;

  SKCNode::SKCNode(this);
  *(_QWORD *)v1 = off_1EA4FEEB0;
  *(_OWORD *)(v1 + 560) = 0u;
  *(_OWORD *)(v1 + 576) = 0u;
  *(_WORD *)(v1 + 592) = 257;
}

void SKCAudioNode::update(id *this, double a2, float a3)
{
  double v4;
  double v5;
  __int128 v6;

  SKCNode::update((SKCNode *)this, a2, 1.0);
  if (*((_BYTE *)this + 593))
  {
    if (this[73])
    {
      v6 = 0uLL;
      SKCNode::resolveWorldPositionRotationAndScale(this, &v6, 0, 0);
      LODWORD(v4) = DWORD1(v6);
      LODWORD(v5) = 0;
      objc_msgSend(this[73], "setPosition:", *(double *)&v6, v4, v5);
    }
  }
}

BOOL SKCAudioNode::getNeedsUpdate(SKCAudioNode *this)
{
  if (SKCNode::getNeedsUpdate(this))
    return 1;
  if (*((_BYTE *)this + 172))
    return 0;
  return (*((_BYTE *)this + 171) & 0x60) != 0;
}

void SKCAudioNode::setPaused(id *this, char a2)
{
  id v3;
  void *v4;
  int v5;

  SKCNode::setPaused((SKCNode *)this, a2);
  if (*((_BYTE *)this + 592))
  {
    v3 = this[73];
    if (v3)
    {
      objc_msgSend(v3, "engine");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "isRunning");

      if (v5)
        objc_msgSend(this[73], "play");
    }
  }
}

void sub_1DC8877A0(void *a1, int a2)
{
  void *v2;
  id v5;
  void *v6;

  v5 = objc_begin_catch(a1);
  if (a2 == 2)
  {
    objc_msgSend(v5, "reason");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    NSLog(CFSTR("%@"), v6);

  }
  objc_end_catch();
}

void sub_1DC8877FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_end_catch();
  _Unwind_Resume(a1);
}

void SKCAudioNode::~SKCAudioNode(id *this)
{

  SKCNode::~SKCNode(this);
}

{
  SKCAudioNode::~SKCAudioNode(this);
  JUMPOUT(0x1DF0CF560);
}

void sub_1DC887998(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC887AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_1DC887B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC887BC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCTileMapNode::SKCTileMapNode(SKCTileMapNode *this)
{
  uint64_t v1;

  SKCNode::SKCNode(this);
  *(_QWORD *)v1 = off_1EA4FEFD8;
  *(_DWORD *)(v1 + 560) = 0;
  *(_BYTE *)(v1 + 564) = 1;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_QWORD *)(v1 + 600) = 1065353216;
  *(_DWORD *)(v1 + 608) = 0;
  *(_WORD *)(v1 + 612) = 8224;
  *(_OWORD *)(v1 + 616) = xmmword_1DC922220;
  *(_QWORD *)(v1 + 632) = -1;
  *(_QWORD *)(v1 + 656) = 0;
  *(_QWORD *)(v1 + 648) = 0;
  *(_QWORD *)(v1 + 640) = v1 + 648;
}

void SKCTileMapNode::~SKCTileMapNode(SKCTileMapNode *this)
{
  char *v2;
  _QWORD *v3;
  _OWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  *(_QWORD *)this = off_1EA4FEFD8;
  v2 = (char *)this + 640;
  v3 = (_QWORD *)*((_QWORD *)this + 80);
  v4 = (_OWORD *)((char *)this + 648);
  if (v3 != (_QWORD *)((char *)this + 648))
  {
    do
    {
      free(*(void **)(v3[5] + 192));
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != (_QWORD *)v4);
  }
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy((uint64_t)v2, *((_QWORD **)this + 81));
  *((_QWORD *)this + 80) = v4;
  *v4 = 0u;
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy((uint64_t)v2, 0);

  SKCNode::~SKCNode((id *)this);
}

{
  SKCTileMapNode::~SKCTileMapNode(this);
  JUMPOUT(0x1DF0CF560);
}

double SKCTileMapNode::getBatchInfo@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 12) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_QWORD *)&result = 0x300000000;
  *(_QWORD *)(a1 + 4) = 0x300000000;
  *(_BYTE *)a1 = 1;
  return result;
}

BOOL SKCTileMapNode::getNeedsCustomRenderOps(uint64_t a1)
{
  return *(_DWORD *)(a1 + 616) != 0;
}

uint64_t SKCTileMapNode::getMaxBatchRenderElementCount()
{
  return 0;
}

double SKCTileMapNode::getBoundingBox(float32x4_t *this)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  __int128 v9;
  float v10;
  __int128 v11;
  _OWORD v13[4];
  __int128 v14;

  (*(void (**)(float32x4_t *))(this->i64[0] + 104))(this);
  v6 = 0;
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  v8 = this[21];
  v7.i64[0] = vmulq_f32(vsubq_f32(v7, this[22]), v8).u64[0];
  v9 = xmmword_1DC9223B0;
  v7.i64[1] = *((_QWORD *)&SKCBoundingBoxEmpty + 1);
  *(float *)&v9 = 0.5 * v8.f32[0];
  v10 = vmuls_lane_f32(0.5, *(float32x2_t *)v8.f32, 1);
  v11 = xmmword_1DC9223C0;
  *((float *)&v11 + 1) = v10;
  v13[0] = v7;
  v13[1] = v9;
  v13[2] = v11;
  v13[3] = xmmword_1DC9223D0;
  do
  {
    *(__int128 *)((char *)&v14 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v2, COERCE_FLOAT(v13[v6])), v3, *(float32x2_t *)&v13[v6], 1), v4, (float32x4_t)v13[v6], 2), v5, (float32x4_t)v13[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  return *(double *)&v14;
}

void SKCTileMapNode::update(id *this, double a2, float a3)
{
  float v6;
  id v7;
  void *v8;
  float v9;
  float v10;
  SKCTileMapNode *v11;
  float v12;
  uint64_t v13;
  uint64_t **v14;
  unint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  double v22;
  void *v23;
  unsigned __int16 v24;
  double v25;
  double v26;
  float v27;
  float v28;
  double v29;
  int v30;
  double v31;
  unsigned int v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  BOOL v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  SKCTileMapNode *v42;
  SKCTileMapNode *v43;
  BOOL v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;

  SKCNode::update((SKCNode *)this, a2, a3);
  if (!*((_BYTE *)this + 172))
  {
    v6 = *((float *)this + 42);
    v7 = this[1];
    objc_msgSend(v7, "tileSet");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      v9 = *((float *)this + 81);
      v10 = *((float *)this + 150);
      if (v9 != v10)
        *((float *)this + 150) = v9;
      v11 = (SKCTileMapNode *)this[80];
      if (v11 != (SKCTileMapNode *)(this + 81))
      {
        v12 = v6 * a3;
        while (1)
        {
          v13 = *((_QWORD *)v11 + 5);
          if ((*(_BYTE *)(v13 + 4) & 4) != 0 && *(_DWORD *)(v13 + 8))
          {
            if (v9 != v10)
              *(_BYTE *)(v13 + 4) |= 1u;
            v14 = *(uint64_t ***)(v13 + 168);
            if (v14)
              break;
          }
LABEL_39:
          v42 = (SKCTileMapNode *)*((_QWORD *)v11 + 1);
          if (v42)
          {
            do
            {
              v43 = v42;
              v42 = *(SKCTileMapNode **)v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              v43 = (SKCTileMapNode *)*((_QWORD *)v11 + 2);
              v44 = *(_QWORD *)v43 == (_QWORD)v11;
              v11 = v43;
            }
            while (!v44);
          }
          v11 = v43;
          if (v43 == (SKCTileMapNode *)(this + 81))
            goto LABEL_45;
        }
        while (1)
        {
          v15 = *((unsigned __int16 *)v14 + 8);
          objc_msgSend(v7, "tileSet");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "tileDefinitions");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = objc_msgSend(v17, "count");

          if (v18 > v15)
            break;
LABEL_35:
          v14 = (uint64_t **)*v14;
          if (!v14)
            goto LABEL_39;
        }
        objc_msgSend(v7, "tileSet");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v19, "tileDefinitions");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "objectAtIndexedSubscript:", v15);
        v21 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v21, "lastTargetTime");
        if (a2 - v22 < 0.00000011920929)
        {
          if (objc_msgSend(v21, "frameDidChange"))
          {
            SKCNode::setDirty((SKCNode *)this);
            *(_BYTE *)(v13 + 4) |= 2u;
            if (objc_msgSend(v21, "nextFrameAffectsVertexBuffer"))
              *(_BYTE *)(v13 + 4) |= 1u;
          }
          goto LABEL_34;
        }
        objc_msgSend(v21, "setFrameDidChange:", 0);
        objc_msgSend(v21, "textures");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        v24 = objc_msgSend(v23, "count");

        objc_msgSend(v21, "lastTargetTime");
        v26 = v25;
        objc_msgSend(v21, "setLastTargetTime:", a2);
        objc_msgSend(v21, "currentFrameTime");
        v27 = a2 - v26;
        *(float *)&v29 = v28 + (float)(v27 * v12);
        objc_msgSend(v21, "setCurrentFrameTime:", v29);
        objc_msgSend(v21, "currentFrameTime");
        LODWORD(v26) = v30;
        objc_msgSend(v21, "timePerFrame");
        if (v31 >= *(float *)&v26)
        {
LABEL_34:

          goto LABEL_35;
        }
        LODWORD(v31) = 0;
        objc_msgSend(v21, "setCurrentFrameTime:", v31);
        v32 = objc_msgSend(v21, "currentFrameIndex");
        objc_msgSend(v21, "setCurrentFrameIndex:", (objc_msgSend(v21, "currentFrameIndex") + 1) % v24);
        objc_msgSend(v21, "setFrameDidChange:", 1);
        SKCNode::setDirty((SKCNode *)this);
        *(_BYTE *)(v13 + 4) |= 2u;
        objc_msgSend(v21, "setNextFrameAffectsVertexBuffer:", 0);
        objc_msgSend(v21, "textures");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v33, "objectAtIndexedSubscript:", v32);
        v34 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v21, "textures");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "objectAtIndexedSubscript:", objc_msgSend(v21, "currentFrameIndex"));
        v36 = (void *)objc_claimAutoreleasedReturnValue();

        if (v34)
        {
          objc_msgSend(v34, "_backingTexture");
          if (v36)
          {
LABEL_20:
            objc_msgSend(v36, "_backingTexture");
            v37 = v47 == v45;
            if (v46)
            {
              p_shared_owners = (unint64_t *)&v46->__shared_owners_;
              do
                v39 = __ldaxr(p_shared_owners);
              while (__stlxr(v39 - 1, p_shared_owners));
              if (!v39)
              {
                ((void (*)())v46->__on_zero_shared)();
                std::__shared_weak_count::__release_weak(v46);
              }
            }
            if (!v48)
              goto LABEL_31;
LABEL_27:
            v40 = (unint64_t *)&v48->__shared_owners_;
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
              if (v37)
                goto LABEL_33;
            }
            else
            {
LABEL_31:
              if (v37)
              {
LABEL_33:

                goto LABEL_34;
              }
            }
            objc_msgSend(v21, "setNextFrameAffectsVertexBuffer:", 1);
            *(_BYTE *)(v13 + 4) |= 1u;
            goto LABEL_33;
          }
        }
        else
        {
          v47 = 0;
          v48 = 0;
          if (v36)
            goto LABEL_20;
        }
        v37 = v47 == 0;
        goto LABEL_27;
      }
    }
LABEL_45:

  }
}

void sub_1DC888318(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL SKCTileMapNode::getNeedsUpdate(SKCTileMapNode *this)
{
  return SKCNode::getNeedsUpdate(this) || *((_DWORD *)this + 155) != 0;
}

uint64_t SKCTileMapNode::addBatchRenderElements()
{
  return 0;
}

uint64_t SKCTileMapNode::canAppendToCurrentBatch()
{
  return 0;
}

void SKCTileMapNode::addRenderOps(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int RenderData;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  const float *v16;
  unsigned __int8 v17;
  float v18;
  float v19;
  void *v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  __int128 v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int BackingBlendMode;
  uint64_t v31;
  float v32;
  uint64_t v33;
  unsigned int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t **i;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t *v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t current_buffer;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  BOOL v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *p_shared_owners;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t *v120;
  char **v121;
  uint64_t v122;
  uint64_t *v123;
  float32x4x4_t v124;
  uint64_t *v125;
  __int128 v126;
  __int128 *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  __int128 v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  __int128 v133;
  std::string __str;
  uint64_t v135;
  std::__shared_weak_count *v136;
  __int128 v137;
  int v138[3];
  float32x4x4_t v139;

  RenderData = SKCTileMapNode::_generateRenderData((id *)a1, (SKCRenderInfo *)a2);
  if (!RenderData)
    return;
  v7 = (6 * RenderData) | 1u;
  v8 = *(_QWORD *)(a2 + 416);
  if (!v8 || *(_DWORD *)(v8 + 48) < v7)
  {
    SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &__str);
    v9 = (*(uint64_t (**)(std::string::size_type, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)__str.__r_.__value_.__l.__data_
                                                                                              + 8))(__str.__r_.__value_.__r.__words[0], 4, 1, v7, 0);
    std::shared_ptr<jet_buffer>::shared_ptr[abi:ne180100]<jet_buffer,void>(&v137, v9);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a2 + 416, &v137);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
    if (*((_QWORD *)&v137 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    SKCRendererGenerateQuadIndexBufferData<unsigned int>((unsigned int **)(a2 + 416));
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a2 + 416) + 24))(*(_QWORD *)(a2 + 416), 0, 0);
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  v16 = (const float *)(a2 + 32);
  v139 = vld4q_f32(v16);
  v124 = v139;
  if (*(_QWORD *)(a1 + 568))
  {
    if ((v17 & 1) == 0
    {
      SKCTileMapNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime = skCurrentTime();
    }
    v18 = skCurrentTime()
        - *(double *)&SKCTileMapNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime;
    v19 = fmodf(v18, 43200.0);
    v20 = *(void **)(a1 + 568);
    v137 = 0uLL;
    if (v20)
    {
      objc_msgSend(v20, "_backingProgramWithTransform");
      v21 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      if (!__str.__r_.__value_.__l.__size_)
        goto LABEL_21;
      v22 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v21 + 1) + 16))(*((_QWORD *)&v21 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v21 + 1));
        if ((_QWORD)v21)
          goto LABEL_22;
      }
      else
      {
LABEL_21:
        if ((_QWORD)v21)
        {
LABEL_22:
          v24 = *(void **)(a1 + 568);
          if (v24)
          {
            objc_msgSend(v24, "_backingProgramWithTransform");
            v25 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
          }
          else
          {
            v25 = 0uLL;
          }
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
          v112 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
          v137 = v25;
          if (v112)
          {
            p_shared_owners = (unint64_t *)&v112->__shared_owners_;
            do
              v114 = __ldaxr(p_shared_owners);
            while (__stlxr(v114 - 1, p_shared_owners));
            if (!v114)
            {
              ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
              std::__shared_weak_count::__release_weak(v112);
            }
          }
          v115 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
          if (__str.__r_.__value_.__l.__size_)
          {
            v116 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
              std::__shared_weak_count::__release_weak(v115);
            }
          }
          goto LABEL_29;
        }
      }
    }
  }
  else
  {
    v137 = 0uLL;
    v19 = 0.0;
  }
  v26 = *(_DWORD *)(a1 + 560);
  if (!v26 || !SKCRenderer::requireLighting(*(SKCRenderer **)(a2 + 104), v26))
  {
    std::shared_ptr<jet_texture>::operator=[abi:ne180100](&v137, (uint64_t *)(a2 + 200));
LABEL_29:
    v27 = 0;
    goto LABEL_30;
  }
  std::shared_ptr<jet_texture>::operator=[abi:ne180100](&v137, (uint64_t *)(a2 + 232));
  v27 = 1;
LABEL_30:
  v28 = *a3;
  v29 = v137;
  BackingBlendMode = SKBlendModeGetBackingBlendMode(*(SKBlendMode *)(a1 + 288));
  LODWORD(__str.__r_.__value_.__l.__data_) = 31;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v28 + 8), (int *)&__str);
  v31 = *(_QWORD *)(v28 + 16);
  *(_QWORD *)(v31 - 80) = v29;
  *(_DWORD *)(v31 - 64) = BackingBlendMode;
  *(_OWORD *)(v31 - 60) = xmmword_1DC922230;
  *(_DWORD *)(v31 - 44) = 3;
  if (v27)
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
    SKCNode::resolveWorldPositionRotationAndScale((_OWORD *)a1, 0, &__str, 0);
    v32 = *(float *)&__str.__r_.__value_.__r.__words[1];
    v33 = *(_QWORD *)(a2 + 104);
    v34 = *(_DWORD *)(a1 + 560);
    v35 = (std::__shared_weak_count *)a3[1];
    v135 = *a3;
    v136 = v35;
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    SKCRenderer::setLightingUniforms(v33, v34, &v135, v32);
    v38 = v136;
    if (v136)
    {
      v39 = (unint64_t *)&v136->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
  if (*(_QWORD *)(a1 + 568))
  {
    v41 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__str, "u_time");
    LODWORD(v133) = 22;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v41 + 8), (int *)&v133);
    v42 = *(_QWORD *)(v41 + 16);
    std::string::operator=((std::string *)(v42 - 176), &__str);
    *(float *)(v42 - 64) = v19;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v43 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__str, "u_color");
  v126 = *(_OWORD *)(a1 + 576);
  LODWORD(v133) = 18;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v43 + 8), (int *)&v133);
  v44 = *(_QWORD *)(v43 + 16);
  std::string::operator=((std::string *)(v44 - 176), &__str);
  *(_OWORD *)(v44 - 64) = v126;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v45 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__str, "u_transform");
  LODWORD(v133) = 21;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v45 + 8), (int *)&v133);
  v46 = *(_QWORD *)(v45 + 16);
  std::string::operator=((std::string *)(v46 - 176), &__str);
  v127 = (__int128 *)(a2 + 416);
  v122 = a2;
  *(float32x4x4_t *)(v46 - 64) = v124;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v47 = *(_QWORD **)(a1 + 640);
  v118 = (_QWORD *)(a1 + 648);
  if (v47 != (_QWORD *)(a1 + 648))
  {
    v123 = (uint64_t *)(a2 + 480);
    v125 = (uint64_t *)(a2 + 464);
    v119 = (uint64_t *)(a2 + 448);
    v120 = (uint64_t *)(a2 + 432);
    v121 = (char **)(a2 + 672);
    do
    {
      v48 = v47[5];
      if ((*(_BYTE *)(v48 + 4) & 4) != 0)
      {
        if (*(_DWORD *)(v48 + 8))
        {
          for (i = *(uint64_t ***)(v48 + 128); i; i = (uint64_t **)*i)
          {
            v50 = i[3];
            v51 = i[4];
            v52 = i[5];
            v53 = v50;
            v54 = v51;
            if (HIDWORD(v52))
            {
              v133 = 0uLL;
              v131 = 0;
              v132 = 0;
              if (v53)
              {
                objc_msgSend(v53, "_backingTexture");
                v55 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
                v56 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
                v133 = v55;
                if (v56)
                {
                  v57 = (unint64_t *)&v56->__shared_owners_;
                  do
                    v58 = __ldaxr(v57);
                  while (__stlxr(v58 - 1, v57));
                  if (!v58)
                  {
                    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                    std::__shared_weak_count::__release_weak(v56);
                  }
                }
                v59 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
                if (__str.__r_.__value_.__l.__size_)
                {
                  v60 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
                  do
                    v61 = __ldaxr(v60);
                  while (__stlxr(v61 - 1, v60));
                  if (!v61)
                  {
                    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                    std::__shared_weak_count::__release_weak(v59);
                  }
                }
                if (objc_msgSend(v53, "filteringMode", v118) == 1)
                  v62 = v123;
                else
                  v62 = v125;
              }
              else
              {
                std::shared_ptr<jet_texture>::operator=[abi:ne180100](&v133, v120);
                v62 = v125;
              }
              std::shared_ptr<jet_texture>::operator=[abi:ne180100](&v131, v62);
              v130 = 0uLL;
              v128 = 0;
              v129 = 0;
              if (v54)
              {
                objc_msgSend(v54, "_backingTexture");
                v63 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
                v64 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
                v130 = v63;
                if (v64)
                {
                  v65 = (unint64_t *)&v64->__shared_owners_;
                  do
                    v66 = __ldaxr(v65);
                  while (__stlxr(v66 - 1, v65));
                  if (!v66)
                  {
                    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                    std::__shared_weak_count::__release_weak(v64);
                  }
                }
                v67 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
                if (__str.__r_.__value_.__l.__size_)
                {
                  v68 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
                  do
                    v69 = __ldaxr(v68);
                  while (__stlxr(v69 - 1, v68));
                  if (!v69)
                  {
                    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                    std::__shared_weak_count::__release_weak(v67);
                  }
                }
                if (objc_msgSend(v54, "filteringMode", v118) == 1)
                  v70 = v123;
                else
                  v70 = v125;
              }
              else
              {
                std::shared_ptr<jet_texture>::operator=[abi:ne180100](&v130, v119);
                v70 = v125;
              }
              std::shared_ptr<jet_texture>::operator=[abi:ne180100](&v128, v70);
              std::vector<std::shared_ptr<jet_buffer>>::push_back[abi:ne180100](v121, v127);
              v71 = *a3;
              std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture");
              v72 = v133;
              v138[0] = 8;
              std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v71 + 8), v138);
              v73 = *(_QWORD *)(v71 + 16);
              *(_QWORD *)(v73 - 80) = v72;
              std::string::operator=((std::string *)(v73 - 176), &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v74 = *a3;
              std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture");
              v75 = v131;
              v138[0] = 30;
              std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v74 + 8), v138);
              v76 = *(_QWORD *)(v74 + 16);
              *(_QWORD *)(v76 - 80) = v75;
              std::string::operator=((std::string *)(v76 - 176), &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v77 = *a3;
              std::string::basic_string[abi:ne180100]<0>(&__str, "a_position");
              current_buffer = jet_buffer_pool::get_current_buffer(*(jet_buffer_pool **)(v48 + 80));
              v138[0] = 5;
              std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v77 + 8), v138);
              v79 = *(_QWORD *)(v77 + 16);
              *(_QWORD *)(v79 - 80) = current_buffer;
              std::string::operator=((std::string *)(v79 - 176), &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v80 = *a3;
              std::string::basic_string[abi:ne180100]<0>(&__str, "a_tex_coord");
              v81 = jet_buffer_pool::get_current_buffer(*(jet_buffer_pool **)(v48 + 96));
              v138[0] = 5;
              std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v80 + 8), v138);
              v82 = *(_QWORD *)(v80 + 16);
              *(_QWORD *)(v82 - 80) = v81;
              std::string::operator=((std::string *)(v82 - 176), &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v83 = *a3;
              std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture2");
              v84 = v130;
              v138[0] = 8;
              std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v83 + 8), v138);
              v85 = *(_QWORD *)(v83 + 16);
              *(_QWORD *)(v85 - 80) = v84;
              std::string::operator=((std::string *)(v85 - 176), &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v86 = *a3;
              std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture2");
              v87 = v128;
              v138[0] = 30;
              std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v86 + 8), v138);
              v88 = *(_QWORD *)(v86 + 16);
              *(_QWORD *)(v88 - 80) = v87;
              std::string::operator=((std::string *)(v88 - 176), &__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v89 = *a3;
              v90 = *(_QWORD *)v127;
              v91 = (uint64_t *)(*a3 + 8);
              LODWORD(__str.__r_.__value_.__l.__data_) = 4;
              std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v91, (int *)&__str);
              v92 = *(_QWORD *)(v89 + 16);
              *(_QWORD *)(v92 - 80) = v90;
              *(_DWORD *)(v92 - 64) = 3;
              *(_DWORD *)(v92 - 60) = 6 * (_DWORD)v52;
              *(_DWORD *)(v92 - 56) = 6 * HIDWORD(v52);
              v93 = *(_QWORD *)(v122 + 664);
              ++*(_DWORD *)(v93 + 164);
              *(_DWORD *)(v93 + 148) += 6 * HIDWORD(v52) / 6u;
              v94 = v129;
              if (v129)
              {
                v95 = (unint64_t *)&v129->__shared_owners_;
                do
                  v96 = __ldaxr(v95);
                while (__stlxr(v96 - 1, v95));
                if (!v96)
                {
                  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                  std::__shared_weak_count::__release_weak(v94);
                }
              }
              v97 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
              if (*((_QWORD *)&v130 + 1))
              {
                v98 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
                do
                  v99 = __ldaxr(v98);
                while (__stlxr(v99 - 1, v98));
                if (!v99)
                {
                  ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
                  std::__shared_weak_count::__release_weak(v97);
                }
              }
              v100 = v132;
              if (v132)
              {
                v101 = (unint64_t *)&v132->__shared_owners_;
                do
                  v102 = __ldaxr(v101);
                while (__stlxr(v102 - 1, v101));
                if (!v102)
                {
                  ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                  std::__shared_weak_count::__release_weak(v100);
                }
              }
              v103 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
              if (*((_QWORD *)&v133 + 1))
              {
                v104 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
                do
                  v105 = __ldaxr(v104);
                while (__stlxr(v105 - 1, v104));
                if (!v105)
                {
                  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                  std::__shared_weak_count::__release_weak(v103);
                }
              }
            }

          }
        }
      }
      v106 = (_QWORD *)v47[1];
      if (v106)
      {
        do
        {
          v107 = v106;
          v106 = (_QWORD *)*v106;
        }
        while (v106);
      }
      else
      {
        do
        {
          v107 = (_QWORD *)v47[2];
          v108 = *v107 == (_QWORD)v47;
          v47 = v107;
        }
        while (!v108);
      }
      v47 = v107;
    }
    while (v107 != v118);
  }
  v109 = (std::__shared_weak_count *)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1))
  {
    v110 = (unint64_t *)(*((_QWORD *)&v137 + 1) + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
}

void sub_1DC888EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SKCTileMapNode::_generateRenderData(id *this, SKCRenderInfo *a2)
{
  id *v3;
  id v4;
  id *v5;
  uint64_t v12;
  simd_float4 *v13;
  int v14;
  float32x2_t *v15;
  int v16;
  simd_float4 v17;
  simd_float4 v18;
  __int128 v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  simd_float4 v24;
  simd_float4 v25;
  simd_float4 v26;
  simd_float4 v27;
  int IsVisible;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  _BOOL4 v39;
  void *v40;
  void *v41;
  unsigned int v42;
  void *v43;
  void *v44;
  SKTexture *v45;
  SKTexture *v46;
  void *v47;
  void *v48;
  CGFloat y;
  CGFloat x;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  SKTexture *v54;
  SKTexture *v55;
  id *v56;
  simd_float4 *v57;
  char v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  CGFloat v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  CGFloat v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t **v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  CGFloat v77;
  id v78;
  uint64_t *v79;
  id *v80;
  float32x4_t v81;
  float v82;
  char *v83;
  unsigned int v86;
  int v87;
  double v88;
  double v89;
  double v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  float32x2_t v94;
  float32_t v95;
  __int128 v96;
  double v97;
  float v98;
  float v99;
  float v100;
  float32x4_t v101;
  float v102;
  unsigned int v103;
  int v104;
  signed int v105;
  unint64_t v106;
  void *v107;
  void *v108;
  SKTexture *v109;
  void *v110;
  void *v111;
  _BOOL4 v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  unint64_t v117;
  void *v118;
  SKTexture *v119;
  signed int v120;
  _QWORD *v121;
  id v122;
  uint64_t v123;
  CGFloat v124;
  CGFloat v125;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MaxX;
  double MinY;
  double MaxY;
  CGFloat v132;
  CGFloat v133;
  CGFloat v134;
  CGFloat v135;
  float v136;
  float v137;
  float v138;
  float v139;
  _BOOL4 v140;
  float v141;
  int v142;
  int8x16_t v143;
  int v144;
  float v145;
  float v146;
  unsigned int v147;
  double v148;
  double v149;
  double v150;
  double v151;
  int v152;
  char v153;
  uint64_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  int8x16_t v158;
  float64x2_t v159;
  int8x16_t v160;
  float32_t v161;
  float32_t v162;
  float32x4_t v163;
  float32x2_t v164;
  float64x2_t v165;
  float32x4_t v166;
  float32x4_t v167;
  unsigned int v168;
  unsigned int v169;
  float v170;
  float v171;
  float v172;
  unint64_t v173;
  unint64_t v174;
  float v175;
  float v176;
  float v177;
  float v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  _QWORD *v182;
  CGFloat v183;
  unint64_t *v184;
  unint64_t v185;
  double v186;
  double v187;
  float v188;
  double v189;
  float v190;
  __int128 v191;
  float v192;
  float v193;
  float v194;
  uint64x2_t v195;
  float32x4_t v197;
  float v198;
  uint64_t v199;
  int v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  void *v205;
  _BOOL4 v206;
  void *v207;
  void *v208;
  unsigned int v209;
  void *v210;
  void *v211;
  SKTexture *v212;
  SKTexture *v213;
  uint64_t v214;
  _QWORD *v215;
  id v216;
  uint64_t v217;
  CGFloat v218;
  CGFloat v219;
  CGFloat v220;
  CGFloat v221;
  double v222;
  double v223;
  double v224;
  double v225;
  CGFloat v226;
  CGFloat v227;
  float32x4_t v228;
  CGFloat v229;
  CGFloat v230;
  float v231;
  float v232;
  float v233;
  float v234;
  _BOOL4 v235;
  float32x4_t v236;
  float v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float v241;
  float32x4_t v242;
  float32x4_t v243;
  double v244;
  double v245;
  double v246;
  double v247;
  int v248;
  float32x4_t v249;
  uint64_t v250;
  float32x4_t v251;
  float64x2_t v252;
  unsigned int v253;
  unsigned int v254;
  float32x2_t v255;
  float64x2_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  unsigned int v260;
  unsigned int v261;
  float v262;
  float v263;
  float v264;
  uint64_t v265;
  uint64_t v266;
  float v267;
  float v268;
  float v269;
  float v270;
  int *v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  int *v275;
  uint64_t v276;
  char *v277;
  _QWORD *v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  BOOL v282;
  float32x4_t v283;
  int v284;
  float32x4_t v285;
  unsigned int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  int v291;
  unint64_t v292;
  SKTexture *v293;
  SKTexture *v294;
  void *v295;
  void *v296;
  void *v297;
  void *v298;
  _BOOL4 v299;
  void *v300;
  void *v301;
  unsigned int v302;
  void *v303;
  void *v304;
  SKTexture *v305;
  _QWORD *v306;
  int v307;
  id v308;
  uint64_t v309;
  char v310;
  CGFloat v311;
  CGFloat v312;
  CGFloat v313;
  CGFloat v314;
  double v315;
  double v316;
  double v317;
  double v318;
  CGFloat v319;
  CGFloat v320;
  CGFloat v321;
  CGFloat v322;
  float v323;
  float v324;
  float v325;
  float v326;
  _BOOL4 v327;
  float v328;
  int v329;
  int8x16_t v330;
  int v331;
  float v332;
  float v333;
  unsigned int v334;
  double v335;
  double v336;
  double v337;
  double v338;
  int v339;
  char v340;
  uint64_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  int8x16_t v345;
  float64x2_t v346;
  int8x16_t v347;
  float32_t v348;
  float32_t v349;
  float32x4_t v350;
  float32x2_t v351;
  float64x2_t v352;
  float32x4_t v353;
  unint64_t v354;
  float v355;
  float32x4_t v356;
  unsigned int v357;
  unsigned int v358;
  float v359;
  float v360;
  float v361;
  unint64_t v362;
  unint64_t v363;
  float v364;
  float v365;
  float v366;
  float v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  _QWORD *v371;
  CGFloat v372;
  unint64_t *v373;
  unint64_t v374;
  char v375;
  id *v376;
  id *v377;
  id *v378;
  uint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *p_shared_owners;
  unint64_t v382;
  uint32x2_t *v384;
  float32x4_t v385;
  jet_buffer_pool **v386;
  jet_buffer_pool **v387;
  signed int v388;
  float v389;
  id *v390;
  SKCRenderInfo *v391;
  int v392;
  id *v393;
  float32x4_t v394;
  unsigned int v395;
  unsigned int v396;
  float v397;
  int v398;
  float v399;
  float v400;
  float v401;
  float v402;
  float v403;
  float32x4_t v404;
  float v405;
  float v406;
  float64_t v407;
  float v408;
  float64_t v409;
  float v410;
  int v411;
  float32x4_t v412;
  float32x4_t v413;
  float64x2_t v414;
  uint64_t data;
  float32x4_t v416;
  float32x4_t v417;
  uint64_t v418;
  uint64_t v419;
  int v420;
  float v421;
  float64_t v422;
  float64_t v423;
  float v424;
  float64_t v425;
  float64_t v426;
  id v427;
  float v428;
  float v429;
  void *v430;
  int8x16_t v431;
  int8x16_t v432;
  SKTexture *v433;
  __int128 v434;
  __int128 v435;
  int v436;
  float32x2_t v437;
  unint64_t v438;
  float32x2_t v439;
  unint64_t v440;
  unsigned int v441;
  SKTexture *v442;
  id v443;
  float32x2_t v444;
  __int128 v445;
  id v446;
  SKTexture *v447;
  float32x4_t v448;
  float v449;
  float v450;
  unint64_t v451;
  float v452;
  unint64_t v453;
  float v454;
  float32x2_t v455;
  float v456;
  unint64_t v457;
  void *v458;
  int8x16_t v459;
  float v460;
  unint64_t v461;
  float32x4_t v462;
  float v463;
  unint64_t v464;
  simd_float4 *v465;
  simd_float4 *v466;
  id *v467;
  uint64_t v468;
  float v469;
  unint64_t v470;
  void *v471;
  uint64_t BatchID;
  simd_float4x4 v473;
  uint64_t v474;
  std::__shared_weak_count *v475;
  _OWORD v476[4];
  CGPoint v477;
  simd_float4 v478;
  simd_float4 v479;
  simd_float4 v480;
  uint64_t v481;
  CGRect v482;
  CGRect v483;
  CGRect v484;
  CGRect v485;
  CGRect v486;
  CGRect v487;
  CGRect v488;
  CGRect v489;
  CGRect v490;
  CGRect v491;
  CGRect v492;
  CGRect v493;

  v3 = this;
  v481 = *MEMORY[0x1E0C80C00];
  v4 = this[1];
  v391 = a2;
  SKCRenderer::getBackingContext(*((_QWORD *)a2 + 13), &v474);
  *((_DWORD *)v3 + 154) = 0;
  v5 = (id *)v3[80];
  v390 = v3 + 81;
  if (v5 == v3 + 81)
    goto LABEL_315;
  v384 = (uint32x2_t *)((char *)v3 + 604);
  __asm { FMOV            V0.4S, #1.0 }
  v416 = _Q0;
  __asm { FMOV            V0.4S, #-1.0 }
  v385 = _Q0;
  v458 = v4;
  v467 = v3;
  do
  {
    v12 = 0;
    v13 = (simd_float4 *)v5[5];
    v411 = v13->i32[0];
    v14 = *((unsigned __int8 *)v3 + 612);
    v15 = (float32x2_t *)v3;
    v16 = *((unsigned __int8 *)v3 + 613);
    v468 = v13[12].i64[0];
    v17 = v13[2];
    v473.columns[0] = v13[1];
    v473.columns[1] = v17;
    v18 = v13[4];
    v466 = v13;
    v473.columns[2] = v13[3];
    v473.columns[3] = v18;
    *(float32x2_t *)&v19 = vmls_f32(*(float32x2_t *)v473.columns[0].f32, v15[42], v15[44]);
    *((_QWORD *)&v19 + 1) = vextq_s8((int8x16_t)v473.columns[0], (int8x16_t)v473.columns[0], 8uLL).u64[0];
    v20 = *((float32x4_t *)v391 + 2);
    v21 = *((float32x4_t *)v391 + 3);
    v22 = *((float32x4_t *)v391 + 4);
    v23 = *((float32x4_t *)v391 + 5);
    v476[0] = v19;
    v476[1] = v473.columns[1];
    v476[2] = v473.columns[2];
    v476[3] = v473.columns[3];
    do
    {
      *(float32x4_t *)((char *)&v477 + v12 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, COERCE_FLOAT(v476[v12])), v21, *(float32x2_t *)&v476[v12], 1), v22, (float32x4_t)v476[v12], 2), v23, (float32x4_t)v476[v12], 3);
      ++v12;
    }
    while (v12 != 4);
    v473.columns[0] = (simd_float4)v477;
    v473.columns[1] = v478;
    v473.columns[2] = v479;
    v473.columns[3] = v480;
    *(double *)v24.i64 = SKCBoundingBoxGetVerts(&v473);
    v393 = v5;
    v473.columns[0] = v24;
    v473.columns[1] = v25;
    v473.columns[2] = v26;
    v473.columns[3] = v27;
    IsVisible = quadIsVisible((float32x4_t *)&v473);
    if (*((_BYTE *)v467 + 564))
      v29 = IsVisible;
    else
      v29 = 1;
    v30 = v466->i8[4];
    if ((v29 & 1) != 0)
    {
      if (IsVisible)
      {
        v30 |= 4u;
        v466->i8[4] = v30;
        ++*((_DWORD *)v467 + 154);
      }
      if ((v30 & 8) != 0)
      {
        v30 = v30 & 0xF4 | 3;
        v466->i8[4] = v30;
      }
      if ((v30 & 3) == 0)
        goto LABEL_307;
      v31 = (v16 * v14);
      v465 = v466 + 7;
      std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::clear((uint64_t)&v466[7]);
      if ((_DWORD)v31)
      {
        v32 = 0;
        while (1)
        {
          v33 = *(_DWORD *)(v466[12].i64[0] + 4 * v32);
          if (v33 != 0x7FFFFFFF)
            break;
LABEL_26:
          if (++v32 == v31)
            goto LABEL_48;
        }
        if ((unsigned __int16)*(_DWORD *)(v466[12].i64[0] + 4 * v32) != 0xFFFF)
        {
          objc_msgSend(v458, "tileSet");
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v34)
            goto LABEL_24;
          objc_msgSend(v458, "tileSet");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "tileDefinitions");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          if (v36)
          {
            objc_msgSend(v458, "tileSet");
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v37, "tileDefinitions");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            v39 = objc_msgSend(v38, "count") > (unint64_t)(unsigned __int16)v33;

            if (v39)
            {
              objc_msgSend(v458, "tileSet");
              v40 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v40, "tileDefinitions");
              v41 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v41, "objectAtIndexedSubscript:", (unsigned __int16)v33);
              v34 = (void *)objc_claimAutoreleasedReturnValue();

              v42 = objc_msgSend(v34, "currentFrameIndex");
              objc_msgSend(v34, "textures");
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v43, "count") <= (unint64_t)v42)
              {
                v45 = 0;
              }
              else
              {
                objc_msgSend(v34, "textures");
                v44 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v44, "objectAtIndexedSubscript:", v42);
                v45 = (SKTexture *)(id)objc_claimAutoreleasedReturnValue();

              }
              objc_msgSend(v34, "normalTextures");
              v47 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v47, "count") <= (unint64_t)v42)
              {
                v46 = 0;
              }
              else
              {
                objc_msgSend(v34, "normalTextures");
                v48 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v48, "objectAtIndexedSubscript:", v42);
                v46 = (SKTexture *)(id)objc_claimAutoreleasedReturnValue();

              }
              if (!v45)
                goto LABEL_25;
              -[SKTexture _backingTexture](v45, "_backingTexture");
              x = v477.x;
              y = v477.y;
              if (!*(_QWORD *)&v477.y)
                goto LABEL_38;
              v51 = (unint64_t *)(*(_QWORD *)&v477.y + 8);
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                (*(void (**)(CGFloat))(**(_QWORD **)&y + 16))(COERCE_CGFLOAT(*(_QWORD *)&y));
                std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&y);
                if (x == 0.0)
                  goto LABEL_25;
              }
              else
              {
LABEL_38:
                if (x == 0.0)
                  goto LABEL_25;
              }
              *(_QWORD *)&v476[0] = 0;
              *(_QWORD *)&v476[0] = generateBatchID(v45, v46);
              if (std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::find<unsigned long long>(v465, (unint64_t *)v476))
              {
                *(_QWORD *)&v477.x = v476;
                v53 = std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v465, (unint64_t *)v476, (uint64_t)&std::piecewise_construct, (uint64_t **)&v477);
                ++*((_DWORD *)v53 + 11);
              }
              else
              {
                v54 = v45;
                v55 = v46;
                *(_QWORD *)&v477.x = v476;
                v56 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v465, (unint64_t *)v476, (uint64_t)&std::piecewise_construct, (uint64_t **)&v477);
                objc_storeStrong(v56 + 3, v45);
                objc_storeStrong(v56 + 4, v46);
                v56[5] = (id)0x100000000;

              }
              if (objc_msgSend(v34, "frameDidChange"))
                *(_DWORD *)(v466[12].i64[0] + 4 * v32) = v33 | 0x80000000;
              goto LABEL_25;
            }
          }
          else
          {

          }
        }
        v34 = 0;
LABEL_24:
        v45 = 0;
        v46 = 0;
LABEL_25:

        goto LABEL_26;
      }
LABEL_48:
      v59 = v466->i32[2];
      v4 = v458;
      if (!v59)
        goto LABEL_307;
      v60 = (4 * v59);
      v61 = v466[5].i64[0];
      v387 = (jet_buffer_pool **)&v466[5];
      if (!v61 || *(_DWORD *)(v61 + 16) < v60)
      {
        v62 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v474 + 16))(v474, 0, 4, v60);
        std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&v477, v62);
        std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)v387, (__int128 *)&v477);
        v63 = v477.y;
        if (*(_QWORD *)&v477.y)
        {
          v64 = (unint64_t *)(*(_QWORD *)&v477.y + 8);
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            (*(void (**)(CGFloat))(**(_QWORD **)&v63 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v63));
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v63);
          }
        }
      }
      v66 = v466[6].i64[0];
      v386 = (jet_buffer_pool **)&v466[6];
      if (!v66 || *(_DWORD *)(v66 + 16) < v60)
      {
        v67 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v474 + 16))(v474, 0, 2, v60);
        std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&v477, v67);
        std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)v386, (__int128 *)&v477);
        v68 = v477.y;
        if (*(_QWORD *)&v477.y)
        {
          v69 = (unint64_t *)(*(_QWORD *)&v477.y + 8);
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            (*(void (**)(CGFloat))(**(_QWORD **)&v68 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v68));
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v68);
          }
        }
      }
      data = jet_buffer_pool::get_data(*v387);
      v419 = jet_buffer_pool::get_data(*v386);
      v71 = (uint64_t **)v466[8].i64[0];
      if (v71)
      {
        v72 = 0;
        do
        {
          v73 = v71[3];
          *(_QWORD *)&v477.x = v71[2];
          *(_QWORD *)&v477.y = v73;
          v74 = v71[4];
          v75 = v74;
          v76 = (uint64_t)v71[5];
          v478.i64[0] = (uint64_t)v75;
          v478.i64[1] = v76;
          v77 = v477.y;
          v78 = *(id *)&v477.y;
          v79 = v75;
          *(_QWORD *)&v476[0] = &v477;
          v80 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v465, (unint64_t *)&v477, (uint64_t)&std::piecewise_construct, (uint64_t **)v476);
          objc_storeStrong(v80 + 3, *(id *)&v77);
          objc_storeStrong(v80 + 4, v74);
          v80[5] = (id)v72;

          v72 += HIDWORD(v76);
          v71 = (uint64_t **)*v71;
        }
        while (v71);
      }
      v417 = (float32x4_t)(unint64_t)v467[44];
      v81 = vmlaq_n_f32(v416, vaddq_f32(vminnmq_f32(vmaxnmq_f32(*((float32x4_t *)v467 + 19), (float32x4_t)0), v416), v385), fminf(fmaxf(*((float *)v467 + 80), 0.0), 1.0));
      v82 = vmuls_lane_f32(*((float *)v467 + 81), v81, 3);
      v81.i32[3] = 1.0;
      *((float32x4_t *)v467 + 36) = vmulq_n_f32(v81, fminf(fmaxf(*((float *)v391 + 24) * v82, 0.0), 1.0));
      v83 = (char *)v467[74];
      __asm { FMOV            V0.2S, #1.0 }
      v418 = _D0;
      __asm { FMOV            V0.2D, #0.5 }
      v414 = _Q0;
      if ((unint64_t)(v83 - 2) >= 2)
      {
        v4 = v458;
        if (v83)
        {
          if (v83 != (char *)1)
            goto LABEL_302;
          v86 = *((_DWORD *)v467 + 151);
          v87 = *((_DWORD *)v467 + 152);
          objc_msgSend(v458, "tileSize");
          v89 = v88;
          objc_msgSend(v458, "tileSize");
          LOBYTE(v91) = *((_BYTE *)v467 + 612);
          if (!(_BYTE)v91)
            goto LABEL_302;
          v92 = v87 + v86;
          v93 = 0;
          v94.f32[0] = v89;
          v95 = v90;
          v96 = *((_OWORD *)v467 + 21);
          v97 = COERCE_FLOAT((unint64_t)v467[42] >> 32);
          v98 = v94.f32[0] * 0.5 / *(float *)&v96;
          v408 = v98;
          v99 = (float)-v95 * 0.5 / v97;
          v100 = v95 * 0.5 / v97;
          v405 = v100;
          v94.f32[1] = v95;
          v402 = (float)(unsigned __int16)v411;
          v420 = *((_DWORD *)v467 + 152) - 1;
          *(float32x2_t *)v101.f32 = vdiv_f32(vdiv_f32(v94, *(float32x2_t *)&v96), v94);
          v102 = (float)(~v411 >> 16);
          v101.i64[1] = v418;
          v412 = v101;
          v397 = (float)v86 / (float)v92;
          v399 = v102;
          while (1)
          {
            v103 = v91;
            if (v93 >= v91)
              goto LABEL_142;
            v395 = v93;
            v104 = v420;
            if (v420 >= *((unsigned __int8 *)v467 + 613))
            {
LABEL_139:
              v103 = v91;
              goto LABEL_141;
            }
            while (1)
            {
              v105 = v93 + v103 * v104;
              v106 = *(unsigned __int16 *)(v466[12].i64[0] + 4 * v105);
              if ((_DWORD)v106 == 0xFFFF
                || (objc_msgSend(v4, "tileSet"), (v107 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
              {
LABEL_79:
                v115 = 0;
                v109 = 0;
                v119 = 0;
                goto LABEL_87;
              }
              objc_msgSend(v4, "tileSet");
              v108 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v108, "tileDefinitions");
              v109 = (SKTexture *)objc_claimAutoreleasedReturnValue();
              if (v109)
              {
                objc_msgSend(v4, "tileSet");
                v110 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v110, "tileDefinitions");
                v111 = (void *)objc_claimAutoreleasedReturnValue();
                v112 = objc_msgSend(v111, "count") > v106;

                if (!v112)
                  goto LABEL_79;
                objc_msgSend(v458, "tileSet");
                v113 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v113, "tileDefinitions");
                v114 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v114, "objectAtIndexedSubscript:", v106);
                v115 = (void *)objc_claimAutoreleasedReturnValue();

                LODWORD(v114) = objc_msgSend(v115, "currentFrameIndex");
                objc_msgSend(v115, "textures");
                v116 = (void *)objc_claimAutoreleasedReturnValue();
                v117 = v114;
                if (objc_msgSend(v116, "count") <= (unint64_t)v114)
                {
                  v109 = 0;
                }
                else
                {
                  objc_msgSend(v115, "textures");
                  v118 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v118, "objectAtIndexedSubscript:", v117);
                  v109 = (SKTexture *)objc_claimAutoreleasedReturnValue();

                }
                objc_msgSend(v115, "normalTextures");
                v107 = (void *)objc_claimAutoreleasedReturnValue();
                if (objc_msgSend(v107, "count") <= v117)
                {
                  v119 = 0;
                  goto LABEL_86;
                }
                objc_msgSend(v115, "normalTextures");
                v108 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v108, "objectAtIndexedSubscript:", v117);
                v119 = (SKTexture *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v115 = 0;
                v119 = 0;
              }

LABEL_86:
LABEL_87:
              BatchID = 0;
              BatchID = generateBatchID(v109, v119);
              if (std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::find<unsigned long long>(v465, (unint64_t *)&BatchID))
              {
                v447 = v119;
                v120 = v105;
                *(_QWORD *)&v477.x = &BatchID;
                v121 = std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v465, (unint64_t *)&BatchID, (uint64_t)&std::piecewise_construct, (uint64_t **)&v477);
                v443 = (id)v121[3];
                v122 = (id)v121[4];
                v123 = v121[5];
                -[SKTexture textureRect](v109, "textureRect");
                v124 = v482.origin.x;
                v125 = v482.origin.y;
                width = v482.size.width;
                height = v482.size.height;
                MinX = CGRectGetMinX(v482);
                v483.origin.x = v124;
                v483.origin.y = v125;
                v483.size.width = width;
                v483.size.height = height;
                MaxX = CGRectGetMaxX(v483);
                v484.origin.x = v124;
                v484.origin.y = v125;
                v484.size.width = width;
                v484.size.height = height;
                MinY = CGRectGetMinY(v484);
                v485.origin.x = v124;
                v485.origin.y = v125;
                v485.size.width = width;
                v485.size.height = height;
                MaxY = CGRectGetMaxY(v485);
                -[SKTexture cropOffset](v109, "cropOffset");
                v477.x = v132;
                v477.y = v133;
                v459 = sk_vector_make((float64x2_t *)&v477);
                -[SKTexture cropScale](v109, "cropScale");
                v477.x = v134;
                v477.y = v135;
                v439 = sk_vector_make((float64x2_t *)&v477);
                -[SKTexture _backingTexture](v109, "_backingTexture");
                v136 = MinX;
                v137 = MaxX;
                v138 = MinY;
                v139 = MaxY;
                if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)&v477.x + 24))(*(_QWORD *)&v477.x) == 1)
                {
                  v136 = v136 * (float)(***(unsigned int (****)(_QWORD))&v477.x)(*(_QWORD *)&v477.x);
                  v137 = v137 * (float)(***(unsigned int (****)(_QWORD))&v477.x)(*(_QWORD *)&v477.x);
                  v138 = v138
                       * (float)(*(unsigned int (**)(_QWORD))(**(_QWORD **)&v477.x + 8))(*(_QWORD *)&v477.x);
                  v139 = v139
                       * (float)(*(unsigned int (**)(_QWORD))(**(_QWORD **)&v477.x + 8))(*(_QWORD *)&v477.x);
                }
                v140 = -[SKTexture isFlipped](v109, "isFlipped");
                if (v140)
                  v141 = v139;
                else
                  v141 = v138;
                v469 = v141;
                if (!v140)
                  v138 = v139;
                v435 = *((_OWORD *)v467 + 21);
                v142 = objc_msgSend(v115, "flipVertically");
                v143 = (int8x16_t)(unint64_t)v459;
                if (v142)
                {
                  *(float *)&v143.i32[1] = -v459.f32[1];
                  v429 = v138;
                  v432 = v143;
                }
                else
                {
                  v429 = v469;
                  v432 = (int8x16_t)(unint64_t)v459;
                  v469 = v138;
                }
                v144 = objc_msgSend(v115, "flipHorizontally");
                if (v144)
                  v145 = v137;
                else
                  v145 = v136;
                v452 = v145;
                if (v144)
                  v146 = v136;
                else
                  v146 = v137;
                v460 = v146;
                if (v144)
                  v147 = -1;
                else
                  v147 = 0;
                -[SKTexture size](v109, "size");
                v423 = v149;
                v426 = v148;
                objc_msgSend(v115, "size");
                v152 = HIDWORD(v123) + v123;
                v153 = v466->i8[4];
                if ((v153 & 1) != 0)
                {
                  v154 = 0;
                  v157.i64[0] = v435;
                  *(float32x2_t *)v155.f32 = v439;
                  v155.i64[1] = v418;
                  v156.i64[1] = v416.i64[1];
                  v157.i64[1] = v416.i64[1];
                  v158 = v432;
                  *(float *)v158.i32 = -*(float *)v432.i32;
                  v159.f64[0] = v426;
                  v159.f64[1] = v423;
                  v160 = vbslq_s8((int8x16_t)vdupq_n_s32(v147), v158, v432);
                  v161 = v150;
                  v156.f32[0] = v161;
                  v162 = v151;
                  v156.f32[1] = v162;
                  v163 = vmulq_f32(v155, v156);
                  v164 = vmul_f32(v439, vcvt_f32_f64(v159));
                  v165 = vcvtq_f64_f32(v164);
                  *(float32x2_t *)v166.f32 = vcvt_f32_f64(vdivq_f64(vaddq_f64(vmulq_f64(vsubq_f64(v159, v165), v414), vcvtq_f64_f32(vmul_f32(*(float32x2_t *)v160.i8, v164))), v165));
                  v160.i64[0] = vextq_s8(v160, v160, 8uLL).u64[0];
                  v166.i64[1] = v160.i64[0];
                  v160.i8[0] = *((_BYTE *)v467 + 612);
                  *(float *)v165.f64 = v402;
                  LOBYTE(v165.f64[0]) = *((_BYTE *)v467 + 613);
                  v167 = (float32x4_t)__PAIR64__(v397+ (float)((float)((float)((float)((float)(v399 * (float)LODWORD(v165.f64[0]))+ (float)v104)* v405)+ (float)((float)((float)(v402 * (float)v160.u32[0])+ (float)(int)v93)* v99))+ v99), (float)((float)((float)((float)(v399 * (float)LODWORD(v165.f64[0])) + (float)v104)* v408)+ (float)((float)((float)(v402 * (float)v160.u32[0]) + (float)(int)v93)* v408))+ 0.0);
                  do
                  {
                    *(float32x4_t *)(data + 16 * (4 * v152) + v154 * 16) = vmulq_f32(v157, vsubq_f32(vaddq_f32(v167, vmulq_f32(v412, vmulq_f32(v163, vaddq_f32(v166, (float32x4_t)xmmword_1DC9222B0[v154])))), v417));
                    ++v154;
                  }
                  while (v154 != 4);
                  v153 = v466->i8[4];
                }
                if ((v153 & 2) != 0)
                {
                  if (-[SKTexture _needsExtrusionWorkaround](v109, "_needsExtrusionWorkaround"))
                  {
                    v168 = (***(uint64_t (****)(_QWORD))&v477.x)(*(_QWORD *)&v477.x);
                    v169 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v477.x + 8))(*(_QWORD *)&v477.x);
                    v170 = 0.25 / (float)v168;
                    v171 = 0.25 / (float)v169;
                    if (v452 >= v460)
                      v172 = -v170;
                    else
                      v172 = 0.25 / (float)v168;
                    *(float *)&v173 = v452 + v172;
                    if ((float)(v452 + v172) >= v460)
                      v170 = -v170;
                    *(float *)&v174 = v460 - v170;
                    v175 = -v171;
                    if (v429 >= v469)
                      v176 = -v171;
                    else
                      v176 = 0.25 / (float)v169;
                    v177 = v429 + v176;
                    if ((float)(v429 + v176) < v469)
                      v175 = 0.25 / (float)v169;
                    v178 = v469 - v175;
                  }
                  else
                  {
                    v178 = v469;
                    *(float *)&v174 = v460;
                    *(float *)&v173 = v452;
                    v177 = v429;
                  }
                  v179 = __PAIR64__(LODWORD(v177), v173);
                  v180 = __PAIR64__(LODWORD(v177), v174);
                  *((float *)&v174 + 1) = v178;
                  *((float *)&v173 + 1) = v178;
                  if (v109)
                  {
                    v440 = __PAIR64__(LODWORD(v177), v174);
                    v470 = __PAIR64__(LODWORD(v177), v173);
                    v453 = v173;
                    v461 = v174;
                    if (-[SKTexture isRotated](v109, "isRotated"))
                    {
                      v179 = v453;
                      v181 = v461;
                      v180 = v470;
                      v174 = v440;
                    }
                    else
                    {
                      v179 = v470;
                      v180 = v440;
                      v174 = v461;
                      v181 = v453;
                    }
                  }
                  else
                  {
                    v181 = v173;
                  }
                  *(_QWORD *)(v419 + 8 * (4 * v152)) = v179;
                  *(_QWORD *)(v419 + 8 * ((4 * v152) | 1u)) = v180;
                  *(_QWORD *)(v419 + 8 * ((4 * v152) | 2u)) = v174;
                  *(_QWORD *)(v419 + 8 * ((4 * v152) | 3u)) = v181;
                  *(_DWORD *)(v466[12].i64[0] + 4 * v120) &= ~0x80000000;
                }
                *(_QWORD *)&v476[0] = &BatchID;
                v182 = std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v465, (unint64_t *)&BatchID, (uint64_t)&std::piecewise_construct, (uint64_t **)v476);
                ++*((_DWORD *)v182 + 11);
                v183 = v477.y;
                if (*(_QWORD *)&v477.y)
                {
                  v184 = (unint64_t *)(*(_QWORD *)&v477.y + 8);
                  do
                    v185 = __ldaxr(v184);
                  while (__stlxr(v185 - 1, v184));
                  if (!v185)
                  {
                    (*(void (**)(CGFloat))(**(_QWORD **)&v183 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v183));
                    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v183);
                  }
                }

                v119 = v447;
              }

              ++v93;
              v91 = *((unsigned __int8 *)v467 + 612);
              if (v93 >= v91)
                break;
              ++v104;
              v103 = *((unsigned __int8 *)v467 + 612);
              v4 = v458;
              if (v104 >= *((unsigned __int8 *)v467 + 613))
                goto LABEL_139;
            }
            v103 = *((unsigned __int8 *)v467 + 612);
            v4 = v458;
LABEL_141:
            v93 = v395;
LABEL_142:
            if (v420 < 1)
              ++v93;
            v420 -= v420 > 0;
            if (v93 >= v103)
            {
LABEL_302:
              v375 = v466->i8[4];
              if ((v375 & 1) != 0)
              {
                jet_buffer_pool::commit_data(*v387);
                v375 = v466->i8[4] & 0xFE;
                v466->i8[4] = v375;
              }
              if ((v375 & 2) != 0)
              {
                jet_buffer_pool::commit_data(*v386);
                v57 = v466;
                v58 = v466->i8[4] & 0xFD;
LABEL_306:
                v57->i8[4] = v58;
              }
              goto LABEL_307;
            }
          }
        }
        if (!(_DWORD)v31)
          goto LABEL_302;
        v195.i64[0] = v384->u32[0];
        v195.i64[1] = HIDWORD(*(unint64_t *)v384);
        __asm { FMOV            V2.2D, #1.0 }
        *(float32x2_t *)&_Q2.f64[0] = vcvt_f32_f64(vdivq_f64(_Q2, vcvtq_f64_u64(v195)));
        v396 = ~v411 >> 16;
        v398 = (unsigned __int16)v411;
        *(float32x2_t *)v197.f32 = vdiv_f32(*(float32x2_t *)&_Q2.f64[0], vdiv_f32((float32x2_t)v467[42], vcvt_f32_u32(*v384)));
        v197.i64[1] = v418;
        v401 = *(float *)_Q2.f64;
        v404 = v197;
        v198 = *((float *)_Q2.f64 + 1);
        while (1)
        {
          v199 = v31 - 1;
          v200 = *(_DWORD *)(v468 + 4 * (v31 - 1));
          if (v200 != 0x7FFFFFFF)
            break;
LABEL_221:
          v282 = v31-- <= 1;
          if (v282)
            goto LABEL_302;
        }
        v441 = *((unsigned __int8 *)v467 + 612);
        v436 = *((unsigned __int8 *)v467 + 613);
        if ((unsigned __int16)*(_DWORD *)(v468 + 4 * (v31 - 1)) != 0xFFFF)
        {
          objc_msgSend(v4, "tileSet");
          v201 = (void *)objc_claimAutoreleasedReturnValue();
          if (v201)
          {
            objc_msgSend(v4, "tileSet");
            v202 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v202, "tileDefinitions");
            v203 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v203)
            {
              v213 = 0;
              v212 = 0;
              goto LABEL_162;
            }
            objc_msgSend(v4, "tileSet");
            v204 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v204, "tileDefinitions");
            v205 = (void *)objc_claimAutoreleasedReturnValue();
            v206 = objc_msgSend(v205, "count") > (unint64_t)(unsigned __int16)v200;

            if (v206)
            {
              objc_msgSend(v458, "tileSet");
              v207 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v207, "tileDefinitions");
              v208 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v208, "objectAtIndexedSubscript:", (unsigned __int16)v200);
              v203 = (void *)objc_claimAutoreleasedReturnValue();

              v209 = objc_msgSend(v203, "currentFrameIndex");
              objc_msgSend(v203, "textures");
              v210 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v210, "count") <= (unint64_t)v209)
              {
                v212 = 0;
              }
              else
              {
                objc_msgSend(v203, "textures");
                v211 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v211, "objectAtIndexedSubscript:", v209);
                v212 = (SKTexture *)(id)objc_claimAutoreleasedReturnValue();

              }
              objc_msgSend(v203, "normalTextures");
              v201 = (void *)objc_claimAutoreleasedReturnValue();
              if (objc_msgSend(v201, "count") <= (unint64_t)v209)
              {
                v213 = 0;
                goto LABEL_164;
              }
              objc_msgSend(v203, "normalTextures");
              v202 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v202, "objectAtIndexedSubscript:", v209);
              v213 = (SKTexture *)(id)objc_claimAutoreleasedReturnValue();

LABEL_162:
LABEL_164:

LABEL_165:
              v214 = objc_msgSend(v203, "rotation");
              BatchID = 0;
              BatchID = generateBatchID(v212, v213);
              if (!std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::find<unsigned long long>(v465, (unint64_t *)&BatchID))
              {
LABEL_220:

                v4 = v458;
                goto LABEL_221;
              }
              v433 = v213;
              *(_QWORD *)&v477.x = &BatchID;
              v215 = std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v465, (unint64_t *)&BatchID, (uint64_t)&std::piecewise_construct, (uint64_t **)&v477);
              v427 = (id)v215[3];
              v216 = (id)v215[4];
              v217 = v215[5];
              -[SKTexture textureRect](v212, "textureRect");
              v218 = v486.origin.x;
              v219 = v486.origin.y;
              v220 = v486.size.width;
              v221 = v486.size.height;
              v222 = CGRectGetMinX(v486);
              v487.origin.x = v218;
              v487.origin.y = v219;
              v487.size.width = v220;
              v487.size.height = v221;
              v223 = CGRectGetMaxX(v487);
              v488.origin.x = v218;
              v488.origin.y = v219;
              v488.size.width = v220;
              v488.size.height = v221;
              v224 = CGRectGetMinY(v488);
              v489.origin.x = v218;
              v489.origin.y = v219;
              v489.size.width = v220;
              v489.size.height = v221;
              v225 = CGRectGetMaxY(v489);
              -[SKTexture cropOffset](v212, "cropOffset");
              v477.x = v226;
              v477.y = v227;
              *(float32x2_t *)v228.f32 = sk_vector_make((float64x2_t *)&v477);
              v448 = v228;
              -[SKTexture cropScale](v212, "cropScale");
              v477.x = v229;
              v477.y = v230;
              v444 = sk_vector_make((float64x2_t *)&v477);
              v430 = v216;
              -[SKTexture _backingTexture](v212, "_backingTexture");
              v231 = v222;
              v232 = v223;
              v233 = v224;
              v234 = v225;
              if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)&v476[0] + 24))(*(_QWORD *)&v476[0]) == 1)
              {
                v231 = v231 * (float)(***(unsigned int (****)(_QWORD))&v476[0])(*(_QWORD *)&v476[0]);
                v232 = v232 * (float)(***(unsigned int (****)(_QWORD))&v476[0])(*(_QWORD *)&v476[0]);
                v233 = v233
                     * (float)(*(unsigned int (**)(_QWORD))(**(_QWORD **)&v476[0] + 8))(*(_QWORD *)&v476[0]);
                v234 = v234
                     * (float)(*(unsigned int (**)(_QWORD))(**(_QWORD **)&v476[0] + 8))(*(_QWORD *)&v476[0]);
              }
              v235 = -[SKTexture isFlipped](v212, "isFlipped");
              v462 = (float32x4_t)v448.u64[0];
              *(float32x2_t *)v236.f32 = v444;
              v236.i64[1] = v418;
              if (v235)
                v237 = v233;
              else
                v237 = v234;
              v454 = v237;
              if (v235)
                v233 = v234;
              if (v214 == 3)
              {
                v239.i64[1] = 0;
                v239.i32[0] = v448.i32[1];
                v239.f32[1] = -v448.f32[0];
                v462 = v239;
                v236.i64[0] = __PAIR64__(v444.u32[0], v444.u32[1]);
                v413 = v236;
              }
              else if (v214 == 2)
              {
                v413 = v236;
                v462 = (float32x4_t)vnegq_f32(v448).u64[0];
              }
              else
              {
                if (v214 == 1)
                {
                  v238.i64[1] = 0;
                  v238.f32[0] = -v448.f32[1];
                  v238.i32[1] = v448.i32[0];
                  v462 = v238;
                  v236.i64[0] = __PAIR64__(v444.u32[0], v444.u32[1]);
                }
                v413 = v236;
              }
              v445 = *((_OWORD *)v467 + 21);
              if (objc_msgSend(v203, "flipVertically"))
              {
                if ((v214 & 0xFFFFFFFFFFFFFFFDLL) != 0)
                {
                  v240 = v462;
                  v240.f32[0] = -v462.f32[0];
                  v462 = v240;
                  v241 = v454;
                  v454 = v233;
                  v449 = v231;
                  v231 = v232;
                  goto LABEL_186;
                }
                v242 = v462;
                v242.i32[1] = vnegq_f32(v462).i32[1];
                v462 = v242;
                v241 = v233;
              }
              else
              {
                v241 = v454;
                v454 = v233;
              }
              v449 = v232;
LABEL_186:
              if (objc_msgSend(v203, "flipHorizontally"))
              {
                if ((v214 & 0xFFFFFFFFFFFFFFFDLL) == 0)
                {
                  v283 = v462;
                  v283.f32[0] = -v462.f32[0];
                  v462 = v283;
                  v424 = v241;
                  v421 = v231;
                  goto LABEL_191;
                }
                v243 = v462;
                v243.i32[1] = vnegq_f32(v462).i32[1];
                v462 = v243;
                v424 = v454;
                v454 = v241;
              }
              else
              {
                v424 = v241;
              }
              v421 = v449;
              v449 = v231;
LABEL_191:
              -[SKTexture size](v212, "size");
              v407 = v245;
              v409 = v244;
              objc_msgSend(v203, "size");
              v248 = HIDWORD(v217) + v217;
              v249.i64[0] = v445;
              if ((v466->i8[4] & 1) != 0)
              {
                v250 = 0;
                v251.i64[1] = v416.i64[1];
                v249.i64[1] = v416.i64[1];
                v252.f64[0] = v409;
                v252.f64[1] = v407;
                *(float *)&v253 = v246;
                *(float *)&v254 = v247;
                v251.i64[0] = __PAIR64__(v254, v253);
                v255 = vmul_f32(*(float32x2_t *)v413.f32, vcvt_f32_f64(v252));
                v256 = vcvtq_f64_f32(v255);
                *(float32x2_t *)v257.f32 = vcvt_f32_f64(vdivq_f64(vaddq_f64(vmulq_f64(vsubq_f64(v252, v256), v414), vcvtq_f64_f32(vmul_f32(*(float32x2_t *)v462.f32, v255))), v256));
                v257.i64[1] = vextq_s8((int8x16_t)v462, (int8x16_t)v462, 8uLL).u64[0];
                v258 = vmulq_f32(v413, v251);
                v259.i64[1] = 0;
                do
                {
                  v259.f32[1] = v198 * (float)(int)(v199 / v441 + v396 * v436);
                  v259.f32[0] = v401 * (float)(int)(v199 % v441 + v398 * v441);
                  *(float32x4_t *)(data + 16 * (4 * v248) + v250 * 16) = vmulq_f32(v249, vsubq_f32(vaddq_f32(v259, vmulq_f32(v404, vmulq_f32(v258, vaddq_f32(v257, (float32x4_t)xmmword_1DC9222B0[v250])))), v417));
                  ++v250;
                }
                while (v250 != 4);
              }
              if (v200 < 0 || (v466->i8[4] & 1) != 0)
              {
                if (-[SKTexture _needsExtrusionWorkaround](v212, "_needsExtrusionWorkaround"))
                {
                  v260 = (***(uint64_t (****)(_QWORD))&v476[0])(*(_QWORD *)&v476[0]);
                  v261 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v476[0] + 8))(*(_QWORD *)&v476[0]);
                  v262 = 0.25 / (float)v260;
                  v263 = 0.25 / (float)v261;
                  if (v449 >= v421)
                    v264 = -v262;
                  else
                    v264 = 0.25 / (float)v260;
                  *(float *)&v265 = v449 + v264;
                  if ((float)(v449 + v264) >= v421)
                    v262 = -v262;
                  *(float *)&v266 = v421 - v262;
                  v267 = -v263;
                  if (v454 >= v424)
                    v268 = -v263;
                  else
                    v268 = 0.25 / (float)v261;
                  v269 = v454 + v268;
                  if ((float)(v454 + v268) < v424)
                    v267 = 0.25 / (float)v261;
                  v270 = v424 - v267;
                }
                else
                {
                  *(float *)&v265 = v449;
                  v269 = v454;
                  *(float *)&v266 = v421;
                  v270 = v424;
                }
                *(_QWORD *)&v477.x = __PAIR64__(LODWORD(v269), v265);
                *(_QWORD *)&v477.y = __PAIR64__(LODWORD(v269), v266);
                *((float *)&v266 + 1) = v270;
                *((float *)&v265 + 1) = v270;
                v478.i64[0] = v266;
                v478.i64[1] = v265;
                if (v212 && -[SKTexture isRotated](v212, "isRotated"))
                {
                  v271 = (int *)((char *)&SKCTileMapNode::_generateRenderData(SKCRenderInfo *)::rotationIndexOffsets
                               + 16 * v214);
                  v272 = 4 * v248;
                  *(_QWORD *)(v419 + 8 * (4 * v248)) = *((_QWORD *)&v477.x + v271[3]);
                  v273 = 1;
                  v274 = 2;
                }
                else
                {
                  v275 = (int *)((char *)&SKCTileMapNode::_generateRenderData(SKCRenderInfo *)::rotationIndexOffsets
                               + 16 * v214);
                  v276 = *v275;
                  v271 = v275 + 1;
                  v272 = 4 * v248;
                  *(_QWORD *)(v419 + 8 * (4 * v248)) = *((_QWORD *)&v477.x + v276);
                  v273 = 2;
                  v274 = 3;
                }
                *(_QWORD *)(v419 + 8 * (v272 | 1u)) = *((_QWORD *)&v477.x + *v271);
                v277 = (char *)&SKCTileMapNode::_generateRenderData(SKCRenderInfo *)::rotationIndexOffsets + 16 * v214;
                *(_QWORD *)(v419 + 8 * (v272 | 2u)) = *((_QWORD *)&v477.x + *(int *)&v277[4 * v273]);
                *(_QWORD *)(v419 + 8 * (v272 | 3u)) = *((_QWORD *)&v477.x + *(int *)&v277[4 * v274]);
                *(_DWORD *)(v466[12].i64[0] + 4 * v199) &= ~0x80000000;
              }
              *(_QWORD *)&v477.x = &BatchID;
              v278 = std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v465, (unint64_t *)&BatchID, (uint64_t)&std::piecewise_construct, (uint64_t **)&v477);
              ++*((_DWORD *)v278 + 11);
              v279 = (std::__shared_weak_count *)*((_QWORD *)&v476[0] + 1);
              if (*((_QWORD *)&v476[0] + 1))
              {
                v280 = (unint64_t *)(*((_QWORD *)&v476[0] + 1) + 8);
                do
                  v281 = __ldaxr(v280);
                while (__stlxr(v281 - 1, v280));
                if (!v281)
                {
                  ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
                  std::__shared_weak_count::__release_weak(v279);
                }
              }

              v213 = v433;
              goto LABEL_220;
            }
          }
        }
        v213 = 0;
        v212 = 0;
        v203 = 0;
        goto LABEL_165;
      }
      v4 = v458;
      objc_msgSend(v458, "tileSize");
      v187 = v186;
      objc_msgSend(v458, "tileSize");
      v188 = v187;
      v190 = v189;
      v191 = *((_OWORD *)v467 + 21);
      LODWORD(v192) = HIDWORD(v467[42]);
      v193 = v190 * 0.5;
      v194 = v188 * 0.5;
      if (v467[74] == (id)2)
      {
        v406 = (float)(v194 * 1.5) / *(float *)&v191;
        v389 = 0.0;
        v403 = v190 / v192;
        v400 = v193 / v192;
      }
      else
      {
        v403 = (float)(v193 * 1.5) / v192;
        v400 = 0.0;
        v406 = v188 / *(float *)&v191;
        v389 = v194 / *(float *)&v191;
      }
      v284 = *((unsigned __int8 *)v467 + 613);
      if (!*((_BYTE *)v467 + 613))
        goto LABEL_302;
      v388 = ~v411 >> 16;
      v285.i64[1] = v416.i64[1];
      v285.f32[0] = (float)(v188 / *(float *)&v191) / v188;
      v285.f32[1] = (float)(v190 / v192) / v190;
      v286 = *((unsigned __int8 *)v467 + 612);
      v394 = v285;
      while (1)
      {
        v287 = v284 - 1;
        if (v286)
          break;
LABEL_300:
        v282 = v284 < 2;
        v284 = v287;
        if (v282)
          goto LABEL_302;
      }
      v392 = v284;
      v288 = 0;
      v289 = v287 + v388 * *((unsigned __int8 *)v467 + 613);
      if (v289 >= 0)
        v290 = v289 & 1;
      else
        v290 = -(v289 & 1);
      v410 = v389 * (float)v290;
      while (1)
      {
        v291 = v288 + v286 * v287;
        v292 = *(unsigned __int16 *)(v466[12].i64[0] + 4 * v291);
        if ((_DWORD)v292 != 0xFFFF)
        {
          objc_msgSend(v4, "tileSet");
          v294 = (SKTexture *)objc_claimAutoreleasedReturnValue();
          if (!v294)
          {
            v471 = 0;
            v293 = 0;
            goto LABEL_248;
          }
          objc_msgSend(v4, "tileSet");
          v295 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v295, "tileDefinitions");
          v296 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v296)
          {
            v471 = 0;
            v293 = 0;
            v305 = 0;
            goto LABEL_245;
          }
          objc_msgSend(v4, "tileSet");
          v297 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v297, "tileDefinitions");
          v298 = (void *)objc_claimAutoreleasedReturnValue();
          v299 = objc_msgSend(v298, "count") > v292;

          if (v299)
          {
            objc_msgSend(v458, "tileSet");
            v300 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v300, "tileDefinitions");
            v301 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v301, "objectAtIndexedSubscript:", v292);
            v471 = (void *)objc_claimAutoreleasedReturnValue();

            v302 = objc_msgSend(v471, "currentFrameIndex");
            objc_msgSend(v471, "textures");
            v303 = (void *)objc_claimAutoreleasedReturnValue();
            if (objc_msgSend(v303, "count") <= (unint64_t)v302)
            {
              v293 = 0;
            }
            else
            {
              objc_msgSend(v471, "textures");
              v304 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v304, "objectAtIndexedSubscript:", v302);
              v293 = (SKTexture *)(id)objc_claimAutoreleasedReturnValue();

            }
            objc_msgSend(v471, "normalTextures");
            v294 = (SKTexture *)objc_claimAutoreleasedReturnValue();
            if (-[SKTexture count](v294, "count") <= (unint64_t)v302)
            {
              v305 = 0;
            }
            else
            {
              objc_msgSend(v471, "normalTextures");
              v295 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v295, "objectAtIndexedSubscript:", v302);
              v305 = (SKTexture *)(id)objc_claimAutoreleasedReturnValue();

LABEL_245:
            }

            v294 = v305;
            goto LABEL_248;
          }
        }
        v471 = 0;
        v293 = 0;
        v294 = 0;
LABEL_248:
        BatchID = 0;
        BatchID = generateBatchID(v293, v294);
        if (std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::find<unsigned long long>(v465, (unint64_t *)&BatchID))
        {
          *(_QWORD *)&v477.x = &BatchID;
          v306 = std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v465, (unint64_t *)&BatchID, (uint64_t)&std::piecewise_construct, (uint64_t **)&v477);
          v442 = v294;
          v307 = v291;
          v308 = (id)v306[3];
          v446 = (id)v306[4];
          v309 = v306[5];
          v310 = *((_BYTE *)v467 + 612);
          -[SKTexture textureRect](v293, "textureRect");
          v311 = v490.origin.x;
          v312 = v490.origin.y;
          v313 = v490.size.width;
          v314 = v490.size.height;
          v315 = CGRectGetMinX(v490);
          v491.origin.x = v311;
          v491.origin.y = v312;
          v491.size.width = v313;
          v491.size.height = v314;
          v316 = CGRectGetMaxX(v491);
          v492.origin.x = v311;
          v492.origin.y = v312;
          v492.size.width = v313;
          v492.size.height = v314;
          v317 = CGRectGetMinY(v492);
          v493.origin.x = v311;
          v493.origin.y = v312;
          v493.size.width = v313;
          v493.size.height = v314;
          v318 = CGRectGetMaxY(v493);
          -[SKTexture cropOffset](v293, "cropOffset");
          v477.x = v319;
          v477.y = v320;
          v455 = sk_vector_make((float64x2_t *)&v477);
          -[SKTexture cropScale](v293, "cropScale");
          v477.x = v321;
          v477.y = v322;
          v437 = sk_vector_make((float64x2_t *)&v477);
          -[SKTexture _backingTexture](v293, "_backingTexture");
          v323 = v315;
          v324 = v316;
          v325 = v317;
          v326 = v318;
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)&v477.x + 24))(*(_QWORD *)&v477.x) == 1)
          {
            v323 = v323 * (float)(***(unsigned int (****)(_QWORD))&v477.x)(*(_QWORD *)&v477.x);
            v324 = v324 * (float)(***(unsigned int (****)(_QWORD))&v477.x)(*(_QWORD *)&v477.x);
            v325 = v325
                 * (float)(*(unsigned int (**)(_QWORD))(**(_QWORD **)&v477.x + 8))(*(_QWORD *)&v477.x);
            v326 = v326
                 * (float)(*(unsigned int (**)(_QWORD))(**(_QWORD **)&v477.x + 8))(*(_QWORD *)&v477.x);
          }
          v327 = -[SKTexture isFlipped](v293, "isFlipped");
          if (v327)
            v328 = v326;
          else
            v328 = v325;
          v463 = v328;
          if (!v327)
            v325 = v326;
          v434 = *((_OWORD *)v467 + 21);
          v329 = objc_msgSend(v471, "flipVertically");
          v330 = (int8x16_t)(unint64_t)v455;
          if (v329)
          {
            *(float *)&v330.i32[1] = -v455.f32[1];
            v428 = v325;
            v431 = v330;
          }
          else
          {
            v428 = v463;
            v431 = (int8x16_t)(unint64_t)v455;
            v463 = v325;
          }
          v331 = objc_msgSend(v471, "flipHorizontally");
          if (v331)
            v332 = v324;
          else
            v332 = v323;
          v450 = v332;
          if (v331)
            v333 = v323;
          else
            v333 = v324;
          v456 = v333;
          if (v331)
            v334 = -1;
          else
            v334 = 0;
          -[SKTexture size](v293, "size");
          v422 = v336;
          v425 = v335;
          objc_msgSend(v471, "size");
          v339 = HIDWORD(v309) + v309;
          v340 = v466->i8[4];
          if ((v340 & 1) != 0)
          {
            v341 = 0;
            v344.i64[0] = v434;
            *(float32x2_t *)v342.f32 = v437;
            v342.i64[1] = v418;
            v343.i64[1] = v416.i64[1];
            v344.i64[1] = v416.i64[1];
            v345 = v431;
            *(float *)v345.i32 = -*(float *)v431.i32;
            v346.f64[0] = v425;
            v346.f64[1] = v422;
            v347 = vbslq_s8((int8x16_t)vdupq_n_s32(v334), v345, v431);
            v348 = v337;
            v343.f32[0] = v348;
            v349 = v338;
            v343.f32[1] = v349;
            v350 = vmulq_f32(v342, v343);
            v351 = vmul_f32(v437, vcvt_f32_f64(v346));
            v352 = vcvtq_f64_f32(v351);
            *(float32x2_t *)v353.f32 = vcvt_f32_f64(vdivq_f64(vaddq_f64(vmulq_f64(vsubq_f64(v346, v352), v414), vcvtq_f64_f32(vmul_f32(*(float32x2_t *)v347.i8, v351))), v352));
            v354 = vextq_s8(v347, v347, 8uLL).u64[0];
            v353.i64[1] = v354;
            LOBYTE(v354) = *((_BYTE *)v467 + 612);
            v355 = (float)(unsigned __int16)v411;
            LOBYTE(v355) = *((_BYTE *)v467 + 613);
            v356.i64[1] = 0;
            do
            {
              v356.f32[1] = (float)(v400 * (float)(((_BYTE)v288 + (_BYTE)v411 * v310) & 1))
                          + (float)((float)((float)((float)v388 * (float)LODWORD(v355)) + (float)v287) * v403);
              v356.f32[0] = v410
                          + (float)((float)((float)((float)(unsigned __int16)v411 * (float)v354)
                                          + (float)v288)
                                  * v406);
              *(float32x4_t *)(data + 16 * (4 * v339) + v341 * 16) = vmulq_f32(v344, vsubq_f32(vaddq_f32(v356, vmulq_f32(v394, vmulq_f32(v350, vaddq_f32(v353, (float32x4_t)xmmword_1DC9222B0[v341])))), v417));
              ++v341;
            }
            while (v341 != 4);
            v340 = v466->i8[4];
          }
          if ((v340 & 2) != 0)
          {
            if (-[SKTexture _needsExtrusionWorkaround](v293, "_needsExtrusionWorkaround"))
            {
              v357 = (***(uint64_t (****)(_QWORD))&v477.x)(*(_QWORD *)&v477.x);
              v358 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v477.x + 8))(*(_QWORD *)&v477.x);
              v359 = 0.25 / (float)v357;
              v360 = 0.25 / (float)v358;
              if (v450 >= v456)
                v361 = -v359;
              else
                v361 = 0.25 / (float)v357;
              *(float *)&v362 = v450 + v361;
              if ((float)(v450 + v361) >= v456)
                v359 = -v359;
              *(float *)&v363 = v456 - v359;
              v364 = -v360;
              if (v428 >= v463)
                v365 = -v360;
              else
                v365 = 0.25 / (float)v358;
              v366 = v428 + v365;
              if ((float)(v428 + v365) < v463)
                v364 = 0.25 / (float)v358;
              v367 = v463 - v364;
            }
            else
            {
              v367 = v463;
              *(float *)&v362 = v450;
              *(float *)&v363 = v456;
              v366 = v428;
            }
            v368 = __PAIR64__(LODWORD(v366), v362);
            v369 = __PAIR64__(LODWORD(v366), v363);
            *((float *)&v363 + 1) = v367;
            *((float *)&v362 + 1) = v367;
            if (v293)
            {
              v438 = __PAIR64__(LODWORD(v366), v363);
              v464 = __PAIR64__(LODWORD(v366), v362);
              v451 = v362;
              v457 = v363;
              if (-[SKTexture isRotated](v293, "isRotated"))
              {
                v368 = v451;
                v370 = v457;
                v369 = v464;
                v363 = v438;
              }
              else
              {
                v368 = v464;
                v369 = v438;
                v363 = v457;
                v370 = v451;
              }
            }
            else
            {
              v370 = v362;
            }
            *(_QWORD *)(v419 + 8 * (4 * v339)) = v368;
            *(_QWORD *)(v419 + 8 * ((4 * v339) | 1u)) = v369;
            *(_QWORD *)(v419 + 8 * ((4 * v339) | 2u)) = v363;
            *(_QWORD *)(v419 + 8 * ((4 * v339) | 3u)) = v370;
            *(_DWORD *)(v466[12].i64[0] + 4 * v307) &= ~0x80000000;
          }
          *(_QWORD *)&v476[0] = &BatchID;
          v371 = std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v465, (unint64_t *)&BatchID, (uint64_t)&std::piecewise_construct, (uint64_t **)v476);
          ++*((_DWORD *)v371 + 11);
          v372 = v477.y;
          if (*(_QWORD *)&v477.y)
          {
            v373 = (unint64_t *)(*(_QWORD *)&v477.y + 8);
            do
              v374 = __ldaxr(v373);
            while (__stlxr(v374 - 1, v373));
            if (!v374)
            {
              (*(void (**)(CGFloat))(**(_QWORD **)&v372 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v372));
              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v372);
            }
          }

          v294 = v442;
        }

        ++v288;
        v286 = *((unsigned __int8 *)v467 + 612);
        v4 = v458;
        if (v288 >= v286)
        {
          v284 = v392;
          goto LABEL_300;
        }
      }
    }
    v466->i8[4] = v30 & 0xFB;
    if ((v30 & 8) == 0)
    {
      v57 = v466;
      std::shared_ptr<jet_buffer_pool>::reset[abi:ne180100]((simd_float4 *)v466[5].i64);
      std::shared_ptr<jet_buffer_pool>::reset[abi:ne180100]((simd_float4 *)v466[6].i64);
      std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::clear((uint64_t)&v466[7]);
      v58 = v466->i8[4] | 8;
      goto LABEL_306;
    }
LABEL_307:
    v376 = v393;
    v377 = (id *)v393[1];
    if (v377)
    {
      do
      {
        v378 = v377;
        v377 = (id *)*v377;
      }
      while (v377);
    }
    else
    {
      do
      {
        v378 = (id *)v376[2];
        _ZF = *v378 == v376;
        v376 = v378;
      }
      while (!_ZF);
    }
    v5 = v378;
    v3 = v467;
  }
  while (v378 != v390);
  if (!*((_DWORD *)v467 + 154))
  {
LABEL_315:
    v379 = 0;
    goto LABEL_316;
  }
  v379 = *((unsigned __int8 *)v467 + 613) * *((unsigned __int8 *)v467 + 612);
LABEL_316:
  v380 = v475;
  if (v475)
  {
    p_shared_owners = (unint64_t *)&v475->__shared_owners_;
    do
      v382 = __ldaxr(p_shared_owners);
    while (__stlxr(v382 - 1, p_shared_owners));
    if (!v382)
    {
      ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
      std::__shared_weak_count::__release_weak(v380);
    }
  }

  return v379;
}

void sub_1DC88B258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a68;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;

  v73 = (std::__shared_weak_count *)STACK[0x278];
  if (STACK[0x278])
  {
    p_shared_owners = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(p_shared_owners);
    while (__stlxr(v75 - 1, p_shared_owners));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }

  _Unwind_Resume(a1);
}

uint64_t SKCRendererGenerateQuadIndexBufferData<unsigned int>(unsigned int **a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t i;

  v1 = *a1;
  v2 = v1[12];
  result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
  if ((_DWORD)v2)
  {
    for (i = 0; i != v2; ++i)
      *(_DWORD *)(result + 4 * i) = dword_1DC92237C[i % 6] + 4 * (i / 6);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<jet_buffer>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<jet_buffer>>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<jet_buffer>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

uint64_t generateBatchID(SKTexture *a1, SKTexture *a2)
{
  SKTexture *v3;
  SKTexture *v4;
  SKTexture *v5;
  unsigned int v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    -[SKTexture _backingTexture](v3, "_backingTexture");
    if (v19)
    {
      -[SKTexture _backingTexture](v3, "_backingTexture");
      v6 = v17;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)())v18->__on_zero_shared)();
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    if (!v20)
      goto LABEL_15;
    v10 = (unint64_t *)&v20->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)())v20->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v20);
      if (v5)
        goto LABEL_16;
    }
    else
    {
LABEL_15:
      if (v5)
        goto LABEL_16;
    }
LABEL_9:
    v9 = 0;
    goto LABEL_28;
  }
  v6 = 0;
  if (!v4)
    goto LABEL_9;
LABEL_16:
  -[SKTexture _backingTexture](v5, "_backingTexture");
  if (v19)
  {
    -[SKTexture _backingTexture](v5, "_backingTexture");
    v9 = v17 << 32;
    if (v18)
    {
      v12 = (unint64_t *)&v18->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)())v18->__on_zero_shared)();
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    v9 = 0;
  }
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)())v20->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v20);
    }
  }
LABEL_28:

  return v9 | v6;
}

void sub_1DC88BA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

__n64 SKCTileMapNode::_chunkCoordinatesFromChunkID(SKCTileMapNode *this, int a2)
{
  __n64 result;

  result.n64_f32[0] = (float)(unsigned __int16)a2;
  result.n64_f32[1] = (float)(~a2 >> 16);
  return result;
}

void SKCTileMapNode::setShader(id *this, SKShader *a2)
{
  objc_storeStrong(this + 71, a2);
  SKCNode::setDirty((SKCNode *)this);
  SKCNode::recomputeFlags((SKCNode *)this, 1);
}

void SKCTileMapNode::subclassRecomputeFlags(id *this)
{
  if (objc_msgSend(this[71], "_usesTimeUniform")
    && !*((_BYTE *)this + 172)
    && (*((_BYTE *)this + 171) & 0x60) != 0)
  {
    SKCNode::setFlags((SKCNode *)this, 2, 1);
  }
}

void SKCTileMapNode::setTile(SKCTileMapNode *this, unsigned int a2, unsigned int a3)
{
  uint64_t *v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;
  SKCTileMapNode *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  v6 = SKCTileMapNode::_ensureChunkForTileIndex(this, a2);
  v7 = *((_DWORD *)this + 151);
  v8 = a2 / v7;
  v9 = (unsigned __int16)(a2 % v7);
  v10 = (unsigned __int16)v8;
  v11 = v9 % *((unsigned __int8 *)this + 612)
      + (unsigned __int16)v8 % *((unsigned __int8 *)this + 613)
      * (unint64_t)*((unsigned __int8 *)this + 612);
  v12 = *(_DWORD *)(v6[24] + 4 * v11);
  v13 = v12 & 0x7FFFFFFF;
  if ((v12 & 0x7FFFFFFF) == a3)
    goto LABEL_24;
  v14 = v6;
  if (a3 != 0x7FFFFFFF && v13 == 0x7FFFFFFF)
  {
    ++*((_DWORD *)v6 + 2);
LABEL_11:
    v15 = this;
    v16 = (uint64_t)v14;
    LOWORD(v13) = a3;
    v17 = 1;
    goto LABEL_12;
  }
  if (a3 != 0x7FFFFFFF || v13 == 0x7FFFFFFF)
  {
    if (a3 == 0x7FFFFFFF || v13 == 0x7FFFFFFF)
      goto LABEL_13;
    SKCTileMapNode::_cacheTileIfAnimated((uint64_t)this, (uint64_t)v6, v12, -1);
    goto LABEL_11;
  }
  v15 = this;
  v16 = (uint64_t)v14;
  v17 = -1;
LABEL_12:
  SKCTileMapNode::_cacheTileIfAnimated((uint64_t)v15, v16, v13, v17);
LABEL_13:
  v18 = a3 | 0x80000000;
  if (v12 >= 0)
    v18 = a3;
  *(_DWORD *)(v14[24] + 4 * v11) = v18;
  *((_BYTE *)v14 + 4) |= 3u;
  v19 = *((_DWORD *)this + 156);
  if (v19 >= v9)
    v19 = v9;
  *((_DWORD *)this + 156) = v19;
  v20 = *((_DWORD *)this + 157);
  if (v20 >= v10)
    v20 = v10;
  *((_DWORD *)this + 157) = v20;
  v21 = *((_DWORD *)this + 158);
  if (v9 > v21)
    v21 = v9;
  *((_DWORD *)this + 158) = v21;
  v22 = *((_DWORD *)this + 159);
  if (v10 > v22)
    v22 = v10;
  *((_DWORD *)this + 159) = v22;
LABEL_24:
  SKCNode::setDirty(this);
}

uint64_t *SKCTileMapNode::_ensureChunkForTileIndex(SKCTileMapNode *this, unsigned int a2)
{
  id v4;
  unsigned int v5;
  uint64_t *i;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  double v11;
  double v12;
  float v13;
  double v14;
  float v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  uint64_t v21;
  int8x16_t v22;
  float v23;
  float v24;
  float v25;
  float32x2_t v26;
  float32x2_t v27;
  int32x2_t v28;
  float32x2_t v29;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t *v38;
  unsigned int v40;
  unsigned int *v41;

  v4 = *((id *)this + 1);
  v5 = ((unsigned __int16)(a2 % *((_DWORD *)this + 151)) / *((unsigned __int8 *)this + 612)) | (~((unsigned __int16)(a2 / *((_DWORD *)this + 151)) / *((unsigned __int8 *)this + 613)) << 16);
  v40 = v5;
  for (i = (uint64_t *)*((_QWORD *)this + 81); i; i = (uint64_t *)*i)
  {
    v7 = *((_DWORD *)i + 8);
    if (v5 >= v7)
    {
      if (v7 >= v5)
        goto LABEL_14;
      ++i;
    }
  }
  v8 = operator new();
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 144) = 1065353216;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_DWORD *)(v8 + 184) = 1065353216;
  *(_DWORD *)v8 = v40;
  v9 = 4 * *((unsigned __int8 *)this + 612) * (unint64_t)*((unsigned __int8 *)this + 613);
  *(_DWORD *)(v8 + 8) = 0;
  v10 = malloc_type_malloc(v9, 0xF2593FF9uLL);
  *(_QWORD *)(v8 + 192) = v10;
  memset(v10, 255, v9);
  objc_msgSend(v4, "tileSize");
  v12 = v11;
  objc_msgSend(v4, "tileSize");
  v13 = v12;
  v15 = v14;
  v16 = (float32x2_t)__PAIR64__(LODWORD(v15), LODWORD(v13));
  LOBYTE(v14) = *((_BYTE *)this + 612);
  v17.f32[0] = (float)LODWORD(v14);
  LOBYTE(v14) = *((_BYTE *)this + 613);
  v17.f32[1] = (float)LODWORD(v14);
  v18.f32[0] = (float)(unsigned __int16)v40;
  v18.f32[1] = (float)(~v40 >> 16);
  v19 = vmul_f32((float32x2_t)__PAIR64__(LODWORD(v15), LODWORD(v13)), v17);
  v20 = vmul_f32(v17, vadd_f32(v18, (float32x2_t)0x3F0000003F000000));
  v21 = *((_QWORD *)this + 74);
  if (v21 == 3)
  {
    v26 = (float32x2_t)1056964608;
    v27 = (float32x2_t)0x3F4000003F800000;
    v22 = (int8x16_t)SKCBoundingBoxEmpty;
  }
  else
  {
    v22 = (int8x16_t)SKCBoundingBoxEmpty;
    if (v21 != 2)
    {
      if (v21 == 1)
      {
        v23 = vmuls_lane_f32(0.5, v20, 1);
        v24 = vmlas_n_f32(v23, 0.5, v20.f32[0]);
        v25 = vmlas_n_f32(v23, -0.5, v20.f32[0]);
        v20.f32[0] = v24 + 0.0;
        v20.f32[1] = (float)(v25 + -0.5)
                   + (float)((float)(v13 / (float)(v13 + v15))
                           + (float)((float)*((unsigned int *)this + 151)
                                   * (float)((float)*((unsigned int *)this + 151)
                                           / (float)(*((_DWORD *)this + 152) + *((_DWORD *)this + 151)))));
      }
      goto LABEL_13;
    }
    v26 = (float32x2_t)0x3F00000000000000;
    v27 = (float32x2_t)0x3F8000003F400000;
  }
  v28 = vcvt_s32_f32(v20);
  v29 = vmla_f32(vmul_f32(v26, (float32x2_t)vrev64_s32((int32x2_t)vcvt_f32_s32(vsub_s32(v28, (int32x2_t)(*(_QWORD *)&vsra_n_u32((uint32x2_t)v28, (uint32x2_t)v28, 0x1FuLL) & 0xFFFFFFFEFFFFFFFELL))))), v27, v20);
  __asm { FMOV            V2.2S, #1.5 }
  v19 = vmul_f32(v19, _D2);
  v20 = v29;
LABEL_13:
  v35 = xmmword_1DC9223B0;
  v36 = xmmword_1DC9223C0;
  *(float32x2_t *)&v37 = vmul_f32(v16, v20);
  *((_QWORD *)&v37 + 1) = vextq_s8(v22, v22, 8uLL).u64[0];
  *(float *)&v35 = 0.5 * v19.f32[0];
  DWORD1(v36) = vmuls_lane_f32(0.5, v19, 1);
  *(_OWORD *)(v8 + 16) = v37;
  *(_OWORD *)(v8 + 32) = v35;
  *(_OWORD *)(v8 + 48) = v36;
  *(_OWORD *)(v8 + 64) = xmmword_1DC9223D0;
  v41 = &v40;
  std::__tree<std::__value_type<unsigned int,double>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,double>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,double>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 80, &v40, (uint64_t)&std::piecewise_construct, &v41)[5] = (uint64_t *)v8;
  ++*((_DWORD *)this + 154);
LABEL_14:
  v41 = &v40;
  v38 = std::__tree<std::__value_type<unsigned int,double>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,double>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,double>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 80, &v40, (uint64_t)&std::piecewise_construct, &v41)[5];

  return v38;
}

void sub_1DC88BFE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCTileMapNode::_cacheTileIfAnimated(uint64_t a1, uint64_t a2, unsigned __int16 a3, int a4)
{
  id v8;
  void *v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned __int16 v20;
  unsigned __int16 *v21;

  if (a2)
  {
    v20 = a3;
    if (a3 != 0xFFFF)
    {
      v8 = *(id *)(a1 + 8);
      objc_msgSend(v8, "tileSet");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "tileDefinitions");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "count");
      v12 = a3;

      if (v11 > a3)
      {
        objc_msgSend(v8, "tileSet");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "tileDefinitions");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "objectAtIndexedSubscript:", v12);
        v15 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v15, "textures");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "count");

        if (v17 >= 2)
        {
          v18 = (_QWORD *)(a2 + 152);
          if (!std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::find<unsigned short>(v18, &v20))
          {
            v21 = &v20;
            *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t)v18, &v20, (uint64_t)&std::piecewise_construct, &v21)+ 5) = 0;
            ++*(_DWORD *)(a1 + 620);
          }
          v21 = &v20;
          v19 = std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t)v18, &v20, (uint64_t)&std::piecewise_construct, &v21);
          *((_DWORD *)v19 + 5) += a4;
          v21 = &v20;
          if (*((int *)std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t)v18, &v20, (uint64_t)&std::piecewise_construct, &v21)+ 5) <= 0)
          {
            std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::__erase_unique<unsigned short>(v18, &v20);
            --*(_DWORD *)(a1 + 620);
          }
          SKCNode::recomputeFlags((SKCNode *)a1, 1);
        }

      }
    }
  }
}

void sub_1DC88C1D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void SKCTileMapNode::setAllTiles(SKCTileMapNode *this, unsigned int a2)
{
  int v3;
  unsigned int i;

  v3 = *((_DWORD *)this + 152) * *((_DWORD *)this + 151);
  if (v3)
  {
    for (i = 0; i != v3; ++i)
      SKCTileMapNode::setTile(this, i, a2);
  }
  SKCNode::setDirty(this);
}

_DWORD *SKCTileMapNode::getRawTilesCopy(SKCTileMapNode *this)
{
  uint64_t v1;
  _DWORD *v3;
  uint64_t i;

  v1 = (*((_DWORD *)this + 152) * *((_DWORD *)this + 151));
  if (!(_DWORD)v1)
    return 0;
  v3 = malloc_type_malloc(4 * (*((_DWORD *)this + 152) * *((_DWORD *)this + 151)), 0x100004052888210uLL);
  for (i = 0; i != v1; ++i)
    v3[i] = SKCTileMapNode::getRawTile(this, i);
  return v3;
}

uint64_t SKCTileMapNode::getRawTile(SKCTileMapNode *this, unsigned int a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t **v10;
  unsigned int v11;
  unsigned int v13;
  unsigned int *v14;

  v2 = *((_DWORD *)this + 151);
  v3 = a2 / v2;
  v4 = a2 % v2;
  v5 = *((unsigned __int8 *)this + 612);
  v6 = *((unsigned __int8 *)this + 613);
  v7 = ((unsigned __int16)v4 / v5) | (~((unsigned __int16)v3 / v6) << 16);
  v13 = v7;
  v8 = (uint64_t *)*((_QWORD *)this + 81);
  if (!v8)
    return 0x7FFFFFFFLL;
  v10 = (uint64_t **)((char *)this + 640);
  while (1)
  {
    v11 = *((_DWORD *)v8 + 8);
    if (v7 >= v11)
      break;
LABEL_6:
    v8 = (uint64_t *)*v8;
    if (!v8)
      return 0x7FFFFFFFLL;
  }
  if (v11 < v7)
  {
    ++v8;
    goto LABEL_6;
  }
  v14 = &v13;
  return *(_DWORD *)(std::__tree<std::__value_type<unsigned int,double>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,double>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,double>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v10, &v13, (uint64_t)&std::piecewise_construct, &v14)[5][24]+ 4 * (v4 % v5 + (unsigned __int16)(v3 % (int)v6) * *((unsigned __int8 *)this + 612))) & 0x7FFFFFFF;
}

SKCTileMapNode *SKCTileMapNode::copyRawTilesIntoArray(SKCTileMapNode *this, unsigned int *a2)
{
  SKCTileMapNode *v2;
  uint64_t v3;
  uint64_t i;

  if (a2)
  {
    v2 = this;
    v3 = (*((_DWORD *)this + 152) * *((_DWORD *)this + 151));
    if ((_DWORD)v3)
    {
      for (i = 0; i != v3; ++i)
      {
        this = (SKCTileMapNode *)SKCTileMapNode::getRawTile(v2, i);
        a2[i] = this;
      }
    }
  }
  return this;
}

SKCTileMapNode *SKCTileMapNode::copyRawTilesIntoArray(SKCTileMapNode *this, unsigned int *a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  unsigned int v7;
  SKCTileMapNode *v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;

  if (a2)
  {
    v7 = a4;
    v9 = this;
    v10 = *((_DWORD *)this + 151);
    v11 = *((_DWORD *)this + 152);
    v12 = v11 * v10 && v10 > a3;
    v13 = !v12 || a6 == 0;
    v14 = v13 || a5 == 0;
    if (!v14 && v11 >= a4)
    {
      v17 = 0;
      do
      {
        if (v7 >= *((_DWORD *)v9 + 152))
          break;
        v18 = v17 * a5;
        v19 = *((_DWORD *)v9 + 151) * v7;
        v20 = a5;
        v21 = a3;
        do
        {
          if (v21 >= *((_DWORD *)v9 + 151))
            break;
          this = (SKCTileMapNode *)SKCTileMapNode::getRawTile(v9, v19 + v21);
          a2[v18++] = this;
          ++v21;
          --v20;
        }
        while (v20);
        ++v17;
        ++v7;
      }
      while (v17 != a6);
    }
  }
  return this;
}

void SKCTileMapNode::copyRawTilesFromArray(SKCTileMapNode *this, unsigned int *a2)
{
  uint64_t v3;
  uint64_t i;

  if (a2)
  {
    v3 = (*((_DWORD *)this + 152) * *((_DWORD *)this + 151));
    if ((_DWORD)v3)
    {
      for (i = 0; i != v3; ++i)
        SKCTileMapNode::setTile(this, i, a2[i]);
    }
  }
}

void SKCTileMapNode::copyRawTilesFromArray(SKCTileMapNode *this, unsigned int *a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  unsigned int v7;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;

  if (a2)
  {
    v7 = a4;
    v10 = *((_DWORD *)this + 151);
    v11 = *((_DWORD *)this + 152);
    v12 = v11 * v10 && v10 > a3;
    v13 = !v12 || a6 == 0;
    v14 = v13 || a5 == 0;
    if (!v14 && v11 >= a4)
    {
      v17 = 0;
      do
      {
        if (v7 >= *((_DWORD *)this + 152))
          break;
        v18 = *((_DWORD *)this + 151) * v7;
        v19 = v17 * a5;
        v20 = a5;
        v21 = a3;
        do
        {
          if (v21 >= *((_DWORD *)this + 151))
            break;
          v22 = v19 + 1;
          SKCTileMapNode::setTile(this, v18 + v21++, a2[v19]);
          v19 = v22;
          --v20;
        }
        while (v20);
        ++v17;
        ++v7;
      }
      while (v17 != a6);
    }
  }
}

uint64_t SKCTileMapNode::_chunkIDFromTileIndex(SKCTileMapNode *this, unsigned int a2)
{
  return ((unsigned __int16)(a2 % *((_DWORD *)this + 151)) / *((unsigned __int8 *)this + 612)) | (~((unsigned __int16)(a2 / *((_DWORD *)this + 151)) / *((unsigned __int8 *)this + 613)) << 16);
}

void SKCTileMapNode::setRawTiles(SKCTileMapNode *this, const unsigned int *a2, int a3, int a4)
{
  char *v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t i;

  *((_DWORD *)this + 151) = a3;
  *((_DWORD *)this + 152) = a4;
  v8 = (char *)this + 640;
  v9 = (_QWORD *)*((_QWORD *)this + 80);
  v10 = (_OWORD *)((char *)this + 648);
  if (v9 != (_QWORD *)((char *)this + 648))
  {
    do
    {
      free(*(void **)(v9[5] + 192));
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != (_QWORD *)v10);
  }
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy((uint64_t)v8, *((_QWORD **)this + 81));
  *((_QWORD *)this + 80) = v10;
  *v10 = 0u;
  if (a3 && a4)
  {
    if (a2)
    {
      v14 = (a4 * a3);
      if ((_DWORD)v14)
      {
        for (i = 0; i != v14; ++i)
          SKCTileMapNode::setTile(this, i, a2[i]);
      }
    }
    else
    {
      SKCTileMapNode::setAllTiles(this, 0x7FFFFFFFu);
    }
  }
  SKCNode::setDirty(this);
}

uint64_t SKCTileMapNode::setTileSetType(uint64_t this, SKTileSetType a2)
{
  *(_QWORD *)(this + 592) = a2;
  return this;
}

void SKCTileMapNode::setChunkSize(SKCTileMapNode *this, int a2, int a3)
{
  char v3;
  char v4;
  unsigned int *RawTilesCopy;

  v3 = a3;
  v4 = a2;
  if (*((unsigned __int8 *)this + 612) != a2 || *((unsigned __int8 *)this + 613) != a3)
  {
    RawTilesCopy = SKCTileMapNode::getRawTilesCopy(this);
    *((_BYTE *)this + 612) = v4;
    *((_BYTE *)this + 613) = v3;
    SKCTileMapNode::setRawTiles(this, RawTilesCopy, *((_DWORD *)this + 151), *((_DWORD *)this + 152));
    if (RawTilesCopy)
      free(RawTilesCopy);
  }
}

void SKCTileMapNode::forceRedraw(SKCTileMapNode **this, int a2)
{
  SKCTileMapNode *v4;
  char v5;
  SKCTileMapNode *v6;
  SKCTileMapNode *v7;
  BOOL v8;

  SKCNode::setDirty((SKCNode *)this);
  v4 = this[80];
  if (v4 != (SKCTileMapNode *)(this + 81))
  {
    if (a2)
      v5 = 3;
    else
      v5 = 1;
    do
    {
      *(_BYTE *)(*((_QWORD *)v4 + 5) + 4) |= v5;
      v6 = (SKCTileMapNode *)*((_QWORD *)v4 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(SKCTileMapNode **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (SKCTileMapNode *)*((_QWORD *)v4 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != (SKCTileMapNode *)(this + 81));
  }
}

double SKCTileMapNode::clearModifiedTileTracking(SKCTileMapNode *this)
{
  double result;

  result = NAN;
  *((_OWORD *)this + 39) = xmmword_1DC922240;
  return result;
}

_QWORD *std::shared_ptr<jet_buffer>::shared_ptr[abi:ne180100]<jet_buffer,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1EA4FF0D8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DC88C918(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_buffer *,std::shared_ptr<jet_buffer>::__shared_ptr_default_delete<jet_buffer,jet_buffer>,std::allocator<jet_buffer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

uint64_t std::__shared_ptr_pointer<jet_buffer *,std::shared_ptr<jet_buffer>::__shared_ptr_default_delete<jet_buffer,jet_buffer>,std::allocator<jet_buffer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_buffer *,std::shared_ptr<jet_buffer>::__shared_ptr_default_delete<jet_buffer,jet_buffer>,std::allocator<jet_buffer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<jet_buffer>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t std::__split_buffer<std::shared_ptr<jet_buffer>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::find<unsigned long long>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1DC88CDB4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::find<unsigned short>(_QWORD *a1, unsigned __int16 *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int16 *)result + 8) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int16 *)v11 + 8) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_WORD *)v11 + 8) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1DC88D314(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::__erase_unique<unsigned short>(_QWORD *a1, unsigned __int16 *a2)
{
  uint64_t *result;

  result = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::find<unsigned short>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

double sk_vector_min(float32x4_t *a1, float32x4_t *a2)
{
  double result;

  *(_QWORD *)&result = vminnmq_f32(*a1, *a2).u64[0];
  return result;
}

double sk_vector_max(float32x4_t *a1, float32x4_t *a2)
{
  double result;

  *(_QWORD *)&result = vmaxnmq_f32(*a1, *a2).u64[0];
  return result;
}

double SKCBoundingBoxMake(float32x4_t a1)
{
  unsigned int v1;
  float v2;
  unint64_t v3;

  *(float *)&v1 = vmuls_lane_f32(0.5, a1, 2);
  v2 = vmuls_lane_f32(0.5, a1, 3);
  a1.i64[1] = 0x3F80000000000000;
  LODWORD(v3) = 0;
  *((float *)&v3 + 1) = v2;
  a1.i64[0] = vaddq_f32(a1, vaddq_f32((float32x4_t)v1, (float32x4_t)v3)).u64[0];
  return *(double *)a1.i64;
}

BOOL SKCBoundingBoxEquals(const simd_float4x4 *a1, const simd_float4x4 *a2)
{
  float32x4_t v2;
  int8x16_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v12;
  int8x16_t v13;

  v2 = (float32x4_t)a1->columns[1];
  v3 = (int8x16_t)vmulq_f32(v2, v2);
  if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)))) <= 0.0
    || (v4 = (int8x16_t)vmulq_f32((float32x4_t)a1->columns[2], (float32x4_t)a1->columns[2]),
        sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)))) <= 0.0))
  {
    v5 = (int8x16_t)vmulq_f32((float32x4_t)a2->columns[1], (float32x4_t)a2->columns[1]);
    if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)))) <= 0.0)
      return 1;
    v6 = (int8x16_t)vmulq_f32((float32x4_t)a2->columns[2], (float32x4_t)a2->columns[2]);
    if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)))) <= 0.0)
      return 1;
  }
  v7 = vsubq_f32((float32x4_t)a1->columns[0], (float32x4_t)a2->columns[0]);
  v8 = (int8x16_t)vmulq_f32(v7, v7);
  if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)))) > 0.0)
    return 0;
  v9 = vsubq_f32(v2, (float32x4_t)a2->columns[1]);
  v10 = (int8x16_t)vmulq_f32(v9, v9);
  if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)))) > 0.0)
    return 0;
  v12 = vsubq_f32((float32x4_t)a1->columns[2], (float32x4_t)a2->columns[2]);
  v13 = (int8x16_t)vmulq_f32(v12, v12);
  return sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))) <= 0.0;
}

BOOL SKCBoundingBoxIsEmpty(const simd_float4x4 *a1)
{
  int8x16_t v1;
  int8x16_t v2;

  v1 = (int8x16_t)vmulq_f32((float32x4_t)a1->columns[1], (float32x4_t)a1->columns[1]);
  if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)))) <= 0.0)
    return 1;
  v2 = (int8x16_t)vmulq_f32((float32x4_t)a1->columns[2], (float32x4_t)a1->columns[2]);
  return sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)))) <= 0.0;
}

float32x4_t SKCBoundingBoxUnion(const simd_float4x4 *a1, const simd_float4x4 *a2)
{
  float32x4_t v2;
  int8x16_t v3;
  float32x4_t v4;
  int8x16_t v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t result;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t v20;
  unint64_t v21;
  _OWORD v23[4];
  _OWORD v24[4];

  v2 = (float32x4_t)a1->columns[1];
  v3 = (int8x16_t)vmulq_f32(v2, v2);
  if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)))) <= 0.0)
    return (float32x4_t)a2->columns[0];
  v4 = (float32x4_t)a1->columns[2];
  v5 = (int8x16_t)vmulq_f32(v4, v4);
  if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)))) <= 0.0)
  {
    return (float32x4_t)a2->columns[0];
  }
  else
  {
    v6 = (float32x4_t)a2->columns[1];
    v7 = (int8x16_t)vmulq_f32(v6, v6);
    if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) <= 0.0)
      return (float32x4_t)a1->columns[0];
    v8 = (float32x4_t)a2->columns[2];
    v9 = (int8x16_t)vmulq_f32(v8, v8);
    if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) <= 0.0)
    {
      return (float32x4_t)a1->columns[0];
    }
    else
    {
      v10 = 0;
      v11 = vsubq_f32((float32x4_t)a1->columns[0], v2);
      v12 = vaddq_f32(v2, (float32x4_t)a1->columns[0]);
      v24[0] = vsubq_f32(v11, v4);
      v24[1] = vsubq_f32(v12, v4);
      v24[2] = vaddq_f32(v12, v4);
      v24[3] = vaddq_f32(v11, v4);
      result = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
      v14.i64[0] = 0x80000000800000;
      v14.i64[1] = 0x80000000800000;
      do
      {
        v15 = (float32x4_t)v24[v10];
        result = vminnmq_f32(v15, result);
        v14 = vmaxnmq_f32(v15, v14);
        ++v10;
      }
      while (v10 != 4);
      v16 = 0;
      v17 = vsubq_f32((float32x4_t)a2->columns[0], v6);
      v18 = vaddq_f32(v6, (float32x4_t)a2->columns[0]);
      v23[0] = vsubq_f32(v17, v8);
      v23[1] = vsubq_f32(v18, v8);
      v23[2] = vaddq_f32(v18, v8);
      v23[3] = vaddq_f32(v17, v8);
      do
      {
        v19 = (float32x4_t)v23[v16];
        result = vminnmq_f32(v19, result);
        v14 = vmaxnmq_f32(v19, v14);
        ++v16;
      }
      while (v16 != 4);
      v20 = (float32x2_t)vsubq_f32(v14, result).u64[0];
      result.i64[1] = 0x3F80000000000000;
      LODWORD(v21) = 0;
      HIDWORD(v21) = vmuls_lane_f32(0.5, v20, 1);
      result.i64[0] = vaddq_f32(result, vaddq_f32((float32x4_t)COERCE_UNSIGNED_INT(0.5 * v20.f32[0]), (float32x4_t)v21)).u64[0];
    }
  }
  return result;
}

double SKCBoundingBoxGetVerts(const simd_float4x4 *a1)
{
  double result;

  *(_QWORD *)&result = vsubq_f32(vsubq_f32((float32x4_t)a1->columns[0], (float32x4_t)a1->columns[1]), (float32x4_t)a1->columns[2]).u64[0];
  return result;
}

double SKCBoundingBoxIntersection(const simd_float4x4 *a1, const simd_float4x4 *a2)
{
  float32x4_t v2;
  int8x16_t v3;
  float v4;
  double result;
  float32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  int8x16_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x2_t v25;
  unint64_t v26;
  _OWORD v27[4];
  _OWORD v28[4];

  v2 = (float32x4_t)a1->columns[1];
  v3 = (int8x16_t)vmulq_f32(v2, v2);
  v4 = sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL))));
  result = 0.0;
  if (v4 > 0.0)
  {
    v6 = (float32x4_t)a1->columns[2];
    v7 = (int8x16_t)vmulq_f32(v6, v6);
    if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) > 0.0)
    {
      v8 = (float32x4_t)a2->columns[1];
      v9 = (int8x16_t)vmulq_f32(v8, v8);
      if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) > 0.0)
      {
        v10 = (float32x4_t)a2->columns[2];
        v11 = (int8x16_t)vmulq_f32(v10, v10);
        if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))) > 0.0)
        {
          v12 = 0;
          v13 = vsubq_f32((float32x4_t)a1->columns[0], v2);
          v14 = vaddq_f32(v2, (float32x4_t)a1->columns[0]);
          v28[0] = vsubq_f32(v13, v6);
          v28[1] = vsubq_f32(v14, v6);
          v28[2] = vaddq_f32(v14, v6);
          v28[3] = vaddq_f32(v13, v6);
          v15 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
          v16.i64[0] = 0x80000000800000;
          v16.i64[1] = 0x80000000800000;
          do
          {
            v17 = (float32x4_t)v28[v12];
            v15 = vminnmq_f32(v17, v15);
            v16 = vmaxnmq_f32(v17, v16);
            ++v12;
          }
          while (v12 != 4);
          v18 = 0;
          v19 = vsubq_f32((float32x4_t)a2->columns[0], v8);
          v20 = vaddq_f32(v8, (float32x4_t)a2->columns[0]);
          v27[0] = vsubq_f32(v19, v10);
          v27[1] = vsubq_f32(v20, v10);
          v27[2] = vaddq_f32(v20, v10);
          v27[3] = vaddq_f32(v19, v10);
          v21 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
          v22.i64[0] = 0x80000000800000;
          v22.i64[1] = 0x80000000800000;
          do
          {
            v23 = (float32x4_t)v27[v18];
            v21 = vminnmq_f32(v23, v21);
            v22 = vmaxnmq_f32(v23, v22);
            ++v18;
          }
          while (v18 != 4);
          v24 = vmaxnmq_f32(v15, v21);
          v25 = (float32x2_t)vsubq_f32(vminnmq_f32(v16, v22), v24).u64[0];
          v24.i64[1] = 0x3F80000000000000;
          LODWORD(v26) = 0;
          HIDWORD(v26) = vmuls_lane_f32(0.5, v25, 1);
          *(_QWORD *)&result = vaddq_f32(v24, vaddq_f32((float32x4_t)COERCE_UNSIGNED_INT(0.5 * v25.f32[0]), (float32x4_t)v26)).u64[0];
        }
      }
    }
  }
  return result;
}

float32x4_t SKCBoundingBoxGetAABB(const simd_float4x4 *a1)
{
  uint64_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t result;
  float32x4_t v6;
  float32x4_t v7;
  _OWORD v8[4];

  v1 = 0;
  v2 = (float32x4_t)a1->columns[1];
  v3 = vsubq_f32((float32x4_t)a1->columns[0], v2);
  v4 = (float32x4_t)a1->columns[2];
  v8[2] = vaddq_f32(vaddq_f32((float32x4_t)a1->columns[0], v2), v4);
  v8[3] = vaddq_f32(v3, v4);
  result = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  v6.i64[0] = 0x80000000800000;
  v6.i64[1] = 0x80000000800000;
  do
  {
    v7 = (float32x4_t)v8[v1];
    result = vminnmq_f32(v7, result);
    v6 = vmaxnmq_f32(v7, v6);
    ++v1;
  }
  while (v1 != 4);
  return result;
}

BOOL SKCBoundingBoxIntersectsPoint(float32x4_t *a1, double a2)
{
  uint64_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  _OWORD v13[4];

  v2 = 0;
  v3 = a1[1];
  v4 = vsubq_f32(*a1, v3);
  v5 = a1[2];
  v13[2] = vaddq_f32(vaddq_f32(*a1, v3), v5);
  v13[3] = vaddq_f32(v4, v5);
  v6 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  v7.i64[0] = 0x80000000800000;
  v7.i64[1] = 0x80000000800000;
  do
  {
    v8 = (float32x4_t)v13[v2];
    v6 = vminnmq_f32(v8, v6);
    v7 = vmaxnmq_f32(v8, v7);
    ++v2;
  }
  while (v2 != 4);
  return *(float *)&a2 >= v6.f32[0]
      && *(float *)&a2 <= v7.f32[0]
      && *((float *)&a2 + 1) >= v6.f32[1]
      && *((float *)&a2 + 1) <= v7.f32[1];
}

BOOL SKCBoundingBoxIntersectsBoundingBox(const simd_float4x4 *a1, const simd_float4x4 *a2)
{
  float32x4_t v2;
  int8x16_t v3;
  float32x2_t v4;
  float v5;
  float32x4_t v6;
  int8x16_t v7;
  float32x2_t v8;
  float v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x2_t v12;
  float v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x2_t v16;
  float v17;
  uint64_t v18;
  unsigned __int32 v19;
  unsigned __int32 v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x4_t v26;
  unsigned __int32 v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x4_t v30;
  unsigned __int32 v31;
  float32x2_t v32;
  float32x2_t v33;
  char v34;
  uint64_t v35;
  char v36;
  float32x4_t v37;
  uint64_t v38;
  char v39;
  char v40;
  int8x16_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  float32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float v48;
  int8x16_t v49;
  float32x2_t v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  float v58;
  uint64_t v59;
  float v60;
  char v61;
  char v62;
  float v63;
  float v64;
  char v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  _BOOL8 result;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  int8x16_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[2];
  _QWORD v84[2];
  _OWORD v85[2];
  _OWORD v86[2];
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v2 = (float32x4_t)a1->columns[1];
  v3 = (int8x16_t)vmulq_f32(v2, v2);
  v4 = vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
  v5 = sqrtf(vaddv_f32(v4));
  if (v5 > 0.0)
  {
    v6 = (float32x4_t)a1->columns[2];
    v7 = (int8x16_t)vmulq_f32(v6, v6);
    v8 = vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
    v9 = sqrtf(vaddv_f32(v8));
    if (v9 > 0.0)
    {
      v10 = (float32x4_t)a2->columns[1];
      v11 = (int8x16_t)vmulq_f32(v10, v10);
      v12 = vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
      v13 = sqrtf(vaddv_f32(v12));
      if (v13 > 0.0)
      {
        v14 = (float32x4_t)a2->columns[2];
        v15 = (int8x16_t)vmulq_f32(v14, v14);
        v16 = vadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
        v17 = sqrtf(vaddv_f32(v16));
        if (v17 > 0.0)
        {
          v18 = 0;
          v19 = vadd_f32(v4, (float32x2_t)vdup_lane_s32((int32x2_t)v4, 1)).u32[0];
          v20 = vadd_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1)).u32[0];
          v21 = vrsqrte_f32((float32x2_t)v19);
          v22 = vmul_f32(v21, vrsqrts_f32((float32x2_t)v19, vmul_f32(v21, v21)));
          v23 = vmulq_n_f32(v2, vmul_f32(v22, vrsqrts_f32((float32x2_t)v19, vmul_f32(v22, v22))).f32[0]);
          v24 = vrsqrte_f32((float32x2_t)v20);
          v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v20, vmul_f32(v24, v24)));
          v26 = vmulq_n_f32(v6, vmul_f32(v25, vrsqrts_f32((float32x2_t)v20, vmul_f32(v25, v25))).f32[0]);
          v86[0] = v23;
          v86[1] = v26;
          v27 = vadd_f32(v12, (float32x2_t)vdup_lane_s32((int32x2_t)v12, 1)).u32[0];
          v28 = vrsqrte_f32((float32x2_t)v27);
          v29 = vmul_f32(v28, vrsqrts_f32((float32x2_t)v27, vmul_f32(v28, v28)));
          v30 = vmulq_n_f32(v10, vmul_f32(v29, vrsqrts_f32((float32x2_t)v27, vmul_f32(v29, v29))).f32[0]);
          v31 = vadd_f32(v16, (float32x2_t)vdup_lane_s32((int32x2_t)v16, 1)).u32[0];
          v32 = vrsqrte_f32((float32x2_t)v31);
          v33 = vmul_f32(v32, vrsqrts_f32((float32x2_t)v31, vmul_f32(v32, v32)));
          v85[0] = v30;
          v85[1] = vmulq_n_f32(v14, vmul_f32(v33, vrsqrts_f32((float32x2_t)v31, vmul_f32(v33, v33))).f32[0]);
          v34 = 1;
          do
          {
            v35 = 0;
            v36 = v34;
            v37 = (float32x4_t)v86[v18];
            v38 = v84[v18];
            v39 = 1;
            do
            {
              v40 = v39;
              v41 = (int8x16_t)vmulq_f32(v37, (float32x4_t)v85[v35]);
              v82 = v38;
              *(float *)((unint64_t)&v82 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v35 & 1))) = vaddv_f32(vadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)));
              v38 = v82;
              v35 = 1;
              v39 = 0;
            }
            while ((v40 & 1) != 0);
            v34 = 0;
            v84[v18] = v82;
            v18 = 1;
          }
          while ((v36 & 1) != 0);
          v42 = 0;
          *((_QWORD *)&v44 + 1) = 0;
          *((_QWORD *)&v43 + 1) = 0;
          *(float *)&v43 = v5;
          *(float *)&v44 = v13;
          v45 = vsubq_f32((float32x4_t)a2->columns[0], (float32x4_t)a1->columns[0]);
          v46 = (int8x16_t)vmulq_f32(v23, v45);
          v47 = vextq_s8(v46, v46, 8uLL);
          *(float32x2_t *)v46.i8 = vadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v47.i8);
          v47.i32[0] = vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1)).u32[0];
          v48 = vaddv_f32(*(float32x2_t *)v46.i8);
          v49 = (int8x16_t)vmulq_f32(v26, v45);
          v50 = vadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL));
          v51 = 1;
          do
          {
            v52 = 0;
            v53 = v51;
            v54 = v84[v42];
            v55 = v83[v42];
            v56 = 1;
            do
            {
              v57 = v56;
              v80 = v54;
              v58 = fabsf(*(float *)((unint64_t)&v80 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v52 & 1))));
              v81 = v55;
              *(float *)((unint64_t)&v81 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v52 & 1))) = v58 + 0.00001;
              v52 = 1;
              v55 = v81;
              v56 = 0;
            }
            while ((v57 & 1) != 0);
            v51 = 0;
            v83[v42] = v81;
            v42 = 1;
          }
          while ((v53 & 1) != 0);
          v59 = 0;
          *((float *)&v43 + 1) = v9;
          *((float *)&v44 + 1) = v17;
          v60 = vaddv_f32(v50);
          v47.i32[1] = vadd_f32(v50, (float32x2_t)vdup_lane_s32((int32x2_t)v50, 1)).u32[0];
          v61 = 1;
          while (1)
          {
            v62 = v61;
            v78 = v43;
            v63 = *(float *)((unint64_t)&v78 & 0xFFFFFFFFFFFFFFF3 | (4 * (v59 & 3)));
            v64 = vmlas_n_f32(vmuls_lane_f32(v17, (float32x2_t)v83[v59], 1), v13, COERCE_FLOAT(v83[v59]));
            v79 = v47;
            if (fabsf(*(float *)((unint64_t)&v79 & 0xFFFFFFFFFFFFFFF3 | (4 * (v59 & 3)))) > (float)(v63 + v64))
              break;
            v61 = 0;
            v59 = 1;
            if ((v62 & 1) == 0)
            {
              v65 = 0;
              do
              {
                v77 = v83[0];
                v66 = *(float *)((unint64_t)&v77 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v65 & 1)));
                v76 = v83[1];
                v67 = (float)(v9 * *(float *)((unint64_t)&v76 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v65 & 1))))
                    + (float)(v5 * v66);
                v75 = v44;
                v68 = *(float *)((unint64_t)&v75 & 0xFFFFFFFFFFFFFFF3 | (4 * (v65 & 3)));
                v74 = v84[0];
                v69 = *(float *)((unint64_t)&v74 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v65 & 1)));
                v73 = v84[1];
                v70 = fabsf((float)(v60 * *(float *)((unint64_t)&v73 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v65 & 1))))+ (float)(v48 * v69));
                v71 = v68 + v67;
                result = v70 <= v71;
                if ((v65 & 1) != 0)
                  break;
                v65 = 1;
              }
              while (v70 <= v71);
              return result;
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_1DC88DF38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC88DFEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC88E0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC88E244(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x10A1C40E68DE135);

  _Unwind_Resume(a1);
}

void sub_1DC88E4C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC88E62C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC88E728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC88E808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC88E914(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC88E9A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCRepeat::~SKCRepeat(SKCRepeat *this)
{
  SKCRepeat::~SKCRepeat(this);
  JUMPOUT(0x1DF0CF560);
}

{
  SKCAction *var19;
  int v3;

  this->var0 = (void **)&off_1EA4FF150;
  var19 = this->var19;
  if (var19)
  {
    v3 = var19->var1 - 1;
    var19->var1 = v3;
    if (!v3)
      (*((void (**)(SKCAction *))var19->var0 + 1))(var19);
  }
  this->var19 = 0;
  SKCAction::~SKCAction((SKCAction *)this);
}

SKCAction *SKCRepeat::setBaseSpeed(SKCRepeat *this, float a2)
{
  SKCAction *result;

  SKCAction::setBaseSpeed((SKCAction *)this, a2);
  result = this->var19;
  if (result)
    return (SKCAction *)(*((uint64_t (**)(SKCAction *, float))result->var0 + 5))(result, this->var17 * this->var16);
  return result;
}

SKCAction *SKCRepeat::setSpeed(SKCRepeat *this, float a2)
{
  SKCAction *result;

  SKCAction::setSpeed((SKCAction *)this, a2);
  result = this->var19;
  if (result)
    return (SKCAction *)(*((uint64_t (**)(SKCAction *, float))result->var0 + 5))(result, this->var17 * this->var16);
  return result;
}

SKCAction *SKCRepeat::cpp_updateWithTargetForTime(SKCRepeat *this, SKCNode *a2, double a3)
{
  SKCAction *var19;
  SKCAction *result;
  SKCAction *v8;
  unint64_t var21;
  unint64_t v10;
  SKCAction *v11;
  double v12;
  double v13;

  var19 = this->var19;
  if (!var19->var5)
    goto LABEL_3;
  for (result = (SKCAction *)(*((uint64_t (**)(SKCAction *, SKCNode *, double))var19->var0 + 7))(var19, a2, a3); ; result = (SKCAction *)SKCAction::updateWithTargetForTime(var19, a2, a3))
  {
    v8 = this->var19;
    if (!v8->var5)
      break;
    if (!v8->var11)
      goto LABEL_12;
LABEL_6:
    var21 = this->var21;
    v10 = this->var20 + 1;
    this->var20 = v10;
    if (v10 >= var21 && !this->var22)
      goto LABEL_13;
    v11 = this->var19;
    v11->var11 = 0;
    v12 = (*((double (**)(SKCAction *))v11->var0 + 2))(v11);
    if (v12 >= a3)
      v12 = a3;
    SKCAction::willStartWithTargetAtTime(this->var19, a2, v12);
    var19 = this->var19;
LABEL_3:
    ;
  }
  result = (SKCAction *)objc_msgSend(v8->var4, "finished");
  if ((_DWORD)result)
    goto LABEL_6;
LABEL_12:
  if (this->var22)
    return result;
LABEL_13:
  if (this->var20 >= this->var21)
  {
    v13 = (*((double (**)(SKCAction *))this->var19->var0 + 2))(this->var19);
    return SKCAction::didFinishWithTargetAtTime((SKCAction *)this, a2, v13);
  }
  return result;
}

uint64_t SKCRepeat::cpp_wasAddedToTargetAtTime(SKCRepeat *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_wasAddedToTargetAtTime((SKCAction *)this, a2, a3);
  return SKCAction::wasAddedToTargetAtTime(this->var19, a2, a3);
}

uint64_t SKCRepeat::cpp_wasRemovedFromTargetAtTime(SKCRepeat *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_wasRemovedFromTargetAtTime((SKCAction *)this, a2, a3);
  return SKCAction::wasRemovedFromTargetAtTime(this->var19, a2, a3);
}

uint64_t SKCRepeat::cpp_willStartWithTargetAtTime(SKCRepeat *this, SKCNode *a2, double a3)
{
  this->var20 = 0;
  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  return SKCAction::willStartWithTargetAtTime(this->var19, a2, a3);
}

uint64_t SKCRepeat::cpp_wasPausedWithTargetAtTime(SKCRepeat *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_wasPausedWithTargetAtTime((SKCAction *)this, a2, a3);
  return SKCAction::wasPausedWithTargetAtTime(this->var19, a2, a3);
}

uint64_t SKCRepeat::cpp_willResumeWithTargetAtTime(SKCRepeat *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_willResumeWithTargetAtTime((SKCAction *)this, a2, a3);
  return SKCAction::willResumeWithTargetAtTime(this->var19, a2, a3);
}

void sub_1DC88EDF4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1081C40983EBE18);

  _Unwind_Resume(a1);
}

void sub_1DC88F084(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC88F2A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC88F358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC88F3C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCSpeed::SKCSpeed(SKCSpeed *this, SKCAction *a2)
{
  uint64_t v3;

  SKCAction::SKCAction((SKCAction *)this);
  *(_QWORD *)v3 = &off_1EA4FF1E8;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(_QWORD *)(v3 + 56) = *(_QWORD *)&a2->var8;
  *(_QWORD *)(v3 + 88) = a2->var14;
  *(_BYTE *)(v3 + 32) = 1;
}

void SKCSpeed::~SKCSpeed(SKCSpeed *this)
{
  SKCAction::~SKCAction((SKCAction *)this);
  JUMPOUT(0x1DF0CF560);
}

void SKCSpeed::cpp_updateWithTargetForTime(SKCSpeed *this, SKCNode *a2, double a3)
{
  float v6;
  float v7;

  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  if (this->var25)
  {
    v7 = (float)(this->var23 * v6) + 1.0;
    *((float *)a2 + 42) = (float)(*((float *)a2 + 42) * v7) / this->var22;
    this->var22 = v7;
  }
  else if (!this->var24)
  {
    *((float *)a2 + 42) = (float)(v6 * this->var19) + (float)(this->var23 * (float)(1.0 - v6));
  }
  this->var21 = v6;
  if ((COERCE_UNSIGNED_INT(v6 + -1.0) & 0x60000000) == 0)
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, a2, a3);
}

SKCAction *SKCSpeed::cpp_willStartWithTargetAtTime(SKCSpeed *this, SKCNode *a2, double a3)
{
  SKCAction *result;
  float v6;

  result = SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  this->var21 = 0.0;
  if (this->var25)
  {
    this->var22 = 1.0;
    v6 = this->var19 + -1.0;
  }
  else
  {
    v6 = *((float *)a2 + 42);
  }
  this->var23 = v6;
  return result;
}

void sub_1DC88F68C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DC88F6E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC88F73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC88F84C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1081C40DA192CF8);

  _Unwind_Resume(a1);
}

void sub_1DC88FC8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC890000(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8900B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC89011C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC890194(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC890208(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC890278(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8902F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC890364(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8903F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC890478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8905D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCRotate::SKCRotate(SKCRotate *this, SKCAction *a2)
{
  uint64_t v3;

  SKCAction::SKCAction((SKCAction *)this);
  *(_QWORD *)v3 = &off_1EA4FF280;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(_QWORD *)(v3 + 56) = *(_QWORD *)&a2->var8;
  *(_QWORD *)(v3 + 88) = a2->var14;
  *(_BYTE *)(v3 + 32) = 1;
}

void SKCRotate::~SKCRotate(SKCRotate *this)
{
  SKCAction::~SKCAction((SKCAction *)this);
  JUMPOUT(0x1DF0CF560);
}

void SKCRotate::cpp_updateWithTargetForTime(SKCRotate *this, __n128 *a2, double a3)
{
  float v6;
  float v7;
  __n128 Rotation;
  float var25;
  float var26;
  float var27;

  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  v7 = v6;
  Rotation = SKCNode::getRotation(a2);
  if (this->var30)
  {
    if (this->var32)
    {
      var25 = this->var25;
      Rotation.n128_f32[0] = -(float)(var25 - (float)(v7 * this->var22));
      this->var25 = var25 - (float)(var25 - (float)(v7 * this->var22));
    }
    if (this->var33)
    {
      var26 = this->var26;
      Rotation.n128_f32[1] = Rotation.n128_f32[1] - (float)(var26 - (float)(v7 * this->var23));
      this->var26 = var26 - (float)(var26 - (float)(v7 * this->var23));
    }
    if (this->var34)
    {
      var27 = this->var27;
      Rotation.n128_f32[2] = Rotation.n128_f32[2] - (float)(var27 - (float)(v7 * this->var24));
      this->var27 = var27 - (float)(var27 - (float)(v7 * this->var24));
    }
  }
  else if (!this->var29)
  {
    if (this->var32)
      Rotation.n128_f32[0] = (float)(v7 * this->var19) + (float)(this->var22 * (float)(1.0 - v7));
    if (this->var33)
      Rotation.n128_f32[1] = (float)(v7 * this->var20) + (float)(this->var23 * (float)(1.0 - v7));
    if (this->var34)
      Rotation.n128_f32[2] = (float)(v7 * this->var21) + (float)(this->var24 * (float)(1.0 - v7));
  }
  SKCNode::setRotation((SKCNode *)a2, Rotation);
  this->var28 = v7;
  if ((COERCE_UNSIGNED_INT(v7 + -1.0) & 0x60000000) == 0)
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, a3);
}

void SKCRotate::cpp_willStartWithTargetAtTime(SKCRotate *this, SKCNode *a2, double a3)
{
  float var21;
  float var19;
  float v7;
  float v8;
  float v9;
  float var20;
  __n128 Rotation;
  float v12;
  float v13;
  float v14;
  __n128 v15;
  float v16;
  float v17;

  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  if (a2
  {
    NSLog(CFSTR("SKScene: Animating the rotation of a SKScene has no effect."));
  }
  *(_QWORD *)&this->var25 = 0;
  this->var27 = 0.0;
  if (this->var30)
  {
    *(_QWORD *)&this->var22 = *(_QWORD *)&this->var19;
    var21 = this->var21;
  }
  else if (this->var31)
  {
    var19 = this->var19;
    v7 = SKCNode::getRotation((__n128 *)a2).n128_f32[0];
    v8 = (float)(var19 - v7) + (float)((float)(floorf((float)(var19 - v7) / 6.2832) * -2.0) * 3.1416);
    if (v8 >= 3.14159265)
    {
      v9 = v8 + -6.28318531;
      v8 = v9;
    }
    var20 = this->var20;
    this->var22 = this->var19 - v8;
    Rotation = SKCNode::getRotation((__n128 *)a2);
    v12 = (float)(var20 - Rotation.n128_f32[1])
        + (float)((float)(floorf((float)(var20 - Rotation.n128_f32[1]) / 6.2832) * -2.0) * 3.1416);
    if (v12 >= 3.14159265)
    {
      v13 = v12 + -6.28318531;
      v12 = v13;
    }
    v14 = this->var21;
    this->var23 = this->var20 - v12;
    v15 = SKCNode::getRotation((__n128 *)a2);
    v16 = (float)(v14 - v15.n128_f32[2])
        + (float)((float)(floorf((float)(v14 - v15.n128_f32[2]) / 6.2832) * -2.0) * 3.1416);
    if (v16 >= 3.14159265)
    {
      v17 = v16 + -6.28318531;
      v16 = v17;
    }
    var21 = this->var21 - v16;
  }
  else
  {
    *(_QWORD *)&this->var22 = SKCNode::getRotation((__n128 *)a2).n128_u64[0];
    LODWORD(var21) = SKCNode::getRotation((__n128 *)a2).n128_u32[2];
  }
  this->var24 = var21;
}

void sub_1DC890BD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC890D1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC890DC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC890E74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC890FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC891094(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC891144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SKCDataSlice::SKCDataSlice(uint64_t a1, __int128 *a2, int a3)
{
  std::string *v4;
  __int128 v5;

  *(_QWORD *)a1 = &off_1EA4FF318;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (std::string *)(a1 + 24);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_WORD *)(a1 + 48) = 257;
  return a1;
}

void **SKCDataSlice::resize(void **this, int a2)
{
  void **v2;

  if (*((_DWORD *)this + 2) != a2)
  {
    v2 = this;
    *((_DWORD *)this + 2) = a2;
    this = (void **)malloc_type_realloc(this[2], (*((_DWORD *)this + 3) * a2), 0x440CB233uLL);
    v2[2] = this;
  }
  return this;
}

void SKCDataSlice::~SKCDataSlice(SKCDataSlice *this)
{
  void *v2;

  *(_QWORD *)this = &off_1EA4FF318;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    free(v2);
    *((_QWORD *)this + 2) = 0;
  }
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  SKCDataSlice::~SKCDataSlice(this);
  JUMPOUT(0x1DF0CF560);
}

void sub_1DC8913D4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1081C40E8145384);

  _Unwind_Resume(a1);
}

void sub_1DC8917F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC891B50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC891C68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC891D10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC891DB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC891E50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC891EDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC891F60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC891FE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCScale::SKCScale(SKCScale *this, SKCAction *a2)
{
  uint64_t v3;

  SKCAction::SKCAction((SKCAction *)this);
  *(_QWORD *)v3 = &off_1EA4FF348;
  *(_BYTE *)(v3 + 152) = 0;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(_QWORD *)(v3 + 56) = *(_QWORD *)&a2->var8;
  *(_QWORD *)(v3 + 88) = a2->var14;
  *(_BYTE *)(v3 + 32) = 1;
}

void SKCScale::~SKCScale(SKCScale *this)
{
  SKCAction::~SKCAction((SKCAction *)this);
  JUMPOUT(0x1DF0CF560);
}

void SKCScale::cpp_updateWithTargetForTime(SKCScale *this, __n128 *a2, double a3)
{
  float v6;
  float v7;
  __n128 Scale;
  float v9;
  float v10;
  __n128 v11;
  float v12;
  float v13;
  __n128 v14;
  float v15;
  __n128 v16;
  __n128 v17;
  unsigned __int32 v18;
  float v19;

  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  v7 = v6;
  LODWORD(v19) = SKCNode::getScale(a2).n128_u32[0];
  Scale = SKCNode::getScale(a2);
  if (this->var29)
  {
    if (this->var30)
    {
      v18 = Scale.n128_u32[1];
      v9 = (float)(this->var26 * v7) + 1.0;
      v10 = (float)(v19 * v9) / this->var24;
      v11 = SKCNode::getScale(a2);
      v11.n128_f32[0] = v10;
      SKCNode::setScale((SKCNode *)a2, v11, v11.n128_f32[1]);
      Scale.n128_u32[1] = v18;
      this->var24 = v9;
    }
    if (this->var31)
    {
      v12 = Scale.n128_f32[1];
      v13 = (float)(this->var27 * v7) + 1.0;
      v14 = SKCNode::getScale(a2);
      SKCNode::setScale((SKCNode *)a2, v14, (float)(v12 * v13) / this->var25);
      this->var25 = v13;
    }
  }
  else if (!this->var28)
  {
    if (this->var30)
    {
      v15 = (float)(v7 * this->var19) + (float)(this->var26 * (float)(1.0 - v7));
      v16 = SKCNode::getScale(a2);
      v16.n128_f32[0] = v15;
      SKCNode::setScale((SKCNode *)a2, v16, v16.n128_f32[1]);
    }
    if (this->var31)
    {
      v17 = SKCNode::getScale(a2);
      SKCNode::setScale((SKCNode *)a2, v17, (float)(v7 * this->var20) + (float)(this->var27 * (float)(1.0 - v7)));
    }
  }
  this->var23 = v7;
  if ((COERCE_UNSIGNED_INT(v7 + -1.0) & 0x60000000) == 0)
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, a3);
}

void SKCScale::cpp_willStartWithTargetAtTime(SKCScale *this, SKCNode *a2, double a3)
{
  float32x2_t v5;
  int8x8_t v6;
  int32x2_t v7;
  char v8;
  int8x8_t v9;
  unsigned int v10;
  __int128 v17;

  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  this->var23 = 0.0;
  if (a2
  {
    NSLog(CFSTR("SKScene: Animating the scale of a SKScene has no effect."));
  }
  if (this->var32
    && a2
    && !this->var28
  {
    v5 = vcvt_f32_f64((float64x2_t)this->var33);
    v17 = *((_OWORD *)a2 + 21);
    v6 = (int8x8_t)SKCNode::getScale((__n128 *)a2).n128_u64[0];
    v7 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)vrev64_s32(*(int32x2_t *)&v17), (int8x8_t)0x6000000060000000));
    v8 = v7.i8[4] | v7.i8[0];
    v9 = (int8x8_t)vdiv_f32(v5, *(float32x2_t *)&v17);
    if ((v8 & 1) != 0)
      v10 = -1;
    else
      v10 = 0;
    *(int8x8_t *)&this->var26 = v6;
    *(int8x8_t *)&this->var19 = vbsl_s8((int8x8_t)vdup_n_s32(v10), v6, v9);
  }
  else if (this->var29)
  {
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)&this->var24 = _D0;
    __asm { FMOV            V1.2S, #-1.0 }
    *(float32x2_t *)&this->var26 = vadd_f32(*(float32x2_t *)&this->var19, _D1);
  }
  else
  {
    *(_QWORD *)&this->var26 = SKCNode::getScale((__n128 *)a2).n128_u64[0];
  }
}

void sub_1DC892564(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1081C405F2FCA79);

  _Unwind_Resume(a1);
}

void sub_1DC892834(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void SKCSequence::addCAction(SKCSequence *this, SKCAction *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  if (a2)
  {
    ++a2->var1;
    v6 = *((_QWORD *)this + 16);
    v4 = (char *)this + 128;
    v5 = v6;
    v7 = (_QWORD *)*((_QWORD *)v4 - 1);
    if ((unint64_t)v7 >= v6)
    {
      v9 = (void **)(v4 - 16);
      v10 = *((_QWORD *)v4 - 2);
      v11 = ((uint64_t)v7 - v10) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
      v12 = v5 - v10;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)v4, v14);
      else
        v15 = 0;
      v16 = &v15[8 * v11];
      v17 = &v15[8 * v14];
      *(_QWORD *)v16 = a2;
      v8 = v16 + 8;
      v19 = (char *)*((_QWORD *)this + 14);
      v18 = (char *)*((_QWORD *)this + 15);
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *((_QWORD *)v16 - 1) = v20;
          v16 -= 8;
        }
        while (v18 != v19);
        v18 = (char *)*v9;
      }
      *((_QWORD *)this + 14) = v16;
      *((_QWORD *)this + 15) = v8;
      *((_QWORD *)this + 16) = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v7 = a2;
      v8 = v7 + 1;
    }
    *((_QWORD *)this + 15) = v8;
  }
}

void sub_1DC892A54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC892D1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC892E24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC892F9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCSequence::~SKCSequence(SKCAction *this)
{
  SKCSequence::~SKCSequence(this);
  JUMPOUT(0x1DF0CF560);
}

{
  void **v2;
  void **var0;
  _DWORD *v4;
  int v5;
  BOOL v6;

  this->var0 = (void **)&off_1EA4FF3E0;
  var0 = this[1].var0;
  v2 = *(void ***)&this[1].var1;
  if (var0 != v2)
  {
    do
    {
      v4 = *var0;
      v5 = *((_DWORD *)*var0 + 2) - 1;
      v4[2] = v5;
      if (v4)
        v6 = v5 == 0;
      else
        v6 = 0;
      if (v6)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
        v2 = *(void ***)&this[1].var1;
      }
      ++var0;
    }
    while (var0 != v2);
    var0 = this[1].var0;
  }
  *(_QWORD *)&this[1].var1 = var0;
  if (var0)
    operator delete(var0);
  SKCAction::~SKCAction(this);
}

void SKCSequence::setBaseSpeed(SKCAction *this, float a2)
{
  void **var0;
  float v4;
  uint64_t v5;

  SKCAction::setBaseSpeed(this, a2);
  var0 = this[1].var0;
  if (var0 != *(void ***)&this[1].var1)
  {
    v4 = this->var16 * this->var17;
    do
    {
      v5 = (uint64_t)*var0++;
      (*(void (**)(uint64_t, float))(*(_QWORD *)v5 + 40))(v5, v4);
    }
    while (var0 != *(void ***)&this[1].var1);
  }
}

void SKCSequence::setSpeed(SKCAction *this, float a2)
{
  void **var0;
  float v4;
  uint64_t v5;

  SKCAction::setSpeed(this, a2);
  var0 = this[1].var0;
  if (var0 != *(void ***)&this[1].var1)
  {
    v4 = this->var16 * this->var17;
    do
    {
      v5 = (uint64_t)*var0++;
      (*(void (**)(uint64_t, float))(*(_QWORD *)v5 + 40))(v5, v4);
    }
    while (var0 != *(void ***)&this[1].var1);
  }
}

void SKCSequence::cpp_updateWithTargetForTime(SKCAction *this, SKCNode *a2, double a3)
{
  double v5;
  void **var0;
  unint64_t var4;
  double v8;
  SKCAction *v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  unint64_t v13;
  void **v14;
  double v15;
  unint64_t v16;
  void **v17;
  unint64_t v18;
  void **v19;
  double v20;

  SKCAction::cpp_adjustedTime(this, a3);
  var0 = this[1].var0;
  var4 = (unint64_t)this[1].var4;
  if (var4 >= (uint64_t)(*(_QWORD *)&this[1].var1 - (_QWORD)var0) >> 3)
LABEL_16:
    std::vector<SKTexture * {__strong}>::__throw_out_of_range[abi:ne180100]();
  v8 = v5;
  v9 = (SKCAction *)var0[var4];
LABEL_3:
  SKCAction::updateWithTargetForTime(v9, a2, v8);
  while (1)
  {
    if (v9->var5)
    {
      if (!v9->var11)
        return;
    }
    else if (!objc_msgSend(v9->var4, "finished"))
    {
      return;
    }
    v10 = (unint64_t)this[1].var4 + 1;
    this[1].var4 = (id)v10;
    v11 = ((uint64_t)(*(_QWORD *)&this[1].var1 - (unint64_t)this[1].var0) >> 3) - 1;
    if (v10 > v11)
      break;
    (*((void (**)(SKCAction *))v9->var0 + 2))(v9);
    v13 = (unint64_t)this[1].var4;
    v14 = this[1].var0;
    if (v13 >= (uint64_t)(*(_QWORD *)&this[1].var1 - (_QWORD)v14) >> 3)
      goto LABEL_16;
    v15 = fmin(v8, v12);
    SKCAction::wasAddedToTargetAtTime((SKCAction *)v14[v13], a2, v15);
    v16 = (unint64_t)this[1].var4;
    v17 = this[1].var0;
    if (v16 >= (uint64_t)(*(_QWORD *)&this[1].var1 - (_QWORD)v17) >> 3)
      goto LABEL_16;
    SKCAction::willStartWithTargetAtTime((SKCAction *)v17[v16], a2, v15);
    v18 = (unint64_t)this[1].var4;
    v19 = this[1].var0;
    if (v18 >= (uint64_t)(*(_QWORD *)&this[1].var1 - (_QWORD)v19) >> 3)
      goto LABEL_16;
    v9 = (SKCAction *)v19[v18];
    if (v15 < v8)
      goto LABEL_3;
  }
  this[1].var4 = (id)v11;
  v20 = (*((double (**)(SKCAction *))v9->var0 + 2))(v9);
  SKCAction::didFinishWithTargetAtTime(this, a2, v20);
  this->var10 = (*((double (**)(SKCAction *))v9->var0 + 2))(v9);
}

uint64_t SKCSequence::cpp_wasRemovedFromTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  SKCAction *v5;
  double v6;
  void **v7;
  void **var0;
  unint64_t var4;

  v5 = this;
  SKCAction::cpp_wasRemovedFromTargetAtTime(this, a2, a3);
  SKCAction::cpp_adjustedTime(v5, a3);
  var0 = v5[1].var0;
  ++v5;
  v7 = var0;
  var4 = (unint64_t)v5->var4;
  if (var4 >= (uint64_t)(*(_QWORD *)&v5->var1 - (_QWORD)var0) >> 3)
    std::vector<SKTexture * {__strong}>::__throw_out_of_range[abi:ne180100]();
  return SKCAction::wasRemovedFromTargetAtTime((SKCAction *)v7[var4], a2, v6);
}

uint64_t SKCSequence::cpp_willStartWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  double v6;
  SKCAction **var0;
  double v8;
  unint64_t var4;
  void **v10;

  SKCAction::cpp_willStartWithTargetAtTime(this, a2, a3);
  SKCAction::cpp_adjustedTime(this, a3);
  var0 = (SKCAction **)this[1].var0;
  this[1].var4 = 0;
  if (*(SKCAction ***)&this[1].var1 == var0
    || (v8 = v6,
        SKCAction::wasAddedToTargetAtTime(*var0, a2, v6),
        var4 = (unint64_t)this[1].var4,
        v10 = this[1].var0,
        var4 >= (uint64_t)(*(_QWORD *)&this[1].var1 - (_QWORD)v10) >> 3))
  {
    std::vector<SKTexture * {__strong}>::__throw_out_of_range[abi:ne180100]();
  }
  return SKCAction::willStartWithTargetAtTime((SKCAction *)v10[var4], a2, v8);
}

uint64_t SKCSequence::cpp_wasPausedWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  SKCAction *v5;
  double v6;
  void **v7;
  void **var0;
  unint64_t var4;

  v5 = this;
  SKCAction::cpp_wasPausedWithTargetAtTime(this, a2, a3);
  SKCAction::cpp_adjustedTime(v5, a3);
  var0 = v5[1].var0;
  ++v5;
  v7 = var0;
  var4 = (unint64_t)v5->var4;
  if (var4 >= (uint64_t)(*(_QWORD *)&v5->var1 - (_QWORD)var0) >> 3)
    std::vector<SKTexture * {__strong}>::__throw_out_of_range[abi:ne180100]();
  return SKCAction::wasPausedWithTargetAtTime((SKCAction *)v7[var4], a2, v6);
}

uint64_t SKCSequence::cpp_willResumeWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  SKCAction *v5;
  double v6;
  void **v7;
  void **var0;
  unint64_t var4;

  v5 = this;
  SKCAction::cpp_willResumeWithTargetAtTime(this, a2, a3);
  SKCAction::cpp_adjustedTime(v5, a3);
  var0 = v5[1].var0;
  ++v5;
  v7 = var0;
  var4 = (unint64_t)v5->var4;
  if (var4 >= (uint64_t)(*(_QWORD *)&v5->var1 - (_QWORD)var0) >> 3)
    std::vector<SKTexture * {__strong}>::__throw_out_of_range[abi:ne180100]();
  return SKCAction::willResumeWithTargetAtTime((SKCAction *)v7[var4], a2, v6);
}

void sub_1DC8937E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

void sub_1DC893C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1DC893F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DC894150(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void sub_1DC894630(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1081C403602C3BFLL);

  _Unwind_Resume(a1);
}

void sub_1DC894744(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x1DF0CF560](v3, 0x1081C403602C3BFLL);

  _Unwind_Resume(a1);
}

void sub_1DC8947F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC894858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCWait::SKCWait(SKCWait *this, SKCAction *a2)
{
  uint64_t v3;

  SKCAction::SKCAction((SKCAction *)this);
  *(_QWORD *)v3 = &off_1EA4FF488;
  *(_QWORD *)(v3 + 24) = a2->var4;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(_QWORD *)(v3 + 56) = *(_QWORD *)&a2->var8;
  *(_QWORD *)(v3 + 88) = a2->var14;
  *(_BYTE *)(v3 + 32) = 1;
}

void SKCWait::~SKCWait(SKCWait *this)
{
  SKCAction::~SKCAction((SKCAction *)this);
  JUMPOUT(0x1DF0CF560);
}

void sub_1DC8949F8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x10A1C40DCC7CF7ELL);

  _Unwind_Resume(a1);
}

void sub_1DC894B2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC894DD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC894EE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC894F90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC895050(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC895120(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC895188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)SKFollowPath;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1DC895490(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC895584(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1060C402159C14DLL);

  _Unwind_Resume(a1);
}

void SKCFollowPath::SKCFollowPath(SKCFollowPath *this, SKCAction *a2)
{
  uint64_t v3;
  double var10;

  SKCAction::SKCAction((SKCAction *)this);
  *(_QWORD *)v3 = &off_1EA4FF520;
  *(_WORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_BYTE *)(v3 + 73) = a2->var12;
  *(_BYTE *)(v3 + 72) = a2->var11;
  *(_QWORD *)(v3 + 88) = a2->var14;
  *(_OWORD *)(v3 + 96) = *(_OWORD *)&a2->var15;
  *(_BYTE *)(v3 + 72) = a2->var11;
  var10 = a2->var10;
  *(_QWORD *)(v3 + 56) = *(_QWORD *)&a2->var8;
  *(double *)(v3 + 64) = var10;
  *(_QWORD *)(v3 + 88) = a2->var14;
  *(_BYTE *)(v3 + 32) = 1;
}

void SKCFollowPath::~SKCFollowPath(SKCFollowPath *this)
{
  SKCFollowPath::~SKCFollowPath(this);
  JUMPOUT(0x1DF0CF560);
}

{
  PKPath *var21;

  this->var0 = (void **)&off_1EA4FF520;
  var21 = this->var21;
  if (var21)
  {
    PKPath::~PKPath(var21);
    MEMORY[0x1DF0CF560]();
  }
  SKCAction::~SKCAction((SKCAction *)this);
}

void SKCFollowPath::cpp_updateWithTargetForTime(SKCFollowPath *this, __n128 *a2, double a3)
{
  float v5;
  float v6;
  __int128 v7;
  float ZRotation;
  float v9;
  __n128 v10;
  __n128 v11;
  unint64_t var20;
  PKPath *var21;
  uint64_t v14;
  unsigned int v15;
  float32x2_t v16;
  float32x2_t v17;
  float v18;
  float v19;
  float v20;
  float32x2_t v21;
  float v23;
  __n128 Translation;
  __n128 v25;
  __n128 v26;
  __int128 v27;

  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  v23 = v5;
  v6 = -(float)(this->var19 - (float)(v5 * *(float *)this->var21));
  Translation = SKCNode::getTranslation(a2);
  v26 = SKCNode::getTranslation(a2);
  ZRotation = SKCNode::getZRotation((SKCNode *)a2);
  if (v6 >= 0.0)
    v9 = v6;
  else
    v9 = 0.0;
  v11 = Translation;
  v10.n128_u64[1] = v26.n128_u64[1];
  v11.n128_u32[1] = v26.n128_u32[1];
  if (v9 > 0.0)
  {
    while (1)
    {
      var20 = this->var20;
      var21 = this->var21;
      v14 = *((_QWORD *)var21 + 1);
      if (((*((_QWORD *)var21 + 2) - v14) >> 3) - 1 <= var20)
        break;
      v15 = var20 + 1;
      v16 = *(float32x2_t *)(v14 + 8 * var20);
      v17 = vsub_f32(*(float32x2_t *)(v14 + 8 * (var20 + 1)), v16);
      v18 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v17, v17).i32[1]), v17.f32[0], v17.f32[0]));
      if (v9 <= v18)
      {
        v19 = v9 / v18;
        if ((float)(v9 / v18) > 1.0)
          v19 = 1.0;
        if (v19 < 0.0)
          v19 = 0.0;
        *(float32x2_t *)&v7 = vmul_n_f32(v17, v19);
        if (this->var24)
        {
          v25 = v11;
          v27 = v7;
          if (SKGetGlobalFlippedFlag())
            v20 = 1.5708;
          else
            v20 = -1.5708;
          v10.n128_f32[0] = atan2f(*((float *)&v27 + 1), *(float *)&v27);
          v11 = v25;
          v7 = v27;
          ZRotation = v10.n128_f32[0] + v20;
        }
        v10.n128_u64[0] = (unint64_t)vadd_f32(v16, *(float32x2_t *)&v7);
        if (this->var23)
        {
          v21 = vsub_f32((float32x2_t)v10.n128_u64[0], (float32x2_t)this->var22);
          this->var22 = ($94F468A8D4C62B317260615823C2B210)v10.n128_u64[0];
          v10.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v11.n128_u64[0], v21);
        }
        if (v9 < v18)
          goto LABEL_24;
        v15 = this->var20 + 1;
        v11.n128_u64[0] = v10.n128_u64[0];
      }
      else
      {
        v10.n128_u64[0] = v11.n128_u64[0];
      }
      v9 = v9 - v18;
      this->var20 = v15;
      this->var19 = v18 + this->var19;
      if (v9 <= 0.0)
        goto LABEL_24;
    }
  }
  v10.n128_u64[0] = v11.n128_u64[0];
LABEL_24:
  SKCNode::setTranslation((SKCNode *)a2, v10);
  if (this->var24)
    SKCNode::setZRotation((SKCNode *)a2, ZRotation);
  if ((COERCE_UNSIGNED_INT(v23 + -1.0) & 0x60000000) == 0)
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, a3);
}

void SKCFollowPath::cpp_willStartWithTargetAtTime(SKCFollowPath *this, SKCNode *a2, double a3)
{
  __n128 v5;
  PKPath *var21;
  _BOOL4 var23;
  $94F468A8D4C62B317260615823C2B210 v8;
  __n128 Translation;

  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  *(_QWORD *)&this->var19 = 0;
  var21 = this->var21;
  if (var21)
  {
    var23 = this->var23;
    v8 = ($94F468A8D4C62B317260615823C2B210)**((_QWORD **)var21 + 1);
    this->var22 = v8;
    if (var23)
    {
      Translation = SKCNode::getTranslation((__n128 *)a2);
      Translation.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)Translation.n128_u64[0], (float32x2_t)this->var22);
      SKCNode::setTranslation(a2, Translation);
    }
    else
    {
      v5.n128_u32[0] = LODWORD(v8.var0);
      SKCNode::setTranslation(a2, v5, v8.var1);
    }
  }
  else
  {
    this->var22 = 0;
  }
}

void std::vector<PKPoint>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void PKPath::~PKPath(PKPath *this)
{
  const CGPath *v2;
  void *v3;

  v2 = (const CGPath *)*((_QWORD *)this + 4);
  if (v2)
    CGPathRelease(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

_QWORD *std::vector<PKPoint>::__init_with_size[abi:ne180100]<PKPoint*,PKPoint*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DC895A60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void SKCompositeBezierPathPathApplyCGPath(_QWORD *a1, const CGPathElement *a2)
{
  uint64_t v4;
  float *v5;
  float *v6;
  CGPathElementType type;
  int v9;
  float v10;
  float v11;
  float *v12;
  float v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t v17;
  float32x2_t v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  CGPoint *points;
  float x;
  float y;
  unint64_t v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  float *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  float64x2_t *v43;
  float v44;
  float v45;
  float32x2_t v46;
  float32x2_t v47;
  float v48;
  float v49;
  float v50;
  CGPoint *v51;
  float v52;
  float v53;
  CGPoint *v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;

  if (!*(_BYTE *)a1)
  {
    v4 = *(_QWORD *)(a1[3] - 8);
    v5 = *(float **)(v4 + 16);
    v6 = *(float **)(v4 + 24);
    type = a2->type;
    if (v5 == v6 && type == kCGPathElementMoveToPoint)
    {
      points = a2->points;
      x = points->x;
      y = points->y;
      v32 = *(_QWORD *)(v4 + 32);
      if ((unint64_t)v5 >= v32)
      {
        v34 = v32 - (_QWORD)v5;
        v35 = v34 >> 2;
        if ((unint64_t)(v34 >> 2) <= 1)
          v35 = 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        v37 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v4 + 32, v36);
        v38 = *(char **)(v4 + 16);
        v39 = *(char **)(v4 + 24);
        v41 = &v37[2 * v40];
        *v37 = x;
        v37[1] = y;
        v33 = v37 + 2;
        if (v39 != v38)
        {
          do
          {
            v42 = *((_QWORD *)v39 - 1);
            v39 -= 8;
            *((_QWORD *)v37 - 1) = v42;
            v37 -= 2;
          }
          while (v39 != v38);
          v38 = *(char **)(v4 + 16);
        }
        *(_QWORD *)(v4 + 16) = v37;
        *(_QWORD *)(v4 + 24) = v33;
        *(_QWORD *)(v4 + 32) = v41;
        if (v38)
          operator delete(v38);
      }
      else
      {
        *v5 = x;
        v5[1] = y;
        v33 = v5 + 2;
      }
      *(_QWORD *)(v4 + 24) = v33;
      *(_DWORD *)(v4 + 4) = 0;
      *(_DWORD *)(v4 + 8) = 0;
    }
    else
    {
      switch(type)
      {
        case kCGPathElementMoveToPoint:
          v9 = *(_DWORD *)(v4 + 4);
          if (v9 >= 1)
          {
            v10 = *v5;
            v11 = v5[1];
            v12 = &v5[6 * v9];
            v13 = v12[1];
            v14 = v10 == *v12;
            if (v11 != v13)
              v14 = 0;
            *(_BYTE *)(v4 + 1) = v14;
          }
          *(_BYTE *)v4 = 1;
          v15 = *((_DWORD *)a1 + 1) + v9;
          v16 = *((_DWORD *)a1 + 2) + *(_DWORD *)(v4 + 8);
          *((_DWORD *)a1 + 1) = v15;
          *((_DWORD *)a1 + 2) = v16;
          v17 = operator new();
          *(_QWORD *)(v17 + 16) = 0;
          *(_WORD *)v17 = 0;
          *(_QWORD *)(v17 + 4) = 0;
          *(_QWORD *)(v17 + 24) = 0;
          *(_QWORD *)(v17 + 32) = 0;
          v18 = vcvt_f32_f64(*(float64x2_t *)a2->points);
          v19 = std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v17 + 32, 1uLL);
          v20 = *(char **)(v17 + 24);
          v21 = *(char **)(v17 + 16);
          v23 = &v19[v22];
          *v19 = v18;
          v24 = v19 + 1;
          if (v20 != v21)
          {
            do
            {
              v25 = *((_QWORD *)v20 - 1);
              v20 -= 8;
              *--v19 = v25;
            }
            while (v20 != v21);
            v21 = *(char **)(v17 + 16);
          }
          *(_QWORD *)(v17 + 16) = v19;
          *(_QWORD *)(v17 + 24) = v24;
          *(_QWORD *)(v17 + 32) = v23;
          if (v21)
            operator delete(v21);
          *(_QWORD *)(v17 + 24) = v24;
          v26 = a1[4];
          v27 = (uint64_t *)a1[3];
          if ((unint64_t)v27 >= v26)
          {
            v56 = a1[2];
            v57 = ((uint64_t)v27 - v56) >> 3;
            if ((unint64_t)(v57 + 1) >> 61)
              std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
            v58 = v26 - v56;
            v59 = v58 >> 2;
            if (v58 >> 2 <= (unint64_t)(v57 + 1))
              v59 = v57 + 1;
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
              v60 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v60 = v59;
            if (v60)
              v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)(a1 + 4), v60);
            else
              v61 = 0;
            v62 = (uint64_t *)&v61[8 * v57];
            v63 = &v61[8 * v60];
            *v62 = v17;
            v28 = v62 + 1;
            v65 = (char *)a1[2];
            v64 = (char *)a1[3];
            if (v64 != v65)
            {
              do
              {
                v66 = *((_QWORD *)v64 - 1);
                v64 -= 8;
                *--v62 = v66;
              }
              while (v64 != v65);
              v64 = (char *)a1[2];
            }
            a1[2] = v62;
            a1[3] = v28;
            a1[4] = v63;
            if (v64)
              operator delete(v64);
          }
          else
          {
            *v27 = v17;
            v28 = v27 + 1;
          }
          a1[3] = v28;
          return;
        case kCGPathElementAddLineToPoint:
          v52 = *(v6 - 2);
          v53 = *(v6 - 1);
          v54 = a2->points;
          v44 = v54->x;
          v45 = v54->y;
          goto LABEL_36;
        case kCGPathElementAddQuadCurveToPoint:
          v43 = (float64x2_t *)a2->points;
          v44 = v43[1].f64[0];
          v45 = v43[1].f64[1];
          v46 = vcvt_f32_f64(*v43);
          v47 = vadd_f32(*(float32x2_t *)(v6 - 2), vmul_f32(vsub_f32(v46, *(float32x2_t *)(v6 - 2)), (float32x2_t)vdup_n_s32(0x3F2AAAABu)));
          v48 = (float)((float)(v46.f32[0] - v44) * 0.66667) + v44;
          v49 = (float)((float)(v46.f32[1] - v45) * 0.66667) + v45;
          v50 = v47.f32[1];
          goto LABEL_41;
        case kCGPathElementAddCurveToPoint:
          v51 = a2->points;
          v47.f32[0] = v51->x;
          v50 = v51->y;
          v48 = v51[1].x;
          v49 = v51[1].y;
          v44 = v51[2].x;
          v45 = v51[2].y;
          goto LABEL_41;
        case kCGPathElementCloseSubpath:
          v52 = *(v6 - 2);
          v53 = *(v6 - 1);
          v44 = *v5;
          v45 = v5[1];
LABEL_36:
          if (v52 == v44 && v53 == v45)
            return;
          v47.f32[0] = v52 + (float)((float)(v44 - v52) * 0.33);
          v50 = v53 + (float)((float)(v45 - v53) * 0.33);
          v48 = v52 + (float)((float)(v44 - v52) * 0.66);
          v49 = v53 + (float)((float)(v45 - v53) * 0.66);
LABEL_41:
          SKBezierPathAddCurve(*(_QWORD *)(a1[3] - 8), v47.f32[0], v50, v48, v49, v44, v45);
          break;
        default:
          return;
      }
    }
  }
}

void SKBezierPathAddCurve(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  float *v9;
  float v10;
  float v11;
  void **v18;
  char *v19;
  char **v20;
  float *v21;
  float *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  float *v28;
  uint64_t v29;
  float *v30;
  float *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  float *v37;
  uint64_t v38;
  float *v39;
  float *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  float *v46;
  char *v47;
  uint64_t v48;

  v9 = *(float **)(a1 + 24);
  v10 = *(v9 - 2);
  v11 = *(v9 - 1);
  if (v10 != a6 || v11 != a7)
  {
    if ((COERCE_UNSIGNED_INT(fabsf((float)((float)(a2 * (float)(a5 - v11)) + (float)(v10 * (float)(a3 - a5)))+ (float)(a4 * (float)(v11 - a3)))+ -0.002) & 0x80000000) != 0&& (COERCE_UNSIGNED_INT(fabsf((float)((float)(a4 * (float)(a7 - a3)) + (float)(a2 * (float)(a5 - a7))) + (float)(a6 * (float)(a3 - a5)))+ -0.002) & 0x80000000) != 0)
    {
      ++*(_DWORD *)(a1 + 8);
    }
    v18 = (void **)(a1 + 16);
    v20 = (char **)(a1 + 32);
    v19 = *(char **)(a1 + 32);
    if (v9 >= (float *)v19)
    {
      v22 = (float *)*v18;
      v23 = ((char *)v9 - (_BYTE *)*v18) >> 3;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 61)
        goto LABEL_58;
      v25 = v19 - (char *)v22;
      if (v25 >> 2 > v24)
        v24 = v25 >> 2;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
        v26 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26)
      {
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(a1 + 32, v26);
        v22 = *(float **)(a1 + 16);
        v9 = *(float **)(a1 + 24);
      }
      else
      {
        v27 = 0;
      }
      v28 = (float *)&v27[8 * v23];
      v19 = &v27[8 * v26];
      *v28 = a2;
      v28[1] = a3;
      v21 = v28 + 2;
      if (v9 != v22)
      {
        do
        {
          v29 = *((_QWORD *)v9 - 1);
          v9 -= 2;
          *((_QWORD *)v28 - 1) = v29;
          v28 -= 2;
        }
        while (v9 != v22);
        v22 = (float *)*v18;
      }
      *(_QWORD *)(a1 + 16) = v28;
      *(_QWORD *)(a1 + 24) = v21;
      *(_QWORD *)(a1 + 32) = v19;
      if (v22)
      {
        operator delete(v22);
        v19 = *v20;
      }
    }
    else
    {
      *v9 = a2;
      v9[1] = a3;
      v21 = v9 + 2;
    }
    *(_QWORD *)(a1 + 24) = v21;
    if (v21 >= (float *)v19)
    {
      v31 = (float *)*v18;
      v32 = ((char *)v21 - (_BYTE *)*v18) >> 3;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 61)
        goto LABEL_58;
      v34 = v19 - (char *)v31;
      if (v34 >> 2 > v33)
        v33 = v34 >> 2;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
        v35 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      if (v35)
      {
        v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(a1 + 32, v35);
        v31 = *(float **)(a1 + 16);
        v21 = *(float **)(a1 + 24);
      }
      else
      {
        v36 = 0;
      }
      v37 = (float *)&v36[8 * v32];
      v19 = &v36[8 * v35];
      *v37 = a4;
      v37[1] = a5;
      v30 = v37 + 2;
      if (v21 != v31)
      {
        do
        {
          v38 = *((_QWORD *)v21 - 1);
          v21 -= 2;
          *((_QWORD *)v37 - 1) = v38;
          v37 -= 2;
        }
        while (v21 != v31);
        v31 = (float *)*v18;
      }
      *(_QWORD *)(a1 + 16) = v37;
      *(_QWORD *)(a1 + 24) = v30;
      *(_QWORD *)(a1 + 32) = v19;
      if (v31)
      {
        operator delete(v31);
        v19 = *v20;
      }
    }
    else
    {
      *v21 = a4;
      v21[1] = a5;
      v30 = v21 + 2;
    }
    *(_QWORD *)(a1 + 24) = v30;
    if (v30 < (float *)v19)
    {
      *v30 = a6;
      v30[1] = a7;
      v39 = v30 + 2;
LABEL_56:
      *(_QWORD *)(a1 + 24) = v39;
      ++*(_DWORD *)(a1 + 4);
      return;
    }
    v40 = (float *)*v18;
    v41 = ((char *)v30 - (_BYTE *)*v18) >> 3;
    v42 = v41 + 1;
    if (!((unint64_t)(v41 + 1) >> 61))
    {
      v43 = v19 - (char *)v40;
      if (v43 >> 2 > v42)
        v42 = v43 >> 2;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
        v44 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (v44)
      {
        v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(a1 + 32, v44);
        v40 = *(float **)(a1 + 16);
        v30 = *(float **)(a1 + 24);
      }
      else
      {
        v45 = 0;
      }
      v46 = (float *)&v45[8 * v41];
      v47 = &v45[8 * v44];
      *v46 = a6;
      v46[1] = a7;
      v39 = v46 + 2;
      if (v30 != v40)
      {
        do
        {
          v48 = *((_QWORD *)v30 - 1);
          v30 -= 2;
          *((_QWORD *)v46 - 1) = v48;
          v46 -= 2;
        }
        while (v30 != v40);
        v40 = (float *)*v18;
      }
      *(_QWORD *)(a1 + 16) = v46;
      *(_QWORD *)(a1 + 24) = v39;
      *(_QWORD *)(a1 + 32) = v47;
      if (v40)
        operator delete(v40);
      goto LABEL_56;
    }
LABEL_58:
    std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
  }
}

void SKBezierPathApplyCGPath(_QWORD *a1, const CGPathElement *a2)
{
  float *v3;
  float *v4;
  CGPathElementType type;
  int v7;
  float v8;
  float v9;
  float *v10;
  float v11;
  BOOL v12;
  CGPoint *points;
  float x;
  float y;
  char *v16;
  unint64_t v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  float *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  float32x2_t v28;
  float v29;
  CGPoint *v30;
  float v31;
  float v32;
  float64x2_t *v33;
  float v34;
  float v35;
  float32x2_t v36;
  CGPoint *v37;

  if (a1 && !*(_BYTE *)a1)
  {
    v3 = (float *)a1[2];
    v4 = (float *)a1[3];
    type = a2->type;
    if (v3 == v4 && type == kCGPathElementMoveToPoint)
    {
      points = a2->points;
      x = points->x;
      y = points->y;
      v16 = (char *)(a1 + 4);
      v17 = a1[4];
      if ((unint64_t)v3 >= v17)
      {
        v19 = v17 - (_QWORD)v3;
        v20 = v19 >> 2;
        if ((unint64_t)(v19 >> 2) <= 1)
          v20 = 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        v22 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)v16, v21);
        v23 = (char *)a1[2];
        v24 = (char *)a1[3];
        v26 = &v22[2 * v25];
        *v22 = x;
        v22[1] = y;
        v18 = v22 + 2;
        if (v24 != v23)
        {
          do
          {
            v27 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            *((_QWORD *)v22 - 1) = v27;
            v22 -= 2;
          }
          while (v24 != v23);
          v23 = (char *)a1[2];
        }
        a1[2] = v22;
        a1[3] = v18;
        a1[4] = v26;
        if (v23)
          operator delete(v23);
      }
      else
      {
        *v3 = x;
        v3[1] = y;
        v18 = v3 + 2;
      }
      a1[3] = v18;
      *((_DWORD *)a1 + 1) = 0;
      *((_DWORD *)a1 + 2) = 0;
    }
    else
    {
      switch(type)
      {
        case kCGPathElementMoveToPoint:
          v7 = *((_DWORD *)a1 + 1);
          if (v7 >= 1)
          {
            v8 = *v3;
            v9 = v3[1];
            v10 = &v3[6 * v7];
            v11 = v10[1];
            v12 = v8 == *v10;
            if (v9 != v11)
              v12 = 0;
            *((_BYTE *)a1 + 1) = v12;
          }
          *(_BYTE *)a1 = 1;
          return;
        case kCGPathElementAddLineToPoint:
          v28.f32[0] = *(v4 - 2);
          v29 = *(v4 - 1);
          v30 = a2->points;
          v31 = v30->x;
          v32 = v30->y;
          goto LABEL_32;
        case kCGPathElementAddQuadCurveToPoint:
          v33 = (float64x2_t *)a2->points;
          v34 = v33[1].f64[0];
          v35 = v33[1].f64[1];
          v36 = vcvt_f32_f64(*v33);
          v28 = vadd_f32(*(float32x2_t *)(v4 - 2), vmul_f32(vsub_f32(v36, *(float32x2_t *)(v4 - 2)), (float32x2_t)vdup_n_s32(0x3F2AAAABu)));
          v31 = (float)((float)(v36.f32[0] - v34) * 0.66667) + v34;
          v32 = (float)((float)(v36.f32[1] - v35) * 0.66667) + v35;
          v29 = v28.f32[1];
          goto LABEL_33;
        case kCGPathElementAddCurveToPoint:
          v37 = a2->points;
          v28.f32[0] = v37->x;
          v29 = v37->y;
          v31 = v37[1].x;
          v32 = v37[1].y;
          v34 = v37[2].x;
          v35 = v37[2].y;
          goto LABEL_33;
        case kCGPathElementCloseSubpath:
          v28.f32[0] = *(v4 - 2);
          v29 = *(v4 - 1);
          v31 = *v3;
          v32 = v3[1];
LABEL_32:
          v34 = v31;
          v35 = v32;
LABEL_33:
          SKBezierPathAddCurve((uint64_t)a1, v28.f32[0], v29, v31, v32, v34, v35);
          break;
        default:
          return;
      }
    }
  }
}

double skRunTime(void)
{
  double v0;
  double v1;
  double v2;

  v0 = *(double *)&_skBaseTime;
  v1 = *(double *)&_skCurrentTime;
  if (*(double *)&_skBaseTime >= 0.0)
  {
    v2 = *(double *)&_skTimeOffset;
  }
  else
  {
    if (*(double *)&_skCurrentTime < 0.0)
    {
      v1 = CACurrentMediaTime();
      _skCurrentTime = *(_QWORD *)&v1;
    }
    v2 = *(double *)&_skTimeOffset;
    v0 = v1 + *(double *)&_skTimeOffset;
    *(double *)&_skBaseTime = v1 + *(double *)&_skTimeOffset;
  }
  return v1 - v0 + v2;
}

double skCurrentTime()
{
  double v0;

  v0 = *(double *)&_skCurrentTime;
  if (*(double *)&_skCurrentTime < 0.0)
  {
    v0 = CACurrentMediaTime();
    _skCurrentTime = *(_QWORD *)&v0;
  }
  return v0 + *(double *)&_skTimeOffset;
}

double skPrevTime(void)
{
  double v0;
  double v1;
  double v2;

  v0 = *(double *)&_skPrevTime;
  if (*(double *)&_skPrevTime >= 0.0)
  {
    v2 = *(double *)&_skTimeOffset;
  }
  else
  {
    v1 = *(double *)&_skCurrentTime;
    if (*(double *)&_skCurrentTime < 0.0)
    {
      v1 = CACurrentMediaTime();
      _skCurrentTime = *(_QWORD *)&v1;
    }
    v2 = *(double *)&_skTimeOffset;
    v0 = v1 + *(double *)&_skTimeOffset;
    _skPrevTime = *(_QWORD *)&v0;
  }
  return v0 + v2;
}

void skSetTime(double a1)
{
  _skPrevTime = _skCurrentTime;
  _skCurrentTime = *(_QWORD *)&a1;
  if (*(double *)&_skBaseTime > a1)
    _skBaseTime = *(_QWORD *)&a1;
}

void skSetTimeOffset(double a1)
{
  _skTimeOffset = *(_QWORD *)&a1;
}

uint64_t SKGetGlobalFlippedFlag(void)
{
  void *v0;
  void *v1;
  void *v2;

  if (!_skIsFlippedSet)
  {
    SKGetResourceBundle();
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "infoDictionary");
    v1 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v1, "objectForKey:", CFSTR("SKIsFlipped"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (v2)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        _skIsFlipped = objc_msgSend(v2, "BOOLValue");
    }
    _skIsFlippedSet = 1;

  }
  return _skIsFlipped;
}

void sub_1DC896730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SKEnsureGlobalMetalDevice(void)
{
  uint64_t result;
  _BYTE v1[104];
  id obj;

  if (!_metalDevice)
  {
    MEMORY[0x1DF0CF47C](v1, 0);
    objc_storeStrong((id *)&_metalDevice, obj);
    return MEMORY[0x1DF0CF488](v1);
  }
  return result;
}

id SKGetGlobalMetalDevice(void)
{
  return (id)_metalDevice;
}

void SKSetGlobalMetalDevice(id obj)
{
  objc_storeStrong((id *)&_metalDevice, obj);
}

void SKEnsureGlobalMetalLibrary(void)
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;

  if (!_metalLibrary)
  {
    SKEnsureGlobalMetalDevice();
    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", NSClassFromString(CFSTR("SKNode")));
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    v1 = (void *)MEMORY[0x1E0C99E98];
    objc_msgSend(v0, "pathForResource:ofType:", CFSTR("default"), CFSTR("metallib"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "fileURLWithPath:", v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    v4 = (id)_metalDevice;
    v8 = 0;
    v5 = objc_msgSend(v4, "newLibraryWithURL:error:", v3, &v8);
    v6 = v8;
    v7 = (void *)_metalLibrary;
    _metalLibrary = v5;

  }
}

void sub_1DC8968AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id SKGetGlobalMetalLibrary(void)
{
  return (id)_metalLibrary;
}

void SKSetGlobalMetalLibrary(id obj)
{
  objc_storeStrong((id *)&_metalLibrary, obj);
}

id SKDeviceSupportsExtendedXR10Formats(void *a1)
{
  id v1;
  SEL v2;
  const char *v3;
  uint64_t v4;
  id v5;

  v1 = a1;
  v2 = NSSelectorFromString(CFSTR("originalObject"));
  if (v1)
  {
    v3 = v2;
    do
    {
      if ((objc_opt_respondsToSelector() & 1) == 0)
        break;
      objc_msgSend(v1, v3);
      v4 = objc_claimAutoreleasedReturnValue();

      v1 = (id)v4;
    }
    while (v4);
  }
  NSSelectorFromString(CFSTR("supportsExtendedXR10Formats"));
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v5 = objc_msgSend(v1, NSSelectorFromString(CFSTR("supportsExtendedXR10Formats")));
  else
    v5 = 0;

  return v5;
}

void sub_1DC8969A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SKGetShouldEnableMetal(void)
{
  if (SKGetShouldEnableMetal(void)::onceToken != -1)
    dispatch_once(&SKGetShouldEnableMetal(void)::onceToken, &__block_literal_global_3);
  return SKGetShouldEnableMetal(void)::enableMetal;
}

uint64_t ___Z22SKGetShouldEnableMetalv_block_invoke()
{
  char v0;
  uint64_t result;

  if (sk_debug_option_exists(CFSTR("enableMetal")))
  {
    v0 = sk_debug_option_get_BOOL(CFSTR("enableMetal"));
    SKGetShouldEnableMetal(void)::enableMetal = v0;
  }
  else
  {
    v0 = SKGetShouldEnableMetal(void)::enableMetal != 0;
  }
  result = SKGetPrefersOpenGL();
  SKGetShouldEnableMetal(void)::enableMetal = v0 & (result ^ 1);
  return result;
}

uint64_t SKGetShouldUseExtendedRangeColor(void)
{
  if (sk_debug_option_exists(CFSTR("useExtendedRange")))
    return sk_debug_option_get_BOOL(CFSTR("useExtendedRange"));
  else
    return SKGetDeviceSupportsExtendedRangeColor();
}

uint64_t SKGetDeviceSupportsExtendedRangeColor(void)
{
  if (SKGetShouldEnableMetal(void)::onceToken != -1)
    dispatch_once(&SKGetShouldEnableMetal(void)::onceToken, &__block_literal_global_3);
  if (SKGetShouldEnableMetal(void)::enableMetal)
    return MGGetBoolAnswer();
  else
    return 0;
}

uint64_t SKColorSpaceIsWideGamut(CGColorSpace *a1)
{
  return 0;
}

void SKEnsureGlobalGLShareContext(void)
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;

  if (!_glShareContext)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setObject:forKey:", v0, CFSTR("EAGLContextPropertyVisibleInDebugTools"));

    v1 = objc_msgSend(objc_alloc(MEMORY[0x1E0CD0958]), "initWithAPI:properties:", 2, v3);
    v2 = (void *)_glShareContext;
    _glShareContext = v1;

  }
}

void sub_1DC896B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void SKEnsureGlobalGLResourceLoadContext(void)
{
  if (!_glResourceLoadContext)
  {
    SKEnsureGlobalGLShareContext();
    objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", _glShareContext);
    objc_storeStrong((id *)&_glResourceLoadContext, (id)_glShareContext);
  }
}

uint64_t SKBindGlobalGLShareContext(void)
{
  SKEnsureGlobalGLShareContext();
  return objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", _glShareContext);
}

id SKGetGlobalGLShareContext(void)
{
  return (id)_glShareContext;
}

void SKSetGlobalGLShareContext(id obj)
{
  objc_storeStrong((id *)&_glShareContext, obj);
}

void SKSetGlobalGLResourceLoadContext(id obj)
{
  objc_storeStrong((id *)&_glResourceLoadContext, obj);
}

id SKGetGlobalGLResourceLoadContext(void)
{
  return (id)_glResourceLoadContext;
}

uint64_t SKBindGlobalGLResourceLoadContext(void)
{
  SKEnsureGlobalGLResourceLoadContext();
  return objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", _glResourceLoadContext);
}

void sub_1DC896D18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0CF560](v1, 0x10A1C40F32A29C8);
  _Unwind_Resume(a1);
}

uint64_t quadIsVisible(float32x4_t *a1)
{
  float32x4_t v1;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;

  v1 = a1[1];
  __asm { FMOV            V4.4S, #1.0 }
  v7 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_1DC9224A0, *a1), (int8x16_t)0, _Q4), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_1DC9224A0, v1), (int8x16_t)0, _Q4));
  v8 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_1DC9224B0, *a1), (int8x16_t)0, _Q4), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_1DC9224B0, v1), (int8x16_t)0, _Q4));
  v9 = a1[2];
  v10 = a1[3];
  v11.i64[0] = vaddq_f32(vaddq_f32(v7, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_1DC9224A0, v9), (int8x16_t)0, _Q4)), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_1DC9224A0, v10), (int8x16_t)0, _Q4)).u64[0];
  v8.i64[0] = vaddq_f32(vaddq_f32(v8, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_1DC9224B0, v9), (int8x16_t)0, _Q4)), (float32x4_t)vbicq_s8(_Q4, (int8x16_t)vcgtq_f32((float32x4_t)xmmword_1DC9224B0, v10))).u64[0];
  v11.i64[1] = __PAIR64__(v8.u32[0], v8.u32[1]);
  v9.i32[0] = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_1DC9224C0, v11))).u32[0];
  v9.i32[1] = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(v11, (float32x4_t)xmmword_1DC9224C0))).i32[1];
  return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)v9.f32, 0xFuLL))) & 1;
}

void SKCNode::SKCNode(SKCNode *this)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)this = off_1EA4FF620;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 1;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 1065353216;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 1065353216;
  *((_BYTE *)this + 172) = 0;
  *((_QWORD *)this + 22) = (char *)this + 176;
  *((_QWORD *)this + 23) = (char *)this + 176;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = (char *)this + 200;
  *((_QWORD *)this + 26) = (char *)this + 200;
  *((_QWORD *)this + 27) = 0;
  *((_BYTE *)this + 224) = 0;
  *((_QWORD *)this + 29) = 0;
  __asm { FMOV            V1.4S, #1.0 }
  *((_OWORD *)this + 15) = _Q1;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0x200000002;
  *((_BYTE *)this + 280) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_OWORD *)this + 19) = _Q1;
  *((_QWORD *)this + 40) = 0x3F80000000000000;
  *(_QWORD *)&v6 = 0x3F0000003F000000;
  *((_QWORD *)&v6 + 1) = 0x3F0000003F000000;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = v6;
  *((_WORD *)this + 184) = 257;
  v7 = MEMORY[0x1E0C83FF0];
  v8 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
  *((_OWORD *)this + 24) = *MEMORY[0x1E0C83FF0];
  *((_OWORD *)this + 25) = v8;
  v9 = *(_OWORD *)(v7 + 48);
  *((_OWORD *)this + 26) = *(_OWORD *)(v7 + 32);
  *((_OWORD *)this + 27) = v9;
  *((_OWORD *)this + 32) = xmmword_1DC9217E0;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = _Q1;
}

uint64_t SKCNode::generatesVisibleGeometry(SKCNode *this, const simd_float4x4 *a2)
{
  __int128 v3;
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float32x4_t v12;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  _OWORD v24[4];
  simd_float4x4 v25;

  *(double *)&v3 = (*(double (**)(SKCNode *))(*(_QWORD *)this + 120))(this);
  v4 = 0;
  v5 = (float32x4_t)a2->columns[0];
  v6 = (float32x4_t)a2->columns[1];
  v7 = (float32x4_t)a2->columns[2];
  v8 = (float32x4_t)a2->columns[3];
  v24[0] = v3;
  v24[1] = v9;
  v24[2] = v10;
  v24[3] = v11;
  do
  {
    v25.columns[v4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, COERCE_FLOAT(v24[v4])), v6, *(float32x2_t *)&v24[v4], 1), v7, (float32x4_t)v24[v4], 2), v8, (float32x4_t)v24[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  *(double *)v12.i64 = SKCBoundingBoxGetVerts(&v25);
  __asm { FMOV            V6.4S, #1.0 }
  v18 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_1DC9224A0, v12), (int8x16_t)0, _Q6);
  v20 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_1DC9224B0, v12), (int8x16_t)0, _Q6), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_1DC9224B0, v19), (int8x16_t)0, _Q6));
  v19.i64[0] = vaddq_f32(vaddq_f32(vaddq_f32(v18, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_1DC9224A0, v19), (int8x16_t)0, _Q6)), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_1DC9224A0, v21), (int8x16_t)0, _Q6)), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_1DC9224A0, v22), (int8x16_t)0, _Q6)).u64[0];
  v20.i64[0] = vaddq_f32(vaddq_f32(v20, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_1DC9224B0, v21), (int8x16_t)0, _Q6)), (float32x4_t)vbicq_s8(_Q6, (int8x16_t)vcgtq_f32((float32x4_t)xmmword_1DC9224B0, v22))).u64[0];
  v19.i64[1] = __PAIR64__(v20.u32[0], v20.u32[1]);
  v21.i32[0] = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_1DC9224C0, v19))).u32[0];
  v21.i32[1] = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(v19, (float32x4_t)xmmword_1DC9224C0))).i32[1];
  return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)v21.f32, 0xFuLL))) & 1;
}

double SKCNode::getBatchInfo@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 12) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_QWORD *)&result = 0x300000000;
  *(_QWORD *)(a1 + 4) = 0x300000000;
  return result;
}

uint64_t SKCNode::addBatchRenderElements()
{
  return 0;
}

void SKCNode::addBatchAttributeValues(id *this, SKCRenderInfo *a2, SKShader *a3, unsigned int a4, unsigned int a5)
{
  SKShader *v6;
  id v7;
  uint64_t v8;
  char *v9;
  uint64_t j;
  void *v11;
  const void **v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t data;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  id v23;
  void **v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type size;
  std::string::value_type *v28;
  int v29;
  uint64_t v30;
  SKShader *v31;
  id obj;
  uint64_t v33;
  uint64_t **v34;
  id v35;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  std::string v42;
  uint64_t v43;
  void *__p[2];
  unsigned __int8 v45;
  _DWORD v46[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[128];
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v31 = a3;
  if (this[1])
  {
    if (*((_BYTE *)this + 16))
    {
      std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::clear((uint64_t)(this + 3));
      objc_msgSend(this[1], "attributeValues");
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v35 = (id)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
      if (v19)
      {
        v20 = *(_QWORD *)v48;
        do
        {
          for (i = 0; i != v19; ++i)
          {
            if (*(_QWORD *)v48 != v20)
              objc_enumerationMutation(v35);
            v22 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
            std::string::basic_string[abi:ne180100]<0>(&v42, "a_");
            v23 = objc_retainAutorelease(v22);
            std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v23, "UTF8String"));
            if ((v45 & 0x80u) == 0)
              v24 = __p;
            else
              v24 = (void **)__p[0];
            if ((v45 & 0x80u) == 0)
              v25 = v45;
            else
              v25 = (std::string::size_type)__p[1];
            v26 = std::string::append(&v42, (const std::string::value_type *)v24, v25);
            v28 = (std::string::value_type *)v26->__r_.__value_.__r.__words[0];
            size = v26->__r_.__value_.__l.__size_;
            v46[0] = v26->__r_.__value_.__r.__words[2];
            *(_DWORD *)((char *)v46 + 3) = *(_DWORD *)((char *)&v26->__r_.__value_.__r.__words[2] + 3);
            v29 = SHIBYTE(v26->__r_.__value_.__r.__words[2]);
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            if ((char)v45 < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v42.__r_.__value_.__l.__data_);
            objc_msgSend(v35, "objectForKeyedSubscript:", v23, v31);
            v30 = objc_claimAutoreleasedReturnValue();
            if (v29 < 0)
            {
              std::string::__init_copy_ctor_external(&v42, v28, size);
            }
            else
            {
              v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
              v42.__r_.__value_.__l.__size_ = size;
              LODWORD(v42.__r_.__value_.__r.__words[2]) = v46[0];
              *(_DWORD *)((char *)&v42.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v46 + 3);
              *((_BYTE *)&v42.__r_.__value_.__s + 23) = v29;
            }
            v43 = v30;
            std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::__emplace_unique_key_args<std::string,std::pair<std::string,SKAttributeValue * {__strong}>>((uint64_t)(this + 3), (unsigned __int8 *)&v42, (__int128 *)&v42);
            std::pair<std::string,SKAttributeValue * {__strong}>::~pair((uint64_t)&v42);
            if (v29 < 0)
              operator delete(v28);
          }
          v19 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
        }
        while (v19);
      }

      *((_BYTE *)this + 16) = 0;
    }
    v6 = v31;
    v34 = -[SKShader _attributeBuffers](v31, "_attributeBuffers", v31);
    -[SKShader attributes](v6, "attributes");
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v7 = (id)objc_claimAutoreleasedReturnValue();
    obj = v7;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v38, v51, 16);
    if (v8)
    {
      v33 = *(_QWORD *)v39;
      v9 = (char *)(this + 3);
      do
      {
        for (j = 0; j != v8; ++j)
        {
          if (*(_QWORD *)v39 != v33)
            objc_enumerationMutation(obj);
          v11 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * j);
          v12 = (const void **)objc_msgSend(v11, "getNameString");
          v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
          v13 = std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34, v12, (uint64_t)&std::piecewise_construct, (__int128 **)&v42)+ 7;
          SKCRendererEnsureBufferPoolCapacity(v13, a5, a4);
          v14 = *v13;
          data = jet_buffer_pool::get_data((jet_buffer_pool *)*v13);
          v16 = *(_DWORD *)(v14 + 8) - 1;
          if (v16 > 7)
            v17 = 4;
          else
            v17 = dword_1DC9224EC[v16];
          v18 = *(_DWORD *)(v14 + 12);
          v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
          objc_msgSend(*((id *)std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v9, (unsigned __int8 *)v12, (uint64_t)&std::piecewise_construct, (__int128 **)&v42)+ 5), "copyValueTo:type:count:", data + a5 * (unint64_t)(v18 * v17), objc_msgSend(v11, "type"), a4);
        }
        v7 = obj;
        v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v51, 16);
      }
      while (v8);
    }

  }
}

void sub_1DC897954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{

  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,SKAttributeValue * {__strong}>::~pair(uint64_t a1)
{

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

char *SKCNode::addRenderableChildren(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;

  v5 = (uint64_t)result;
  v6 = (char *)*((_QWORD *)result + 14);
  v7 = (char *)*((_QWORD *)result + 15);
  if (v6 != v7 || *((_QWORD *)result + 11) != *((_QWORD *)result + 12))
  {
    std::vector<SKCNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>(a3, *(_QWORD *)(a3 + 8), v6, v7, (v7 - v6) >> 3);
    result = std::vector<SKCNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>(a3, *(_QWORD *)(a3 + 8), *(char **)(v5 + 88), *(char **)(v5 + 96), (uint64_t)(*(_QWORD *)(v5 + 96) - *(_QWORD *)(v5 + 88)) >> 3);
    *(_DWORD *)(*(_QWORD *)(a2 + 664) + 156) += (*(_QWORD *)(v5 + 96) - *(_QWORD *)(v5 + 88)) >> 3;
  }
  return result;
}

void SKCNode::outline(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t SKCNode::getMaxBatchRenderElementCount()
{
  return 0;
}

uint64_t SKCNode::getNeedsCustomRenderOps()
{
  return 0;
}

uint64_t SKCNode::canAppendToCurrentBatch()
{
  return 0;
}

id SKCNode::getScene(SKCNode *this)
{
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t);
  id v9;

  v4 = 0;
  v5 = &v4;
  v6 = 0x3032000000;
  v7 = __Block_byref_object_copy__1;
  v8 = __Block_byref_object_dispose__1;
  v9 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___ZN7SKCNode8getSceneEv_block_invoke;
  v3[3] = &unk_1EA4FE920;
  v3[4] = &v4;
  SKCNode::walkUp((uint64_t)this, v3, 1);
  v1 = (id)v5[5];
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1DC897BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void SKCNode::walkUp(uint64_t a1, void *a2, char a3)
{
  void (**v5)(id, uint64_t, char *);
  BOOL v6;
  char v7;

  v5 = a2;
  if ((a3 & 1) == 0)
    a1 = *(_QWORD *)(a1 + 80);
  v7 = 0;
  if (a1)
  {
    do
    {
      v5[2](v5, a1, &v7);
      a1 = *(_QWORD *)(a1 + 80);
      if (a1)
        v6 = v7 == 0;
      else
        v6 = 0;
    }
    while (v6);
  }

}

void sub_1DC897C6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN7SKCNode8getSceneEv_block_invoke(uint64_t a1, id *lpsrc, _BYTE *a3)
{
  id v6;

  if (lpsrc
  {
    v6 = lpsrc[1];
    if (v6)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), lpsrc[1]);
        *a3 = 1;
      }
    }

  }
}

void sub_1DC897D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL SKCNode::intersectsNode(SKCNode **this, SKCNode **a2)
{
  simd_float4 v3;
  simd_float4 v4;
  simd_float4 v5;
  simd_float4 v6;
  simd_float4 v7;
  simd_float4 v8;
  simd_float4 v9;
  simd_float4 v10;
  simd_float4x4 v12;
  simd_float4x4 v13;

  if (!a2)
    return 0;
  *(double *)v3.i64 = SKCNode::getWorldBoundingBox(this);
  v13.columns[0] = v3;
  v13.columns[1] = v4;
  v13.columns[2] = v5;
  v13.columns[3] = v6;
  *(double *)v7.i64 = SKCNode::getWorldBoundingBox(a2);
  v12.columns[0] = v7;
  v12.columns[1] = v8;
  v12.columns[2] = v9;
  v12.columns[3] = v10;
  return SKCBoundingBoxIntersectsBoundingBox(&v13, &v12);
}

double SKCNode::getWorldBoundingBox(SKCNode **this)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  SKCNode *v6;
  __n128 ConversionMatrixToWorld;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[4];
  __int128 v18;

  (*((void (**)(SKCNode **))*this + 15))(this);
  v6 = this[10];
  if (v6)
  {
    v15 = v5;
    v16 = v4;
    v13 = v2;
    v14 = v3;
    ConversionMatrixToWorld = SKCNode::getConversionMatrixToWorld(v6);
    v11 = 0;
    v17[0] = v13;
    v17[1] = v14;
    v17[2] = v16;
    v17[3] = v15;
    do
    {
      *(__int128 *)((char *)&v18 + v11 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)ConversionMatrixToWorld, COERCE_FLOAT(v17[v11])), v8, *(float32x2_t *)&v17[v11], 1), v9, (float32x4_t)v17[v11], 2), v10, (float32x4_t)v17[v11], 3);
      ++v11;
    }
    while (v11 != 4);
    *(_QWORD *)&v2 = v18;
  }
  return *(double *)&v2;
}

void SKCNode::setPaused(SKCNode *this, char a2)
{
  *((_BYTE *)this + 172) = a2;
  SKCNode::recomputeFlags(this, 1);
}

void SKCNode::recomputeFlags(SKCNode *this, int a2)
{
  int v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v4 = *((_DWORD *)this + 68) & 2;
  *((_DWORD *)this + 68) = v4;
  if (*((_QWORD *)this + 24))
    *((_DWORD *)this + 68) = v4 | 4;
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    objc_msgSend(v5, "constraints");
    v6 = objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v7 = (void *)v6;
      objc_msgSend(*((id *)this + 1), "constraints");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "count");

      if (v9)
        *((_DWORD *)this + 68) |= 0x10u;
    }
  }
  if (*((_QWORD *)this + 29))
    *((_DWORD *)this + 68) |= 8u;
  if ((*(unsigned int (**)(SKCNode *))(*(_QWORD *)this + 176))(this))
    *((_DWORD *)this + 68) |= 0x20u;
  (*(void (**)(SKCNode *))(*(_QWORD *)this + 168))(this);
  if (a2)
    SKCNode::propagateFlags(this);
}

void sub_1DC897F34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void SKCNode::setColor(SKCNode *this, _OWORD *a2)
{
  int v2;

  *((_OWORD *)this + 19) = *a2;
  v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setDirty(SKCNode *this)
{
  int v1;

  v1 = *((_DWORD *)this + 68);
  if ((v1 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v1 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setAnchor(SKCNode *this, _OWORD *a2)
{
  int v2;

  *((_OWORD *)this + 22) = *a2;
  v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setAlpha(SKCNode *this, float *a2)
{
  int v2;

  *((float *)this + 81) = *a2;
  v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setSize(uint64_t a1, _OWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  int v6;
  __int128 v7;

  *(_OWORD *)(a1 + 336) = *a2;
  v7 = 0uLL;
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 256, &v7);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(_DWORD *)(a1 + 272);
  if ((v6 & 2) == 0)
  {
    *(_DWORD *)(a1 + 272) = v6 | 2;
    SKCNode::propagateFlags((SKCNode *)a1);
  }
}

void SKCNode::setColorBlendFactor(SKCNode *this, float *a2)
{
  int v2;

  *((float *)this + 80) = *a2;
  v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setHidden(SKCNode *this, int a2)
{
  int v2;

  if (*((unsigned __int8 *)this + 280) != a2)
  {
    *((_BYTE *)this + 280) = a2;
    v2 = *((_DWORD *)this + 68);
    if ((v2 & 2) == 0)
    {
      *((_DWORD *)this + 68) = v2 | 2;
      SKCNode::propagateFlags(this);
    }
  }
}

void SKCNode::setBlendMode(SKCNode *this, SKBlendMode a2)
{
  int v2;

  *((_QWORD *)this + 36) = a2;
  v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::addAction(SKCNode *this, SKCAction *a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = operator new(0x18uLL);
  v5 = *((_QWORD *)this + 22);
  v4[1] = (char *)this + 176;
  v4[2] = a2;
  *v4 = v5;
  *(_QWORD *)(v5 + 8) = v4;
  *((_QWORD *)this + 22) = v4;
  ++*((_QWORD *)this + 24);
  SKCAction::wasAddedToTargetAtTime(a2, this, 0.0);
  SKCNode::recomputeFlags(this, 1);
}

void SKCNode::walkDown(uint64_t **a1, void *a2, int a3, int a4)
{
  void (**v7)(id, uint64_t **, _BYTE *);
  uint64_t *v8;
  uint64_t *i;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v7 = a2;
  v14 = 0;
  v11 = (uint64_t *)&v11;
  v12 = (uint64_t *)&v11;
  v13 = 0;
  if (a3)
  {
    v8 = (uint64_t *)operator new(0x18uLL);
    v8[1] = (uint64_t)&v11;
    v8[2] = (uint64_t)a1;
    *v8 = (uint64_t)&v11;
    v11 = v8;
    v12 = v8;
    v13 = 1;
  }
  else
  {
    std::list<SKCNode *>::__insert_with_sentinel[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>((uint64_t)&v11, (uint64_t *)&v11, a1[11], a1[12]);
    if (a4)
      std::list<SKCNode *>::__insert_with_sentinel[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>((uint64_t)&v11, (uint64_t *)&v11, a1[14], a1[15]);
  }
  for (i = v12; i != (uint64_t *)&v11; i = (uint64_t *)i[1])
  {
    v10 = (uint64_t **)i[2];
    v7[2](v7, v10, &v14);
    if (v14)
      break;
    std::list<SKCNode *>::__insert_with_sentinel[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>((uint64_t)&v11, (uint64_t *)&v11, v10[11], v10[12]);
    if (a4)
      std::list<SKCNode *>::__insert_with_sentinel[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>((uint64_t)&v11, (uint64_t *)&v11, v10[14], v10[15]);
  }
  std::__list_imp<SKCRenderSortInfo *>::clear(&v11);

}

void sub_1DC898228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::__list_imp<SKCRenderSortInfo *>::clear(&a9);

  _Unwind_Resume(a1);
}

void SKCNode::walkChildren(char **a1, void *a2, int a3, int a4)
{
  void (**v7)(id, _QWORD, char *);
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  char *v17;
  BOOL v18;
  char v19;
  void *__p;
  void *__dst;
  _QWORD *v22;

  v7 = a2;
  v8 = 0;
  __p = 0;
  __dst = 0;
  v22 = 0;
  if (a3)
  {
    v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)&v22, 1uLL);
    v11 = &v9[v10];
    *v9 = a1;
    v8 = v9 + 1;
    v13 = (char *)__p;
    v12 = (char *)__dst;
    if (__dst != __p)
    {
      do
      {
        v14 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *--v9 = v14;
      }
      while (v12 != v13);
      v12 = (char *)__p;
    }
    __p = v9;
    __dst = v8;
    v22 = v11;
    if (v12)
      operator delete(v12);
    __dst = v8;
  }
  std::vector<SKCNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>((uint64_t)&__p, (uint64_t)v8, a1[11], a1[12], (a1[12] - a1[11]) >> 3);
  if (a4)
    std::vector<SKCNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>((uint64_t)&__p, (uint64_t)__dst, a1[14], a1[15], (a1[15] - a1[14]) >> 3);
  v19 = 0;
  v15 = __p;
  v16 = (char *)__dst;
  if (__p != __dst)
  {
    v17 = (char *)__p + 8;
    do
    {
      v7[2](v7, *((_QWORD *)v17 - 1), &v19);
      if (v19)
        v18 = 1;
      else
        v18 = v17 == v16;
      v17 += 8;
    }
    while (!v18);
    v15 = __p;
  }
  if (v15)
  {
    __dst = v15;
    operator delete(v15);
  }

}

void sub_1DC898380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

__n128 SKCNode::getConversionMatrixToWorld(SKCNode *this)
{
  _QWORD *v1;
  __n128 result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  __n128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[4];
  _OWORD v16[4];

  v1 = (_QWORD *)*((_QWORD *)this + 10);
  (*(void (**)(SKCNode *))(*(_QWORD *)this + 104))(this);
  for (; v1; v1 = (_QWORD *)v1[10])
  {
    v11 = result;
    v12 = v3;
    v13 = v4;
    v14 = v5;
    (*(void (**)(_QWORD *))(*v1 + 104))(v1);
    v10 = 0;
    v15[0] = v11;
    v15[1] = v12;
    v15[2] = v13;
    v15[3] = v14;
    do
    {
      v16[v10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v15[v10])), v7, *(float32x2_t *)&v15[v10], 1), v8, (float32x4_t)v15[v10], 2), v9, (float32x4_t)v15[v10], 3);
      ++v10;
    }
    while (v10 != 4);
    result = (__n128)v16[0];
    v3 = v16[1];
    v4 = v16[2];
    v5 = v16[3];
  }
  return result;
}

double SKCNode::getWorldAccumulatedBoundingBox(char **this)
{
  __n128 AccumulatedBoundingBox;
  __n128 v3;
  __n128 v4;
  __n128 v5;
  SKCNode *v6;
  __n128 ConversionMatrixToWorld;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  _OWORD v17[4];
  __int128 v18;

  AccumulatedBoundingBox = SKCNode::getAccumulatedBoundingBox(this);
  v6 = (SKCNode *)this[10];
  if (v6)
  {
    v15 = v5;
    v16 = v4;
    v13 = AccumulatedBoundingBox;
    v14 = v3;
    ConversionMatrixToWorld = SKCNode::getConversionMatrixToWorld(v6);
    v11 = 0;
    v17[0] = v13;
    v17[1] = v14;
    v17[2] = v16;
    v17[3] = v15;
    do
    {
      *(__int128 *)((char *)&v18 + v11 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)ConversionMatrixToWorld, COERCE_FLOAT(v17[v11])), v8, *(float32x2_t *)&v17[v11], 1), v9, (float32x4_t)v17[v11], 2), v10, (float32x4_t)v17[v11], 3);
      ++v11;
    }
    while (v11 != 4);
    AccumulatedBoundingBox.n128_u64[0] = v18;
  }
  return AccumulatedBoundingBox.n128_f64[0];
}

__n128 SKCNode::getAccumulatedBoundingBox(char **this)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  uint64_t v6;
  simd_float4 *v7;
  const simd_float4x4 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  simd_float4 v12;
  simd_float4 v13;
  simd_float4 v14;
  simd_float4 v15;
  simd_float4 v16;
  simd_float4 v17;
  simd_float4 v18;
  float32x4_t v19;
  uint64_t *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v25;
  _QWORD v26[5];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  __n128 (*v30)(uint64_t, uint64_t);
  uint64_t (*v31)();
  const char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[4];
  simd_float4x4 v38;

  v29 = 0x7012000000;
  v33 = SKCBoundingBoxEmpty;
  v34 = xmmword_1DC9223B0;
  v35 = xmmword_1DC9223C0;
  v27 = 0;
  v28 = &v27;
  v30 = __Block_byref_object_copy__2;
  v31 = __Block_byref_object_dispose__3;
  v32 = "";
  v36 = xmmword_1DC9223D0;
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = ___ZN7SKCNode25getAccumulatedBoundingBoxEv_block_invoke;
  v26[3] = &unk_1EA4FE920;
  v26[4] = &v27;
  SKCNode::walkChildren(this, v26, 0, 1);
  (*((void (**)(char **))*this + 13))(this);
  v6 = 0;
  v7 = (simd_float4 *)v28;
  v8 = (const simd_float4x4 *)(v28 + 6);
  v9 = *((_OWORD *)v28 + 4);
  v10 = *((_OWORD *)v28 + 5);
  v11 = *((_OWORD *)v28 + 6);
  v37[0] = *((_OWORD *)v28 + 3);
  v37[1] = v9;
  v37[2] = v10;
  v37[3] = v11;
  do
  {
    v38.columns[v6] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v2, COERCE_FLOAT(v37[v6])), v3, *(float32x2_t *)&v37[v6], 1), v4, (float32x4_t)v37[v6], 2), v5, (float32x4_t)v37[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  v12 = v38.columns[1];
  v13 = v38.columns[2];
  v14 = v38.columns[3];
  v7[3] = v38.columns[0];
  v7[4] = v12;
  v7[5] = v13;
  v7[6] = v14;
  *(double *)v15.i64 = (*((double (**)(char **))*this + 15))(this);
  v38.columns[0] = v15;
  v38.columns[1] = v16;
  v38.columns[2] = v17;
  v38.columns[3] = v18;
  v19 = SKCBoundingBoxUnion(v8, &v38);
  v20 = v28;
  *((float32x4_t *)v28 + 3) = v19;
  *((_OWORD *)v20 + 4) = v21;
  *((_OWORD *)v20 + 5) = v22;
  *((_OWORD *)v20 + 6) = v23;
  v25 = *((_OWORD *)v20 + 3);
  _Block_object_dispose(&v27, 8);
  return (__n128)v25;
}

void sub_1DC89865C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double SKCNode::getConversionMatrixToNode(SKCNode *this, const SKCNode *a2)
{
  double result;

  *(_QWORD *)&result = SKCNode::getConversionMatrixFromNode(a2, this).n128_u64[0];
  return result;
}

__n128 SKCNode::getConversionMatrixFromNode(SKCNode *this, const SKCNode *a2)
{
  SKCNode *v2;
  _QWORD *v4;
  uint64_t v5;
  const SKCNode *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  BOOL v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 i;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  v2 = a2;
  v4 = &v40;
  v40 = &v40;
  v41 = &v40;
  v42 = 0;
  v37 = (uint64_t)&v37;
  v38 = &v37;
  v39 = 0;
  if (a2)
  {
    v5 = 1;
    v6 = a2;
    v7 = &v40;
    do
    {
      v8 = operator new(0x18uLL);
      v8[1] = &v40;
      v8[2] = v6;
      *v8 = v7;
      v7[1] = v8;
      v40 = v8;
      v42 = v5++;
      v7 = v8;
      v6 = (const SKCNode *)*((_QWORD *)v6 + 10);
    }
    while (v6);
    v4 = v41;
  }
  if (this)
  {
    v9 = 0;
    v10 = &v37;
    while (1)
    {
      if (v4 != &v40)
      {
        v11 = v4;
        while ((SKCNode *)v11[2] != this)
        {
          v11 = (_QWORD *)v11[1];
          if (v11 == &v40)
            goto LABEL_13;
        }
        if (v11 != &v40)
          break;
      }
LABEL_13:
      v12 = (uint64_t *)operator new(0x18uLL);
      v12[1] = (uint64_t)v10;
      v12[2] = (uint64_t)this;
      *v12 = (uint64_t)&v37;
      *v10 = (uint64_t)v12;
      ++v9;
      v38 = v12;
      v39 = v9;
      v10 = v12;
      this = (SKCNode *)*((_QWORD *)this + 10);
      if (!this)
        goto LABEL_17;
    }
    v12 = v10;
  }
  else
  {
    v12 = &v37;
  }
LABEL_17:
  v14 = *MEMORY[0x1E0C83FF0];
  v13 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
  v16 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 32);
  v15 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
  if (v2 && this != v2)
  {
    do
    {
      v29 = v14;
      v31 = v13;
      v33 = v16;
      v35 = v15;
      (*(void (**)(SKCNode *))(*(_QWORD *)v2 + 104))(v2);
      v21 = 0;
      v43 = v29;
      v44 = v31;
      v45 = v33;
      v46 = v35;
      do
      {
        *(__int128 *)((char *)&v47 + v21) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(__int128 *)((char *)&v43 + v21))), v18, *(float32x2_t *)((char *)&v43 + v21), 1), v19, *(float32x4_t *)((char *)&v43 + v21), 2), v20, *(float32x4_t *)((char *)&v43 + v21), 3);
        v21 += 16;
      }
      while (v21 != 64);
      v14 = v47;
      v13 = v48;
      v16 = v49;
      v15 = v50;
      v2 = (SKCNode *)*((_QWORD *)v2 + 10);
      if (v2)
        v22 = v2 == this;
      else
        v22 = 1;
    }
    while (!v22);
    v12 = v38;
  }
  v34 = v16;
  v36 = v15;
  v30 = v14;
  for (i = v13; v12 != &v37; v12 = (uint64_t *)v12[1])
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12[2] + 112))(v12[2]);
    v27 = 0;
    v43 = v30;
    v44 = i;
    v45 = v34;
    v46 = v36;
    do
    {
      *(__int128 *)((char *)&v47 + v27) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*(__int128 *)((char *)&v43 + v27))), v24, *(float32x2_t *)((char *)&v43 + v27), 1), v25, *(float32x4_t *)((char *)&v43 + v27), 2), v26, *(float32x4_t *)((char *)&v43 + v27), 3);
      v27 += 16;
    }
    while (v27 != 64);
    v30 = v47;
    i = v48;
    v34 = v49;
    v36 = v50;
  }
  std::__list_imp<SKCRenderSortInfo *>::clear(&v37);
  std::__list_imp<SKCRenderSortInfo *>::clear(&v40);
  return (__n128)v30;
}

void sub_1DC8988EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::__list_imp<SKCRenderSortInfo *>::clear((uint64_t *)va);
  std::__list_imp<SKCRenderSortInfo *>::clear((uint64_t *)va1);
  _Unwind_Resume(a1);
}

__n128 SKCNode::getConversionMatrixFromWorld(SKCNode *this)
{
  _QWORD *v1;
  __n128 result;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  _OWORD v15[4];
  _OWORD v16[4];

  v1 = (_QWORD *)*((_QWORD *)this + 10);
  (*(void (**)(SKCNode *))(*(_QWORD *)this + 112))(this);
  for (; v1; v1 = (_QWORD *)v1[10])
  {
    v11 = v5;
    v12 = v4;
    v13 = v3;
    v14 = (float32x4_t)result;
    *(double *)&v6 = (*(double (**)(_QWORD *))(*v1 + 112))(v1);
    v7 = 0;
    v15[0] = v6;
    v15[1] = v8;
    v15[2] = v9;
    v15[3] = v10;
    do
    {
      v16[v7] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(v15[v7])), v13, *(float32x2_t *)&v15[v7], 1), v12, (float32x4_t)v15[v7], 2), v11, (float32x4_t)v15[v7], 3);
      ++v7;
    }
    while (v7 != 4);
    result = (__n128)v16[0];
    v3 = (float32x4_t)v16[1];
    v4 = (float32x4_t)v16[2];
    v5 = (float32x4_t)v16[3];
  }
  return result;
}

double SKCNode::convertPointToNode(SKCNode *a1, SKCNode *this, float32x4_t a3)
{
  __n128 ConversionMatrixFromNode;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  double result;

  ConversionMatrixFromNode = SKCNode::getConversionMatrixFromNode(this, a1);
  *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)ConversionMatrixFromNode, a3.f32[0]), v4, *(float32x2_t *)a3.f32, 1), v5, a3, 2), v6, a3, 3).u64[0];
  return result;
}

double SKCNode::convertPointFromNode(SKCNode *a1, const SKCNode *a2, float32x4_t a3)
{
  __n128 ConversionMatrixFromNode;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  double result;

  ConversionMatrixFromNode = SKCNode::getConversionMatrixFromNode(a1, a2);
  *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)ConversionMatrixFromNode, a3.f32[0]), v4, *(float32x2_t *)a3.f32, 1), v5, a3, 2), v6, a3, 3).u64[0];
  return result;
}

__n128 SKCNode::getBoundingBox(__n128 *this)
{
  return this[32];
}

__n128 __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void ___ZN7SKCNode25getAccumulatedBoundingBoxEv_block_invoke(uint64_t a1, SKCNode *this)
{
  const simd_float4x4 *v3;
  simd_float4 v4;
  simd_float4 v5;
  simd_float4 v6;
  simd_float4 v7;
  float32x4_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  simd_float4x4 v13;

  v3 = (const simd_float4x4 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  SKCNode::getAccumulatedBoundingBox(this);
  v13.columns[0] = v4;
  v13.columns[1] = v5;
  v13.columns[2] = v6;
  v13.columns[3] = v7;
  v8 = SKCBoundingBoxUnion(v3, &v13);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(float32x4_t *)(v9 + 48) = v8;
  *(_OWORD *)(v9 + 64) = v10;
  *(_OWORD *)(v9 + 80) = v11;
  *(_OWORD *)(v9 + 96) = v12;
}

double SKCNode::getUntransformedBoundingBox(SKCNode *this)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[4];
  __int128 v17;

  *(double *)&v2 = (*(double (**)(SKCNode *))(*(_QWORD *)this + 120))(this);
  v12 = v3;
  v13 = v2;
  v14 = v5;
  v15 = v4;
  (*(void (**)(SKCNode *))(*(_QWORD *)this + 112))(this);
  v10 = 0;
  v16[0] = v13;
  v16[1] = v12;
  v16[2] = v15;
  v16[3] = v14;
  do
  {
    *(__int128 *)((char *)&v17 + v10 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v16[v10])), v7, *(float32x2_t *)&v16[v10], 1), v8, (float32x4_t)v16[v10], 2), v9, (float32x4_t)v16[v10], 3);
    ++v10;
  }
  while (v10 != 4);
  return *(double *)&v17;
}

void SKCNode::update(SKCNode *this, double a2, float a3)
{
  float v5;
  char *v6;
  uint64_t v7;
  SKCAction *v8;
  uint64_t i;
  SKCAction *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  _DWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  _DWORD *v19;
  int v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void *__p;
  _QWORD *v26;
  uint64_t v27;

  if (!*((_BYTE *)this + 172))
  {
    v5 = *((float *)this + 42) * a3;
    *((_BYTE *)this + 224) = 1;
    if ((*((_BYTE *)this + 272) & 4) != 0)
    {
      v6 = (char *)this + 176;
      v7 = *((_QWORD *)this + 23);
      if ((SKCNode *)v7 != (SKCNode *)((char *)this + 176))
      {
        while (1)
        {
          v8 = *(SKCAction **)(v7 + 16);
          if (!v8->var12)
            SKCAction::willStartWithTargetAtTime(*(SKCAction **)(v7 + 16), this, a2);
          if (v8->var5)
          {
            if (!v8->var11)
              goto LABEL_10;
          }
          else if ((objc_msgSend(v8->var4, "finished") & 1) == 0)
          {
LABEL_10:
            if (v8->var16 != v5)
              (*((void (**)(SKCAction *, float))v8->var0 + 5))(v8, v5);
            SKCAction::updateWithTargetForTime(v8, this, a2);
          }
          v7 = *(_QWORD *)(v7 + 8);
          if ((char *)v7 == v6)
          {
            for (i = *((_QWORD *)this + 23); ; i = *(_QWORD *)(i + 8))
            {
              if ((char *)i == v6)
                goto LABEL_21;
              v10 = *(SKCAction **)(i + 16);
              if (v10->var5)
              {
                if (!v10->var11)
                  continue;
              }
              else if (!objc_msgSend(v10->var4, "finished"))
              {
                continue;
              }
              SKCNode::removeAction(this, v10);
            }
          }
        }
      }
    }
LABEL_21:
    if ((*((_BYTE *)this + 276) & 0x20) != 0)
    {
      *((_DWORD *)this + 69) = 0;
      __p = 0;
      v26 = 0;
      v27 = 0;
      std::vector<SKCNode *>::__init_with_size[abi:ne180100]<SKCNode **,SKCNode **>(&__p, *((const void **)this + 11), *((_QWORD *)this + 12), (uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 3);
      v11 = __p;
      v12 = v26;
      if (__p == v26)
      {
        v13 = 0;
      }
      else
      {
        v13 = 0;
        do
        {
          v14 = (_DWORD *)*v11;
          v15 = *(_DWORD *)(*v11 + 272);
          if ((v15 & 0x20) != 0 || (v16 = v14[69], (v16 & 0x20) != 0))
          {
            (*(void (**)(_QWORD, double, float))(*(_QWORD *)v14 + 152))(*v11, a2, v5);
            v15 = v14[68];
            v16 = v14[69];
          }
          v13 |= v15 | v16;
          ++v11;
        }
        while (v11 != v12);
      }
      v22 = 0;
      v23 = 0;
      v24 = 0;
      std::vector<SKCNode *>::__init_with_size[abi:ne180100]<SKCNode **,SKCNode **>(&v22, *((const void **)this + 14), *((_QWORD *)this + 15), (uint64_t)(*((_QWORD *)this + 15) - *((_QWORD *)this + 14)) >> 3);
      v17 = v22;
      v18 = v23;
      if (v22 != v23)
      {
        do
        {
          v19 = (_DWORD *)*v17;
          v20 = *(_DWORD *)(*v17 + 272);
          if ((v20 & 0x20) != 0 || (v21 = v19[69], (v21 & 0x20) != 0))
          {
            (*(void (**)(_QWORD, double, float))(*(_QWORD *)v19 + 152))(*v17, a2, v5);
            v20 = v19[68];
            v21 = v19[69];
          }
          v13 |= v20 | v21;
          ++v17;
        }
        while (v17 != v18);
        v17 = v22;
      }
      *((_DWORD *)this + 69) |= v13;
      if (v17)
      {
        v23 = v17;
        operator delete(v17);
      }
      if (__p)
      {
        v26 = __p;
        operator delete(__p);
      }
    }
    *((_BYTE *)this + 224) = 0;
    SKCNode::cleanup(this);
    SKCNode::recomputeFlags(this, 1);
  }
}

void sub_1DC898DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SKCNode::matchesAnyFlags(SKCNode *this, int a2, int a3)
{
  return a2 && (*((_DWORD *)this + 68) & a2) != 0 || a3 && (*((_DWORD *)this + 69) & a3) != 0;
}

void SKCNode::removeAction(SKCNode *this, SKCAction *a2)
{
  SKCAction *v2;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  double v10;
  void *v11;
  SKCAction *v12;

  v2 = a2;
  v12 = a2;
  v4 = a2->var4;
  if (*((_BYTE *)this + 224))
  {
    v5 = operator new(0x18uLL);
    v6 = *((_QWORD *)this + 25);
    v5[1] = (char *)this + 200;
    v5[2] = v2;
    *v5 = v6;
    *(_QWORD *)(v6 + 8) = v5;
    *((_QWORD *)this + 25) = v5;
    ++*((_QWORD *)this + 27);
    if (v4)
    {
      v7 = (void *)*((_QWORD *)this + 20);
      if (!v7)
      {
        v8 = objc_alloc_init(MEMORY[0x1E0C99E20]);
        v9 = (void *)*((_QWORD *)this + 20);
        *((_QWORD *)this + 20) = v8;

        v7 = (void *)*((_QWORD *)this + 20);
      }
      objc_msgSend(v7, "addObject:", v4);
    }
  }
  else
  {
    std::list<SKCAction *>::remove((uint64_t)this + 176, &v12);
    v2 = v12;
  }
  v10 = skCurrentTime();
  SKCAction::wasRemovedFromTargetAtTime(v2, this, v10);
  if (v4)
  {
    v11 = (void *)*((_QWORD *)this + 1);
    if (v11)
      objc_msgSend(v11, "_removeAction:", v4);
  }

}

void sub_1DC898F0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SKCNode::cleanup(SKCNode *this)
{
  id **v2;
  id **v3;
  id *v4;
  _QWORD *i;
  uint64_t v7;

  v2 = (id **)*((_QWORD *)this + 17);
  v3 = (id **)*((_QWORD *)this + 18);
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      SKCNode::removeChild(this, v4);
      SKCNode::removeInternalChild(this, v4);
    }
    while (v2 != v3);
    v2 = (id **)*((_QWORD *)this + 17);
  }
  *((_QWORD *)this + 18) = v2;
  for (i = (_QWORD *)*((_QWORD *)this + 26); i != (_QWORD *)((char *)this + 200); i = (_QWORD *)i[1])
  {
    v7 = i[2];
    std::list<SKCAction *>::remove((uint64_t)this + 176, &v7);
  }
  std::__list_imp<SKCRenderSortInfo *>::clear((_QWORD *)this + 25);
  return objc_msgSend(*((id *)this + 20), "removeAllObjects");
}

void SKCNode::addChild(SKCNode *this, SKCNode *a2)
{
  SKCNode::insertChildAtIndex(this, a2, (*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 3);
}

void SKCNode::insertChildAtIndex(SKCNode *this, SKCNode *a2, unsigned int a3)
{
  SKCNode **v6;
  SKCNode **v7;
  int64_t v8;
  SKCNode **v9;
  SKCNode **v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  SKCNode *v27;

  v27 = a2;
  if (*((_BYTE *)this + 224))
  {
    v7 = (SKCNode **)*((_QWORD *)this + 17);
    v6 = (SKCNode **)*((_QWORD *)this + 18);
    if (v7 != v6)
    {
      while (*v7 != a2)
      {
        if (++v7 == v6)
        {
          v7 = (SKCNode **)*((_QWORD *)this + 18);
          break;
        }
      }
    }
    if (v7 != v6)
    {
      v8 = (char *)v6 - (char *)(v7 + 1);
      if (v6 != v7 + 1)
        memmove(v7, v7 + 1, (char *)v6 - (char *)(v7 + 1));
      *((_QWORD *)this + 18) = (char *)v7 + v8;
      v10 = (SKCNode **)*((_QWORD *)this + 11);
      v9 = (SKCNode **)*((_QWORD *)this + 12);
      if (v10 != v9)
      {
        while (*v10 != a2)
        {
          if (++v10 == v9)
          {
            v10 = (SKCNode **)*((_QWORD *)this + 12);
            break;
          }
        }
      }
      v11 = (char *)v9 - (char *)(v10 + 1);
      if (v9 != v10 + 1)
        memmove(v10, v10 + 1, (char *)v9 - (char *)(v10 + 1));
      *((_QWORD *)this + 12) = (char *)v10 + v11;
    }
  }
  v12 = *((_QWORD *)this + 11);
  v13 = (_QWORD *)*((_QWORD *)this + 12);
  v14 = ((uint64_t)v13 - v12) >> 3;
  if ((a3 & 0x80000000) != 0 || v14 == a3)
  {
    v15 = *((_QWORD *)this + 13);
    if ((unint64_t)v13 >= v15)
    {
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
      v17 = v15 - v12;
      v18 = v17 >> 2;
      if (v17 >> 2 <= (unint64_t)(v14 + 1))
        v18 = v14 + 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
        v19 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19)
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)this + 104, v19);
      else
        v20 = 0;
      v21 = &v20[8 * v14];
      v22 = &v20[8 * v19];
      *(_QWORD *)v21 = a2;
      v16 = v21 + 8;
      v24 = (char *)*((_QWORD *)this + 11);
      v23 = (char *)*((_QWORD *)this + 12);
      if (v23 != v24)
      {
        do
        {
          v25 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          *((_QWORD *)v21 - 1) = v25;
          v21 -= 8;
        }
        while (v23 != v24);
        v23 = (char *)*((_QWORD *)this + 11);
      }
      *((_QWORD *)this + 11) = v21;
      *((_QWORD *)this + 12) = v16;
      *((_QWORD *)this + 13) = v22;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v13 = a2;
      v16 = v13 + 1;
    }
    *((_QWORD *)this + 12) = v16;
  }
  else
  {
    std::vector<SKCNode *>::insert((uint64_t)this + 88, (char *)(v12 + 8 * a3), (char *)&v27);
  }
  v26 = *((_DWORD *)this + 68);
  if ((v26 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v26 | 2;
    SKCNode::propagateFlags(this);
  }
  SKCNode::recomputeFlags(v27, 1);
  SKCNode::recomputeFlags(this, 1);
}

char *std::vector<SKCNode *>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = std::vector<SKCNode *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1DC8993C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SKCNode::removeChild(SKCNode *this, id *a2)
{
  unint64_t v4;
  id **v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int64_t v18;
  id **v19;
  char *v20;
  char *v21;
  char *v22;
  id *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  int v28;
  id v29;

  v29 = a2[1];
  if (!*((_BYTE *)this + 224))
  {
    v8 = (char *)*((_QWORD *)this + 11);
    v7 = (char *)*((_QWORD *)this + 12);
    if (v8 != v7)
    {
      v9 = 0;
      while (*(id **)&v8[v9] != a2)
      {
        v9 += 8;
        if (&v8[v9] == v7)
          goto LABEL_30;
      }
      v16 = &v8[v9];
      v17 = &v8[v9 + 8];
      v18 = v7 - v17;
      if (v7 != v17)
        memmove(&v8[v9], v17, v7 - v17);
      *((_QWORD *)this + 12) = &v16[v18];
    }
    goto LABEL_30;
  }
  v4 = *((_QWORD *)this + 19);
  v5 = (id **)*((_QWORD *)this + 18);
  if ((unint64_t)v5 >= v4)
  {
    v10 = *((_QWORD *)this + 17);
    v11 = ((uint64_t)v5 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v12 = v4 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)this + 152, v14);
    else
      v15 = 0;
    v19 = (id **)&v15[8 * v11];
    v20 = &v15[8 * v14];
    *v19 = a2;
    v6 = v19 + 1;
    v22 = (char *)*((_QWORD *)this + 17);
    v21 = (char *)*((_QWORD *)this + 18);
    if (v21 != v22)
    {
      do
      {
        v23 = (id *)*((_QWORD *)v21 - 1);
        v21 -= 8;
        *--v19 = v23;
      }
      while (v21 != v22);
      v21 = (char *)*((_QWORD *)this + 17);
    }
    *((_QWORD *)this + 17) = v19;
    *((_QWORD *)this + 18) = v6;
    *((_QWORD *)this + 19) = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  *((_QWORD *)this + 18) = v6;
  if (v29)
  {
    v24 = (void *)*((_QWORD *)this + 20);
    if (!v24)
    {
      objc_msgSend(MEMORY[0x1E0C99E20], "set");
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = (void *)*((_QWORD *)this + 20);
      *((_QWORD *)this + 20) = v25;

      v24 = (void *)*((_QWORD *)this + 20);
    }
    objc_msgSend(v24, "addObject:", v29);
LABEL_30:
    if (a2[10] == this)
    {
      a2[10] = 0;
      if (v29)
      {
        objc_msgSend(v29, "setParent:", 0);
        v27 = (void *)*((_QWORD *)this + 1);
        if (v27)
          objc_msgSend(v27, "_removeChild:", v29);
      }
    }
    goto LABEL_36;
  }
  if (a2[10] == this)
    a2[10] = 0;
LABEL_36:
  v28 = *((_DWORD *)this + 68);
  if ((v28 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v28 | 2;
    SKCNode::propagateFlags(this);
  }

}

void sub_1DC8995E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SKCNode::removeInternalChild(SKCNode *this, id *a2)
{
  unint64_t v4;
  id **v5;
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int64_t v18;
  id **v19;
  char *v20;
  char *v21;
  char *v22;
  id *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  int v28;
  id v29;

  v29 = a2[1];
  if (!*((_BYTE *)this + 224))
  {
    v8 = (char *)*((_QWORD *)this + 14);
    v7 = (char *)*((_QWORD *)this + 15);
    if (v8 != v7)
    {
      v9 = 0;
      while (*(id **)&v8[v9] != a2)
      {
        v9 += 8;
        if (&v8[v9] == v7)
          goto LABEL_30;
      }
      v16 = &v8[v9];
      v17 = &v8[v9 + 8];
      v18 = v7 - v17;
      if (v7 != v17)
        memmove(&v8[v9], v17, v7 - v17);
      *((_QWORD *)this + 15) = &v16[v18];
    }
    goto LABEL_30;
  }
  v4 = *((_QWORD *)this + 19);
  v5 = (id **)*((_QWORD *)this + 18);
  if ((unint64_t)v5 >= v4)
  {
    v10 = *((_QWORD *)this + 17);
    v11 = ((uint64_t)v5 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v12 = v4 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)this + 152, v14);
    else
      v15 = 0;
    v19 = (id **)&v15[8 * v11];
    v20 = &v15[8 * v14];
    *v19 = a2;
    v6 = v19 + 1;
    v22 = (char *)*((_QWORD *)this + 17);
    v21 = (char *)*((_QWORD *)this + 18);
    if (v21 != v22)
    {
      do
      {
        v23 = (id *)*((_QWORD *)v21 - 1);
        v21 -= 8;
        *--v19 = v23;
      }
      while (v21 != v22);
      v21 = (char *)*((_QWORD *)this + 17);
    }
    *((_QWORD *)this + 17) = v19;
    *((_QWORD *)this + 18) = v6;
    *((_QWORD *)this + 19) = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  *((_QWORD *)this + 18) = v6;
  if (v29)
  {
    v24 = (void *)*((_QWORD *)this + 20);
    if (!v24)
    {
      objc_msgSend(MEMORY[0x1E0C99E20], "set");
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = (void *)*((_QWORD *)this + 20);
      *((_QWORD *)this + 20) = v25;

      v24 = (void *)*((_QWORD *)this + 20);
    }
    objc_msgSend(v24, "addObject:", v29);
LABEL_30:
    if (a2[10] == this)
    {
      a2[10] = 0;
      if (v29)
      {
        objc_msgSend(v29, "setParent:", 0);
        v27 = (void *)*((_QWORD *)this + 1);
        if (v27)
          objc_msgSend(v27, "_removeChild:", v29);
      }
    }
    goto LABEL_36;
  }
  if (a2[10] == this)
    a2[10] = 0;
LABEL_36:
  v28 = *((_DWORD *)this + 68);
  if ((v28 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v28 | 2;
    SKCNode::propagateFlags(this);
  }

}

void sub_1DC8997EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *std::list<SKCAction *>::remove(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10[3];

  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 != (_QWORD *)a1)
  {
    do
    {
      v6 = (_QWORD *)v2[1];
      v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (_QWORD *)a1)
        {
          v8 = 1;
LABEL_8:
          v6 = (_QWORD *)a1;
        }
        else
        {
          while (1)
          {
            v7 = v6[2];
            v8 = v7 == v5;
            if (v7 != v5)
              break;
            v6 = (_QWORD *)v6[1];
            if (v6 == (_QWORD *)a1)
              goto LABEL_8;
          }
        }
        std::list<SKCAction *>::splice((uint64_t)v10, v10, a1, v2, v6);
        if (!v8)
          v6 = (_QWORD *)v6[1];
      }
      v2 = v6;
    }
    while (v6 != (_QWORD *)a1);
  }
  return std::__list_imp<SKCRenderSortInfo *>::clear(v10);
}

void sub_1DC8998B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<SKCRenderSortInfo *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void SKCNode::setTranslation(SKCNode *this, __n128 a2)
{
  int v2;

  *((__n128 *)this + 32) = a2;
  *((_WORD *)this + 184) = 257;
  v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

{
  int v2;

  a2.n128_u64[1] = vextq_s8(*((int8x16_t *)this + 32), *((int8x16_t *)this + 32), 8uLL).u64[0];
  *((__n128 *)this + 32) = a2;
  *((_WORD *)this + 184) = 257;
  v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setZTranslation(SKCNode *this, float a2)
{
  int v2;

  *((float *)this + 130) = a2;
  *((_WORD *)this + 184) = 257;
  v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setTranslation(SKCNode *this, __n128 a2, float a3)
{
  int v4;

  if ((COERCE_UNSIGNED_INT(COERCE_FLOAT(*((_OWORD *)this + 32)) - a2.n128_f32[0]) & 0x60000000) != 0
    || (COERCE_UNSIGNED_INT(COERCE_FLOAT(HIDWORD(*((_QWORD *)this + 64))) - a3) & 0x60000000) != 0)
  {
    a2.n128_f32[1] = a3;
    a2.n128_u64[1] = *((_QWORD *)this + 65);
    *((__n128 *)this + 32) = a2;
    *((_WORD *)this + 184) = 257;
    v4 = *((_DWORD *)this + 68);
    if ((v4 & 2) == 0)
    {
      *((_DWORD *)this + 68) = v4 | 2;
      SKCNode::propagateFlags(this);
    }
  }
}

void SKCNode::setRotation(SKCNode *this, __n128 a2)
{
  int v2;

  *((__n128 *)this + 33) = a2;
  *((_WORD *)this + 184) = 257;
  v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setZRotation(SKCNode *this, float a2)
{
  int v2;

  *((float *)this + 134) = a2;
  *((_WORD *)this + 184) = 257;
  v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setScale(SKCNode *this, __n128 a2)
{
  int v2;

  *((__n128 *)this + 34) = a2;
  *((_WORD *)this + 184) = 257;
  v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

{
  int v2;

  a2.n128_u64[1] = vextq_s8(*((int8x16_t *)this + 34), *((int8x16_t *)this + 34), 8uLL).u64[0];
  *((__n128 *)this + 34) = a2;
  *((_WORD *)this + 184) = 257;
  v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setScale(SKCNode *this, __n128 a2, float a3)
{
  int v3;

  a2.n128_f32[1] = a3;
  a2.n128_u64[1] = *((_QWORD *)this + 69);
  *((__n128 *)this + 34) = a2;
  *((_WORD *)this + 184) = 257;
  v3 = *((_DWORD *)this + 68);
  if ((v3 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v3 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setScale(SKCNode *this, int32x2_t a2)
{
  int v2;

  *((int32x4_t *)this + 34) = vdupq_lane_s32(a2, 0);
  *((_WORD *)this + 184) = 257;
  v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

__n128 SKCNode::getTranslation(__n128 *this)
{
  return this[32];
}

float SKCNode::getZTranslation(SKCNode *this)
{
  return *((float *)this + 130);
}

__n128 SKCNode::getScale(__n128 *this)
{
  return this[34];
}

__n128 SKCNode::getRotation(__n128 *this)
{
  return this[33];
}

float SKCNode::getZRotation(SKCNode *this)
{
  return *((float *)this + 134);
}

__n128 SKCNode::getBasePhysicsScale(__n128 *this)
{
  return this[15];
}

BOOL SKCNode::intersectsPoint(char **a1, double a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v7[4];

  v7[0] = (float32x4_t)SKCNode::getAccumulatedBoundingBox(a1);
  v7[1] = v2;
  v7[2] = v3;
  v7[3] = v4;
  return SKCBoundingBoxIntersectsPoint(v7, a2);
}

BOOL SKCNode::containsPoint(uint64_t a1, float32x4_t a2)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  _OWORD v22[4];
  float32x4_t v23;

  *(double *)v3.i64 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v19 = v3;
  v20 = v4;
  v17 = v6;
  v18 = v5;
  *(double *)&v7 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v8 = 0;
  v22[0] = v7;
  v22[1] = v9;
  v22[2] = v10;
  v22[3] = v11;
  do
  {
    *(float32x4_t *)((char *)&v23 + v8 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, COERCE_FLOAT(v22[v8])), v20, *(float32x2_t *)&v22[v8], 1), v18, (float32x4_t)v22[v8], 2), v17, (float32x4_t)v22[v8], 3);
    ++v8;
  }
  while (v8 != 4);
  *(double *)v12.i64 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  return SKCBoundingBoxIntersectsPoint(&v23, *(double *)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, a2.f32[0]), v13, *(float32x2_t *)a2.f32, 1), v14, a2, 2), v15, a2, 3).i64);
}

uint64_t SKCNode::intersectsCircle(char **a1, __n128 a2, float a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v9[4];

  v9[0] = SKCNode::getAccumulatedBoundingBox(a1);
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  return SKCBoundingBoxIntersectsCircle(v9, a2, a3);
}

uint64_t SKCNode::nodeAtPoint(uint64_t a1, float32x4_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a1;
  v4 = (uint64_t)&v4;
  v5 = &v4;
  v6 = 0;
  if (SKCNode::sortedNodesAtPoint(a1, &v4, a2))
    v2 = v5[2];
  std::__list_imp<SKCRenderSortInfo *>::clear(&v4);
  return v2;
}

void sub_1DC899C50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<SKCRenderSortInfo *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t SKCNode::sortedNodesAtPoint(uint64_t a1, uint64_t *a2, float32x4_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;

  v16 = (uint64_t)&v16;
  v17 = &v16;
  v18 = 0;
  v15 = 0;
  v4 = *(uint64_t **)(a1 + 88);
  v5 = *(uint64_t **)(a1 + 96);
  if (v4 == v5)
  {
    v7 = 0;
    v6 = &v16;
  }
  else
  {
    do
      _sortedNodesAtPoint(*v4++, &v16, &v15, a3, 0.0);
    while (v4 != v5);
    v6 = v17;
    v7 = v18;
  }
  _ZNSt3__14listINS_5tupleIJP7SKCNodefjbEEENS_9allocatorIS4_EEE6__sortIZNS2_18sortedNodesAtPointEDv4_fPNS0_IS3_NS5_IS3_EEEEE3__0EENS_15__list_iteratorIS4_PvEESG_SG_mRT_((uint64_t)v6, (uint64_t)&v16, v7);
  for (i = v17; i != &v16; i = (uint64_t *)i[1])
  {
    v9 = i[2];
    v10 = operator new(0x18uLL);
    v10[1] = a2;
    v10[2] = v9;
    v11 = *a2;
    *v10 = *a2;
    *(_QWORD *)(v11 + 8) = v10;
    *a2 = (uint64_t)v10;
    ++a2[2];
  }
  v12 = v18;
  std::__list_imp<SKCRenderSortInfo *>::clear(&v16);
  return v12;
}

void sub_1DC899D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__list_imp<SKCRenderSortInfo *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t SKCNode::nodesAtPoint(char **a1, uint64_t *a2, int a3, float32x4_t a4)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  __n128 v17;
  _QWORD v18[4];
  __n128 v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t *, uint64_t);
  _QWORD *(*v25)(uint64_t);
  uint64_t v26;
  _QWORD v27[3];

  v21 = 0;
  v22 = &v21;
  v23 = 0x4812000000;
  v24 = __Block_byref_object_copy__5;
  v25 = __Block_byref_object_dispose__6;
  v26 = 0;
  v27[0] = v27;
  v27[1] = v27;
  v27[2] = 0;
  *(double *)v7.i64 = (*((double (**)(char **))*a1 + 13))(a1);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = ___ZN7SKCNode12nodesAtPointEDv4_fPNSt3__14listIPS_NS1_9allocatorIS3_EEEEb_block_invoke;
  v18[3] = &unk_1EA4FF710;
  v17 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, a4.f32[0]), v8, *(float32x2_t *)a4.f32, 1), v9, a4, 2), v10, a4, 3);
  v19 = v17;
  v20 = &v21;
  SKCNode::walkChildren(a1, v18, 0, 0);
  v11 = v22;
  if (a3)
  {
    v12 = v22 + 6;
    v13 = (uint64_t *)v22[7];
    if (v13 != v22 + 6)
    {
      do
      {
        SKCNode::nodesAtPoint(v13[2], v22 + 6, 1, v17);
        v13 = (uint64_t *)v13[1];
      }
      while (v13 != v12);
      v11 = v22;
    }
  }
  std::list<SKCNode *>::__insert_with_sentinel[abi:ne180100]<std::__list_iterator<SKCNode *,void *>,std::__list_iterator<SKCNode *,void *>>((uint64_t)a2, a2, v11[7], (uint64_t)(v11 + 6));
  v14 = *((unsigned int *)v22 + 16);
  _Block_object_dispose(&v21, 8);
  std::__list_imp<SKCRenderSortInfo *>::clear(v27);
  return v14;
}

void sub_1DC899EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  _QWORD *v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  std::__list_imp<SKCRenderSortInfo *>::clear(v10);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t *a1, uint64_t a2)
{
  a1[6] = (uint64_t)(a1 + 6);
  a1[7] = (uint64_t)(a1 + 6);
  a1[8] = 0;
  return std::list<SKCNode *>::splice((uint64_t)(a1 + 6), a1 + 6, (_QWORD *)(a2 + 48));
}

_QWORD *__Block_byref_object_dispose__6(uint64_t a1)
{
  return std::__list_imp<SKCRenderSortInfo *>::clear((_QWORD *)(a1 + 48));
}

uint64_t ___ZN7SKCNode12nodesAtPointEDv4_fPNSt3__14listIPS_NS1_9allocatorIS3_EEEEb_block_invoke(uint64_t a1, char **this)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  float32x4_t v11[4];

  v10 = *(_OWORD *)(a1 + 32);
  v11[0] = (float32x4_t)SKCNode::getAccumulatedBoundingBox(this);
  v11[1] = v4;
  v11[2] = v5;
  v11[3] = v6;
  result = SKCBoundingBoxIntersectsPoint(v11, *(double *)&v10);
  if ((_DWORD)result)
  {
    v8 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8);
    result = (uint64_t)operator new(0x18uLL);
    *(_QWORD *)(result + 16) = this;
    v9 = v8[6];
    v8 += 6;
    *(_QWORD *)result = v9;
    *(_QWORD *)(result + 8) = v8;
    *(_QWORD *)(v9 + 8) = result;
    *v8 = result;
    ++v8[2];
  }
  return result;
}

uint64_t _sortedNodesAtPoint(uint64_t result, uint64_t *a2, int *a3, float32x4_t a4, float a5)
{
  uint64_t v5;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t *v21;
  uint64_t *v22;
  float v23;
  uint64_t v24;
  __n128 v26;
  float32x4_t v27[4];

  if (!*(_BYTE *)(result + 280))
  {
    v5 = result;
    if (*(float *)(result + 324) > 0.0)
    {
      v27[0] = (float32x4_t)SKCNode::getAccumulatedBoundingBox((char **)result);
      v27[1] = v9;
      v27[2] = v10;
      v27[3] = v11;
      result = SKCBoundingBoxIntersectsPoint(v27, *(double *)a4.i64);
      if ((_DWORD)result)
      {
        v12 = *(float *)(v5 + 520) + a5;
        v13 = SKCNode::containsPoint(v5, a4);
        v14 = *a3;
        result = (uint64_t)operator new(0x28uLL);
        *(_QWORD *)(result + 8) = a2;
        *(_QWORD *)(result + 16) = v5;
        *(float *)(result + 24) = v12;
        *(_DWORD *)(result + 28) = v14;
        *(_BYTE *)(result + 32) = v13;
        v15 = *a2;
        *(_QWORD *)result = *a2;
        *(_QWORD *)(v15 + 8) = result;
        *a2 = result;
        ++a2[2];
        *a3 = v14 + 1;
        if (*(_QWORD *)(v5 + 88) != *(_QWORD *)(v5 + 96))
        {
          v16 = *(float *)(v5 + 520);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 112))(v5);
          v22 = *(uint64_t **)(v5 + 88);
          v21 = *(uint64_t **)(v5 + 96);
          if (v22 != v21)
          {
            v23 = v16 + a5;
            v26 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, a4.f32[0]), v18, *(float32x2_t *)a4.f32, 1), v19, a4, 2), v20, a4, 3);
            do
            {
              v24 = *v22++;
              result = _sortedNodesAtPoint(v24, a2, a3, v26, v23);
            }
            while (v22 != v21);
          }
        }
      }
    }
  }
  return result;
}

uint64_t SKCNode::pushToPhysics(uint64_t this)
{
  uint64_t v1;
  float32x4_t v2;
  int8x16_t v3;
  int8x16_t v4;
  float32x4_t v5;
  int8x16_t v6;
  unint64_t v7;
  float32x4_t v8;
  __int128 v9;
  __int128 v10;

  if (*(_QWORD *)(this + 232))
  {
    v1 = this;
    v10 = 0u;
    v8 = 0u;
    v9 = 0u;
    SKCNode::resolveWorldPositionRotationAndScale((_OWORD *)this, &v10, &v9, &v8);
    v2 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v3 = (int8x16_t)vminnmq_f32(vmaxnmq_f32(vabsq_f32(v8), (float32x4_t)vdupq_n_s32(0x38D1B717u)), v2);
    v2.i32[0] = 0;
    v4 = v3;
    *(float *)v4.i32 = -*(float *)v3.i32;
    v5 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v2, v8), 0), v4, v3);
    v6 = (int8x16_t)v5;
    v6.i32[1] = vnegq_f32(v5).i32[1];
    v7 = vdivq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1)), 0), v6, (int8x16_t)v5), *(float32x4_t *)(v1 + 240)).u64[0];
    objc_msgSend(*(id *)(v1 + 232), "setPosition:", vcvtq_f64_f32(*(float32x2_t *)&v10));
    objc_msgSend(*(id *)(v1 + 232), "setRotation:", *((float *)&v9 + 2));
    return objc_msgSend(*(id *)(v1 + 232), "reapplyScale:yScale:", *(float *)&v7, *((float *)&v7 + 1));
  }
  return this;
}

void SKCNode::resolveWorldPositionRotationAndScale(_OWORD *a1, _OWORD *a2, _OWORD *a3, _OWORD *a4)
{
  __int128 v7;
  _QWORD v8[7];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v18 = &v17;
  v7 = a1[33];
  v20 = a1[32];
  v16 = a1[34];
  v19 = 0x3020000000;
  v13 = 0;
  v14 = &v13;
  v15 = 0x3020000000;
  v9 = 0;
  v10 = &v9;
  v11 = 0x3020000000;
  v12 = v7;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZN7SKCNode36resolveWorldPositionRotationAndScaleEPDv4_fS1_S1__block_invoke;
  v8[3] = &unk_1EA4FF738;
  v8[4] = &v17;
  v8[5] = &v9;
  v8[6] = &v13;
  SKCNode::walkUp((uint64_t)a1, v8, 0);
  if (a2)
    *a2 = *((_OWORD *)v18 + 2);
  if (a3)
    *a3 = *((_OWORD *)v10 + 2);
  if (a4)
    *a4 = *((_OWORD *)v14 + 2);
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
}

void sub_1DC89A2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

_QWORD *SKCNode::pullFromPhysics(SKCNode *this)
{
  _QWORD *result;
  double v3;
  double v4;
  double v5;
  double v6;
  float64x2_t v7;
  float32x4_t v8;
  float v9;
  uint64_t *v10;
  uint64_t *v11;
  _OWORD *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int v18;
  float64_t v19;
  __int128 v20;
  float64_t v21;
  float32x4_t v22;
  _QWORD v23[5];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t *, uint64_t);
  _QWORD *(*v28)(uint64_t);
  uint64_t v29;
  _QWORD v30[3];

  result = (_QWORD *)*((_QWORD *)this + 29);
  if (result)
  {
    objc_msgSend(result, "rotation");
    v4 = v3;
    objc_msgSend(*((id *)this + 29), "position");
    v21 = v5;
    objc_msgSend(*((id *)this + 29), "position");
    v19 = v6;
    v24 = 0;
    v25 = &v24;
    v26 = 0x4812000000;
    v27 = __Block_byref_object_copy__5;
    v28 = __Block_byref_object_dispose__6;
    v29 = 0;
    v30[0] = v30;
    v30[1] = v30;
    v30[2] = 0;
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = ___ZN7SKCNode15pullFromPhysicsEv_block_invoke;
    v23[3] = &unk_1EA4FE920;
    v23[4] = &v24;
    SKCNode::walkUp((uint64_t)this, v23, 0);
    v7.f64[0] = v21;
    v7.f64[1] = v19;
    *(float32x2_t *)v8.f32 = vcvt_f32_f64(v7);
    v8.i64[1] = 0x3F80000000000000;
    v9 = v4;
    v10 = v25 + 6;
    v11 = (uint64_t *)v25[7];
    if (v11 == v25 + 6)
    {
      v17.i64[0] = v8.i64[0];
    }
    else
    {
      do
      {
        v12 = (_OWORD *)v11[2];
        v20 = v12[33];
        v22 = v8;
        *(double *)v13.i64 = (*(double (**)(_OWORD *))(*(_QWORD *)v12 + 112))(v12);
        v9 = v9 - *((float *)&v20 + 2);
        v17 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v22.f32[0]), v14, *(float32x2_t *)v22.f32, 1), v15, v22, 2), v16, v22, 3);
        v11 = (uint64_t *)v11[1];
        v8 = v17;
      }
      while (v11 != v10);
    }
    v17.i64[1] = *((_QWORD *)this + 65);
    *((float32x4_t *)this + 32) = v17;
    *((_WORD *)this + 184) = 257;
    v18 = *((_DWORD *)this + 68);
    if ((v18 & 2) == 0)
    {
      *((_DWORD *)this + 68) = v18 | 2;
      SKCNode::propagateFlags(this);
      v18 = *((_DWORD *)this + 68);
    }
    *((float *)this + 134) = v9;
    *((_WORD *)this + 184) = 257;
    if ((v18 & 2) == 0)
    {
      *((_DWORD *)this + 68) = v18 | 2;
      SKCNode::propagateFlags(this);
    }
    _Block_object_dispose(&v24, 8);
    return std::__list_imp<SKCRenderSortInfo *>::clear(v30);
  }
  return result;
}

void sub_1DC89A4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  _QWORD *v10;
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  std::__list_imp<SKCRenderSortInfo *>::clear(v10);
  _Unwind_Resume(a1);
}

void SKCNode::setFlags(SKCNode *this, int a2, int a3)
{
  int v3;

  v3 = *((_DWORD *)this + 68);
  if ((a2 & ~v3) != 0)
  {
    *((_DWORD *)this + 68) = v3 | a2;
    if (a3)
      SKCNode::propagateFlags(this);
  }
}

double SKCNode::clearDirty(SKCNode *this)
{
  double result;

  *(_QWORD *)&result = *((_QWORD *)this + 34) & 0xFFFFFFFDFFFFFFFDLL;
  *((double *)this + 34) = result;
  return result;
}

int8x8_t SKCNode::clearFlags(int8x8_t *this, unsigned int a2, unsigned int a3)
{
  int8x8_t result;

  result = vbic_s8(this[34], (int8x8_t)__PAIR64__(a3, a2));
  this[34] = result;
  return result;
}

BOOL SKCNode::matchesAllFlags(SKCNode *this, int a2, int a3)
{
  return (a2 & ~*((_DWORD *)this + 68)) == 0 && (a3 & ~*((_DWORD *)this + 69)) == 0;
}

void SKCNode::propagateFlags(SKCNode *this)
{
  uint64_t v1;
  int v2;
  const void *v3;
  int v4;
  int v5;
  SKCSceneNode *v7;

  v1 = *((_QWORD *)this + 10);
  if (v1)
  {
    v2 = *((_DWORD *)this + 69) | *((_DWORD *)this + 68);
    do
    {
      v3 = (const void *)v1;
      v4 = *(_DWORD *)(v1 + 272);
      v5 = *(_DWORD *)(v1 + 276);
      *(_DWORD *)(v1 + 276) = v5 | v2;
      v1 = *(_QWORD *)(v1 + 80);
    }
    while (v1);
    if (!(v5 | v4) && v2 != 0)
    {
      if (v7)
        SKCSceneNode::notifyDirtyState(v7);
    }
  }
}

BOOL SKCNode::getNeedsUpdate(SKCNode *this)
{
  return (*((_BYTE *)this + 272) & 4) != 0 && !*((_BYTE *)this + 172) && (*((_BYTE *)this + 171) & 0x60) != 0;
}

float32x4_t ___ZN7SKCNode36resolveWorldPositionRotationAndScaleEPDv4_fS1_S1__block_invoke(_QWORD *a1, float32x4_t *a2)
{
  float32x4_t v4;
  float32x2_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t *v9;
  float32x4_t result;

  *(double *)v4.i64 = (*(double (**)(float32x4_t *))(a2->i64[0] + 104))(a2);
  v5 = *(float32x2_t **)(a1[4] + 8);
  *(float32x4_t *)v5[4].f32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, COERCE_FLOAT(*(_OWORD *)v5[4].f32)), v6, v5[4], 1), v7, *(float32x4_t *)v5[4].f32, 2), v8, *(float32x4_t *)v5[4].f32, 3);
  *(float32x4_t *)(*(_QWORD *)(a1[5] + 8) + 32) = vaddq_f32(a2[33], *(float32x4_t *)(*(_QWORD *)(a1[5] + 8) + 32));
  v9 = *(float32x4_t **)(a1[6] + 8);
  result = vmulq_f32(a2[34], v9[2]);
  v9[2] = result;
  return result;
}

double SKCNode::getTransformMatrix(__n128 *this, double a2, double a3, __n128 a4, __n128 a5, double a6, double a7, __n128 a8, __n128 a9)
{
  float32x4_t v10;
  float v11;
  __n128 v13;
  __float2 v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int v18;
  __float2 v19;
  int32x2_t v20;
  float32x4_t v21;
  float32x4_t v22;
  __int128 v23;
  float32x4_t v24;
  unint64_t v25;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  __int128 v31;
  __n128 v32;
  __int128 v33;
  __n128 v34;
  __n128 v35;
  float32x4_t v36;
  __n128 v37;
  __n128 v38;
  uint64_t v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;

  if (!this[23].n128_u8[0])
  {
    a8 = this[24];
    return a8.n128_f64[0];
  }
  v10 = (float32x4_t)this[32];
  v11 = this[33].n128_f32[2];
  a5.n128_u32[0] = HIDWORD(this[34].n128_u64[0]);
  a4.n128_f32[0] = a5.n128_f32[0] + -1.0;
  if ((COERCE_UNSIGNED_INT(COERCE_FLOAT(*(_OWORD *)&this[34]) + -1.0) & 0x60000000) == 0
    && (COERCE_UNSIGNED_INT(a5.n128_f32[0] + -1.0) & 0x60000000) == 0)
  {
    if ((LODWORD(v11) & 0x60000000) == 0)
    {
      v18 = 0;
      goto LABEL_14;
    }
    v31 = *MEMORY[0x1E0C83FF0];
    v33 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
    v35 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 32);
    v37 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 48);
    v39 = this[32].n128_i64[0];
    v19 = __sincosf_stret(v11);
    a9.n128_u64[1] = *((_QWORD *)&v33 + 1);
    a4 = v35;
    a8.n128_u64[1] = *((_QWORD *)&v31 + 1);
    a5 = v37;
    v10.i64[0] = v39;
    a8.n128_u64[0] = __PAIR64__(LODWORD(v19.__sinval), LODWORD(v19.__cosval));
    a9.n128_f32[0] = -v19.__sinval;
    a9.n128_u32[1] = LODWORD(v19.__cosval);
  }
  else
  {
    v13 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 16);
    a5 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 48);
    a8 = *(__n128 *)MEMORY[0x1E0C83FF0];
    a8.n128_u32[0] = (unsigned __int32)this[34];
    a9 = v13;
    a9.n128_u32[1] = HIDWORD(this[34].n128_u64[0]);
    a4 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 32);
    a4.n128_u32[2] = 1.0;
    if ((LODWORD(v11) & 0x60000000) != 0)
    {
      v36 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
      v38 = this[32];
      v30 = a8;
      v32 = a9;
      v34 = a4;
      v28 = v13.n128_i64[1];
      v29 = *(_QWORD *)(MEMORY[0x1E0C83FF0] + 8);
      v27 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32);
      v14 = __sincosf_stret(v11);
      v17.i64[1] = v28;
      v16.i64[1] = v29;
      v15 = 0;
      v16.i64[0] = __PAIR64__(LODWORD(v14.__sinval), LODWORD(v14.__cosval));
      v17.f32[0] = -v14.__sinval;
      v17.i32[1] = LODWORD(v14.__cosval);
      v40 = v30;
      v41 = v32;
      v42 = v34;
      v43 = (__n128)v36;
      do
      {
        *(float32x4_t *)((char *)&v44 + v15) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, COERCE_FLOAT(*(_OWORD *)((char *)&v40 + v15))), v17, (float32x2_t)v40.n128_u64[v15 / 8], 1), v27, *(float32x4_t *)((char *)&v40 + v15), 2), v36, *(float32x4_t *)((char *)&v40 + v15), 3);
        v15 += 16;
      }
      while (v15 != 64);
      a8 = v44;
      a9 = v45;
      v18 = 1;
      a4 = v46;
      a5 = v47;
      v10.i64[0] = v38.n128_u64[0];
      goto LABEL_14;
    }
  }
  v18 = 1;
LABEL_14:
  v20 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)vrev64_s32(*(int32x2_t *)v10.f32), (int8x8_t)0x6000000060000000));
  if ((v20.i32[1] & v20.i32[0] & 1) != 0)
  {
    if ((v18 & 1) == 0)
    {
      a8 = *(__n128 *)MEMORY[0x1E0C83FF0];
      a9 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 16);
      a4 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 32);
      a5 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 48);
    }
  }
  else
  {
    v21 = *(float32x4_t *)MEMORY[0x1E0C83FF0];
    v22 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
    v24 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32);
    v23 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
    DWORD2(v23) = 0;
    v10.i64[1] = *((_QWORD *)&v23 + 1);
    if (v18)
    {
      v25 = 0;
      v40 = a8;
      v41 = a9;
      v42 = a4;
      v43 = a5;
      do
      {
        *(float32x4_t *)((char *)&v44 + v25) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(*(_OWORD *)((char *)&v40 + v25))), v22, (float32x2_t)v40.n128_u64[v25 / 8], 1), v24, *(float32x4_t *)((char *)&v40 + v25), 2), v10, *(float32x4_t *)((char *)&v40 + v25), 3);
        v25 += 16;
      }
      while (v25 != 64);
      a8 = v44;
      a9 = v45;
      a4 = v46;
      a5 = v47;
    }
    else
    {
      a8 = *(__n128 *)MEMORY[0x1E0C83FF0];
      a9 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 16);
      a4 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 32);
      a5 = (__n128)v10;
    }
  }
  this[24] = a8;
  this[25] = a9;
  this[26] = a4;
  this[27] = a5;
  this[23].n128_u8[0] = 0;
  return a8.n128_f64[0];
}

__n128 SKCNode::getInverseTransformMatrix(simd_float4x4 *this)
{
  simd_float4x4 v3;
  simd_float4x4 v4;

  if (this[5].columns[3].i8[1])
  {
    *(double *)v3.columns[0].i64 = (*(double (**)(simd_float4x4 *))(this->columns[0].i64[0] + 104))(this);
    v4 = __invert_f4(v3);
    this[7] = v4;
    this[5].columns[3].i8[1] = 0;
  }
  else
  {
    v4.columns[0] = this[7].columns[0];
  }
  return (__n128)v4.columns[0];
}

uint64_t SKCNode::removeAllChildren(SKCNode *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = SKCNode::cleanup(this);
  v3 = *((_QWORD *)this + 11);
  v4 = *((_QWORD *)this + 12);
  if (v3 != v4)
  {
    v5 = *((_QWORD *)this + 11);
    do
    {
      if (*(SKCNode **)(*(_QWORD *)v5 + 80) == this)
        *(_QWORD *)(*(_QWORD *)v5 + 80) = 0;
      v5 += 8;
    }
    while (v5 != v4);
  }
  *((_QWORD *)this + 12) = v3;
  v6 = *((_QWORD *)this + 14);
  v7 = *((_QWORD *)this + 15);
  if (v6 != v7)
  {
    v8 = *((_QWORD *)this + 14);
    do
    {
      if (*(SKCNode **)(*(_QWORD *)v8 + 80) == this)
        *(_QWORD *)(*(_QWORD *)v8 + 80) = 0;
      v8 += 8;
    }
    while (v8 != v7);
  }
  *((_QWORD *)this + 15) = v6;
  return result;
}

void SKCNode::~SKCNode(id *this)
{
  id v2;
  id v3;
  id v4;

  *this = off_1EA4FF620;
  SKCNode::removeAllChildren((SKCNode *)this);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 32));

  std::__list_imp<SKCRenderSortInfo *>::clear(this + 25);
  std::__list_imp<SKCRenderSortInfo *>::clear(this + 22);

  v2 = this[17];
  if (v2)
  {
    this[18] = v2;
    operator delete(v2);
  }
  v3 = this[14];
  if (v3)
  {
    this[15] = v3;
    operator delete(v3);
  }
  v4 = this[11];
  if (v4)
  {
    this[12] = v4;
    operator delete(v4);
  }

  std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::~__hash_table((uint64_t)(this + 3));
}

{
  SKCNode::~SKCNode(this);
  JUMPOUT(0x1DF0CF560);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,SKAttributeValue * {__strong}>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,SKAttributeValue * {__strong}>,0>(uint64_t a1)
{

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::__emplace_unique_key_args<std::string,std::pair<std::string,SKAttributeValue * {__strong}>>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = operator new(0x30uLL);
  v17 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v18 = *((_QWORD *)a3 + 2);
  v19 = *((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v29[0] = v16;
  v29[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  *((_OWORD *)v16 + 1) = v17;
  v16[4] = v18;
  v16[5] = v19;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(a1, v25);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v27 >= v10)
          v27 %= v10;
      }
      else
      {
        v27 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1DC89AE30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,SKAttributeValue * {__strong}>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1DC89B594(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<jet_buffer_pool>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<jet_buffer_pool>>,0>(uint64_t a1)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1DC89B914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1DC89B9B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

char *std::vector<SKCNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<SKCNode *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1DC89BB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<SKCNode *>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_QWORD *)v8 - 1);
      v8 -= 8;
      *((_QWORD *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t *std::list<SKCNode *>::__insert_with_sentinel[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 != a4)
  {
    v8 = operator new(0x18uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    v11 = *a3;
    v10 = a3 + 1;
    v8[2] = v11;
    v12 = 1;
    if (v10 != a4)
    {
      v13 = v8;
      do
      {
        v8 = operator new(0x18uLL);
        *v8 = v13;
        v8[1] = 0;
        v14 = *v10++;
        v8[2] = v14;
        v13[1] = v8;
        ++v12;
        v13 = v8;
      }
      while (v10 != a4);
    }
    v15 = *a2;
    *(_QWORD *)(v15 + 8) = v9;
    *v9 = v15;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v12;
    return v9;
  }
  return a2;
}

void sub_1DC89BD60(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1DC89BD80(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::vector<SKCNode *>::__init_with_size[abi:ne180100]<SKCNode **,SKCNode **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DC89BDF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::list<SKCAction *>::splice(uint64_t result, uint64_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4 != a5)
  {
    v5 = (_QWORD *)*a5;
    if (result != a3)
    {
      v6 = 1;
      if (v5 != a4)
      {
        v7 = a4;
        do
        {
          v7 = (_QWORD *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(_QWORD *)(a3 + 16) -= v6;
      *(_QWORD *)(result + 16) += v6;
    }
    v8 = *a4;
    *(_QWORD *)(v8 + 8) = v5[1];
    *(_QWORD *)v5[1] = v8;
    v9 = *a2;
    *(_QWORD *)(v9 + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

uint64_t *std::list<SKCNode *>::__insert_with_sentinel[abi:ne180100]<std::__list_iterator<SKCNode *,void *>,std::__list_iterator<SKCNode *,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = operator new(0x18uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = *(_QWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 8);
    v11 = 1;
    if (v10 != a4)
    {
      v12 = v8;
      do
      {
        v8 = operator new(0x18uLL);
        *v8 = v12;
        v8[1] = 0;
        v8[2] = *(_QWORD *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        v10 = *(_QWORD *)(v10 + 8);
        v12 = v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1DC89BF54(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1DC89BF74(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::list<SKCNode *>::splice(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a3[2];
  if (v3)
  {
    v5 = *a3;
    v4 = (uint64_t *)a3[1];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = v4;
    *v4 = v7;
    *a2 = v5;
    *(_QWORD *)(v5 + 8) = a2;
    *(_QWORD *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

uint64_t _ZNSt3__14listINS_5tupleIJP7SKCNodefjbEEENS_9allocatorIS4_EEE6__sortIZNS2_18sortedNodesAtPointEDv4_fPNS0_IS3_NS5_IS3_EEEEE3__0EENS_15__list_iteratorIS4_PvEESG_SG_mRT_(uint64_t result, uint64_t a2, unint64_t a3)
{
  float *v4;
  float v5;
  float v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  unsigned int v13;
  int v14;
  float v15;
  uint64_t *v16;
  uint64_t i;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  unsigned int v24;
  int v25;
  float v26;
  uint64_t j;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a3 < 2)
    return result;
  if (a3 != 2)
  {
    v8 = a3 >> 1;
    v9 = (a3 >> 1) + 1;
    v10 = result;
    do
    {
      v10 = *(_QWORD *)(v10 + 8);
      --v9;
    }
    while (v9 > 1);
    v11 = _ZNSt3__14listINS_5tupleIJP7SKCNodefjbEEENS_9allocatorIS4_EEE6__sortIZNS2_18sortedNodesAtPointEDv4_fPNS0_IS3_NS5_IS3_EEEEE3__0EENS_15__list_iteratorIS4_PvEESG_SG_mRT_(result, v10, a3 >> 1);
    result = _ZNSt3__14listINS_5tupleIJP7SKCNodefjbEEENS_9allocatorIS4_EEE6__sortIZNS2_18sortedNodesAtPointEDv4_fPNS0_IS3_NS5_IS3_EEEEE3__0EENS_15__list_iteratorIS4_PvEESG_SG_mRT_(v10, a2, a3 - v8);
    v12 = *(float *)(v11 + 24);
    v13 = *(_DWORD *)(v11 + 28);
    v14 = *(unsigned __int8 *)(v11 + 32);
    if (*(unsigned __int8 *)(result + 32) == v14)
    {
      v15 = *(float *)(result + 24);
      if ((COERCE_UNSIGNED_INT(v15 - v12) & 0x60000000) != 0)
      {
        if (v15 <= v12)
        {
LABEL_12:
          v16 = *(uint64_t **)(v11 + 8);
          i = result;
          result = v11;
          goto LABEL_28;
        }
      }
      else if (*(_DWORD *)(result + 28) <= v13)
      {
        goto LABEL_12;
      }
    }
    else if (!*(_BYTE *)(result + 32))
    {
      goto LABEL_12;
    }
    for (i = *(_QWORD *)(result + 8); i != a2; i = *(_QWORD *)(i + 8))
    {
      if (*(unsigned __int8 *)(i + 32) == v14)
      {
        v18 = *(float *)(i + 24);
        if ((COERCE_UNSIGNED_INT(v18 - v12) & 0x60000000) != 0)
        {
          if (v18 <= v12)
            goto LABEL_27;
        }
        else if (*(_DWORD *)(i + 28) <= v13)
        {
          goto LABEL_27;
        }
      }
      else if (!*(_BYTE *)(i + 32))
      {
        goto LABEL_27;
      }
    }
    i = a2;
LABEL_27:
    v19 = *(_QWORD *)i;
    v20 = *(_QWORD *)result;
    *(_QWORD *)(v20 + 8) = *(_QWORD *)(*(_QWORD *)i + 8);
    **(_QWORD **)(v19 + 8) = v20;
    v21 = *(_QWORD *)v11;
    v16 = *(uint64_t **)(v11 + 8);
    *(_QWORD *)(v21 + 8) = result;
    *(_QWORD *)result = v21;
    *(_QWORD *)v11 = v19;
    *(_QWORD *)(v19 + 8) = v11;
LABEL_28:
    if (v16 != (uint64_t *)i && i != a2)
    {
      v22 = i;
      while (1)
      {
        v23 = *((float *)v16 + 6);
        v24 = *((_DWORD *)v16 + 7);
        v25 = *((unsigned __int8 *)v16 + 32);
        if (*(unsigned __int8 *)(v22 + 32) == v25)
        {
          v26 = *(float *)(v22 + 24);
          if ((COERCE_UNSIGNED_INT(v26 - v23) & 0x60000000) != 0)
          {
            if (v26 > v23)
              goto LABEL_36;
          }
          else if (*(_DWORD *)(v22 + 28) > v24)
          {
LABEL_36:
            for (j = *(_QWORD *)(v22 + 8); j != a2; j = *(_QWORD *)(j + 8))
            {
              if (*(unsigned __int8 *)(j + 32) == v25)
              {
                v28 = *(float *)(j + 24);
                if ((COERCE_UNSIGNED_INT(v28 - v23) & 0x60000000) != 0)
                {
                  if (v28 <= v23)
                    goto LABEL_47;
                }
                else if (*(_DWORD *)(j + 28) <= v24)
                {
                  goto LABEL_47;
                }
              }
              else if (!*(_BYTE *)(j + 32))
              {
                goto LABEL_47;
              }
            }
            j = a2;
LABEL_47:
            v29 = *(_QWORD *)j;
            v30 = *(_QWORD *)v22;
            *(_QWORD *)(v30 + 8) = *(_QWORD *)(*(_QWORD *)j + 8);
            **(_QWORD **)(v29 + 8) = v30;
            if (i == v22)
              i = j;
            v32 = *v16;
            v31 = (uint64_t *)v16[1];
            *(_QWORD *)(v32 + 8) = v22;
            *(_QWORD *)v22 = v32;
            *v16 = v29;
            *(_QWORD *)(v29 + 8) = v16;
            v22 = j;
            v16 = v31;
            goto LABEL_50;
          }
        }
        else if (*(_BYTE *)(v22 + 32))
        {
          goto LABEL_36;
        }
        v16 = (uint64_t *)v16[1];
LABEL_50:
        if (v16 == (uint64_t *)i || v22 == a2)
          return result;
      }
    }
    return result;
  }
  v4 = *(float **)a2;
  if (*(unsigned __int8 *)(*(_QWORD *)a2 + 32) == *(unsigned __int8 *)(result + 32))
  {
    v5 = v4[6];
    v6 = *(float *)(result + 24);
    if ((COERCE_UNSIGNED_INT(v5 - v6) & 0x60000000) != 0)
    {
      if (v5 <= v6)
        return result;
    }
    else if (*((_DWORD *)v4 + 7) <= *(_DWORD *)(result + 28))
    {
      return result;
    }
  }
  else if (!*(_BYTE *)(*(_QWORD *)a2 + 32))
  {
    return result;
  }
  v33 = *(_QWORD *)v4;
  *(_QWORD *)(v33 + 8) = *((_QWORD *)v4 + 1);
  **((_QWORD **)v4 + 1) = v33;
  v34 = *(_QWORD *)result;
  *(_QWORD *)(v34 + 8) = v4;
  *(_QWORD *)v4 = v34;
  *(_QWORD *)result = v4;
  *((_QWORD *)v4 + 1) = result;
  return (uint64_t)v4;
}

float32x2_t sk_vector_make(float64x2_t *a1)
{
  return vcvt_f32_f64(*a1);
}

double sk_vector_make(const _GLKVector2 *a1)
{
  return *(double *)a1;
}

double sk_vector_make(const _GLKVector3 *a1)
{
  return *(double *)&a1->x;
}

__n128 sk_vector_make(const _GLKVector4 *a1)
{
  return *(__n128 *)a1;
}

double sk_matrix_make(const _GLKMatrix2 *a1)
{
  return *(double *)&a1->m00;
}

double sk_matrix_make(const _GLKMatrix3 *a1)
{
  return *(double *)&a1->m00;
}

__n128 sk_matrix_make(const _GLKMatrix4 *a1)
{
  return *(__n128 *)&a1->m00;
}

__n128 glsk_matrix_make@<Q0>(const _GLKMatrix4 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)&a1->m[4];
  *(_OWORD *)a2 = *(_OWORD *)&a1->m00;
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)&a1->m[8];
  v4 = *(_OWORD *)&a1->m[12];
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

double sk_matrix_get_GLKMatrix(const simd_float2x2 *a1)
{
  return *(double *)a1->columns;
}

uint64_t sk_matrix_get_GLKMatrix@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  for (i = 0; i != 3; ++i)
  {
    v3 = 0;
    v4 = *(_OWORD *)(result + 16 * i);
    do
    {
      v5 = v4;
      *(_DWORD *)(a2 + 4 * v3) = *(_DWORD *)((unint64_t)&v5 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
      ++v3;
    }
    while (v3 != 3);
    a2 += 12;
  }
  return result;
}

{
  uint64_t i;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  for (i = 0; i != 4; ++i)
  {
    v3 = 0;
    v4 = *(_OWORD *)(result + 16 * i);
    do
    {
      v5 = v4;
      *(_DWORD *)(a2 + 4 * v3) = *(_DWORD *)((unint64_t)&v5 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
      ++v3;
    }
    while (v3 != 4);
    a2 += 16;
  }
  return result;
}

void sub_1DC89C548(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DC89C7F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC89CE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1DC89D014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC89D088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC89D1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)SKScene;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1DC89D310(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC89D474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC89D5F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC89D738(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0CF560](v1, 0x10A1C40056B4FAFLL);
  _Unwind_Resume(a1);
}

void sub_1DC89DB10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC89DDD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DC89DEB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC89DF40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 CGPointConvertFromViewToScene(SKView *a1, SKScene *a2, CGPoint a3)
{
  double y;
  double x;
  SKView *v6;
  SKScene *v7;
  SKCSceneNode *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float v13;
  simd_float4 v14;
  simd_float4 v15;
  simd_float4 v16;
  simd_float4 v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  unsigned int v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  float32x4_t v32;
  float32_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  float32x4_t v44;
  float32x4_t v46;
  int8x16_t v47;
  float32x4_t v49;
  simd_float4 v50;
  simd_float4 v51;
  simd_float4 v52;
  simd_float4 v53;
  float64x2_t v54;
  _OWORD v55[4];
  _OWORD v56[4];
  simd_float4x4 v57;
  simd_float4x4 v58;

  y = a3.y;
  x = a3.x;
  v6 = a1;
  v7 = a2;
  v8 = -[SKNode _backingNode](v7, "_backingNode");
  -[SKView bounds](v6, "bounds");
  v10 = v9;
  -[SKView bounds](v6, "bounds");
  *(float *)&v11 = v10;
  v13 = v12;
  SKCSceneNode::matrixForDestination(v8, v11, v13);
  v50 = v15;
  v51 = v14;
  v52 = v17;
  v53 = v16;
  -[SKView bounds](v6, "bounds");
  v19 = v18;
  -[SKView bounds](v6, "bounds");
  v21 = v20;
  -[SKView bounds](v6, "bounds");
  v23 = v22;
  -[SKView bounds](v6, "bounds");
  v25 = v24;
  if (SKGetGlobalFlippedFlag())
    v26 = -1;
  else
    v26 = 0;
  if (v6 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    -[SKView getViewTransform](v6, "getViewTransform");
    v31 = 0;
    v55[0] = v51;
    v55[1] = v50;
    v55[2] = v53;
    v55[3] = v52;
    do
    {
      v56[v31] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, COERCE_FLOAT(v55[v31])), v28, *(float32x2_t *)&v55[v31], 1), v29, (float32x4_t)v55[v31], 2), v30, (float32x4_t)v55[v31], 3);
      ++v31;
    }
    while (v31 != 4);
    v50 = (simd_float4)v56[1];
    v51 = (simd_float4)v56[0];
    v52 = (simd_float4)v56[3];
    v53 = (simd_float4)v56[2];
  }
  v32.f32[0] = x;
  v33 = y;
  v32.f32[1] = v33;
  v32.i32[2] = 0;
  v32.i32[3] = 1.0;
  *(float *)&v34 = v19;
  *(float *)&v35 = v21;
  v36 = __PAIR64__(v35, v34);
  *(float *)&v37 = v23;
  *(float *)&v38 = v25;
  __asm { FMOV            V4.4S, #1.0 }
  _Q4.i64[0] = __PAIR64__(v38, v37);
  v44.i64[0] = 0x4000000040000000;
  v44.i64[1] = 0x4000000040000000;
  __asm { FMOV            V2.4S, #-1.0 }
  v46 = vmlaq_f32(_Q2, v44, vdivq_f32(vsubq_f32(v32, (float32x4_t)v36), _Q4));
  v47 = (int8x16_t)v46;
  v47.i32[1] = vnegq_f32(v46).i32[1];
  v49 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v26), (int8x16_t)v46, v47);
  v57.columns[1] = v50;
  v57.columns[0] = v51;
  v57.columns[3] = v52;
  v57.columns[2] = v53;
  v58 = __invert_f4(v57);
  v54 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v58.columns[0], v49.f32[0]), (float32x4_t)v58.columns[1], *(float32x2_t *)v49.f32, 1), (float32x4_t)v58.columns[2], v49, 2), (float32x4_t)v58.columns[3], v49, 3));

  return (__n128)v54;
}

void sub_1DC89E144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC89E1E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 CGPointConvertFromSceneToView(SKScene *a1, SKView *a2, CGPoint a3)
{
  double y;
  double x;
  SKScene *v6;
  SKView *v7;
  SKCSceneNode *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  float v13;
  __int128 v14;
  __int128 v15;
  float32x4_t v16;
  __int128 v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  char v31;
  float v32;
  float v33;
  float32x4_t v34;
  float32x4_t v40;
  float32x4_t v41;
  unsigned int v42;
  unsigned int v43;
  float v44;
  unint64_t v45;
  float v46;
  __int128 v48;
  float32x4_t v49;
  __int128 v50;
  float32x4_t v51;
  __int128 v52;
  float32x4_t v53;
  float32x4_t v54;
  float64x2_t v55;
  _OWORD v56[4];
  _OWORD v57[4];

  y = a3.y;
  x = a3.x;
  v6 = a1;
  v7 = a2;
  v8 = -[SKNode _backingNode](v6, "_backingNode");
  -[SKView bounds](v7, "bounds");
  v10 = v9;
  -[SKView bounds](v7, "bounds");
  *(float *)&v11 = v10;
  v13 = v12;
  SKCSceneNode::matrixForDestination(v8, v11, v13);
  v48 = v14;
  v50 = v15;
  v52 = v17;
  v54 = v16;
  if (v7 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    -[SKView getViewTransform](v7, "getViewTransform");
    v22 = 0;
    v56[0] = v48;
    v56[1] = v50;
    v56[2] = v54;
    v56[3] = v52;
    do
    {
      v57[v22] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(v56[v22])), v19, *(float32x2_t *)&v56[v22], 1), v20, (float32x4_t)v56[v22], 2), v21, (float32x4_t)v56[v22], 3);
      ++v22;
    }
    while (v22 != 4);
    v48 = v57[0];
    v50 = v57[1];
    v52 = v57[3];
    v54 = (float32x4_t)v57[2];
  }
  -[SKView bounds](v7, "bounds", v48, v50, v52);
  v24 = v23;
  -[SKView bounds](v7, "bounds");
  v26 = v25;
  -[SKView bounds](v7, "bounds");
  v28 = v27;
  -[SKView bounds](v7, "bounds");
  v30 = v29;
  v31 = SKGetGlobalFlippedFlag();
  v32 = x;
  v33 = y;
  v34 = vaddq_f32(v53, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v49, v32), v51, v33), (float32x4_t)0, v54));
  __asm { FMOV            V0.4S, #1.0 }
  v40.i64[0] = 0x3F0000003F000000;
  v40.i64[1] = 0x3F0000003F000000;
  v41 = vmulq_f32(vaddq_f32(v34, _Q0), v40);
  if ((v31 & 1) == 0)
    v41.f32[1] = 1.0 - v41.f32[1];
  *(float *)&v42 = v30;
  *(float *)&v43 = v28;
  _Q0.i64[0] = __PAIR64__(v42, v43);
  v44 = v24;
  *(float *)&v45 = v44;
  v46 = v26;
  *((float *)&v45 + 1) = v46;
  v55 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vmlaq_f32((float32x4_t)v45, _Q0, v41));

  return (__n128)v55;
}

void sub_1DC89E3CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC89E738(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC89E8E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1DC89EA04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC89EB3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC89EC00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC89EC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8A05C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t PKCAether::Evaluator::foreach(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;

  v2 = *(uint64_t **)(result + 24);
  for (i = *(uint64_t **)(result + 32); v2 != i; ++v2)
  {
    v6 = *v2;
    v5 = *(_QWORD *)(a2 + 24);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v6);
  }
  return result;
}

void PKCAether::Evaluator::~Evaluator(PKCAether::Evaluator *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = (void **)this;
  std::vector<std::shared_ptr<PKCField>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void sub_1DC8A1230(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1DC8A19BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

double CGRectConvertFrameFromNodeToView(SKNode *a1, SKView *a2)
{
  SKNode *v3;
  SKView *v4;
  SKNode *v5;
  SKView *v6;
  double v7;
  double v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  void *v15;
  double MinX;
  double MinY;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  double MaxX;
  double MaxY;
  SKScene *v23;
  SKScene *v24;
  CGFloat v25;
  CGFloat v26;
  CGPoint v28;
  CGPoint v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;

  v3 = a1;
  v4 = a2;
  v5 = v3;
  v6 = v4;
  -[SKNode calculateAccumulatedFrame](v5, "calculateAccumulatedFrame");
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  -[SKNode scene](v5, "scene");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v15)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v30.origin.x = v8;
      v30.origin.y = v10;
      v30.size.width = v12;
      v30.size.height = v14;
      MinX = CGRectGetMinX(v30);
      v31.origin.x = v8;
      v31.origin.y = v10;
      v31.size.width = v12;
      v31.size.height = v14;
      MinY = CGRectGetMinY(v31);
      -[SKNode scene](v5, "scene");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      -[SKView convertPoint:fromScene:](v6, "convertPoint:fromScene:", v18, MinX, MinY);
      v20 = v19;

      v32.origin.x = v8;
      v32.origin.y = v10;
      v32.size.width = v12;
      v32.size.height = v14;
      MaxX = CGRectGetMaxX(v32);
      v33.origin.x = v8;
      v33.origin.y = v10;
      v33.size.width = v12;
      v33.size.height = v14;
      MaxY = CGRectGetMaxY(v33);
      -[SKNode scene](v5, "scene");
      v23 = (SKScene *)objc_claimAutoreleasedReturnValue();
      -[SKView convertPoint:fromScene:](v6, "convertPoint:fromScene:", v23, MaxX, MaxY);
    }
    else
    {
      -[SKNode scene](v5, "scene");
      v24 = (SKScene *)objc_claimAutoreleasedReturnValue();
      v34.origin.x = v8;
      v34.origin.y = v10;
      v34.size.width = v12;
      v34.size.height = v14;
      v25 = CGRectGetMinX(v34);
      v35.origin.x = v8;
      v35.origin.y = v10;
      v35.size.width = v12;
      v35.size.height = v14;
      v28.y = CGRectGetMinY(v35);
      v28.x = v25;
      v20 = CGPointConvertFromSceneToView(v24, v6, v28).n128_u64[0];

      -[SKNode scene](v5, "scene");
      v23 = (SKScene *)objc_claimAutoreleasedReturnValue();
      v36.origin.x = v8;
      v36.origin.y = v10;
      v36.size.width = v12;
      v36.size.height = v14;
      v26 = CGRectGetMaxX(v36);
      v37.origin.x = v8;
      v37.origin.y = v10;
      v37.size.width = v12;
      v37.size.height = v14;
      v29.y = CGRectGetMaxY(v37);
      v29.x = v26;
      CGPointConvertFromSceneToView(v23, v6, v29);
    }
    v8 = *(double *)&v20;

  }
  return v8;
}

void sub_1DC8A1ED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8A1F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1DF0CF560);
}

void std::vector<std::shared_ptr<PKCField>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1DC8A21F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCEmitterNode::computeZPostion(SKCEmitterNode *this)
{
  float v2;
  SKCNode *v3;

  v2 = *((float *)this + 188) + 0.01;
  if ((SKGetLinkedOnOrAfter() & 1) == 0)
    v2 = v2 + SKCNode::getZTranslation(this);
  v3 = (SKCNode *)*((_QWORD *)this + 74);
  if (v3)
    SKCNode::setZTranslation(v3, v2);
}

void SKCEmitterNode::update(SKCEmitterNode *this, double a2, float a3)
{
  float v5;

  SKCNode::update(this, a2, 1.0);
  if (!*((_BYTE *)this + 172))
  {
    if (*((_BYTE *)this + 989))
      SKCEmitterNode::updateParticles(this, a2, v5, 0);
  }
}

void SKCEmitterNode::updateParticles(SKCEmitterNode *this, double a2, float a3, int a4)
{
  id WeakRetained;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float *v18;
  float *v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float *v29;
  float *v30;
  float *v31;
  uint64_t v32;
  float v33;
  float v34;
  double v35;
  float v36;
  float v37;
  void *v38;
  void *v39;
  uint64_t v40;
  id v41;
  _BOOL4 v42;
  SKCEmitterNode *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float32x2_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t Slice;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float v63;
  float32x2_t v64;
  uint64_t v65;
  float32x2_t *v66;
  uint64_t v67;
  float32x2_t *v68;
  uint64_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  uint64_t v74;
  float32x2_t v75;
  float32x2_t *v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  float *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  int v92;
  float v93;
  float *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float v99;
  int v100;
  float v101;
  float *v102;
  uint64_t v103;
  float *v104;
  uint64_t v105;
  int v106;
  float v107;
  int v108;
  float v109;
  float *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  float v115;
  int v116;
  float v117;
  float *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  float32x4_t v122;
  __int32 v123;
  uint64_t v124;
  float32x4_t v125;
  uint64_t i;
  int v127;
  _BOOL4 v129;
  _BOOL4 v130;
  int v131;
  _BOOL4 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  SKCParticleSystem *v141;
  uint64_t v142;
  float v143;
  int v144;
  int v145;
  uint64_t v146;
  _DWORD *v147;
  uint64_t v148;
  float32x4_t *v149;
  uint64_t v150;
  float *v151;
  uint64_t v152;
  uint64_t v153;
  float *v154;
  int32x2_t v155;
  float v156;
  float v157;
  float v158;
  float32x4_t v160;
  float32x4_t v162;
  int16x8_t v167;
  float v168;
  float v169;
  float32x4_t v170;
  float32x4_t v171;
  int16x8_t v172;
  __int128 v173;
  int32x2_t v174;
  _BYTE v175[20];
  char v176;
  void *__p[2];
  uint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  int v184;
  __int128 v185;
  int v186;
  char v187;
  int v188;
  __int128 v189;
  int v190;
  char v191;
  int v192;
  _BYTE v193[20];
  char v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  _QWORD v207[5];
  _BYTE v208[24];
  void *v209;
  void *v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;

  v216 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 988))
    SKCEmitterNode::initializeSystem(this);
  WeakRetained = objc_loadWeakRetained((id *)this + 71);
  if (!WeakRetained)
    WeakRetained = *((id *)this + 1);
  v8 = objc_msgSend(WeakRetained, "_backingNode");
  if (*(_QWORD *)(*((_QWORD *)this + 74) + 80) != v8)
    SKCEmitterNode::addParticlesToTargetNode((id *)this);
  v9.n128_f64[0] = a2 - *((double *)this + 88);
  v9.n128_f32[0] = v9.n128_f64[0];
  v174 = (int32x2_t)v9.n128_u64[0];
  *((double *)this + 91) = *((double *)this + 91) + v9.n128_f32[0];
  if (*((_BYTE *)this + 560))
  {
    (***((void (****)(_QWORD, __n128))this + 75))(*((_QWORD *)this + 75), v9);
    v10 = *((_QWORD *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
    v11 = *(_QWORD *)(SKCParticleSystem::getSlice(v10, (const void **)__p) + 16);
    if (SHIBYTE(v178) < 0)
      operator delete(__p[0]);
    v12 = *((_QWORD *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "deathTime");
    v13 = *(_QWORD *)(SKCParticleSystem::getSlice(v12, (const void **)__p) + 16);
    if (SHIBYTE(v178) < 0)
      operator delete(__p[0]);
    v14 = *((_QWORD *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
    v15 = *(_QWORD *)(SKCParticleSystem::getSlice(v14, (const void **)__p) + 16);
    if (SHIBYTE(v178) < 0)
      operator delete(__p[0]);
    v16 = *(unsigned int *)(*((_QWORD *)this + 75) + 84);
    if ((int)v16 < 4)
    {
      LODWORD(v17) = 0;
    }
    else
    {
      v17 = 0;
      v18 = (float *)(v11 + 8);
      v19 = (float *)(v13 + 8);
      v20 = (float *)(v15 + 8);
      do
      {
        v21 = *(v18 - 2);
        v22 = *(v18 - 1);
        v23 = *v18;
        v24 = v18[1];
        v18 += 4;
        v25 = (a2 - v21) / (float)(*(v19 - 2) - v21);
        *(v20 - 2) = v25;
        v26 = (a2 - v22) / (float)(*(v19 - 1) - v22);
        *(v20 - 1) = v26;
        v27 = (a2 - v23) / (float)(*v19 - v23);
        *v20 = v27;
        v17 += 4;
        v28 = (a2 - v24) / (float)(v19[1] - v24);
        v20[1] = v28;
        v19 += 4;
        v20 += 4;
      }
      while (v17 < (v16 - 3));
    }
    if ((int)v17 < (int)v16)
    {
      v29 = (float *)(v15 + 4 * v17);
      v30 = (float *)(v13 + 4 * v17);
      v31 = (float *)(v11 + 4 * v17);
      v32 = v16 - v17;
      do
      {
        v33 = *v31++;
        v34 = v33;
        v35 = a2 - v33;
        v36 = *v30++;
        v37 = v35 / (float)(v36 - v34);
        *v29++ = v37;
        --v32;
      }
      while (v32);
    }
    if (*((_DWORD *)this + 244))
    {
      SKCNode::getScene(this);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v38, "physicsWorld");
      v39 = (void *)objc_claimAutoreleasedReturnValue();

      v40 = objc_msgSend(v39, "aether");
    }
    else
    {
      v40 = 0;
    }
    MEMORY[0x1DF0CF4B8](v208, v40);
    if (v40)
    {
      v211 = 0;
      v212 = &v211;
      v213 = 0x3020000000;
      v214 = 0;
      v215 = 0;
      v41 = objc_loadWeakRetained((id *)this + 71);
      v42 = v41 == 0;

      if (v42)
        v43 = this;
      else
        v43 = (SKCEmitterNode *)v8;
      *((_OWORD *)v212 + 2) = xmmword_1DC9217E0;
      v207[0] = MEMORY[0x1E0C809B0];
      v207[1] = 3221225472;
      v207[2] = ___ZN14SKCEmitterNode15updateParticlesEdfb_block_invoke;
      v207[3] = &unk_1EA4FE920;
      v207[4] = &v211;
      SKCNode::walkUp((uint64_t)v43, v207, 1);
      v173 = *((_OWORD *)v212 + 2);
      v44 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "vel");
      v45 = *(_QWORD *)(SKCParticleSystem::getSlice(v44, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0)
        operator delete(__p[0]);
      v46 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "pos");
      v47 = *(float32x2_t **)(SKCParticleSystem::getSlice(v46, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0)
        operator delete(__p[0]);
      v48 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "accel");
      v49 = *(_QWORD *)(SKCParticleSystem::getSlice(v48, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0)
        operator delete(__p[0]);
      v50 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "override");
      Slice = SKCParticleSystem::getSlice(v50, (const void **)__p);
      if (SHIBYTE(v178) < 0)
        operator delete(__p[0]);
      v52 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "outVel");
      v53 = SKCParticleSystem::getSlice(v52, (const void **)__p);
      if (SHIBYTE(v178) < 0)
        operator delete(__p[0]);
      SKCDataSlice::resize((void **)Slice, *(_DWORD *)(*((_QWORD *)this + 75) + 80));
      SKCDataSlice::resize((void **)v53, *(_DWORD *)(*((_QWORD *)this + 75) + 80));
      v192 = -1;
      *(_QWORD *)&v193[4] = 0;
      *(_QWORD *)&v193[12] = 0;
      v194 = 1;
      v198 = 0;
      v199 = 1;
      v200 = 0;
      v201 = 0;
      v202 = 8;
      v203 = 0;
      v206 = 1065353216;
      __p[0] = 0;
      __p[1] = v47;
      v178 = 8;
      v179 = 0;
      v180 = 0;
      v181 = v45;
      v182 = 8;
      v183 = 0;
      v184 = 1065353216;
      v186 = 0;
      v185 = *(unsigned int *)v175;
      v187 = 1;
      *(_OWORD *)&v175[4] = 0uLL;
      v188 = 1065353216;
      v190 = 0;
      v189 = *(_OWORD *)v175;
      v191 = 1;
      v195 = v49;
      v196 = 8;
      v197 = 0;
      v204 = *((_QWORD *)this + 91);
      v205 = v173;
      PKGet_INV_PTM_RATIO();
      v206 = v54;
      v55 = *((_DWORD *)this + 244);
      *(_QWORD *)&v175[12] = 0;
      *(_QWORD *)&v175[4] = 0;
      v192 = v55;
      *(_OWORD *)v193 = *(unsigned int *)v175;
      *(_DWORD *)&v193[16] = 0;
      v194 = 1;
      v198 = *(_QWORD *)(Slice + 16);
      v199 = 1;
      v200 = 0;
      v201 = *(_QWORD *)(v53 + 16);
      v202 = 8;
      v203 = 0;
      PKCAether::Evaluator::evalFieldsVec2();
      v56 = *((_QWORD *)this + 75);
      if (*((_QWORD *)this + 83))
      {
        std::string::basic_string[abi:ne180100]<0>(v175, "lifeRatio");
        v57 = *(_QWORD *)(SKCParticleSystem::getSlice(v56, (const void **)v175) + 16);
        if (v176 < 0)
          operator delete(*(void **)v175);
        if (*(_DWORD *)(*((_QWORD *)this + 75) + 84))
        {
          v58 = 0;
          v59 = (float32x2_t)vdup_lane_s32(v174, 0);
          do
          {
            v60 = *(float32x2_t *)(v49 + 8 * v58);
            v61 = *(float32x2_t *)(v45 + 8 * v58);
            v62 = v47[v58];
            v63 = *(float *)(v57 + 4 * v58);
            *(_DWORD *)v175 = 0;
            SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 83), v63, (float *)v175);
            v64 = vmla_n_f32(v61, vmul_n_f32(v60, *(float *)v174.i32), *(float *)v175);
            *(_QWORD *)(v49 + 8 * v58) = 0;
            *(float32x2_t *)(v45 + 8 * v58) = v64;
            v47[v58++] = vadd_f32(vmla_f32(v62, v61, v59), vmul_n_f32(vmul_f32(vsub_f32(v64, v61), (float32x2_t)0x3F0000003F000000), *(float *)v174.i32));
          }
          while (v58 < *(_DWORD *)(*((_QWORD *)this + 75) + 84));
        }
      }
      else if (*(_DWORD *)(v56 + 84))
      {
        v74 = 0;
        v75 = (float32x2_t)vdup_lane_s32(v174, 0);
        do
        {
          v76 = (float32x2_t *)(v49 + 8 * v74);
          v77 = *(float32x2_t *)(v45 + 8 * v74);
          v78 = v47[v74];
          v79 = vmla_f32(v77, v75, *v76);
          *v76 = 0;
          *(float32x2_t *)(v45 + 8 * v74) = v79;
          v47[v74++] = vadd_f32(vmla_f32(v78, v77, v75), vmul_n_f32(vmul_f32(vsub_f32(v79, v77), (float32x2_t)0x3F0000003F000000), *(float *)v174.i32));
        }
        while (v74 < *(_DWORD *)(*((_QWORD *)this + 75) + 84));
      }
      _Block_object_dispose(&v211, 8);
    }
    else
    {
      v65 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "vel");
      v66 = *(float32x2_t **)(SKCParticleSystem::getSlice(v65, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0)
        operator delete(__p[0]);
      v67 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "pos");
      v68 = *(float32x2_t **)(SKCParticleSystem::getSlice(v67, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0)
        operator delete(__p[0]);
      v69 = *(unsigned int *)(*((_QWORD *)this + 75) + 84);
      if ((int)v69 >= 1)
      {
        v70 = vmul_n_f32(*(float32x2_t *)((char *)this + 904), *(float *)v174.i32);
        v71 = vmul_n_f32(vmul_f32(v70, (float32x2_t)0x3F0000003F000000), *(float *)v174.i32);
        v72 = (float32x2_t)vdup_lane_s32(v174, 0);
        do
        {
          v73 = *v66;
          *v68 = vadd_f32(v71, vmla_f32(*v68, *v66, v72));
          ++v68;
          *v66++ = vadd_f32(v70, v73);
          --v69;
        }
        while (v69);
      }
    }
    v80 = *((_QWORD *)this + 75);
    if (*((_QWORD *)this + 84))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "vel");
      v81 = *(_QWORD *)(SKCParticleSystem::getSlice(v80, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0)
        operator delete(__p[0]);
      v82 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
      v83 = *(_QWORD *)(SKCParticleSystem::getSlice(v82, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0)
        operator delete(__p[0]);
      v80 = *((_QWORD *)this + 75);
      if (*(_DWORD *)(v80 + 84))
      {
        v84 = 0;
        do
        {
          v85 = *(float *)(v83 + 4 * v84);
          LODWORD(__p[0]) = 0;
          SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 84), v85, (float *)__p);
          *(float32x2_t *)(v81 + 8 * v84) = vmul_n_f32(*(float32x2_t *)(v81 + 8 * v84), *(float *)__p);
          v80 = *((_QWORD *)this + 75);
          ++v84;
        }
        while (v84 < *(_DWORD *)(v80 + 84));
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "rot");
    v86 = *(float **)(SKCParticleSystem::getSlice(v80, (const void **)__p) + 16);
    if (SHIBYTE(v178) < 0)
      operator delete(__p[0]);
    if (*((_QWORD *)this + 81))
    {
      v87 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
      v88 = *(_QWORD *)(SKCParticleSystem::getSlice(v87, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0)
        operator delete(__p[0]);
      v89 = *((_QWORD *)this + 75);
      if (*(_DWORD *)(v89 + 84))
      {
        v90 = 0;
        do
        {
          SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 81), *(float *)(v88 + 4 * v90), v86++);
          v89 = *((_QWORD *)this + 75);
          ++v90;
        }
        while (v90 < *(_DWORD *)(v89 + 84));
      }
    }
    else
    {
      v91 = *((float *)this + 233);
      v89 = *((_QWORD *)this + 75);
      if ((LODWORD(v91) & 0x60000000) != 0)
      {
        v92 = *(_DWORD *)(v89 + 84);
        if (v92)
        {
          v93 = v91 * *(float *)v174.i32;
          do
          {
            *v86 = v93 + *v86;
            ++v86;
            --v92;
          }
          while (v92);
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "scale");
    v94 = *(float **)(SKCParticleSystem::getSlice(v89, (const void **)__p) + 16);
    if (SHIBYTE(v178) < 0)
      operator delete(__p[0]);
    if (*((_QWORD *)this + 82))
    {
      v95 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
      v96 = *(_QWORD *)(SKCParticleSystem::getSlice(v95, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0)
        operator delete(__p[0]);
      v97 = *((_QWORD *)this + 75);
      if (*(_DWORD *)(v97 + 84))
      {
        v98 = 0;
        do
        {
          SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 82), *(float *)(v96 + 4 * v98), v94++);
          v97 = *((_QWORD *)this + 75);
          ++v98;
        }
        while (v98 < *(_DWORD *)(v97 + 84));
      }
    }
    else
    {
      v99 = *((float *)this + 236);
      v97 = *((_QWORD *)this + 75);
      if ((LODWORD(v99) & 0x60000000) != 0)
      {
        v100 = *(_DWORD *)(v97 + 84);
        if (v100)
        {
          v101 = v99 * *(float *)v174.i32;
          do
          {
            *v94 = fmaxf(v101 + *v94, 0.0);
            ++v94;
            --v100;
          }
          while (v100);
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
    v102 = *(float **)(SKCParticleSystem::getSlice(v97, (const void **)__p) + 16);
    if (SHIBYTE(v178) < 0)
      operator delete(__p[0]);
    if (*((_QWORD *)this + 80))
    {
      v103 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
      v104 = *(float **)(SKCParticleSystem::getSlice(v103, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0)
        operator delete(__p[0]);
      v105 = *((_QWORD *)this + 75);
      v106 = *(_DWORD *)(v105 + 84);
      if (v106 >= 1)
      {
        do
        {
          SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 80), *v104++, v102++);
          --v106;
        }
        while (v106);
        v105 = *((_QWORD *)this + 75);
      }
    }
    else
    {
      v107 = *((float *)this + 239);
      v105 = *((_QWORD *)this + 75);
      if ((LODWORD(v107) & 0x60000000) != 0)
      {
        v108 = *(_DWORD *)(v105 + 84);
        if (v108 >= 1)
        {
          v109 = v107 * *(float *)v174.i32;
          do
          {
            *v102 = v109 + *v102;
            ++v102;
            --v108;
          }
          while (v108);
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "colorBlend");
    v110 = *(float **)(SKCParticleSystem::getSlice(v105, (const void **)__p) + 16);
    if (SHIBYTE(v178) < 0)
      operator delete(__p[0]);
    if (*((_QWORD *)this + 79))
    {
      v111 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
      v112 = *(_QWORD *)(SKCParticleSystem::getSlice(v111, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0)
        operator delete(__p[0]);
      v113 = *((_QWORD *)this + 75);
      if (*(_DWORD *)(v113 + 84))
      {
        v114 = 0;
        do
        {
          SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 79), *(float *)(v112 + 4 * v114), v110++);
          v113 = *((_QWORD *)this + 75);
          ++v114;
        }
        while (v114 < *(_DWORD *)(v113 + 84));
      }
    }
    else
    {
      v115 = *((float *)this + 210);
      v113 = *((_QWORD *)this + 75);
      if ((LODWORD(v115) & 0x60000000) != 0)
      {
        v116 = *(_DWORD *)(v113 + 84);
        if (v116)
        {
          v117 = v115 * *(float *)v174.i32;
          do
          {
            *v110 = v117 + *v110;
            ++v110;
            --v116;
          }
          while (v116);
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "color");
    v118 = *(float **)(SKCParticleSystem::getSlice(v113, (const void **)__p) + 16);
    if (SHIBYTE(v178) < 0)
      operator delete(__p[0]);
    if (*((_QWORD *)this + 78))
    {
      v119 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
      v120 = *(_QWORD *)(SKCParticleSystem::getSlice(v119, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0)
        operator delete(__p[0]);
      if (*(_DWORD *)(*((_QWORD *)this + 75) + 84))
      {
        v121 = 0;
        do
        {
          SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 78), *(float *)(v120 + 4 * v121), v118);
          v118 += 4;
          ++v121;
        }
        while (v121 < *(_DWORD *)(*((_QWORD *)this + 75) + 84));
      }
      goto LABEL_134;
    }
    v122.i32[0] = *((_DWORD *)this + 204);
    if ((v122.i32[0] & 0x60000000) != 0)
    {
      v123 = *((_DWORD *)this + 205);
    }
    else
    {
      v123 = *((_DWORD *)this + 205);
      if ((v123 & 0x60000000) == 0 && (*((_BYTE *)this + 827) & 0x60) == 0 && (*((_BYTE *)this + 831) & 0x60) == 0)
      {
LABEL_134:
        if (v209)
        {
          v210 = v209;
          operator delete(v209);
        }
        __p[0] = v208;
        std::vector<std::shared_ptr<PKCField>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (*((_QWORD *)this + 127))
        {
          for (i = *((_QWORD *)this + 126);
                (SKCEmitterNode *)i != (SKCEmitterNode *)((char *)this + 1000);
                i = *(_QWORD *)(i + 8))
          {
            SKCEmitterNode::runBirthSimulation(*(SKCEmitterNode **)(i + 16), *(float *)v174.i32, a2, a4);
          }
        }
        else
        {
          SKCEmitterNode::runBirthSimulation(this, *(float *)v174.i32, a2, a4);
        }
        v127 = *((_DWORD *)this + 236);
        v129 = (v127 & 0x60000000) == 0 || v127 < 0;
        if (*((_QWORD *)this + 80))
        {
          v130 = 0;
        }
        else
        {
          v131 = *((_DWORD *)this + 239);
          v130 = ((v131 & 0x60000000) == 0 || v131 < 0) && *((_QWORD *)this + 72) == 0;
        }
        if (*((_QWORD *)this + 82))
        {
          v134 = 0;
        }
        else if (*((_QWORD *)this + 72))
        {
          v134 = 0;
        }
        else
        {
          v134 = v129;
        }
        v135 = *((_QWORD *)this + 75);
        std::string::basic_string[abi:ne180100]<0>(__p, "deathTime");
        v136 = *(_QWORD *)(SKCParticleSystem::getSlice(v135, (const void **)__p) + 16);
        if (SHIBYTE(v178) < 0)
          operator delete(__p[0]);
        v137 = *((_QWORD *)this + 75);
        std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
        v138 = *(_QWORD *)(SKCParticleSystem::getSlice(v137, (const void **)__p) + 16);
        if (SHIBYTE(v178) < 0)
          operator delete(__p[0]);
        v139 = *((_QWORD *)this + 75);
        std::string::basic_string[abi:ne180100]<0>(__p, "scale");
        v140 = *(_QWORD *)(SKCParticleSystem::getSlice(v139, (const void **)__p) + 16);
        if (SHIBYTE(v178) < 0)
          operator delete(__p[0]);
        v141 = (SKCParticleSystem *)*((_QWORD *)this + 75);
        if (*((_DWORD *)v141 + 21))
        {
          v142 = 0;
          do
          {
            v143 = a2;
            if ((COERCE_UNSIGNED_INT(*(float *)(v136 + 4 * v142) - v143) & 0x80000000) != 0
              || (v144 = *(_DWORD *)(v140 + 4 * v142), v130)
              && ((v145 = *(_DWORD *)(v138 + 4 * v142), v145 < 0) || (v145 & 0x60000000) == 0)
              || v134 && (v144 < 0 || (v144 & 0x60000000) == 0))
            {
              SKCParticleSystem::removePatricle(v141, v142);
              v141 = (SKCParticleSystem *)*((_QWORD *)this + 75);
            }
            ++v142;
          }
          while (v142 < *((_DWORD *)v141 + 21));
        }
        SKCParticleSystem::compact(v141);
        v146 = *((_QWORD *)this + 75);
        std::string::basic_string[abi:ne180100]<0>(__p, "outColor");
        v147 = *(_DWORD **)(SKCParticleSystem::getSlice(v146, (const void **)__p) + 16);
        if (SHIBYTE(v178) < 0)
          operator delete(__p[0]);
        v148 = *((_QWORD *)this + 75);
        std::string::basic_string[abi:ne180100]<0>(__p, "color");
        v149 = *(float32x4_t **)(SKCParticleSystem::getSlice(v148, (const void **)__p) + 16);
        if (SHIBYTE(v178) < 0)
          operator delete(__p[0]);
        v150 = *((_QWORD *)this + 75);
        std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
        v151 = *(float **)(SKCParticleSystem::getSlice(v150, (const void **)__p) + 16);
        if (SHIBYTE(v178) < 0)
          operator delete(__p[0]);
        v152 = *((_QWORD *)this + 75);
        v153 = *(unsigned int *)(v152 + 84);
        if (*((_QWORD *)this + 120))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "colorBlend");
          v154 = *(float **)(SKCParticleSystem::getSlice(v152, (const void **)__p) + 16);
          if (SHIBYTE(v178) < 0)
            operator delete(__p[0]);
          if ((int)v153 >= 1)
          {
            do
            {
              v156 = *v151++;
              v157 = fmaxf(v156, 0.0);
              v158 = *v154++;
              _S3 = fminf(fmaxf(v158, 0.0), 1.0);
              v160 = *v149++;
              _Q4 = v160;
              *(float *)v155.i32 = 1.0 - _S3;
              v162 = (float32x4_t)vdupq_lane_s32(v155, 0);
              __asm { FMLA            S5, S3, V4.S[3] }
              _Q4.i32[3] = 1.0;
              v167 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vmlaq_n_f32(v162, _Q4, _S3), fminf(fmaxf(fminf(v157, 1.0) * _S5, 0.0), 1.0) * 255.0));
              *(int16x4_t *)v167.i8 = vmovn_s32((int32x4_t)v167);
              *v147++ = vmovn_s16(v167).u32[0];
              --v153;
            }
            while (v153);
          }
        }
        else if ((int)v153 >= 1)
        {
          do
          {
            v168 = *v151++;
            v169 = fminf(fmaxf(v168, 0.0), 1.0);
            v170 = *v149++;
            v171 = v170;
            v171.i32[3] = 1.0;
            v172 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v171, fminf(fmaxf(vmuls_lane_f32(v169, v170, 3), 0.0), 1.0) * 255.0));
            *(int16x4_t *)v172.i8 = vmovn_s32((int32x4_t)v172);
            *v147++ = vmovn_s16(v172).u32[0];
            --v153;
          }
          while (v153);
        }
        SKCNode::setDirty(*((SKCNode **)this + 74));
        goto LABEL_195;
      }
    }
    if (*(_DWORD *)(*((_QWORD *)this + 75) + 84))
    {
      v124 = 0;
      v122.i32[1] = v123;
      v122.i64[1] = *((_QWORD *)this + 103);
      v125 = vmulq_n_f32(v122, *(float *)v174.i32);
      do
      {
        *(float32x4_t *)&v118[4 * v124] = vaddq_f32(v125, *(float32x4_t *)&v118[4 * v124]);
        ++v124;
      }
      while (v124 < *(_DWORD *)(*((_QWORD *)this + 75) + 84));
    }
    goto LABEL_134;
  }
LABEL_195:
  *((double *)this + 88) = a2;
  SKCNode::recomputeFlags(this, 1);

}

void sub_1DC8A33F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  uint64_t v26;

  if (a25 < 0)
    operator delete(__p);
  PKCAether::Evaluator::~Evaluator((PKCAether::Evaluator *)(v26 - 256));

  _Unwind_Resume(a1);
}

BOOL SKCEmitterNode::getNeedsUpdate(SKCEmitterNode *this)
{
  uint64_t v3;

  if (SKCNode::getNeedsUpdate(this))
    return 1;
  return !*((_BYTE *)this + 172)
      && *((float *)this + 42) > 0.0
      && (*((float *)this + 228) > 0.0 || (v3 = *((_QWORD *)this + 75)) != 0 && *(_DWORD *)(v3 + 84))
      || *((_BYTE *)this + 616) != 0;
}

double SKCEmitterNode::getBoundingBox(SKCEmitterNode *this)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[4];
  __int128 v18;

  v2 = *((_QWORD *)this + 74);
  if (!v2)
    return *(double *)&SKCBoundingBoxEmpty;
  *(double *)&v3 = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 120))(v2);
  v13 = v4;
  v14 = v3;
  v15 = v6;
  v16 = v5;
  (*(void (**)(SKCEmitterNode *))(*(_QWORD *)this + 104))(this);
  v11 = 0;
  v17[0] = v14;
  v17[1] = v13;
  v17[2] = v16;
  v17[3] = v15;
  do
  {
    *(__int128 *)((char *)&v18 + v11 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, COERCE_FLOAT(v17[v11])), v8, *(float32x2_t *)&v17[v11], 1), v9, (float32x4_t)v17[v11], 2), v10, (float32x4_t)v17[v11], 3);
    ++v11;
  }
  while (v11 != 4);
  return *(double *)&v18;
}

uint64_t *SKCEmitterNode::initializeSystem(SKCEmitterNode *this)
{
  SKCParticleSystem *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t **ParticleManager;
  uint64_t *result;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *v37[2];
  char v38;
  void *v39[2];
  char v40;
  void *__p[2];
  char v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  void *v49[2];
  char v50;
  void *v51[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;

  v2 = (SKCParticleSystem *)operator new();
  SKCParticleSystem::SKCParticleSystem(v2, *((_DWORD *)this + 245));
  *((_QWORD *)this + 75) = v2;
  std::string::basic_string[abi:ne180100]<0>(v55, "pos");
  SKCParticleSystem::addSlice((uint64_t)v2, (uint64_t)v55, 8);
  if (v56 < 0)
    operator delete(v55[0]);
  v3 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v53, "rot");
  SKCParticleSystem::addSlice(v3, (uint64_t)v53, 4);
  if (v54 < 0)
    operator delete(v53[0]);
  v4 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v51, "vel");
  SKCParticleSystem::addSlice(v4, (uint64_t)v51, 8);
  if (v52 < 0)
    operator delete(v51[0]);
  v5 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v49, "accel");
  SKCParticleSystem::addSlice(v5, (uint64_t)v49, 8);
  if (v50 < 0)
    operator delete(v49[0]);
  v6 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v47, "scale");
  SKCParticleSystem::addSlice(v6, (uint64_t)v47, 4);
  if (v48 < 0)
    operator delete(v47[0]);
  v7 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v45, "birthTime");
  SKCParticleSystem::addSlice(v7, (uint64_t)v45, 4);
  if (v46 < 0)
    operator delete(v45[0]);
  v8 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v43, "deathTime");
  SKCParticleSystem::addSlice(v8, (uint64_t)v43, 4);
  if (v44 < 0)
    operator delete(v43[0]);
  v9 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "color");
  SKCParticleSystem::addSlice(v9, (uint64_t)__p, 16);
  if (v42 < 0)
    operator delete(__p[0]);
  v10 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v39, "outColor");
  SKCParticleSystem::addSlice(v10, (uint64_t)v39, 4);
  if (v40 < 0)
    operator delete(v39[0]);
  v11 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v37, "colorBlend");
  SKCParticleSystem::addSlice(v11, (uint64_t)v37, 4);
  if (v38 < 0)
    operator delete(v37[0]);
  v12 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v35, "alpha");
  SKCParticleSystem::addSlice(v12, (uint64_t)v35, 4);
  if (v36 < 0)
    operator delete(v35[0]);
  v13 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v33, "size");
  SKCParticleSystem::addSlice(v13, (uint64_t)v33, 8);
  if (v34 < 0)
    operator delete(v33[0]);
  v14 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v31, "lifeRatio");
  SKCParticleSystem::addSlice(v14, (uint64_t)v31, 4);
  if (v32 < 0)
    operator delete(v31[0]);
  v15 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v29, "outColor");
  *(_BYTE *)(SKCParticleSystem::getSlice(v15, (const void **)v29) + 48) = 0;
  if (v30 < 0)
    operator delete(v29[0]);
  v16 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v29, "accel");
  *(_BYTE *)(SKCParticleSystem::getSlice(v16, (const void **)v29) + 48) = 0;
  if (v30 < 0)
    operator delete(v29[0]);
  v17 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v27, "override");
  SKCParticleSystem::addSlice(v17, (uint64_t)v27, 1);
  if (v28 < 0)
    operator delete(v27[0]);
  v18 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v29, "override");
  *(_BYTE *)(SKCParticleSystem::getSlice(v18, (const void **)v29) + 48) = 0;
  if (v30 < 0)
    operator delete(v29[0]);
  v19 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v29, "override");
  *(_BYTE *)(SKCParticleSystem::getSlice(v19, (const void **)v29) + 49) = 0;
  if (v30 < 0)
    operator delete(v29[0]);
  v20 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v25, "outVel");
  SKCParticleSystem::addSlice(v20, (uint64_t)v25, 8);
  if (v26 < 0)
    operator delete(v25[0]);
  v21 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v29, "outVel");
  *(_BYTE *)(SKCParticleSystem::getSlice(v21, (const void **)v29) + 48) = 0;
  if (v30 < 0)
    operator delete(v29[0]);
  v22 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(v29, "outVel");
  *(_BYTE *)(SKCParticleSystem::getSlice(v22, (const void **)v29) + 49) = 0;
  if (v30 < 0)
    operator delete(v29[0]);
  SKCParticleSystem::setShouldGrow(*((_QWORD *)this + 75), 1);
  ParticleManager = (uint64_t **)SKCParticleSystemNode::getParticleManager(*((SKCParticleSystemNode **)this + 74));
  result = SKCParticleManager::addParticleSystem(ParticleManager, *((SKCParticleSystem **)this + 75));
  *(_DWORD *)(*((_QWORD *)this + 74) + 584) = *((_DWORD *)this + 246);
  *((_BYTE *)this + 988) = 0;
  return result;
}

void sub_1DC8A3B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1DC8A3BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    JUMPOUT(0x1DC8A3BE0);
  JUMPOUT(0x1DC8A3BE4);
}

void sub_1DC8A3C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    JUMPOUT(0x1DC8A3BE0);
  JUMPOUT(0x1DC8A3BE4);
}

void sub_1DC8A3C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    JUMPOUT(0x1DC8A3BE0);
  JUMPOUT(0x1DC8A3BE4);
}

void sub_1DC8A3C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    JUMPOUT(0x1DC8A3BE0);
  JUMPOUT(0x1DC8A3BE4);
}

void sub_1DC8A3C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    JUMPOUT(0x1DC8A3BE0);
  JUMPOUT(0x1DC8A3BE4);
}

void sub_1DC8A3C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    JUMPOUT(0x1DC8A3BE0);
  JUMPOUT(0x1DC8A3BE4);
}

void sub_1DC8A3C64()
{
  uint64_t v0;

  if (*(char *)(v0 - 177) < 0)
    JUMPOUT(0x1DC8A3BE0);
  JUMPOUT(0x1DC8A3BE4);
}

void sub_1DC8A3C78()
{
  uint64_t v0;

  if (*(char *)(v0 - 153) < 0)
    JUMPOUT(0x1DC8A3BE0);
  JUMPOUT(0x1DC8A3BE4);
}

void sub_1DC8A3C8C()
{
  uint64_t v0;

  if (*(char *)(v0 - 129) < 0)
    JUMPOUT(0x1DC8A3BE0);
  JUMPOUT(0x1DC8A3BE4);
}

void sub_1DC8A3CA0()
{
  uint64_t v0;

  if (*(char *)(v0 - 105) < 0)
    JUMPOUT(0x1DC8A3BE0);
  JUMPOUT(0x1DC8A3BE4);
}

void sub_1DC8A3CB4()
{
  uint64_t v0;

  if (*(char *)(v0 - 81) < 0)
    JUMPOUT(0x1DC8A3BE0);
  JUMPOUT(0x1DC8A3BE4);
}

void sub_1DC8A3CC8()
{
  uint64_t v0;

  if (*(char *)(v0 - 57) < 0)
    JUMPOUT(0x1DC8A3BE0);
  JUMPOUT(0x1DC8A3BE4);
}

void sub_1DC8A3CDC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    JUMPOUT(0x1DC8A3BE0);
  JUMPOUT(0x1DC8A3BE4);
}

void sub_1DC8A3CF0()
{
  uint64_t v0;

  MEMORY[0x1DF0CF560](v0, 0x10B1C40E45C7BC7);
  JUMPOUT(0x1DC8A3BE4);
}

_QWORD *SKCEmitterNode::addParticlesToTargetNode(id *this)
{
  id WeakRetained;
  _QWORD *v3;
  unint64_t v4;
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  SKCEmitterNode::computeZPostion((SKCEmitterNode *)this);
  WeakRetained = objc_loadWeakRetained(this + 71);
  v3 = (_QWORD *)objc_msgSend(WeakRetained, "_backingNode");

  v4 = v3[16];
  v5 = this[74];
  v6 = (_QWORD *)v3[15];
  if ((unint64_t)v6 >= v4)
  {
    v8 = v3[14];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v10 = v4 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)(v3 + 16), v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v5;
    v7 = v14 + 8;
    v17 = (char *)v3[14];
    v16 = (char *)v3[15];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)v3[14];
    }
    v3[14] = v14;
    v3[15] = v7;
    v3[16] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v5;
    v7 = v6 + 1;
  }
  v3[15] = v7;
  *((_QWORD *)this[74] + 10) = v3;
  return std::__list_imp<SKCRenderSortInfo *>::clear(this + 106);
}

void sub_1DC8A3E1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float32x4_t ___ZN14SKCEmitterNode15updateParticlesEdfb_block_invoke(uint64_t a1, void *lpsrc, _BYTE *a3)
{
  float32x4_t result;
  float32x4_t v7;
  float32x2_t *v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;

  if (lpsrc
  {
    *a3 = 1;
  }
  else
  {
    *(double *)v7.i64 = (*(double (**)(void *))(*(_QWORD *)lpsrc + 104))(lpsrc);
    v8 = *(float32x2_t **)(*(_QWORD *)(a1 + 32) + 8);
    result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, COERCE_FLOAT(*(_OWORD *)v8[4].f32)), v9, v8[4], 1), v10, *(float32x4_t *)v8[4].f32, 2), v11, *(float32x4_t *)v8[4].f32, 3);
    *(float32x4_t *)v8[4].f32 = result;
  }
  return result;
}

void SKCEmitterNode::runBirthSimulation(SKCEmitterNode *this, float a2, double a3, int a4)
{
  float v6;
  SKCEmitterNode *v7;
  SKCParticleSystem *v8;
  id WeakRetained;
  SKCNode *v10;
  float32x2_t v11;
  __n128 ConversionMatrixFromNode;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  unint64_t v16;
  float32x2_t v17;
  double v18;
  float v19;
  float v20;
  unsigned int v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t Slice;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  __int128 v37;
  float v38;
  uint64_t v39;
  uint64_t *v40;
  char v41;
  uint64_t v42;
  __int128 v43;
  char v44;
  float32x4_t v45;
  int v46;
  int v47;
  unsigned int v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  float v59;
  float v60;
  float v61;
  double v62;
  float v63;
  __int128 v64;
  float32x2_t v65;
  float v66;
  float v67;
  float v68;
  float v69;
  __float2 v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  int v80;
  float v81;
  float v82;
  float32x2_t v83;
  float64x2_t v84;
  void *v85;
  float64_t v87;
  float32x4_t *v88;
  float32x2_t *v89;
  float32x2_t v90;
  unsigned int v91;
  SKCKeyframeSequence *v92;
  float32x4_t v93;
  unsigned int v94;
  uint64_t v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float32x4_t v105;
  __int32 *v106;
  SKCKeyframeSequence *v107;
  __int32 v108;
  unsigned int v109;
  float v110;
  float v111;
  uint64_t v112;
  float v113;
  float v114;
  float v115;
  uint64_t v116;
  float *v117;
  SKCKeyframeSequence *v118;
  unsigned int v119;
  __int32 v120;
  float v121;
  float v122;
  uint64_t v123;
  float v124;
  float v125;
  float v126;
  uint64_t v127;
  float *v128;
  SKCKeyframeSequence *v129;
  unsigned int v130;
  __int32 v131;
  float v132;
  float v133;
  unsigned int v134;
  uint64_t v135;
  float v136;
  float v137;
  float v138;
  uint64_t v139;
  __int32 *v140;
  SKCKeyframeSequence *v141;
  int v142;
  __int32 v143;
  unsigned int v144;
  float v145;
  float v146;
  uint64_t v147;
  float v148;
  float v149;
  float v150;
  uint64_t v151;
  float v152;
  uint64_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  uint64_t v160;
  float32x4_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x2_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float v178;
  float32x2_t v179;
  uint64_t v180;
  float32x2_t v181;
  float32x2_t v182;
  __int128 v183;
  float v184;
  uint64_t v185;
  float v186;
  uint64_t v187;
  float v188;
  float v189;
  float v190;
  float v191;
  float v192;
  uint64_t v193;
  float32x2_t v194;
  float32x2_t v195;
  float v196;
  float32x4_t v197;
  float32x4_t v198;
  __int128 v199;
  float32x4_t v200;
  unsigned int v201[2];
  _OWORD v202[4];
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  __int128 v206;
  uint64_t v207;

  v207 = *MEMORY[0x1E0C80C00];
  v6 = *((float *)this + 228);
  *(_QWORD *)v201 = 0;
  v7 = (SKCEmitterNode *)*((_QWORD *)this + 124);
  if (!v7)
    v7 = this;
  v8 = (SKCParticleSystem *)*((_QWORD *)v7 + 75);
  WeakRetained = objc_loadWeakRetained((id *)this + 71);
  v10 = (SKCNode *)objc_msgSend(WeakRetained, "_backingNode");

  v11 = *(float32x2_t *)((char *)this + 872);
  if (v10 == this)
  {
    v182 = (float32x2_t)1065353216;
    v16 = 0x3F80000000000000;
  }
  else
  {
    v179 = *(float32x2_t *)((char *)this + 872);
    v192 = *((float *)this + 218);
    ConversionMatrixFromNode = SKCNode::getConversionMatrixFromNode(v10, this);
    v11 = (float32x2_t)vaddq_f32(v15, vmlaq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)ConversionMatrixFromNode, v192), v13, v179, 1), (float32x4_t)0, v14)).u64[0];
    v182 = (float32x2_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)ConversionMatrixFromNode, (float32x4_t)0, v13), (float32x4_t)0, v14), (float32x4_t)0, v15).u64[0];
    v16 = vmlaq_f32(vmlaq_f32(vaddq_f32(v13, vmulq_f32((float32x4_t)ConversionMatrixFromNode, (float32x4_t)0)), (float32x4_t)0, v14), (float32x4_t)0, v15).u64[0];
  }
  v180 = (uint64_t)v11;
  v181 = (float32x2_t)v16;
  if (*((_QWORD *)this + 108))
  {
    v17 = vsub_f32(v11, *(float32x2_t *)(*((_QWORD *)this + 106) + 16));
    v18 = sqrtf(vaddv_f32(vmul_f32(v17, v17)));
  }
  else
  {
    v18 = 0.0;
  }
  if (!*((_BYTE *)this + 616))
  {
    v22 = *((double *)this + 89);
    if (v22 < a3)
    {
      v21 = (floor((a3 - v22) / (float)(1.0 / v6)) + 1.0);
      goto LABEL_14;
    }
LABEL_15:
    v21 = 0;
    goto LABEL_16;
  }
  v19 = v18;
  if ((LODWORD(v19) & 0x60000000) == 0)
    goto LABEL_15;
  v20 = *((double *)this + 76) * v18 + 2.0;
  v21 = vcvtps_u32_f32(v20);
LABEL_14:
  v201[1] = v21;
LABEL_16:
  v23 = *((_QWORD *)this + 85);
  if (v23)
  {
    v24 = *((_QWORD *)this + 86);
    if (v24 + (unint64_t)v21 > v23)
    {
      v21 = (v23 - v24) & ~(((int)v23 - (int)v24) >> 31);
      v201[1] = v21;
    }
  }
  SKCParticleSystem::addPatricles(v8, v21, v201, &v201[1]);
  if (v201[1])
  {
    *((_QWORD *)this + 86) += v201[1];
    std::string::basic_string[abi:ne180100]<0>(&v203, "birthTime");
    v25 = *(_QWORD *)(SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203) + 16);
    v26 = v201[0];
    if (v204.i8[7] < 0)
      operator delete((void *)v203.i64[0]);
    std::string::basic_string[abi:ne180100]<0>(&v203, "deathTime");
    v27 = *(_QWORD *)(SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203) + 16);
    v193 = v201[0];
    if (v204.i8[7] < 0)
      operator delete((void *)v203.i64[0]);
    std::string::basic_string[abi:ne180100]<0>(&v203, "vel");
    v28 = *(_QWORD *)(SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203) + 16);
    v29 = v201[0];
    if (v204.i8[7] < 0)
      operator delete((void *)v203.i64[0]);
    std::string::basic_string[abi:ne180100]<0>(&v203, "pos");
    v30 = *(_QWORD *)(SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203) + 16);
    v187 = v201[0];
    if (v204.i8[7] < 0)
      operator delete((void *)v203.i64[0]);
    std::string::basic_string[abi:ne180100]<0>(&v203, "color");
    Slice = SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203);
    v168 = v201[0];
    v169 = *(_QWORD *)(Slice + 16);
    if (v204.i8[7] < 0)
      operator delete((void *)v203.i64[0]);
    std::string::basic_string[abi:ne180100]<0>(&v203, "rot");
    v32 = SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203);
    v164 = v201[0];
    v165 = *(_QWORD *)(v32 + 16);
    if (v204.i8[7] < 0)
      operator delete((void *)v203.i64[0]);
    std::string::basic_string[abi:ne180100]<0>(&v203, "scale");
    v33 = SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203);
    v166 = v201[0];
    v167 = *(_QWORD *)(v33 + 16);
    if (v204.i8[7] < 0)
      operator delete((void *)v203.i64[0]);
    std::string::basic_string[abi:ne180100]<0>(&v203, "size");
    v185 = v30;
    v34 = *(_QWORD *)(SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203) + 16);
    v162 = v201[0];
    if (v204.i8[7] < 0)
      operator delete((void *)v203.i64[0]);
    v175 = (float32x2_t)0x3F80000000000000;
    v174 = (float32x4_t)xmmword_1DC922600;
    v177 = (float32x4_t)xmmword_1DC922610;
    v37 = xmmword_1DC922620;
    v176 = (float32x4_t)xmmword_1DC922620;
    v163 = v34;
    if ((LODWORD(a2) & 0x60000000) != 0
      && *((_QWORD *)this + 108) >= 2uLL
      && (v38 = v18, (LODWORD(v38) & 0x60000000) != 0))
    {
      v39 = 0;
      v40 = (uint64_t *)((char *)this + 856);
      v41 = 1;
      do
      {
        v42 = *v40;
        *(_QWORD *)&v43 = *(_QWORD *)(v42 + 16);
        *((_QWORD *)&v43 + 1) = 0x3F80000000000000;
        v44 = v41;
        *((_OWORD *)&v197 + v39) = v43;
        v40 = (uint64_t *)(v42 + 8);
        v39 = 1;
        v41 = 0;
      }
      while ((v44 & 1) != 0);
      v45.i64[0] = v180;
      v35 = v198;
      v37 = v199;
      v45.i64[1] = *((_QWORD *)&v199 + 1);
      v199 = (__int128)v45;
      v36 = vsubq_f32(v45, v198);
      if (*((_BYTE *)this + 616))
      {
        v46 = 0;
        v200 = v36;
        v47 = 1;
      }
      else
      {
        v153 = 0;
        v154.i64[0] = 0x4000000040000000;
        v154.i64[1] = 0x4000000040000000;
        v155 = vmlaq_f32(v45, v154, v36);
        v156.i64[0] = v197.i64[0];
        v36 = vsubq_f32(v155, vsubq_f32(v198, v197));
        v200 = v36;
        v156.i64[1] = 0x3F80000000000000;
        v157.i64[0] = v198.i64[0];
        v157.i64[1] = 0x3F80000000000000;
        v158.i64[0] = v180;
        v158.i64[1] = 0x3F80000000000000;
        v159.i64[0] = v36.i64[0];
        v159.i64[1] = 0x3F80000000000000;
        v202[0] = xmmword_1DC922620;
        v202[1] = xmmword_1DC922610;
        v202[2] = xmmword_1DC922600;
        v202[3] = xmmword_1DC922200;
        do
        {
          *(float32x4_t *)((char *)&v203 + v153 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v156, COERCE_FLOAT(v202[v153])), v157, *(float32x2_t *)&v202[v153], 1), v158, (float32x4_t)v202[v153], 2), v159, (float32x4_t)v202[v153], 3);
          ++v153;
        }
        while (v153 != 4);
        v176 = v203;
        v177 = v204;
        v46 = 1;
        v47 = 1;
        v37 = v206;
        v174 = v205;
        v175 = (float32x2_t)v206;
      }
    }
    else
    {
      v46 = 0;
      v47 = 0;
    }
    v48 = v201[1];
    v49 = 1.0 / (float)v201[1];
    v178 = v49;
    v50 = v49 * a2;
    if (*((_BYTE *)this + 616))
      *(float *)&v37 = v49 * a2;
    else
      *(float *)&v37 = 1.0 / v6;
    if (*((_BYTE *)this + 616))
      *((double *)this + 89) = *((double *)this + 88) + v50;
    if (v48)
    {
      v172 = v36;
      v173 = v35;
      v51 = v27;
      v52 = 0;
      v53 = v25 + 4 * v26;
      v54 = *(float *)&v37;
      v55 = v51 + 4 * v193;
      v56 = v28 + 8 * v29;
      LODWORD(v37) = 0;
      v183 = v37;
      v57 = v185 + 8 * v187;
      while (1)
      {
        v58 = *((double *)this + 89);
        v59 = v58;
        *(float *)(v53 + 4 * v52) = v59;
        v60 = *((float *)this + 229);
        v61 = *((float *)this + 230);
        if ((LODWORD(v61) & 0x60000000) != 0)
        {
          v60 = (float)(v60 - (float)(v61 * 0.5))
              + (float)((float)((float)rand() * 4.6566e-10)
                      * (float)((float)(v60 + (float)(v61 * 0.5)) - (float)(v60 - (float)(v61 * 0.5))));
          v62 = *((double *)this + 89);
        }
        else
        {
          v62 = v58;
        }
        v63 = v58 + v60;
        *(float *)(v55 + 4 * v52) = v63;
        *((double *)this + 89) = v62 + v54;
        if (!v47)
          break;
        v64 = v183;
        *(float *)&v64 = v178 + *(float *)&v183;
        v183 = v64;
        if (v46)
        {
          v65 = vadd_f32(v175, (float32x2_t)*(_OWORD *)&vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v176, *(float *)&v64 * (float)(*(float *)&v64 * *(float *)&v64)), v177, *(float *)&v64 * *(float *)&v64), v174, *(float *)&v64));
LABEL_58:
          v194 = v65;
          goto LABEL_60;
        }
        v194 = (float32x2_t)vmlaq_n_f32(v173, v172, *(float *)&v64).u64[0];
LABEL_60:
        v66 = *((float *)this + 224);
        v67 = *((float *)this + 225);
        if ((LODWORD(v67) & 0x60000000) != 0)
          v66 = (float)(v66 - (float)(v67 * 0.5))
              + (float)((float)((float)rand() * 4.6566e-10)
                      * (float)((float)(v66 + (float)(v67 * 0.5)) - (float)(v66 - (float)(v67 * 0.5))));
        v188 = *((float *)this + 222);
        v69 = *((float *)this + 223);
        if ((LODWORD(v69) & 0x60000000) != 0)
        {
          v68 = *((float *)this + 222);
          v188 = (float)(v68 - (float)(v69 * 0.5))
               + (float)((float)((float)rand() * 4.6566e-10)
                       * (float)((float)(v68 + (float)(v69 * 0.5)) - (float)(v68 - (float)(v69 * 0.5))));
        }
        v70 = __sincosf_stret(v66);
        *(float32x2_t *)(v56 + 8 * v52) = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v70.__sinval), LODWORD(v70.__cosval)), v188);
        if (v10 == this)
        {
          v190 = v194.f32[0];
          v74 = *((float *)this + 220);
          if ((LODWORD(v74) & 0x60000000) != 0)
            v190 = (float)(v194.f32[0] - (float)(v74 * 0.5))
                 + (float)((float)((float)rand() * 4.6566e-10)
                         * (float)((float)(v194.f32[0] + (float)(v74 * 0.5)) - (float)(v194.f32[0] - (float)(v74 * 0.5))));
          v75 = v194.f32[1];
          v76 = *((float *)this + 221);
          if ((LODWORD(v76) & 0x60000000) != 0)
            v77 = (float)(v194.f32[1] - (float)(v76 * 0.5))
                + (float)((float)((float)rand() * 4.6566e-10)
                        * (float)((float)(v75 + (float)(v76 * 0.5)) - (float)(v75 - (float)(v76 * 0.5))));
          else
            v77 = v194.f32[1];
          v195 = (float32x2_t)__PAIR64__(LODWORD(v77), LODWORD(v190));
        }
        else
        {
          v71 = *((float *)this + 220);
          v189 = 0.0;
          v72 = 0.0;
          if ((LODWORD(v71) & 0x60000000) != 0)
            v72 = (float)(0.0 - (float)(v71 * 0.5))
                + (float)((float)((float)rand() * 4.6566e-10)
                        * (float)((float)((float)(v71 * 0.5) + 0.0) - (float)(0.0 - (float)(v71 * 0.5))));
          v184 = v72;
          v73 = *((float *)this + 221);
          if ((LODWORD(v73) & 0x60000000) != 0)
            v189 = (float)(0.0 - (float)(v73 * 0.5))
                 + (float)((float)((float)rand() * 4.6566e-10)
                         * (float)((float)((float)(v73 * 0.5) + 0.0) - (float)(0.0 - (float)(v73 * 0.5))));
          v195 = vmla_n_f32(vmla_n_f32(v194, v182, v184), v181, v189);
        }
        v78 = *((float *)this + 191);
        if ((LODWORD(v78) & 0x60000000) != 0)
        {
          v79 = *((float *)this + 192);
        }
        else
        {
          if ((*((_DWORD *)this + 192) & 0x60000000) == 0)
          {
            v83 = v195;
            goto LABEL_81;
          }
          v79 = *((float *)this + 192);
        }
        v80 = rand();
        v81 = v79 * 0.5 + v78;
        v82 = (v78 + v79 * -0.5) / (v78 + v79 * 0.5);
        v83 = vmla_n_f32(v195, vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v70.__sinval), LODWORD(v70.__cosval)), sqrtf((float)(v82 * v82) + (float)((float)((float)v80 * 4.6566e-10) * (float)(1.0 - (float)(v82 * v82))))), v81);
LABEL_81:
        *(float32x2_t *)(v57 + 8 * v52) = v83;
        v48 = v201[1];
        if (++v52 >= v201[1])
          goto LABEL_84;
      }
      v65 = (float32x2_t)v180;
      goto LABEL_58;
    }
LABEL_84:
    v84 = *((float64x2_t *)this + 46);
    v85 = (void *)*((_QWORD *)this + 120);
    if (v85)
    {
      if (v84.f64[0] == *MEMORY[0x1E0C9D820] && v84.f64[1] == *(double *)(MEMORY[0x1E0C9D820] + 8))
      {
        objc_msgSend(v85, "size");
        v84.f64[1] = v87;
        v48 = v201[1];
      }
    }
    v88 = (float32x4_t *)(v169 + 16 * v168);
    if (v48)
    {
      v89 = (float32x2_t *)(v163 + 8 * v162);
      v90 = vcvt_f32_f64(v84);
      v91 = v48;
      do
      {
        *v89++ = v90;
        --v91;
      }
      while (v91);
    }
    v92 = (SKCKeyframeSequence *)*((_QWORD *)this + 78);
    if (v92)
    {
      SKCKeyframeSequence::sample(v92, 0.0, v203.f32);
      v48 = v201[1];
      if (v201[1])
      {
        v93 = v203;
        v94 = v201[1];
        do
        {
          *v88++ = v93;
          --v94;
        }
        while (v94);
      }
    }
    else if ((*((_BYTE *)this + 803) & 0x60) != 0
           || (*((_BYTE *)this + 807) & 0x60) != 0
           || (*((_BYTE *)this + 811) & 0x60) != 0
           || (*((_BYTE *)this + 815) & 0x60) != 0)
    {
      if (v48)
      {
        v95 = 0;
        do
        {
          v196 = *((float *)this + 196);
          v97 = *((float *)this + 200);
          if ((LODWORD(v97) & 0x60000000) != 0)
          {
            v96 = *((float *)this + 196);
            v196 = (float)(v96 - (float)(v97 * 0.5))
                 + (float)((float)((float)rand() * 4.6566e-10)
                         * (float)((float)(v96 + (float)(v97 * 0.5)) - (float)(v96 - (float)(v97 * 0.5))));
          }
          v191 = *((float *)this + 197);
          v99 = *((float *)this + 201);
          if ((LODWORD(v99) & 0x60000000) != 0)
          {
            v98 = *((float *)this + 197);
            v191 = (float)(v98 - (float)(v99 * 0.5))
                 + (float)((float)((float)rand() * 4.6566e-10)
                         * (float)((float)(v98 + (float)(v99 * 0.5)) - (float)(v98 - (float)(v99 * 0.5))));
          }
          v186 = *((float *)this + 198);
          v101 = *((float *)this + 202);
          if ((LODWORD(v101) & 0x60000000) != 0)
          {
            v100 = *((float *)this + 198);
            v186 = (float)(v100 - (float)(v101 * 0.5))
                 + (float)((float)((float)rand() * 4.6566e-10)
                         * (float)((float)(v100 + (float)(v101 * 0.5)) - (float)(v100 - (float)(v101 * 0.5))));
          }
          v103 = *((float *)this + 203);
          if ((LODWORD(v103) & 0x60000000) != 0)
          {
            v102 = *((float *)this + 199);
            v104 = (float)(v102 - (float)(v103 * 0.5))
                 + (float)((float)((float)rand() * 4.6566e-10)
                         * (float)((float)(v102 + (float)(v103 * 0.5)) - (float)(v102 - (float)(v103 * 0.5))));
          }
          else
          {
            v104 = *((float *)this + 199);
          }
          v105.i64[0] = __PAIR64__(LODWORD(v191), LODWORD(v196));
          v105.i64[1] = __PAIR64__(LODWORD(v104), LODWORD(v186));
          v88[v95] = v105;
          v48 = v201[1];
          ++v95;
        }
        while (v95 < v201[1]);
      }
    }
    else if (v48)
    {
      v160 = 0;
      v161 = *((float32x4_t *)this + 49);
      do
        v88[v160++] = v161;
      while (v48 != (_DWORD)v160);
    }
    v106 = (__int32 *)(v167 + 4 * v166);
    v107 = (SKCKeyframeSequence *)*((_QWORD *)this + 82);
    if (v107)
    {
      v203.i32[0] = 0;
      SKCKeyframeSequence::sample(v107, 0.0, v203.f32);
      v48 = v201[1];
      if (v201[1])
      {
        v108 = v203.i32[0];
        v109 = v201[1];
        do
        {
          *v106++ = v108;
          --v109;
        }
        while (v109);
      }
    }
    else
    {
      v110 = *((float *)this + 234);
      v111 = *((float *)this + 235);
      if ((LODWORD(v111) & 0x60000000) != 0)
      {
        if (v48)
        {
          v112 = 0;
          v113 = v111 * 0.5;
          v114 = v110 - v113;
          v115 = (float)(v110 + v113) - (float)(v110 - v113);
          do
          {
            *(float *)&v106[v112] = v114 + (float)((float)((float)rand() * 4.6566e-10) * v115);
            v48 = v201[1];
            ++v112;
          }
          while (v112 < v201[1]);
        }
      }
      else if (v48)
      {
        v116 = 0;
        do
          *(float *)&v106[v116++] = v110;
        while (v48 != (_DWORD)v116);
      }
    }
    v117 = (float *)(v165 + 4 * v164);
    v118 = (SKCKeyframeSequence *)*((_QWORD *)this + 81);
    if (v118)
    {
      v203.i32[0] = 0;
      SKCKeyframeSequence::sample(v118, 0.0, v203.f32);
      v119 = v201[1];
      if (v201[1])
      {
        v120 = v203.i32[0];
        do
        {
          *(_DWORD *)v117++ = v120;
          --v119;
        }
        while (v119);
      }
    }
    else
    {
      v121 = *((float *)this + 231);
      v122 = *((float *)this + 232);
      if ((LODWORD(v122) & 0x60000000) != 0)
      {
        if (v48)
        {
          v123 = 0;
          v124 = v122 * 0.5;
          v125 = v121 - v124;
          v126 = (float)(v121 + v124) - (float)(v121 - v124);
          do
            v117[v123++] = v125 + (float)((float)((float)rand() * 4.6566e-10) * v126);
          while (v123 < v201[1]);
        }
      }
      else
      {
        for (; v48; --v48)
          *v117++ = v121;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v203, "alpha");
    v127 = SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203);
    v128 = (float *)(*(_QWORD *)(v127 + 16) + 4 * v201[0]);
    if (v204.i8[7] < 0)
      operator delete((void *)v203.i64[0]);
    v129 = (SKCKeyframeSequence *)*((_QWORD *)this + 80);
    if (v129)
    {
      v203.i32[0] = 0;
      SKCKeyframeSequence::sample(v129, 0.0, v203.f32);
      v130 = v201[1];
      if (v201[1])
      {
        v131 = v203.i32[0];
        do
        {
          *(_DWORD *)v128++ = v131;
          --v130;
        }
        while (v130);
      }
    }
    else
    {
      v132 = *((float *)this + 237);
      v133 = *((float *)this + 238);
      v134 = v201[1];
      if ((LODWORD(v133) & 0x60000000) != 0)
      {
        if (v201[1])
        {
          v135 = 0;
          v136 = v133 * 0.5;
          v137 = v132 - v136;
          v138 = (float)(v132 + v136) - (float)(v132 - v136);
          do
            v128[v135++] = v137 + (float)((float)((float)rand() * 4.6566e-10) * v138);
          while (v135 < v201[1]);
        }
      }
      else if (v201[1])
      {
        do
        {
          *v128++ = v132;
          --v134;
        }
        while (v134);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v203, "colorBlend");
    v139 = SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203);
    v140 = (__int32 *)(*(_QWORD *)(v139 + 16) + 4 * v201[0]);
    if (v204.i8[7] < 0)
      operator delete((void *)v203.i64[0]);
    v141 = (SKCKeyframeSequence *)*((_QWORD *)this + 79);
    if (v141)
    {
      v203.i32[0] = 0;
      SKCKeyframeSequence::sample(v141, 0.0, v203.f32);
      v142 = v201[1];
      if (v201[1])
      {
        v143 = v203.i32[0];
        v144 = v201[1];
        do
        {
          *v140++ = v143;
          --v144;
        }
        while (v144);
      }
    }
    else
    {
      if (*((_QWORD *)this + 120))
      {
        v145 = *((float *)this + 208);
        v146 = *((float *)this + 209);
      }
      else
      {
        v146 = 0.0;
        v145 = 1.0;
      }
      v142 = v201[1];
      if ((LODWORD(v146) & 0x60000000) != 0)
      {
        if (v201[1])
        {
          v147 = 0;
          v148 = v146 * 0.5;
          v149 = v145 - v148;
          v150 = (float)(v145 + v148) - (float)(v145 - v148);
          do
          {
            *(float *)&v140[v147] = v149 + (float)((float)((float)rand() * 4.6566e-10) * v150);
            v142 = v201[1];
            ++v147;
          }
          while (v147 < v201[1]);
        }
      }
      else if (v201[1])
      {
        v151 = 0;
        do
          *(float *)&v140[v151++] = v145;
        while (v142 != (_DWORD)v151);
      }
    }
    if (a4)
    {
      v152 = a3;
      SKCEmitterNode::preSimulate(this, v201[0], v142, v152);
    }
  }
  SKCEmitterNode::recordPrevStartPosition((id *)this);
}

void sub_1DC8A4D5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 201) < 0)
    operator delete(*(void **)(v1 - 224));
  _Unwind_Resume(exception_object);
}

void SKCEmitterNode::subclassRecomputeFlags(SKCEmitterNode *this)
{
  if (*((_DWORD *)this + 244))
    SKCNode::setFlags(this, 8, 1);
}

void SKCEmitterNode::advanceSimulationTime(SKCEmitterNode *this, float a2)
{
  uint64_t v4;
  float *v5;
  uint64_t v6;
  float *v7;
  int i;
  uint64_t v9;
  double v10;
  double v11;
  float v12;
  double v13;
  void *__p[2];
  char v15;

  if (*((_BYTE *)this + 988))
    SKCEmitterNode::initializeSystem(this);
  if (*((_BYTE *)this + 560))
  {
    v4 = *((_QWORD *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
    v5 = *(float **)(SKCParticleSystem::getSlice(v4, (const void **)__p) + 16);
    if (v15 < 0)
      operator delete(__p[0]);
    v6 = *((_QWORD *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "deathTime");
    v7 = *(float **)(SKCParticleSystem::getSlice(v6, (const void **)__p) + 16);
    if (v15 < 0)
      operator delete(__p[0]);
    for (i = *(_DWORD *)(*((_QWORD *)this + 75) + 84); i; --i)
    {
      *v5 = *v5 - a2;
      ++v5;
      *v7 = *v7 - a2;
      ++v7;
    }
  }
  v9 = *((_QWORD *)this + 89);
  v10 = *((double *)this + 88);
  *((double *)this + 88) = v10 - a2;
  std::__list_imp<SKCRenderSortInfo *>::clear((_QWORD *)this + 106);
  v12 = *((float *)this + 228);
  if (v12 <= 0.0)
  {
    v13 = 1.79769313e308;
  }
  else
  {
    v11 = *((double *)this + 88);
    v13 = 1.0 / v12 + v11;
  }
  *((double *)this + 89) = v13;
  if (!*((_BYTE *)this + 172) && *((_BYTE *)this + 989))
    SKCEmitterNode::updateParticles(this, v10, *(float *)&v11, 1);
  *((_QWORD *)this + 89) = v9;
}

void sub_1DC8A4F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SKCEmitterNode::setBirthRate(SKCEmitterNode *this, float a2)
{
  float v3;
  double v4;
  float v5;
  double v6;

  v3 = *((float *)this + 228);
  if (a2 > 3.4028e38)
    a2 = 3.4028e38;
  if (a2 < 0.0)
    a2 = 0.0;
  *((float *)this + 228) = a2;
  if (a2 <= 0.0)
  {
    *((_QWORD *)this + 89) = 0x7FEFFFFFFFFFFFFFLL;
  }
  else
  {
    if (v3 <= 0.0)
      std::__list_imp<SKCRenderSortInfo *>::clear((_QWORD *)this + 106);
    v4 = *((double *)this + 89);
    if (v4 == 1.79769313e308)
    {
      v5 = skCurrentTime();
      v6 = fminf(v5, INFINITY);
    }
    else
    {
      v6 = v4 - (float)(1.0 / v3) + (float)(1.0 / *((float *)this + 228));
    }
    *((double *)this + 89) = v6;
  }
}

void SKCEmitterNode::preSimulate(SKCEmitterNode *this, int a2, int a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  int v17;
  float *v18;
  float v19;
  float v20;
  float v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id WeakRetained;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t Slice;
  uint64_t v37;
  uint64_t v38;
  float32x2_t *v39;
  float32x2_t *v40;
  float32x2_t *v41;
  int v42;
  int v43;
  float *v44;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  int v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float v52;
  float v53;
  float32x2_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float32x2_t *v61;
  float32x2_t *v62;
  float32x2_t v63;
  int v64;
  float *v65;
  float32x2_t v66;
  float v67;
  float32x2_t v68;
  int v69;
  float32x2_t v70;
  float v71;
  float32x2_t v72;
  float32x2_t v73;
  uint64_t v74;
  float *v75;
  uint64_t v76;
  uint64_t v77;
  float *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  float *v82;
  float v83;
  int v84;
  float v85;
  uint64_t v86;
  float *v87;
  uint64_t v88;
  uint64_t v89;
  float *v90;
  int v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  float *v95;
  int v96;
  float v97;
  uint64_t v98;
  float *v99;
  uint64_t v100;
  uint64_t v101;
  float *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  float *v106;
  float v107;
  int v108;
  float v109;
  uint64_t v110;
  float *v111;
  uint64_t v112;
  uint64_t v113;
  float *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  float *v118;
  float v119;
  int v120;
  float v121;
  uint64_t v122;
  float32x4_t *v123;
  uint64_t v124;
  uint64_t v125;
  float *v126;
  uint64_t v127;
  uint64_t v128;
  float *v129;
  float32x4_t v130;
  float v131;
  __int128 v132;
  void *v133;
  _BYTE v134[20];
  char v135;
  void *__p[2];
  uint64_t v137;
  char v138;
  uint64_t v139;
  float32x2_t *v140;
  uint64_t v141;
  char v142;
  int v143;
  __int128 v144;
  int v145;
  char v146;
  int v147;
  __int128 v148;
  int v149;
  char v150;
  int v151;
  _BYTE v152[20];
  char v153;
  float32x2_t *v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  _QWORD v166[5];
  _BYTE v167[24];
  void *v168;
  void *v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
  v9 = *(_QWORD *)(SKCParticleSystem::getSlice(v8, (const void **)__p) + 16);
  if (SHIBYTE(v137) < 0)
    operator delete(__p[0]);
  v10 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "deathTime");
  v11 = *(_QWORD *)(SKCParticleSystem::getSlice(v10, (const void **)__p) + 16);
  if (SHIBYTE(v137) < 0)
    operator delete(__p[0]);
  v12 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
  v13 = *(_QWORD *)(SKCParticleSystem::getSlice(v12, (const void **)__p) + 16);
  if (SHIBYTE(v137) < 0)
    operator delete(__p[0]);
  v14 = a2;
  if (a3 >= 1)
  {
    v15 = (float *)(v9 + 4 * a2);
    v16 = (float *)(v11 + 4 * a2);
    v17 = a3;
    v18 = (float *)(v13 + 4 * a2);
    do
    {
      v19 = *v15++;
      v20 = v19;
      v21 = *v16++;
      *v18++ = fminf(fmaxf((float)(a4 - v20) / (float)(v21 - v20), 0.0), 1.0);
      --v17;
    }
    while (v17);
  }
  if (*((_DWORD *)this + 244))
  {
    SKCNode::getScene(this);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "physicsWorld");
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    v24 = objc_msgSend(v23, "aether");
    MEMORY[0x1DF0CF4B8](v167, v24);
    if (v24)
    {
      v170 = 0;
      v171 = &v170;
      v172 = 0x3020000000;
      v173 = 0;
      v174 = 0;
      WeakRetained = objc_loadWeakRetained((id *)this + 71);
      if (!WeakRetained)
        WeakRetained = *((id *)this + 1);
      v133 = WeakRetained;
      v26 = objc_msgSend(WeakRetained, "_backingNode");
      *((_OWORD *)v171 + 2) = xmmword_1DC9217E0;
      v166[0] = MEMORY[0x1E0C809B0];
      v166[1] = 3221225472;
      v166[2] = ___ZN14SKCEmitterNode11preSimulateEiif_block_invoke;
      v166[3] = &unk_1EA4FE920;
      v166[4] = &v170;
      SKCNode::walkUp(v26, v166, 1);
      v132 = *((_OWORD *)v171 + 2);
      v27 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "vel");
      v28 = *(_QWORD *)(SKCParticleSystem::getSlice(v27, (const void **)__p) + 16);
      if (SHIBYTE(v137) < 0)
        operator delete(__p[0]);
      v29 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "pos");
      v30 = *(_QWORD *)(SKCParticleSystem::getSlice(v29, (const void **)__p) + 16);
      if (SHIBYTE(v137) < 0)
        operator delete(__p[0]);
      v31 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "accel");
      v32 = *(_QWORD *)(SKCParticleSystem::getSlice(v31, (const void **)__p) + 16);
      if (SHIBYTE(v137) < 0)
        operator delete(__p[0]);
      v33 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
      v34 = *(_QWORD *)(SKCParticleSystem::getSlice(v33, (const void **)__p) + 16);
      if (SHIBYTE(v137) < 0)
        operator delete(__p[0]);
      v35 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "override");
      Slice = SKCParticleSystem::getSlice(v35, (const void **)__p);
      if (SHIBYTE(v137) < 0)
        operator delete(__p[0]);
      v37 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "outVel");
      v38 = SKCParticleSystem::getSlice(v37, (const void **)__p);
      if (SHIBYTE(v137) < 0)
        operator delete(__p[0]);
      SKCDataSlice::resize((void **)Slice, *(_DWORD *)(*((_QWORD *)this + 75) + 80));
      SKCDataSlice::resize((void **)v38, *(_DWORD *)(*((_QWORD *)this + 75) + 80));
      v151 = -1;
      v39 = (float32x2_t *)(v28 + 8 * v14);
      *(_QWORD *)&v152[4] = 0;
      *(_QWORD *)&v152[12] = 0;
      v153 = 1;
      v40 = (float32x2_t *)(v30 + 8 * v14);
      v157 = 0;
      v158 = 1;
      v41 = (float32x2_t *)(v32 + 8 * v14);
      v159 = 0;
      v160 = 0;
      v161 = 8;
      v162 = 0;
      v165 = 1065353216;
      __p[0] = 0;
      __p[1] = v40;
      v137 = 8;
      v138 = 0;
      v139 = 0;
      v140 = v39;
      v141 = 8;
      v142 = 0;
      v143 = 1065353216;
      v145 = 0;
      v144 = *(unsigned int *)v134;
      v146 = 1;
      *(_OWORD *)&v134[4] = 0uLL;
      v147 = 1065353216;
      v149 = 0;
      v148 = *(_OWORD *)v134;
      v150 = 1;
      v154 = v41;
      v155 = 8;
      v156 = 0;
      v163 = *((_QWORD *)this + 91);
      v164 = v132;
      PKGet_INV_PTM_RATIO();
      v165 = v42;
      v43 = *((_DWORD *)this + 244);
      *(_QWORD *)&v134[12] = 0;
      *(_QWORD *)&v134[4] = 0;
      v151 = v43;
      *(_OWORD *)v152 = *(unsigned int *)v134;
      *(_DWORD *)&v152[16] = 0;
      v153 = 1;
      v157 = *(_QWORD *)(Slice + 16) + v14;
      v158 = 1;
      v159 = 0;
      v160 = *(_QWORD *)(v38 + 16) + 8 * v14;
      v161 = 8;
      v162 = 0;
      PKCAether::Evaluator::evalFieldsVec2();
      v44 = (float *)(v34 + 4 * v14);
      if (*((_QWORD *)this + 83))
      {
        v45 = *((_QWORD *)this + 75);
        std::string::basic_string[abi:ne180100]<0>(v134, "lifeRatio");
        v46 = *(_QWORD *)(SKCParticleSystem::getSlice(v45, (const void **)v134) + 16);
        if (v135 < 0)
          operator delete(*(void **)v134);
        if (a3 >= 1)
        {
          v47 = (float *)(v46 + 4 * v14);
          v48 = a3;
          do
          {
            v49 = *v41;
            v50 = *v39;
            v51 = *v40;
            v52 = *v47;
            v53 = *v44;
            *(_DWORD *)v134 = 0;
            SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 83), v52, (float *)v134);
            v54 = vmla_n_f32(v50, vmul_n_f32(v49, a4 - v53), *(float *)v134);
            *v41++ = 0;
            *v39++ = v54;
            *v40++ = vadd_f32(vmla_n_f32(v51, v54, a4 - v53), vmul_n_f32(vmul_f32(vsub_f32(v54, v50), (float32x2_t)0x3F0000003F000000), a4 - v53));
            ++v47;
            ++v44;
            --v48;
          }
          while (v48);
        }
      }
      else if (a3 >= 1)
      {
        v69 = a3;
        do
        {
          v70 = *v40;
          v71 = *v44++;
          v72 = vmla_n_f32(*v39, *v41, a4 - v71);
          v73 = vmul_n_f32(vmul_f32(vsub_f32(v72, *v39), (float32x2_t)0x3F0000003F000000), a4 - v71);
          *v41++ = 0;
          *v39++ = v72;
          *v40++ = vadd_f32(vmla_n_f32(v70, v72, a4 - v71), v73);
          --v69;
        }
        while (v69);
      }

      _Block_object_dispose(&v170, 8);
      goto LABEL_48;
    }
  }
  else
  {
    MEMORY[0x1DF0CF4B8](v167, 0);
  }
  v55 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "vel");
  v56 = *(_QWORD *)(SKCParticleSystem::getSlice(v55, (const void **)__p) + 16);
  if (SHIBYTE(v137) < 0)
    operator delete(__p[0]);
  v57 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "pos");
  v58 = *(_QWORD *)(SKCParticleSystem::getSlice(v57, (const void **)__p) + 16);
  if (SHIBYTE(v137) < 0)
    operator delete(__p[0]);
  v59 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
  v60 = *(_QWORD *)(SKCParticleSystem::getSlice(v59, (const void **)__p) + 16);
  if (SHIBYTE(v137) < 0)
    operator delete(__p[0]);
  if (a3 >= 1)
  {
    v61 = (float32x2_t *)(v56 + 8 * v14);
    v62 = (float32x2_t *)(v58 + 8 * v14);
    v63 = *(float32x2_t *)((char *)this + 904);
    v64 = a3;
    v65 = (float *)(v60 + 4 * v14);
    do
    {
      v66 = *v61;
      v67 = *v65++;
      v68 = vmul_n_f32(v63, a4 - v67);
      *v62 = vadd_f32(vmla_n_f32(*v62, *v61, a4 - v67), vmul_n_f32(vmul_f32(v68, (float32x2_t)0x3F0000003F000000), a4 - v67));
      ++v62;
      *v61++ = vadd_f32(v66, v68);
      --v64;
    }
    while (v64);
  }
LABEL_48:
  v74 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "rot");
  v75 = (float *)(*(_QWORD *)(SKCParticleSystem::getSlice(v74, (const void **)__p) + 16) + 4 * v14);
  if (SHIBYTE(v137) < 0)
    operator delete(__p[0]);
  if (*((_QWORD *)this + 81))
  {
    v76 = *((_QWORD *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
    v77 = *(_QWORD *)(SKCParticleSystem::getSlice(v76, (const void **)__p) + 16);
    if (SHIBYTE(v137) < 0)
      operator delete(__p[0]);
    if (a3 >= 1)
    {
      v78 = (float *)(v77 + 4 * v14);
      v79 = a3;
      do
      {
        SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 81), *v78++, v75++);
        --v79;
      }
      while (v79);
    }
  }
  else if ((*((_BYTE *)this + 935) & 0x60) != 0)
  {
    v80 = *((_QWORD *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
    v81 = *(_QWORD *)(SKCParticleSystem::getSlice(v80, (const void **)__p) + 16);
    if (SHIBYTE(v137) < 0)
      operator delete(__p[0]);
    if (a3 >= 1)
    {
      v82 = (float *)(v81 + 4 * v14);
      v83 = *((float *)this + 233);
      v84 = a3;
      do
      {
        v85 = *v82++;
        *v75 = *v75 + (float)(v83 * (float)(a4 - v85));
        ++v75;
        --v84;
      }
      while (v84);
    }
  }
  v86 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  v87 = (float *)(*(_QWORD *)(SKCParticleSystem::getSlice(v86, (const void **)__p) + 16) + 4 * v14);
  if (SHIBYTE(v137) < 0)
    operator delete(__p[0]);
  if (*((_QWORD *)this + 82))
  {
    v88 = *((_QWORD *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
    v89 = *(_QWORD *)(SKCParticleSystem::getSlice(v88, (const void **)__p) + 16);
    if (SHIBYTE(v137) < 0)
      operator delete(__p[0]);
    if (a3 >= 1)
    {
      v90 = (float *)(v89 + 4 * v14);
      v91 = a3;
      do
      {
        SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 82), *v90++, v87++);
        --v91;
      }
      while (v91);
    }
  }
  else
  {
    v92 = *((float *)this + 236);
    if ((LODWORD(v92) & 0x60000000) != 0)
    {
      v93 = *((_QWORD *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
      v94 = *(_QWORD *)(SKCParticleSystem::getSlice(v93, (const void **)__p) + 16);
      if (SHIBYTE(v137) < 0)
        operator delete(__p[0]);
      if (a3 >= 1)
      {
        v95 = (float *)(v94 + 4 * v14);
        v96 = a3;
        do
        {
          v97 = *v95++;
          *v87 = fmaxf(*v87 + (float)(v92 * (float)(a4 - v97)), 0.0);
          ++v87;
          --v96;
        }
        while (v96);
      }
    }
  }
  v98 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
  v99 = (float *)(*(_QWORD *)(SKCParticleSystem::getSlice(v98, (const void **)__p) + 16) + 4 * v14);
  if (SHIBYTE(v137) < 0)
    operator delete(__p[0]);
  if (*((_QWORD *)this + 80))
  {
    v100 = *((_QWORD *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
    v101 = *(_QWORD *)(SKCParticleSystem::getSlice(v100, (const void **)__p) + 16);
    if (SHIBYTE(v137) < 0)
      operator delete(__p[0]);
    if (a3 >= 1)
    {
      v102 = (float *)(v101 + 4 * v14);
      v103 = a3;
      do
      {
        SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 80), *v102++, v99++);
        --v103;
      }
      while (v103);
    }
  }
  else if ((*((_BYTE *)this + 959) & 0x60) != 0)
  {
    v104 = *((_QWORD *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
    v105 = *(_QWORD *)(SKCParticleSystem::getSlice(v104, (const void **)__p) + 16);
    if (SHIBYTE(v137) < 0)
      operator delete(__p[0]);
    if (a3 >= 1)
    {
      v106 = (float *)(v105 + 4 * v14);
      v107 = *((float *)this + 239);
      v108 = a3;
      do
      {
        v109 = *v106++;
        *v99 = *v99 + (float)(v107 * (float)(a4 - v109));
        ++v99;
        --v108;
      }
      while (v108);
    }
  }
  v110 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "colorBlend");
  v111 = (float *)(*(_QWORD *)(SKCParticleSystem::getSlice(v110, (const void **)__p) + 16) + 4 * v14);
  if (SHIBYTE(v137) < 0)
    operator delete(__p[0]);
  if (*((_QWORD *)this + 79))
  {
    v112 = *((_QWORD *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
    v113 = *(_QWORD *)(SKCParticleSystem::getSlice(v112, (const void **)__p) + 16);
    if (SHIBYTE(v137) < 0)
      operator delete(__p[0]);
    if (a3 >= 1)
    {
      v114 = (float *)(v113 + 4 * v14);
      v115 = a3;
      do
      {
        SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 79), *v114++, v111++);
        --v115;
      }
      while (v115);
    }
  }
  else if ((*((_BYTE *)this + 843) & 0x60) != 0)
  {
    v116 = *((_QWORD *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
    v117 = *(_QWORD *)(SKCParticleSystem::getSlice(v116, (const void **)__p) + 16);
    if (SHIBYTE(v137) < 0)
      operator delete(__p[0]);
    if (a3 >= 1)
    {
      v118 = (float *)(v117 + 4 * v14);
      v119 = *((float *)this + 210);
      v120 = a3;
      do
      {
        v121 = *v118++;
        *v111 = *v111 + (float)(v119 * (float)(a4 - v121));
        ++v111;
        --v120;
      }
      while (v120);
    }
  }
  v122 = *((_QWORD *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "color");
  v123 = (float32x4_t *)(*(_QWORD *)(SKCParticleSystem::getSlice(v122, (const void **)__p) + 16) + 16 * v14);
  if (SHIBYTE(v137) < 0)
    operator delete(__p[0]);
  if (*((_QWORD *)this + 78))
  {
    v124 = *((_QWORD *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
    v125 = *(_QWORD *)(SKCParticleSystem::getSlice(v124, (const void **)__p) + 16);
    if (SHIBYTE(v137) < 0)
      operator delete(__p[0]);
    if (a3 >= 1)
    {
      v126 = (float *)(v125 + 4 * v14);
      do
      {
        SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 78), *v126++, v123->f32);
        ++v123;
        --a3;
      }
      while (a3);
    }
  }
  else if ((*((_BYTE *)this + 819) & 0x60) != 0
         || (*((_BYTE *)this + 823) & 0x60) != 0
         || (*((_BYTE *)this + 827) & 0x60) != 0
         || (*((_BYTE *)this + 831) & 0x60) != 0)
  {
    v127 = *((_QWORD *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
    v128 = *(_QWORD *)(SKCParticleSystem::getSlice(v127, (const void **)__p) + 16);
    if (SHIBYTE(v137) < 0)
      operator delete(__p[0]);
    if (a3 >= 1)
    {
      v129 = (float *)(v128 + 4 * v14);
      v130 = *((float32x4_t *)this + 51);
      do
      {
        v131 = *v129++;
        *v123 = vmlaq_n_f32(*v123, v130, a4 - v131);
        ++v123;
        --a3;
      }
      while (a3);
    }
  }
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  __p[0] = v167;
  std::vector<std::shared_ptr<PKCField>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1DC8A5CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  PKCAether::Evaluator::~Evaluator((PKCAether::Evaluator *)(v23 - 256));
  _Unwind_Resume(a1);
}

void sub_1DC8A5E30()
{
  JUMPOUT(0x1DC8A5E28);
}

void SKCEmitterNode::recordPrevStartPosition(id *this)
{
  id *v2;
  id WeakRetained;
  id v4;
  SKCNode *v5;
  float32x4_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  id v12;

  v2 = this + 71;
  WeakRetained = objc_loadWeakRetained(this + 71);

  if (WeakRetained)
  {
    v4 = objc_loadWeakRetained(v2);
    v5 = (SKCNode *)objc_msgSend(v4, "_backingNode");

    v6.i64[0] = (uint64_t)this[109];
    v6.i64[1] = 0x3F80000000000000;
    if (v5 != (SKCNode *)this)
      *(double *)v6.i64 = SKCNode::convertPointFromNode(v5, (const SKCNode *)this, v6);
    v12 = (id)v6.i64[0];
  }
  else
  {
    v12 = this[109];
  }
  v7 = operator new(0x18uLL);
  v7[2] = v12;
  v8 = this[106];
  *v7 = v8;
  v7[1] = this + 106;
  v8[1] = v7;
  this[106] = v7;
  v9 = (unint64_t)this[108] + 1;
  this[108] = (id)v9;
  if (v9 >= 3)
  {
    do
    {
      v10 = (uint64_t *)this[107];
      v11 = *v10;
      *(_QWORD *)(v11 + 8) = v10[1];
      *(_QWORD *)v10[1] = v11;
      this[108] = (id)(v9 - 1);
      operator delete(v10);
      v9 = (unint64_t)this[108];
    }
    while (v9 > 2);
  }
}

void sub_1DC8A5F38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float32x4_t ___ZN14SKCEmitterNode11preSimulateEiif_block_invoke(uint64_t a1, void *lpsrc, _BYTE *a3)
{
  float32x4_t result;
  float32x4_t v7;
  float32x2_t *v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;

  if (lpsrc
  {
    *a3 = 1;
  }
  else
  {
    *(double *)v7.i64 = (*(double (**)(void *))(*(_QWORD *)lpsrc + 104))(lpsrc);
    v8 = *(float32x2_t **)(*(_QWORD *)(a1 + 32) + 8);
    result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, COERCE_FLOAT(*(_OWORD *)v8[4].f32)), v9, v8[4], 1), v10, *(float32x4_t *)v8[4].f32, 2), v11, *(float32x4_t *)v8[4].f32, 3);
    *(float32x4_t *)v8[4].f32 = result;
  }
  return result;
}

void SKCEmitterNode::~SKCEmitterNode(id *this)
{
  SKCEmitterNode::~SKCEmitterNode(this);
  JUMPOUT(0x1DF0CF560);
}

{
  _QWORD *v2;
  id v3;
  SKCKeyframeSequence *v4;
  SKCKeyframeSequence *v5;
  SKCKeyframeSequence *v6;
  SKCKeyframeSequence *v7;
  SKCKeyframeSequence *v8;
  SKCKeyframeSequence *v9;
  SKCKeyframeSequence *v10;

  *this = off_1EA4FF8A0;
  SKCEmitterNode::clearTargetNode((SKCEmitterNode *)this);
  v2 = this[74];
  if (v2 && (id *)v2[10] == this)
    v2[10] = 0;
  SKCNode::removeAllChildren((SKCNode *)this);
  v3 = this[73];
  *(_OWORD *)(this + 73) = 0u;

  *((_DWORD *)this + 174) = 0;
  v4 = (SKCKeyframeSequence *)this[79];
  if (v4)
  {
    SKCKeyframeSequence::~SKCKeyframeSequence(v4);
    MEMORY[0x1DF0CF560]();
    this[79] = 0;
  }
  v5 = (SKCKeyframeSequence *)this[78];
  if (v5)
  {
    SKCKeyframeSequence::~SKCKeyframeSequence(v5);
    MEMORY[0x1DF0CF560]();
    this[78] = 0;
  }
  v6 = (SKCKeyframeSequence *)this[82];
  if (v6)
  {
    SKCKeyframeSequence::~SKCKeyframeSequence(v6);
    MEMORY[0x1DF0CF560]();
    this[82] = 0;
  }
  v7 = (SKCKeyframeSequence *)this[83];
  if (v7)
  {
    SKCKeyframeSequence::~SKCKeyframeSequence(v7);
    MEMORY[0x1DF0CF560]();
    this[83] = 0;
  }
  v8 = (SKCKeyframeSequence *)this[84];
  if (v8)
  {
    SKCKeyframeSequence::~SKCKeyframeSequence(v8);
    MEMORY[0x1DF0CF560]();
    this[84] = 0;
  }
  v9 = (SKCKeyframeSequence *)this[81];
  if (v9)
  {
    SKCKeyframeSequence::~SKCKeyframeSequence(v9);
    MEMORY[0x1DF0CF560]();
    this[81] = 0;
  }
  v10 = (SKCKeyframeSequence *)this[80];
  if (v10)
  {
    SKCKeyframeSequence::~SKCKeyframeSequence(v10);
    MEMORY[0x1DF0CF560]();
    this[80] = 0;
  }
  std::__list_imp<SKCRenderSortInfo *>::clear(this + 125);

  std::__list_imp<SKCRenderSortInfo *>::clear(this + 106);
  objc_destroyWeak(this + 71);
  SKCNode::~SKCNode(this);
}

void SKCEmitterNode::setPaused(float64x2_t *this, int a2)
{
  double v4;
  float v5;
  uint64_t v6;
  float *v7;
  uint64_t v8;
  float *v9;
  int i;
  void *__p[2];
  char v12;

  if (BYTE4(this[10].f64[1]) != a2)
  {
    SKCNode::setPaused((SKCNode *)this, a2);
    v4 = skCurrentTime();
    if (a2)
    {
      this[45].f64[0] = v4;
    }
    else
    {
      v5 = v4 - this[45].f64[0];
      this[44] = vaddq_f64(this[44], (float64x2_t)vdupq_lane_s64(COERCE__INT64(v5), 0));
      if (!BYTE4(this[61].f64[1]))
      {
        v6 = *(_QWORD *)&this[37].f64[1];
        std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
        v7 = *(float **)(SKCParticleSystem::getSlice(v6, (const void **)__p) + 16);
        if (v12 < 0)
          operator delete(__p[0]);
        v8 = *(_QWORD *)&this[37].f64[1];
        std::string::basic_string[abi:ne180100]<0>(__p, "deathTime");
        v9 = *(float **)(SKCParticleSystem::getSlice(v8, (const void **)__p) + 16);
        if (v12 < 0)
          operator delete(__p[0]);
        for (i = *(_DWORD *)(*(_QWORD *)&this[37].f64[1] + 84); i; --i)
        {
          *v7 = *v7 + v5;
          ++v7;
          *v9 = *v9 + v5;
          ++v9;
        }
      }
    }
  }
}

void sub_1DC8A6110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id SKCEmitterNode::clearTargetNode(SKCEmitterNode *this)
{
  id *v2;
  id WeakRetained;
  void *v4;
  id result;

  v2 = (id *)((char *)this + 568);
  WeakRetained = objc_loadWeakRetained((id *)this + 71);
  v4 = WeakRetained;
  if (WeakRetained)
    SKCNode::removeInternalChild((SKCNode *)objc_msgSend(WeakRetained, "_backingNode"), *((id **)this + 74));

  result = objc_storeWeak(v2, 0);
  *((_DWORD *)this + 174) = 0;
  return result;
}

void sub_1DC8A6324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double SKCShapeNode::getBoundingBox(SKCShapeNode *this)
{
  float v2;
  const CGPath *CopyByStrokingPath;
  double v4;
  double v5;
  CGFloat v6;
  double v7;
  double result;
  float64x2_t v9;
  float64x2_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  CGFloat height;
  float64_t v21;
  __int128 v22;
  CGFloat y;
  float64_t v24;
  __int128 v25;
  CGFloat width;
  float64_t v27;
  __int128 v28;
  CGFloat x;
  float64_t v30;
  __int128 v31;
  _OWORD v32[4];
  __int128 v33;
  CGRect BoundingBox;

  if (!*((_QWORD *)this + 70))
    goto LABEL_9;
  v2 = *((float *)this + 155);
  if (v2 <= 0.0 || *((float *)this + 147) <= 0.0)
  {
    *(CGRect *)&v6 = CGPathGetBoundingBox((CGPathRef)*((_QWORD *)this + 79));
  }
  else
  {
    if (*((_BYTE *)this + 644))
      v2 = v2 + (float)((float)(*((float *)this + 156) * 2.0) + 1.7);
    CopyByStrokingPath = CGPathCreateCopyByStrokingPath(*((CGPathRef *)this + 79), 0, v2, (CGLineCap)*((_DWORD *)this + 153), (CGLineJoin)*((_DWORD *)this + 152), *((float *)this + 154));
    BoundingBox = CGPathGetBoundingBox(CopyByStrokingPath);
    width = BoundingBox.size.width;
    x = BoundingBox.origin.x;
    height = BoundingBox.size.height;
    y = BoundingBox.origin.y;
    CGPathRelease(CopyByStrokingPath);
    v5 = height;
    v4 = y;
    v7 = width;
    v6 = x;
  }
  v27 = v7;
  v30 = v6;
  v21 = v5;
  v24 = v4;
  if (!CGRectIsEmpty(*(CGRect *)&v6))
  {
    v9.f64[0] = v27;
    v9.f64[1] = v21;
    v10.f64[0] = v30;
    v10.f64[1] = v24;
    *(double *)&v11 = SKCBoundingBoxMake(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v10), v9));
    v22 = v12;
    v25 = v11;
    v28 = v14;
    v31 = v13;
    (*(void (**)(SKCShapeNode *))(*(_QWORD *)this + 104))(this);
    v19 = 0;
    v32[0] = v25;
    v32[1] = v22;
    v32[2] = v31;
    v32[3] = v28;
    do
    {
      *(__int128 *)((char *)&v33 + v19 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(v32[v19])), v16, *(float32x2_t *)&v32[v19], 1), v17, (float32x4_t)v32[v19], 2), v18, (float32x4_t)v32[v19], 3);
      ++v19;
    }
    while (v19 != 4);
    return *(double *)&v33;
  }
  else
  {
LABEL_9:
    *(_QWORD *)&result = SKCNode::getBoundingBox((__n128 *)this).n128_u64[0];
  }
  return result;
}

void SKCShapeNode::getBatchInfo(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  uint64_t v7;
  int BackingBlendMode;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 4) = 0x300000000;
  *(_DWORD *)(a3 + 12) = 1;
  *(_OWORD *)(a3 + 16) = 0u;
  v6 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 60) = 0u;
  if (*(_QWORD *)(a1 + 664) || *(float *)(a1 + 604) > 0.0 || (v7 = *(_QWORD *)(a1 + 680)) != 0)
    LOBYTE(v7) = *(_QWORD *)(a1 + 560) != 0;
  *(_BYTE *)a3 = v7;
  *(_DWORD *)(a3 + 4) = (**(uint64_t (***)(uint64_t, _QWORD *))a1)(a1, a2);
  BackingBlendMode = SKBlendModeGetBackingBlendMode(*(SKBlendMode *)(a1 + 288));
  *(_DWORD *)(a3 + 8) = 3;
  *(_DWORD *)(a3 + 12) = BackingBlendMode;
  v9 = *(void **)(a1 + 656);
  if (!v9)
  {
    v12 = 0;
    *(_QWORD *)(a3 + 32) = a2[54];
LABEL_14:
    v13 = a2 + 60;
    goto LABEL_15;
  }
  objc_msgSend(v9, "_backingTexture");
  *(_QWORD *)(a3 + 32) = v15;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)())v16->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v12 = *v6;
  if (!*(_QWORD *)(a1 + 656))
    goto LABEL_14;
  v13 = a2 + 64;
LABEL_15:
  v14 = *v13;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = v14;
  *(_QWORD *)(a3 + 24) = a2[21];
  *(_QWORD *)(a3 + 16) = *(id *)(a1 + 672);

}

BOOL SKCShapeNode::shouldFill(SKCShapeNode *this)
{
  return (*((_QWORD *)this + 83) || *((float *)this + 151) > 0.0 || *((_QWORD *)this + 85))
      && *((_QWORD *)this + 70) != 0;
}

void SKCShapeNode::subclassRecomputeFlags(id *this)
{
  if ((this[82] || objc_msgSend(this[85], "_usesTimeUniform"))
    && !*((_BYTE *)this + 172)
    && (*((_BYTE *)this + 171) & 0x60) != 0)
  {
    SKCNode::setFlags((SKCNode *)this, 66, 1);
  }
}

BOOL SKCShapeNode::shouldUseLocalStrokeBuffers(SKCShapeNode *this, SKCRenderInfo *a2)
{
  return (*((_QWORD *)this + 82) || *((float *)this + 147) > 0.0 || *((_QWORD *)this + 84))
      && *((float *)this + 155) > 0.0
      && *((_QWORD *)this + 70)
      && ((objc_msgSend(*((id *)this + 84), "_usesPathLengthUniform") & 1) != 0
       || 4 * SKCShapeNode::_NEW_quadCount(this) > 0x1B4);
}

BOOL SKCShapeNode::shouldStroke(SKCShapeNode *this)
{
  return (*((_QWORD *)this + 82) || *((float *)this + 147) > 0.0 || *((_QWORD *)this + 84))
      && *((float *)this + 155) > 0.0
      && *((_QWORD *)this + 70) != 0;
}

uint64_t SKCShapeNode::_NEW_quadCount(SKCShapeNode *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)this + 70);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 24) - *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  v4 = 0;
  LODWORD(v5) = 0;
  v6 = v2 >> 3;
  v7 = v6 <= 1 ? 1 : v6;
  do
    v5 = SKCShapeNode::_NEW_quadCount(this, v4++) + v5;
  while (v7 != v4);
  if (!*((_QWORD *)this + 82) && *((float *)this + 147) <= 0.0 && !*((_QWORD *)this + 84)
    || *((float *)this + 155) <= 0.0)
  {
    return 0;
  }
  return v5;
}

BOOL SKCShapeNode::getNeedsCustomRenderOps(SKCShapeNode *this, SKCRenderInfo *a2)
{
  return (*((_QWORD *)this + 83) || *((float *)this + 151) > 0.0 || *((_QWORD *)this + 85)) && *((_QWORD *)this + 70)
      || SKCShapeNode::shouldUseLocalStrokeBuffers(this, a2);
}

uint64_t SKCShapeNode::getMaxBatchRenderElementCount(SKCShapeNode *this, SKCRenderInfo *a2)
{
  if (SKCShapeNode::shouldUseLocalStrokeBuffers(this, a2))
    return 0;
  else
    return 4 * SKCShapeNode::_NEW_quadCount(this);
}

void SKCShapeNode::addRenderOps(SKCShapeNode *this, unsigned int *a2, jet_command_buffer **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  jet_buffer_pool **v16;
  jet_buffer_pool *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _OWORD *data;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  uint64_t v44;
  float32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  float *v48;
  float v49;
  float v50;
  float *v51;
  float v52;
  float v53;
  float *v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  unsigned int v64;
  int v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float v70;
  float32x4_t v71;
  unsigned int v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _QWORD *v76;
  float32x4_t v82;
  uint64_t v83;
  uint64_t v84;
  int16x8_t v85;
  unsigned __int32 v86;
  jet_command_buffer *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  jet_command_buffer *v91;
  uint64_t current_buffer;
  uint64_t v93;
  jet_command_buffer *v94;
  uint64_t v95;
  uint64_t *v96;
  jet_command_buffer *v97;
  uint64_t *v98;
  jet_command_buffer *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  jet_command_buffer *v103;
  uint64_t v104;
  uint64_t *v105;
  jet_command_buffer *v106;
  uint64_t *v107;
  jet_command_buffer *v108;
  unsigned int v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *p_shared_owners;
  unint64_t v115;
  void *v116;
  __int128 v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  jet_command_buffer *v124;
  uint64_t v125;
  int BackingBlendMode;
  uint64_t v127;
  jet_command_buffer *v128;
  uint64_t v129;
  uint64_t *v130;
  jet_command_buffer *v131;
  uint64_t *v132;
  jet_command_buffer *v133;
  uint64_t v134;
  uint64_t v135;
  jet_command_buffer *v136;
  uint64_t v137;
  uint64_t v138;
  jet_command_buffer *v139;
  uint64_t v140;
  uint64_t v141;
  jet_command_buffer *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  jet_command_buffer *v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  jet_command_buffer *v158;
  void *v159;
  jet_command_buffer *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  unsigned __int8 v164;
  double v165;
  double v166;
  jet_command_buffer *v167;
  float v168;
  uint64_t v169;
  jet_command_buffer *v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  jet_command_buffer *v174;
  uint64_t *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  jet_buffer_pool **v183;
  jet_buffer_pool *v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  jet_command_buffer *v208;
  int v209;
  uint64_t v210;
  jet_command_buffer *v211;
  uint64_t v212;
  uint64_t v213;
  jet_command_buffer *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  jet_command_buffer *v219;
  uint64_t v220;
  uint64_t v221;
  jet_command_buffer *v222;
  uint64_t v223;
  uint64_t v224;
  jet_command_buffer *v225;
  uint64_t v226;
  uint64_t v227;
  jet_command_buffer *v228;
  uint64_t v229;
  uint64_t v230;
  jet_command_buffer *v231;
  uint64_t v232;
  uint64_t v233;
  jet_command_buffer *v234;
  uint64_t v235;
  uint64_t v236;
  jet_command_buffer *v237;
  jet_command_buffer *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  unsigned __int8 v242;
  double v243;
  double v244;
  jet_command_buffer *v245;
  float v246;
  uint64_t v247;
  jet_command_buffer *v248;
  float v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  jet_command_buffer *v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  _DWORD *v265;
  uint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  float32x4_t v276;
  jet_command_buffer *v277;
  std::__shared_weak_count *v278;
  __int128 __str;
  float32x4_t __str_16;
  float32x4_t v281;
  float32x4_t v282;
  __int128 v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  _BYTE v286[32];
  __int128 v287;
  __int128 v288;
  int v289[3];

  if (!*((_QWORD *)this + 83) && *((float *)this + 151) <= 0.0 && !*((_QWORD *)this + 85))
    goto LABEL_119;
  v6 = *((_QWORD *)this + 70);
  if (!v6)
    goto LABEL_119;
  v9 = v6 + 16;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = *(_QWORD *)(v9 + 8);
  v10 = v8 - v7;
  if (v8 != v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = v10 >> 3;
    do
    {
      v14 = *(_QWORD *)(v7 + 8 * v11);
      if (*(_QWORD *)(v14 + 24) != *(_QWORD *)(v14 + 16))
        v12 += 3 * *(_DWORD *)(v14 + 4) * *((_DWORD *)this + 160);
      ++v11;
    }
    while (v13 > v11);
    if (v12)
    {
      v15 = (v12 + 6);
      v16 = (jet_buffer_pool **)((char *)this + 688);
      v17 = (jet_buffer_pool *)*((_QWORD *)this + 86);
      if (v17 && *((_DWORD *)v17 + 4) >= v15)
      {
LABEL_39:
        jet_buffer_pool::next_buffer(v17);
        jet_buffer_pool::next_buffer(*((jet_buffer_pool **)this + 88));
        jet_buffer_pool::next_buffer(*((jet_buffer_pool **)this + 90));
        data = (_OWORD *)jet_buffer_pool::get_data(*((jet_buffer_pool **)this + 86));
        v35 = (float32x4_t)xmmword_1DC922680;
        v36 = (float32x4_t)xmmword_1DC922670;
        v37 = 0;
        v38 = 0;
        v39 = 6;
        *((_QWORD *)&v40 + 1) = 0x3F80000000000000;
        do
        {
          v41 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 70) + 16) + 8 * v37);
          v42 = *(unsigned int *)(v41 + 4);
          v43 = vaddq_f32(*((float32x4_t *)a2 + 5), vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(*((float32x4_t *)a2 + 2), **(float **)(v41 + 16)), *((float32x4_t *)a2 + 3), *(float *)(*(_QWORD *)(v41 + 16) + 4)), (float32x4_t)0, *((float32x4_t *)a2 + 4)));
          v35 = vminnmq_f32(v43, v35);
          v36 = vmaxnmq_f32(v43, v36);
          if ((_DWORD)v42)
          {
            v44 = 0;
            v45 = v43;
            do
            {
              v46 = 0;
              v47 = *(_QWORD *)(v41 + 16);
              v48 = (float *)(v47 + 8 * (3 * v44));
              v49 = *v48;
              v50 = v48[1];
              v51 = (float *)(v47 + 8 * (3 * v44 + 1));
              v52 = *v51;
              v53 = v51[1];
              v54 = (float *)(v47 + 8 * (3 * v44 + 2));
              v55 = *((float32x4_t *)a2 + 2);
              v56 = *((float32x4_t *)a2 + 3);
              v57 = *((float32x4_t *)a2 + 4);
              v58 = *((float32x4_t *)a2 + 5);
              v60.i64[0] = vaddq_f32(v58, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v55, v49), v56, v50), (float32x4_t)0, v57)).u64[0];
              v61.i64[0] = vaddq_f32(v58, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v55, v52), v56, v53), (float32x4_t)0, v57)).u64[0];
              v62.i64[0] = vaddq_f32(v58, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v55, *v54), v56, v54[1]), (float32x4_t)0, v57)).u64[0];
              v59 = (float *)(v47 + 8 * (3 * v44 + 3));
              v63.i64[0] = vaddq_f32(v58, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v55, *v59), v56, v59[1]), (float32x4_t)0, v57)).u64[0];
              v60.i64[1] = 0x3F80000000000000;
              v61.i64[1] = 0x3F80000000000000;
              v62.i64[1] = 0x3F80000000000000;
              v63.i64[1] = 0x3F80000000000000;
              *(_OWORD *)v286 = xmmword_1DC921CF0;
              *(_OWORD *)&v286[16] = xmmword_1DC922690;
              v287 = xmmword_1DC9226A0;
              v288 = xmmword_1DC9226B0;
              do
              {
                *(__int128 *)((char *)&__str + v46) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v60, COERCE_FLOAT(*(_OWORD *)&v286[v46])), v61, *(float32x2_t *)&v286[v46], 1), v62, *(float32x4_t *)&v286[v46], 2), v63, *(float32x4_t *)&v286[v46], 3);
                v46 += 16;
              }
              while (v46 != 64);
              v64 = *((_DWORD *)this + 160);
              if (v64)
              {
                v65 = 0;
                v66 = (float32x4_t)__str;
                v67 = __str_16;
                v68 = v281;
                v69 = v282;
                do
                {
                  v70 = (float)++v65 / (float)v64;
                  v71 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v66, v67, v70), v68, v70 * v70), v69, v70 * (float)(v70 * v70));
                  data[v39] = v43;
                  v72 = v39 + 2;
                  data[v39 + 1] = v45;
                  v35 = vminnmq_f32(v71, v35);
                  v36 = vmaxnmq_f32(v71, v36);
                  v39 += 3;
                  data[v72] = v71;
                  v45 = v71;
                }
                while (v64 != v65);
              }
              else
              {
                v71 = v45;
              }
              ++v44;
              v45 = v71;
            }
            while (v44 != v42);
          }
          v37 = ++v38;
        }
        while (v13 > v38);
        *(_QWORD *)&v73 = v35.i64[0];
        *((_QWORD *)&v73 + 1) = 0x3F80000000000000;
        *(_QWORD *)&v74 = v36.i64[0];
        *((_QWORD *)&v74 + 1) = 0x3F80000000000000;
        *((_QWORD *)&v75 + 1) = 0x3F80000000000000;
        *(_QWORD *)&v75 = __PAIR64__(v36.u32[1], v35.u32[0]);
        *data = v73;
        data[1] = v74;
        *(_QWORD *)&v40 = __PAIR64__(v35.u32[1], v36.u32[0]);
        data[2] = v75;
        data[3] = v73;
        data[4] = v40;
        data[5] = v74;
        jet_buffer_pool::commit_data(*((jet_buffer_pool **)this + 86));
        v76 = (_QWORD *)jet_buffer_pool::get_data(*((jet_buffer_pool **)this + 90));
        __asm { FMOV            V1.2S, #1.0 }
        *v76 = 0;
        v76[1] = _D1;
        v76[2] = 0x3F80000000000000;
        v76[3] = 0;
        v76[4] = 1065353216;
        v76[5] = _D1;
        jet_buffer_pool::commit_data(*((jet_buffer_pool **)this + 90));
        v82 = *((float32x4_t *)this + 37);
        v82.i32[3] = 1.0;
        v276 = v82;
        v83 = jet_buffer_pool::get_data(*((jet_buffer_pool **)this + 88));
        v84 = 0;
        v85 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v276, fminf(fmaxf((float)(*((float *)this + 151) * *((float *)this + 81)) * *((float *)a2 + 24), 0.0), 1.0)), (float32x4_t)vdupq_n_s32(0x437F0000u)));
        *(int16x4_t *)v85.i8 = vmovn_s32((int32x4_t)v85);
        v86 = vmovn_s16(v85).u32[0];
        do
        {
          *(_DWORD *)(v83 + v84) = v86;
          v84 += 4;
        }
        while (v84 != 24);
        jet_buffer_pool::commit_data(*((jet_buffer_pool **)this + 88));
        v87 = *a3;
        v88 = *((_QWORD *)a2 + 17);
        v89 = (uint64_t *)((char *)*a3 + 8);
        LODWORD(__str) = 31;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v89, (int *)&__str);
        v90 = *((_QWORD *)v87 + 2);
        *(_QWORD *)(v90 - 80) = v88;
        *(_OWORD *)(v90 - 64) = xmmword_1DC921840;
        *(_QWORD *)(v90 - 48) = 0x2300000000;
        v91 = *a3;
        std::string::basic_string[abi:ne180100]<0>(&__str, "a_position");
        current_buffer = jet_buffer_pool::get_current_buffer(*((jet_buffer_pool **)this + 86));
        *(_DWORD *)v286 = 5;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v91 + 1, (int *)v286);
        v93 = *((_QWORD *)v91 + 2);
        *(_QWORD *)(v93 - 80) = current_buffer;
        std::string::operator=((std::string *)(v93 - 176), (const std::string *)&__str);
        if (__str_16.i8[7] < 0)
          operator delete((void *)__str);
        v94 = *a3;
        v95 = *((_QWORD *)a2 + 66);
        v96 = (uint64_t *)((char *)*a3 + 8);
        LODWORD(__str) = 2;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v96, (int *)&__str);
        *(_QWORD *)(*((_QWORD *)v94 + 2) - 80) = v95;
        v97 = *a3;
        v98 = (uint64_t *)((char *)*a3 + 8);
        LODWORD(__str) = 10;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v98, (int *)&__str);
        *(_DWORD *)(*((_QWORD *)v97 + 2) - 64) = 1;
        v99 = *a3;
        v100 = (uint64_t *)((char *)*a3 + 8);
        LODWORD(__str) = 3;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v100, (int *)&__str);
        v101 = *((_QWORD *)v99 + 2);
        *(_QWORD *)(v101 - 64) = 3;
        *(_DWORD *)(v101 - 56) = 6;
        v102 = *((_QWORD *)a2 + 83);
        ++*(_DWORD *)(v102 + 164);
        ++*(_DWORD *)(v102 + 148);
        v103 = *a3;
        v104 = *((_QWORD *)a2 + 66);
        v105 = (uint64_t *)((char *)*a3 + 8);
        LODWORD(__str) = 2;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v105, (int *)&__str);
        *(_QWORD *)(*((_QWORD *)v103 + 2) - 80) = v104;
        v106 = *a3;
        v107 = (uint64_t *)((char *)*a3 + 8);
        LODWORD(__str) = 10;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v107, (int *)&__str);
        *(_DWORD *)(*((_QWORD *)v106 + 2) - 64) = 0;
        v108 = *a3;
        v109 = v39 - 6;
        v110 = (uint64_t *)((char *)*a3 + 8);
        LODWORD(__str) = 3;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v110, (int *)&__str);
        v111 = *((_QWORD *)v108 + 2);
        *(_QWORD *)(v111 - 64) = 0x600000003;
        *(_DWORD *)(v111 - 56) = v109;
        v112 = *((_QWORD *)a2 + 83);
        ++*(_DWORD *)(v112 + 164);
        *(_DWORD *)(v112 + 148) += v109 / 6;
        *(_OWORD *)v286 = 0uLL;
        v113 = (std::__shared_weak_count *)*((_QWORD *)a2 + 22);
        v284 = *((_QWORD *)a2 + 21);
        v285 = v113;
        if (v113)
        {
          p_shared_owners = (unint64_t *)&v113->__shared_owners_;
          do
            v115 = __ldxr(p_shared_owners);
          while (__stxr(v115 + 1, p_shared_owners));
        }
        v116 = (void *)*((_QWORD *)this + 85);
        if (v116)
        {
          objc_msgSend(v116, "_backingProgram");
          v117 = __str;
          __str = 0uLL;
          v118 = *(std::__shared_weak_count **)&v286[8];
          *(_OWORD *)v286 = v117;
          if (v118)
          {
            v119 = (unint64_t *)&v118->__shared_owners_;
            do
              v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
              std::__shared_weak_count::__release_weak(v118);
            }
          }
          v121 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
          if (*((_QWORD *)&__str + 1))
          {
            v122 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
            do
              v123 = __ldaxr(v122);
            while (__stlxr(v123 - 1, v122));
            if (!v123)
            {
              ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
              std::__shared_weak_count::__release_weak(v121);
            }
          }
          if (*(_QWORD *)v286)
            std::shared_ptr<jet_texture>::operator=[abi:ne180100](&v284, (uint64_t *)v286);
        }
        v124 = *a3;
        v125 = v284;
        BackingBlendMode = SKBlendModeGetBackingBlendMode(*((SKBlendMode *)this + 36));
        LODWORD(__str) = 31;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v124 + 1, (int *)&__str);
        v127 = *((_QWORD *)v124 + 2);
        *(_QWORD *)(v127 - 80) = v125;
        *(_DWORD *)(v127 - 64) = BackingBlendMode;
        *(_OWORD *)(v127 - 60) = xmmword_1DC922230;
        *(_DWORD *)(v127 - 44) = 35;
        v128 = *a3;
        v129 = *((_QWORD *)a2 + 70);
        v130 = (uint64_t *)((char *)*a3 + 8);
        LODWORD(__str) = 2;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v130, (int *)&__str);
        *(_QWORD *)(*((_QWORD *)v128 + 2) - 80) = v129;
        v131 = *a3;
        v132 = (uint64_t *)((char *)*a3 + 8);
        LODWORD(__str) = 10;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v132, (int *)&__str);
        *(_DWORD *)(*((_QWORD *)v131 + 2) - 64) = 0;
        v133 = *a3;
        std::string::basic_string[abi:ne180100]<0>(&__str, "a_position");
        v134 = jet_buffer_pool::get_current_buffer(*v16);
        LODWORD(v283) = 5;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v133 + 1, (int *)&v283);
        v135 = *((_QWORD *)v133 + 2);
        *(_QWORD *)(v135 - 80) = v134;
        std::string::operator=((std::string *)(v135 - 176), (const std::string *)&__str);
        if (__str_16.i8[7] < 0)
          operator delete((void *)__str);
        v136 = *a3;
        std::string::basic_string[abi:ne180100]<0>(&__str, "a_color");
        v137 = jet_buffer_pool::get_current_buffer(*((jet_buffer_pool **)this + 88));
        LODWORD(v283) = 5;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v136 + 1, (int *)&v283);
        v138 = *((_QWORD *)v136 + 2);
        *(_QWORD *)(v138 - 80) = v137;
        std::string::operator=((std::string *)(v138 - 176), (const std::string *)&__str);
        if (__str_16.i8[7] < 0)
          operator delete((void *)__str);
        v139 = *a3;
        std::string::basic_string[abi:ne180100]<0>(&__str, "a_tex_coord");
        v140 = jet_buffer_pool::get_current_buffer(*((jet_buffer_pool **)this + 90));
        LODWORD(v283) = 5;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v139 + 1, (int *)&v283);
        v141 = *((_QWORD *)v139 + 2);
        *(_QWORD *)(v141 - 80) = v140;
        std::string::operator=((std::string *)(v141 - 176), (const std::string *)&__str);
        if (__str_16.i8[7] < 0)
          operator delete((void *)__str);
        v142 = *a3;
        if (*((_QWORD *)this + 83))
        {
          std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture");
          v143 = (void *)*((_QWORD *)this + 83);
          if (v143)
          {
            objc_msgSend(v143, "_backingTexture");
            v144 = v283;
          }
          else
          {
            v144 = 0;
            v283 = 0uLL;
          }
          LODWORD(v277) = 8;
          std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v142 + 1, (int *)&v277);
          v148 = *((_QWORD *)v142 + 2);
          *(_QWORD *)(v148 - 80) = v144;
          std::string::operator=((std::string *)(v148 - 176), (const std::string *)&__str);
          v149 = (std::__shared_weak_count *)*((_QWORD *)&v283 + 1);
          if (*((_QWORD *)&v283 + 1))
          {
            v150 = (unint64_t *)(*((_QWORD *)&v283 + 1) + 8);
            do
              v151 = __ldaxr(v150);
            while (__stlxr(v151 - 1, v150));
            if (!v151)
            {
              ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
              std::__shared_weak_count::__release_weak(v149);
            }
          }
          if (__str_16.i8[7] < 0)
            operator delete((void *)__str);
          v152 = objc_msgSend(*((id *)this + 83), "filteringMode");
          v147 = (uint64_t *)(a2 + 116);
          if (v152 == 1)
            v147 = (uint64_t *)(a2 + 120);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture");
          v145 = *((_QWORD *)a2 + 54);
          LODWORD(v283) = 8;
          std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v142 + 1, (int *)&v283);
          v146 = *((_QWORD *)v142 + 2);
          *(_QWORD *)(v146 - 80) = v145;
          std::string::operator=((std::string *)(v146 - 176), (const std::string *)&__str);
          if (__str_16.i8[7] < 0)
            operator delete((void *)__str);
          v147 = (uint64_t *)(a2 + 120);
        }
        v153 = *v147;
        v154 = *a3;
        std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture");
        LODWORD(v283) = 30;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v154 + 1, (int *)&v283);
        v155 = *((_QWORD *)v154 + 2);
        *(_QWORD *)(v155 - 80) = v153;
        std::string::operator=((std::string *)(v155 - 176), (const std::string *)&__str);
        if (__str_16.i8[7] < 0)
          operator delete((void *)__str);
        if (*(_QWORD *)v286)
        {
          objc_msgSend(*((id *)this + 85), "attributes");
          v156 = (void *)objc_claimAutoreleasedReturnValue();
          v157 = objc_msgSend(v156, "count");

          if (v157)
            (*(void (**)(SKCShapeNode *, unsigned int *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)this + 40))(this, a2, *((_QWORD *)this + 85), 6, 0);
          v158 = *a3;
          v159 = (void *)*((_QWORD *)this + 85);
          if (v159)
          {
            objc_msgSend(v159, "_commandsForBatchOffset:count:", 0, 6);
            v160 = (jet_command_buffer *)__str;
          }
          else
          {
            v160 = 0;
            __str = 0uLL;
          }
          jet_command_buffer::add_command_buffer(v158, v160);
          v161 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
          if (*((_QWORD *)&__str + 1))
          {
            v162 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
            do
              v163 = __ldaxr(v162);
            while (__stlxr(v163 - 1, v162));
            if (!v163)
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }
          }
          if ((v164 & 1) == 0
          {
            SKCShapeNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime = skCurrentTime();
          }
          v165 = skCurrentTime();
          v166 = *(double *)&SKCShapeNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime;
          v167 = *a3;
          std::string::basic_string[abi:ne180100]<0>(&__str, "u_time");
          v168 = v165 - v166;
          LODWORD(v165) = fmodf(v168, 43200.0);
          LODWORD(v283) = 22;
          std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v167 + 1, (int *)&v283);
          v169 = *((_QWORD *)v167 + 2);
          std::string::operator=((std::string *)(v169 - 176), (const std::string *)&__str);
          *(_DWORD *)(v169 - 64) = LODWORD(v165);
          if (__str_16.i8[7] < 0)
            operator delete((void *)__str);
        }
        v170 = *a3;
        v171 = (uint64_t *)((char *)*a3 + 8);
        LODWORD(__str) = 3;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v171, (int *)&__str);
        v172 = *((_QWORD *)v170 + 2);
        *(_QWORD *)(v172 - 64) = 3;
        *(_DWORD *)(v172 - 56) = 6;
        v173 = *((_QWORD *)a2 + 83);
        ++*(_DWORD *)(v173 + 164);
        ++*(_DWORD *)(v173 + 148);
        v174 = *a3;
        v175 = (uint64_t *)((char *)*a3 + 8);
        LODWORD(__str) = 2;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v175, (int *)&__str);
        *(_QWORD *)(*((_QWORD *)v174 + 2) - 80) = 0;
        v176 = v285;
        if (v285)
        {
          v177 = (unint64_t *)&v285->__shared_owners_;
          do
            v178 = __ldaxr(v177);
          while (__stlxr(v178 - 1, v177));
          if (!v178)
          {
            ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
            std::__shared_weak_count::__release_weak(v176);
          }
        }
        v179 = *(std::__shared_weak_count **)&v286[8];
        if (*(_QWORD *)&v286[8])
        {
          v180 = (unint64_t *)(*(_QWORD *)&v286[8] + 8);
          do
            v181 = __ldaxr(v180);
          while (__stlxr(v181 - 1, v180));
          if (!v181)
          {
            ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
            std::__shared_weak_count::__release_weak(v179);
          }
        }
LABEL_119:
        if (!SKCShapeNode::shouldUseLocalStrokeBuffers(this, (SKCRenderInfo *)a2))
          return;
        v182 = 4 * SKCShapeNode::_NEW_quadCount(this);
        SKCRenderer::getBackingContext(*((_QWORD *)a2 + 13), &v284);
        v183 = (jet_buffer_pool **)((char *)this + 736);
        v184 = (jet_buffer_pool *)*((_QWORD *)this + 92);
        if (v184)
        {
          if (*((_DWORD *)v184 + 4) >= v182)
            goto LABEL_153;
          __str = 0uLL;
          std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 736, &__str);
          v185 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
          if (*((_QWORD *)&__str + 1))
          {
            v186 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
            do
              v187 = __ldaxr(v186);
            while (__stlxr(v187 - 1, v186));
            if (!v187)
            {
              ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
              std::__shared_weak_count::__release_weak(v185);
            }
          }
          __str = 0uLL;
          std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 752, &__str);
          v188 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
          if (*((_QWORD *)&__str + 1))
          {
            v189 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
            do
              v190 = __ldaxr(v189);
            while (__stlxr(v190 - 1, v189));
            if (!v190)
            {
              ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
              std::__shared_weak_count::__release_weak(v188);
            }
          }
          __str = 0uLL;
          std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 768, &__str);
          v191 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
          if (*((_QWORD *)&__str + 1))
          {
            v192 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
            do
              v193 = __ldaxr(v192);
            while (__stlxr(v193 - 1, v192));
            if (!v193)
            {
              ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
              std::__shared_weak_count::__release_weak(v191);
            }
          }
        }
        v194 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v284 + 16))(v284, 2, 4, v182);
        std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&__str, v194);
        std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 752, &__str);
        v195 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
        if (*((_QWORD *)&__str + 1))
        {
          v196 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
          do
            v197 = __ldaxr(v196);
          while (__stlxr(v197 - 1, v196));
          if (!v197)
          {
            ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
            std::__shared_weak_count::__release_weak(v195);
          }
        }
        v198 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v284 + 16))(v284, 0, 2, v182);
        std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&__str, v198);
        std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 768, &__str);
        v199 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
        if (*((_QWORD *)&__str + 1))
        {
          v200 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
          do
            v201 = __ldaxr(v200);
          while (__stlxr(v201 - 1, v200));
          if (!v201)
          {
            ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
            std::__shared_weak_count::__release_weak(v199);
          }
        }
        v202 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v284 + 16))(v284, 0, 4, v182);
        std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&__str, v202);
        std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 736, &__str);
        v203 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
        if (*((_QWORD *)&__str + 1))
        {
          v204 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
          do
            v205 = __ldaxr(v204);
          while (__stlxr(v205 - 1, v204));
          if (!v205)
          {
            ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
            std::__shared_weak_count::__release_weak(v203);
          }
        }
        v184 = *v183;
LABEL_153:
        jet_buffer_pool::next_buffer(v184);
        jet_buffer_pool::next_buffer(*((jet_buffer_pool **)this + 94));
        jet_buffer_pool::next_buffer(*((jet_buffer_pool **)this + 96));
        v206 = SKCShapeNode::_NEW_copyRenderPathData(this, (float32x4_t *)a2, *((_QWORD *)this + 84) != 0, 1);
        jet_buffer_pool::commit_data(*v183);
        jet_buffer_pool::commit_data(*((jet_buffer_pool **)this + 94));
        jet_buffer_pool::commit_data(*((jet_buffer_pool **)this + 96));
        (*(void (**)(__int128 *__return_ptr, SKCShapeNode *, unsigned int *))(*(_QWORD *)this + 24))(&__str, this, a2);
        if ((int)v206 < 1)
        {
LABEL_230:

          v273 = v285;
          if (v285)
          {
            v274 = (unint64_t *)&v285->__shared_owners_;
            do
              v275 = __ldaxr(v274);
            while (__stlxr(v275 - 1, v274));
            if (!v275)
            {
              ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
              std::__shared_weak_count::__release_weak(v273);
            }
          }
          return;
        }
        v283 = 0uLL;
        v277 = 0;
        v278 = 0;
        if (__str_16.i64[0])
        {
          objc_msgSend((id)__str_16.i64[0], "_backingProgram");
          v283 = *(_OWORD *)v286;
          if (*(_QWORD *)v286)
            __str_16.i64[1] = *(_QWORD *)v286;
        }
        if (*((_BYTE *)a2 + 576))
        {
          v207 = __str_16.i64[1];
          v208 = *a3;
          if (__str_16.i64[1] == *((_QWORD *)a2 + 21))
          {
            v207 = *((_QWORD *)a2 + 23);
            *(_DWORD *)v286 = 31;
            std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v208 + 1, (int *)v286);
            v209 = 1;
LABEL_162:
            v210 = *((_QWORD *)v208 + 2);
            *(_QWORD *)(v210 - 80) = v207;
            *(_DWORD *)(v210 - 64) = v209;
            *(_OWORD *)(v210 - 60) = xmmword_1DC922230;
            *(_DWORD *)(v210 - 44) = 3;
            v211 = *a3;
            if (v281.i64[0])
            {
              std::string::basic_string[abi:ne180100]<0>(v286, "u_texture");
              v212 = v281.i64[0];
              v289[0] = 8;
              std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v211 + 1, v289);
              v213 = *((_QWORD *)v211 + 2);
              *(_QWORD *)(v213 - 80) = v212;
              std::string::operator=((std::string *)(v213 - 176), (const std::string *)v286);
              if ((v286[23] & 0x80000000) != 0)
                operator delete(*(void **)v286);
              v214 = *a3;
              if (v282.i64[0])
              {
                std::string::basic_string[abi:ne180100]<0>(v286, "u_texture");
                v215 = v282.i64[0];
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(v286, "u_texture");
                v215 = *((_QWORD *)a2 + 60);
              }
              v289[0] = 30;
              std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v214 + 1, v289);
              v216 = *((_QWORD *)v214 + 2);
              *(_QWORD *)(v216 - 80) = v215;
              std::string::operator=((std::string *)(v216 - 176), (const std::string *)v286);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v286, "u_texture");
              v217 = *((_QWORD *)a2 + 54);
              v289[0] = 8;
              std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v211 + 1, v289);
              v218 = *((_QWORD *)v211 + 2);
              *(_QWORD *)(v218 - 80) = v217;
              std::string::operator=((std::string *)(v218 - 176), (const std::string *)v286);
              if ((v286[23] & 0x80000000) != 0)
                operator delete(*(void **)v286);
              v219 = *a3;
              std::string::basic_string[abi:ne180100]<0>(v286, "u_texture");
              v220 = *((_QWORD *)a2 + 60);
              v289[0] = 30;
              std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v219 + 1, v289);
              v221 = *((_QWORD *)v219 + 2);
              *(_QWORD *)(v221 - 80) = v220;
              std::string::operator=((std::string *)(v221 - 176), (const std::string *)v286);
            }
            if ((v286[23] & 0x80000000) != 0)
              operator delete(*(void **)v286);
            if (v281.i64[1])
            {
              v222 = *a3;
              std::string::basic_string[abi:ne180100]<0>(v286, "u_texture2");
              v223 = v281.i64[1];
              v289[0] = 8;
              std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v222 + 1, v289);
              v224 = *((_QWORD *)v222 + 2);
              *(_QWORD *)(v224 - 80) = v223;
              std::string::operator=((std::string *)(v224 - 176), (const std::string *)v286);
              if ((v286[23] & 0x80000000) != 0)
                operator delete(*(void **)v286);
              v225 = *a3;
              if (v282.i64[1])
              {
                std::string::basic_string[abi:ne180100]<0>(v286, "u_texture2");
                v226 = v282.i64[1];
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(v286, "u_texture2");
                v226 = *((_QWORD *)a2 + 60);
              }
              v289[0] = 30;
              std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v225 + 1, v289);
              v227 = *((_QWORD *)v225 + 2);
              *(_QWORD *)(v227 - 80) = v226;
              std::string::operator=((std::string *)(v227 - 176), (const std::string *)v286);
              if ((v286[23] & 0x80000000) != 0)
                operator delete(*(void **)v286);
            }
            v228 = *a3;
            std::string::basic_string[abi:ne180100]<0>(v286, "a_position");
            v229 = jet_buffer_pool::get_current_buffer(*v183);
            v289[0] = 5;
            std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v228 + 1, v289);
            v230 = *((_QWORD *)v228 + 2);
            *(_QWORD *)(v230 - 80) = v229;
            std::string::operator=((std::string *)(v230 - 176), (const std::string *)v286);
            if ((v286[23] & 0x80000000) != 0)
              operator delete(*(void **)v286);
            v231 = *a3;
            std::string::basic_string[abi:ne180100]<0>(v286, "a_color");
            v232 = jet_buffer_pool::get_current_buffer(*((jet_buffer_pool **)this + 94));
            v289[0] = 5;
            std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v231 + 1, v289);
            v233 = *((_QWORD *)v231 + 2);
            *(_QWORD *)(v233 - 80) = v232;
            std::string::operator=((std::string *)(v233 - 176), (const std::string *)v286);
            if ((v286[23] & 0x80000000) != 0)
              operator delete(*(void **)v286);
            v234 = *a3;
            std::string::basic_string[abi:ne180100]<0>(v286, "a_tex_coord");
            v235 = jet_buffer_pool::get_current_buffer(*((jet_buffer_pool **)this + 96));
            v289[0] = 5;
            std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v234 + 1, v289);
            v236 = *((_QWORD *)v234 + 2);
            *(_QWORD *)(v236 - 80) = v235;
            std::string::operator=((std::string *)(v236 - 176), (const std::string *)v286);
            if ((v286[23] & 0x80000000) != 0)
              operator delete(*(void **)v286);
            if ((_QWORD)v283)
            {
              v237 = *a3;
              if (__str_16.i64[0])
              {
                objc_msgSend((id)__str_16.i64[0], "_commandsForBatchOffset:count:", *a2, v206);
                v238 = *(jet_command_buffer **)v286;
              }
              else
              {
                v238 = 0;
                *(_OWORD *)v286 = 0uLL;
              }
              jet_command_buffer::add_command_buffer(v237, v238);
              v239 = *(std::__shared_weak_count **)&v286[8];
              if (*(_QWORD *)&v286[8])
              {
                v240 = (unint64_t *)(*(_QWORD *)&v286[8] + 8);
                do
                  v241 = __ldaxr(v240);
                while (__stlxr(v241 - 1, v240));
                if (!v241)
                {
                  ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
                  std::__shared_weak_count::__release_weak(v239);
                }
              }
              if ((v242 & 1) == 0
              {
                SKCShapeNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime = skCurrentTime();
              }
              v243 = skCurrentTime();
              v244 = *(double *)&SKCShapeNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime;
              v245 = *a3;
              std::string::basic_string[abi:ne180100]<0>(v286, "u_time");
              v246 = v243 - v244;
              LODWORD(v243) = fmodf(v246, 43200.0);
              v289[0] = 22;
              std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v245 + 1, v289);
              v247 = *((_QWORD *)v245 + 2);
              std::string::operator=((std::string *)(v247 - 176), (const std::string *)v286);
              *(_DWORD *)(v247 - 64) = LODWORD(v243);
              if ((v286[23] & 0x80000000) != 0)
                operator delete(*(void **)v286);
              v248 = *a3;
              std::string::basic_string[abi:ne180100]<0>(v286, "u_path_length");
              if (*((float *)this + 162) >= 0.0)
                v249 = *((float *)this + 162);
              else
                v249 = 0.0;
              v289[0] = 22;
              std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v248 + 1, v289);
              v250 = *((_QWORD *)v248 + 2);
              std::string::operator=((std::string *)(v250 - 176), (const std::string *)v286);
              *(float *)(v250 - 64) = v249;
              if ((v286[23] & 0x80000000) != 0)
                operator delete(*(void **)v286);
            }
            if (v277)
              jet_command_buffer::add_command_buffer(*a3, v277);
            v251 = v206 >> 2;
            v252 = 3 * (v206 >> 2);
            v253 = (6 * (v206 >> 2)) | 1;
            if (v253 <= 0x4E20)
              v254 = 20000;
            else
              v254 = v253;
            v255 = a2 + 104;
            v256 = *((_QWORD *)a2 + 52);
            if (!v256 || *(_DWORD *)(v256 + 48) < v254)
            {
              v257 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v284 + 8))(v284, 4, 1, v254, 0);
              std::shared_ptr<jet_buffer>::shared_ptr[abi:ne180100]<jet_buffer,void>(v286, v257);
              std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)(a2 + 104), (__int128 *)v286);
              v258 = *(std::__shared_weak_count **)&v286[8];
              if (*(_QWORD *)&v286[8])
              {
                v259 = (unint64_t *)(*(_QWORD *)&v286[8] + 8);
                do
                  v260 = __ldaxr(v259);
                while (__stlxr(v260 - 1, v259));
                if (!v260)
                {
                  ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                  std::__shared_weak_count::__release_weak(v258);
                }
              }
              SKCRendererGenerateQuadIndexBufferData<unsigned int>((unsigned int **)a2 + 52);
              (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*v255 + 24))(*v255, 0, 0);
            }
            std::vector<std::shared_ptr<jet_buffer>>::push_back[abi:ne180100]((char **)a2 + 84, (__int128 *)a2 + 26);
            v261 = *a3;
            v262 = DWORD2(__str);
            v263 = *v255;
            *(_DWORD *)v286 = 4;
            std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v261 + 1, (int *)v286);
            v264 = *((_QWORD *)v261 + 2);
            *(_QWORD *)(v264 - 80) = v263;
            *(_DWORD *)(v264 - 64) = v262;
            *(_DWORD *)(v264 - 60) = 0;
            *(_DWORD *)(v264 - 56) = 2 * v252;
            v265 = (_DWORD *)*((_QWORD *)a2 + 83);
            v266 = v265[41];
            v265[41] = v266 + 1;
            v265[37] += v251;
            if ((*((_BYTE *)a2 + 581) & 0x10) != 0)
              NSLog(CFSTR("SKCRenderer<%p> pass:%d batch:%d [Summary]:[Quads:%d Program:%p Tex0:%p Tex1:%p BlendMode:%d]"), this, v265[42], v266, (SDWORD1(__str) / 4), __str_16.i64[1], *(_OWORD *)&v281, HIDWORD(__str));
            v267 = v278;
            if (v278)
            {
              v268 = (unint64_t *)&v278->__shared_owners_;
              do
                v269 = __ldaxr(v268);
              while (__stlxr(v269 - 1, v268));
              if (!v269)
              {
                ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                std::__shared_weak_count::__release_weak(v267);
              }
            }
            v270 = (std::__shared_weak_count *)*((_QWORD *)&v283 + 1);
            if (*((_QWORD *)&v283 + 1))
            {
              v271 = (unint64_t *)(*((_QWORD *)&v283 + 1) + 8);
              do
                v272 = __ldaxr(v271);
              while (__stlxr(v272 - 1, v271));
              if (!v272)
              {
                ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
                std::__shared_weak_count::__release_weak(v270);
              }
            }
            goto LABEL_230;
          }
        }
        else
        {
          v208 = *a3;
          v207 = __str_16.i64[1];
        }
        v209 = HIDWORD(__str);
        *(_DWORD *)v286 = 31;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v208 + 1, (int *)v286);
        goto LABEL_162;
      }
      SKCRenderer::getBackingContext(*((_QWORD *)a2 + 13), &__str);
      if (*v16)
      {
        *(_OWORD *)v286 = 0uLL;
        std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 688, (__int128 *)v286);
        v18 = *(std::__shared_weak_count **)&v286[8];
        if (!*(_QWORD *)&v286[8])
        {
LABEL_28:
          v27 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)__str + 16))(__str, 0, 4, v15);
          std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(v286, v27);
          std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 688, (__int128 *)v286);
          v28 = *(std::__shared_weak_count **)&v286[8];
          if (*(_QWORD *)&v286[8])
          {
            v29 = (unint64_t *)(*(_QWORD *)&v286[8] + 8);
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          v31 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
          if (*((_QWORD *)&__str + 1))
          {
            v32 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          v17 = *v16;
          goto LABEL_39;
        }
        v19 = (unint64_t *)(*(_QWORD *)&v286[8] + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
      }
      else
      {
        v21 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)__str + 16))(__str, 2, 4, 6);
        std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(v286, v21);
        std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 704, (__int128 *)v286);
        v22 = *(std::__shared_weak_count **)&v286[8];
        if (*(_QWORD *)&v286[8])
        {
          v23 = (unint64_t *)(*(_QWORD *)&v286[8] + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v25 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)__str + 16))(__str, 0, 2, 6);
        std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(v286, v25);
        std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 720, (__int128 *)v286);
        v18 = *(std::__shared_weak_count **)&v286[8];
        if (!*(_QWORD *)&v286[8])
          goto LABEL_28;
        v26 = (unint64_t *)(*(_QWORD *)&v286[8] + 8);
        do
          v20 = __ldaxr(v26);
        while (__stlxr(v20 - 1, v26));
      }
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      goto LABEL_28;
    }
  }
}

void sub_1DC8A8040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a33);

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  _Unwind_Resume(a1);
}

jet_command_buffer *jet_command_buffer::add_command_buffer(jet_command_buffer *this, jet_command_buffer *a2)
{
  if (a2)
    return (jet_command_buffer *)std::vector<jet_render_op>::__insert_with_size[abi:ne180100]<std::__wrap_iter<jet_render_op*>,std::__wrap_iter<jet_render_op*>>((uint64_t *)this + 1, *((_QWORD *)this + 2), *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 6));
  return this;
}

uint64_t SKCShapeNode::_NEW_copyRenderPathData(SKCShapeNode *this, float32x4_t *a2, char a3, int a4)
{
  float v8;
  char v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _BOOL4 v31;
  int v32;
  __n128 v33;
  __n128 v34;
  float32x2_t v35;
  float32x2_t v36;
  unint64_t v37;
  unsigned int v38;
  __n128 v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  double v43;
  double v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  int16x8_t v54;
  __int128 v55;
  float32x4_t v56;
  uint64_t v57;
  float v58;
  int16x8_t v59;
  int16x8_t v60;
  float32x4_t v61;
  uint64_t v62;
  float v63;
  __int128 v64;
  float32x4_t v65;
  uint64_t v66;
  int16x8_t v67;
  uint64_t v68;
  __int128 v69;
  float32x4_t v70;
  uint64_t v71;
  float v72;
  int16x8_t v73;
  uint64_t v74;
  __int128 v75;
  float32x4_t v76;
  float v77;
  uint64_t v78;
  int16x8_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  uint64_t v84;
  __int128 v85;
  float v86;
  float32x4_t v87;
  uint64_t v88;
  int16x8_t v89;
  uint64_t v90;
  int16x8_t v91;
  float v92;
  float32x4_t v93;
  uint64_t v94;
  int32x4_t v95;
  uint64_t v96;
  __int128 v97;
  float v98;
  float32x4_t v99;
  uint64_t v100;
  int16x8_t v101;
  uint64_t v102;
  __int128 v103;
  float v104;
  float32x4_t v105;
  uint64_t v106;
  uint64_t v107;
  int16x8_t v108;
  uint64_t v109;
  int16x8_t v110;
  float v111;
  float32x4_t v112;
  uint64_t v113;
  int32x4_t v114;
  uint64_t v115;
  __int128 v116;
  float v117;
  float32x4_t v118;
  uint64_t v119;
  uint64_t v120;
  int16x8_t v121;
  uint64_t v122;
  float32x2_t *v123;
  uint64_t result;
  uint64_t v125;
  float32x4_t v126;
  float v127;
  char v128;
  float32x4_t v129;
  __int128 v130;
  float32x2_t v131;
  __int128 v132;
  double v133;
  __int128 v134;
  float32x2_t v135;
  __int128 v136;
  double v137;
  float32x4_t v138;
  float v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t data;
  int v143;
  int32x2_t v144;
  int v145;
  float v146;
  float v147;
  char v148;
  char v149;
  float v150;
  float v151;
  float v152;
  BOOL v153;
  float32x4_t v154;
  float v155;
  int v156;
  uint64_t v157;
  __int128 v158;
  double v159;
  __int128 v160;
  float32x2_t v161;

  if (!*((_QWORD *)this + 70))
    return 0;
  v8 = *((float *)this + 155);
  v9 = *((_BYTE *)this + 644);
  v10 = fmaxf(fminf(v8 * 1.5, 1.7), 1.3);
  if (!v9)
    v10 = 0.0;
  v11 = v10 / a2[8].f32[0];
  v138.i64[1] = (uint64_t)a2;
  v144 = vrev64_s32(*(int32x2_t *)((char *)this + 608));
  v12 = (float)(v8 * 0.5) + v11 * -0.66;
  v13 = fmaxf(v12, 0.1);
  v14 = *((float *)this + 156);
  v151 = *((float *)this + 154) * v8;
  v150 = v14 + v11;
  v148 = v9;
  v145 = *((_DWORD *)this + 160);
  v15 = 1.0;
  v147 = v13 + v13;
  v146 = 1.0 / (float)v145;
  v154 = *((float32x4_t *)this + 36);
  v155 = fminf(fmaxf(vmuls_lane_f32(a2[6].f32[0] * *((float *)this + 81), v154, 3), 0.0), 1.0);
  v157 = 0;
  v16 = (void *)*((_QWORD *)this + 82);
  if (v16)
  {
    objc_msgSend(v16, "pixelSize");
    v18 = v17;
    objc_msgSend(*((id *)this + 82), "pixelSize");
    v15 = v18 / v19;
  }
  if (a4)
  {
    data = jet_buffer_pool::get_data(*((jet_buffer_pool **)this + 92));
    v140 = jet_buffer_pool::get_data(*((jet_buffer_pool **)this + 94));
    v20 = jet_buffer_pool::get_data(*((jet_buffer_pool **)this + 96));
    v21 = 0.0;
  }
  else
  {
    v20 = a2[1].i64[0];
    v22 = a2->i64[1];
    data = a2[1].i64[1];
    v140 = v22;
    v21 = a2->f32[0];
  }
  v141 = v20;
  v139 = v21;
  v152 = v15 * *((float *)this + 155);
  v149 = a3;
  v23 = *(_QWORD *)(*((_QWORD *)this + 70) + 24) - *(_QWORD *)(*((_QWORD *)this + 70) + 16);
  if (!v23)
  {
    result = 0;
    *((_DWORD *)this + 162) = 0;
    return result;
  }
  v127 = v21;
  v128 = a3;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = v23 >> 3;
  v129 = (float32x4_t)vdupq_n_s32(0x437F0000u);
  do
  {
    v28 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 70) + 16) + 8 * v24);
    v29 = *(_DWORD *)(v28 + 4);
    if (*(_BYTE *)(v28 + 1) != 0 && v29 == 2)
      v30 = 1;
    else
      v30 = v29;
    v31 = (v30 + 1) > 3 && *(_BYTE *)(v28 + 1) != 0;
    if (*(_QWORD *)(v28 + 24) != *(_QWORD *)(v28 + 16))
    {
      v138.i64[0] = v28;
      v143 = v30 + 1;
      if (v148)
        v32 = 12;
      else
        v32 = 4;
      v156 = v32;
      v153 = v31;
      calculateVectorsForCurve((uint64_t *)&v138, 0, (float32x2_t *)&v132, (float32x2_t *)&v130);
      v158 = v132;
      v159 = v133;
      v34.n128_u64[0] = (unint64_t)vmul_f32(*(float32x2_t *)((char *)&v132 + 8), *(float32x2_t *)((char *)&v132 + 8));
      v34.n128_u32[0] = vadd_f32((float32x2_t)v34.n128_u64[0], (float32x2_t)vdup_lane_s32((int32x2_t)v34.n128_u64[0], 1)).u32[0];
      v35 = vrsqrte_f32((float32x2_t)v34.n128_u32[0]);
      v36 = vmul_f32(v35, vrsqrts_f32((float32x2_t)v34.n128_u32[0], vmul_f32(v35, v35)));
      *(_QWORD *)&v158 = **(_QWORD **)(v28 + 16);
      *((float32x2_t *)&v158 + 1) = vmul_f32(vmul_n_f32(vmul_n_f32(*(float32x2_t *)((char *)&v132 + 8), vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.n128_u32[0], vmul_f32(v36, v36))).f32[0]), v147), (float32x2_t)0x3F0000003F000000);
      if ((_DWORD)v30)
      {
        v37 = 0;
        v38 = 3;
        do
        {
          addCurve(&v138, v37);
          if (v37 < (v30 - 1))
          {
            calculateVectorsForCurve((uint64_t *)&v138, v37 + 1, (float32x2_t *)&v136, (float32x2_t *)&v134);
            addJoin(&v138, *(double *)(*(_QWORD *)(v28 + 16) + 8 * v38), *(double *)&v130, *((double *)&v130 + 1), v131, *(double *)&v136, *((double *)&v136 + 1), v137, v39);
          }
          ++v37;
          v132 = v136;
          v133 = v137;
          v130 = v134;
          v131 = v135;
          v38 += 3;
        }
        while (v30 != v37);
        calculateVectorsForCurve((uint64_t *)&v138, v30 - 1, (float32x2_t *)&v132, (float32x2_t *)&v130);
      }
      v160 = v130;
      v161 = v131;
      v40 = vmul_f32(*(float32x2_t *)((char *)&v130 + 8), *(float32x2_t *)((char *)&v130 + 8));
      v40.i32[0] = vadd_f32(v40, (float32x2_t)vdup_lane_s32((int32x2_t)v40, 1)).u32[0];
      v41 = vrsqrte_f32((float32x2_t)v40.u32[0]);
      v34.n128_u64[0] = (unint64_t)vmul_f32(v41, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v41, v41)));
      v43 = COERCE_DOUBLE(vmul_f32((float32x2_t)v34.n128_u64[0], vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32((float32x2_t)v34.n128_u64[0], (float32x2_t)v34.n128_u64[0]))));
      v42 = vmul_n_f32(*(float32x2_t *)((char *)&v130 + 8), *(float *)&v43);
      *(float *)&v43 = v147;
      v44 = COERCE_DOUBLE(vmul_f32(vmul_n_f32(v42, v147), (float32x2_t)0x3F0000003F000000));
      *(_QWORD *)&v160 = *(_QWORD *)(*(_QWORD *)(v28 + 16) + 8 * (3 * v30));
      *((double *)&v160 + 1) = v44;
      if (v31)
      {
        v45 = (float32x2_t)v158;
        if (v148)
        {
          v46 = vmul_f32(*(float32x2_t *)&v159, *(float32x2_t *)&v159);
          v46.i32[0] = vadd_f32(v46, (float32x2_t)vdup_lane_s32((int32x2_t)v46, 1)).u32[0];
          v47 = vrsqrte_f32((float32x2_t)v46.u32[0]);
          v48 = vmul_f32(v47, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v47, v47)));
          v49 = vmul_n_f32(vmul_n_f32(*(float32x2_t *)&v159, vmul_f32(v48, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v48, v48))).f32[0]), v150 + (float)(v147 * 0.5));
          v50 = vadd_f32(*(float32x2_t *)&v159, *(float32x2_t *)&v158);
          v51 = v154;
          v52 = v129;
          *((_QWORD *)&v55 + 1) = 0x3F80000000000000;
          v53 = LODWORD(v139);
          v51.i32[3] = 1.0;
          v54 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v51, v155), v129));
          *(int16x4_t *)v54.i8 = vmovn_s32((int32x4_t)v54);
          *(_OWORD *)(data + 16 * LODWORD(v139)) = v55;
          *(_DWORD *)(v140 + 4 * v53) = vmovn_s16(v54).u32[0];
          *(_QWORD *)(v141 + 8 * v53) = 0x3F80000000000000;
          *(float32x2_t *)&v55 = vadd_f32(v49, *(float32x2_t *)&v158);
          v56 = v154;
          v57 = LODWORD(v139);
          if (v149)
            v58 = 0.0;
          else
            v58 = 1.0;
          DWORD2(v55) = 0;
          *((float *)&v55 + 3) = v58;
          v56.i32[3] = 1.0;
          v59 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v56, (float32x4_t)0), v129));
          *(int16x4_t *)v59.i8 = vmovn_s32((int32x4_t)v59);
          *(_OWORD *)(data + 16 * (LODWORD(v139) + 1)) = v55;
          *(_DWORD *)(v140 + 4 * (v57 + 1)) = vmovn_s16(v59).u32[0];
          *(_QWORD *)(v141 + 8 * (v57 + 1)) = 0x3F80000000000000;
          *(float32x2_t *)v60.i8 = vsub_f32(*(float32x2_t *)&v158, v49);
          v61 = v154;
          v62 = LODWORD(v139);
          if (v149)
            v63 = 0.0;
          else
            v63 = 1.0;
          v60.i32[2] = 0;
          *(float *)&v60.i32[3] = v63;
          v61.i32[3] = 1.0;
          *(int16x8_t *)(data + 16 * (LODWORD(v139) + 4)) = v60;
          *(int16x4_t *)v60.i8 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_f32(v61, (float32x4_t)0), v129)));
          *(_DWORD *)(v140 + 4 * (v62 + 4)) = vmovn_s16(v60).u32[0];
          *(_QWORD *)(v141 + 8 * (v62 + 4)) = 0;
          *(float32x2_t *)&v64 = vsub_f32(*(float32x2_t *)&v158, *(float32x2_t *)&v159);
          v65 = v154;
          *((_QWORD *)&v64 + 1) = 0x3F80000000000000;
          v65.i32[3] = 1.0;
          v66 = LODWORD(v139) + 5;
          v67 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v65, v155), v129));
          *(int16x4_t *)v67.i8 = vmovn_s32((int32x4_t)v67);
          *(_OWORD *)(data + 16 * v66) = v64;
          *(_DWORD *)(v140 + 4 * v66) = vmovn_s16(v67).u32[0];
          *(_QWORD *)(v141 + 8 * v66) = 0;
          v45 = (float32x2_t)v158;
          v68 = 8;
        }
        else
        {
          v68 = 0;
          v52 = v129;
        }
        *(float32x2_t *)&v69 = vsub_f32(v45, *(float32x2_t *)&v159);
        v70 = v154;
        v71 = LODWORD(v139);
        if (v149)
          v72 = 0.0;
        else
          v72 = 1.0;
        DWORD2(v69) = 0;
        *((float *)&v69 + 3) = v72;
        v70.i32[3] = 1.0;
        v73 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v70, v155), v52));
        *(int16x4_t *)v73.i8 = vmovn_s32((int32x4_t)v73);
        *(_OWORD *)(data + 16 * (LODWORD(v139) + v68)) = v69;
        *(_DWORD *)(v140 + 4 * (v71 + v68)) = vmovn_s16(v73).u32[0];
        *(_QWORD *)(v141 + 8 * (v71 + v68)) = 0;
        v74 = v68 | 1;
        *(float32x2_t *)&v75 = vadd_f32(*(float32x2_t *)&v158, *(float32x2_t *)&v159);
        v76 = v154;
        if (v149)
          v77 = 0.0;
        else
          v77 = 1.0;
        DWORD2(v75) = 0;
        *((float *)&v75 + 3) = v77;
        v76.i32[3] = 1.0;
        v78 = LODWORD(v139) + v74;
        v79 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v76, v155), v52));
        *(int16x4_t *)v79.i8 = vmovn_s32((int32x4_t)v79);
        *(_OWORD *)(data + 16 * v78) = v75;
        *(_DWORD *)(v140 + 4 * v78) = vmovn_s16(v79).u32[0];
        *(_QWORD *)(v141 + 8 * v78) = 0x3F80000000000000;
        addJoin(&v138, **(double **)(v28 + 16), *(double *)&v160, *((double *)&v160 + 1), v161, *(double *)&v158, *((double *)&v158 + 1), v159, v33);
        if (v148)
        {
          v80 = vmul_f32(*(float32x2_t *)&v159, *(float32x2_t *)&v159);
          v80.i32[0] = vadd_f32(v80, (float32x2_t)vdup_lane_s32((int32x2_t)v80, 1)).u32[0];
          v81 = vrsqrte_f32((float32x2_t)v80.u32[0]);
          v82 = vmul_f32(v81, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(v81, v81)));
          v83 = vmul_n_f32(vmul_n_f32(*(float32x2_t *)&v159, vmul_f32(v82, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(v82, v82))).f32[0]), v150 + (float)(v147 * 0.5));
          v84 = (v156 - 10);
          *(float32x2_t *)&v85 = vadd_f32(*(float32x2_t *)&v158, v83);
          v86 = *(float *)&v157;
          v87 = v154;
          v88 = LODWORD(v139);
          if (!v149)
            v86 = 1.0;
          DWORD2(v85) = 0;
          *((float *)&v85 + 3) = v86;
          v87.i32[3] = 1.0;
          v89 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v87, (float32x4_t)0), v129));
          *(int16x4_t *)v89.i8 = vmovn_s32((int32x4_t)v89);
          *(_OWORD *)(data + 16 * (LODWORD(v139) + v84)) = v85;
          *(_DWORD *)(v140 + 4 * (v88 + v84)) = vmovn_s16(v89).u32[0];
          *(_QWORD *)(v141 + 8 * (v88 + v84)) = 0x3F80000000000000;
          v90 = (v156 - 9);
          *(float32x2_t *)v91.i8 = vadd_f32(*(float32x2_t *)&v158, *(float32x2_t *)&v159);
          v92 = *(float *)&v157;
          v93 = v154;
          v94 = LODWORD(v139);
          if (!v149)
            v92 = 1.0;
          v91.i32[2] = 0;
          *(float *)&v91.i32[3] = v92;
          v93.i32[3] = 1.0;
          v95 = vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v93, v155), v129));
          *(int16x8_t *)(data + 16 * (LODWORD(v139) + v90)) = v91;
          *(int16x4_t *)v91.i8 = vmovn_s32(v95);
          *(_DWORD *)(v140 + 4 * (v94 + v90)) = vmovn_s16(v91).u32[0];
          *(_QWORD *)(v141 + 8 * (v94 + v90)) = 0x3F80000000000000;
          v96 = (v156 - 6);
          *(float32x2_t *)&v97 = vsub_f32(*(float32x2_t *)&v158, *(float32x2_t *)&v159);
          v98 = *(float *)&v157;
          v99 = v154;
          v100 = LODWORD(v139);
          if (!v149)
            v98 = 1.0;
          DWORD2(v97) = 0;
          *((float *)&v97 + 3) = v98;
          v99.i32[3] = 1.0;
          v101 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v99, v155), v129));
          *(int16x4_t *)v101.i8 = vmovn_s32((int32x4_t)v101);
          *(_OWORD *)(data + 16 * (LODWORD(v139) + v96)) = v97;
          *(_DWORD *)(v140 + 4 * (v100 + v96)) = vmovn_s16(v101).u32[0];
          *(_QWORD *)(v141 + 8 * (v100 + v96)) = 0;
          v102 = (v156 - 5);
          *(float32x2_t *)&v103 = vsub_f32(*(float32x2_t *)&v158, v83);
          v104 = *(float *)&v157;
          v105 = v154;
          v106 = LODWORD(v139);
          if (!v149)
            v104 = 1.0;
          v107 = LODWORD(v139) + v102;
          DWORD2(v103) = 0;
          *((float *)&v103 + 3) = v104;
          v105.i32[3] = 1.0;
          v108 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v105, (float32x4_t)0), v129));
          *(int16x4_t *)v108.i8 = vmovn_s32((int32x4_t)v108);
          *(_OWORD *)(data + 16 * v107) = v103;
          *(_DWORD *)(v140 + 4 * (v106 + v102)) = vmovn_s16(v108).u32[0];
          *(_QWORD *)(v141 + 8 * v107) = 0;
        }
        v109 = (v156 - 2);
        *(float32x2_t *)v110.i8 = vadd_f32(*(float32x2_t *)&v158, *(float32x2_t *)&v159);
        v111 = *(float *)&v157;
        v112 = v154;
        v113 = LODWORD(v139);
        if (!v149)
          v111 = 1.0;
        v110.i32[2] = 0;
        *(float *)&v110.i32[3] = v111;
        v112.i32[3] = 1.0;
        v114 = vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v112, v155), v129));
        *(int16x8_t *)(data + 16 * (LODWORD(v139) + v109)) = v110;
        *(int16x4_t *)v110.i8 = vmovn_s32(v114);
        *(_DWORD *)(v140 + 4 * (v113 + v109)) = vmovn_s16(v110).u32[0];
        *(_QWORD *)(v141 + 8 * (v113 + v109)) = 0x3F80000000000000;
        v115 = (v156 - 1);
        *(float32x2_t *)&v116 = vsub_f32(*(float32x2_t *)&v158, *(float32x2_t *)&v159);
        v117 = *(float *)&v157;
        v118 = v154;
        v119 = LODWORD(v139);
        if (!v149)
          v117 = 1.0;
        DWORD2(v116) = 0;
        *((float *)&v116 + 3) = v117;
        v120 = LODWORD(v139) + v115;
        v118.i32[3] = 1.0;
        v121 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v118, v155), v129));
        *(int16x4_t *)v121.i8 = vmovn_s32((int32x4_t)v121);
        *(_OWORD *)(data + 16 * v120) = v116;
        *(_DWORD *)(v140 + 4 * (v119 + v115)) = vmovn_s16(v121).u32[0];
        *(_QWORD *)(v141 + 8 * v120) = 0;
      }
      else
      {
        addCaps((uint64_t)&v138, v44, v43, v34);
      }
      v25 += v156;
      LODWORD(v139) += v156;
    }
    v24 = ++v26;
  }
  while (v27 > v26);
  v122 = data;
  *((_DWORD *)this + 162) = v157;
  v123 = (float32x2_t *)(v122 + 16 * LODWORD(v127));
  result = v25;
  if ((v128 & 1) != 0)
  {
    if (v25)
    {
      v125 = 0;
      do
      {
        v126 = vaddq_f32(a2[5], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2[2], COERCE_FLOAT(*(_OWORD *)v123[2 * v125].f32)), a2[3], v123[2 * v125], 1), a2[4], *(float32x4_t *)v123[2 * v125].f32, 2));
        v126.i32[3] = HIDWORD(*(_OWORD *)v123[2 * v125].f32);
        *(float32x4_t *)v123[2 * v125++].f32 = v126;
      }
      while (v25 != (_DWORD)v125);
      return result;
    }
    return 0;
  }
  if (!v25)
    return 0;
  do
  {
    *(float32x4_t *)v123->f32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2[2], COERCE_FLOAT(*(_OWORD *)v123->f32)), a2[3], *v123, 1), a2[4], *(float32x4_t *)v123->f32, 2), a2[5], *(float32x4_t *)v123->f32, 3);
    v123 += 2;
    --v25;
  }
  while (v25);
  return result;
}

uint64_t SKCShapeNode::addBatchRenderElements(SKCShapeNode *this, float32x4_t *a2)
{
  if ((*((_QWORD *)this + 82) || *((float *)this + 147) > 0.0 || *((_QWORD *)this + 84))
    && *((float *)this + 155) > 0.0
    && *((_QWORD *)this + 70)
    && !SKCShapeNode::shouldUseLocalStrokeBuffers(this, (SKCRenderInfo *)a2))
  {
    return SKCShapeNode::_NEW_copyRenderPathData(this, a2, *((_QWORD *)this + 84) != 0, 0);
  }
  else
  {
    return 0;
  }
}

int32x2_t sk_vector_perp(int32x2_t a1, double a2)
{
  *(float *)&a2 = -*(float *)&a1.i32[1];
  return vzip1_s32(*(int32x2_t *)&a2, a1);
}

float32x2_t sk_vector_from_CGPoint(CGPoint a1)
{
  CGFloat y;

  y = a1.y;
  return vcvt_f32_f64((float64x2_t)a1);
}

__n64 sk_vector_from_PKPoint(double a1, float a2)
{
  __n64 result;

  result.n64_f32[1] = a2;
  return result;
}

double sk_vector_rotate(double a1, float a2)
{
  __float2 v2;
  double v3;

  v2 = __sincosf_stret(a2);
  *(float *)&v3 = vmlas_n_f32(-(float)(*((float *)&a1 + 1) * v2.__sinval), v2.__cosval, *(float *)&a1);
  HIDWORD(v3) = vmlas_n_f32(vmuls_lane_f32(v2.__cosval, *(float32x2_t *)&a1, 1), v2.__sinval, *(float *)&a1);
  return v3;
}

BOOL sk_vector_equals(float32x2_t a1, float32x2_t a2)
{
  float32x2_t v2;

  v2 = vsub_f32(a1, a2);
  return (v2.i32[0] & 0x60000000) == 0 && (v2.i32[1] & 0x60000000) == 0;
}

int8x8_t sk_vert_write(_QWORD *a1, int a2, uint64_t a3, __n128 a4, double a5, float a6, float32x4_t a7, float a8, double a9, float a10)
{
  uint64_t v10;
  int16x8_t v11;
  int8x8_t result;

  if (!a2)
    a6 = 1.0;
  v10 = *(unsigned int *)a1 + a3;
  a4.n128_u32[2] = 0;
  a4.n128_f32[3] = a6;
  a7.i32[3] = 1.0;
  v11 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(a7, a8), (float32x4_t)vdupq_n_s32(0x437F0000u)));
  *(int16x4_t *)v11.i8 = vmovn_s32((int32x4_t)v11);
  *(__n128 *)(a1[3] + 16 * v10) = a4;
  result = vmovn_s16(v11);
  *(_DWORD *)(a1[1] + 4 * v10) = result.i32[0];
  *((float *)&a9 + 1) = a10;
  *(double *)(a1[2] + 8 * v10) = a9;
  return result;
}

double SKCShapeNode::strokeLength(SKCShapeNode *this)
{
  return 0.0;
}

uint64_t SKCShapeNode::_NEW_quadCount(SKCShapeNode *this, unsigned int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  _BOOL4 v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  float v13;
  float v14;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 70) + 16) + 8 * a2);
  v3 = *(_DWORD *)(v2 + 4);
  v4 = *(_DWORD *)(v2 + 8);
  v5 = *(unsigned __int8 *)(v2 + 1) != 0;
  if (v4 == 2)
    v6 = v3;
  else
    v6 = 3;
  if (v5 && v3 == 2)
    v7 = v6;
  else
    v7 = v3 + 1;
  v8 = ((v7 + ~v4) & ~((v7 + ~v4) >> 31)) * *((_DWORD *)this + 160);
  if (v7 <= 3)
    v5 = 0;
  v9 = v7 + v5;
  if (v9 <= 2)
    v9 = 2;
  v10 = v9 - 2;
  v11 = v8 + 2 * (v9 - 2) + 1;
  v12 = *((_DWORD *)this + 152);
  if (v12)
  {
    if (v12 == 1)
    {
      v13 = (float)(*((float *)this + 155) + (float)(*((float *)this + 156) * 2.0)) * 0.14;
      v11 = (int)(float)((float)v11 + (float)((float)v10 * (float)((float)(ceilf(v13) * 2.0) + 2.0)));
    }
    else
    {
      v11 += 2 * v10;
    }
  }
  if (*((_DWORD *)this + 153) == 1)
  {
    v14 = (float)(*((float *)this + 155) + (float)(*((float *)this + 156) * 2.0)) * 0.14;
    v11 = (int)(float)((float)v11 + (float)((float)((float)(ceilf(v14) * 2.0) + 2.0) * 2.0));
  }
  if (*((_BYTE *)this + 644))
    return (3 * v11);
  else
    return v11;
}

uint64_t *getElementsForCurve(uint64_t *result, unsigned int a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  if (result)
  {
    v6 = *result;
    if (*result)
    {
      if (*(_DWORD *)(v6 + 4) > a2)
      {
        v7 = *(_QWORD *)(v6 + 16);
        v8 = *(_QWORD *)(v7 + 24 * a2);
        v9 = *(_QWORD *)(v7 + 8 * (3 * a2 + 1));
        v10 = *(_QWORD *)(v7 + 8 * (3 * a2 + 2));
        v11 = *(_QWORD *)(v7 + 8 * (3 * a2 + 3));
LABEL_9:
        *a3 = v8;
        *a4 = v9;
        *a5 = v10;
        *a6 = v11;
        return result;
      }
      if (!a2)
      {
        v13 = v6 + 16;
        v12 = *(uint64_t **)(v6 + 16);
        if (*(uint64_t **)(v13 + 8) != v12)
        {
          v8 = *v12;
          v9 = *v12;
          v10 = *v12;
          v11 = *v12;
          goto LABEL_9;
        }
      }
    }
  }
  return result;
}

uint64_t curveIsLinear(double a1, double a2, double a3, double a4)
{
  if ((COERCE_UNSIGNED_INT(fabsf(vmlas_n_f32(vmlas_n_f32((float)(*((float *)&a3 + 1) - *((float *)&a1 + 1)) * *(float *)&a2, *((float *)&a2 + 1) - *((float *)&a3 + 1), *(float *)&a1), *((float *)&a1 + 1) - *((float *)&a2 + 1), *(float *)&a3))+ -0.002) & 0x80000000) != 0)return COERCE_UNSIGNED_INT(fabsf(vmlas_n_f32((float)(*(float *)&a3 * (float)(*((float *)&a4 + 1) - *((float *)&a2 + 1)))+ (float)(*(float *)&a2 * (float)(*((float *)&a3 + 1) - *((float *)&a4 + 1))), *((float *)&a2 + 1) - *((float *)&a3 + 1), *(float *)&a4))+ -0.002) >> 31;
  else
    return 0;
}

uint64_t *calculateVectorsForCurve(uint64_t *result, unsigned int a2, float32x2_t *a3, float32x2_t *a4)
{
  uint64_t *v6;
  float32x2_t *v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  int32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  unsigned __int32 v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float v36;
  float32x2_t v37;
  int32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  int32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  int32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x2_t v59;
  uint64_t v60;
  uint64_t v61;
  float32x2_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;

  v6 = result;
  if (!a2)
  {
    v7 = *(float32x2_t **)(*result + 16);
    if (*(_QWORD *)(*result + 24) - (_QWORD)v7 == 8)
    {
      v8 = *v7;
      *a3 = *v7;
      a3[1] = (float32x2_t)1065353216;
      v9.i32[0] = 0;
      v9.f32[1] = *((float *)result + 36) * 0.5;
      a3[2] = v9;
      *a4 = v8;
LABEL_12:
      a4[1] = a3[1];
      v53 = a3[2];
      goto LABEL_13;
    }
  }
  v61 = 0;
  v62 = 0;
  v59 = 0;
  v60 = 0;
  result = getElementsForCurve(result, a2, &v62, &v61, &v60, &v59);
  v10 = v62;
  v11 = v59;
  if ((COERCE_UNSIGNED_INT(fabsf(vmlas_n_f32(vmlas_n_f32((float)(*((float *)&v60 + 1) - v62.f32[1]) * *(float *)&v61, *((float *)&v61 + 1) - *((float *)&v60 + 1), v62.f32[0]), v62.f32[1] - *((float *)&v61 + 1), *(float *)&v60))+ -0.002) & 0x80000000) != 0&& (COERCE_UNSIGNED_INT(fabsf(vmlas_n_f32((float)(*(float *)&v60 * (float)(v59.f32[1] - *((float *)&v61 + 1)))+ (float)(*(float *)&v61 * (float)(*((float *)&v60 + 1) - v59.f32[1])), *((float *)&v61 + 1) - *((float *)&v60 + 1), v59.f32[0]))+ -0.002) & 0x80000000) != 0)
  {
    v54 = (int32x2_t)vsub_f32(v59, v62);
    *a3 = v59;
    a3[1] = (float32x2_t)v54;
    v11.f32[0] = -*(float *)&v54.i32[1];
    v55 = (float32x2_t)vzip1_s32((int32x2_t)v11, v54);
    v56 = vmul_f32(v55, v55);
    v56.i32[0] = vadd_f32(v56, (float32x2_t)vdup_lane_s32((int32x2_t)v56, 1)).u32[0];
    v57 = vrsqrte_f32((float32x2_t)v56.u32[0]);
    v58 = vmul_f32(v57, vrsqrts_f32((float32x2_t)v56.u32[0], vmul_f32(v57, v57)));
    a3[2] = vmul_f32(vmul_n_f32(vmul_n_f32(v55, vmul_f32(v58, vrsqrts_f32((float32x2_t)v56.u32[0], vmul_f32(v58, v58))).f32[0]), *((float *)v6 + 36)), (float32x2_t)0x3F0000003F000000);
    *a4 = v10;
    goto LABEL_12;
  }
  v12 = 0;
  v15.i64[1] = 0x3F80000000000000;
  v13.i64[1] = 0x3F80000000000000;
  *(float32x2_t *)v13.f32 = v62;
  v14.i64[1] = 0x3F80000000000000;
  v14.i64[0] = v61;
  v15.i64[0] = v60;
  *(float32x2_t *)v16.f32 = v59;
  v16.i64[1] = 0x3F80000000000000;
  v63 = xmmword_1DC921CF0;
  v64 = xmmword_1DC922690;
  v65 = xmmword_1DC9226A0;
  v66 = xmmword_1DC9226B0;
  do
  {
    *(float32x4_t *)((char *)&v67 + v12) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*(__int128 *)((char *)&v63 + v12))), v14, *(float32x2_t *)((char *)&v63 + v12), 1), v15, *(float32x4_t *)((char *)&v63 + v12), 2), v16, *(float32x4_t *)((char *)&v63 + v12), 3);
    v12 += 16;
  }
  while (v12 != 64);
  v17 = 0;
  v18 = v67;
  v19 = v68;
  v20 = v69;
  v21 = v70;
  v63 = xmmword_1DC922690;
  v64 = xmmword_1DC9226C0;
  v65 = xmmword_1DC9226D0;
  v66 = 0uLL;
  do
  {
    *(float32x4_t *)((char *)&v67 + v17) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*(__int128 *)((char *)&v63 + v17))), v14, *(float32x2_t *)((char *)&v63 + v17), 1), v15, *(float32x4_t *)((char *)&v63 + v17), 2), v16, *(float32x4_t *)((char *)&v63 + v17), 3);
    v17 += 16;
  }
  while (v17 != 64);
  v22 = *(float32x2_t *)v69.f32;
  v23 = *(float32x2_t *)v70.f32;
  v24 = (float32x2_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v67, (float32x4_t)0, v68), (float32x4_t)0, v69), (float32x4_t)0, v70).u64[0];
  v25 = vmul_f32(v24, v24);
  v25.i32[0] = vadd_f32(v25, (float32x2_t)vdup_lane_s32((int32x2_t)v25, 1)).u32[0];
  v26 = vrsqrte_f32((float32x2_t)v25.u32[0]);
  v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v26, v26)));
  v28 = (int32x2_t)vmul_n_f32(v24, vmul_f32(v27, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v27, v27))).f32[0]);
  v24.f32[0] = -*(float *)&v28.i32[1];
  v29 = (float32x2_t)vzip1_s32((int32x2_t)v24, v28);
  v30 = vmul_f32(v29, v29);
  v31 = vadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v68.f32);
  v32 = vadd_f32(v30, (float32x2_t)vdup_lane_s32((int32x2_t)v30, 1)).u32[0];
  v33 = vrsqrte_f32((float32x2_t)v32);
  v34 = vmul_f32(v33, vrsqrts_f32((float32x2_t)v32, vmul_f32(v33, v33)));
  a3[2] = vmul_f32(vmul_n_f32(vmul_n_f32(v29, vmul_f32(v34, vrsqrts_f32((float32x2_t)v32, vmul_f32(v34, v34))).f32[0]), *((float *)v6 + 36)), (float32x2_t)0x3F0000003F000000);
  v35 = (float32x2_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v18, v19, *((float *)v6 + 35)), v20, *((float *)v6 + 35) * *((float *)v6 + 35)), v21, *((float *)v6 + 35) * (float)(*((float *)v6 + 35) * *((float *)v6 + 35))).u64[0];
  *a3 = v35;
  a3[1] = vsub_f32(v35, v10);
  v36 = 1.0 - *((float *)v6 + 35);
  v37 = (float32x2_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v18, v19, v36), v20, v36 * v36), v21, v36 * (float)(v36 * v36)).u64[0];
  v38 = (int32x2_t)vsub_f32(v11, v37);
  *a4 = v37;
  a4[1] = (float32x2_t)v38;
  v11.f32[0] = -*(float *)&v38.i32[1];
  v39 = (float32x2_t)vzip1_s32((int32x2_t)v11, v38);
  v40 = vmul_f32(v39, v39);
  v40.i32[0] = vadd_f32(v40, (float32x2_t)vdup_lane_s32((int32x2_t)v40, 1)).u32[0];
  v41 = vrsqrte_f32((float32x2_t)v40.u32[0]);
  v42 = vmul_f32(v41, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v41, v41)));
  v43 = vmul_f32(vmul_n_f32(vmul_n_f32(v39, vmul_f32(v42, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v42, v42))).f32[0]), *((float *)v6 + 36)), (float32x2_t)0x3F0000003F000000);
  v44 = vadd_f32(v23, vadd_f32(v22, v31));
  v45 = vmul_f32(v44, v44);
  v45.i32[0] = vadd_f32(v45, (float32x2_t)vdup_lane_s32((int32x2_t)v45, 1)).u32[0];
  a4[2] = v43;
  v46 = vrsqrte_f32((float32x2_t)v45.u32[0]);
  v47 = vmul_f32(v46, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(v46, v46)));
  v48 = (int32x2_t)vmul_n_f32(v44, vmul_f32(v47, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(v47, v47))).f32[0]);
  v44.f32[0] = -*(float *)&v48.i32[1];
  v49 = (float32x2_t)vzip1_s32((int32x2_t)v44, v48);
  v50 = vmul_f32(v49, v49);
  v50.i32[0] = vadd_f32(v50, (float32x2_t)vdup_lane_s32((int32x2_t)v50, 1)).u32[0];
  v51 = vrsqrte_f32((float32x2_t)v50.u32[0]);
  v52 = vmul_f32(v51, vrsqrts_f32((float32x2_t)v50.u32[0], vmul_f32(v51, v51)));
  v53 = vmul_f32(vmul_n_f32(vmul_n_f32(v49, vmul_f32(v52, vrsqrts_f32((float32x2_t)v50.u32[0], vmul_f32(v52, v52))).f32[0]), *((float *)v6 + 36)), (float32x2_t)0x3F0000003F000000);
LABEL_13:
  a4[2] = v53;
  return result;
}

uint64_t *addCurve(float32x4_t *a1, unsigned int a2)
{
  uint64_t *result;
  int16x8_t v4;
  uint64_t v5;
  float32x2_t v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x2_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int16x8_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  int32x2_t v29;
  int32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float v35;
  float32x2_t v36;
  float v37;
  float32x4_t v38;
  unsigned __int32 v39;
  float32x2_t v40;
  float v41;
  int v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  __int128 v46;
  float v47;
  unint64_t v48;
  float32x4_t v49;
  int16x8_t v50;
  unsigned __int32 v51;
  unint64_t v52;
  __int128 v53;
  unint64_t v54;
  unsigned __int32 v55;
  unint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  unint64_t v60;
  float v61;
  int32x4_t v62;
  unint64_t v63;
  unsigned __int32 v64;
  unint64_t v65;
  unsigned int v66;
  int v67;
  unsigned __int32 v68;
  float v69;
  float v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x2_t v74;
  int32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float v81;
  float v82;
  __int128 v83;
  float32x2_t v84;
  float32x2_t v85;
  float32x2_t v86;
  float v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x2_t v91;
  __int128 v92;
  float v93;
  unint64_t v94;
  unint64_t v95;
  float32x2_t v96;
  float32x2_t v97;
  unint64_t v98;
  __int128 v99;
  float v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  unint64_t v113;
  float v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  float32x2_t v119;
  float32x2_t v120;
  uint64_t v121;
  uint64_t v122;
  float32x2_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;

  v122 = 0;
  v123 = 0;
  v120 = 0;
  v121 = 0;
  result = getElementsForCurve((uint64_t *)a1, a2, &v123, &v122, &v121, &v120);
  v5 = 0;
  v7 = v122;
  v6 = v123;
  *(float32x2_t *)v8.f32 = v123;
  v8.i64[1] = 0x3F80000000000000;
  v9.i64[0] = v122;
  v9.i64[1] = 0x3F80000000000000;
  v10 = v120;
  v11 = v121;
  v12.i64[0] = v121;
  v12.i64[1] = 0x3F80000000000000;
  *(float32x2_t *)v13.f32 = v120;
  v13.i64[1] = 0x3F80000000000000;
  v14 = a1[9].u8[5];
  v124 = xmmword_1DC921CF0;
  v125 = xmmword_1DC922690;
  v126 = xmmword_1DC9226A0;
  v127 = xmmword_1DC9226B0;
  do
  {
    *(float32x4_t *)((char *)&v128 + v5) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(*(__int128 *)((char *)&v124 + v5))), v9, *(float32x2_t *)((char *)&v124 + v5), 1), v12, *(float32x4_t *)((char *)&v124 + v5), 2), v13, *(float32x4_t *)((char *)&v124 + v5), 3);
    v5 += 16;
  }
  while (v5 != 64);
  v15 = 0;
  v16 = v128;
  v17 = v129;
  v18 = v130;
  v19 = v131;
  v124 = xmmword_1DC922690;
  v125 = xmmword_1DC9226C0;
  v126 = xmmword_1DC9226D0;
  v127 = 0uLL;
  do
  {
    *(float32x4_t *)((char *)&v128 + v15) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(*(__int128 *)((char *)&v124 + v15))), v9, *(float32x2_t *)((char *)&v124 + v15), 1), v12, *(float32x4_t *)((char *)&v124 + v15), 2), v13, *(float32x4_t *)((char *)&v124 + v15), 3);
    v15 += 16;
  }
  while (v15 != 64);
  v20 = v128;
  v21 = v129;
  v22 = v130;
  v23 = v131;
  v24 = 0uLL;
  v25 = (float32x2_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v128, (float32x4_t)0, v129), (float32x4_t)0, v130), (float32x4_t)0, v131).u64[0];
  v26 = vmul_f32(v25, v25);
  v26.i32[0] = vadd_f32(v26, (float32x2_t)vdup_lane_s32((int32x2_t)v26, 1)).u32[0];
  v27 = vrsqrte_f32((float32x2_t)v26.u32[0]);
  v28 = vmul_f32(v27, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v27, v27)));
  v29 = (int32x2_t)vmul_f32(v28, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v28, v28)));
  v30 = (int32x2_t)vmul_n_f32(v25, *(float *)v29.i32);
  *(float *)v29.i32 = -*(float *)&v30.i32[1];
  v31 = (float32x2_t)vzip1_s32(v29, v30);
  v32 = vmul_f32(v31, v31);
  v32.i32[0] = vadd_f32(v32, (float32x2_t)vdup_lane_s32((int32x2_t)v32, 1)).u32[0];
  v33 = vrsqrte_f32((float32x2_t)v32.u32[0]);
  v34 = vmul_f32(v33, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v33, v33)));
  v40 = vmul_n_f32(v31, vmul_f32(v34, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v34, v34))).f32[0]);
  v35 = a1[9].f32[0];
  v36 = vmul_f32(vmul_n_f32(v40, v35), (float32x2_t)0x3F0000003F000000);
  v37 = a1[12].f32[0];
  v38 = a1[11];
  v39 = a1[12].u32[1];
  v41 = a1[12].f32[2];
  v40.i32[0] = a1[12].i32[3];
  v42 = a1[9].u8[4];
  if (a1[9].i8[4])
  {
    v43 = vmul_f32(v36, v36);
    v43.i32[0] = vadd_f32(v43, (float32x2_t)vdup_lane_s32((int32x2_t)v43, 1)).u32[0];
    v44 = vrsqrte_f32((float32x2_t)v43.u32[0]);
    v45 = vmul_n_f32(vmul_n_f32(v36, vmul_f32(v44, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v44, v44))).f32[0]), a1[9].f32[2] + (float)(v35 * 0.5));
    *(float32x2_t *)&v46 = vadd_f32(v6, v45);
    if (v14)
      v47 = a1[12].f32[2];
    else
      v47 = 1.0;
    DWORD2(v46) = 0;
    *((float *)&v46 + 3) = v47;
    v48 = a1[1].u32[0] + (unint64_t)(v39 - 10);
    v38.i32[3] = 1.0;
    v49 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    v50 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v38, (float32x4_t)0), v49));
    *(_OWORD *)(a1[2].i64[1] + 16 * v48) = v46;
    *(int16x4_t *)v50.i8 = vmovn_s32((int32x4_t)v50);
    v51 = vmovn_s16(v50).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v48) = v51;
    v52 = __PAIR64__(1.0, v40.u32[0]);
    *(_QWORD *)(a1[2].i64[0] + 8 * v48) = __PAIR64__(1.0, v40.u32[0]);
    *(float32x2_t *)&v53 = vadd_f32(v6, v36);
    DWORD2(v53) = 0;
    *((float *)&v53 + 3) = v47;
    v54 = a1[1].u32[0] + (unint64_t)(v39 - 9);
    v24 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v38, v37), v49));
    *(int16x4_t *)v24.i8 = vmovn_s32((int32x4_t)v24);
    *(_OWORD *)(a1[2].i64[1] + 16 * v54) = v53;
    v55 = vmovn_s16(v24).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v54) = v55;
    *(_QWORD *)(a1[2].i64[0] + 8 * v54) = __PAIR64__(1.0, v40.u32[0]);
    *(float32x2_t *)&v57 = vsub_f32(v6, v36);
    v56 = a1[1].u32[0] + (unint64_t)(v39 - 6);
    DWORD2(v57) = 0;
    *((float *)&v57 + 3) = v47;
    *(_OWORD *)(a1[2].i64[1] + 16 * v56) = v57;
    *(_DWORD *)(a1[1].i64[1] + 4 * v56) = v55;
    v58 = v40.u32[0];
    *(_QWORD *)(a1[2].i64[0] + 8 * v56) = v40.u32[0];
    *(float32x2_t *)&v59 = vsub_f32(v6, v45);
    DWORD2(v59) = 0;
    v60 = a1[1].u32[0] + (unint64_t)(v39 - 5);
    *((float *)&v59 + 3) = v47;
    *(_OWORD *)(a1[2].i64[1] + 16 * v60) = v59;
    *(_DWORD *)(a1[1].i64[1] + 4 * v60) = v51;
    *(_QWORD *)(a1[2].i64[0] + 8 * v60) = v40.u32[0];
  }
  else
  {
    *(float32x2_t *)&v53 = vadd_f32(v6, v36);
    if (v14)
      v61 = a1[12].f32[2];
    else
      v61 = 1.0;
    DWORD2(v53) = 0;
    *((float *)&v53 + 3) = v61;
    v38.i32[3] = 1.0;
    v62 = vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v38, v37), (float32x4_t)vdupq_n_s32(0x437F0000u)));
    LODWORD(v52) = a1[12].i32[3];
    HIDWORD(v52) = 1.0;
    *(float32x2_t *)&v57 = vsub_f32(v6, v36);
    DWORD2(v57) = 0;
    *(int16x4_t *)v24.i8 = vmovn_s32(v62);
    *((float *)&v57 + 3) = v61;
    v58 = v52;
  }
  v63 = a1[1].u32[0] + (unint64_t)(v39 - 2);
  *(_OWORD *)(a1[2].i64[1] + 16 * v63) = v53;
  v64 = vmovn_s16(v24).u32[0];
  *(_DWORD *)(a1[1].i64[1] + 4 * v63) = v64;
  *(_QWORD *)(a1[2].i64[0] + 8 * v63) = v52;
  v65 = a1[1].u32[0] + (unint64_t)(v39 - 1);
  *(_OWORD *)(a1[2].i64[1] + 16 * v65) = v57;
  *(_DWORD *)(a1[1].i64[1] + 4 * v65) = v64;
  *(_QWORD *)(a1[2].i64[0] + 8 * v65) = v58;
  v66 = a1[8].u32[2];
  if ((COERCE_UNSIGNED_INT(fabsf((float)((float)(*(float *)&v7 * (float)(*((float *)&v11 + 1) - v6.f32[1]))+ (float)(v6.f32[0] * (float)(*((float *)&v7 + 1) - *((float *)&v11 + 1))))+ (float)(*(float *)&v11 * (float)(v6.f32[1] - *((float *)&v7 + 1))))+ -0.002) & 0x80000000) != 0&& (COERCE_UNSIGNED_INT(fabsf((float)((float)(*(float *)&v11 * (float)(v10.f32[1] - *((float *)&v7 + 1)))+ (float)(*(float *)&v7 * (float)(*((float *)&v11 + 1) - v10.f32[1])))+ (float)(v10.f32[0] * (float)(*((float *)&v7 + 1) - *((float *)&v11 + 1))))+ -0.002) & 0x80000000) != 0)
  {
    v119 = vsub_f32(v10, v6);
    v119.f32[0] = sqrtf(vaddv_f32(vmul_f32(v119, v119)));
    v81 = v119.f32[0] + v41;
    v82 = v40.f32[0] + (float)(v119.f32[0] / a1[10].f32[0]);
  }
  else if (v66)
  {
    v67 = 0;
    *(int16x4_t *)v4.i8 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_f32(v38, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u))));
    v68 = vmovn_s16(v24).u32[0];
    v4.i32[0] = vmovn_s16(v4).u32[0];
    do
    {
      v69 = (float)(v67 + 1) / (float)v66;
      v70 = v69 * (float)(v69 * v69);
      v71 = (float32x2_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v16, v17, v69), v18, v69 * v69), v19, v70).u64[0];
      v72 = (float32x2_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v20, v21, v69), v22, v69 * v69), v23, v70).u64[0];
      v73 = vmul_f32(v72, v72);
      v73.i32[0] = vadd_f32(v73, (float32x2_t)vdup_lane_s32((int32x2_t)v73, 1)).u32[0];
      v74 = vrsqrte_f32((float32x2_t)v73.u32[0]);
      v75 = (int32x2_t)vmul_n_f32(v72, vmul_f32(v74, vrsqrts_f32((float32x2_t)v73.u32[0], vmul_f32(v74, v74))).f32[0]);
      v74.f32[0] = -*(float *)&v75.i32[1];
      v76 = (float32x2_t)vzip1_s32((int32x2_t)v74, v75);
      v77 = vmul_f32(v76, v76);
      v77.i32[0] = vadd_f32(v77, (float32x2_t)vdup_lane_s32((int32x2_t)v77, 1)).u32[0];
      v78 = vrsqrte_f32((float32x2_t)v77.u32[0]);
      v79 = vmul_f32(vmul_n_f32(vmul_n_f32(v76, vmul_f32(v78, vrsqrts_f32((float32x2_t)v77.u32[0], vmul_f32(v78, v78))).f32[0]), v35), (float32x2_t)0x3F0000003F000000);
      v80 = vsub_f32(v71, v6);
      v77.f32[0] = sqrtf(vaddv_f32(vmul_f32(v80, v80)));
      v81 = v41 + v77.f32[0];
      v82 = v40.f32[0] + (float)(v77.f32[0] / a1[10].f32[0]);
      *(float32x2_t *)&v83 = vsub_f32(v6, v36);
      if (v42)
      {
        v84 = vmul_f32(v36, v36);
        v84.i32[0] = vadd_f32(v84, (float32x2_t)vdup_lane_s32((int32x2_t)v84, 1)).u32[0];
        v85 = vrsqrte_f32((float32x2_t)v84.u32[0]);
        v86 = vmul_n_f32(v36, vmul_f32(v85, vrsqrts_f32((float32x2_t)v84.u32[0], vmul_f32(v85, v85))).f32[0]);
        v87 = a1[9].f32[2] + (float)(v35 * 0.5);
        v88 = vmul_f32(v79, v79);
        v88.i32[0] = vadd_f32(v88, (float32x2_t)vdup_lane_s32((int32x2_t)v88, 1)).u32[0];
        v89 = vmul_n_f32(v86, v87);
        v90 = vrsqrte_f32((float32x2_t)v88.u32[0]);
        v91 = vmul_n_f32(v79, vmul_f32(v90, vrsqrts_f32((float32x2_t)v88.u32[0], vmul_f32(v90, v90))).f32[0]);
        *(float32x2_t *)&v92 = vadd_f32(v36, v6);
        if (v14)
          v93 = v41;
        else
          v93 = 1.0;
        DWORD2(v92) = 0;
        v94 = a1[1].u32[0] + (unint64_t)v39;
        *((float *)&v92 + 3) = v93;
        *(_OWORD *)(a1[2].i64[1] + 16 * v94) = v92;
        *(_DWORD *)(a1[1].i64[1] + 4 * v94) = v68;
        v95 = __PAIR64__(1.0, v40.u32[0]);
        v96 = vmul_n_f32(v91, v87);
        *(_QWORD *)(a1[2].i64[0] + 8 * v94) = __PAIR64__(1.0, v40.u32[0]);
        v97 = vadd_f32(v6, v89);
        v98 = a1[1].u32[0] + (unint64_t)(v39 + 1);
        DWORD2(v99) = 0;
        *((float *)&v99 + 3) = v93;
        *(_OWORD *)(a1[2].i64[1] + 16 * v98) = v99;
        *(_DWORD *)(a1[1].i64[1] + 4 * v98) = v4.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v98) = __PAIR64__(1.0, v40.u32[0]);
        *(float32x2_t *)&v99 = vadd_f32(v71, v96);
        if (v14)
          v100 = v81;
        else
          v100 = 1.0;
        v101 = a1[1].u32[0] + (unint64_t)(v39 + 2);
        DWORD2(v99) = 0;
        *((float *)&v99 + 3) = v100;
        *(_OWORD *)(a1[2].i64[1] + 16 * v101) = v99;
        *(_DWORD *)(a1[1].i64[1] + 4 * v101) = v4.i32[0];
        v102 = __PAIR64__(1.0, LODWORD(v82));
        *(_QWORD *)(a1[2].i64[0] + 8 * v101) = __PAIR64__(1.0, LODWORD(v82));
        *(float32x2_t *)&v104 = vadd_f32(v71, v79);
        DWORD2(v104) = 0;
        v103 = a1[1].u32[0] + (unint64_t)(v39 + 3);
        *((float *)&v104 + 3) = v100;
        *(_OWORD *)(a1[2].i64[1] + 16 * v103) = v104;
        *(_DWORD *)(a1[1].i64[1] + 4 * v103) = v68;
        *(_QWORD *)(a1[2].i64[0] + 8 * v103) = __PAIR64__(1.0, LODWORD(v82));
        *(float32x2_t *)&v105 = vsub_f32(v6, v89);
        v106 = a1[1].u32[0] + (unint64_t)(v39 + 4);
        DWORD2(v105) = 0;
        *((float *)&v105 + 3) = v93;
        *(_OWORD *)(a1[2].i64[1] + 16 * v106) = v105;
        *(_DWORD *)(a1[1].i64[1] + 4 * v106) = v4.i32[0];
        v107 = v40.u32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v106) = v40.u32[0];
        DWORD2(v83) = 0;
        v108 = a1[1].u32[0] + (unint64_t)(v39 + 5);
        *((float *)&v83 + 3) = v93;
        *(_OWORD *)(a1[2].i64[1] + 16 * v108) = v83;
        *(_DWORD *)(a1[1].i64[1] + 4 * v108) = v68;
        *(_QWORD *)(a1[2].i64[0] + 8 * v108) = v40.u32[0];
        *(float32x2_t *)&v110 = vsub_f32(v71, v79);
        DWORD2(v110) = 0;
        v109 = a1[1].u32[0] + (unint64_t)(v39 + 6);
        *((float *)&v110 + 3) = v100;
        *(_OWORD *)(a1[2].i64[1] + 16 * v109) = v110;
        *(_DWORD *)(a1[1].i64[1] + 4 * v109) = v68;
        v111 = LODWORD(v82);
        *(_QWORD *)(a1[2].i64[0] + 8 * v109) = LODWORD(v82);
        *(float32x2_t *)&v112 = vsub_f32(v71, v96);
        v113 = a1[1].u32[0] + (unint64_t)(v39 + 7);
        DWORD2(v112) = 0;
        *((float *)&v112 + 3) = v100;
        *(_OWORD *)(a1[2].i64[1] + 16 * v113) = v112;
        *(_DWORD *)(a1[1].i64[1] + 4 * v113) = v4.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v113) = LODWORD(v82);
        v39 += 8;
        v40 = (float32x2_t)v95;
      }
      else
      {
        if (!v14)
          v41 = 1.0;
        DWORD2(v83) = 0;
        *((float *)&v83 + 3) = v41;
        v107 = v40.u32[0];
        *(float32x2_t *)&v92 = vadd_f32(v36, v6);
        DWORD2(v92) = 0;
        *((float *)&v92 + 3) = v41;
        v40.i32[1] = 1.0;
        *(float32x2_t *)&v104 = vadd_f32(v71, v79);
        if (v14)
          v114 = v81;
        else
          v114 = 1.0;
        DWORD2(v104) = 0;
        *((float *)&v104 + 3) = v114;
        v102 = __PAIR64__(1.0, LODWORD(v82));
        *(float32x2_t *)&v110 = vsub_f32(v71, v79);
        DWORD2(v110) = 0;
        *((float *)&v110 + 3) = v114;
        v111 = LODWORD(v82);
      }
      v115 = a1[1].u32[0] + (unint64_t)v39;
      *(_OWORD *)(a1[2].i64[1] + 16 * v115) = v83;
      *(_DWORD *)(a1[1].i64[1] + 4 * v115) = v68;
      *(_QWORD *)(a1[2].i64[0] + 8 * v115) = v107;
      v116 = a1[1].u32[0] + (unint64_t)(v39 + 1);
      *(_OWORD *)(a1[2].i64[1] + 16 * v116) = v92;
      *(_DWORD *)(a1[1].i64[1] + 4 * v116) = v68;
      *(float32x2_t *)(a1[2].i64[0] + 8 * v116) = v40;
      v117 = a1[1].u32[0] + (unint64_t)(v39 + 2);
      *(_OWORD *)(a1[2].i64[1] + 16 * v117) = v104;
      *(_DWORD *)(a1[1].i64[1] + 4 * v117) = v68;
      *(_QWORD *)(a1[2].i64[0] + 8 * v117) = v102;
      v118 = a1[1].u32[0] + (unint64_t)(v39 + 3);
      *(_OWORD *)(a1[2].i64[1] + 16 * v118) = v110;
      *(_DWORD *)(a1[1].i64[1] + 4 * v118) = v68;
      *(_QWORD *)(a1[2].i64[0] + 8 * v118) = v111;
      v39 += 4;
      ++v67;
      v6 = v71;
      v36 = v79;
      v40.f32[0] = v82;
      v41 = v81;
    }
    while (v66 != v67);
  }
  else
  {
    v81 = v41;
    v82 = v40.f32[0];
  }
  a1[12].f32[2] = v81;
  a1[12].f32[3] = v82;
  a1[12].i32[1] = v39;
  return result;
}

void addJoin(float32x4_t *a1, double a2, double a3, double a4, float32x2_t a5, double a6, double a7, double a8, __n128 a9)
{
  uint64_t v9;
  float32x2_t v10;
  uint64_t v13;
  float v14;
  float32x4_t v15;
  int v16;
  int v17;
  float v18;
  float32x2_t v19;
  unsigned __int32 v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  unsigned __int32 v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  __int32 v31;
  float v33;
  float v34;
  __int32 v35;
  float v36;
  float32x2_t v37;
  float32x2_t v38;
  __int128 v39;
  float32x2_t v40;
  float32x2_t v41;
  float v42;
  float32x2_t v43;
  float32x2_t v44;
  float v45;
  float v46;
  BOOL v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  uint64_t v51;
  float v52;
  float v53;
  float32x4_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  __int128 v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  __int128 v63;
  float v64;
  unint64_t v65;
  float32x4_t v66;
  int16x8_t v67;
  unint64_t v72;
  int16x8_t v73;
  unsigned __int32 v74;
  unint64_t v75;
  __int128 v76;
  unint64_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float v85;
  float v86;
  BOOL v87;
  float32x2_t v88;
  float v89;
  float32x2_t v90;
  unsigned __int32 v91;
  float32x2_t v92;
  float v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  __int128 v98;
  float32x4_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x2_t v104;
  float32x2_t v105;
  __int128 v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x2_t v110;
  __int128 v111;
  float v112;
  unint64_t v113;
  int16x8_t v114;
  float32x4_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unsigned __int32 v119;
  unint64_t v120;
  unint64_t v121;
  float v122;
  double v123;
  double v124;
  float32x4_t v125;
  double v126;
  float32x2_t v127;
  float32x2_t v128;
  float v129;
  float v130;
  BOOL v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  float32x2_t v135;
  float v136;
  float32x2_t v137;
  float v138;
  __int128 v139;
  float32x2_t v140;
  float32x2_t v141;
  float32x2_t v142;
  float32x2_t v143;
  __int128 v144;
  float32x2_t v145;
  float32x2_t v146;
  float32x2_t v147;
  float32x2_t v148;
  float v149;
  unint64_t v150;
  float32x4_t v151;
  float32x4_t v152;
  unsigned __int32 v154;
  unint64_t v155;
  __int128 v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  __int128 v160;
  float v161;
  unint64_t v162;
  int16x8_t v163;
  unsigned __int32 v164;
  __int128 v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  float32x2_t v170;
  float32x2_t v172;
  float32x2_t v173;
  float32x2_t v174;
  __int128 v175;
  float32x2_t v176;
  unint64_t v177;
  float32x4_t v178;
  int16x8_t v179;
  unsigned __int32 v180;
  __int128 v181;
  __int128 v182;
  unint64_t v183;
  float32x4_t v184;
  unint64_t v185;
  __int128 v186;
  unint64_t v187;
  float32x2_t v188;
  float32x2_t v189;
  float32x2_t v190;
  float32x2_t v191;
  float32x2_t v192;
  float v193;
  float v194;
  BOOL v195;
  __int128 v196;
  float32x2_t v197;
  float32x2_t v198;
  float32x2_t v199;
  uint64_t v200;
  float32x2_t v201;
  float v202;
  float32x4_t v203;
  float32x2_t v204;
  float32x2_t v205;
  float32x2_t v206;
  __int128 v207;
  float32x2_t v208;
  float32x2_t v209;
  float32x2_t v210;
  float32x2_t v211;
  float v212;
  float v213;
  unint64_t v214;
  float32x4_t v215;
  int16x8_t v216;
  float32x2_t v218;
  unint64_t v219;
  __int128 v220;
  int16x8_t v221;
  __int128 v222;
  unint64_t v223;
  unint64_t v224;
  __int128 v225;
  float32x2_t v226;
  float32x2_t v227;
  float32x2_t v228;
  float32x2_t v229;
  float v230;
  float v231;
  BOOL v232;
  float32x2_t v233;
  float v234;
  float32x2_t v235;
  unsigned __int32 v236;
  float32x2_t v237;
  float v238;
  float32x2_t v239;
  float32x2_t v240;
  float32x2_t v241;
  float32x2_t v242;
  float32x4_t v243;
  __int128 v244;
  float32x2_t v245;
  float32x2_t v246;
  float32x2_t v247;
  float32x2_t v248;
  float32x2_t v249;
  float32x2_t v250;
  __int128 v251;
  float32x2_t v252;
  float32x2_t v253;
  float32x2_t v254;
  float32x2_t v255;
  __int128 v256;
  float v257;
  unint64_t v258;
  float32x4_t v259;
  int16x8_t v260;
  unint64_t v261;
  unint64_t v262;
  unsigned __int32 v263;
  unint64_t v264;
  __int128 v265;
  unint64_t v266;
  double v267;
  double v268;
  float32x4_t v269;
  __int128 v270;
  double v271;
  __int128 v272;
  float32x2_t v273;
  __int128 v274;
  float32x2_t v275;
  float v276;
  float v277;
  BOOL v278;
  __int128 v279;
  uint64_t v280;
  __int128 v281;
  float32x2_t v282;
  float v283;
  float32x2_t v284;
  unint64_t v285;
  float32x2_t v286;
  float32x2_t v287;
  float32x2_t v288;
  __int128 v289;
  float32x2_t v290;
  float32x2_t v291;
  float32x2_t v292;
  float32x2_t v293;
  float32x2_t v294;
  float v295;
  unint64_t v296;
  float32x4_t v297;
  float32x4_t v298;
  unsigned __int32 v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  float32x4_t v304;
  __int128 v305;
  float32x2_t v306;
  float32x2_t v307;
  float32x2_t v308;
  float32x2_t v309;
  __int128 v310;
  float32x2_t v311;
  float32x2_t v312;
  __int128 v313;
  __int128 v314;
  float v315;
  unint64_t v316;
  float32x4_t v317;
  int16x8_t v318;
  unsigned __int32 v319;
  unint64_t v320;
  unint64_t v321;
  float32x4_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  BOOL v331;
  float32x2_t v332;
  __int128 v333;
  __int128 v334;
  float32x4_t v335;
  float32x2_t v336;
  float32x2_t v337;
  float32x2_t v338;
  float32x2_t v339;
  __int128 v340;
  float v341;
  unint64_t v342;
  float32x4_t v343;
  int16x8_t v344;
  unsigned __int32 v345;
  unint64_t v346;
  float32x4_t v347;
  unsigned __int32 v348;
  __int128 v349;
  unint64_t v350;
  __int128 v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t v356;
  __int128 v357;
  unint64_t v358;
  unint64_t v359;
  BOOL v360;
  float32x2_t v361;
  __int128 v362;
  float v363;
  unint64_t v364;
  int16x8_t v365;
  __int128 v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  unint64_t v370;
  unsigned __int32 v371;
  unint64_t v372;
  float32x2_t v373;
  float32x2_t v374;
  float32x2_t v375;
  float32x2_t v376;
  __int128 v377;
  uint64_t v378;
  uint64_t v380;
  unint64_t v381;
  int16x8_t v382;
  __int128 v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unsigned __int32 v387;
  unint64_t v388;
  uint64_t v390;
  float32x4_t v391;
  int32x4_t v392;
  float32x2_t v393;
  float32x2_t v394;
  float32x2_t v395;
  unint64_t v396;
  unsigned __int32 v397;
  unint64_t v398;
  unint64_t v399;
  __int128 v400;
  uint64_t v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  __int128 v407;
  unint64_t v408;
  unint64_t v409;
  float32x2_t v410;
  float32x2_t v411;
  float32x2_t v412;
  float v413;
  float v414;
  int v415;
  int v416;
  float v417;
  float v418;
  int16x8_t v419;
  __float2 v420;
  float32x2_t v421;
  __float2 v422;
  float32x2_t v423;
  unint64_t v424;
  __int128 v425;
  float32x2_t v426;
  unint64_t v427;
  __int128 v428;
  unint64_t v429;
  unint64_t v430;
  float32x2_t v431;
  float32x2_t v432;
  float32x2_t v433;
  float32x2_t v434;
  float32x2_t v435;
  float32x2_t v436;
  float32x2_t v437;
  float32x2_t v438;
  float32x2_t v439;
  float v440;
  __int128 v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  __int128 v445;
  unint64_t v446;
  __int128 v447;
  float32x2_t v448;
  float32x2_t v449;
  float32x2_t v450;
  float32x2_t v451;
  unint64_t v452;
  __int128 v453;
  int16x8_t v454;
  unint64_t v455;
  unint64_t v456;
  int16x8_t v457;
  __int128 v458;
  unint64_t v459;
  __int128 v460;
  uint64_t v461;
  unint64_t v462;
  unint64_t v463;
  unsigned __int32 v464;
  unint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  __int128 v469;
  unint64_t v470;
  unint64_t v471;
  unint64_t v472;
  unint64_t v473;
  unint64_t v474;
  __int128 v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t v479;
  __int128 v480;
  uint64_t v481;
  unint64_t v482;
  unsigned int v483;
  float32x2_t v484;
  float32x2_t v485;
  float32x2_t v486;
  float32x2_t v487;
  float32x2_t v488;
  int16x8_t v489;
  float32x2_t v490;
  float32x2_t v491;
  float32x2_t v492;
  unint64_t v493;
  __int128 v494;
  unint64_t v495;
  unint64_t v496;
  unint64_t v497;
  float32x2_t v498;
  float32x2_t v499;
  float32x2_t v500;
  float32x2_t v501;
  unint64_t v502;
  unint64_t v503;
  __int128 v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t v507;
  unsigned __int32 v508;
  unint64_t v509;
  unint64_t v510;
  unsigned __int32 v511;
  unint64_t v512;
  float32x4_t v513;
  float32x2_t v514;
  float32x2_t v515;
  float v516;
  __int128 v517;
  __int128 v518;
  float32x2_t v519;
  float32x2_t v520;
  float32x2_t v521;
  float32x2_t v522;
  __int128 v523;
  float v524;
  unint64_t v525;
  float32x4_t v526;
  float32x4_t v527;
  int16x8_t v528;
  unsigned __int32 v529;
  unint64_t v530;
  float32x4_t v531;
  unint64_t v532;
  __int128 v533;
  unint64_t v534;
  unint64_t v535;
  unint64_t v536;
  float32x2_t v537;
  float32x2_t v538;
  float32x2_t v539;
  uint64_t v540;
  __int128 v541;
  unint64_t v542;
  unint64_t v543;
  unint64_t v544;
  unint64_t v545;
  unsigned __int32 v546;
  unint64_t v547;
  unint64_t v548;
  uint64_t v549;
  unint64_t v550;
  __int128 v551;
  unint64_t v552;
  unint64_t v553;
  unint64_t v554;
  unint64_t v555;
  unint64_t v556;
  __int128 v557;
  unint64_t v558;
  unint64_t v559;
  unint64_t v560;
  unint64_t v561;
  __int128 v562;
  unint64_t v564;
  float32x2_t v565;
  float32x2_t v566;
  float32x2_t v567;
  int16x8_t v568;
  float32x2_t v569;
  float32x2_t v570;
  float32x2_t v571;
  __int128 v572;
  unint64_t v573;
  unint64_t v574;
  unint64_t v575;
  unint64_t v576;
  float32x2_t v577;
  float32x2_t v578;
  float32x2_t v579;
  float32x2_t v580;
  unint64_t v581;
  __int128 v582;
  unint64_t v583;
  unint64_t v584;
  unint64_t v585;
  unint64_t v586;
  unsigned __int32 v587;
  unint64_t v588;
  __int32 v589;
  float v590;
  float32x4_t v591;
  unint64_t v592;
  unsigned __int32 v593;
  unint64_t v594;
  unsigned __int32 v595;
  uint64_t v596;
  __int128 v597;
  __int128 v598;
  unint64_t v599;
  __int128 v600;
  unint64_t v601;
  __int128 v602;
  unint64_t v603;
  __int128 v604;
  float32x2_t v605;
  float32x2_t v606;
  float32x2_t v607;
  float32x2_t v608;
  float32x2_t v609;
  float32x2_t v610;
  float32x2_t v611;
  __int128 v612;
  float32x2_t v613;
  float32x2_t v614;
  unint64_t v615;
  __int128 v616;
  float v617;
  unint64_t v618;
  int16x8_t v619;
  unint64_t v620;
  unint64_t v621;
  unint64_t v622;
  unint64_t v623;
  __int128 v624;
  unint64_t v625;
  uint64_t v626;
  unint64_t v627;
  __int128 v628;
  unint64_t v629;
  int16x8_t v630;
  float32x4_t v631;
  float32x2_t v632;
  unint64_t v633;
  unsigned __int32 v634;
  unint64_t v636;
  uint64_t v637;
  unint64_t v638;
  unint64_t v639;
  unint64_t v640;
  unint64_t v641;
  unint64_t v642;
  unint64_t v643;
  unint64_t v644;
  float32x2_t v645;
  float32x2_t v646;
  float32x2_t v647;
  float32x2_t v648;
  float v649;
  float v650;
  int v651;
  int v652;
  float v653;
  float v654;
  float v655;
  int16x8_t v656;
  __float2 v657;
  float32x2_t v658;
  __float2 v659;
  float32x2_t v660;
  unint64_t v661;
  __int128 v662;
  float32x2_t v663;
  unint64_t v664;
  __int128 v665;
  unint64_t v666;
  unint64_t v667;
  float32x2_t v668;
  float32x2_t v669;
  float32x2_t v670;
  float32x2_t v671;
  float32x2_t v672;
  float32x2_t v673;
  float32x2_t v674;
  float32x2_t v675;
  float32x2_t v676;
  float v677;
  __int128 v678;
  unint64_t v679;
  unint64_t v680;
  unint64_t v681;
  __int128 v682;
  unint64_t v683;
  float32x2_t v684;
  float32x2_t v685;
  float32x2_t v686;
  __int128 v687;
  unint64_t v688;
  int16x8_t v689;
  __int128 v690;
  __int128 v691;
  unint64_t v692;
  int16x8_t v693;
  unint64_t v694;
  unint64_t v695;
  __int128 v696;
  uint64_t v697;
  unint64_t v698;
  unsigned __int32 v699;
  unint64_t v700;
  __int128 v701;
  __int128 v702;
  unint64_t v703;
  unsigned __int32 v704;
  unint64_t v705;
  unint64_t v706;
  unsigned __int32 v707;
  unint64_t v708;
  unint64_t v709;
  unsigned __int32 v710;
  float v711;
  unint64_t v712;
  unsigned __int32 v713;
  unint64_t v714;
  unint64_t v715;
  float v716;
  float32x4_t v717;
  unint64_t v718;
  __int128 v719;
  unint64_t v720;
  uint64_t v721;
  __int128 v722;
  unint64_t v723;
  __int128 v724;
  unint64_t v725;
  __int128 v726;
  unint64_t v727;
  __int128 v728;
  float32x2_t v729;
  float32x2_t v730;
  float32x2_t v731;
  float32x2_t v732;
  float32x2_t v733;
  float32x2_t v734;
  unsigned __int32 v735;
  float32x2_t v736;
  float32x2_t v737;
  float32x2_t v738;
  float32x2_t v739;
  __int128 v740;
  __int128 v741;
  unint64_t v742;
  unint64_t v743;
  int16x8_t v744;
  __int128 v745;
  unint64_t v746;
  unint64_t v747;
  unint64_t v748;
  __int128 v749;
  unint64_t v750;
  unint64_t v751;
  unint64_t v752;
  float v753;
  unint64_t v754;
  __int128 v755;
  unint64_t v756;
  unint64_t v757;
  unsigned __int32 v758;
  __int128 v759;
  unint64_t v760;
  float32x4_t v761;
  float32x2_t v762;
  float32x2_t v763;
  float32x2_t v764;
  float32x2_t v765;
  __int128 v766;
  __int128 v767;
  __int128 v768;
  float v769;
  unint64_t v770;
  float32x4_t v771;
  int16x8_t v772;
  unsigned __int32 v773;
  unint64_t v774;
  float32x4_t v775;
  unint64_t v776;
  unint64_t v777;
  unint64_t v778;
  unint64_t v779;
  uint64_t v780;
  unint64_t v781;
  unint64_t v782;
  unint64_t v783;
  __int128 v784;
  float v785;
  unint64_t v786;
  int16x8_t v787;
  __int128 v788;
  unint64_t v789;
  uint64_t v790;
  unint64_t v791;
  float v792;
  unint64_t v793;
  unsigned __int32 v794;
  unint64_t v795;
  unint64_t v796;
  float32x2_t v797;
  unsigned int v798;
  float32x2_t v799;
  float32x2_t v800;
  float32x2_t v801;
  __int128 v802;
  __int128 v803;
  unint64_t v804;
  uint64_t v805;
  __int128 v806;
  __int128 v807;
  int16x8_t v808;
  int16x8_t v809;
  unsigned __int32 v810;
  float v811;
  float32x2_t v812;
  float v813;
  float v814;
  float32x2_t v815;
  uint64_t v816;
  unsigned __int32 v817;
  __int128 v818;
  __int32 v819;
  float32x2_t v820;
  float32x2_t v821;
  float32x2_t v822;
  unsigned __int32 v823;
  float32x4_t v824;
  float32x4_t v825;
  float32x4_t v826;
  float32x4_t v827;
  float32x4_t v828;
  float32x4_t v829;
  float32x4_t v830;
  float32x4_t v831;
  float32x4_t v832;
  double v833;
  unsigned __int32 v834;
  int16x8_t v835;
  uint64_t v836;
  __int128 v837;
  float32x2_t v839;
  float32x2_t v840;
  __int128 v841;
  __int128 v842;
  __int128 v843;
  int16x8_t v844;
  float32x2_t v845;
  float32x2_t v846;
  float32x2_t v847;
  float v848;
  unsigned __int32 v849;
  float v850;
  unint64_t v851;
  float32x2_t v852;
  float v853;
  float32x2_t v854;
  float v855;
  unint64_t v856;
  unint64_t v857;
  float v858;
  uint64_t v859;
  float v860;
  float v861;
  float v862;
  uint64_t v863;
  uint64_t v864;
  float v865;
  float v866;
  float v867;
  float v868;
  float v869;
  float v870;
  float32x2_t v871;
  float32x2_t v872;
  unsigned __int32 v873;
  float32x2_t v875;
  float32x2_t v876;
  float v877;
  __n128 v878;
  float32x2_t v879;
  float32x2_t v880;
  float32x2_t v881;
  int32x2_t v882;
  float32x2_t v883;
  float32x2_t v884;
  float32x2_t v885[2];
  float32x2_t v886;
  float32x2_t v887;
  uint64_t v888;
  uint64_t v889;
  double v890;
  double v891;
  double v892;
  float32x2_t v893;
  uint64_t v894;

  a9.n128_f64[0] = a2;
  v13 = a1[12].u32[1];
  v14 = a1[12].f32[0];
  v15 = a1[11];
  v16 = a1[9].u8[5];
  v17 = a1[9].u8[4];
  v10.i32[0] = a1[9].i32[2];
  v18 = a1[12].f32[2];
  LODWORD(v9) = a1[12].i32[3];
  v19 = vmul_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a4);
  v20 = vadd_f32(v19, (float32x2_t)vdup_lane_s32((int32x2_t)v19, 1)).u32[0];
  v21 = vrsqrte_f32((float32x2_t)v20);
  v22 = vmul_f32(v21, vrsqrts_f32((float32x2_t)v20, vmul_f32(v21, v21)));
  v23 = vmul_n_f32(*(float32x2_t *)&a4, vmul_f32(v22, vrsqrts_f32((float32x2_t)v20, vmul_f32(v22, v22))).f32[0]);
  v24 = vmul_f32(*(float32x2_t *)&a7, *(float32x2_t *)&a7);
  v25 = vadd_f32(v24, (float32x2_t)vdup_lane_s32((int32x2_t)v24, 1)).u32[0];
  v26 = vrsqrte_f32((float32x2_t)v25);
  v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25, vmul_f32(v26, v26)));
  v28 = vrsqrts_f32((float32x2_t)v25, vmul_f32(v27, v27));
  v29 = vmul_n_f32(*(float32x2_t *)&a7, vmul_f32(v27, v28).f32[0]);
  v30 = vsub_f32(v23, v29);
  v31 = v30.i32[0] & 0x60000000;
  if ((v30.i32[0] & 0x60000000) == 0 && (v30.i32[1] & 0x60000000) == 0)
  {
    v170 = vadd_f32(a5, (float32x2_t)a9.n128_u64[0]);
    __asm { FMOV            V6.2S, #1.0 }
    if (a1[9].i8[4])
    {
      v172 = vmul_f32(a5, a5);
      v172.i32[0] = vadd_f32(v172, (float32x2_t)vdup_lane_s32((int32x2_t)v172, 1)).u32[0];
      v173 = vrsqrte_f32((float32x2_t)v172.u32[0]);
      a4 = COERCE_DOUBLE(vmul_f32(v173, vrsqrts_f32((float32x2_t)v172.u32[0], vmul_f32(v173, v173))));
      v174 = vmul_n_f32(a5, vmul_f32(*(float32x2_t *)&a4, vrsqrts_f32((float32x2_t)v172.u32[0], vmul_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a4))).f32[0]);
      *(float32x2_t *)&v175 = vmla_n_f32(v170, v174, v10.f32[0]);
      v176 = vsub_f32((float32x2_t)a9.n128_u64[0], a5);
      if (a1[9].i8[5])
        LODWORD(a4) = a1[12].i32[2];
      else
        *(float *)&a4 = 1.0;
      v177 = a1[1].u32[0] + (unint64_t)(v13 - 10);
      DWORD2(v175) = 0;
      HIDWORD(v175) = LODWORD(a4);
      v15.i32[3] = 1.0;
      v178 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v179 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v15, (float32x4_t)0), v178));
      *(int16x4_t *)v179.i8 = vmovn_s32((int32x4_t)v179);
      *(_OWORD *)(a1[2].i64[1] + 16 * v177) = v175;
      v180 = vmovn_s16(v179).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v177) = v180;
      *(float32x2_t *)&v181 = vmls_lane_f32(v176, v174, v10, 0);
      *(_QWORD *)(a1[2].i64[0] + 8 * v177) = __PAIR64__(HIDWORD(_D6), v9);
      *(float32x2_t *)&v182 = v170;
      DWORD2(v182) = 0;
      HIDWORD(v182) = LODWORD(a4);
      v183 = a1[1].u32[0] + (unint64_t)(v13 - 9);
      v184 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v15, v14), v178));
      *(int16x4_t *)v184.f32 = vmovn_s32((int32x4_t)v184);
      v179.i32[1] = HIDWORD(_D6);
      v179.i32[0] = a1[12].i32[3];
      *(_OWORD *)(a1[2].i64[1] + 16 * v183) = v182;
      *(int8x8_t *)v178.f32 = vmovn_s16((int16x8_t)v184);
      *(_DWORD *)(a1[1].i64[1] + 4 * v183) = v178.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v183) = v179.i64[0];
      v185 = a1[1].u32[0] + (unint64_t)(v13 - 6);
      *(float32x2_t *)&v186 = v176;
      DWORD2(v186) = 0;
      HIDWORD(v186) = LODWORD(a4);
      LODWORD(v9) = a1[12].i32[3];
      *(_OWORD *)(a1[2].i64[1] + 16 * v185) = v186;
      *(_DWORD *)(a1[1].i64[1] + 4 * v185) = v178.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v185) = v9;
      DWORD2(v181) = 0;
      HIDWORD(v181) = LODWORD(a4);
      v187 = a1[1].u32[0] + (unint64_t)(v13 - 5);
      v178.i32[0] = a1[12].i32[3];
      *(_OWORD *)(a1[2].i64[1] + 16 * v187) = v181;
      *(_DWORD *)(a1[1].i64[1] + 4 * v187) = v180;
      *(_QWORD *)(a1[2].i64[0] + 8 * v187) = v178.i64[0];
      LODWORD(v9) = a1[12].i32[3];
    }
    else
    {
      *(float32x2_t *)&v182 = v170;
      DWORD2(v182) = 0;
      if (a1[9].i8[5])
        LODWORD(a4) = a1[12].i32[2];
      else
        *(float *)&a4 = 1.0;
      HIDWORD(v182) = LODWORD(a4);
      v15.i32[3] = 1.0;
      v184 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      *(int16x4_t *)v184.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v15, v14), v184)));
      v176 = vsub_f32((float32x2_t)a9.n128_u64[0], a5);
      *(float32x2_t *)&v186 = v176;
      DWORD2(v186) = 0;
      HIDWORD(v186) = LODWORD(a4);
    }
    v370 = a1[1].u32[0] + (unint64_t)(v13 - 2);
    *(_OWORD *)(a1[2].i64[1] + 16 * v370) = v182;
    v371 = vmovn_s16((int16x8_t)v184).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v370) = v371;
    LODWORD(_D6) = v9;
    *(_QWORD *)(a1[2].i64[0] + 8 * v370) = _D6;
    v372 = a1[1].u32[0] + (unint64_t)(v13 - 1);
    LODWORD(_D6) = a1[12].i32[3];
    *(_OWORD *)(a1[2].i64[1] + 16 * v372) = v186;
    *(_DWORD *)(a1[1].i64[1] + 4 * v372) = v371;
    *(_QWORD *)(a1[2].i64[0] + 8 * v372) = _D6;
    if (v17)
    {
      v373 = vmul_f32(a5, a5);
      v373.i32[0] = vadd_f32(v373, (float32x2_t)vdup_lane_s32((int32x2_t)v373, 1)).u32[0];
      v374 = vrsqrte_f32((float32x2_t)v373.u32[0]);
      v375 = vmul_f32(v374, vrsqrts_f32((float32x2_t)v373.u32[0], vmul_f32(v374, v374)));
      v376 = vmul_n_f32(a5, vmul_f32(v375, vrsqrts_f32((float32x2_t)v373.u32[0], vmul_f32(v375, v375))).f32[0]);
      *(float32x2_t *)&v377 = vmla_n_f32(v170, v376, v10.f32[0]);
      v378 = a1[1].u32[0] + v13;
      __asm { FMOV            V16.2S, #1.0 }
      HIDWORD(v380) = HIDWORD(_D16);
      LODWORD(v380) = a1[12].i32[3];
      *(_OWORD *)(a1[2].i64[1] + 16 * v378) = v182;
      v373.i32[0] = vmovn_s16((int16x8_t)v184).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v378) = v373.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v378) = v380;
      DWORD2(v377) = 0;
      HIDWORD(v377) = LODWORD(a4);
      v381 = a1[1].u32[0] + (unint64_t)(v13 + 1);
      v382 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v15, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u)));
      *(int16x4_t *)v382.i8 = vmovn_s32((int32x4_t)v382);
      LODWORD(_D16) = a1[12].i32[3];
      *(_OWORD *)(a1[2].i64[1] + 16 * v381) = v377;
      v170 = (float32x2_t)vmovn_s16(v382);
      *(_DWORD *)(a1[1].i64[1] + 4 * v381) = v170.i32[0];
      *(float32x2_t *)&v383 = vmls_lane_f32(v176, v376, v10, 0);
      *(_QWORD *)(a1[2].i64[0] + 8 * v381) = _D16;
      v384 = a1[1].u32[0] + (unint64_t)(v13 + 4);
      DWORD2(v383) = 0;
      HIDWORD(v383) = LODWORD(a4);
      LODWORD(a4) = a1[12].i32[3];
      *(_OWORD *)(a1[2].i64[1] + 16 * v384) = v383;
      *(_DWORD *)(a1[1].i64[1] + 4 * v384) = v170.i32[0];
      *(double *)(a1[2].i64[0] + 8 * v384) = a4;
      v385 = a1[1].u32[0] + (unint64_t)(v13 + 5);
      v170.i32[0] = a1[12].i32[3];
      *(_OWORD *)(a1[2].i64[1] + 16 * v385) = v186;
      *(_DWORD *)(a1[1].i64[1] + 4 * v385) = v373.i32[0];
      *(float32x2_t *)(a1[2].i64[0] + 8 * v385) = v170;
      LODWORD(v13) = v13 + 8;
    }
    v386 = a1[1].u32[0] + (unint64_t)v13;
    v170.i32[0] = a1[12].i32[3];
    *(_OWORD *)(a1[2].i64[1] + 16 * v386) = v186;
    v387 = vmovn_s16((int16x8_t)v184).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v386) = v387;
    *(float32x2_t *)(a1[2].i64[0] + 8 * v386) = v170;
    v388 = a1[1].u32[0] + (unint64_t)(v13 + 1);
    __asm { FMOV            V0.2S, #1.0 }
    LODWORD(_D0) = a1[12].i32[3];
    *(_OWORD *)(a1[2].i64[1] + 16 * v388) = v182;
    *(_DWORD *)(a1[1].i64[1] + 4 * v388) = v387;
    goto LABEL_123;
  }
  v33 = vaddv_f32(v19);
  v34 = vaddv_f32(v24);
  v35 = a1[8].i32[1];
  v878 = a9;
  if (!v35)
  {
    v812 = v10;
    v819 = v30.i32[1];
    LODWORD(v859) = a1[12].i32[3];
    v866 = a1[12].f32[0];
    v888 = 0;
    v889 = 0;
    v78 = vadd_f32(*(float32x2_t *)&a8, (float32x2_t)a9.n128_u64[0]);
    v892 = *(double *)&v78;
    v893 = vneg_f32(*(float32x2_t *)&a7);
    v820 = vadd_f32(a5, (float32x2_t)a9.n128_u64[0]);
    v825 = v15;
    v890 = *(double *)&v820;
    v891 = a4;
    v79 = vsub_f32((float32x2_t)a9.n128_u64[0], *(float32x2_t *)&a8);
    v886 = v79;
    v887 = v893;
    v845 = vsub_f32((float32x2_t)a9.n128_u64[0], a5);
    v885[0] = v845;
    v885[1] = *(float32x2_t *)&a4;
    v833 = a4;
    sk_ray2::intersect((float32x2_t *)&v892, (float32x2_t *)&v890, (float *)&v889 + 1, (float *)&v889);
    sk_ray2::intersect(&v886, v885, (float *)&v888 + 1, (float *)&v888);
    v883.i32[0] = 0;
    v881.i32[0] = 0;
    sk_ray2::intersect((float32x2_t *)&v892, (float32x2_t *)&v890, (float *)&v883, (float *)&v881);
    v852 = vmla_n_f32(*(float32x2_t *)&v892, v893, v883.f32[0]);
    v883.i32[0] = 0;
    v881.i32[0] = 0;
    sk_ray2::intersect(&v886, v885, (float *)&v883, (float *)&v881);
    v80 = vmla_n_f32(v886, v887, v883.f32[0]);
    v81 = vmlas_n_f32((float)-*((float *)&a7 + 1) * *(float *)&v833, *((float *)&v833 + 1), *(float *)&a7);
    if (v81 > 0.0)
    {
      v82 = vsub_f32(v852, (float32x2_t)v878.n128_u64[0]);
      v83 = vsub_f32(v80, v845);
      v47 = sqrtf(vaddv_f32(vmul_f32(v83, v83))) <= sqrtf(v33);
      v84 = vsub_f32(v80, v79);
      v85 = sqrtf(vaddv_f32(vmul_f32(v84, v84)));
      v86 = sqrtf(v34);
      v87 = v47 && v85 <= v86;
      v88 = v80;
      if (!v87)
      {
        v80 = v79;
        v88 = v845;
      }
      v839 = v88;
      v846 = v82;
      v875 = v80;
      v883 = v78;
      v884 = vsub_f32(v820, v78);
      v881 = (float32x2_t)v878.n128_u64[0];
      v882 = (int32x2_t)v82;
      v879.i32[0] = 0;
      HIDWORD(v894) = 0;
      sk_ray2::intersect(&v883, &v881, (float *)&v879, (float *)&v894 + 1);
      v89 = a1[9].f32[3];
      v90 = vmul_f32(v846, v846);
      v91 = vadd_f32(v90, (float32x2_t)vdup_lane_s32((int32x2_t)v90, 1)).u32[0];
      if (sqrtf(vaddv_f32(v90)) <= v89)
      {
        v304 = v825;
        if (v17)
        {
          *(float32x2_t *)&v305 = v839;
          v306 = vsub_f32(v839, (float32x2_t)v878.n128_u64[0]);
          v307 = vmul_f32(v306, v306);
          v307.i32[0] = vadd_f32(v307, (float32x2_t)vdup_lane_s32((int32x2_t)v307, 1)).u32[0];
          v308 = vrsqrte_f32((float32x2_t)v307.u32[0]);
          v309 = vmul_f32(v308, vrsqrts_f32((float32x2_t)v307.u32[0], vmul_f32(v308, v308)));
          *(float32x2_t *)&v310 = vmla_n_f32(v839, vmul_n_f32(v306, vmul_f32(v309, vrsqrts_f32((float32x2_t)v307.u32[0], vmul_f32(v309, v309))).f32[0]), v812.f32[0]);
          v311 = vrsqrte_f32((float32x2_t)v91);
          v312 = vmul_f32(v311, vrsqrts_f32((float32x2_t)v91, vmul_f32(v311, v311)));
          *(float32x2_t *)&v313 = v852;
          *(float32x2_t *)&v314 = vmla_n_f32(v852, vmul_n_f32(v846, vmul_f32(v312, vrsqrts_f32((float32x2_t)v91, vmul_f32(v312, v312))).f32[0]), v812.f32[0]);
          if (v16)
            v315 = v18;
          else
            v315 = 1.0;
          v316 = a1[1].u32[0] + (unint64_t)(v13 - 10);
          DWORD2(v314) = 0;
          *((float *)&v314 + 3) = v315;
          v304.i32[3] = 1.0;
          v317 = (float32x4_t)vdupq_n_s32(0x437F0000u);
          v318 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v304, (float32x4_t)0), v317));
          *(_OWORD *)(a1[2].i64[1] + 16 * v316) = v314;
          *(int16x4_t *)v318.i8 = vmovn_s32((int32x4_t)v318);
          v319 = vmovn_s16(v318).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v316) = v319;
          v320 = __PAIR64__(1.0, v859);
          *(_QWORD *)(a1[2].i64[0] + 8 * v316) = __PAIR64__(1.0, v859);
          v321 = a1[1].u32[0] + (unint64_t)(v13 - 9);
          DWORD2(v313) = 0;
          *((float *)&v313 + 3) = v315;
          v322 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v304, v866), v317));
          *(_OWORD *)(a1[2].i64[1] + 16 * v321) = v313;
          *(int16x4_t *)v322.f32 = vmovn_s32((int32x4_t)v322);
          v317.i32[0] = vmovn_s16((int16x8_t)v322).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v321) = v317.i32[0];
          *(_QWORD *)(a1[2].i64[0] + 8 * v321) = __PAIR64__(1.0, v859);
          DWORD2(v305) = 0;
          v323 = a1[1].u32[0] + (unint64_t)(v13 - 6);
          *((float *)&v305 + 3) = v315;
          *(_OWORD *)(a1[2].i64[1] + 16 * v323) = v305;
          *(_DWORD *)(a1[1].i64[1] + 4 * v323) = v317.i32[0];
          *(_QWORD *)(a1[2].i64[0] + 8 * v323) = v859;
          DWORD2(v310) = 0;
          v324 = a1[1].u32[0] + (unint64_t)(v13 - 5);
          *((float *)&v310 + 3) = v315;
          *(_OWORD *)(a1[2].i64[1] + 16 * v324) = v310;
          *(_DWORD *)(a1[1].i64[1] + 4 * v324) = v319;
          *(_QWORD *)(a1[2].i64[0] + 8 * v324) = v859;
          v325 = a1[1].u32[0] + (unint64_t)(v13 - 2);
          *(_OWORD *)(a1[2].i64[1] + 16 * v325) = v313;
          *(_DWORD *)(a1[1].i64[1] + 4 * v325) = v317.i32[0];
          *(_QWORD *)(a1[2].i64[0] + 8 * v325) = __PAIR64__(1.0, v859);
          v326 = a1[1].u32[0] + (unint64_t)(v13 - 1);
          *(_OWORD *)(a1[2].i64[1] + 16 * v326) = v305;
          *(_DWORD *)(a1[1].i64[1] + 4 * v326) = v317.i32[0];
          *(_QWORD *)(a1[2].i64[0] + 8 * v326) = v859;
          v327 = a1[1].u32[0] + v13;
          *(_OWORD *)(a1[2].i64[1] + 16 * v327) = v313;
          *(_DWORD *)(a1[1].i64[1] + 4 * v327) = v317.i32[0];
          *(_QWORD *)(a1[2].i64[0] + 8 * v327) = __PAIR64__(1.0, v859);
          v328 = a1[1].u32[0] + (unint64_t)(v13 + 1);
          *(_OWORD *)(a1[2].i64[1] + 16 * v328) = v314;
          *(_DWORD *)(a1[1].i64[1] + 4 * v328) = v319;
          *(_QWORD *)(a1[2].i64[0] + 8 * v328) = __PAIR64__(1.0, v859);
          v329 = a1[1].u32[0] + (unint64_t)(v13 + 4);
          *(_OWORD *)(a1[2].i64[1] + 16 * v329) = v310;
          *(_DWORD *)(a1[1].i64[1] + 4 * v329) = v319;
          *(_QWORD *)(a1[2].i64[0] + 8 * v329) = v859;
          v330 = a1[1].u32[0] + (unint64_t)(v13 + 5);
          *(_OWORD *)(a1[2].i64[1] + 16 * v330) = v305;
          *(_DWORD *)(a1[1].i64[1] + 4 * v330) = v317.i32[0];
          *(_QWORD *)(a1[2].i64[0] + 8 * v330) = v859;
          LODWORD(v13) = v13 + 8;
        }
        else
        {
          if (v16)
            v315 = v18;
          else
            v315 = 1.0;
          *(float32x2_t *)&v313 = v852;
          DWORD2(v313) = 0;
          *((float *)&v313 + 3) = v315;
          v698 = a1[1].u32[0] + (unint64_t)(v13 - 2);
          v304.i32[3] = 1.0;
          v322 = vmulq_n_f32(v304, v866);
          *(_OWORD *)(a1[2].i64[1] + 16 * v698) = v313;
          *(int16x4_t *)v322.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v322, (float32x4_t)vdupq_n_s32(0x437F0000u))));
          v699 = vmovn_s16((int16x8_t)v322).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v698) = v699;
          v320 = __PAIR64__(1.0, v859);
          *(_QWORD *)(a1[2].i64[0] + 8 * v698) = __PAIR64__(1.0, v859);
          v700 = a1[1].u32[0] + (unint64_t)(v13 - 1);
          *(float32x2_t *)&v701 = v839;
          DWORD2(v701) = 0;
          *((float *)&v701 + 3) = v315;
          *(_OWORD *)(a1[2].i64[1] + 16 * v700) = v701;
          *(_DWORD *)(a1[1].i64[1] + 4 * v700) = v699;
          *(_QWORD *)(a1[2].i64[0] + 8 * v700) = v859;
        }
        *(float32x2_t *)&v702 = v875;
        v703 = a1[1].u32[0] + (unint64_t)v13;
        DWORD2(v702) = 0;
        *((float *)&v702 + 3) = v315;
        *(_OWORD *)(a1[2].i64[1] + 16 * v703) = v702;
        v704 = vmovn_s16((int16x8_t)v322).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v703) = v704;
        *(_QWORD *)(a1[2].i64[0] + 8 * v703) = v859;
        v705 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v705) = v313;
        *(_DWORD *)(a1[1].i64[1] + 4 * v705) = v704;
        *(_QWORD *)(a1[2].i64[0] + 8 * v705) = v320;
      }
      else
      {
        v92 = vsub_f32(vmla_n_f32(v883, v884, v879.f32[0]), (float32x2_t)v878.n128_u64[0]);
        v93 = fmaxf(sqrtf(vaddv_f32(vmul_f32(v92, v92))), v89);
        v94 = vrsqrte_f32((float32x2_t)v91);
        v95 = vmul_f32(v94, vrsqrts_f32((float32x2_t)v91, vmul_f32(v94, v94)));
        v96 = vmul_n_f32(v846, vmul_f32(v95, vrsqrts_f32((float32x2_t)v91, vmul_f32(v95, v95))).f32[0]);
        v97 = vmla_n_f32((float32x2_t)v878.n128_u64[0], v96, v93);
        v96.f32[0] = -v846.f32[1];
        v881 = v97;
        v882 = vzip1_s32((int32x2_t)v96, (int32x2_t)v846);
        v879 = v97;
        v880 = vneg_f32((float32x2_t)v882);
        v894 = 0;
        sk_ray2::intersect(&v881, (float32x2_t *)&v890, (float *)&v894 + 1, (float *)&v894);
        *(float32x2_t *)&v98 = vmla_n_f32(v881, (float32x2_t)v882, *((float *)&v894 + 1));
        v99.i64[1] = v878.n128_i64[1];
        v100 = vsub_f32(*(float32x2_t *)&v98, (float32x2_t)v878.n128_u64[0]);
        v101 = vmul_f32(v100, v100);
        v101.i32[0] = vadd_f32(v101, (float32x2_t)vdup_lane_s32((int32x2_t)v101, 1)).u32[0];
        v102 = vrsqrte_f32((float32x2_t)v101.u32[0]);
        v103 = vmul_f32(v102, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(v102, v102)));
        v104 = (float32x2_t)vdup_lane_s32((int32x2_t)v812, 0);
        v105 = vmla_n_f32(*(float32x2_t *)&v98, vmul_n_f32(v100, vmul_f32(v103, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(v103, v103))).f32[0]), v812.f32[0]);
        v821 = v105;
        if (v17)
        {
          *(float32x2_t *)&v106 = v839;
          v107 = vsub_f32(v839, (float32x2_t)v878.n128_u64[0]);
          v108 = vmul_f32(v107, v107);
          v108.i32[0] = vadd_f32(v108, (float32x2_t)vdup_lane_s32((int32x2_t)v108, 1)).u32[0];
          v109 = vrsqrte_f32((float32x2_t)v108.u32[0]);
          v110 = vmul_f32(v109, vrsqrts_f32((float32x2_t)v108.u32[0], vmul_f32(v109, v109)));
          *(float32x2_t *)&v111 = vmla_f32(v839, v104, vmul_n_f32(v107, vmul_f32(v110, vrsqrts_f32((float32x2_t)v108.u32[0], vmul_f32(v110, v110))).f32[0]));
          if (v16)
            v112 = v18;
          else
            v112 = 1.0;
          v113 = a1[1].u32[0] + (unint64_t)(v13 - 10);
          *(float32x2_t *)v114.i8 = v105;
          v114.i32[2] = 0;
          *(float *)&v114.i32[3] = v112;
          v99 = v825;
          v99.i32[3] = 1.0;
          v115 = (float32x4_t)vdupq_n_s32(0x437F0000u);
          *(int16x8_t *)(a1[2].i64[1] + 16 * v113) = v114;
          *(int16x4_t *)v114.i8 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_f32(v99, (float32x4_t)0), v115)));
          v114.i32[0] = vmovn_s16(v114).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v113) = v114.i32[0];
          v116 = v859;
          v117 = __PAIR64__(1.0, v859);
          *(_QWORD *)(a1[2].i64[0] + 8 * v113) = __PAIR64__(1.0, v859);
          v118 = a1[1].u32[0] + (unint64_t)(v13 - 9);
          DWORD2(v98) = 0;
          *((float *)&v98 + 3) = v112;
          v826 = v99;
          *(_OWORD *)(a1[2].i64[1] + 16 * v118) = v98;
          *(int16x4_t *)v99.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v99, v866), v115)));
          v119 = vmovn_s16((int16x8_t)v99).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v118) = v119;
          *(_QWORD *)(a1[2].i64[0] + 8 * v118) = __PAIR64__(1.0, v859);
          DWORD2(v106) = 0;
          v120 = a1[1].u32[0] + (unint64_t)(v13 - 6);
          *((float *)&v106 + 3) = v112;
          *(_OWORD *)(a1[2].i64[1] + 16 * v120) = v106;
          *(_DWORD *)(a1[1].i64[1] + 4 * v120) = v119;
          *(_QWORD *)(a1[2].i64[0] + 8 * v120) = v859;
          DWORD2(v111) = 0;
          v121 = a1[1].u32[0] + (unint64_t)(v13 - 5);
          v867 = v112;
          *((float *)&v111 + 3) = v112;
          *(_OWORD *)(a1[2].i64[1] + 16 * v121) = v111;
          *(_DWORD *)(a1[1].i64[1] + 4 * v121) = v114.i32[0];
          *(_QWORD *)(a1[2].i64[0] + 8 * v121) = v859;
        }
        else
        {
          if (v16)
            v590 = v18;
          else
            v590 = 1.0;
          DWORD2(v98) = 0;
          *((float *)&v98 + 3) = v590;
          v591 = v825;
          v591.i32[3] = 1.0;
          v826 = v591;
          v116 = v859;
          *(int16x4_t *)v99.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v591, v866), (float32x4_t)vdupq_n_s32(0x437F0000u))));
          v117 = __PAIR64__(1.0, v859);
          *(float32x2_t *)&v106 = v839;
          DWORD2(v106) = 0;
          v867 = v590;
          *((float *)&v106 + 3) = v590;
        }
        v857 = v117;
        v864 = v116;
        v835 = (int16x8_t)v99;
        v592 = a1[1].u32[0] + (unint64_t)(v13 - 2);
        v818 = v98;
        *(_OWORD *)(a1[2].i64[1] + 16 * v592) = v98;
        v593 = vmovn_s16((int16x8_t)v99).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v592) = v593;
        *(_QWORD *)(a1[2].i64[0] + 8 * v592) = v117;
        v594 = a1[1].u32[0] + (unint64_t)(v13 - 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v594) = v106;
        *(_DWORD *)(a1[1].i64[1] + 4 * v594) = v593;
        v595 = v593;
        v849 = v593;
        *(_QWORD *)(a1[2].i64[0] + 8 * v594) = v116;
        v596 = a1[1].u32[0] + v13;
        *(float32x2_t *)&v597 = v875;
        DWORD2(v597) = 0;
        *((float *)&v597 + 3) = v867;
        v842 = v597;
        *(_OWORD *)(a1[2].i64[1] + 16 * v596) = v597;
        *(_DWORD *)(a1[1].i64[1] + 4 * v596) = v595;
        *(_QWORD *)(a1[2].i64[0] + 8 * v596) = v116;
        v894 = 0;
        sk_ray2::intersect(&v881, (float32x2_t *)&v890, (float *)&v894 + 1, (float *)&v894);
        *(float32x2_t *)&v598 = vmla_n_f32(v881, (float32x2_t)v882, *((float *)&v894 + 1));
        v599 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        DWORD2(v598) = 0;
        *((float *)&v598 + 3) = v867;
        *(_OWORD *)(a1[2].i64[1] + 16 * v599) = v598;
        *(_DWORD *)(a1[1].i64[1] + 4 * v599) = v849;
        *(_QWORD *)(a1[2].i64[0] + 8 * v599) = v857;
        v894 = 0;
        sk_ray2::intersect(&v879, (float32x2_t *)&v892, (float *)&v894 + 1, (float *)&v894);
        *(float32x2_t *)&v600 = vmla_n_f32(v879, v880, *((float *)&v894 + 1));
        v601 = a1[1].u32[0] + (unint64_t)(v13 + 2);
        DWORD2(v600) = 0;
        *((float *)&v600 + 3) = v867;
        *(_OWORD *)(a1[2].i64[1] + 16 * v601) = v600;
        *(_DWORD *)(a1[1].i64[1] + 4 * v601) = v849;
        *(_QWORD *)(a1[2].i64[0] + 8 * v601) = v857;
        v894 = 0;
        sk_ray2::intersect(&v879, (float32x2_t *)&v892, (float *)&v894 + 1, (float *)&v894);
        *(float32x2_t *)&v602 = vmla_n_f32(v879, v880, *((float *)&v894 + 1));
        v603 = a1[1].u32[0] + (unint64_t)(v13 + 3);
        DWORD2(v602) = 0;
        *((float *)&v602 + 3) = v867;
        *(_OWORD *)(a1[2].i64[1] + 16 * v603) = v602;
        *(_DWORD *)(a1[1].i64[1] + 4 * v603) = v849;
        *(_QWORD *)(a1[2].i64[0] + 8 * v603) = v857;
        v894 = 0;
        sk_ray2::intersect(&v879, (float32x2_t *)&v892, (float *)&v894 + 1, (float *)&v894);
        *(float32x2_t *)&v604 = vmla_n_f32(v879, v880, *((float *)&v894 + 1));
        if (v17)
        {
          v605 = vsub_f32(*(float32x2_t *)&v604, (float32x2_t)v878.n128_u64[0]);
          v606 = vmul_f32(v605, v605);
          v606.i32[0] = vadd_f32(v606, (float32x2_t)vdup_lane_s32((int32x2_t)v606, 1)).u32[0];
          v607 = vrsqrte_f32((float32x2_t)v606.u32[0]);
          v608 = vmul_f32(v607, vrsqrts_f32((float32x2_t)v606.u32[0], vmul_f32(v607, v607)));
          v609 = vmul_n_f32(v605, vmul_f32(v608, vrsqrts_f32((float32x2_t)v606.u32[0], vmul_f32(v608, v608))).f32[0]);
          v610 = vsub_f32(v875, (float32x2_t)v878.n128_u64[0]);
          v611 = vmul_f32(v610, v610);
          v611.i32[0] = vadd_f32(v611, (float32x2_t)vdup_lane_s32((int32x2_t)v611, 1)).u32[0];
          *(float32x2_t *)&v612 = vmla_f32(*(float32x2_t *)&v604, v104, v609);
          v613 = vrsqrte_f32((float32x2_t)v611.u32[0]);
          v614 = vmul_f32(v613, vrsqrts_f32((float32x2_t)v611.u32[0], vmul_f32(v613, v613)));
          v615 = a1[1].u32[0] + (unint64_t)(v13 + 4);
          *(float32x2_t *)&v616 = v821;
          *(_OWORD *)(a1[2].i64[1] + 16 * v615) = v818;
          LODWORD(v617) = vmul_f32(v614, vrsqrts_f32((float32x2_t)v611.u32[0], vmul_f32(v614, v614))).u32[0];
          v614.i32[0] = vmovn_s16(v835).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v615) = v614.i32[0];
          *(_QWORD *)(a1[2].i64[0] + 8 * v615) = v857;
          DWORD2(v616) = 0;
          v618 = a1[1].u32[0] + (unint64_t)(v13 + 5);
          *((float *)&v616 + 3) = v867;
          v619 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v826, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u)));
          *(int16x4_t *)v619.i8 = vmovn_s32((int32x4_t)v619);
          *(_OWORD *)(a1[2].i64[1] + 16 * v618) = v616;
          v619.i32[0] = vmovn_s16(v619).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v618) = v619.i32[0];
          *(_QWORD *)(a1[2].i64[0] + 8 * v618) = v857;
          v620 = a1[1].u32[0] + (unint64_t)(v13 + 6);
          *((_QWORD *)&v612 + 1) = __PAIR64__(LODWORD(v867), 0);
          *(_OWORD *)(a1[2].i64[1] + 16 * v620) = v612;
          *(_DWORD *)(a1[1].i64[1] + 4 * v620) = v619.i32[0];
          *(_QWORD *)(a1[2].i64[0] + 8 * v620) = v857;
          *((_QWORD *)&v604 + 1) = __PAIR64__(LODWORD(v867), 0);
          v621 = a1[1].u32[0] + (unint64_t)(v13 + 7);
          *(_OWORD *)(a1[2].i64[1] + 16 * v621) = v604;
          *(_DWORD *)(a1[1].i64[1] + 4 * v621) = v614.i32[0];
          *(_QWORD *)(a1[2].i64[0] + 8 * v621) = v857;
          v622 = a1[1].u32[0] + (unint64_t)(v13 + 8);
          *(_OWORD *)(a1[2].i64[1] + 16 * v622) = v604;
          *(_DWORD *)(a1[1].i64[1] + 4 * v622) = v614.i32[0];
          *(_QWORD *)(a1[2].i64[0] + 8 * v622) = v857;
          v623 = a1[1].u32[0] + (unint64_t)(v13 + 9);
          *(_OWORD *)(a1[2].i64[1] + 16 * v623) = v612;
          *(_DWORD *)(a1[1].i64[1] + 4 * v623) = v619.i32[0];
          *(_QWORD *)(a1[2].i64[0] + 8 * v623) = v857;
          *(float32x2_t *)&v624 = vmla_f32(v875, v104, vmul_n_f32(v610, v617));
          v625 = a1[1].u32[0] + (unint64_t)(v13 + 12);
          *((_QWORD *)&v624 + 1) = __PAIR64__(LODWORD(v867), 0);
          *(_OWORD *)(a1[2].i64[1] + 16 * v625) = v624;
          *(_DWORD *)(a1[1].i64[1] + 4 * v625) = v619.i32[0];
          v626 = v864;
          *(_QWORD *)(a1[2].i64[0] + 8 * v625) = v864;
          v627 = a1[1].u32[0] + (unint64_t)(v13 + 13);
          v628 = v842;
          *(_OWORD *)(a1[2].i64[1] + 16 * v627) = v842;
          *(_DWORD *)(a1[1].i64[1] + 4 * v627) = v614.i32[0];
          *(_QWORD *)(a1[2].i64[0] + 8 * v627) = v864;
          LODWORD(v13) = v13 + 16;
          v629 = v857;
          v630 = v835;
        }
        else
        {
          DWORD2(v604) = 0;
          v626 = v864;
          *((float *)&v604 + 3) = v867;
          LODWORD(v13) = v13 + 4;
          v629 = v857;
          v630 = v835;
          v628 = v842;
        }
        v706 = a1[1].u32[0] + (unint64_t)v13;
        *(_OWORD *)(a1[2].i64[1] + 16 * v706) = v628;
        v707 = vmovn_s16(v630).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v706) = v707;
        *(_QWORD *)(a1[2].i64[0] + 8 * v706) = v626;
        v708 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v708) = v604;
        *(_DWORD *)(a1[1].i64[1] + 4 * v708) = v707;
        *(_QWORD *)(a1[2].i64[0] + 8 * v708) = v629;
      }
      goto LABEL_184;
    }
    *(float32x2_t *)&v225 = v845;
    if (v81 >= 0.0)
    {
      if (v31)
        v331 = 0;
      else
        v331 = (v819 & 0x60000000) == 0;
      if (!v331)
      {
        v332 = vmul_n_f32(v23, a1[9].f32[3]);
        *(float32x2_t *)&v333 = vadd_f32(v78, v332);
        *(float32x2_t *)&v334 = vadd_f32(v79, v332);
        v335 = v825;
        if (v17)
        {
          v336 = vmul_f32(*(float32x2_t *)&a8, *(float32x2_t *)&a8);
          v336.i32[0] = vadd_f32(v336, (float32x2_t)vdup_lane_s32((int32x2_t)v336, 1)).u32[0];
          v337 = vrsqrte_f32((float32x2_t)v336.u32[0]);
          v338 = vmul_f32(v337, vrsqrts_f32((float32x2_t)v336.u32[0], vmul_f32(v337, v337)));
          v339 = vmul_n_f32(*(float32x2_t *)&a8, vmul_f32(v338, vrsqrts_f32((float32x2_t)v336.u32[0], vmul_f32(v338, v338))).f32[0]);
          *(float32x2_t *)&v340 = vmla_n_f32(*(float32x2_t *)&v333, v339, v812.f32[0]);
          if (v16)
            v341 = v18;
          else
            v341 = 1.0;
          v342 = a1[1].u32[0] + (unint64_t)(v13 - 10);
          DWORD2(v340) = 0;
          *((float *)&v340 + 3) = v341;
          v335.i32[3] = 1.0;
          v343 = (float32x4_t)vdupq_n_s32(0x437F0000u);
          v344 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v335, (float32x4_t)0), v343));
          *(int16x4_t *)v344.i8 = vmovn_s32((int32x4_t)v344);
          *(_OWORD *)(a1[2].i64[1] + 16 * v342) = v340;
          v345 = vmovn_s16(v344).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v342) = v345;
          _D2 = __PAIR64__(1.0, v859);
          *(_QWORD *)(a1[2].i64[0] + 8 * v342) = __PAIR64__(1.0, v859);
          v346 = a1[1].u32[0] + (unint64_t)(v13 - 9);
          DWORD2(v333) = 0;
          *((float *)&v333 + 3) = v341;
          v347 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v335, v866), v343));
          *(int16x4_t *)v347.f32 = vmovn_s32((int32x4_t)v347);
          *(_OWORD *)(a1[2].i64[1] + 16 * v346) = v333;
          v348 = vmovn_s16((int16x8_t)v347).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v346) = v348;
          *(_QWORD *)(a1[2].i64[0] + 8 * v346) = __PAIR64__(1.0, v859);
          *(float32x2_t *)&v349 = vmla_n_f32(*(float32x2_t *)&v334, v339, v812.f32[0]);
          *(_QWORD *)&v351 = v334;
          DWORD2(v351) = 0;
          v350 = a1[1].u32[0] + (unint64_t)(v13 - 6);
          *((float *)&v351 + 3) = v341;
          *(_OWORD *)(a1[2].i64[1] + 16 * v350) = v351;
          *(_DWORD *)(a1[1].i64[1] + 4 * v350) = v348;
          *(_QWORD *)(a1[2].i64[0] + 8 * v350) = v859;
          DWORD2(v349) = 0;
          v352 = a1[1].u32[0] + (unint64_t)(v13 - 5);
          *((float *)&v349 + 3) = v341;
          *(_OWORD *)(a1[2].i64[1] + 16 * v352) = v349;
          *(_DWORD *)(a1[1].i64[1] + 4 * v352) = v345;
          *(_QWORD *)(a1[2].i64[0] + 8 * v352) = v859;
          v353 = a1[1].u32[0] + (unint64_t)(v13 - 2);
          *(_OWORD *)(a1[2].i64[1] + 16 * v353) = v333;
          *(_DWORD *)(a1[1].i64[1] + 4 * v353) = v348;
          *(_QWORD *)(a1[2].i64[0] + 8 * v353) = __PAIR64__(1.0, v859);
          v354 = a1[1].u32[0] + (unint64_t)(v13 - 1);
          *(_OWORD *)(a1[2].i64[1] + 16 * v354) = v351;
          *(_DWORD *)(a1[1].i64[1] + 4 * v354) = v348;
          *(_QWORD *)(a1[2].i64[0] + 8 * v354) = v859;
          v355 = a1[1].u32[0] + v13;
          *(_OWORD *)(a1[2].i64[1] + 16 * v355) = v333;
          *(_DWORD *)(a1[1].i64[1] + 4 * v355) = v348;
          *(_QWORD *)(a1[2].i64[0] + 8 * v355) = __PAIR64__(1.0, v859);
          v356 = a1[1].u32[0] + (unint64_t)(v13 + 1);
          *(_OWORD *)(a1[2].i64[1] + 16 * v356) = v340;
          *(_DWORD *)(a1[1].i64[1] + 4 * v356) = v345;
          *(_QWORD *)(a1[2].i64[0] + 8 * v356) = __PAIR64__(1.0, v859);
          *(float32x2_t *)&v357 = vmls_lane_f32(*(float32x2_t *)&v334, v339, v812, 0);
          v358 = a1[1].u32[0] + (unint64_t)(v13 + 4);
          DWORD2(v357) = 0;
          *((float *)&v357 + 3) = v341;
          *(_OWORD *)(a1[2].i64[1] + 16 * v358) = v357;
          *(_DWORD *)(a1[1].i64[1] + 4 * v358) = v345;
          *(_QWORD *)(a1[2].i64[0] + 8 * v358) = v859;
          v359 = a1[1].u32[0] + (unint64_t)(v13 + 5);
          *(_OWORD *)(a1[2].i64[1] + 16 * v359) = v351;
          *(_DWORD *)(a1[1].i64[1] + 4 * v359) = v348;
          *(_QWORD *)(a1[2].i64[0] + 8 * v359) = v859;
          LODWORD(v13) = v13 + 8;
        }
        else
        {
          if (v16)
            v711 = v18;
          else
            v711 = 1.0;
          DWORD2(v333) = 0;
          *((float *)&v333 + 3) = v711;
          v712 = a1[1].u32[0] + (unint64_t)(v13 - 2);
          v335.i32[3] = 1.0;
          v347 = vmulq_n_f32(v335, v866);
          *(_OWORD *)(a1[2].i64[1] + 16 * v712) = v333;
          *(int16x4_t *)v347.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v347, (float32x4_t)vdupq_n_s32(0x437F0000u))));
          v713 = vmovn_s16((int16x8_t)v347).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v712) = v713;
          _D2 = __PAIR64__(1.0, v859);
          *(_QWORD *)(a1[2].i64[0] + 8 * v712) = __PAIR64__(1.0, v859);
          v714 = a1[1].u32[0] + (unint64_t)(v13 - 1);
          DWORD2(v334) = 0;
          *((float *)&v334 + 3) = v711;
          *(_OWORD *)(a1[2].i64[1] + 16 * v714) = v334;
          *(_DWORD *)(a1[1].i64[1] + 4 * v714) = v713;
          *(_QWORD *)(a1[2].i64[0] + 8 * v714) = v859;
          v351 = v334;
        }
        v715 = a1[1].u32[0] + (unint64_t)v13;
        *(_OWORD *)(a1[2].i64[1] + 16 * v715) = v351;
        v164 = vmovn_s16((int16x8_t)v347).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v715) = v164;
        *(_QWORD *)(a1[2].i64[0] + 8 * v715) = v859;
        v168 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v168) = v333;
        goto LABEL_50;
      }
      v761 = v825;
      if (v17)
      {
        v762 = vmul_f32(a5, a5);
        v762.i32[0] = vadd_f32(v762, (float32x2_t)vdup_lane_s32((int32x2_t)v762, 1)).u32[0];
        v763 = vrsqrte_f32((float32x2_t)v762.u32[0]);
        v764 = vmul_f32(v763, vrsqrts_f32((float32x2_t)v762.u32[0], vmul_f32(v763, v763)));
        v765 = vmul_n_f32(a5, vmul_f32(v764, vrsqrts_f32((float32x2_t)v762.u32[0], vmul_f32(v764, v764))).f32[0]);
        *(float32x2_t *)&v766 = vmls_lane_f32(v845, v765, v812, 0);
        *(float32x2_t *)&v767 = v820;
        *(float32x2_t *)&v768 = vmla_n_f32(v820, v765, v812.f32[0]);
        if (v16)
          v769 = v18;
        else
          v769 = 1.0;
        v770 = a1[1].u32[0] + (unint64_t)(v13 - 10);
        DWORD2(v768) = 0;
        *((float *)&v768 + 3) = v769;
        v761.i32[3] = 1.0;
        v771 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        v772 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v761, (float32x4_t)0), v771));
        *(_OWORD *)(a1[2].i64[1] + 16 * v770) = v768;
        *(int16x4_t *)v772.i8 = vmovn_s32((int32x4_t)v772);
        v773 = vmovn_s16(v772).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v770) = v773;
        _D0 = __PAIR64__(1.0, v859);
        *(_QWORD *)(a1[2].i64[0] + 8 * v770) = __PAIR64__(1.0, v859);
        v774 = a1[1].u32[0] + (unint64_t)(v13 - 9);
        DWORD2(v767) = 0;
        *((float *)&v767 + 3) = v769;
        v775 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v761, v866), v771));
        *(_OWORD *)(a1[2].i64[1] + 16 * v774) = v767;
        *(int16x4_t *)v775.f32 = vmovn_s32((int32x4_t)v775);
        v771.i32[0] = vmovn_s16((int16x8_t)v775).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v774) = v771.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v774) = __PAIR64__(1.0, v859);
        DWORD2(v225) = 0;
        v776 = a1[1].u32[0] + (unint64_t)(v13 - 6);
        *((float *)&v225 + 3) = v769;
        *(_OWORD *)(a1[2].i64[1] + 16 * v776) = v225;
        *(_DWORD *)(a1[1].i64[1] + 4 * v776) = v771.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v776) = v859;
        DWORD2(v766) = 0;
        v777 = a1[1].u32[0] + (unint64_t)(v13 - 5);
        *((float *)&v766 + 3) = v769;
        *(_OWORD *)(a1[2].i64[1] + 16 * v777) = v766;
        *(_DWORD *)(a1[1].i64[1] + 4 * v777) = v773;
        *(_QWORD *)(a1[2].i64[0] + 8 * v777) = v859;
        v778 = a1[1].u32[0] + (unint64_t)(v13 - 2);
        *(_OWORD *)(a1[2].i64[1] + 16 * v778) = v767;
        *(_DWORD *)(a1[1].i64[1] + 4 * v778) = v771.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v778) = __PAIR64__(1.0, v859);
        v779 = a1[1].u32[0] + (unint64_t)(v13 - 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v779) = v225;
        *(_DWORD *)(a1[1].i64[1] + 4 * v779) = v771.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v779) = v859;
        v780 = a1[1].u32[0] + v13;
        *(_OWORD *)(a1[2].i64[1] + 16 * v780) = v767;
        *(_DWORD *)(a1[1].i64[1] + 4 * v780) = v771.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v780) = __PAIR64__(1.0, v859);
        v781 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v781) = v768;
        *(_DWORD *)(a1[1].i64[1] + 4 * v781) = v773;
        *(_QWORD *)(a1[2].i64[0] + 8 * v781) = __PAIR64__(1.0, v859);
        v782 = a1[1].u32[0] + (unint64_t)(v13 + 4);
        *(_OWORD *)(a1[2].i64[1] + 16 * v782) = v766;
        *(_DWORD *)(a1[1].i64[1] + 4 * v782) = v773;
        *(_QWORD *)(a1[2].i64[0] + 8 * v782) = v859;
        v783 = a1[1].u32[0] + (unint64_t)(v13 + 5);
        *(_OWORD *)(a1[2].i64[1] + 16 * v783) = v225;
        *(_DWORD *)(a1[1].i64[1] + 4 * v783) = v771.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v783) = v859;
        LODWORD(v13) = v13 + 8;
      }
      else
      {
        if (v16)
          v792 = v18;
        else
          v792 = 1.0;
        *(float32x2_t *)&v767 = v820;
        DWORD2(v767) = 0;
        *((float *)&v767 + 3) = v792;
        v793 = a1[1].u32[0] + (unint64_t)(v13 - 2);
        v761.i32[3] = 1.0;
        v775 = vmulq_n_f32(v761, v866);
        *(_OWORD *)(a1[2].i64[1] + 16 * v793) = v767;
        *(int16x4_t *)v775.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v775, (float32x4_t)vdupq_n_s32(0x437F0000u))));
        v794 = vmovn_s16((int16x8_t)v775).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v793) = v794;
        _D0 = __PAIR64__(1.0, v859);
        *(_QWORD *)(a1[2].i64[0] + 8 * v793) = __PAIR64__(1.0, v859);
        v795 = a1[1].u32[0] + (unint64_t)(v13 - 1);
        DWORD2(v225) = 0;
        *((float *)&v225 + 3) = v792;
        *(_OWORD *)(a1[2].i64[1] + 16 * v795) = v225;
        *(_DWORD *)(a1[1].i64[1] + 4 * v795) = v794;
        *(_QWORD *)(a1[2].i64[0] + 8 * v795) = v859;
      }
      v796 = a1[1].u32[0] + (unint64_t)v13;
      *(_OWORD *)(a1[2].i64[1] + 16 * v796) = v225;
      v758 = vmovn_s16((int16x8_t)v775).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v796) = v758;
      *(_QWORD *)(a1[2].i64[0] + 8 * v796) = v859;
      v388 = a1[1].u32[0] + (unint64_t)(v13 + 1);
      *(_OWORD *)(a1[2].i64[1] + 16 * v388) = v767;
    }
    else
    {
      v876 = v80;
      v226 = vsub_f32(v80, (float32x2_t)v878.n128_u64[0]);
      v227 = v852;
      v228 = vsub_f32(v852, v845);
      v47 = sqrtf(vaddv_f32(vmul_f32(v228, v228))) <= sqrtf(v33);
      v229 = vsub_f32(v852, v79);
      v230 = sqrtf(vaddv_f32(vmul_f32(v229, v229)));
      v231 = sqrtf(v34);
      v232 = v47 && v230 <= v231;
      v233 = v852;
      if (!v232)
      {
        v227 = v78;
        v233 = v820;
      }
      v840 = v233;
      v847 = v226;
      v854 = v227;
      v883 = v79;
      v884 = vsub_f32(*(float32x2_t *)&v225, v79);
      v881 = (float32x2_t)v878.n128_u64[0];
      v882 = (int32x2_t)v226;
      v879.i32[0] = 0;
      HIDWORD(v894) = 0;
      sk_ray2::intersect(&v883, &v881, (float *)&v879, (float *)&v894 + 1);
      v234 = a1[9].f32[3];
      v235 = vmul_f32(v847, v847);
      v236 = vadd_f32(v235, (float32x2_t)vdup_lane_s32((int32x2_t)v235, 1)).u32[0];
      if (sqrtf(vaddv_f32(v235)) > v234)
      {
        v237 = vsub_f32(vmla_n_f32(v883, v884, v879.f32[0]), (float32x2_t)v878.n128_u64[0]);
        v238 = fmaxf(sqrtf(vaddv_f32(vmul_f32(v237, v237))), v234);
        v239 = vrsqrte_f32((float32x2_t)v236);
        v240 = vmul_f32(v239, vrsqrts_f32((float32x2_t)v236, vmul_f32(v239, v239)));
        v241 = vmul_n_f32(v847, vmul_f32(v240, vrsqrts_f32((float32x2_t)v236, vmul_f32(v240, v240))).f32[0]);
        v242 = vmla_n_f32((float32x2_t)v878.n128_u64[0], v241, v238);
        v241.f32[0] = -v847.f32[1];
        v881 = v242;
        v882 = vzip1_s32((int32x2_t)v241, (int32x2_t)v847);
        v879 = v242;
        v880 = vneg_f32((float32x2_t)v882);
        *(float32x2_t *)&v244 = sk_ray2::intersection(&v881, v885);
        v245 = (float32x2_t)vdup_lane_s32((int32x2_t)v812, 0);
        v246 = vsub_f32(*(float32x2_t *)&v244, (float32x2_t)v878.n128_u64[0]);
        v247 = vmul_f32(v246, v246);
        v247.i32[0] = vadd_f32(v247, (float32x2_t)vdup_lane_s32((int32x2_t)v247, 1)).u32[0];
        v248 = vrsqrte_f32((float32x2_t)v247.u32[0]);
        v249 = vmul_f32(v248, vrsqrts_f32((float32x2_t)v247.u32[0], vmul_f32(v248, v248)));
        v250 = vmla_n_f32(*(float32x2_t *)&v244, vmul_n_f32(v246, vmul_f32(v249, vrsqrts_f32((float32x2_t)v247.u32[0], vmul_f32(v249, v249))).f32[0]), v812.f32[0]);
        v816 = v244;
        v822 = v250;
        if (v17)
        {
          *(float32x2_t *)&v251 = v840;
          v252 = vsub_f32(v840, (float32x2_t)v878.n128_u64[0]);
          v253 = vmul_f32(v252, v252);
          v253.i32[0] = vadd_f32(v253, (float32x2_t)vdup_lane_s32((int32x2_t)v253, 1)).u32[0];
          v254 = vrsqrte_f32((float32x2_t)v253.u32[0]);
          v255 = vmul_f32(v254, vrsqrts_f32((float32x2_t)v253.u32[0], vmul_f32(v254, v254)));
          *(float32x2_t *)&v256 = vmla_f32(v840, v245, vmul_n_f32(v252, vmul_f32(v255, vrsqrts_f32((float32x2_t)v253.u32[0], vmul_f32(v255, v255))).f32[0]));
          if (v16)
            v257 = v18;
          else
            v257 = 1.0;
          DWORD2(v256) = 0;
          *((float *)&v256 + 3) = v257;
          v258 = a1[1].u32[0] + (unint64_t)(v13 - 10);
          v259 = v825;
          v259.i32[3] = 1.0;
          v243 = (float32x4_t)vdupq_n_s32(0x437F0000u);
          v260 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v259, (float32x4_t)0), v243));
          *(int16x4_t *)v260.i8 = vmovn_s32((int32x4_t)v260);
          *(_OWORD *)(a1[2].i64[1] + 16 * v258) = v256;
          v260.i32[0] = vmovn_s16(v260).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v258) = v260.i32[0];
          v261 = __PAIR64__(1.0, v859);
          *(_QWORD *)(a1[2].i64[0] + 8 * v258) = __PAIR64__(1.0, v859);
          DWORD2(v251) = 0;
          *((float *)&v251 + 3) = v257;
          v262 = a1[1].u32[0] + (unint64_t)(v13 - 9);
          v830 = v259;
          *(int16x4_t *)v243.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v259, v866), v243)));
          *(_OWORD *)(a1[2].i64[1] + 16 * v262) = v251;
          v263 = vmovn_s16((int16x8_t)v243).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v262) = v263;
          *(_QWORD *)(a1[2].i64[0] + 8 * v262) = __PAIR64__(1.0, v859);
          v264 = a1[1].u32[0] + (unint64_t)(v13 - 6);
          DWORD2(v244) = 0;
          *((float *)&v244 + 3) = v257;
          *(_OWORD *)(a1[2].i64[1] + 16 * v264) = v244;
          *(_DWORD *)(a1[1].i64[1] + 4 * v264) = v263;
          *(_QWORD *)(a1[2].i64[0] + 8 * v264) = v859;
          *(float32x2_t *)&v265 = v250;
          DWORD2(v265) = 0;
          v266 = a1[1].u32[0] + (unint64_t)(v13 - 5);
          v877 = v257;
          *((float *)&v265 + 3) = v257;
          *(_OWORD *)(a1[2].i64[1] + 16 * v266) = v265;
          *(_DWORD *)(a1[1].i64[1] + 4 * v266) = v260.i32[0];
          v859 = v859;
          *(_QWORD *)(a1[2].i64[0] + 8 * v266) = v859;
        }
        else
        {
          if (v16)
            v716 = v18;
          else
            v716 = 1.0;
          *(float32x2_t *)&v251 = v840;
          DWORD2(v251) = 0;
          v877 = v716;
          *((float *)&v251 + 3) = v716;
          v717 = v825;
          v717.i32[3] = 1.0;
          v830 = v717;
          *(int16x4_t *)v243.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v717, v866), (float32x4_t)vdupq_n_s32(0x437F0000u))));
          v261 = __PAIR64__(1.0, v859);
          v859 = v859;
        }
        v844 = (int16x8_t)v243;
        v851 = v261;
        v718 = a1[1].u32[0] + (unint64_t)(v13 - 2);
        *(_OWORD *)(a1[2].i64[1] + 16 * v718) = v251;
        v873 = vmovn_s16((int16x8_t)v243).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v718) = v873;
        *(_QWORD *)(a1[2].i64[0] + 8 * v718) = v261;
        *(float32x2_t *)&v719 = sk_ray2::intersection(&v881, v885);
        DWORD2(v719) = 0;
        v720 = a1[1].u32[0] + (unint64_t)(v13 - 1);
        *((float *)&v719 + 3) = v877;
        *(_OWORD *)(a1[2].i64[1] + 16 * v720) = v719;
        *(_DWORD *)(a1[1].i64[1] + 4 * v720) = v873;
        *(_QWORD *)(a1[2].i64[0] + 8 * v720) = v859;
        v721 = a1[1].u32[0] + v13;
        *(float32x2_t *)&v719 = v854;
        DWORD2(v719) = 0;
        *((float *)&v719 + 3) = v877;
        v837 = v719;
        *(_OWORD *)(a1[2].i64[1] + 16 * v721) = v719;
        *(_DWORD *)(a1[1].i64[1] + 4 * v721) = v873;
        *(_QWORD *)(a1[2].i64[0] + 8 * v721) = v851;
        *(float32x2_t *)&v722 = sk_ray2::intersection(&v881, v885);
        v723 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        DWORD2(v722) = 0;
        *((float *)&v722 + 3) = v877;
        *(_OWORD *)(a1[2].i64[1] + 16 * v723) = v722;
        *(_DWORD *)(a1[1].i64[1] + 4 * v723) = v873;
        *(_QWORD *)(a1[2].i64[0] + 8 * v723) = v859;
        *(float32x2_t *)&v724 = sk_ray2::intersection(&v879, &v886);
        v725 = a1[1].u32[0] + (unint64_t)(v13 + 2);
        DWORD2(v724) = 0;
        *((float *)&v724 + 3) = v877;
        *(_OWORD *)(a1[2].i64[1] + 16 * v725) = v724;
        *(_DWORD *)(a1[1].i64[1] + 4 * v725) = v873;
        *(_QWORD *)(a1[2].i64[0] + 8 * v725) = v859;
        *(float32x2_t *)&v726 = sk_ray2::intersection(&v879, &v886);
        v727 = a1[1].u32[0] + (unint64_t)(v13 + 3);
        DWORD2(v726) = 0;
        *((float *)&v726 + 3) = v877;
        *(_OWORD *)(a1[2].i64[1] + 16 * v727) = v726;
        *(_DWORD *)(a1[1].i64[1] + 4 * v727) = v873;
        *(_QWORD *)(a1[2].i64[0] + 8 * v727) = v859;
        *(float32x2_t *)&v728 = sk_ray2::intersection(&v879, &v886);
        if (v17)
        {
          v729 = vsub_f32(v854, (float32x2_t)v878.n128_u64[0]);
          v730 = vmul_f32(v729, v729);
          v730.i32[0] = vadd_f32(v730, (float32x2_t)vdup_lane_s32((int32x2_t)v730, 1)).u32[0];
          v731 = vrsqrte_f32((float32x2_t)v730.u32[0]);
          v732 = vmul_f32(v731, vrsqrts_f32((float32x2_t)v730.u32[0], vmul_f32(v731, v731)));
          v730.i32[0] = vmul_f32(v732, vrsqrts_f32((float32x2_t)v730.u32[0], vmul_f32(v732, v732))).u32[0];
          v733 = vsub_f32(*(float32x2_t *)&v728, (float32x2_t)v878.n128_u64[0]);
          v734 = vmul_f32(v733, v733);
          v735 = vadd_f32(v734, (float32x2_t)vdup_lane_s32((int32x2_t)v734, 1)).u32[0];
          v736 = vmul_n_f32(v729, v730.f32[0]);
          v737 = vrsqrte_f32((float32x2_t)v735);
          v738 = vmul_f32(v737, vrsqrts_f32((float32x2_t)v735, vmul_f32(v737, v737)));
          v739 = vmul_n_f32(v733, vmul_f32(v738, vrsqrts_f32((float32x2_t)v735, vmul_f32(v738, v738))).f32[0]);
          *(_QWORD *)&v740 = v816;
          *(float32x2_t *)&v741 = v822;
          DWORD2(v740) = 0;
          v742 = a1[1].u32[0] + (unint64_t)(v13 + 4);
          *((float *)&v740 + 3) = v877;
          *(_OWORD *)(a1[2].i64[1] + 16 * v742) = v740;
          LODWORD(v740) = vmovn_s16(v844).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v742) = v740;
          *(_QWORD *)(a1[2].i64[0] + 8 * v742) = v859;
          DWORD2(v741) = 0;
          v743 = a1[1].u32[0] + (unint64_t)(v13 + 5);
          *((float *)&v741 + 3) = v877;
          v744 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v830, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u)));
          *(int16x4_t *)v744.i8 = vmovn_s32((int32x4_t)v744);
          *(_OWORD *)(a1[2].i64[1] + 16 * v743) = v741;
          v744.i32[0] = vmovn_s16(v744).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v743) = v744.i32[0];
          *(float32x2_t *)&v745 = vmla_f32(*(float32x2_t *)&v728, v245, v739);
          *(_QWORD *)(a1[2].i64[0] + 8 * v743) = v859;
          v746 = a1[1].u32[0] + (unint64_t)(v13 + 6);
          DWORD2(v745) = 0;
          *((float *)&v745 + 3) = v877;
          *(_OWORD *)(a1[2].i64[1] + 16 * v746) = v745;
          *(_DWORD *)(a1[1].i64[1] + 4 * v746) = v744.i32[0];
          *(_QWORD *)(a1[2].i64[0] + 8 * v746) = v859;
          DWORD2(v728) = 0;
          v747 = a1[1].u32[0] + (unint64_t)(v13 + 7);
          *((float *)&v728 + 3) = v877;
          *(_OWORD *)(a1[2].i64[1] + 16 * v747) = v728;
          *(_DWORD *)(a1[1].i64[1] + 4 * v747) = v740;
          *(_QWORD *)(a1[2].i64[0] + 8 * v747) = v859;
          v748 = a1[1].u32[0] + (unint64_t)(v13 + 8);
          *(_OWORD *)(a1[2].i64[1] + 16 * v748) = v837;
          *(_DWORD *)(a1[1].i64[1] + 4 * v748) = v740;
          *(_QWORD *)(a1[2].i64[0] + 8 * v748) = v851;
          *(float32x2_t *)&v749 = vmla_f32(v854, v245, v736);
          v750 = a1[1].u32[0] + (unint64_t)(v13 + 9);
          DWORD2(v749) = 0;
          *((float *)&v749 + 3) = v877;
          *(_OWORD *)(a1[2].i64[1] + 16 * v750) = v749;
          *(_DWORD *)(a1[1].i64[1] + 4 * v750) = v744.i32[0];
          *(_QWORD *)(a1[2].i64[0] + 8 * v750) = v851;
          v751 = a1[1].u32[0] + (unint64_t)(v13 + 12);
          *(_OWORD *)(a1[2].i64[1] + 16 * v751) = v745;
          *(_DWORD *)(a1[1].i64[1] + 4 * v751) = v744.i32[0];
          *(_QWORD *)(a1[2].i64[0] + 8 * v751) = v859;
          v752 = a1[1].u32[0] + (unint64_t)(v13 + 13);
          *(_OWORD *)(a1[2].i64[1] + 16 * v752) = v728;
          *(_DWORD *)(a1[1].i64[1] + 4 * v752) = v740;
          *(_QWORD *)(a1[2].i64[0] + 8 * v752) = v859;
          LODWORD(v13) = v13 + 16;
        }
        else
        {
          LODWORD(v13) = v13 + 4;
        }
        *(float32x2_t *)&v759 = sk_ray2::intersection(&v879, &v886);
        v760 = a1[1].u32[0] + (unint64_t)v13;
        DWORD2(v759) = 0;
        *((float *)&v759 + 3) = v877;
        *(_OWORD *)(a1[2].i64[1] + 16 * v760) = v759;
        LODWORD(v759) = vmovn_s16(v844).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v760) = v759;
        *(_QWORD *)(a1[2].i64[0] + 8 * v760) = v859;
        v388 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v388) = v837;
        *(_DWORD *)(a1[1].i64[1] + 4 * v388) = v759;
        v390 = a1[2].i64[0];
        _D0 = v851;
        goto LABEL_124;
      }
      v513 = v825;
      if (v17)
      {
        v514 = vrsqrte_f32((float32x2_t)v236);
        v515 = vmul_f32(v514, vrsqrts_f32((float32x2_t)v236, vmul_f32(v514, v514)));
        LODWORD(v516) = vmul_f32(v515, vrsqrts_f32((float32x2_t)v236, vmul_f32(v515, v515))).u32[0];
        *(float32x2_t *)&v517 = v876;
        *(float32x2_t *)&v518 = v840;
        v519 = vsub_f32(v840, (float32x2_t)v878.n128_u64[0]);
        v520 = vmul_f32(v519, v519);
        v520.i32[0] = vadd_f32(v520, (float32x2_t)vdup_lane_s32((int32x2_t)v520, 1)).u32[0];
        v521 = vrsqrte_f32((float32x2_t)v520.u32[0]);
        v522 = vmul_f32(v521, vrsqrts_f32((float32x2_t)v520.u32[0], vmul_f32(v521, v521)));
        *(float32x2_t *)&v523 = vmla_n_f32(v840, vmul_n_f32(v519, vmul_f32(v522, vrsqrts_f32((float32x2_t)v520.u32[0], vmul_f32(v522, v522))).f32[0]), v812.f32[0]);
        if (v16)
          v524 = v18;
        else
          v524 = 1.0;
        DWORD2(v523) = 0;
        v525 = a1[1].u32[0] + (unint64_t)(v13 - 10);
        *((float *)&v523 + 3) = v524;
        v513.i32[3] = 1.0;
        *(_OWORD *)(a1[2].i64[1] + 16 * v525) = v523;
        _D0 = __PAIR64__(1.0, v859);
        v526 = vmulq_n_f32(v513, v866);
        v527 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        v528 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v513, (float32x4_t)0), v527));
        *(int16x4_t *)v528.i8 = vmovn_s32((int32x4_t)v528);
        v529 = vmovn_s16(v528).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v525) = v529;
        *(_QWORD *)(a1[2].i64[0] + 8 * v525) = __PAIR64__(1.0, v859);
        v530 = a1[1].u32[0] + (unint64_t)(v13 - 9);
        DWORD2(v518) = 0;
        *((float *)&v518 + 3) = v524;
        v531 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(v526, v527));
        *(int16x4_t *)v531.f32 = vmovn_s32((int32x4_t)v531);
        *(_OWORD *)(a1[2].i64[1] + 16 * v530) = v518;
        v526.i32[0] = vmovn_s16((int16x8_t)v531).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v530) = v526.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v530) = __PAIR64__(1.0, v859);
        v532 = a1[1].u32[0] + (unint64_t)(v13 - 6);
        DWORD2(v517) = 0;
        *((float *)&v517 + 3) = v524;
        *(_OWORD *)(a1[2].i64[1] + 16 * v532) = v517;
        *(_DWORD *)(a1[1].i64[1] + 4 * v532) = v526.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v532) = v859;
        *(float32x2_t *)&v533 = vmla_n_f32(v876, vmul_n_f32(v847, v516), v812.f32[0]);
        v534 = a1[1].u32[0] + (unint64_t)(v13 - 5);
        DWORD2(v533) = 0;
        *((float *)&v533 + 3) = v524;
        *(_OWORD *)(a1[2].i64[1] + 16 * v534) = v533;
        *(_DWORD *)(a1[1].i64[1] + 4 * v534) = v529;
        *(_QWORD *)(a1[2].i64[0] + 8 * v534) = v859;
        v535 = a1[1].u32[0] + (unint64_t)(v13 - 2);
        *(_OWORD *)(a1[2].i64[1] + 16 * v535) = v518;
        *(_DWORD *)(a1[1].i64[1] + 4 * v535) = v526.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v535) = __PAIR64__(1.0, v859);
        v536 = a1[1].u32[0] + (unint64_t)(v13 - 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v536) = v517;
        *(_DWORD *)(a1[1].i64[1] + 4 * v536) = v526.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v536) = v859;
        *(float32x2_t *)&v541 = v854;
        v537 = vsub_f32(v854, (float32x2_t)v878.n128_u64[0]);
        *(float32x2_t *)v527.f32 = vmul_f32(v537, v537);
        v527.i32[0] = vadd_f32(*(float32x2_t *)v527.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v527.f32, 1)).u32[0];
        v538 = vrsqrte_f32((float32x2_t)v527.u32[0]);
        v539 = vmul_f32(v538, vrsqrts_f32((float32x2_t)v527.u32[0], vmul_f32(v538, v538)));
        DWORD2(v541) = 0;
        v540 = a1[1].u32[0] + v13;
        *((float *)&v541 + 3) = v524;
        *(_OWORD *)(a1[2].i64[1] + 16 * v540) = v541;
        *(_DWORD *)(a1[1].i64[1] + 4 * v540) = v526.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v540) = __PAIR64__(1.0, v859);
        *(float32x2_t *)v527.f32 = vmla_n_f32(v854, vmul_n_f32(v537, vmul_f32(v539, vrsqrts_f32((float32x2_t)v527.u32[0], vmul_f32(v539, v539))).f32[0]), v812.f32[0]);
        v542 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        v527.i32[2] = 0;
        v527.f32[3] = v524;
        *(float32x4_t *)(a1[2].i64[1] + 16 * v542) = v527;
        *(_DWORD *)(a1[1].i64[1] + 4 * v542) = v529;
        *(_QWORD *)(a1[2].i64[0] + 8 * v542) = __PAIR64__(1.0, v859);
        v543 = a1[1].u32[0] + (unint64_t)(v13 + 4);
        *(_OWORD *)(a1[2].i64[1] + 16 * v543) = v533;
        *(_DWORD *)(a1[1].i64[1] + 4 * v543) = v529;
        *(_QWORD *)(a1[2].i64[0] + 8 * v543) = v859;
        v544 = a1[1].u32[0] + (unint64_t)(v13 + 5);
        *(_OWORD *)(a1[2].i64[1] + 16 * v544) = v517;
        *(_DWORD *)(a1[1].i64[1] + 4 * v544) = v526.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v544) = v859;
        LODWORD(v13) = v13 + 8;
      }
      else
      {
        if (v16)
          v753 = v18;
        else
          v753 = 1.0;
        v754 = a1[1].u32[0] + (unint64_t)(v13 - 2);
        *(float32x2_t *)&v755 = v840;
        DWORD2(v755) = 0;
        *((float *)&v755 + 3) = v753;
        v513.i32[3] = 1.0;
        v531 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        *(int16x4_t *)v531.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v513, v866), v531)));
        *(_OWORD *)(a1[2].i64[1] + 16 * v754) = v755;
        LODWORD(v755) = vmovn_s16((int16x8_t)v531).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v754) = v755;
        _D0 = __PAIR64__(1.0, v859);
        *(_QWORD *)(a1[2].i64[0] + 8 * v754) = __PAIR64__(1.0, v859);
        *(float32x2_t *)&v517 = v876;
        DWORD2(v517) = 0;
        v756 = a1[1].u32[0] + (unint64_t)(v13 - 1);
        *((float *)&v517 + 3) = v753;
        *(_OWORD *)(a1[2].i64[1] + 16 * v756) = v517;
        *(_DWORD *)(a1[1].i64[1] + 4 * v756) = v755;
        *(_QWORD *)(a1[2].i64[0] + 8 * v756) = v859;
        *(float32x2_t *)&v541 = v854;
        DWORD2(v541) = 0;
        *((float *)&v541 + 3) = v753;
      }
      v757 = a1[1].u32[0] + (unint64_t)v13;
      *(_OWORD *)(a1[2].i64[1] + 16 * v757) = v517;
      v758 = vmovn_s16((int16x8_t)v531).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v757) = v758;
      *(_QWORD *)(a1[2].i64[0] + 8 * v757) = v859;
      v388 = a1[1].u32[0] + (unint64_t)(v13 + 1);
      *(_OWORD *)(a1[2].i64[1] + 16 * v388) = v541;
    }
    *(_DWORD *)(a1[1].i64[1] + 4 * v388) = v758;
LABEL_123:
    v390 = a1[2].i64[0];
LABEL_124:
    *(_QWORD *)(v390 + 8 * v388) = _D0;
    goto LABEL_184;
  }
  v36 = a1[10].f32[0];
  if (v35 == 1)
  {
    v122 = vmlas_n_f32((float)-*((float *)&a7 + 1) * *(float *)&a4, *((float *)&a4 + 1), *(float *)&a7);
    if (v122 > 0.0)
    {
      v853 = a1[12].f32[2];
      v860 = a1[12].f32[3];
      v868 = a1[12].f32[0];
      v813 = a1[9].f32[2];
      v827 = a1[11];
      v123 = COERCE_DOUBLE(vsub_f32((float32x2_t)a9.n128_u64[0], *(float32x2_t *)&a8));
      v892 = v123;
      v893 = vneg_f32(*(float32x2_t *)&a7);
      v124 = COERCE_DOUBLE(vsub_f32((float32x2_t)a9.n128_u64[0], a5));
      v890 = v124;
      v891 = a4;
      v886.i32[0] = 0;
      v885[0].i32[0] = 0;
      sk_ray2::intersect((float32x2_t *)&v892, (float32x2_t *)&v890, (float *)&v886, (float *)v885);
      v126 = COERCE_DOUBLE(vmla_n_f32(*(float32x2_t *)&v892, v893, v886.f32[0]));
      v127 = vsub_f32(*(float32x2_t *)&v126, *(float32x2_t *)&v124);
      v47 = sqrtf(vaddv_f32(vmul_f32(v127, v127))) <= sqrtf(v33);
      v128 = vsub_f32(*(float32x2_t *)&v126, *(float32x2_t *)&v123);
      v129 = sqrtf(vaddv_f32(vmul_f32(v128, v128)));
      v130 = sqrtf(v34);
      v131 = v47 && v129 <= v130;
      if (v131)
        *(double *)&v132 = v126;
      else
        *(double *)&v132 = v123;
      if (v131)
        *(double *)&v133 = v126;
      else
        *(double *)&v133 = v124;
      *(float *)&v134 = v860;
      v135 = vsub_f32(*(float32x2_t *)&v133, (float32x2_t)v878.n128_u64[0]);
      v136 = v860 - fabsf(vaddv_f32(vmul_f32(v23, v135)) / v36);
      v137 = vsub_f32(*(float32x2_t *)&v132, (float32x2_t)v878.n128_u64[0]);
      v138 = v860 + fabsf(vaddv_f32(vmul_f32(v29, v137)) / v36);
      *(float32x2_t *)&v139 = vadd_f32(a5, (float32x2_t)v878.n128_u64[0]);
      if (v17)
      {
        v140 = vmul_f32(a5, a5);
        v140.i32[0] = vadd_f32(v140, (float32x2_t)vdup_lane_s32((int32x2_t)v140, 1)).u32[0];
        v141 = vrsqrte_f32((float32x2_t)v140.u32[0]);
        v142 = vmul_f32(v141, vrsqrts_f32((float32x2_t)v140.u32[0], vmul_f32(v141, v141)));
        v143 = vmul_n_f32(a5, vmul_f32(v142, vrsqrts_f32((float32x2_t)v140.u32[0], vmul_f32(v142, v142))).f32[0]);
        *(float32x2_t *)&v144 = vmla_n_f32(*(float32x2_t *)&v139, v143, v813);
        v145 = vmul_f32(v135, v135);
        v145.i32[0] = vadd_f32(v145, (float32x2_t)vdup_lane_s32((int32x2_t)v145, 1)).u32[0];
        v146 = vrsqrte_f32((float32x2_t)v145.u32[0]);
        v147 = vmul_f32(v146, vrsqrts_f32((float32x2_t)v145.u32[0], vmul_f32(v146, v146)));
        v148 = vmul_n_f32(v135, vmul_f32(v147, vrsqrts_f32((float32x2_t)v145.u32[0], vmul_f32(v147, v147))).f32[0]);
        if (v16)
          v149 = v853;
        else
          v149 = 1.0;
        v150 = a1[1].u32[0] + (unint64_t)(v13 - 10);
        DWORD2(v144) = 0;
        *((float *)&v144 + 3) = v149;
        v151 = v827;
        v151.i32[3] = 1.0;
        v152 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        _Q16 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v151, (float32x4_t)0), v152));
        *(int16x4_t *)_Q16.i8 = vmovn_s32((int32x4_t)_Q16);
        *(_OWORD *)(a1[2].i64[1] + 16 * v150) = v144;
        v154 = vmovn_s16(_Q16).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v150) = v154;
        __asm { FMOV            V16.2S, #1.0 }
        *(float *)_Q16.i32 = v860;
        *(_QWORD *)(a1[2].i64[0] + 8 * v150) = _Q16.i64[0];
        v155 = a1[1].u32[0] + (unint64_t)(v13 - 9);
        DWORD2(v139) = 0;
        *((float *)&v139 + 3) = v149;
        v828 = v151;
        v125 = vmulq_n_f32(v151, v868);
        *(int16x4_t *)v125.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v125, v152)));
        *(_OWORD *)(a1[2].i64[1] + 16 * v155) = v139;
        v152.i32[0] = vmovn_s16((int16x8_t)v125).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v155) = v152.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v155) = _Q16.i64[0];
        *(float32x2_t *)&v156 = vmla_n_f32(*(float32x2_t *)&v133, v148, v813);
        v157 = a1[1].u32[0] + (unint64_t)(v13 - 6);
        DWORD2(v133) = 0;
        *((float *)&v133 + 3) = v149;
        *(_OWORD *)(a1[2].i64[1] + 16 * v157) = v133;
        *(_DWORD *)(a1[1].i64[1] + 4 * v157) = v152.i32[0];
        v158 = LODWORD(v136);
        *(_QWORD *)(a1[2].i64[0] + 8 * v157) = LODWORD(v136);
        DWORD2(v156) = 0;
        v159 = a1[1].u32[0] + (unint64_t)(v13 - 5);
        *((float *)&v156 + 3) = v149;
        *(_OWORD *)(a1[2].i64[1] + 16 * v159) = v156;
        *(_DWORD *)(a1[1].i64[1] + 4 * v159) = v154;
        *(_QWORD *)(a1[2].i64[0] + 8 * v159) = LODWORD(v136);
      }
      else
      {
        if (v16)
          v149 = v853;
        else
          v149 = 1.0;
        DWORD2(v139) = 0;
        *((float *)&v139 + 3) = v149;
        v391 = v827;
        v391.i32[3] = 1.0;
        v828 = v391;
        v392 = vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v391, v868), (float32x4_t)vdupq_n_s32(0x437F0000u)));
        DWORD2(v133) = 0;
        *((float *)&v133 + 3) = v149;
        v158 = LODWORD(v136);
        v393 = vmul_f32(a5, a5);
        *(int16x4_t *)v125.f32 = vmovn_s32(v392);
        v392.i32[0] = vadd_f32(v393, (float32x2_t)vdup_lane_s32((int32x2_t)v393, 1)).u32[0];
        v394 = vrsqrte_f32((float32x2_t)v392.u32[0]);
        v395 = vmul_f32(v394, vrsqrts_f32((float32x2_t)v392.u32[0], vmul_f32(v394, v394)));
        v143 = vmul_n_f32(a5, vmul_f32(v395, vrsqrts_f32((float32x2_t)v392.u32[0], vmul_f32(v395, v395))).f32[0]);
      }
      v809 = (int16x8_t)v125;
      v396 = a1[1].u32[0] + (unint64_t)(v13 - 2);
      *(_OWORD *)(a1[2].i64[1] + 16 * v396) = v139;
      v397 = vmovn_s16((int16x8_t)v125).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v396) = v397;
      v398 = __PAIR64__(1.0, LODWORD(v860));
      *(_QWORD *)(a1[2].i64[0] + 8 * v396) = __PAIR64__(1.0, LODWORD(v860));
      v399 = a1[1].u32[0] + (unint64_t)(v13 - 1);
      *(_OWORD *)(a1[2].i64[1] + 16 * v399) = v133;
      *(_DWORD *)(a1[1].i64[1] + 4 * v399) = v397;
      *(_QWORD *)(a1[2].i64[0] + 8 * v399) = v158;
      *(_QWORD *)&v400 = v878.n128_u64[0];
      DWORD2(v400) = 0;
      v401 = a1[1].u32[0] + v13;
      *((float *)&v400 + 3) = v149;
      *(_OWORD *)(a1[2].i64[1] + 16 * v401) = v400;
      *(_DWORD *)(a1[1].i64[1] + 4 * v401) = v397;
      HIDWORD(v134) = 0.5;
      *(_QWORD *)(a1[2].i64[0] + 8 * v401) = v134;
      v402 = a1[1].u32[0] + (unint64_t)(v13 + 1);
      *(_OWORD *)(a1[2].i64[1] + 16 * v402) = v133;
      *(_DWORD *)(a1[1].i64[1] + 4 * v402) = v397;
      *(_QWORD *)(a1[2].i64[0] + 8 * v402) = v158;
      v403 = a1[1].u32[0] + (unint64_t)(v13 + 2);
      *(_OWORD *)(a1[2].i64[1] + 16 * v403) = v139;
      *(_DWORD *)(a1[1].i64[1] + 4 * v403) = v397;
      *(_QWORD *)(a1[2].i64[0] + 8 * v403) = __PAIR64__(1.0, LODWORD(v860));
      v404 = a1[1].u32[0] + (unint64_t)(v13 + 3);
      *(_OWORD *)(a1[2].i64[1] + 16 * v404) = v139;
      *(_DWORD *)(a1[1].i64[1] + 4 * v404) = v397;
      *(_QWORD *)(a1[2].i64[0] + 8 * v404) = __PAIR64__(1.0, LODWORD(v860));
      v405 = a1[1].u32[0] + (unint64_t)(v13 + 4);
      v841 = v400;
      *(_OWORD *)(a1[2].i64[1] + 16 * v405) = v400;
      *(_DWORD *)(a1[1].i64[1] + 4 * v405) = v397;
      v863 = v134;
      *(_QWORD *)(a1[2].i64[0] + 8 * v405) = v134;
      v406 = a1[1].u32[0] + (unint64_t)(v13 + 5);
      v801 = (float32x2_t)v132;
      DWORD2(v132) = 0;
      *((float *)&v132 + 3) = v149;
      *(_OWORD *)(a1[2].i64[1] + 16 * v406) = v132;
      *(_DWORD *)(a1[1].i64[1] + 4 * v406) = v397;
      v805 = LODWORD(v138);
      v807 = v132;
      *(_QWORD *)(a1[2].i64[0] + 8 * v406) = LODWORD(v138);
      *(float32x2_t *)&v407 = vadd_f32(*(float32x2_t *)&a8, (float32x2_t)v878.n128_u64[0]);
      v799 = (float32x2_t)v407;
      DWORD2(v407) = 0;
      v408 = a1[1].u32[0] + (unint64_t)(v13 + 6);
      v848 = v149;
      v856 = v398;
      *((float *)&v407 + 3) = v149;
      *(_OWORD *)(a1[2].i64[1] + 16 * v408) = v407;
      *(_DWORD *)(a1[1].i64[1] + 4 * v408) = v397;
      *(_QWORD *)(a1[2].i64[0] + 8 * v408) = v398;
      v409 = a1[1].u32[0] + (unint64_t)(v13 + 7);
      v803 = v407;
      *(_OWORD *)(a1[2].i64[1] + 16 * v409) = v407;
      *(_DWORD *)(a1[1].i64[1] + 4 * v409) = v397;
      *(_QWORD *)(a1[2].i64[0] + 8 * v409) = v398;
      LODWORD(v13) = v13 + 8;
      *(float32x2_t *)&v407 = vmul_f32(*(float32x2_t *)&a8, *(float32x2_t *)&a8);
      LODWORD(v407) = vadd_f32(*(float32x2_t *)&v407, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v407, 1)).u32[0];
      v410 = vrsqrte_f32((float32x2_t)v407);
      v411 = vmul_f32(v410, vrsqrts_f32((float32x2_t)v407, vmul_f32(v410, v410)));
      v412 = vmul_n_f32(*(float32x2_t *)&a8, vmul_f32(v411, vrsqrts_f32((float32x2_t)v407, vmul_f32(v411, v411))).f32[0]);
      v413 = acosf(vaddv_f32(vmul_f32(v412, v143)));
      v414 = (float)(a1[9].f32[0] + (float)(a1[9].f32[2] * 2.0)) * 0.14;
      v415 = (int)((float)((float)(ceilf(v414) * 2.0) + 1.0) * (v413 / 3.14159265) + 1.0);
      if (v415 >= 1)
      {
        v416 = 0;
        v417 = (float)v415;
        v418 = -*((float *)&a8 + 1);
        v419 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v828, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u)));
        *(int16x4_t *)v419.i8 = vmovn_s32((int32x4_t)v419);
        v834 = vmovn_s16(v809).u32[0];
        v817 = vmovn_s16(v419).u32[0];
        do
        {
          v420 = __sincosf_stret((float)(v413 * (float)v416) / v417);
          v421.f32[0] = (float)(v420.__sinval * v418) + (float)(*(float *)&a8 * v420.__cosval);
          v421.f32[1] = (float)(*((float *)&a8 + 1) * v420.__cosval) + (float)(*(float *)&a8 * v420.__sinval);
          v871 = vadd_f32(v421, (float32x2_t)v878.n128_u64[0]);
          v422 = __sincosf_stret((float)(v413 * (float)++v416) / v417);
          v423.f32[0] = (float)(v422.__sinval * v418) + (float)(*(float *)&a8 * v422.__cosval);
          v423.f32[1] = (float)(*((float *)&a8 + 1) * v422.__cosval) + (float)(*(float *)&a8 * v422.__sinval);
          v424 = a1[1].u32[0] + (unint64_t)v13;
          *(float32x2_t *)&v425 = v871;
          DWORD2(v425) = 0;
          *((float *)&v425 + 3) = v848;
          *(_OWORD *)(a1[2].i64[1] + 16 * v424) = v425;
          *(_DWORD *)(a1[1].i64[1] + 4 * v424) = v834;
          v426 = vadd_f32(v423, (float32x2_t)v878.n128_u64[0]);
          *(_QWORD *)(a1[2].i64[0] + 8 * v424) = v856;
          v427 = a1[1].u32[0] + (unint64_t)(v13 + 1);
          *(float32x2_t *)&v428 = v426;
          *((_QWORD *)&v428 + 1) = __PAIR64__(LODWORD(v848), 0);
          *(_OWORD *)(a1[2].i64[1] + 16 * v427) = v428;
          *(_DWORD *)(a1[1].i64[1] + 4 * v427) = v834;
          *(_QWORD *)(a1[2].i64[0] + 8 * v427) = v856;
          v429 = a1[1].u32[0] + (unint64_t)(v13 + 2);
          *(_OWORD *)(a1[2].i64[1] + 16 * v429) = v841;
          *(_DWORD *)(a1[1].i64[1] + 4 * v429) = v834;
          *(_QWORD *)(a1[2].i64[0] + 8 * v429) = v863;
          v430 = a1[1].u32[0] + (unint64_t)(v13 + 3);
          *(_OWORD *)(a1[2].i64[1] + 16 * v430) = v841;
          *(_DWORD *)(a1[1].i64[1] + 4 * v430) = v834;
          *(_QWORD *)(a1[2].i64[0] + 8 * v430) = v863;
          if (a1[9].i8[4])
          {
            v431 = vsub_f32(v871, (float32x2_t)v878.n128_u64[0]);
            v432 = vmul_f32(v431, v431);
            v432.i32[0] = vadd_f32(v432, (float32x2_t)vdup_lane_s32((int32x2_t)v432, 1)).u32[0];
            v433 = vrsqrte_f32((float32x2_t)v432.u32[0]);
            v434 = vmul_f32(v433, vrsqrts_f32((float32x2_t)v432.u32[0], vmul_f32(v433, v433)));
            v435 = vmul_n_f32(v431, vmul_f32(v434, vrsqrts_f32((float32x2_t)v432.u32[0], vmul_f32(v434, v434))).f32[0]);
            v436 = vsub_f32(v426, (float32x2_t)v878.n128_u64[0]);
            v437 = vmul_f32(v436, v436);
            v437.i32[0] = vadd_f32(v437, (float32x2_t)vdup_lane_s32((int32x2_t)v437, 1)).u32[0];
            v438 = vrsqrte_f32((float32x2_t)v437.u32[0]);
            v439 = vmul_f32(v438, vrsqrts_f32((float32x2_t)v437.u32[0], vmul_f32(v438, v438)));
            v440 = a1[9].f32[2];
            *(float32x2_t *)&v441 = vmla_n_f32(v426, vmul_n_f32(v436, vmul_f32(v439, vrsqrts_f32((float32x2_t)v437.u32[0], vmul_f32(v439, v439))).f32[0]), v440);
            v442 = a1[1].u32[0] + (unint64_t)(v13 + 4);
            *(_OWORD *)(a1[2].i64[1] + 16 * v442) = v425;
            *(_DWORD *)(a1[1].i64[1] + 4 * v442) = v834;
            *(_QWORD *)(a1[2].i64[0] + 8 * v442) = v856;
            v443 = a1[1].u32[0] + (unint64_t)(v13 + 5);
            *(_OWORD *)(a1[2].i64[1] + 16 * v443) = v428;
            *(_DWORD *)(a1[1].i64[1] + 4 * v443) = v834;
            *(_QWORD *)(a1[2].i64[0] + 8 * v443) = v856;
            DWORD2(v441) = 0;
            v444 = a1[1].u32[0] + (unint64_t)(v13 + 6);
            *((float *)&v441 + 3) = v848;
            *(_OWORD *)(a1[2].i64[1] + 16 * v444) = v441;
            *(_DWORD *)(a1[1].i64[1] + 4 * v444) = v817;
            *(_QWORD *)(a1[2].i64[0] + 8 * v444) = v856;
            *(float32x2_t *)&v445 = vmla_n_f32(v871, v435, v440);
            v446 = a1[1].u32[0] + (unint64_t)(v13 + 7);
            DWORD2(v445) = 0;
            *((float *)&v445 + 3) = v848;
            *(_OWORD *)(a1[2].i64[1] + 16 * v446) = v445;
            *(_DWORD *)(a1[1].i64[1] + 4 * v446) = v817;
            *(_QWORD *)(a1[2].i64[0] + 8 * v446) = v856;
            LODWORD(v13) = v13 + 8;
          }
          else
          {
            LODWORD(v13) = v13 + 4;
          }
        }
        while (v415 != v416);
      }
      if (v17)
      {
        *(float32x2_t *)&v447 = vmla_n_f32(v799, v412, v813);
        v448 = vmul_f32(v137, v137);
        v448.i32[0] = vadd_f32(v448, (float32x2_t)vdup_lane_s32((int32x2_t)v448, 1)).u32[0];
        v449 = vrsqrte_f32((float32x2_t)v448.u32[0]);
        v450 = vmul_f32(v449, vrsqrts_f32((float32x2_t)v448.u32[0], vmul_f32(v449, v449)));
        v451 = vmul_n_f32(v137, vmul_f32(v450, vrsqrts_f32((float32x2_t)v448.u32[0], vmul_f32(v450, v450))).f32[0]);
        v452 = a1[1].u32[0] + (unint64_t)v13;
        v453 = v803;
        *(_OWORD *)(a1[2].i64[1] + 16 * v452) = v803;
        v454 = v809;
        v450.i32[0] = vmovn_s16(v809).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v452) = v450.i32[0];
        v455 = v856;
        *(_QWORD *)(a1[2].i64[0] + 8 * v452) = v856;
        v456 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        DWORD2(v447) = 0;
        *((float *)&v447 + 3) = v848;
        v457 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v828, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u)));
        *(int16x4_t *)v457.i8 = vmovn_s32((int32x4_t)v457);
        *(_OWORD *)(a1[2].i64[1] + 16 * v456) = v447;
        v457.i32[0] = vmovn_s16(v457).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v456) = v457.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v456) = v856;
        *(float32x2_t *)&v458 = vmla_n_f32(v801, v451, v813);
        v459 = a1[1].u32[0] + (unint64_t)(v13 + 4);
        DWORD2(v458) = 0;
        *((float *)&v458 + 3) = v848;
        *(_OWORD *)(a1[2].i64[1] + 16 * v459) = v458;
        *(_DWORD *)(a1[1].i64[1] + 4 * v459) = v457.i32[0];
        v461 = v805;
        v460 = v807;
        *(_QWORD *)(a1[2].i64[0] + 8 * v459) = v805;
        v462 = a1[1].u32[0] + (unint64_t)(v13 + 5);
        *(_OWORD *)(a1[2].i64[1] + 16 * v462) = v807;
        *(_DWORD *)(a1[1].i64[1] + 4 * v462) = v450.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v462) = v805;
        LODWORD(v13) = v13 + 8;
      }
      else
      {
        v460 = v807;
        v454 = v809;
        v455 = v856;
        v453 = v803;
        v461 = v805;
      }
      v510 = a1[1].u32[0] + (unint64_t)v13;
      *(_OWORD *)(a1[2].i64[1] + 16 * v510) = v460;
      v511 = vmovn_s16(v454).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v510) = v511;
      *(_QWORD *)(a1[2].i64[0] + 8 * v510) = v461;
      v512 = a1[1].u32[0] + (unint64_t)(v13 + 1);
      *(_OWORD *)(a1[2].i64[1] + 16 * v512) = v453;
      *(_DWORD *)(a1[1].i64[1] + 4 * v512) = v511;
      *(_QWORD *)(a1[2].i64[0] + 8 * v512) = v455;
      goto LABEL_184;
    }
    if (v122 >= 0.0)
    {
      if (v31)
        v360 = 0;
      else
        v360 = (v30.i32[1] & 0x60000000) == 0;
      if (v360)
      {
        *(float32x2_t *)&v784 = vadd_f32(a5, (float32x2_t)a9.n128_u64[0]);
        if (a1[9].i8[5])
          v785 = a1[12].f32[2];
        else
          v785 = 1.0;
        DWORD2(v784) = 0;
        *((float *)&v784 + 3) = v785;
        v15.i32[3] = 1.0;
        v786 = a1[1].u32[0] + (unint64_t)(v13 - 2);
        v787 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v15, v14), (float32x4_t)vdupq_n_s32(0x437F0000u)));
        *(int16x4_t *)v787.i8 = vmovn_s32((int32x4_t)v787);
        *(_OWORD *)(a1[2].i64[1] + 16 * v786) = v784;
        v787.i32[0] = vmovn_s16(v787).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v786) = v787.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v786) = __PAIR64__(1.0, v9);
        *(float32x2_t *)&v788 = vsub_f32((float32x2_t)a9.n128_u64[0], a5);
        v789 = a1[1].u32[0] + (unint64_t)(v13 - 1);
        DWORD2(v788) = 0;
        *((float *)&v788 + 3) = v785;
        *(_OWORD *)(a1[2].i64[1] + 16 * v789) = v788;
        *(_DWORD *)(a1[1].i64[1] + 4 * v789) = v787.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v789) = v9;
        v790 = a1[1].u32[0] + v13;
        *(_OWORD *)(a1[2].i64[1] + 16 * v790) = v788;
        *(_DWORD *)(a1[1].i64[1] + 4 * v790) = v787.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v790) = v9;
        v791 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v791) = v784;
        *(_DWORD *)(a1[1].i64[1] + 4 * v791) = v787.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v791) = __PAIR64__(1.0, v9);
      }
      else
      {
        v361 = vmul_n_f32(v23, a1[9].f32[3]);
        *(float32x2_t *)&v362 = vadd_f32(vadd_f32(*(float32x2_t *)&a8, (float32x2_t)a9.n128_u64[0]), v361);
        if (a1[9].i8[5])
          v363 = a1[12].f32[2];
        else
          v363 = 1.0;
        DWORD2(v362) = 0;
        *((float *)&v362 + 3) = v363;
        v15.i32[3] = 1.0;
        v364 = a1[1].u32[0] + (unint64_t)(v13 - 2);
        v365 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v15, v14), (float32x4_t)vdupq_n_s32(0x437F0000u)));
        *(int16x4_t *)v365.i8 = vmovn_s32((int32x4_t)v365);
        *(_OWORD *)(a1[2].i64[1] + 16 * v364) = v362;
        v365.i32[0] = vmovn_s16(v365).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v364) = v365.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v364) = __PAIR64__(1.0, v9);
        *(float32x2_t *)&v366 = vadd_f32(vsub_f32((float32x2_t)a9.n128_u64[0], *(float32x2_t *)&a8), v361);
        v367 = a1[1].u32[0] + (unint64_t)(v13 - 1);
        DWORD2(v366) = 0;
        *((float *)&v366 + 3) = v363;
        *(_OWORD *)(a1[2].i64[1] + 16 * v367) = v366;
        *(_DWORD *)(a1[1].i64[1] + 4 * v367) = v365.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v367) = v9;
        v368 = a1[1].u32[0] + v13;
        *(_OWORD *)(a1[2].i64[1] + 16 * v368) = v366;
        *(_DWORD *)(a1[1].i64[1] + 4 * v368) = v365.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v368) = v9;
        v369 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v369) = v362;
        *(_DWORD *)(a1[1].i64[1] + 4 * v369) = v365.i32[0];
        *(_QWORD *)(a1[2].i64[0] + 8 * v369) = __PAIR64__(1.0, v9);
      }
      goto LABEL_184;
    }
    v855 = a1[12].f32[2];
    v862 = a1[12].f32[3];
    v870 = a1[12].f32[0];
    v815 = v10;
    v831 = a1[11];
    v267 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)&a8, (float32x2_t)a9.n128_u64[0]));
    v892 = v267;
    v893 = vneg_f32(*(float32x2_t *)&a7);
    v268 = COERCE_DOUBLE(vadd_f32(a5, (float32x2_t)a9.n128_u64[0]));
    v890 = v268;
    v891 = a4;
    v886.i32[0] = 0;
    v885[0].i32[0] = 0;
    sk_ray2::intersect((float32x2_t *)&v892, (float32x2_t *)&v890, (float *)&v886, (float *)v885);
    *(_QWORD *)&v270 = v878.n128_u64[0];
    v271 = COERCE_DOUBLE(vmla_n_f32(*(float32x2_t *)&v892, v893, v886.f32[0]));
    *(float32x2_t *)&v272 = vsub_f32((float32x2_t)v878.n128_u64[0], a5);
    v273 = vsub_f32(*(float32x2_t *)&v271, *(float32x2_t *)&v272);
    v47 = sqrtf(vaddv_f32(vmul_f32(v273, v273))) <= sqrtf(v33);
    *(float32x2_t *)&v274 = vsub_f32((float32x2_t)v878.n128_u64[0], *(float32x2_t *)&a8);
    v275 = vsub_f32(*(float32x2_t *)&v271, *(float32x2_t *)&v274);
    v276 = sqrtf(vaddv_f32(vmul_f32(v275, v275)));
    v277 = sqrtf(v34);
    v278 = v47 && v276 <= v277;
    if (v278)
      *(double *)&v279 = v271;
    else
      *(double *)&v279 = v267;
    *(float *)&v280 = v862;
    if (v278)
      *(double *)&v281 = v271;
    else
      *(double *)&v281 = v268;
    v282 = vsub_f32(*(float32x2_t *)&v281, (float32x2_t)v878.n128_u64[0]);
    v283 = v862 - fabsf(vaddv_f32(vmul_f32(v23, v282)) / v36);
    v284 = vsub_f32(*(float32x2_t *)&v279, (float32x2_t)v878.n128_u64[0]);
    *(float *)&v285 = v862 + fabsf(vaddv_f32(vmul_f32(v29, v284)) / v36);
    if (v17)
    {
      v286 = vmul_f32(v282, v282);
      v286.i32[0] = vadd_f32(v286, (float32x2_t)vdup_lane_s32((int32x2_t)v286, 1)).u32[0];
      v287 = vrsqrte_f32((float32x2_t)v286.u32[0]);
      v288 = vmul_f32(v287, vrsqrts_f32((float32x2_t)v286.u32[0], vmul_f32(v287, v287)));
      *(float32x2_t *)&v289 = vmla_n_f32(*(float32x2_t *)&v281, vmul_n_f32(v282, vmul_f32(v288, vrsqrts_f32((float32x2_t)v286.u32[0], vmul_f32(v288, v288))).f32[0]), v815.f32[0]);
      v290 = vmul_f32(a5, a5);
      v290.i32[0] = vadd_f32(v290, (float32x2_t)vdup_lane_s32((int32x2_t)v290, 1)).u32[0];
      v291 = vrsqrte_f32((float32x2_t)v290.u32[0]);
      v292 = vmul_f32(v291, vrsqrts_f32((float32x2_t)v290.u32[0], vmul_f32(v291, v291)));
      v293 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v292, vrsqrts_f32((float32x2_t)v290.u32[0], vmul_f32(v292, v292))), 0);
      v294 = vmul_f32(a5, vneg_f32(v293));
      if (v16)
        v295 = v855;
      else
        v295 = 1.0;
      DWORD2(v289) = 0;
      v296 = a1[1].u32[0] + (unint64_t)(v13 - 10);
      *((float *)&v289 + 3) = v295;
      v297 = v831;
      v297.i32[3] = 1.0;
      v298 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      _Q6 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v297, (float32x4_t)0), v298));
      *(int16x4_t *)_Q6.i8 = vmovn_s32((int32x4_t)_Q6);
      *(_OWORD *)(a1[2].i64[1] + 16 * v296) = v289;
      v300 = vmovn_s16(_Q6).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v296) = v300;
      __asm { FMOV            V6.2S, #1.0 }
      *(float *)_Q6.i32 = v862;
      *(_QWORD *)(a1[2].i64[0] + 8 * v296) = _Q6.i64[0];
      DWORD2(v281) = 0;
      v301 = a1[1].u32[0] + (unint64_t)(v13 - 9);
      *((float *)&v281 + 3) = v295;
      v832 = v297;
      v269 = vmulq_n_f32(v297, v870);
      *(int16x4_t *)v269.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v269, v298)));
      *(_OWORD *)(a1[2].i64[1] + 16 * v301) = v281;
      v298.i32[0] = vmovn_s16((int16x8_t)v269).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v301) = v298.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v301) = _Q6.i64[0];
      *(float32x2_t *)_Q6.i8 = vmla_n_f32(*(float32x2_t *)&v272, v294, v815.f32[0]);
      v302 = a1[1].u32[0] + (unint64_t)(v13 - 6);
      DWORD2(v272) = 0;
      *((float *)&v272 + 3) = v295;
      *(_OWORD *)(a1[2].i64[1] + 16 * v302) = v272;
      *(_DWORD *)(a1[1].i64[1] + 4 * v302) = v298.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v302) = LODWORD(v283);
      _Q6.i32[2] = 0;
      v303 = a1[1].u32[0] + (unint64_t)(v13 - 5);
      *(float *)&_Q6.i32[3] = v295;
      *(int16x8_t *)(a1[2].i64[1] + 16 * v303) = _Q6;
      *(_DWORD *)(a1[1].i64[1] + 4 * v303) = v300;
      *(_QWORD *)(a1[2].i64[0] + 8 * v303) = LODWORD(v283);
    }
    else
    {
      if (v16)
        v295 = v855;
      else
        v295 = 1.0;
      DWORD2(v281) = 0;
      *((float *)&v281 + 3) = v295;
      v631 = v831;
      v631.i32[3] = 1.0;
      v832 = v631;
      DWORD2(v272) = 0;
      *(int16x4_t *)v269.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v631, v870), (float32x4_t)vdupq_n_s32(0x437F0000u))));
      *((float *)&v272 + 3) = v295;
      v632 = vmul_f32(a5, a5);
      v632.i32[0] = vadd_f32(v632, (float32x2_t)vdup_lane_s32((int32x2_t)v632, 1)).u32[0];
      *(float32x2_t *)v631.f32 = vrsqrte_f32((float32x2_t)v632.u32[0]);
      *(float32x2_t *)v631.f32 = vmul_f32(*(float32x2_t *)v631.f32, vrsqrts_f32((float32x2_t)v632.u32[0], vmul_f32(*(float32x2_t *)v631.f32, *(float32x2_t *)v631.f32)));
      v293 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v631.f32, vrsqrts_f32((float32x2_t)v632.u32[0], vmul_f32(*(float32x2_t *)v631.f32, *(float32x2_t *)v631.f32))), 0);
    }
    v808 = (int16x8_t)v269;
    v633 = a1[1].u32[0] + (unint64_t)(v13 - 2);
    *(_OWORD *)(a1[2].i64[1] + 16 * v633) = v281;
    v634 = vmovn_s16((int16x8_t)v269).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v633) = v634;
    __asm { FMOV            V5.2S, #1.0 }
    *(float *)&_D5 = v283;
    *(_QWORD *)(a1[2].i64[0] + 8 * v633) = _D5;
    v636 = a1[1].u32[0] + (unint64_t)(v13 - 1);
    *(_OWORD *)(a1[2].i64[1] + 16 * v636) = v272;
    *(_DWORD *)(a1[1].i64[1] + 4 * v636) = v634;
    *(_QWORD *)(a1[2].i64[0] + 8 * v636) = LODWORD(v862);
    v637 = a1[1].u32[0] + v13;
    DWORD2(v270) = 0;
    *((float *)&v270 + 3) = v295;
    *(_OWORD *)(a1[2].i64[1] + 16 * v637) = v270;
    *(_DWORD *)(a1[1].i64[1] + 4 * v637) = v634;
    HIDWORD(v280) = 0.5;
    *(_QWORD *)(a1[2].i64[0] + 8 * v637) = v280;
    v638 = a1[1].u32[0] + (unint64_t)(v13 + 1);
    *(_OWORD *)(a1[2].i64[1] + 16 * v638) = v281;
    *(_DWORD *)(a1[1].i64[1] + 4 * v638) = v634;
    *(_QWORD *)(a1[2].i64[0] + 8 * v638) = _D5;
    v639 = a1[1].u32[0] + (unint64_t)(v13 + 2);
    *(_OWORD *)(a1[2].i64[1] + 16 * v639) = v272;
    *(_DWORD *)(a1[1].i64[1] + 4 * v639) = v634;
    *(_QWORD *)(a1[2].i64[0] + 8 * v639) = LODWORD(v862);
    v640 = a1[1].u32[0] + (unint64_t)(v13 + 3);
    *(_OWORD *)(a1[2].i64[1] + 16 * v640) = v272;
    *(_DWORD *)(a1[1].i64[1] + 4 * v640) = v634;
    *(_QWORD *)(a1[2].i64[0] + 8 * v640) = LODWORD(v862);
    v641 = a1[1].u32[0] + (unint64_t)(v13 + 4);
    v836 = v280;
    v843 = v270;
    *(_OWORD *)(a1[2].i64[1] + 16 * v641) = v270;
    *(_DWORD *)(a1[1].i64[1] + 4 * v641) = v634;
    *(_QWORD *)(a1[2].i64[0] + 8 * v641) = v280;
    v642 = a1[1].u32[0] + (unint64_t)(v13 + 5);
    v797 = (float32x2_t)v279;
    v798 = v285;
    DWORD2(v279) = 0;
    *((float *)&v279 + 3) = v295;
    *(_OWORD *)(a1[2].i64[1] + 16 * v642) = v279;
    *(_DWORD *)(a1[1].i64[1] + 4 * v642) = v634;
    HIDWORD(v285) = 1.0;
    v804 = v285;
    v806 = v279;
    *(_QWORD *)(a1[2].i64[0] + 8 * v642) = v285;
    v800 = (float32x2_t)v274;
    DWORD2(v274) = 0;
    v643 = a1[1].u32[0] + (unint64_t)(v13 + 6);
    v850 = v295;
    *((float *)&v274 + 3) = v295;
    *(_OWORD *)(a1[2].i64[1] + 16 * v643) = v274;
    *(_DWORD *)(a1[1].i64[1] + 4 * v643) = v634;
    *(_QWORD *)(a1[2].i64[0] + 8 * v643) = LODWORD(v862);
    v644 = a1[1].u32[0] + (unint64_t)(v13 + 7);
    v802 = v274;
    *(_OWORD *)(a1[2].i64[1] + 16 * v644) = v274;
    *(_DWORD *)(a1[1].i64[1] + 4 * v644) = v634;
    *(_QWORD *)(a1[2].i64[0] + 8 * v644) = LODWORD(v862);
    v645 = vmul_f32(*(float32x2_t *)&a8, *(float32x2_t *)&a8);
    v645.i32[0] = vadd_f32(v645, (float32x2_t)vdup_lane_s32((int32x2_t)v645, 1)).u32[0];
    LODWORD(v13) = v13 + 8;
    v646 = vrsqrte_f32((float32x2_t)v645.u32[0]);
    v647 = vmul_f32(v646, vrsqrts_f32((float32x2_t)v645.u32[0], vmul_f32(v646, v646)));
    v648 = vmul_n_f32(*(float32x2_t *)&a8, vmul_f32(v647, vrsqrts_f32((float32x2_t)v645.u32[0], vmul_f32(v647, v647))).f32[0]);
    v649 = acosf(vaddv_f32(vmul_f32(v648, vmul_f32(a5, v293))));
    v650 = (float)(a1[9].f32[0] + (float)(a1[9].f32[2] * 2.0)) * 0.14;
    v651 = (int)((float)((float)(ceilf(v650) * 2.0) + 1.0) * (v649 / 3.14159265) + 1.0);
    if (v651 >= 1)
    {
      v652 = 0;
      v653 = -v649;
      v654 = (float)v651;
      v655 = -*((float *)&a8 + 1);
      v656 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v832, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u)));
      *(int16x4_t *)v656.i8 = vmovn_s32((int32x4_t)v656);
      v823 = vmovn_s16(v808).u32[0];
      v810 = vmovn_s16(v656).u32[0];
      do
      {
        v657 = __sincosf_stret((float)(v653 * (float)v652) / v654);
        v658.f32[0] = (float)(v657.__sinval * v655) + (float)(*(float *)&a8 * v657.__cosval);
        v658.f32[1] = (float)(*((float *)&a8 + 1) * v657.__cosval) + (float)(*(float *)&a8 * v657.__sinval);
        v872 = vsub_f32((float32x2_t)v878.n128_u64[0], v658);
        v659 = __sincosf_stret((float)(v653 * (float)++v652) / v654);
        v660.f32[0] = (float)(v659.__sinval * v655) + (float)(*(float *)&a8 * v659.__cosval);
        v660.f32[1] = (float)(*((float *)&a8 + 1) * v659.__cosval) + (float)(*(float *)&a8 * v659.__sinval);
        v661 = a1[1].u32[0] + (unint64_t)v13;
        *(float32x2_t *)&v662 = v872;
        DWORD2(v662) = 0;
        *((float *)&v662 + 3) = v850;
        *(_OWORD *)(a1[2].i64[1] + 16 * v661) = v662;
        *(_DWORD *)(a1[1].i64[1] + 4 * v661) = v823;
        v663 = vsub_f32((float32x2_t)v878.n128_u64[0], v660);
        *(_QWORD *)(a1[2].i64[0] + 8 * v661) = LODWORD(v862);
        v664 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        *(float32x2_t *)&v665 = v663;
        *((_QWORD *)&v665 + 1) = __PAIR64__(LODWORD(v850), 0);
        *(_OWORD *)(a1[2].i64[1] + 16 * v664) = v665;
        *(_DWORD *)(a1[1].i64[1] + 4 * v664) = v823;
        *(_QWORD *)(a1[2].i64[0] + 8 * v664) = LODWORD(v862);
        v666 = a1[1].u32[0] + (unint64_t)(v13 + 2);
        *(_OWORD *)(a1[2].i64[1] + 16 * v666) = v843;
        *(_DWORD *)(a1[1].i64[1] + 4 * v666) = v823;
        *(_QWORD *)(a1[2].i64[0] + 8 * v666) = v836;
        v667 = a1[1].u32[0] + (unint64_t)(v13 + 3);
        *(_OWORD *)(a1[2].i64[1] + 16 * v667) = v843;
        *(_DWORD *)(a1[1].i64[1] + 4 * v667) = v823;
        *(_QWORD *)(a1[2].i64[0] + 8 * v667) = v836;
        if (a1[9].i8[4])
        {
          v668 = vsub_f32(v872, (float32x2_t)v878.n128_u64[0]);
          v669 = vmul_f32(v668, v668);
          v669.i32[0] = vadd_f32(v669, (float32x2_t)vdup_lane_s32((int32x2_t)v669, 1)).u32[0];
          v670 = vrsqrte_f32((float32x2_t)v669.u32[0]);
          v671 = vmul_f32(v670, vrsqrts_f32((float32x2_t)v669.u32[0], vmul_f32(v670, v670)));
          v672 = vmul_n_f32(v668, vmul_f32(v671, vrsqrts_f32((float32x2_t)v669.u32[0], vmul_f32(v671, v671))).f32[0]);
          v673 = vsub_f32(v663, (float32x2_t)v878.n128_u64[0]);
          v674 = vmul_f32(v673, v673);
          v674.i32[0] = vadd_f32(v674, (float32x2_t)vdup_lane_s32((int32x2_t)v674, 1)).u32[0];
          v675 = vrsqrte_f32((float32x2_t)v674.u32[0]);
          v676 = vmul_f32(v675, vrsqrts_f32((float32x2_t)v674.u32[0], vmul_f32(v675, v675)));
          v677 = a1[9].f32[2];
          *(float32x2_t *)&v678 = vmla_n_f32(v663, vmul_n_f32(v673, vmul_f32(v676, vrsqrts_f32((float32x2_t)v674.u32[0], vmul_f32(v676, v676))).f32[0]), v677);
          v679 = a1[1].u32[0] + (unint64_t)(v13 + 4);
          *(_OWORD *)(a1[2].i64[1] + 16 * v679) = v662;
          *(_DWORD *)(a1[1].i64[1] + 4 * v679) = v823;
          *(_QWORD *)(a1[2].i64[0] + 8 * v679) = LODWORD(v862);
          v680 = a1[1].u32[0] + (unint64_t)(v13 + 5);
          *(_OWORD *)(a1[2].i64[1] + 16 * v680) = v665;
          *(_DWORD *)(a1[1].i64[1] + 4 * v680) = v823;
          *(_QWORD *)(a1[2].i64[0] + 8 * v680) = LODWORD(v862);
          DWORD2(v678) = 0;
          v681 = a1[1].u32[0] + (unint64_t)(v13 + 6);
          *((float *)&v678 + 3) = v850;
          *(_OWORD *)(a1[2].i64[1] + 16 * v681) = v678;
          *(_DWORD *)(a1[1].i64[1] + 4 * v681) = v810;
          *(_QWORD *)(a1[2].i64[0] + 8 * v681) = LODWORD(v862);
          *(float32x2_t *)&v682 = vmla_n_f32(v872, v672, v677);
          v683 = a1[1].u32[0] + (unint64_t)(v13 + 7);
          DWORD2(v682) = 0;
          *((float *)&v682 + 3) = v850;
          *(_OWORD *)(a1[2].i64[1] + 16 * v683) = v682;
          *(_DWORD *)(a1[1].i64[1] + 4 * v683) = v810;
          *(_QWORD *)(a1[2].i64[0] + 8 * v683) = LODWORD(v862);
          LODWORD(v13) = v13 + 8;
        }
        else
        {
          LODWORD(v13) = v13 + 4;
        }
      }
      while (v651 != v652);
    }
    if (v17)
    {
      v684 = vmul_f32(v284, v284);
      v684.i32[0] = vadd_f32(v684, (float32x2_t)vdup_lane_s32((int32x2_t)v684, 1)).u32[0];
      v685 = vrsqrte_f32((float32x2_t)v684.u32[0]);
      v686 = vmul_f32(v685, vrsqrts_f32((float32x2_t)v684.u32[0], vmul_f32(v685, v685)));
      *(float32x2_t *)&v687 = vmla_n_f32(v797, vmul_n_f32(v284, vmul_f32(v686, vrsqrts_f32((float32x2_t)v684.u32[0], vmul_f32(v686, v686))).f32[0]), v815.f32[0]);
      v688 = a1[1].u32[0] + (unint64_t)v13;
      v690 = v806;
      v689 = v808;
      *(_OWORD *)(a1[2].i64[1] + 16 * v688) = v806;
      v684.i32[0] = vmovn_s16(v808).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v688) = v684.i32[0];
      *(float32x2_t *)&v691 = vmls_lane_f32(v800, v648, v815, 0);
      *(_QWORD *)(a1[2].i64[0] + 8 * v688) = __PAIR64__(1.0, LODWORD(v862));
      v692 = a1[1].u32[0] + (unint64_t)(v13 + 1);
      DWORD2(v687) = 0;
      *((float *)&v687 + 3) = v850;
      v693 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v832, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u)));
      *(int16x4_t *)v693.i8 = vmovn_s32((int32x4_t)v693);
      *(_OWORD *)(a1[2].i64[1] + 16 * v692) = v687;
      v693.i32[0] = vmovn_s16(v693).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v692) = v693.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v692) = __PAIR64__(1.0, LODWORD(v862));
      v694 = a1[1].u32[0] + (unint64_t)(v13 + 4);
      *((_QWORD *)&v691 + 1) = __PAIR64__(LODWORD(v850), 0);
      *(_OWORD *)(a1[2].i64[1] + 16 * v694) = v691;
      *(_DWORD *)(a1[1].i64[1] + 4 * v694) = v693.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v694) = v798;
      v695 = a1[1].u32[0] + (unint64_t)(v13 + 5);
      v696 = v802;
      _D2 = v804;
      *(_OWORD *)(a1[2].i64[1] + 16 * v695) = v802;
      *(_DWORD *)(a1[1].i64[1] + 4 * v695) = v684.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v695) = v798;
      LODWORD(v13) = v13 + 8;
      v697 = LODWORD(v862);
    }
    else
    {
      v690 = v806;
      v689 = v808;
      v697 = LODWORD(v862);
      v696 = v802;
      _D2 = v804;
    }
    v709 = a1[1].u32[0] + (unint64_t)v13;
    *(_OWORD *)(a1[2].i64[1] + 16 * v709) = v696;
    v710 = vmovn_s16(v689).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v709) = v710;
    *(_QWORD *)(a1[2].i64[0] + 8 * v709) = v697;
    v168 = a1[1].u32[0] + (unint64_t)(v13 + 1);
    *(_OWORD *)(a1[2].i64[1] + 16 * v168) = v690;
    *(_DWORD *)(a1[1].i64[1] + 4 * v168) = v710;
    goto LABEL_51;
  }
  if (v35 != 2)
  {
    *(float32x2_t *)&v160 = vadd_f32(a5, (float32x2_t)a9.n128_u64[0]);
    if (a1[9].i8[5])
      v161 = a1[12].f32[2];
    else
      v161 = 1.0;
    v162 = a1[1].u32[0] + (unint64_t)(v13 - 2);
    DWORD2(v160) = 0;
    *((float *)&v160 + 3) = v161;
    v15.i32[3] = 1.0;
    v163 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v15, v14), (float32x4_t)vdupq_n_s32(0x437F0000u)));
    *(int16x4_t *)v163.i8 = vmovn_s32((int32x4_t)v163);
    *(_OWORD *)(a1[2].i64[1] + 16 * v162) = v160;
    v164 = vmovn_s16(v163).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v162) = v164;
    __asm { FMOV            V2.2S, #1.0 }
    *(_QWORD *)(a1[2].i64[0] + 8 * v162) = __PAIR64__(HIDWORD(_D2), v9);
    *(float32x2_t *)&v165 = vsub_f32((float32x2_t)a9.n128_u64[0], a5);
    v166 = a1[1].u32[0] + (unint64_t)(v13 - 1);
    DWORD2(v165) = 0;
    *((float *)&v165 + 3) = v161;
    v28.i32[0] = a1[12].i32[3];
    *(_OWORD *)(a1[2].i64[1] + 16 * v166) = v165;
    *(_DWORD *)(a1[1].i64[1] + 4 * v166) = v164;
    *(float32x2_t *)(a1[2].i64[0] + 8 * v166) = v28;
    *(float32x2_t *)&v165 = vsub_f32((float32x2_t)a9.n128_u64[0], *(float32x2_t *)&a8);
    v167 = a1[1].u32[0] + v13;
    DWORD2(v165) = 0;
    *((float *)&v165 + 3) = v161;
    v28.i32[0] = a1[12].i32[3];
    *(_OWORD *)(a1[2].i64[1] + 16 * v167) = v165;
    *(_DWORD *)(a1[1].i64[1] + 4 * v167) = v164;
    *(float32x2_t *)(a1[2].i64[0] + 8 * v167) = v28;
    *(float32x2_t *)&v165 = vadd_f32(*(float32x2_t *)&a8, (float32x2_t)a9.n128_u64[0]);
    v168 = a1[1].u32[0] + (unint64_t)(v13 + 1);
    DWORD2(v165) = 0;
    *((float *)&v165 + 3) = v161;
    LODWORD(_D2) = a1[12].i32[3];
    *(_OWORD *)(a1[2].i64[1] + 16 * v168) = v165;
LABEL_50:
    *(_DWORD *)(a1[1].i64[1] + 4 * v168) = v164;
LABEL_51:
    *(_QWORD *)(a1[2].i64[0] + 8 * v168) = _D2;
LABEL_184:
    v589 = v13 + 4;
    goto LABEL_185;
  }
  if (vmlas_n_f32((float)-*((float *)&a7 + 1) * *(float *)&a4, *((float *)&a4 + 1), *(float *)&a7) >= 0.0)
  {
    v861 = a1[12].f32[3];
    v869 = a1[12].f32[0];
    v814 = a1[9].f32[2];
    v829 = a1[11];
    v188 = vsub_f32((float32x2_t)a9.n128_u64[0], *(float32x2_t *)&a8);
    v892 = *(double *)&v188;
    v893 = vneg_f32(*(float32x2_t *)&a7);
    v189 = vsub_f32((float32x2_t)a9.n128_u64[0], a5);
    v890 = *(double *)&v189;
    v891 = a4;
    v886.i32[0] = 0;
    v885[0].i32[0] = 0;
    sk_ray2::intersect((float32x2_t *)&v892, (float32x2_t *)&v890, (float *)&v886, (float *)v885);
    v190 = vmla_n_f32(*(float32x2_t *)&v892, v893, v886.f32[0]);
    v191 = vsub_f32(v190, v189);
    v47 = sqrtf(vaddv_f32(vmul_f32(v191, v191))) <= sqrtf(v33);
    v192 = vsub_f32(v190, v188);
    v193 = sqrtf(vaddv_f32(vmul_f32(v192, v192)));
    v194 = sqrtf(v34);
    v195 = v47 && v193 <= v194;
    *(float32x2_t *)&v196 = v190;
    if (!v195)
    {
      v190 = v188;
      *(float32x2_t *)&v196 = v189;
    }
    v197 = vadd_f32(a5, (float32x2_t)v878.n128_u64[0]);
    v198 = vadd_f32(*(float32x2_t *)&a8, (float32x2_t)v878.n128_u64[0]);
    v201 = vsub_f32(vmla_f32(*(float32x2_t *)&v196, (float32x2_t)0x4000000040000000, a5), v197);
    v199 = vsub_f32(vmla_f32(v190, (float32x2_t)0x4000000040000000, *(float32x2_t *)&a8), v198);
    *(float *)&v200 = v861;
    v201.f32[0] = v861 - (float)(sqrtf(vaddv_f32(vmul_f32(v201, v201))) / v36);
    v202 = v861 + (float)(sqrtf(vaddv_f32(vmul_f32(v199, v199))) / v36);
    v203 = v829;
    if (v17)
    {
      v204 = vmul_f32(a5, a5);
      v204.i32[0] = vadd_f32(v204, (float32x2_t)vdup_lane_s32((int32x2_t)v204, 1)).u32[0];
      v205 = vrsqrte_f32((float32x2_t)v204.u32[0]);
      v206 = vmul_f32(v205, vrsqrts_f32((float32x2_t)v204.u32[0], vmul_f32(v205, v205)));
      *(float32x2_t *)&v207 = vmla_n_f32(v197, vmul_n_f32(a5, vmul_f32(v206, vrsqrts_f32((float32x2_t)v204.u32[0], vmul_f32(v206, v206))).f32[0]), v814);
      v208 = vsub_f32(*(float32x2_t *)&v196, (float32x2_t)v878.n128_u64[0]);
      v209 = vmul_f32(v208, v208);
      v209.i32[0] = vadd_f32(v209, (float32x2_t)vdup_lane_s32((int32x2_t)v209, 1)).u32[0];
      v210 = vrsqrte_f32((float32x2_t)v209.u32[0]);
      v211 = vmul_f32(v210, vrsqrts_f32((float32x2_t)v209.u32[0], vmul_f32(v210, v210)));
      LODWORD(v212) = vmul_f32(v211, vrsqrts_f32((float32x2_t)v209.u32[0], vmul_f32(v211, v211))).u32[0];
      if (v16)
        v213 = v18;
      else
        v213 = 1.0;
      DWORD2(v207) = 0;
      *((float *)&v207 + 3) = v213;
      v214 = a1[1].u32[0] + (unint64_t)(v13 - 10);
      v203.i32[3] = 1.0;
      v215 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v216 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v203, (float32x4_t)0), v215));
      *(int16x4_t *)v216.i8 = vmovn_s32((int32x4_t)v216);
      *(_OWORD *)(a1[2].i64[1] + 16 * v214) = v207;
      v216.i32[0] = vmovn_s16(v216).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v214) = v216.i32[0];
      __asm { FMOV            V20.2S, #1.0 }
      *(float *)&_D20 = v861;
      *(_QWORD *)(a1[2].i64[0] + 8 * v214) = _D20;
      v218 = vmul_n_f32(v208, v212);
      *(float32x2_t *)&v220 = v197;
      DWORD2(v220) = 0;
      v219 = a1[1].u32[0] + (unint64_t)(v13 - 9);
      *((float *)&v220 + 3) = v213;
      v221 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v203, v869), v215));
      *(int16x4_t *)v221.i8 = vmovn_s32((int32x4_t)v221);
      *(_OWORD *)(a1[2].i64[1] + 16 * v219) = v220;
      v215.i32[0] = vmovn_s16(v221).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v219) = v215.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v219) = _D20;
      *(float32x2_t *)&v222 = vmla_n_f32(*(float32x2_t *)&v196, v218, v814);
      v223 = a1[1].u32[0] + (unint64_t)(v13 - 6);
      DWORD2(v196) = 0;
      *((float *)&v196 + 3) = v213;
      *(_OWORD *)(a1[2].i64[1] + 16 * v223) = v196;
      *(_DWORD *)(a1[1].i64[1] + 4 * v223) = v215.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v223) = v201.u32[0];
      DWORD2(v222) = 0;
      v224 = a1[1].u32[0] + (unint64_t)(v13 - 5);
      *((float *)&v222 + 3) = v213;
      *(_OWORD *)(a1[2].i64[1] + 16 * v224) = v222;
      *(_DWORD *)(a1[1].i64[1] + 4 * v224) = v216.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v224) = v201.u32[0];
    }
    else
    {
      if (v16)
        v213 = v18;
      else
        v213 = 1.0;
      *(float32x2_t *)&v220 = v197;
      DWORD2(v220) = 0;
      *((float *)&v220 + 3) = v213;
      v203.i32[3] = 1.0;
      v221 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v203, v869), (float32x4_t)vdupq_n_s32(0x437F0000u)));
      *(int16x4_t *)v221.i8 = vmovn_s32((int32x4_t)v221);
      DWORD2(v196) = 0;
      *((float *)&v196 + 3) = v213;
    }
    v463 = a1[1].u32[0] + (unint64_t)(v13 - 2);
    *(_OWORD *)(a1[2].i64[1] + 16 * v463) = v220;
    v464 = vmovn_s16(v221).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v463) = v464;
    *(_QWORD *)(a1[2].i64[0] + 8 * v463) = __PAIR64__(1.0, LODWORD(v861));
    v465 = a1[1].u32[0] + (unint64_t)(v13 - 1);
    *(_OWORD *)(a1[2].i64[1] + 16 * v465) = v196;
    *(_DWORD *)(a1[1].i64[1] + 4 * v465) = v464;
    v466 = v201.u32[0];
    *(_QWORD *)(a1[2].i64[0] + 8 * v465) = v201.u32[0];
    v467 = a1[1].u32[0] + v13;
    *(_OWORD *)(a1[2].i64[1] + 16 * v467) = v196;
    *(_DWORD *)(a1[1].i64[1] + 4 * v467) = v464;
    *(_QWORD *)(a1[2].i64[0] + 8 * v467) = v201.u32[0];
    v468 = a1[1].u32[0] + (unint64_t)(v13 + 1);
    *(_OWORD *)(a1[2].i64[1] + 16 * v468) = v220;
    *(_DWORD *)(a1[1].i64[1] + 4 * v468) = v464;
    *(_QWORD *)(a1[2].i64[0] + 8 * v468) = __PAIR64__(1.0, LODWORD(v861));
    *(_QWORD *)&v469 = v878.n128_u64[0];
    DWORD2(v469) = 0;
    v470 = a1[1].u32[0] + (unint64_t)(v13 + 2);
    *((float *)&v469 + 3) = v213;
    *(_OWORD *)(a1[2].i64[1] + 16 * v470) = v469;
    *(_DWORD *)(a1[1].i64[1] + 4 * v470) = v464;
    HIDWORD(v200) = 0.5;
    *(_QWORD *)(a1[2].i64[0] + 8 * v470) = v200;
    v471 = a1[1].u32[0] + (unint64_t)(v13 + 3);
    *(_OWORD *)(a1[2].i64[1] + 16 * v471) = v469;
    *(_DWORD *)(a1[1].i64[1] + 4 * v471) = v464;
    *(_QWORD *)(a1[2].i64[0] + 8 * v471) = v200;
    v472 = a1[1].u32[0] + (unint64_t)(v13 + 4);
    *(_OWORD *)(a1[2].i64[1] + 16 * v472) = v469;
    *(_DWORD *)(a1[1].i64[1] + 4 * v472) = v464;
    *(_QWORD *)(a1[2].i64[0] + 8 * v472) = v200;
    v473 = a1[1].u32[0] + (unint64_t)(v13 + 5);
    *(_OWORD *)(a1[2].i64[1] + 16 * v473) = v220;
    *(_DWORD *)(a1[1].i64[1] + 4 * v473) = v464;
    *(_QWORD *)(a1[2].i64[0] + 8 * v473) = __PAIR64__(1.0, LODWORD(v861));
    v474 = a1[1].u32[0] + (unint64_t)(v13 + 6);
    *(float32x2_t *)&v475 = v198;
    DWORD2(v475) = 0;
    *((float *)&v475 + 3) = v213;
    *(_OWORD *)(a1[2].i64[1] + 16 * v474) = v475;
    *(_DWORD *)(a1[1].i64[1] + 4 * v474) = v464;
    *(_QWORD *)(a1[2].i64[0] + 8 * v474) = __PAIR64__(1.0, LODWORD(v861));
    v476 = a1[1].u32[0] + (unint64_t)(v13 + 7);
    *(_OWORD *)(a1[2].i64[1] + 16 * v476) = v475;
    *(_DWORD *)(a1[1].i64[1] + 4 * v476) = v464;
    *(_QWORD *)(a1[2].i64[0] + 8 * v476) = __PAIR64__(1.0, LODWORD(v861));
    v477 = a1[1].u32[0] + (unint64_t)(v13 + 8);
    *(_OWORD *)(a1[2].i64[1] + 16 * v477) = v469;
    *(_DWORD *)(a1[1].i64[1] + 4 * v477) = v464;
    *(_QWORD *)(a1[2].i64[0] + 8 * v477) = v200;
    v478 = a1[1].u32[0] + (unint64_t)(v13 + 9);
    *(_OWORD *)(a1[2].i64[1] + 16 * v478) = v475;
    *(_DWORD *)(a1[1].i64[1] + 4 * v478) = v464;
    *(_QWORD *)(a1[2].i64[0] + 8 * v478) = __PAIR64__(1.0, LODWORD(v861));
    v479 = a1[1].u32[0] + (unint64_t)(v13 + 10);
    *(float32x2_t *)&v480 = v190;
    DWORD2(v480) = 0;
    *((float *)&v480 + 3) = v213;
    *(_OWORD *)(a1[2].i64[1] + 16 * v479) = v480;
    *(_DWORD *)(a1[1].i64[1] + 4 * v479) = v464;
    v481 = LODWORD(v202);
    *(_QWORD *)(a1[2].i64[0] + 8 * v479) = LODWORD(v202);
    v482 = a1[1].u32[0] + (unint64_t)(v13 + 11);
    *(_OWORD *)(a1[2].i64[1] + 16 * v482) = v480;
    *(_DWORD *)(a1[1].i64[1] + 4 * v482) = v464;
    *(_QWORD *)(a1[2].i64[0] + 8 * v482) = LODWORD(v202);
    v483 = v13 + 12;
    if (v17)
    {
      v484 = vmul_f32(a5, a5);
      v484.i32[0] = vadd_f32(v484, (float32x2_t)vdup_lane_s32((int32x2_t)v484, 1)).u32[0];
      v485 = vrsqrte_f32((float32x2_t)v484.u32[0]);
      v486 = vmul_f32(v485, vrsqrts_f32((float32x2_t)v484.u32[0], vmul_f32(v485, v485)));
      v487 = vmul_n_f32(a5, vmul_f32(v486, vrsqrts_f32((float32x2_t)v484.u32[0], vmul_f32(v486, v486))).f32[0]);
      v488 = vmul_f32(*(float32x2_t *)&a8, *(float32x2_t *)&a8);
      *(float32x2_t *)v489.i8 = vmla_n_f32(v197, v487, v814);
      v487.i32[0] = vadd_f32(v488, (float32x2_t)vdup_lane_s32((int32x2_t)v488, 1)).u32[0];
      v490 = vrsqrte_f32((float32x2_t)v487.u32[0]);
      v491 = vmul_f32(v490, vrsqrts_f32((float32x2_t)v487.u32[0], vmul_f32(v490, v490)));
      v492 = vmul_n_f32(*(float32x2_t *)&a8, vmul_f32(v491, vrsqrts_f32((float32x2_t)v487.u32[0], vmul_f32(v491, v491))).f32[0]);
      v493 = a1[1].u32[0] + (unint64_t)v483;
      *(_OWORD *)(a1[2].i64[1] + 16 * v493) = v220;
      v487.i32[0] = vmovn_s16(v221).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v493) = v487.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v493) = __PAIR64__(1.0, LODWORD(v861));
      *(float32x2_t *)&v494 = vmla_n_f32(v198, v492, v814);
      v495 = a1[1].u32[0] + (unint64_t)(v13 + 13);
      v489.i32[2] = 0;
      *(float *)&v489.i32[3] = v213;
      *(int16x8_t *)(a1[2].i64[1] + 16 * v495) = v489;
      *(int16x4_t *)v489.i8 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_f32(v203, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u))));
      v489.i32[0] = vmovn_s16(v489).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v495) = v489.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v495) = __PAIR64__(1.0, LODWORD(v861));
      DWORD2(v494) = 0;
      v496 = a1[1].u32[0] + (unint64_t)(v13 + 14);
      *((float *)&v494 + 3) = v213;
      *(_OWORD *)(a1[2].i64[1] + 16 * v496) = v494;
      *(_DWORD *)(a1[1].i64[1] + 4 * v496) = v489.i32[0];
      v201.i32[1] = 1.0;
      *(float32x2_t *)(a1[2].i64[0] + 8 * v496) = v201;
      v497 = a1[1].u32[0] + (unint64_t)(v13 + 15);
      *(_OWORD *)(a1[2].i64[1] + 16 * v497) = v475;
      *(_DWORD *)(a1[1].i64[1] + 4 * v497) = v487.i32[0];
      *(float32x2_t *)(a1[2].i64[0] + 8 * v497) = v201;
      v498 = vsub_f32(v190, (float32x2_t)v878.n128_u64[0]);
      v499 = vmul_f32(v498, v498);
      v499.i32[0] = vadd_f32(v499, (float32x2_t)vdup_lane_s32((int32x2_t)v499, 1)).u32[0];
      v500 = vrsqrte_f32((float32x2_t)v499.u32[0]);
      v501 = vmul_f32(v500, vrsqrts_f32((float32x2_t)v499.u32[0], vmul_f32(v500, v500)));
      v502 = a1[1].u32[0] + (unint64_t)(v13 + 16);
      *(_OWORD *)(a1[2].i64[1] + 16 * v502) = v475;
      *(_DWORD *)(a1[1].i64[1] + 4 * v502) = v487.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v502) = __PAIR64__(1.0, LODWORD(v861));
      v503 = a1[1].u32[0] + (unint64_t)(v13 + 17);
      *(_OWORD *)(a1[2].i64[1] + 16 * v503) = v494;
      *(_DWORD *)(a1[1].i64[1] + 4 * v503) = v489.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v503) = __PAIR64__(1.0, LODWORD(v861));
      *(float32x2_t *)&v504 = vmla_n_f32(v190, vmul_n_f32(v498, vmul_f32(v501, vrsqrts_f32((float32x2_t)v499.u32[0], vmul_f32(v501, v501))).f32[0]), v814);
      v505 = a1[1].u32[0] + (unint64_t)(v13 + 20);
      DWORD2(v504) = 0;
      *((float *)&v504 + 3) = v213;
      *(_OWORD *)(a1[2].i64[1] + 16 * v505) = v504;
      *(_DWORD *)(a1[1].i64[1] + 4 * v505) = v489.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v505) = v466;
      v506 = a1[1].u32[0] + (unint64_t)(v13 + 21);
      *(_OWORD *)(a1[2].i64[1] + 16 * v506) = v480;
      *(_DWORD *)(a1[1].i64[1] + 4 * v506) = v487.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v506) = v466;
      v483 = v13 + 24;
    }
    v507 = a1[1].u32[0] + (unint64_t)v483;
    *(_OWORD *)(a1[2].i64[1] + 16 * v507) = v480;
    v508 = vmovn_s16(v221).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v507) = v508;
    *(_QWORD *)(a1[2].i64[0] + 8 * v507) = v481;
    v509 = a1[1].u32[0] + (unint64_t)(v483 + 1);
    *(_OWORD *)(a1[2].i64[1] + 16 * v509) = v475;
    *(_DWORD *)(a1[1].i64[1] + 4 * v509) = v508;
    *(_QWORD *)(a1[2].i64[0] + 8 * v509) = __PAIR64__(1.0, LODWORD(v861));
  }
  else
  {
    v858 = a1[12].f32[3];
    v865 = a1[12].f32[0];
    v811 = a1[9].f32[2];
    v824 = a1[11];
    v37 = vadd_f32(*(float32x2_t *)&a8, (float32x2_t)a9.n128_u64[0]);
    v892 = *(double *)&v37;
    v893 = vneg_f32(*(float32x2_t *)&a7);
    v38 = vadd_f32(a5, (float32x2_t)a9.n128_u64[0]);
    v890 = *(double *)&v38;
    v891 = a4;
    v886.i32[0] = 0;
    v885[0].i32[0] = 0;
    sk_ray2::intersect((float32x2_t *)&v892, (float32x2_t *)&v890, (float *)&v886, (float *)v885);
    *(float32x2_t *)&v39 = vmla_n_f32(*(float32x2_t *)&v892, v893, v886.f32[0]);
    v40 = vsub_f32((float32x2_t)v878.n128_u64[0], a5);
    v41 = vsub_f32(*(float32x2_t *)&v39, v40);
    v42 = sqrtf(vaddv_f32(vmul_f32(v41, v41)));
    v43 = vsub_f32((float32x2_t)v878.n128_u64[0], *(float32x2_t *)&a8);
    v47 = v42 <= sqrtf(v33);
    v44 = vsub_f32(*(float32x2_t *)&v39, v43);
    v45 = sqrtf(vaddv_f32(vmul_f32(v44, v44)));
    v46 = sqrtf(v34);
    v47 = v47 && v45 <= v46;
    v48 = (float32x2_t)v39;
    if (!v47)
    {
      *(float32x2_t *)&v39 = v38;
      v48 = v37;
    }
    v49 = vsub_f32(vmls_f32(*(float32x2_t *)&v39, (float32x2_t)0x4000000040000000, a5), v40);
    v50 = vsub_f32(vmls_f32(v48, (float32x2_t)0x4000000040000000, *(float32x2_t *)&a8), v43);
    *(float *)&v51 = v858;
    v52 = v858 - (float)(sqrtf(vaddv_f32(vmul_f32(v49, v49))) / v36);
    v53 = v858 + (float)(sqrtf(vaddv_f32(vmul_f32(v50, v50))) / v36);
    v54 = v824;
    if (v17)
    {
      v55 = vsub_f32(*(float32x2_t *)&v39, (float32x2_t)v878.n128_u64[0]);
      v56 = vmul_f32(v55, v55);
      v56.i32[0] = vadd_f32(v56, (float32x2_t)vdup_lane_s32((int32x2_t)v56, 1)).u32[0];
      v57 = vrsqrte_f32((float32x2_t)v56.u32[0]);
      v58 = vmul_f32(v57, vrsqrts_f32((float32x2_t)v56.u32[0], vmul_f32(v57, v57)));
      *(float32x2_t *)&v59 = vmla_n_f32(*(float32x2_t *)&v39, vmul_n_f32(v55, vmul_f32(v58, vrsqrts_f32((float32x2_t)v56.u32[0], vmul_f32(v58, v58))).f32[0]), v811);
      v60 = vmul_f32(a5, a5);
      v60.i32[0] = vadd_f32(v60, (float32x2_t)vdup_lane_s32((int32x2_t)v60, 1)).u32[0];
      v61 = vrsqrte_f32((float32x2_t)v60.u32[0]);
      v62 = vmul_f32(v61, vrsqrts_f32((float32x2_t)v60.u32[0], vmul_f32(v61, v61)));
      *(float32x2_t *)&v63 = vmla_n_f32(v40, vmul_f32(a5, vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v62, vrsqrts_f32((float32x2_t)v60.u32[0], vmul_f32(v62, v62))), 0))), v811);
      if (v16)
        v64 = v18;
      else
        v64 = 1.0;
      v65 = a1[1].u32[0] + (unint64_t)(v13 - 10);
      DWORD2(v59) = 0;
      *((float *)&v59 + 3) = v64;
      v54.i32[3] = 1.0;
      v66 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      v67 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v54, (float32x4_t)0), v66));
      *(int16x4_t *)v67.i8 = vmovn_s32((int32x4_t)v67);
      *(_OWORD *)(a1[2].i64[1] + 16 * v65) = v59;
      v67.i32[0] = vmovn_s16(v67).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v65) = v67.i32[0];
      __asm { FMOV            V19.2S, #1.0 }
      *(float *)&_D19 = v858;
      *(_QWORD *)(a1[2].i64[0] + 8 * v65) = _D19;
      v72 = a1[1].u32[0] + (unint64_t)(v13 - 9);
      DWORD2(v39) = 0;
      *((float *)&v39 + 3) = v64;
      v73 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v54, v865), v66));
      *(int16x4_t *)v73.i8 = vmovn_s32((int32x4_t)v73);
      *(_OWORD *)(a1[2].i64[1] + 16 * v72) = v39;
      v74 = vmovn_s16(v73).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v72) = v74;
      *(_QWORD *)(a1[2].i64[0] + 8 * v72) = _D19;
      v75 = a1[1].u32[0] + (unint64_t)(v13 - 6);
      *(float32x2_t *)&v76 = v40;
      DWORD2(v76) = 0;
      *((float *)&v76 + 3) = v64;
      *(_OWORD *)(a1[2].i64[1] + 16 * v75) = v76;
      *(_DWORD *)(a1[1].i64[1] + 4 * v75) = v74;
      *(_QWORD *)(a1[2].i64[0] + 8 * v75) = LODWORD(v52);
      DWORD2(v63) = 0;
      v77 = a1[1].u32[0] + (unint64_t)(v13 - 5);
      *((float *)&v63 + 3) = v64;
      *(_OWORD *)(a1[2].i64[1] + 16 * v77) = v63;
      *(_DWORD *)(a1[1].i64[1] + 4 * v77) = v67.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v77) = LODWORD(v52);
    }
    else
    {
      if (v16)
        v64 = v18;
      else
        v64 = 1.0;
      DWORD2(v39) = 0;
      *((float *)&v39 + 3) = v64;
      v54.i32[3] = 1.0;
      v73 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v54, v865), (float32x4_t)vdupq_n_s32(0x437F0000u)));
      *(int16x4_t *)v73.i8 = vmovn_s32((int32x4_t)v73);
      *(float32x2_t *)&v76 = v40;
      DWORD2(v76) = 0;
      *((float *)&v76 + 3) = v64;
    }
    v545 = a1[1].u32[0] + (unint64_t)(v13 - 2);
    *(_OWORD *)(a1[2].i64[1] + 16 * v545) = v39;
    v546 = vmovn_s16(v73).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v545) = v546;
    v547 = __PAIR64__(1.0, LODWORD(v52));
    *(_QWORD *)(a1[2].i64[0] + 8 * v545) = __PAIR64__(1.0, LODWORD(v52));
    v548 = a1[1].u32[0] + (unint64_t)(v13 - 1);
    *(_OWORD *)(a1[2].i64[1] + 16 * v548) = v76;
    *(_DWORD *)(a1[1].i64[1] + 4 * v548) = v546;
    *(_QWORD *)(a1[2].i64[0] + 8 * v548) = LODWORD(v858);
    v549 = a1[1].u32[0] + v13;
    *(_OWORD *)(a1[2].i64[1] + 16 * v549) = v76;
    *(_DWORD *)(a1[1].i64[1] + 4 * v549) = v546;
    *(_QWORD *)(a1[2].i64[0] + 8 * v549) = LODWORD(v858);
    v550 = a1[1].u32[0] + (unint64_t)(v13 + 1);
    *(_OWORD *)(a1[2].i64[1] + 16 * v550) = v39;
    *(_DWORD *)(a1[1].i64[1] + 4 * v550) = v546;
    *(_QWORD *)(a1[2].i64[0] + 8 * v550) = __PAIR64__(1.0, LODWORD(v52));
    *(_QWORD *)&v551 = v878.n128_u64[0];
    DWORD2(v551) = 0;
    v552 = a1[1].u32[0] + (unint64_t)(v13 + 2);
    *((float *)&v551 + 3) = v64;
    *(_OWORD *)(a1[2].i64[1] + 16 * v552) = v551;
    *(_DWORD *)(a1[1].i64[1] + 4 * v552) = v546;
    HIDWORD(v51) = 0.5;
    *(_QWORD *)(a1[2].i64[0] + 8 * v552) = v51;
    v553 = a1[1].u32[0] + (unint64_t)(v13 + 3);
    *(_OWORD *)(a1[2].i64[1] + 16 * v553) = v551;
    *(_DWORD *)(a1[1].i64[1] + 4 * v553) = v546;
    *(_QWORD *)(a1[2].i64[0] + 8 * v553) = v51;
    v554 = a1[1].u32[0] + (unint64_t)(v13 + 4);
    *(_OWORD *)(a1[2].i64[1] + 16 * v554) = v551;
    *(_DWORD *)(a1[1].i64[1] + 4 * v554) = v546;
    *(_QWORD *)(a1[2].i64[0] + 8 * v554) = v51;
    v555 = a1[1].u32[0] + (unint64_t)(v13 + 5);
    *(_OWORD *)(a1[2].i64[1] + 16 * v555) = v76;
    *(_DWORD *)(a1[1].i64[1] + 4 * v555) = v546;
    *(_QWORD *)(a1[2].i64[0] + 8 * v555) = LODWORD(v858);
    v556 = a1[1].u32[0] + (unint64_t)(v13 + 6);
    *(float32x2_t *)&v557 = v43;
    DWORD2(v557) = 0;
    *((float *)&v557 + 3) = v64;
    *(_OWORD *)(a1[2].i64[1] + 16 * v556) = v557;
    *(_DWORD *)(a1[1].i64[1] + 4 * v556) = v546;
    *(_QWORD *)(a1[2].i64[0] + 8 * v556) = LODWORD(v858);
    v558 = a1[1].u32[0] + (unint64_t)(v13 + 7);
    *(_OWORD *)(a1[2].i64[1] + 16 * v558) = v557;
    *(_DWORD *)(a1[1].i64[1] + 4 * v558) = v546;
    *(_QWORD *)(a1[2].i64[0] + 8 * v558) = LODWORD(v858);
    v559 = a1[1].u32[0] + (unint64_t)(v13 + 8);
    *(_OWORD *)(a1[2].i64[1] + 16 * v559) = v551;
    *(_DWORD *)(a1[1].i64[1] + 4 * v559) = v546;
    *(_QWORD *)(a1[2].i64[0] + 8 * v559) = v51;
    v560 = a1[1].u32[0] + (unint64_t)(v13 + 9);
    *(_OWORD *)(a1[2].i64[1] + 16 * v560) = v557;
    *(_DWORD *)(a1[1].i64[1] + 4 * v560) = v546;
    *(_QWORD *)(a1[2].i64[0] + 8 * v560) = LODWORD(v858);
    v561 = a1[1].u32[0] + (unint64_t)(v13 + 10);
    *(float32x2_t *)&v562 = v48;
    DWORD2(v562) = 0;
    *((float *)&v562 + 3) = v64;
    *(_OWORD *)(a1[2].i64[1] + 16 * v561) = v562;
    *(_DWORD *)(a1[1].i64[1] + 4 * v561) = v546;
    __asm { FMOV            V20.2S, #1.0 }
    *(float *)&_D20 = v53;
    *(_QWORD *)(a1[2].i64[0] + 8 * v561) = _D20;
    v564 = a1[1].u32[0] + (unint64_t)(v13 + 11);
    *(_OWORD *)(a1[2].i64[1] + 16 * v564) = v562;
    *(_DWORD *)(a1[1].i64[1] + 4 * v564) = v546;
    *(_QWORD *)(a1[2].i64[0] + 8 * v564) = _D20;
    v483 = v13 + 12;
    if (v17)
    {
      v565 = vmul_f32(a5, a5);
      v565.i32[0] = vadd_f32(v565, (float32x2_t)vdup_lane_s32((int32x2_t)v565, 1)).u32[0];
      v566 = vrsqrte_f32((float32x2_t)v565.u32[0]);
      v567 = vmul_f32(v566, vrsqrts_f32((float32x2_t)v565.u32[0], vmul_f32(v566, v566)));
      *(float32x2_t *)v568.i8 = vmla_n_f32(v40, vmul_f32(a5, vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v567, vrsqrts_f32((float32x2_t)v565.u32[0], vmul_f32(v567, v567))), 0))), v811);
      v569 = vmul_f32(*(float32x2_t *)&a8, *(float32x2_t *)&a8);
      v569.i32[0] = vadd_f32(v569, (float32x2_t)vdup_lane_s32((int32x2_t)v569, 1)).u32[0];
      v570 = vrsqrte_f32((float32x2_t)v569.u32[0]);
      v571 = vmul_f32(v570, vrsqrts_f32((float32x2_t)v569.u32[0], vmul_f32(v570, v570)));
      *(float32x2_t *)&v572 = vmla_n_f32(v43, vmul_f32(*(float32x2_t *)&a8, vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v571, vrsqrts_f32((float32x2_t)v569.u32[0], vmul_f32(v571, v571))), 0))), v811);
      v573 = a1[1].u32[0] + (unint64_t)v483;
      v568.i32[2] = 0;
      *(float *)&v568.i32[3] = v64;
      *(int16x8_t *)(a1[2].i64[1] + 16 * v573) = v568;
      *(int16x4_t *)v568.i8 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_f32(v54, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u))));
      v568.i32[0] = vmovn_s16(v568).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v573) = v568.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v573) = LODWORD(v858);
      v574 = a1[1].u32[0] + (unint64_t)(v13 + 13);
      *(_OWORD *)(a1[2].i64[1] + 16 * v574) = v76;
      v569.i32[0] = vmovn_s16(v73).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v574) = v569.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v574) = LODWORD(v858);
      v575 = a1[1].u32[0] + (unint64_t)(v13 + 14);
      *(_OWORD *)(a1[2].i64[1] + 16 * v575) = v557;
      *(_DWORD *)(a1[1].i64[1] + 4 * v575) = v569.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v575) = LODWORD(v52);
      v576 = a1[1].u32[0] + (unint64_t)(v13 + 15);
      DWORD2(v572) = 0;
      *((float *)&v572 + 3) = v64;
      *(_OWORD *)(a1[2].i64[1] + 16 * v576) = v572;
      *(_DWORD *)(a1[1].i64[1] + 4 * v576) = v568.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v576) = LODWORD(v52);
      v577 = vsub_f32(v48, (float32x2_t)v878.n128_u64[0]);
      v578 = vmul_f32(v577, v577);
      v578.i32[0] = vadd_f32(v578, (float32x2_t)vdup_lane_s32((int32x2_t)v578, 1)).u32[0];
      v579 = vrsqrte_f32((float32x2_t)v578.u32[0]);
      v580 = vmul_f32(v579, vrsqrts_f32((float32x2_t)v578.u32[0], vmul_f32(v579, v579)));
      v581 = a1[1].u32[0] + (unint64_t)(v13 + 16);
      *(_OWORD *)(a1[2].i64[1] + 16 * v581) = v562;
      *(_DWORD *)(a1[1].i64[1] + 4 * v581) = v569.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v581) = v547;
      *(float32x2_t *)&v582 = vmla_n_f32(v48, vmul_n_f32(v577, vmul_f32(v580, vrsqrts_f32((float32x2_t)v578.u32[0], vmul_f32(v580, v580))).f32[0]), v811);
      v583 = a1[1].u32[0] + (unint64_t)(v13 + 17);
      DWORD2(v582) = 0;
      *((float *)&v582 + 3) = v64;
      *(_OWORD *)(a1[2].i64[1] + 16 * v583) = v582;
      *(_DWORD *)(a1[1].i64[1] + 4 * v583) = v568.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v583) = v547;
      v584 = a1[1].u32[0] + (unint64_t)(v13 + 20);
      *(_OWORD *)(a1[2].i64[1] + 16 * v584) = v572;
      *(_DWORD *)(a1[1].i64[1] + 4 * v584) = v568.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v584) = LODWORD(v858);
      v585 = a1[1].u32[0] + (unint64_t)(v13 + 21);
      *(_OWORD *)(a1[2].i64[1] + 16 * v585) = v557;
      *(_DWORD *)(a1[1].i64[1] + 4 * v585) = v569.i32[0];
      *(_QWORD *)(a1[2].i64[0] + 8 * v585) = LODWORD(v858);
      v483 = v13 + 24;
    }
    v586 = a1[1].u32[0] + (unint64_t)v483;
    *(_OWORD *)(a1[2].i64[1] + 16 * v586) = v557;
    v587 = vmovn_s16(v73).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v586) = v587;
    *(_QWORD *)(a1[2].i64[0] + 8 * v586) = LODWORD(v858);
    v588 = a1[1].u32[0] + (unint64_t)(v483 + 1);
    *(_OWORD *)(a1[2].i64[1] + 16 * v588) = v562;
    *(_DWORD *)(a1[1].i64[1] + 4 * v588) = v587;
    *(_QWORD *)(a1[2].i64[0] + 8 * v588) = _D20;
  }
  v589 = v483 + 4;
LABEL_185:
  a1[12].i32[1] = v589;
}

float32x2_t sk_ray2::intersection(float32x2_t *a1, float32x2_t *a2)
{
  uint64_t v4;

  v4 = 0;
  sk_ray2::intersect(a1, a2, (float *)&v4 + 1, (float *)&v4);
  return vmla_n_f32(*a1, a1[1], *((float *)&v4 + 1));
}

BOOL sk_ray2::intersect(float32x2_t *a1, float32x2_t *a2, float *a3, float *a4)
{
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float v16;
  float32x2_t v17;
  float v18;
  float v19;
  float v20;
  BOOL v21;
  float v22;
  float v23;
  _BOOL8 result;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float v32;
  float32x2_t v33;

  v4 = a2[1];
  v5 = vmul_f32(v4, v4);
  v6 = vadd_f32(v5, (float32x2_t)vdup_lane_s32((int32x2_t)v5, 1));
  v7 = vrsqrte_f32((float32x2_t)v6.u32[0]);
  v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v7, v7)));
  v9 = vmul_n_f32(v4, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v8, v8))).f32[0]);
  v10 = a1[1];
  v11 = vmul_f32(v10, v10);
  v12 = vadd_f32(v11, (float32x2_t)vdup_lane_s32((int32x2_t)v11, 1));
  v13 = vrsqrte_f32((float32x2_t)v12.u32[0]);
  v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v13, v13)));
  v15 = vmul_n_f32(v10, vmul_f32(v14, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v14, v14))).f32[0]);
  v16 = vmlas_n_f32((float)-v9.f32[1] * v15.f32[0], v15.f32[1], v9.f32[0]);
  v17 = vsub_f32(*a2, *a1);
  v18 = vmlas_n_f32((float)-v10.f32[1] * v4.f32[0], v4.f32[1], v10.f32[0]);
  v19 = vmlas_n_f32(-(float)(v17.f32[1] * v4.f32[0]), v4.f32[1], v17.f32[0]) / v18;
  v20 = vmlas_n_f32(-(float)(v17.f32[1] * v10.f32[0]), v10.f32[1], v17.f32[0]) / v18;
  v21 = (LODWORD(v18) & 0x60000000) == 0;
  if ((LODWORD(v18) & 0x60000000) != 0)
    v22 = v19;
  else
    v22 = 0.0;
  if (v21)
    v23 = 0.0;
  else
    v23 = v20;
  if ((LODWORD(v16) & 0x60000000) == 0)
  {
    if ((COERCE_UNSIGNED_INT(vmlas_n_f32(-(float)(v17.f32[1] * v10.f32[0]), v10.f32[1], v17.f32[0])) & 0x60000000) != 0)
    {
      result = 0;
      *a3 = 0.0;
      *a4 = 0.0;
      return result;
    }
    v25 = vmul_f32(v10, v17);
    v26 = vsub_f32(*a1, *a2);
    if (vaddv_f32(v25) < 0.0
      || (v27 = vadd_f32(v25, (float32x2_t)vdup_lane_s32((int32x2_t)v25, 1)),
          (vmvn_s8((int8x8_t)vcge_f32(v12, v27)).u8[0] & 1) != 0))
    {
      result = 0;
      v30 = vmul_f32(v4, v26);
      v31 = vadd_f32(v30, (float32x2_t)vdup_lane_s32((int32x2_t)v30, 1));
      if (v31.f32[0] < 0.0 || (vmvn_s8((int8x8_t)vcge_f32(v6, v31)).u8[0] & 1) != 0)
        return result;
      LODWORD(v32) = vdiv_f32(v31, v6).u32[0];
      v33 = vmla_n_f32(v17, v4, v32);
      *a3 = sqrtf(vaddv_f32(vmul_f32(v33, v33))) / sqrtf(vaddv_f32(v11));
      *a4 = v32;
    }
    else
    {
      LODWORD(v28) = vdiv_f32(v27, v12).u32[0];
      v29 = vmla_n_f32(v26, v10, v28);
      *a3 = v28;
      *a4 = sqrtf(vaddv_f32(vmul_f32(v29, v29))) / sqrtf(vaddv_f32(v5));
    }
    return 1;
  }
  *a3 = v22;
  *a4 = v23;
  if (v22 >= 0.0 && v22 <= 1.0)
    return 1;
  return v23 <= 1.0 && v23 >= 0.0;
}

__n128 addCaps(uint64_t a1, double a2, double a3, __n128 a4)
{
  int16x8_t v4;
  __int128 v6;
  float32x2_t v7;
  float32x2_t v8;
  float v9;
  float32x4_t v10;
  unsigned int v11;
  int v12;
  int v13;
  float v14;
  float v15;
  float v16;
  int v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  __int128 v22;
  uint64_t v23;
  float v25;
  float32x4_t v26;
  float32x4_t v27;
  unsigned __int32 v28;
  float v29;
  float32x2_t v30;
  __int128 v31;
  uint64_t v32;
  int16x8_t v33;
  unsigned __int32 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  __int128 v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  float32x2_t v52;
  float32x2_t v53;
  __int128 v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float v59;
  float v60;
  uint64_t v61;
  float32x4_t v62;
  int16x8_t v63;
  unsigned __int32 v64;
  unint64_t v65;
  float32x2_t v66;
  __int128 v67;
  uint64_t v68;
  int16x8_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  unsigned int v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  __int128 v79;
  uint64_t v80;
  float v81;
  float32x4_t v82;
  float32x4_t v83;
  unsigned __int32 v84;
  float v85;
  float32x2_t v86;
  __int128 v87;
  uint64_t v88;
  int16x8_t v89;
  unsigned __int32 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  __int128 v100;
  float v101;
  unint64_t v102;
  unint64_t v103;
  __int128 v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  unint64_t v108;
  __int128 v109;
  uint64_t v110;
  BOOL v111;
  float v112;
  unsigned __int32 v113;
  __int128 v114;
  uint64_t v115;
  float v116;
  unint64_t v117;
  unsigned __int32 v118;
  _QWORD *v119;
  unint64_t v120;
  float v121;
  float32x4_t v122;
  float v123;
  unint64_t v124;
  unsigned __int32 v125;
  unint64_t v126;
  float32x2_t v127;
  float32x2_t v128;
  float32x2_t v129;
  float32x2_t v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  float v134;
  int16x8_t v135;
  unsigned __int32 v136;
  unint64_t v137;
  unint64_t v138;
  __int128 v139;
  unsigned __int32 v140;
  unint64_t v141;
  __int128 v142;
  __int128 v143;
  unint64_t v144;
  __int128 v145;
  uint64_t v146;
  float v147;
  unsigned __int32 v148;
  __int128 v149;
  uint64_t v150;
  unint64_t v151;
  unsigned __int32 v152;
  unint64_t v153;
  float v154;
  int v155;
  int v156;
  float32x4_t v157;
  uint64_t v158;
  double v159;
  float32x2_t v160;
  float v161;
  float v162;
  int16x8_t v163;
  double v164;
  float v165;
  float v166;
  float v167;
  __float2 v168;
  float32x2_t v169;
  float v170;
  __float2 v171;
  float32x2_t v172;
  __float2 v173;
  uint64_t v174;
  unint64_t v175;
  __int128 v176;
  unint64_t v177;
  __int128 v178;
  unint64_t v179;
  unint64_t v180;
  float32x2_t v181;
  float32x2_t v182;
  float32x2_t v183;
  float32x2_t v184;
  float32x2_t v185;
  float32x2_t v186;
  float32x2_t v187;
  float32x2_t v188;
  float32x2_t v189;
  __int128 v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  __int128 v194;
  unint64_t v195;
  int v196;
  __int128 v201;
  double v202;
  float v203;
  float v204;
  float v205;
  __float2 v206;
  float32x2_t v207;
  float v208;
  __float2 v209;
  float32x2_t v210;
  __float2 v211;
  uint64_t v212;
  unint64_t v213;
  __int128 v214;
  unint64_t v215;
  __int128 v216;
  unint64_t v217;
  unint64_t v218;
  float32x2_t v219;
  float32x2_t v220;
  float32x2_t v221;
  float32x2_t v222;
  float32x2_t v223;
  float32x2_t v224;
  float32x2_t v225;
  float32x2_t v226;
  float32x2_t v227;
  __int128 v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  __int128 v232;
  unint64_t v233;
  float v234;
  unint64_t v235;
  unsigned __int32 v236;
  __n128 result;
  int16x8_t v238;
  int16x8_t v239;
  unsigned __int32 v240;
  unsigned __int32 v241;
  unsigned __int32 v242;
  unsigned __int32 v243;
  __int128 v244;
  float v245;
  float v246;
  float v247;
  float v248;
  float32x2_t v249;
  __n128 v250;
  float32x2_t v251;
  __int128 v252;
  float32x2_t v253;
  float32x2_t v254;
  float32x2_t v255;
  float32x2_t v256;
  float32x2_t v257;
  uint64_t v258;
  float32x2_t v259;

  *(_QWORD *)&v6 = *(_QWORD *)(a1 + 208);
  v8 = *(float32x2_t *)(a1 + 224);
  v7 = *(float32x2_t *)(a1 + 232);
  v256 = *(float32x2_t *)(a1 + 248);
  v9 = *(float *)(a1 + 192);
  v10 = *(float32x4_t *)(a1 + 176);
  v11 = *(_DWORD *)(a1 + 196);
  v12 = *(unsigned __int8 *)(a1 + 148);
  v13 = *(unsigned __int8 *)(a1 + 149);
  LODWORD(a3) = *(_DWORD *)(a1 + 152);
  v14 = *(float *)(a1 + 144);
  v15 = *(float *)(a1 + 160);
  a4.n128_u32[0] = *(_DWORD *)(a1 + 204);
  v250 = a4;
  v16 = *(float *)(a1 + 200);
  v17 = *(_DWORD *)(a1 + 128);
  switch(v17)
  {
    case 2:
      v52 = *(float32x2_t *)(a1 + 216);
      v53 = *(float32x2_t *)(a1 + 240);
      *(float32x2_t *)&v54 = vsub_f32(vadd_f32(*(float32x2_t *)&v6, v8), v52);
      if (*(_BYTE *)(a1 + 148))
      {
        v55 = vmul_f32(v8, v8);
        v55.i32[0] = vadd_f32(v55, (float32x2_t)vdup_lane_s32((int32x2_t)v55, 1)).u32[0];
        v56 = vrsqrte_f32((float32x2_t)v55.u32[0]);
        v57 = vmul_f32(v56, vrsqrts_f32((float32x2_t)v55.u32[0], vmul_f32(v56, v56)));
        v58 = vmul_n_f32(v8, vmul_f32(v57, vrsqrts_f32((float32x2_t)v55.u32[0], vmul_f32(v57, v57))).f32[0]);
        v59 = (float)(v14 * -0.5) / v15;
        if (*(_BYTE *)(a1 + 149))
          v60 = 0.0;
        else
          v60 = 1.0;
        DWORD2(v54) = 0;
        *((float *)&v54 + 3) = v60;
        v10.i32[3] = 1.0;
        v61 = *(unsigned int *)(a1 + 16);
        v62 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        v63 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v10, v9), v62));
        *(int16x4_t *)v63.i8 = vmovn_s32((int32x4_t)v63);
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v61) = v54;
        v64 = vmovn_s16(v63).u32[0];
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v61) = v64;
        v65 = __PAIR64__(1.0, LODWORD(v59));
        v66 = vmul_n_f32(v58, *(float *)&a3 + (float)(v14 * 0.5));
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v61) = __PAIR64__(1.0, LODWORD(v59));
        *(float32x2_t *)&v67 = vsub_f32(vadd_f32(*(float32x2_t *)&v6, v66), v52);
        v68 = *(unsigned int *)(a1 + 16) + 1;
        DWORD2(v67) = 0;
        *((float *)&v67 + 3) = v60;
        v69 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v10, (float32x4_t)0), v62));
        *(int16x4_t *)v69.i8 = vmovn_s32((int32x4_t)v69);
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v68) = v67;
        LODWORD(v67) = vmovn_s16(v69).u32[0];
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v68) = v67;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v68) = __PAIR64__(1.0, LODWORD(v59));
        *(float32x2_t *)&v70 = vsub_f32(vsub_f32(*(float32x2_t *)&v6, v66), v52);
        v71 = *(unsigned int *)(a1 + 16) + 4;
        DWORD2(v70) = 0;
        *((float *)&v70 + 3) = v60;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v71) = v70;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v71) = v67;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v71) = LODWORD(v59);
        *(float32x2_t *)&v73 = vsub_f32(vsub_f32(*(float32x2_t *)&v6, v8), v52);
        v72 = *(unsigned int *)(a1 + 16) + 5;
        DWORD2(v73) = 0;
        *((float *)&v73 + 3) = v60;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v72) = v73;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v72) = v64;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v72) = LODWORD(v59);
        v74 = 8;
      }
      else
      {
        v74 = 0;
        v122 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        *(float32x2_t *)&v73 = vsub_f32(vsub_f32(*(float32x2_t *)&v6, v8), v52);
        *(float *)&v65 = (float)(v14 * -0.5) / v15;
        v123 = 0.0;
        DWORD2(v73) = 0;
        if (!*(_BYTE *)(a1 + 149))
          v123 = 1.0;
        *((float *)&v73 + 3) = v123;
        v10.i32[3] = 1.0;
        v63 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v10, v9), v122));
        *(int16x4_t *)v63.i8 = vmovn_s32((int32x4_t)v63);
        v59 = (float)(v14 * -0.5) / v15;
        DWORD2(v54) = 0;
        *((float *)&v54 + 3) = v123;
        HIDWORD(v65) = 1.0;
      }
      v124 = *(unsigned int *)(a1 + 16) + (unint64_t)v74;
      *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v124) = v73;
      v125 = vmovn_s16(v63).u32[0];
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v124) = v125;
      v119 = (_QWORD *)(a1 + 32);
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v124) = LODWORD(v59);
      v126 = *(unsigned int *)(a1 + 16) + (unint64_t)(v74 | 1);
      *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v126) = v54;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v126) = v125;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v126) = v65;
      if (v12)
      {
        v127 = vmul_f32(v256, v256);
        v127.i32[0] = vadd_f32(v127, (float32x2_t)vdup_lane_s32((int32x2_t)v127, 1)).u32[0];
        v128 = vrsqrte_f32((float32x2_t)v127.u32[0]);
        v129 = vmul_f32(v128, vrsqrts_f32((float32x2_t)v127.u32[0], vmul_f32(v128, v128)));
        v130 = vmul_n_f32(vmul_n_f32(v256, vmul_f32(v129, vrsqrts_f32((float32x2_t)v127.u32[0], vmul_f32(v129, v129))).f32[0]), *(float *)&a3 + (float)(v14 * 0.5));
        v131 = v11 - 10;
        *(float32x2_t *)&v132 = vadd_f32(v53, vadd_f32(v7, v130));
        v121 = v250.n128_f32[0] + (float)((float)(v14 * 0.5) / v15);
        v133 = *(unsigned int *)(a1 + 16);
        if (v13)
          v134 = v16;
        else
          v134 = 1.0;
        DWORD2(v132) = 0;
        *((float *)&v132 + 3) = v134;
        v135 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v10, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u)));
        *(int16x4_t *)v135.i8 = vmovn_s32((int32x4_t)v135);
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * (v133 + v131)) = v132;
        v136 = vmovn_s16(v135).u32[0];
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * (v133 + v131)) = v136;
        v137 = __PAIR64__(1.0, LODWORD(v121));
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v133 + v131)) = __PAIR64__(1.0, LODWORD(v121));
        *(float32x2_t *)&v139 = vadd_f32(v53, vadd_f32(v7, v256));
        v138 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 9);
        DWORD2(v139) = 0;
        *((float *)&v139 + 3) = v134;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v138) = v139;
        v140 = vmovn_s16(v63).u32[0];
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v138) = v140;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v138) = __PAIR64__(1.0, LODWORD(v121));
        *(float32x2_t *)&v142 = vadd_f32(v53, vsub_f32(v7, v256));
        v141 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 6);
        DWORD2(v142) = 0;
        *((float *)&v142 + 3) = v134;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v141) = v142;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v141) = v140;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v141) = LODWORD(v121);
        *(float32x2_t *)&v143 = vadd_f32(v53, vsub_f32(v7, v130));
        DWORD2(v143) = 0;
        v144 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 5);
        *((float *)&v143 + 3) = v134;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v144) = v143;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v144) = v136;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v144) = LODWORD(v121);
      }
      else
      {
        *(float32x2_t *)&v139 = vadd_f32(v53, vadd_f32(v7, v256));
        if (v13)
          v234 = v16;
        else
          v234 = 1.0;
        DWORD2(v139) = 0;
        *((float *)&v139 + 3) = v234;
        v121 = v250.n128_f32[0] + (float)((float)(v14 * 0.5) / v15);
        *(float *)&v137 = v121;
        HIDWORD(v137) = 1.0;
        *(float32x2_t *)&v142 = vadd_f32(v53, vsub_f32(v7, v256));
        DWORD2(v142) = 0;
        *((float *)&v142 + 3) = v234;
      }
      v235 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 2);
      *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v235) = v139;
      v236 = vmovn_s16(v63).u32[0];
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v235) = v236;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v235) = v137;
      v120 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 1);
      *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v120) = v142;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v120) = v236;
      goto LABEL_65;
    case 1:
      if (*(_BYTE *)(a1 + 148))
      {
        v75 = vmul_f32(v8, v8);
        v75.i32[0] = vadd_f32(v75, (float32x2_t)vdup_lane_s32((int32x2_t)v75, 1)).u32[0];
        v76 = vrsqrte_f32((float32x2_t)v75.u32[0]);
        v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v76, v76)));
        v78 = vmul_n_f32(v8, vmul_f32(v77, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v77, v77))).f32[0]);
        *(float32x2_t *)&v79 = vadd_f32(*(float32x2_t *)&v6, v8);
        v80 = *(unsigned int *)(a1 + 16);
        if (*(_BYTE *)(a1 + 149))
          v81 = 0.0;
        else
          v81 = 1.0;
        DWORD2(v79) = 0;
        *((float *)&v79 + 3) = v81;
        v10.i32[3] = 1.0;
        v82 = vmulq_n_f32(v10, v9);
        v83 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        *(int16x4_t *)v4.i8 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v82, v83)));
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v80) = v79;
        v84 = vmovn_s16(v4).u32[0];
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v80) = v84;
        v85 = *(float *)&a3 + (float)(v14 * 0.5);
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v80) = 0x3F80000000000000;
        v86 = vmul_n_f32(v78, v85);
        *(float32x2_t *)&v87 = vadd_f32(*(float32x2_t *)&v6, v86);
        v88 = *(unsigned int *)(a1 + 16) + 1;
        DWORD2(v87) = 0;
        *((float *)&v87 + 3) = v81;
        v89 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v10, (float32x4_t)0), v83));
        *(int16x4_t *)v89.i8 = vmovn_s32((int32x4_t)v89);
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v88) = v87;
        v90 = vmovn_s16(v89).u32[0];
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v88) = v90;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v88) = 0x3F80000000000000;
        *(float32x2_t *)&v91 = vsub_f32(*(float32x2_t *)&v6, v86);
        v92 = *(unsigned int *)(a1 + 16) + 4;
        DWORD2(v91) = 0;
        *((float *)&v91 + 3) = v81;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v92) = v91;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v92) = v90;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v92) = 0;
        *(float32x2_t *)&v87 = vsub_f32(*(float32x2_t *)&v6, v8);
        v93 = *(unsigned int *)(a1 + 16) + 5;
        DWORD2(v87) = 0;
        *((float *)&v87 + 3) = v81;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v93) = v87;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v93) = v84;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v93) = 0;
        v94 = *(unsigned int *)(a1 + 16) + 8;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v94) = v87;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v94) = v84;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v94) = 0;
        v95 = *(unsigned int *)(a1 + 16) + 9;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v95) = v79;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v95) = v84;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v95) = 0x3F80000000000000;
        v96 = vmul_f32(v256, v256);
        v96.i32[0] = vadd_f32(v96, (float32x2_t)vdup_lane_s32((int32x2_t)v96, 1)).u32[0];
        v97 = vrsqrte_f32((float32x2_t)v96.u32[0]);
        v98 = vmul_f32(v97, vrsqrts_f32((float32x2_t)v96.u32[0], vmul_f32(v97, v97)));
        v99 = vmul_n_f32(vmul_n_f32(v256, vmul_f32(v98, vrsqrts_f32((float32x2_t)v96.u32[0], vmul_f32(v98, v98))).f32[0]), v85);
        *(float32x2_t *)&v100 = vadd_f32(v7, v99);
        if (v13)
          v101 = v16;
        else
          v101 = 1.0;
        DWORD2(v100) = 0;
        v102 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 10);
        *((float *)&v100 + 3) = v101;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v102) = v100;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v102) = v90;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v102) = 0x3F80000000000000;
        *(float32x2_t *)&v104 = vadd_f32(v7, v256);
        DWORD2(v104) = 0;
        v103 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 9);
        *((float *)&v104 + 3) = v101;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v103) = v104;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v103) = v84;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v103) = 0x3F80000000000000;
        *(float32x2_t *)&v106 = vsub_f32(v7, v256);
        DWORD2(v106) = 0;
        v105 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 6);
        *((float *)&v106 + 3) = v101;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v105) = v106;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v105) = v84;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v105) = 0;
        *(float32x2_t *)&v107 = vsub_f32(v7, v99);
        DWORD2(v107) = 0;
        v108 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 5);
        *((float *)&v107 + 3) = v101;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v108) = v107;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v108) = v90;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v108) = 0;
      }
      else
      {
        *(float32x2_t *)&v145 = vsub_f32(*(float32x2_t *)&v6, v8);
        v146 = *(unsigned int *)(a1 + 16);
        v147 = 0.0;
        if (!*(_BYTE *)(a1 + 149))
          v147 = 1.0;
        DWORD2(v145) = 0;
        *((float *)&v145 + 3) = v147;
        v10.i32[3] = 1.0;
        *(int16x4_t *)v4.i8 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v10, v9), (float32x4_t)vdupq_n_s32(0x437F0000u))));
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v146) = v145;
        v148 = vmovn_s16(v4).u32[0];
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v146) = v148;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v146) = 0;
        *(float32x2_t *)&v149 = vadd_f32(*(float32x2_t *)&v6, v8);
        v150 = *(unsigned int *)(a1 + 16) + 1;
        DWORD2(v149) = 0;
        *((float *)&v149 + 3) = v147;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v150) = v149;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v150) = v148;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v150) = 0x3F80000000000000;
        *(float32x2_t *)&v104 = vadd_f32(v7, v256);
        if (v13)
          v101 = v16;
        else
          v101 = 1.0;
        DWORD2(v104) = 0;
        *((float *)&v104 + 3) = v101;
        *(float32x2_t *)&v106 = vsub_f32(v7, v256);
        DWORD2(v106) = 0;
        *((float *)&v106 + 3) = v101;
      }
      v151 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 2);
      *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v151) = v104;
      v152 = vmovn_s16(v4).u32[0];
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v151) = v152;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v151) = __PAIR64__(1.0, v250.n128_u32[0]);
      v153 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 1);
      *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v153) = v106;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v153) = v152;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v153) = v250.n128_u32[0];
      v154 = (float)(v14 + (float)(*(float *)(a1 + 152) * 2.0)) * 0.14;
      v155 = (int)(float)((float)(ceilf(v154) * 2.0) + 2.0);
      if (v155 >= 1)
      {
        v246 = v101;
        v247 = v15;
        v248 = v14;
        v259 = v7;
        v156 = 0;
        v157 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        v158 = 0x3F80000000000000;
        v159 = (double)v155;
        v160 = v8;
        v161 = 0.0;
        if (!v13)
          v161 = 1.0;
        v257 = (float32x2_t)v6;
        DWORD2(v6) = 0;
        *((float *)&v6 + 3) = v161;
        v244 = v6;
        v245 = v161;
        v249 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0);
        v162 = -v8.f32[1];
        v163 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v10, (float32x4_t)0), v157));
        *(int16x4_t *)v163.i8 = vmovn_s32((int32x4_t)v163);
        v164 = 0.0;
        v242 = vmovn_s16(v4).u32[0];
        v238 = v163;
        v239 = v4;
        v240 = vmovn_s16(v163).u32[0];
        do
        {
          v165 = v164 * 3.14159265 / v159 + 1.57079633;
          v166 = (double)++v156 * 3.14159265 / v159 + 1.57079633;
          v167 = v165 + -1.57079633;
          v168 = __sincosf_stret(v167);
          v169.f32[0] = (float)(v168.__sinval * v162) + (float)(v160.f32[0] * v168.__cosval);
          v169.f32[1] = (float)(v160.f32[1] * v168.__cosval) + (float)(v160.f32[0] * v168.__sinval);
          v253 = vadd_f32(v257, v169);
          v170 = v166 + -1.57079633;
          v171 = __sincosf_stret(v170);
          v172.f32[0] = (float)(v171.__sinval * v162) + (float)(v160.f32[0] * v171.__cosval);
          v172.f32[1] = (float)(v160.f32[1] * v171.__cosval) + (float)(v160.f32[0] * v171.__sinval);
          v251 = vadd_f32(v257, v172);
          v173 = __sincosf_stret(v166);
          *(float *)&v174 = (float)((float)((float)(v248 * v173.__cosval) * 0.5) / v247) + 0.0;
          *((float *)&v174 + 1) = (float)(v173.__sinval + 1.0) * 0.5;
          *(float32x2_t *)&v176 = v253;
          DWORD2(v176) = 0;
          v175 = *(unsigned int *)(a1 + 16) + (unint64_t)v11;
          *((float *)&v176 + 3) = v245;
          *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v175) = v176;
          *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v175) = v242;
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v175) = v158;
          v177 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 1);
          *(float32x2_t *)&v178 = v251;
          *((_QWORD *)&v178 + 1) = __PAIR64__(LODWORD(v245), 0);
          *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v177) = v178;
          *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v177) = v242;
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v177) = v174;
          v179 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 2);
          *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v179) = v244;
          *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v179) = v242;
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v179) = 0x3F00000000000000;
          v180 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 3);
          *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v180) = v244;
          *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v180) = v242;
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v180) = 0x3F00000000000000;
          if (v12)
          {
            v181 = vsub_f32(v253, v257);
            v182 = vmul_f32(v181, v181);
            v182.i32[0] = vadd_f32(v182, (float32x2_t)vdup_lane_s32((int32x2_t)v182, 1)).u32[0];
            v183 = vrsqrte_f32((float32x2_t)v182.u32[0]);
            v184 = vmul_f32(v183, vrsqrts_f32((float32x2_t)v182.u32[0], vmul_f32(v183, v183)));
            v185 = vmul_n_f32(v181, vmul_f32(v184, vrsqrts_f32((float32x2_t)v182.u32[0], vmul_f32(v184, v184))).f32[0]);
            v186 = vsub_f32(v251, v257);
            v187 = vmul_f32(v186, v186);
            v187.i32[0] = vadd_f32(v187, (float32x2_t)vdup_lane_s32((int32x2_t)v187, 1)).u32[0];
            v188 = vrsqrte_f32((float32x2_t)v187.u32[0]);
            v189 = vmul_f32(v188, vrsqrts_f32((float32x2_t)v187.u32[0], vmul_f32(v188, v188)));
            *(float32x2_t *)&v190 = vmla_f32(v251, v249, vmul_n_f32(v186, vmul_f32(v189, vrsqrts_f32((float32x2_t)v187.u32[0], vmul_f32(v189, v189))).f32[0]));
            v191 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 4);
            *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v191) = v176;
            *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v191) = v242;
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v191) = v158;
            v192 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 5);
            *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v192) = v178;
            *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v192) = v242;
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v192) = v174;
            DWORD2(v190) = 0;
            v193 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 6);
            *((float *)&v190 + 3) = v245;
            *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v193) = v190;
            *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v193) = v240;
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v193) = v174;
            *(float32x2_t *)&v194 = vmla_f32(v253, v249, v185);
            v195 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 7);
            DWORD2(v194) = 0;
            *((float *)&v194 + 3) = v245;
            *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v195) = v194;
            *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v195) = v240;
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v195) = v158;
            v11 += 8;
          }
          else
          {
            v11 += 4;
          }
          v164 = v164 + 1.0;
          v158 = v174;
        }
        while (v155 != v156);
        v196 = 0;
        __asm { FMOV            V3.2S, #1.0 }
        LODWORD(_D3) = v250.n128_u32[0];
        *(float32x2_t *)&v201 = v259;
        DWORD2(v201) = 0;
        *((float *)&v201 + 3) = v246;
        v252 = v201;
        v202 = 0.0;
        v243 = vmovn_s16(v239).u32[0];
        v241 = vmovn_s16(v238).u32[0];
        do
        {
          v258 = _D3;
          v203 = v202 * 3.14159265 / v159 + 1.57079633;
          v204 = (double)++v196 * 3.14159265 / v159 + 1.57079633;
          v205 = v203 + -1.57079633;
          v206 = __sincosf_stret(v205);
          v207.f32[0] = (float)(v256.f32[1] * v206.__sinval) + (float)(v256.f32[0] * v206.__cosval);
          v207.f32[1] = (float)(v256.f32[1] * v206.__cosval) - (float)(v256.f32[0] * v206.__sinval);
          v255 = vadd_f32(v259, v207);
          v208 = v204 + -1.57079633;
          v209 = __sincosf_stret(v208);
          v210.f32[0] = (float)(v256.f32[1] * v209.__sinval) + (float)(v256.f32[0] * v209.__cosval);
          v210.f32[1] = (float)(v256.f32[1] * v209.__cosval) - (float)(v256.f32[0] * v209.__sinval);
          v254 = vadd_f32(v259, v210);
          v211 = __sincosf_stret(v204);
          *(float *)&v212 = v250.n128_f32[0] - (float)((float)((float)(v248 * v211.__cosval) * 0.5) / v247);
          *((float *)&v212 + 1) = (float)(v211.__sinval + 1.0) * 0.5;
          *(float32x2_t *)&v214 = v255;
          DWORD2(v214) = 0;
          v213 = *(unsigned int *)(a1 + 16) + (unint64_t)v11;
          *((float *)&v214 + 3) = v246;
          *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v213) = v214;
          *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v213) = v243;
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v213) = v258;
          v215 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 1);
          *(float32x2_t *)&v216 = v254;
          *((_QWORD *)&v216 + 1) = __PAIR64__(LODWORD(v246), 0);
          *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v215) = v216;
          *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v215) = v243;
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v215) = v212;
          v217 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 2);
          *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v217) = v252;
          *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v217) = v243;
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v217) = __PAIR64__(0.5, v250.n128_u32[0]);
          v218 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 3);
          *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v218) = v252;
          *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v218) = v243;
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v218) = __PAIR64__(0.5, v250.n128_u32[0]);
          if (v12)
          {
            v219 = vsub_f32(v255, v259);
            v220 = vmul_f32(v219, v219);
            v220.i32[0] = vadd_f32(v220, (float32x2_t)vdup_lane_s32((int32x2_t)v220, 1)).u32[0];
            v221 = vrsqrte_f32((float32x2_t)v220.u32[0]);
            v222 = vmul_f32(v221, vrsqrts_f32((float32x2_t)v220.u32[0], vmul_f32(v221, v221)));
            v223 = vmul_n_f32(v219, vmul_f32(v222, vrsqrts_f32((float32x2_t)v220.u32[0], vmul_f32(v222, v222))).f32[0]);
            v224 = vsub_f32(v254, v259);
            v225 = vmul_f32(v224, v224);
            v225.i32[0] = vadd_f32(v225, (float32x2_t)vdup_lane_s32((int32x2_t)v225, 1)).u32[0];
            v226 = vrsqrte_f32((float32x2_t)v225.u32[0]);
            v227 = vmul_f32(v226, vrsqrts_f32((float32x2_t)v225.u32[0], vmul_f32(v226, v226)));
            *(float32x2_t *)&v228 = vmla_f32(v254, v249, vmul_n_f32(v224, vmul_f32(v227, vrsqrts_f32((float32x2_t)v225.u32[0], vmul_f32(v227, v227))).f32[0]));
            v229 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 4);
            *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v229) = v214;
            *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v229) = v243;
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v229) = v258;
            v230 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 5);
            *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v230) = v216;
            *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v230) = v243;
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v230) = v212;
            DWORD2(v228) = 0;
            v231 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 6);
            *((float *)&v228 + 3) = v246;
            *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v231) = v228;
            *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v231) = v241;
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v231) = v212;
            *(float32x2_t *)&v232 = vmla_f32(v255, v249, v223);
            v233 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 7);
            DWORD2(v232) = 0;
            *((float *)&v232 + 3) = v246;
            *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v233) = v232;
            *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v233) = v241;
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v233) = v258;
            v11 += 8;
          }
          else
          {
            v11 += 4;
          }
          v202 = v202 + 1.0;
          _D3 = v212;
        }
        while (v155 != v196);
      }
      break;
    case 0:
      if (*(_BYTE *)(a1 + 148))
      {
        v18 = vmul_f32(v8, v8);
        v18.i32[0] = vadd_f32(v18, (float32x2_t)vdup_lane_s32((int32x2_t)v18, 1)).u32[0];
        v19 = vrsqrte_f32((float32x2_t)v18.u32[0]);
        v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
        v21 = vmul_n_f32(v8, vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]);
        *(float32x2_t *)&v22 = vadd_f32(*(float32x2_t *)&v6, v8);
        v23 = *(unsigned int *)(a1 + 16);
        _ZF = v13 == 0;
        if (*(_BYTE *)(a1 + 149))
          v25 = 0.0;
        else
          v25 = 1.0;
        DWORD2(v22) = 0;
        *((float *)&v22 + 3) = v25;
        v10.i32[3] = 1.0;
        v26 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        v27 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v10, v9), v26));
        *(int16x4_t *)v27.f32 = vmovn_s32((int32x4_t)v27);
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v23) = v22;
        v28 = vmovn_s16((int16x8_t)v27).u32[0];
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v23) = v28;
        v29 = *(float *)&a3 + (float)(v14 * 0.5);
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v23) = 0x3F80000000000000;
        v30 = vmul_n_f32(v21, v29);
        *(float32x2_t *)&v31 = vadd_f32(*(float32x2_t *)&v6, v30);
        v32 = *(unsigned int *)(a1 + 16) + 1;
        DWORD2(v31) = 0;
        *((float *)&v31 + 3) = v25;
        v33 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v10, (float32x4_t)0), v26));
        *(int16x4_t *)v33.i8 = vmovn_s32((int32x4_t)v33);
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v32) = v31;
        v34 = vmovn_s16(v33).u32[0];
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v32) = v34;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v32) = 0x3F80000000000000;
        *(float32x2_t *)&v35 = vsub_f32(*(float32x2_t *)&v6, v30);
        v36 = *(unsigned int *)(a1 + 16) + 4;
        DWORD2(v35) = 0;
        *((float *)&v35 + 3) = v25;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v36) = v35;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v36) = v34;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v36) = 0;
        *(float32x2_t *)v26.f32 = vsub_f32(*(float32x2_t *)&v6, v8);
        v37 = *(unsigned int *)(a1 + 16) + 5;
        v26.i32[2] = 0;
        v26.f32[3] = v25;
        *(float32x4_t *)(*(_QWORD *)(a1 + 40) + 16 * v37) = v26;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v37) = v28;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v37) = 0;
        v38 = *(unsigned int *)(a1 + 16) + 8;
        *(float32x4_t *)(*(_QWORD *)(a1 + 40) + 16 * v38) = v26;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v38) = v28;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v38) = 0;
        v39 = *(unsigned int *)(a1 + 16) + 9;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v39) = v22;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v39) = v28;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v39) = 0x3F80000000000000;
        v40 = vmul_f32(v256, v256);
        v40.i32[0] = vadd_f32(v40, (float32x2_t)vdup_lane_s32((int32x2_t)v40, 1)).u32[0];
        v41 = vrsqrte_f32((float32x2_t)v40.u32[0]);
        v42 = vmul_f32(v41, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v41, v41)));
        v43 = vmul_n_f32(vmul_n_f32(v256, vmul_f32(v42, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v42, v42))).f32[0]), v29);
        *(float32x2_t *)&v44 = vadd_f32(v7, v43);
        if (_ZF)
          v16 = 1.0;
        DWORD2(v44) = 0;
        v45 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 10);
        *((float *)&v44 + 3) = v16;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v45) = v44;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v45) = v34;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v45) = 0x3F80000000000000;
        *(float32x2_t *)&v47 = vadd_f32(v7, v256);
        DWORD2(v47) = 0;
        v46 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 9);
        *((float *)&v47 + 3) = v16;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v46) = v47;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v46) = v28;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v46) = 0x3F80000000000000;
        *(float32x2_t *)&v49 = vsub_f32(v7, v256);
        DWORD2(v49) = 0;
        v48 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 6);
        *((float *)&v49 + 3) = v16;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v48) = v49;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v48) = v28;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v48) = 0;
        *(float32x2_t *)&v50 = vsub_f32(v7, v43);
        DWORD2(v50) = 0;
        v51 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 5);
        *((float *)&v50 + 3) = v16;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v51) = v50;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v51) = v34;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v51) = 0;
      }
      else
      {
        *(float32x2_t *)&v109 = vsub_f32(*(float32x2_t *)&v6, v8);
        v110 = *(unsigned int *)(a1 + 16);
        v111 = v13 == 0;
        if (*(_BYTE *)(a1 + 149))
          v112 = 0.0;
        else
          v112 = 1.0;
        DWORD2(v109) = 0;
        *((float *)&v109 + 3) = v112;
        v10.i32[3] = 1.0;
        v27 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        *(int16x4_t *)v27.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v10, v9), v27)));
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v110) = v109;
        v113 = vmovn_s16((int16x8_t)v27).u32[0];
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v110) = v113;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v110) = 0;
        *(float32x2_t *)&v114 = vadd_f32(*(float32x2_t *)&v6, v8);
        v115 = *(unsigned int *)(a1 + 16) + 1;
        DWORD2(v114) = 0;
        *((float *)&v114 + 3) = v112;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v115) = v114;
        *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v115) = v113;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v115) = 0x3F80000000000000;
        *(float32x2_t *)&v47 = vadd_f32(v7, v256);
        if (v111)
          v116 = 1.0;
        else
          v116 = v16;
        DWORD2(v47) = 0;
        *((float *)&v47 + 3) = v116;
        *(float32x2_t *)&v49 = vsub_f32(v7, v256);
        DWORD2(v49) = 0;
        *((float *)&v49 + 3) = v116;
      }
      v117 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 2);
      *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v117) = v47;
      v118 = vmovn_s16((int16x8_t)v27).u32[0];
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v117) = v118;
      v119 = (_QWORD *)(a1 + 32);
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v117) = __PAIR64__(1.0, v250.n128_u32[0]);
      v120 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 1);
      *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v120) = v49;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * v120) = v118;
      v121 = v250.n128_f32[0];
LABEL_65:
      *(_QWORD *)(*v119 + 8 * v120) = LODWORD(v121);
      break;
  }
  *(_DWORD *)(a1 + 196) = v11;
  result = v250;
  *(_DWORD *)(a1 + 204) = v250.n128_u32[0];
  return result;
}

BOOL SKCShapeNode::canAppendToCurrentBatch(SKBlendMode *this, SKCRenderInfo *a2)
{
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  if (SKCShapeNode::shouldUseLocalStrokeBuffers((SKCShapeNode *)this, a2))
    return 0;
  if (*((_DWORD *)a2 + 148) != 3)
    return 0;
  v4 = *((_DWORD *)a2 + 149);
  if (v4 != SKBlendModeGetBackingBlendMode(this[36])
    || *((_QWORD *)a2 + 76) != *((_QWORD *)a2 + 21)
    || *((_QWORD *)a2 + 75) != *((_QWORD *)this + 84)
    || *((_DWORD *)a2 + 163))
  {
    return 0;
  }
  v5 = (void *)*((_QWORD *)this + 82);
  if (v5)
  {
    objc_msgSend(v5, "_backingTexture");
    v6 = v9;
    std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&v9);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 54);
  }
  if (*((_QWORD *)a2 + 77) != v6)
    return 0;
  v8 = 512;
  if (!*((_QWORD *)this + 82))
    v8 = 480;
  return *((_QWORD *)a2 + 79) == *(_QWORD *)((char *)a2 + v8);
}

void SKCShapeNode::~SKCShapeNode(SKCShapeNode *this)
{
  SKCShapeNode::~SKCShapeNode(this);
  JUMPOUT(0x1DF0CF560);
}

{
  SKCompositeBezierPath *v2;
  const CGPath *v3;

  *(_QWORD *)this = off_1EA4FF9A0;
  v2 = (SKCompositeBezierPath *)*((_QWORD *)this + 70);
  if (v2)
  {
    SKCompositeBezierPath::~SKCompositeBezierPath(v2);
    MEMORY[0x1DF0CF560]();
    *((_QWORD *)this + 70) = 0;
  }
  v3 = (const CGPath *)*((_QWORD *)this + 79);
  if (v3)
  {
    CGPathRelease(v3);
    *((_QWORD *)this + 79) = 0;
  }
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 768);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 752);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 736);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 720);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 704);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 688);

  SKCNode::~SKCNode((id *)this);
}

uint64_t std::vector<jet_render_op>::__insert_with_size[abi:ne180100]<std::__wrap_iter<jet_render_op*>,std::__wrap_iter<jet_render_op*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  char *v29;
  uint64_t v30;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 6)) >= a5)
    {
      v20 = v12 - a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a2) >> 6)) >= a5)
      {
        v21 = a3 + 192 * a5;
      }
      else
      {
        v21 = a3 + ((uint64_t)(v12 - a2) >> 6 << 6);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<jet_render_op>,jet_render_op*,jet_render_op*,jet_render_op*>(v9, v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<jet_render_op>::__move_range((uint64_t)a1, v5, v12, v5 + 192 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<jet_render_op *,jet_render_op *,jet_render_op *>((uint64_t)v27, v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 6);
      if (v14 > 0x155555555555555)
        std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v13) >> 6);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 6);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0xAAAAAAAAAAAAAALL)
        v18 = 0x155555555555555;
      else
        v18 = v17;
      v30 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<jet_render_op>>(v9, v18);
      else
        v19 = 0;
      v22 = (uint64_t)&v19[192 * v15];
      v27[0] = v19;
      v27[1] = v22;
      v28 = v22;
      v29 = &v19[192 * v18];
      v23 = 3 * a5;
      v24 = v22 + 192 * a5;
      v25 = v23 << 6;
      do
      {
        std::allocator<jet_render_op>::construct[abi:ne180100]<jet_render_op,jet_render_op&>(v30, v22, v7);
        v22 += 192;
        v7 += 192;
        v25 -= 192;
      }
      while (v25);
      v28 = v24;
      v5 = std::vector<jet_render_op>::__swap_out_circular_buffer(a1, v27, v5);
      std::__split_buffer<jet_render_op>::~__split_buffer((uint64_t)v27);
    }
  }
  return v5;
}

void sub_1DC8AF9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<jet_render_op>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      std::allocator<jet_render_op>::construct[abi:ne180100]<jet_render_op,jet_render_op>(a1 + 16, v8, v10);
      v10 += 192;
      v8 += 192;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<jet_render_op *,jet_render_op *,jet_render_op *>((uint64_t)&v12, a2, v7, v6);
}

void sub_1DC8AFABC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<jet_render_op>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<jet_render_op>,std::reverse_iterator<jet_render_op*>,std::reverse_iterator<jet_render_op*>,std::reverse_iterator<jet_render_op*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<jet_render_op>,jet_render_op*,jet_render_op*,jet_render_op*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<jet_render_op>,jet_render_op*,jet_render_op*,jet_render_op*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  if (a2 != a3)
  {
    v8 = 0;
    do
    {
      std::allocator<jet_render_op>::construct[abi:ne180100]<jet_render_op,jet_render_op&>(a1, a4 + v8, a2 + v8);
      v8 += 192;
    }
    while (a2 + v8 != a3);
    a4 += v8;
  }
  return a4;
}

void sub_1DC8AFBE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 192;
    do
    {
      (**(void (***)(uint64_t))(v4 + v2))(v4 + v2);
      v2 -= 192;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::allocator<jet_render_op>::construct[abi:ne180100]<jet_render_op,jet_render_op&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a2 = &off_1EA4FDEE8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  v5 = (std::string *)(a2 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  std::__function::__value_func<void ()(jet_context *)>::__value_func[abi:ne180100](a2 + 40, a3 + 40);
  std::__function::__value_func<void ()(jet_context *)>::__value_func[abi:ne180100](a2 + 72, a3 + 72);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  result = *(__n128 *)(a3 + 128);
  v8 = *(_OWORD *)(a3 + 144);
  v9 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
  *(_OWORD *)(a2 + 176) = v9;
  *(__n128 *)(a2 + 128) = result;
  *(_OWORD *)(a2 + 144) = v8;
  return result;
}

void sub_1DC8AFCAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v5 = *(_QWORD **)(v1 + 64);
  if (v5 == v3)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v3 = *(_QWORD **)(v1 + 64);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_6:
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

__n128 std::allocator<jet_render_op>::construct[abi:ne180100]<jet_render_op,jet_render_op>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a2 = &off_1EA4FDEE8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  v5 = (std::string *)(a2 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  std::__function::__value_func<void ()(jet_context *)>::__value_func[abi:ne180100](a2 + 40, a3 + 40);
  std::__function::__value_func<void ()(jet_context *)>::__value_func[abi:ne180100](a2 + 72, a3 + 72);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  result = *(__n128 *)(a3 + 128);
  v8 = *(_OWORD *)(a3 + 144);
  v9 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
  *(_OWORD *)(a2 + 176) = v9;
  *(__n128 *)(a2 + 128) = result;
  *(_OWORD *)(a2 + 144) = v8;
  return result;
}

void sub_1DC8AFDA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v5 = *(_QWORD **)(v1 + 64);
  if (v5 == v3)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v3 = *(_QWORD **)(v1 + 64);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v6))(v3);
LABEL_6:
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<jet_render_op *,jet_render_op *,jet_render_op *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      *(_DWORD *)(a4 + v7 - 184) = *(_DWORD *)(a3 + v7 - 184);
      std::string::operator=((std::string *)(a4 + v7 - 176), (const std::string *)(a3 + v7 - 176));
      std::function<void ()(jet_context *)>::operator=((_QWORD *)(a4 + v7 - 152), a3 + v7 - 152);
      std::function<void ()(void)>::operator=((_QWORD *)(a4 + v7 - 120), a3 + v7 - 120);
      *(_OWORD *)(v8 - 80) = *(_OWORD *)(a3 + v7 - 80);
      v9 = *(_OWORD *)(a3 + v7 - 16);
      v11 = *(_OWORD *)(a3 + v7 - 64);
      v10 = *(_OWORD *)(a3 + v7 - 48);
      *(_OWORD *)(v8 - 32) = *(_OWORD *)(a3 + v7 - 32);
      *(_OWORD *)(v8 - 16) = v9;
      *(_OWORD *)(v8 - 64) = v11;
      *(_OWORD *)(v8 - 48) = v10;
      v7 -= 192;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

_QWORD *std::function<void ()(jet_context *)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(jet_context *)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(jet_context *)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::function<void ()(void)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<void ()(jet_context *)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(void)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<void ()(jet_context *)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1DC8B0134(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__value_func<void ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1DC8B02A8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<jet_render_op *,jet_render_op *,jet_render_op *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = (_OWORD *)(a4 + v7);
    *(_DWORD *)(a4 + v7 + 8) = *(_DWORD *)(a2 + v7 + 8);
    std::string::operator=((std::string *)(a4 + v7 + 16), (const std::string *)(a2 + v7 + 16));
    std::function<void ()(jet_context *)>::operator=((_QWORD *)(a4 + v7 + 40), a2 + v7 + 40);
    std::function<void ()(void)>::operator=((_QWORD *)(a4 + v7 + 72), a2 + v7 + 72);
    v8[7] = *(_OWORD *)(a2 + v7 + 112);
    v9 = *(_OWORD *)(a2 + v7 + 176);
    v11 = *(_OWORD *)(a2 + v7 + 128);
    v10 = *(_OWORD *)(a2 + v7 + 144);
    v8[10] = *(_OWORD *)(a2 + v7 + 160);
    v8[11] = v9;
    v8[8] = v11;
    v8[9] = v10;
    v7 += 192;
  }
  while (a2 + v7 != v6);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<jet_render_op>,jet_render_op*,jet_render_op*,jet_render_op*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  if (a2 != a3)
  {
    v8 = 0;
    do
    {
      std::allocator<jet_render_op>::construct[abi:ne180100]<jet_render_op,jet_render_op const&>(a1, a4 + v8, a2 + v8);
      v8 += 192;
    }
    while (a2 + v8 != a3);
    a4 += v8;
  }
  return a4;
}

void sub_1DC8B03D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 192;
    do
    {
      (**(void (***)(uint64_t))(v4 + v2))(v4 + v2);
      v2 -= 192;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void SKCompositeBezierPath::~SKCompositeBezierPath(SKCompositeBezierPath *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;

  v3 = (uint64_t *)*((_QWORD *)this + 2);
  v2 = (uint64_t *)*((_QWORD *)this + 3);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        v5 = *(void **)(v4 + 16);
        if (v5)
        {
          *(_QWORD *)(v4 + 24) = v5;
          operator delete(v5);
        }
        MEMORY[0x1DF0CF560](v4, 0x1020C40DCFC4CEALL);
        v2 = (uint64_t *)*((_QWORD *)this + 3);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = (uint64_t *)*((_QWORD *)this + 2);
  }
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

void sub_1DC8B05C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0CF560](v1, 0x10E1C40A5A077FDLL);
  _Unwind_Resume(a1);
}

void sub_1DC8B0674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B0728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B078C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B0848(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B09F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B0B00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B0BA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B0D2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B0F58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1DC8B106C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B10D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B145C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8B1988(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8B1B58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8B1F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8B1FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8B2028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8B20D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8B2214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8B22AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8B2504(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8B2DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1DC8B397C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1DC8B3BC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DC8B3C28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0CF560](v1, 0x10A1C4087CE141CLL);
  _Unwind_Resume(a1);
}

void sub_1DC8B3D10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B4174(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DC8B4254(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B45FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8B4744(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8B47D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8B4870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8B48E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B49B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8B4A40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8B4ABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B4C14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8B4D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8B4D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8B4E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8B4F58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B5478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8B57B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, int a13, char a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  if ((a14 & 1) != 0)
  {

  }
  if (!v18)
  {

  }
  _Unwind_Resume(a1);
}

void sub_1DC8B59B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B6234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1DC8B6E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1DC8B6FE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B7184(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8B73A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8B7420(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0CF560](v1, 0x10A1C4088378DB1);
  _Unwind_Resume(a1);
}

void sub_1DC8B75B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8B7758(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8B7838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8B79DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8B7E48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v7;

  _Unwind_Resume(a1);
}

void sub_1DC8B815C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

float SKDisplayGetMaxFramerate(CADisplay *a1)
{
  return 120.0;
}

float SKDisplayGetDefaultFramerate(CADisplay *a1)
{
  return 60.0;
}

void sub_1DC8B82EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8B8384(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8B84FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8B860C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8B87FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)SKDisplayLink;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1DC8B8968(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B89EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8B8A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8B8CE4(_Unwind_Exception *a1)
{

  _Unwind_Resume(a1);
}

void sub_1DC8B8DF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B8ECC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8B8F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8B916C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8B9490(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8B957C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8B9680(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8B9754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8B9804(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8B98EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8B9994(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8B9A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8B9AA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8B9BD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8B9CD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8B9DAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8B9E5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8B9F44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8B9FEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BA048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8BA0C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BA154(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BA264(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BA320(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8BA3C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BA454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BA4EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8BA558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8BA658(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8BA778(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8BA864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BA924(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BAB14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8BABDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BAC5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BACD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8BAEA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8BAFC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8BB0B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BB22C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8BB310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BB39C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BB410(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8BB498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BB64C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8BB750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8BB824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BB8D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BB9BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8BBA64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BBAE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BBB74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BBC68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1DC8BBD80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8BBDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8BBE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8BC174(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8BC430(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BC560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8BC7C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8BC8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8BC93C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0CF560](v1, 0x10A1C40AB574DD6);
  _Unwind_Resume(a1);
}

void sub_1DC8BCA78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8BCC44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8BD8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1DC8BDBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8BDC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8BE120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8BE8E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8BEB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_1DC8BEC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8BED44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void sub_1DC8BEE6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8BEF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DC8BEFE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8BF044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8BF31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1DC8BF4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8BF628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void _removeChild(SKNode *a1, SKNode *a2, SKScene *a3)
{
  SKNode *v5;
  SKScene *v6;
  SKNode *v7;
  void *v8;
  void *v9;
  void *v10;
  SKNode *v11;

  v11 = a1;
  v5 = a2;
  v6 = a3;
  -[SKNode parent](v5, "parent");
  v7 = (SKNode *)objc_claimAutoreleasedReturnValue();

  if (v7 == v11)
  {
    -[SKScene _pkPhysicsWorld](v6, "_pkPhysicsWorld");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    SKCNode::removeChild((SKCNode *)-[SKNode _backingNode](v11, "_backingNode"), (id *)-[SKNode _backingNode](v5, "_backingNode"));
    if ((objc_msgSend(v8, "hasBodies") & 1) != 0
      || (objc_msgSend(v8, "hasFields") & 1) != 0
      || -[SKScene _hasConstraints](v6, "_hasConstraints")
      || (-[SKScene avAudioEnvironmentNode](v6, "avAudioEnvironmentNode"),
          v9 = (void *)objc_claimAutoreleasedReturnValue(),
          v9,
          v9))
    {
      _unhookPhysicsAndConstraints(v5, v6);
    }
    -[objc_class focusSystemForEnvironment:](NSClassFromString(CFSTR("UIFocusSystem")), "focusSystemForEnvironment:", v11);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "_focusEnvironmentWillDisappear:", v5);

  }
}

void sub_1DC8BF760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1DC8BF830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8BFB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1DC8BFCC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8BFDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8BFEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8BFF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1DC8C0084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

BOOL SKNodeNameMatches(void *a1, void *a2)
{
  id v3;
  id v4;
  _BOOL8 v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "isEqualToString:", CFSTR(".*")) & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    objc_msgSend(v4, "name");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "rangeOfString:options:", v3, 1032);
    v9 = v8;

    if (v7 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v5 = 0;
    }
    else
    {
      objc_msgSend(v4, "name");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      if (v9 == objc_msgSend(v10, "length"))
      {
        objc_msgSend(v4, "name");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v5 = objc_msgSend(v11, "length") != 0;

      }
      else
      {
        v5 = 0;
      }

    }
  }

  return v5;
}

void sub_1DC8C019C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DC8C073C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,_QWORD *a29)
{
  void *v29;
  void *v30;

  std::vector<Token>::__destroy_vector::operator()[abi:ne180100](&a15);
  std::__tree<SKNode * {__strong}>::destroy((uint64_t)&a28, a29);
  a15 = (void **)&a25;
  std::vector<Token>::__destroy_vector::operator()[abi:ne180100](&a15);

  _Unwind_Resume(a1);
}

void sub_1DC8C120C(_Unwind_Exception *a1)
{
  unint64_t v1;
  void *v2;

  STACK[0x220] = v1;
  std::vector<Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&STACK[0x200];
  std::vector<Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);

  _Unwind_Resume(a1);
}

void sub_1DC8C1448(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C1574(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C15F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C1750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8C17C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8C18CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8C196C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8C1AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8C1B68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C1C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8C1D60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C1E18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C1F3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DC8C2098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DC8C272C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8C29C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<SKCRenderSortInfo *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1DC8C2B44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C2BE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C2CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)SKNode;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1DC8C2E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8C2EBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C2F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8C2FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8C3038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8C3138(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C32EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8C3404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8C3554(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C368C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C3738(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C4148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1DC8C464C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1DC8C4A9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1DC8C4BF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C4DB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1DC8C4F90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C5140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1DC8C5478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C5684(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C5910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1DC8C5A5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C5B58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C5BC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C5C60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C64CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1DC8C66B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8C6798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8C689C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8C693C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C69C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C6A5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C6C48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1DC8C6D8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C6E7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void _unhookPhysicsAndConstraints(SKNode *a1, SKScene *a2)
{
  SKNode *v3;
  SKScene *v4;
  void *v5;
  void *v6;
  void *v7;
  SKNode *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id WeakRetained;
  void *v15;
  _QWORD v16[6];

  v3 = a1;
  v4 = a2;
  -[SKNode physicsBody](v3, "physicsBody");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[SKScene _pkPhysicsWorld](v4, "_pkPhysicsWorld");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v5)
    objc_msgSend(v6, "removeBody:", v5);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v8 = v3;
    -[SKNode field](v8, "field");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      -[SKNode field](v8, "field");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "removeField:", v10);

    }
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    -[SKNode _connectToScene:](v3, "_connectToScene:", 0);
  -[SKNode constraints](v3, "constraints");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11 && objc_msgSend(v11, "count"))
    -[SKScene _removeConstraintsForNode:](v4, "_removeConstraintsForNode:", v3);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v13 = -[SKNode _backingNode](v3, "_backingNode");
    WeakRetained = objc_loadWeakRetained((id *)(v13 + 568));
    v15 = WeakRetained;
    if (WeakRetained)
      SKCNode::removeInternalChild((SKCNode *)objc_msgSend(WeakRetained, "_backingNode"), *(id **)(v13 + 592));

  }
  if (-[SKNode hasChildren](v3, "hasChildren"))
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = ___ZL28_unhookPhysicsAndConstraintsP6SKNodeP7SKScene_block_invoke;
    v16[3] = &unk_1EA4FFB38;
    v16[4] = v7;
    v16[5] = v4;
    -[SKNode enumerateChildNodesWithName:usingBlock:](v3, "enumerateChildNodesWithName:usingBlock:", CFSTR(".//SKNode"), v16);
  }

}

void sub_1DC8C706C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void ___ZL28_unhookPhysicsAndConstraintsP6SKNodeP7SKScene_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id WeakRetained;
  void *v12;
  id v13;

  v13 = a2;
  objc_msgSend(v13, "physicsBody");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
    objc_msgSend(*(id *)(a1 + 32), "removeBody:", v3);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = v13;
    objc_msgSend(v4, "field");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      v6 = *(void **)(a1 + 32);
      objc_msgSend(v4, "field");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "removeField:", v7);

    }
  }
  objc_msgSend(v13, "constraints");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (v8 && objc_msgSend(v8, "count"))
    objc_msgSend(*(id *)(a1 + 40), "_removeConstraintsForNode:", v13);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v10 = objc_msgSend(v13, "_backingNode");
    WeakRetained = objc_loadWeakRetained((id *)(v10 + 568));
    v12 = WeakRetained;
    if (WeakRetained)
      SKCNode::removeInternalChild((SKCNode *)objc_msgSend(WeakRetained, "_backingNode"), *(id **)(v10 + 592));

  }
}

void sub_1DC8C7214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void Token::Token(Token *this, NSString *a2)
{
  NSString *v3;
  NSString *v4;
  void *v5;
  void *v6;

  v3 = a2;
  *(_DWORD *)this = 3;
  v4 = v3;
  *((_QWORD *)this + 1) = v4;
  if (NSClassFromString(v4))
    *(_DWORD *)this = 4;
  if (-[NSString containsString:](v4, "containsString:", CFSTR("*"))
    || -[NSString containsString:](v4, "containsString:", CFSTR("?")))
  {
    -[NSString stringByReplacingOccurrencesOfString:withString:](v4, "stringByReplacingOccurrencesOfString:withString:", CFSTR("*"), CFSTR(".*"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "stringByReplacingOccurrencesOfString:withString:", CFSTR("?"), CFSTR(".?"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_storeStrong((id *)this + 1, v6);
    v4 = (NSString *)v6;
  }

}

void sub_1DC8C734C(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C73B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::vector<Token>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  id *v2;
  id *v4;
  void *v5;
  id *v6;

  v1 = *a1;
  v2 = (id *)**a1;
  if (v2)
  {
    v4 = (id *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 2;

        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<Token>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree<SKNode * {__strong}>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<SKNode * {__strong}>::destroy(a1, *a2);
    std::__tree<SKNode * {__strong}>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

_QWORD *std::vector<Token>::__init_with_size[abi:ne180100]<Token*,Token*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<Token>::__vallocate[abi:ne180100](result, a4);
    return std::vector<Token>::__construct_at_end<Token*,Token*>(v6, a2, a3);
  }
  return result;
}

void sub_1DC8C7530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<Token>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<jet_buffer>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

_QWORD *std::vector<Token>::__construct_at_end<Token*,Token*>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v3 = result;
  v4 = result[1];
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_DWORD *)v4 = *(_DWORD *)v6;
      result = *(id *)(v6 + 8);
      *(_QWORD *)(v4 + 8) = result;
      v4 += 16;
      v6 += 16;
    }
    while (v6 != a3);
  }
  v3[1] = v4;
  return result;
}

uint64_t *std::__tree<SKNode * {__strong}>::__emplace_unique_key_args<SKNode * {__strong},SKNode * const {__strong}&>(uint64_t **a1, unint64_t *a2, id *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = (uint64_t)*a3;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

_QWORD *std::vector<Token>::__init_with_size[abi:ne180100]<std::__wrap_iter<Token const*>,std::__wrap_iter<Token const*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<Token>::__vallocate[abi:ne180100](result, a4);
    return std::vector<Token>::__construct_at_end<Token*,Token*>(v6, a2, a3);
  }
  return result;
}

void sub_1DC8C7700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void SKCParticleManager::SKCParticleManager(SKCParticleManager *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1EA4FFBA8;
  *((_QWORD *)this + 1) = (char *)this + 16;
}

uint64_t SKCParticleManager::update(uint64_t this, float a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = *(_QWORD **)(this + 8);
  v3 = (_QWORD *)(this + 16);
  if (v2 != (_QWORD *)(this + 16))
  {
    do
    {
      this = (**(uint64_t (***)(_QWORD, float))v2[4])(v2[4], a2);
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  return this;
}

void SKCParticleManager::compact(SKCParticleManager *this)
{
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  BOOL v5;

  v1 = (char *)*((_QWORD *)this + 1);
  v2 = (char *)this + 16;
  if (v1 != (char *)this + 16)
  {
    do
    {
      SKCParticleSystem::compact(*((SKCParticleSystem **)v1 + 4));
      v3 = (char *)*((_QWORD *)v1 + 1);
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = *(char **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (char *)*((_QWORD *)v1 + 2);
          v5 = *(_QWORD *)v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
}

void SKCParticleManager::enumerateParticleSystems(uint64_t a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  void (**v8)(id, _QWORD);

  v8 = a2;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = (_QWORD *)(a1 + 16);
  if (v3 != v4)
  {
    do
    {
      v8[2](v8, v3[4]);
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v4);
  }

}

void sub_1DC8C78A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t *SKCParticleManager::addParticleSystem(uint64_t **this, SKCParticleSystem *a2)
{
  SKCParticleSystem *v3;

  v3 = a2;
  return std::__tree<SKCParticleSystem *>::__emplace_unique_key_args<SKCParticleSystem *,SKCParticleSystem * const&>(this + 1, (unint64_t *)&v3, (uint64_t *)&v3);
}

uint64_t SKCParticleManager::removeParticleSystem(SKCParticleManager *this, SKCParticleSystem *a2)
{
  SKCParticleSystem *v3;

  v3 = a2;
  return std::__tree<SKCParticleSystem *>::__erase_unique<SKCParticleSystem *>((uint64_t)this + 8, (unint64_t *)&v3);
}

void SKCParticleManager::~SKCParticleManager(SKCParticleManager *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  BOOL v8;

  *(_QWORD *)this = &off_1EA4FFBA8;
  v2 = (char *)this + 16;
  v3 = (char *)this + 8;
  v4 = (char *)*((_QWORD *)this + 1);
  if (v4 != (char *)this + 16)
  {
    do
    {
      v5 = *((_QWORD *)v4 + 4);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      v6 = (char *)*((_QWORD *)v4 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v4 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != v2);
  }
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy((uint64_t)v3, *((_QWORD **)this + 2));
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = v2;
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy((uint64_t)v3, 0);
}

{
  SKCParticleManager::~SKCParticleManager(this);
  JUMPOUT(0x1DF0CF560);
}

uint64_t *std::__tree<SKCParticleSystem *>::__emplace_unique_key_args<SKCParticleSystem *,SKCParticleSystem * const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t std::__tree<SKCParticleSystem *>::__erase_unique<SKCParticleSystem *>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  std::__tree<SKCParticleSystem *>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t *std::__tree<SKCParticleSystem *>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void sub_1DC8C8488(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C853C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C85B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C8638(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8C86B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C8734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C87B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C8834(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C88B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C893C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C89C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C8A54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C8AF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C8B8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C8C18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C8CA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8C8CFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C8D60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C8DC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C8E28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C8E8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C8EF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C8F64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C8FD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C9044(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C90C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C9144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C91C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C9244(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C92C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8C9330(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8CA030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8CA600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8CA964(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8CA9E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8CAAE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8CAC74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8CAD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1DC8CADC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SKC3DNode::SKC3DNode(SKC3DNode *this)
{
  uint64_t v1;

  SKCNode::SKCNode(this);
  *(_QWORD *)v1 = off_1EA4FFC00;
  *(_OWORD *)(v1 + 560) = 0u;
  *(_DWORD *)(v1 + 576) = 0;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_OWORD *)(v1 + 600) = 0u;
  *(_WORD *)(v1 + 616) = 0;
  *(_BYTE *)(v1 + 618) = 1;
}

void SKC3DNode::~SKC3DNode(id *this)
{

  SKCNode::~SKCNode(this);
}

{
  SKC3DNode::~SKC3DNode(this);
  JUMPOUT(0x1DF0CF560);
}

void SKC3DNode::getBatchInfo(SKC3DNode *this@<X0>, SKCRenderInfo *a2@<X1>, uint64_t a3@<X8>)
{
  SKC3DNode::ensureRenderer((uint64_t)this, (uint64_t)a2);
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 4) = 0x300000000;
  *(_DWORD *)(a3 + 12) = 1;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 60) = 0u;
  if ((*((_BYTE *)a2 + 581) & 2) == 0)
    *(_BYTE *)a3 = 1;
}

void SKC3DNode::ensureRenderer(uint64_t a1, uint64_t a2)
{
  Class v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  void *v21;
  int v22;
  int v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  if (*(_QWORD *)(a1 + 560))
    return;
  v4 = NSClassFromString(CFSTR("SCNRenderer"));
  SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v32);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 136))(v32) == 1)
  {
    v5 = v32;
    v6 = v33;
    v28 = v32;
    v30 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 360))(v5);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[objc_class performSelector:withObject:withObject:](v4, "performSelector:withObject:withObject:", sel_rendererWithDevice_options_, v9, 0, v28, v30);
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *(void **)(a1 + 560);
    *(_QWORD *)(a1 + 560) = v10;

    if (!v6)
      goto LABEL_19;
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
  }
  else
  {
    v14 = v32;
    v6 = v33;
    v29 = v32;
    v31 = v33;
    if (v33)
    {
      v15 = (unint64_t *)&v33->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 360))(v14);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    -[objc_class performSelector:withObject:withObject:](v4, "performSelector:withObject:withObject:", sel_rendererWithContext_options_, v17, 0, v29, v31);
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = *(void **)(a1 + 560);
    *(_QWORD *)(a1 + 560) = v18;

    if (!v6)
      goto LABEL_19;
    v20 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v20);
    while (__stlxr(v13 - 1, v20));
  }
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_19:
  objc_msgSend(*(id *)(a1 + 560), "setScene:", *(_QWORD *)(a1 + 584));
  objc_msgSend(*(id *)(a1 + 560), "pointOfView");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "position");
  *(_DWORD *)(a1 + 568) = v22;
  *(_DWORD *)(a1 + 572) = v23;
  *(_DWORD *)(a1 + 576) = v24;

  v25 = v33;
  if (v33)
  {
    v26 = (unint64_t *)&v33->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1DC8CB114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

BOOL SKC3DNode::getNeedsCustomRenderOps(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 580);
  if ((v2 & 0x200) == 0)
    SKC3DNode::ensureRenderer(a1, a2);
  return (v2 & 0x200) == 0;
}

double SKC3DNode::getBoundingBox(float32x4_t *this)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  __int128 v9;
  float v10;
  __int128 v11;
  _OWORD v13[4];
  __int128 v14;

  (*(void (**)(float32x4_t *))(this->i64[0] + 104))(this);
  v6 = 0;
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  v8 = this[21];
  v7.i64[0] = vmulq_f32(vsubq_f32(v7, this[22]), v8).u64[0];
  v9 = xmmword_1DC9223B0;
  v7.i64[1] = *((_QWORD *)&SKCBoundingBoxEmpty + 1);
  *(float *)&v9 = 0.5 * v8.f32[0];
  v10 = vmuls_lane_f32(0.5, *(float32x2_t *)v8.f32, 1);
  v11 = xmmword_1DC9223C0;
  *((float *)&v11 + 1) = v10;
  v13[0] = v7;
  v13[1] = v9;
  v13[2] = v11;
  v13[3] = xmmword_1DC9223D0;
  do
  {
    *(__int128 *)((char *)&v14 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v2, COERCE_FLOAT(v13[v6])), v3, *(float32x2_t *)&v13[v6], 1), v4, (float32x4_t)v13[v6], 2), v5, (float32x4_t)v13[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  return *(double *)&v14;
}

void SKC3DNode::subclassRecomputeFlags(id *this)
{
  double v2;

  if (!*((_BYTE *)this + 172) && this[73])
  {
    objc_msgSend(this[70], "nextFrameTime");
    if (v2 < INFINITY)
      SKCNode::setFlags((SKCNode *)this, 66, 1);
  }
}

_QWORD *SKC3DNode::addRenderOps(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  int v4;
  float32x2_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  _BYTE v14[72];
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a2 + 581) & 2) == 0)
  {
    v3 = result;
    v4 = *(_DWORD *)(a2 + 96);
    v5 = vcvt_f32_u32(*(uint32x2_t *)(a2 + 120));
    v6 = *a3;
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v14[8] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v14[24] = v7;
    v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)&v14[40] = *(_OWORD *)(a2 + 64);
    *(_OWORD *)&v14[56] = v8;
    v9 = (char *)operator new(0x70uLL);
    v10 = *(_OWORD *)v14;
    *(_OWORD *)(v9 + 40) = *(_OWORD *)&v14[16];
    v11 = *(_OWORD *)&v14[48];
    *(_OWORD *)(v9 + 56) = *(_OWORD *)&v14[32];
    *(_OWORD *)(v9 + 72) = v11;
    *(_QWORD *)v9 = &off_1EA4FFD00;
    *((_QWORD *)v9 + 2) = v3;
    *((_QWORD *)v9 + 11) = *(_QWORD *)&v14[64];
    *(_OWORD *)(v9 + 24) = v10;
    *((_DWORD *)v9 + 24) = v4;
    *((float32x2_t *)v9 + 13) = v5;
    v16 = v9;
    v13 = 13;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v6 + 8), &v13);
    std::function<void ()(jet_context *)>::operator=((_QWORD *)(*(_QWORD *)(v6 + 16) - 152), (uint64_t)v15);
    result = v16;
    if (v16 == v15)
    {
      v12 = 4;
      result = v15;
    }
    else
    {
      if (!v16)
        return result;
      v12 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
  }
  return result;
}

void sub_1DC8CB3DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 - 48);
  if (v3 == (_QWORD *)(v1 - 72))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 - 72);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void SKC3DNode::renderCallback(id *a1, jet_context_OpenGL *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, double a7, float32x2_t a8)
{
  id v9;
  simd_float4 v12;
  simd_float4 v13;
  simd_float4 v14;
  simd_float4 v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  int v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  double v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  EAGLContext *v49;
  simd_float4 v50;
  simd_float4 v51;
  simd_float4 v52;
  simd_float4 v53;
  float32x2_t v56;
  float32x2_t v58;
  float32x4_t AABB;
  void *v61;
  _QWORD v62[6];
  _QWORD v63[2];
  uint64_t v64;
  uint64_t v65;
  simd_float4x4 v66;
  simd_float4x4 v67;
  simd_float4x4 params;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v9 = a1[70];
  if (v9)
  {
    objc_msgSend(v9, "setPlaying:", *((unsigned __int8 *)a1 + 616));
    objc_msgSend(a1[70], "setLoops:", *((unsigned __int8 *)a1 + 617));
    objc_msgSend(a1[70], "setSceneTime:", *((double *)a1 + 74));
    objc_msgSend(a1[70], "setPointOfView:", a1[76]);
    objc_msgSend(a1[70], "setAutoenablesDefaultLighting:", *((unsigned __int8 *)a1 + 618));
    *(double *)v12.i64 = (*((double (**)(id *))*a1 + 15))(a1);
    v50 = v13;
    v51 = v12;
    v52 = v15;
    v53 = v14;
    v66.columns[0] = v12;
    v66.columns[1] = v13;
    v66.columns[2] = v14;
    v66.columns[3] = v15;
    (*((void (**)(id *))*a1 + 14))(a1);
    v20 = 0;
    params.columns[0] = v51;
    params.columns[1] = v50;
    params.columns[2] = v53;
    params.columns[3] = v52;
    do
    {
      v67.columns[v20] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, COERCE_FLOAT(*(_OWORD *)&params.columns[v20])), v17, *(float32x2_t *)params.columns[v20].f32, 1), v18, (float32x4_t)params.columns[v20], 2), v19, (float32x4_t)params.columns[v20], 3);
      ++v20;
    }
    while (v20 != 4);
    v21 = 0;
    params = v67;
    do
    {
      v67.columns[v21] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, COERCE_FLOAT(*(_OWORD *)&params.columns[v21])), a4, *(float32x2_t *)params.columns[v21].f32, 1), a5, (float32x4_t)params.columns[v21], 2), a6, (float32x4_t)params.columns[v21], 3);
      ++v21;
    }
    while (v21 != 4);
    v66 = v67;
    AABB = SKCBoundingBoxGetAABB(&v66);
    (*(void (**)(jet_context_OpenGL *))(*(_QWORD *)a2 + 136))(a2);
    __asm { FMOV            V0.2S, #1.0 }
    v56 = vmul_f32(vmul_f32(vadd_f32(*(float32x2_t *)AABB.f32, _D0), a8), (float32x2_t)0x3F0000003F000000);
    v58 = vmul_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)AABB, (int8x16_t)AABB, 8uLL), a8), (float32x2_t)0x3F0000003F000000);
    if (v27 == 1)
    {
      (*(void (**)(jet_context_OpenGL *))(*(_QWORD *)a2 + 384))(a2);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(jet_context_OpenGL *))(*(_QWORD *)a2 + 392))(a2);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "colorAttachments");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v29, "objectAtIndexedSubscript:", 0);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "texture");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = objc_msgSend(v31, "height");

      v63[0] = 0;
      v63[1] = 0;
      objc_msgSend(v28, "colorAttachments");
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v33, "objectAtIndexedSubscript:", 0);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "texture");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v64) = objc_msgSend(v35, "width");
      v64 = v64;
      objc_msgSend(v28, "colorAttachments");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "objectAtIndexedSubscript:", 0);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "texture");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v65) = objc_msgSend(v38, "height");
      v65 = v65;
      objc_msgSend(v61, "setScissorRect:", v63);

      v39 = a1[70];
      v40 = CACurrentMediaTime();
      (*(void (**)(jet_context_OpenGL *))(*(_QWORD *)a2 + 384))(a2);
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      (*(void (**)(jet_context_OpenGL *))(*(_QWORD *)a2 + 368))(a2);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "renderAtTime:viewport:encoder:passDescriptor:commandQueue:", v41, v28, v42, v40, v56.f32[0], (float)((float)((float)v32 - v56.f32[1]) - v58.f32[1]), v58.f32[0], v58.f32[1]);

      v62[0] = 0;
      v62[1] = 0;
      objc_msgSend(v28, "colorAttachments");
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v43, "objectAtIndexedSubscript:", 0);
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v44, "texture");
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      *(double *)&v62[2] = (double)(unint64_t)objc_msgSend(v45, "width");
      objc_msgSend(v28, "colorAttachments");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v46, "objectAtIndexedSubscript:", 0);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v47, "texture");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(double *)&v62[3] = (double)(unint64_t)objc_msgSend(v48, "height");
      v62[4] = 0;
      v62[5] = 0;
      objc_msgSend(v61, "setViewport:", v62);

      objc_msgSend(v61, "setFrontFacingWinding:", 0);
      objc_msgSend(v61, "setCullMode:", 0);

    }
    else
    {
      (*(void (**)(jet_context_OpenGL *))(*(_QWORD *)a2 + 360))(a2);
      v49 = (EAGLContext *)objc_claimAutoreleasedReturnValue();
      glContextUse::glContextUse((glContextUse *)&v67, v49);

      glGetIntegerv(0xBA2u, (GLint *)&params);
      glViewport((int)v56.f32[0], (int)v56.f32[1], (int)v58.f32[0], (int)v58.f32[1]);
      glDisable(0xC11u);
      objc_msgSend(a1[70], "render");
      jet_context_OpenGL::synchronize_OpenGL_state(a2);
      glViewport(params.columns[0].i32[0], params.columns[0].i32[1], params.columns[0].i32[2], params.columns[0].i32[3]);
      glContextUse::~glContextUse((glContextUse *)&v67);
    }
  }
}

void sub_1DC8CB8D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0,std::allocator<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0>,void ()(jet_context *)>::~__func()
{
  JUMPOUT(0x1DF0CF560);
}

__n128 std::__function::__func<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0,std::allocator<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0>,void ()(jet_context *)>::__clone(uint64_t a1)
{
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = operator new(0x70uLL);
  *(_QWORD *)v2 = &off_1EA4FFD00;
  v3 = *(_OWORD *)(a1 + 64);
  v2[3] = *(_OWORD *)(a1 + 48);
  v2[4] = v3;
  v4 = *(_OWORD *)(a1 + 96);
  v2[5] = *(_OWORD *)(a1 + 80);
  v2[6] = v4;
  result = *(__n128 *)(a1 + 16);
  v6 = *(_OWORD *)(a1 + 32);
  v2[1] = result;
  v2[2] = v6;
  return result;
}

__n128 std::__function::__func<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0,std::allocator<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0>,void ()(jet_context *)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_1EA4FFD00;
  v2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v2;
  result = *(__n128 *)(a1 + 48);
  v4 = *(_OWORD *)(a1 + 64);
  v5 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 96) = v5;
  *(__n128 *)(a2 + 48) = result;
  *(_OWORD *)(a2 + 64) = v4;
  return result;
}

void std::__function::__func<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0,std::allocator<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0>,void ()(jet_context *)>::operator()(uint64_t a1, jet_context_OpenGL **a2, double a3, double a4, double a5, double a6, double a7)
{
  SKC3DNode::renderCallback(*(id **)(a1 + 16), *a2, *(float32x4_t *)(a1 + 32), *(float32x4_t *)(a1 + 48), *(float32x4_t *)(a1 + 64), *(float32x4_t *)(a1 + 80), a7, *(float32x2_t *)(a1 + 104));
}

uint64_t std::__function::__func<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0,std::allocator<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0>,void ()(jet_context *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 16;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0,std::allocator<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0>,void ()(jet_context *)>::target_type()
{
}

void sub_1DC8CBB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8CBC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8CBFFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8CC1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8CC4C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8CC61C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8CC730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DC8CC928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1DC8CC9E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8CCA7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8CCB24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8CCBDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8CCC9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8CCD64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8CCDBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8CCE24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8CCEA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8CCF24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8CCFB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void SKCVideoNode::SKCVideoNode(SKCVideoNode *this)
{
  uint64_t v2;
  NSObject *v3;
  dispatch_queue_t v4;
  void *v5;
  _QWORD v6[3];

  SKCNode::SKCNode(this);
  *(_QWORD *)v2 = off_1EA4FFD90;
  *(_BYTE *)(v2 + 560) = 1;
  *((_QWORD *)this + 71) = objc_alloc_init(MEMORY[0x1E0C8B2E8]);
  *((_QWORD *)this + 72) = 0;
  *((_DWORD *)this + 146) = 1065353216;
  *((_BYTE *)this + 588) = 1;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_QWORD *)this + 82) = 0;
  *((_QWORD *)this + 83) = (char *)this + 664;
  *((_QWORD *)this + 84) = (char *)this + 664;
  *((_QWORD *)this + 85) = 0;
  *((_QWORD *)this + 87) = 0;
  *((_QWORD *)this + 86) = 0;
  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = dispatch_queue_create("frameUpdateQueue", v3);
  v5 = (void *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = v4;

  std::list<__CVBuffer *>::list(v6, 2);
  std::list<__CVBuffer *>::__move_assign((uint64_t *)this + 83, v6);
  std::__list_imp<SKCRenderSortInfo *>::clear(v6);
  *((_QWORD *)this + 86) = *((_QWORD *)this + 84);
}

void sub_1DC8CD200(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;
  _QWORD *v3;

  std::__list_imp<SKCRenderSortInfo *>::clear(v3);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 76));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v2);

  SKCNode::~SKCNode(v1);
  _Unwind_Resume(a1);
}

uint64_t SKCVideoNode::generatesVisibleGeometry(SKCVideoNode *this, const simd_float4x4 *a2)
{
  return 1;
}

float SKCVideoNode::getPlaybackRate(SKCVideoNode *this)
{
  return *((float *)this + 146);
}

void SKCVideoNode::setPlaybackRate(SKCVideoNode *this, float a2)
{
  void *v3;

  *((float *)this + 146) = a2;
  v3 = (void *)*((_QWORD *)this + 71);
  if (v3)
  {
    if (!*((_BYTE *)this + 172))
    {
      objc_msgSend(v3, "setRate:");
      SKCNode::setDirty(this);
      SKCNode::recomputeFlags(this, 1);
    }
  }
}

void SKCVideoNode::play(SKCVideoNode *this)
{
  SKCVideoNode::setPlaybackRate(this, 1.0);
}

void SKCVideoNode::pause(SKCVideoNode *this)
{
  SKCVideoNode::setPlaybackRate(this, 0.0);
}

double SKCVideoNode::getBatchInfo@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 12) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_QWORD *)&result = 0x300000004;
  *(_QWORD *)(a1 + 4) = 0x300000004;
  *(_BYTE *)a1 = 1;
  return result;
}

uint64_t SKCVideoNode::getNeedsCustomRenderOps()
{
  return 1;
}

uint64_t SKCVideoNode::getMaxBatchRenderElementCount()
{
  return 4;
}

uint64_t SKCVideoNode::addBatchRenderElements()
{
  return 0;
}

double SKCVideoNode::getBoundingBox(float32x4_t *this)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  __int128 v9;
  float v10;
  __int128 v11;
  _OWORD v13[4];
  __int128 v14;

  (*(void (**)(float32x4_t *))(this->i64[0] + 104))(this);
  v6 = 0;
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  v8 = this[21];
  v7.i64[0] = vmulq_f32(vsubq_f32(v7, this[22]), v8).u64[0];
  v9 = xmmword_1DC9223B0;
  v7.i64[1] = *((_QWORD *)&SKCBoundingBoxEmpty + 1);
  *(float *)&v9 = 0.5 * v8.f32[0];
  v10 = vmuls_lane_f32(0.5, *(float32x2_t *)v8.f32, 1);
  v11 = xmmword_1DC9223C0;
  *((float *)&v11 + 1) = v10;
  v13[0] = v7;
  v13[1] = v9;
  v13[2] = v11;
  v13[3] = xmmword_1DC9223D0;
  do
  {
    *(__int128 *)((char *)&v14 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v2, COERCE_FLOAT(v13[v6])), v3, *(float32x2_t *)&v13[v6], 1), v4, (float32x4_t)v13[v6], 2), v5, (float32x4_t)v13[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  return *(double *)&v14;
}

void SKCVideoNode::addRenderOps(uint64_t a1, float32x4_t *a2, _QWORD *a3)
{
  NSObject *v6;
  uint64_t v7;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  unsigned __int32 v21;
  int16x8_t v22;
  unsigned __int32 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  unsigned int v49;
  std::string __p;
  _QWORD block[6];
  int v52;
  _OWORD v53[4];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)(a1 + 696);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN12SKCVideoNode12addRenderOpsEP13SKCRenderInfoRKNSt3__110shared_ptrI18jet_command_bufferEE_block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = a1;
  block[5] = a2;
  dispatch_sync(v6, block);
  if (*(_QWORD *)(a1 + 592))
  {
    v7 = 0;
    __asm { FMOV            V2.4S, #1.0 }
    v13 = *(float32x4_t *)(a1 + 336);
    v14 = *(float32x4_t *)(a1 + 352);
    v13.i64[1] = *((_QWORD *)&_Q2 + 1);
    v14.i64[1] = 0;
    v53[0] = xmmword_1DC922980;
    v53[1] = unk_1DC922990;
    v53[2] = xmmword_1DC9229A0;
    v53[3] = unk_1DC9229B0;
    v15 = a2[2];
    v16 = a2[3];
    v17 = a2[4];
    v18 = a2[5];
    do
    {
      v19 = vmulq_f32(v13, vsubq_f32((float32x4_t)v53[v7], v14));
      v53[v7++] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, v19.f32[0]), v16, *(float32x2_t *)v19.f32, 1), v17, v19, 2), v18, v19, 3);
    }
    while (v7 != 4);
    v20 = 0;
    v21 = (unsigned __int32)a2->i32[0] >> 2;
    v22 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 304), fminf(fmaxf(vmuls_lane_f32(a2[6].f32[0], *(float32x4_t *)(a1 + 304), 3) * *(float *)(a1 + 324), 0.0), 1.0)), (float32x4_t)vdupq_n_s32(0x437F0000u)));
    *(int16x4_t *)v22.i8 = vmovn_s32((int32x4_t)v22);
    v23 = vmovn_s16(v22).u32[0];
    do
    {
      *(_OWORD *)(a2[1].i64[1] + 16 * (v20 + a2->i32[0])) = v53[v20];
      *(_QWORD *)(a2[1].i64[0] + 8 * (v20 + a2->i32[0])) = qword_1DC922960[v20];
      *(_DWORD *)(a2->i64[1] + 4 * (v20++ + a2->i32[0])) = v23;
    }
    while (v20 != 4);
    v24 = *a3;
    v25 = (uint64_t *)(*a3 + 8);
    if (*(_QWORD *)(a1 + 608))
    {
      v26 = a2[17].i64[1];
      LODWORD(__p.__r_.__value_.__l.__data_) = 31;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v25, (int *)&__p);
      v27 = *(_QWORD *)(v24 + 16);
      *(_QWORD *)(v27 - 80) = v26;
      *(_OWORD *)(v27 - 64) = xmmword_1DC921850;
      *(_QWORD *)(v27 - 48) = 0x30000000FLL;
      v28 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture2");
      v29 = *(_QWORD *)(a1 + 608);
      v52 = 8;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v28 + 8), &v52);
      v30 = *(_QWORD *)(v28 + 16);
      *(_QWORD *)(v30 - 80) = v29;
      std::string::operator=((std::string *)(v30 - 176), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v31 = a2[10].i64[1];
      LODWORD(__p.__r_.__value_.__l.__data_) = 31;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v25, (int *)&__p);
      v32 = *(_QWORD *)(v24 + 16);
      *(_QWORD *)(v32 - 80) = v31;
      *(_OWORD *)(v32 - 64) = xmmword_1DC921850;
      *(_QWORD *)(v32 - 48) = 0x30000000FLL;
    }
    v33 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "a_position");
    v34 = a2[20].i64[1];
    v52 = 5;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v33 + 8), &v52);
    v35 = *(_QWORD *)(v33 + 16);
    *(_QWORD *)(v35 - 80) = v34;
    std::string::operator=((std::string *)(v35 - 176), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v36 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "a_color");
    v37 = a2[21].i64[0];
    v52 = 5;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v36 + 8), &v52);
    v38 = *(_QWORD *)(v36 + 16);
    *(_QWORD *)(v38 - 80) = v37;
    std::string::operator=((std::string *)(v38 - 176), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v39 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "a_tex_coord");
    v40 = a2[21].i64[1];
    v52 = 5;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v39 + 8), &v52);
    v41 = *(_QWORD *)(v39 + 16);
    *(_QWORD *)(v41 - 80) = v40;
    std::string::operator=((std::string *)(v41 - 176), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v42 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture");
    v43 = *(_QWORD *)(a1 + 592);
    v52 = 8;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v42 + 8), &v52);
    v44 = *(_QWORD *)(v42 + 16);
    *(_QWORD *)(v44 - 80) = v43;
    std::string::operator=((std::string *)(v44 - 176), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v45 = *a3;
    v46 = a2[25].i64[0];
    LODWORD(__p.__r_.__value_.__l.__data_) = 4;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v45 + 8), (int *)&__p);
    v47 = *(_QWORD *)(v45 + 16);
    *(_QWORD *)(v47 - 80) = v46;
    *(_DWORD *)(v47 - 64) = 3;
    *(_DWORD *)(v47 - 60) = 6 * v21;
    *(_DWORD *)(v47 - 56) = 6;
    v48 = (_DWORD *)a2[41].i64[1];
    v49 = 6 * v21 + 6;
    if (v48[43] > v49)
      v49 = v48[43];
    v48[43] = v49;
    ++v48[41];
    ++v48[37];
    a2->i32[0] += 4;
  }
}

void sub_1DC8CD808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN12SKCVideoNode12addRenderOpsEP13SKCRenderInfoRKNSt3__110shared_ptrI18jet_command_bufferEE_block_invoke(uint64_t a1)
{
  SKCVideoNode::updateVideoFrame(*(SKCVideoNode **)(a1 + 32), *(SKCRenderInfo **)(a1 + 40));
}

void SKCVideoNode::updateVideoFrame(SKCVideoNode *this, SKCRenderInfo *a2)
{
  __CVBuffer *v3;
  _QWORD *v4;
  __CVBuffer *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  std::__shared_weak_count *v16;

  SKCRenderer::getBackingContext(*((_QWORD *)a2 + 13), &v15);
  *((_BYTE *)this + 588) = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 136))(v15) == 1;
  v3 = (__CVBuffer *)*((_QWORD *)this + 82);
  if (v3)
  {
    *((_QWORD *)this + 82) = 0;
    v4 = *(_QWORD **)(*((_QWORD *)this + 86) + 8);
    *((_QWORD *)this + 86) = v4;
    if (v4 == (_QWORD *)((char *)this + 664))
    {
      v4 = (_QWORD *)*((_QWORD *)this + 84);
      *((_QWORD *)this + 86) = v4;
    }
    v5 = (__CVBuffer *)v4[2];
    if (v5)
    {
      CVPixelBufferRelease(v5);
      v4 = (_QWORD *)*((_QWORD *)this + 86);
    }
    v4[2] = v3;
    v6 = v16;
    v14[0] = v15;
    v14[1] = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    SKCVideoNode::updateVideoFrame_api((uint64_t)this, v3, (uint64_t)v14);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1DC8CD978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SKCVideoNode::updateVideoFrame_api(uint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t a3)
{
  unsigned int Width;
  unsigned int Height;
  size_t PlaneCount;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  CVMetalTextureCacheRef *v14;
  __CVMetalTextureCache *v15;
  CFAllocatorRef *v16;
  void *v17;
  MTLPixelFormat v18;
  const __CFAllocator *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  __CVBuffer *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  const void *v35;
  __CVBuffer *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  __int128 v45;
  CVMetalTextureRef image;
  CVMetalTextureRef textureOut;
  __int128 v48;

  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  PlaneCount = CVPixelBufferGetPlaneCount(pixelBuffer);
  if (*(_BYTE *)(a1 + 560))
  {
    *(float *)&v9 = (float)Width;
    *((float *)&v9 + 1) = (float)Height;
    v48 = v9;
    SKCNode::setSize(a1, &v48);
  }
  if (*(_QWORD *)a3)
  {
    v10 = __dynamic_cast(*(const void **)a3, MEMORY[0x1E0D3F0B8], MEMORY[0x1E0D3F0C0], 0);
    if (v10)
    {
      v11 = *(std::__shared_weak_count **)(a3 + 8);
      *(_QWORD *)&v48 = v10;
      *((_QWORD *)&v48 + 1) = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v14 = (CVMetalTextureCacheRef *)(a1 + 640);
      v15 = *(__CVMetalTextureCache **)(a1 + 640);
      v16 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
      if (!v15)
      {
        (*(void (**)(void *))(*(_QWORD *)v10 + 360))(v10);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        CVMetalTextureCacheCreate(*v16, 0, v17, 0, (CVMetalTextureCacheRef *)(a1 + 640));

        v15 = *v14;
        if (!*v14)
          goto LABEL_46;
      }
      CVMetalTextureCacheFlush(v15, 0);
      if (PlaneCount)
        v18 = MTLPixelFormatR8Unorm;
      else
        v18 = MTLPixelFormatBGRA8Unorm;
      image = 0;
      textureOut = 0;
      v19 = *v16;
      if (CVMetalTextureCacheCreateTextureFromImage(*v16, *v14, pixelBuffer, 0, v18, Width, Height, 0, &textureOut))
      {
        if (!PlaneCount)
        {
LABEL_45:
          v11 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
LABEL_46:
          if (v11)
          {
            v43 = (unint64_t *)&v11->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          return;
        }
      }
      else
      {
        if (*(_QWORD *)(a1 + 592))
        {
          v45 = 0uLL;
          std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 592, &v45);
          v20 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
          if (*((_QWORD *)&v45 + 1))
          {
            v21 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
        }
        v23 = *(const void **)(a1 + 624);
        if (v23)
          CFRelease(v23);
        v24 = textureOut;
        v25 = v48;
        *(_QWORD *)(a1 + 624) = textureOut;
        CVMetalTextureGetTexture(v24);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        v27 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v25 + 408))(v25, v26);
        std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v45, v27);
        std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 592, &v45);
        v28 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
        if (*((_QWORD *)&v45 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }

        if (!PlaneCount)
          goto LABEL_45;
      }
      if (!CVMetalTextureCacheCreateTextureFromImage(v19, *v14, pixelBuffer, 0, MTLPixelFormatRG8Unorm, Width >> 1, Height >> 1, 1uLL, &image))
      {
        v31 = a1 + 608;
        if (*(_QWORD *)(a1 + 608))
        {
          v45 = 0uLL;
          std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 608, &v45);
          v32 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
          if (*((_QWORD *)&v45 + 1))
          {
            v33 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
        v35 = *(const void **)(a1 + 632);
        if (v35)
          CFRelease(v35);
        v36 = image;
        *(_QWORD *)(a1 + 632) = image;
        v37 = v48;
        CVMetalTextureGetTexture(v36);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        v39 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v37 + 408))(v37, v38);
        std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v45, v39);
        std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](v31, &v45);
        v40 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
        if (*((_QWORD *)&v45 + 1))
        {
          v41 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }

      }
      goto LABEL_45;
    }
  }
}

void sub_1DC8CDD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SKCVideoNode::setNextVideoFrame(SKCVideoNode *this, CVPixelBufferRef texture)
{
  __CVBuffer *v3;

  v3 = (__CVBuffer *)*((_QWORD *)this + 82);
  if (v3 != texture)
  {
    if (v3)
    {
      CVPixelBufferRelease(v3);
      *((_QWORD *)this + 82) = 0;
    }
    if (texture)
    {
      *((_QWORD *)this + 82) = CVPixelBufferRetain(texture);
      SKCNode::setFlags(this, 66, 1);
    }
  }
}

void SKCVideoNode::checkForVideoFrame(SKCVideoNode *this, double a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v4 = (void *)*((_QWORD *)this + 71);
  if (v4)
  {
    objc_msgSend(v4, "currentItem");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = (void *)*((_QWORD *)this + 72);
    if (v6 != v5)
    {
      if (*((_QWORD *)this + 81))
      {
        objc_msgSend(v6, "removeOutput:");
        v7 = (void *)*((_QWORD *)this + 81);
        *((_QWORD *)this + 81) = 0;

      }
      objc_storeStrong((id *)this + 72, v5);
    }
    if (v5 && !*((_QWORD *)this + 81))
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setObject:forKey:", &unk_1EA51B7B0, *MEMORY[0x1E0CA9040]);
      if (*((_BYTE *)this + 588))
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setObject:forKey:", v9, CFSTR("MetalCompatibility"));
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setObject:forKey:", v9, CFSTR("OpenGLESCompatibility"));
      }

      v10 = objc_msgSend(objc_alloc(MEMORY[0x1E0C8B328]), "initWithPixelBufferAttributes:", v8);
      v11 = (void *)*((_QWORD *)this + 81);
      *((_QWORD *)this + 81) = v10;

      objc_msgSend(v5, "addOutput:", *((_QWORD *)this + 81));
    }

  }
  v12 = (void *)*((_QWORD *)this + 81);
  if (v12)
  {
    v20 = 0uLL;
    v21 = 0;
    objc_msgSend(v12, "itemTimeForHostTime:", a2);
    v13 = (void *)*((_QWORD *)this + 81);
    v18 = v20;
    v19 = v21;
    if (objc_msgSend(v13, "hasNewPixelBufferForItemTime:", &v18))
    {
      if (!*((_QWORD *)this + 82))
      {
        v14 = (void *)*((_QWORD *)this + 81);
        v16 = v20;
        v17 = v21;
        v15 = objc_msgSend(v14, "copyPixelBufferForItemTime:itemTimeForDisplay:", &v16, 0);
        if (v15)
        {
          *((_QWORD *)this + 82) = v15;
          SKCNode::setFlags(this, 66, 1);
        }
      }
    }
  }
}

void sub_1DC8CDFB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void SKCVideoNode::update(NSObject **this, double a2, float a3)
{
  NSObject *v5;
  _QWORD v6[6];

  SKCNode::update((SKCNode *)this, a2, 1.0);
  v5 = this[87];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN12SKCVideoNode6updateEdf_block_invoke;
  v6[3] = &__block_descriptor_48_e5_v8__0l;
  v6[4] = this;
  *(double *)&v6[5] = a2;
  dispatch_async(v5, v6);
}

void ___ZN12SKCVideoNode6updateEdf_block_invoke(uint64_t a1)
{
  SKCVideoNode::checkForVideoFrame(*(SKCVideoNode **)(a1 + 32), *(double *)(a1 + 40));
}

BOOL SKCVideoNode::getNeedsUpdate(SKCVideoNode *this)
{
  if (SKCNode::getNeedsUpdate(this))
    return 1;
  if (*((_BYTE *)this + 172))
    return 0;
  return (*((_BYTE *)this + 171) & 0x60) != 0;
}

void SKCVideoNode::setPlayer(id *this, AVPlayer *a2)
{
  objc_storeStrong(this + 71, a2);
}

id SKCVideoNode::getPlayer(id *this)
{
  return this[71];
}

void SKCVideoNode::loadAVAsset(SKCVideoNode *this, AVAsset *a2)
{
  void *v2;
  id v3;

  v2 = (void *)*((_QWORD *)this + 71);
  objc_msgSend(MEMORY[0x1E0C8B300], "playerItemWithAsset:", a2);
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "replaceCurrentItemWithPlayerItem:");

}

void sub_1DC8CE110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SKCVideoNode::~SKCVideoNode(SKCVideoNode *this, double a2)
{
  void *v3;
  void *v4;
  const void *v5;
  const void *v6;
  __CVMetalTextureCache *v7;
  uint64_t i;
  __CVBuffer *v9;

  *(_QWORD *)this = off_1EA4FFD90;
  LODWORD(a2) = 0;
  objc_msgSend(*((id *)this + 71), "setRate:", a2);
  v3 = (void *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;

  v4 = (void *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;

  v5 = (const void *)*((_QWORD *)this + 78);
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 79);
  if (v6)
    CFRelease(v6);
  v7 = (__CVMetalTextureCache *)*((_QWORD *)this + 80);
  if (v7)
  {
    CVMetalTextureCacheFlush(v7, 0);
    CFRelease(*((CFTypeRef *)this + 80));
  }
  for (i = *((_QWORD *)this + 84); (SKCVideoNode *)i != (SKCVideoNode *)((char *)this + 664); i = *(_QWORD *)(i + 8))
    CVPixelBufferRelease(*(CVPixelBufferRef *)(i + 16));
  std::__list_imp<SKCRenderSortInfo *>::clear((_QWORD *)this + 83);
  v9 = (__CVBuffer *)*((_QWORD *)this + 82);
  if (v9)
    CVPixelBufferRelease(v9);

  std::__list_imp<SKCRenderSortInfo *>::clear((_QWORD *)this + 83);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 608);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 592);

  SKCNode::~SKCNode((id *)this);
}

{
  SKCVideoNode::~SKCVideoNode(this, a2);
  JUMPOUT(0x1DF0CF560);
}

_QWORD *std::list<__CVBuffer *>::list(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a2)
  {
    v4 = 0;
    v5 = a1;
    do
    {
      v6 = operator new(0x18uLL);
      v6[1] = a1;
      v6[2] = 0;
      *v6 = v5;
      v5[1] = v6;
      *a1 = v6;
      ++v4;
      v5 = v6;
      a1[2] = v4;
    }
    while (a2 != v4);
  }
  return a1;
}

void sub_1DC8CE2B4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<SKCRenderSortInfo *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::list<__CVBuffer *>::__move_assign(uint64_t *a1, _QWORD *a2)
{
  std::__list_imp<SKCRenderSortInfo *>::clear(a1);
  return std::list<SKCNode *>::splice((uint64_t)a1, a1, a2);
}

uint64_t _SKStartCollectingPerformanceStatisticsForPid(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t mapped_memory_cache_for_task;
  unsigned __int8 v8;
  char *v9;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __n128 (*v14)(__n128 *, __n128 *);
  uint64_t (*v15)();
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int *v20;

  v19 = a1;
  v1 = CSSymbolicatorCreateWithPid();
  v3 = v2;
  if ((CSIsNull() & 1) != 0)
    return 0;
  v11 = 0;
  v12 = &v11;
  v13 = 0x4012000000;
  v14 = __Block_byref_object_copy__3;
  v15 = __Block_byref_object_dispose__3;
  v18 = 0;
  v16 = "";
  v17 = 0;
  CSSymbolicatorForeachSymbolWithMangledNameAtTime();
  v5 = v12[6];
  v6 = v12[7];
  if (CSIsNull()
    || (CSSymbolicatorGetTask(), (mapped_memory_cache_for_task = create_mapped_memory_cache_for_task()) == 0))
  {
    CSRelease();
    v4 = 0;
  }
  else
  {
    {
      getPerfDataMappingByPID(void)::perfDataMappingByPID = 0u;
      unk_1F03A3738 = 0u;
      dword_1F03A3748 = 1065353216;
    }
    v20 = &v19;
    v9 = std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&getPerfDataMappingByPID(void)::perfDataMappingByPID, &v19, (uint64_t)&std::piecewise_construct, &v20);
    *((_QWORD *)v9 + 3) = v1;
    *((_QWORD *)v9 + 4) = v3;
    *((_QWORD *)v9 + 5) = v5;
    *((_QWORD *)v9 + 6) = v6;
    v4 = 1;
    *((_QWORD *)v9 + 7) = mapped_memory_cache_for_task;
  }
  _Block_object_dispose(&v11, 8);
  return v4;
}

void sub_1DC8CF87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t _SKStopCollectingPerformanceStatisticsForPid(int a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  _QWORD v4[5];
  int v5;

  v5 = a1;
  {
    getPerfDataMappingByPID(void)::perfDataMappingByPID = 0u;
    unk_1F03A3738 = 0u;
    dword_1F03A3748 = 1065353216;
  }
  std::unordered_map<int,SKPerformanceDataMapping>::unordered_map((uint64_t)v4, (uint64_t)&getPerfDataMappingByPID(void)::perfDataMappingByPID);
  v2 = std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::find<int>(v4, &v5);
  if (v2)
  {
    destroy_mapped_memory_cache();
    v2[5] = 0;
    v2[6] = 0;
    v2[7] = 0;
    CSRelease();
    v2[3] = 0;
    v2[4] = 0;
    std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::erase(v4, v2);
  }
  std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::~__hash_table((uint64_t)v4);
  return 1;
}

void sub_1DC8CF9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *_SKGetPerformanceStatisticsForPid(int a1)
{
  unsigned __int8 v1;
  uint64_t *v2;
  _QWORD v4[5];
  int v5;

  v5 = a1;
  {
    getPerfDataMappingByPID(void)::perfDataMappingByPID = 0u;
    unk_1F03A3738 = 0u;
    dword_1F03A3748 = 1065353216;
  }
  std::unordered_map<int,SKPerformanceDataMapping>::unordered_map((uint64_t)v4, (uint64_t)&getPerfDataMappingByPID(void)::perfDataMappingByPID);
  v2 = std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::find<int>(v4, &v5);
  if (v2)
  {
    if (CSSymbolGetRange())
    {
      clear_mapped_memory();
      v2 = 0;
      mapped_memory_read();
    }
    else
    {
      v2 = 0;
    }
  }
  std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::~__hash_table((uint64_t)v4);
  return v2;
}

void sub_1DC8CFE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a3);
  v6 = v5;

  std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void _perfUpdateStatistics(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  int v6;
  unsigned int v7;
  float v8;
  _BOOL4 v9;
  float v10;
  double v11;
  int v12;
  char *v13;
  uint64_t v14;
  float v15;
  char *v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  char *v34;
  id v35;

  v5 = a3;
  if (a1 && a2)
  {
    v6 = *(_DWORD *)(a2 + 40);
    v7 = 1;
    if (v6 >= 2)
    {
      v8 = *(double *)(a2 + 8) - *(double *)(a2 + 24);
      if (v8 > 0.0)
        v7 = (float)((float)(v6 - 1) / v8);
    }
    v9 = (byte_1F03A38F1 & 1) == 0;
    if (qword_1F03A36F8)
      v10 = *(float *)&dword_1F03A3708 / (float)qword_1F03A36F8;
    else
      v10 = 0.0;
    v11 = *(double *)(a1 + 16);
    v12 = *(_DWORD *)(a1 + 40);
    _skPerformanceData[0] = 1;
    v13 = &_skPerformanceData[48 * ((byte_1F03A38F1 & 1) == 0)];
    *((_DWORD *)v13 + 1) = *(_DWORD *)(a1 + 156);
    *((_DWORD *)v13 + 2) = v7;
    v35 = v5;
    v14 = objc_msgSend(v5, "preferredFramesPerSecond");
    v15 = v11 / (double)v12 * 1000.0;
    v16 = &_skPerformanceData[48 * v9];
    *((float *)v16 + 12) = (float)v14;
    v17 = v10 + v15;
    *((float *)v16 + 3) = v17;
    v18 = qword_1F03A3680;
    v19 = 0.0;
    v20 = 0.0;
    if (qword_1F03A3680)
      v20 = *(float *)&dword_1F03A3690 / (float)qword_1F03A3680;
    *(float *)&_skPerformanceData[48 * v9 + 20] = v20;
    v21 = qword_1F03A3698;
    v5 = v35;
    if (qword_1F03A3698)
      v19 = *(float *)&dword_1F03A36A8 / (float)qword_1F03A3698;
    *(float *)&_skPerformanceData[48 * v9 + 24] = v19;
    v22 = 0.0;
    v23 = 0.0;
    if (qword_1F03A36E0)
      v23 = *(float *)&dword_1F03A36F0 / (float)qword_1F03A36E0;
    *(float *)&_skPerformanceData[48 * v9 + 32] = v23;
    v24 = qword_1F03A36B0;
    if (qword_1F03A36B0)
      v22 = *(float *)&dword_1F03A36C0 / (float)qword_1F03A36B0;
    v25 = v22 - v23;
    *(float *)&_skPerformanceData[48 * v9 + 28] = v25;
    v26 = 0.0;
    v27 = 0.0;
    if (qword_1F03A36C8)
      v27 = *(float *)&dword_1F03A36D8 / (float)qword_1F03A36C8;
    *(float *)&_skPerformanceData[48 * v9 + 36] = v27;
    if (_performanceFrame)
      v26 = *(float *)&dword_1F03A3678 / (float)_performanceFrame;
    v28 = 0.0;
    v29 = 0.0;
    if (v24)
      v29 = *(float *)&dword_1F03A36C0 / (float)v24;
    if (v18)
      v28 = *(float *)&dword_1F03A3690 / (float)v18;
    v30 = v29 + v28;
    v31 = 0.0;
    v32 = 0.0;
    if (v21)
      v32 = *(float *)&dword_1F03A36A8 / (float)v21;
    v33 = v26 - (float)(v30 + v32);
    v34 = &_skPerformanceData[48 * v9];
    *((float *)v34 + 4) = v33;
    *((float *)v34 + 10) = v10;
    if (qword_1F03A3710)
      v31 = *(float *)&dword_1F03A3720 / (float)qword_1F03A3710;
    *(float *)&_skPerformanceData[48 * v9 + 44] = v31;
    if ((float)(v17 - (float)(v19 + (float)(v25 + (float)(v20 + (float)(v27 + v33))))) >= 0.0)
      byte_1F03A38F1 = v9;
    _performanceFrame = 0;
    dword_1F03A3678 = 0;
    qword_1F03A3680 = 0;
    dword_1F03A3690 = 0;
    qword_1F03A3698 = 0;
    dword_1F03A36A8 = 0;
    qword_1F03A36B0 = 0;
    dword_1F03A36C0 = 0;
    qword_1F03A36E0 = 0;
    dword_1F03A36F0 = 0;
    qword_1F03A36C8 = 0;
    dword_1F03A36D8 = 0;
    qword_1F03A36F8 = 0;
    dword_1F03A3708 = 0;
    qword_1F03A3710 = 0;
    dword_1F03A3720 = 0;
  }

}

void sub_1DC8D01A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _perfBeginClientUpdate(double a1)
{
  qword_1F03A3670 = *(_QWORD *)&a1;
}

float _perfEndClientUpdate(double a1)
{
  float v1;
  float result;

  v1 = (a1 - *(double *)&qword_1F03A3670) * 1000.0;
  result = *(float *)&dword_1F03A3678 + fmaxf(v1, 0.0);
  dword_1F03A3678 = LODWORD(result);
  ++_performanceFrame;
  return result;
}

void _perfBeginPhysics(double a1)
{
  qword_1F03A3688 = *(_QWORD *)&a1;
}

float _perfEndPhysics(double a1)
{
  float v1;
  float result;

  v1 = (a1 - *(double *)&qword_1F03A3688) * 1000.0;
  result = *(float *)&dword_1F03A3690 + fmaxf(v1, 0.0);
  dword_1F03A3690 = LODWORD(result);
  ++qword_1F03A3680;
  return result;
}

void _perfBeginConstraints(double a1)
{
  qword_1F03A36A0 = *(_QWORD *)&a1;
}

float _perfEndConstraints(double a1)
{
  float v1;
  float result;

  v1 = (a1 - *(double *)&qword_1F03A36A0) * 1000.0;
  result = *(float *)&dword_1F03A36A8 + fmaxf(v1, 0.0);
  dword_1F03A36A8 = LODWORD(result);
  ++qword_1F03A3698;
  return result;
}

void _perfBeginActions(double a1)
{
  qword_1F03A36B8 = *(_QWORD *)&a1;
}

float _perfEndActions(double a1)
{
  float v1;
  float result;

  v1 = (a1 - *(double *)&qword_1F03A36B8) * 1000.0;
  result = *(float *)&dword_1F03A36C0 + fmaxf(v1, 0.0);
  dword_1F03A36C0 = LODWORD(result);
  ++qword_1F03A36B0;
  ++qword_1F03A36E0;
  return result;
}

void _perfBeginEmitters(double a1)
{
  qword_1F03A36E8 = *(_QWORD *)&a1;
}

float _perfEndEmitters(double a1)
{
  float v1;
  float result;

  v1 = (a1 - *(double *)&qword_1F03A36E8) * 1000.0;
  result = *(float *)&dword_1F03A36F0 + fmaxf(v1, 0.0);
  dword_1F03A36F0 = LODWORD(result);
  return result;
}

void _perfBeginRender(double a1)
{
  qword_1F03A36D0 = *(_QWORD *)&a1;
}

float _perfEndRender(double a1)
{
  float v1;
  float result;

  v1 = (a1 - *(double *)&qword_1F03A36D0) * 1000.0;
  result = *(float *)&dword_1F03A36D8 + fmaxf(v1, 0.0);
  dword_1F03A36D8 = LODWORD(result);
  ++qword_1F03A36C8;
  return result;
}

float _perfMarkCADisplayLinkStart(double a1)
{
  float v1;

  if (*(double *)&qword_1F03A3700 != 0.0)
  {
    v1 = (a1 - *(double *)&qword_1F03A3700) * 1000.0;
    *(float *)&a1 = fmaxf(v1, 0.0) + *(float *)&dword_1F03A3708;
    dword_1F03A3708 = LODWORD(a1);
    ++qword_1F03A36F8;
  }
  return *(float *)&a1;
}

void _perfMarkCADisplayLinkEnd(double a1)
{
  qword_1F03A3700 = *(_QWORD *)&a1;
}

void _perfStartRequestDrawable(double a1)
{
  qword_1F03A3718 = *(_QWORD *)&a1;
}

float _perfEndRequestDrawable(double a1)
{
  float v1;
  float result;

  v1 = (a1 - *(double *)&qword_1F03A3718) * 1000.0;
  result = *(float *)&dword_1F03A3720 + fmaxf(v1, 0.0);
  dword_1F03A3720 = LODWORD(result);
  ++qword_1F03A3710;
  return result;
}

char *std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v11 = (char *)operator new(0x40uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_QWORD *)v11 + 7) = 0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *(_QWORD *)v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v11)
  {
    v21 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1DC8D0660(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<int,SKPerformanceDataMapping>::unordered_map(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::__emplace_unique_key_args<int,std::pair<int const,SKPerformanceDataMapping> const&>(a1, i + 4, (_OWORD *)i + 1);
  return a1;
}

void sub_1DC8D06D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::__emplace_unique_key_args<int,std::pair<int const,SKPerformanceDataMapping> const&>(uint64_t a1, int *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x40uLL);
  *v10 = 0;
  v10[1] = v6;
  v12 = a3[1];
  *((_OWORD *)v10 + 1) = *a3;
  *((_OWORD *)v10 + 2) = v12;
  *((_OWORD *)v10 + 3) = a3[2];
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v10 = *v20;
LABEL_38:
    *v20 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v21 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1DC8D08F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::find<int>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

void SKCStats::SKCStats(SKCStats *this)
{
  this->_vptr$SKCStats = (void **)&off_1EA4FFED8;
  this->clientUpdate.duration = 0.0;
  this->update.duration = 0.0;
  this->physics.duration = 0.0;
  this->physics.bodyCount = 0;
  this->constraints.duration = 0.0;
  this->constraints.constraintCount = 0;
  *(_OWORD *)&this->frameBeginTime = 0u;
  *(_OWORD *)&this->baseTime = 0u;
  this->frameCount = 0;
  *(_OWORD *)&this->render.duration = 0u;
  *(_OWORD *)&this->render.nodeTraversalCount = 0u;
  *(_QWORD *)&this->render.passCount = 0;
}

void SKCStats::~SKCStats(SKCStats *this)
{
  JUMPOUT(0x1DF0CF560);
}

SKCStats *SKCStats::beginFrame(SKCStats *this, double a2)
{
  if (this->baseTime <= 0.0)
    this->baseTime = a2;
  this->frameBeginTime = a2;
  this->currentTime = a2;
  return this;
}

double SKCStats::endFrame(SKCStats *this, double a2)
{
  float v2;
  double result;

  this->currentTime = a2;
  v2 = a2 - this->frameBeginTime;
  result = fmaxf(v2, 0.0);
  this->frameDuration = result;
  ++this->frameCount;
  return result;
}

SKCStats *SKCStats::beginClientUpdate(SKCStats *this, double a2)
{
  this->clientUpdate.beginTime = a2;
  return this;
}

double SKCStats::endClientUpdate(SKCStats *this, double a2)
{
  float v2;
  double result;

  v2 = a2 - this->clientUpdate.beginTime;
  result = fmaxf(v2, 0.0);
  this->clientUpdate.duration = result;
  return result;
}

SKCStats *SKCStats::beginUpdate(SKCStats *this, double a2)
{
  this->update.beginTime = a2;
  return this;
}

SKCStats *SKCStats::beginPhysics(SKCStats *this, double a2)
{
  this->physics.beginTime = a2;
  return this;
}

double SKCStats::endPhysics(SKCStats *this, double a2)
{
  float v2;
  double result;

  v2 = a2 - this->physics.beginTime;
  result = fmaxf(v2, 0.0);
  this->physics.duration = result;
  return result;
}

SKCStats *SKCStats::beginConstraints(SKCStats *this, double a2)
{
  this->constraints.beginTime = a2;
  return this;
}

double SKCStats::endConstraints(SKCStats *this, double a2)
{
  float v2;
  double result;

  v2 = a2 - this->constraints.beginTime;
  result = fmaxf(v2, 0.0);
  this->constraints.duration = result;
  return result;
}

SKCStats *SKCStats::beginRender(SKCStats *this, double a2)
{
  this->render.beginTime = a2;
  return this;
}

double SKCStats::endRender(SKCStats *this, double a2)
{
  float v2;
  double result;

  v2 = a2 - this->render.beginTime;
  result = fmaxf(v2, 0.0);
  this->render.duration = result;
  return result;
}

int32x2_t SKCStats::operator+@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = &off_1EA4FFED8;
  *(_OWORD *)(a3 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a3 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a1 + 152);
  *(_QWORD *)(a3 + 168) = *(_QWORD *)(a1 + 168);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a3 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a3 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a3 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a3 + 40) = *(_OWORD *)(a1 + 40);
  return SKCStats::operator+=(a3, a2);
}

int32x2_t SKCStats::operator+=(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int32x2_t result;

  if (*(double *)(a1 + 24) <= 0.0)
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(double *)(a1 + 32) = fmax(*(double *)(a1 + 32), *(double *)(a2 + 32));
  v2 = *(double *)(a2 + 16) + *(double *)(a1 + 16);
  v3 = fmax(*(double *)(a1 + 8), *(double *)(a2 + 8));
  *(_DWORD *)(a1 + 40) += *(_DWORD *)(a2 + 40);
  *(double *)(a1 + 8) = v3;
  *(double *)(a1 + 16) = v2;
  *(double *)(a1 + 56) = *(double *)(a2 + 56) + *(double *)(a1 + 56);
  *(double *)(a1 + 72) = *(double *)(a2 + 72) + *(double *)(a1 + 72);
  *(double *)(a1 + 88) = *(double *)(a2 + 88) + *(double *)(a1 + 88);
  *(_DWORD *)(a1 + 96) += *(_DWORD *)(a2 + 96);
  *(double *)(a1 + 112) = *(double *)(a2 + 112) + *(double *)(a1 + 112);
  *(_DWORD *)(a1 + 120) += *(_DWORD *)(a2 + 120);
  *(double *)(a1 + 136) = *(double *)(a2 + 136) + *(double *)(a1 + 136);
  *(_DWORD *)(a1 + 160) += *(_DWORD *)(a2 + 160);
  *(int32x4_t *)(a1 + 144) = vaddq_s32(*(int32x4_t *)(a1 + 144), *(int32x4_t *)(a2 + 144));
  result = vadd_s32(*(int32x2_t *)(a1 + 164), *(int32x2_t *)(a2 + 164));
  *(int32x2_t *)(a1 + 164) = result;
  return result;
}

void sub_1DC8D0CF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0CF560](v1, 0x10A1C40FA304213);
  _Unwind_Resume(a1);
}

void sub_1DC8D0DC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *SKCEmitterNode::addSubEmitterNode(uint64_t *this, SKCEmitterNode *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v3 = (uint64_t)this;
    if (*((_BYTE *)a2 + 988))
    {
      *(_QWORD *)((char *)a2 + 980) = 0;
      *((_QWORD *)a2 + 124) = this;
      *((_BYTE *)a2 + 989) = 0;
      SKCEmitterNode::initializeSystem(a2);
    }
    this = (uint64_t *)operator new(0x18uLL);
    this[1] = v3 + 1000;
    this[2] = (uint64_t)a2;
    v4 = *(_QWORD *)(v3 + 1000);
    *this = v4;
    *(_QWORD *)(v4 + 8) = this;
    *(_QWORD *)(v3 + 1000) = this;
    ++*(_QWORD *)(v3 + 1016);
    *(_BYTE *)(v3 + 989) = 1;
    if (*(_BYTE *)(v3 + 988))
      return SKCEmitterNode::initializeSystem((SKCEmitterNode *)v3);
  }
  return this;
}

void sub_1DC8D0FDC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1080C4001E39035);

  _Unwind_Resume(a1);
}

void sub_1DC8D1194(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1080C4001E39035);

  _Unwind_Resume(a1);
}

void sub_1DC8D1AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1DC8D1C90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DC8D1D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SKCEmitterNode::setTargetNode(SKCEmitterNode *this, SKNode *a2)
{
  SKNode *v3;
  SKNode *WeakRetained;
  SKNode *v5;
  id v6;
  void *v7;
  SKNode *obj;

  v3 = a2;
  if (!v3)
    v3 = (SKNode *)*((id *)this + 1);
  obj = v3;
  WeakRetained = (SKNode *)objc_loadWeakRetained((id *)this + 71);

  v5 = obj;
  if (obj != WeakRetained)
  {
    v6 = objc_loadWeakRetained((id *)this + 71);
    v7 = v6;
    if (v6)
      SKCNode::removeInternalChild((SKCNode *)objc_msgSend(v6, "_backingNode"), *((id **)this + 74));

    *((_DWORD *)this + 174) = 0;
    objc_storeWeak((id *)this + 71, obj);
    SKCEmitterNode::addParticlesToTargetNode((id *)this);
    v5 = obj;
  }

}

void sub_1DC8D1DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8D1F6C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1080C4001E39035);

  _Unwind_Resume(a1);
}

void sub_1DC8D2148(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1080C4001E39035);

  _Unwind_Resume(a1);
}

void sub_1DC8D234C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1080C4001E39035);

  _Unwind_Resume(a1);
}

void sub_1DC8D2534(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1080C4001E39035);

  _Unwind_Resume(a1);
}

void sub_1DC8D2710(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1080C4001E39035);

  _Unwind_Resume(a1);
}

void sub_1DC8D2A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8D322C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SKCEmitterNode::resetSimulation(SKCParticleSystem **this)
{
  double v2;
  float v3;
  double v4;

  if (!*((_BYTE *)this + 988))
  {
    SKCParticleSystem::removePatricles(this[75], 0, *((_DWORD *)this[75] + 21));
    SKCParticleSystem::compact(this[75]);
    *((_DWORD *)this + 174) = 0;
    this[86] = 0;
    this[91] = 0;
    v2 = skCurrentTime();
    *((double *)this + 88) = v2;
    v3 = *((float *)this + 228);
    if (v3 <= 0.0)
      v4 = 1.79769313e308;
    else
      v4 = v2 + 1.0 / v3;
    *((double *)this + 89) = v4;
  }
}

void sub_1DC8D338C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8D3428(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8D34C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8D3C24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8D42D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8D4824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DC8D492C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8D49F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8D4AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)SKEmitterNode;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void SKCEmitterNode::removeSubEmitterNodes(SKCEmitterNode *this)
{
  _QWORD *v2;
  _QWORD *i;

  v2 = (_QWORD *)((char *)this + 1000);
  for (i = (_QWORD *)*((_QWORD *)this + 126); i != v2; i = (_QWORD *)i[1])
  {
    *(_QWORD *)(i[2] + 992) = 0;
    i[2] = 0;
  }
  std::__list_imp<SKCRenderSortInfo *>::clear(v2);
  SKCEmitterNode::resetSimulation((SKCParticleSystem **)this);
  *((_BYTE *)this + 989) = 0;
}

void SKCEmitterNode::removeSubEmitterNode(SKCEmitterNode *this, SKCEmitterNode *a2)
{
  SKCEmitterNode **v3;
  SKCEmitterNode **i;
  SKCEmitterNode *v5;

  if (a2)
  {
    v3 = (SKCEmitterNode **)((char *)this + 1000);
    for (i = (SKCEmitterNode **)*((_QWORD *)this + 126); i != v3; i = (SKCEmitterNode **)i[1])
    {
      if (i[2] == a2)
      {
        if (i != v3)
        {
          i[2] = 0;
          v5 = *i;
          *((_QWORD *)v5 + 1) = i[1];
          *(_QWORD *)i[1] = v5;
          --*((_QWORD *)this + 127);
          operator delete(i);
        }
        break;
      }
    }
  }
  if (!*((_QWORD *)this + 127))
  {
    SKCEmitterNode::resetSimulation((SKCParticleSystem **)this);
    *((_BYTE *)this + 989) = 0;
  }
}

void sub_1DC8D5008(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1DC8D5728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void SKCEmitterNode::SKCEmitterNode(SKCEmitterNode *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  double v6;
  void *v12;
  float v13;
  double v14;
  uint64_t v15;
  void *v16;

  SKCNode::SKCNode(this);
  *(_QWORD *)v2 = off_1EA4FF8A0;
  *(_WORD *)(v2 + 560) = 0;
  *(_QWORD *)(v2 + 568) = 0;
  *(_OWORD *)(v2 + 576) = 0u;
  *(_OWORD *)(v2 + 592) = 0u;
  *(_QWORD *)(v2 + 608) = 0x3FF0000000000000;
  *(_BYTE *)(v2 + 616) = 0;
  *(_QWORD *)(v2 + 764) = 0;
  v3 = (_QWORD *)(v2 + 848);
  *(_QWORD *)(v2 + 848) = v2 + 848;
  *(_QWORD *)(v2 + 856) = v2 + 848;
  *(_QWORD *)(v2 + 864) = 0;
  *(_QWORD *)(v2 + 960) = 0;
  *(_DWORD *)(v2 + 976) = 0;
  *(_QWORD *)(v2 + 1000) = v2 + 1000;
  *(_QWORD *)(v2 + 1008) = v2 + 1000;
  *(_QWORD *)(v2 + 1016) = 0;
  +[SKNode node](SKParticleSystemNode, "node");
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = v4;

  *((_QWORD *)this + 74) = objc_msgSend(*((id *)this + 73), "_backingNode");
  v6 = skCurrentTime();
  *((double *)this + 88) = v6;
  *((double *)this + 90) = v6;
  *((_QWORD *)this + 91) = 0;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_QWORD *)this + 86) = 0;
  *((_OWORD *)this + 46) = *MEMORY[0x1E0C9D820];
  *((_QWORD *)this + 94) = 0;
  *((_DWORD *)this + 190) = 0;
  *((_QWORD *)this + 104) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 98) = _D0;
  *((_DWORD *)this + 198) = 1065353216;
  *((_DWORD *)this + 228) = 0;
  *((_DWORD *)this + 203) = 0;
  *(_OWORD *)((char *)this + 796) = 0u;
  v12 = (void *)*((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = 0;

  *(_OWORD *)((char *)this + 872) = 0u;
  *((_DWORD *)this + 237) = 1065353216;
  *((_QWORD *)this + 121) = 0;
  *((_DWORD *)this + 232) = 0;
  *((_QWORD *)this + 115) = 0;
  *((_DWORD *)this + 229) = 0;
  *(_OWORD *)((char *)this + 888) = xmmword_1DC922A40;
  *((_QWORD *)this + 113) = 0;
  *((_DWORD *)this + 210) = 0;
  *(_OWORD *)((char *)this + 932) = xmmword_1DC922200;
  *((_QWORD *)this + 119) = 0;
  *((_DWORD *)this + 174) = 0;
  *((_OWORD *)this + 51) = 0u;
  std::__list_imp<SKCRenderSortInfo *>::clear(v3);
  v13 = *((float *)this + 228);
  if (v13 <= 0.0)
    v14 = 1.79769313e308;
  else
    v14 = 1.0 / v13 + *((double *)this + 88);
  *((double *)this + 89) = v14;
  *((_DWORD *)this + 175) = vcvtps_s32_f32((float)((float)(v13* (float)(*((float *)this + 229) + (float)(*((float *)this + 230) * 0.5)))* 1.04)+ 2.0);
  *((_WORD *)this + 280) = 257;
  v15 = *((_QWORD *)this + 74);
  v16 = *(void **)(v15 + 568);
  *(_QWORD *)(v15 + 568) = 0;

  *(_QWORD *)((char *)this + 980) = 0x3E800000064;
  *((_WORD *)this + 494) = 257;
  *((_QWORD *)this + 124) = 0;
}

void sub_1DC8D5B0C(_Unwind_Exception *a1)
{
  id *v1;
  _QWORD *v2;
  id *v3;
  _QWORD *v4;

  std::__list_imp<SKCRenderSortInfo *>::clear(v4);

  std::__list_imp<SKCRenderSortInfo *>::clear(v2);
  objc_destroyWeak(v3);
  SKCNode::~SKCNode(v1);
  _Unwind_Resume(a1);
}

void sub_1DC8D5DD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1DC8D5EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8D5F3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1DC8D6068(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8D615C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8D6298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8D6304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8D637C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8D63EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8D64A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8D6874(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1080C4001E39035);

  _Unwind_Resume(a1);
}

void sub_1DC8D6A9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8D6BB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8D6D68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8D6E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)SKVideoNode;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1DC8D6FB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8D7030(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8D7218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8D7318(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8D7410(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1DC8D7540(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1DC8D762C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8D7734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8D77B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8D7808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8D7858(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8D79A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8D7A70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8D7B8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8D7BE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0CF560](v1, 0x10A1C405FC3EF92);
  _Unwind_Resume(a1);
}

void sub_1DC8D8000(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8D8364(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1DC8D84E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8D8538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)SKTextureCache;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1DC8D88BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8D89AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8D8CA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8D9064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DC8D9170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11)
{

  _Unwind_Resume(a1);
}

void sub_1DC8D9234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8D947C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DC8D95A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8D9674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8D97C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_1DC8DA134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1DC8DA3AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DC8DA4F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8DA60C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8DA678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DA718(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8DAC54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8DAF54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8DB238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8DB2B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DB32C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DB418(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DB5F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8DB874(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DBB60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DBBD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DBC4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DBDB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DBF88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DC118(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DC424(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1DC8DC5CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8DC80C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8DCA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1DC8DCB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1DC8DCE58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v1);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v2 - 80);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v2 - 64);
  _Unwind_Resume(a1);
}

void sub_1DC8DCFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1DC8DD15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c39_ZTSNSt3__110shared_ptrI11jet_textureEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c39_ZTSNSt3__110shared_ptrI11jet_textureEE(uint64_t a1)
{
  return std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](a1 + 40);
}

void sub_1DC8DD318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8DD3BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DD44C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8DD57C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DD6E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DD8B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DD910(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DD9C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DDADC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DDC10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DDD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Block_object_dispose((const void *)(v10 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC8DDE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DC8DDFD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Block_object_dispose(va1, 8);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v2 + 48);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__4(uint64_t a1)
{
  return std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](a1 + 48);
}

void sub_1DC8DE240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15, uint64_t a16, char a17)
{
  void *v17;
  uint64_t v18;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Block_object_dispose(&a17, 8);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v18 + 48);

  _Unwind_Resume(a1);
}

void sub_1DC8DE3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DC8DE50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;

  va_start(va, a9);
  v11 = v9;
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Block_object_dispose((const void *)(v10 - 64), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__332(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__333(uint64_t a1)
{

}

void sub_1DC8DE638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1DC8DF14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_1DC8DF274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8DF400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::pair<std::string,SKAttributeValue * {__strong}>::~pair((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1DC8DF4C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DF548(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DF6F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1DC8DF788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8DF928(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8DFA28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8DFC70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1DC8E0A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1DC8E10C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DC8E1200(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8E135C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8E169C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8E19BC(_Unwind_Exception *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  void *v15;
  va_list va;

  va_start(va, a15);

  std::__hash_table<std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::__unordered_map_hasher<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::hash<CGImage *>,std::equal_to<CGImage *>,true>,std::__unordered_map_equal<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::equal_to<CGImage *>,std::hash<CGImage *>,true>,std::allocator<std::__hash_value_type<CGImage *,SKTexture * {__strong}>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DC8E1B14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8E1BD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8E1DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DC8E2088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1DC8E2234(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8E2400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8E2518(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8E2578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)SKTextureAtlas;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1DC8E295C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;
  void *v48;

  if (a47 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1DC8E2D80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8E3450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, void *a20,uint64_t a21,void *a22,void *a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1DC8E3750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8E3828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8E3B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1DC8E3CA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,SKTexture * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKTexture * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKTexture * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKTexture * {__strong}>>>::__emplace_unique_key_args<std::string,std::pair<std::string,SKTexture * {__strong}>>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = operator new(0x30uLL);
  v17 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v18 = *((_QWORD *)a3 + 2);
  v19 = *((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v29[0] = v16;
  v29[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  *((_OWORD *)v16 + 1) = v17;
  v16[4] = v18;
  v16[5] = v19;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(a1, v25);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v27 >= v10)
          v27 %= v10;
      }
      else
      {
        v27 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_1DC8E3F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::__unordered_map_hasher<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::hash<CGImage *>,std::equal_to<CGImage *>,true>,std::__unordered_map_equal<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::equal_to<CGImage *>,std::hash<CGImage *>,true>,std::allocator<std::__hash_value_type<CGImage *,SKTexture * {__strong}>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::__unordered_map_hasher<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::hash<CGImage *>,std::equal_to<CGImage *>,true>,std::__unordered_map_equal<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::equal_to<CGImage *>,std::hash<CGImage *>,true>,std::allocator<std::__hash_value_type<CGImage *,SKTexture * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::__unordered_map_hasher<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::hash<CGImage *>,std::equal_to<CGImage *>,true>,std::__unordered_map_equal<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::equal_to<CGImage *>,std::hash<CGImage *>,true>,std::allocator<std::__hash_value_type<CGImage *,SKTexture * {__strong}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  id *v2;
  id *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (id *)*v2;

      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::__unordered_map_hasher<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::hash<CGImage *>,std::equal_to<CGImage *>,true>,std::__unordered_map_equal<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::equal_to<CGImage *>,std::hash<CGImage *>,true>,std::allocator<std::__hash_value_type<CGImage *,SKTexture * {__strong}>>>::find<CGImage *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::__unordered_map_hasher<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::hash<CGImage *>,std::equal_to<CGImage *>,true>,std::__unordered_map_equal<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::equal_to<CGImage *>,std::hash<CGImage *>,true>,std::allocator<std::__hash_value_type<CGImage *,SKTexture * {__strong}>>>::__emplace_unique_key_args<CGImage *,std::piecewise_construct_t const&,std::tuple<CGImage * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *i = *v23;
LABEL_38:
    *v23 = i;
    goto LABEL_39;
  }
  *i = *v15;
  *v15 = i;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1DC8E431C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CGImage *,SKTexture * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CGImage *,SKTexture * {__strong}>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,SKTexture * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKTexture * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKTexture * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKTexture * {__strong}>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void SKCVideoBackdropNode::SKCVideoBackdropNode(SKCVideoBackdropNode *this)
{
  _QWORD *v1;

  SKCVideoNode::SKCVideoNode(this);
  *v1 = off_1EA500288;
}

void SKCVideoBackdropNode::~SKCVideoBackdropNode(SKCVideoBackdropNode *this, double a2)
{
  SKCVideoNode::~SKCVideoNode(this, a2);
  JUMPOUT(0x1DF0CF560);
}

void SKCVideoBackdropNode::addRenderOps(float32x4_t *a1, uint64_t a2, _QWORD *a3)
{
  NSObject *v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  __CVBuffer *Height;
  size_t Width;
  void *v12;
  uint64_t v13;
  float v21;
  float v22;
  float v24;
  float v26;
  void *v27;
  unint64_t v28;
  int32x2_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  int16x8_t v38;
  unsigned __int32 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  unsigned int v63;
  __int128 v64;
  float v65;
  float v66;
  float v67;
  float v68;
  int8x16_t v69;
  std::string __str;
  _QWORD block[6];
  int v72;
  _OWORD v73[4];
  __int128 v74;
  __int128 v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v6 = a1[43].i64[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN20SKCVideoBackdropNode12addRenderOpsEP13SKCRenderInfoRKNSt3__110shared_ptrI18jet_command_bufferEE_block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = a1;
  block[5] = a2;
  dispatch_sync(v6, block);
  if (a1[37].i64[0] && a1[38].i64[0])
  {
    v7 = 0;
    v74 = xmmword_1DC922C58;
    v75 = unk_1DC922C68;
    v73[0] = xmmword_1DC922C80;
    v73[1] = unk_1DC922C90;
    v73[2] = xmmword_1DC922CA0;
    v73[3] = unk_1DC922CB0;
    v8.i64[0] = 0xBF000000BF000000;
    v8.i64[1] = 0xBF000000BF000000;
    do
    {
      v9 = vaddq_f32((float32x4_t)v73[v7], v8);
      v9.i64[0] = vaddq_f32(v9, v9).u64[0];
      v9.i64[1] = *((_QWORD *)&v73[v7] + 1);
      v73[v7++] = v9;
    }
    while (v7 != 4);
    Height = *(__CVBuffer **)(a1[43].i64[0] + 16);
    if (Height || (Height = (__CVBuffer *)a1[41].i64[0]) != 0)
    {
      Width = CVPixelBufferGetWidth(Height);
      Height = (__CVBuffer *)CVPixelBufferGetHeight(Height);
    }
    else
    {
      Width = 0;
    }
    objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "statusBarOrientation");

    switch(v13)
    {
      case 0:
      case 1:
        __asm { FMOV            V0.2S, #1.0; jumptable 00000001DC8E461C cases 0,1 }
        v64 = _Q0;
        *(_QWORD *)&v74 = _Q0;
        _D1 = 0x3F80000000000000;
        _D2 = 1065353216;
        v21 = 0.5;
        v22 = -0.5;
        _D0 = 0;
        v24 = -0.5;
        goto LABEL_13;
      case 2:
        *(_QWORD *)&_Q0 = 0;
        v64 = _Q0;
        *(_QWORD *)&v74 = 0;
        _D1 = 1065353216;
        _D2 = 0x3F80000000000000;
        v21 = -0.5;
        v22 = 0.5;
        __asm { FMOV            V0.2S, #1.0 }
        v24 = 0.5;
        goto LABEL_15;
      case 3:
        *(_QWORD *)&_Q0 = 0x3F80000000000000;
        v64 = _Q0;
        *(_QWORD *)&v74 = 0x3F80000000000000;
        _D0 = 1065353216;
        v24 = 0.5;
        v22 = -0.5;
        _D1 = 0;
        __asm { FMOV            V2.2S, #1.0 }
        v21 = -0.5;
LABEL_13:
        v26 = 0.5;
        goto LABEL_16;
      case 4:
        *(_QWORD *)&_Q0 = 1065353216;
        v64 = _Q0;
        *(_QWORD *)&v74 = 1065353216;
        _D0 = 0x3F80000000000000;
        v24 = -0.5;
        v22 = 0.5;
        __asm { FMOV            V1.2S, #1.0 }
        _D2 = 0;
        v21 = 0.5;
LABEL_15:
        v26 = -0.5;
LABEL_16:
        v66 = *(float *)&_D2;
        v67 = *(float *)&_D1;
        *((_QWORD *)&v74 + 1) = _D2;
        *(_QWORD *)&v75 = _D1;
        v68 = *(float *)&_D0;
        *((_QWORD *)&v75 + 1) = _D0;
        break;
      default:
        v66 = 1.0;
        v68 = 0.0;
        *(_QWORD *)&_Q0 = 0;
        v64 = _Q0;
        __asm { FMOV            V0.2S, #1.0 }
        v67 = *(float *)&_D0;
        v24 = -0.5;
        v22 = 0.5;
        v21 = 0.5;
        v26 = -0.5;
        break;
    }
    v69 = *(int8x16_t *)(a2 + 112);
    objc_msgSend(MEMORY[0x1E0CEA2F8], "sharedApplication", v64);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = objc_msgSend(v27, "statusBarOrientation");

    if (v28 >= 3)
      v29 = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL));
    else
      v29 = *(int32x2_t *)(a2 + 120);
    v30 = (float)v29.u32[0];
    v31 = (float)(unint64_t)Height * (float)v29.u32[1];
    v32 = (float)Width * v30;
    if (v31 <= v32)
    {
      if (v31 < v32)
      {
        v34 = v31 / v32;
        *(float *)&v74 = (float)((float)(v65 + -0.5) * v34) + 0.5;
        *((float *)&v74 + 2) = (float)((float)(v66 + -0.5) * v34) + 0.5;
        *(float *)&v75 = (float)((float)(v67 + -0.5) * v34) + 0.5;
        *((float *)&v75 + 2) = (float)((float)(v68 + -0.5) * v34) + 0.5;
      }
    }
    else
    {
      v33 = v32 / v31;
      *((float *)&v74 + 1) = (float)(v26 * v33) + 0.5;
      *((float *)&v74 + 3) = (float)(v24 * v33) + 0.5;
      *((float *)&v75 + 1) = (float)(v21 * v33) + 0.5;
      *((float *)&v75 + 3) = (float)(v22 * v33) + 0.5;
    }
    v35 = 0;
    v36 = v74;
    v74 = v75;
    *(_QWORD *)&v75 = *((_QWORD *)&v36 + 1);
    *((_QWORD *)&v75 + 1) = v36;
    v37 = *(_DWORD *)a2 >> 2;
    v38 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(a1[19], fminf(fmaxf(vmuls_lane_f32(*(float *)(a2 + 96), a1[19], 3) * a1[20].f32[1], 0.0), 1.0)), (float32x4_t)vdupq_n_s32(0x437F0000u)));
    *(int16x4_t *)v38.i8 = vmovn_s32((int32x4_t)v38);
    v39 = vmovn_s16(v38).u32[0];
    do
    {
      *(_OWORD *)(*(_QWORD *)(a2 + 24) + 16 * (v35 + *(_DWORD *)a2)) = v73[v35];
      *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * (v35 + *(_DWORD *)a2)) = *((_QWORD *)&v74 + v35);
      *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * (v35++ + *(_DWORD *)a2)) = v39;
    }
    while (v35 != 4);
    v40 = *a3;
    v41 = *(_QWORD *)(a2 + 280);
    v42 = (uint64_t *)(*a3 + 8);
    LODWORD(__str.__r_.__value_.__l.__data_) = 31;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v42, (int *)&__str);
    v43 = *(_QWORD *)(v40 + 16);
    *(_QWORD *)(v43 - 80) = v41;
    *(_OWORD *)(v43 - 64) = xmmword_1DC921850;
    *(_QWORD *)(v43 - 48) = 0x30000000FLL;
    v44 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__str, "a_position");
    v45 = *(_QWORD *)(a2 + 328);
    v72 = 5;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v44 + 8), &v72);
    v46 = *(_QWORD *)(v44 + 16);
    *(_QWORD *)(v46 - 80) = v45;
    std::string::operator=((std::string *)(v46 - 176), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v47 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__str, "a_color");
    v48 = *(_QWORD *)(a2 + 336);
    v72 = 5;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v47 + 8), &v72);
    v49 = *(_QWORD *)(v47 + 16);
    *(_QWORD *)(v49 - 80) = v48;
    std::string::operator=((std::string *)(v49 - 176), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v50 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__str, "a_tex_coord");
    v51 = *(_QWORD *)(a2 + 344);
    v72 = 5;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v50 + 8), &v72);
    v52 = *(_QWORD *)(v50 + 16);
    *(_QWORD *)(v52 - 80) = v51;
    std::string::operator=((std::string *)(v52 - 176), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v53 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture");
    v54 = a1[37].i64[0];
    v72 = 8;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v53 + 8), &v72);
    v55 = *(_QWORD *)(v53 + 16);
    *(_QWORD *)(v55 - 80) = v54;
    std::string::operator=((std::string *)(v55 - 176), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v56 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture2");
    v57 = a1[38].i64[0];
    v72 = 8;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v56 + 8), &v72);
    v58 = *(_QWORD *)(v56 + 16);
    *(_QWORD *)(v58 - 80) = v57;
    std::string::operator=((std::string *)(v58 - 176), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v59 = *a3;
    v60 = *(_QWORD *)(a2 + 400);
    LODWORD(__str.__r_.__value_.__l.__data_) = 4;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v59 + 8), (int *)&__str);
    v61 = *(_QWORD *)(v59 + 16);
    *(_QWORD *)(v61 - 80) = v60;
    *(_DWORD *)(v61 - 64) = 3;
    *(_DWORD *)(v61 - 60) = 6 * v37;
    *(_DWORD *)(v61 - 56) = 6;
    v62 = *(_DWORD **)(a2 + 664);
    v63 = 6 * v37 + 6;
    if (v62[43] > v63)
      v63 = v62[43];
    v62[43] = v63;
    ++v62[41];
    ++v62[37];
    *(_DWORD *)a2 += 4;
  }
}

void sub_1DC8E4B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void ___ZN20SKCVideoBackdropNode12addRenderOpsEP13SKCRenderInfoRKNSt3__110shared_ptrI18jet_command_bufferEE_block_invoke(uint64_t a1)
{
  SKCVideoNode::updateVideoFrame(*(SKCVideoNode **)(a1 + 32), *(SKCRenderInfo **)(a1 + 40));
}

uint64_t SKGetLinkedOnOrAfter()
{
  dyld_get_active_platform();
  return dyld_program_sdk_at_least();
}

uint64_t sk_get_info_plist_flag_is_set(NSString *a1)
{
  NSString *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "infoDictionary");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "objectForKey:", v1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v5 = objc_msgSend(v4, "BOOLValue");
  else
    v5 = 0;

  return v5;
}

void sub_1DC8E4C3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sk_get_debug_options(void)
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;

  if (sk_get_debug_options(void)::onceToken != -1)
    dispatch_once(&sk_get_debug_options(void)::onceToken, &__block_literal_global_8);
  v0 = (void *)sk_get_debug_options(void)::options;
  if (!sk_get_debug_options(void)::options)
  {
    objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "dictionaryForKey:", CFSTR("SKDefaults"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "mutableCopy");
    v4 = (void *)sk_get_debug_options(void)::options;
    sk_get_debug_options(void)::options = v3;

    if (!sk_get_debug_options(void)::options)
    {
      objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = (void *)sk_get_debug_options(void)::options;
      sk_get_debug_options(void)::options = v5;

    }
    v0 = (void *)sk_get_debug_options(void)::options;
  }
  return v0;
}

void sub_1DC8E4D2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___Z20sk_get_debug_optionsv_block_invoke()
{
  const char *v0;
  int out_token;

  out_token = 0;
  v0 = (const char *)objc_msgSend(CFSTR("SKDefaults_ReloadNotification"), "UTF8String");
  return notify_register_dispatch(v0, &out_token, MEMORY[0x1E0C80D38], &__block_literal_global_3_0);
}

void ___Z20sk_get_debug_optionsv_block_invoke_2()
{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "dictionaryForKey:", CFSTR("SKDefaults"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "mutableCopy");
  v2 = (void *)sk_get_debug_options(void)::options;
  sk_get_debug_options(void)::options = v1;

  if (!sk_get_debug_options(void)::options)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)sk_get_debug_options(void)::options;
    sk_get_debug_options(void)::options = v3;

  }
}

void sub_1DC8E4E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL sk_debug_option_exists(NSString *a1)
{
  NSString *v1;
  void *v2;
  void *v3;
  _BOOL8 v4;

  v1 = a1;
  sk_get_debug_options();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3 != 0;

  return v4;
}

void sub_1DC8E4E88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sk_debug_option_get_BOOL(NSString *a1)
{
  NSString *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  sk_get_debug_options();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    v4 = objc_msgSend(v3, "BOOLValue");
  else
    v4 = 0;

  return v4;
}

void sub_1DC8E4F10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sk_debug_option_get_int(NSString *a1)
{
  NSString *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  sk_get_debug_options();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    v4 = objc_msgSend(v3, "integerValue");
  else
    v4 = 0;

  return v4;
}

void sub_1DC8E4FA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

float sk_debug_option_get_float(NSString *a1)
{
  NSString *v1;
  void *v2;
  void *v3;
  float v4;
  float v5;

  v1 = a1;
  sk_get_debug_options();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v3, "floatValue");
    v5 = v4;
  }
  else
  {
    v5 = 0.0;
  }

  return v5;
}

void sub_1DC8E5048(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sk_debug_option_get_string(NSString *a1)
{
  NSString *v1;
  void *v2;
  void *v3;

  v1 = a1;
  sk_get_debug_options();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1DC8E50C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sk_debug_check_optional(void)
{
  uint64_t result;

  result = sk_debug_option_get_BOOL(CFSTR("enableAllDebugEvents"));
  enableAllDebugEvents = result;
  return result;
}

uint64_t sk_debug_get_optional(void)
{
  return enableAllDebugEvents;
}

id SKGetGraphicsPerformanceStatistics(void)
{
  double v0;
  io_registry_entry_t v1;
  mach_port_t v2;
  const __CFDictionary *v3;
  void *CFProperty;
  io_iterator_t existing;

  v0 = CACurrentMediaTime();
  if (v0 - *(double *)&_graphicsPerformanceStatisticsDictionaryQueryTime > 1.0)
  {
    v1 = _accelerator;
    if (!_accelerator)
    {
      existing = 0;
      v2 = *MEMORY[0x1E0CBBAB8];
      v3 = IOServiceMatching("IOAcceleratorES");
      if (!IOServiceGetMatchingServices(v2, v3, &existing))
        _accelerator = IOIteratorNext(existing);
      IOObjectRelease(existing);
      v1 = _accelerator;
    }
    CFProperty = (void *)IORegistryEntryCreateCFProperty(v1, CFSTR("PerformanceStatistics"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (CFProperty)
      objc_storeStrong((id *)&_graphicsPerformanceStatisticsDictionary, CFProperty);
    _graphicsPerformanceStatisticsDictionaryQueryTime = *(_QWORD *)&v0;

  }
  return (id)objc_msgSend((id)_graphicsPerformanceStatisticsDictionary, "copy");
}

id SKGetProcessorPerformanceStatistics(void)
{
  double v0;
  host_t v1;
  uint64_t v2;
  processor_info_array_t v3;
  float v4;
  float v5;
  float v6;
  unsigned int v7;
  float v8;
  unsigned int v9;
  unsigned int v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  mach_msg_type_number_t out_processor_infoCnt[2];
  processor_info_array_t out_processor_info;
  _QWORD v24[3];
  _QWORD v25[4];

  v25[3] = *MEMORY[0x1E0C80C00];
  v0 = CACurrentMediaTime();
  if (v0 - *(double *)&_processorPerformanceStatisticsDictionaryQueryTime > 1.0)
  {
    *(_QWORD *)out_processor_infoCnt = 0;
    out_processor_info = 0;
    v1 = MEMORY[0x1DF0CFA34]();
    host_processor_info(v1, 2, out_processor_infoCnt, &out_processor_info, &out_processor_infoCnt[1]);
    v2 = out_processor_infoCnt[0];
    if (out_processor_infoCnt[0])
    {
      v3 = out_processor_info + 2;
      v4 = 0.0;
      v5 = 0.0;
      v6 = 0.0;
      do
      {
        v7 = *(v3 - 1);
        v8 = v4 + (float)*(v3 - 2);
        v10 = *v3;
        v9 = v3[1];
        v3 += 4;
        v4 = v8 + (float)v9;
        v6 = v6 + (float)v7;
        v5 = v5 + (float)v10;
        --v2;
      }
      while (v2);
    }
    else
    {
      v6 = 0.0;
      v5 = 0.0;
      v4 = 0.0;
    }
    MEMORY[0x1DF0CFE48](*MEMORY[0x1E0C83DA0], out_processor_info, 4 * out_processor_infoCnt[1]);
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
    if (*(float *)&SKGetProcessorPerformanceStatistics(void)::lastUsr >= 0.0)
    {
      v14 = (float)(v5 + (float)(v6 + v4))
          - (float)((float)(*(float *)&SKGetProcessorPerformanceStatistics(void)::lastUsr
                          + *(float *)&SKGetProcessorPerformanceStatistics(void)::lastSys)
                  + *(float *)&SKGetProcessorPerformanceStatistics(void)::lastIdl);
      v15 = 0.0;
      if (v14 > 0.0)
        v15 = (float)(1.0 / v14) * 100.0;
      v11 = (float)(v4 - *(float *)&SKGetProcessorPerformanceStatistics(void)::lastUsr) * v15;
      v12 = (float)(v6 - *(float *)&SKGetProcessorPerformanceStatistics(void)::lastSys) * v15;
      v13 = (float)(v5 - *(float *)&SKGetProcessorPerformanceStatistics(void)::lastIdl) * v15;
    }
    SKGetProcessorPerformanceStatistics(void)::lastSys = LODWORD(v6);
    SKGetProcessorPerformanceStatistics(void)::lastIdl = LODWORD(v5);
    SKGetProcessorPerformanceStatistics(void)::lastUsr = LODWORD(v4);
    v24[0] = CFSTR("User CPU %");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", roundf(v11));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v25[0] = v16;
    v24[1] = CFSTR("System CPU %");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", roundf(v12));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v25[1] = v17;
    v24[2] = CFSTR("Idle CPU %");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", roundf(v13));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v25[2] = v18;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, v24, 3);
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = (void *)_processorPerformanceStatisticsDictionary;
    _processorPerformanceStatisticsDictionary = v19;

    _processorPerformanceStatisticsDictionaryQueryTime = *(_QWORD *)&v0;
  }
  return (id)_processorPerformanceStatisticsDictionary;
}

void sub_1DC8E5460(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void SKCParticleSystem::SKCParticleSystem(SKCParticleSystem *this, int a2)
{
  *(_QWORD *)this = &off_1EA5003E8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = (char *)this + 56;
  *((_QWORD *)this + 8) = (char *)this + 56;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 88) = 0;
  SKCParticleSystem::resize(this, a2);
}

void sub_1DC8E5504(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  char **v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  void *v9;

  v6 = v5;
  v7 = v3;
  std::__list_imp<SKCRenderSortInfo *>::clear(v6);
  v9 = *v7;
  if (*v7)
  {
    *(_QWORD *)(v2 + 40) = v9;
    operator delete(v9);
  }
  std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::destroy(v1, *v4);
  _Unwind_Resume(a1);
}

void SKCParticleSystem::resize(SKCParticleSystem *this, int a2)
{
  uint64_t v2;
  _QWORD v3[5];

  if (*((_DWORD *)this + 20) != a2)
  {
    v2 = MEMORY[0x1E0C809B0];
    *((_DWORD *)this + 20) = a2;
    v3[0] = v2;
    v3[1] = 3221225472;
    v3[2] = ___ZN17SKCParticleSystem6resizeEj_block_invoke;
    v3[3] = &__block_descriptor_40_e9_v16__0_v8l;
    v3[4] = this;
    SKCParticleSystem::enumerateSlices((uint64_t)this, v3);
  }
}

void SKCParticleSystem::update(SKCParticleSystem *this, float a2)
{
  char *v2;
  char *v3;
  SKCParticleUpdater *v6;
  void (**v7)(_QWORD, _QWORD, float);

  v2 = (char *)this + 56;
  v3 = (char *)*((_QWORD *)this + 8);
  if (v3 != (char *)this + 56)
  {
    do
    {
      v6 = (SKCParticleUpdater *)*((_QWORD *)v3 + 2);
      if (SKCParticleUpdater::getEnabled(v6))
      {
        SKCParticleUpdater::getUpdateBlock(v6);
        v7 = (void (**)(_QWORD, _QWORD, float))objc_claimAutoreleasedReturnValue();
        ((void (**)(_QWORD, SKCParticleSystem *, float))v7)[2](v7, this, a2);

      }
      v3 = (char *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
  }
}

void sub_1DC8E5620(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *SKCParticleSystem::addUpdater(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = operator new(0x18uLL);
  v5 = a1[7];
  a1 += 7;
  result[1] = a1;
  result[2] = a2;
  *result = v5;
  *(_QWORD *)(v5 + 8) = result;
  *a1 = result;
  ++a1[2];
  return result;
}

_QWORD *SKCParticleSystem::removeUpdater(SKCParticleSystem *this, SKCParticleUpdater *a2)
{
  SKCParticleUpdater *v3;

  v3 = a2;
  return std::list<SKCParticleUpdater *>::remove((uint64_t)this + 56, &v3);
}

_QWORD *std::list<SKCParticleUpdater *>::remove(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10[3];

  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 != (_QWORD *)a1)
  {
    do
    {
      v6 = (_QWORD *)v2[1];
      v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (_QWORD *)a1)
        {
          v8 = 1;
LABEL_8:
          v6 = (_QWORD *)a1;
        }
        else
        {
          while (1)
          {
            v7 = v6[2];
            v8 = v7 == v5;
            if (v7 != v5)
              break;
            v6 = (_QWORD *)v6[1];
            if (v6 == (_QWORD *)a1)
              goto LABEL_8;
          }
        }
        std::list<SKCAction *>::splice((uint64_t)v10, v10, a1, v2, v6);
        if (!v8)
          v6 = (_QWORD *)v6[1];
      }
      v2 = v6;
    }
    while (v6 != (_QWORD *)a1);
  }
  return std::__list_imp<SKCRenderSortInfo *>::clear(v10);
}

void sub_1DC8E5758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<SKCRenderSortInfo *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t SKCParticleSystem::getUpdaters(SKCParticleSystem *this)
{
  return (uint64_t)this + 56;
}

void SKCParticleSystem::enumerateSlices(uint64_t a1, void *a2)
{
  void (**v3)(_QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  std::string __p;
  uint64_t v10;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (_QWORD *)(a1 + 16);
  if (v4 != v5)
  {
    do
    {
      if (*((char *)v4 + 55) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v4[4], v4[5]);
      else
        __p = *(std::string *)(v4 + 4);
      v10 = v4[7];
      v3[2](v3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v6 = (_QWORD *)v4[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v4[2];
          v8 = *v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != v5);
  }

}

void sub_1DC8E5844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void SKCParticleSystem::compact(SKCParticleSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD v6[6];

  v4 = (char *)this + 32;
  v2 = *((_QWORD *)this + 4);
  v3 = *((_QWORD *)v4 + 1);
  if (v3 != v2)
  {
    v5 = (v3 - v2) >> 2;
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = ___ZN17SKCParticleSystem7compactEv_block_invoke;
    v6[3] = &__block_descriptor_48_e9_v16__0_v8l;
    v6[4] = this;
    v6[5] = v5;
    SKCParticleSystem::enumerateSlices((uint64_t)this, v6);
    *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
    *((_DWORD *)this + 21) -= v5;
  }
}

void SKCParticleSystem::addPatricles(SKCParticleSystem *this, int a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;

  v3 = *((_DWORD *)this + 20);
  v4 = *((_DWORD *)this + 21) + a2;
  if (v4 > v3)
  {
    if (*((_BYTE *)this + 88))
    {
      if (v4 <= 2 * v3)
        v5 = 2 * v3;
      else
        v5 = *((_DWORD *)this + 21) + a2;
      SKCParticleSystem::resize(this, v5);
    }
    else
    {
      v4 = *((_DWORD *)this + 20);
    }
  }
  *((_DWORD *)this + 21) = v4;
}

void SKCParticleSystem::addPatricles(SKCParticleSystem *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v7;
  unsigned int v8;
  int v9;

  v7 = *((_DWORD *)this + 20);
  v8 = *((_DWORD *)this + 21) + a2;
  if (v8 <= v7)
    goto LABEL_7;
  if (*((_BYTE *)this + 88))
  {
    if (v8 <= 2 * v7)
      v9 = 2 * v7;
    else
      v9 = *((_DWORD *)this + 21) + a2;
    SKCParticleSystem::resize(this, v9);
LABEL_7:
    if (!a4)
      goto LABEL_9;
    goto LABEL_8;
  }
  v8 = *((_DWORD *)this + 20);
  if (a4)
LABEL_8:
    *a4 = v8 - *((_DWORD *)this + 21);
LABEL_9:
  if (a3)
    *a3 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = v8;
}

void SKCParticleSystem::removePatricle(SKCParticleSystem *this, int a2)
{
  SKCParticleSystem::removePatricles(this, a2, 1);
}

void SKCParticleSystem::removePatricles(SKCParticleSystem *this, int a2, int a3)
{
  int v6;
  void **v7;
  _QWORD *v8;
  char *v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;

  if (a3 + a2 == *((_DWORD *)this + 21))
  {
    *((_DWORD *)this + 21) = a2;
  }
  else if (a3)
  {
    v6 = 0;
    v7 = (void **)((char *)this + 32);
    v8 = (_QWORD *)((char *)this + 48);
    v9 = (char *)*((_QWORD *)this + 5);
    do
    {
      v10 = v6 + a2;
      if ((unint64_t)v9 >= *v8)
      {
        v12 = (char *)*v7;
        v13 = (v9 - (_BYTE *)*v7) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
        v15 = *v8 - (_QWORD)v12;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 48, v16);
          v12 = (char *)*((_QWORD *)this + 4);
          v9 = (char *)*((_QWORD *)this + 5);
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[4 * v13];
        *(_DWORD *)v18 = v10;
        v11 = v18 + 4;
        while (v9 != v12)
        {
          v19 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        *((_QWORD *)this + 4) = v18;
        *((_QWORD *)this + 5) = v11;
        *((_QWORD *)this + 6) = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_DWORD *)v9 = v10;
        v11 = v9 + 4;
      }
      *((_QWORD *)this + 5) = v11;
      ++v6;
      v9 = v11;
    }
    while (v6 != a3);
  }
}

uint64_t SKCParticleSystem::setShouldGrow(uint64_t this, char a2)
{
  *(_BYTE *)(this + 88) = a2;
  return this;
}

uint64_t SKCParticleSystem::getShouldGrow(SKCParticleSystem *this)
{
  return *((unsigned __int8 *)this + 88);
}

uint64_t SKCParticleSystem::getSlice(uint64_t a1, const void **a2)
{
  uint64_t v3;

  v3 = std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::find<std::string>(a1 + 8, a2);
  if (a1 + 16 == v3)
    return 0;
  else
    return *(_QWORD *)(v3 + 56);
}

void SKCParticleSystem::addSlice(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t **v7;
  std::string __p;
  std::string v9;
  std::string *p_p;

  v6 = operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v9 = *(std::string *)a2;
  SKCDataSlice::SKCDataSlice(v6, &v9, a3);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  SKCDataSlice::resize((void **)v6, *(_DWORD *)(a1 + 80));
  v7 = (uint64_t **)(a1 + 8);
  if (*(char *)(v6 + 47) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 24), *(_QWORD *)(v6 + 32));
  else
    __p = *(std::string *)(v6 + 24);
  p_p = &__p;
  *((_QWORD *)std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p)+ 7) = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1DC8E5D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  MEMORY[0x1DF0CF560](v21, 0x1093C407A94CBE3);
  _Unwind_Resume(a1);
}

uint64_t SKCParticleSystem::removeSlice(uint64_t a1, const void **a2)
{
  return std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::__erase_unique<std::string>((uint64_t **)(a1 + 8), a2);
}

void SKCParticleSystem::~SKCParticleSystem(SKCParticleSystem *this)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  BOOL v8;
  void *v9;
  std::string __p;
  uint64_t v11;

  *(_QWORD *)this = &off_1EA5003E8;
  v2 = (char *)this + 16;
  v3 = (char *)this + 8;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (v4 != (_QWORD *)((char *)this + 16))
  {
    do
    {
      if (*((char *)v4 + 55) < 0)
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v4[4], v4[5]);
      else
        __p = *(std::string *)(v4 + 4);
      v5 = v4[7];
      v11 = v5;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v6 = (char *)v4[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)v4[2];
          v8 = *(_QWORD *)v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != v2);
  }
  std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::destroy((uint64_t)v3, *((char **)this + 2));
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = v2;
  std::__list_imp<SKCRenderSortInfo *>::clear((_QWORD *)this + 7);
  v9 = (void *)*((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 5) = v9;
    operator delete(v9);
  }
  std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::destroy((uint64_t)v3, *((char **)this + 2));
}

{
  SKCParticleSystem::~SKCParticleSystem(this);
  JUMPOUT(0x1DF0CF560);
}

void std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

uint64_t std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

_OWORD *std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t v3;

  v3 = std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::erase(a1, v3);
  return 1;
}

uint64_t *std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<SKCParticleSystem *>::__remove_node_pointer(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  operator delete((void *)a2);
  return v3;
}

uint64_t SKSetPrefersLowPowerGPUs(uint64_t result)
{
  _SK_PrefersLowPowerGPUs = result;
  return result;
}

uint64_t SKGetPrefersLowPowerGPUs()
{
  if (_SK_PrefersLowPowerGPUs)
    return 1;
  else
    return sk_get_info_plist_flag_is_set(CFSTR("PrefersLowPowerGPU"));
}

uint64_t SKSetPrefersFloatFramebuffer(uint64_t result)
{
  _SK_PrefersFloatFramebuffer = result;
  return result;
}

uint64_t SKGetPrefersFloatFramebuffer()
{
  return _SK_PrefersFloatFramebuffer;
}

uint64_t SKGetPrefersOpenGL()
{
  if ((SKGetLinkedOnOrAfter() & 1) != 0)
    return 0;
  if (_SK_PrefersOpenGL)
    return 1;
  return sk_get_info_plist_flag_is_set(CFSTR("PrefersOpenGL"));
}

uint64_t SKSetPrefersOpenGL(uint64_t result)
{
  _SK_PrefersOpenGL = result;
  return result;
}

uint64_t SKGetUserProcessorUtilizationPercent()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  SKGetProcessorPerformanceStatistics();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "objectForKey:", CFSTR("User CPU %"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (int)objc_msgSend(v2, "intValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1DC8E6218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t SKGetSystemProcessorUtilizationPercent()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  SKGetProcessorPerformanceStatistics();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "objectForKey:", CFSTR("System CPU %"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (int)objc_msgSend(v2, "intValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1DC8E6298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t SKGetIdleProcessorUtilizationPercent()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  SKGetProcessorPerformanceStatistics();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "objectForKey:", CFSTR("Idle CPU %"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (int)objc_msgSend(v2, "intValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1DC8E6318(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t SKGetGraphicsDeviceUtilizationPercent()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  SKGetGraphicsPerformanceStatistics();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "objectForKey:", CFSTR("Device Utilization %"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (int)objc_msgSend(v2, "intValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1DC8E6398(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t SKGetGraphicsRendererUtilizationPercent()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  SKGetGraphicsPerformanceStatistics();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "objectForKey:", CFSTR("Renderer Utilization %"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (int)objc_msgSend(v2, "intValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1DC8E6418(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t SKGetGraphicsTilerUtilizationPercent()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  SKGetGraphicsPerformanceStatistics();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    objc_msgSend(v0, "objectForKey:", CFSTR("Tiler Utilization %"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (int)objc_msgSend(v2, "intValue");

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1DC8E6498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double SKGetCoreAnimationFPS()
{
  int FrameCounter;
  double v1;
  float v2;
  float v3;
  int v4;

  FrameCounter = CARenderServerGetFrameCounter();
  v1 = CACurrentMediaTime();
  if (v1 - *(double *)&SKGetCoreAnimationFPS::oldtime <= 0.0166666667)
  {
    v4 = SKGetCoreAnimationFPS::fps;
  }
  else
  {
    if (SKGetCoreAnimationFPS::oldframe)
    {
      v2 = v1 - *(double *)&SKGetCoreAnimationFPS::oldtime;
      v3 = (float)(FrameCounter - SKGetCoreAnimationFPS::oldframe) / v2;
      if (v3 > 60.0)
        v3 = 60.0;
    }
    else
    {
      v3 = 0.0;
    }
    *(float *)&v4 = ceilf(v3 * 10.0) / 10.0;
    SKGetCoreAnimationFPS::fps = v4;
    SKGetCoreAnimationFPS::oldframe = FrameCounter;
    SKGetCoreAnimationFPS::oldtime = *(_QWORD *)&v1;
  }
  return *(float *)&v4;
}

void SKSetResourceBundle(id obj)
{
  objc_storeStrong((id *)&_SKResourceBundle, obj);
}

id SKGetResourceBundle()
{
  if (_SKResourceBundle)
    return (id)_SKResourceBundle;
  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  return (id)objc_claimAutoreleasedReturnValue();
}

void SKGLPrintFramebufferStatus()
{
  GLenum v0;

  v0 = glCheckFramebufferStatus(0x8D40u) - 36053;
  if (v0 > 8)
    NSLog(CFSTR("GL_FRAMEBUFFER_STATUS_UNKNOWN"));
  else
    NSLog(&off_1EA500450[v0]->isa);
}

void SKGLPrintInteger(NSString *a1, GLenum a2)
{
  NSString *v3;
  GLint params;

  v3 = a1;
  params = 0;
  glGetIntegerv(a2, &params);
  NSLog(CFSTR("%@%d"), v3, params);

}

void sub_1DC8E663C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKGLPrintFloat(NSString *a1, GLenum a2)
{
  NSString *v3;
  GLfloat params;

  v3 = a1;
  params = 0.0;
  glGetFloatv(a2, &params);
  NSLog(CFSTR("%@%f"), v3, params);

}

void sub_1DC8E66A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKGLPrintBoolean(NSString *a1, GLenum a2)
{
  NSString *v3;
  GLBOOLean params;

  v3 = a1;
  params = 0;
  glGetBooleanv(a2, &params);
  NSLog(CFSTR("%@%d"), v3, params);

}

void sub_1DC8E670C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKGLPrintVertexAttribInteger(NSString *a1, GLuint a2, GLenum a3)
{
  NSString *v5;
  const __CFString *v6;
  GLint params[4];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  glGetVertexAttribiv(a2, a3, params);
  if (a3 == 34341)
  {
    if ((params[0] - 5120) > 0xC)
      v6 = CFSTR("GL_TYPE_UNKNOWN");
    else
      v6 = off_1EA500498[params[0] - 5120];
    NSLog(CFSTR("%@%@"), v5, v6);
  }
  else if (a3 != 34342)
  {
    NSLog(CFSTR("%@%d"), v5, params[0]);
  }

}

void sub_1DC8E6800(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKGLPrintVertexAttrib(uint64_t a1)
{
  GLuint v1;

  v1 = a1;
  NSLog(CFSTR("SKGLPrintVertexAttrib: (%d) {"), a1);
  SKGLPrintVertexAttribInteger(CFSTR("\t GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: "), v1, 0x889Fu);
  SKGLPrintVertexAttribInteger(CFSTR("\t GL_VERTEX_ATTRIB_ARRAY_ENABLED: "), v1, 0x8622u);
  SKGLPrintVertexAttribInteger(CFSTR("\t GL_VERTEX_ATTRIB_ARRAY_SIZE: "), v1, 0x8623u);
  SKGLPrintVertexAttribInteger(CFSTR("\t GL_VERTEX_ATTRIB_ARRAY_STRIDE: "), v1, 0x8624u);
  SKGLPrintVertexAttribInteger(CFSTR("\t GL_VERTEX_ATTRIB_ARRAY_TYPE: "), v1, 0x8625u);
  SKGLPrintVertexAttribInteger(CFSTR("\t GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: "), v1, 0x886Au);
  NSLog(CFSTR("};"));
}

void SKGLPrintState()
{
  NSLog(CFSTR("SKGLPrintState: {"));
  SKGLPrintInteger(CFSTR("\t GL_CURRENT_PROGRAM: "), 0x8B8Du);
  SKGLPrintInteger(CFSTR("\t GL_ARRAY_BUFFER_BINDING: "), 0x8894u);
  SKGLPrintInteger(CFSTR("\t GL_ELEMENT_ARRAY_BUFFER_BINDING: "), 0x8895u);
  NSLog(CFSTR("};"));
}

void SKGLPrintError()
{
  GLenum Error;

  Error = glGetError();
  switch(Error)
  {
    case 0x500u:
      NSLog(CFSTR("GL_INVALID_ENUM"));
      break;
    case 0x501u:
      NSLog(CFSTR("GL_INVALID_VALUE"));
      break;
    case 0x502u:
    case 0x505u:
    case 0x506u:
      NSLog(CFSTR("GL_INVALID_OPERATION"));
      break;
    case 0x503u:
    case 0x504u:
      goto LABEL_5;
    default:
      if (Error)
LABEL_5:
        NSLog(CFSTR("GL_ERROR_UNKNOWN"));
      else
        NSLog(CFSTR("GL_NO_ERROR"));
      break;
  }
}

id SKGetVersionString()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d.%d"), 51, 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.%d"), v0, 3);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_1DC8E6A24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8E6B40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8E6B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8E6C90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8E6D28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8E6DB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8E6E04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8E6E70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8E6EE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8E6F60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t SKCParticleUpdater::SKCParticleUpdater(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = MEMORY[0x1DF0CFCB0](a2);
  *(_BYTE *)(a1 + 8) = 1;
  return a1;
}

void SKCParticleUpdater::setUpdateBlock(void **a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = MEMORY[0x1DF0CFCB0](a2);
  v4 = *a1;
  *a1 = (void *)v3;

}

id SKCParticleUpdater::getUpdateBlock(SKCParticleUpdater *this)
{
  return (id)MEMORY[0x1DF0CFCB0](*(_QWORD *)this);
}

uint64_t SKCParticleUpdater::setEnabled(uint64_t this, char a2)
{
  *(_BYTE *)(this + 8) = a2;
  return this;
}

uint64_t SKCParticleUpdater::getEnabled(SKCParticleUpdater *this)
{
  return *((unsigned __int8 *)this + 8);
}

void SKCSceneNode::SKCSceneNode(SKCSceneNode *this)
{
  uint64_t v2;
  SKCSpriteNode *v3;
  SKCNode *v4;
  __n128 v5;
  SKCSpriteNode *v6;
  SKCNode *v7;
  __int128 v8;

  SKCEffectNode::SKCEffectNode(this);
  *(_QWORD *)v2 = off_1EA500510;
  *(_QWORD *)(v2 + 728) = 0;
  *(_BYTE *)(v2 + 736) = 0;
  *(_BYTE *)(v2 + 704) = 0;
  *(_QWORD *)(v2 + 352) = 0;
  *(_QWORD *)(v2 + 360) = 0;
  v3 = (SKCSpriteNode *)operator new();
  SKCSpriteNode::SKCSpriteNode(v3);
  *((_QWORD *)this + 93) = v3;
  v8 = xmmword_1DC9217E0;
  (*(void (**)(SKCSpriteNode *, __int128 *))(*(_QWORD *)v3 + 184))(v3, &v8);
  v4 = (SKCNode *)*((_QWORD *)this + 93);
  v8 = 0uLL;
  SKCNode::setAnchor(v4, &v8);
  v5.n128_u32[0] = 0;
  SKCNode::setTranslation(*((SKCNode **)this + 93), v5, 0.0);
  *(_QWORD *)(*((_QWORD *)this + 93) + 80) = this;
  v6 = (SKCSpriteNode *)operator new();
  SKCSpriteNode::SKCSpriteNode(v6);
  *((_QWORD *)this + 94) = v6;
  v8 = xmmword_1DC9217E0;
  (*(void (**)(SKCSpriteNode *, __int128 *))(*(_QWORD *)v6 + 184))(v6, &v8);
  v7 = (SKCNode *)*((_QWORD *)this + 94);
  v8 = xmmword_1DC922D00;
  SKCNode::setAnchor(v7, &v8);
  *(_QWORD *)(*((_QWORD *)this + 94) + 80) = this;
  *((_QWORD *)this + 95) = 0;
}

void sub_1DC8E7204(_Unwind_Exception *a1)
{
  id *v1;

  SKCEffectNode::~SKCEffectNode(v1);
  _Unwind_Resume(a1);
}

void SKCSceneNode::~SKCSceneNode(SKCSceneNode *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1EA500510;
  v2 = *((_QWORD *)this + 93);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
  v3 = *((_QWORD *)this + 94);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3);
  v4 = *((_QWORD *)this + 95);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4);
  SKCEffectNode::~SKCEffectNode((id *)this);
}

{
  SKCSceneNode::~SKCSceneNode(this);
  JUMPOUT(0x1DF0CF560);
}

double SKCSceneNode::getBoundingBox(float32x4_t *this)
{
  float32x4_t v1;
  double result;

  v1.i64[0] = 0x3F0000003F000000;
  v1.i64[1] = 0x3F0000003F000000;
  *(_QWORD *)&result = vmulq_f32(vsubq_f32(v1, this[22]), this[21]).u64[0];
  return result;
}

__n128 SKCSceneNode::getTransformMatrix(SKCSceneNode *this)
{
  return *(__n128 *)MEMORY[0x1E0C83FF0];
}

double SKCSceneNode::getInverseTransformMatrix(SKCSceneNode *this)
{
  double result;
  simd_float4x4 v2;

  *(double *)v2.columns[0].i64 = (*(double (**)(SKCSceneNode *))(*(_QWORD *)this + 104))(this);
  *(_QWORD *)&result = (unint64_t)__invert_f4(v2);
  return result;
}

void SKCSceneNode::matrixForDestination(SKCSceneNode *this, double a2, float a3)
{
  simd_float4 v4;
  simd_float4 v5;
  simd_float4 v6;
  simd_float4 v7;
  float32x4_t AABB;
  void *v9;
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  SKCNode *v20;
  float32x4_t v21;
  float32_t v22;
  unsigned int v23;
  unsigned int v24;
  float v25;
  uint64_t v26;
  float v27;
  __int128 v28;
  float32x2_t v29;
  __int128 v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  float v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  float v38;
  __int128 v39;
  __int128 v40;
  float v41;
  float v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  _OWORD *v49;
  float32x4_t v50;
  float32x4_t v51;
  simd_float4 v52;
  float32x2_t v53;
  simd_float4 v54;
  simd_float4 v55;
  simd_float4 v56;
  float32x4_t v57;
  float32x4_t v58;
  __n128 ConversionMatrixFromWorld;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  float32x4_t v65;
  simd_float4 v66;
  simd_float4 v67;
  simd_float4 v68;
  uint64_t v69;
  float32x2_t v70;
  float32x4_t v71;
  float v72;
  float v73;
  __int128 v74;
  float32x4_t v75;
  __int128 v76;
  float32x4_t v77;
  __n128 v78;
  float32x4_t v79;
  simd_float4 v81;
  float32x4_t v82;
  simd_float4x4 v83;
  simd_float4x4 v84;

  v78.n128_f64[0] = a2;
  *(double *)v4.i64 = (*(double (**)(SKCSceneNode *))(*(_QWORD *)this + 120))(this);
  v84.columns[0] = v4;
  v84.columns[1] = v5;
  v84.columns[2] = v6;
  v84.columns[3] = v7;
  AABB = SKCBoundingBoxGetAABB(&v84);
  v9 = (void *)*((_QWORD *)this + 1);
  if (v9)
  {
    v10 = v9;
    objc_msgSend(v10, "visibleRect");
    v12 = v11;
    objc_msgSend(v10, "visibleRect");
    v14 = v13;
    objc_msgSend(v10, "visibleRect");
    v16 = v15;
    objc_msgSend(v10, "visibleRect");
    v18 = v17;
    objc_msgSend(v10, "camera");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = (SKCNode *)objc_msgSend(v19, "_backingNode");
    v21.f32[0] = v12;
    v22 = v14;
    *(float *)&v23 = v16;
    *(float *)&v24 = v18;
    v21.f32[1] = v22;
    v21.i64[1] = __PAIR64__(v24, v23);
    v71 = v21;

    AABB = v71;
  }
  else
  {
    v20 = 0;
  }
  v25 = v78.n128_f32[0] / a3;
  v26 = AABB.i64[1];
  v27 = AABB.f32[1];
  *(_QWORD *)&v28 = AABB.i64[0];
  *((_QWORD *)&v28 + 1) = 3304718336;
  v29 = (float32x2_t)vextq_s8((int8x16_t)AABB, (int8x16_t)AABB, 8uLL).u64[0];
  *(float32x2_t *)&v30 = vadd_f32(*(float32x2_t *)AABB.f32, v29);
  *((_QWORD *)&v30 + 1) = 1157234688;
  v31 = *((_QWORD *)this + 91);
  v32 = AABB.f32[2] / AABB.f32[3];
  v70 = v29;
  v74 = v30;
  v76 = v28;
  if (v31 == 1)
  {
    v73 = AABB.f32[0];
    SKCNode::setHidden(*((SKCNode **)this + 93), 1);
    SKCNode::setHidden(*((SKCNode **)this + 94), 1);
    if (v25 >= v32)
    {
      v41 = v27 + (float)(*((float *)&v26 + 1) * 0.5);
      v40 = v74;
      v39 = v76;
      *((float *)&v39 + 1) = v41 - (float)((float)(*(float *)&v26 / v25) * 0.5);
      *((float *)&v40 + 1) = v41 + (float)((float)(*(float *)&v26 / v25) * 0.5);
    }
    else
    {
      v40 = v74;
      v38 = v73 + (float)(*(float *)&v26 * 0.5);
      v39 = v76;
      *(float *)&v39 = v38 - (float)((float)(v25 * *((float *)&v26 + 1)) * 0.5);
      *(float *)&v40 = v38 + (float)((float)(v25 * *((float *)&v26 + 1)) * 0.5);
    }
  }
  else
  {
    if (v31 == 2 && (COERCE_UNSIGNED_INT(v25 - v32) & 0x60000000) != 0)
    {
      v72 = AABB.f32[0];
      SKCNode::setHidden(*((SKCNode **)this + 93), 0);
      SKCNode::setHidden(*((SKCNode **)this + 94), 0);
      SKCNode::setTranslation(*((SKCNode **)this + 94), v78, a3);
      v33 = *((_QWORD *)this + 93);
      if (v25 <= v32)
      {
        v42 = v27 + (float)(*((float *)&v26 + 1) * 0.5);
        v43 = v76;
        *((float *)&v43 + 1) = v42 + (float)((float)(*(float *)&v26 / v25) * -0.5);
        v76 = v43;
        v44 = v74;
        *((float *)&v44 + 1) = v42 + (float)((float)(*(float *)&v26 / v25) * 0.5);
        v74 = v44;
        v81 = (simd_float4)__PAIR64__((float)((float)((float)(*((float *)&v26 + 1) * -0.5)+ (float)((float)(*(float *)&v26 / v25) * 0.5))/ (float)(*((float *)&v44 + 1)- (float)(v42 + (float)((float)(*(float *)&v26 / v25) * -0.5))))* a3, v78.n128_u32[0]);
        v84.columns[0] = v81;
      }
      else
      {
        v34 = v72 + (float)(*(float *)&v26 * 0.5);
        v35 = v76;
        *(float *)&v35 = v34 + (float)((float)(v25 * *((float *)&v26 + 1)) * -0.5);
        v76 = v35;
        v36 = v74;
        *(float *)&v36 = v34 + (float)((float)(v25 * *((float *)&v26 + 1)) * 0.5);
        v74 = v36;
        *(float *)&v37 = (float)((float)((float)(*(float *)&v26 * -0.5)
                                       + (float)((float)(v25 * *((float *)&v26 + 1)) * 0.5))
                               / (float)(*(float *)&v36
                                       - (float)(v34 + (float)((float)(v25 * *((float *)&v26 + 1)) * -0.5))))
                       * v78.n128_f32[0];
        *((float *)&v37 + 1) = a3;
        v81 = (simd_float4)v37;
        v84.columns[0] = (simd_float4)v37;
      }
      SKCNode::setSize(v33, &v84);
      v45 = *((_QWORD *)this + 94);
      v84.columns[0] = v81;
      SKCNode::setSize(v45, &v84);
    }
    else
    {
      SKCNode::setHidden(*((SKCNode **)this + 93), 1);
      SKCNode::setHidden(*((SKCNode **)this + 94), 1);
    }
    v40 = v74;
    v39 = v76;
  }
  v46 = 0;
  if (*((float *)&v40 + 2) >= *((float *)&v39 + 2))
    v47 = *((float *)&v40 + 2);
  else
    v47 = *((float *)&v39 + 2);
  if (*((float *)&v40 + 2) >= *((float *)&v39 + 2))
    v48 = *((float *)&v39 + 2);
  else
    v48 = *((float *)&v40 + 2);
  v49 = (_OWORD *)MEMORY[0x1E0C83FF0];
  v50 = *(float32x4_t *)MEMORY[0x1E0C83FF0];
  v51 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
  v57 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32);
  v58 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
  v52 = (simd_float4)v57;
  v52.f32[2] = -2.0 / (float)(v47 - v48);
  v53 = vsub_f32(*(float32x2_t *)&v40, *(float32x2_t *)&v39);
  v54 = *(simd_float4 *)MEMORY[0x1E0C83FF0];
  v54.f32[0] = 2.0 / v53.f32[0];
  v55 = (simd_float4)v51;
  v55.f32[1] = 2.0 / v53.f32[1];
  *(float32x2_t *)v56.f32 = vdiv_f32(vneg_f32(vadd_f32(*(float32x2_t *)&v40, *(float32x2_t *)&v39)), v53);
  v56.i32[3] = vextq_s8(*(int8x16_t *)&v58, *(int8x16_t *)&v58, 8uLL).i32[1];
  v56.f32[2] = (float)-(float)(v47 + v48) / (float)(v47 - v48);
  v57.i32[2] = 0.5;
  v58.i32[2] = 0.5;
  v83.columns[0] = v54;
  v83.columns[1] = v55;
  v83.columns[2] = v52;
  v83.columns[3] = v56;
  do
  {
    v84.columns[v46] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v50, COERCE_FLOAT(*(_OWORD *)&v83.columns[v46])), v51, *(float32x2_t *)v83.columns[v46].f32, 1), v57, (float32x4_t)v83.columns[v46], 2), v58, (float32x4_t)v83.columns[v46], 3);
    ++v46;
  }
  while (v46 != 4);
  if (v20)
  {
    v75 = (float32x4_t)v84.columns[3];
    v77 = (float32x4_t)v84.columns[2];
    v79 = (float32x4_t)v84.columns[1];
    v82 = (float32x4_t)v84.columns[0];
    ConversionMatrixFromWorld = SKCNode::getConversionMatrixFromWorld(v20);
    v60 = 0;
    *(float32x2_t *)v65.f32 = vmul_f32(v70, vsub_f32((float32x2_t)0x3F0000003F000000, *(float32x2_t *)((char *)this + 352)));
    v61 = *(float32x4_t *)v49;
    v62 = *((float32x4_t *)v49 + 1);
    v63 = *((float32x4_t *)v49 + 2);
    v64 = *((int8x16_t *)v49 + 3);
    v64.i32[2] = 0;
    v65.i64[1] = vextq_s8(v64, v64, 8uLL).u64[0];
    v83.columns[0] = (simd_float4)ConversionMatrixFromWorld;
    v83.columns[1] = v66;
    v83.columns[2] = v67;
    v83.columns[3] = v68;
    do
    {
      v84.columns[v60] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v61, COERCE_FLOAT(*(_OWORD *)&v83.columns[v60])), v62, *(float32x2_t *)v83.columns[v60].f32, 1), v63, (float32x4_t)v83.columns[v60], 2), v65, (float32x4_t)v83.columns[v60], 3);
      ++v60;
    }
    while (v60 != 4);
    v69 = 0;
    v83 = v84;
    do
    {
      v84.columns[v69] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v82, COERCE_FLOAT(*(_OWORD *)&v83.columns[v69])), v79, *(float32x2_t *)v83.columns[v69].f32, 1), v77, (float32x4_t)v83.columns[v69], 2), v75, (float32x4_t)v83.columns[v69], 3);
      ++v69;
    }
    while (v69 != 4);
  }
}

void sub_1DC8E77E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void SKCSceneNode::getCropGroup(SKCSceneNode *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v4 = operator new();
  *(_QWORD *)v4 = &off_1EA4FE720;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = v4 + 32;
  *(_QWORD *)(v4 + 40) = v4 + 32;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = v4 + 56;
  *(_QWORD *)(v4 + 64) = v4 + 56;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_QWORD *)(v4 + 120) = 0;
  v5 = (_OWORD *)MEMORY[0x1E0C83FF0];
  v6 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
  *(_OWORD *)(v4 + 160) = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 32);
  *(_OWORD *)(v4 + 176) = v6;
  v7 = v5[1];
  *(_OWORD *)(v4 + 128) = *v5;
  *(_OWORD *)(v4 + 144) = v7;
  *(_BYTE *)(v4 + 192) = 0;
  std::shared_ptr<SKCRenderSortGroup>::shared_ptr[abi:ne180100]<SKCRenderSortGroup,void>(a2, v4);
  v8 = (_QWORD *)*a2;
  v9 = *((_QWORD *)this + 93);
  v10 = *(_QWORD **)(*a2 + 16);
  v11 = *(_QWORD *)(*a2 + 24);
  if ((unint64_t)v10 >= v11)
  {
    v13 = v8[1];
    v14 = ((uint64_t)v10 - v13) >> 3;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v15 = v11 - v13;
    v16 = v15 >> 2;
    if (v15 >> 2 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(*a2 + 24, v17);
    else
      v18 = 0;
    v19 = &v18[8 * v14];
    v20 = &v18[8 * v17];
    *(_QWORD *)v19 = v9;
    v12 = v19 + 8;
    v22 = (char *)v8[1];
    v21 = (char *)v8[2];
    if (v21 != v22)
    {
      do
      {
        v23 = *((_QWORD *)v21 - 1);
        v21 -= 8;
        *((_QWORD *)v19 - 1) = v23;
        v19 -= 8;
      }
      while (v21 != v22);
      v21 = (char *)v8[1];
    }
    v8[1] = v19;
    v8[2] = v12;
    v8[3] = v20;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *v10 = v9;
    v12 = v10 + 1;
  }
  v8[2] = v12;
  v24 = (_QWORD *)*a2;
  v25 = *((_QWORD *)this + 94);
  v26 = *(_QWORD **)(*a2 + 16);
  v27 = *(_QWORD *)(*a2 + 24);
  if ((unint64_t)v26 >= v27)
  {
    v29 = v24[1];
    v30 = ((uint64_t)v26 - v29) >> 3;
    if ((unint64_t)(v30 + 1) >> 61)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v31 = v27 - v29;
    v32 = v31 >> 2;
    if (v31 >> 2 <= (unint64_t)(v30 + 1))
      v32 = v30 + 1;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
      v33 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v33 = v32;
    if (v33)
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(*a2 + 24, v33);
    else
      v34 = 0;
    v35 = &v34[8 * v30];
    v36 = &v34[8 * v33];
    *(_QWORD *)v35 = v25;
    v28 = v35 + 8;
    v38 = (char *)v24[1];
    v37 = (char *)v24[2];
    if (v37 != v38)
    {
      do
      {
        v39 = *((_QWORD *)v37 - 1);
        v37 -= 8;
        *((_QWORD *)v35 - 1) = v39;
        v35 -= 8;
      }
      while (v37 != v38);
      v37 = (char *)v24[1];
    }
    v24[1] = v35;
    v24[2] = v28;
    v24[3] = v36;
    if (v37)
      operator delete(v37);
  }
  else
  {
    *v26 = v25;
    v28 = v26 + 1;
  }
  v24[2] = v28;
}

void sub_1DC8E7A38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SKCSceneNode::notifyDirtyState(SKCSceneNode *this)
{
  id v2;

  if (*((_BYTE *)this + 736))
  {
    *((_BYTE *)this + 736) = 0;
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v2 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "postNotificationName:object:", CFSTR("kC3DSceneDidUpdateNotification"), *((_QWORD *)this + 1));

  }
}

void sub_1DC8E7AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SKCSceneNode::setBackgroundFromPixelBuffer(SKCSceneNode *this, CVPixelBufferRef texture)
{
  SKCVideoNode *v4;
  SKCVideoBackdropNode *v5;
  unint64_t v6;
  SKCVideoBackdropNode **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  SKCVideoBackdropNode **v15;
  char *v16;
  char *v17;
  char *v18;
  SKCVideoBackdropNode *v19;
  SKCNode *v20;

  if (texture)
  {
    v4 = (SKCVideoNode *)*((_QWORD *)this + 95);
    if (!v4)
    {
      v5 = (SKCVideoBackdropNode *)operator new();
      SKCVideoBackdropNode::SKCVideoBackdropNode(v5);
      v6 = *((_QWORD *)this + 16);
      *((_QWORD *)this + 95) = v5;
      v7 = (SKCVideoBackdropNode **)*((_QWORD *)this + 15);
      if ((unint64_t)v7 >= v6)
      {
        v9 = *((_QWORD *)this + 14);
        v10 = ((uint64_t)v7 - v9) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
        v11 = v6 - v9;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)this + 128, v13);
        else
          v14 = 0;
        v15 = (SKCVideoBackdropNode **)&v14[8 * v10];
        v16 = &v14[8 * v13];
        *v15 = v5;
        v8 = v15 + 1;
        v18 = (char *)*((_QWORD *)this + 14);
        v17 = (char *)*((_QWORD *)this + 15);
        if (v17 != v18)
        {
          do
          {
            v19 = (SKCVideoBackdropNode *)*((_QWORD *)v17 - 1);
            v17 -= 8;
            *--v15 = v19;
          }
          while (v17 != v18);
          v17 = (char *)*((_QWORD *)this + 14);
        }
        *((_QWORD *)this + 14) = v15;
        *((_QWORD *)this + 15) = v8;
        *((_QWORD *)this + 16) = v16;
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v7 = v5;
        v8 = v7 + 1;
      }
      *((_QWORD *)this + 15) = v8;
      v20 = (SKCNode *)*((_QWORD *)this + 95);
      *((_QWORD *)v20 + 10) = this;
      SKCNode::setZTranslation(v20, -100.0);
      v4 = (SKCVideoNode *)*((_QWORD *)this + 95);
    }
    SKCVideoNode::setNextVideoFrame(v4, texture);
    SKCNode::setDirty(this);
    SKCNode::recomputeFlags(this, 1);
  }
}

void sub_1DC8E7C2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0CF560](v1, 0x10A1C405FC3EF92);
  _Unwind_Resume(a1);
}

void sub_1DC8E7CCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0CF560](v1, 0x10A1C409109DBC5);
  _Unwind_Resume(a1);
}

void sub_1DC8E7E34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8E7F00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8E7F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8E80BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8E81EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8E82F0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1081C40E99573A4);

  _Unwind_Resume(a1);
}

void sub_1DC8E8420(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x1DF0CF560](v3, 0x1081C40E99573A4);

  _Unwind_Resume(a1);
}

void sub_1DC8E84D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8E8528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8E857C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCHide::SKCHide(SKCHide *this, SKCAction *a2)
{
  uint64_t v3;

  SKCAction::SKCAction((SKCAction *)this);
  *(_QWORD *)v3 = &off_1EA500610;
  *(_BYTE *)(v3 + 112) = 1;
  *(_QWORD *)(v3 + 24) = a2->var4;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(_QWORD *)(v3 + 56) = *(_QWORD *)&a2->var8;
  *(_QWORD *)(v3 + 88) = a2->var14;
  *(_BYTE *)(v3 + 32) = 1;
}

void SKCHide::~SKCHide(SKCHide *this)
{
  SKCAction::~SKCAction((SKCAction *)this);
  JUMPOUT(0x1DF0CF560);
}

SKCHide *SKCHide::cpp_updateWithTargetForTime(SKCHide *this, SKCNode *a2, double a3)
{
  SKCHide *v5;

  if (!this->var11)
  {
    v5 = this;
    SKCNode::setHidden(a2, this->var19);
    return (SKCHide *)(*((uint64_t (**)(SKCHide *, SKCNode *, double))v5->var0 + 13))(v5, a2, a3);
  }
  return this;
}

void sub_1DC8E8948(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8E8ABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8E8B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8E8C44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8E92E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1DC8E93E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8E9474(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8E9500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)SKSoundBuffer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void MaxRectsBinPack::MaxRectsBinPack(MaxRectsBinPack *this)
{
  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
}

void MaxRectsBinPack::MaxRectsBinPack(MaxRectsBinPack *this, int a2, int a3)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  MaxRectsBinPack::Init(this, a2, a3);
}

void sub_1DC8E958C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  v5 = *v2;
  if (*v2)
  {
    v1[2] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void MaxRectsBinPack::Init(MaxRectsBinPack *this, int a2, int a3)
{
  double v4;
  double v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  v4 = (double)a2;
  v5 = (double)a3;
  *((_QWORD *)this + 2) = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 5) = v6;
  v9 = *((_QWORD *)this + 6);
  v7 = (char *)this + 48;
  v8 = v9;
  if (v6 >= v9)
  {
    v11 = v8 - v6;
    v12 = v11 >> 4;
    if ((unint64_t)(v11 >> 4) <= 1)
      v12 = 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>((uint64_t)v7, v13);
    v16 = &v14[32 * v15];
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((double *)v14 + 2) = v4;
    *((double *)v14 + 3) = v5;
    v10 = v14 + 32;
    v18 = (char *)*((_QWORD *)this + 4);
    v17 = (char *)*((_QWORD *)this + 5);
    if (v17 != v18)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      v17 = (char *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 4) = v14;
    *((_QWORD *)this + 5) = v10;
    *((_QWORD *)this + 6) = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    v10 = (char *)(v6 + 32);
    *(double *)(v6 + 16) = v4;
    *(double *)(v6 + 24) = v5;
  }
  *((_QWORD *)this + 5) = v10;
}

void std::vector<CGRect>::push_back[abi:ne180100](void **a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = ((char *)v7 - (_BYTE *)*a1) >> 5;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v12 = v5 - (_QWORD)*a1;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(v4, v13);
    else
      v14 = 0;
    v15 = &v14[32 * v10];
    v16 = &v14[32 * v13];
    v17 = a2[1];
    *(_OWORD *)v15 = *a2;
    *((_OWORD *)v15 + 1) = v17;
    v9 = v15 + 32;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v15 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v15 - 1) = v20;
        v15 -= 32;
        v18 -= 32;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18)
      operator delete(v18);
  }
  else
  {
    v8 = a2[1];
    *v7 = *a2;
    v7[1] = v8;
    v9 = v7 + 2;
  }
  a1[1] = v9;
}

double MaxRectsBinPack::Insert(MaxRectsBinPack *this, int a2, uint64_t a3, int a4)
{
  double v4;
  double PositionForNewNodeContactPoint;
  CGFloat v7;
  CGFloat v8;
  double v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  CGSize v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  CGSize *v27;
  char *v28;
  CGSize size;
  char *v30;
  char *v31;
  CGSize v32;
  int v34[2];
  CGRect v35;

  *(_QWORD *)v34 = 0;
  switch(a4)
  {
    case 0:
      MaxRectsBinPack::FindPositionForNewNodeBestShortSideFit((uint64_t)this, a2, a3, &v34[1], v34);
      goto LABEL_7;
    case 1:
      MaxRectsBinPack::FindPositionForNewNodeBestLongSideFit((uint64_t)this, a2, a3, v34, &v34[1]);
      goto LABEL_7;
    case 2:
      MaxRectsBinPack::FindPositionForNewNodeBestAreaFit((uint64_t)this, a2, a3, &v34[1], v34);
      goto LABEL_7;
    case 3:
      MaxRectsBinPack::FindPositionForNewNodeBottomLeft((uint64_t)this, a2, a3, &v34[1], v34);
      goto LABEL_7;
    case 4:
      PositionForNewNodeContactPoint = MaxRectsBinPack::FindPositionForNewNodeContactPoint(this, a2, a3, &v34[1]);
LABEL_7:
      v4 = PositionForNewNodeContactPoint;
      v35.origin.x = PositionForNewNodeContactPoint;
      v35.origin.y = v7;
      v35.size.width = v8;
      v35.size.height = v9;
      if (v9 != 0.0)
        goto LABEL_8;
      return v4;
    default:
LABEL_8:
      v10 = *((_QWORD *)this + 5) - *((_QWORD *)this + 4);
      if (v10)
      {
        v11 = 0;
        v12 = v10 >> 5;
        do
        {
          if (MaxRectsBinPack::SplitFreeNode((void **)this, *(CGRect *)(*((_QWORD *)this + 4) + 32 * v11), &v35))
          {
            v13 = *((_QWORD *)this + 4);
            v14 = *((_QWORD *)this + 5);
            v15 = v13 + 32 * v11;
            v16 = v14 - (v15 + 32);
            if (v14 != v15 + 32)
              memmove((void *)(v13 + 32 * v11), (const void *)(v15 + 32), v14 - (v15 + 32));
            *((_QWORD *)this + 5) = v15 + v16;
            --v11;
            --v12;
          }
          ++v11;
        }
        while (v11 < v12);
      }
      MaxRectsBinPack::PruneFreeList((const CGRect **)this);
      v17 = *((_QWORD *)this + 3);
      v18 = *((_QWORD *)this + 2);
      if (v18 >= v17)
      {
        v21 = *((_QWORD *)this + 1);
        v22 = (uint64_t)(v18 - v21) >> 5;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 59)
          std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
        v24 = v17 - v21;
        if (v24 >> 4 > v23)
          v23 = v24 >> 4;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0)
          v25 = 0x7FFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>((uint64_t)this + 24, v25);
        else
          v26 = 0;
        v27 = (CGSize *)&v26[32 * v22];
        v28 = &v26[32 * v25];
        size = v35.size;
        *v27 = (CGSize)v35.origin;
        v27[1] = size;
        v20 = (char *)&v27[2];
        v31 = (char *)*((_QWORD *)this + 1);
        v30 = (char *)*((_QWORD *)this + 2);
        if (v30 != v31)
        {
          do
          {
            v32 = (CGSize)*((_OWORD *)v30 - 1);
            v27[-2] = *((CGSize *)v30 - 2);
            v27[-1] = v32;
            v27 -= 2;
            v30 -= 32;
          }
          while (v30 != v31);
          v30 = (char *)*((_QWORD *)this + 1);
        }
        *((_QWORD *)this + 1) = v27;
        *((_QWORD *)this + 2) = v20;
        *((_QWORD *)this + 3) = v28;
        if (v30)
          operator delete(v30);
      }
      else
      {
        v19 = v35.size;
        *(CGPoint *)v18 = v35.origin;
        *(CGSize *)(v18 + 16) = v19;
        v20 = (char *)(v18 + 32);
      }
      *((_QWORD *)this + 2) = v20;
      return v4;
  }
}

uint64_t MaxRectsBinPack::FindPositionForNewNodeBestShortSideFit(uint64_t this, int a2, int a3, int *a4, int *a5)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  unint64_t v8;
  double v9;
  double *v10;
  double v11;
  double v12;
  int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  double v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;

  *a4 = 0x7FFFFFFF;
  v5 = *(_QWORD *)(this + 32);
  v6 = *(_QWORD *)(this + 40) - v5;
  if (v6)
  {
    v7 = (double)a2;
    v8 = v6 >> 5;
    v9 = (double)a3;
    if (v8 <= 1)
      v8 = 1;
    v10 = (double *)(v5 + 24);
    do
    {
      v11 = *(v10 - 1);
      if (v11 >= v7 && *v10 >= v9)
      {
        v13 = (int)v11 - a2;
        if (v13 < 0)
          v13 = a2 - (int)v11;
        v12 = *v10;
        if ((int)*v10 - a3 >= 0)
          v14 = (int)v12 - a3;
        else
          v14 = a3 - (int)v12;
        if (v14 >= v13)
          v15 = v13;
        else
          v15 = v14;
        if (v13 <= v14)
          v13 = v14;
        if (v15 < *a4 || (v15 == *a4 ? (v16 = v13 < *a5) : (v16 = 0), v16))
        {
          *a4 = v15;
          *a5 = v13;
        }
      }
      if (v11 >= v9 && *v10 >= v7)
      {
        v18 = (int)v11 - a3;
        if (v18 < 0)
          v18 = a3 - (int)v11;
        v17 = *v10;
        if ((int)*v10 - a2 >= 0)
          v19 = (int)v17 - a2;
        else
          v19 = a2 - (int)v17;
        if (v19 >= v18)
          v20 = v18;
        else
          v20 = v19;
        if (v18 <= v19)
          v18 = v19;
        if (v20 < *a4 || (v20 == *a4 ? (v21 = v18 < *a5) : (v21 = 0), v21))
        {
          *a4 = v20;
          *a5 = v18;
        }
      }
      v10 += 4;
      --v8;
    }
    while (v8);
  }
  return this;
}

uint64_t MaxRectsBinPack::FindPositionForNewNodeBottomLeft(uint64_t this, int a2, int a3, int *a4, int *a5)
{
  double *v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  int v11;
  double v12;
  int v13;
  double v14;

  *a4 = 0x7FFFFFFF;
  v5 = *(double **)(this + 32);
  v6 = *(_QWORD *)(this + 40) - (_QWORD)v5;
  if (v6)
  {
    v7 = v6 >> 5;
    v8 = (double)a2;
    v9 = (double)a3;
    if (v7 <= 1)
      v7 = 1;
    do
    {
      v10 = v5[2];
      if (v10 >= v8 && v5[3] >= v9)
      {
        v11 = (int)(v5[1] + v9);
        if (*a4 > v11)
        {
          v12 = *v5;
LABEL_8:
          *a4 = v11;
          *a5 = (int)v12;
          goto LABEL_11;
        }
        if (*a4 == v11)
        {
          v12 = *v5;
          if (*v5 < (double)*a5)
            goto LABEL_8;
        }
      }
LABEL_11:
      if (v10 < v9 || v5[3] < v8)
        goto LABEL_18;
      v13 = (int)(v5[1] + v8);
      if (*a4 <= v13)
      {
        if (*a4 != v13)
          goto LABEL_18;
        v14 = *v5;
        if (*v5 >= (double)*a5)
          goto LABEL_18;
      }
      else
      {
        v14 = *v5;
      }
      *a4 = v13;
      *a5 = (int)v14;
LABEL_18:
      v5 += 4;
      --v7;
    }
    while (v7);
  }
  return this;
}

double MaxRectsBinPack::FindPositionForNewNodeContactPoint(MaxRectsBinPack *this, int a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  double *v14;
  int v15;
  double v16;
  double v17;
  int v18;
  double v19;
  int v20;
  double v22;

  v22 = *MEMORY[0x1E0C9D648];
  *a4 = -1;
  v4 = *((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 5) - v4;
  if (v5)
  {
    v10 = v5 >> 5;
    v11 = (double)a2;
    v12 = (double)(int)a3;
    if (v10 <= 1)
      v13 = 1;
    else
      v13 = v10;
    v14 = (double *)(v4 + 24);
    v15 = -1;
    do
    {
      v16 = *(v14 - 1);
      if (v16 >= v11 && *v14 >= v12)
      {
        v17 = *(v14 - 3);
        v18 = MaxRectsBinPack::ContactPointScoreNode(this, (int)v17, (int)*(v14 - 2), a2, a3);
        if (v18 > v15)
        {
          v15 = v18;
          *a4 = v18;
          v22 = v17;
        }
      }
      if (v16 >= v12 && *v14 >= v11)
      {
        v19 = *(v14 - 3);
        v20 = MaxRectsBinPack::ContactPointScoreNode(this, (int)v19, (int)*(v14 - 2), a2, a3);
        if (v20 > v15)
        {
          v15 = v20;
          *a4 = v20;
          v22 = v19;
        }
      }
      v14 += 4;
      --v13;
    }
    while (v13);
  }
  return v22;
}

uint64_t MaxRectsBinPack::FindPositionForNewNodeBestLongSideFit(uint64_t this, int a2, int a3, int *a4, int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  double *v10;
  int v11;
  double v12;
  double v13;
  int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  double v18;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;

  *a5 = 0x7FFFFFFF;
  v5 = *(_QWORD *)(this + 32);
  v6 = *(_QWORD *)(this + 40) - v5;
  if (v6)
  {
    v7 = v6 >> 5;
    v8 = (double)a2;
    v9 = (double)a3;
    if (v7 <= 1)
      v7 = 1;
    v10 = (double *)(v5 + 24);
    v11 = 0x7FFFFFFF;
    do
    {
      v12 = *(v10 - 1);
      if (v12 >= v8 && *v10 >= v9)
      {
        v14 = (int)v12 - a2;
        if (v14 < 0)
          v14 = a2 - (int)v12;
        v13 = *v10;
        if ((int)*v10 - a3 >= 0)
          v15 = (int)v13 - a3;
        else
          v15 = a3 - (int)v13;
        if (v15 >= v14)
          v16 = v14;
        else
          v16 = v15;
        if (v14 <= v15)
          v14 = v15;
        if (v14 < v11 || (v14 == v11 ? (v17 = v16 < *a4) : (v17 = 0), v17))
        {
          *a4 = v16;
          v11 = v14;
          *a5 = v14;
        }
      }
      if (v12 >= v9 && *v10 >= v8)
      {
        v19 = (int)v12 - a3;
        if (v19 < 0)
          v19 = a3 - (int)v12;
        v18 = *v10;
        if ((int)*v10 - a2 >= 0)
          v20 = (int)v18 - a2;
        else
          v20 = a2 - (int)v18;
        if (v20 >= v19)
          v21 = v19;
        else
          v21 = v20;
        if (v19 <= v20)
          v19 = v20;
        if (v19 < v11 || (v19 == v11 ? (v22 = v21 < *a4) : (v22 = 0), v22))
        {
          *a4 = v21;
          v11 = v19;
          *a5 = v19;
        }
      }
      v10 += 4;
      --v7;
    }
    while (v7);
  }
  return this;
}

uint64_t MaxRectsBinPack::FindPositionForNewNodeBestAreaFit(uint64_t this, int a2, int a3, int *a4, int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  int v10;
  double v11;
  double v12;
  double v13;
  int v14;
  int v16;
  int v17;
  BOOL v18;
  int v20;
  int v21;
  BOOL v22;

  *a4 = 0x7FFFFFFF;
  v5 = *(_QWORD *)(this + 32);
  v6 = *(_QWORD *)(this + 40) - v5;
  if (v6)
  {
    v7 = v6 >> 5;
    v8 = (double)a2;
    v9 = (double)a3;
    if (v7 <= 1)
      v7 = 1;
    v10 = 0x7FFFFFFF;
    do
    {
      v12 = *(double *)(v5 + 16);
      v11 = *(double *)(v5 + 24);
      v13 = v12 * v11 - (double)(a3 * a2);
      v14 = (int)v13;
      if (v12 >= v8 && v11 >= v9)
      {
        v16 = (int)v12 - a2;
        if (v16 < 0)
          v16 = a2 - (int)v12;
        v17 = (int)v11 - a3;
        if (v17 < 0)
          v17 = a3 - (int)v11;
        if (v17 < v16)
          v16 = v17;
        if (v10 > v14 || (v10 == v14 ? (v18 = v16 < *a5) : (v18 = 0), v18))
        {
          *a5 = v16;
          v10 = (int)v13;
          *a4 = v14;
        }
      }
      if (v12 >= v9 && v11 >= v8)
      {
        v20 = (int)v12 - a3;
        if (v20 < 0)
          v20 = a3 - (int)v12;
        v21 = (int)v11 - a2;
        if (v21 < 0)
          v21 = a2 - (int)v11;
        if (v21 < v20)
          v20 = v21;
        if (v10 > v14 || (v10 == v14 ? (v22 = v20 < *a5) : (v22 = 0), v22))
        {
          *a5 = v20;
          v10 = (int)v13;
          *a4 = v14;
        }
      }
      v5 += 32;
      --v7;
    }
    while (v7);
  }
  return this;
}

uint64_t MaxRectsBinPack::SplitFreeNode(void **this, CGRect a2, const CGRect *a3)
{
  double width;
  double x;
  double v5;
  double height;
  double v8;
  double v9;
  double y;
  double v11;
  double v12;
  double v13;
  double v17;
  double v18;
  __int128 v20;
  double v21;
  double v22;

  width = a2.size.width;
  x = a3->origin.x;
  v5 = a2.origin.x + width;
  if (a3->origin.x >= a2.origin.x + width)
    return 0;
  height = a2.size.height;
  v8 = a2.origin.x;
  v9 = x + a3->size.width;
  if (v9 <= a2.origin.x)
    return 0;
  y = a2.origin.y;
  v11 = a3->origin.y;
  v12 = a2.origin.y + height;
  if (v11 >= a2.origin.y + height)
    return 0;
  v13 = v11 + a3->size.height;
  if (v13 <= y)
    return 0;
  if (x < v5 && v9 > v8)
  {
    if (v11 > y && v11 < v12)
    {
      *(double *)&v20 = v8;
      *((double *)&v20 + 1) = y;
      v21 = width;
      v22 = v11 - y;
      std::vector<CGRect>::push_back[abi:ne180100](this + 4, &v20);
      v11 = a3->origin.y;
      v13 = v11 + a3->size.height;
    }
    if (v13 < v12)
    {
      *(double *)&v20 = v8;
      *((double *)&v20 + 1) = v13;
      v21 = width;
      v22 = v12 - v13;
      std::vector<CGRect>::push_back[abi:ne180100](this + 4, &v20);
      v11 = a3->origin.y;
    }
  }
  if (v11 < v12 && v11 + a3->size.height > y)
  {
    v17 = a3->origin.x;
    if (a3->origin.x > v8 && v17 < v5)
    {
      *(double *)&v20 = v8;
      *((double *)&v20 + 1) = y;
      v21 = v17 - v8;
      v22 = height;
      std::vector<CGRect>::push_back[abi:ne180100](this + 4, &v20);
      v17 = a3->origin.x;
    }
    v18 = v17 + a3->size.width;
    if (v18 < v5)
    {
      *(double *)&v20 = v18;
      *((double *)&v20 + 1) = y;
      v21 = v5 - v18;
      v22 = height;
      std::vector<CGRect>::push_back[abi:ne180100](this + 4, &v20);
    }
  }
  return 1;
}

const CGRect **MaxRectsBinPack::PruneFreeList(const CGRect **this)
{
  const CGRect *v1;
  const CGRect *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  const CGRect *v7;
  const CGRect *v8;
  int64_t v9;
  int64_t v10;

  v1 = this[4];
  v2 = this[5];
  if (v2 != v1)
  {
    v3 = (uint64_t)this;
    v4 = 0;
    do
    {
      if (v4 + 1 >= v2 - v1)
      {
LABEL_12:
        ++v4;
      }
      else
      {
        v5 = v4 + 1;
        v6 = v4;
        while (1)
        {
          v7 = &v1[v4];
          v8 = &v1[v5];
          this = (const CGRect **)MaxRectsBinPack::IsContainedIn((MaxRectsBinPack *)this, v7, v8);
          if ((_DWORD)this)
            break;
          this = (const CGRect **)MaxRectsBinPack::IsContainedIn((MaxRectsBinPack *)this, &v1[v5], &v1[v4]);
          if ((_DWORD)this)
          {
            v9 = (char *)v2 - (char *)&v8[1];
            if (v2 != &v8[1])
            {
              this = (const CGRect **)memmove((void *)&v1[v5], &v8[1], (char *)v2 - (char *)&v8[1]);
              v1 = *(const CGRect **)(v3 + 32);
            }
            --v2;
            *(_QWORD *)(v3 + 40) = (char *)v8 + v9;
          }
          else
          {
            v6 = v5;
          }
          v5 = v6 + 1;
          if (v6 + 1 >= v2 - v1)
            goto LABEL_12;
        }
        v10 = (char *)v2 - (char *)&v7[1];
        if (v2 != &v7[1])
        {
          this = (const CGRect **)memmove((void *)&v1[v4], &v7[1], (char *)v2 - (char *)&v7[1]);
          v1 = *(const CGRect **)(v3 + 32);
        }
        --v2;
        *(_QWORD *)(v3 + 40) = (char *)v7 + v10;
      }
    }
    while (v4 < v2 - v1);
  }
  return this;
}

double MaxRectsBinPack::TrimmedSize(MaxRectsBinPack *this)
{
  int v2;
  int v3;
  double v4;
  int v5;
  CGRect *v6;
  CGRect *v7;
  int v8;
  BOOL v9;
  double v10;
  int v11;
  int v12;
  CGRect *v13;
  CGRect *v14;
  CGPoint v16;
  CGPoint v17;

  v2 = *(_DWORD *)this;
  v3 = *((_DWORD *)this + 1);
  v4 = (double)v3;
  if (v3 < 1)
  {
    v5 = *(_DWORD *)this;
  }
  else
  {
    v5 = *(_DWORD *)this;
    while (v5 < 1)
    {
LABEL_12:
      v4 = v4 + -1.0;
      v9 = v3-- <= 1;
      if (v9)
        goto LABEL_16;
    }
    v6 = (CGRect *)*((_QWORD *)this + 4);
    v7 = (CGRect *)*((_QWORD *)this + 5);
    if (v6 != v7)
    {
      v8 = 0;
      do
      {
        while (1)
        {
          v16.x = (double)v8;
          v16.y = (double)(v3 - 1);
          if (!CGRectContainsPoint(*v6, v16))
            break;
          ++v8;
          v5 = *(_DWORD *)this;
          if (v8 >= *(_DWORD *)this)
            goto LABEL_12;
          v6 = (CGRect *)*((_QWORD *)this + 4);
          v7 = (CGRect *)*((_QWORD *)this + 5);
          if (v6 == v7)
            goto LABEL_16;
        }
        ++v6;
      }
      while (v6 != v7);
      v5 = *(_DWORD *)this;
    }
  }
LABEL_16:
  v10 = (double)v2;
  if (v5 >= 1)
  {
    v11 = *((_DWORD *)this + 1);
    while (v11 < 1)
    {
LABEL_25:
      v10 = v10 + -1.0;
      v9 = v5-- <= 1;
      if (v9)
        return v10;
    }
    v12 = 0;
    while (1)
    {
      v13 = (CGRect *)*((_QWORD *)this + 4);
      v14 = (CGRect *)*((_QWORD *)this + 5);
      if (v13 == v14)
        break;
      while (1)
      {
        v17.x = (double)(v5 - 1);
        v17.y = (double)v12;
        if (CGRectContainsPoint(*v13, v17))
          break;
        if (++v13 == v14)
          return v10;
      }
      ++v12;
      v11 = *((_DWORD *)this + 1);
      if (v12 >= v11)
        goto LABEL_25;
    }
  }
  return v10;
}

void MaxRectsBinPack::Insert(MaxRectsBinPack *a1, uint64_t *a2, _QWORD *a3, int a4)
{
  CGFloat v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  unint64_t v11;
  CGFloat y;
  CGFloat width;
  uint64_t v14;
  CGFloat height;
  double *v16;
  int v17;
  int v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28[2];
  CGRect v29;

  a3[1] = *a3;
  v5 = *a2;
  v6 = a2[1] - *a2;
  if (v6)
  {
    do
    {
      if (!v6)
        break;
      v10 = 0;
      v11 = v6 >> 4;
      y = v29.origin.y;
      width = v29.size.width;
      v14 = v11 <= 1 ? 1 : v11;
      height = v29.size.height;
      v16 = (double *)(v5 + 8);
      v17 = -1;
      v18 = 0x7FFFFFFF;
      v19 = 0x7FFFFFFF;
      do
      {
        *(_QWORD *)v28 = 0;
        MaxRectsBinPack::ScoreRect(a1, (int)*(v16 - 1), (int)*v16, a4, &v28[1], v28);
        if (v28[1] < v18 || (v28[1] == v18 ? (v24 = v28[0] < v19) : (v24 = 0), v24))
        {
          height = v23;
          width = v22;
          y = v21;
          v4 = v20;
          v19 = v28[0];
          v17 = v10;
          v18 = v28[1];
        }
        ++v10;
        v16 += 2;
      }
      while (v14 != v10);
      v29.size.width = width;
      v29.size.height = height;
      v29.origin.x = v4;
      v29.origin.y = y;
      if (v17 == -1)
        break;
      MaxRectsBinPack::PlaceRect(a1, &v29);
      v5 = *a2;
      v25 = a2[1];
      v26 = *a2 + 16 * v17;
      v27 = v25 - (v26 + 16);
      if (v25 != v26 + 16)
      {
        memmove((void *)v26, (const void *)(v26 + 16), v25 - (v26 + 16));
        v5 = *a2;
      }
      a2[1] = v26 + v27;
      v6 = v26 + v27 - v5;
    }
    while (v26 + v27 != v5);
  }
}

void MaxRectsBinPack::ScoreRect(MaxRectsBinPack *a1, int a2, uint64_t a3, int a4, int *a5, int *a6)
{
  double v8;

  *a5 = 0x7FFFFFFF;
  *a6 = 0x7FFFFFFF;
  switch(a4)
  {
    case 0:
      MaxRectsBinPack::FindPositionForNewNodeBestShortSideFit((uint64_t)a1, a2, a3, a5, a6);
      goto LABEL_7;
    case 1:
      MaxRectsBinPack::FindPositionForNewNodeBestLongSideFit((uint64_t)a1, a2, a3, a6, a5);
      goto LABEL_7;
    case 2:
      MaxRectsBinPack::FindPositionForNewNodeBestAreaFit((uint64_t)a1, a2, a3, a5, a6);
      goto LABEL_7;
    case 3:
      MaxRectsBinPack::FindPositionForNewNodeBottomLeft((uint64_t)a1, a2, a3, a5, a6);
      goto LABEL_7;
    case 4:
      MaxRectsBinPack::FindPositionForNewNodeContactPoint(a1, a2, a3, a5);
      *a5 = -*a5;
LABEL_7:
      if (v8 == 0.0)
      {
        *a5 = 0x7FFFFFFF;
        *a6 = 0x7FFFFFFF;
      }
      break;
    default:
      return;
  }
}

void MaxRectsBinPack::PlaceRect(MaxRectsBinPack *this, const CGRect *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  CGSize v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  CGSize *v21;
  char *v22;
  CGSize size;
  char *v24;
  char *v25;
  CGSize v26;

  v4 = *((_QWORD *)this + 5) - *((_QWORD *)this + 4);
  if (v4)
  {
    v5 = 0;
    v6 = v4 >> 5;
    do
    {
      if (MaxRectsBinPack::SplitFreeNode((void **)this, *(CGRect *)(*((_QWORD *)this + 4) + 32 * v5), a2))
      {
        v7 = *((_QWORD *)this + 4);
        v8 = *((_QWORD *)this + 5);
        v9 = v7 + 32 * v5;
        v10 = v8 - (v9 + 32);
        if (v8 != v9 + 32)
          memmove((void *)(v7 + 32 * v5), (const void *)(v9 + 32), v8 - (v9 + 32));
        *((_QWORD *)this + 5) = v9 + v10;
        --v5;
        --v6;
      }
      ++v5;
    }
    while (v5 < v6);
  }
  MaxRectsBinPack::PruneFreeList((const CGRect **)this);
  v11 = *((_QWORD *)this + 3);
  v12 = *((_QWORD *)this + 2);
  if (v12 >= v11)
  {
    v15 = *((_QWORD *)this + 1);
    v16 = (uint64_t)(v12 - v15) >> 5;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 59)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v18 = v11 - v15;
    if (v18 >> 4 > v17)
      v17 = v18 >> 4;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
      v19 = 0x7FFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>((uint64_t)this + 24, v19);
    else
      v20 = 0;
    v21 = (CGSize *)&v20[32 * v16];
    v22 = &v20[32 * v19];
    size = a2->size;
    *v21 = (CGSize)a2->origin;
    v21[1] = size;
    v14 = (char *)&v21[2];
    v25 = (char *)*((_QWORD *)this + 1);
    v24 = (char *)*((_QWORD *)this + 2);
    if (v24 != v25)
    {
      do
      {
        v26 = (CGSize)*((_OWORD *)v24 - 1);
        v21[-2] = *((CGSize *)v24 - 2);
        v21[-1] = v26;
        v21 -= 2;
        v24 -= 32;
      }
      while (v24 != v25);
      v24 = (char *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 1) = v21;
    *((_QWORD *)this + 2) = v14;
    *((_QWORD *)this + 3) = v22;
    if (v24)
      operator delete(v24);
  }
  else
  {
    v13 = a2->size;
    *(CGPoint *)v12 = a2->origin;
    *(CGSize *)(v12 + 16) = v13;
    v14 = (char *)(v12 + 32);
  }
  *((_QWORD *)this + 2) = v14;
}

float MaxRectsBinPack::Occupancy(MaxRectsBinPack *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double *v6;
  float v7;

  v2 = *((_QWORD *)this + 1);
  v1 = *((_QWORD *)this + 2);
  v3 = v1 - v2;
  if (v1 == v2)
  {
    v7 = 0.0;
  }
  else
  {
    v4 = 0;
    v5 = v3 >> 5;
    if (v5 <= 1)
      v5 = 1;
    v6 = (double *)(v2 + 24);
    do
    {
      v4 = (unint64_t)((double)v4 + *(v6 - 1) * *v6);
      v6 += 4;
      --v5;
    }
    while (v5);
    v7 = (float)v4;
  }
  return v7 / (float)(*((_DWORD *)this + 1) * *(_DWORD *)this);
}

uint64_t MaxRectsBinPack::ContactPointScoreNode(MaxRectsBinPack *this, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  double *v13;
  double v14;
  double v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v29;

  if (!a2 || a4 + a2 == *(_DWORD *)this)
  {
    result = a5;
    if (!a3)
      goto LABEL_7;
LABEL_6:
    if ((_DWORD)a5 + a3 != *((_DWORD *)this + 1))
      goto LABEL_8;
    goto LABEL_7;
  }
  result = 0;
  if (a3)
    goto LABEL_6;
LABEL_7:
  result = (result + a4);
LABEL_8:
  v8 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    v10 = a4 + a2;
    v11 = a5 + a3;
    v12 = v9 >> 5;
    if (v12 <= 1)
      v12 = 1;
    v13 = (double *)(v8 + 16);
    do
    {
      v14 = *(v13 - 2);
      if (v14 == (double)(a4 + a2) || v14 + *v13 == (double)a2)
      {
        v15 = *(v13 - 1);
        v16 = (int)v15;
        v17 = (int)(v15 + v13[1]);
        if (v11 >= v17)
          v18 = (int)(v15 + v13[1]);
        else
          v18 = a5 + a3;
        if (v16 <= a3)
          v19 = a3;
        else
          v19 = (int)v15;
        v20 = v18 - v19;
        if (v11 < v16 || v17 < a3)
          v22 = 0;
        else
          v22 = v20;
        result = (v22 + result);
      }
      else
      {
        v15 = *(v13 - 1);
      }
      if (v15 == (double)((int)a5 + a3) || v15 + v13[1] == (double)a3)
      {
        v23 = (int)v14;
        v24 = (int)(v14 + *v13);
        if (v10 >= v24)
          v25 = (int)(v14 + *v13);
        else
          v25 = a4 + a2;
        if (v23 <= a2)
          v26 = a2;
        else
          v26 = (int)v14;
        v27 = v25 - v26;
        if (v10 < v23 || v24 < a2)
          v29 = 0;
        else
          v29 = v27;
        result = (v29 + result);
      }
      v13 += 4;
      --v12;
    }
    while (v12);
  }
  return result;
}

BOOL MaxRectsBinPack::IsContainedIn(MaxRectsBinPack *this, const CGRect *a2, const CGRect *a3)
{
  double y;
  double v4;

  if (a2->origin.x >= a3->origin.x
    && (y = a2->origin.y, v4 = a3->origin.y, y >= v4)
    && a2->origin.x + a2->size.width <= a3->origin.x + a3->size.width)
  {
    return y + a2->size.height <= v4 + a3->size.height;
  }
  else
  {
    return 0;
  }
}

void sub_1DC8EB130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DC8EB48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{

  _Unwind_Resume(a1);
}

void sub_1DC8EB5B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8EBE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{

  _Unwind_Resume(a1);
}

void sub_1DC8EC03C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8EC7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54)
{
  void *v54;

  _Unwind_Resume(a1);
}

BOOL sortTextureFunc(CGImageRef *a1, CGImageRef *a2)
{
  size_t Width;
  size_t v5;
  size_t v6;

  Width = CGImageGetWidth(*a1);
  v5 = CGImageGetHeight(*a1) * Width;
  v6 = CGImageGetWidth(*a2);
  return v5 > CGImageGetHeight(*a2) * v6;
}

void MaxRectTexturePacker::~MaxRectTexturePacker(MaxRectTexturePacker *this)
{
  MaxRectTexturePacker::~MaxRectTexturePacker(this);
  JUMPOUT(0x1DF0CF560);
}

{
  void **v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void **v6;

  *(_QWORD *)this = &off_1EA5006C8;
  v2 = (void **)((char *)this + 16);
  v3 = *((_QWORD *)this + 2);
  for (i = *((_QWORD *)this + 3); i != v3; i = std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](i - 16))
    ;
  *((_QWORD *)this + 3) = v3;
  v5 = (void *)*((_QWORD *)this + 8);
  if (v5)
  {
    *((_QWORD *)this + 9) = v5;
    operator delete(v5);
  }
  v6 = (void **)((char *)this + 40);
  std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = v2;
  std::vector<std::shared_ptr<PKCField>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

MaxRectTexturePacker *MaxRectTexturePacker::setTextureCount(MaxRectTexturePacker *this)
{
  *((_QWORD *)this + 9) = *((_QWORD *)this + 8);
  return this;
}

void MaxRectTexturePacker::addTexture(MaxRectTexturePacker *this, const CGSize *a2)
{
  CGFloat height;
  CGFloat width;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  CGFloat *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  CGFloat *v17;
  char *v18;
  CGFloat *v19;
  CGFloat *v20;
  __int128 v21;

  width = a2->width;
  height = a2->height;
  v7 = *((_QWORD *)this + 10);
  v5 = (char *)this + 80;
  v6 = v7;
  v8 = (CGFloat *)*((_QWORD *)v5 - 1);
  if ((unint64_t)v8 >= v7)
  {
    v10 = (void **)(v5 - 16);
    v11 = *((_QWORD *)v5 - 2);
    v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v11) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v11) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MaxRectTexturePacker::InputTexInfo>>((uint64_t)v5, v15);
    else
      v16 = 0;
    v17 = (CGFloat *)&v16[24 * v12];
    v18 = &v16[24 * v15];
    *v17 = width;
    v17[1] = height;
    *((_QWORD *)v17 + 2) = 15;
    v9 = v17 + 3;
    v20 = (CGFloat *)*((_QWORD *)this + 8);
    v19 = (CGFloat *)*((_QWORD *)this + 9);
    if (v19 != v20)
    {
      do
      {
        v21 = *(_OWORD *)(v19 - 3);
        *(v17 - 1) = *(v19 - 1);
        *(_OWORD *)(v17 - 3) = v21;
        v17 -= 3;
        v19 -= 3;
      }
      while (v19 != v20);
      v19 = (CGFloat *)*v10;
    }
    *((_QWORD *)this + 8) = v17;
    *((_QWORD *)this + 9) = v9;
    *((_QWORD *)this + 10) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v8 = width;
    v8[1] = height;
    *((_QWORD *)v8 + 2) = 15;
    v9 = v8 + 3;
  }
  *((_QWORD *)this + 9) = v9;
}

uint64_t MaxRectTexturePacker::packTextures(uint64_t a1, double **a2, int a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t i;
  unint64_t j;
  double v20;
  double *v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  BOOL v26;
  double v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  double v33;
  _BOOL4 v34;
  double v35;
  BOOL v36;
  MaxRectsBinPack *v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v48;
  uint64_t v49;
  int v50;
  _DWORD *v51;
  _DWORD *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  double v57;
  double v58;
  BOOL v59;
  uint64_t v60;
  double *v61;
  double v62;
  double v63;
  double v64;
  double v65;
  int v66;
  BOOL v69;
  double v70;
  uint64_t v71;
  double v72;
  BOOL v73;
  _BYTE *v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  __int128 v79;
  __int128 v80;
  char *v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  double v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  unint64_t v89;
  double *v90;
  double *v91;
  double *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  double v105;
  double v106;
  double *v107;
  unint64_t v108;
  double v109;
  double **v110;
  double v111;
  uint64_t v112;
  unint64_t v113;
  double *v114;
  double *v115;
  double *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  double *v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v130;
  double v131;
  uint64_t *v132;
  double **v133;
  unint64_t v134;
  __int128 v135;
  void *__p;
  _BYTE *v137;
  _QWORD v138[2];

  *(_BYTE *)(a1 + 8) = a4;
  v132 = (uint64_t *)(a1 + 40);
  std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__clear[abi:ne180100]((uint64_t *)(a1 + 40));
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72) - v7;
  if (v8)
  {
    v9 = v8 / 24;
    v10 = *(unsigned __int8 *)(a1 + 8);
    if (v9 <= 1)
      v9 = 1;
    v11 = (double *)(v7 + 8);
    v12 = 0.0;
    v13 = 0.0;
    v14 = 0.0;
    do
    {
      v15 = *(v11 - 1);
      if (v10)
      {
        v15 = v15 + 2.0;
        v16 = *v11 + 2.0;
        *(v11 - 1) = v15;
        *v11 = v16;
      }
      else
      {
        v16 = *v11;
      }
      v12 = fmax(v15, v12);
      v13 = fmax(v16, v13);
      v14 = v14 + v15 * v16;
      v11 += 3;
      --v9;
    }
    while (v9);
  }
  else
  {
    v14 = 0.0;
    v13 = 0.0;
    v12 = 0.0;
  }
  v17 = *(_QWORD *)(a1 + 16);
  for (i = *(_QWORD *)(a1 + 24); i != v17; i = std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](i - 16))
    ;
  LODWORD(j) = 0;
  v20 = fmax(v12, v13);
  *(_QWORD *)(a1 + 24) = v17;
  __p = 0;
  v137 = 0;
  v138[0] = 0;
  v133 = a2;
  v130 = (uint64_t)(a2 + 2);
  v135 = 0uLL;
  v21 = (double *)MEMORY[0x1E0C9D820];
LABEL_15:
  v134 = (int)j;
  v22 = 24 * (int)j + 8;
  v23 = 1.0;
  v131 = v20;
LABEL_16:
  v24 = *(double *)(a1 + 88);
  v25 = *(double *)(a1 + 96);
  v26 = v24 == *v21;
  if (v25 != v21[1])
    v26 = 0;
  do
  {
    v27 = ceil(sqrt(v14 / v23));
    if (a3)
    {
      v28 = (int)v27;
      v29 = 1;
      do
      {
        v30 = v29;
        v29 *= 2;
      }
      while (v30 < v28);
      v31 = 1;
      do
      {
        v32 = v31;
        v31 *= 2;
      }
      while (v32 < v28);
      v27 = (double)v30;
      v33 = (double)v32;
      if (!v26)
      {
LABEL_24:
        v27 = fmin(v24, v27);
        v33 = fmin(v25, v33);
        v34 = v25 == v33 && v24 == v27;
        goto LABEL_29;
      }
    }
    else
    {
      v33 = v27;
      if (!v26)
        goto LABEL_24;
    }
    v34 = 0;
LABEL_29:
    v35 = fmax(v23 + -0.02, 0.01);
    if (v27 >= v20)
    {
      v36 = 0;
    }
    else
    {
      v23 = v35;
      v36 = !v34;
    }
  }
  while (v36);
  v37 = (MaxRectsBinPack *)operator new();
  MaxRectsBinPack::MaxRectsBinPack(v37, (int)v27, (int)v33);
  std::shared_ptr<MaxRectsBinPack>::reset[abi:ne180100]<MaxRectsBinPack,void>(&v135, (uint64_t)v37);
  v137 = __p;
  v38 = *(_QWORD *)(a1 + 64);
  v39 = v22;
  for (j = v134; 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 72) - v38) >> 3) > j; v22 += 24)
  {
    v40 = MaxRectsBinPack::Insert((MaxRectsBinPack *)v135, (int)*(double *)(v38 + 24 * j), (int)*(double *)(v38 + 24 * j + 8), *(_DWORD *)(a1 + 12));
    v43 = v42;
    v45 = v44;
    v46 = v21[1];
    if (v42 == *v21 && v45 == v46)
    {
      if (!v34)
      {
        v23 = fmax(v23 + -0.02, 0.01);
        v20 = v131;
        v22 = v39;
        goto LABEL_16;
      }
      v57 = *(double *)(a1 + 88);
      v58 = *(double *)(a1 + 96);
      v59 = v57 == *v21 && v58 == v46;
      if (v59
        || (v60 = *(_QWORD *)(a1 + 64),
            v61 = (double *)(v60 + 24 * j),
            v62 = *v61,
            v63 = *v61 - v57,
            v64 = v61[1],
            v65 = v64 - v58,
            v63 <= 0.0)
        && v65 <= 0.0)
      {
        v85 = MaxRectsBinPack::TrimmedSize((MaxRectsBinPack *)v135);
        v87 = v85;
        v88 = v86;
        v90 = v133[1];
        v89 = (unint64_t)v133[2];
        if ((unint64_t)v90 >= v89)
        {
          v92 = *v133;
          v93 = ((char *)v90 - (char *)*v133) >> 4;
          v94 = v93 + 1;
          if ((unint64_t)(v93 + 1) >> 60)
            std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
          v95 = v89 - (_QWORD)v92;
          if (v95 >> 3 > v94)
            v94 = v95 >> 3;
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF0)
            v96 = 0xFFFFFFFFFFFFFFFLL;
          else
            v96 = v94;
          if (v96)
          {
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<jet_buffer>>>(v130, v96);
            v92 = *v133;
            v90 = v133[1];
          }
          else
          {
            v97 = 0;
          }
          v98 = &v97[16 * v93];
          *(double *)v98 = v87;
          *((_QWORD *)v98 + 1) = v88;
          v99 = v98;
          if (v90 == v92)
          {
            v100 = v133;
          }
          else
          {
            do
            {
              *((_OWORD *)v99 - 1) = *((_OWORD *)v90 - 1);
              v99 -= 16;
              v90 -= 2;
            }
            while (v90 != v92);
            v100 = v133;
            v92 = *v133;
          }
          v91 = (double *)(v98 + 16);
          *v100 = v99;
          v100[1] = v98 + 16;
          v100[2] = &v97[16 * v96];
          if (v92)
            operator delete(v92);
        }
        else
        {
          *v90 = v85;
          *((_QWORD *)v90 + 1) = v86;
          v91 = v90 + 2;
        }
        v133[1] = v91;
        v101 = *(_QWORD *)(a1 + 48);
        if (v101 >= *(_QWORD *)(a1 + 56))
        {
          v102 = std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__push_back_slow_path<std::vector<MaxRectTexturePacker::PackedTexInfo> const&>(v132, (uint64_t)&__p);
        }
        else
        {
          std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__construct_one_at_end[abi:ne180100]<std::vector<MaxRectTexturePacker::PackedTexInfo> const&>((uint64_t)v132, (uint64_t)&__p);
          v102 = v101 + 24;
        }
        *(_QWORD *)(a1 + 48) = v102;
        std::vector<std::shared_ptr<jet_buffer>>::push_back[abi:ne180100]((char **)(a1 + 16), &v135);
        v103 = *(_QWORD *)(a1 + 64);
        v104 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 72) - v103) >> 3);
        v14 = 0.0;
        v105 = 0.0;
        v106 = 0.0;
        if (v104 > (int)j)
        {
          v107 = (double *)(v103 + v22);
          v108 = j;
          do
          {
            v109 = *(v107 - 1);
            v106 = fmax(v109, v106);
            v105 = fmax(*v107, v105);
            v14 = v14 + v109 * *v107;
            ++v108;
            v107 += 3;
          }
          while (v104 > v108);
        }
        v20 = fmax(v106, v105);
        goto LABEL_15;
      }
      v66 = *(unsigned __int8 *)(a1 + 8);
      if (v63 > 0.0 && v63 <= 2.0 && v66 != 0)
      {
        v62 = v62 + -2.0;
        *v61 = v62;
        *(_DWORD *)(v60 + 24 * j + 16) &= 0xFFFFFFFC;
      }
      if (v66 && v65 <= 2.0 && v65 > 0.0)
      {
        v64 = v64 + -2.0;
        v61[1] = v64;
        *(_DWORD *)(v60 + 24 * j + 16) &= 0xFFFFFFF3;
      }
      v69 = v62 <= v57 && v64 <= v58;
      if (!v69
        || ((v48 = MaxRectsBinPack::Insert((MaxRectsBinPack *)v135, (int)v62, (int)v64, *(_DWORD *)(a1 + 12)), v49 = v71, v43 = v72, v45 = v70, v72 == *v21)? (v73 = v70 == v21[1]): (v73 = 0), v73))
      {
        v112 = 0xFFFFFFFFLL;
        goto LABEL_150;
      }
      v50 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 24 * j + 16);
      v51 = v137;
      if ((unint64_t)v137 >= v138[0])
      {
        v52 = __p;
        v75 = 0xCCCCCCCCCCCCCCCDLL * ((v137 - (_BYTE *)__p) >> 3);
        v76 = v75 + 1;
        if (v75 + 1 > 0x666666666666666)
          std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v138[0] - (_QWORD)__p) >> 3) > v76)
          v76 = 0x999999999999999ALL * ((uint64_t)(v138[0] - (_QWORD)__p) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v138[0] - (_QWORD)__p) >> 3) >= 0x333333333333333)
          v55 = 0x666666666666666;
        else
          v55 = v76;
        if (v55)
        {
          v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MaxRectTexturePacker::PackedTexInfo>>((uint64_t)v138, v55);
          v52 = __p;
          v51 = v137;
        }
        else
        {
          v56 = 0;
        }
        v77 = &v56[40 * v75];
        *(_DWORD *)v77 = j;
        *((_DWORD *)v77 + 1) = v50;
        *((double *)v77 + 1) = v48;
        *((_QWORD *)v77 + 2) = v49;
        *((double *)v77 + 3) = v43;
        *((double *)v77 + 4) = v45;
        if (v51 != v52)
        {
          v82 = &v56[40 * v75];
          do
          {
            v83 = *(_OWORD *)(v51 - 10);
            v84 = *(_OWORD *)(v51 - 6);
            v81 = v82 - 40;
            *((_QWORD *)v82 - 1) = *((_QWORD *)v51 - 1);
            *(_OWORD *)(v82 - 24) = v84;
            *(_OWORD *)(v82 - 40) = v83;
            v51 -= 10;
            v82 -= 40;
          }
          while (v51 != v52);
LABEL_96:
          v74 = v77 + 40;
          __p = v81;
          v137 = v77 + 40;
          v138[0] = &v56[40 * v55];
          if (v52)
            operator delete(v52);
          goto LABEL_98;
        }
LABEL_95:
        v81 = v77;
        goto LABEL_96;
      }
    }
    else
    {
      v48 = v40;
      v49 = v41;
      v50 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 24 * j + 16);
      v51 = v137;
      if ((unint64_t)v137 >= v138[0])
      {
        v52 = __p;
        v53 = 0xCCCCCCCCCCCCCCCDLL * ((v137 - (_BYTE *)__p) >> 3);
        v54 = v53 + 1;
        if (v53 + 1 > 0x666666666666666)
          std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v138[0] - (_QWORD)__p) >> 3) > v54)
          v54 = 0x999999999999999ALL * ((uint64_t)(v138[0] - (_QWORD)__p) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v138[0] - (_QWORD)__p) >> 3) >= 0x333333333333333)
          v55 = 0x666666666666666;
        else
          v55 = v54;
        if (v55)
        {
          v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MaxRectTexturePacker::PackedTexInfo>>((uint64_t)v138, v55);
          v52 = __p;
          v51 = v137;
        }
        else
        {
          v56 = 0;
        }
        v77 = &v56[40 * v53];
        *(_DWORD *)v77 = j;
        *((_DWORD *)v77 + 1) = v50;
        *((double *)v77 + 1) = v48;
        *((_QWORD *)v77 + 2) = v49;
        *((double *)v77 + 3) = v43;
        *((double *)v77 + 4) = v45;
        if (v51 != v52)
        {
          v78 = &v56[40 * v53];
          do
          {
            v79 = *(_OWORD *)(v51 - 10);
            v80 = *(_OWORD *)(v51 - 6);
            v81 = v78 - 40;
            *((_QWORD *)v78 - 1) = *((_QWORD *)v51 - 1);
            *(_OWORD *)(v78 - 24) = v80;
            *(_OWORD *)(v78 - 40) = v79;
            v51 -= 10;
            v78 -= 40;
          }
          while (v51 != v52);
          goto LABEL_96;
        }
        goto LABEL_95;
      }
    }
    *v51 = j;
    v51[1] = v50;
    *((double *)v51 + 1) = v48;
    *((_QWORD *)v51 + 2) = v49;
    v74 = v51 + 10;
    *((double *)v51 + 3) = v43;
    *((double *)v51 + 4) = v45;
LABEL_98:
    v137 = v74;
    ++j;
    v38 = *(_QWORD *)(a1 + 64);
  }
  if ((_QWORD)v135)
  {
    v110 = v133;
    if ((a3 & 1) == 0)
    {
      v27 = MaxRectsBinPack::TrimmedSize((MaxRectsBinPack *)v135);
      v33 = v111;
    }
  }
  else
  {
    v110 = v133;
  }
  v114 = v110[1];
  v113 = (unint64_t)v110[2];
  if ((unint64_t)v114 >= v113)
  {
    v116 = *v110;
    v117 = ((char *)v114 - (char *)*v110) >> 4;
    v118 = v117 + 1;
    if ((unint64_t)(v117 + 1) >> 60)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v119 = v113 - (_QWORD)v116;
    if (v119 >> 3 > v118)
      v118 = v119 >> 3;
    if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF0)
      v120 = 0xFFFFFFFFFFFFFFFLL;
    else
      v120 = v118;
    if (v120)
    {
      v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<jet_buffer>>>(v130, v120);
      v116 = *v110;
      v114 = v110[1];
    }
    else
    {
      v121 = 0;
    }
    v122 = (double *)&v121[16 * v117];
    v123 = &v121[16 * v120];
    *v122 = v27;
    v122[1] = v33;
    v115 = v122 + 2;
    if (v114 != v116)
    {
      do
      {
        *((_OWORD *)v122 - 1) = *((_OWORD *)v114 - 1);
        v122 -= 2;
        v114 -= 2;
      }
      while (v114 != v116);
      v116 = *v110;
    }
    *v110 = v122;
    v110[1] = v115;
    v110[2] = (double *)v123;
    if (v116)
      operator delete(v116);
  }
  else
  {
    *v114 = v27;
    v114[1] = v33;
    v115 = v114 + 2;
  }
  v110[1] = v115;
  v124 = *(_QWORD *)(a1 + 48);
  if (v124 >= *(_QWORD *)(a1 + 56))
  {
    v125 = std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__push_back_slow_path<std::vector<MaxRectTexturePacker::PackedTexInfo> const&>(v132, (uint64_t)&__p);
  }
  else
  {
    std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__construct_one_at_end[abi:ne180100]<std::vector<MaxRectTexturePacker::PackedTexInfo> const&>((uint64_t)v132, (uint64_t)&__p);
    v125 = v124 + 24;
  }
  *(_QWORD *)(a1 + 48) = v125;
  v112 = *(_QWORD *)(a1 + 16) != *(_QWORD *)(a1 + 24);
LABEL_150:
  v126 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
  if (*((_QWORD *)&v135 + 1))
  {
    v127 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
      std::__shared_weak_count::__release_weak(v126);
    }
  }
  if (__p)
  {
    v137 = __p;
    operator delete(__p);
  }
  return v112;
}

void sub_1DC8ED408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t MaxRectTexturePacker::getTextureCountInAtlas(MaxRectTexturePacker *this, uint64_t a2)
{
  return 0xCCCCCCCCCCCCCCCDLL
       * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 5) + 24 * a2 + 8) - *(_QWORD *)(*((_QWORD *)this + 5) + 24 * a2)) >> 3);
}

BOOL MaxRectTexturePacker::getTextureLocationInAtlas(MaxRectTexturePacker *this, uint64_t a2, uint64_t a3, unsigned int *a4, CGRect *a5, unsigned int *a6)
{
  uint64_t v11;
  void *v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  CGSize v16;
  double width;
  double v18;
  double v19;
  _BOOL8 v20;
  void *__p;
  void *v23;
  uint64_t v24;

  v11 = *((_QWORD *)this + 5) + 24 * a2;
  v23 = 0;
  v24 = 0;
  __p = 0;
  std::vector<MaxRectTexturePacker::PackedTexInfo>::__init_with_size[abi:ne180100]<MaxRectTexturePacker::PackedTexInfo*,MaxRectTexturePacker::PackedTexInfo*>(&__p, *(const void **)v11, *(_QWORD *)(v11 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 3));
  v12 = __p;
  v13 = (char *)__p + 40 * a3;
  v15 = *(_DWORD *)v13;
  v14 = *((_DWORD *)v13 + 1);
  v16 = *(CGSize *)(v13 + 24);
  a5->origin = *(CGPoint *)(v13 + 8);
  a5->size = v16;
  *a4 = v15;
  *a6 = v14;
  width = a5->size.width;
  v18 = *(double *)(*((_QWORD *)this + 8) + 24 * v15);
  if (!*((_BYTE *)this + 8))
    goto LABEL_7;
  v19 = a5->size.width;
  if ((v14 & 1) != 0)
  {
    a5->origin.x = a5->origin.x + 1.0;
    v19 = width + -1.0;
    a5->size.width = width + -1.0;
    if ((v14 & 2) == 0)
    {
LABEL_4:
      if ((v14 & 8) == 0)
        goto LABEL_5;
LABEL_10:
      a5->origin.y = a5->origin.y + 1.0;
      a5->size.height = a5->size.height + -1.0;
      if ((v14 & 4) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_4;
  }
  a5->size.width = v19 + -1.0;
  if ((v14 & 8) != 0)
    goto LABEL_10;
LABEL_5:
  if ((v14 & 4) != 0)
LABEL_6:
    a5->size.height = a5->size.height + -1.0;
LABEL_7:
  v20 = width != v18;
  v23 = v12;
  operator delete(v12);
  return v20;
}

void std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MaxRectTexturePacker::InputTexInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

void std::shared_ptr<MaxRectsBinPack>::reset[abi:ne180100]<MaxRectsBinPack,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<MaxRectsBinPack>::shared_ptr[abi:ne180100]<MaxRectsBinPack,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *std::shared_ptr<MaxRectsBinPack>::shared_ptr[abi:ne180100]<MaxRectsBinPack,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1EA500720;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DC8ED814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  a10 = 0;
  if (v10)
    std::default_delete<MaxRectsBinPack>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MaxRectsBinPack *,std::shared_ptr<MaxRectsBinPack>::__shared_ptr_default_delete<MaxRectsBinPack,MaxRectsBinPack>,std::allocator<MaxRectsBinPack>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

void std::__shared_ptr_pointer<MaxRectsBinPack *,std::shared_ptr<MaxRectsBinPack>::__shared_ptr_default_delete<MaxRectsBinPack,MaxRectsBinPack>,std::allocator<MaxRectsBinPack>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<MaxRectsBinPack>::operator()[abi:ne180100](a1 + 24, *(_QWORD **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<MaxRectsBinPack *,std::shared_ptr<MaxRectsBinPack>::__shared_ptr_default_delete<MaxRectsBinPack,MaxRectsBinPack>,std::allocator<MaxRectsBinPack>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<MaxRectsBinPack>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    v3 = (void *)a2[4];
    if (v3)
    {
      a2[5] = v3;
      operator delete(v3);
    }
    v4 = (void *)a2[1];
    if (v4)
    {
      a2[2] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1DF0CF560);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MaxRectTexturePacker::PackedTexInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

_QWORD *std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__construct_one_at_end[abi:ne180100]<std::vector<MaxRectTexturePacker::PackedTexInfo> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<MaxRectTexturePacker::PackedTexInfo>::__init_with_size[abi:ne180100]<MaxRectTexturePacker::PackedTexInfo*,MaxRectTexturePacker::PackedTexInfo*>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1DC8ED994(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__push_back_slow_path<std::vector<MaxRectTexturePacker::PackedTexInfo> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MaxRectTexturePacker::InputTexInfo>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<MaxRectTexturePacker::PackedTexInfo>::__init_with_size[abi:ne180100]<MaxRectTexturePacker::PackedTexInfo*,MaxRectTexturePacker::PackedTexInfo*>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  v15 += 24;
  std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<MaxRectTexturePacker::PackedTexInfo>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1DC8EDAA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<MaxRectTexturePacker::PackedTexInfo>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<MaxRectTexturePacker::PackedTexInfo>::__init_with_size[abi:ne180100]<MaxRectTexturePacker::PackedTexInfo*,MaxRectTexturePacker::PackedTexInfo*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MaxRectTexturePacker::PackedTexInfo>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1DC8EDB18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MaxRectTexturePacker::PackedTexInfo>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MaxRectTexturePacker::PackedTexInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<MaxRectTexturePacker::PackedTexInfo>>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<MaxRectTexturePacker::PackedTexInfo>>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MaxRectTexturePacker::PackedTexInfo>>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MaxRectTexturePacker::PackedTexInfo>>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MaxRectTexturePacker::PackedTexInfo>>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MaxRectTexturePacker::PackedTexInfo>>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<MaxRectTexturePacker::PackedTexInfo>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

void std::vector<TextureInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<TextureInfo>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<TextureInfo>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t std::vector<TextureInfo>::__push_back_slow_path<TextureInfo const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v17 = v11;
  v18 = &v10[32 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  v12 = (std::string *)(v11 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v11 = v17;
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  v17 = v11 + 32;
  std::vector<TextureInfo>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<TextureInfo>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1DC8EDF54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<TextureInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<TextureInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TextureInfo>,std::reverse_iterator<TextureInfo*>,std::reverse_iterator<TextureInfo*>,std::reverse_iterator<TextureInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TextureInfo>,std::reverse_iterator<TextureInfo*>,std::reverse_iterator<TextureInfo*>,std::reverse_iterator<TextureInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_QWORD *)(a3 - 32);
      a3 -= 32;
      *(_QWORD *)(v8 - 32) = v9;
      v8 -= 32;
      v10 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v7 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v8;
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TextureInfo>,std::reverse_iterator<TextureInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TextureInfo>,std::reverse_iterator<TextureInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<TextureInfo>,std::reverse_iterator<TextureInfo*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<TextureInfo>,std::reverse_iterator<TextureInfo*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    v1 += 32;
  }
}

uint64_t std::__split_buffer<TextureInfo>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<TextureInfo>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<TextureInfo>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*,false>(__int128 *a1, char *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  char v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  char v21;
  BOOL v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

LABEL_1:
  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = a2 - (char *)v10;
    v14 = (a2 - (char *)v10) >> 5;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)a2 - 2, v10))
        {
          *(_QWORD *)&v27 = *((_QWORD *)v10 + 2);
          *(_QWORD *)((char *)&v27 + 7) = *(_QWORD *)((char *)v10 + 23);
          v23 = *((_BYTE *)v10 + 31);
          v24 = *v10;
          *((_QWORD *)v10 + 2) = 0;
          *((_QWORD *)v10 + 3) = 0;
          *((_QWORD *)v10 + 1) = 0;
          *(_QWORD *)v10 = *((_QWORD *)a2 - 4);
          v25 = *(_OWORD *)(a2 - 24);
          *((_QWORD *)v10 + 3) = *((_QWORD *)a2 - 1);
          *(__int128 *)((char *)v10 + 8) = v25;
          *((_OWORD *)a2 - 2) = v24;
          *((_QWORD *)a2 - 2) = v27;
          *(_QWORD *)(a2 - 9) = *(_QWORD *)((char *)&v27 + 7);
          *(a2 - 1) = v23;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(v10, v10 + 2, (uint64_t)(a2 - 32), a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>((uint64_t)v10, (uint64_t)(v10 + 2), (uint64_t)(v10 + 4), (uint64_t)(a2 - 32), a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>((uint64_t)v10, (uint64_t)(v10 + 2), (uint64_t)(v10 + 4), (uint64_t)(v10 + 6), (uint64_t)(a2 - 32), a3);
        return;
      default:
        if (v13 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(v10, a2, (uint64_t (**)(uint64_t *, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(v10, a2, (uint64_t (**)(uint64_t *, _QWORD *))a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[2 * (v14 >> 1)];
          if ((unint64_t)v13 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(&v10[2 * (v14 >> 1)], v10, (uint64_t)(a2 - 32), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(v10, &v10[2 * (v14 >> 1)], (uint64_t)(a2 - 32), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(v10 + 2, v16 - 2, (uint64_t)(a2 - 64), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(v10 + 4, &v10[2 * v15 + 2], (uint64_t)(a2 - 96), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(v16 - 2, v16, (uint64_t)&v10[2 * v15 + 2], a3);
            *(_QWORD *)&v26 = *((_QWORD *)v10 + 2);
            *(_QWORD *)((char *)&v26 + 7) = *(_QWORD *)((char *)v10 + 23);
            v17 = *((_BYTE *)v10 + 31);
            v18 = *v10;
            *((_QWORD *)v10 + 2) = 0;
            *((_QWORD *)v10 + 3) = 0;
            *(_QWORD *)v10 = *(_QWORD *)v16;
            *((_QWORD *)v10 + 1) = 0;
            v19 = *(__int128 *)((char *)v16 + 8);
            *((_QWORD *)v10 + 3) = *((_QWORD *)v16 + 3);
            *(__int128 *)((char *)v10 + 8) = v19;
            *v16 = v18;
            *(_QWORD *)((char *)v16 + 23) = *(_QWORD *)((char *)&v26 + 7);
            *((_QWORD *)v16 + 2) = v26;
            *((_BYTE *)v16 + 31) = v17;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(v10 - 2, v10) & 1) == 0)
          {
            v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TextureInfo *,BOOL (*&)(TextureInfo const&,TextureInfo const&)>(v10, (unint64_t)a2, (uint64_t (**)(uint64_t *, __int128 *))a3);
            goto LABEL_16;
          }
LABEL_11:
          v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TextureInfo *,BOOL (*&)(TextureInfo const&,TextureInfo const&)>((uint64_t *)v10, (unint64_t)a2, (uint64_t (**)(uint64_t, uint64_t *))a3);
          if ((v21 & 1) == 0)
            goto LABEL_14;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>((uint64_t)v10, v20, a3);
          v10 = (__int128 *)(v20 + 32);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(v20 + 32, (uint64_t)a2, a3))
          {
            v11 = v12 + 1;
            if (v22)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*,false>(a1, v20, a3, -v12, a5 & 1);
            v10 = (__int128 *)(v20 + 32);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (char *)v20;
          if (v22)
            return;
          goto LABEL_1;
        }
        if (v10 != (__int128 *)a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*,TextureInfo*>((uint64_t)v10, (uint64_t)a2, (uint64_t)a2, (unsigned int (**)(uint64_t, uint64_t))a3, a6);
        return;
    }
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(uint64_t *, uint64_t))
{
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  char *v15;
  int v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  if (a1 != a2)
  {
    v5 = a1 + 4;
    if (a1 + 4 != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v5;
        if ((*a3)(v5, (uint64_t)v8))
        {
          v18 = *v9;
          v19 = *(_OWORD *)(v8 + 5);
          v20 = v8[7];
          v8[5] = 0;
          v8[6] = 0;
          v8[7] = 0;
          v10 = v7;
          do
          {
            v11 = v10;
            v12 = (char *)a1 + v10;
            *(_QWORD *)((char *)a1 + v10 + 32) = *(_QWORD *)((char *)a1 + v10);
            v13 = (uint64_t)a1 + v10 + 40;
            if (*((char *)a1 + v10 + 63) < 0)
              operator delete(*(void **)v13);
            *(_OWORD *)v13 = *(_OWORD *)(v12 + 8);
            *(_QWORD *)(v13 + 16) = *((_QWORD *)v12 + 3);
            v12[31] = 0;
            v12[8] = 0;
            if (!v11)
            {
              *a1 = v18;
              goto LABEL_13;
            }
            v14 = (*a3)(&v18, (uint64_t)a1 + v11 - 32);
            v10 = v11 - 32;
          }
          while ((v14 & 1) != 0);
          v15 = (char *)a1 + v10;
          v16 = v15[63];
          *((_QWORD *)v15 + 4) = v18;
          if (v16 < 0)
            operator delete(*((void **)v15 + 5));
LABEL_13:
          v17 = (char *)a1 + v11;
          *(_OWORD *)(v17 + 8) = v19;
          *((_QWORD *)v17 + 3) = v20;
        }
        v5 = v9 + 4;
        v7 += 32;
        v8 = v9;
      }
      while (v9 + 4 != a2);
    }
  }
}

void sub_1DC8EE75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(uint64_t *, _QWORD *))
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  char v11;
  int v12;
  void **v13;
  uint64_t v14;
  __int128 v15;
  void *v16;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 4;
    if (a1 + 4 != a2)
    {
      v7 = a1 - 4;
      do
      {
        v8 = v5;
        if ((*a3)(v5, v4))
        {
          v14 = *v8;
          v15 = *(_OWORD *)(v4 + 5);
          v16 = (void *)v4[7];
          v4[5] = 0;
          v4[6] = 0;
          v4[7] = 0;
          v9 = v7;
          do
          {
            v9[8] = v9[4];
            v10 = (void **)(v9 + 9);
            if (*((char *)v9 + 95) < 0)
              operator delete(*v10);
            *(_OWORD *)v10 = *(_OWORD *)(v9 + 5);
            v9[11] = v9[7];
            *((_BYTE *)v9 + 63) = 0;
            *((_BYTE *)v9 + 40) = 0;
            v11 = (*a3)(&v14, v9);
            v9 -= 4;
          }
          while ((v11 & 1) != 0);
          v9[8] = v14;
          v12 = *((char *)v9 + 95);
          v13 = (void **)(v9 + 9);
          if (v12 < 0)
            operator delete(*v13);
          *(_OWORD *)v13 = v15;
          v13[2] = v16;
        }
        v5 = v8 + 4;
        v7 += 4;
        v4 = v8;
      }
      while (v8 + 4 != a2);
    }
  }
}

void sub_1DC8EE8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  __int128 v17;
  char v18;
  __int128 v19;
  __int128 v20;
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v8 = (*a4)(a2, a1);
  result = (*a4)((__int128 *)a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v15 = *a2;
    *((_QWORD *)a2 + 1) = 0;
    *(_QWORD *)&v28 = *((_QWORD *)a2 + 2);
    *(_QWORD *)((char *)&v28 + 7) = *(_QWORD *)((char *)a2 + 23);
    v16 = *((_BYTE *)a2 + 31);
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    v17 = *(_OWORD *)(a3 + 8);
    *((_QWORD *)a2 + 3) = *(_QWORD *)(a3 + 24);
    *(__int128 *)((char *)a2 + 8) = v17;
    *(_OWORD *)a3 = v15;
    *(_QWORD *)(a3 + 23) = *(_QWORD *)((char *)&v28 + 7);
    *(_QWORD *)(a3 + 16) = v28;
    *(_BYTE *)(a3 + 31) = v16;
    if (!(*a4)(a2, a1))
      return 1;
    *(_QWORD *)&v29 = *((_QWORD *)a1 + 2);
    *(_QWORD *)((char *)&v29 + 7) = *(_QWORD *)((char *)a1 + 23);
    v18 = *((_BYTE *)a1 + 31);
    v19 = *a1;
    *((_QWORD *)a1 + 2) = 0;
    *((_QWORD *)a1 + 3) = 0;
    *((_QWORD *)a1 + 1) = 0;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v20 = *(__int128 *)((char *)a2 + 8);
    *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
    *(__int128 *)((char *)a1 + 8) = v20;
    *a2 = v19;
    *(_QWORD *)((char *)a2 + 23) = *(_QWORD *)((char *)&v29 + 7);
    *((_QWORD *)a2 + 2) = v29;
    *((_BYTE *)a2 + 31) = v18;
    return 2;
  }
  v10 = (_QWORD *)a1 + 1;
  v11 = a1 + 1;
  if (!(_DWORD)result)
  {
    *(_QWORD *)&v30 = *v11;
    *(_QWORD *)((char *)&v30 + 7) = *(_QWORD *)((char *)a1 + 23);
    v21 = *((_BYTE *)a1 + 31);
    v22 = *a1;
    *((_QWORD *)a1 + 2) = 0;
    *((_QWORD *)a1 + 3) = 0;
    *v10 = 0;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v23 = *(__int128 *)((char *)a2 + 8);
    *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)v10 = v23;
    *a2 = v22;
    *((_QWORD *)a2 + 2) = v30;
    *(_QWORD *)((char *)a2 + 23) = *(_QWORD *)((char *)&v30 + 7);
    *((_BYTE *)a2 + 31) = v21;
    if (!(*a4)((__int128 *)a3, a2))
      return 1;
    *(_QWORD *)&v31 = *((_QWORD *)a2 + 2);
    *(_QWORD *)((char *)&v31 + 7) = *(_QWORD *)((char *)a2 + 23);
    v24 = *((_BYTE *)a2 + 31);
    v25 = *a2;
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 1) = 0;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    v26 = *(_OWORD *)(a3 + 8);
    *((_QWORD *)a2 + 3) = *(_QWORD *)(a3 + 24);
    *(__int128 *)((char *)a2 + 8) = v26;
    *(_OWORD *)a3 = v25;
    *(_QWORD *)(a3 + 23) = *(_QWORD *)((char *)&v31 + 7);
    *(_QWORD *)(a3 + 16) = v31;
    *(_BYTE *)(a3 + 31) = v24;
    return 2;
  }
  *(_QWORD *)&v27 = *v11;
  *(_QWORD *)((char *)&v27 + 7) = *(_QWORD *)((char *)a1 + 23);
  v12 = *((_BYTE *)a1 + 31);
  v13 = *a1;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  *v10 = 0;
  *(_QWORD *)a1 = *(_QWORD *)a3;
  v14 = *(_OWORD *)(a3 + 8);
  *((_QWORD *)a1 + 3) = *(_QWORD *)(a3 + 24);
  *(_OWORD *)v10 = v14;
  *(_OWORD *)a3 = v13;
  *(_QWORD *)(a3 + 23) = *(_QWORD *)((char *)&v27 + 7);
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 31) = v12;
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TextureInfo *,BOOL (*&)(TextureInfo const&,TextureInfo const&)>(__int128 *a1, unint64_t a2, uint64_t (**a3)(uint64_t *, __int128 *))
{
  unint64_t v4;
  __int128 *v6;
  __int128 *v7;
  int v8;
  __int128 v9;
  char v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  __int128 v16;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[15];
  uint64_t v22;

  v4 = a2;
  v22 = *MEMORY[0x1E0C80C00];
  v18 = *(_QWORD *)a1;
  v19 = *(__int128 *)((char *)a1 + 8);
  v20 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  if (((*a3)(&v18, (__int128 *)(a2 - 32)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 += 2;
    while (((*a3)(&v18, v6) & 1) == 0);
  }
  else
  {
    v7 = a1 + 2;
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= v4)
        break;
      v8 = (*a3)(&v18, v7);
      v7 = v6 + 2;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 32;
    while (((*a3)(&v18, (__int128 *)v4) & 1) != 0);
  }
  while ((unint64_t)v6 < v4)
  {
    v9 = *v6;
    *(_QWORD *)&v21[7] = *(_QWORD *)((char *)v6 + 23);
    *(_QWORD *)v21 = *((_QWORD *)v6 + 2);
    v10 = *((_BYTE *)v6 + 31);
    *((_QWORD *)v6 + 2) = 0;
    *((_QWORD *)v6 + 3) = 0;
    *((_QWORD *)v6 + 1) = 0;
    *(_QWORD *)v6 = *(_QWORD *)v4;
    v11 = *(_OWORD *)(v4 + 8);
    *((_QWORD *)v6 + 3) = *(_QWORD *)(v4 + 24);
    *(__int128 *)((char *)v6 + 8) = v11;
    *(_OWORD *)v4 = v9;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)v21;
    *(_QWORD *)(v4 + 23) = *(_QWORD *)&v21[7];
    *(_BYTE *)(v4 + 31) = v10;
    do
      v6 += 2;
    while (!(*a3)(&v18, v6));
    do
      v4 -= 32;
    while (((*a3)(&v18, (__int128 *)v4) & 1) != 0);
  }
  if (v6 - 2 == a1)
  {
    v15 = *((char *)v6 - 1);
    *((_QWORD *)v6 - 4) = v18;
    v13 = (uint64_t)v6 - 24;
    if (v15 < 0)
      operator delete(*(void **)v13);
  }
  else
  {
    v12 = (uint64_t *)a1 + 1;
    *(_QWORD *)a1 = *((_QWORD *)v6 - 4);
    if (*((char *)a1 + 31) < 0)
      operator delete((void *)*v12);
    v13 = (uint64_t)v6 - 24;
    v14 = *(__int128 *)((char *)v6 - 24);
    v12[2] = *((_QWORD *)v6 - 1);
    *(_OWORD *)v12 = v14;
    *((_BYTE *)v6 - 1) = 0;
    *((_BYTE *)v6 - 24) = 0;
    *((_QWORD *)v6 - 4) = v18;
  }
  v16 = v19;
  *(_QWORD *)(v13 + 16) = v20;
  *(_OWORD *)v13 = v16;
  return v6;
}

void sub_1DC8EED5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TextureInfo *,BOOL (*&)(TextureInfo const&,TextureInfo const&)>(uint64_t *a1, unint64_t a2, uint64_t (**a3)(uint64_t, uint64_t *))
{
  uint64_t v6;
  uint64_t *v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  char v13;
  __int128 v14;
  unint64_t v15;
  __int128 v16;
  int v17;
  __int128 v18;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[15];
  uint64_t v24;

  v6 = 0;
  v24 = *MEMORY[0x1E0C80C00];
  v20 = *a1;
  v22 = a1[3];
  v7 = a1 + 1;
  v21 = *(_OWORD *)(a1 + 1);
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  do
  {
    v8 = (*a3)((uint64_t)&a1[v6 + 4], &v20);
    v6 += 4;
  }
  while ((v8 & 1) != 0);
  v9 = (unint64_t)&a1[v6];
  if (v6 == 4)
  {
    do
    {
      if (v9 >= a2)
        break;
      a2 -= 32;
    }
    while (((*a3)(a2, &v20) & 1) == 0);
  }
  else
  {
    do
      a2 -= 32;
    while (!(*a3)(a2, &v20));
  }
  v10 = (unint64_t)&a1[v6];
  if (v9 < a2)
  {
    v11 = a2;
    do
    {
      v12 = *(_OWORD *)v10;
      *(_QWORD *)&v23[7] = *(_QWORD *)(v10 + 23);
      *(_QWORD *)v23 = *(_QWORD *)(v10 + 16);
      v13 = *(_BYTE *)(v10 + 31);
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v14 = *(_OWORD *)(v11 + 8);
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
      *(_OWORD *)(v10 + 8) = v14;
      *(_OWORD *)v11 = v12;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)v23;
      *(_QWORD *)(v11 + 23) = *(_QWORD *)&v23[7];
      *(_BYTE *)(v11 + 31) = v13;
      do
        v10 += 32;
      while (((*a3)(v10, &v20) & 1) != 0);
      do
        v11 -= 32;
      while (!(*a3)(v11, &v20));
    }
    while (v10 < v11);
  }
  if ((uint64_t *)(v10 - 32) == a1)
  {
    v17 = *(char *)(v10 - 1);
    *(_QWORD *)(v10 - 32) = v20;
    v15 = v10 - 24;
    if (v17 < 0)
      operator delete(*(void **)v15);
  }
  else
  {
    *a1 = *(_QWORD *)(v10 - 32);
    if (*((char *)a1 + 31) < 0)
      operator delete((void *)*v7);
    v15 = v10 - 24;
    v16 = *(_OWORD *)(v10 - 24);
    v7[2] = *(_QWORD *)(v10 - 8);
    *(_OWORD *)v7 = v16;
    *(_BYTE *)(v10 - 1) = 0;
    *(_BYTE *)(v10 - 24) = 0;
    *(_QWORD *)(v10 - 32) = v20;
  }
  v18 = v21;
  *(_QWORD *)(v15 + 16) = v22;
  *(_OWORD *)v15 = v18;
  return v10 - 32;
}

void sub_1DC8EEFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6;
  _BOOL8 result;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = (a2 - a1) >> 5;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)((__int128 *)(a2 - 32), (__int128 *)a1))
      {
        v23[0] = *(_QWORD *)(a1 + 16);
        *(_QWORD *)((char *)v23 + 7) = *(_QWORD *)(a1 + 23);
        v8 = *(_BYTE *)(a1 + 31);
        v9 = *(_OWORD *)a1;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 32);
        v10 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 8) = v10;
        *(_OWORD *)(a2 - 32) = v9;
        *(_QWORD *)(a2 - 9) = *(_QWORD *)((char *)v23 + 7);
        *(_QWORD *)(a2 - 16) = v23[0];
        *(_BYTE *)(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>((__int128 *)a1, (__int128 *)(a1 + 32), a2 - 32, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(a1, a1 + 32, a1 + 64, a2 - 32, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32, a3);
      return 1;
    default:
      v11 = (__int128 *)(a1 + 64);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>((__int128 *)a1, (__int128 *)(a1 + 32), a1 + 64, a3);
      v12 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v12, v11))
    {
      v23[0] = *(_QWORD *)v12;
      *(_OWORD *)&v23[1] = *(_OWORD *)(v12 + 8);
      v24 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = 0;
      v15 = v13;
      do
      {
        v16 = v15;
        v17 = a1 + v15;
        *(_QWORD *)(a1 + v15 + 96) = *(_QWORD *)(a1 + v15 + 64);
        v18 = a1 + v15 + 104;
        if (*(char *)(a1 + v15 + 127) < 0)
          operator delete(*(void **)v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 72);
        *(_QWORD *)(v18 + 16) = *(_QWORD *)(v17 + 88);
        *(_BYTE *)(v17 + 95) = 0;
        *(_BYTE *)(v17 + 72) = 0;
        if (v16 == -64)
        {
          *(_QWORD *)a1 = v23[0];
          goto LABEL_15;
        }
        v19 = (*a3)((__int128 *)v23, (__int128 *)(a1 + v16 + 32));
        v15 = v16 - 32;
      }
      while ((v19 & 1) != 0);
      v20 = a1 + v15;
      v21 = *(char *)(v20 + 127);
      *(_QWORD *)(v20 + 96) = v23[0];
      if (v21 < 0)
        operator delete(*(void **)(v20 + 104));
LABEL_15:
      v22 = a1 + v16;
      *(_OWORD *)(v22 + 72) = *(_OWORD *)&v23[1];
      *(_QWORD *)(v22 + 88) = v24;
      if (++v14 == 8)
        return v12 + 32 == a2;
    }
    v11 = (__int128 *)v12;
    v13 += 32;
    v12 += 32;
    if (v12 == a2)
      return 1;
  }
}

void sub_1DC8EF278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  uint64_t result;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 v14;
  char v15;
  __int128 v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>((__int128 *)a1, (__int128 *)a2, a3, a5);
  result = (*a5)((__int128 *)a4, (__int128 *)a3);
  if ((_DWORD)result)
  {
    v11 = *(_OWORD *)a3;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)&v20 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)((char *)&v20 + 7) = *(_QWORD *)(a3 + 23);
    v12 = *(_BYTE *)(a3 + 31);
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    v13 = *(_OWORD *)(a4 + 8);
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
    *(_OWORD *)(a3 + 8) = v13;
    *(_OWORD *)a4 = v11;
    *(_QWORD *)(a4 + 23) = *(_QWORD *)((char *)&v20 + 7);
    *(_QWORD *)(a4 + 16) = v20;
    *(_BYTE *)(a4 + 31) = v12;
    result = (*a5)((__int128 *)a3, (__int128 *)a2);
    if ((_DWORD)result)
    {
      v14 = *(_OWORD *)a2;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)&v21 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)((char *)&v21 + 7) = *(_QWORD *)(a2 + 23);
      v15 = *(_BYTE *)(a2 + 31);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      v16 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = v16;
      *(_OWORD *)a3 = v14;
      *(_QWORD *)(a3 + 23) = *(_QWORD *)((char *)&v21 + 7);
      *(_QWORD *)(a3 + 16) = v21;
      *(_BYTE *)(a3 + 31) = v15;
      result = (*a5)((__int128 *)a2, (__int128 *)a1);
      if ((_DWORD)result)
      {
        *(_QWORD *)&v22 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)((char *)&v22 + 7) = *(_QWORD *)(a1 + 23);
        v17 = *(_BYTE *)(a1 + 31);
        v18 = *(_OWORD *)a1;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v19 = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = v19;
        *(_OWORD *)a2 = v18;
        *(_QWORD *)(a2 + 23) = *(_QWORD *)((char *)&v22 + 7);
        *(_QWORD *)(a2 + 16) = v22;
        *(_BYTE *)(a2 + 31) = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  uint64_t result;
  __int128 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  char v17;
  __int128 v18;
  __int128 v19;
  char v20;
  __int128 v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(a1, a2, a3, a4, a6);
  result = (*a6)((__int128 *)a5, (__int128 *)a4);
  if ((_DWORD)result)
  {
    v13 = *(_OWORD *)a4;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)&v25 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)((char *)&v25 + 7) = *(_QWORD *)(a4 + 23);
    v14 = *(_BYTE *)(a4 + 31);
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    v15 = *(_OWORD *)(a5 + 8);
    *(_QWORD *)(a4 + 24) = *(_QWORD *)(a5 + 24);
    *(_OWORD *)(a4 + 8) = v15;
    *(_OWORD *)a5 = v13;
    *(_QWORD *)(a5 + 23) = *(_QWORD *)((char *)&v25 + 7);
    *(_QWORD *)(a5 + 16) = v25;
    *(_BYTE *)(a5 + 31) = v14;
    result = (*a6)((__int128 *)a4, (__int128 *)a3);
    if ((_DWORD)result)
    {
      v16 = *(_OWORD *)a3;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)&v26 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)((char *)&v26 + 7) = *(_QWORD *)(a3 + 23);
      v17 = *(_BYTE *)(a3 + 31);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      v18 = *(_OWORD *)(a4 + 8);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
      *(_OWORD *)(a3 + 8) = v18;
      *(_OWORD *)a4 = v16;
      *(_QWORD *)(a4 + 23) = *(_QWORD *)((char *)&v26 + 7);
      *(_QWORD *)(a4 + 16) = v26;
      *(_BYTE *)(a4 + 31) = v17;
      result = (*a6)((__int128 *)a3, (__int128 *)a2);
      if ((_DWORD)result)
      {
        v19 = *(_OWORD *)a2;
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)&v27 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)((char *)&v27 + 7) = *(_QWORD *)(a2 + 23);
        v20 = *(_BYTE *)(a2 + 31);
        *(_QWORD *)(a2 + 24) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        v21 = *(_OWORD *)(a3 + 8);
        *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
        *(_OWORD *)(a2 + 8) = v21;
        *(_OWORD *)a3 = v19;
        *(_QWORD *)(a3 + 23) = *(_QWORD *)((char *)&v27 + 7);
        *(_QWORD *)(a3 + 16) = v27;
        *(_BYTE *)(a3 + 31) = v20;
        result = (*a6)((__int128 *)a2, (__int128 *)a1);
        if ((_DWORD)result)
        {
          *(_QWORD *)&v28 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)((char *)&v28 + 7) = *(_QWORD *)(a1 + 23);
          v22 = *(_BYTE *)(a1 + 31);
          v23 = *(_OWORD *)a1;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v24 = *(_OWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 8) = v24;
          *(_OWORD *)a2 = v23;
          *(_QWORD *)(a2 + 23) = *(_QWORD *)((char *)&v28 + 7);
          *(_QWORD *)(a2 + 16) = v28;
          *(_BYTE *)(a2 + 31) = v22;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*,TextureInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (**a4)(uint64_t, uint64_t), __n128 a5)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  __int128 v22;

  if (a1 != a2)
  {
    v7 = a2;
    v9 = a2 - a1;
    v10 = (a2 - a1) >> 5;
    if (a2 - a1 >= 33)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (_QWORD *)(a1 + 32 * v11);
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(a1, a4, v10, v13);
        v13 -= 4;
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a4)(v15, a1, a5))
        {
          *(_QWORD *)&v22 = *(_QWORD *)(v15 + 16);
          *(_QWORD *)((char *)&v22 + 7) = *(_QWORD *)(v15 + 23);
          v16 = *(_BYTE *)(v15 + 31);
          v17 = *(_OWORD *)v15;
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)(v15 + 24) = 0;
          *(_QWORD *)(v15 + 8) = 0;
          *(_QWORD *)v15 = *(_QWORD *)a1;
          v18 = *(_OWORD *)(a1 + 8);
          *(_QWORD *)(v15 + 24) = *(_QWORD *)(a1 + 24);
          *(_OWORD *)(v15 + 8) = v18;
          *(_OWORD *)a1 = v17;
          *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)&v22 + 7);
          *(_QWORD *)(a1 + 16) = v22;
          *(_BYTE *)(a1 + 31) = v16;
          a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(a1, a4, v10, (_QWORD *)a1);
        }
        v15 += 32;
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 >= 33)
    {
      v19 = (unint64_t)v9 >> 5;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(TextureInfo const&,TextureInfo const&),TextureInfo*>(a1, v7, a4, v19);
        v7 -= 32;
      }
      while (v19-- > 2);
    }
    return v14;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(uint64_t a1, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __n128 result;
  _QWORD *v15;
  void **v16;
  void **v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - a1) >> 5)
    {
      v10 = ((uint64_t)a4 - a1) >> 4;
      v11 = v10 + 1;
      v12 = (_QWORD *)(a1 + 32 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(v12, v12 + 4))
      {
        v12 += 4;
        v11 = v13;
      }
      if ((((uint64_t (*)(_QWORD *, _QWORD *))*a2)(v12, v5) & 1) == 0)
      {
        v21 = *v5;
        v22 = *(__n128 *)(v5 + 1);
        v23 = v5[3];
        v5[1] = 0;
        v5[2] = 0;
        v5[3] = 0;
        do
        {
          v15 = v12;
          *v5 = *v12;
          v16 = (void **)(v5 + 1);
          if (*((char *)v5 + 31) < 0)
            operator delete(*v16);
          v17 = (void **)(v15 + 1);
          v18 = *(_OWORD *)(v15 + 1);
          v5[3] = v15[3];
          *(_OWORD *)v16 = v18;
          *((_BYTE *)v15 + 31) = 0;
          *((_BYTE *)v15 + 8) = 0;
          if (v7 < v11)
          {
            *v15 = v21;
            goto LABEL_20;
          }
          v19 = (2 * v11) | 1;
          v12 = (_QWORD *)(a1 + 32 * v19);
          v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            v11 = v19;
          }
          else if ((*a2)(a1 + 32 * v19, v12 + 4))
          {
            v12 += 4;
          }
          else
          {
            v11 = v19;
          }
          v5 = v15;
        }
        while (!(*a2)(v12, &v21));
        v20 = *((char *)v15 + 31);
        *v15 = v21;
        if (v20 < 0)
          operator delete(*v17);
LABEL_20:
        result = v22;
        v15[3] = v23;
        *(__n128 *)v17 = result;
      }
    }
  }
  return result;
}

void sub_1DC8EF9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(TextureInfo const&,TextureInfo const&),TextureInfo*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  __int128 v13;
  _BYTE v14[15];

  if (a4 >= 2)
  {
    v8 = *(_QWORD *)a1;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v14[7] = *(_QWORD *)(a1 + 23);
    v9 = *(_BYTE *)(a1 + 31);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v10 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(a1, a3, a4);
    v11 = v10;
    if (v10 == a2 - 32)
    {
      *(_QWORD *)v10 = v8;
      if (*(char *)(v10 + 31) < 0)
        operator delete(*(void **)(v10 + 8));
      *(_QWORD *)(v11 + 8) = v7;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)v14;
      *(_QWORD *)(v11 + 23) = *(_QWORD *)&v14[7];
      *(_BYTE *)(v11 + 31) = v9;
    }
    else
    {
      *(_QWORD *)v10 = *(_QWORD *)(a2 - 32);
      v12 = (void **)(v10 + 8);
      if (*(char *)(v10 + 31) < 0)
        operator delete(*v12);
      v13 = *(_OWORD *)(a2 - 24);
      *(_QWORD *)(v11 + 24) = *(_QWORD *)(a2 - 8);
      *(_OWORD *)v12 = v13;
      *(_QWORD *)(a2 - 32) = v8;
      *(_QWORD *)(a2 - 24) = v7;
      *(_QWORD *)(a2 - 16) = *(_QWORD *)v14;
      *(_QWORD *)(a2 - 9) = *(_QWORD *)&v14[7];
      *(_BYTE *)(a2 - 1) = v9;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(a1, v11 + 32, (uint64_t (**)(_QWORD *, uint64_t *))a3, (v11 + 32 - a1) >> 5);
    }
  }
}

void sub_1DC8EFB4C(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  __int128 v13;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 32 * v6 + 32;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3 && (*a2)(v9, v9 + 32))
    {
      v9 += 32;
      v6 = v11;
    }
    *(_QWORD *)a1 = *(_QWORD *)v9;
    v12 = (void **)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      operator delete(*v12);
    v13 = *(_OWORD *)(v9 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v9 + 24);
    *(_OWORD *)v12 = v13;
    *(_BYTE *)(v9 + 31) = 0;
    *(_BYTE *)(v9 + 8) = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD *, uint64_t *), uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  double result;
  _QWORD *v12;
  void **v13;
  void **v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v8 = v4 >> 1;
    v9 = (_QWORD *)(a1 + 32 * (v4 >> 1));
    v10 = (_QWORD *)(a2 - 32);
    if ((*a3)(v9, (uint64_t *)(a2 - 32)))
    {
      v17 = *(_QWORD *)(a2 - 32);
      v18 = *(_OWORD *)(a2 - 24);
      v19 = *(_QWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 24) = 0;
      *(_QWORD *)(a2 - 16) = 0;
      *(_QWORD *)(a2 - 8) = 0;
      do
      {
        v12 = v9;
        *v10 = *v9;
        v13 = (void **)(v10 + 1);
        if (*((char *)v10 + 31) < 0)
          operator delete(*v13);
        v14 = (void **)(v12 + 1);
        v15 = *(_OWORD *)(v12 + 1);
        v10[3] = v12[3];
        *(_OWORD *)v13 = v15;
        *((_BYTE *)v12 + 31) = 0;
        *((_BYTE *)v12 + 8) = 0;
        if (!v8)
        {
          *v12 = v17;
          goto LABEL_11;
        }
        v8 = (v8 - 1) >> 1;
        v9 = (_QWORD *)(a1 + 32 * v8);
        v10 = v12;
      }
      while (((*a3)(v9, &v17) & 1) != 0);
      v16 = *((char *)v12 + 31);
      *v12 = v17;
      if (v16 < 0)
        operator delete(*v14);
LABEL_11:
      result = *(double *)&v18;
      *(_OWORD *)v14 = v18;
      v12[3] = v19;
    }
  }
  return result;
}

void sub_1DC8EFD68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<MaxRectTexturePacker>::shared_ptr[abi:ne180100]<MaxRectTexturePacker,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1EA500798;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DC8EFDD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MaxRectTexturePacker *,std::shared_ptr<MaxRectTexturePacker>::__shared_ptr_default_delete<MaxRectTexturePacker,MaxRectTexturePacker>,std::allocator<MaxRectTexturePacker>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

uint64_t std::__shared_ptr_pointer<MaxRectTexturePacker *,std::shared_ptr<MaxRectTexturePacker>::__shared_ptr_default_delete<MaxRectTexturePacker,MaxRectTexturePacker>,std::allocator<MaxRectTexturePacker>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MaxRectTexturePacker *,std::shared_ptr<MaxRectTexturePacker>::__shared_ptr_default_delete<MaxRectTexturePacker,MaxRectTexturePacker>,std::allocator<MaxRectTexturePacker>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void SKCSpriteNode::SKCSpriteNode(SKCSpriteNode *this)
{
  uint64_t v1;

  SKCNode::SKCNode(this);
  *(_QWORD *)v1 = off_1EA500810;
  *(_QWORD *)(v1 + 560) = 0;
  *(_DWORD *)(v1 + 568) = 0;
  *(_OWORD *)(v1 + 576) = xmmword_1DC922FB0;
  *(_OWORD *)(v1 + 592) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_DWORD *)(v1 + 624) = 2;
  *(_QWORD *)(v1 + 632) = 0;
}

void SKCSpriteNode::getBatchInfo(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id *v6;
  int BackingBlendMode;
  int v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  __int128 v20;

  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 4) = 0x300000000;
  *(_OWORD *)(a3 + 16) = 0u;
  v6 = (id *)(a3 + 16);
  *(_DWORD *)(a3 + 12) = 1;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 60) = 0u;
  *(_DWORD *)(a3 + 4) = (**(uint64_t (***)(uint64_t))a1)(a1);
  BackingBlendMode = SKBlendModeGetBackingBlendMode(*(SKBlendMode *)(a1 + 288));
  *(_DWORD *)(a3 + 8) = 3;
  *(_DWORD *)(a3 + 12) = BackingBlendMode;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)(a2 + 168);
  v8 = *(_DWORD *)(a1 + 560);
  *(_DWORD *)(a3 + 68) = v8;
  if (v8)
  {
    v20 = 0uLL;
    SKCNode::resolveWorldPositionRotationAndScale((_OWORD *)a1, 0, &v20, 0);
    *(_DWORD *)(a3 + 72) = DWORD2(v20);
  }
  v9 = *(void **)(a1 + 600);
  if (v9)
  {
    objc_msgSend(v9, "_backingTexture");
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    *(_QWORD *)(a3 + 32) = v20;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v13 = objc_msgSend(*(id *)(a1 + 600), "filteringMode");
    v14 = 464;
    if (v13 == 1)
      v14 = 480;
    *(_QWORD *)(a3 + 48) = *(_QWORD *)(a2 + v14);
  }
  v15 = *(void **)(a1 + 608);
  if (v15)
  {
    objc_msgSend(v15, "_backingTexture");
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    *(_QWORD *)(a3 + 40) = v20;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  v19 = *(void **)(a1 + 592);
  if (v19)
  {
    if ((*(_BYTE *)(a2 + 581) & 1) == 0)
      objc_storeStrong(v6, v19);
  }
}

void sub_1DC8F004C(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

void SKCSpriteNode::setSubdivisionLevels(SKCNode *this, int a2)
{
  *((_DWORD *)this + 156) = a2;
  SKCNode::setDirty(this);
}

void SKCSpriteNode::setWarpGeometry(id *this, SKWarpGeometry *a2)
{
  objc_storeStrong(this + 77, a2);
  std::shared_ptr<jet_buffer_pool>::reset[abi:ne180100](this + 32);
  SKCNode::setDirty((SKCNode *)this);
}

uint64_t SKCSpriteNode::getMaxBatchRenderElementCount(SKCSpriteNode *this, SKCRenderInfo *a2)
{
  void *v3;
  id v4;
  int v5;
  double v6;
  uint64_t v7;

  v3 = (void *)*((_QWORD *)this + 77);
  if (v3 && (objc_msgSend(v3, "isIdentityWarp") & 1) == 0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v4 = *((id *)this + 77);
    v5 = objc_msgSend(v4, "numberOfColumns");
    v6 = (double)(int)(objc_msgSend(v4, "numberOfRows") * v5);
    v7 = (exp2((double)(*((_DWORD *)this + 156) + 1)+ (double)(*((_DWORD *)this + 156) + 1))* v6);

  }
  else if (SKCSpriteNode::needsNinePart((float32x4_t *)this))
  {
    return 36;
  }
  else
  {
    return 4;
  }
  return v7;
}

void sub_1DC8F0164(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL SKCSpriteNode::needsWarp(SKCSpriteNode *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 77);
  return v1 && !objc_msgSend(v1, "isIdentityWarp");
}

BOOL SKCSpriteNode::needsNinePart(float32x4_t *this)
{
  void *v2;
  float32x4_t v3;
  int16x4_t v4;
  _BOOL8 result;

  v2 = (void *)this[38].i64[1];
  result = 0;
  if (!v2 || objc_msgSend(v2, "isIdentityWarp"))
  {
    v3 = this[36];
    v4 = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_1DC922FB0, v3));
    v3.i32[0] = vmovn_s32(vcgtq_f32(v3, (float32x4_t)xmmword_1DC922FB0)).u32[0];
    v3.i32[1] = v4.i32[1];
    if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)v3.f32, 0xFuLL))) & 1) != 0)
      return 1;
  }
  return result;
}

BOOL SKCSpriteNode::canAppendToCurrentBatch(uint64_t a1, uint64_t a2)
{
  int v4;
  void *v5;
  uint64_t v6;
  _BOOL8 v7;
  void *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  _QWORD v13[2];

  if (*(_DWORD *)(a2 + 592) != 3)
    return 0;
  v4 = *(_DWORD *)(a2 + 596);
  if (v4 != SKBlendModeGetBackingBlendMode(*(SKBlendMode *)(a1 + 288))
    || *(_QWORD *)(a2 + 608) != *(_QWORD *)(a2 + 168)
    || *(_QWORD *)(a2 + 600) != *(_QWORD *)(a1 + 592)
    || *(_DWORD *)(a2 + 652) != *(_DWORD *)(a1 + 560))
  {
    return 0;
  }
  v5 = *(void **)(a1 + 600);
  if (v5)
  {
    objc_msgSend(v5, "_backingTexture");
    v6 = v13[0];
  }
  else
  {
    v6 = 0;
    v13[0] = 0;
    v13[1] = 0;
  }
  if (*(_QWORD *)(a2 + 616) == v6)
  {
    v9 = *(void **)(a1 + 608);
    if (v9)
    {
      objc_msgSend(v9, "_backingTexture");
      v10 = v12[0];
    }
    else
    {
      v10 = 0;
      v12[0] = 0;
      v12[1] = 0;
    }
    v7 = 0;
    if (*(_QWORD *)(a2 + 624) == v10)
    {
      if (!*(_DWORD *)(a2 + 652)
        || (v11 = 0uLL,
            SKCNode::resolveWorldPositionRotationAndScale((_OWORD *)a1, 0, &v11, 0),
            *(float *)(a2 + 656) == *((float *)&v11 + 2)))
      {
        v7 = 1;
      }
    }
    std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)v12);
  }
  else
  {
    v7 = 0;
  }
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)v13);
  return v7;
}

void sub_1DC8F0344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void SKCSpriteNode::outline(SKCSpriteNode *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  id v10;
  double v11;
  int v12;
  double v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  double v29;
  double v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  double v43;
  __int128 v44;
  double v45;
  __int128 v46;
  const __CFString *v47;
  _QWORD v48[2];

  v48[1] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 32);
  if (v4)
  {
    v5 = *((_QWORD *)this + 33);
    *a2 = v4;
    a2[1] = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    return;
  }
  v8 = (void *)*((_QWORD *)this + 75);
  if (!v8)
  {
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  v9 = (void *)*((_QWORD *)this + 77);
  if (v9)
  {
    if (!objc_msgSend(v9, "isIdentityWarp"))
    {
      *(double *)&v14 = (*(double (**)(SKCSpriteNode *))(*(_QWORD *)this + 104))(this);
      v42 = v15;
      v44 = v14;
      v40 = v17;
      v41 = v16;
      v18 = MEMORY[0x1E0C83FF0];
      v19 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
      *((_OWORD *)this + 24) = *MEMORY[0x1E0C83FF0];
      *((_OWORD *)this + 25) = v19;
      v20 = *(_OWORD *)(v18 + 48);
      *((_OWORD *)this + 26) = *(_OWORD *)(v18 + 32);
      *((_OWORD *)this + 27) = v20;
      v45 = (*(double (**)(SKCSpriteNode *))(*(_QWORD *)this + 120))(this);
      v38 = v22;
      v39 = v21;
      v23 = (void *)objc_opt_new();
      v47 = CFSTR("doNotRenderChildNodes");
      v48[0] = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v48, &v47, 1);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "textureFromNode:withOptions:", *((_QWORD *)this + 1), v24);
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = (void *)*((_QWORD *)this + 79);
      *((_QWORD *)this + 79) = v25;

      *((_OWORD *)this + 24) = v44;
      *((_OWORD *)this + 25) = v42;
      *((_OWORD *)this + 26) = v41;
      *((_OWORD *)this + 27) = v40;
      v27 = *((id *)this + 79);

      HIDWORD(v11) = DWORD1(v38);
      v43 = COERCE_DOUBLE(vadd_f32((float32x2_t)__PAIR64__(DWORD1(v38), v39), (float32x2_t)__PAIR64__(DWORD1(v38), v39)));
      HIDWORD(v13) = HIDWORD(v45);
      v12 = HIDWORD(v45);
      v10 = v27;
      goto LABEL_13;
    }
    v8 = (void *)*((_QWORD *)this + 75);
  }
  v10 = v8;
  v13 = *((double *)this + 42);
  v43 = v13;
  v12 = 0;
  LODWORD(v13) = 0;
  v45 = v13;
LABEL_13:
  LODWORD(v13) = 998277249;
  LODWORD(v11) = 1.0;
  +[SKPhysicsGrid gridFromTexture:alphaThreshold:accuracy:](SKPhysicsGrid, "gridFromTexture:alphaThreshold:accuracy:", v10, v13, v11, v38, v39);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = v28;
  if (v28)
  {
    LODWORD(v30) = HIDWORD(v43);
    LODWORD(v29) = v12;
    objc_msgSend(v28, "pathFromOutlineWithSmoothingThreshold:bounds:", 1.0, v45, v29, v43, v30);
  }
  else
  {
    v46 = 0uLL;
  }
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 256, &v46);
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = *((_QWORD *)this + 33);
  *a2 = *((_QWORD *)this + 32);
  a2[1] = v35;
  if (v35)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }

}

void sub_1DC8F05F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double SKCSpriteNode::getBoundingBox(SKCSpriteNode *this)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  void *v6;
  char v7;
  float32x4_t v8;
  float32x4_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  float v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char isKindOfClass;
  id v19;
  uint64_t v20;
  uint64_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  __int128 v25;
  __int128 v26;
  float32x4_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[4];
  __int128 v41;

  v36 = xmmword_1DC9223D0;
  *(double *)v2.i64 = (*(double (**)(SKCSpriteNode *))(*(_QWORD *)this + 104))(this);
  v34 = v5;
  v35 = v2;
  v6 = (void *)*((_QWORD *)this + 77);
  if (v6 && (v32 = v4, v33 = v3, v7 = objc_msgSend(v6, "isIdentityWarp"), v4 = v32, v3 = v33, (v7 & 1) == 0))
  {
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v4 = v32;
    v3 = v33;
    v12 = xmmword_1DC9223B0;
    v15 = xmmword_1DC9223C0;
    v11 = SKCBoundingBoxEmpty;
    if ((isKindOfClass & 1) != 0)
    {
      v19 = *((id *)this + 77);
      v20 = objc_msgSend(v19, "destPositions");
      v21 = 0;
      v22 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
      v23 = (float32x2_t)0x80000000800000;
      while (objc_msgSend(v19, "vertexCount") > v21)
      {
        v24 = *(float32x2_t *)(v20 + 8 * v21);
        v22 = vminnm_f32(v22, v24);
        v23 = vmaxnm_f32(v23, v24);
        ++v21;
      }
      v26 = *((_OWORD *)this + 21);
      v25 = *((_OWORD *)this + 22);
      *(float32x2_t *)v27.f32 = vmul_f32(vsub_f32(v22, *(float32x2_t *)&v25), *(float32x2_t *)&v26);
      *(float32x2_t *)&v27.u32[2] = vsub_f32(vmul_f32(vsub_f32(v23, *(float32x2_t *)&v25), *(float32x2_t *)&v26), *(float32x2_t *)v27.f32);
      *(double *)&v28 = SKCBoundingBoxMake(v27);
      v37 = v28;
      v38 = v29;
      v39 = v30;
      v36 = v31;

      v4 = v32;
      v3 = v33;
      v12 = v38;
      v15 = v39;
      v11 = v37;
    }
  }
  else
  {
    v8.i64[0] = 0x3F0000003F000000;
    v8.i64[1] = 0x3F0000003F000000;
    v9 = *((float32x4_t *)this + 21);
    *(_QWORD *)&v11 = vmulq_f32(vsubq_f32(v8, *((float32x4_t *)this + 22)), v9).u64[0];
    v10 = xmmword_1DC9223B0;
    *((_QWORD *)&v11 + 1) = *((_QWORD *)&SKCBoundingBoxEmpty + 1);
    *(float *)&v10 = 0.5 * v9.f32[0];
    v12 = v10;
    v13 = vmuls_lane_f32(0.5, *(float32x2_t *)v9.f32, 1);
    v14 = xmmword_1DC9223C0;
    *((float *)&v14 + 1) = v13;
    v15 = v14;
  }
  v16 = 0;
  v40[0] = v11;
  v40[1] = v12;
  v40[2] = v15;
  v40[3] = v36;
  do
  {
    *(__int128 *)((char *)&v41 + v16 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, COERCE_FLOAT(v40[v16])), v34, *(float32x2_t *)&v40[v16], 1), v3, (float32x4_t)v40[v16], 2), v4, (float32x4_t)v40[v16], 3);
    ++v16;
  }
  while (v16 != 4);
  return *(double *)&v41;
}

void sub_1DC8F07EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SKCSpriteNode::addBatchRenderElements(SKCSpriteNode *this, float32x4_t *a2)
{
  uint64_t result;
  void *v10;
  float v11;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MaxX;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  int32x2_t v22;
  float64x2_t v23;
  float32x2_t v24;
  void *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int32x2_t v30;
  float32x4_t v31;
  float32x4_t v32;
  unsigned int v33;
  float v34;
  float32x4_t v36;
  int8x8_t v39;
  int8x8_t v40;
  CGFloat v41;
  unint64_t *v42;
  unint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  void *v47;
  id v48;
  unsigned int v49;
  uint64_t v50;
  CGFloat v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  float32x2_t v55;
  int8x8_t v56;
  int8x8_t v57;
  float32x2_t v58;
  float32x2_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  __n128 v78;
  float32x4_t v79;
  __n128 v80;
  float32x4_t v81;
  int v82;
  uint64_t v83;
  double v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  double v94;
  double v95;
  double *v96;
  double v97;
  double v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  float32x4_t v102;
  int16x8_t v103;
  unsigned __int32 v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  float32x4_t v108;
  float32x4_t v109;
  int32x2_t v110;
  uint64_t v111;
  float32x4_t v112;
  int v113;
  int32x2_t v114;
  uint64_t v115;
  CGFloat MaxY;
  float32x4_t v117;
  float32x2_t v118;
  int32x2_t v119;
  float32x2_t v120;
  CGFloat MinY;
  float v122;
  float32x4_t v123;
  float32x2_t v124;
  float32x4_t v125;
  float32x2_t v126;
  float32x4_t v127;
  _QWORD *v128;
  CGPoint v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  CGRect v134;
  CGRect v135;
  CGRect v136;
  CGRect v137;

  v133 = *MEMORY[0x1E0C80C00];
  if (SKCSpriteNode::needsNinePart((float32x4_t *)this))
  {
    SKCSpriteNode::addBatchRenderElements_NinePart((uint64_t)this, a2);
    return 36;
  }
  else
  {
    __asm { FMOV            V3.4S, #1.0 }
    v10 = (void *)*((_QWORD *)this + 75);
    v108 = vminnmq_f32(vmaxnmq_f32(*((float32x4_t *)this + 19), (float32x4_t)0), _Q3);
    if (v10)
    {
      v112 = _Q3;
      v11 = *((float *)this + 80);
      objc_msgSend(v10, "textureRect");
      x = v134.origin.x;
      y = v134.origin.y;
      width = v134.size.width;
      height = v134.size.height;
      MinX = CGRectGetMinX(v134);
      v135.origin.x = x;
      v135.origin.y = y;
      v135.size.width = width;
      v135.size.height = height;
      MaxX = CGRectGetMaxX(v135);
      v136.origin.x = x;
      v136.origin.y = y;
      v136.size.width = width;
      v136.size.height = height;
      MinY = CGRectGetMinY(v136);
      v137.origin.x = x;
      v137.origin.y = y;
      v137.size.width = width;
      v137.size.height = height;
      MaxY = CGRectGetMaxY(v137);
      objc_msgSend(*((id *)this + 75), "cropOffset");
      v129.x = v18;
      v129.y = v19;
      v126 = sk_vector_make((float64x2_t *)&v129);
      objc_msgSend(*((id *)this + 75), "cropScale");
      v129.x = v20;
      v129.y = v21;
      v22 = (int32x2_t)sk_vector_make((float64x2_t *)&v129);
      v124 = (float32x2_t)v22;
      *(float *)v22.i32 = MinX;
      v110 = v22;
      *(float *)v22.i32 = MaxX;
      v119 = v22;
      v23.f64[0] = MinY;
      v23.f64[1] = MaxY;
      v24 = vcvt_f32_f64(v23);
      v25 = (void *)*((_QWORD *)this + 75);
      if (v25)
      {
        objc_msgSend(v25, "_backingTexture");
        if (*(_QWORD *)&v129.x
          && (*(unsigned int (**)(_QWORD))(**(_QWORD **)&v129.x + 24))(*(_QWORD *)&v129.x) == 1)
        {
          v26 = (***(uint64_t (****)(_QWORD))&v129.x)(*(_QWORD *)&v129.x);
          v27 = (***(uint64_t (****)(_QWORD))&v129.x)(*(_QWORD *)&v129.x);
          v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v129.x + 8))(*(_QWORD *)&v129.x);
          v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v129.x + 8))(*(_QWORD *)&v129.x);
          v30.i32[1] = v110.i32[1];
          *(float *)v30.i32 = *(float *)v110.i32 * (float)v26;
          v110 = v30;
          v30.i32[1] = v119.i32[1];
          *(float *)v30.i32 = *(float *)v119.i32 * (float)v27;
          v119 = v30;
          v24 = vmul_f32(v24, vcvt_f32_u32((uint32x2_t)__PAIR64__(v29, v28)));
        }
      }
      else
      {
        v129.x = 0.0;
        v129.y = 0.0;
      }
      v33 = objc_msgSend(*((id *)this + 75), "isFlipped");
      v34 = fminf(fmaxf(v11, 0.0), 1.0);
      __asm { FMOV            V0.4S, #-1.0 }
      v36 = vaddq_f32(v108, _Q0);
      __asm
      {
        FMOV            V1.4S, #1.0
        FMOV            V7.2S, #1.0
      }
      v39 = (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v33), 0x1FuLL));
      v40 = (int8x8_t)vrev64_s32((int32x2_t)v24);
      v41 = v129.y;
      *(float32x2_t *)v32.f32 = v124;
      *(float32x2_t *)v31.f32 = v126;
      if (*(_QWORD *)&v129.y)
      {
        v42 = (unint64_t *)(*(_QWORD *)&v129.y + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          v109 = _Q1;
          v122 = v34;
          v115 = _D7;
          v117 = v36;
          (*(void (**)(CGFloat))(**(_QWORD **)&v41 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v41));
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v41);
          _D7 = v115;
          v36 = v117;
          v34 = v122;
          *(float32x2_t *)v32.f32 = v124;
          *(float32x2_t *)v31.f32 = v126;
          _Q1 = v109;
        }
      }
      v108 = vmlaq_n_f32(_Q1, v36, v34);
      v31.i64[1] = 0;
      v32.i64[1] = _D7;
      v114 = (int32x2_t)vbsl_s8(v39, (int8x8_t)v24, v40);
      _Q3 = v112;
    }
    else
    {
      v114 = (int32x2_t)1065353216;
      v110 = 0;
      v119 = (int32x2_t)COERCE_UNSIGNED_INT(1.0);
      v31 = 0uLL;
      v32 = _Q3;
    }
    v44 = *((float32x4_t *)this + 21);
    v45 = *((float32x4_t *)this + 22);
    v44.i64[1] = _Q3.i64[1];
    v45.i64[1] = 0;
    v46.i64[0] = 0x3F0000003F000000;
    v46.i64[1] = 0x3F0000003F000000;
    v127 = v45;
    v123 = vmulq_f32(v32, v44);
    v125 = vaddq_f32(v31, vdivq_f32(vmulq_f32(vsubq_f32(_Q3, v32), vsubq_f32(v46, v45)), v32));
    v47 = (void *)*((_QWORD *)this + 77);
    if (v47
      && (objc_msgSend(v47, "isIdentityWarp") & 1) == 0
      && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      v48 = *((id *)this + 77);
      if (objc_msgSend(*((id *)this + 75), "isRotated"))
        v49 = -1;
      else
        v49 = 0;
      v50 = a2->u32[0];
      *(_QWORD *)&v51 = a2[1].i64[1] + 16 * v50;
      v128 = (_QWORD *)(a2[1].i64[0] + 8 * v50);
      v129.x = v51;
      v113 = objc_msgSend(v48, "numberOfColumns");
      v52 = objc_msgSend(v48, "numberOfRows");
      v107 = objc_msgSend(v48, "sourcePositions");
      v106 = objc_msgSend(v48, "destPositions");
      v105 = v48;
      if (v52 < 1)
      {
        v54 = 0;
      }
      else
      {
        v53 = 0;
        v54 = 0;
        v59.i32[0] = 0;
        v55.i32[1] = 0;
        v55.f32[0] = *(float *)v119.i32 - *(float *)v110.i32;
        v56 = (int8x8_t)vdup_lane_s32(v114, 1);
        v57 = (int8x8_t)vdup_n_s32(v49);
        v58 = (float32x2_t)vbsl_s8(v57, (int8x8_t)vzip1_s32(v110, v114), (int8x8_t)__PAIR64__(v114.u32[1], v110.u32[0]));
        v59.i32[1] = vsub_f32((float32x2_t)vbsl_s8(v57, v56, (int8x8_t)v114), (float32x2_t)vbsl_s8(v57, (int8x8_t)v114, v56)).u32[0];
        v111 = v52;
        v60 = 8 * (v113 + 1);
        v118 = v55;
        v120 = v59;
        do
        {
          if (v113 <= 0)
          {
            v61 = v53 + 1;
          }
          else
          {
            v61 = v53 + 1;
            v62 = v60 * (v53 + 1);
            v63 = v60 * v53;
            v65 = v113;
            v64 = v106;
            v66 = v107;
            do
            {
              v67.i64[0] = *(_QWORD *)(v64 + v63);
              v68.i64[0] = *(_QWORD *)(v64 + v63 + 8);
              v67.i64[1] = 0x3F80000000000000;
              v68.i64[1] = 0x3F80000000000000;
              v70.i64[0] = *(_QWORD *)(v64 + v62);
              v69.i64[0] = *(_QWORD *)(v64 + v62 + 8);
              v69.i64[1] = 0x3F80000000000000;
              v70.i64[1] = 0x3F80000000000000;
              v71 = a2[2];
              v72 = a2[3];
              v73 = a2[4];
              v74 = a2[5];
              v75 = vmulq_f32(v123, vaddq_f32(v125, vsubq_f32(v67, v127)));
              v76 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v71, v75.f32[0]), v72, *(float32x2_t *)v75.f32, 1), v73, v75, 2), v74, v75, 3);
              v77 = vmulq_f32(v123, vaddq_f32(v125, vsubq_f32(v68, v127)));
              v78 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v71, v77.f32[0]), v72, *(float32x2_t *)v77.f32, 1), v73, v77, 2), v74, v77, 3);
              v79 = vmulq_f32(v123, vaddq_f32(v125, vsubq_f32(v69, v127)));
              v80 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v71, v79.f32[0]), v72, *(float32x2_t *)v79.f32, 1), v73, v79, 2), v74, v79, 3);
              v81 = vmulq_f32(v123, vaddq_f32(v125, vsubq_f32(v70, v127)));
              v82 = add_subdivs(&v129, &v128, *((_DWORD *)this + 156), v76, v78, v80, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v71, v81.f32[0]), v72, *(float32x2_t *)v81.f32, 1), v73, v81, 2), v74, v81, 3), vmla_lane_f32(vmla_n_f32(v58, v55, COERCE_FLOAT(*(_QWORD *)(v66 + v63))), v59, *(float32x2_t *)(v66 + v63),
                        1),
                      vmla_lane_f32(vmla_n_f32(v58, v55, COERCE_FLOAT(*(_QWORD *)(v66 + v63 + 8))), v59, *(float32x2_t *)(v66 + v63 + 8), 1), vmla_lane_f32(vmla_n_f32(v58, v55, COERCE_FLOAT(*(_QWORD *)(v66 + v62 + 8))), v59, *(float32x2_t *)(v66 + v62 + 8), 1), vmla_lane_f32(vmla_n_f32(v58, v55, COERCE_FLOAT(*(_QWORD *)(v66 + v62))), v59, *(float32x2_t *)(v66 + v62), 1));
              v55 = v118;
              v59 = v120;
              v54 += v82;
              v66 += 8;
              v64 += 8;
              --v65;
            }
            while (v65);
          }
          v53 = v61;
        }
        while (v61 != v111);
      }

    }
    else
    {
      v83 = 0;
      v84 = COERCE_DOUBLE(vzip1_s32(v119, v114));
      v129 = (CGPoint)xmmword_1DC922FC0;
      v130 = unk_1DC922FD0;
      v131 = xmmword_1DC922FE0;
      v132 = unk_1DC922FF0;
      v85 = a2[2];
      v86 = a2[3];
      v87 = a2[4];
      v88 = a2[5];
      do
      {
        v89 = vmulq_f32(v123, vaddq_f32(v125, vsubq_f32(*(float32x4_t *)((char *)&v129 + v83), v127)));
        *(float32x4_t *)((char *)&v129 + v83) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v85, v89.f32[0]), v86, *(float32x2_t *)v89.f32, 1), v87, v89, 2), v88, v89, 3);
        v83 += 16;
      }
      while (v83 != 64);
      v90 = a2[1].i64[1] + 16 * a2->u32[0];
      *(CGPoint *)v90 = v129;
      *(_OWORD *)(v90 + 16) = v130;
      *(_OWORD *)(v90 + 32) = v131;
      *(_OWORD *)(v90 + 48) = v132;
      v91 = a2[1].i64[0];
      v92 = a2->u32[0];
      v93 = objc_msgSend(*((id *)this + 75), "isRotated");
      v94 = COERCE_DOUBLE(__PAIR64__(v114.u32[1], v119.u32[0]));
      v95 = COERCE_DOUBLE(vzip1_s32(v110, v114));
      v96 = (double *)(v91 + 8 * v92);
      if ((v93 & 1) != 0)
        v97 = v95;
      else
        v97 = COERCE_DOUBLE(__PAIR64__(v114.u32[1], v110.u32[0]));
      if ((v93 & 1) != 0)
        v98 = COERCE_DOUBLE(__PAIR64__(v114.u32[1], v110.u32[0]));
      else
        v98 = COERCE_DOUBLE(__PAIR64__(v114.u32[1], v119.u32[0]));
      if ((v93 & 1) != 0)
      {
        v99 = v84;
      }
      else
      {
        v94 = v84;
        v99 = v95;
      }
      *v96 = v97;
      v96[1] = v98;
      v54 = 4;
      v96[2] = v94;
      v96[3] = v99;
    }
    if (v54)
    {
      v100 = 0;
      v101 = a2->i64[1] + 4 * a2->u32[0];
      result = v54;
      v102 = v108;
      v102.i32[3] = 1.0;
      v103 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v102, fminf(fmaxf(vmuls_lane_f32(*((float *)this + 81), v108, 3) * a2[6].f32[0], 0.0), 1.0)), (float32x4_t)vdupq_n_s32(0x437F0000u)));
      *(int16x4_t *)v103.i8 = vmovn_s32((int32x4_t)v103);
      v104 = vmovn_s16(v103).u32[0];
      do
        *(_DWORD *)(v101 + 4 * v100++) = v104;
      while (v54 != (_DWORD)v100);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1DC8F0F2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SKCSpriteNode::addBatchRenderElements_NinePart(uint64_t a1, float32x4_t *a2)
{
  int64x2_t v4;
  int64x2_t v5;
  float32x4_t v10;
  void *v11;
  double v13;
  double v14;
  double v15;
  double v16;
  float32x4_t v17;
  double v18;
  double v19;
  float32_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x2_t v25;
  int8x16_t v26;
  int32x2_t v27;
  float32x2_t v28;
  float32x2_t v30;
  unint64_t v31;
  void *v33;
  float v34;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MaxX;
  double MinY;
  double MaxY;
  float64_t v43;
  float64_t v44;
  float64_t v45;
  float64_t v46;
  int8x8_t v47;
  float32_t v48;
  int8x8_t v49;
  void *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int8x8_t v55;
  int v56;
  float v57;
  float32x4_t v59;
  unsigned int v60;
  int8x8_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float64_t v64;
  unint64_t *v65;
  unint64_t v66;
  float32x4_t v67;
  void *v68;
  uint64_t v69;
  _QWORD *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float64x2_t *v87;
  unsigned int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float32x4_t v104;
  int16x8_t v105;
  unsigned __int32 v106;
  float32x2_t v108;
  float v109;
  float v110;
  float v111;
  float32x2_t v112;
  int8x8_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float v117;
  float32x4_t v118;
  int64x2_t v119;
  int8x8_t v120;
  float32x2_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x2_t v124;
  float32x4_t v125;
  float32x2_t v126;
  float64x2_t __src[37];
  _BYTE v128[272];
  _OWORD v129[4];
  _QWORD v130[5];
  CGRect v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;

  v130[4] = *MEMORY[0x1E0C80C00];
  v4 = *(int64x2_t *)(a1 + 576);
  v5 = 0uLL;
  v130[0] = 0;
  v130[1] = v4.i64[0];
  v130[2] = vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL));
  __asm { FMOV            V0.2S, #1.0 }
  v126 = *(float32x2_t *)&_D0;
  *(double *)&v130[3] = _D0;
  v10 = *(float32x4_t *)(a1 + 544);
  v11 = *(void **)(a1 + 600);
  if (v11)
  {
    LODWORD(_D0) = v10.i32[1];
    if (v10.f32[0] == 1.0 && v10.f32[1] == 1.0)
    {
      v119 = v4;
      v122 = v10;
      objc_msgSend(v11, "size", _D0);
      v13 = *(float *)(a1 + 336);
      if (v14 == v13)
      {
        objc_msgSend(*(id *)(a1 + 600), "size");
        if (v15 == *(float *)(a1 + 340))
        {
          v4 = v119;
          v10 = v122;
          goto LABEL_11;
        }
        v13 = *(float *)(a1 + 336);
      }
      objc_msgSend(*(id *)(a1 + 600), "size");
      *(float *)&v16 = v13 / v16;
      v17 = v122;
      v17.i32[0] = LODWORD(v16);
      v123 = v17;
      v18 = *(float *)(a1 + 340);
      objc_msgSend(*(id *)(a1 + 600), "size");
      v4 = v119;
      v10 = v123;
      v20 = v18 / v19;
      v10.f32[1] = v20;
LABEL_11:
      v5 = 0uLL;
    }
  }
  v21.i64[0] = v4.i64[0];
  v21.i64[1] = v5.i64[1];
  v22 = (float32x4_t)vzip2q_s64(v4, v5);
  v23 = *(float32x4_t *)(a1 + 336);
  v24 = vmulq_f32(v10, v23);
  v25 = vmul_f32(*(float32x2_t *)v23.f32, vsub_f32(v126, *(float32x2_t *)(a1 + 584)));
  v26 = (int8x16_t)vdivq_f32(v23, v24);
  v27 = vcgt_f32(v25, *(float32x2_t *)v24.f32);
  if (((v27.i32[0] | v27.i32[1]) & 1) != 0)
  {
    v28 = vdiv_f32(*(float32x2_t *)v24.f32, v25);
    __asm { FMOV            V4.2S, #1.0 }
    v30 = vminnm_f32(v28, _D4);
    v31 = vextq_s8(v26, v26, 8uLL).u64[0];
    *(float32x2_t *)v26.i8 = vmul_f32(*(float32x2_t *)v26.i8, v30);
    v26.i64[1] = v31;
  }
  v129[0] = 0u;
  v129[1] = vmulq_f32(v21, (float32x4_t)v26);
  __asm { FMOV            V3.4S, #1.0 }
  v129[2] = vmlsq_f32(_Q3, (float32x4_t)v26, vsubq_f32(_Q3, vaddq_f32(v21, v22)));
  v129[3] = _Q3;
  v116 = vminnmq_f32(vmaxnmq_f32(*(float32x4_t *)(a1 + 304), (float32x4_t)0), _Q3);
  v118 = _Q3;
  v33 = *(void **)(a1 + 600);
  if (v33)
  {
    v34 = *(float *)(a1 + 320);
    objc_msgSend(v33, "textureRect");
    x = v131.origin.x;
    y = v131.origin.y;
    width = v131.size.width;
    height = v131.size.height;
    MinX = CGRectGetMinX(v131);
    v132.origin.x = x;
    v132.origin.y = y;
    v132.size.width = width;
    v132.size.height = height;
    MaxX = CGRectGetMaxX(v132);
    v133.origin.x = x;
    v133.origin.y = y;
    v133.size.width = width;
    v133.size.height = height;
    MinY = CGRectGetMinY(v133);
    v134.origin.x = x;
    v134.origin.y = y;
    v134.size.width = width;
    v134.size.height = height;
    MaxY = CGRectGetMaxY(v134);
    objc_msgSend(*(id *)(a1 + 600), "cropOffset");
    __src[0].f64[0] = v43;
    __src[0].f64[1] = v44;
    *(float32x2_t *)v115.f32 = sk_vector_make(__src);
    objc_msgSend(*(id *)(a1 + 600), "cropScale");
    __src[0].f64[0] = v45;
    __src[0].f64[1] = v46;
    v47 = (int8x8_t)sk_vector_make(__src);
    v124 = (float32x2_t)v47;
    *(float *)v47.i32 = MinX;
    v48 = MinY;
    v108 = (float32x2_t)v47;
    v111 = v48;
    *(float32_t *)&v47.i32[1] = v48;
    v120 = v47;
    *(float *)v49.i32 = MaxX;
    *(float *)v47.i32 = MaxY;
    v109 = *(float *)v49.i32;
    v110 = *(float *)v47.i32;
    v49.i32[1] = v47.i32[0];
    v113 = v49;
    v50 = *(void **)(a1 + 600);
    if (v50)
    {
      objc_msgSend(v50, "_backingTexture");
      if (*(_QWORD *)&__src[0].f64[0]
        && (*(unsigned int (**)(_QWORD))(**(_QWORD **)&__src[0].f64[0] + 24))(*(_QWORD *)&__src[0].f64[0]) == 1)
      {
        v51 = (***(uint64_t (****)(_QWORD))&__src[0].f64[0])(*(_QWORD *)&__src[0].f64[0]);
        v52 = (***(uint64_t (****)(_QWORD))&__src[0].f64[0])(*(_QWORD *)&__src[0].f64[0]);
        v53 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&__src[0].f64[0] + 8))(*(_QWORD *)&__src[0].f64[0]);
        v54 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&__src[0].f64[0] + 8))(*(_QWORD *)&__src[0].f64[0]);
        *(float *)v55.i32 = v108.f32[0] * (float)v51;
        *(float *)&v55.i32[1] = v111 * (float)v53;
        v120 = v55;
        *(float *)v55.i32 = v109 * (float)v52;
        *(float *)&v55.i32[1] = v110 * (float)v54;
        v113 = v55;
      }
    }
    else
    {
      __src[0] = 0uLL;
    }
    v56 = objc_msgSend(*(id *)(a1 + 600), "isFlipped", *(_QWORD *)&v108);
    v57 = fminf(fmaxf(v34, 0.0), 1.0);
    __asm { FMOV            V0.4S, #-1.0 }
    v59 = vaddq_f32(v116, _Q0);
    if (v56)
      v60 = -1;
    else
      v60 = 0;
    v61 = (int8x8_t)vdup_n_s32(v60);
    v62.i32[0] = v120.i32[0];
    v63.i32[0] = v113.i32[0];
    v63.i32[1] = vbsl_s8(v61, v120, v113).i32[1];
    v62.i32[1] = vbsl_s8(v61, v113, v120).i32[1];
    v121 = v62;
    v64 = __src[0].f64[1];
    if (*(_QWORD *)&__src[0].f64[1])
    {
      v65 = (unint64_t *)(*(_QWORD *)&__src[0].f64[1] + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        v117 = v57;
        v112 = v63;
        v114 = v59;
        (*(void (**)(float64_t))(**(_QWORD **)&v64 + 16))(COERCE_FLOAT64_T(*(_QWORD *)&v64));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v64);
        v63 = v112;
        v59 = v114;
        v57 = v117;
      }
    }
    v116 = vmlaq_n_f32(v118, v59, v57);
    v115 = (float32x4_t)v115.u64[0];
    *(float32x2_t *)v67.f32 = v124;
    *(float32x2_t *)&v67.u32[2] = v126;
    v68 = *(void **)(a1 + 600);
    v125 = v67;
    v126 = vsub_f32(v63, v121);
    if (v68 && objc_msgSend(v68, "isRotated"))
    {
      v69 = 0;
      v70 = v128;
      do
      {
        v71 = v69 / 3u;
        v72 = v130[v71];
        LODWORD(v73) = v72;
        HIDWORD(v72) = HIDWORD(v130[2 - v69 % 3u]);
        v74 = v130[v71 + 1];
        HIDWORD(v73) = HIDWORD(v130[(v69 % 3u) ^ 3]);
        HIDWORD(v74) = HIDWORD(v73);
        *(v70 - 2) = v73;
        *(v70 - 1) = v72;
        *v70 = __PAIR64__(HIDWORD(v72), v74);
        v70[1] = v74;
        v70 += 4;
        ++v69;
      }
      while (v69 != 9);
      goto LABEL_36;
    }
  }
  else
  {
    v115 = 0u;
    v121 = 0;
    v125 = _Q3;
  }
  v75 = 0;
  v76 = v128;
  do
  {
    v77 = v75 / 3u;
    v78 = v130[v75 % 3u];
    LODWORD(v79) = v78;
    HIDWORD(v79) = HIDWORD(v130[v77]);
    v80 = v130[(v75 % 3u + 1)];
    LODWORD(v81) = v80;
    HIDWORD(v81) = HIDWORD(v130[v77 + 1]);
    HIDWORD(v80) = HIDWORD(v79);
    HIDWORD(v78) = HIDWORD(v81);
    *(v76 - 2) = v79;
    *(v76 - 1) = v80;
    *v76 = v81;
    v76[1] = v78;
    v76 += 4;
    ++v75;
  }
  while (v75 != 9);
LABEL_36:
  v82 = 0;
  v83 = *(float32x4_t *)(a1 + 336);
  v84 = *(float32x4_t *)(a1 + 352);
  v84.i64[1] = 0;
  v85.i64[0] = 0x3F0000003F000000;
  v85.i64[1] = 0x3F0000003F000000;
  v86 = vaddq_f32(v115, vdivq_f32(vmulq_f32(vsubq_f32(v118, v125), vsubq_f32(v85, (float32x4_t)v84.u64[0])), v125));
  v87 = &__src[2];
  do
  {
    v88 = v82 / 3u;
    v89 = xmmword_1DC9217E0;
    LODWORD(v89) = v129[v82 % 3u];
    v90 = v89;
    DWORD1(v90) = DWORD1(v129[v88]);
    v91 = xmmword_1DC9217E0;
    LODWORD(v91) = v129[(v82 % 3u + 1)];
    v92 = v91;
    DWORD1(v92) = DWORD1(v129[v88 + 1]);
    DWORD1(v91) = DWORD1(v90);
    DWORD1(v89) = DWORD1(v92);
    v87[-2] = (float64x2_t)v90;
    v87[-1] = (float64x2_t)v91;
    *v87 = (float64x2_t)v92;
    v87[1] = (float64x2_t)v89;
    v87 += 4;
    ++v82;
  }
  while (v82 != 9);
  v93 = 0;
  v83.i64[1] = v118.i64[1];
  v94 = vmulq_f32(v125, v83);
  v95 = a2[2];
  v96 = a2[3];
  v97 = a2[4];
  v98 = a2[5];
  do
  {
    v99 = vmulq_f32(v94, vaddq_f32(v86, vsubq_f32((float32x4_t)__src[v93], v84)));
    __src[v93++] = (float64x2_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v95, v99.f32[0]), v96, *(float32x2_t *)v99.f32, 1), v97, v99, 2), v98, v99, 3);
  }
  while (v93 != 36);
  memcpy((void *)(a2[1].i64[1] + 16 * a2->u32[0]), __src, 0x240uLL);
  v100 = 0;
  v101 = a2[1].i64[0] + 8 * a2->u32[0];
  do
  {
    *(float32x2_t *)(v101 + v100 * 8) = vmla_f32(v121, v126, *(float32x2_t *)&__src[36].f64[v100]);
    ++v100;
  }
  while (v100 != 36);
  v102 = 0;
  v103 = a2->i64[1] + 4 * a2->u32[0];
  v104 = v116;
  v104.i32[3] = 1.0;
  v105 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v104, fminf(fmaxf(vmuls_lane_f32(*(float *)(a1 + 324), v116, 3) * a2[6].f32[0], 0.0), 1.0)), (float32x4_t)vdupq_n_s32(0x437F0000u)));
  *(int16x4_t *)v105.i8 = vmovn_s32((int32x4_t)v105);
  v106 = vmovn_s16(v105).u32[0];
  do
  {
    *(_DWORD *)(v103 + v102) = v106;
    v102 += 4;
  }
  while ((_DWORD)v102 != 144);
  return 36;
}

void sub_1DC8F1674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t add_subdivs(_OWORD **a1, _QWORD **a2, int a3, float32x4_t a4, __n128 a5, __n128 a6, float32x4_t a7, float32x2_t a8, float32x2_t a9, float32x2_t a10, float32x2_t a11)
{
  float32x2_t v13;
  float32x2_t v14;
  float32x4_t v17;
  int v18;
  uint64_t v19;
  double v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int32x2_t v26;
  float32x4_t v27;
  int8x16_t v28;
  int32x2_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x2_t v36;
  int v37;
  int v38;
  int v39;
  float32x4_t *v40;
  __n128 *v41;
  __n128 *v42;
  __n128 *v43;
  double *v44;
  float32x2_t *v45;
  double *v46;
  double *v47;
  float32x4_t v49;
  float32x2_t v50;
  float32x4_t v52;
  __n128 v53;
  __n128 v54;

  v13 = a9;
  v14 = a8;
  v17 = a4;
  v18 = 0;
  if (a3)
  {
    v19 = (a3 - 1);
    v50 = (float32x2_t)vdup_n_s32(0x3C75C28Fu);
    v20 = *(double *)&a10;
    v21 = a9;
    v22 = (float32x4_t)a6;
    v23 = (float32x4_t)a5;
    v49 = a7;
    while (1)
    {
      v24 = vaddq_f32(vsubq_f32(a4, v23), vsubq_f32(v22, a7));
      v25 = (int8x16_t)vmulq_f32(v24, v24);
      v26 = (int32x2_t)vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL));
      v27 = vaddq_f32(vsubq_f32(a4, a7), vsubq_f32(v22, v23));
      v28 = (int8x16_t)vmulq_f32(v27, v27);
      *(float32x2_t *)v28.i8 = vadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
      v29 = vcgt_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v28.i8, v26), (float32x2_t)vzip2_s32(*(int32x2_t *)v28.i8, v26))), v50);
      if (((v29.i32[1] | v29.i32[0]) & 1) == 0)
        break;
      v30.i64[0] = 0x3F0000003F000000;
      v30.i64[1] = 0x3F0000003F000000;
      v31 = vmlaq_f32(a4, v30, vsubq_f32(v23, a4));
      v31.i32[3] = 1.0;
      v32 = v31;
      v33 = vmlaq_f32(a4, v30, vsubq_f32(a7, a4));
      v33.i32[3] = 1.0;
      v52 = v33;
      v34 = vmlaq_f32(v22, v30, vsubq_f32(a7, v22));
      v34.i32[3] = 1.0;
      v53 = (__n128)v34;
      v35 = vmlaq_f32(v32, v30, vsubq_f32(v34, v32));
      v35.i32[3] = 1.0;
      v54 = (__n128)v35;
      v36 = vmla_f32(a8, (float32x2_t)0x3F0000003F000000, vsub_f32(v21, a8));
      v14 = vmla_f32(a8, (float32x2_t)0x3F0000003F000000, vsub_f32(a11, a8));
      a10 = vmla_f32(*(float32x2_t *)&v20, (float32x2_t)0x3F0000003F000000, vsub_f32(a11, *(float32x2_t *)&v20));
      v13 = vmla_f32(v36, (float32x2_t)0x3F0000003F000000, vsub_f32(a10, v36));
      v37 = add_subdivs(a1, a2, v19);
      v38 = add_subdivs(a1, a2, v19);
      v39 = add_subdivs(a1, a2, v19);
      a6 = v53;
      a5 = v54;
      v17 = v52;
      a7 = v49;
      v18 += v37 + v38 + v39;
      v19 = (v19 - 1);
      v20 = *(double *)&a10;
      v21 = v13;
      a8 = v14;
      v22 = (float32x4_t)v53;
      v23 = (float32x4_t)v54;
      a4 = v52;
      if ((_DWORD)v19 == -1)
        goto LABEL_7;
    }
    v17 = a4;
    a5 = (__n128)v23;
    a6 = (__n128)v22;
    v14 = a8;
    v13 = v21;
    *(double *)&a10 = v20;
  }
LABEL_7:
  v40 = (float32x4_t *)(*a1)++;
  *v40 = v17;
  v41 = (__n128 *)(*a1)++;
  *v41 = a5;
  v42 = (__n128 *)(*a1)++;
  *v42 = a6;
  v43 = (__n128 *)(*a1)++;
  *v43 = (__n128)a7;
  v44 = (double *)(*a2)++;
  *v44 = *(double *)&v14;
  v45 = (float32x2_t *)(*a2)++;
  *v45 = v13;
  v46 = (double *)(*a2)++;
  *v46 = *(double *)&a10;
  v47 = (double *)(*a2)++;
  *v47 = *(double *)&a11;
  return (v18 + 4);
}

void SKCSpriteNode::setPrimaryTexture(id *this, SKTexture *a2)
{
  SKTexture *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;

  v4 = a2;
  objc_storeStrong(this + 75, a2);
  v8 = 0uLL;
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)(this + 32), &v8);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  SKCNode::setDirty((SKCNode *)this);

}

void sub_1DC8F1A48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCSpriteNode::setSecondaryTexture(id *this, SKTexture *a2)
{
  objc_storeStrong(this + 76, a2);
  SKCNode::setDirty((SKCNode *)this);
}

void SKCSpriteNode::setShader(id *this, SKShader *a2)
{
  objc_storeStrong(this + 74, a2);
  SKCNode::setDirty((SKCNode *)this);
  SKCNode::recomputeFlags((SKCNode *)this, 1);
}

void SKCSpriteNode::subclassRecomputeFlags(id *this)
{
  if (objc_msgSend(this[74], "_usesTimeUniform")
    && !*((_BYTE *)this + 172)
    && (*((_BYTE *)this + 171) & 0x60) != 0)
  {
    SKCNode::setFlags((SKCNode *)this, 66, 1);
  }
}

void SKCSpriteNode::~SKCSpriteNode(id *this)
{

  SKCNode::~SKCNode(this);
}

{
  SKCSpriteNode::~SKCSpriteNode(this);
  JUMPOUT(0x1DF0CF560);
}

id SKGetGlobalDefaults(void)
{
  void *v0;
  id v1;
  void *v2;

  v0 = (void *)_globalFlags;
  if (!_globalFlags)
  {
    v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v2 = (void *)_globalFlags;
    _globalFlags = (uint64_t)v1;

    v0 = (void *)_globalFlags;
  }
  return v0;
}

uint64_t SKCRendererEnsureSoundContext(void)
{
  if (SKCRendererEnsureSoundContext(void)::onceToken != -1)
    dispatch_once(&SKCRendererEnsureSoundContext(void)::onceToken, &__block_literal_global_11);
  return objc_msgSend((id)_soundContext, "makeCurrentContext");
}

void ___Z29SKCRendererEnsureSoundContextv_block_invoke()
{
  uint64_t v0;
  void *v1;

  +[SKSoundContext context](SKSoundContext, "context");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)_soundContext;
  _soundContext = v0;

}

void SKCRendererRegisterSoundSource(SKSoundSource *a1)
{
  SKSoundSource *v1;
  SKSoundSource *v2;
  SKSoundSource *v3;

  v1 = a1;
  v3 = v1;
  if (SKCRendererRegisterSoundSource(SKSoundSource *)::onceToken == -1)
  {
    v2 = v1;
  }
  else
  {
    dispatch_once(&SKCRendererRegisterSoundSource(SKSoundSource *)::onceToken, &__block_literal_global_2);
    v2 = v3;
  }
  objc_msgSend((id)_soundSources, "addObject:", v2);

}

void sub_1DC8F278C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___Z30SKCRendererRegisterSoundSourceP13SKSoundSource_block_invoke()
{
  SKThreadSafeMutableArray *v0;
  void *v1;

  v0 = objc_alloc_init(SKThreadSafeMutableArray);
  v1 = (void *)_soundSources;
  _soundSources = (uint64_t)v0;

}

void SKCRendererRemoveCompletedSoundSources(void)
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = (id)_soundSources;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v7;
    do
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v7 != v3)
          objc_enumerationMutation(v1);
        v5 = *(void **)(*((_QWORD *)&v6 + 1) + 8 * i);
        if ((int)objc_msgSend(v5, "completedBufferCount", (_QWORD)v6) >= 1)
          objc_msgSend(v0, "addObject:", v5);
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v2);
  }

  objc_msgSend((id)_soundSources, "removeObjectsInArray:", v0);
}

void sub_1DC8F28F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8F2A9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8F2BFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8F2D84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8F2EB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8F30B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t SKBlendModeGetBackingBlendMode(SKBlendMode a1)
{
  if ((unint64_t)(a1 - 1) > 6)
    return 0;
  else
    return dword_1DC923010[a1 - 1];
}

id _SKLocalizedString(NSString *a1, NSString *a2)
{
  NSString *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = a1;
  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.SpriteKit"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "localizedStringForKey:value:table:", v2, &stru_1EA5021F8, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_1DC8F31AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t __deviceClassForInterfaceIdiom(unint64_t a1)
{
  if (a1 < 5)
    return a1 + 1;
  else
    return 0;
}

void SKCParticleSystemNode::SKCParticleSystemNode(SKCParticleSystemNode *this)
{
  uint64_t v2;
  SKCParticleManager *v3;

  SKCNode::SKCNode(this);
  *(_QWORD *)v2 = off_1EA500990;
  *(_QWORD *)(v2 + 560) = 0;
  *(_QWORD *)(v2 + 576) = 0;
  *(_QWORD *)(v2 + 568) = 0;
  *(_DWORD *)(v2 + 584) = 1000;
  v3 = (SKCParticleManager *)operator new();
  SKCParticleManager::SKCParticleManager(v3);
  *((_QWORD *)this + 74) = v3;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
}

void sub_1DC8F3290(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1DF0CF560](v3, 0x10A1C40A4A8B666);

  SKCNode::~SKCNode(v1);
  _Unwind_Resume(a1);
}

void SKCParticleSystemNode::~SKCParticleSystemNode(SKCParticleSystemNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1EA500990;
  v2 = *((_QWORD *)this + 74);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 632);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 616);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 600);

  SKCNode::~SKCNode((id *)this);
}

{
  SKCParticleSystemNode::~SKCParticleSystemNode(this);
  JUMPOUT(0x1DF0CF560);
}

uint64_t SKCParticleSystemNode::generatesVisibleGeometry(SKCParticleSystemNode *this, const simd_float4x4 *a2)
{
  return 1;
}

double SKCParticleSystemNode::getBatchInfo@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 12) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_QWORD *)&result = 0x300000000;
  *(_QWORD *)(a1 + 4) = 0x300000000;
  *(_BYTE *)a1 = 1;
  return result;
}

uint64_t SKCParticleSystemNode::getNeedsCustomRenderOps()
{
  return 1;
}

uint64_t SKCParticleSystemNode::getMaxBatchRenderElementCount()
{
  return 0;
}

void SKCParticleSystemNode::addRenderOps(uint64_t a1, uint64_t a2, jet_command_buffer **a3)
{
  if (*(_QWORD *)(a1 + 560) == 1)
    SKCParticleSystemNode::addRenderOps_Points(a1, a2, a3);
  else
    SKCParticleSystemNode::addRenderOps_Quads(a1, a2, a3);
}

void SKCParticleSystemNode::addRenderOps_Points(uint64_t a1, uint64_t a2, jet_command_buffer **a3)
{
  uint64_t RenderData_Points;
  uint64_t v7;
  void *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  std::string::size_type v12;
  unint64_t *v13;
  unint64_t v14;
  jet_command_buffer *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  jet_command_buffer *v21;
  int BackingBlendMode;
  uint64_t v23;
  jet_command_buffer *v24;
  void *v25;
  jet_command_buffer *v26;
  std::__shared_weak_count *size;
  unint64_t *v28;
  unint64_t v29;
  unsigned __int8 v30;
  float v31;
  float v32;
  jet_command_buffer *v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  jet_command_buffer *v43;
  uint64_t v44;
  uint64_t v45;
  jet_command_buffer *v46;
  uint64_t v47;
  uint64_t v48;
  jet_command_buffer *v49;
  uint64_t current_buffer;
  uint64_t v51;
  jet_command_buffer *v52;
  uint64_t v53;
  uint64_t v54;
  jet_command_buffer *v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 v61;
  std::string __str;
  int v63;

  RenderData_Points = SKCParticleSystemNode::generateRenderData_Points((float32x2_t *)a1, a2);
  if (!(_DWORD)RenderData_Points)
    return;
  v7 = RenderData_Points;
  v8 = *(void **)(a1 + 576);
  if (v8)
  {
    objc_msgSend(v8, "_backingProgram");
    if (!__str.__r_.__value_.__l.__size_)
      goto LABEL_7;
    v9 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__size_ + 16))(__str.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
      if (__str.__r_.__value_.__r.__words[0])
        goto LABEL_8;
    }
    else
    {
LABEL_7:
      if (__str.__r_.__value_.__r.__words[0])
      {
LABEL_8:
        v11 = *(void **)(a1 + 576);
        if (v11)
        {
          objc_msgSend(v11, "_backingProgram");
          v12 = __str.__r_.__value_.__r.__words[0];
          if (__str.__r_.__value_.__l.__size_)
          {
            v13 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              (*(void (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__size_ + 16))(__str.__r_.__value_.__l.__size_);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
            }
          }
        }
        else
        {
          v12 = 0;
        }
        v21 = *a3;
        BackingBlendMode = SKBlendModeGetBackingBlendMode(*(SKBlendMode *)(a1 + 288));
        LODWORD(__str.__r_.__value_.__l.__data_) = 31;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v21 + 1, (int *)&__str);
        v23 = *((_QWORD *)v21 + 2);
        *(_QWORD *)(v23 - 80) = v12;
        *(_DWORD *)(v23 - 64) = BackingBlendMode;
        *(_OWORD *)(v23 - 60) = xmmword_1DC922230;
        *(_DWORD *)(v23 - 44) = 3;
        v24 = *a3;
        v25 = *(void **)(a1 + 576);
        if (v25)
        {
          objc_msgSend(v25, "_commandsForBatchOffset:count:", 0, v7);
          v26 = (jet_command_buffer *)__str.__r_.__value_.__r.__words[0];
        }
        else
        {
          v26 = 0;
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
        }
        jet_command_buffer::add_command_buffer(v24, v26);
        size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_)
        {
          v28 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        if ((v30 & 1) == 0
        {
          SKCParticleSystemNode::addRenderOps_Points(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime = skCurrentTime();
        }
        v31 = skCurrentTime()
            - *(double *)&SKCParticleSystemNode::addRenderOps_Points(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime;
        v32 = fmodf(v31, 43200.0);
        v33 = *a3;
        std::string::basic_string[abi:ne180100]<0>(&__str, "u_time");
        LODWORD(v61) = 22;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v33 + 1, (int *)&v61);
        v34 = *((_QWORD *)v33 + 2);
        std::string::operator=((std::string *)(v34 - 176), &__str);
        *(float *)(v34 - 64) = v32;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_30;
      }
    }
  }
  v15 = *a3;
  if (*(_BYTE *)(a2 + 576))
  {
    v16 = *(_QWORD *)(a2 + 264);
    LODWORD(__str.__r_.__value_.__l.__data_) = 31;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v15 + 1, (int *)&__str);
    v17 = *((_QWORD *)v15 + 2);
    *(_QWORD *)(v17 - 80) = v16;
    *(_OWORD *)(v17 - 64) = xmmword_1DC921840;
    *(_QWORD *)(v17 - 48) = 0x30000000FLL;
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 248);
    v19 = SKBlendModeGetBackingBlendMode(*(SKBlendMode *)(a1 + 288));
    LODWORD(__str.__r_.__value_.__l.__data_) = 31;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v15 + 1, (int *)&__str);
    v20 = *((_QWORD *)v15 + 2);
    *(_QWORD *)(v20 - 80) = v18;
    *(_DWORD *)(v20 - 64) = v19;
    *(_OWORD *)(v20 - 60) = xmmword_1DC922230;
    *(_DWORD *)(v20 - 44) = 3;
  }
LABEL_30:
  v61 = 0uLL;
  v35 = *(void **)(a1 + 568);
  if (!v35)
    goto LABEL_42;
  objc_msgSend(v35, "_backingTexture");
  v36 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  v61 = v36;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v41 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (!(_QWORD)v61)
LABEL_42:
    std::shared_ptr<jet_texture>::operator=[abi:ne180100](&v61, (uint64_t *)(a2 + 432));
  std::vector<std::shared_ptr<jet_buffer>>::push_back[abi:ne180100]((char **)(a2 + 672), (__int128 *)(a2 + 416));
  v43 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture");
  v44 = v61;
  v63 = 8;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v43 + 1, &v63);
  v45 = *((_QWORD *)v43 + 2);
  *(_QWORD *)(v45 - 80) = v44;
  std::string::operator=((std::string *)(v45 - 176), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v46 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture");
  v47 = *(_QWORD *)(a2 + 480);
  v63 = 30;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v46 + 1, &v63);
  v48 = *((_QWORD *)v46 + 2);
  *(_QWORD *)(v48 - 80) = v47;
  std::string::operator=((std::string *)(v48 - 176), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v49 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__str, "a_position");
  current_buffer = jet_buffer_pool::get_current_buffer(*(jet_buffer_pool **)(a1 + 600));
  v63 = 5;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v49 + 1, &v63);
  v51 = *((_QWORD *)v49 + 2);
  *(_QWORD *)(v51 - 80) = current_buffer;
  std::string::operator=((std::string *)(v51 - 176), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v52 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__str, "a_color");
  v53 = jet_buffer_pool::get_current_buffer(*(jet_buffer_pool **)(a1 + 616));
  v63 = 5;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v52 + 1, &v63);
  v54 = *((_QWORD *)v52 + 2);
  *(_QWORD *)(v54 - 80) = v53;
  std::string::operator=((std::string *)(v54 - 176), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v55 = *a3;
  LODWORD(__str.__r_.__value_.__l.__data_) = 3;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v55 + 1, (int *)&__str);
  v56 = *((_QWORD *)v55 + 2);
  *(_QWORD *)(v56 - 64) = 0;
  *(_DWORD *)(v56 - 56) = v7;
  v57 = *(_QWORD *)(a2 + 664);
  ++*(_DWORD *)(v57 + 164);
  *(_DWORD *)(v57 + 148) += v7;
  v58 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
}

void sub_1DC8F391C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void SKCParticleSystemNode::addRenderOps_Quads(uint64_t a1, uint64_t a2, jet_command_buffer **a3)
{
  uint64_t RenderData_Quads;
  uint64_t v7;
  void *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  std::string::size_type v12;
  unint64_t *v13;
  unint64_t v14;
  jet_command_buffer *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  jet_command_buffer *v20;
  int v21;
  uint64_t v22;
  jet_command_buffer *v23;
  int BackingBlendMode;
  uint64_t v25;
  jet_command_buffer *v26;
  void *v27;
  jet_command_buffer *v28;
  std::__shared_weak_count *size;
  unint64_t *v30;
  unint64_t v31;
  unsigned __int8 v32;
  float v33;
  float v34;
  jet_command_buffer *v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  jet_command_buffer *v45;
  uint64_t v46;
  uint64_t v47;
  jet_command_buffer *v48;
  uint64_t v49;
  uint64_t v50;
  jet_command_buffer *v51;
  uint64_t current_buffer;
  uint64_t v53;
  jet_command_buffer *v54;
  uint64_t v55;
  uint64_t v56;
  jet_command_buffer *v57;
  uint64_t v58;
  uint64_t v59;
  jet_command_buffer *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  std::string __str;
  int v69;

  RenderData_Quads = SKCParticleSystemNode::generateRenderData_Quads((float32x2_t *)a1, a2);
  if (!(_DWORD)RenderData_Quads)
    return;
  v7 = RenderData_Quads;
  v8 = *(void **)(a1 + 576);
  if (v8)
  {
    objc_msgSend(v8, "_backingProgram");
    if (!__str.__r_.__value_.__l.__size_)
      goto LABEL_7;
    v9 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__size_ + 16))(__str.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
      if (__str.__r_.__value_.__r.__words[0])
        goto LABEL_8;
    }
    else
    {
LABEL_7:
      if (__str.__r_.__value_.__r.__words[0])
      {
LABEL_8:
        v11 = *(void **)(a1 + 576);
        if (v11)
        {
          objc_msgSend(v11, "_backingProgram");
          v12 = __str.__r_.__value_.__r.__words[0];
          if (__str.__r_.__value_.__l.__size_)
          {
            v13 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              (*(void (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__size_ + 16))(__str.__r_.__value_.__l.__size_);
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
            }
          }
        }
        else
        {
          v12 = 0;
        }
        v23 = *a3;
        BackingBlendMode = SKBlendModeGetBackingBlendMode(*(SKBlendMode *)(a1 + 288));
        LODWORD(__str.__r_.__value_.__l.__data_) = 31;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v23 + 1, (int *)&__str);
        v25 = *((_QWORD *)v23 + 2);
        *(_QWORD *)(v25 - 80) = v12;
        *(_DWORD *)(v25 - 64) = BackingBlendMode;
        *(_OWORD *)(v25 - 60) = xmmword_1DC922230;
        *(_DWORD *)(v25 - 44) = 3;
        v26 = *a3;
        v27 = *(void **)(a1 + 576);
        if (v27)
        {
          objc_msgSend(v27, "_commandsForBatchOffset:count:", 0, v7);
          v28 = (jet_command_buffer *)__str.__r_.__value_.__r.__words[0];
        }
        else
        {
          v28 = 0;
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
        }
        jet_command_buffer::add_command_buffer(v26, v28);
        size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_)
        {
          v30 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        if ((v32 & 1) == 0
        {
          SKCParticleSystemNode::addRenderOps_Quads(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime = skCurrentTime();
        }
        v33 = skCurrentTime()
            - *(double *)&SKCParticleSystemNode::addRenderOps_Quads(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime;
        v34 = fmodf(v33, 43200.0);
        v35 = *a3;
        std::string::basic_string[abi:ne180100]<0>(&__str, "u_time");
        LODWORD(v67) = 22;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v35 + 1, (int *)&v67);
        v36 = *((_QWORD *)v35 + 2);
        std::string::operator=((std::string *)(v36 - 176), &__str);
        *(float *)(v36 - 64) = v34;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_30;
      }
    }
  }
  if (*(_BYTE *)(a2 + 576))
  {
    v15 = *a3;
    v16 = *(_QWORD *)(a2 + 184);
    v17 = (uint64_t *)((char *)*a3 + 8);
    LODWORD(__str.__r_.__value_.__l.__data_) = 31;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v17, (int *)&__str);
    v18 = *((_QWORD *)v15 + 2);
    *(_QWORD *)(v18 - 80) = v16;
    *(_OWORD *)(v18 - 64) = xmmword_1DC921840;
    *(_QWORD *)(v18 - 48) = 0x30000000FLL;
  }
  else
  {
    v19 = *(_QWORD *)(a2 + 168);
    v20 = *a3;
    v21 = SKBlendModeGetBackingBlendMode(*(SKBlendMode *)(a1 + 288));
    LODWORD(__str.__r_.__value_.__l.__data_) = 31;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v20 + 1, (int *)&__str);
    v22 = *((_QWORD *)v20 + 2);
    *(_QWORD *)(v22 - 80) = v19;
    *(_DWORD *)(v22 - 64) = v21;
    *(_OWORD *)(v22 - 60) = xmmword_1DC922230;
    *(_DWORD *)(v22 - 44) = 3;
  }
LABEL_30:
  v67 = 0uLL;
  v37 = *(void **)(a1 + 568);
  if (!v37)
    goto LABEL_42;
  objc_msgSend(v37, "_backingTexture");
  v38 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  v67 = v38;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v43 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (!(_QWORD)v67)
LABEL_42:
    std::shared_ptr<jet_texture>::operator=[abi:ne180100](&v67, (uint64_t *)(a2 + 432));
  std::vector<std::shared_ptr<jet_buffer>>::push_back[abi:ne180100]((char **)(a2 + 672), (__int128 *)(a2 + 416));
  v45 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture");
  v46 = v67;
  v69 = 8;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v45 + 1, &v69);
  v47 = *((_QWORD *)v45 + 2);
  *(_QWORD *)(v47 - 80) = v46;
  std::string::operator=((std::string *)(v47 - 176), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v48 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture");
  v49 = *(_QWORD *)(a2 + 480);
  v69 = 30;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v48 + 1, &v69);
  v50 = *((_QWORD *)v48 + 2);
  *(_QWORD *)(v50 - 80) = v49;
  std::string::operator=((std::string *)(v50 - 176), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v51 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__str, "a_position");
  current_buffer = jet_buffer_pool::get_current_buffer(*(jet_buffer_pool **)(a1 + 600));
  v69 = 5;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v51 + 1, &v69);
  v53 = *((_QWORD *)v51 + 2);
  *(_QWORD *)(v53 - 80) = current_buffer;
  std::string::operator=((std::string *)(v53 - 176), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v54 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__str, "a_color");
  v55 = jet_buffer_pool::get_current_buffer(*(jet_buffer_pool **)(a1 + 616));
  v69 = 5;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v54 + 1, &v69);
  v56 = *((_QWORD *)v54 + 2);
  *(_QWORD *)(v56 - 80) = v55;
  std::string::operator=((std::string *)(v56 - 176), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v57 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__str, "a_tex_coord");
  v58 = jet_buffer_pool::get_current_buffer(*(jet_buffer_pool **)(a1 + 632));
  v69 = 5;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v57 + 1, &v69);
  v59 = *((_QWORD *)v57 + 2);
  *(_QWORD *)(v59 - 80) = v58;
  std::string::operator=((std::string *)(v59 - 176), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v60 = *a3;
  v61 = *(_QWORD *)(a2 + 416);
  LODWORD(__str.__r_.__value_.__l.__data_) = 4;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v60 + 1, (int *)&__str);
  v62 = *((_QWORD *)v60 + 2);
  *(_QWORD *)(v62 - 80) = v61;
  *(_QWORD *)(v62 - 64) = 3;
  *(_DWORD *)(v62 - 56) = 6 * v7;
  v63 = *(_QWORD *)(a2 + 664);
  ++*(_DWORD *)(v63 + 164);
  *(_DWORD *)(v63 + 148) += 6 * (int)v7 / 6u;
  v64 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    v65 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
}

void sub_1DC8F3F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

uint64_t SKCParticleSystemNode::generateRenderData_Quads(float32x2_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  jet_buffer_pool *v8;
  uint64_t v9;
  uint64_t v10;
  jet_buffer_pool **v11;
  jet_buffer_pool **v12;
  jet_buffer_pool *v13;
  jet_buffer_pool **v14;
  jet_buffer_pool *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t data;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  void *v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  void *v40;
  CGFloat y;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  double MinX;
  double MaxX;
  double MinY;
  CGFloat MaxY;
  float v65;
  float v66;
  float v67;
  void *v68;
  float v69;
  int v70;
  float v71;
  CGFloat v72;
  unint64_t *v73;
  unint64_t v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  float32x4_t v78;
  float32x4_t v79;
  unint64_t v80;
  float32x4_t v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  float32x2_t v86;
  float32x2_t v87;
  _QWORD v88[12];
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  CGPoint v94;
  uint64_t v95;
  int v96;
  __int128 v97;
  uint64_t v98;
  int v99;
  _QWORD v100[5];
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  simd_float4x4 v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;

  SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v105);
  v101 = 0;
  v102 = &v101;
  v103 = 0x2020000000;
  v104 = 0;
  v4 = (uint64_t)a1[74];
  if (!v4)
    goto LABEL_8;
  v5 = MEMORY[0x1E0C809B0];
  v100[0] = MEMORY[0x1E0C809B0];
  v100[1] = 3221225472;
  v100[2] = ___ZN21SKCParticleSystemNode24generateRenderData_QuadsEP13SKCRenderInfo_block_invoke;
  v100[3] = &unk_1EA500A70;
  v100[4] = &v101;
  SKCParticleManager::enumerateParticleSystems(v4, v100);
  v6 = *((_DWORD *)v102 + 6);
  if (!v6)
  {
LABEL_8:
    v10 = 0;
    goto LABEL_81;
  }
  if (a1[73].i32[0] <= (4 * v6))
    v7 = 4 * v6;
  else
    v7 = a1[73].u32[0];
  v8 = (jet_buffer_pool *)a1[75];
  if (v8)
    v9 = *((unsigned int *)v8 + 4);
  else
    v9 = 0;
  v11 = (jet_buffer_pool **)&a1[75];
  if (v9 < v7)
  {
    std::shared_ptr<jet_buffer_pool>::reset[abi:ne180100](&a1[75]);
    std::shared_ptr<jet_buffer_pool>::reset[abi:ne180100](&a1[77]);
    std::shared_ptr<jet_buffer_pool>::reset[abi:ne180100](&a1[79]);
    do
      v9 = (2 * v9 + 2);
    while (v9 < v7);
    v8 = *v11;
  }
  if (v8)
  {
    jet_buffer_pool::next_buffer(v8);
  }
  else
  {
    v44 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v105 + 16))(v105, 0, 4, v9);
    std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&v97, v44);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)&a1[75], &v97);
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
    if (*((_QWORD *)&v97 + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  v12 = (jet_buffer_pool **)&a1[77];
  v13 = (jet_buffer_pool *)a1[77];
  if (v13)
  {
    jet_buffer_pool::next_buffer(v13);
  }
  else
  {
    v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v105 + 16))(v105, 2, 4, v9);
    std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&v97, v48);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)&a1[77], &v97);
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
    if (*((_QWORD *)&v97 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }
  v14 = (jet_buffer_pool **)&a1[79];
  v15 = (jet_buffer_pool *)a1[79];
  if (v15)
  {
    jet_buffer_pool::next_buffer(v15);
  }
  else
  {
    v52 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v105 + 16))(v105, 0, 2, v9);
    std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&v97, v52);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)&a1[79], &v97);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
    if (*((_QWORD *)&v97 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
  }
  v16 = (6 * (v9 >> 2)) | 1;
  if (v16 <= 0x4E20)
    v17 = 20000;
  else
    v17 = v16;
  v18 = *(_QWORD *)(a2 + 416);
  if (!v18 || *(_DWORD *)(v18 + 48) < v17)
  {
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v105 + 8))(v105, 4, 1, v17, 0);
    std::shared_ptr<jet_buffer>::shared_ptr[abi:ne180100]<jet_buffer,void>(&v97, v19);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a2 + 416, &v97);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
    if (*((_QWORD *)&v97 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    SKCRendererGenerateQuadIndexBufferData<unsigned int>((unsigned int **)(a2 + 416));
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a2 + 416) + 24))(*(_QWORD *)(a2 + 416), 0, 0);
  }
  data = jet_buffer_pool::get_data(*v11);
  v24 = jet_buffer_pool::get_data(*v12);
  v25 = jet_buffer_pool::get_data(*v14);
  *(_QWORD *)&v97 = 0;
  *((_QWORD *)&v97 + 1) = &v97;
  v98 = 0x2020000000;
  v99 = 0;
  v26 = (void *)a1[71];
  if (v26)
  {
    objc_msgSend(v26, "cropOffset");
    v94.x = v27;
    v94.y = v28;
    v87 = sk_vector_make((float64x2_t *)&v94);
    objc_msgSend(*(id *)&a1[71], "cropScale");
    v94.x = v29;
    v94.y = v30;
    v86 = sk_vector_make((float64x2_t *)&v94);
    v31 = (void *)a1[71];
    if (v31)
    {
      objc_msgSend(v31, "textureRect");
      v33 = v32;
      v35 = v34;
      v37 = v36;
      v39 = v38;
      v40 = (void *)a1[71];
      if (v40)
      {
        objc_msgSend(v40, "_backingTexture");
        y = v94.y;
        if (*(_QWORD *)&v94.y)
        {
          v42 = (unint64_t *)(*(_QWORD *)&v94.y + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            (*(void (**)(CGFloat))(**(_QWORD **)&y + 16))(COERCE_CGFLOAT(*(_QWORD *)&y));
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&y);
          }
        }
      }
      goto LABEL_57;
    }
    v37 = 1.0;
    v33 = 0.0;
  }
  else
  {
    v37 = 1.0;
    v33 = 0.0;
    __asm { FMOV            V0.2S, #1.0 }
    v86 = _D0;
    v87 = 0;
  }
  v35 = 0.0;
  v39 = 1.0;
LABEL_57:
  v108.origin.x = v33;
  v108.origin.y = v35;
  v108.size.width = v37;
  v108.size.height = v39;
  MinX = CGRectGetMinX(v108);
  v109.origin.x = v33;
  v109.origin.y = v35;
  v109.size.width = v37;
  v109.size.height = v39;
  MaxX = CGRectGetMaxX(v109);
  v110.origin.x = v33;
  v110.origin.y = v35;
  v110.size.width = v37;
  v110.size.height = v39;
  MinY = CGRectGetMinY(v110);
  v111.origin.x = v33;
  v111.origin.y = v35;
  v111.size.width = v37;
  v111.size.height = v39;
  MaxY = CGRectGetMaxY(v111);
  v65 = MinX;
  v66 = MaxX;
  v67 = MinY;
  v68 = (void *)a1[71];
  v69 = MaxY;
  if (v68)
  {
    objc_msgSend(v68, "_backingTexture");
    if (*(_QWORD *)&v94.x
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)&v94.x + 24))(*(_QWORD *)&v94.x) == 1)
    {
      v65 = v65 * (float)(***(unsigned int (****)(_QWORD))&v94.x)(*(_QWORD *)&v94.x);
      v66 = v66 * (float)(***(unsigned int (****)(_QWORD))&v94.x)(*(_QWORD *)&v94.x);
      v67 = v67 * (float)(*(unsigned int (**)(_QWORD))(**(_QWORD **)&v94.x + 8))(*(_QWORD *)&v94.x);
      v69 = v69 * (float)(*(unsigned int (**)(_QWORD))(**(_QWORD **)&v94.x + 8))(*(_QWORD *)&v94.x);
    }
    v70 = objc_msgSend(*(id *)&a1[71], "isFlipped");
    if (v70)
      v71 = v69;
    else
      v71 = v67;
    if (v70)
      v69 = v67;
    v72 = v94.y;
    v5 = MEMORY[0x1E0C809B0];
    if (*(_QWORD *)&v94.y)
    {
      v73 = (unint64_t *)(*(_QWORD *)&v94.y + 8);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        (*(void (**)(CGFloat))(**(_QWORD **)&v72 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v72));
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v72);
      }
    }
  }
  else
  {
    v71 = v67;
  }
  v75 = *(float *)(a2 + 96);
  v94.x = 0.0;
  *(_QWORD *)&v94.y = &v94;
  v95 = 0x2020000000;
  v96 = 0;
  v76 = (uint64_t)a1[74];
  if (v76)
  {
    v88[0] = v5;
    v88[1] = 3221225472;
    v88[2] = ___ZN21SKCParticleSystemNode24generateRenderData_QuadsEP13SKCRenderInfo_block_invoke_2;
    v88[3] = &unk_1EA500A98;
    v88[7] = v86;
    v88[8] = v87;
    v89 = v65;
    v90 = v71;
    v91 = v66;
    v92 = v69;
    v88[9] = data;
    v88[10] = v25;
    v93 = fminf(fmaxf(v75, 0.0), 1.0);
    v88[11] = v24;
    v88[4] = &v94;
    v88[5] = &v97;
    v88[6] = a2;
    SKCParticleManager::enumerateParticleSystems(v76, v88);
  }
  v77 = *((_QWORD *)&v97 + 1);
  if (*(_DWORD *)(*((_QWORD *)&v97 + 1) + 24))
  {
    v78 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v79.i64[0] = 0x80000000800000;
    v79.i64[1] = 0x80000000800000;
    *(float32x4_t *)a1[82].f32 = v78;
    *(float32x4_t *)a1[84].f32 = v79;
    if ((*(_DWORD *)(v77 + 24) & 0x3FFFFFFF) != 0)
    {
      v80 = 0;
      do
      {
        v78 = vminnmq_f32(v78, *(float32x4_t *)(data + 16 * v80));
        *(float32x4_t *)a1[82].f32 = v78;
        v79 = vmaxnmq_f32(v79, *(float32x4_t *)(data + 16 * v80));
        *(float32x4_t *)a1[84].f32 = v79;
        ++v80;
      }
      while (v80 < (4 * *(_DWORD *)(v77 + 24)));
    }
    v107 = __invert_f4(*(simd_float4x4 *)(a2 + 32));
    v81 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v107.columns[0], COERCE_FLOAT(*(_OWORD *)a1[82].f32)), (float32x4_t)v107.columns[1], a1[82], 1), (float32x4_t)v107.columns[2], *(float32x4_t *)a1[82].f32, 2), (float32x4_t)v107.columns[3], *(float32x4_t *)a1[82].f32, 3);
    v107.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v107.columns[0], COERCE_FLOAT(*(_OWORD *)a1[84].f32)), (float32x4_t)v107.columns[1], a1[84], 1), (float32x4_t)v107.columns[2], *(float32x4_t *)a1[84].f32, 2), (float32x4_t)v107.columns[3], *(float32x4_t *)a1[84].f32, 3);
    *(float32x4_t *)a1[82].f32 = v81;
    *(simd_float4 *)a1[84].f32 = v107.columns[0];
  }
  else
  {
    *(_OWORD *)a1[82].f32 = 0u;
    *(_OWORD *)a1[84].f32 = 0u;
  }
  jet_buffer_pool::commit_data(*v11);
  jet_buffer_pool::commit_data(*v14);
  jet_buffer_pool::commit_data(*v12);
  v10 = *(unsigned int *)(*((_QWORD *)&v97 + 1) + 24);
  _Block_object_dispose(&v94, 8);
  _Block_object_dispose(&v97, 8);
LABEL_81:
  _Block_object_dispose(&v101, 8);
  v82 = v106;
  if (v106)
  {
    p_shared_owners = (unint64_t *)&v106->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  return v10;
}

void sub_1DC8F47AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 200), 8);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v33 - 168);
  _Unwind_Resume(a1);
}

void SKCParticleSystemNode::subclassRecomputeFlags(id *this)
{
  if (objc_msgSend(this[72], "_usesTimeUniform")
    && !*((_BYTE *)this + 172)
    && (*((_BYTE *)this + 171) & 0x60) != 0)
  {
    SKCNode::setFlags((SKCNode *)this, 66, 1);
  }
}

uint64_t SKCParticleSystemNode::generateRenderData_Points(float32x2_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  float32x2_t *v6;
  unsigned int v7;
  float32x2_t v8;
  uint64_t v9;
  uint64_t v10;
  jet_buffer_pool **v11;
  jet_buffer_pool **v12;
  jet_buffer_pool *v13;
  uint64_t data;
  uint64_t v15;
  float v16;
  int32x4_t v17;
  __int128 v18;
  uint64_t v19;
  float32x4_t v20;
  const float *v21;
  float32x2_t v22;
  float32x4_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  _QWORD v36[4];
  int32x4_t v37;
  _QWORD *v38;
  __int128 *v39;
  float32x2_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  _QWORD v45[3];
  int v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  _QWORD v50[5];
  uint64_t v51;
  float32x2_t *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  simd_float4x4 v57;

  SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v55);
  v51 = 0;
  v52 = (float32x2_t *)&v51;
  v53 = 0x2020000000;
  v54 = 0;
  v4 = (uint64_t)a1[74];
  if (!v4)
    goto LABEL_7;
  v5 = MEMORY[0x1E0C809B0];
  v50[0] = MEMORY[0x1E0C809B0];
  v50[1] = 3221225472;
  v50[2] = ___ZN21SKCParticleSystemNode25generateRenderData_PointsEP13SKCRenderInfo_block_invoke;
  v50[3] = &unk_1EA500A70;
  v50[4] = &v51;
  SKCParticleManager::enumerateParticleSystems(v4, v50);
  v6 = v52 + 3;
  if (v52[3].i32[0])
  {
    if (a1[73].i32[0] >= (unsigned __int32)v52[3].i32[0])
      v6 = a1 + 73;
    v7 = v6->i32[0];
    v8 = a1[75];
    if (v8)
      v9 = *(unsigned int *)(*(_QWORD *)&v8 + 16);
    else
      v9 = 0;
    v11 = (jet_buffer_pool **)&a1[75];
    std::shared_ptr<jet_buffer_pool>::reset[abi:ne180100](&a1[79]);
    if (v9 < v7)
    {
      std::shared_ptr<jet_buffer_pool>::reset[abi:ne180100](&a1[75]);
      std::shared_ptr<jet_buffer_pool>::reset[abi:ne180100](&a1[77]);
      do
        v9 = (2 * v9 + 2);
      while (v9 < v7);
    }
    if (*v11)
    {
      jet_buffer_pool::next_buffer(*v11);
    }
    else
    {
      v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v55 + 16))(v55, 0, 4, v9);
      std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&v47, v24);
      std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)&a1[75], &v47);
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
      if (*((_QWORD *)&v47 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    v12 = (jet_buffer_pool **)&a1[77];
    v13 = (jet_buffer_pool *)a1[77];
    if (v13)
    {
      jet_buffer_pool::next_buffer(v13);
    }
    else
    {
      v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55 + 16))(v55, 2, 4, v9);
      std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&v47, v28);
      std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)&a1[77], &v47);
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
      if (*((_QWORD *)&v47 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    data = jet_buffer_pool::get_data(*v11);
    v15 = jet_buffer_pool::get_data(*v12);
    *(_QWORD *)&v47 = 0;
    *((_QWORD *)&v47 + 1) = &v47;
    v48 = 0x2020000000;
    v49 = 0;
    v16 = *(float *)(a2 + 96);
    v45[0] = 0;
    v45[1] = v45;
    v45[2] = 0x2020000000;
    v17 = vdupq_n_s32(0x7F7FFFFFu);
    v46 = 0;
    *(_QWORD *)&v18 = 0x80000000800000;
    *((_QWORD *)&v18 + 1) = 0x80000000800000;
    *(int32x4_t *)a1[82].f32 = v17;
    *(_OWORD *)a1[84].f32 = v18;
    v19 = (uint64_t)a1[74];
    v20 = 0uLL;
    if (v19)
    {
      v21 = (const float *)(a2 + 128);
      v17.i64[0] = *(_QWORD *)(a2 + 120);
      v22 = vld1_dup_f32(v21);
      v36[0] = v5;
      v36[1] = 3221225472;
      v36[2] = ___ZN21SKCParticleSystemNode25generateRenderData_PointsEP13SKCRenderInfo_block_invoke_2;
      v36[3] = &unk_1EA500AC0;
      *(float32x2_t *)v17.i8 = vdiv_f32(vcvt_f32_u32(*(uint32x2_t *)v17.i8), v22);
      v40 = a1;
      v41 = a2;
      v37 = v17;
      v44 = fminf(fmaxf(v16, 0.0), 1.0);
      v42 = data;
      v43 = v15;
      v38 = v45;
      v39 = &v47;
      SKCParticleManager::enumerateParticleSystems(v19, v36);
      v23 = 0uLL;
      v20 = 0uLL;
      if (*(_DWORD *)(*((_QWORD *)&v47 + 1) + 24))
      {
        v57 = __invert_f4(*(simd_float4x4 *)(a2 + 32));
        v23 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v57.columns[0], COERCE_FLOAT(*(_OWORD *)a1[82].f32)), (float32x4_t)v57.columns[1], a1[82], 1), (float32x4_t)v57.columns[2], *(float32x4_t *)a1[82].f32, 2), (float32x4_t)v57.columns[3], *(float32x4_t *)a1[82].f32, 3);
        v20 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v57.columns[0], COERCE_FLOAT(*(_OWORD *)a1[84].f32)), (float32x4_t)v57.columns[1], a1[84], 1), (float32x4_t)v57.columns[2], *(float32x4_t *)a1[84].f32, 2), (float32x4_t)v57.columns[3], *(float32x4_t *)a1[84].f32, 3);
      }
    }
    else
    {
      v23 = 0uLL;
    }
    *(float32x4_t *)a1[82].f32 = v23;
    *(float32x4_t *)a1[84].f32 = v20;
    jet_buffer_pool::commit_data(*(jet_buffer_pool **)&a1[75]);
    jet_buffer_pool::commit_data(*v12);
    v10 = *(unsigned int *)(*((_QWORD *)&v47 + 1) + 24);
    _Block_object_dispose(v45, 8);
    _Block_object_dispose(&v47, 8);
  }
  else
  {
LABEL_7:
    v10 = 0;
  }
  _Block_object_dispose(&v51, 8);
  v32 = v56;
  if (v56)
  {
    p_shared_owners = (unint64_t *)&v56->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  return v10;
}

void sub_1DC8F4C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 128), 8);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v26 - 96);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21SKCParticleSystemNode24generateRenderData_QuadsEP13SKCRenderInfo_block_invoke(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += *(_DWORD *)(a2 + 84);
  return result;
}

void ___ZN21SKCParticleSystemNode24generateRenderData_QuadsEP13SKCRenderInfo_block_invoke_2(float32x2_t *a1, uint64_t a2)
{
  uint64_t v4;
  float32x2_t *v5;
  float32x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  __float2 v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  unsigned int v22;
  float32x4_t v23;
  int v24;
  uint64_t v25;
  float32x2_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint8x8_t v31;
  uint8x8_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  int16x8_t v42;
  unsigned int v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int v47;
  __int32 *v48;
  int8x16_t v49;
  float32x4_t v50;
  uint64_t v51;
  __int32 v52;
  int16x8_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  void *__p[2];
  char v60;

  v4 = *(unsigned int *)(a2 + 84);
  std::string::basic_string[abi:ne180100]<0>(__p, "pos");
  v5 = *(float32x2_t **)(SKCParticleSystem::getSlice(a2, (const void **)__p) + 16);
  if (v60 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "size");
  v6 = *(float32x2_t **)(SKCParticleSystem::getSlice(a2, (const void **)__p) + 16);
  if (v60 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  v7 = *(_QWORD *)(SKCParticleSystem::getSlice(a2, (const void **)__p) + 16);
  if (v60 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "rot");
  v8 = *(_QWORD *)(SKCParticleSystem::getSlice(a2, (const void **)__p) + 16);
  if (v60 < 0)
    operator delete(__p[0]);
  if ((int)v4 >= 1)
  {
    v9 = 0;
    v10 = (float32x4_t *)a1[6];
    v56 = v10[3];
    v57 = v10[2];
    v54 = v10[5];
    v55 = v10[4];
    do
    {
      v11 = *v5++;
      v12 = v11;
      v13 = *v6++;
      v58 = *(float *)(v7 + v9);
      v14 = __sincosf_stret(*(float *)(v8 + v9));
      v15 = vmul_f32(a1[7], vmul_n_f32(vmul_f32(v13, (float32x2_t)0x3F0000003F000000), v58));
      v16 = vadd_f32(v12, vmul_f32(a1[8], v15));
      v17 = vmlaq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v16.f32[0]), v56, v16, 1), (float32x4_t)0, v55);
      v18 = vmlaq_f32(vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v57, v14.__cosval * v15.f32[0]), v56, v14.__sinval * v15.f32[0]), (float32x4_t)0, v55), (float32x4_t)0, v54);
      v19 = vmlaq_f32(vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v57, -(float)(v15.f32[1] * v14.__sinval)), v56, vmuls_lane_f32(v14.__cosval, v15, 1)), (float32x4_t)0, v55), (float32x4_t)0, v54);
      v20 = vaddq_f32(v54, v17);
      v21 = vsubq_f32(v20, v18);
      v22 = v9 + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a1[4] + 8) + 24);
      *(float32x4_t *)(*(_QWORD *)&a1[9] + 16 * v22) = vsubq_f32(v21, v19);
      v23 = vaddq_f32(v20, v18);
      *(float32x4_t *)(*(_QWORD *)&a1[9] + 16 * v22 + 16) = vsubq_f32(v23, v19);
      *(float32x4_t *)(*(_QWORD *)&a1[9] + 16 * v22 + 32) = vaddq_f32(v19, v23);
      *(float32x4_t *)(*(_QWORD *)&a1[9] + 16 * v22 + 48) = vaddq_f32(v19, v21);
      v9 += 4;
    }
    while (4 * v4 != v9);
  }
  if ((int)v4 >= 1)
  {
    v24 = 0;
    LODWORD(v27) = a1[12].i32[0];
    LODWORD(v25) = v27;
    HIDWORD(v25) = a1[12].i32[1];
    v26 = a1[13];
    HIDWORD(v27) = v26.i32[1];
    v28 = v4;
    do
    {
      v29 = v24 + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a1[4] + 8) + 24);
      *(_QWORD *)(*(_QWORD *)&a1[10] + 8 * v29) = v25;
      *(_QWORD *)(*(_QWORD *)&a1[10] + 8 * v29 + 8) = __PAIR64__(HIDWORD(v25), v26.u32[0]);
      *(float32x2_t *)(*(_QWORD *)&a1[10] + 8 * v29 + 16) = v26;
      *(_QWORD *)(*(_QWORD *)&a1[10] + 8 * v29 + 24) = v27;
      v24 += 4;
      --v28;
    }
    while (v28);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "outColor");
  v30 = *(_QWORD *)(SKCParticleSystem::getSlice(a2, (const void **)__p) + 16);
  if (v60 < 0)
    operator delete(__p[0]);
  if ((int)v4 < 4)
  {
    LODWORD(v36) = 0;
  }
  else
  {
    v35 = 0;
    v36 = 0;
    v37 = v30 + 12;
    v38 = (int8x16_t)vdupq_n_s32(0x4B400000u);
    v39 = (float32x4_t)vdupq_n_s32(0xCB400000);
    do
    {
      v31.i32[0] = *(_DWORD *)(v30 + v35);
      v32.i32[0] = *(_DWORD *)(v37 + v35 - 8);
      v40 = vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v31)), v38), v39);
      v41 = a1[14].f32[0];
      v33.i32[0] = *(_DWORD *)(v37 + v35 - 4);
      v34.i32[0] = *(_DWORD *)(v37 + v35);
      v42 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v40, v41));
      v34 = vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v34.f32)), v38), v39);
      *(int16x4_t *)v42.i8 = vmovn_s32((int32x4_t)v42);
      v43 = v35 + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a1[4] + 8) + 24);
      v42.i32[0] = vmovn_s16(v42).u32[0];
      v33 = vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v33.f32)), v38), v39), v41);
      *(_DWORD *)(*(_QWORD *)&a1[11] + 4 * v43) = v42.i32[0];
      *(_DWORD *)(*(_QWORD *)&a1[11] + 4 * v43 + 4) = v42.i32[0];
      v44 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v32)), v38), v39), v41));
      *(_DWORD *)(*(_QWORD *)&a1[11] + 4 * v43 + 8) = v42.i32[0];
      *(int16x4_t *)v44.i8 = vmovn_s32((int32x4_t)v44);
      *(_DWORD *)(*(_QWORD *)&a1[11] + 4 * v43 + 12) = v42.i32[0];
      v44.i32[0] = vmovn_s16(v44).u32[0];
      *(_DWORD *)(*(_QWORD *)&a1[11] + 4 * v43 + 16) = v44.i32[0];
      v45 = (int16x8_t)vcvtq_s32_f32(v33);
      *(_DWORD *)(*(_QWORD *)&a1[11] + 4 * v43 + 20) = v44.i32[0];
      *(int16x4_t *)v45.i8 = vmovn_s32((int32x4_t)v45);
      *(_DWORD *)(*(_QWORD *)&a1[11] + 4 * v43 + 24) = v44.i32[0];
      *(_DWORD *)(*(_QWORD *)&a1[11] + 4 * v43 + 28) = v44.i32[0];
      v32 = (uint8x8_t)vmovn_s16(v45);
      *(_DWORD *)(*(_QWORD *)&a1[11] + 4 * v43 + 32) = v32.i32[0];
      v46 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v34, v41));
      *(_DWORD *)(*(_QWORD *)&a1[11] + 4 * v43 + 36) = v32.i32[0];
      *(_DWORD *)(*(_QWORD *)&a1[11] + 4 * v43 + 40) = v32.i32[0];
      *(int16x4_t *)v46.i8 = vmovn_s32((int32x4_t)v46);
      *(_DWORD *)(*(_QWORD *)&a1[11] + 4 * v43 + 44) = v32.i32[0];
      v31 = (uint8x8_t)vmovn_s16(v46);
      *(_DWORD *)(*(_QWORD *)&a1[11] + 4 * v43 + 48) = v31.i32[0];
      *(_DWORD *)(*(_QWORD *)&a1[11] + 4 * v43 + 52) = v31.i32[0];
      *(_DWORD *)(*(_QWORD *)&a1[11] + 4 * v43 + 56) = v31.i32[0];
      *(_DWORD *)(*(_QWORD *)&a1[11] + 4 * v43 + 60) = v31.i32[0];
      v36 += 4;
      v35 += 16;
    }
    while (v36 < (v4 - 3));
  }
  if ((int)v36 < (int)v4)
  {
    v47 = 4 * v36;
    v48 = (__int32 *)(v30 + 4 * v36);
    v49 = (int8x16_t)vdupq_n_s32(0x4B400000u);
    v50 = (float32x4_t)vdupq_n_s32(0xCB400000);
    v51 = v4 - v36;
    do
    {
      v52 = *v48++;
      v31.i32[0] = v52;
      v53 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v31)), v49), v50), a1[14].f32[0]));
      *(int16x4_t *)v53.i8 = vmovn_s32((int32x4_t)v53);
      v31 = (uint8x8_t)vmovn_s16(v53);
      *(_DWORD *)(*(_QWORD *)&a1[11]
                + 4 * (v47 + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a1[4] + 8) + 24))) = v31.i32[0];
      *(_DWORD *)(*(_QWORD *)&a1[11]
                + 4 * (v47 + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a1[4] + 8) + 24) + 1)) = v31.i32[0];
      *(_DWORD *)(*(_QWORD *)&a1[11]
                + 4 * (v47 + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a1[4] + 8) + 24) + 2)) = v31.i32[0];
      *(_DWORD *)(*(_QWORD *)&a1[11]
                + 4 * (v47 + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a1[4] + 8) + 24) + 3)) = v31.i32[0];
      v47 += 4;
      --v51;
    }
    while (v51);
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a1[5] + 8) + 24) += v4;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a1[4] + 8) + 24) += 4 * v4;
}

void sub_1DC8F521C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN21SKCParticleSystemNode25generateRenderData_PointsEP13SKCRenderInfo_block_invoke(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += *(_DWORD *)(a2 + 84);
  return result;
}

void ___ZN21SKCParticleSystemNode25generateRenderData_PointsEP13SKCRenderInfo_block_invoke_2(float32x4_t *a1, uint64_t a2)
{
  float32x4_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x2_t v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint8x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  float32x4_t v25;
  unint64_t v26;
  __int32 *v27;
  int8x16_t v28;
  float32x4_t v29;
  float v30;
  int16x8_t v31;
  int16x8_t v32;
  int8x16_t v33;
  float32x4_t v34;
  int16x8_t v35;
  void *__p[2];
  char v37;

  v4 = (float32x4_t *)a1[4].i64[0];
  v5 = *(unsigned int *)(a2 + 84);
  std::string::basic_string[abi:ne180100]<0>(__p, "pos");
  v6 = *(_QWORD *)(SKCParticleSystem::getSlice(a2, (const void **)__p) + 16);
  if (v37 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "size");
  v7 = *(_QWORD *)(SKCParticleSystem::getSlice(a2, (const void **)__p) + 16);
  if (v37 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  v8 = *(_QWORD *)(SKCParticleSystem::getSlice(a2, (const void **)__p) + 16);
  if (v37 < 0)
    operator delete(__p[0]);
  if ((int)v5 >= 1)
  {
    v9 = 0;
    v10.i64[0] = 0x3F0000003F000000;
    v10.i64[1] = 0x3F0000003F000000;
    do
    {
      v11 = vmul_n_f32(*(float32x2_t *)(v7 + 8 * v9), *(float *)(v8 + 4 * v9));
      v12 = (float32x4_t *)a1[4].i64[1];
      v13 = v12[2];
      v14 = v12[3];
      v15 = v12[4];
      v16 = v12[5];
      v17 = vmulq_f32(a1[2], vabsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v11.f32[0]), v14, v11, 1), (float32x4_t)0, v15), (float32x4_t)0, v16)));
      v18 = vaddq_f32(v16, vmlaq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*(_QWORD *)(v6 + 8 * v9))), v14, *(float32x2_t *)(v6 + 8 * v9), 1), (float32x4_t)0, v15));
      v18.f32[3] = (float)(v12[8].f32[0] * vaddv_f32(*(float32x2_t *)v17.f32)) * 0.25;
      *(float32x4_t *)(a1[5].i64[0] + 16 * (v9 + *(_DWORD *)(*(_QWORD *)(a1[3].i64[0] + 8) + 24))) = v18;
      v19 = vminnmq_f32(v4[41], vmlsq_f32(v18, v10, v17));
      v20 = vmaxnmq_f32(v4[42], vmlaq_f32(v18, v10, v17));
      v4[41] = v19;
      v4[42] = v20;
      ++v9;
    }
    while ((_DWORD)v5 != (_DWORD)v9);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "outColor");
  v21 = *(_QWORD *)(SKCParticleSystem::getSlice(a2, (const void **)__p) + 16);
  if (v37 < 0)
    operator delete(__p[0]);
  if ((int)v5 < 4)
  {
    LODWORD(v26) = 0;
  }
  else
  {
    v26 = 0;
    v27 = (__int32 *)(v21 + 8);
    v28 = (int8x16_t)vdupq_n_s32(0x4B400000u);
    v29 = (float32x4_t)vdupq_n_s32(0xCB400000);
    do
    {
      v22.i32[0] = *(v27 - 2);
      v23.i32[0] = *(v27 - 1);
      v30 = a1[6].f32[0];
      v31 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v22)), v28), v29), v30));
      *(int16x4_t *)v31.i8 = vmovn_s32((int32x4_t)v31);
      v23 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v23.i8)), v28), v29), v30));
      *(int16x4_t *)v23.i8 = vmovn_s32((int32x4_t)v23);
      v24.i32[0] = *v27;
      v25.i32[0] = v27[1];
      v27 += 4;
      v24 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v24.i8)), v28), v29), v30));
      *(int16x4_t *)v24.i8 = vmovn_s32((int32x4_t)v24);
      v25 = vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v25.f32)), v28), v29);
      v32 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v25, v30));
      *(int16x4_t *)v32.i8 = vmovn_s32((int32x4_t)v32);
      *(_DWORD *)(a1[5].i64[1] + 4 * (v26 + *(_DWORD *)(*(_QWORD *)(a1[3].i64[0] + 8) + 24))) = vmovn_s16(v31).u32[0];
      *(_DWORD *)(a1[5].i64[1] + 4 * (v26 + *(_DWORD *)(*(_QWORD *)(a1[3].i64[0] + 8) + 24) + 1)) = vmovn_s16(v23).u32[0];
      *(_DWORD *)(a1[5].i64[1] + 4 * (v26 + *(_DWORD *)(*(_QWORD *)(a1[3].i64[0] + 8) + 24) + 2)) = vmovn_s16(v24).u32[0];
      v22 = (uint8x8_t)vmovn_s16(v32);
      *(_DWORD *)(a1[5].i64[1] + 4 * (v26 + *(_DWORD *)(*(_QWORD *)(a1[3].i64[0] + 8) + 24) + 3)) = v22.i32[0];
      v26 += 4;
    }
    while (v26 < (v5 - 3));
  }
  if ((int)v26 < (int)v5)
  {
    v26 = v26;
    v33 = (int8x16_t)vdupq_n_s32(0x4B400000u);
    v34 = (float32x4_t)vdupq_n_s32(0xCB400000);
    do
    {
      v22.i32[0] = *(_DWORD *)(v21 + 4 * v26);
      v35 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v22)), v33), v34), a1[6].f32[0]));
      *(int16x4_t *)v35.i8 = vmovn_s32((int32x4_t)v35);
      v22 = (uint8x8_t)vmovn_s16(v35);
      *(_DWORD *)(a1[5].i64[1] + 4 * (v26++ + *(_DWORD *)(*(_QWORD *)(a1[3].i64[0] + 8) + 24))) = v22.i32[0];
    }
    while (v5 != v26);
  }
  *(_DWORD *)(*(_QWORD *)(a1[3].i64[1] + 8) + 24) += v5;
  *(_DWORD *)(*(_QWORD *)(a1[3].i64[0] + 8) + 24) += v5;
}

void sub_1DC8F55DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double SKCParticleSystemNode::getBoundingBox(SKCParticleSystemNode *this)
{
  float32x4_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[4];
  __int128 v18;

  v2 = *((float32x4_t *)this + 41);
  *(float32x2_t *)&v2.u32[2] = vsub_f32(*(float32x2_t *)((char *)this + 672), *(float32x2_t *)v2.f32);
  *(double *)&v3 = SKCBoundingBoxMake(v2);
  v13 = v4;
  v14 = v3;
  v15 = v6;
  v16 = v5;
  (*(void (**)(SKCParticleSystemNode *))(*(_QWORD *)this + 104))(this);
  v11 = 0;
  v17[0] = v14;
  v17[1] = v13;
  v17[2] = v16;
  v17[3] = v15;
  do
  {
    *(__int128 *)((char *)&v18 + v11 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, COERCE_FLOAT(v17[v11])), v8, *(float32x2_t *)&v17[v11], 1), v9, (float32x4_t)v17[v11], 2), v10, (float32x4_t)v17[v11], 3);
    ++v11;
  }
  while (v11 != 4);
  return *(double *)&v18;
}

uint64_t SKCParticleSystemNode::getParticleManager(SKCParticleSystemNode *this)
{
  return *((_QWORD *)this + 74);
}

uint64_t SKCParticleSystemNode::addBatchRenderElements()
{
  return 0;
}

float SKCParticleSystemNode::update(SKCParticleSystemNode *this, double a2, float a3)
{
  double v5;
  unsigned __int8 v6;
  char **p_name;
  float v8;
  double v9;
  int v11;

  SKCNode::update(this, a2, 1.0);
  v5 = CACurrentMediaTime();
  _perfBeginEmitters(v5);
  p_name = &OBJC_PROTOCOL___NSSecureCoding.name;
  if ((v6 & 1) == 0)
  {
    p_name = &OBJC_PROTOCOL___NSSecureCoding.name;
    if (v11)
    {
      SKCParticleSystemNode::update(double,float)::lastTime = *(_QWORD *)&a2;
      p_name = (char **)(&OBJC_PROTOCOL___NSSecureCoding + 8);
    }
  }
  v8 = a2 - *((double *)p_name + 270);
  *((double *)p_name + 270) = a2;
  SKCParticleManager::update(*((_QWORD *)this + 74), v8);
  SKCParticleManager::compact(*((SKCParticleManager **)this + 74));
  v9 = CACurrentMediaTime();
  return _perfEndEmitters(v9);
}

BOOL SKCParticleSystemNode::getNeedsUpdate(SKCParticleSystemNode *this)
{
  BOOL NeedsUpdate;
  uint64_t v3;
  _BOOL8 v4;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  NeedsUpdate = SKCNode::getNeedsUpdate(this);
  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  v3 = *((_QWORD *)this + 74);
  if (v3)
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = ___ZN21SKCParticleSystemNode14getNeedsUpdateEv_block_invoke;
    v6[3] = &unk_1EA500A70;
    v6[4] = &v7;
    SKCParticleManager::enumerateParticleSystems(v3, v6);
  }
  v4 = NeedsUpdate || *((_DWORD *)v8 + 6) != 0;
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1DC8F57FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21SKCParticleSystemNode14getNeedsUpdateEv_block_invoke(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) += *(_DWORD *)(a2 + 84);
  return result;
}

void sub_1DC8F5BC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8F5D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1DC8F5F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DC8F6180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DC8F6290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)SKMutableTexture;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

float subtractAndNormalize(float a1, float a2)
{
  float result;

  result = a1 - a2;
  if (result < 0.0 || result > 6.2832)
    return result - (float)((float)(int)floorf(result / 6.2832) * 6.2832);
  return result;
}

void sub_1DC8F639C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8F65B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8F6778(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8F6834(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8F68D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8F69F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC8F7280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8F74F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8F75CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8F921C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1DC8FB6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  uint64_t v12;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1DF0CF560](v12, 0x10A0C40B78ACC54);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void sub_1DC8FB7A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FB888(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FBD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a27);

  _Unwind_Resume(a1);
}

void sub_1DC8FBE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DC8FBFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8FC390(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FC3F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8FC464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8FC4B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FC518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8FC56C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FC5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8FC620(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FC680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8FC6D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FC734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8FC788(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FC7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8FC83C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FC89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8FC8F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FCA5C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1081C40983EBE18);

  _Unwind_Resume(a1);
}

void sub_1DC8FCCEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8FCF08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8FCF94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FD02C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCStrength::SKCStrength(SKCStrength *this, SKCAction *a2)
{
  uint64_t v3;

  SKCAction::SKCAction((SKCAction *)this);
  *(_QWORD *)v3 = &off_1EA500B28;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(_QWORD *)(v3 + 56) = *(_QWORD *)&a2->var8;
  *(_QWORD *)(v3 + 88) = a2->var14;
  *(_BYTE *)(v3 + 32) = 1;
}

void SKCStrength::~SKCStrength(SKCStrength *this)
{
  SKCAction::~SKCAction((SKCAction *)this);
  JUMPOUT(0x1DF0CF560);
}

void SKCStrength::cpp_updateWithTargetForTime(SKCStrength *this, id *a2, double a3)
{
  float v6;
  float v7;
  id v8;
  double v9;
  float v10;
  id v11;

  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  v7 = v6;
  v11 = a2[1];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v8 = v11;
    objc_msgSend(v8, "strength");
    if (this->var25)
    {
      v10 = (float)(this->var23 * v7) + 1.0;
      *(float *)&v9 = (float)(*(float *)&v9 * v10) / this->var22;
      objc_msgSend(v8, "setStrength:", v9);
      this->var22 = v10;
    }
    else if (!this->var24)
    {
      *(float *)&v9 = (float)(v7 * this->var19) + (float)(this->var23 * (float)(1.0 - v7));
      objc_msgSend(v8, "setStrength:", v9);
    }
    this->var21 = v7;

  }
  if ((COERCE_UNSIGNED_INT(v7 + -1.0) & 0x60000000) == 0)
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, a3);

}

void sub_1DC8FD294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void SKCStrength::cpp_willStartWithTargetAtTime(SKCStrength *this, id *a2, double a3)
{
  id v5;
  void *v6;
  float v7;
  id v8;

  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, a3);
  v8 = a2[1];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = v8;
    v6 = v5;
    this->var21 = 0.0;
    if (this->var25)
    {
      this->var22 = 1.0;
      v7 = this->var19 + -1.0;
    }
    else
    {
      objc_msgSend(v5, "strength");
    }
    this->var23 = v7;

  }
}

void sub_1DC8FD350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8FD45C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1081C40F5A01273);

  _Unwind_Resume(a1);
}

void sub_1DC8FD824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8FDB30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8FDBE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FDC70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FDCF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FDD84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCResize::SKCResize(SKCResize *this, SKCAction *a2)
{
  uint64_t v3;

  SKCAction::SKCAction((SKCAction *)this);
  *(_QWORD *)v3 = &off_1EA500BC0;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(_QWORD *)(v3 + 56) = *(_QWORD *)&a2->var8;
  *(_QWORD *)(v3 + 88) = a2->var14;
  *(_BYTE *)(v3 + 32) = 1;
}

void SKCResize::~SKCResize(SKCResize *this)
{
  SKCAction::~SKCAction((SKCAction *)this);
  JUMPOUT(0x1DF0CF560);
}

void SKCResize::cpp_updateWithTargetForTime(SKCResize *this, SKCNode *a2, double a3)
{
  float v6;
  float v7;
  __int128 v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  __int128 v14;
  float32x2_t v15;
  __int128 v16;
  __int128 v17;

  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  v7 = v6;
  v8 = *((_OWORD *)a2 + 21);
  if (this->var24)
  {
    v9 = v6 - this->var19;
    v10 = 0.0;
    v11 = 0.0;
    if (this->var25)
      v11 = v9 * this->var20.var0;
    if (this->var26)
      v10 = v9 * this->var20.var1;
    *(float32x2_t *)&v8 = vadd_f32(*(float32x2_t *)&v8, (float32x2_t)__PAIR64__(LODWORD(v10), LODWORD(v11)));
    v12 = this->var22.var1 - v10;
    this->var22.var0 = this->var22.var0 - v11;
    this->var22.var1 = v12;
  }
  else if (!this->var23)
  {
    if (this->var25)
      v13 = (float)(v6 * this->var20.var0) + (float)(this->var22.var0 * (float)(1.0 - v6));
    else
      LODWORD(v13) = *((_OWORD *)a2 + 21);
    *(float *)&v8 = v13;
    if (this->var26)
      *((float *)&v8 + 1) = (float)(v7 * this->var20.var1) + (float)(this->var22.var1 * (float)(1.0 - v7));
  }
  v15 = (float32x2_t)v8;
  v16 = (unint64_t)v8;
  v17 = (unint64_t)v8;
  SKCNode::setSize((uint64_t)a2, &v17);
  this->var19 = v7;
  if ((COERCE_UNSIGNED_INT(v7 + -1.0) & 0x60000000) == 0)
  {
    *((_QWORD *)&v14 + 1) = *((_QWORD *)&v16 + 1);
    if (this->var24)
    {
      *(float32x2_t *)&v14 = vadd_f32(v15, (float32x2_t)this->var22);
      v17 = v14;
      SKCNode::setSize((uint64_t)a2, &v17);
      this->var22.var0 = 0.0;
      this->var22.var1 = 0.0;
    }
    else if (!this->var23)
    {
      v17 = v16;
      SKCNode::setSize((uint64_t)a2, &v17);
    }
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, a2, a3);
  }
}

__n128 SKCResize::cpp_willStartWithTargetAtTime(SKCResize *this, SKCNode *a2, double a3)
{
  __n128 result;

  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  this->var19 = 0.0;
  if (this->var24)
  {
    this->var22 = this->var20;
  }
  else
  {
    result = *((__n128 *)a2 + 21);
    this->var22 = ($94F468A8D4C62B317260615823C2B210)result.n128_u64[0];
  }
  return result;
}

void sub_1DC8FE1FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void setSKPhysicsDefaults(PKPhysicsBody *a1)
{
  PKPhysicsBody *v1;

  v1 = a1;
  -[PKPhysicsBody set_allowSleep:](v1, "set_allowSleep:", 1);
  -[PKPhysicsBody setCollisionBitMask:](v1, "setCollisionBitMask:", 0xFFFFFFFFLL);
  -[PKPhysicsBody setCategoryBitMask:](v1, "setCategoryBitMask:", 0xFFFFFFFFLL);

}

void sub_1DC8FE258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8FE29C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FE2E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FE324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FE370(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FE3BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FE400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FE444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FE488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FE4CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FE52C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FE680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void sub_1DC8FE76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC8FE7EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8FE874(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC8FE8C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FEB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC8FEC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8FECD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC8FED70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FEE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC8FEF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8FF038(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC8FF118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC8FF210(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC8FF2A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FF358(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC8FF3F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FF49C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DC8FF530(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC8FF770(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8FF944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8FFA64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8FFB5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8FFCB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC8FFE78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0CF560](v1, 0x10A1C406F2B08A1);
  _Unwind_Resume(a1);
}

void sub_1DC8FFFDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1DC9002BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC900514(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1DC900798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC9008B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC9009A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC900A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC900A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC900E68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

void sub_1DC901790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1DC901A24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC901B78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC901BEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC901C5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC901DCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC901E88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC901FA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC902214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{

  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::shared_ptr<jet_buffer_pool>>::~pair(uint64_t a1)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1DC902414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC902888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1DC9029EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC902C08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC902DC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC902FB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DC903238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1DC9035C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1DC903704(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC903968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1DC903B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1DC903BD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC903C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1DC903DEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC903F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DC9040CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DC9041E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__6(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__6(uint64_t a1)
{
  return std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](a1 + 48);
}

void sub_1DC90465C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC904DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](a27);
  _Unwind_Resume(a1);
}

void sub_1DC9054C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1DC905770(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC905C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1DC905F08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC905FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1DC90607C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC906368(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1DC906530(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC906614(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC90688C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<jet_buffer_pool>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<jet_buffer_pool>>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x48uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    v10 = 1;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_QWORD *std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1EA500D48;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DC906B0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_program *,std::shared_ptr<jet_program>::__shared_ptr_default_delete<jet_program,jet_program>,std::allocator<jet_program>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

uint64_t std::__shared_ptr_pointer<jet_program *,std::shared_ptr<jet_program>::__shared_ptr_default_delete<jet_program,jet_program>,std::allocator<jet_program>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_program *,std::shared_ptr<jet_program>::__shared_ptr_default_delete<jet_program,jet_program>,std::allocator<jet_program>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1DC906E1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC906FA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC9070B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC9072CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1DC907524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void SKCTransformNode::SKCTransformNode(SKCTransformNode *this)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  int32x4_t v5;
  int32x4_t v6;
  __int128 v7;
  float v8;
  float v9;
  float v10;
  float v12;
  float v13;
  __int128 v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float v21;
  float32_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  __int128 v35;
  float32x2_t v36;
  float32x2_t v37;
  float v38;
  unsigned int v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;

  SKCNode::SKCNode(this);
  *(_QWORD *)v1 = off_1EA500E40;
  *(_BYTE *)(v1 + 560) = 0;
  v2 = MEMORY[0x1E0C83FF0];
  v3 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
  *(_OWORD *)(v1 + 576) = *MEMORY[0x1E0C83FF0];
  *(_OWORD *)(v1 + 592) = v3;
  v4 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v1 + 608) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v1 + 624) = v4;
  v5 = *(int32x4_t *)MEMORY[0x1E0C83FE8];
  v6 = *(int32x4_t *)(MEMORY[0x1E0C83FE8] + 16);
  v7 = *(_OWORD *)(MEMORY[0x1E0C83FE8] + 32);
  LODWORD(v8) = HIDWORD(*(_QWORD *)(MEMORY[0x1E0C83FE8] + 16));
  v9 = COERCE_FLOAT(*(_QWORD *)(MEMORY[0x1E0C83FE8] + 40));
  v10 = v9 + (float)(COERCE_FLOAT(*MEMORY[0x1E0C83FE8]) + v8);
  if (v10 >= 0.0)
  {
    v21 = sqrtf(v10 + 1.0);
    v22 = v21 + v21;
    v23 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v21 + v21));
    v24 = vmul_f32(v23, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v21 + v21), v23));
    v24.i32[0] = vmul_f32(v24, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v21 + v21), v24)).u32[0];
    *(float32x2_t *)&v35 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL), *(int32x2_t *)&v7), (float32x2_t)vext_s8(*(int8x8_t *)&v7, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), 4uLL)), v24.f32[0]);
    v25.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v5.i8, 1), *(float32x2_t *)v6.i8).u32[0];
    v25.f32[1] = v22;
    v24.i32[1] = 0.25;
    v37 = vmul_f32(v25, v24);
  }
  else if (*(float *)v5.i32 < v8 || *(float *)v5.i32 < v9)
  {
    v12 = 1.0 - *(float *)v5.i32;
    if (v8 >= v9)
    {
      v38 = sqrtf(v8 + (float)(v12 - v9));
      *(float *)&v39 = v38 + v38;
      v40 = vrecpe_f32((float32x2_t)v39);
      v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39, v40));
      v42.i32[0] = vmul_f32(v41, vrecps_f32((float32x2_t)v39, v41)).u32[0];
      v41.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v5.i8, 1), *(float32x2_t *)v6.i8).u32[0];
      v41.i32[1] = v39;
      v43 = (float32x2_t)vrev64_s32(*(int32x2_t *)&v7);
      v44.i32[0] = vadd_f32(v43, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL)).u32[0];
      v44.i32[1] = vsub_f32(v43, (float32x2_t)vdup_laneq_s32(v5, 2)).i32[1];
      v37 = vmul_n_f32(v44, v42.f32[0]);
      v42.i32[1] = 0.25;
      *(float32x2_t *)&v35 = vmul_f32(v41, v42);
    }
    else
    {
      v13 = sqrtf(v9 + (float)(v12 - v8));
      v14 = *MEMORY[0x1E0C83FE8];
      *(float *)&v14 = v13;
      v15 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL)), *(float32x2_t *)&v7);
      v16 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 0);
      v17 = vsub_f32(*(float32x2_t *)v5.i8, v16);
      v16.i32[0] = 2.0;
      v16.i32[0] = vmul_f32(*(float32x2_t *)&v14, v16).u32[0];
      v16.i32[1] = v17.i32[1];
      v18 = vrecpe_f32((float32x2_t)v16.u32[0]);
      v19 = vmul_f32(v18, vrecps_f32((float32x2_t)v16.u32[0], v18));
      v17.i32[0] = vmul_f32(v19, vrecps_f32((float32x2_t)v16.u32[0], v19)).u32[0];
      *(float32x2_t *)&v35 = vmul_n_f32(v15, v17.f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
      _D2.i32[1] = v17.i32[0];
      v37 = vmul_f32(v16, _D2);
    }
  }
  else
  {
    v26 = (float32x2_t)__PAIR64__(v5.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)v5.i32 + (float)((float)(1.0 - v8) - v9))));
    v27 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 0);
    v28 = vadd_f32(*(float32x2_t *)v5.i8, v27);
    v27.i32[0] = 2.0;
    v27.i32[0] = vmul_f32(v26, v27).u32[0];
    v27.i32[1] = v28.i32[1];
    v29 = vrecpe_f32((float32x2_t)v27.u32[0]);
    v30 = vmul_f32(v29, vrecps_f32((float32x2_t)v27.u32[0], v29));
    v26.i32[0] = vmul_f32(v30, vrecps_f32((float32x2_t)v27.u32[0], v30)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v26.i32[0];
    *(float32x2_t *)&v35 = vmul_f32(v27, _D5);
    v36.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), *(float32x2_t *)&v7).u32[0];
    v36.i32[1] = vsub_f32((float32x2_t)vdup_laneq_s32(v6, 2), *(float32x2_t *)&v7).i32[1];
    v37 = vmul_n_f32(v36, v26.f32[0]);
  }
  *((float32x2_t *)&v35 + 1) = v37;
  *(_OWORD *)(v1 + 640) = v35;
}

void SKCTransformNode::~SKCTransformNode(id *this)
{
  SKCNode::~SKCNode(this);
  JUMPOUT(0x1DF0CF560);
}

void SKCTransformNode::setQuaternion(SKCNode *this, simd_quatf a2)
{
  *((simd_quatf *)this + 40) = a2;
  *((_BYTE *)this + 560) = 1;
  *((_BYTE *)this + 368) = 1;
  SKCNode::setDirty(this);
}

__n128 SKCTransformNode::getQuaternion(__n128 *this)
{
  return this[40];
}

__n128 SKCTransformNode::_getRotationMatrix(SKCTransformNode *this)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  if (*((_BYTE *)this + 560))
  {
    _Q4 = *((_OWORD *)this + 40);
    result = *(__n128 *)MEMORY[0x1E0C83FF0];
    v2 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
    v3 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 32);
    v4 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
    _S5 = COERCE_FLOAT(HIDWORD(*((_QWORD *)this + 80))) + COERCE_FLOAT(HIDWORD(*((_QWORD *)this + 80)));
    __asm { FMLS            S7, S5, V4.S[1] }
    _S16 = COERCE_FLOAT(*((_QWORD *)this + 81)) + COERCE_FLOAT(*((_QWORD *)this + 81));
    __asm { FMLS            S7, S16, V4.S[2] }
    result.n128_u32[0] = _S7;
    _S7 = *(float *)&_Q4 + *(float *)&_Q4;
    __asm { FMLA            S18, S7, V4.S[1] }
    result.n128_u32[1] = _S18;
    __asm { FMLA            S18, S7, V4.S[2] }
    result.n128_u32[2] = _S18;
    __asm { FMLA            S18, S7, V4.S[1] }
    LODWORD(v2) = _S18;
    __asm
    {
      FMLS            S6, S7, V4.S[0]
      FMLS            S18, S16, V4.S[2]
    }
    DWORD1(v2) = _S18;
    __asm { FMLA            S18, S5, V4.S[2] }
    DWORD2(v2) = _S18;
    __asm { FMLA            S17, S7, V4.S[3] }
    LODWORD(v3) = _S17;
    __asm { FMLA            S16, S5, V4.S[2] }
    DWORD1(v3) = _S16;
    __asm { FMLS            S6, S5, V4.S[1] }
    DWORD2(v3) = _S6;
    *((__n128 *)this + 36) = result;
    *((_OWORD *)this + 37) = v2;
    *((_OWORD *)this + 38) = v3;
    *((_OWORD *)this + 39) = v4;
    *((_BYTE *)this + 560) = 0;
  }
  else
  {
    return *((__n128 *)this + 36);
  }
  return result;
}

double SKCTransformNode::getTransformMatrix(__n128 *this, double a2, double a3, __n128 a4, __n128 a5, double a6, double a7, __n128 a8, __n128 a9)
{
  int v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  __n128 RotationMatrix;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  _OWORD v28[4];
  _OWORD v29[4];

  v10 = this[23].n128_u8[0];
  *(double *)v11.i64 = SKCNode::getTransformMatrix(this, a2, a3, a4, a5, a6, a7, a8, a9);
  if (v10)
  {
    v26 = v12;
    v27 = v11;
    v24 = v14;
    v25 = v13;
    RotationMatrix = SKCTransformNode::_getRotationMatrix((SKCTransformNode *)this);
    v16 = 0;
    v28[0] = RotationMatrix;
    v28[1] = v17;
    v28[2] = v18;
    v28[3] = v19;
    do
    {
      v29[v16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, COERCE_FLOAT(v28[v16])), v26, *(float32x2_t *)&v28[v16], 1), v25, (float32x4_t)v28[v16], 2), v24, (float32x4_t)v28[v16], 3);
      ++v16;
    }
    while (v16 != 4);
    v11.i64[0] = *(_QWORD *)&v29[0];
    v20 = (__n128)v29[1];
    v21 = (__n128)v29[2];
    v22 = (__n128)v29[3];
    this[24] = (__n128)v29[0];
    this[25] = v20;
    this[26] = v21;
    this[27] = v22;
  }
  return *(double *)v11.i64;
}

void SKCLabelNode::SKCLabelNode(SKCLabelNode *this)
{
  uint64_t v2;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  dispatch_queue_t v11;
  void *v12;

  SKCNode::SKCNode(this);
  *(_QWORD *)v2 = off_1EA500F40;
  *(_QWORD *)(v2 + 560) = 0;
  *(_OWORD *)(v2 + 568) = 0u;
  *(_QWORD *)(v2 + 584) = CFSTR("HelveticaNeue-UltraLight");
  *(_DWORD *)(v2 + 592) = 1107296256;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v2 + 608) = _Q1;
  *(_OWORD *)(v2 + 624) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v2 + 640) = _Q1;
  *(_OWORD *)(v2 + 648) = 0u;
  *(_DWORD *)(v2 + 664) = 1;
  *(_QWORD *)(v2 + 672) = 4;
  *(_DWORD *)(v2 + 680) = 0;
  *(_QWORD *)(v2 + 688) = 0;
  *(_QWORD *)(v2 + 704) = 0;
  *(_QWORD *)(v2 + 696) = 0;
  *(_WORD *)(v2 + 712) = 257;
  *(_OWORD *)(v2 + 720) = 0u;
  *(_OWORD *)(v2 + 736) = 0u;
  v8 = objc_opt_new();
  v9 = (void *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = v8;

  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  v10 = objc_claimAutoreleasedReturnValue();
  v11 = dispatch_queue_create("com.apple.spritekit.labelSyncQueue", v10);
  v12 = (void *)*((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = v11;

}

void sub_1DC907A38(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 720);
  if (v3)
  {
    *(_QWORD *)(v1 + 728) = v3;
    operator delete(v3);
  }

  SKCNode::~SKCNode((id *)v1);
  _Unwind_Resume(a1);
}

void SKCLabelNode::~SKCLabelNode(SKCLabelNode *this)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_1EA500F40;
  v2 = (_QWORD *)*((_QWORD *)this + 90);
  v3 = (_QWORD *)*((_QWORD *)this + 91);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 88))(*v2);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 90);
  }
  *((_QWORD *)this + 91) = v2;
  v4 = (const void *)*((_QWORD *)this + 86);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 86) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;

  v6 = (void *)*((_QWORD *)this + 90);
  if (v6)
  {
    *((_QWORD *)this + 91) = v6;
    operator delete(v6);
  }

  SKCNode::~SKCNode((id *)this);
}

{
  SKCLabelNode::~SKCLabelNode(this);
  JUMPOUT(0x1DF0CF560);
}

void SKCLabelNode::setFont(SKCLabelNode *this, CFTypeRef cf)
{
  const void *v4;

  v4 = (const void *)*((_QWORD *)this + 86);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 86) = 0;
  }
  if (cf)
  {
    CFRetain(cf);
    *((_QWORD *)this + 86) = cf;
  }
  *((_WORD *)this + 356) = 1;
  SKCNode::setDirty(this);
}

void SKCLabelNode::setText(SKCLabelNode *this, NSString *a2)
{
  uint64_t v3;
  void *v4;
  NSString *v5;

  v5 = a2;
  if (!-[NSString isEqualToString:](v5, "isEqualToString:", *((_QWORD *)this + 71)))
  {
    v3 = -[NSString copy](v5, "copy");
    v4 = (void *)*((_QWORD *)this + 71);
    *((_QWORD *)this + 71) = v3;

    *((_BYTE *)this + 712) = 1;
    SKCNode::setDirty(this);
  }

}

void sub_1DC907C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void SKCLabelNode::setNumberOfLines(SKCNode *this, int a2)
{
  int v2;

  v2 = a2 & ~(a2 >> 31);
  if (v2 != *((_DWORD *)this + 166))
  {
    *((_BYTE *)this + 712) = 1;
    *((_DWORD *)this + 166) = v2;
    SKCNode::setDirty(this);
  }
}

void SKCLabelNode::setLineBreakNode(SKCNode *this, NSLineBreakMode a2)
{
  if (*((_QWORD *)this + 84) != a2)
  {
    *((_QWORD *)this + 84) = a2;
    SKCNode::setDirty(this);
  }
}

void SKCLabelNode::setPreferredMaxLayoutWidth(SKCNode *this, float a2)
{
  if (a2 < 0.0)
    a2 = 0.0;
  if (a2 != *((float *)this + 170))
  {
    *((float *)this + 170) = a2;
    SKCNode::setDirty(this);
  }
}

void SKCLabelNode::setAttributedString(SKCLabelNode *this, NSAttributedString *a2)
{
  uint64_t v3;
  void *v4;
  NSAttributedString *v5;

  v5 = a2;
  if (!-[NSAttributedString isEqualToAttributedString:](v5, "isEqualToAttributedString:", *((_QWORD *)this + 72)))
  {
    v3 = -[NSAttributedString copy](v5, "copy");
    v4 = (void *)*((_QWORD *)this + 72);
    *((_QWORD *)this + 72) = v3;

    *((_BYTE *)this + 712) = 1;
    SKCNode::setDirty(this);
  }

}

void sub_1DC907D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

char *SKCLabelNode::addRenderableChildren(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD v10[6];

  v6 = *(NSObject **)(a1 + 744);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___ZN12SKCLabelNode12rebuildLabelEP13SKCRenderInfo_block_invoke;
  v10[3] = &__block_descriptor_48_e5_v8__0l;
  v10[4] = a1;
  v10[5] = a2;
  dispatch_sync(v6, v10);
  v7 = *(uint64_t **)(a1 + 720);
  v8 = *(uint64_t **)(a1 + 728);
  if (v7 != v8)
    std::vector<SKCNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SKCSpriteNode **>,std::__wrap_iter<SKCSpriteNode **>>(a3, *(char **)(a3 + 8), v7, v8, v8 - v7);
  return SKCNode::addRenderableChildren((char *)a1, a2, a3);
}

void SKCLabelNode::rebuildLabel(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *(NSObject **)(a1 + 744);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___ZN12SKCLabelNode12rebuildLabelEP13SKCRenderInfo_block_invoke;
  v3[3] = &__block_descriptor_48_e5_v8__0l;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

double SKCLabelNode::getBoundingBox(__n128 *this)
{
  NSObject *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  simd_float4 v6;
  simd_float4 v7;
  simd_float4 v8;
  simd_float4 v9;
  simd_float4 v10;
  simd_float4 v11;
  simd_float4 v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  double result;
  simd_float4x4 v19;
  simd_float4x4 v20;
  simd_float4x4 block;

  v2 = this[46].n128_u64[1];
  block.columns[0].i64[0] = MEMORY[0x1E0C809B0];
  block.columns[0].i64[1] = 3221225472;
  block.columns[1].i64[0] = (uint64_t)___ZN12SKCLabelNode12rebuildLabelEP13SKCRenderInfo_block_invoke;
  block.columns[1].i64[1] = (uint64_t)&__block_descriptor_48_e5_v8__0l;
  block.columns[2] = (simd_float4)(unint64_t)this;
  dispatch_sync(v2, &block);
  v3 = (uint64_t *)this[45].n128_u64[0];
  v4 = (uint64_t *)this[45].n128_u64[1];
  if (v3 == v4)
  {
    *(_QWORD *)&result = SKCNode::getBoundingBox(this).n128_u64[0];
  }
  else
  {
    v19 = *(simd_float4x4 *)SKCBoundingBoxEmpty;
    do
    {
      v5 = *v3++;
      *(double *)v6.i64 = (*(double (**)(uint64_t))(*(_QWORD *)v5 + 120))(v5);
      block.columns[0] = v6;
      block.columns[1] = v7;
      block.columns[2] = v8;
      block.columns[3] = v9;
      v19.columns[0] = (simd_float4)SKCBoundingBoxUnion(&v19, &block);
      v19.columns[1] = v10;
      v19.columns[2] = v11;
      v19.columns[3] = v12;
    }
    while (v3 != v4);
    (*(void (**)(__n128 *))(this->n128_u64[0] + 104))(this);
    v17 = 0;
    v20 = v19;
    do
    {
      block.columns[v17] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*(_OWORD *)&v20.columns[v17])), v14, *(float32x2_t *)v20.columns[v17].f32, 1), v15, (float32x4_t)v20.columns[v17], 2), v16, (float32x4_t)v20.columns[v17], 3);
      ++v17;
    }
    while (v17 != 4);
    return *(double *)block.columns[0].i64;
  }
  return result;
}

float32x2_t SKCLabelNode::rebuildPixelSize(float32x2_t *a1)
{
  float32x2_t v1;
  float32x2_t result;

  if (!*(_QWORD *)&a1[88])
  {
    v1 = vadd_f32(a1[80], (float32x2_t)0xC0000000C0000000);
    result = vmul_f32(v1, v1);
    result.f32[0] = sqrtf(vaddv_f32(result));
    if (result.f32[0] > 0.00000011921)
    {
      result = (float32x2_t)0x4000000040000000;
      a1[80] = (float32x2_t)0x4000000040000000;
      a1[89].i8[0] = 1;
    }
  }
  return result;
}

void SKCLabelNode::rebuildFont(SKCLabelNode *this)
{
  uint64_t v2;
  void *v3;
  const __CTFontDescriptor *v4;
  const __CTFontDescriptor *MatchingFontDescriptor;
  const __CTFontDescriptor *v6;
  CTFontRef v7;

  if (*((_BYTE *)this + 713))
  {
    *((_BYTE *)this + 712) = 1;
    +[SKBitmapFont fontForFileNamed:](SKBitmapFont, "fontForFileNamed:", *((_QWORD *)this + 73));
    v2 = objc_claimAutoreleasedReturnValue();
    v3 = (void *)*((_QWORD *)this + 88);
    *((_QWORD *)this + 88) = v2;

    if (*((_QWORD *)this + 88))
    {
      SKCLabelNode::setFont(this, 0);
    }
    else
    {
      v4 = CTFontDescriptorCreateWithNameAndSize(*((CFStringRef *)this + 73), *((float *)this + 148));
      MatchingFontDescriptor = CTFontDescriptorCreateMatchingFontDescriptor(v4, 0);
      if (MatchingFontDescriptor)
      {
        v6 = MatchingFontDescriptor;
        v7 = CTFontCreateWithFontDescriptor(MatchingFontDescriptor, *((float *)this + 148), 0);
        CFRelease(v6);
      }
      else
      {
        NSLog(CFSTR("SKLabelNode: \"%@\" font not found."), *((_QWORD *)this + 73));
        v7 = CTFontCreateWithFontDescriptor(v4, *((float *)this + 148), 0);
      }
      CFRelease(v4);
      SKCLabelNode::setFont(this, v7);
      if (v7)
        CFRelease(v7);
    }
  }
}

void SKCLabelNode::rebuildText(SKCLabelNode *this)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  CGFloat width;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  void *v12;
  CGFloat x;
  double y;
  double height;
  double v16;
  double v17;
  uint64_t v18;
  void *v19;
  double v20;
  double v21;
  double v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  const __CFAttributedString *v31;
  CGColorSpace *DeviceRGB;
  float32x4_t v33;
  CGColorRef v34;
  uint64_t v35;
  const __CFDictionary *v36;
  int v37;
  const __CTTypesetter *v38;
  const __CTLine *Line;
  double v40;
  double v41;
  double v42;
  double v43;
  CTFrameRef Frame;
  const __CTFramesetter *v45;
  const __CTFramesetter *v46;
  float v47;
  double v48;
  BOOL v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  double v53;
  int v54;
  double v55;
  double v56;
  double v57;
  CGSize v58;
  const CGPath *v59;
  void *v60;
  float v61;
  double v62;
  BOOL v63;
  BOOL v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  void *v71;
  CGColorSpace *v72;
  CGContext *v73;
  CGColorSpace *v74;
  float32x4_t v75;
  CGColor *v76;
  uint64_t v77;
  double v78;
  double v79;
  uint64_t v80;
  double v81;
  double v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t i;
  void *v87;
  double v88;
  double v89;
  double v90;
  uint64_t v91;
  void *v92;
  SKCSpriteNode *v93;
  __int128 v94;
  unsigned int v95;
  __n128 v96;
  uint64_t v97;
  float v98;
  float v99;
  SKCSpriteNode **v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  SKCSpriteNode **v108;
  char *v109;
  _QWORD *v110;
  _QWORD *v111;
  SKCSpriteNode *v112;
  float v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  void *values[2];
  void *keys;
  uint64_t v121;
  CGFloat components[2];
  float64x2_t v123;
  _BYTE v124[128];
  uint64_t v125;
  CFRange v126;
  CFRange v127;
  CFRange v128;
  CFRange v129;
  CGRect v130;
  CGRect v131;
  CGRect v132;
  CGRect BoundsWithOptions;
  CGRect v134;
  CGRect v135;
  CGRect v136;
  CGRect v137;
  CGRect v138;
  CGRect v139;

  v125 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 712))
  {
    v2 = (_QWORD **)((char *)this + 720);
    v3 = (_QWORD *)*((_QWORD *)this + 90);
    v4 = (_QWORD *)*((_QWORD *)this + 91);
    if (v3 != v4)
    {
      do
      {
        if (*v3)
          (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 88))(*v3);
        ++v3;
      }
      while (v3 != v4);
      v3 = *v2;
    }
    *((_QWORD *)this + 91) = v3;
    objc_msgSend(*((id *)this + 1), "removeChildrenInArray:", *((_QWORD *)this + 70));
    objc_msgSend(*((id *)this + 70), "removeAllObjects");
    v5 = (void *)*((_QWORD *)this + 87);
    if (v5)
    {
      *((_QWORD *)this + 87) = 0;

    }
    v6 = (void *)*((_QWORD *)this + 71);
    if (v6 || *((_QWORD *)this + 72))
    {
      if (*((_QWORD *)this + 88))
      {
        v7 = objc_msgSend(v6, "length");
        width = 0.0;
        if (v7)
        {
          v9 = v7;
          v10 = 0;
          v11 = 0;
          v12 = 0;
          x = 0.0;
          y = 0.0;
          height = 0.0;
          v16 = 0.0;
          v17 = 0.0;
          do
          {
            v18 = objc_msgSend(*((id *)this + 71), "characterAtIndex:", v10);
            objc_msgSend(*((id *)this + 88), "spriteForCharacterNamed:", v18);
            v19 = (void *)objc_claimAutoreleasedReturnValue();

            if (v19)
            {
              objc_msgSend(*((id *)this + 88), "kerningForCharacterNamed:followedBy:", v11, v18);
              v21 = v20;
              objc_msgSend(v19, "position");
              v22 = v16 + v21;
              objc_msgSend(v19, "setPosition:", v22);
              objc_msgSend(v19, "setZPosition:", 0.0);
              objc_msgSend(MEMORY[0x1E0CEA478], "colorWithRed:green:blue:alpha:", *((float *)this + 76), *((float *)this + 77), *((float *)this + 78), *((float *)this + 79));
              v23 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v19, "setColor:", v23);

              objc_msgSend(v19, "setColorBlendFactor:", *((float *)this + 80));
              objc_msgSend(*((id *)this + 1), "addChild:", v19);
              objc_msgSend(*((id *)this + 70), "addObject:", v19);
              objc_msgSend(*((id *)this + 88), "advanceForCharacterNamed:", v18);
              v25 = v24;
              if (!v10)
              {
                objc_msgSend(v19, "size");
                v17 = fmax(v25 - v26, 0.0);
              }
              objc_msgSend(v19, "frame");
              v139.origin.x = v27;
              v139.origin.y = v28;
              v139.size.width = v29;
              v139.size.height = v30;
              v130.origin.x = x;
              v130.origin.y = y;
              v130.size.width = width;
              v130.size.height = height;
              v131 = CGRectUnion(v130, v139);
              x = v131.origin.x;
              y = v131.origin.y;
              width = v131.size.width;
              height = v131.size.height;
              v16 = v22 + v25;
              v11 = v18;
            }
            ++v10;
            v12 = v19;
          }
          while (v9 != v10);
          if (v19)
          {
            objc_msgSend(v19, "calculateAccumulatedFrame");
            v16 = fmax(v16, CGRectGetMaxX(v132));
          }
        }
        else
        {
          v19 = 0;
          y = 0.0;
          height = 0.0;
          v17 = 0.0;
          v16 = 0.0;
        }
        v77 = *((_QWORD *)this + 81);
        v78 = 1.0;
        if (v77 != 2)
          v78 = 0.0;
        if (v77)
          v79 = v78;
        else
          v79 = 0.5;
        v80 = *((_QWORD *)this + 82);
        if (v80 == 3)
        {
          v82 = -y;
        }
        else
        {
          v81 = -(y - height * -0.5);
          if (v80 != 1)
            v81 = 0.0;
          if (v80 == 2)
            v82 = -y - height;
          else
            v82 = v81;
        }
        v117 = 0u;
        v118 = 0u;
        v115 = 0u;
        v116 = 0u;
        v83 = *((id *)this + 70);
        v84 = objc_msgSend(v83, "countByEnumeratingWithState:objects:count:", &v115, v124, 16);
        if (v84)
        {
          v85 = *(_QWORD *)v116;
          do
          {
            for (i = 0; i != v84; ++i)
            {
              if (*(_QWORD *)v116 != v85)
                objc_enumerationMutation(v83);
              v87 = *(void **)(*((_QWORD *)&v115 + 1) + 8 * i);
              objc_msgSend(v87, "position");
              v89 = v88;
              objc_msgSend(v87, "position");
              objc_msgSend(v87, "setPosition:", v89 + -(v17 + v16) * v79, v82 + v90);
            }
            v84 = objc_msgSend(v83, "countByEnumeratingWithState:objects:count:", &v115, v124, 16);
          }
          while (v84);
        }

LABEL_99:
        *((_BYTE *)this + 712) = 0;
        return;
      }
      v31 = (const __CFAttributedString *)*((id *)this + 72);
      if (!v31)
      {
        DeviceRGB = CGColorSpaceCreateDeviceRGB();
        v33 = *((float32x4_t *)this + 38);
        *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)v33.f32);
        v123 = vcvt_hight_f64_f32(v33);
        v34 = CGColorCreate(DeviceRGB, components);
        CFRelease(DeviceRGB);
        v35 = *MEMORY[0x1E0CA8550];
        keys = (void *)*MEMORY[0x1E0CA8188];
        v121 = v35;
        values[0] = *((void **)this + 86);
        values[1] = v34;
        v36 = CFDictionaryCreate(0, (const void **)&keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v31 = CFAttributedStringCreate(0, *((CFStringRef *)this + 71), v36);
        CFRelease(v36);
        CFRelease(v34);
      }
      v37 = *((_DWORD *)this + 166);
      if (v37 && v37 < 2)
      {
        v38 = CTTypesetterCreateWithAttributedString(v31);
        v126.location = 0;
        v126.length = 0;
        Line = CTTypesetterCreateLine(v38, v126);
        CFRelease(v38);
        BoundsWithOptions = CTLineGetBoundsWithOptions(Line, 8uLL);
        v134 = CGRectIntegral(BoundsWithOptions);
        v40 = v134.origin.x;
        v41 = v134.origin.y;
        v42 = v134.size.width;
        v43 = v134.size.height;
        Frame = 0;
      }
      else
      {
        v45 = CTFramesetterCreateWithAttributedString(v31);
        v46 = v45;
        v47 = *((float *)this + 170);
        v48 = v47;
        v49 = v47 == 0.0;
        v50 = 0x7FEFFFFFFFFFFFFFLL;
        if (v49)
          v51 = 1.79769313e308;
        else
          v51 = v48;
        v127.location = 0;
        v127.length = 0;
        v52 = 0x7FEFFFFFFFFFFFFFLL;
        v53 = CTFramesetterSuggestFrameSizeWithConstraints(v45, v127, 0, *(CGSize *)&v50, 0).height;
        v54 = *((_DWORD *)this + 166);
        v55 = v53 * (double)(v54 + 1);
        v56 = 1.79769313e308;
        if (v54)
          v56 = v55;
        v128.location = 0;
        v128.length = 0;
        v57 = v51;
        v58 = CTFramesetterSuggestFrameSizeWithConstraints(v46, v128, 0, *(CGSize *)(&v56 - 1), 0);
        v135.size.width = v58.width;
        v135.size.height = v58.height;
        v135.origin.x = 0.0;
        v135.origin.y = 0.0;
        v136 = CGRectIntegral(v135);
        v40 = v136.origin.x;
        v41 = v136.origin.y;
        v42 = v136.size.width;
        v43 = v136.size.height;
        v59 = CGPathCreateWithRect(v136, 0);
        v129.location = 0;
        v129.length = 0;
        Frame = CTFramesetterCreateFrame(v46, v129, v59, 0);
        CGPathRelease(v59);
        CFRelease(v46);
        Line = 0;
      }
      CFRelease(v31);
      keys = 0;
      v121 = 0;
      objc_msgSend(*((id *)this + 72), "attribute:atIndex:effectiveRange:", *MEMORY[0x1E0CEA138], 0, &keys);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "floatValue");
      v62 = fabsf(v61);
      v63 = v61 < 0.0;
      v64 = v61 <= 0.0;
      v65 = 1.0;
      if (v63)
        v65 = v62;
      if (v64)
        v66 = v65;
      else
        v66 = v62;
      v67 = ceil(v42) + v66 * 2.0;
      if (v67 <= 0.0 || (v68 = ceil(v43) + v66 * 2.0, v68 <= 0.0))
      {
LABEL_94:
        if (Line)
          CFRelease(Line);
        if (Frame)
          CFRelease(Frame);

        goto LABEL_99;
      }
      v69 = v67 * COERCE_FLOAT(*((_QWORD *)this + 80));
      v70 = v68 * COERCE_FLOAT(HIDWORD(*((_QWORD *)this + 80)));
      v71 = malloc_type_malloc(4 * (unint64_t)v70 * (unint64_t)v69, 0x100004077774924uLL);
      v72 = CGColorSpaceCreateDeviceRGB();
      v73 = CGBitmapContextCreate(v71, (unint64_t)v69, (unint64_t)v70, 8uLL, 4 * (unint64_t)v69, v72, 0x4001u);
      CGContextSetRenderingIntent(v73, kCGRenderingIntentPerceptual);
      CGContextSetAllowsAntialiasing(v73, 1);
      CGContextSetShouldAntialias(v73, 1);
      CGContextSetInterpolationQuality(v73, kCGInterpolationHigh);
      CGContextSetAllowsFontSmoothing(v73, 1);
      CGContextSetShouldSmoothFonts(v73, 1);
      CGContextSetAllowsFontSubpixelPositioning(v73, 1);
      CGContextSetShouldSubpixelPositionFonts(v73, 1);
      CGContextSetAllowsFontSubpixelQuantization(v73, 1);
      CGContextSetShouldSubpixelQuantizeFonts(v73, 1);
      CGColorSpaceRelease(v72);
      v137.origin.x = 0.0;
      v137.origin.y = 0.0;
      v137.size.width = v69;
      v137.size.height = v70;
      CGContextClearRect(v73, v137);
      if (*((float *)this + 159) > 0.0)
      {
        v74 = CGColorSpaceCreateDeviceRGB();
        v75 = *((float32x4_t *)this + 39);
        *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)v75.f32);
        v123 = vcvt_hight_f64_f32(v75);
        v76 = CGColorCreate(v74, components);
        CGContextSetFillColorWithColor(v73, v76);
        v138.origin.x = 0.0;
        v138.origin.y = 0.0;
        v138.size.width = v69;
        v138.size.height = v70;
        CGContextFillRect(v73, v138);
        CGColorRelease(v76);
        CGColorSpaceRelease(v74);
      }
      CGContextScaleCTM(v73, COERCE_FLOAT(*((_QWORD *)this + 80)), (float)-COERCE_FLOAT(HIDWORD(*((_QWORD *)this + 80))));
      CGContextTranslateCTM(v73, 0.0, -v68);
      CGContextTranslateCTM(v73, v66 - v40, v66 - v41);
      if (Line)
      {
        CTLineDraw(Line, v73);
      }
      else if (Frame)
      {
        CTFrameDraw(Frame, v73);
      }
      +[SKTexture _textureByTransferingData:size:](SKTexture, "_textureByTransferingData:size:", v71, v69, v70);
      v91 = objc_claimAutoreleasedReturnValue();
      v92 = (void *)*((_QWORD *)this + 87);
      *((_QWORD *)this + 87) = v91;

      CGContextRelease(v73);
      v93 = (SKCSpriteNode *)operator new();
      SKCSpriteNode::SKCSpriteNode(v93);
      SKCSpriteNode::setPrimaryTexture((id *)v93, *((SKTexture **)this + 87));
      *(float *)&v94 = v67;
      *(float *)&v95 = v68;
      v113 = *(float *)&v95;
      v114 = v94;
      *(_OWORD *)components = __PAIR64__(v95, v94);
      SKCNode::setSize((uint64_t)v93, components);
      (*(void (**)(SKCSpriteNode *, char *))(*(_QWORD *)v93 + 184))(v93, (char *)this + 304);
      (*(void (**)(SKCSpriteNode *, char *))(*(_QWORD *)v93 + 192))(v93, (char *)this + 320);
      components[0] = 0.0;
      components[1] = 0.0;
      SKCNode::setAnchor(v93, components);
      v97 = *((_QWORD *)this + 81);
      if (v97)
      {
        v96.n128_u64[0] = 0;
        if (v97 != 2)
        {
LABEL_71:
          switch(*((_QWORD *)this + 82))
          {
            case 0:
              v99 = v41;
              goto LABEL_76;
            case 1:
              v99 = -floorf(v113 * 0.5);
              goto LABEL_76;
            case 2:
              v99 = -v113;
LABEL_76:
              v96.n128_f32[1] = v99;
              break;
            case 3:
              v96.n128_u32[1] = 0;
              break;
            default:
              break;
          }
          SKCNode::setTranslation(v93, v96);
          *((_QWORD *)v93 + 10) = this;
          v100 = (SKCSpriteNode **)*((_QWORD *)this + 91);
          v101 = *((_QWORD *)this + 92);
          if ((unint64_t)v100 >= v101)
          {
            v103 = v100 - (SKCSpriteNode **)*v2;
            if ((unint64_t)(v103 + 1) >> 61)
              std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
            v104 = v101 - (_QWORD)*v2;
            v105 = v104 >> 2;
            if (v104 >> 2 <= (unint64_t)(v103 + 1))
              v105 = v103 + 1;
            if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
              v106 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v106 = v105;
            if (v106)
              v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)this + 736, v106);
            else
              v107 = 0;
            v108 = (SKCSpriteNode **)&v107[8 * v103];
            v109 = &v107[8 * v106];
            *v108 = v93;
            v102 = v108 + 1;
            v110 = (_QWORD *)*((_QWORD *)this + 91);
            v111 = (_QWORD *)*((_QWORD *)this + 90);
            if (v110 != v111)
            {
              do
              {
                v112 = (SKCSpriteNode *)*--v110;
                *--v108 = v112;
              }
              while (v110 != v111);
              v110 = *v2;
            }
            *((_QWORD *)this + 90) = v108;
            *((_QWORD *)this + 91) = v102;
            *((_QWORD *)this + 92) = v109;
            if (v110)
              operator delete(v110);
          }
          else
          {
            *v100 = v93;
            v102 = v100 + 1;
          }
          *((_QWORD *)this + 91) = v102;
          goto LABEL_94;
        }
        v96.n128_u64[1] = *((_QWORD *)&v114 + 1);
        v98 = -*(float *)&v114;
      }
      else
      {
        v98 = -floorf(*(float *)&v114 * 0.5);
      }
      v96.n128_u64[0] = LODWORD(v98);
      goto LABEL_71;
    }
  }
}

void sub_1DC908ACC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN12SKCLabelNode12rebuildLabelEP13SKCRenderInfo_block_invoke(uint64_t a1)
{
  float32x2_t *v2;
  float32x2_t v3;

  v2 = *(float32x2_t **)(a1 + 32);
  SKCLabelNode::rebuildFont((SKCLabelNode *)v2);
  if (*(_QWORD *)(a1 + 40))
  {
    if (!*(_QWORD *)&v2[88])
    {
      v3 = vadd_f32(v2[80], (float32x2_t)0xC0000000C0000000);
      if (sqrtf(vaddv_f32(vmul_f32(v3, v3))) > 0.00000011921)
      {
        v2[80] = (float32x2_t)0x4000000040000000;
        v2[89].i8[0] = 1;
      }
    }
  }
  SKCLabelNode::rebuildText((SKCLabelNode *)v2);
}

void SKCLabelNode::setColor(SKCNode *a1, _OWORD *a2)
{
  SKCNode::setColor(a1, a2);
  *((_BYTE *)a1 + 712) = 1;
  SKCNode::setDirty(a1);
}

void SKCLabelNode::setColorBlendFactor(SKCLabelNode *this, float *a2)
{
  SKCNode::setColorBlendFactor(this, a2);
  *((_BYTE *)this + 712) = 1;
  SKCNode::setDirty(this);
}

char *std::vector<SKCNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SKCSpriteNode **>,std::__wrap_iter<SKCSpriteNode **>>(uint64_t a1, char *__src, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  char *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void *__p;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;

  v5 = __src;
  if (a5 < 1)
    return v5;
  v7 = a3;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(_BYTE **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v15 = (__src - v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v40 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v9, v17);
    else
      v18 = 0;
    v31 = &v18[8 * v15];
    __p = v18;
    v37 = v31;
    v39 = &v18[8 * v17];
    v32 = 8 * a5;
    v33 = &v31[8 * a5];
    do
    {
      v34 = *v7++;
      *(_QWORD *)v31 = v34;
      v31 += 8;
      v32 -= 8;
    }
    while (v32);
    v38 = v33;
    v5 = std::vector<SKCNode *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v38 != v37)
      v38 += (v37 - v38 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = (uint64_t)(v12 - (_QWORD)__src) >> 3;
  if (v19 >= a5)
  {
    v20 = &a3[a5];
    v21 = *(char **)(v9 - 8);
LABEL_18:
    v25 = &__src[8 * a5];
    v26 = &v21[-8 * a5];
    v27 = v21;
    if ((unint64_t)v26 < v12)
    {
      v27 = v21;
      do
      {
        v28 = *(_QWORD *)v26;
        v26 += 8;
        *(_QWORD *)v27 = v28;
        v27 += 8;
      }
      while ((unint64_t)v26 < v12);
    }
    *(_QWORD *)(a1 + 8) = v27;
    if (v21 != v25)
      memmove(&v21[-8 * ((v21 - v25) >> 3)], __src, v21 - v25);
    if (v20 != v7)
    {
      v29 = v5;
      do
      {
        v30 = *v7++;
        *(_QWORD *)v29 = v30;
        v29 += 8;
      }
      while (v7 != v20);
    }
    return v5;
  }
  v20 = &a3[v19];
  v21 = *(char **)(v9 - 8);
  if (v20 != a4)
  {
    v22 = v20;
    v23 = *(_QWORD **)(v9 - 8);
    do
    {
      v24 = *v22++;
      *v23++ = v24;
      v21 += 8;
    }
    while (v22 != a4);
  }
  *(_QWORD *)(a1 + 8) = v21;
  if ((uint64_t)(v12 - (_QWORD)__src) >= 1)
    goto LABEL_18;
  return v5;
}

void sub_1DC908E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SKCRendererEnsureBufferPoolCapacity(_QWORD *a1, int a2, int a3)
{
  unsigned int v4;
  unsigned int v5;
  double v8;
  uint64_t v9;

  v4 = *(_DWORD *)(*a1 + 16);
  v5 = a3 + a2;
  if (v5 >= v4)
  {
    if (v5 > 0xAAA8)
      return 0;
    v8 = (double)v5 * 1.5;
    if (v8 < (double)(2 * v4))
      v8 = (double)(2 * v4);
    if (v8 > 43688.0)
      v8 = 43688.0;
    v9 = (int)v8;
    kdebug_trace();
    (**(void (***)(_QWORD, uint64_t))*a1)(*a1, v9);
  }
  return 1;
}

uint64_t SKCRendererEnsureBufferCapacity(_QWORD *a1, int a2, int a3)
{
  unsigned int v4;
  unsigned int v5;
  double v8;
  uint64_t v9;

  v4 = *(_DWORD *)(*a1 + 48);
  v5 = a3 + a2;
  if (v5 >= v4)
  {
    if (v5 > 0xAAA8)
      return 0;
    v8 = (double)v5 * 1.5;
    if (v8 < (double)(2 * v4))
      v8 = (double)(2 * v4);
    if (v8 > 43688.0)
      v8 = 43688.0;
    v9 = (int)v8;
    kdebug_trace();
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, v9);
  }
  return 1;
}

void SKCRendererSetup(void)
{
  if (SKCRendererSetup(void)::onceToken != -1)
    dispatch_once(&SKCRendererSetup(void)::onceToken, &__block_literal_global_13);
}

void ___Z16SKCRendererSetupv_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t Context;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t texture_2d;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  _OWORD v44[2];
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  jet_setClientLabel(CFSTR("com.apple.SpriteKit"));
  v0 = dispatch_queue_create("SKCRenderer_resource_queue", 0);
  v1 = (void *)SKCRenderer_resource_queue;
  SKCRenderer_resource_queue = (uint64_t)v0;

  v44[0] = 0uLL;
  if (SKGetShouldEnableMetal())
  {
    SKGetGlobalMetalDevice();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (v2)
    {
      v3 = operator new();
      MEMORY[0x1DF0CF47C](v3, v2);
      std::shared_ptr<jet_context>::shared_ptr[abi:ne180100]<jet_context_Metal,void>(&v45, v3);
      v4 = v45;
      v45 = 0uLL;
      v5 = (std::__shared_weak_count *)*((_QWORD *)&v44[0] + 1);
      v44[0] = v4;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
      if (*((_QWORD *)&v45 + 1))
      {
        v9 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    else
    {
      Context = jet_createContext();
      std::shared_ptr<jet_context>::shared_ptr[abi:ne180100]<jet_context,void>(&v45, Context);
      v20 = v45;
      v45 = 0uLL;
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v44[0] + 1);
      v44[0] = v20;
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
      if (*((_QWORD *)&v45 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)&v44[0] + 136))(*(_QWORD *)&v44[0]) == 1)
      {
        v45 = v44[0];
        if (*((_QWORD *)&v44[0] + 1))
        {
          v27 = (unint64_t *)(*((_QWORD *)&v44[0] + 1) + 8);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        (*(void (**)(_QWORD))(**(_QWORD **)&v44[0] + 360))(*(_QWORD *)&v44[0]);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if (*((_QWORD *)&v44[0] + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v44[0] + 1) + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v44[0] + 1) + 16))(*((_QWORD *)&v44[0] + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v44[0] + 1));
          }
        }
        SKSetGlobalMetalDevice(v29);

      }
    }
  }
  else
  {
    SKEnsureGlobalGLShareContext();
    v11 = operator new();
    SKGetGlobalGLShareContext();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    MEMORY[0x1DF0CF4A0](v11, v2);
    std::shared_ptr<jet_context>::shared_ptr[abi:ne180100]<jet_context_OpenGL,void>(&v45, v11);
    v12 = v45;
    v45 = 0uLL;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v44[0] + 1);
    v44[0] = v12;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
    if (*((_QWORD *)&v45 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }

  (*(void (**)(_QWORD))(**(_QWORD **)&v44[0] + 136))(*(_QWORD *)&v44[0]);
  *(_QWORD *)&v45 = -1;
  *((_QWORD *)&v45 + 1) = -1;
  v44[1] = xmmword_1DC923480;
  texture_2d = jet_context::create_texture_2d();
  std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v43, texture_2d);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)&qword_1F03A3560, &v43);
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = jet_context::create_texture_2d();
  std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v43, v36);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)&unk_1F03A3570, &v43);
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  std::shared_ptr<jet_texture>::operator=[abi:ne180100](&SKCRendererGlobals::GetInstance(void)::instance, (uint64_t *)v44);
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v44[0] + 1);
  if (*((_QWORD *)&v44[0] + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v44[0] + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_1DC909460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1DC909510()
{
  JUMPOUT(0x1DC909508);
}

void SKCPerformResourceOperation(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  id v4;
  _QWORD block[4];
  id v6;

  v1 = a1;
  if (SKCRendererSetup(void)::onceToken != -1)
  {
    v4 = v1;
    dispatch_once(&SKCRendererSetup(void)::onceToken, &__block_literal_global_13);
    v1 = v4;
  }
  v2 = SKCRenderer_resource_queue;
  if (SKCRenderer_resource_queue)
  {
    block[1] = 3221225472;
    block[2] = ___Z27SKCPerformResourceOperationU13block_pointerFvNSt3__110shared_ptrI11jet_contextEEE_block_invoke;
    block[3] = &unk_1EA4FFFB8;
    v3 = v1;
    block[0] = MEMORY[0x1E0C809B0];
    v6 = v1;
    dispatch_sync(v2, block);

    v1 = v3;
  }

}

void ___Z27SKCPerformResourceOperationU13block_pointerFvNSt3__110shared_ptrI11jet_contextEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v1 = *(_QWORD *)(a1 + 32);
  v7 = SKCRendererGlobals::GetInstance(void)::instance;
  v8 = *(std::__shared_weak_count **)algn_1F03A3558;
  if (*(_QWORD *)algn_1F03A3558)
  {
    v2 = (unint64_t *)(*(_QWORD *)algn_1F03A3558 + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  (*(void (**)(uint64_t, uint64_t *))(v1 + 16))(v1, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1DC909654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SKCPerformResourceOperationAsync(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a1;
  v4 = a2;
  if (SKCRendererSetup(void)::onceToken != -1)
    dispatch_once(&SKCRendererSetup(void)::onceToken, &__block_literal_global_13);
  v5 = SKCRenderer_resource_queue;
  if (SKCRenderer_resource_queue)
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = ___Z32SKCPerformResourceOperationAsyncU13block_pointerFvNSt3__110shared_ptrI11jet_contextEEEU13block_pointerFvvE_block_invoke;
    v6[3] = &unk_1EA501058;
    v7 = v3;
    v8 = v4;
    dispatch_async(v5, v6);

  }
}

uint64_t ___Z32SKCPerformResourceOperationAsyncU13block_pointerFvNSt3__110shared_ptrI11jet_contextEEEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v9 = SKCRendererGlobals::GetInstance(void)::instance;
  v10 = *(std::__shared_weak_count **)algn_1F03A3558;
  if (*(_QWORD *)algn_1F03A3558)
  {
    v3 = (unint64_t *)(*(_QWORD *)algn_1F03A3558 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v9);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t))(result + 16))(result);
  return result;
}

void sub_1DC9097DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SKCRenderer::loadShaders(SKCRenderer *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  id v178;
  uint64_t v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *v234;
  unint64_t v235;
  id v236;
  uint64_t v237;
  id v238;
  uint64_t v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  void *v253;
  void *v254;
  void *v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  void *v274;
  void *v275;
  void *v276;
  void *v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t *v280;
  unint64_t v281;
  uint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  __int128 v289;
  __int128 v290;
  uint64_t v291;
  std::__shared_weak_count *v292;

  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 126) + 136))(*((_QWORD *)this + 126)) == 1)
    SKEnsureGlobalMetalLibrary();
  v2 = *((_QWORD *)this + 126);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
  v291 = v2;
  v292 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2) == 1)
  {
    *(_QWORD *)&v290 = v2;
    *((_QWORD *)&v290 + 1) = v3;
    if (v3)
    {
      v6 = (unint64_t *)&v3->__shared_owners_;
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    SKGetGlobalMetalLibrary();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v8, "newFunctionWithName:", CFSTR("WhiteShader_VertexFunc"));

    SKGetGlobalMetalLibrary();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = (void *)objc_msgSend(v10, "newFunctionWithName:", CFSTR("WhiteShader_FragFunc"));

    v12 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v2 + 424))(v2, v9);
    v13 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v2 + 424))(v2, v11);

    if (v3)
    {
      v14 = (unint64_t *)&v3->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = v291;
  }
  else
  {
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v2 + 72))(v2, -[__CFString UTF8String](WhiteShader_vsh[0], "UTF8String"), "main", 1, 0);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v2 + 72))(v2, -[__CFString UTF8String](WhiteShader_fsh[0], "UTF8String"), "main", 2, 0);
  }
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 80))(v2, v12, v13);
  std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(&v290, v16);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 216, &v290);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
  if (*((_QWORD *)&v290 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v20 = v292;
  if (v292)
  {
    v21 = (unint64_t *)&v292->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = *((_QWORD *)this + 126);
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
  v291 = v23;
  v292 = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 136))(v23) != 1)
  {
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v23 + 72))(v23, -[__CFString UTF8String](FastSingle_vsh[0], "UTF8String"), "main", 1, 0);
    v34 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v23 + 72))(v23, -[__CFString UTF8String](FastSingle_fsh[0], "UTF8String"), "main", 2, 0);
    v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 80))(v23, v33, v34);
    std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(&v290, v42);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 248, &v290);
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
    if (!*((_QWORD *)&v290 + 1))
      goto LABEL_52;
    v43 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
    do
      v41 = __ldaxr(v43);
    while (__stlxr(v41 - 1, v43));
    goto LABEL_50;
  }
  *(_QWORD *)&v290 = v23;
  *((_QWORD *)&v290 + 1) = v24;
  if (v24)
  {
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  SKGetGlobalMetalLibrary();
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = (void *)objc_msgSend(v29, "newFunctionWithName:", CFSTR("FastSingle_VertexFunc"));

  SKGetGlobalMetalLibrary();
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = (void *)objc_msgSend(v31, "newFunctionWithName:", CFSTR("FastSingle_FragFunc"));

  v33 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v23 + 424))(v23, v30);
  v34 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v23 + 424))(v23, v32);
  v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 80))(v23, v33, v34);
  std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(&v289, v35);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 248, &v289);
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v289 + 1);
  if (*((_QWORD *)&v289 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v289 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }

  v39 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
  if (*((_QWORD *)&v290 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
LABEL_50:
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
LABEL_52:
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v44 = v292;
  if (v292)
  {
    v45 = (unint64_t *)&v292->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = *((_QWORD *)this + 126);
  v48 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
  v291 = v47;
  v292 = v48;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 136))(v47) == 1)
  {
    *(_QWORD *)&v290 = v47;
    *((_QWORD *)&v290 + 1) = v48;
    if (v48)
    {
      v51 = (unint64_t *)&v48->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    SKGetGlobalMetalLibrary();
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v54 = (void *)objc_msgSend(v53, "newFunctionWithName:", CFSTR("FastSingle_VertexFunc"));

    SKGetGlobalMetalLibrary();
    v55 = (void *)objc_claimAutoreleasedReturnValue();
    v56 = (void *)objc_msgSend(v55, "newFunctionWithName:", CFSTR("FastSingleDiscard_FragFunc"));

    v57 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v47 + 424))(v47, v54);
    v58 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v47 + 424))(v47, v56);
    v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47 + 80))(v47, v57, v58);
    std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(&v289, v59);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 264, &v289);
    v60 = (std::__shared_weak_count *)*((_QWORD *)&v289 + 1);
    if (*((_QWORD *)&v289 + 1))
    {
      v61 = (unint64_t *)(*((_QWORD *)&v289 + 1) + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    if (v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    if (v58)
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);

    v63 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
    if (*((_QWORD *)&v290 + 1))
    {
      v64 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
  }
  else
  {
    v66 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v47 + 72))(v47, objc_msgSend(Discard_vsh, "UTF8String"), "main", 1, 0);
    v67 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v47 + 72))(v47, objc_msgSend(Discard_fsh, "UTF8String"), "main", 2, 0);
    v68 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47 + 80))(v47, v66, v67);
    std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(&v290, v68);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 264, &v290);
    v69 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
    if (*((_QWORD *)&v290 + 1))
    {
      v70 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    if (v67)
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
    if (v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  }
  v72 = v292;
  if (v292)
  {
    v73 = (unint64_t *)&v292->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = *((_QWORD *)this + 126);
  v76 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
  v291 = v75;
  v292 = v76;
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v75 + 136))(v75) == 1)
  {
    *(_QWORD *)&v290 = v75;
    *((_QWORD *)&v290 + 1) = v76;
    if (v76)
    {
      v79 = (unint64_t *)&v76->__shared_owners_;
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    SKGetGlobalMetalLibrary();
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    v82 = (void *)objc_msgSend(v81, "newFunctionWithName:", CFSTR("SolidColor_VertexFunc"));

    SKGetGlobalMetalLibrary();
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    v84 = (void *)objc_msgSend(v83, "newFunctionWithName:", CFSTR("SolidColor_FragFunc"));

    v85 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v75 + 424))(v75, v82);
    v86 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v75 + 424))(v75, v84);

    if (v76)
    {
      v87 = (unint64_t *)&v76->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    v75 = v291;
  }
  else
  {
    v85 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v75 + 72))(v75, -[__CFString UTF8String](SolidColor_vsh[0], "UTF8String"), "main", 1, 0);
    v86 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v75 + 72))(v75, -[__CFString UTF8String](SolidColor_fsh[0], "UTF8String"), "main", 2, 0);
  }
  v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 80))(v75, v85, v86);
  std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(&v290, v89);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 232, &v290);
  v90 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
  if (*((_QWORD *)&v290 + 1))
  {
    v91 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  if (v86)
    (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
  v93 = v292;
  if (v292)
  {
    v94 = (unint64_t *)&v292->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = *((_QWORD *)this + 126);
  v97 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
  v291 = v96;
  v292 = v97;
  if (v97)
  {
    v98 = (unint64_t *)&v97->__shared_owners_;
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v96 + 136))(v96) == 1)
  {
    *(_QWORD *)&v290 = v96;
    *((_QWORD *)&v290 + 1) = v97;
    if (v97)
    {
      v100 = (unint64_t *)&v97->__shared_owners_;
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 1, v100));
    }
    SKGetGlobalMetalLibrary();
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    v103 = (void *)objc_msgSend(v102, "newFunctionWithName:", CFSTR("Video_VertexFunc"));

    SKGetGlobalMetalLibrary();
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    v105 = (void *)objc_msgSend(v104, "newFunctionWithName:", CFSTR("Video_FragFunc"));

    v106 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v96 + 424))(v96, v103);
    v107 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v96 + 424))(v96, v105);

    if (v97)
    {
      v108 = (unint64_t *)&v97->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    v96 = v291;
  }
  else
  {
    v106 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v96 + 72))(v96, objc_msgSend(Video_vsh, "UTF8String"), "main", 1, 0);
    v107 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v96 + 72))(v96, objc_msgSend(Video_fsh, "UTF8String"), "main", 2, 0);
  }
  v110 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v96 + 80))(v96, v106, v107);
  std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(&v290, v110);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 360, &v290);
  v111 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
  if (*((_QWORD *)&v290 + 1))
  {
    v112 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
    do
      v113 = __ldaxr(v112);
    while (__stlxr(v113 - 1, v112));
    if (!v113)
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
  if (v106)
    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
  if (v107)
    (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
  v114 = v292;
  if (v292)
  {
    v115 = (unint64_t *)&v292->__shared_owners_;
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 - 1, v115));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  v117 = *((_QWORD *)this + 126);
  v118 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
  v291 = v117;
  v292 = v118;
  if (v118)
  {
    v119 = (unint64_t *)&v118->__shared_owners_;
    do
      v120 = __ldxr(v119);
    while (__stxr(v120 + 1, v119));
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v117 + 136))(v117) == 1)
  {
    *(_QWORD *)&v290 = v117;
    *((_QWORD *)&v290 + 1) = v118;
    if (v118)
    {
      v121 = (unint64_t *)&v118->__shared_owners_;
      do
        v122 = __ldxr(v121);
      while (__stxr(v122 + 1, v121));
    }
    SKGetGlobalMetalLibrary();
    v123 = (void *)objc_claimAutoreleasedReturnValue();
    v124 = (void *)objc_msgSend(v123, "newFunctionWithName:", CFSTR("Mask_VertexFunc"));

    SKGetGlobalMetalLibrary();
    v125 = (void *)objc_claimAutoreleasedReturnValue();
    v126 = (void *)objc_msgSend(v125, "newFunctionWithName:", CFSTR("Mask_FragFunc"));

    v127 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v117 + 424))(v117, v124);
    v128 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v117 + 424))(v117, v126);

    if (v118)
    {
      v129 = (unint64_t *)&v118->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    v117 = v291;
  }
  else
  {
    v127 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v117 + 72))(v117, -[__CFString UTF8String](Mask_vsh[0], "UTF8String"), "main", 1, 0);
    v128 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v117 + 72))(v117, -[__CFString UTF8String](Mask_fsh[0], "UTF8String"), "main", 2, 0);
  }
  v131 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v117 + 80))(v117, v127, v128);
  std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(&v290, v131);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 376, &v290);
  v132 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
  if (*((_QWORD *)&v290 + 1))
  {
    v133 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  if (v127)
    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
  if (v128)
    (*(void (**)(uint64_t))(*(_QWORD *)v128 + 8))(v128);
  v135 = v292;
  if (v292)
  {
    v136 = (unint64_t *)&v292->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
  v138 = *((_QWORD *)this + 126);
  v139 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
  v291 = v138;
  v292 = v139;
  if (v139)
  {
    v140 = (unint64_t *)&v139->__shared_owners_;
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v138 + 136))(v138) == 1)
  {
    *(_QWORD *)&v290 = v138;
    *((_QWORD *)&v290 + 1) = v139;
    if (v139)
    {
      v142 = (unint64_t *)&v139->__shared_owners_;
      do
        v143 = __ldxr(v142);
      while (__stxr(v143 + 1, v142));
    }
    SKGetGlobalMetalLibrary();
    v144 = (void *)objc_claimAutoreleasedReturnValue();
    v145 = (void *)objc_msgSend(v144, "newFunctionWithName:", CFSTR("Mask_VertexFunc"));

    SKGetGlobalMetalLibrary();
    v146 = (void *)objc_claimAutoreleasedReturnValue();
    v147 = (void *)objc_msgSend(v146, "newFunctionWithName:", CFSTR("Mask_Inverted_FragFunc"));

    v148 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v138 + 424))(v138, v145);
    v149 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v138 + 424))(v138, v147);

    if (v139)
    {
      v150 = (unint64_t *)&v139->__shared_owners_;
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
    }
    v138 = v291;
  }
  else
  {
    v148 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v138 + 72))(v138, -[__CFString UTF8String](Mask_vsh[0], "UTF8String"), "main", 1, 0);
    v149 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v138 + 72))(v138, -[__CFString UTF8String](Mask_Inverted_fsh[0], "UTF8String"), "main", 2, 0);
  }
  v152 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v138 + 80))(v138, v148, v149);
  std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(&v290, v152);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 392, &v290);
  v153 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
  if (*((_QWORD *)&v290 + 1))
  {
    v154 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
    do
      v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  if (v148)
    (*(void (**)(uint64_t))(*(_QWORD *)v148 + 8))(v148);
  if (v149)
    (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
  v156 = v292;
  if (v292)
  {
    v157 = (unint64_t *)&v292->__shared_owners_;
    do
      v158 = __ldaxr(v157);
    while (__stlxr(v158 - 1, v157));
    if (!v158)
    {
      ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
      std::__shared_weak_count::__release_weak(v156);
    }
  }
  v159 = *((_QWORD *)this + 126);
  v160 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
  v291 = v159;
  v292 = v160;
  if (v160)
  {
    v161 = (unint64_t *)&v160->__shared_owners_;
    do
      v162 = __ldxr(v161);
    while (__stxr(v162 + 1, v161));
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v159 + 136))(v159) == 1)
  {
    *(_QWORD *)&v290 = v159;
    *((_QWORD *)&v290 + 1) = v160;
    if (v160)
    {
      v163 = (unint64_t *)&v160->__shared_owners_;
      do
        v164 = __ldxr(v163);
      while (__stxr(v164 + 1, v163));
    }
    SKGetGlobalMetalLibrary();
    v165 = (void *)objc_claimAutoreleasedReturnValue();
    v166 = (void *)objc_msgSend(v165, "newFunctionWithName:", CFSTR("PointLight_VertexFunc"));

    SKGetGlobalMetalLibrary();
    v167 = (void *)objc_claimAutoreleasedReturnValue();
    v168 = (void *)objc_msgSend(v167, "newFunctionWithName:", CFSTR("PointLight_FragFunc"));

    v169 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v159 + 424))(v159, v166);
    v170 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v159 + 424))(v159, v168);
    v171 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v159 + 80))(v159, v169, v170);
    std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(&v289, v171);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 296, &v289);
    v172 = (std::__shared_weak_count *)*((_QWORD *)&v289 + 1);
    if (*((_QWORD *)&v289 + 1))
    {
      v173 = (unint64_t *)(*((_QWORD *)&v289 + 1) + 8);
      do
        v174 = __ldaxr(v173);
      while (__stlxr(v174 - 1, v173));
      if (!v174)
      {
        ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
        std::__shared_weak_count::__release_weak(v172);
      }
    }
    if (v169)
      (*(void (**)(uint64_t))(*(_QWORD *)v169 + 8))(v169);
    if (v170)
      (*(void (**)(uint64_t))(*(_QWORD *)v170 + 8))(v170);

    v175 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
    if (*((_QWORD *)&v290 + 1))
    {
      v176 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
      do
        v177 = __ldaxr(v176);
      while (__stlxr(v177 - 1, v176));
      if (!v177)
      {
        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
        std::__shared_weak_count::__release_weak(v175);
      }
    }
  }
  else
  {
    PointLight_vsh();
    v178 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v179 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v159 + 72))(v159, objc_msgSend(v178, "UTF8String"), "main", 1, 0);

    PointLight_fsh();
    v180 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v181 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v159 + 72))(v159, objc_msgSend(v180, "UTF8String"), "main", 2, 0);

    v182 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v159 + 80))(v159, v179, v181);
    std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(&v290, v182);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 296, &v290);
    v183 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
    if (*((_QWORD *)&v290 + 1))
    {
      v184 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
      do
        v185 = __ldaxr(v184);
      while (__stlxr(v185 - 1, v184));
      if (!v185)
      {
        ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
        std::__shared_weak_count::__release_weak(v183);
      }
    }
    if (v181)
      (*(void (**)(uint64_t))(*(_QWORD *)v181 + 8))(v181);
    if (v179)
      (*(void (**)(uint64_t))(*(_QWORD *)v179 + 8))(v179);
  }
  v186 = v292;
  if (v292)
  {
    v187 = (unint64_t *)&v292->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  v189 = *((_QWORD *)this + 126);
  v190 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
  v291 = v189;
  v292 = v190;
  if (v190)
  {
    v191 = (unint64_t *)&v190->__shared_owners_;
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 1, v191));
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v189 + 136))(v189) == 1)
  {
    *(_QWORD *)&v290 = v189;
    *((_QWORD *)&v290 + 1) = v190;
    if (v190)
    {
      v193 = (unint64_t *)&v190->__shared_owners_;
      do
        v194 = __ldxr(v193);
      while (__stxr(v194 + 1, v193));
    }
    SKGetGlobalMetalLibrary();
    v195 = (void *)objc_claimAutoreleasedReturnValue();
    v196 = (void *)objc_msgSend(v195, "newFunctionWithName:", CFSTR("FastSingleWithVertexTransform_VertexFunc"));

    SKGetGlobalMetalLibrary();
    v197 = (void *)objc_claimAutoreleasedReturnValue();
    v198 = (void *)objc_msgSend(v197, "newFunctionWithName:", CFSTR("FastSingle_FragFunc"));

    v199 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v189 + 424))(v189, v196);
    v200 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v189 + 424))(v189, v198);
    v201 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v189 + 80))(v189, v199, v200);
    std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(&v289, v201);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 280, &v289);
    v202 = (std::__shared_weak_count *)*((_QWORD *)&v289 + 1);
    if (*((_QWORD *)&v289 + 1))
    {
      v203 = (unint64_t *)(*((_QWORD *)&v289 + 1) + 8);
      do
        v204 = __ldaxr(v203);
      while (__stlxr(v204 - 1, v203));
      if (!v204)
      {
        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
        std::__shared_weak_count::__release_weak(v202);
      }
    }
    if (v199)
      (*(void (**)(uint64_t))(*(_QWORD *)v199 + 8))(v199);
    if (v200)
      (*(void (**)(uint64_t))(*(_QWORD *)v200 + 8))(v200);

    v205 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
    if (*((_QWORD *)&v290 + 1))
    {
      v206 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
      do
        v207 = __ldaxr(v206);
      while (__stlxr(v207 - 1, v206));
      if (!v207)
      {
        ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
        std::__shared_weak_count::__release_weak(v205);
      }
    }
  }
  else
  {
    v208 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v189 + 72))(v189, -[__CFString UTF8String](FastSingleWithVertexTransform_vsh[0], "UTF8String"), "main", 1, 0);
    v209 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v189 + 72))(v189, -[__CFString UTF8String](FastSingle_fsh[0], "UTF8String"), "main", 2, 0);
    v210 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v189 + 80))(v189, v208, v209);
    std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(&v290, v210);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 280, &v290);
    v211 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
    if (*((_QWORD *)&v290 + 1))
    {
      v212 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
      do
        v213 = __ldaxr(v212);
      while (__stlxr(v213 - 1, v212));
      if (!v213)
      {
        ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
        std::__shared_weak_count::__release_weak(v211);
      }
    }
    if (v209)
      (*(void (**)(uint64_t))(*(_QWORD *)v209 + 8))(v209);
    if (v208)
      (*(void (**)(uint64_t))(*(_QWORD *)v208 + 8))(v208);
  }
  v214 = v292;
  if (v292)
  {
    v215 = (unint64_t *)&v292->__shared_owners_;
    do
      v216 = __ldaxr(v215);
    while (__stlxr(v216 - 1, v215));
    if (!v216)
    {
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
    }
  }
  v217 = *((_QWORD *)this + 126);
  v218 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
  v291 = v217;
  v292 = v218;
  if (v218)
  {
    v219 = (unint64_t *)&v218->__shared_owners_;
    do
      v220 = __ldxr(v219);
    while (__stxr(v220 + 1, v219));
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v217 + 136))(v217) == 1)
  {
    *(_QWORD *)&v290 = v217;
    *((_QWORD *)&v290 + 1) = v218;
    if (v218)
    {
      v221 = (unint64_t *)&v218->__shared_owners_;
      do
        v222 = __ldxr(v221);
      while (__stxr(v222 + 1, v221));
    }
    SKGetGlobalMetalLibrary();
    v223 = (void *)objc_claimAutoreleasedReturnValue();
    v224 = (void *)objc_msgSend(v223, "newFunctionWithName:", CFSTR("PointLightWithVertexTransform_VertexFunc"));

    SKGetGlobalMetalLibrary();
    v225 = (void *)objc_claimAutoreleasedReturnValue();
    v226 = (void *)objc_msgSend(v225, "newFunctionWithName:", CFSTR("PointLight_FragFunc"));

    v227 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v217 + 424))(v217, v224);
    v228 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v217 + 424))(v217, v226);
    v229 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v217 + 80))(v217, v227, v228);
    std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(&v289, v229);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 312, &v289);
    v230 = (std::__shared_weak_count *)*((_QWORD *)&v289 + 1);
    if (*((_QWORD *)&v289 + 1))
    {
      v231 = (unint64_t *)(*((_QWORD *)&v289 + 1) + 8);
      do
        v232 = __ldaxr(v231);
      while (__stlxr(v232 - 1, v231));
      if (!v232)
      {
        ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
        std::__shared_weak_count::__release_weak(v230);
      }
    }
    if (v227)
      (*(void (**)(uint64_t))(*(_QWORD *)v227 + 8))(v227);
    if (v228)
      (*(void (**)(uint64_t))(*(_QWORD *)v228 + 8))(v228);

    v233 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
    if (*((_QWORD *)&v290 + 1))
    {
      v234 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
      do
        v235 = __ldaxr(v234);
      while (__stlxr(v235 - 1, v234));
      if (!v235)
      {
        ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
        std::__shared_weak_count::__release_weak(v233);
      }
    }
  }
  else
  {
    PointLightWithVertexTransform_vsh();
    v236 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v237 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v217 + 72))(v217, objc_msgSend(v236, "UTF8String"), "main", 1, 0);

    PointLight_fsh();
    v238 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v239 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v217 + 72))(v217, objc_msgSend(v238, "UTF8String"), "main", 2, 0);

    v240 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v217 + 80))(v217, v237, v239);
    std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(&v290, v240);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 312, &v290);
    v241 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
    if (*((_QWORD *)&v290 + 1))
    {
      v242 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
      do
        v243 = __ldaxr(v242);
      while (__stlxr(v243 - 1, v242));
      if (!v243)
      {
        ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
        std::__shared_weak_count::__release_weak(v241);
      }
    }
    if (v239)
      (*(void (**)(uint64_t))(*(_QWORD *)v239 + 8))(v239);
    if (v237)
      (*(void (**)(uint64_t))(*(_QWORD *)v237 + 8))(v237);
  }
  v244 = v292;
  if (v292)
  {
    v245 = (unint64_t *)&v292->__shared_owners_;
    do
      v246 = __ldaxr(v245);
    while (__stlxr(v246 - 1, v245));
    if (!v246)
    {
      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
      std::__shared_weak_count::__release_weak(v244);
    }
  }
  v247 = *((_QWORD *)this + 126);
  v248 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
  v291 = v247;
  v292 = v248;
  if (v248)
  {
    v249 = (unint64_t *)&v248->__shared_owners_;
    do
      v250 = __ldxr(v249);
    while (__stxr(v250 + 1, v249));
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v247 + 136))(v247) == 1)
  {
    *(_QWORD *)&v290 = v247;
    *((_QWORD *)&v290 + 1) = v248;
    if (v248)
    {
      v251 = (unint64_t *)&v248->__shared_owners_;
      do
        v252 = __ldxr(v251);
      while (__stxr(v252 + 1, v251));
    }
    SKGetGlobalMetalLibrary();
    v253 = (void *)objc_claimAutoreleasedReturnValue();
    v254 = (void *)objc_msgSend(v253, "newFunctionWithName:", CFSTR("PointSprite_VertexFunc"));

    SKGetGlobalMetalLibrary();
    v255 = (void *)objc_claimAutoreleasedReturnValue();
    v256 = (void *)objc_msgSend(v255, "newFunctionWithName:", CFSTR("PointSprite_FragFunc"));

    v257 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v247 + 424))(v247, v254);
    v258 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v247 + 424))(v247, v256);

    if (v248)
    {
      v259 = (unint64_t *)&v248->__shared_owners_;
      do
        v260 = __ldaxr(v259);
      while (__stlxr(v260 - 1, v259));
      if (!v260)
      {
        ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
        std::__shared_weak_count::__release_weak(v248);
      }
    }
    v247 = v291;
  }
  else
  {
    v257 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v247 + 72))(v247, -[__CFString UTF8String](PointSprite_vsh[0], "UTF8String"), "main", 1, 0);
    v258 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v247 + 72))(v247, -[__CFString UTF8String](PointSprite_fsh[0], "UTF8String"), "main", 2, 0);
  }
  v261 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v247 + 80))(v247, v257, v258);
  std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(&v290, v261);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 328, &v290);
  v262 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
  if (*((_QWORD *)&v290 + 1))
  {
    v263 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
    do
      v264 = __ldaxr(v263);
    while (__stlxr(v264 - 1, v263));
    if (!v264)
    {
      ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
      std::__shared_weak_count::__release_weak(v262);
    }
  }
  if (v257)
    (*(void (**)(uint64_t))(*(_QWORD *)v257 + 8))(v257);
  if (v258)
    (*(void (**)(uint64_t))(*(_QWORD *)v258 + 8))(v258);
  v265 = v292;
  if (v292)
  {
    v266 = (unint64_t *)&v292->__shared_owners_;
    do
      v267 = __ldaxr(v266);
    while (__stlxr(v267 - 1, v266));
    if (!v267)
    {
      ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
      std::__shared_weak_count::__release_weak(v265);
    }
  }
  v268 = *((_QWORD *)this + 126);
  v269 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
  v291 = v268;
  v292 = v269;
  if (v269)
  {
    v270 = (unint64_t *)&v269->__shared_owners_;
    do
      v271 = __ldxr(v270);
    while (__stxr(v271 + 1, v270));
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v268 + 136))(v268) == 1)
  {
    *(_QWORD *)&v290 = v268;
    *((_QWORD *)&v290 + 1) = v269;
    if (v269)
    {
      v272 = (unint64_t *)&v269->__shared_owners_;
      do
        v273 = __ldxr(v272);
      while (__stxr(v273 + 1, v272));
    }
    SKGetGlobalMetalLibrary();
    v274 = (void *)objc_claimAutoreleasedReturnValue();
    v275 = (void *)objc_msgSend(v274, "newFunctionWithName:", CFSTR("PointSprite_VertexFunc"));

    SKGetGlobalMetalLibrary();
    v276 = (void *)objc_claimAutoreleasedReturnValue();
    v277 = (void *)objc_msgSend(v276, "newFunctionWithName:", CFSTR("PointSpriteDiscard_FragFunc"));

    v278 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v268 + 424))(v268, v275);
    v279 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v268 + 424))(v268, v277);

    if (v269)
    {
      v280 = (unint64_t *)&v269->__shared_owners_;
      do
        v281 = __ldaxr(v280);
      while (__stlxr(v281 - 1, v280));
      if (!v281)
      {
        ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
        std::__shared_weak_count::__release_weak(v269);
      }
    }
    v268 = v291;
  }
  else
  {
    v278 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v268 + 72))(v268, -[__CFString UTF8String](PointSprite_vsh[0], "UTF8String"), "main", 1, 0);
    v279 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v268 + 72))(v268, -[__CFString UTF8String](PointSpriteDiscard_fsh[0], "UTF8String"), "main", 2, 0);
  }
  v282 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v268 + 80))(v268, v278, v279);
  std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(&v290, v282);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 344, &v290);
  v283 = (std::__shared_weak_count *)*((_QWORD *)&v290 + 1);
  if (*((_QWORD *)&v290 + 1))
  {
    v284 = (unint64_t *)(*((_QWORD *)&v290 + 1) + 8);
    do
      v285 = __ldaxr(v284);
    while (__stlxr(v285 - 1, v284));
    if (!v285)
    {
      ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
      std::__shared_weak_count::__release_weak(v283);
    }
  }
  if (v278)
    (*(void (**)(uint64_t))(*(_QWORD *)v278 + 8))(v278);
  if (v279)
    (*(void (**)(uint64_t))(*(_QWORD *)v279 + 8))(v279);
  v286 = v292;
  if (v292)
  {
    v287 = (unint64_t *)&v292->__shared_owners_;
    do
      v288 = __ldaxr(v287);
    while (__stlxr(v288 - 1, v287));
    if (!v288)
    {
      ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
      std::__shared_weak_count::__release_weak(v286);
    }
  }
}

void sub_1DC90B624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t SKCRenderer::SKCRenderer(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  dispatch_semaphore_t v10;
  void *v11;
  jet_command_buffer *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t SharedContext;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  __int128 v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  __int128 v82;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = a1 + 40;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 56;
  *(_QWORD *)(a1 + 64) = a1 + 56;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 664) = 0;
  *(_DWORD *)(a1 + 668) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_QWORD *)(a1 + 672) = 0x100000003;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 724) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  v5 = a1 + 808;
  *(_OWORD *)(a1 + 752) = 0u;
  SKCStats::SKCStats((SKCStats *)(a1 + 808));
  *(_QWORD *)(a1 + 984) = 0;
  *(_WORD *)(a1 + 1000) = 0;
  *(_BYTE *)(a1 + 1002) = 0;
  *(_QWORD *)(a1 + 1008) = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 1016) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  v9 = (_QWORD *)(a1 + 1008);
  *(_QWORD *)(a1 + 1040) = a1 + 1048;
  *(_QWORD *)(a1 + 1072) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_QWORD *)(a1 + 1064) = a1 + 1072;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_QWORD *)(a1 + 1112) = a1 + 1120;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_QWORD *)(a1 + 1176) = a1 + 1176;
  *(_QWORD *)(a1 + 1184) = a1 + 1176;
  *(_QWORD *)(a1 + 1192) = 0;
  *(_QWORD *)(a1 + 1200) = a1 + 1200;
  *(_QWORD *)(a1 + 1208) = a1 + 1200;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  v10 = dispatch_semaphore_create(1);
  v11 = *(void **)a1;
  *(_QWORD *)a1 = v10;

  *(_QWORD *)(a1 + 1224) = *(_QWORD *)(a1 + 1208);
  if (SKCRendererSetup(void)::onceToken != -1)
    dispatch_once(&SKCRendererSetup(void)::onceToken, &__block_literal_global_13);
  if (!*v9)
  {
    SharedContext = jet_createSharedContext();
    std::shared_ptr<jet_context>::shared_ptr[abi:ne180100]<jet_context,void>(&v82, SharedContext);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 1008, &v82);
    v74 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
    if (*((_QWORD *)&v82 + 1))
    {
      v75 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
  }
  v12 = (jet_command_buffer *)operator new();
  jet_command_buffer::jet_command_buffer(v12, 0x64uLL);
  std::shared_ptr<jet_command_buffer>::shared_ptr[abi:ne180100]<jet_command_buffer,void>(&v82, (uint64_t)v12);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](v4, &v82);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  SKCRenderer::loadShaders((SKCRenderer *)a1);
  kdebug_trace();
  *(_QWORD *)(a1 + 800) = 0;
  *(_QWORD *)(a1 + 744) = v5;
  *(_DWORD *)(a1 + 84) = 40;
  v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 1008) + 8))(*(_QWORD *)(a1 + 1008), 3, 1, 60, 0);
  std::shared_ptr<jet_buffer>::shared_ptr[abi:ne180100]<jet_buffer,void>(&v82, v16);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 480, &v82);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  SKCRendererGenerateQuadIndexBufferData<unsigned short>((unsigned int **)(a1 + 480));
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 480) + 24))(*(_QWORD *)(a1 + 480), 0, 0);
  v20 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*v9 + 16))(*v9, 0, 4, 40);
  std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&v82, v20);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 432, &v82);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v9 + 16))(*v9, 2, 4, 40);
  std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&v82, v24);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 448, &v82);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*v9 + 16))(*v9, 0, 2, 40);
  std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&v82, v28);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 464, &v82);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  *(_QWORD *)(a1 + 408) = jet_buffer_pool::get_current_buffer(*(jet_buffer_pool **)(a1 + 432));
  *(_QWORD *)(a1 + 416) = jet_buffer_pool::get_current_buffer(*(jet_buffer_pool **)(a1 + 448));
  *(_QWORD *)(a1 + 424) = jet_buffer_pool::get_current_buffer(*(jet_buffer_pool **)(a1 + 464));
  *(_QWORD *)(a1 + 104) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 408) + 16))(*(_QWORD *)(a1 + 408));
  *(_QWORD *)(a1 + 88) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 416) + 16))(*(_QWORD *)(a1 + 416));
  *(_QWORD *)(a1 + 96) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 16))(*(_QWORD *)(a1 + 424));
  *(_QWORD *)(a1 + 184) = a1;
  std::shared_ptr<jet_texture>::operator=[abi:ne180100]((_QWORD *)(a1 + 512), &qword_1F03A3560);
  std::shared_ptr<jet_texture>::operator=[abi:ne180100]((_QWORD *)(a1 + 528), (uint64_t *)&unk_1F03A3570);
  v32 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 1008) + 56))(*(_QWORD *)(a1 + 1008), 0, 0, 0, 0, 0);
  std::shared_ptr<jet_sampler>::shared_ptr[abi:ne180100]<jet_sampler,void>(&v82, v32);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 544, &v82);
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v9 + 56))(*v9, 0, 0, 1, 1, 0);
  std::shared_ptr<jet_sampler>::shared_ptr[abi:ne180100]<jet_sampler,void>(&v82, v36);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 560, &v82);
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v9 + 56))(*v9, 1, 1, 0, 0, 0);
  std::shared_ptr<jet_sampler>::shared_ptr[abi:ne180100]<jet_sampler,void>(&v82, v40);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 576, &v82);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v9 + 56))(*v9, 1, 1, 1, 1, 0);
  std::shared_ptr<jet_sampler>::shared_ptr[abi:ne180100]<jet_sampler,void>(&v82, v44);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 592, &v82);
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v9 + 96))(*v9, 6, 0, 2, 2, 1, 1);
  std::shared_ptr<jet_stencil_mode>::shared_ptr[abi:ne180100]<jet_stencil_mode,void>(&v82, v48);
  v49 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v9 + 96))(*v9, 1, 3, 2, 2, 1, 1);
  std::shared_ptr<jet_stencil_mode>::shared_ptr[abi:ne180100]<jet_stencil_mode,void>(&v80, v49);
  v50 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v9 + 96))(*v9, 3, 2, 2, 2, 1, 1);
  std::shared_ptr<jet_stencil_mode>::shared_ptr[abi:ne180100]<jet_stencil_mode,void>(&v78, v50);
  v51 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)*v9 + 104))(*v9, 0, 0, v82, v82);
  std::shared_ptr<jet_depth_stencil_mode>::shared_ptr[abi:ne180100]<jet_depth_stencil_mode,void>(&v77, v51);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 608, &v77);
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*v9 + 104))(*v9, 0, 0, v80, v80);
  std::shared_ptr<jet_depth_stencil_mode>::shared_ptr[abi:ne180100]<jet_depth_stencil_mode,void>(&v77, v55);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 624, &v77);
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*v9 + 104))(*v9, 0, 0, v78, v78);
  std::shared_ptr<jet_depth_stencil_mode>::shared_ptr[abi:ne180100]<jet_depth_stencil_mode,void>(&v77, v59);
  std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 640, &v77);
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  *(_BYTE *)(a1 + 656) = 0;
  v63 = v79;
  if (v79)
  {
    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
    do
      v65 = __ldaxr(p_shared_owners);
    while (__stlxr(v65 - 1, p_shared_owners));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = v81;
  if (v81)
  {
    v67 = (unint64_t *)&v81->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  return a1;
}

void sub_1DC90C1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  SKCStats *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v21 + 1256);
  a21 = v21 + 1232;
  std::vector<std::shared_ptr<PKCField>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  std::__list_imp<SKCRenderSortInfo *>::clear(v28);
  std::__list_imp<SKCRenderSortInfo *>::clear(v27);
  std::__tree<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::__map_value_compare<SKCLightNode *,std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::less<SKCLightNode *>,true>,std::allocator<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>>>::destroy(v21 + 1112, *(_QWORD **)(v21 + 1120));
  v29 = *(void **)(v21 + 1088);
  if (v29)
  {
    *(_QWORD *)(v21 + 1096) = v29;
    operator delete(v29);
  }
  std::__tree<std::__value_type<unsigned int,SKCLightMaskUniforms>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SKCLightMaskUniforms>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SKCLightMaskUniforms>>>::destroy(a13, *(_QWORD **)(v21 + 1072));
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy(a14, *(_QWORD **)(v21 + 1048));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v21 + 1024);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v26);

  SKCStats::~SKCStats(v25);
  SKCRenderInfo::~SKCRenderInfo((id *)(v21 + 80));
  std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear(v24);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v22);

  _Unwind_Resume(a1);
}

void SKCRenderer::commitBuffers(SKCRenderer *this)
{
  SKCRenderer::flushRenderOps(this);
  *((_DWORD *)this + 8) = 0;
  *((_DWORD *)this + 20) = 0;
}

void SKCRenderer::flushRenderOps(SKCRenderer *this)
{
  _DWORD *v2;
  int v3;
  int v4;
  _DWORD *v5;
  int v6;
  int v7;
  _DWORD *v8;
  int v9;
  int v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  jet_command_buffer *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;

  SKCRenderer::flushCurrentBatch(this);
  v2 = (_DWORD *)*((_QWORD *)this + 51);
  v3 = v2[10] - 1;
  if (v3 > 7)
    v4 = 4;
  else
    v4 = dword_1DC923EDC[v3];
  (*(void (**)(_DWORD *, _QWORD, _QWORD))(*(_QWORD *)v2 + 24))(v2, (v4 * *((_DWORD *)this + 20) * v2[11]), 0);
  v5 = (_DWORD *)*((_QWORD *)this + 53);
  v6 = v5[10] - 1;
  if (v6 > 7)
    v7 = 4;
  else
    v7 = dword_1DC923EDC[v6];
  (*(void (**)(_DWORD *, _QWORD, _QWORD))(*(_QWORD *)v5 + 24))(v5, (v7 * *((_DWORD *)this + 20) * v5[11]), 0);
  v8 = (_DWORD *)*((_QWORD *)this + 52);
  v9 = v8[10] - 1;
  if (v9 > 7)
    v10 = 4;
  else
    v10 = dword_1DC923EDC[v9];
  (*(void (**)(_DWORD *, _QWORD, _QWORD))(*(_QWORD *)v8 + 24))(v8, (v10 * *((_DWORD *)this + 20) * v8[11]), 0);
  v11 = *(_QWORD *)(*((_QWORD *)this + 5) + 16) - *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v11)
  {
    *(_DWORD *)(*((_QWORD *)this + 93) + 144) -= 1431655765 * (v11 >> 6);
    (***((void (****)(__int128 *__return_ptr))this + 126))(&v19);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 1024, &v19);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (jet_command_buffer *)operator new();
    jet_command_buffer::jet_command_buffer(v15, 0x64uLL);
    std::shared_ptr<jet_command_buffer>::shared_ptr[abi:ne180100]<jet_command_buffer,void>(&v19, (uint64_t)v15);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 40, &v19);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
}

void sub_1DC90C564(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF0CF560](v1, 0xA1C4030951706);
  _Unwind_Resume(a1);
}

uint64_t SKCRenderer::ensureBuffers(uint64_t this)
{
  uint64_t v1;
  uint64_t buffer;
  uint64_t v3;
  uint64_t v4;

  v1 = this;
  if (!*(_QWORD *)(this + 408))
  {
    buffer = jet_buffer_pool::next_buffer(*(jet_buffer_pool **)(this + 432));
    *(_QWORD *)(v1 + 408) = buffer;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)buffer + 16))(buffer);
    *(_QWORD *)(v1 + 104) = this;
  }
  if (!*(_QWORD *)(v1 + 416))
  {
    v3 = jet_buffer_pool::next_buffer(*(jet_buffer_pool **)(v1 + 448));
    *(_QWORD *)(v1 + 416) = v3;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    *(_QWORD *)(v1 + 88) = this;
  }
  if (!*(_QWORD *)(v1 + 424))
  {
    v4 = jet_buffer_pool::next_buffer(*(jet_buffer_pool **)(v1 + 464));
    *(_QWORD *)(v1 + 424) = v4;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    *(_QWORD *)(v1 + 96) = this;
  }
  return this;
}

void SKCRenderer::flushCurrentBatch(SKCRenderer *this)
{
  void *v2;
  unsigned int v3;
  uint64_t command_buffer;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  float v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  jet_command_buffer *v43;
  void *v44;
  jet_command_buffer *v45;
  std::__shared_weak_count *size;
  unint64_t *v47;
  unint64_t v48;
  unsigned __int8 v49;
  double v50;
  double v51;
  uint64_t v52;
  float v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  _DWORD *v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  void *v64;
  int v65;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::string __str;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  int v81;

  if (*((int *)this + 167) >= 1)
  {
    v80 = 0uLL;
    v79 = 0uLL;
    v2 = (void *)*((_QWORD *)this + 85);
    if (v2)
    {
      objc_msgSend(v2, "_backingProgram");
      v80 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      if (__str.__r_.__value_.__r.__words[0])
        *((_QWORD *)this + 86) = __str.__r_.__value_.__r.__words[0];
    }
    else
    {
      v3 = *((_DWORD *)this + 183);
      if (v3 && SKCRenderer::requireLighting(this, v3))
      {
        command_buffer = jet_context::create_command_buffer(*((jet_context **)this + 126));
        std::shared_ptr<jet_command_buffer>::shared_ptr[abi:ne180100]<jet_command_buffer,void>(&__str, command_buffer);
        v5 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        v79 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        v6 = *((_QWORD *)this + 87);
        *((_QWORD *)this + 86) = *((_QWORD *)this + 37);
        if (!v6)
          *((_QWORD *)this + 87) = *((_QWORD *)this + 64);
        if (!*((_QWORD *)this + 88))
          *((_QWORD *)this + 88) = *((_QWORD *)this + 66);
        v7 = *((_DWORD *)this + 183);
        v8 = *((float *)this + 184);
        v78 = v5;
        if (*((_QWORD *)&v5 + 1))
        {
          v9 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        SKCRenderer::setLightingUniforms((uint64_t)this, v7, (uint64_t *)&v78, v8);
        if (*((_QWORD *)&v5 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v5 + 1) + 16))(*((_QWORD *)&v5 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v5 + 1));
          }
        }
      }
    }
    v13 = *((_QWORD *)this + 86);
    if (*((_BYTE *)this + 656) && v13 == *((_QWORD *)this + 31))
    {
      v14 = *((_QWORD *)this + 5);
      v13 = *((_QWORD *)this + 33);
      LODWORD(__str.__r_.__value_.__l.__data_) = 31;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v14 + 8), (int *)&__str);
      v15 = 1;
    }
    else
    {
      v14 = *((_QWORD *)this + 5);
      v15 = *((_DWORD *)this + 169);
      LODWORD(__str.__r_.__value_.__l.__data_) = 31;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v14 + 8), (int *)&__str);
    }
    v16 = *(_QWORD *)(v14 + 16);
    *(_QWORD *)(v16 - 80) = v13;
    *(_DWORD *)(v16 - 64) = v15;
    *(_OWORD *)(v16 - 60) = xmmword_1DC922230;
    *(_DWORD *)(v16 - 44) = 3;
    v17 = *((_QWORD *)this + 5);
    if (*((_QWORD *)this + 87))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture");
      v18 = *((_QWORD *)this + 87);
      v81 = 8;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v17 + 8), &v81);
      v19 = *(_QWORD *)(v17 + 16);
      *(_QWORD *)(v19 - 80) = v18;
      std::string::operator=((std::string *)(v19 - 176), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v20 = *((_QWORD *)this + 5);
      if (*((_QWORD *)this + 89))
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture");
        v21 = *((_QWORD *)this + 89);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture");
        v21 = *((_QWORD *)this + 70);
      }
      v81 = 30;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v20 + 8), &v81);
      v22 = *(_QWORD *)(v20 + 16);
      *(_QWORD *)(v22 - 80) = v21;
      std::string::operator=((std::string *)(v22 - 176), &__str);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture");
      v23 = qword_1F03A3560;
      v81 = 8;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v17 + 8), &v81);
      v24 = *(_QWORD *)(v17 + 16);
      *(_QWORD *)(v24 - 80) = v23;
      std::string::operator=((std::string *)(v24 - 176), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v25 = *((_QWORD *)this + 5);
      std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture");
      v26 = *((_QWORD *)this + 70);
      v81 = 30;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v25 + 8), &v81);
      v27 = *(_QWORD *)(v25 + 16);
      *(_QWORD *)(v27 - 80) = v26;
      std::string::operator=((std::string *)(v27 - 176), &__str);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (*((_QWORD *)this + 88))
    {
      v28 = *((_QWORD *)this + 5);
      std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture2");
      v29 = *((_QWORD *)this + 88);
      v81 = 8;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v28 + 8), &v81);
      v30 = *(_QWORD *)(v28 + 16);
      *(_QWORD *)(v30 - 80) = v29;
      std::string::operator=((std::string *)(v30 - 176), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v31 = *((_QWORD *)this + 5);
      if (*((_QWORD *)this + 90))
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture2");
        v32 = *((_QWORD *)this + 90);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, "u_texture2");
        v32 = *((_QWORD *)this + 70);
      }
      v81 = 30;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v31 + 8), &v81);
      v33 = *(_QWORD *)(v31 + 16);
      *(_QWORD *)(v33 - 80) = v32;
      std::string::operator=((std::string *)(v33 - 176), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    v34 = *((_QWORD *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(&__str, "a_position");
    v35 = *((_QWORD *)this + 51);
    v81 = 5;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v34 + 8), &v81);
    v36 = *(_QWORD *)(v34 + 16);
    *(_QWORD *)(v36 - 80) = v35;
    std::string::operator=((std::string *)(v36 - 176), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v37 = *((_QWORD *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(&__str, "a_color");
    v38 = *((_QWORD *)this + 52);
    v81 = 5;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v37 + 8), &v81);
    v39 = *(_QWORD *)(v37 + 16);
    *(_QWORD *)(v39 - 80) = v38;
    std::string::operator=((std::string *)(v39 - 176), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v40 = *((_QWORD *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(&__str, "a_tex_coord");
    v41 = *((_QWORD *)this + 53);
    v81 = 5;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v40 + 8), &v81);
    v42 = *(_QWORD *)(v40 + 16);
    *(_QWORD *)(v42 - 80) = v41;
    std::string::operator=((std::string *)(v42 - 176), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if ((_QWORD)v80)
    {
      v43 = (jet_command_buffer *)*((_QWORD *)this + 5);
      v44 = (void *)*((_QWORD *)this + 85);
      if (v44)
      {
        objc_msgSend(v44, "_commandsForBatchOffset:count:", *((unsigned int *)this + 8), *((unsigned int *)this + 167));
        v45 = (jet_command_buffer *)__str.__r_.__value_.__r.__words[0];
      }
      else
      {
        v45 = 0;
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
      }
      jet_command_buffer::add_command_buffer(v43, v45);
      size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        v47 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      {
        SKCRenderer::flushCurrentBatch(void)::baseTime = skCurrentTime();
      }
      v50 = skCurrentTime();
      v51 = *(double *)&SKCRenderer::flushCurrentBatch(void)::baseTime;
      v52 = *((_QWORD *)this + 5);
      std::string::basic_string[abi:ne180100]<0>(&__str, "u_time");
      v53 = v50 - v51;
      LODWORD(v50) = fmodf(v53, 43200.0);
      v81 = 22;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v52 + 8), &v81);
      v54 = *(_QWORD *)(v52 + 16);
      std::string::operator=((std::string *)(v54 - 176), &__str);
      *(_DWORD *)(v54 - 64) = LODWORD(v50);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    if ((_QWORD)v79)
      jet_command_buffer::add_command_buffer(*((jet_command_buffer **)this + 5), (jet_command_buffer *)v79);
    v55 = 3 * (*((_DWORD *)this + 8) >> 2);
    v56 = 6 * (*((_DWORD *)this + 167) / 4);
    v57 = (_DWORD *)*((_QWORD *)this + 93);
    ++v57[41];
    v57[37] += v56 / 6;
    v58 = v57[43];
    if (v58 <= v56 + 2 * v55)
      v58 = v56 + 2 * v55;
    v57[43] = v58;
    v59 = *((_QWORD *)this + 5);
    v60 = *((_DWORD *)this + 168);
    v61 = *((_QWORD *)this + 60);
    LODWORD(__str.__r_.__value_.__l.__data_) = 4;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v59 + 8), (int *)&__str);
    v62 = 2 * v55;
    v63 = *(_QWORD *)(v59 + 16);
    *(_QWORD *)(v63 - 80) = v61;
    *(_DWORD *)(v63 - 64) = v60;
    *(_DWORD *)(v63 - 60) = v62;
    *(_DWORD *)(v63 - 56) = v56;
    if ((*((_BYTE *)this + 661) & 0x10) != 0)
      NSLog(CFSTR("SKCRenderer<%p> pass:%d batch:%d [Summary]:[Quads:%d Program:%p Tex0:%p Tex1:%p BlendMode:%d]"), this, *(unsigned int *)(*((_QWORD *)this + 93) + 168), (*(_DWORD *)(*((_QWORD *)this + 93) + 164) - 1), (*((_DWORD *)this + 167) / 4), *((_QWORD *)this + 86), *((_QWORD *)this + 87), *((_QWORD *)this + 88), *((unsigned int *)this + 169));
    objc_msgSend(*((id *)this + 159), "objectForKey:", CFSTR("debugDrawSpriteBounds"));
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = objc_msgSend(v64, "BOOLValue");

    if (v65)
    {
      __asm { FMOV            V0.4S, #1.0 }
      SKCRenderer::addDebugStroke(this, v62, v56, _Q0);
    }
    *((_DWORD *)this + 167) = 0;
    v71 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
    if (*((_QWORD *)&v79 + 1))
    {
      v72 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v74 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
    if (*((_QWORD *)&v80 + 1))
    {
      v75 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
  }
  *((_DWORD *)this + 8) = *((_DWORD *)this + 20);
}

void sub_1DC90CE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v26 - 96);
  _Unwind_Resume(a1);
}

uint64_t SKCRenderer::requireLighting(SKCRenderer *this, unsigned int a2)
{
  uint64_t *i;
  unsigned int v4;
  SKCRenderer *v5;
  uint64_t v6;
  char v7;
  uint64_t **v8;
  float32x4_t v9;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  SKCRenderer *v19;
  SKCRenderer *v20;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t **v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  __int128 v63;
  __int128 v64;
  _BYTE v65[28];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  unsigned int v69;
  _DWORD v70[8];
  _BYTE v71[96];
  _BYTE v72[96];
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v69 = a2;
  for (i = (uint64_t *)*((_QWORD *)this + 134); i; i = (uint64_t *)*i)
  {
    v4 = *((_DWORD *)i + 8);
    if (v4 <= a2)
    {
      if (v4 >= a2)
        return 1;
      ++i;
    }
  }
  v5 = (SKCRenderer *)*((_QWORD *)this + 130);
  if (v5 == (SKCRenderer *)((char *)this + 1048))
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = (uint64_t **)((char *)this + 1064);
  v9 = 0uLL;
  do
  {
    v10 = (float32x4_t *)*((_QWORD *)v5 + 4);
    if ((v10[40].i32[1] & a2) != 0)
    {
      v11 = v10[38];
      if ((v11.i32[3] & 0x80000000) == 0 && (v11.i32[3] & 0x60000000) != 0)
      {
        v12 = vmlaq_laneq_f32(v9, v11, v11, 3);
        v12.i32[3] = v9.i32[3];
        v7 = 1;
        v9 = v12;
      }
      v13 = v10[37];
      if ((v13.i32[3] & 0x80000000) == 0 && (v13.i32[3] & 0x60000000) != 0 && (int)v6 <= 7)
      {
        v15 = vmulq_laneq_f32(v13, v13, 3);
        *(_DWORD *)&v72[12 * (int)v6] = v15.i32[0];
        LODWORD(v16) = vdup_lane_s32(*(int32x2_t *)v15.f32, 1).u32[0];
        v17 = 12 * (_DWORD)v6 + 4;
        HIDWORD(v16) = v15.i32[2];
        *(_QWORD *)&v72[v17] = v16;
        v18 = *((_OWORD *)v5 + 3);
        *(_DWORD *)&v71[12 * (int)v6] = v18;
        *(_DWORD *)&v71[v17] = DWORD1(v18);
        *(_DWORD *)&v71[12 * (_DWORD)v6 + 8] = 1065353216;
        v70[(int)v6] = v10[40].i32[0];
        v6 = (v6 + 1);
        v7 = 1;
      }
    }
    v19 = (SKCRenderer *)*((_QWORD *)v5 + 1);
    if (v19)
    {
      do
      {
        v20 = v19;
        v19 = *(SKCRenderer **)v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        v20 = (SKCRenderer *)*((_QWORD *)v5 + 2);
        _ZF = *(_QWORD *)v20 == (_QWORD)v5;
        v5 = v20;
      }
      while (!_ZF);
    }
    v5 = v20;
  }
  while (v20 != (SKCRenderer *)((char *)this + 1048));
  if ((v7 & 1) == 0)
    return 0;
  *(_DWORD *)&v65[24] = 0;
  *(_QWORD *)&v65[16] = 0;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  LODWORD(v64) = v6;
  __asm { FMOV            V3.2S, #1.0 }
  *(int8x8_t *)&v26 = vand_s8(vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)(v9.i64[0] & 0x7FFFFFFF7FFFFFFFLL), (uint32x2_t)_D3), _D3, *(int8x8_t *)v9.f32), (int8x8_t)vcgt_s32(*(int32x2_t *)v9.f32, (int32x2_t)-1));
  v9.i32[0] = v9.i32[2];
  if ((v9.i32[2] & 0x7FFFFFFFu) > 0x3F800000)
    v9.f32[0] = 1.0;
  if (v9.i32[2] < 0)
    v9.f32[0] = 0.0;
  *((_QWORD *)&v26 + 1) = v9.u32[0];
  *(_OWORD *)v65 = v26;
  if ((int)v6 >= 1)
  {
    v27 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _BYTE *))(**((_QWORD **)this + 126) + 24))(*((_QWORD *)this + 126), 0, 3, v6, v72);
    std::shared_ptr<jet_constant>::shared_ptr[abi:ne180100]<jet_constant,void>(&v63, v27);
    v28 = v63;
    v63 = 0uLL;
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
    v66 = v28;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
    if (*((_QWORD *)&v63 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _BYTE *))(**((_QWORD **)this + 126) + 24))(*((_QWORD *)this + 126), 0, 3, v6, v71);
    std::shared_ptr<jet_constant>::shared_ptr[abi:ne180100]<jet_constant,void>(&v63, v35);
    v36 = v63;
    v63 = 0uLL;
    v37 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
    v67 = v36;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
    if (*((_QWORD *)&v63 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _DWORD *))(**((_QWORD **)this + 126) + 24))(*((_QWORD *)this + 126), 0, 1, v6, v70);
    std::shared_ptr<jet_constant>::shared_ptr[abi:ne180100]<jet_constant,void>(&v63, v43);
    v44 = v63;
    v63 = 0uLL;
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
    v68 = v44;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
    if (*((_QWORD *)&v63 + 1))
    {
      v49 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
  *(_QWORD *)&v63 = &v69;
  v51 = std::__tree<std::__value_type<unsigned int,SKCLightMaskUniforms>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SKCLightMaskUniforms>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SKCLightMaskUniforms>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v8, &v69, (uint64_t)&std::piecewise_construct, (_DWORD **)&v63);
  v52 = *(_OWORD *)v65;
  *((_OWORD *)v51 + 3) = v64;
  *((_OWORD *)v51 + 4) = v52;
  *(_OWORD *)((char *)v51 + 76) = *(_OWORD *)&v65[12];
  std::shared_ptr<jet_texture>::operator=[abi:ne180100](v51 + 12, (uint64_t *)&v66);
  std::shared_ptr<jet_texture>::operator=[abi:ne180100](v51 + 14, (uint64_t *)&v67);
  std::shared_ptr<jet_texture>::operator=[abi:ne180100](v51 + 16, (uint64_t *)&v68);
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
  if (*((_QWORD *)&v66 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  return 1;
}

void sub_1DC90D40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  SKCLightMaskUniforms::~SKCLightMaskUniforms((SKCLightMaskUniforms *)va);
  _Unwind_Resume(a1);
}

void SKCRenderer::setLightingUniforms(uint64_t a1, unsigned int a2, uint64_t *a3, float a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x2_t v17;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t **v31;
  __int128 v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  __int128 v65;
  std::string v66;
  __int128 __str;
  _BYTE __str_16[28];
  uint64_t *v69;
  std::__shared_weak_count *v70;
  uint64_t *v71;
  std::__shared_weak_count *v72;
  uint64_t *v73;
  std::__shared_weak_count *v74;
  unsigned int v75;
  int v76;

  v75 = a2;
  v4 = *a3;
  if (*a3)
  {
    v8 = *MEMORY[0x1E0C83FE0];
    v9 = *(_QWORD *)(MEMORY[0x1E0C83FE0] + 8);
    std::string::basic_string[abi:ne180100]<0>(&__str, "u_normals_tex_coord_xform");
    LODWORD(v66.__r_.__value_.__l.__data_) = 19;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v4 + 8), (int *)&v66);
    v10 = *(_QWORD *)(v4 + 16);
    std::string::operator=((std::string *)(v10 - 176), (const std::string *)&__str);
    *(_QWORD *)(v10 - 64) = v8;
    *(_QWORD *)(v10 - 56) = v9;
    if ((__str_16[7] & 0x80000000) != 0)
      operator delete((void *)__str);
    v11 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__str, "u_ambient");
    LODWORD(v66.__r_.__value_.__l.__data_) = 22;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v11 + 8), (int *)&v66);
    v12 = *(_QWORD *)(v11 + 16);
    std::string::operator=((std::string *)(v12 - 176), (const std::string *)&__str);
    *(_DWORD *)(v12 - 64) = 1065353216;
    if ((__str_16[7] & 0x80000000) != 0)
      operator delete((void *)__str);
    v13 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__str, "u_diffuse");
    LODWORD(v66.__r_.__value_.__l.__data_) = 22;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v13 + 8), (int *)&v66);
    v14 = *(_QWORD *)(v13 + 16);
    std::string::operator=((std::string *)(v14 - 176), (const std::string *)&__str);
    *(_DWORD *)(v14 - 64) = 1065353216;
    if ((__str_16[7] & 0x80000000) != 0)
      operator delete((void *)__str);
    v15 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__str, "u_specular");
    LODWORD(v66.__r_.__value_.__l.__data_) = 22;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v15 + 8), (int *)&v66);
    v16 = *(_QWORD *)(v15 + 16);
    std::string::operator=((std::string *)(v16 - 176), (const std::string *)&__str);
    *(_DWORD *)(v16 - 64) = 1050253722;
    if ((__str_16[7] & 0x80000000) != 0)
      operator delete((void *)__str);
    v17 = vcvt_f32_u32(*(uint32x2_t *)(*(_QWORD *)(a1 + 16) + 56));
    __asm { FMOV            V2.2S, #1.0 }
    if (v17.f32[0] > 0.0 && v17.f32[1] > 0.0)
    {
      if (v17.f32[0] <= v17.f32[1])
      {
        __asm { FMOV            V2.2S, #1.0 }
        *((float *)&_D2 + 1) = v17.f32[1] / v17.f32[0];
      }
      else
      {
        __asm { FMOV            V2.2S, #1.0 }
        *(float *)&_D2 = v17.f32[0] / v17.f32[1];
      }
    }
    v64 = _D2;
    v23 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__str, "u_aspect");
    LODWORD(v66.__r_.__value_.__l.__data_) = 23;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v23 + 8), (int *)&v66);
    v24 = *(_QWORD *)(v23 + 16);
    std::string::operator=((std::string *)(v24 - 176), (const std::string *)&__str);
    *(_QWORD *)(v24 - 64) = v64;
    if ((__str_16[7] & 0x80000000) != 0)
      operator delete((void *)__str);
    v25 = sinf(a4);
    v26 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__str, "u_rotation_sin");
    LODWORD(v66.__r_.__value_.__l.__data_) = 22;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v26 + 8), (int *)&v66);
    v27 = *(_QWORD *)(v26 + 16);
    std::string::operator=((std::string *)(v27 - 176), (const std::string *)&__str);
    *(float *)(v27 - 64) = v25;
    v28 = cosf(a4);
    if ((__str_16[7] & 0x80000000) != 0)
      operator delete((void *)__str);
    v29 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__str, "u_rotation_cos");
    LODWORD(v66.__r_.__value_.__l.__data_) = 22;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v29 + 8), (int *)&v66);
    v30 = *(_QWORD *)(v29 + 16);
    std::string::operator=((std::string *)(v30 - 176), (const std::string *)&__str);
    *(float *)(v30 - 64) = v28;
    if ((__str_16[7] & 0x80000000) != 0)
      operator delete((void *)__str);
    if (SKCRenderer::requireLighting((SKCRenderer *)a1, v75))
    {
      v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
      v31 = std::__tree<std::__value_type<unsigned int,SKCLightMaskUniforms>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SKCLightMaskUniforms>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SKCLightMaskUniforms>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 1064), &v75, (uint64_t)&std::piecewise_construct, &v66);
      v32 = *((_OWORD *)v31 + 4);
      __str = *((_OWORD *)v31 + 3);
      *(_OWORD *)__str_16 = v32;
      *(_OWORD *)&__str_16[12] = *(_OWORD *)((char *)v31 + 76);
      v34 = v31[12];
      v33 = v31[13];
      v69 = v34;
      v70 = (std::__shared_weak_count *)v33;
      if (v33)
      {
        v35 = (unint64_t *)(v33 + 1);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v38 = v31[14];
      v37 = v31[15];
      v71 = v38;
      v72 = (std::__shared_weak_count *)v37;
      if (v37)
      {
        v39 = (unint64_t *)(v37 + 1);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v42 = v31[16];
      v41 = (std::__shared_weak_count *)v31[17];
      v73 = v42;
      v74 = v41;
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v44 = __ldxr(p_shared_owners);
        while (__stxr(v44 + 1, p_shared_owners));
      }
      v45 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&v66, "u_num_lights");
      v46 = __str;
      v76 = 38;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v45 + 8), &v76);
      v47 = *(_QWORD *)(v45 + 16);
      std::string::operator=((std::string *)(v47 - 176), &v66);
      *(_DWORD *)(v47 - 64) = v46;
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      v48 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&v66, "u_ambient_color");
      v65 = *(_OWORD *)__str_16;
      v76 = 25;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v48 + 8), &v76);
      v49 = *(_QWORD *)(v48 + 16);
      std::string::operator=((std::string *)(v49 - 176), &v66);
      *(_OWORD *)(v49 - 64) = v65;
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      v50 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&v66, "u_light_color");
      v76 = 9;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v50 + 8), &v76);
      v51 = *(_QWORD *)(v50 + 16);
      *(_QWORD *)(v51 - 80) = v34;
      std::string::operator=((std::string *)(v51 - 176), &v66);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      v52 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&v66, "u_light_position");
      v76 = 9;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v52 + 8), &v76);
      v53 = *(_QWORD *)(v52 + 16);
      *(_QWORD *)(v53 - 80) = v38;
      std::string::operator=((std::string *)(v53 - 176), &v66);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      v54 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&v66, "u_light_decay");
      v76 = 9;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v54 + 8), &v76);
      v55 = *(_QWORD *)(v54 + 16);
      *(_QWORD *)(v55 - 80) = v42;
      std::string::operator=((std::string *)(v55 - 176), &v66);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (v41)
      {
        v56 = (unint64_t *)&v41->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v58 = v72;
      if (v72)
      {
        v59 = (unint64_t *)&v72->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v61 = v70;
      if (v70)
      {
        v62 = (unint64_t *)&v70->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
    }
  }
}

void sub_1DC90D9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  SKCLightMaskUniforms::~SKCLightMaskUniforms((SKCLightMaskUniforms *)&a18);
  _Unwind_Resume(a1);
}

std::string *jet_command_buffer::set_vertex_buffer(uint64_t a1, const std::string *a2, uint64_t a3)
{
  uint64_t v6;
  int v8;

  v8 = 5;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(a1 + 8), &v8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v6 - 80) = a3;
  return std::string::operator=((std::string *)(v6 - 176), a2);
}

void SKCRenderer::addDebugStroke(_QWORD *a1, int a2, unsigned int a3, __n128 a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string __str;
  int v21;

  v7 = a1[5];
  v8 = a1[29];
  LODWORD(__str.__r_.__value_.__l.__data_) = 31;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v7 + 8), (int *)&__str);
  v9 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(v9 - 80) = v8;
  *(_OWORD *)(v9 - 64) = xmmword_1DC921850;
  *(_QWORD *)(v9 - 48) = 0x30000000FLL;
  v10 = a1[5];
  std::string::basic_string[abi:ne180100]<0>(&__str, "a_position");
  v11 = a1[51];
  v21 = 5;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v10 + 8), &v21);
  v12 = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v12 - 80) = v11;
  std::string::operator=((std::string *)(v12 - 176), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v13 = a1[5];
  std::string::basic_string[abi:ne180100]<0>(&__str, "u_color");
  v21 = 25;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v13 + 8), &v21);
  v14 = *(_QWORD *)(v13 + 16);
  std::string::operator=((std::string *)(v14 - 176), &__str);
  *(__n128 *)(v14 - 64) = a4;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (a3)
  {
    v15 = 0;
    do
    {
      v16 = a1[5];
      v17 = a1[60];
      LODWORD(__str.__r_.__value_.__l.__data_) = 4;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v16 + 8), (int *)&__str);
      v18 = *(_QWORD *)(v16 + 16);
      *(_QWORD *)(v18 - 80) = v17;
      *(_DWORD *)(v18 - 64) = 2;
      *(_DWORD *)(v18 - 60) = a2 + v15;
      *(_DWORD *)(v18 - 56) = 6;
      v15 += 6;
    }
    while (v15 < a3);
  }
}

void sub_1DC90DC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SKCLightMaskUniforms::~SKCLightMaskUniforms(SKCLightMaskUniforms *this)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
}

__n128 jet_command_buffer::set_fragment_constant_value(uint64_t a1, const std::string *a2, __n128 a3)
{
  uint64_t v5;
  __n128 result;
  int v8;

  v8 = 25;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(a1 + 8), &v8);
  v5 = *(_QWORD *)(a1 + 16);
  std::string::operator=((std::string *)(v5 - 176), a2);
  result = a3;
  *(__n128 *)(v5 - 64) = a3;
  return result;
}

void SKCRenderer::applyDebugOptions(SKCRenderer *this)
{
  void *v2;
  int v3;
  void *v4;
  int v5;
  void *v6;
  int v7;
  void *v8;
  int v9;
  void *v10;
  int v11;
  void *v12;
  int v13;
  void *v14;
  int v15;
  void *v16;
  int v17;
  void *v18;
  int v19;
  void *v20;
  int v21;
  void *v22;
  int v23;

  SKCRenderer::applyDebugOptions(void)::count = (SKCRenderer::applyDebugOptions(void)::count + 1) % 0x64u;
  *((float *)this + 2) = (float)(fabsf((float)((float)SKCRenderer::applyDebugOptions(void)::count / -99.0)+ 0.5)* 0.8)+ 0.2;
  *((_DWORD *)this + 165) = 0;
  objc_msgSend(*((id *)this + 159), "valueForKey:", CFSTR("debugColorEffectNodes"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "BOOLValue");

  if (v3)
    *((_DWORD *)this + 165) |= 2u;
  objc_msgSend(*((id *)this + 159), "valueForKey:", CFSTR("debugColorCropNodes"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "BOOLValue");

  if (v5)
    *((_DWORD *)this + 165) |= 4u;
  objc_msgSend(*((id *)this + 159), "valueForKey:", CFSTR("debugColorCustomShaders"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "BOOLValue");

  if (v7)
    *((_DWORD *)this + 165) |= 8u;
  objc_msgSend(*((id *)this + 159), "valueForKey:", CFSTR("debugDisableEffectNodeEffects"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "BOOLValue");

  if (v9)
    *((_DWORD *)this + 165) |= 0x20u;
  objc_msgSend(*((id *)this + 159), "valueForKey:", CFSTR("debugDisableEffectNodeRasterize"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "BOOLValue");

  if (v11)
    *((_DWORD *)this + 165) |= 0x40u;
  objc_msgSend(*((id *)this + 159), "valueForKey:", CFSTR("debugDisableCropNodes"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "BOOLValue");

  if (v13)
    *((_DWORD *)this + 165) |= 0x80u;
  objc_msgSend(*((id *)this + 159), "valueForKey:", CFSTR("debugDisableCustomShaders"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "BOOLValue");

  if (v15)
    *((_DWORD *)this + 165) |= 0x100u;
  objc_msgSend(*((id *)this + 159), "valueForKey:", CFSTR("debugDisable3DNodes"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = objc_msgSend(v16, "BOOLValue");

  if (v17)
    *((_DWORD *)this + 165) |= 0x200u;
  objc_msgSend(*((id *)this + 159), "valueForKey:", CFSTR("debugColorCustomShadersRecompile"));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "BOOLValue");

  if (v19)
    *((_DWORD *)this + 165) |= 0x10u;
  objc_msgSend(*((id *)this + 159), "valueForKey:", CFSTR("debugDisableCoreImage"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = objc_msgSend(v20, "BOOLValue");

  if (v21)
    *((_DWORD *)this + 165) |= 0x800u;
  objc_msgSend(*((id *)this + 159), "valueForKey:", CFSTR("debugLogBatching"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend(v22, "BOOLValue");

  if (v23)
    *((_DWORD *)this + 165) |= 0x1000u;
}

void sub_1DC90DFB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCRenderer::addPerNodeDebugOverlays(SKCRenderer *this, void *lpsrc, uint64_t a3, unsigned int a4, unsigned int a5)
{
  int v10;
  SKCEffectNode *v11;
  SKCEffectNode *v12;
  int32x4_t v13;
  int32x4_t v14;
  float32x4_t v15;
  _QWORD *v21;
  _QWORD *v22;
  int64x2_t v23;
  int64x2_t v24;
  void *v26;
  void *v27;
  int64x2_t v28;
  int64x2_t v29;
  float32x4_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  int v34;
  int v35;
  __n128 v36;
  __n128 v37;
  float32x4_t v38;
  __n128 v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  v10 = *((_DWORD *)this + 165);
  if ((v10 & 2) != 0)
  {
    if (!lpsrc)
      goto LABEL_14;
    if (v11)
    {
      v12 = v11;
      SKCRenderer::flushCurrentBatch(this);
      if (SKCEffectNode::getEnableEffects(v12))
      {
        if (SKCEffectNode::getShouldRasterize(v12))
        {
          v13.i32[0] = 0;
          v14.i32[0] = *((_DWORD *)v12 + 169);
          v15 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v14, v13), 0), (int8x16_t)xmmword_1DC921D10, (int8x16_t)xmmword_1DC921CE0);
        }
        else
        {
          v15 = (float32x4_t)xmmword_1DC923410;
        }
      }
      else
      {
        v15 = (float32x4_t)xmmword_1DC923400;
      }
      v36 = (__n128)v15;
      __asm { FMOV            V0.4S, #0.25 }
      SKCRenderer::addDebugFill(this, 6 * (a4 >> 2), 6 * (a5 >> 2), (__n128)vmulq_f32(v15, _Q0));
      SKCRenderer::addDebugStroke(this, 6 * (a4 >> 2), 6 * (a5 >> 2), v36);
      v10 = *((_DWORD *)this + 165);
    }
  }
  if (lpsrc)
  {
    if ((v10 & 4) != 0)
    {
      if (v21)
      {
        v22 = v21;
        SKCRenderer::flushCurrentBatch(this);
        v23.i64[0] = 0;
        v24.i64[0] = v22[71];
        v37 = (__n128)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64(v24, v23).i64[0], 0), (int8x16_t)xmmword_1DC923400, (int8x16_t)xmmword_1DC922FB0);
        __asm { FMOV            V0.4S, #0.25 }
        SKCRenderer::addDebugFill(this, 6 * (a4 >> 2), 6 * (a5 >> 2), (__n128)vmulq_f32((float32x4_t)v37, _Q0));
        SKCRenderer::addDebugStroke(this, 6 * (a4 >> 2), 6 * (a5 >> 2), v37);
        v10 = *((_DWORD *)this + 165);
      }
    }
  }
LABEL_14:
  if ((v10 & 8) != 0 && *(_QWORD *)(a3 + 16))
  {
    SKCRenderer::flushCurrentBatch(this);
    SKCRenderer::addDebugFill(this, 6 * (a4 >> 2), 6 * (a5 >> 2), (__n128)xmmword_1DC923420);
    SKCRenderer::addDebugStroke(this, 6 * (a4 >> 2), 6 * (a5 >> 2), (__n128)xmmword_1DC923400);
    v10 = *((_DWORD *)this + 165);
  }
  if ((v10 & 0x10) != 0)
  {
    v26 = *(void **)(a3 + 16);
    if (v26)
    {
      if (objc_msgSend(v26, "_backingProgramIsDirty"))
      {
        SKCRenderer::flushCurrentBatch(this);
        v27 = *(void **)(a3 + 16);
        if (v27)
        {
          objc_msgSend(v27, "_backingProgram");
          v28.i64[0] = 0;
          v29.i64[0] = v40;
          v30 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64(v29, v28).i64[0], 0), (int8x16_t)xmmword_1DC923430, (int8x16_t)xmmword_1DC921820);
          if (v41)
          {
            p_shared_owners = (unint64_t *)&v41->__shared_owners_;
            do
              v32 = __ldaxr(p_shared_owners);
            while (__stlxr(v32 - 1, p_shared_owners));
            if (!v32)
            {
              v38 = v30;
              ((void (*)())v41->__on_zero_shared)();
              std::__shared_weak_count::__release_weak(v41);
              v30 = v38;
            }
          }
        }
        else
        {
          v30 = (float32x4_t)xmmword_1DC923430;
        }
        v39 = (__n128)v30;
        __asm { FMOV            V0.4S, #0.25 }
        v34 = 6 * (a4 >> 2);
        v35 = 6 * (a5 >> 2);
        SKCRenderer::addDebugFill(this, v34, v35, (__n128)vmulq_f32(v30, _Q0));
        SKCRenderer::addDebugStroke(this, v34, v35, v39);
      }
    }
  }
}

uint64_t SKCRenderer::addDebugFill(_QWORD *a1, int a2, int a3, __n128 a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  std::string __str;
  int v21;

  v7 = a1[5];
  v8 = a1[29];
  LODWORD(__str.__r_.__value_.__l.__data_) = 31;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v7 + 8), (int *)&__str);
  v9 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(v9 - 80) = v8;
  *(_OWORD *)(v9 - 64) = xmmword_1DC921850;
  *(_QWORD *)(v9 - 48) = 0x30000000FLL;
  v10 = a1[5];
  std::string::basic_string[abi:ne180100]<0>(&__str, "a_position");
  v11 = a1[51];
  v21 = 5;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v10 + 8), &v21);
  v12 = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v12 - 80) = v11;
  std::string::operator=((std::string *)(v12 - 176), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v13 = a1[5];
  std::string::basic_string[abi:ne180100]<0>(&__str, "u_color");
  v21 = 25;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v13 + 8), &v21);
  v14 = *(_QWORD *)(v13 + 16);
  std::string::operator=((std::string *)(v14 - 176), &__str);
  *(__n128 *)(v14 - 64) = a4;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v15 = a1[5];
  v16 = a1[60];
  LODWORD(__str.__r_.__value_.__l.__data_) = 4;
  result = std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v15 + 8), (int *)&__str);
  v18 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v18 - 80) = v16;
  *(_DWORD *)(v18 - 64) = 3;
  *(_DWORD *)(v18 - 60) = a2;
  *(_DWORD *)(v18 - 56) = a3;
  return result;
}

void sub_1DC90E460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SKCRenderer::render(uint64_t a1@<X0>, _OWORD *a2@<X1>, unint64_t *a3@<X2>, int a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, _QWORD *a9@<X8>, int8x16_t a10@<Q0>, int8x16_t a11@<Q1>, __n128 a12@<Q2>, __n128 a13@<Q3>, __n128 a14@<Q4>, __n128 a15@<Q5>, double a16@<D6>)
{
  void *v19;
  id *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  SKCStats *v35;
  uint64_t v36;
  double v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  __n128 *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  __n128 v67;
  BOOL v68;
  void *v69;
  void *v70;
  char v71;
  NSString *v72;
  void **v73;
  float64x2_t v74;
  float64x2_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  BOOL v80;
  float v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  unsigned int v88;
  BOOL v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  int v108;
  unint64_t v109;
  unsigned int v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  SKCStats *v124;
  double v125;
  uint64_t v126;
  NSObject *v127;
  unint64_t *v128;
  unint64_t v129;
  double frameBeginTime;
  unint64_t *v131;
  unint64_t v132;
  NSObject *v135;
  CGFloat y;
  CGFloat height;
  CGFloat width;
  void (**v143)(void);
  id v144;
  CGFloat x;
  unint64_t v147;
  __int128 v149;
  SKCStats v150;
  int v151;
  _QWORD v152[3];
  _QWORD *v153;
  uint64_t v154;
  CGRect v155;

  v19 = a5;
  v154 = *MEMORY[0x1E0C80C00];
  v144 = a5;
  v143 = a8;
  v24 = (id *)(a1 + 1272);
  objc_storeStrong((id *)(a1 + 1272), v19);
  objc_msgSend(*(id *)(a1 + 1272), "objectForKeyedSubscript:", CFSTR("ignoresSiblingOrder"));
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(a1 + 1000) = objc_msgSend(v25, "BOOLValue");

  objc_msgSend(*(id *)(a1 + 1272), "objectForKeyedSubscript:", CFSTR("cullNonVisibleNodes"));
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(a1 + 1001) = objc_msgSend(v26, "BOOLValue");

  objc_msgSend(*(id *)(a1 + 1272), "objectForKeyedSubscript:", CFSTR("doNotRenderChildNodes"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  *(_BYTE *)(a1 + 1002) = objc_msgSend(v27, "BOOLValue");

  objc_msgSend(*(id *)(a1 + 1272), "objectForKeyedSubscript:", CFSTR("debugDisablePresentationTime"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v19) = objc_msgSend(v28, "BOOLValue");

  if ((_DWORD)v19)
    a16 = 0.0;
  objc_msgSend(*v24, "objectForKeyedSubscript:", CFSTR("_client"));
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(a1 + 992) = objc_msgSend(v29, "pointerValue");

  SKCStats::SKCStats(&v150);
  v30 = *(_OWORD *)&v150.constraints.constraintCount;
  v31 = *(_OWORD *)&v150.render.nodeTraversalCount;
  *(_OWORD *)(a1 + 944) = *(_OWORD *)&v150.render.duration;
  *(_OWORD *)(a1 + 960) = v31;
  *(_QWORD *)(a1 + 976) = *(_QWORD *)&v150.render.passCount;
  v32 = *(_OWORD *)&v150.clientUpdate.duration;
  v33 = *(_OWORD *)&v150.physics.duration;
  *(_OWORD *)(a1 + 880) = *(_OWORD *)&v150.update.duration;
  *(_OWORD *)(a1 + 896) = v33;
  *(_OWORD *)(a1 + 912) = *(_OWORD *)&v150.constraints.beginTime;
  *(_OWORD *)(a1 + 928) = v30;
  v34 = *(_OWORD *)&v150.baseTime;
  *(_OWORD *)(a1 + 816) = *(_OWORD *)&v150.frameBeginTime;
  *(_OWORD *)(a1 + 832) = v34;
  *(_OWORD *)(a1 + 848) = *(_OWORD *)&v150.frameCount;
  *(_OWORD *)(a1 + 864) = v32;
  SKCStats::~SKCStats(&v150);
  if (a6)
    *(_QWORD *)(a1 + 744) = a6;
  v35 = *(SKCStats **)(a1 + 744);
  if (a7)
    v36 = a7;
  else
    v36 = *(_QWORD *)(a1 + 744);
  *(_QWORD *)(a1 + 800) = v36;
  v37 = CACurrentMediaTime();
  SKCStats::beginRender(v35, v37);
  v135 = *(id *)a1;
  dispatch_semaphore_wait(v135, 0xFFFFFFFFFFFFFFFFLL);
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy(a1 + 1040, *(_QWORD **)(a1 + 1048));
  *(_QWORD *)(a1 + 1040) = a1 + 1048;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_QWORD *)(a1 + 1048) = 0;
  std::__tree<std::__value_type<unsigned int,SKCLightMaskUniforms>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SKCLightMaskUniforms>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SKCLightMaskUniforms>>>::destroy(a1 + 1064, *(_QWORD **)(a1 + 1072));
  *(_QWORD *)(a1 + 1064) = a1 + 1072;
  *(_QWORD *)(a1 + 1080) = 0;
  *(_QWORD *)(a1 + 1072) = 0;
  std::__tree<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::__map_value_compare<SKCLightNode *,std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::less<SKCLightNode *>,true>,std::allocator<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>>>::destroy(a1 + 1112, *(_QWORD **)(a1 + 1120));
  *(_QWORD *)(a1 + 1112) = a1 + 1120;
  *(_QWORD *)(a1 + 1128) = 0;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_QWORD *)(a1 + 1096) = *(_QWORD *)(a1 + 1088);
  v38 = *a3;
  if (*a3)
  {
    *(_DWORD *)(v38 + 216) = 0;
    if (a2)
    {
      {
        v39 = a2[19];
      }
      else
      {
        v39 = xmmword_1DC9217E0;
      }
    }
    else
    {
      v39 = xmmword_1DC923440;
    }
    *(_OWORD *)(v38 + 32) = v39;
  }
LABEL_16:
  *(_DWORD *)(a1 + 80) = 0;
  SKCRenderer::applyDebugOptions((SKCRenderer *)a1);
  if ((*(_BYTE *)(a1 + 661) & 0x10) != 0)
    NSLog(CFSTR("SKCRenderer<%p> [Begin Frame]"), a1);
  v40 = operator new();
  *(_QWORD *)v40 = v40;
  *(_QWORD *)(v40 + 8) = v40;
  *(_QWORD *)(v40 + 16) = 0;
  *(_QWORD *)(v40 + 24) = v40 + 24;
  *(_QWORD *)(v40 + 32) = v40 + 24;
  *(_QWORD *)(v40 + 40) = 0;
  v41 = (_OWORD *)MEMORY[0x1E0C83FF0];
  *(_QWORD *)(v40 + 80) = 0;
  v42 = v41[1];
  *(_OWORD *)(v40 + 96) = *v41;
  *(_OWORD *)(v40 + 112) = v42;
  v43 = v41[3];
  *(_OWORD *)(v40 + 128) = v41[2];
  *(_OWORD *)(v40 + 144) = v43;
  *(_BYTE *)(v40 + 160) = 0;
  *(_BYTE *)(v40 + 192) = 0;
  *(_BYTE *)(v40 + 224) = 0;
  std::shared_ptr<SKCRenderPass>::shared_ptr[abi:ne180100]<SKCRenderPass,void>(&v150, v40);
  v44 = (__n128 *)v150._vptr$SKCStats;
  *((__n128 *)v150._vptr$SKCStats + 6) = a12;
  v44[7] = a13;
  v44[8] = a14;
  v44[9] = a15;
  if (a2)
  {
    v45 = operator new();
    *(_QWORD *)v45 = &off_1EA4FE720;
    *(_QWORD *)(v45 + 8) = 0;
    *(_QWORD *)(v45 + 16) = 0;
    *(_QWORD *)(v45 + 24) = 0;
    *(_QWORD *)(v45 + 32) = v45 + 32;
    *(_QWORD *)(v45 + 40) = v45 + 32;
    *(_QWORD *)(v45 + 48) = 0;
    *(_QWORD *)(v45 + 56) = v45 + 56;
    *(_QWORD *)(v45 + 64) = v45 + 56;
    *(_OWORD *)(v45 + 72) = 0u;
    *(_OWORD *)(v45 + 88) = 0u;
    *(_OWORD *)(v45 + 104) = 0u;
    *(_QWORD *)(v45 + 120) = 0;
    v46 = v41[3];
    *(_OWORD *)(v45 + 160) = v41[2];
    *(_OWORD *)(v45 + 176) = v46;
    v47 = v41[1];
    *(_OWORD *)(v45 + 128) = *v41;
    *(_OWORD *)(v45 + 144) = v47;
    *(_BYTE *)(v45 + 192) = 0;
    std::shared_ptr<SKCRenderSortGroup>::shared_ptr[abi:ne180100]<SKCRenderSortGroup,void>(&v149, v45);
    v48 = (_QWORD *)v149;
    v49 = *(_QWORD **)(v149 + 16);
    v50 = *(_QWORD *)(v149 + 24);
    if ((unint64_t)v49 >= v50)
    {
      v52 = (void **)(v149 + 8);
      v53 = *(_QWORD *)(v149 + 8);
      v54 = ((uint64_t)v49 - v53) >> 3;
      if ((unint64_t)(v54 + 1) >> 61)
        std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
      v55 = v50 - v53;
      v56 = v55 >> 2;
      if (v55 >> 2 <= (unint64_t)(v54 + 1))
        v56 = v54 + 1;
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
        v57 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v57 = v56;
      if (v57)
        v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v149 + 24, v57);
      else
        v58 = 0;
      v59 = &v58[8 * v54];
      v60 = &v58[8 * v57];
      *(_QWORD *)v59 = a2;
      v51 = v59 + 8;
      v62 = (char *)v48[1];
      v61 = (char *)v48[2];
      if (v61 != v62)
      {
        do
        {
          v63 = *((_QWORD *)v61 - 1);
          v61 -= 8;
          *((_QWORD *)v59 - 1) = v63;
          v59 -= 8;
        }
        while (v61 != v62);
        v61 = (char *)*v52;
      }
      v48[1] = v59;
      v48[2] = v51;
      v48[3] = v60;
      if (v61)
        operator delete(v61);
    }
    else
    {
      *v49 = a2;
      v51 = v49 + 1;
    }
    v48[2] = v51;
    std::list<std::shared_ptr<SKCRenderSortGroup>>::push_back((uint64_t *)v150._vptr$SKCStats, &v149);
    ++*(_DWORD *)(*(_QWORD *)(a1 + 744) + 156);
    v64 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
    if (*((_QWORD *)&v149 + 1))
    {
      v65 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    v44 = (__n128 *)v150._vptr$SKCStats;
  }
  v44[5].n128_u64[0] = *a3;
  v67 = (__n128)a11;
  v44[3] = (__n128)a11;
  if (a11.i32[2])
    v68 = a11.i32[3] == 0;
  else
    v68 = 1;
  if (!v68)
  {
    v44[4] = (__n128)a10;
    if (v144)
    {
      objc_msgSend(v144, "valueForKey:", CFSTR("scissorRect"));
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      if (v69)
      {
        objc_msgSend(*v24, "valueForKey:", CFSTR("debugDisableScissorRect"));
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        v71 = objc_msgSend(v70, "BOOLValue");

        if ((v71 & 1) == 0)
        {
          objc_msgSend(v144, "valueForKey:", CFSTR("scissorRect"));
          v72 = (NSString *)objc_claimAutoreleasedReturnValue();
          v155 = CGRectFromString(v72);
          x = v155.origin.x;
          y = v155.origin.y;
          height = v155.size.height;
          width = v155.size.width;

          v73 = v150._vptr$SKCStats;
          *((_BYTE *)v150._vptr$SKCStats + 160) = 1;
          v74.f64[0] = x;
          v74.f64[1] = y;
          v75.f64[0] = width;
          v75.f64[1] = height;
          *((int32x4_t *)v73 + 11) = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(v74), (int32x4_t)vcvtq_u64_f64(v75));
        }
      }
    }
    v76 = a1 + 56;
    std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear((uint64_t *)(a1 + 56));
    std::list<std::shared_ptr<SKCRenderSortGroup>>::push_back((uint64_t *)(a1 + 56), &v150);
    if (sk_debug_get_optional())
      kdebug_trace();
    v77 = *(_QWORD *)(a1 + 64);
    if (v77 != v76)
    {
      v78 = a1 + 16;
      do
      {
        std::shared_ptr<jet_texture>::operator=[abi:ne180100]((_QWORD *)(a1 + 16), (uint64_t *)(v77 + 16));
        v79 = *(_DWORD *)(*(_QWORD *)v78 + 56);
        if (v79)
          v80 = *(_DWORD *)(*(_QWORD *)v78 + 60) == 0;
        else
          v80 = 1;
        if (!v80)
        {
          v81 = (float)v79 / *(float *)(*(_QWORD *)v78 + 72);
          if (v81 <= 1.0)
            v81 = 1.0;
          *(float *)(a1 + 208) = v81;
          *(_OWORD *)(a1 + 192) = *((_OWORD *)v150._vptr$SKCStats + 3);
          SKCRenderer::buildRenderPass(a1, (_QWORD *)(a1 + 16));
        }
        v77 = *(_QWORD *)(v77 + 8);
      }
      while (v77 != v76);
    }
    if (sk_debug_get_optional())
      kdebug_trace();
    if (sk_debug_get_optional())
      kdebug_trace();
    SKCRenderer::ensureBuffers(a1);
    SKCRenderer::generateShadowGeometery((SKCRenderer *)a1);
    if (v76 != *(_QWORD *)(a1 + 64))
    {
      v82 = (_QWORD *)(a1 + 40);
      v147 = vextq_s8(a11, a11, 8uLL).u64[0];
      v83 = a1 + 56;
      do
      {
        v84 = *(_QWORD *)(*(_QWORD *)v83 + 16);
        v85 = *(std::__shared_weak_count **)(*(_QWORD *)v83 + 24);
        *(_QWORD *)&v149 = v84;
        *((_QWORD *)&v149 + 1) = v85;
        if (v85)
        {
          p_shared_owners = (unint64_t *)&v85->__shared_owners_;
          do
            v87 = __ldxr(p_shared_owners);
          while (__stxr(v87 + 1, p_shared_owners));
        }
        v88 = *(_DWORD *)(v84 + 56);
        if (v88)
          v89 = *(_DWORD *)(v84 + 60) == 0;
        else
          v89 = 1;
        if (!v89)
        {
          v90 = (float)v88 / *(float *)(v84 + 72);
          if (v90 <= 1.0)
            v90 = 1.0;
          *(float *)(a1 + 208) = v90;
          *(_OWORD *)(a1 + 192) = *(_OWORD *)(v84 + 48);
          v91 = *(_QWORD *)(v84 + 80);
          if (!v91 || !*(_QWORD *)(v91 + 16))
          {
            v92 = *v82;
            v93 = (uint64_t *)(*v82 + 8);
            v151 = 11;
            std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v93, &v151);
            v94 = *(_QWORD *)(v92 + 16);
            *(_QWORD *)(v94 - 64) = a11.i64[0];
            *(_QWORD *)(v94 - 56) = v147;
            v95 = *v82;
            v96 = (uint64_t *)(*v82 + 8);
            v151 = 12;
            std::vector<jet_render_op>::emplace_back<jet_render_opcode>(v96, &v151);
            v97 = *(_QWORD *)(v95 + 16);
            *(_QWORD *)(v97 - 64) = a11.i64[0];
            *(_QWORD *)(v97 - 56) = v147;
          }
          SKCRenderer::expandRenderPass(a1, (uint64_t *)&v149, a1 + 40);
        }
        if (v85)
        {
          v98 = (unint64_t *)&v85->__shared_owners_;
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        v83 = *(_QWORD *)v83;
      }
      while (v83 != *(_QWORD *)(a1 + 64));
    }
    if (!v143)
      goto LABEL_94;
    v100 = *(_QWORD *)(a1 + 40);
    if (v100)
    {
      v101 = MEMORY[0x1DF0CFCB0](v143);
      v152[0] = &off_1EA501348;
      v152[1] = v101;
      v153 = v152;
      LODWORD(v149) = 43;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v100 + 8), (int *)&v149);
      std::function<void ()(void)>::operator=((_QWORD *)(*(_QWORD *)(v100 + 16) - 120), (uint64_t)v152);
      v102 = v153;
      if (v153 == v152)
      {
        v103 = 4;
        v102 = v152;
        goto LABEL_93;
      }
      if (v153)
      {
        v103 = 5;
LABEL_93:
        (*(void (**)(void))(*v102 + 8 * v103))();
      }
    }
    else
    {
      NSLog(CFSTR("SKCRenderer: failed to schedule handler. renderer._currentCommandBuffer is nil"));
      v143[2]();
    }
LABEL_94:
    if (*v24)
    {
      std::shared_ptr<jet_texture>::operator=[abi:ne180100]((_QWORD *)(a1 + 16), (uint64_t *)&v150);
      SKCRenderer::addDebugGroup(a1, a1 + 40, a10);
    }
    if (sk_debug_get_optional())
      kdebug_trace();
    if (sk_debug_get_optional())
      kdebug_trace();
    if (a4)
    {
      v104 = *(_QWORD *)(a1 + 40);
      v105 = *(_QWORD *)(*a3 + 16);
      LODWORD(v149) = 33;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v104 + 8), (int *)&v149);
      v106 = *(_QWORD *)(v104 + 16);
      *(_QWORD *)(v106 - 80) = v105;
      *(double *)(v106 - 64) = a16;
      kdebug_trace();
    }
    SKCRenderer::flushRenderOps((SKCRenderer *)a1);
    if (sk_debug_get_optional())
      kdebug_trace();
    if ((*(_BYTE *)(a1 + 661) & 0x10) != 0)
      NSLog(CFSTR("SKCRenderer<%p> [End Frame]"), a1);
    objc_msgSend(*v24, "valueForKey:", CFSTR("shrinkBatchBuffers"));
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    v108 = objc_msgSend(v107, "BOOLValue");

    if (v108)
    {
      v110 = *(_DWORD *)(*(_QWORD *)(a1 + 744) + 172);
      v111 = v110 <= 0x28 ? 40 : v110;
      LODWORD(v109) = *(_DWORD *)(a1 + 84);
      if ((double)v109 * 0.3 > (double)v111)
        SKCRenderer::resizeBatchBufferCapacity((SKCRenderer *)a1, v111);
    }
    v149 = 0uLL;
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 16, &v149);
    v112 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
    if (*((_QWORD *)&v149 + 1))
    {
      v113 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    *(_DWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    v115 = *(_QWORD *)(a1 + 1240);
    v116 = *(_QWORD *)(a1 + 1232);
    while (v115 != v116)
      v115 = std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v115 - 16);
    *(_QWORD *)(a1 + 1240) = v116;
    v117 = *(_QWORD *)(a1 + 760);
    v118 = *(_QWORD *)(a1 + 752);
    while (v117 != v118)
      v117 = std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v117 - 16);
    *(_QWORD *)(a1 + 760) = v118;
    v119 = *(_QWORD *)(a1 + 784);
    v120 = *(_QWORD *)(a1 + 776);
    while (v119 != v120)
      v119 = std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v119 - 16);
    *(_QWORD *)(a1 + 784) = v120;
    std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear((uint64_t *)(a1 + 56));
    v149 = 0uLL;
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 16, &v149);
    v121 = (std::__shared_weak_count *)*((_QWORD *)&v149 + 1);
    if (*((_QWORD *)&v149 + 1))
    {
      v122 = (unint64_t *)(*((_QWORD *)&v149 + 1) + 8);
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    v124 = *(SKCStats **)(a1 + 744);
    v125 = CACurrentMediaTime();
    v67.n128_f64[0] = SKCStats::endRender(v124, v125);
    *(_QWORD *)(a1 + 744) = a1 + 808;
    *(_QWORD *)(a1 + 800) = 0;
    v126 = *(_QWORD *)(a1 + 1032);
    v127 = v135;
    *a9 = *(_QWORD *)(a1 + 1024);
    a9[1] = v126;
    if (v126)
    {
      v128 = (unint64_t *)(v126 + 8);
      do
        v129 = __ldxr(v128);
      while (__stxr(v129 + 1, v128));
    }
    goto LABEL_134;
  }
  if (v143)
  {
    NSLog(CFSTR("SKCRenderer: failed to schedule handler. Renderpass dest width or height is less than 1"));
    v143[2]();
  }
  v127 = v135;
  *a9 = 0;
  a9[1] = 0;
LABEL_134:
  frameBeginTime = v150.frameBeginTime;
  if (*(_QWORD *)&v150.frameBeginTime)
  {
    v131 = (unint64_t *)(*(_QWORD *)&v150.frameBeginTime + 8);
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      (*(void (**)(double, __n128))(**(_QWORD **)&frameBeginTime + 16))(COERCE_DOUBLE(*(_QWORD *)&frameBeginTime), v67);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&frameBeginTime);
    }
  }
  dispatch_semaphore_signal(v127);

}

void sub_1DC90F090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_semaphore_t dsema, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  void *v30;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  dispatch_semaphore_signal(dsema);

  _Unwind_Resume(a1);
}

void SKCRenderer::buildRenderPass(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *i;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v3 = (_QWORD *)*a2;
  *(_QWORD *)(a1 + 1152) = *a2;
  v4 = (_QWORD *)v3[1];
  if (v4 != v3)
  {
    do
    {
      v6 = (std::__shared_weak_count *)v4[3];
      v18 = v4[2];
      v19 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      SKCRenderer::buildRenderGroup(a1, &v18);
      if (v6)
      {
        v9 = (unint64_t *)&v6->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v4 = (_QWORD *)v4[1];
    }
    while (v4 != v3);
    v3 = (_QWORD *)*a2;
  }
  v11 = v3 + 3;
  for (i = (_QWORD *)v3[4]; i != v11; i = (_QWORD *)i[1])
  {
    v13 = (std::__shared_weak_count *)i[3];
    v18 = i[2];
    v19 = v13;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    SKCRenderer::buildRenderGroup(a1, &v18);
    if (v13)
    {
      v16 = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_1DC90F2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SKCRenderer::generateShadowGeometery(SKCRenderer *this)
{
  uint64_t *v1;
  char *v2;
  uint64_t **v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  void **v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  BOOL v39;
  char *v40;
  char *v41;
  uint64_t **v42;
  uint64_t v43;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  unint64_t v48;
  float32x4_t *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  SKCRenderer *v57;
  uint64_t *v58;
  uint64_t **v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  __int128 v62;
  std::__shared_weak_count *v63;
  uint64_t *v64;

  v1 = (uint64_t *)*((_QWORD *)this + 136);
  v58 = (uint64_t *)*((_QWORD *)this + 137);
  if (v1 != v58)
  {
    v2 = (char *)this + 1048;
    v3 = (uint64_t **)((char *)this + 1112);
    v4 = (_QWORD *)((char *)this + 1120);
    v57 = this;
    do
    {
      v5 = (char *)*((_QWORD *)this + 130);
      if (v5 != v2)
      {
        v6 = *v1;
        v7 = *(_DWORD *)(*(_QWORD *)*v1 + 564);
        do
        {
          v8 = *((_QWORD *)v5 + 4);
          v64 = (uint64_t *)v8;
          if ((*(_DWORD *)(v8 + 644) & v7) != 0)
          {
            v9 = (_QWORD *)*v4;
            if (!*v4)
              goto LABEL_17;
            v10 = v4;
            do
            {
              v11 = v9[4];
              v12 = v11 >= v8;
              if (v11 >= v8)
                v13 = v9;
              else
                v13 = v9 + 1;
              if (v12)
                v10 = v9;
              v9 = (_QWORD *)*v13;
            }
            while (*v13);
            if (v10 == v4 || v8 < v10[4])
            {
LABEL_17:
              v14 = (_QWORD *)operator new();
              v14[1] = 0;
              v14[2] = 0;
              *v14 = 0;
              std::shared_ptr<std::vector<SKCRenderSortInfo *>>::shared_ptr[abi:ne180100]<std::vector<SKCRenderSortInfo *>,void>(&v62, (uint64_t)v14);
              v59 = &v64;
              v15 = std::__tree<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::__map_value_compare<SKCLightNode *,std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::less<SKCLightNode *>,true>,std::allocator<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>>>::__emplace_unique_key_args<SKCLightNode *,std::piecewise_construct_t const&,std::tuple<SKCLightNode * const&>,std::tuple<>>(v3, (unint64_t *)&v64, (uint64_t)&std::piecewise_construct, (uint64_t **)&v59);
              std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)(v15 + 5), &v62);
              v16 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
              if (*((_QWORD *)&v62 + 1))
              {
                v17 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
                do
                  v18 = __ldaxr(v17);
                while (__stlxr(v18 - 1, v17));
                if (!v18)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
              }
              v19 = (_QWORD *)*v4;
              v10 = v4;
              if (*v4)
              {
                v20 = v4;
                do
                {
                  v21 = v19[4];
                  v22 = v21 >= (unint64_t)v64;
                  if (v21 >= (unint64_t)v64)
                    v23 = v19;
                  else
                    v23 = v19 + 1;
                  if (v22)
                    v20 = v19;
                  v19 = (_QWORD *)*v23;
                }
                while (*v23);
                v10 = v4;
                if (v20 != v4)
                {
                  v10 = v20;
                  if ((unint64_t)v64 < v20[4])
                    v10 = v4;
                }
              }
            }
            v24 = (void **)v10[5];
            v25 = v24[1];
            v26 = (unint64_t)v24[2];
            if ((unint64_t)v25 >= v26)
            {
              v28 = ((char *)v25 - (_BYTE *)*v24) >> 3;
              if ((unint64_t)(v28 + 1) >> 61)
                std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
              v29 = v26 - (_QWORD)*v24;
              v30 = v29 >> 2;
              if (v29 >> 2 <= (unint64_t)(v28 + 1))
                v30 = v28 + 1;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                v31 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v31 = v30;
              if (v31)
                v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)(v24 + 2), v31);
              else
                v32 = 0;
              v33 = &v32[8 * v28];
              *(_QWORD *)v33 = v6;
              v27 = v33 + 8;
              v35 = (char *)*v24;
              v34 = (char *)v24[1];
              if (v34 != *v24)
              {
                do
                {
                  v36 = *((_QWORD *)v34 - 1);
                  v34 -= 8;
                  *((_QWORD *)v33 - 1) = v36;
                  v33 -= 8;
                }
                while (v34 != v35);
                v34 = (char *)*v24;
              }
              *v24 = v33;
              v24[1] = v27;
              v24[2] = &v32[8 * v31];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *v25 = v6;
              v27 = v25 + 1;
            }
            v24[1] = v27;
          }
          v37 = (char *)*((_QWORD *)v5 + 1);
          if (v37)
          {
            do
            {
              v38 = v37;
              v37 = *(char **)v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              v38 = (char *)*((_QWORD *)v5 + 2);
              v39 = *(_QWORD *)v38 == (_QWORD)v5;
              v5 = v38;
            }
            while (!v39);
          }
          v5 = v38;
        }
        while (v38 != v2);
      }
      ++v1;
      this = v57;
    }
    while (v1 != v58);
  }
  v40 = (char *)*((_QWORD *)this + 139);
  v41 = (char *)this + 1120;
  if (v40 != (char *)this + 1120)
  {
    v42 = (uint64_t **)((char *)this + 1040);
    do
    {
      v43 = *((_QWORD *)v40 + 4);
      v44 = (uint64_t *)*((_QWORD *)v40 + 5);
      *(_QWORD *)&v62 = v43;
      *((_QWORD *)&v62 + 1) = v44;
      v45 = (std::__shared_weak_count *)*((_QWORD *)v40 + 6);
      v63 = v45;
      if (v45)
      {
        p_shared_owners = (unint64_t *)&v45->__shared_owners_;
        do
          v47 = __ldxr(p_shared_owners);
        while (__stxr(v47 + 1, p_shared_owners));
        v60 = v45;
        v61 = v43;
        v59 = (uint64_t **)v44;
        do
          v48 = __ldxr(p_shared_owners);
        while (__stxr(v48 + 1, p_shared_owners));
      }
      else
      {
        v60 = 0;
        v61 = v43;
        v59 = (uint64_t **)v44;
      }
      v64 = &v61;
      v49 = (float32x4_t *)_ZNSt3__16__treeINS_12__value_typeIP12SKCLightNodeDv4_fEENS_19__map_value_compareIS3_S5_NS_4lessIS3_EELb1EEENS_9allocatorIS5_EEE25__emplace_unique_key_argsIS3_JRKNS_21piecewise_construct_tENS_5tupleIJRKS3_EEENSH_IJEEEEEENS_4pairINS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEElEEbEERKT_DpOT0_(v42, (unint64_t *)&v61, (uint64_t)&std::piecewise_construct, &v64);
      if (*v44 != v44[1])
        SKCLightNode::generateShadowGeometry(v61, (float32x4_t ***)v44, v49[3]);
      if (v45)
      {
        v50 = (unint64_t *)&v45->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v52 = v63;
      if (v63)
      {
        v53 = (unint64_t *)&v63->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v55 = (char *)*((_QWORD *)v40 + 1);
      if (v55)
      {
        do
        {
          v56 = v55;
          v55 = *(char **)v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          v56 = (char *)*((_QWORD *)v40 + 2);
          v39 = *(_QWORD *)v56 == (_QWORD)v40;
          v40 = v56;
        }
        while (!v39);
      }
      v40 = v56;
    }
    while (v56 != v41);
  }
}

void sub_1DC90F6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void SKCRenderer::expandRenderPass(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[2];

  ++*(_DWORD *)(*(_QWORD *)(a1 + 744) + 168);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(*a2 + 80);
  LODWORD(v19[0]) = 32;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v6 + 8), (int *)v19);
  *(_QWORD *)(*(_QWORD *)(v6 + 16) - 80) = v7;
  v8 = *a2;
  if (*(_BYTE *)(*a2 + 160))
  {
    v9 = *(_QWORD *)(a1 + 40);
    LODWORD(v19[0]) = 12;
    v17 = *(_OWORD *)(v8 + 176);
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v9 + 8), (int *)v19);
    *(_OWORD *)(*(_QWORD *)(v9 + 16) - 64) = v17;
    v8 = *a2;
  }
  if (*(_BYTE *)(v8 + 192))
  {
    v10 = *(_QWORD *)(a1 + 40);
    LODWORD(v19[0]) = 11;
    v18 = *(_OWORD *)(v8 + 208);
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v10 + 8), (int *)v19);
    *(_OWORD *)(*(_QWORD *)(v10 + 16) - 64) = v18;
    v8 = *a2;
  }
  for (i = *(_QWORD **)(v8 + 8); i != (_QWORD *)v8; i = (_QWORD *)i[1])
  {
    v12 = (std::__shared_weak_count *)i[3];
    v19[0] = i[2];
    v19[1] = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    SKCRenderer::expandRenderGroup(a1, v19, a3);
    if (v12)
    {
      v15 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_1DC90F870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SKCRenderer::addDebugGroup(uint64_t a1, uint64_t a2, int8x16_t a3)
{
  uint64_t v3;
  void *v4;
  void *v10;
  id v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  unsigned int v21;
  float32x4_t v22;
  unsigned int v23;
  float v24;
  unsigned int v25;
  unsigned int v26;
  float32x4_t v27;
  unsigned int v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  float32x4_t v32;
  unsigned int v33;
  float v34;
  unsigned int v35;
  unsigned int v36;
  float32x4_t v37;
  unsigned int v38;
  float v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v44;
  _BOOL4 v45;
  uint64_t j;
  void *v47;
  void *v48;
  SKCSceneNode *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  float v70;
  float v71;
  uint64_t v72;
  _OWORD *v73;
  __int128 v74;
  __int128 v75;
  SKCNode *v76;
  SKCSpriteNode *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  __n128 v82;
  void *v83;
  void *v84;
  __int32 v85;
  unsigned int v86;
  unsigned int v87;
  float32x4_t v88;
  float32x4_t *v89;
  float32x4_t v90;
  int8x16_t v91;
  void *v92;
  __int32 v93;
  unsigned int v94;
  unsigned int v95;
  float32x4_t v96;
  float32x4_t *v97;
  float32x4_t v98;
  int8x16_t v99;
  void *v100;
  int v101;
  SKCNode *v102;
  uint64_t v103;
  __n128 v104;
  float32x2_t v105;
  __n128 v106;
  void *v107;
  int v108;
  int v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  _QWORD *v117;
  void **v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  id v141;
  int v142;
  void *v143;
  int v144;
  void *v145;
  void *v146;
  void *v147;
  __CFString *v148;
  void *v149;
  int v150;
  int v151;
  const __CFString *v152;
  void *v153;
  uint64_t v154;
  void *v155;
  int v156;
  void *v157;
  uint64_t v158;
  void *v159;
  int v160;
  void *v161;
  uint64_t v162;
  void *v163;
  int v164;
  void *v165;
  uint64_t v166;
  void *v167;
  int v168;
  void *v169;
  uint64_t v170;
  void *v171;
  int v172;
  void *v173;
  uint64_t v174;
  void *v175;
  int v176;
  void *v177;
  uint64_t v178;
  void *v179;
  int v180;
  void *v181;
  uint64_t v182;
  void *v183;
  int v184;
  void *v185;
  uint64_t v186;
  void *v187;
  int v188;
  void *v189;
  float v190;
  float v191;
  void *v192;
  uint64_t v193;
  void *v194;
  int v195;
  float v196;
  void *v197;
  uint64_t v198;
  void *v199;
  int v200;
  float v201;
  void *v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  unint64_t v207;
  _QWORD *v208;
  void **v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  char *v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  char v224;
  id obj;
  uint64_t v228;
  uint64_t v229;
  unsigned int v230;
  void *v231;
  uint64_t i;
  void *v233;
  void *v234;
  void *v235;
  id v236;
  id v237;
  __int128 v238;
  __n128 v239;
  void *v240;
  __n128 v241;
  void *v242;
  __n128 v243;
  void *v244;
  __n128 v245;
  void *v246;
  id v247;
  id v248;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  _BYTE v270[128];
  _BYTE v271[128];
  uint64_t v272;
  simd_float4x4 v273;

  v272 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("highlightNodes"));
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(void **)(a1 + 984);
  *(_QWORD *)(a1 + 984) = v3;

  if (*(_QWORD *)(a1 + 984))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v260 = 0u;
      v261 = 0u;
      v258 = 0u;
      v259 = 0u;
      obj = *(id *)(a1 + 984);
      v229 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v258, v271, 16);
      if (v229)
      {
        v228 = *(_QWORD *)v259;
        __asm { FMOV            V0.4S, #1.0 }
        v230 = HIDWORD(_Q0);
        do
        {
          for (i = 0; i != v229; ++i)
          {
            if (*(_QWORD *)v259 != v228)
              objc_enumerationMutation(obj);
            v10 = *(void **)(*((_QWORD *)&v258 + 1) + 8 * i);
            objc_msgSend(v10, "objectForKey:", CFSTR("color"));
            v235 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "objectForKey:", CFSTR("fillColor"));
            *(_QWORD *)&v238 = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "objectForKey:", CFSTR("strokeColor"));
            *((_QWORD *)&v238 + 1) = objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "objectForKey:", CFSTR("accumulated_bounds_fillColor"));
            v236 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "objectForKey:", CFSTR("accumulated_bounds_strokeColor"));
            v237 = (id)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "objectForKey:", CFSTR("node_bounds_fillColor"));
            v233 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "objectForKey:", CFSTR("node_bounds_strokeColor"));
            v234 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "objectForKey:", CFSTR("nodeList"));
            v231 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v235)
            {
              objc_msgSend(MEMORY[0x1E0CEA478], "cyanColor");
              v235 = (void *)objc_claimAutoreleasedReturnValue();
            }
            if (v238 == 0)
            {
              v11 = v235;
              v12 = (void *)MEMORY[0x1E0CEA478];
              *(_QWORD *)&v238 = v11;
              objc_msgSend(v11, "red");
              v14 = v13;
              objc_msgSend((id)v238, "green");
              v16 = v15;
              objc_msgSend((id)v238, "blue");
              v18 = v17;
              objc_msgSend((id)v238, "alpha");
              objc_msgSend(v12, "colorWithRed:green:blue:alpha:", v14, v16, v18, v19 * 0.25);
              *((_QWORD *)&v238 + 1) = objc_claimAutoreleasedReturnValue();
            }
            if (!v236)
              v236 = (id)v238;
            if (!v237)
              v237 = *((id *)&v238 + 1);
            v243 = 0u;
            v245 = 0u;
            if (v236)
            {
              objc_msgSend(v236, "componentRGBA");
              v22.i64[0] = __PAIR64__(v21, v20);
              v22.i64[1] = __PAIR64__(v230, v23);
              v243 = (__n128)vmulq_n_f32(v22, v24);
            }
            if (v237)
            {
              objc_msgSend(v237, "componentRGBA");
              v27.i64[0] = __PAIR64__(v26, v25);
              v27.i64[1] = __PAIR64__(v230, v28);
              v245 = (__n128)vmulq_n_f32(v27, v29);
            }
            v239 = 0u;
            v241 = 0u;
            if (v233)
            {
              objc_msgSend(v233, "componentRGBA");
              v32.i64[0] = __PAIR64__(v31, v30);
              v32.i64[1] = __PAIR64__(v230, v33);
              v239 = (__n128)vmulq_n_f32(v32, v34);
            }
            if (v234)
            {
              objc_msgSend(v234, "componentRGBA");
              v37.i64[0] = __PAIR64__(v36, v35);
              v37.i64[1] = __PAIR64__(v230, v38);
              v241 = (__n128)vmulq_n_f32(v37, v39);
            }
            v40 = v231;
            if (v231)
            {
              v41 = objc_msgSend(v231, "count");
              v40 = v231;
              if (v41)
              {
                v256 = 0u;
                v257 = 0u;
                v254 = 0u;
                v255 = 0u;
                v247 = v231;
                v42 = objc_msgSend(v247, "countByEnumeratingWithState:objects:count:", &v254, v270, 16);
                if (v42)
                {
                  v43 = *(_QWORD *)v255;
                  v44 = v243.n128_f32[3] > 0.0 || v245.n128_f32[3] > 0.0;
                  v45 = v239.n128_f32[3] > 0.0 || v241.n128_f32[3] > 0.0;
                  do
                  {
                    for (j = 0; j != v42; ++j)
                    {
                      if (*(_QWORD *)v255 != v43)
                        objc_enumerationMutation(v247);
                      v47 = *(void **)(*((_QWORD *)&v254 + 1) + 8 * j);
                      objc_msgSend(v47, "scene");
                      v48 = (void *)objc_claimAutoreleasedReturnValue();
                      v49 = (SKCSceneNode *)objc_msgSend(v48, "_backingNode");

                      if (v44)
                      {
                        v252 = 0u;
                        v253 = 0u;
                        v250 = 0u;
                        v251 = 0u;
                        objc_msgSend(v47, "globalAccumulatedBoundingVerts");
                        v250 = v50;
                        v251 = v51;
                        v252 = v52;
                        v253 = v53;
                        LODWORD(v50) = a3.i32[2];
                        SKCSceneNode::matrixForDestination(v49, *(double *)&v50, *(float *)&a3.i32[3]);
                        v58 = 0;
                        v262 = v250;
                        v263 = v251;
                        v264 = v252;
                        v265 = v253;
                        do
                        {
                          *(__int128 *)((char *)&v266 + v58) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v54, COERCE_FLOAT(*(__int128 *)((char *)&v262 + v58))), v55, *(float32x2_t *)((char *)&v262 + v58), 1), v56, *(float32x4_t *)((char *)&v262 + v58), 2), v57, *(float32x4_t *)((char *)&v262 + v58), 3);
                          v58 += 16;
                        }
                        while (v58 != 64);
                        v250 = v266;
                        v251 = v267;
                        v252 = v268;
                        v253 = v269;
                        SKCRenderer::drawSolidColorQuads(a1, &v250, 1, 0, v243, v245);
                      }
                      if (v45)
                      {
                        v252 = 0u;
                        v253 = 0u;
                        v250 = 0u;
                        v251 = 0u;
                        objc_msgSend(v47, "globalBoundingVerts");
                        v250 = v59;
                        v251 = v60;
                        v252 = v61;
                        v253 = v62;
                        LODWORD(v59) = a3.i32[2];
                        SKCSceneNode::matrixForDestination(v49, *(double *)&v59, *(float *)&a3.i32[3]);
                        v67 = 0;
                        v262 = v250;
                        v263 = v251;
                        v264 = v252;
                        v265 = v253;
                        do
                        {
                          *(__int128 *)((char *)&v266 + v67) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, COERCE_FLOAT(*(__int128 *)((char *)&v262 + v67))), v64, *(float32x2_t *)((char *)&v262 + v67), 1), v65, *(float32x4_t *)((char *)&v262 + v67), 2), v66, *(float32x4_t *)((char *)&v262 + v67), 3);
                          v67 += 16;
                        }
                        while (v67 != 64);
                        v250 = v266;
                        v251 = v267;
                        v252 = v268;
                        v253 = v269;
                        SKCRenderer::drawSolidColorQuads(a1, &v250, 1, 0, v239, v241);
                      }
                    }
                    v42 = objc_msgSend(v247, "countByEnumeratingWithState:objects:count:", &v254, v270, 16);
                  }
                  while (v42);
                }

                v40 = v231;
              }
            }

          }
          v229 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v258, v271, 16);
        }
        while (v229);
      }

    }
  }
  v68 = *(_QWORD *)(a1 + 800);
  if (v68)
  {
    v69 = *(_DWORD *)(v68 + 40);
    v70 = 1.0;
    if (v69 >= 2)
    {
      v71 = *(double *)(v68 + 8) - *(double *)(v68 + 24);
      if (v71 > 0.0)
        v70 = (float)(v69 - 1) / v71;
    }
    v72 = operator new();
    *(_QWORD *)v72 = &off_1EA4FE720;
    *(_QWORD *)(v72 + 8) = 0;
    *(_QWORD *)(v72 + 16) = 0;
    *(_QWORD *)(v72 + 24) = 0;
    *(_QWORD *)(v72 + 32) = v72 + 32;
    *(_QWORD *)(v72 + 40) = v72 + 32;
    *(_QWORD *)(v72 + 48) = 0;
    *(_QWORD *)(v72 + 56) = v72 + 56;
    *(_QWORD *)(v72 + 64) = v72 + 56;
    *(_OWORD *)(v72 + 72) = 0u;
    *(_OWORD *)(v72 + 88) = 0u;
    *(_OWORD *)(v72 + 104) = 0u;
    *(_QWORD *)(v72 + 120) = 0;
    v73 = (_OWORD *)MEMORY[0x1E0C83FF0];
    v74 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
    *(_OWORD *)(v72 + 160) = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 32);
    *(_OWORD *)(v72 + 176) = v74;
    v75 = v73[1];
    *(_OWORD *)(v72 + 128) = *v73;
    *(_OWORD *)(v72 + 144) = v75;
    *(_BYTE *)(v72 + 192) = 0;
    std::shared_ptr<SKCRenderSortGroup>::shared_ptr[abi:ne180100]<SKCRenderSortGroup,void>(&v266, v72);
    v76 = *(SKCNode **)(a1 + 1136);
    if (!v76)
    {
      v77 = (SKCSpriteNode *)operator new();
      SKCSpriteNode::SKCSpriteNode(v77);
      *(_QWORD *)(a1 + 1136) = v77;
      v262 = xmmword_1DC923450;
      SKCNode::setSize((uint64_t)v77, &v262);
      v76 = *(SKCNode **)(a1 + 1136);
    }
    v262 = xmmword_1DC921CF0;
    SKCNode::setAnchor(v76, &v262);
    v78 = *(_QWORD *)(a1 + 1144);
    if (!v78)
    {
      v79 = operator new();
      SKCLabelNode::SKCLabelNode((SKCLabelNode *)v79);
      *(_QWORD *)(a1 + 1144) = v79;
      *(_DWORD *)(v79 + 592) = 1092616192;
      *(_BYTE *)(v79 + 713) = 1;
      SKCNode::setDirty((SKCNode *)v79);
      SKCLabelNode::setFontName(*(id **)(a1 + 1144), CFSTR("Menlo-Regular"));
      v78 = *(_QWORD *)(a1 + 1144);
    }
    *(_QWORD *)(v78 + 648) = 2;
    *(_BYTE *)(v78 + 712) = 1;
    SKCNode::setDirty((SKCNode *)v78);
    v80 = *(_QWORD *)(a1 + 1144);
    *(_QWORD *)(v80 + 656) = 0;
    *(_BYTE *)(v80 + 712) = 1;
    SKCNode::setDirty((SKCNode *)v80);
    v81 = (__n128)a3;
    v81.n128_u32[0] = a3.u32[2];
    SKCNode::setTranslation(*(SKCNode **)(a1 + 1136), v81, 0.0);
    v82.n128_f32[0] = *(float *)&a3.i32[2] + -5.0;
    SKCNode::setTranslation(*(SKCNode **)(a1 + 1144), v82, 5.0);
    v83 = *(void **)(a1 + 1272);
    if (!v83)
      goto LABEL_163;
    objc_msgSend(v83, "valueForKey:", CFSTR("debugDrawStats_BGColor"));
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    if (v84)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v84, "componentRGBA");
        v88.i32[1] = v85;
        v88.i64[1] = __PAIR64__(v87, v86);
        v89 = *(float32x4_t **)(a1 + 1144);
        v90 = vsubq_f32(v88, v89[39]);
        v91 = (int8x16_t)vmulq_f32(v90, v90);
        if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v91.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL)))) > 0.0)
        {
          v89[39] = v88;
          v89[44].i8[8] = 1;
          SKCNode::setDirty((SKCNode *)v89);
        }
      }
    }
    objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_FontColor"));
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    if (v92)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_msgSend(v92, "componentRGBA");
        v96.i32[1] = v93;
        v96.i64[1] = __PAIR64__(v95, v94);
        v97 = *(float32x4_t **)(a1 + 1144);
        v98 = vsubq_f32(v96, v97[38]);
        v99 = (int8x16_t)vmulq_f32(v98, v98);
        if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v99.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL)))) > 0.0)
        {
          v97[38] = v96;
          v97[44].i8[8] = 1;
          SKCNode::setDirty((SKCNode *)v97);
        }
      }
    }
    objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_Centered"));
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    v101 = objc_msgSend(v100, "BOOLValue");

    if (v101)
    {
      v102 = *(SKCNode **)(a1 + 1136);
      v262 = xmmword_1DC923460;
      SKCNode::setAnchor(v102, &v262);
      v103 = *(_QWORD *)(a1 + 1144);
      *(_QWORD *)(v103 + 648) = 0;
      *(_BYTE *)(v103 + 712) = 1;
      SKCNode::setDirty((SKCNode *)v103);
      v104 = (__n128)vextq_s8(a3, a3, 8uLL);
      v105 = vmul_f32((float32x2_t)v104.n128_u64[0], (float32x2_t)0x3F0000003F000000);
      v104.n128_u64[0] = (unint64_t)v105;
      SKCNode::setTranslation(*(SKCNode **)(a1 + 1136), v104);
      v106.n128_u64[0] = (unint64_t)v105;
      SKCNode::setTranslation(*(SKCNode **)(a1 + 1144), v106);
    }
    objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawContextType"));
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    v108 = objc_msgSend(v107, "BOOLValue");

    if (v108)
    {
      v109 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1008) + 136))(*(_QWORD *)(a1 + 1008));
      v110 = *(_QWORD *)(a1 + 1136);
      LODWORD(v111) = 1.0;
      if (v109 == 1)
      {
        LODWORD(v112) = 0;
        DWORD1(v112) = 1.0;
        DWORD2(v112) = 1.0;
        HIDWORD(v112) = *(_DWORD *)(a1 + 8);
        v262 = v112;
      }
      else
      {
        DWORD1(v111) = 0;
        DWORD2(v111) = 0;
        HIDWORD(v111) = *(_DWORD *)(a1 + 8);
        v262 = v111;
      }
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v110 + 184))(v110, &v262);
      v113 = (_QWORD *)v266;
      v114 = *(_QWORD *)(a1 + 1136);
      v115 = *(_QWORD **)(v266 + 16);
      v116 = *(_QWORD *)(v266 + 24);
      if ((unint64_t)v115 >= v116)
      {
        v118 = (void **)(v266 + 8);
        v119 = *(_QWORD *)(v266 + 8);
        v120 = ((uint64_t)v115 - v119) >> 3;
        if ((unint64_t)(v120 + 1) >> 61)
          std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
        v121 = v116 - v119;
        v122 = v121 >> 2;
        if (v121 >> 2 <= (unint64_t)(v120 + 1))
          v122 = v120 + 1;
        if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8)
          v123 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v123 = v122;
        if (v123)
          v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v266 + 24, v123);
        else
          v124 = 0;
        v125 = &v124[8 * v120];
        v126 = &v124[8 * v123];
        *(_QWORD *)v125 = v114;
        v117 = v125 + 8;
        v128 = (char *)v113[1];
        v127 = (char *)v113[2];
        if (v127 != v128)
        {
          do
          {
            v129 = *((_QWORD *)v127 - 1);
            v127 -= 8;
            *((_QWORD *)v125 - 1) = v129;
            v125 -= 8;
          }
          while (v127 != v128);
          v127 = (char *)*v118;
        }
        v113[1] = v125;
        v113[2] = v117;
        v113[3] = v126;
        if (v127)
          operator delete(v127);
      }
      else
      {
        *v115 = v114;
        v117 = v115 + 1;
      }
      v113[2] = v117;
    }
    objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_CPU"));
    v130 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v130, "BOOLValue") & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_GPU"));
      v131 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v131, "BOOLValue") & 1) == 0)
      {
        objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_FPS"));
        v132 = (void *)objc_claimAutoreleasedReturnValue();
        if ((objc_msgSend(v132, "BOOLValue") & 1) == 0)
        {
          objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_NodeCount"));
          v133 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v133, "BOOLValue") & 1) == 0)
          {
            objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_QuadCount"));
            v134 = (void *)objc_claimAutoreleasedReturnValue();
            if ((objc_msgSend(v134, "BOOLValue") & 1) == 0)
            {
              objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_DrawCount"));
              v135 = (void *)objc_claimAutoreleasedReturnValue();
              if ((objc_msgSend(v135, "BOOLValue") & 1) == 0)
              {
                objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_SKContextType"));
                v136 = (void *)objc_claimAutoreleasedReturnValue();
                if ((objc_msgSend(v136, "BOOLValue") & 1) == 0)
                {
                  objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_SKVersion"));
                  v248 = (id)objc_claimAutoreleasedReturnValue();
                  if ((objc_msgSend(v248, "BOOLValue") & 1) == 0)
                  {
                    objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_FrameTime"));
                    v246 = (void *)objc_claimAutoreleasedReturnValue();
                    if ((objc_msgSend(v246, "BOOLValue") & 1) == 0)
                    {
                      objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_RenderTime"));
                      v244 = (void *)objc_claimAutoreleasedReturnValue();
                      if ((objc_msgSend(v244, "BOOLValue") & 1) == 0)
                      {
                        objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_PassCount"));
                        v242 = (void *)objc_claimAutoreleasedReturnValue();
                        if ((objc_msgSend(v242, "BOOLValue") & 1) != 0)
                        {
                          v224 = 1;
                        }
                        else
                        {
                          objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_BufferSize"));
                          v240 = (void *)objc_claimAutoreleasedReturnValue();
                          v224 = objc_msgSend(v240, "BOOLValue");

                        }
                        if ((v224 & 1) == 0)
                        {
LABEL_162:

LABEL_163:
                          v273 = __invert_f4(*(simd_float4x4 *)(*(_QWORD *)(a1 + 16) + 96));
                          *(simd_float4x4 *)(v266 + 128) = v273;
                          SKCRenderer::buildRenderGroup(a1, (uint64_t *)&v266);
                          SKCRenderer::expandRenderGroup(a1, &v266, a2);
                          v221 = (std::__shared_weak_count *)*((_QWORD *)&v266 + 1);
                          if (*((_QWORD *)&v266 + 1))
                          {
                            v222 = (unint64_t *)(*((_QWORD *)&v266 + 1) + 8);
                            do
                              v223 = __ldaxr(v222);
                            while (__stlxr(v223 - 1, v222));
                            if (!v223)
                            {
                              ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                              std::__shared_weak_count::__release_weak(v221);
                            }
                          }
                          return;
                        }
LABEL_110:
                        objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugStatsFontSize"));
                        v137 = (void *)objc_claimAutoreleasedReturnValue();
                        v138 = objc_msgSend(v137, "integerValue");

                        if (v138)
                        {
                          v139 = *(_QWORD *)(a1 + 1144);
                          if (*(float *)(v139 + 592) != (float)v138)
                          {
                            *(float *)(v139 + 592) = (float)v138;
                            *(_BYTE *)(v139 + 713) = 1;
                            SKCNode::setDirty((SKCNode *)v139);
                          }
                        }
                        objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugStatsFontName"));
                        v140 = (void *)objc_claimAutoreleasedReturnValue();
                        if (v140)
                        {
                          v141 = *(id *)(*(_QWORD *)(a1 + 1144) + 584);
                          v142 = objc_msgSend(v140, "isEqualToString:", v141);

                          if (v142)
                            SKCLabelNode::setFontName(*(id **)(a1 + 1144), (NSString *)v140);
                        }

                        objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_SKVersion"));
                        v143 = (void *)objc_claimAutoreleasedReturnValue();
                        v144 = objc_msgSend(v143, "BOOLValue");

                        if (v144)
                        {
                          v145 = (void *)MEMORY[0x1E0CB3940];
                          SKGetVersionString();
                          v146 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v145, "stringWithFormat:", CFSTR("[SK-%@]"), v146);
                          v147 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(&stru_1EA5021F8, "stringByAppendingString:", v147);
                          v148 = (__CFString *)objc_claimAutoreleasedReturnValue();

                        }
                        else
                        {
                          v148 = &stru_1EA5021F8;
                        }
                        objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_SKContextType"));
                        v149 = (void *)objc_claimAutoreleasedReturnValue();
                        v150 = objc_msgSend(v149, "BOOLValue");

                        if (v150)
                        {
                          v151 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1008) + 136))(*(_QWORD *)(a1 + 1008));
                          v152 = CFSTR("OpenGL");
                          if (v151 == 1)
                            v152 = CFSTR("Metal");
                          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" %@"), v152);
                          v153 = (void *)objc_claimAutoreleasedReturnValue();
                          -[__CFString stringByAppendingString:](v148, "stringByAppendingString:", v153);
                          v154 = objc_claimAutoreleasedReturnValue();

                          v148 = (__CFString *)v154;
                        }
                        objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_NodeCount"));
                        v155 = (void *)objc_claimAutoreleasedReturnValue();
                        v156 = objc_msgSend(v155, "BOOLValue");

                        if (v156)
                        {
                          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" nodes:%d"), *(unsigned int *)(*(_QWORD *)(a1 + 744) + 156));
                          v157 = (void *)objc_claimAutoreleasedReturnValue();
                          -[__CFString stringByAppendingString:](v148, "stringByAppendingString:", v157);
                          v158 = objc_claimAutoreleasedReturnValue();

                          v148 = (__CFString *)v158;
                        }
                        objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_DrawCount"));
                        v159 = (void *)objc_claimAutoreleasedReturnValue();
                        v160 = objc_msgSend(v159, "BOOLValue");

                        if (v160)
                        {
                          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" draws:%d"), *(unsigned int *)(*(_QWORD *)(a1 + 744) + 164));
                          v161 = (void *)objc_claimAutoreleasedReturnValue();
                          -[__CFString stringByAppendingString:](v148, "stringByAppendingString:", v161);
                          v162 = objc_claimAutoreleasedReturnValue();

                          v148 = (__CFString *)v162;
                        }
                        objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_PassCount"));
                        v163 = (void *)objc_claimAutoreleasedReturnValue();
                        v164 = objc_msgSend(v163, "BOOLValue");

                        if (v164)
                        {
                          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" passes:%d"), *(unsigned int *)(*(_QWORD *)(a1 + 744) + 168));
                          v165 = (void *)objc_claimAutoreleasedReturnValue();
                          -[__CFString stringByAppendingString:](v148, "stringByAppendingString:", v165);
                          v166 = objc_claimAutoreleasedReturnValue();

                          v148 = (__CFString *)v166;
                        }
                        objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_QuadCount"));
                        v167 = (void *)objc_claimAutoreleasedReturnValue();
                        v168 = objc_msgSend(v167, "BOOLValue");

                        if (v168)
                        {
                          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" quads:%d"), *(unsigned int *)(*(_QWORD *)(a1 + 744) + 148));
                          v169 = (void *)objc_claimAutoreleasedReturnValue();
                          -[__CFString stringByAppendingString:](v148, "stringByAppendingString:", v169);
                          v170 = objc_claimAutoreleasedReturnValue();

                          v148 = (__CFString *)v170;
                        }
                        objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_BufferSize"));
                        v171 = (void *)objc_claimAutoreleasedReturnValue();
                        v172 = objc_msgSend(v171, "BOOLValue");

                        if (v172)
                        {
                          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" bufferSize:%d"), *(unsigned int *)(a1 + 84));
                          v173 = (void *)objc_claimAutoreleasedReturnValue();
                          -[__CFString stringByAppendingString:](v148, "stringByAppendingString:", v173);
                          v174 = objc_claimAutoreleasedReturnValue();

                          v148 = (__CFString *)v174;
                        }
                        objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_CPU"));
                        v175 = (void *)objc_claimAutoreleasedReturnValue();
                        v176 = objc_msgSend(v175, "BOOLValue");

                        if (v176)
                        {
                          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" cpu:%d%%"), SKGetUserProcessorUtilizationPercent());
                          v177 = (void *)objc_claimAutoreleasedReturnValue();
                          -[__CFString stringByAppendingString:](v148, "stringByAppendingString:", v177);
                          v178 = objc_claimAutoreleasedReturnValue();

                          v148 = (__CFString *)v178;
                        }
                        objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_GPU"));
                        v179 = (void *)objc_claimAutoreleasedReturnValue();
                        v180 = objc_msgSend(v179, "BOOLValue");

                        if (v180)
                        {
                          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR(" gpu:%d%%"), SKGetGraphicsRendererUtilizationPercent());
                          v181 = (void *)objc_claimAutoreleasedReturnValue();
                          -[__CFString stringByAppendingString:](v148, "stringByAppendingString:", v181);
                          v182 = objc_claimAutoreleasedReturnValue();

                          v148 = (__CFString *)v182;
                        }
                        objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_FPS"));
                        v183 = (void *)objc_claimAutoreleasedReturnValue();
                        v184 = objc_msgSend(v183, "BOOLValue");

                        if (v184)
                        {
                          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("  %2.1f fps"), v70);
                          v185 = (void *)objc_claimAutoreleasedReturnValue();
                          -[__CFString stringByAppendingString:](v148, "stringByAppendingString:", v185);
                          v186 = objc_claimAutoreleasedReturnValue();

                          v148 = (__CFString *)v186;
                        }
                        objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_PreferredFPS"));
                        v187 = (void *)objc_claimAutoreleasedReturnValue();
                        v188 = objc_msgSend(v187, "BOOLValue");

                        if (v188)
                        {
                          objc_msgSend(*(id *)(a1 + 1272), "objectForKeyedSubscript:", CFSTR("_preferredFramesPerSecond"));
                          v189 = (void *)objc_claimAutoreleasedReturnValue();
                          objc_msgSend(v189, "floatValue");
                          v191 = v190;

                          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("  (%2.1f pfps)"), v191);
                          v192 = (void *)objc_claimAutoreleasedReturnValue();
                          -[__CFString stringByAppendingString:](v148, "stringByAppendingString:", v192);
                          v193 = objc_claimAutoreleasedReturnValue();

                          v148 = (__CFString *)v193;
                        }
                        objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_FrameTime"));
                        v194 = (void *)objc_claimAutoreleasedReturnValue();
                        v195 = objc_msgSend(v194, "BOOLValue");

                        if (v195)
                        {
                          v196 = *(double *)(*(_QWORD *)(a1 + 800) + 16)
                               * 1000.0
                               / (double)*(int *)(*(_QWORD *)(a1 + 800) + 40);
                          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("  frame:%2.1fms"), v196);
                          v197 = (void *)objc_claimAutoreleasedReturnValue();
                          -[__CFString stringByAppendingString:](v148, "stringByAppendingString:", v197);
                          v198 = objc_claimAutoreleasedReturnValue();

                          v148 = (__CFString *)v198;
                        }
                        objc_msgSend(*(id *)(a1 + 1272), "valueForKey:", CFSTR("debugDrawStats_RenderTime"));
                        v199 = (void *)objc_claimAutoreleasedReturnValue();
                        v200 = objc_msgSend(v199, "BOOLValue");

                        if (v200)
                        {
                          v201 = *(double *)(*(_QWORD *)(a1 + 800) + 136)
                               * 1000.0
                               / (double)*(int *)(*(_QWORD *)(a1 + 800) + 40);
                          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("  render:%2.1fms"), v201);
                          v202 = (void *)objc_claimAutoreleasedReturnValue();
                          -[__CFString stringByAppendingString:](v148, "stringByAppendingString:", v202);
                          v203 = objc_claimAutoreleasedReturnValue();

                          v148 = (__CFString *)v203;
                        }
                        SKCLabelNode::setText(*(SKCLabelNode **)(a1 + 1144), &v148->isa);
                        v204 = (_QWORD *)v266;
                        v205 = *(_QWORD *)(a1 + 1144);
                        v206 = *(_QWORD **)(v266 + 16);
                        v207 = *(_QWORD *)(v266 + 24);
                        if ((unint64_t)v206 >= v207)
                        {
                          v209 = (void **)(v266 + 8);
                          v210 = *(_QWORD *)(v266 + 8);
                          v211 = ((uint64_t)v206 - v210) >> 3;
                          if ((unint64_t)(v211 + 1) >> 61)
                            std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
                          v212 = v207 - v210;
                          v213 = v212 >> 2;
                          if (v212 >> 2 <= (unint64_t)(v211 + 1))
                            v213 = v211 + 1;
                          if ((unint64_t)v212 >= 0x7FFFFFFFFFFFFFF8)
                            v214 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v214 = v213;
                          if (v214)
                            v215 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v266 + 24, v214);
                          else
                            v215 = 0;
                          v216 = &v215[8 * v211];
                          v217 = &v215[8 * v214];
                          *(_QWORD *)v216 = v205;
                          v208 = v216 + 8;
                          v219 = (char *)v204[1];
                          v218 = (char *)v204[2];
                          if (v218 != v219)
                          {
                            do
                            {
                              v220 = *((_QWORD *)v218 - 1);
                              v218 -= 8;
                              *((_QWORD *)v216 - 1) = v220;
                              v216 -= 8;
                            }
                            while (v218 != v219);
                            v218 = (char *)*v209;
                          }
                          v204[1] = v216;
                          v204[2] = v208;
                          v204[3] = v217;
                          if (v218)
                            operator delete(v218);
                        }
                        else
                        {
                          *v206 = v205;
                          v208 = v206 + 1;
                        }
                        v204[2] = v208;

                        goto LABEL_162;
                      }

                    }
                  }

                }
              }

            }
          }

        }
      }

    }
    goto LABEL_110;
  }
}

void sub_1DC910E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,void *a33,uint64_t a34,void *a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a71);
  _Unwind_Resume(a1);
}

uint64_t SKCRenderer::resizeBatchBufferCapacity(SKCRenderer *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  kdebug_trace();
  (***((void (****)(_QWORD, uint64_t))this + 54))(*((_QWORD *)this + 54), a2);
  (***((void (****)(_QWORD, uint64_t))this + 58))(*((_QWORD *)this + 58), a2);
  (***((void (****)(_QWORD, uint64_t))this + 56))(*((_QWORD *)this + 56), a2);
  v5 = *((_QWORD *)this + 51);
  if (v5)
    *((_QWORD *)this + 13) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v6 = *((_QWORD *)this + 53);
  if (v6)
    *((_QWORD *)this + 12) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v7 = *((_QWORD *)this + 52);
  if (v7)
    *((_QWORD *)this + 11) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  LODWORD(v4) = vcvtpd_u64_f64((double)a2 * 1.5);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 60) + 32))(*((_QWORD *)this + 60), v4);
  SKCRendererGenerateQuadIndexBufferData<unsigned short>((unsigned int **)this + 60);
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**((_QWORD **)this + 60) + 24))(*((_QWORD *)this + 60), 0, 0);
  *((_DWORD *)this + 21) = a2;
  return result;
}

void std::vector<SKCRenderSortInfo *>::push_back[abi:ne180100](void **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

void SKCRenderer::drawSolidColorQuads(uint64_t a1, const void *a2, uint64_t a3, int a4, __n128 a5, __n128 a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string __str;
  int v33;

  SKCRenderer::flushCurrentBatch((SKCRenderer *)a1);
  if (a2)
    memcpy((void *)(*(_QWORD *)(a1 + 104) + 16 * *(unsigned int *)(a1 + 80)), a2, a3 << 6);
  *(_DWORD *)(a1 + 80) += 4 * a3;
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 232);
  LODWORD(__str.__r_.__value_.__l.__data_) = 31;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v10 + 8), (int *)&__str);
  v12 = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v12 - 80) = v11;
  *(_DWORD *)(v12 - 64) = a4;
  *(_OWORD *)(v12 - 60) = xmmword_1DC922230;
  *(_DWORD *)(v12 - 44) = 3;
  v13 = *(_QWORD *)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(&__str, "a_position");
  v14 = *(_QWORD *)(a1 + 408);
  v33 = 5;
  std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v13 + 8), &v33);
  v15 = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(v15 - 80) = v14;
  std::string::operator=((std::string *)(v15 - 176), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v16 = *(_DWORD *)(a1 + 32);
  v17 = v16 >> 2;
  if (a5.n128_f32[3] > 0.0)
  {
    v18 = *(_QWORD *)(a1 + 40);
    std::string::basic_string[abi:ne180100]<0>(&__str, "u_color");
    v33 = 25;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v18 + 8), &v33);
    v19 = *(_QWORD *)(v18 + 16);
    std::string::operator=((std::string *)(v19 - 176), &__str);
    v20 = 6 * (v16 >> 2);
    *(__n128 *)(v19 - 64) = a5;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v21 = *(_QWORD *)(a1 + 40);
    v22 = *(_QWORD *)(a1 + 480);
    LODWORD(__str.__r_.__value_.__l.__data_) = 4;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v21 + 8), (int *)&__str);
    v23 = *(_QWORD *)(v21 + 16);
    *(_QWORD *)(v23 - 80) = v22;
    *(_DWORD *)(v23 - 64) = 3;
    *(_DWORD *)(v23 - 60) = v20;
    *(_DWORD *)(v23 - 56) = 6 * a3;
  }
  if (a6.n128_f32[3] > 0.0)
  {
    v24 = *(_QWORD *)(a1 + 40);
    std::string::basic_string[abi:ne180100]<0>(&__str, "u_color");
    v33 = 25;
    std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v24 + 8), &v33);
    v25 = *(_QWORD *)(v24 + 16);
    std::string::operator=((std::string *)(v25 - 176), &__str);
    *(__n128 *)(v25 - 64) = a6;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (a3)
    {
      v26 = 6 * v17;
      do
      {
        v27 = *(_QWORD *)(a1 + 40);
        v28 = *(_QWORD *)(a1 + 480);
        LODWORD(__str.__r_.__value_.__l.__data_) = 4;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v27 + 8), (int *)&__str);
        v29 = *(_QWORD *)(v27 + 16);
        *(_QWORD *)(v29 - 80) = v28;
        *(_DWORD *)(v29 - 64) = 2;
        *(_DWORD *)(v29 - 60) = v26;
        *(_DWORD *)(v29 - 56) = 6;
        v26 += 6;
        --a3;
      }
      while (a3);
    }
  }
}

void sub_1DC9116C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SKCRenderer::buildRenderGroup(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  simd_float4 v10;
  simd_float4 v11;
  simd_float4 v12;
  const void **v13;
  const void **v14;
  float32x4_t *v15;
  float32x4_t v16;
  const void *v17;
  SKCSceneNode *v18;
  double v19;
  float32x4_t *v20;
  SKCSceneNode *v21;
  simd_float4 v22;
  simd_float4 v23;
  simd_float4 v24;
  simd_float4 v25;
  uint64_t *v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  simd_float4 v39;
  float32x2_t v40;
  float32x2_t v41;
  simd_float4 v42;
  simd_float4 v43;
  float32x2_t v44;
  int8x16_t v45;
  simd_float4 v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t v49;
  simd_float4 v52;
  simd_float4 v53;
  simd_float4 v54;
  simd_float4 v55;
  simd_float4 v56;
  simd_float4 v57;
  simd_float4 v58;
  simd_float4 v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  __int128 v64;
  simd_float4x4 v65;
  simd_float4x4 v66;

  v3 = 0;
  v4 = *a2;
  *(_QWORD *)(a1 + 1160) = *a2;
  *(_DWORD *)(a1 + 1168) = 0;
  v5 = *(float32x4_t **)(a1 + 16);
  v6 = v5[6];
  v7 = v5[7];
  v8 = v5[8];
  v9 = v5[9];
  v10 = *(simd_float4 *)(v4 + 144);
  v11 = *(simd_float4 *)(v4 + 160);
  v12 = *(simd_float4 *)(v4 + 176);
  v65.columns[0] = *(simd_float4 *)(v4 + 128);
  v65.columns[1] = v10;
  v65.columns[2] = v11;
  v65.columns[3] = v12;
  do
  {
    v66.columns[v3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(*(_OWORD *)&v65.columns[v3])), v7, *(float32x2_t *)v65.columns[v3].f32, 1), v8, (float32x4_t)v65.columns[v3], 2), v9, (float32x4_t)v65.columns[v3], 3);
    ++v3;
  }
  while (v3 != 4);
  v13 = *(const void ***)(v4 + 8);
  v14 = *(const void ***)(v4 + 16);
  if (v13 != v14)
  {
    v61 = (float32x4_t)v66.columns[1];
    v62 = (float32x4_t)v66.columns[0];
    v15 = (float32x4_t *)MEMORY[0x1E0C83FF0];
    v16 = (float32x4_t)v66.columns[3];
    v60 = (float32x4_t)v66.columns[2];
    v63 = (float32x4_t)v66.columns[3];
    while (1)
    {
      v17 = *v13;
      if (!*v13)
        break;
      v20 = *(float32x4_t **)(a1 + 16);
      if (!v18)
      {
        v16 = v63;
        goto LABEL_12;
      }
      v21 = v18;
      LODWORD(v19) = v20[4].i32[2];
      SKCSceneNode::matrixForDestination(v18, v19, v20[4].f32[3]);
      v56 = v23;
      v58 = v22;
      v52 = v25;
      v54 = v24;
      v26 = *(uint64_t **)(a1 + 16);
      SKCSceneNode::getCropGroup(v21, &v64);
      v27 = operator new(0x20uLL);
      v28 = 0;
      v27[1] = v64;
      v64 = 0uLL;
      *((_QWORD *)v27 + 1) = v26;
      v29 = *v26;
      *(_QWORD *)v27 = *v26;
      *(_QWORD *)(v29 + 8) = v27;
      *v26 = (uint64_t)v27;
      ++v26[2];
      v65.columns[0] = v58;
      v65.columns[1] = v56;
      v65.columns[2] = v54;
      v65.columns[3] = v52;
      do
      {
        v66.columns[v28] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, COERCE_FLOAT(*(_OWORD *)&v65.columns[v28])), v61, *(float32x2_t *)v65.columns[v28].f32, 1), v60, (float32x4_t)v65.columns[v28], 2), v63, (float32x4_t)v65.columns[v28], 3);
        ++v28;
      }
      while (v28 != 4);
      v57 = v66.columns[1];
      v59 = v66.columns[0];
      v53 = v66.columns[3];
      v55 = v66.columns[2];
      SKCRenderer::addPerSceneDebugOverlays((SKCRenderer *)a1, (id *)v21, v66);
      v31 = (float32x4_t)v53;
      v30 = (float32x4_t)v55;
      v33 = (float32x4_t)v57;
      v32 = (float32x4_t)v59;
LABEL_19:
      SKCRenderer::doBuildRenderGroup(a1, (uint64_t)v17, 1.0, 0.0, v32, v33, v30, v31);
      ++v13;
      v16 = v63;
      if (v13 == v14)
      {
        v4 = *a2;
        return std::list<SKCAction *>::splice(v4 + 32, *(uint64_t **)(v4 + 40), a1 + 1200, *(_QWORD **)(a1 + 1208), *(_QWORD **)(a1 + 1224));
      }
    }
    v20 = *(float32x4_t **)(a1 + 16);
LABEL_12:
    v34 = v20[4];
    if (v20[14].i8[0])
    {
      v35 = vnegq_f32(v34);
      v34.f32[1] = v34.f32[1] + v34.f32[3];
      v34.i32[3] = v35.i32[3];
    }
    v36 = 0;
    v37 = *v15;
    v38 = v15[1];
    v47 = v15[2];
    v48 = v15[3];
    v39 = (simd_float4)v47;
    v39.i32[2] = -1174203793;
    v40 = vadd_f32(*(float32x2_t *)v34.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL));
    v41 = vsub_f32(v40, *(float32x2_t *)v34.f32);
    v42 = *(simd_float4 *)v15;
    v42.f32[0] = 2.0 / v41.f32[0];
    v43 = (simd_float4)v38;
    v43.f32[1] = 2.0 / v41.f32[1];
    v44 = vneg_f32(vadd_f32(*(float32x2_t *)v34.f32, v40));
    v45 = (int8x16_t)v48;
    v45.i32[2] = 0x80000000;
    *(float32x2_t *)v46.f32 = vdiv_f32(v44, v41);
    v46.i64[1] = vextq_s8(v45, v45, 8uLL).u64[0];
    v47.i32[2] = 0.5;
    v48.i32[2] = 0.5;
    v65.columns[0] = v42;
    v65.columns[1] = v43;
    v65.columns[2] = v39;
    v65.columns[3] = v46;
    do
    {
      v66.columns[v36] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v37, COERCE_FLOAT(*(_OWORD *)&v65.columns[v36])), v38, *(float32x2_t *)v65.columns[v36].f32, 1), v47, (float32x4_t)v65.columns[v36], 2), v48, (float32x4_t)v65.columns[v36], 3);
      ++v36;
    }
    while (v36 != 4);
    v49 = 0;
    v65 = v66;
    do
    {
      v66.columns[v49] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, COERCE_FLOAT(*(_OWORD *)&v65.columns[v49])), v61, *(float32x2_t *)v65.columns[v49].f32, 1), v60, (float32x4_t)v65.columns[v49], 2), v16, (float32x4_t)v65.columns[v49], 3);
      ++v49;
    }
    while (v49 != 4);
    v32 = (float32x4_t)v66.columns[0];
    v33 = (float32x4_t)v66.columns[1];
    v30 = (float32x4_t)v66.columns[2];
    v31 = (float32x4_t)v66.columns[3];
    goto LABEL_19;
  }
  return std::list<SKCAction *>::splice(v4 + 32, *(uint64_t **)(v4 + 40), a1 + 1200, *(_QWORD **)(a1 + 1208), *(_QWORD **)(a1 + 1224));
}

void sub_1DC911A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void SKCRenderer::expandRenderGroup(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  jet_command_buffer *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  id v23;
  uint64_t v24;
  id v25;
  BOOL v26;
  id v27;
  uint64_t v28;
  id v29;
  BOOL v30;
  id v31;
  uint64_t v32;
  id v33;
  BOOL v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unsigned int v39;
  float v40;
  uint64_t *i;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t *v51;
  uint64_t *v52;
  unint64_t *v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  jet_command_buffer *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  _QWORD v73[2];
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  _QWORD v78[10];
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  _OWORD v82[5];

  v3 = a2;
  v5 = *a2;
  v6 = (uint64_t **)(*a2 + 32);
  v74.i64[0] = (uint64_t)compare_node_sort;
  std::list<SKCRenderSortInfo *>::__sort<BOOL (*)(SKCRenderSortInfo *,SKCRenderSortInfo *)>(*(uint64_t ***)(v5 + 40), v6, *(_QWORD *)(v5 + 48), (unsigned int (**)(uint64_t, uint64_t))&v74);
  v79 = (uint64_t)&v79;
  v80 = &v79;
  v81 = 0;
  v7 = *v3;
  v8 = *(jet_command_buffer **)(*v3 + 80);
  if (v8)
  {
    jet_command_buffer::add_command_buffer(*(jet_command_buffer **)(a1 + 40), v8);
    v7 = *v3;
  }
  v9 = *(_QWORD *)(v7 + 40);
  v60 = v7 + 32;
  if (v9 != v7 + 32)
  {
    v62 = 0;
    v63 = a1 + 80;
    v59 = v3;
    while (1)
    {
      v61 = v9;
      v10 = *(uint64_t **)(v9 + 16);
      v11 = *v10;
      v12 = *((_OWORD *)v10 + 2);
      v13 = *((_OWORD *)v10 + 3);
      v14 = *((_OWORD *)v10 + 5);
      *(_OWORD *)(a1 + 144) = *((_OWORD *)v10 + 4);
      *(_OWORD *)(a1 + 160) = v14;
      *(_OWORD *)(a1 + 112) = v12;
      *(_OWORD *)(a1 + 128) = v13;
      *(_DWORD *)(a1 + 176) = *((_DWORD *)v10 + 24);
      v15 = (**(uint64_t (***)(uint64_t, uint64_t))v11)(v11, v63);
      if (v15)
      {
        SKCRenderer::ensureBatchBufferCapacity((SKCRenderer *)a1, v15);
        ++v62;
        if ((*(_DWORD *)(a1 + 80) + v15) > *(_DWORD *)(a1 + 84))
        {
          v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 16) + 80) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 80));
          std::shared_ptr<jet_framebuffer>::shared_ptr[abi:ne180100]<jet_framebuffer,void>(&v74, v16);
          std::vector<std::shared_ptr<jet_buffer>>::push_back[abi:ne180100]((char **)(a1 + 1232), (__int128 *)&v74);
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 80) + 248) = 0;
          SKCRenderer::flushRenderOps((SKCRenderer *)a1);
          *(_DWORD *)(a1 + 32) = 0;
          *(_DWORD *)(a1 + 80) = 0;
          v17 = v74.i64[0];
          *(_DWORD *)(v74.i64[0] + 48) = 0;
          *(_DWORD *)(v17 + 244) = 0;
          ++*(_DWORD *)(*(_QWORD *)(a1 + 744) + 168);
          v18 = *(_QWORD *)(a1 + 40);
          LODWORD(v82[0]) = 32;
          std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v18 + 8), (int *)v82);
          *(_QWORD *)(*(_QWORD *)(v18 + 16) - 80) = v17;
          SKCRenderer::ensureBuffers(a1);
          v19 = (std::__shared_weak_count *)v74.i64[1];
          if (v74.i64[1])
          {
            v20 = (unint64_t *)(v74.i64[1] + 8);
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
        }
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 8))(v11, v63))
      {
        v22 = v62;
        if (!v15)
          v22 = v62 + 1;
        v62 = v22;
        if ((*(_BYTE *)(a1 + 661) & 0x10) != 0 && *(int *)(*(_QWORD *)(a1 + 744) + 164) >= 1)
        {
          v23 = *(id *)(v11 + 8);
          if (!v23)
          {
            v24 = *(_QWORD *)(v11 + 80);
            if (v24)
            {
              do
              {
                v25 = *(id *)(v24 + 8);
                v24 = *(_QWORD *)(v24 + 80);
                if (v25)
                  v26 = 1;
                else
                  v26 = v24 == 0;
              }
              while (!v26);
              v23 = v25;
            }
          }
          NSLog(CFSTR("SKCRenderer<%p> pass:%d batch:%d BatchBreaker[CustomOps]: %@"), a1, *(unsigned int *)(*(_QWORD *)(a1 + 744) + 168), *(unsigned int *)(*(_QWORD *)(a1 + 744) + 164), v23);

        }
        SKCRenderer::flushCurrentBatch((SKCRenderer *)a1);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 72))(v11, v63, a1 + 40);
      }
      if (!v15)
        goto LABEL_56;
      if (*(int *)(a1 + 668) < 1)
        goto LABEL_40;
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v63) & 1) == 0)
        break;
LABEL_41:
      if ((*(_BYTE *)(a1 + 661) & 0x10) != 0)
      {
        v31 = *(id *)(v11 + 8);
        if (!v31)
        {
          v32 = *(_QWORD *)(v11 + 80);
          if (v32)
          {
            do
            {
              v33 = *(id *)(v32 + 8);
              v32 = *(_QWORD *)(v32 + 80);
              if (v33)
                v34 = 1;
              else
                v34 = v32 == 0;
            }
            while (!v34);
            v31 = v33;
          }
        }
        NSLog(CFSTR("SKCRenderer<%p> pass:%d batch:%d AddingNode:[%@]"), a1, *(unsigned int *)(*(_QWORD *)(a1 + 744) + 168), *(unsigned int *)(*(_QWORD *)(a1 + 744) + 164), v31);

      }
      v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, v63);
      v36 = *(void **)(a1 + 680);
      if (v36)
      {
        objc_msgSend(v36, "attributes");
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = objc_msgSend(v37, "count");

        if (v38)
          (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, v63, *(_QWORD *)(a1 + 680), v35, *(unsigned int *)(a1 + 80));
      }
      v39 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)(a1 + 668) += v35;
      *(_DWORD *)(a1 + 80) = v39 + v35;
      if ((*(_BYTE *)(a1 + 660) & 0x1E) != 0)
      {
        (*(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 24))(&v74, v11, v63);
        SKCRenderer::addPerNodeDebugOverlays((SKCRenderer *)a1, (void *)v11, (uint64_t)&v74, v39, v35);

      }
LABEL_56:
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v11 + 56))(v11, v63, &v79);
      if (v81)
      {
        SKCRenderer::flushCurrentBatch((SKCRenderer *)a1);
        v40 = *(float *)(a1 + 176);
        v67 = *(float32x4_t *)(a1 + 128);
        v68 = *(float32x4_t *)(a1 + 112);
        v65 = *(float32x4_t *)(a1 + 160);
        v66 = *(float32x4_t *)(a1 + 144);
        for (i = v80; i != &v79; i = (uint64_t *)i[1])
        {
          v43 = i[2];
          v42 = (std::__shared_weak_count *)i[3];
          v73[0] = v43;
          v73[1] = v42;
          if (v42)
          {
            p_shared_owners = (unint64_t *)&v42->__shared_owners_;
            do
              v45 = __ldxr(p_shared_owners);
            while (__stxr(v45 + 1, p_shared_owners));
          }
          v46 = 0;
          *(_QWORD *)(a1 + 1160) = v43;
          *(_DWORD *)(a1 + 1168) = 0;
          v47 = *(_BYTE *)(a1 + 656);
          *(_BYTE *)(a1 + 656) = *(_BYTE *)(v43 + 192);
          v48 = *(_OWORD *)(v43 + 144);
          v49 = *(_OWORD *)(v43 + 160);
          v50 = *(_OWORD *)(v43 + 176);
          v82[0] = *(_OWORD *)(v43 + 128);
          v82[1] = v48;
          v82[2] = v49;
          v82[3] = v50;
          do
          {
            *(float32x4_t *)((char *)&v74 + v46 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v68, COERCE_FLOAT(v82[v46])), v67, *(float32x2_t *)&v82[v46], 1), v66, (float32x4_t)v82[v46], 2), v65, (float32x4_t)v82[v46], 3);
            ++v46;
          }
          while (v46 != 4);
          v52 = *(uint64_t **)(v43 + 8);
          v51 = *(uint64_t **)(v43 + 16);
          if (v52 != v51)
          {
            v71 = v75;
            v72 = v74;
            v69 = v77;
            v70 = v76;
            do
              SKCRenderer::doBuildRenderGroup(a1, *v52++, v40, 0.0, v72, v71, v70, v69);
            while (v52 != v51);
          }
          std::list<SKCAction *>::splice(v43 + 32, *(uint64_t **)(v43 + 40), a1 + 1200, *(_QWORD **)(a1 + 1208), *(_QWORD **)(a1 + 1224));
          SKCRenderer::expandRenderGroup(a1, v73, a3);
          *(_BYTE *)(a1 + 656) = v47;
          if (v42)
          {
            v53 = (unint64_t *)&v42->__shared_owners_;
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
        }
        *(float32x4_t *)(a1 + 112) = v68;
        *(float32x4_t *)(a1 + 128) = v67;
        *(float32x4_t *)(a1 + 144) = v66;
        *(float32x4_t *)(a1 + 160) = v65;
        *(float *)(a1 + 176) = v40;
      }
      std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear(&v79);
      v9 = *(_QWORD *)(v61 + 8);
      if (v9 == v60)
      {
        v3 = v59;
        v7 = *v59;
        v55 = v62;
        goto LABEL_77;
      }
    }
    if ((*(_BYTE *)(a1 + 661) & 0x10) != 0)
    {
      v27 = *(id *)(v11 + 8);
      if (!v27)
      {
        v28 = *(_QWORD *)(v11 + 80);
        if (v28)
        {
          do
          {
            v29 = *(id *)(v28 + 8);
            v28 = *(_QWORD *)(v28 + 80);
            if (v29)
              v30 = 1;
            else
              v30 = v28 == 0;
          }
          while (!v30);
          v27 = v29;
        }
      }
      NSLog(CFSTR("SKCRenderer<%p> pass:%d batch:%d BatchBreaker: %@"), a1, *(unsigned int *)(*(_QWORD *)(a1 + 744) + 168), *(unsigned int *)(*(_QWORD *)(a1 + 744) + 164), v27);

    }
LABEL_40:
    SKCRenderer::flushCurrentBatch((SKCRenderer *)a1);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 24))(v78, v11, v63);
    SKCRenderBatch::operator=(a1 + 664, (uint64_t)v78);
    *(_DWORD *)(a1 + 668) = 0;
    goto LABEL_41;
  }
  v55 = 0;
LABEL_77:
  v56 = *(_QWORD *)(a1 + 744);
  *(_DWORD *)(v56 + 152) += *(_DWORD *)(v7 + 48);
  *(_DWORD *)(v56 + 160) += v55;
  SKCRenderer::flushCurrentBatch((SKCRenderer *)a1);
  v57 = *v3;
  v58 = *(jet_command_buffer **)(*v3 + 96);
  if (v58)
  {
    jet_command_buffer::add_command_buffer(*(jet_command_buffer **)(a1 + 40), v58);
    v57 = *v3;
  }
  std::list<SKCAction *>::splice(a1 + 1200, *(uint64_t **)(a1 + 1208), v57 + 32, *(_QWORD **)(v57 + 40), (_QWORD *)(v57 + 32));
  *(_QWORD *)(a1 + 1224) = *(_QWORD *)(a1 + 1208);
  std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear(&v79);
}

void sub_1DC9120E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear((uint64_t *)(v1 - 200));
  _Unwind_Resume(a1);
}

uint64_t SKCRenderer::getBackingContext@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 1016);
  *a2 = *(_QWORD *)(this + 1008);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

double SKCRenderer::doBuildRenderGroup(uint64_t a1, uint64_t a2, float a3, float a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  float v10;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  float ZTranslation;
  double v19;
  float v20;
  double result;
  uint64_t Info;
  uint64_t v23;
  id *v24;
  id *v25;
  id v26;
  void *v27;
  std::__shared_weak_count *v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  id v32;
  void *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _DWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  __n128 Translation;
  __n128 v43;
  __n128 v45;
  __n128 v47;
  __n128 v49;
  _OWORD v50[4];
  void *__p;
  _QWORD *v52;
  uint64_t v53;
  _OWORD v54[4];
  _OWORD v55[4];

  if (*(_BYTE *)(a2 + 280))
    return SKCNode::clearDirty((SKCNode *)a2);
  v10 = a3 * *(float *)(a2 + 324);
  if (v10 <= 0.0)
    return SKCNode::clearDirty((SKCNode *)a2);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2))
  {
    *(_QWORD *)&v54[0] = a2;
    if (*(_BYTE *)(a2 + 584))
    {
      Translation = SKCNode::getTranslation((__n128 *)a2);
      *(_QWORD *)&v55[0] = v54;
      *((float32x4_t *)_ZNSt3__16__treeINS_12__value_typeIP12SKCLightNodeDv4_fEENS_19__map_value_compareIS3_S5_NS_4lessIS3_EELb1EEENS_9allocatorIS5_EEE25__emplace_unique_key_argsIS3_JRKNS_21piecewise_construct_tENS_5tupleIJRKS3_EEENSH_IJEEEEEENS_4pairINS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 1040), (unint64_t *)v54, (uint64_t)&std::piecewise_construct, (uint64_t **)v55)+ 3) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a5, Translation.n128_f32[0]), a6, (float32x2_t)Translation.n128_u64[0], 1), a7, (float32x4_t)Translation, 2), a8, (float32x4_t)Translation, 3);
    }
  }
  __p = 0;
  v52 = 0;
  v53 = 0;
  v50[0] = a5;
  v50[1] = a6;
  v50[2] = a7;
  v50[3] = a8;
  *(double *)&v13 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  v14 = 0;
  v54[0] = v13;
  v54[1] = v15;
  v54[2] = v16;
  v54[3] = v17;
  do
  {
    v55[v14] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a5, COERCE_FLOAT(v54[v14])), a6, *(float32x2_t *)&v54[v14], 1), a7, (float32x4_t)v54[v14], 2), a8, (float32x4_t)v54[v14], 3);
    ++v14;
  }
  while (v14 != 4);
  v47 = (__n128)v55[1];
  v49 = (__n128)v55[0];
  v43 = (__n128)v55[3];
  v45 = (__n128)v55[2];
  ZTranslation = SKCNode::getZTranslation((SKCNode *)a2);
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 48))(a2, a1 + 80, &__p);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1 + 80, a1 + 56);
  v19 = SKCNode::clearDirty((SKCNode *)a2);
  v20 = a4 + ZTranslation;
  if (!*(_BYTE *)(a1 + 1001)
    || (*(unsigned int (**)(uint64_t, _OWORD *, double))(*(_QWORD *)a2 + 128))(a2, v50, v19))
  {
    Info = SKCRenderer::{unnamed type#1}::nextInfo((_QWORD *)(a1 + 1152));
    *(_QWORD *)&v54[0] = Info;
    *(_QWORD *)Info = a2;
    *(__n128 *)(Info + 32) = v49;
    *(__n128 *)(Info + 48) = v47;
    *(__n128 *)(Info + 64) = v45;
    *(__n128 *)(Info + 80) = v43;
    *(float *)(Info + 96) = a3;
    *(float *)(Info + 8) = v20;
    if (*(_BYTE *)(a1 + 1000))
    {
      v23 = *(_QWORD *)(a2 + 288) & 0xFLL;
      if (v24)
      {
        v25 = v24;
        v26 = v24[76];
        v27 = v26;
        if (v26)
        {
          objc_msgSend(v26, "_backingTexture");
          v28 = (std::__shared_weak_count *)*((_QWORD *)&v55[0] + 1);
          v29 = v55[0];
          if (*((_QWORD *)&v55[0] + 1))
          {
            v30 = (unint64_t *)(*((_QWORD *)&v55[0] + 1) + 8);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
        }
        else
        {
          v29 = 0;
          v55[0] = 0uLL;
        }

        v32 = v25[75];
        v33 = v32;
        if (v32)
        {
          objc_msgSend(v32, "_backingTexture");
          v34 = (std::__shared_weak_count *)*((_QWORD *)&v55[0] + 1);
          v35 = (*(_QWORD *)&v55[0] & 0x7FFFFLL) << 25;
          if (*((_QWORD *)&v55[0] + 1))
          {
            v36 = (unint64_t *)(*((_QWORD *)&v55[0] + 1) + 8);
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
        }
        else
        {
          v35 = 0;
          v55[0] = 0uLL;
        }

        v23 |= (32 * (*(_QWORD *)&v29 & 0x7FFFFLL)) | v35 | ((_QWORD)v25[74] << 45);
        Info = *(_QWORD *)&v54[0];
      }
    }
    else
    {
      v23 = *(unsigned int *)(a1 + 1168);
    }
    *(_QWORD *)(Info + 16) = v23;
    if (v38 && v38[141])
      std::vector<SKCRenderSortInfo *>::push_back[abi:ne180100]((void **)(a1 + 1088), v54);
    ++*(_DWORD *)(a1 + 1168);
  }
  v39 = __p;
  if (!*(_BYTE *)(a1 + 1002))
  {
    v40 = v52;
    if (v52 != __p)
    {
      do
        SKCRenderer::doBuildRenderGroup(a1, *v39++, v10, v20, v49, v47, v45, v43);
      while (v39 != v40);
      v39 = __p;
    }
  }
  if (v39)
  {
    v52 = v39;
    operator delete(v39);
  }
  return result;
}

void sub_1DC91259C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SKCRenderer::{unnamed type#1}::nextInfo(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 6;
  v3 = (_QWORD *)a1[9];
  if (v3 == a1 + 6)
  {
    v4 = operator new();
    v5 = operator new(0x18uLL);
    v5[1] = v2;
    v5[2] = v4;
    v6 = a1[6];
    *v5 = v6;
    *(_QWORD *)(v6 + 8) = v5;
    a1[6] = v5;
    ++a1[8];
  }
  else
  {
    v4 = v3[2];
    a1[9] = v3[1];
  }
  return v4;
}

void SKCRenderer::addPerSceneDebugOverlays(SKCRenderer *this, id *a2, simd_float4x4 a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  unsigned __int32 v11;
  unsigned __int32 v12;
  __n128 v13;
  void *v14;
  uint64_t *v15;
  unint64_t v16;
  jet_buffer_pool **v17;
  jet_buffer_pool *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  jet_command_buffer *v24;
  jet_command_buffer *v25;
  uint64_t v26;
  uint64_t v27;
  jet_command_buffer *v28;
  jet_command_buffer *v29;
  uint64_t current_buffer;
  jet_command_buffer *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  jet_command_buffer *v35;
  jet_command_buffer *v36;
  jet_command_buffer *v37[2];
  _GLKMatrix4 __p;
  _BYTE v39[64];
  simd_float4x4 v40;

  v40 = a3;
  objc_msgSend(*((id *)this + 159), "valueForKey:", CFSTR("debugDrawPhysics"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "BOOLValue");

  objc_msgSend(*((id *)this + 159), "valueForKey:", CFSTR("debugDrawPhysicsFields"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "BOOLValue");

  if ((v8 | v6) == 1)
  {
    v9 = a2[1];
    objc_msgSend(v9, "_pkPhysicsWorld");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    PKGet_PTM_RATIO();
    v12 = v11;
    sk_matrix_get_GLKMatrix((uint64_t)&v40, (uint64_t)&__p);
    v13 = glsk_matrix_make(&__p, (uint64_t)v39);
    v13.n128_u32[0] = v12;
    objc_msgSend(v10, "debugDraw:matrix:showsPhysics:showsOutlineInterior:showsFields:", v39, v6, 0, v8, v13.n128_f64[0]);

    objc_msgSend(v9, "_pkPhysicsWorld");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (uint64_t *)objc_msgSend(v14, "debugDrawPacket");

    v16 = (unint64_t)(v15[1] - *v15) >> 3;
    if ((_DWORD)v16)
    {
      v17 = (jet_buffer_pool **)((char *)this + 1256);
      v18 = (jet_buffer_pool *)*((_QWORD *)this + 157);
      if (!v18
        || *((_DWORD *)v18 + 4) < v16
        && (std::shared_ptr<jet_buffer_pool>::reset[abi:ne180100]((_QWORD *)this + 157), (v18 = *v17) == 0))
      {
        v19 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, unint64_t))(**((_QWORD **)this + 126) + 16))(*((_QWORD *)this + 126), 0, 4, v16);
        std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&__p, v19);
        std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)this + 1256, (__int128 *)&__p);
        std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
        v18 = *v17;
      }
      jet_buffer_pool::next_buffer(v18);
      std::vector<std::shared_ptr<jet_buffer>>::push_back[abi:ne180100]((char **)this + 97, (__int128 *)((char *)this + 1256));
      v20 = _ZN15jet_buffer_pool8get_dataIDv4_fEEPT_j(*v17, 0);
      v21 = *v15;
      if (v15[1] != *v15)
      {
        v22 = 0;
        do
        {
          *(_QWORD *)&v23 = *(_QWORD *)(v21 + 8 * v22);
          *((_QWORD *)&v23 + 1) = 0x3F80000000000000;
          *(_OWORD *)(v20 + 16 * v22++) = v23;
          v21 = *v15;
        }
        while (v22 < (v15[1] - *v15) >> 3);
      }
      jet_buffer_pool::commit_data(*v17);
      v24 = (jet_command_buffer *)operator new();
      jet_command_buffer::jet_command_buffer(v24, 0x64uLL);
      std::shared_ptr<jet_command_buffer>::shared_ptr[abi:ne180100]<jet_command_buffer,void>(v37, (uint64_t)v24);
      v25 = v37[0];
      v26 = *((_QWORD *)this + 29);
      LODWORD(__p.m00) = 31;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v37[0] + 1, (int *)&__p);
      v27 = *((_QWORD *)v25 + 2);
      *(_QWORD *)(v27 - 80) = v26;
      *(_OWORD *)(v27 - 64) = xmmword_1DC921850;
      *(_QWORD *)(v27 - 48) = 0x30000000FLL;
      v28 = v37[0];
      std::string::basic_string[abi:ne180100]<0>(&__p, "u_color");
      jet_command_buffer::set_fragment_constant_value((uint64_t)v28, (const std::string *)&__p, (__n128)xmmword_1DC923470);
      if (SHIBYTE(__p.m[5]) < 0)
        operator delete(*(void **)&__p.m00);
      v29 = v37[0];
      std::string::basic_string[abi:ne180100]<0>(&__p, "a_position");
      current_buffer = jet_buffer_pool::get_current_buffer(*v17);
      jet_command_buffer::set_vertex_buffer((uint64_t)v29, (const std::string *)&__p, current_buffer);
      if (SHIBYTE(__p.m[5]) < 0)
        operator delete(*(void **)&__p.m00);
      v31 = v37[0];
      LODWORD(__p.m00) = 3;
      std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)v37[0] + 1, (int *)&__p);
      v32 = *((_QWORD *)v31 + 2);
      *(_QWORD *)(v32 - 64) = 1;
      *(_DWORD *)(v32 - 56) = v16;
      v33 = *((_QWORD *)this + 145);
      v36 = *(jet_command_buffer **)(v33 + 96);
      v34 = (_QWORD *)(v33 + 96);
      v35 = v36;
      if (v36)
        jet_command_buffer::add_command_buffer(v35, v37[0]);
      else
        std::shared_ptr<jet_texture>::operator=[abi:ne180100](v34, (uint64_t *)v37);
      std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)v37);
    }

  }
}

void sub_1DC912998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

SKTexture *SKCRenderer::textureFromNode(SKCRenderer *this, char **a2, float a3, NSDictionary *a4)
{
  NSDictionary *v7;
  NSDictionary *v8;
  void *v9;
  NSString *v10;
  float64x2_t v11;
  float64x2_t v12;
  float32x4_t AABB;
  void *v14;
  int v15;
  simd_float4 v16;
  simd_float4 v17;
  simd_float4 v18;
  simd_float4 v19;
  simd_float4 v20;
  simd_float4 v21;
  simd_float4 v22;
  __int32 v23;
  unsigned int v24;
  __int32 v25;
  unsigned int v26;
  void *v27;
  void *v28;
  void *v29;
  unsigned int v30;
  BOOL v32;
  SKTexture *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  uint64_t texture_2d;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  int8x16_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  uint64_t v59;
  SKTexture *v60;
  double v61;
  double v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  __int128 v81;
  CGFloat y;
  CGFloat x;
  int8x16_t v84;
  CGFloat width;
  int8x16_t v86;
  simd_float4 v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  _QWORD *v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  simd_float4x4 v94;
  CGRect v95;

  v7 = a4;
  v8 = v7;
  if (v7
    && (-[NSDictionary valueForKey:](v7, "valueForKey:", CFSTR("textureFromNodeCropRect")),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v9,
        v9))
  {
    -[NSDictionary valueForKey:](v8, "valueForKey:", CFSTR("textureFromNodeCropRect"));
    v10 = (NSString *)objc_claimAutoreleasedReturnValue();
    v95 = CGRectFromString(v10);
    y = v95.origin.y;
    x = v95.origin.x;
    width = v95.size.width;
    v81 = *(_OWORD *)&v95.size.height;

    v11.f64[0] = width;
    *(_QWORD *)&v11.f64[1] = v81;
    v12.f64[0] = x;
    v12.f64[1] = y;
    AABB = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v11);
  }
  else if (a2
  {
    *(double *)v16.i64 = (*((double (**)(char **))*a2 + 15))(a2);
    v94.columns[0] = v16;
    v94.columns[1] = v17;
    v94.columns[2] = v18;
    v94.columns[3] = v19;
    AABB = SKCBoundingBoxGetAABB(&v94);
  }
  else
  {
    v94.columns[0] = (simd_float4)SKCNode::getAccumulatedBoundingBox(a2);
    v94.columns[1] = v20;
    v94.columns[2] = v21;
    v94.columns[3] = v22;
    AABB = SKCBoundingBoxGetAABB(&v94);
  }
  v23 = AABB.i32[2];
  v24 = (float)(ceilf(AABB.f32[2]) * a3);
  v86 = (int8x16_t)AABB;
  v25 = AABB.i32[3];
  v26 = (float)(ceilf(AABB.f32[3]) * a3);
  if (v8)
  {
    -[NSDictionary valueForKey:](v8, "valueForKey:", CFSTR("textureMaxRenderSize"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    if (v27)
    {
      -[NSDictionary valueForKey:](v8, "valueForKey:", CFSTR("textureMaxRenderSize"));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = v28;
      if (v28)
      {
        v30 = objc_msgSend(v28, "unsignedIntegerValue");
        if (v24 > v30 || v26 > v30)
        {
          if (v24 <= v26)
          {
            if (v26 <= v24)
              v24 = v30;
            else
              v24 = (float)((float)((float)v24 / (float)v26) * (float)v30);
            v26 = v30;
          }
          else
          {
            v26 = (float)((float)((float)v26 / (float)v24) * (float)v30);
            v24 = v30;
          }
        }
      }

    }
  }
  if (v24)
    v32 = v26 == 0;
  else
    v32 = 1;
  if (v32)
  {
    v33 = 0;
  }
  else
  {
    v34 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
    v92 = *((_QWORD *)this + 126);
    v93 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(p_shared_owners);
      while (__stxr(v36 + 1, p_shared_owners));
    }
    texture_2d = jet_context::create_texture_2d();
    std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v94, texture_2d);
    if (v34)
    {
      v38 = (unint64_t *)&v34->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v40 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
    v90 = (_QWORD *)*((_QWORD *)this + 126);
    v91 = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = jet_context::create_texture_2d();
    std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v92, v43);
    if (v40)
    {
      v44 = (unint64_t *)&v40->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v46 = *((_QWORD *)this + 126);
    v47 = (std::__shared_weak_count *)*((_QWORD *)this + 127);
    v88 = v46;
    v89 = v47;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 112))(v46);
    std::shared_ptr<jet_framebuffer>::shared_ptr[abi:ne180100]<jet_framebuffer,void>(&v90, v50);
    v51.i64[0] = 0;
    v51.i64[1] = __PAIR64__(v26, v24);
    if (v47)
    {
      v52 = (unint64_t *)&v47->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        v84 = v51;
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
        v51 = v84;
      }
    }
    v54 = v90;
    v55 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 32);
    v56 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 48);
    v57 = *(__n128 *)MEMORY[0x1E0C83FF0];
    v58 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 16);
    v90[2] = v94.columns[0].i64[0];
    v59 = v92;
    v54[26] = v92;
    v54[29] = v59;
    v54[4] = 0;
    v54[5] = 0;
    SKCRenderer::render((uint64_t)this, a2, (unint64_t *)&v90, 0, v8, 0, 0, 0, &v88, v86, v51, v57, v58, v55, v56, 0.0);
    if (v88)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
      v60 = [SKTexture alloc];
      v87 = v94.columns[0];
      if (v94.columns[0].i64[1])
      {
        v63 = (unint64_t *)(v94.columns[0].i64[1] + 8);
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      LODWORD(v61) = v23;
      LODWORD(v62) = v25;
      v33 = -[SKTexture initWithBackingTetxure:logicalWidth:height:](v60, "initWithBackingTetxure:logicalWidth:height:", &v87, v61, v62, v81);
      v65 = (std::__shared_weak_count *)v87.i64[1];
      if (v87.i64[1])
      {
        v66 = (unint64_t *)(v87.i64[1] + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      -[SKTexture setIsData:](v33, "setIsData:", 1);
    }
    else
    {
      v33 = 0;
    }
    v68 = v89;
    if (v89)
    {
      v69 = (unint64_t *)&v89->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    v71 = v91;
    if (v91)
    {
      v72 = (unint64_t *)&v91->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    v74 = v93;
    if (v93)
    {
      v75 = (unint64_t *)&v93->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v77 = (std::__shared_weak_count *)v94.columns[0].i64[1];
    if (v94.columns[0].i64[1])
    {
      v78 = (unint64_t *)(v94.columns[0].i64[1] + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
  }

  return v33;
}

void sub_1DC912FE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

unint64_t _ZN15jet_buffer_pool8get_dataIDv4_fEEPT_j(jet_buffer_pool *a1, unsigned int a2)
{
  uint64_t data;
  unsigned int v5;
  int v6;

  data = jet_buffer_pool::get_data(a1);
  v5 = *((_DWORD *)a1 + 2) - 1;
  if (v5 > 7)
    v6 = 4;
  else
    v6 = dword_1DC923EDC[v5];
  return data + (*((_DWORD *)a1 + 3) * v6) * (unint64_t)a2;
}

BOOL compare_node_sort(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;

  v2 = *(float *)(a1 + 8);
  v3 = *(float *)(a2 + 8);
  if ((COERCE_UNSIGNED_INT(v2 - v3) & 0x60000000) != 0)
    return v2 < v3;
  else
    return *(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16);
}

uint64_t SKCRenderer::ensureBatchBufferCapacity(SKCRenderer *this, int a2)
{
  unsigned int v2;
  unsigned int v3;
  double v5;
  unsigned int v6;

  v2 = *((_DWORD *)this + 21);
  v3 = *((_DWORD *)this + 20) + a2;
  if (v3 >= v2)
  {
    if (v3 > 0xAAA8)
      return 0;
    v5 = (double)v3 * 1.5;
    v6 = 2 * v2;
    if (v5 < (double)v6)
      v5 = (double)v6;
    if (v5 > 43688.0)
      v5 = 43688.0;
    SKCRenderer::resizeBatchBufferCapacity(this, v5);
  }
  return 1;
}

uint64_t SKCRenderBatch::operator=(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  objc_storeStrong((id *)(a1 + 16), *(id *)(a2 + 16));
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);

  return a1;
}

void SKCRenderer::~SKCRenderer(SKCRenderer *this)
{
  _QWORD *i;
  uint64_t v3;
  _QWORD *j;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void **v9;

  while (dispatch_semaphore_signal(*(dispatch_semaphore_t *)this))
    ;
  for (i = (_QWORD *)*((_QWORD *)this + 151); i != (_QWORD *)((char *)this + 1200); i = (_QWORD *)i[1])
  {
    v3 = i[2];
    if (v3)
      MEMORY[0x1DF0CF560](v3, 0x1020C40601E13ABLL);
  }
  std::__list_imp<SKCRenderSortInfo *>::clear((_QWORD *)this + 150);
  for (j = (_QWORD *)*((_QWORD *)this + 148); j != (_QWORD *)((char *)this + 1176); j = (_QWORD *)j[1])
  {
    v5 = j[2];
    if (v5)
      MEMORY[0x1DF0CF560](v5, 0x1020C40601E13ABLL);
  }
  std::__list_imp<SKCRenderSortInfo *>::clear((_QWORD *)this + 147);
  v6 = *((_QWORD *)this + 143);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6);
  v7 = *((_QWORD *)this + 142);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7);

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 1256);
  v9 = (void **)((char *)this + 1232);
  std::vector<std::shared_ptr<PKCField>>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::__list_imp<SKCRenderSortInfo *>::clear((_QWORD *)this + 150);
  std::__list_imp<SKCRenderSortInfo *>::clear((_QWORD *)this + 147);
  std::__tree<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::__map_value_compare<SKCLightNode *,std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::less<SKCLightNode *>,true>,std::allocator<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>>>::destroy((uint64_t)this + 1112, *((_QWORD **)this + 140));
  v8 = (void *)*((_QWORD *)this + 136);
  if (v8)
  {
    *((_QWORD *)this + 137) = v8;
    operator delete(v8);
  }
  std::__tree<std::__value_type<unsigned int,SKCLightMaskUniforms>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SKCLightMaskUniforms>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SKCLightMaskUniforms>>>::destroy((uint64_t)this + 1064, *((_QWORD **)this + 134));
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy((uint64_t)this + 1040, *((_QWORD **)this + 131));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 1024);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 1008);

  SKCStats::~SKCStats((SKCStats *)((char *)this + 808));
  SKCRenderInfo::~SKCRenderInfo((id *)this + 10);
  std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear((uint64_t *)this + 7);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);

}

void SKCRenderInfo::~SKCRenderInfo(id *this)
{
  void **v2;

  v2 = this + 87;
  std::vector<std::shared_ptr<PKCField>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 84;
  std::vector<std::shared_ptr<PKCField>>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 70));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 68));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 66));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 64));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 62));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 60));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 58));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 56));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 54));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 52));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 50));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 48));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 46));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 44));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 35));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 33));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 31));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 29));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 27));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 25));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 23));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 21));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 19));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 17));
}

_QWORD *std::shared_ptr<jet_context>::shared_ptr[abi:ne180100]<jet_context,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1EA501088;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DC913510(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 128))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_context *,std::shared_ptr<jet_context>::__shared_ptr_default_delete<jet_context,jet_context>,std::allocator<jet_context>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

uint64_t std::__shared_ptr_pointer<jet_context *,std::shared_ptr<jet_context>::__shared_ptr_default_delete<jet_context,jet_context>,std::allocator<jet_context>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_context *,std::shared_ptr<jet_context>::__shared_ptr_default_delete<jet_context,jet_context>,std::allocator<jet_context>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<jet_context>::shared_ptr[abi:ne180100]<jet_context_OpenGL,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1EA501100;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DC913608(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 128))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_context_OpenGL *,std::shared_ptr<jet_context>::__shared_ptr_default_delete<jet_context,jet_context_OpenGL>,std::allocator<jet_context_OpenGL>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

uint64_t std::__shared_ptr_pointer<jet_context_OpenGL *,std::shared_ptr<jet_context>::__shared_ptr_default_delete<jet_context,jet_context_OpenGL>,std::allocator<jet_context_OpenGL>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_context_OpenGL *,std::shared_ptr<jet_context>::__shared_ptr_default_delete<jet_context,jet_context_OpenGL>,std::allocator<jet_context_OpenGL>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__tree<std::__value_type<unsigned int,SKCLightMaskUniforms>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SKCLightMaskUniforms>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SKCLightMaskUniforms>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,SKCLightMaskUniforms>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SKCLightMaskUniforms>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SKCLightMaskUniforms>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,SKCLightMaskUniforms>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SKCLightMaskUniforms>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SKCLightMaskUniforms>>>::destroy(a1, a2[1]);
    std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 16));
    std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 14));
    std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 12));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::__map_value_compare<SKCLightNode *,std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::less<SKCLightNode *>,true>,std::allocator<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::__map_value_compare<SKCLightNode *,std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::less<SKCLightNode *>,true>,std::allocator<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::__map_value_compare<SKCLightNode *,std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::less<SKCLightNode *>,true>,std::allocator<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>>>::destroy(a1, a2[1]);
    std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

_QWORD *std::shared_ptr<jet_sampler>::shared_ptr[abi:ne180100]<jet_sampler,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1EA501168;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DC9137A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_sampler *,std::shared_ptr<jet_sampler>::__shared_ptr_default_delete<jet_sampler,jet_sampler>,std::allocator<jet_sampler>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

uint64_t std::__shared_ptr_pointer<jet_sampler *,std::shared_ptr<jet_sampler>::__shared_ptr_default_delete<jet_sampler,jet_sampler>,std::allocator<jet_sampler>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_sampler *,std::shared_ptr<jet_sampler>::__shared_ptr_default_delete<jet_sampler,jet_sampler>,std::allocator<jet_sampler>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<jet_stencil_mode>::shared_ptr[abi:ne180100]<jet_stencil_mode,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1EA5011E0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DC913898(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_stencil_mode *,std::shared_ptr<jet_stencil_mode>::__shared_ptr_default_delete<jet_stencil_mode,jet_stencil_mode>,std::allocator<jet_stencil_mode>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

uint64_t std::__shared_ptr_pointer<jet_stencil_mode *,std::shared_ptr<jet_stencil_mode>::__shared_ptr_default_delete<jet_stencil_mode,jet_stencil_mode>,std::allocator<jet_stencil_mode>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_stencil_mode *,std::shared_ptr<jet_stencil_mode>::__shared_ptr_default_delete<jet_stencil_mode,jet_stencil_mode>,std::allocator<jet_stencil_mode>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<jet_depth_stencil_mode>::shared_ptr[abi:ne180100]<jet_depth_stencil_mode,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1EA501258;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DC913990(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_depth_stencil_mode *,std::shared_ptr<jet_depth_stencil_mode>::__shared_ptr_default_delete<jet_depth_stencil_mode,jet_depth_stencil_mode>,std::allocator<jet_depth_stencil_mode>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

uint64_t std::__shared_ptr_pointer<jet_depth_stencil_mode *,std::shared_ptr<jet_depth_stencil_mode>::__shared_ptr_default_delete<jet_depth_stencil_mode,jet_depth_stencil_mode>,std::allocator<jet_depth_stencil_mode>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_depth_stencil_mode *,std::shared_ptr<jet_depth_stencil_mode>::__shared_ptr_default_delete<jet_depth_stencil_mode,jet_depth_stencil_mode>,std::allocator<jet_depth_stencil_mode>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<jet_constant>::shared_ptr[abi:ne180100]<jet_constant,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1EA5012D0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DC913A88(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 112))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_constant *,std::shared_ptr<jet_constant>::__shared_ptr_default_delete<jet_constant,jet_constant>,std::allocator<jet_constant>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

uint64_t std::__shared_ptr_pointer<jet_constant *,std::shared_ptr<jet_constant>::__shared_ptr_default_delete<jet_constant,jet_constant>,std::allocator<jet_constant>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_constant *,std::shared_ptr<jet_constant>::__shared_ptr_default_delete<jet_constant,jet_constant>,std::allocator<jet_constant>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t **std::__tree<std::__value_type<unsigned int,SKCLightMaskUniforms>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SKCLightMaskUniforms>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SKCLightMaskUniforms>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x90uLL);
    v11[8] = **a4;
    *((_OWORD *)v11 + 7) = 0u;
    *((_OWORD *)v11 + 8) = 0u;
    *((_OWORD *)v11 + 5) = 0u;
    *((_OWORD *)v11 + 6) = 0u;
    *((_OWORD *)v11 + 3) = 0u;
    *((_OWORD *)v11 + 4) = 0u;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t _ZNSt3__110__function6__funcIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNS_10shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSG_dU13block_pointerFvvEE3__0NS_9allocatorISJ_EESH_ED1Ev(uint64_t a1)
{

  return a1;
}

void _ZNSt3__110__function6__funcIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNS_10shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSG_dU13block_pointerFvvEE3__0NS_9allocatorISJ_EESH_ED0Ev(uint64_t a1)
{

  JUMPOUT(0x1DF0CF560);
}

_QWORD *_ZNKSt3__110__function6__funcIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNS_10shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSG_dU13block_pointerFvvEE3__0NS_9allocatorISJ_EESH_E7__cloneEv(uint64_t a1)
{
  _QWORD *v2;

  v2 = operator new(0x10uLL);
  *v2 = &off_1EA501348;
  v2[1] = MEMORY[0x1DF0CFCB0](*(_QWORD *)(a1 + 8));
  return v2;
}

uint64_t _ZNKSt3__110__function6__funcIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNS_10shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSG_dU13block_pointerFvvEE3__0NS_9allocatorISJ_EESH_E7__cloneEPNS0_6__baseISH_EE(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_1EA501348;
  result = MEMORY[0x1DF0CFCB0](*(_QWORD *)(a1 + 8));
  a2[1] = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNS_10shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSG_dU13block_pointerFvvEE3__0NS_9allocatorISJ_EESH_E7destroyEv(uint64_t a1)
{

}

void _ZNSt3__110__function6__funcIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNS_10shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSG_dU13block_pointerFvvEE3__0NS_9allocatorISJ_EESH_E18destroy_deallocateEv(id *a1)
{

  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNS_10shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSG_dU13block_pointerFvvEE3__0NS_9allocatorISJ_EESH_EclEv(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 8) + 16))();
}

uint64_t _ZNKSt3__110__function6__funcIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNS_10shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSG_dU13block_pointerFvvEE3__0NS_9allocatorISJ_EESH_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNSt3__110shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSE_dU13block_pointerFvvEE3__0))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNS_10shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSG_dU13block_pointerFvvEE3__0NS_9allocatorISJ_EESH_E11target_typeEv()
{
  return &_ZTIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNSt3__110shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSE_dU13block_pointerFvvEE3__0;
}

uint64_t *std::__tree<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::__map_value_compare<SKCLightNode *,std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::less<SKCLightNode *>,true>,std::allocator<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>>>::__emplace_unique_key_args<SKCLightNode *,std::piecewise_construct_t const&,std::tuple<SKCLightNode * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x38uLL);
    v14[1] = v7;
    v12[4] = **a4;
    v12[5] = 0;
    v12[6] = 0;
    v15 = 1;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 40);
    operator delete(v2);
  }
}

_QWORD *std::shared_ptr<std::vector<SKCRenderSortInfo *>>::shared_ptr[abi:ne180100]<std::vector<SKCRenderSortInfo *>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1EA5013D8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1DC913ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<std::vector<SKCRenderSortInfo *>>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::vector<SKCRenderSortInfo *> *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>::__shared_ptr_default_delete<std::vector<SKCRenderSortInfo *>,std::vector<SKCRenderSortInfo *>>,std::allocator<std::vector<SKCRenderSortInfo *>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1DF0CF560);
}

void std::__shared_ptr_pointer<std::vector<SKCRenderSortInfo *> *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>::__shared_ptr_default_delete<std::vector<SKCRenderSortInfo *>,std::vector<SKCRenderSortInfo *>>,std::allocator<std::vector<SKCRenderSortInfo *>>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<std::vector<SKCRenderSortInfo *>>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<std::vector<SKCRenderSortInfo *> *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>::__shared_ptr_default_delete<std::vector<SKCRenderSortInfo *>,std::vector<SKCRenderSortInfo *>>,std::allocator<std::vector<SKCRenderSortInfo *>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<std::vector<SKCRenderSortInfo *>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1DF0CF560);
  }
}

uint64_t *_ZNSt3__16__treeINS_12__value_typeIP12SKCLightNodeDv4_fEENS_19__map_value_compareIS3_S5_NS_4lessIS3_EELb1EEENS_9allocatorIS5_EEE25__emplace_unique_key_argsIS3_JRKNS_21piecewise_construct_tENS_5tupleIJRKS3_EEENSH_IJEEEEEENS_4pairINS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEElEEbEERKT_DpOT0_(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v11[4] = **a4;
    v11[6] = 0;
    v11[7] = 0;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *std::list<SKCRenderSortInfo *>::__sort<BOOL (*)(SKCRenderSortInfo *,SKCRenderSortInfo *)>(uint64_t **a1, uint64_t **a2, unint64_t a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  uint64_t **v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *i;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *j;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;

  v4 = a1;
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v7 = *a2;
      if ((*a4)((*a2)[2], (uint64_t)a1[2]))
      {
        v8 = *v7;
        *(_QWORD *)(v8 + 8) = v7[1];
        *(_QWORD *)v7[1] = v8;
        v9 = *v4;
        v9[1] = (uint64_t)v7;
        *v7 = (uint64_t)v9;
        *v4 = v7;
        v7[1] = (uint64_t)v4;
        return v7;
      }
    }
    else
    {
      v11 = a3 >> 1;
      v12 = (a3 >> 1) + 1;
      v13 = a1;
      do
      {
        v13 = (uint64_t **)v13[1];
        --v12;
      }
      while (v12 > 1);
      v14 = (uint64_t **)std::list<SKCRenderSortInfo *>::__sort<BOOL (*)(SKCRenderSortInfo *,SKCRenderSortInfo *)>(a1, v13, a3 >> 1, a4);
      v4 = (uint64_t **)std::list<SKCRenderSortInfo *>::__sort<BOOL (*)(SKCRenderSortInfo *,SKCRenderSortInfo *)>(v13, a2, a3 - v11, a4);
      if ((*a4)((uint64_t)v4[2], (uint64_t)v14[2]))
      {
        for (i = v4[1]; i != (uint64_t *)a2; i = (uint64_t *)i[1])
        {
          if (!(*a4)(i[2], (uint64_t)v14[2]))
            goto LABEL_14;
        }
        i = (uint64_t *)a2;
LABEL_14:
        v17 = *i;
        v18 = *v4;
        v18[1] = *(_QWORD *)(*i + 8);
        **(_QWORD **)(v17 + 8) = v18;
        v19 = *v14;
        v16 = v14[1];
        v19[1] = (uint64_t)v4;
        *v4 = v19;
        *v14 = (uint64_t *)v17;
        *(_QWORD *)(v17 + 8) = v14;
      }
      else
      {
        v16 = v14[1];
        i = (uint64_t *)v4;
        v4 = v14;
      }
      if (v16 != i && i != (uint64_t *)a2)
      {
        v20 = i;
        do
        {
          if ((*a4)(i[2], v16[2]))
          {
            for (j = (uint64_t *)i[1]; j != (uint64_t *)a2; j = (uint64_t *)j[1])
            {
              if (!(*a4)(j[2], v16[2]))
                goto LABEL_25;
            }
            j = (uint64_t *)a2;
LABEL_25:
            v23 = *j;
            v24 = *i;
            *(_QWORD *)(v24 + 8) = *(_QWORD *)(*j + 8);
            **(_QWORD **)(v23 + 8) = v24;
            if (v20 == i)
              v20 = j;
            v25 = *v16;
            v22 = (uint64_t *)v16[1];
            *(_QWORD *)(v25 + 8) = i;
            *i = v25;
            *v16 = v23;
            *(_QWORD *)(v23 + 8) = v16;
            i = j;
          }
          else
          {
            v22 = (uint64_t *)v16[1];
          }
          v26 = v22 == v20 || i == (uint64_t *)a2;
          v16 = v22;
        }
        while (!v26);
      }
    }
  }
  return (uint64_t *)v4;
}

BOOL SKGenerateNormalMapWithMultiSampling(int a1, int a2, unsigned int *a3, unint64_t a4, double a5, double a6)
{
  uint64_t v11;
  void *v12;
  uint64_t v13;
  CGColorSpace *DeviceRGB;
  uint64_t v15;
  void *v16;
  double v17;
  void *v18;
  void *v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  CGImage *v30;
  CGDataProvider *DataProvider;
  const __CFData *v32;
  const UInt8 *BytePtr;
  void *v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  float v41;
  float v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  void *v54;
  unsigned int *v55;
  double v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  size_t size;
  double v67;
  double v68;

  if (a4 >= 4)
    v11 = 4;
  else
    v11 = a4;
  if (!v11)
    return SKGenerateNormalMap(a1, a2, a3, a5, a6);
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    size = 4 * a1 * a2;
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", a3);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    v54 = v12;
    v55 = a3;
    SKGenerateNormalMap(a1, a2, a3, a5, a6);
    v13 = 0;
    v62 = 4 * a1;
    v67 = (double)a2;
    v68 = (double)a1;
    v61 = *MEMORY[0x1E0C9E070];
    v60 = *MEMORY[0x1E0C9E1F8];
    v59 = *MEMORY[0x1E0C9E298];
    v56 = a6 + a6;
    v57 = a1;
    v58 = a2;
    v64 = a2 * (uint64_t)a1;
    do
    {
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      objc_msgSend(MEMORY[0x1E0C9DDC8], "imageWithBitmapData:bytesPerRow:size:format:colorSpace:", v63, v62, v61, DeviceRGB, v68, v67);
      v15 = objc_claimAutoreleasedReturnValue();
      CGColorSpaceRelease(DeviceRGB);
      v16 = (void *)MEMORY[0x1E0C9DDB8];
      ++v13;
      *(float *)&v17 = (float)(int)v13 + (float)(int)v13;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v65 = (void *)v15;
      objc_msgSend(v16, "filterWithName:keysAndValues:", CFSTR("CIGaussianBlur"), v60, v15, CFSTR("inputRadius"), v18, 0);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v19, "valueForKey:", v59);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "extent");
      v22 = v21;
      v24 = v23;
      v26 = v25;
      v28 = v27;
      objc_msgSend(MEMORY[0x1E0C9DD90], "contextWithOptions:", 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = (CGImage *)objc_msgSend(v29, "createCGImage:fromRect:", v20, v22 + (v26 - v68) * 0.5, v24 + (v28 - v67) * 0.5);
      DataProvider = CGImageGetDataProvider(v30);
      v32 = CGDataProviderCopyData(DataProvider);
      BytePtr = CFDataGetBytePtr(v32);
      v34 = malloc_type_malloc(size, 0xC1D1C082uLL);
      memcpy(v34, BytePtr, size);
      SKGenerateNormalMap(v57, v58, (unsigned int *)v34, a5, v56 * (double)(int)v13);
      if (v64)
      {
        v39 = v64;
        v40 = v55;
        do
        {
          LOBYTE(v35) = *((_BYTE *)v40 + 3);
          v35 = (float)LODWORD(v35) * 0.0039216;
          LOBYTE(v36) = BytePtr[3];
          v36 = (float)LODWORD(v36) * 0.0039216;
          v41 = fminf(v35, v36);
          if (v41 != 0.0)
          {
            v42 = v35 + (float)((float)(1.0 - v35) * v41);
            if (v42 != 0.0)
            {
              v43 = 0;
              v44 = v41 / v42;
              v45 = 1.0 - v44;
              do
              {
                LOBYTE(v37) = *((_BYTE *)v40 + v43);
                LOBYTE(v38) = BytePtr[v43];
                v46 = (float)(v45 * (float)((float)((float)LODWORD(v37) / v35) * 0.0039216))
                    + (float)((float)((float)((float)((float)LODWORD(v37) / v35) * 0.0039216)
                                    * (float)((float)((float)((float)LODWORD(v37) / v35) * 0.0039216)
                                            + (float)((float)((float)((float)((float)v38 / v36) * 0.0039216)
                                                            + (float)((float)((float)v38 / v36) * 0.0039216))
                                                    * (float)(1.0
                                                            - (float)((float)((float)LODWORD(v37) / v35) * 0.0039216)))))
                            * v44);
                v38 = 1132396544;
                v37 = v46 * 255.0;
                *((_BYTE *)v40 + v43++) = (int)v37;
              }
              while (v43 != 3);
              LOBYTE(v36) = *(_BYTE *)v40;
              v36 = (float)((float)((float)LODWORD(v36) * 0.0039216) + -0.5)
                  + (float)((float)((float)LODWORD(v36) * 0.0039216) + -0.5);
              LOBYTE(v44) = *((_BYTE *)v40 + 1);
              v47 = (float)((float)((float)LODWORD(v44) * 0.0039216) + -0.5)
                  + (float)((float)((float)LODWORD(v44) * 0.0039216) + -0.5);
              LOBYTE(v45) = *((_BYTE *)v40 + 2);
              v48 = (float)((float)((float)LODWORD(v45) * 0.0039216) + -0.5)
                  + (float)((float)((float)LODWORD(v45) * 0.0039216) + -0.5);
              v37 = sqrtf((float)((float)(v47 * v47) + (float)(v36 * v36)) + (float)(v48 * v48));
              if (v37 <= 0.0001)
              {
                *((_BYTE *)v40 + 2) = 0;
                *(_WORD *)v40 = 0;
              }
              else
              {
                v49 = 1.0 / v37;
                v50 = v47 * v49;
                v51 = v48 * v49;
                v52 = v35 * (float)((float)(v36 * v49) + 1.0);
                v37 = 127.5;
                *(_BYTE *)v40 = (int)(float)(v52 * 127.5);
                *((_BYTE *)v40 + 1) = (int)(float)((float)(v35 * (float)(v50 + 1.0)) * 127.5);
                v36 = v51 + 1.0;
                v35 = (float)(v35 * (float)(v51 + 1.0)) * 127.5;
                *((_BYTE *)v40 + 2) = (int)v35;
              }
            }
          }
          ++v40;
          BytePtr += 4;
          --v39;
        }
        while (v39);
      }
      free(v34);
      CGImageRelease(v30);
      CFRelease(v32);

    }
    while (v13 != v11);

    v12 = v54;
  }

  return 1;
}

void sub_1DC914700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{

  _Unwind_Resume(a1);
}

BOOL SKGenerateNormalMap(int a1, int a2, unsigned int *a3, double a4, double a5)
{
  float *v10;
  float *v11;
  float v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  unsigned int *v18;
  uint64_t v19;
  float *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  float v24;
  int v25;
  float v26;
  int v27;
  int v28;
  uint64_t v29;
  float v30;
  float *v31;
  float v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  float v39;
  float *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  float v48;
  float v49;
  float v50;

  v10 = (float *)malloc_type_malloc(4 * a2 * a1, 0x100004052888210uLL);
  v11 = v10;
  if (v10)
  {
    v12 = a4;
    v13 = (unint64_t)(fminf(fmaxf(v12, 0.0), 1.0) * 5.0);
    if (v13 >= 4)
      v13 = 4;
    v14 = a2 - 1;
    if (a2 >= 1)
    {
      v15 = 0;
      v16 = gNormalFilterInfo[325 * v13];
      v17 = v10;
      v18 = a3;
      do
      {
        v19 = a1;
        v20 = v17;
        v21 = a1 - 1;
        if (a1 >= 1)
        {
          do
          {
            v23 = *v18++;
            v22 = v23;
            v24 = 0.0;
            v25 = HIBYTE(v23);
            if (HIBYTE(v23))
            {
              v26 = 255.0 / (double)v25;
              v24 = fminf(fmaxf((float)((float)((float)((float)((float)BYTE1(v22) * 0.59)+ (float)((float)v22 * 0.3))+ (float)((float)BYTE2(v22) * 0.11))* v26)* 0.0039216, 0.0), 1.0);
            }
            *v20++ = v24;
            --v19;
          }
          while (v19);
        }
        ++v15;
        v17 += a1;
      }
      while (v15 != a2);
      v27 = 0;
      do
      {
        if (a1 >= 1)
        {
          v28 = 0;
          do
          {
            if ((_DWORD)v16)
            {
              v29 = 0;
              v30 = 0.0;
              v31 = (float *)&gNormalFilterInfo[325 * v13 + 1];
              v32 = 0.0;
              do
              {
                v33 = v28 + *(char *)v31;
                v34 = v27 + *((char *)v31 + 1);
                if (v33 >= v21)
                  v35 = a1 - 1;
                else
                  v35 = v28 + *(char *)v31;
                if (v33 >= 0)
                  v36 = v35;
                else
                  v36 = 0;
                if (v34 >= v14)
                  v37 = a2 - 1;
                else
                  v37 = v27 + *((char *)v31 + 1);
                if (v34 >= 0)
                  v38 = v37;
                else
                  v38 = 0;
                v39 = v11[v36 + v38 * a1];
                v40 = (float *)&gNormalFilterInfo[325 * v13 + 2 * (v16 + v29)];
                v41 = v28 + *((char *)v40 + 4);
                v42 = v27 + *((char *)v40 + 5);
                if (v41 >= v21)
                  v43 = a1 - 1;
                else
                  v43 = v28 + *((char *)v40 + 4);
                if (v41 >= 0)
                  v44 = v43;
                else
                  v44 = 0;
                if (v42 >= v14)
                  v45 = a2 - 1;
                else
                  v45 = v27 + *((char *)v40 + 5);
                if (v42 >= 0)
                  v46 = v45;
                else
                  v46 = 0;
                v32 = v32 + (float)(v39 * v31[1]);
                v30 = v30 + (float)(v11[v44 + v46 * a1] * v40[2]);
                ++v29;
                v31 += 2;
              }
              while (v16 != v29);
            }
            else
            {
              v32 = 0.0;
              v30 = 0.0;
            }
            v47 = *a3 & 0xFF000000;
            v48 = (float)-v32 * a5;
            v49 = (float)-v30 * a5;
            v50 = sqrtf((float)((float)(v49 * v49) + (float)(v48 * v48)) + 1.0);
            if (v50 > 0.0001)
              v47 |= (float)((float)((float)((float)((float)((float)HIBYTE(*a3) * 0.0039216) / v50) * v48)
                                                 + 1.0)
                                         * 127.5) | ((float)((float)((float)((float)((float)HIBYTE(*a3)
                                                                                                 * 0.0039216)
                                                                                         / v50)
                                                                                 + 1.0)
                                                                         * 127.5) << 16) | ((float)((float)((float)((float)((float)((float)HIBYTE(*a3) * 0.0039216) / v50) * v49) + 1.0) * 127.5) << 8);
            *a3++ = v47;
            ++v28;
          }
          while (v28 != a1);
        }
        ++v27;
      }
      while (v27 != a2);
    }
    free(v11);
  }
  return v11 != 0;
}

void sub_1DC914B7C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x1DF0CF560](v2, 0x1081C40983EBE18);

  _Unwind_Resume(a1);
}

void sub_1DC914E0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC915028(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC9150B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC91514C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void SKCFalloff::SKCFalloff(SKCFalloff *this, SKCAction *a2)
{
  uint64_t v3;

  SKCAction::SKCAction((SKCAction *)this);
  *(_QWORD *)v3 = &off_1EA501450;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(_QWORD *)(v3 + 56) = *(_QWORD *)&a2->var8;
  *(_QWORD *)(v3 + 88) = a2->var14;
  *(_BYTE *)(v3 + 32) = 1;
}

void SKCFalloff::~SKCFalloff(SKCFalloff *this)
{
  SKCAction::~SKCAction((SKCAction *)this);
  JUMPOUT(0x1DF0CF560);
}

void SKCKeyframeSequence::SKCKeyframeSequence(SKCKeyframeSequence *this, int a2, int a3)
{
  float *v4;
  uint64_t var0;
  float *v6;
  int v7;
  float *var5;
  uint64_t var1;

  this->var0 = a2;
  this->var1 = a3;
  *(int64x2_t *)&this->var2 = vdupq_n_s64(1uLL);
  this->var4 = 0;
  this->var5 = 0;
  this->var5 = (float *)malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  v4 = (float *)malloc_type_malloc(4 * this->var1 * (uint64_t)this->var0, 0x2361244AuLL);
  this->var4 = v4;
  var0 = this->var0;
  if ((int)var0 >= 1)
  {
    v6 = v4;
    v7 = 0;
    var5 = this->var5;
    var1 = this->var1;
    do
    {
      *var5 = 0.0;
      if ((int)var1 >= 1)
        bzero(&v6[v7], 4 * var1);
      v7 += var1;
      ++var5;
      --var0;
    }
    while (var0);
  }
}

SKCKeyframeSequence *SKCKeyframeSequence::setInterpMode(SKCKeyframeSequence *this, int64_t a2)
{
  this->var2 = a2;
  return this;
}

SKCKeyframeSequence *SKCKeyframeSequence::setRepeatMode(SKCKeyframeSequence *this, int64_t a2)
{
  this->var3 = a2;
  return this;
}

void SKCKeyframeSequence::sample(SKCKeyframeSequence *this, float a2, float *a3)
{
  float *var5;
  uint64_t var0;
  float v7;
  int64_t var3;
  int64_t var2;
  uint64_t v10;
  BOOL v11;
  int v12;

  var5 = this->var5;
  var0 = this->var0;
  v7 = var5[(int)var0 - 1];
  var3 = this->var3;
  if (var3 == 2)
  {
    if ((LODWORD(a2) & 0x80000000) != 0)
      a2 = v7 - fmodf(COERCE_FLOAT(LODWORD(a2) & 0x7FFFFFFF), var5[(int)var0 - 1]);
    else
      a2 = fmodf(a2, var5[(int)var0 - 1]);
  }
  else if (var3 == 1)
  {
    if (v7 < a2)
      a2 = var5[(int)var0 - 1];
    if (a2 < 0.0)
      a2 = 0.0;
  }
  var2 = this->var2;
  switch(var2)
  {
    case 1:
      SKCKeyframeSequence::_sampleLinear(this, a2, a3);
      break;
    case 2:
      SKCKeyframeSequence::_sampleSpline(this, a2, a3);
      break;
    case 3:
      if ((int)var0 < 1)
      {
        LODWORD(v10) = 0;
      }
      else
      {
        v10 = 0;
        while ((COERCE_UNSIGNED_INT(a2 - var5[v10]) & 0x80000000) == 0)
        {
          if (var0 == ++v10)
          {
            LODWORD(v10) = var0;
            break;
          }
        }
      }
      v11 = (_DWORD)v10 != 0;
      v12 = v10 - 1;
      if (!v11)
        v12 = 0;
      memcpy(a3, &this->var4[this->var1 * v12], 4 * this->var1);
      break;
  }
}

void *SKCKeyframeSequence::_sampleStep(SKCKeyframeSequence *this, float a2, float *a3)
{
  uint64_t var0;
  uint64_t v4;
  BOOL v5;
  int v6;

  var0 = this->var0;
  if ((int)var0 < 1)
  {
    LODWORD(v4) = 0;
  }
  else
  {
    v4 = 0;
    while ((COERCE_UNSIGNED_INT(a2 - this->var5[v4]) & 0x80000000) == 0)
    {
      if (var0 == ++v4)
      {
        LODWORD(v4) = this->var0;
        break;
      }
    }
  }
  v5 = (_DWORD)v4 != 0;
  v6 = v4 - 1;
  if (!v5)
    v6 = 0;
  return memcpy(a3, &this->var4[this->var1 * v6], 4 * this->var1);
}

SKCKeyframeSequence *SKCKeyframeSequence::_sampleLinear(SKCKeyframeSequence *this, float a2, float *a3)
{
  uint64_t var0;
  float *var5;
  uint64_t v5;
  int v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t var1;
  float *var4;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;

  var0 = this->var0;
  var5 = this->var5;
  if ((int)var0 < 1)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = 0;
    while ((COERCE_UNSIGNED_INT(a2 - var5[v5]) & 0x80000000) == 0)
    {
      if (var0 == ++v5)
      {
        LODWORD(v5) = this->var0;
        break;
      }
    }
  }
  v6 = v5 - 1;
  if (!(_DWORD)v5)
    v6 = 0;
  if ((int)v5 >= (int)var0)
    LODWORD(v5) = var0 - 1;
  v7 = var5[v6];
  v8 = var5[(int)v5];
  v9 = 1.0;
  if ((COERCE_UNSIGNED_INT(v7 - v8) & 0x60000000) != 0)
    v9 = (float)(a2 - v7) / (float)(v8 - v7);
  if (v9 <= 1.0)
    v10 = v9;
  else
    v10 = 1.0;
  if (v10 < 0.0)
    v10 = 0.0;
  var1 = this->var1;
  if ((int)var1 >= 1)
  {
    var4 = this->var4;
    v13 = &var4[(int)var1 * v6];
    v14 = &var4[(int)var1 * (int)v5];
    do
    {
      v15 = *v13++;
      v16 = v15;
      v17 = *v14++;
      *a3++ = (float)(v10 * v17) + (float)(v16 * (float)(1.0 - v10));
      --var1;
    }
    while (var1);
  }
  return this;
}

SKCKeyframeSequence *SKCKeyframeSequence::_sampleSpline(SKCKeyframeSequence *this, float a2, float *a3)
{
  uint64_t var0;
  float *var5;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t var1;
  float v14;
  float v15;
  float v16;
  float v17;
  BOOL v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float *var4;
  float *v28;
  float *v29;
  float *v30;
  float *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;

  var0 = this->var0;
  var5 = this->var5;
  if ((int)var0 < 1)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = 0;
    while ((COERCE_UNSIGNED_INT(a2 - var5[v5]) & 0x80000000) == 0)
    {
      if (var0 == ++v5)
      {
        LODWORD(v5) = this->var0;
        break;
      }
    }
  }
  v6 = v5 - 1;
  if (!(_DWORD)v5)
    v6 = 0;
  v7 = var0 - 1;
  if ((int)v5 >= (int)var0)
    LODWORD(v5) = var0 - 1;
  v8 = v6 - 1;
  if (v6 <= 0)
    v8 = 0;
  v9 = var5[v8];
  v10 = var5[v6];
  if ((int)v5 < v7)
    v7 = v5 + 1;
  v11 = var5[(int)v5];
  v12 = var5[v7];
  var1 = this->var1;
  v14 = v10 - v9;
  v15 = v11 - v10;
  v16 = v12 - v11;
  v17 = v14 / (float)(v14 + v15);
  v18 = (COERCE_UNSIGNED_INT(v14 + v15) & 0x60000000) == 0;
  v19 = v16 / (float)(v15 + v16);
  v20 = v15 / (float)(v15 + v16);
  v21 = v15 + v16;
  if ((COERCE_UNSIGNED_INT(v14 + v15) & 0x60000000) != 0)
    v22 = v15 / (float)(v14 + v15);
  else
    v22 = 0.0;
  if (v18)
    v23 = 0.0;
  else
    v23 = v17;
  if ((LODWORD(v21) & 0x60000000) != 0)
  {
    v24 = v20;
  }
  else
  {
    v19 = 0.0;
    v24 = 0.0;
  }
  v25 = (float)(a2 - v10) / v15;
  if ((LODWORD(v15) & 0x60000000) != 0)
    v26 = v25;
  else
    v26 = 0.0;
  if ((int)var1 >= 1)
  {
    var4 = this->var4;
    v28 = &var4[(int)var1 * v8];
    v29 = &var4[(int)var1 * v6];
    v30 = &var4[(int)var1 * (int)v5];
    v31 = &var4[(int)var1 * v7];
    v32 = v26 * v26;
    v33 = v26 * (float)(v26 * v26);
    v34 = (float)(v26 * v26) * 3.0;
    v35 = 1.0 - (float)(v34 - (float)(v33 * 2.0));
    v36 = v26 + (float)(v33 + (float)((float)(v26 * v26) * -2.0));
    v37 = v33 - v32;
    v38 = v34 + (float)(v33 * -2.0);
    do
    {
      v39 = *v28++;
      v40 = v39;
      v41 = *v29++;
      v42 = v41;
      v43 = *v30++;
      v44 = v43;
      v45 = *v31++;
      *a3++ = (float)((float)((float)(v36
                                    * (float)((float)(v23 * (float)(v44 - v42)) + (float)((float)(v42 - v40) * v22)))
                            + (float)(v35 * v42))
                    + (float)(v37 * (float)((float)(v24 * (float)(v45 - v44)) + (float)((float)(v44 - v42) * v19))))
            + (float)(v38 * v44);
      --var1;
    }
    while (var1);
  }
  return this;
}

SKCKeyframeSequence *SKCKeyframeSequence::_getKeyframesForTime(SKCKeyframeSequence *this, float a2, int *a3, int *a4)
{
  uint64_t var0;
  uint64_t v5;
  int v6;

  var0 = this->var0;
  if ((int)var0 < 1)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = 0;
    while ((COERCE_UNSIGNED_INT(a2 - this->var5[v5]) & 0x80000000) == 0)
    {
      if (var0 == ++v5)
      {
        LODWORD(v5) = this->var0;
        break;
      }
    }
  }
  v6 = v5 - 1;
  if (!(_DWORD)v5)
    v6 = 0;
  *a3 = v6;
  if ((int)v5 >= this->var0)
    LODWORD(v5) = this->var0 - 1;
  *a4 = v5;
  return this;
}

void *SKCKeyframeSequence::setKeyframe(SKCKeyframeSequence *this, int a2, float a3, const float *a4)
{
  float *var4;

  var4 = this->var4;
  this->var5[a2] = a3;
  return memcpy(&var4[this->var1 * a2], a4, 4 * this->var1);
}

void *SKCKeyframeSequence::getKeyframe(SKCKeyframeSequence *this, int a2, float *a3, float *__dst)
{
  float *var4;

  var4 = this->var4;
  *a3 = this->var5[a2];
  return memcpy(__dst, &var4[this->var1 * a2], 4 * this->var1);
}

void SKCKeyframeSequence::~SKCKeyframeSequence(SKCKeyframeSequence *this)
{
  float *var5;
  float *var4;

  var5 = this->var5;
  if (var5)
  {
    free(var5);
    this->var5 = 0;
  }
  var4 = this->var4;
  if (var4)
  {
    free(var4);
    this->var4 = 0;
  }
}

void SKCEffectNode::SKCEffectNode(SKCEffectNode *this)
{
  uint64_t v1;

  SKCNode::SKCNode(this);
  *(_QWORD *)v1 = off_1EA5014E8;
  *(_QWORD *)(v1 + 560) = 0;
  *(_BYTE *)(v1 + 568) = 1;
  *(_OWORD *)(v1 + 576) = 0u;
  *(_OWORD *)(v1 + 592) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_OWORD *)(v1 + 624) = 0u;
  *(_QWORD *)(v1 + 640) = 0;
  *(_BYTE *)(v1 + 672) = 1;
  *(_DWORD *)(v1 + 676) = 0;
  *(_QWORD *)(v1 + 680) = 0;
  *(_WORD *)(v1 + 704) = 1;
  *(_QWORD *)(v1 + 712) = 0;
  *(_DWORD *)(v1 + 720) = 2;
}

void SKCEffectNode::setSubdivisionLevels(SKCNode *this, int a2)
{
  *((_DWORD *)this + 180) = a2;
  SKCNode::setDirty(this);
}

void SKCEffectNode::setWarpGeometry(id *this, SKWarpGeometry *a2)
{
  objc_storeStrong(this + 89, a2);
  std::shared_ptr<jet_buffer_pool>::reset[abi:ne180100](this + 32);
  SKCNode::setDirty((SKCNode *)this);
}

BOOL SKCEffectNode::needsWarp(SKCEffectNode *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 89);
  return v1 && !objc_msgSend(v1, "isIdentityWarp");
}

uint64_t SKCEffectNode::generatesVisibleGeometry(SKCEffectNode *this, const simd_float4x4 *a2)
{
  return 1;
}

void SKCEffectNode::setShouldRasterize(SKCNode *this, char a2)
{
  *((_BYTE *)this + 705) = a2;
  *((_BYTE *)this + 672) = 1;
  SKCNode::setDirty(this);
}

uint64_t SKCEffectNode::getShouldRasterize(SKCEffectNode *this)
{
  return *((unsigned __int8 *)this + 705);
}

void SKCEffectNode::setEnableEffects(SKCNode *this, char a2)
{
  *((_BYTE *)this + 704) = a2;
  *((_BYTE *)this + 672) = 1;
  SKCNode::setDirty(this);
}

uint64_t SKCEffectNode::getEnableEffects(SKCEffectNode *this)
{
  return *((unsigned __int8 *)this + 704);
}

void SKCEffectNode::getBatchInfo(SKCEffectNode *this@<X0>, SKCRenderInfo *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  void *v7;

  if (!*((_BYTE *)this + 704)
    || (*((_BYTE *)a2 + 580) & 0x20) != 0
    || *((_QWORD *)this + 11) == *((_QWORD *)this + 12) && *((_QWORD *)this + 14) == *((_QWORD *)this + 15))
  {
    SKCNode::getBatchInfo(a3);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 4) = 0x300000000;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 12) = 1;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 60) = 0u;
    *(_DWORD *)(a3 + 4) = (**(uint64_t (***)(SKCEffectNode *, SKCRenderInfo *))this)(this, a2);
    *(_BYTE *)a3 = 1;
    if (!*((_QWORD *)this + 70) || (*((_BYTE *)a2 + 581) & 8) != 0)
      v6 = (char *)this + 600;
    else
      v6 = (char *)this + 632;
    *(_QWORD *)(a3 + 32) = *(_QWORD *)v6;
    *(_DWORD *)(a3 + 8) = 3;
    *(_DWORD *)(a3 + 12) = SKBlendModeGetBackingBlendMode(*((SKBlendMode *)this + 36));
    *(_QWORD *)(a3 + 24) = *((_QWORD *)a2 + 21);
    v7 = (void *)*((_QWORD *)this + 72);
    if (v7)
    {
      if ((*((_BYTE *)a2 + 581) & 1) == 0)
        *(_QWORD *)(a3 + 16) = v7;
    }
  }
}

void SKCEffectNode::subclassRecomputeFlags(id *this)
{
  if (objc_msgSend(this[72], "_usesTimeUniform")
    && !*((_BYTE *)this + 172)
    && (*((_BYTE *)this + 171) & 0x60) != 0)
  {
    SKCNode::setFlags((SKCNode *)this, 66, 1);
  }
}

BOOL SKCEffectNode::getNeedsCustomRenderOps(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a1 + 704)
      && (*(_BYTE *)(a2 + 580) & 0x20) == 0
      && (*(_QWORD *)(a1 + 88) != *(_QWORD *)(a1 + 96) || *(_QWORD *)(a1 + 112) != *(_QWORD *)(a1 + 120));
}

uint64_t SKCEffectNode::getMaxBatchRenderElementCount(SKCEffectNode *this, SKCRenderInfo *a2)
{
  void *v3;
  id v4;
  int v5;
  double v6;
  uint64_t v7;

  if (!*((_BYTE *)this + 704)
    || (*((_BYTE *)a2 + 580) & 0x20) != 0
    || *((_QWORD *)this + 11) == *((_QWORD *)this + 12) && *((_QWORD *)this + 14) == *((_QWORD *)this + 15))
  {
    return 0;
  }
  v3 = (void *)*((_QWORD *)this + 89);
  if (!v3)
    return 4;
  if ((objc_msgSend(v3, "isIdentityWarp") & 1) != 0)
    return 4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 4;
  v4 = *((id *)this + 89);
  v5 = objc_msgSend(v4, "numberOfColumns");
  v6 = (double)(int)(objc_msgSend(v4, "numberOfRows") * v5);
  v7 = (exp2((double)(*((_DWORD *)this + 180) + 1)+ (double)(*((_DWORD *)this + 180) + 1))* v6);

  return v7;
}

void sub_1DC915C00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t SKCEffectNode::addBatchRenderElements(SKCEffectNode *this, float32x4_t *a2)
{
  uint64_t (***v4)(_QWORD);
  char *v5;
  char *v6;
  unsigned int v8;
  float32x4_t v9;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  __n128 v40;
  float32x4_t v41;
  __n128 v42;
  float32x4_t v43;
  unint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int16x8_t v50;
  unsigned __int32 *v51;
  unsigned __int32 v52;
  int v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  float32x4_t v60;
  __int128 v61;
  _QWORD *v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 704)
    || (a2[36].i8[4] & 0x20) != 0
    || *((_QWORD *)this + 11) == *((_QWORD *)this + 12) && *((_QWORD *)this + 14) == *((_QWORD *)this + 15))
  {
    return SKCNode::addBatchRenderElements();
  }
  if (*((_QWORD *)this + 70) && (v4 = (uint64_t (***)(_QWORD))*((_QWORD *)this + 79)) != 0)
  {
    v5 = (char *)this + 632;
    v6 = (char *)this + 656;
  }
  else
  {
    v6 = (char *)this + 688;
    v5 = (char *)this + 600;
    v4 = (uint64_t (***)(_QWORD))*((_QWORD *)this + 75);
  }
  v61 = *(_OWORD *)v6;
  v8 = (**v4)(v4);
  *(float32x2_t *)v9.f32 = vmul_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__((*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 8))(*(_QWORD *)v5), v8)), (float32x2_t)0x3F0000003F000000);
  __asm { FMOV            V0.2S, #1.0 }
  v59 = (unint64_t)_D0;
  v9.i64[1] = _D0;
  v60 = v9;
  v15 = (void *)*((_QWORD *)this + 89);
  if (v15 && (objc_msgSend(v15, "isIdentityWarp") & 1) == 0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v16 = *((id *)this + 89);
    v17 = a2->u32[0];
    v18 = a2[1].i64[1] + 16 * v17;
    v62 = (_QWORD *)(a2[1].i64[0] + 8 * v17);
    v63.i64[0] = v18;
    v58 = objc_msgSend(v16, "numberOfColumns");
    v19 = objc_msgSend(v16, "numberOfRows");
    v56 = objc_msgSend(v16, "sourcePositions");
    v55 = objc_msgSend(v16, "destPositions");
    v54 = v16;
    if (v19 < 1)
    {
      v21 = 0;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      v57 = v19;
      v22 = 8 * (v58 + 1);
      do
      {
        if (v58 <= 0)
        {
          v23 = v20 + 1;
        }
        else
        {
          v23 = v20 + 1;
          v24 = v22 * (v20 + 1);
          v25 = v22 * v20;
          v27 = v58;
          v26 = v55;
          v28 = v56;
          do
          {
            v29.i64[0] = *(_QWORD *)(v26 + v25);
            v30.i64[0] = *(_QWORD *)(v26 + v25 + 8);
            v29.i64[1] = 0x3F80000000000000;
            v30.i64[1] = 0x3F80000000000000;
            v32.i64[0] = *(_QWORD *)(v26 + v24);
            v31.i64[0] = *(_QWORD *)(v26 + v24 + 8);
            v31.i64[1] = 0x3F80000000000000;
            v32.i64[1] = 0x3F80000000000000;
            v33 = a2[2];
            v34 = a2[3];
            v35 = a2[4];
            v36 = a2[5];
            v37 = vmlaq_f32((float32x4_t)(unint64_t)v61, v60, v29);
            v38 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, v37.f32[0]), v34, *(float32x2_t *)v37.f32, 1), v35, v37, 2), v36, v37, 3);
            v39 = vmlaq_f32((float32x4_t)(unint64_t)v61, v60, v30);
            v40 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, v39.f32[0]), v34, *(float32x2_t *)v39.f32, 1), v35, v39, 2), v36, v39, 3);
            v41 = vmlaq_f32((float32x4_t)(unint64_t)v61, v60, v31);
            v42 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, v41.f32[0]), v34, *(float32x2_t *)v41.f32, 1), v35, v41, 2), v36, v41, 3);
            v43 = vmlaq_f32((float32x4_t)(unint64_t)v61, v60, v32);
            v21 = add_subdivs(&v63, &v62, *((_DWORD *)this + 180), v38, v40, v42, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, v43.f32[0]), v34, *(float32x2_t *)v43.f32, 1), v35, v43, 2), v36, v43, 3), vmla_lane_f32(vmla_n_f32(0, (float32x2_t)1065353216, COERCE_FLOAT(*(_QWORD *)(v28 + v25))), (float32x2_t)0x3F80000000000000, *(float32x2_t *)(v28 + v25),
                                    1),
                                  vmla_lane_f32(vmla_n_f32(0, (float32x2_t)1065353216, COERCE_FLOAT(*(_QWORD *)(v28 + v25 + 8))), (float32x2_t)0x3F80000000000000, *(float32x2_t *)(v28 + v25 + 8), 1), vmla_lane_f32(vmla_n_f32(0, (float32x2_t)1065353216, COERCE_FLOAT(*(_QWORD *)(v28 + v24 + 8))), (float32x2_t)0x3F80000000000000, *(float32x2_t *)(v28 + v24 + 8), 1), vmla_lane_f32(vmla_n_f32(0, (float32x2_t)1065353216, COERCE_FLOAT(*(_QWORD *)(v28 + v24))), (float32x2_t)0x3F80000000000000, *(float32x2_t *)(v28 + v24), 1))+ v21;
            v28 += 8;
            v26 += 8;
            --v27;
          }
          while (v27);
        }
        v20 = v23;
      }
      while (v23 != v57);
    }

  }
  else
  {
    v44 = 0;
    v63 = vmlaq_f32((float32x4_t)(unint64_t)v61, (float32x4_t)xmmword_1DC9217E0, v60);
    v64 = vmlaq_f32((float32x4_t)(unint64_t)v61, (float32x4_t)xmmword_1DC921D10, v60);
    v65 = vmlaq_f32((float32x4_t)(unint64_t)v61, (float32x4_t)xmmword_1DC921820, v60);
    v66 = vmlaq_f32((float32x4_t)(unint64_t)v61, (float32x4_t)xmmword_1DC921CE0, v60);
    v45 = a2[2];
    v46 = a2[3];
    v47 = a2[4];
    v48 = a2[5];
    do
    {
      *(float32x4_t *)((char *)&v63 + v44) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, COERCE_FLOAT(*(_OWORD *)((char *)&v63 + v44))), v46, *(float32x2_t *)&v63.f32[v44 / 4], 1), v47, *(float32x4_t *)((char *)&v63 + v44), 2), v48, *(float32x4_t *)((char *)&v63 + v44), 3);
      v44 += 16;
    }
    while (v44 != 64);
    *(float32x4_t *)(a2[1].i64[1] + 16 * a2->u32[0]) = v63;
    *(float32x4_t *)(a2[1].i64[1] + 16 * (a2->i32[0] + 1)) = v64;
    *(float32x4_t *)(a2[1].i64[1] + 16 * (a2->i32[0] + 2)) = v65;
    *(float32x4_t *)(a2[1].i64[1] + 16 * (a2->i32[0] + 3)) = v66;
    *(_QWORD *)(a2[1].i64[0] + 8 * a2->u32[0]) = 0;
    *(_QWORD *)(a2[1].i64[0] + 8 * (a2->i32[0] + 1)) = 1065353216;
    v49.i64[1] = *((_QWORD *)&v59 + 1);
    *(_QWORD *)(a2[1].i64[0] + 8 * (a2->i32[0] + 2)) = v59;
    v49.i32[1] = 1065353216;
    *(_QWORD *)(a2[1].i64[0] + 8 * (a2->i32[0] + 3)) = 0x3F80000000000000;
    v21 = 4;
  }
  if ((_DWORD)v21)
  {
    v49.f32[0] = fminf(fmaxf(*((float *)this + 81) * a2[6].f32[0], 0.0), 1.0) * 255.0;
    v50 = (int16x8_t)vcvtq_s32_f32(v49);
    *(int16x4_t *)v50.i8 = vdup_lane_s16(vmovn_s32((int32x4_t)v50), 0);
    v51 = (unsigned __int32 *)(a2->i64[1] + 4 * a2->u32[0]);
    v52 = vmovn_s16(v50).u32[0];
    v53 = v21;
    do
    {
      *v51++ = v52;
      --v53;
    }
    while (v53);
  }
  *((_BYTE *)this + 672) = 0;
  return v21;
}

void sub_1DC9160F8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t SKCEffectNode::addRenderOps(uint64_t result, uint64_t a2)
{
  if (!*(_BYTE *)(result + 704)
    || (*(_BYTE *)(a2 + 580) & 0x20) != 0
    || *(_QWORD *)(result + 88) == *(_QWORD *)(result + 96) && *(_QWORD *)(result + 112) == *(_QWORD *)(result + 120))
  {
    return SKCNode::addRenderOps();
  }
  return result;
}

char *SKCEffectNode::addRenderableChildren(char *result, uint64_t a2, uint64_t a3)
{
  if (!result[704]
    || (*(_BYTE *)(a2 + 580) & 0x20) != 0
    || *((_QWORD *)result + 11) == *((_QWORD *)result + 12) && *((_QWORD *)result + 14) == *((_QWORD *)result + 15))
  {
    return SKCNode::addRenderableChildren(result, a2, a3);
  }
  return result;
}

void SKCEffectNode::ensure_framebuffers(float32x4_t *lpsrc, uint64_t a2)
{
  simd_float4 v4;
  simd_float4 v5;
  simd_float4 v6;
  simd_float4 v7;
  int8x16_t AABB;
  int8x16_t v9;
  void *v10;
  id v11;
  double v12;
  double v13;
  float32_t v14;
  double v15;
  float32_t v16;
  double v17;
  float32_t v18;
  void *v19;
  SKCNode *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x2_t v24;
  int v25;
  __n128 v26;
  __n128 v27;
  float v28;
  float v29;
  float32x4_t v30;
  float v31;
  float v32;
  float32x4_t v33;
  uint64_t *v34;
  unsigned int (***v35)(_QWORD);
  __n128 v36;
  float32x2_t v37;
  unsigned int v38;
  unsigned int v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  float32x2_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t texture_2d;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  float32x4_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint32x2_t v65;
  float32x4_t v66;
  float32x4_t v67;
  __n128 v68;
  __int128 v69;
  _QWORD v70[5];
  simd_float4x4 v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  __n128 (*v75)(uint64_t, uint64_t);
  uint64_t (*v76)();
  const char *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;

  v72 = 0;
  v73 = &v72;
  v75 = __Block_byref_object_copy__7;
  v76 = __Block_byref_object_dispose__7;
  v74 = 0x7012000000;
  v77 = "";
  v78 = *(_OWORD *)SKCBoundingBoxEmpty;
  v79 = *(_OWORD *)&SKCBoundingBoxEmpty[16];
  v80 = *(_OWORD *)&SKCBoundingBoxEmpty[32];
  v81 = *(_OWORD *)&SKCBoundingBoxEmpty[48];
  if (lpsrc
  {
    *(double *)v4.i64 = (*(double (**)(float32x4_t *))(lpsrc->i64[0] + 120))(lpsrc);
    v71.columns[0] = v4;
    v71.columns[1] = v5;
    v71.columns[2] = v6;
    v71.columns[3] = v7;
    AABB = (int8x16_t)SKCBoundingBoxGetAABB(&v71);
    lpsrc[43] = (float32x4_t)AABB;
    v10 = (void *)lpsrc->i64[1];
    if (v10)
    {
      v11 = v10;
      objc_msgSend(v11, "visibleRect");
      *(float *)&v12 = v12;
      lpsrc[43].i32[0] = LODWORD(v12);
      objc_msgSend(v11, "visibleRect");
      v14 = v13;
      lpsrc[43].f32[1] = v14;
      objc_msgSend(v11, "visibleRect");
      v16 = v15;
      lpsrc[43].f32[2] = v16;
      objc_msgSend(v11, "visibleRect");
      v18 = v17;
      lpsrc[43].f32[3] = v18;
      objc_msgSend(v11, "camera");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = (SKCNode *)objc_msgSend(v19, "_backingNode");

      if (v20)
      {
        SKCNode::getConversionMatrixFromWorld(v20);
        v22.i64[0] = vsubq_f32(lpsrc[43], v21).u64[0];
        v22.i64[1] = lpsrc[43].i64[1];
        lpsrc[43] = v22;
      }

      AABB = (int8x16_t)lpsrc[43];
    }
  }
  else
  {
    v70[0] = MEMORY[0x1E0C809B0];
    v70[1] = 3221225472;
    v70[2] = ___ZN13SKCEffectNode19ensure_framebuffersEP13SKCRenderInfoDv4_j_block_invoke;
    v70[3] = &unk_1EA4FE920;
    v70[4] = &v72;
    SKCNode::walkChildren((char **)lpsrc, v70, 0, 1);
    v23 = SKCBoundingBoxGetAABB((const simd_float4x4 *)(v73 + 6));
    *(float32x2_t *)AABB.i8 = vrndm_f32(*(float32x2_t *)v23.f32);
    v24 = vsub_f32(*(float32x2_t *)AABB.i8, *(float32x2_t *)v23.f32);
    v9 = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL);
    AABB.u64[1] = (unint64_t)vrndp_f32(vsub_f32(*(float32x2_t *)v9.i8, v24));
    lpsrc[43] = (float32x4_t)AABB;
  }
  *(float32x2_t *)v9.i8 = vmaxnm_f32((float32x2_t)*(_OWORD *)&vextq_s8(AABB, AABB, 8uLL), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  v66 = (float32x4_t)v9;
  AABB.i64[1] = v9.i64[0];
  lpsrc[43] = (float32x4_t)AABB;
  SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v71);
  v25 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v71.columns[0].i64[0] + 152))(v71.columns[0].i64[0], 0);
  v27 = (__n128)v66;
  v26.n128_u64[0] = (unint64_t)vmaxnm_f32(vadd_f32((float32x2_t)v27.n128_u64[0], (float32x2_t)v27.n128_u64[0]), (float32x2_t)0x4000000040000000);
  v27.n128_f32[0] = (float)v25;
  if (v26.n128_f32[0] > (float)v25)
  {
    v28 = v26.n128_f32[0] - v27.n128_f32[0];
    v26.n128_f32[0] = (float)v25;
    v29 = v28 * 0.5;
    v30 = lpsrc[43];
    v30.f32[0] = v30.f32[0] + (float)(v29 * 0.5);
    v30.f32[2] = COERCE_FLOAT(lpsrc[43].i64[1]) - v29;
    lpsrc[43] = v30;
  }
  v31 = v26.n128_f32[1];
  if (v26.n128_f32[1] > v27.n128_f32[0])
  {
    v26.n128_f32[1] = (float)v25;
    v32 = (float)(v31 - v27.n128_f32[0]) * 0.5;
    v33 = lpsrc[43];
    v33.f32[1] = COERCE_FLOAT(HIDWORD(lpsrc[43].i64[0])) + (float)(v32 * 0.5);
    v33.f32[3] = COERCE_FLOAT(HIDWORD(*(_OWORD *)&lpsrc[43])) - v32;
    lpsrc[43] = v33;
  }
  v34 = &lpsrc[37].i64[1];
  v35 = (unsigned int (***)(_QWORD))lpsrc[37].i64[1];
  if (!v35)
  {
    v27.n128_u64[0] = (unint64_t)vrndp_f32((float32x2_t)v26.n128_u64[0]);
LABEL_29:
    v68 = v27;
    texture_2d = jet_context::create_texture_2d();
    std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v69, texture_2d);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)&lpsrc[37].i64[1], &v69);
    v48 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
    v27 = v68;
    if (*((_QWORD *)&v69 + 1))
    {
      v49 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v48->__on_zero_shared)(v48, v68);
        std::__shared_weak_count::__release_weak(v48);
        v27 = v68;
      }
    }
    goto LABEL_34;
  }
  v67 = (float32x4_t)v26;
  v27.n128_f32[0] = (float)(**v35)(v35);
  v36 = (__n128)v67;
  if (v67.f32[0] > v27.n128_f32[0]
    || (v27.n128_f32[0] = (float)(*(unsigned int (**)(uint64_t, float, float32x4_t))(*(_QWORD *)*v34 + 8))(*v34, v27.n128_f32[0], v67), v37 = *(float32x2_t *)v67.f32, v36.n128_u32[0] = v67.u32[1], v67.f32[1] > v27.n128_f32[0]))
  {
    v38 = (**(uint64_t (***)(uint64_t, __n128, __n128))*v34)(*v34, v27, v36);
    (*(void (**)(uint64_t))(*(_QWORD *)*v34 + 8))(*v34);
    v65 = (uint32x2_t)__PAIR64__(v39, v38);
    v69 = 0uLL;
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)&lpsrc[37].i64[1], &v69);
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
    if (*((_QWORD *)&v69 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = vcvt_f32_u32(v65);
    v69 = 0uLL;
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)&lpsrc[38].i64[1], &v69);
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
    if (*((_QWORD *)&v69 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v37 = vmaxnm_f32(v43, *(float32x2_t *)v67.f32);
    lpsrc[42].i8[0] = 1;
  }
  v27.n128_u64[0] = (unint64_t)vrndp_f32(v37);
  if (!*v34)
    goto LABEL_29;
LABEL_34:
  if (!lpsrc[38].i64[1])
  {
    v58 = jet_context::create_texture_2d();
    std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v69, v58);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)&lpsrc[38].i64[1], &v69);
    v59 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
    if (*((_QWORD *)&v69 + 1))
    {
      v60 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }
  v51 = lpsrc[36].i64[1];
  if (!v51)
  {
    v52 = (*(uint64_t (**)(uint64_t, __n128, __n128))(*(_QWORD *)v71.columns[0].i64[0] + 112))(v71.columns[0].i64[0], v27, v36);
    std::shared_ptr<jet_framebuffer>::shared_ptr[abi:ne180100]<jet_framebuffer,void>(&v69, v52);
    std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100]((uint64_t)&lpsrc[36].i64[1], &v69);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
    if (*((_QWORD *)&v69 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v51 = lpsrc[36].i64[1];
  }
  *(_QWORD *)(v51 + 16) = lpsrc[37].i64[1];
  v56 = lpsrc[38].i64[1];
  *(_QWORD *)(v51 + 208) = v56;
  *(_QWORD *)(v51 + 232) = v56;
  {
    v57 = lpsrc[19];
  }
  else
  {
    v57 = 0uLL;
  }
  *(float32x4_t *)(v51 + 32) = v57;
  v62 = (std::__shared_weak_count *)v71.columns[0].i64[1];
  if (v71.columns[0].i64[1])
  {
    v63 = (unint64_t *)(v71.columns[0].i64[1] + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  _Block_object_dispose(&v72, 8);
}

void sub_1DC916744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void ___ZN13SKCEffectNode19ensure_framebuffersEP13SKCRenderInfoDv4_j_block_invoke(uint64_t a1, char **this)
{
  const simd_float4x4 *v3;
  simd_float4 v4;
  simd_float4 v5;
  simd_float4 v6;
  float32x4_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  simd_float4x4 v12;

  v3 = (const simd_float4x4 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  v12.columns[0] = (simd_float4)SKCNode::getAccumulatedBoundingBox(this);
  v12.columns[1] = v4;
  v12.columns[2] = v5;
  v12.columns[3] = v6;
  v7 = SKCBoundingBoxUnion(v3, &v12);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(float32x4_t *)(v8 + 48) = v7;
  *(_OWORD *)(v8 + 64) = v9;
  *(_OWORD *)(v8 + 80) = v10;
  *(_OWORD *)(v8 + 96) = v11;
}

void SKCEffectNode::addRequistePasses(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  int v14;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  BOOL IsInfinite;
  __int128 v20;
  double MidX;
  CGFloat MidY;
  __int128 v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t texture_2d;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  float32x2_t v51;
  float32_t v52;
  float32x2_t v53;
  float32_t v54;
  float32x2_t v55;
  double v56;
  float32x2_t v57;
  __int128 v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t command_buffer;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v86;
  jet_context *v87;
  std::__shared_weak_count *v88;
  __int128 v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  __int128 v92;
  CGRect v93;
  CGRect v94;
  CGRect v95;
  CGRect v96;

  if (!*(_BYTE *)(a1 + 704)
    || (*(_BYTE *)(a2 + 580) & 0x20) != 0
    || *(_QWORD *)(a1 + 88) == *(_QWORD *)(a1 + 96) && *(_QWORD *)(a1 + 112) == *(_QWORD *)(a1 + 120))
  {
    SKCNode::addRequistePasses(a1, a2, a3);
  }
  else
  {
    v6 = *(void **)(a1 + 680);
    *(_QWORD *)(a1 + 680) = 0;

    if (!*(_BYTE *)(a1 + 705)
      || *(_BYTE *)(a1 + 672)
      || SKCNode::matchesAnyFlags((SKCNode *)a1, 2, 2)
      || (*(_BYTE *)(a2 + 580) & 0x40) != 0)
    {
      *(_DWORD *)(a1 + 676) = 0;
      SKCEffectNode::ensure_framebuffers((float32x4_t *)a1, a2);
      v7 = (***(uint64_t (****)(_QWORD))(a1 + 600))(*(_QWORD *)(a1 + 600));
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 600) + 8))(*(_QWORD *)(a1 + 600));
      if (*(_QWORD *)(a1 + 560) && (*(_BYTE *)(a2 + 581) & 8) == 0)
      {
        SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v92);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v92 + 48))(v92, *(_QWORD *)(a1 + 600));
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
        if (*((_QWORD *)&v92 + 1))
        {
          v11 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
        objc_msgSend(*(id *)(a1 + 560), "setValue:forKey:", v9, CFSTR("inputImage"));
        if (*(_BYTE *)(a1 + 568))
        {
          objc_msgSend(*(id *)(a1 + 560), "inputKeys");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v14 = objc_msgSend(v13, "containsObject:", CFSTR("inputCenter"));

          if (v14)
          {
            objc_msgSend(v9, "extent");
            x = v93.origin.x;
            y = v93.origin.y;
            width = v93.size.width;
            height = v93.size.height;
            IsInfinite = CGRectIsInfinite(v93);
            *(_QWORD *)&v20 = 0x3F0000003F000000;
            v86 = v20;
            if (!IsInfinite)
            {
              v94.origin.x = x;
              v94.origin.y = y;
              v94.size.width = width;
              v94.size.height = height;
              if (!CGRectIsEmpty(v94))
              {
                objc_msgSend(v9, "extent");
                MidX = CGRectGetMidX(v95);
                objc_msgSend(v9, "extent");
                MidY = CGRectGetMidY(v96);
                *(float *)&v23 = MidX;
                *(float *)&MidY = MidY;
                DWORD1(v23) = LODWORD(MidY);
                v86 = v23;
              }
            }
            objc_msgSend(MEMORY[0x1E0C9DDF8], "vectorWithX:Y:", *(float *)&v86, *((float *)&v86 + 1), v86);
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(*(id *)(a1 + 560), "setValue:forKey:", v24, CFSTR("inputCenter"));

          }
        }
        objc_msgSend(*(id *)(a1 + 560), "valueForKey:", CFSTR("outputImage"));
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = *(void **)(a1 + 680);
        *(_QWORD *)(a1 + 680) = v25;

        {
          v27 = *(void **)(a1 + 680);
          objc_msgSend(v9, "extent");
          objc_msgSend(v27, "imageByCroppingToRect:");
          v28 = objc_claimAutoreleasedReturnValue();
          v29 = *(void **)(a1 + 680);
          *(_QWORD *)(a1 + 680) = v28;

        }
        objc_msgSend(*(id *)(a1 + 680), "extent");
        SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v90);
        texture_2d = jet_context::create_texture_2d();
        std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v92, texture_2d);
        std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](a1 + 632, &v92);
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
        if (*((_QWORD *)&v92 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v34 = v91;
        if (v91)
        {
          p_shared_owners = (unint64_t *)&v91->__shared_owners_;
          do
            v36 = __ldaxr(p_shared_owners);
          while (__stlxr(v36 - 1, p_shared_owners));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        *(_OWORD *)(a1 + 656) = *(_OWORD *)(a1 + 688);
        objc_msgSend(*(id *)(a1 + 680), "extent");
        v38 = v37;
        objc_msgSend(*(id *)(a1 + 680), "extent");
        v40 = v39;
        objc_msgSend(*(id *)(a1 + 680), "extent");
        v42 = v41;
        objc_msgSend(*(id *)(a1 + 680), "extent");
        v44 = v43;
        objc_msgSend(*(id *)(a1 + 680), "extent");
        v46 = v45;
        objc_msgSend(v9, "extent");
        v48 = v47;
        objc_msgSend(*(id *)(a1 + 680), "extent");
        v50 = v49;
        objc_msgSend(v9, "extent");
        v51.f32[0] = v38;
        v52 = v40;
        v53.f32[0] = v42;
        v54 = v44;
        v55.f32[0] = v46 / v48;
        *(float *)&v56 = v50 / v56;
        v55.i32[1] = LODWORD(v56);
        v57 = vmul_f32(*(float32x2_t *)(a1 + 664), v55);
        v51.f32[1] = v52;
        v53.f32[1] = v54;
        *(float32x2_t *)&v58 = vmla_f32(*(float32x2_t *)(a1 + 656), vdiv_f32(v57, v51), v53);
        *((float32x2_t *)&v58 + 1) = v57;
        *(_OWORD *)(a1 + 656) = v58;

      }
      v59 = operator new();
      *(_QWORD *)v59 = v59;
      *(_QWORD *)(v59 + 8) = v59;
      *(_QWORD *)(v59 + 16) = 0;
      *(_QWORD *)(v59 + 24) = v59 + 24;
      *(_QWORD *)(v59 + 32) = v59 + 24;
      *(_QWORD *)(v59 + 40) = 0;
      v60 = (_OWORD *)MEMORY[0x1E0C83FF0];
      *(_QWORD *)(v59 + 80) = 0;
      v61 = v60[1];
      *(_OWORD *)(v59 + 96) = *v60;
      *(_OWORD *)(v59 + 112) = v61;
      v62 = v60[3];
      *(_OWORD *)(v59 + 128) = v60[2];
      *(_OWORD *)(v59 + 144) = v62;
      *(_BYTE *)(v59 + 160) = 0;
      *(_BYTE *)(v59 + 192) = 0;
      *(_BYTE *)(v59 + 224) = 0;
      std::shared_ptr<SKCRenderPass>::shared_ptr[abi:ne180100]<SKCRenderPass,void>(&v92, v59);
      v63 = v92;
      *(_QWORD *)(v92 + 80) = *(_QWORD *)(a1 + 584);
      *(_QWORD *)&v64 = 0;
      *((_QWORD *)&v64 + 1) = __PAIR64__(v8, v7);
      *(_OWORD *)(v63 + 48) = v64;
      *(_OWORD *)(v63 + 64) = *(_OWORD *)(a1 + 688);
      *(_BYTE *)(v63 + 192) = 1;
      *(_QWORD *)&v65 = 0;
      *((uint32x2_t *)&v65 + 1) = vcvt_n_u32_f32(*(float32x2_t *)(a1 + 696), 1uLL);
      *(_OWORD *)(v63 + 208) = v65;
      v66 = operator new();
      *(_QWORD *)v66 = &off_1EA4FE720;
      *(_QWORD *)(v66 + 8) = 0;
      *(_QWORD *)(v66 + 16) = 0;
      *(_QWORD *)(v66 + 24) = 0;
      *(_QWORD *)(v66 + 32) = v66 + 32;
      *(_QWORD *)(v66 + 40) = v66 + 32;
      *(_QWORD *)(v66 + 48) = 0;
      *(_QWORD *)(v66 + 56) = v66 + 56;
      *(_QWORD *)(v66 + 64) = v66 + 56;
      *(_OWORD *)(v66 + 72) = 0u;
      *(_OWORD *)(v66 + 88) = 0u;
      *(_OWORD *)(v66 + 104) = 0u;
      *(_QWORD *)(v66 + 120) = 0;
      v67 = v60[3];
      *(_OWORD *)(v66 + 160) = v60[2];
      *(_OWORD *)(v66 + 176) = v67;
      v68 = v60[1];
      *(_OWORD *)(v66 + 128) = *v60;
      *(_OWORD *)(v66 + 144) = v68;
      *(_BYTE *)(v66 + 192) = 0;
      std::shared_ptr<SKCRenderSortGroup>::shared_ptr[abi:ne180100]<SKCRenderSortGroup,void>(&v90, v66);
      SKCNode::addRenderableChildren((char *)a1, a2, v90 + 8);
      if (*(_QWORD *)(a1 + 680) && (*(_BYTE *)(a2 + 581) & 8) == 0)
      {
        SKCRenderer::getBackingContext(*(_QWORD *)(a2 + 104), &v87);
        command_buffer = jet_context::create_command_buffer(v87);
        std::shared_ptr<jet_command_buffer>::shared_ptr[abi:ne180100]<jet_command_buffer,void>(&v89, command_buffer);
        std::shared_ptr<jet_buffer_pool>::operator=[abi:ne180100](v90 + 96, &v89);
        v70 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
        if (*((_QWORD *)&v89 + 1))
        {
          v71 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        v73 = v88;
        if (v88)
        {
          v74 = (unint64_t *)&v88->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        v76 = *(_QWORD *)(v90 + 96);
        v77 = *(_QWORD *)(a1 + 680);
        v78 = *(_QWORD *)(a1 + 632);
        LODWORD(v89) = 42;
        std::vector<jet_render_op>::emplace_back<jet_render_opcode>((uint64_t *)(v76 + 8), (int *)&v89);
        v79 = *(_QWORD *)(v76 + 16);
        *(_QWORD *)(v79 - 80) = v77;
        *(_QWORD *)(v79 - 72) = v78;
        *(_QWORD *)(v79 - 64) = 0;
        *(_QWORD *)(v79 - 56) = 0;
      }
      std::list<std::shared_ptr<SKCRenderSortGroup>>::push_back((uint64_t *)v92, &v90);
      std::list<std::shared_ptr<SKCRenderSortGroup>>::push_back(a3, &v92);
      v80 = v91;
      if (v91)
      {
        v81 = (unint64_t *)&v91->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v83 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
      if (*((_QWORD *)&v92 + 1))
      {
        v84 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
    }
    else
    {
      ++*(_DWORD *)(a1 + 676);
    }
  }
}

void sub_1DC916F20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void SKCEffectNode::~SKCEffectNode(id *this)
{
  *this = off_1EA5014E8;

  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 79));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 77));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 75));
  std::shared_ptr<jet_buffer_pool>::~shared_ptr[abi:ne180100]((uint64_t)(this + 73));

  SKCNode::~SKCNode(this);
}

{
  SKCEffectNode::~SKCEffectNode(this);
  JUMPOUT(0x1DF0CF560);
}

void sub_1DC917124(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1DC9171C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1DC917270(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC9172DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC9173E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1DC917530(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC917580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC9175D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC917620(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1DC9178B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1DC917994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1E0D15428]();
}

OSStatus AudioFileClose(AudioFileID inAudioFile)
{
  return MEMORY[0x1E0C91F28](inAudioFile);
}

OSStatus AudioFileGetProperty(AudioFileID inAudioFile, AudioFilePropertyID inPropertyID, UInt32 *ioDataSize, void *outPropertyData)
{
  return MEMORY[0x1E0C91F48](inAudioFile, *(_QWORD *)&inPropertyID, ioDataSize, outPropertyData);
}

OSStatus AudioFileOpenURL(CFURLRef inFileRef, AudioFilePermissions inPermissions, AudioFileTypeID inFileTypeHint, AudioFileID *outAudioFile)
{
  return MEMORY[0x1E0C91F60](inFileRef, inPermissions, *(_QWORD *)&inFileTypeHint, outAudioFile);
}

OSStatus AudioFileReadBytes(AudioFileID inAudioFile, Boolean inUseCache, SInt64 inStartingByte, UInt32 *ioNumBytes, void *outBuffer)
{
  return MEMORY[0x1E0C91F70](inAudioFile, inUseCache, inStartingByte, ioNumBytes, outBuffer);
}

CFTimeInterval CACurrentMediaTime(void)
{
  CFTimeInterval result;

  MEMORY[0x1E0CD2388]();
  return result;
}

uint64_t CARenderServerGetFrameCounter()
{
  return MEMORY[0x1E0CD2580]();
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes)
{
  return (CFAttributedStringRef)MEMORY[0x1E0C97DF0](alloc, str, attributes);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAE0](retstr, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BC78](space, components);
}

BOOL CGColorEqualToColor(CGColorRef color1, CGColorRef color2)
{
  return MEMORY[0x1E0C9BCD8](color1, color2);
}

CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BD00](color);
}

const CGFloat *__cdecl CGColorGetComponents(CGColorRef color)
{
  return (const CGFloat *)MEMORY[0x1E0C9BD08](color);
}

size_t CGColorGetNumberOfComponents(CGColorRef color)
{
  return MEMORY[0x1E0C9BD20](color);
}

void CGColorRelease(CGColorRef color)
{
  MEMORY[0x1E0C9BD60](color);
}

CFStringRef CGColorSpaceCopyName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x1E0C9BDB8](space);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDF0]();
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE50](name);
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x1E0C9BEC8](space);
}

uint64_t CGColorSpaceGetProcessColorModel()
{
  return MEMORY[0x1E0C9BEE0]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x1E0C9BF30](space);
}

BOOL CGColorSpaceUsesExtendedRange(CGColorSpaceRef space)
{
  return MEMORY[0x1E0C9BF48](space);
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C020](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
  MEMORY[0x1E0C9C050](c, transform);
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x1E0C9C170](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C220](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextRelease(CGContextRef c)
{
  MEMORY[0x1E0C9C340](c);
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
  MEMORY[0x1E0C9C390](c, sx, sy);
}

void CGContextSetAllowsAntialiasing(CGContextRef c, BOOL allowsAntialiasing)
{
  MEMORY[0x1E0C9C398](c, allowsAntialiasing);
}

void CGContextSetAllowsFontSmoothing(CGContextRef c, BOOL allowsFontSmoothing)
{
  MEMORY[0x1E0C9C3A0](c, allowsFontSmoothing);
}

void CGContextSetAllowsFontSubpixelPositioning(CGContextRef c, BOOL allowsFontSubpixelPositioning)
{
  MEMORY[0x1E0C9C3A8](c, allowsFontSubpixelPositioning);
}

void CGContextSetAllowsFontSubpixelQuantization(CGContextRef c, BOOL allowsFontSubpixelQuantization)
{
  MEMORY[0x1E0C9C3B0](c, allowsFontSubpixelQuantization);
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C408](c, color);
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
  MEMORY[0x1E0C9C458](c, *(_QWORD *)&quality);
}

void CGContextSetRenderingIntent(CGContextRef c, CGColorRenderingIntent intent)
{
  MEMORY[0x1E0C9C4B0](c, *(_QWORD *)&intent);
}

void CGContextSetShouldAntialias(CGContextRef c, BOOL shouldAntialias)
{
  MEMORY[0x1E0C9C4C8](c, shouldAntialias);
}

void CGContextSetShouldSmoothFonts(CGContextRef c, BOOL shouldSmoothFonts)
{
  MEMORY[0x1E0C9C4E0](c, shouldSmoothFonts);
}

void CGContextSetShouldSubpixelPositionFonts(CGContextRef c, BOOL shouldSubpixelPositionFonts)
{
  MEMORY[0x1E0C9C4E8](c, shouldSubpixelPositionFonts);
}

void CGContextSetShouldSubpixelQuantizeFonts(CGContextRef c, BOOL shouldSubpixelQuantizeFonts)
{
  MEMORY[0x1E0C9C4F0](c, shouldSubpixelQuantizeFonts);
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
  MEMORY[0x1E0C9C588](c, tx, ty);
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x1E0C9C5D8](provider);
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x1E0C9CBA8](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x1E0CBC308](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC338](data, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1E0CBC358](idst);
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return MEMORY[0x1E0C9CBE8](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x1E0C9CBF8](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x1E0C9CC00](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x1E0C9CC08](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9CC20](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9CC38](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

uint64_t CGImageGetImageProvider()
{
  return MEMORY[0x1E0C9CC70]();
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

uint64_t CGImageIsSubimage()
{
  return MEMORY[0x1E0C9CCF8]();
}

uint64_t CGImageProviderCopyIOSurface()
{
  return MEMORY[0x1E0C9CD10]();
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x1E0C9CDA0](image);
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x1E0C9CDA8](image);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC568](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC5C0](url, options);
}

void CGPathAddCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D298](path, m, cp1x, cp1y, cp2x, cp2y, x, y);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2A8](path, m, x, y);
}

void CGPathApply(CGPathRef path, void *info, CGPathApplierFunction function)
{
  MEMORY[0x1E0C9D2E8](path, info, function);
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
  MEMORY[0x1E0C9D310](path);
}

BOOL CGPathContainsPoint(CGPathRef path, const CGAffineTransform *m, CGPoint point, BOOL eoFill)
{
  return MEMORY[0x1E0C9D318](path, m, eoFill, (__n128)point, *(__n128 *)&point.y);
}

CGPathRef CGPathCreateCopy(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x1E0C9D320](path);
}

CGPathRef CGPathCreateCopyByStrokingPath(CGPathRef path, const CGAffineTransform *transform, CGFloat lineWidth, CGLineCap lineCap, CGLineJoin lineJoin, CGFloat miterLimit)
{
  return (CGPathRef)MEMORY[0x1E0C9D348](path, transform, *(_QWORD *)&lineCap, *(_QWORD *)&lineJoin, lineWidth, miterLimit);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D388]();
}

CGMutablePathRef CGPathCreateMutableCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D398](path, transform);
}

CGPathRef CGPathCreateWithEllipseInRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D3C0](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGPathRef CGPathCreateWithRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D3C8](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGPathRef CGPathCreateWithRoundedRect(CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D3D0](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, cornerWidth, cornerHeight);
}

BOOL CGPathEqualToPath(CGPathRef path1, CGPathRef path2)
{
  return MEMORY[0x1E0C9D3E8](path1, path2);
}

CGRect CGPathGetBoundingBox(CGPathRef path)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D3F0](path);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGPathGetPathBoundingBox(CGPathRef path)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D410](path);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

BOOL CGPathIsEmpty(CGPathRef path)
{
  return MEMORY[0x1E0C9D448](path);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D490](path, m, x, y);
}

void CGPathRelease(CGPathRef path)
{
  MEMORY[0x1E0C9D498](path);
}

CGPathRef CGPathRetain(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x1E0C9D4A0](path);
}

CGPoint CGPointFromString(NSString *string)
{
  double v1;
  double v2;
  CGPoint result;

  MEMORY[0x1E0CEA038](string);
  result.y = v2;
  result.x = v1;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1E0C9D550]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGRect CGRectFromString(NSString *string)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0CEA040](string);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D580]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D588]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5B0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D5F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D600]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1E0C9D608]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return MEMORY[0x1E0C9D610]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D640]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGSize CGSizeFromString(NSString *string)
{
  double v1;
  double v2;
  CGSize result;

  MEMORY[0x1E0CEA048](string);
  result.height = v2;
  result.width = v1;
  return result;
}

uint64_t CSIsNull()
{
  return MEMORY[0x1E0D19FB8]();
}

uint64_t CSRelease()
{
  return MEMORY[0x1E0D1A018]();
}

uint64_t CSSymbolGetRange()
{
  return MEMORY[0x1E0D1A090]();
}

uint64_t CSSymbolicatorCreateWithPid()
{
  return MEMORY[0x1E0D1A228]();
}

uint64_t CSSymbolicatorForeachSymbolWithMangledNameAtTime()
{
  return MEMORY[0x1E0D1A298]();
}

uint64_t CSSymbolicatorGetTask()
{
  return MEMORY[0x1E0D1A368]();
}

CTFontRef CTFontCreateWithFontDescriptor(CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x1E0CA7A70](descriptor, matrix, size);
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x1E0CA7A88](name, matrix, size);
}

CTFontDescriptorRef CTFontDescriptorCreateMatchingFontDescriptor(CTFontDescriptorRef descriptor, CFSetRef mandatoryAttributes)
{
  return (CTFontDescriptorRef)MEMORY[0x1E0CA7AE8](descriptor, mandatoryAttributes);
}

CTFontDescriptorRef CTFontDescriptorCreateWithNameAndSize(CFStringRef name, CGFloat size)
{
  return (CTFontDescriptorRef)MEMORY[0x1E0CA7B10](name, size);
}

void CTFrameDraw(CTFrameRef frame, CGContextRef context)
{
  MEMORY[0x1E0CA7DA0](frame, context);
}

CTFrameRef CTFramesetterCreateFrame(CTFramesetterRef framesetter, CFRange stringRange, CGPathRef path, CFDictionaryRef frameAttributes)
{
  return (CTFrameRef)MEMORY[0x1E0CA7DD8](framesetter, stringRange.location, stringRange.length, path, frameAttributes);
}

CTFramesetterRef CTFramesetterCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTFramesetterRef)MEMORY[0x1E0CA7DE0](attrString);
}

CGSize CTFramesetterSuggestFrameSizeWithConstraints(CTFramesetterRef framesetter, CFRange stringRange, CFDictionaryRef frameAttributes, CGSize constraints, CFRange *fitRange)
{
  double v5;
  double v6;
  CGSize result;

  MEMORY[0x1E0CA7DF8](framesetter, stringRange.location, stringRange.length, frameAttributes, fitRange, (__n128)constraints, *(__n128 *)&constraints.height);
  result.height = v6;
  result.width = v5;
  return result;
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
  MEMORY[0x1E0CA7EA8](line, context);
}

CGRect CTLineGetBoundsWithOptions(CTLineRef line, CTLineBoundsOptions options)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0CA7EC0](line, options);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CTLineRef CTTypesetterCreateLine(CTTypesetterRef typesetter, CFRange stringRange)
{
  return (CTLineRef)MEMORY[0x1E0CA8090](typesetter, stringRange.location, stringRange.length);
}

CTTypesetterRef CTTypesetterCreateWithAttributedString(CFAttributedStringRef string)
{
  return (CTTypesetterRef)MEMORY[0x1E0CA8098](string);
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  return MEMORY[0x1E0CA8A30](allocator, cacheAttributes, metalDevice, textureAttributes, cacheOut);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  return MEMORY[0x1E0CA8A38](allocator, textureCache, sourceImage, textureAttributes, pixelFormat, width, height, planeIndex);
}

void CVMetalTextureCacheFlush(CVMetalTextureCacheRef textureCache, CVOptionFlags options)
{
  MEMORY[0x1E0CA8A40](textureCache, options);
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x1E0CA8A50](image);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B20](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B40](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B50](pixelBuffer);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  MEMORY[0x1E0CA8BF0](texture);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1E0CA8BF8](texture);
}

OSStatus ExtAudioFileDispose(ExtAudioFileRef inExtAudioFile)
{
  return MEMORY[0x1E0C92280](inExtAudioFile);
}

OSStatus ExtAudioFileGetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x1E0C92288](inExtAudioFile, *(_QWORD *)&inPropertyID, ioPropertyDataSize, outPropertyData);
}

OSStatus ExtAudioFileRead(ExtAudioFileRef inExtAudioFile, UInt32 *ioNumberFrames, AudioBufferList *ioData)
{
  return MEMORY[0x1E0C92298](inExtAudioFile, ioNumberFrames, ioData);
}

OSStatus ExtAudioFileSetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x1E0C922A0](inExtAudioFile, *(_QWORD *)&inPropertyID, *(_QWORD *)&inPropertyDataSize, inPropertyData);
}

OSStatus ExtAudioFileWrapAudioFileID(AudioFileID inFileID, Boolean inForWriting, ExtAudioFileRef *outExtAudioFile)
{
  return MEMORY[0x1E0C922A8](inFileID, inForWriting, outExtAudioFile);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1E0CBB668](*(_QWORD *)&iterator);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1E0CBB6F0](*(_QWORD *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1E0CBB900](*(_QWORD *)&entry, key, allocator, *(_QWORD *)&options);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x1E0CBB9F0](*(_QWORD *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA00](name);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBAF0](properties);
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBB38](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1E0CBBB40](buffer);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC28](buffer);
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC48](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBC68](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x1E0CBBCE0](buffer);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBD28](buffer, *(_QWORD *)&options, seed);
}

IOSurfaceRef IOSurfaceLookup(IOSurfaceID csid)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBD38](*(_QWORD *)&csid);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBE88](buffer, *(_QWORD *)&options, seed);
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

NSZone *NSDefaultMallocZone(void)
{
  return (NSZone *)MEMORY[0x1E0CB2960]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1E0CB3178](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromCGPoint(CGPoint point)
{
  return (NSString *)MEMORY[0x1E0CEA108]((__n128)point, *(__n128 *)&point.y);
}

NSString *__cdecl NSStringFromCGRect(CGRect rect)
{
  return (NSString *)MEMORY[0x1E0CEA110]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

NSString *__cdecl NSStringFromCGSize(CGSize size)
{
  return (NSString *)MEMORY[0x1E0CEA118]((__n128)size, *(__n128 *)&size.height);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

uint64_t PKArrayFromCGPath()
{
  return MEMORY[0x1E0D7D340]();
}

uint64_t PKCGPathCreateFromArray()
{
  return MEMORY[0x1E0D7D348]();
}

uint64_t PKGet_INV_PTM_RATIO()
{
  return MEMORY[0x1E0D7D350]();
}

uint64_t PKGet_PTM_RATIO()
{
  return MEMORY[0x1E0D7D358]();
}

uint64_t PKPathCreateFromCGPathWithOptions()
{
  return MEMORY[0x1E0D7D360]();
}

NSData *__cdecl UIImagePNGRepresentation(UIImage *image)
{
  return (NSData *)MEMORY[0x1E0CEB688](image);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t floatToHalfFloat(float a1)
{
  return MEMORY[0x1E0D3F010](a1);
}

uint64_t jet_createContext(void)
{
  return MEMORY[0x1E0D3F018]();
}

uint64_t jet_setClientLabel(NSString *a1)
{
  return MEMORY[0x1E0D3F020](a1);
}

uint64_t jet_isMetalSupported(void)
{
  return MEMORY[0x1E0D3F028]();
}

uint64_t jet_createSharedContext()
{
  return MEMORY[0x1E0D3F030]();
}

uint64_t jet_convert_pixel_data_rgb_565_to_rgba_8888(const void *a1, void *a2)
{
  return MEMORY[0x1E0D3F038](a1, a2);
}

uint64_t jet_convert_pixel_data_rgba_4444_to_rgba_8888(const void *a1, void *a2)
{
  return MEMORY[0x1E0D3F040](a1, a2);
}

uint64_t jet_convert_pixel_data_rgba_5551_to_rgba_8888(const void *a1, void *a2)
{
  return MEMORY[0x1E0D3F048](a1, a2);
}

uint64_t jet_convert_pixel_data_rgba_fp32_to_rgba_fp16(const void *a1, void *a2)
{
  return MEMORY[0x1E0D3F050](a1, a2);
}

uint64_t jet_convert_pixel_data_rgba_fp32_to_argb64_xr10_srgb(const void *a1, void *a2)
{
  return MEMORY[0x1E0D3F058](a1, a2);
}

uint64_t jet_context::create_texture_2d()
{
  return MEMORY[0x1E0D3F060]();
}

uint64_t jet_context::create_command_buffer(jet_context *this)
{
  return MEMORY[0x1E0D3F068](this);
}

uint64_t jet_buffer_pool::commit_data(jet_buffer_pool *this)
{
  return MEMORY[0x1E0D3F070](this);
}

uint64_t jet_buffer_pool::next_buffer(jet_buffer_pool *this)
{
  return MEMORY[0x1E0D3F078](this);
}

uint64_t jet_buffer_pool::get_data(jet_buffer_pool *this)
{
  return MEMORY[0x1E0D3F080](this);
}

uint64_t jet_context_Metal::override_Metal_render_state()
{
  return MEMORY[0x1E0D3F088]();
}

uint64_t jet_context_Metal::jet_context_Metal()
{
  return MEMORY[0x1E0D3F090]();
}

void jet_context_Metal::~jet_context_Metal(jet_context_Metal *this)
{
  MEMORY[0x1E0D3F098](this);
}

uint64_t jet_context_OpenGL::synchronize_OpenGL_state(jet_context_OpenGL *this)
{
  return MEMORY[0x1E0D3F0A0](this);
}

void jet_context_OpenGL::jet_context_OpenGL(jet_context_OpenGL *this, EAGLContext *a2)
{
  MEMORY[0x1E0D3F0A8](this, a2);
}

uint64_t PKPath::createPath(PKPath *this)
{
  return MEMORY[0x1E0D7D370](this);
}

uint64_t PKCAether::Evaluator::Evaluator(PKCAether::Evaluator *this, const PKCAether *a2)
{
  return MEMORY[0x1E0D7D378](this, a2);
}

uint64_t jet_buffer_pool::get_current_buffer(jet_buffer_pool *this)
{
  return MEMORY[0x1E0D3F0B0](this);
}

uint64_t PKCAether::Evaluator::evalFieldsVec2()
{
  return MEMORY[0x1E0D7D380]();
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x1E0DE4B00]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

void operator delete(void *__p)
{
  off_1EA4FD6B8(__p);
}

uint64_t operator delete()
{
  return off_1EA4FD6C0();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1EA4FD6C8(__sz);
}

uint64_t operator new()
{
  return off_1EA4FD6D0();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  simd_float4x4 result;

  MEMORY[0x1E0C80B38]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2], (__n128)a1.columns[3]);
  result.columns[3].i64[1] = v8;
  result.columns[3].i64[0] = v7;
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x1E0C80BD0](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t _os_crash()
{
  return MEMORY[0x1E0C81000]();
}

float acosf(float a1)
{
  float result;

  MEMORY[0x1E0C81508](a1);
  return result;
}

void alBufferData(ALuint bid, ALenum format, const ALvoid *data, ALsizei size, ALsizei freq)
{
  MEMORY[0x1E0CD0870](*(_QWORD *)&bid, *(_QWORD *)&format, data, *(_QWORD *)&size, *(_QWORD *)&freq);
}

void alDeleteBuffers(ALsizei n, const ALuint *buffers)
{
  MEMORY[0x1E0CD0878](*(_QWORD *)&n, buffers);
}

void alDeleteSources(ALsizei n, const ALuint *sources)
{
  MEMORY[0x1E0CD0880](*(_QWORD *)&n, sources);
}

void alGenBuffers(ALsizei n, ALuint *buffers)
{
  MEMORY[0x1E0CD0888](*(_QWORD *)&n, buffers);
}

void alGenSources(ALsizei n, ALuint *sources)
{
  MEMORY[0x1E0CD0890](*(_QWORD *)&n, sources);
}

ALenum alGetError(void)
{
  return MEMORY[0x1E0CD0898]();
}

void alGetListener3f(ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3)
{
  MEMORY[0x1E0CD08A0](*(_QWORD *)&param, value1, value2, value3);
}

void alGetListenerf(ALenum param, ALfloat *value)
{
  MEMORY[0x1E0CD08A8](*(_QWORD *)&param, value);
}

void alGetSource3f(ALuint sid, ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3)
{
  MEMORY[0x1E0CD08B0](*(_QWORD *)&sid, *(_QWORD *)&param, value1, value2, value3);
}

void alGetSourcef(ALuint sid, ALenum param, ALfloat *value)
{
  MEMORY[0x1E0CD08B8](*(_QWORD *)&sid, *(_QWORD *)&param, value);
}

void alGetSourcei(ALuint sid, ALenum param, ALint *value)
{
  MEMORY[0x1E0CD08C0](*(_QWORD *)&sid, *(_QWORD *)&param, value);
}

void alListener3f(ALenum param, ALfloat value1, ALfloat value2, ALfloat value3)
{
  MEMORY[0x1E0CD08C8](*(_QWORD *)&param, value1, value2, value3);
}

void alListenerf(ALenum param, ALfloat value)
{
  MEMORY[0x1E0CD08D0](*(_QWORD *)&param, value);
}

void alSource3f(ALuint sid, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3)
{
  MEMORY[0x1E0CD08D8](*(_QWORD *)&sid, *(_QWORD *)&param, value1, value2, value3);
}

void alSourcePause(ALuint sid)
{
  MEMORY[0x1E0CD08E0](*(_QWORD *)&sid);
}

void alSourcePlay(ALuint sid)
{
  MEMORY[0x1E0CD08E8](*(_QWORD *)&sid);
}

void alSourceQueueBuffers(ALuint sid, ALsizei numEntries, const ALuint *bids)
{
  MEMORY[0x1E0CD08F0](*(_QWORD *)&sid, *(_QWORD *)&numEntries, bids);
}

void alSourceStop(ALuint sid)
{
  MEMORY[0x1E0CD08F8](*(_QWORD *)&sid);
}

void alSourceUnqueueBuffers(ALuint sid, ALsizei numEntries, ALuint *bids)
{
  MEMORY[0x1E0CD0900](*(_QWORD *)&sid, *(_QWORD *)&numEntries, bids);
}

void alSourcef(ALuint sid, ALenum param, ALfloat value)
{
  MEMORY[0x1E0CD0908](*(_QWORD *)&sid, *(_QWORD *)&param, value);
}

void alSourcei(ALuint sid, ALenum param, ALint value)
{
  MEMORY[0x1E0CD0910](*(_QWORD *)&sid, *(_QWORD *)&param, *(_QWORD *)&value);
}

ALCBOOLean alcCloseDevice(ALCdevice *device)
{
  return MEMORY[0x1E0CD0918](device);
}

ALCcontext *__cdecl alcCreateContext(ALCdevice *device, const ALCint *attrlist)
{
  return (ALCcontext *)MEMORY[0x1E0CD0920](device, attrlist);
}

void alcDestroyContext(ALCcontext *context)
{
  MEMORY[0x1E0CD0928](context);
}

ALCcontext *alcGetCurrentContext(void)
{
  return (ALCcontext *)MEMORY[0x1E0CD0930]();
}

ALCBOOLean alcMakeContextCurrent(ALCcontext *context)
{
  return MEMORY[0x1E0CD0938](context);
}

ALCdevice *__cdecl alcOpenDevice(const ALCchar *devicename)
{
  return (ALCdevice *)MEMORY[0x1E0CD0940](devicename);
}

void alcProcessContext(ALCcontext *context)
{
  MEMORY[0x1E0CD0948](context);
}

void alcSuspendContext(ALCcontext *context)
{
  MEMORY[0x1E0CD0950](context);
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1E0C81588](*(_QWORD *)&__upper_bound);
}

float asinf(float a1)
{
  float result;

  MEMORY[0x1E0C815A0](a1);
  return result;
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C81628](a1, a2);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

uint64_t clear_mapped_memory()
{
  return MEMORY[0x1E0D1A3A8]();
}

float cosf(float a1)
{
  float result;

  MEMORY[0x1E0C82B48](a1);
  return result;
}

uint64_t create_mapped_memory_cache_for_task()
{
  return MEMORY[0x1E0D1A3B8]();
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE92C0](strm, *(_QWORD *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE92D0](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE92D8](strm, *(_QWORD *)&level, *(_QWORD *)&method, *(_QWORD *)&windowBits, *(_QWORD *)&memLevel, *(_QWORD *)&strategy, version, *(_QWORD *)&stream_size);
}

uint64_t destroy_mapped_memory_cache()
{
  return MEMORY[0x1E0D1A3C8]();
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

uint64_t dyld_get_active_platform()
{
  return MEMORY[0x1E0C830A0]();
}

uint64_t dyld_get_program_sdk_version()
{
  return MEMORY[0x1E0C830B8]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1E0C83158]();
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

uint64_t fieldRepresentedObject()
{
  return MEMORY[0x1E0D7D388]();
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C83448](a1, a2);
  return result;
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

void glBindFramebuffer(GLenum target, GLuint framebuffer)
{
  MEMORY[0x1E0CD0980](*(_QWORD *)&target, *(_QWORD *)&framebuffer);
}

void glBindRenderbuffer(GLenum target, GLuint renderbuffer)
{
  MEMORY[0x1E0CD0988](*(_QWORD *)&target, *(_QWORD *)&renderbuffer);
}

GLenum glCheckFramebufferStatus(GLenum target)
{
  return MEMORY[0x1E0CD09D8](*(_QWORD *)&target);
}

void glClear(GLbitfield mask)
{
  MEMORY[0x1E0CD09E0](*(_QWORD *)&mask);
}

void glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
  MEMORY[0x1E0CD09E8](red, green, blue, alpha);
}

void glDepthMask(GLBOOLean flag)
{
  MEMORY[0x1E0CD0A78](flag);
}

void glDisable(GLenum cap)
{
  MEMORY[0x1E0CD0A88](*(_QWORD *)&cap);
}

void glEnable(GLenum cap)
{
  MEMORY[0x1E0CD0AB8](*(_QWORD *)&cap);
}

void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
  MEMORY[0x1E0CD0B10](*(_QWORD *)&n, renderbuffers);
}

void glGetBooleanv(GLenum pname, GLBOOLean *params)
{
  MEMORY[0x1E0CD0B50](*(_QWORD *)&pname, params);
}

GLenum glGetError(void)
{
  return MEMORY[0x1E0CD0B58]();
}

void glGetFloatv(GLenum pname, GLfloat *params)
{
  MEMORY[0x1E0CD0B60](*(_QWORD *)&pname, params);
}

void glGetIntegerv(GLenum pname, GLint *params)
{
  MEMORY[0x1E0CD0B68](*(_QWORD *)&pname, params);
}

void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
  MEMORY[0x1E0CD0B80](*(_QWORD *)&target, *(_QWORD *)&pname, params);
}

void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
{
  MEMORY[0x1E0CD0BB0](*(_QWORD *)&index, *(_QWORD *)&pname, params);
}

void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
  MEMORY[0x1E0CD0D10](*(_QWORD *)&x, *(_QWORD *)&y, *(_QWORD *)&width, *(_QWORD *)&height);
}

kern_return_t host_processor_info(host_t host, processor_flavor_t flavor, natural_t *out_processor_count, processor_info_array_t *out_processor_info, mach_msg_type_number_t *out_processor_infoCnt)
{
  return MEMORY[0x1E0C838C8](*(_QWORD *)&host, *(_QWORD *)&flavor, out_processor_count, out_processor_info, out_processor_infoCnt);
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE93A0](strm, *(_QWORD *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE93B8](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE93C8](strm, *(_QWORD *)&windowBits, version, *(_QWORD *)&stream_size);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

uint64_t mach_approximate_time(void)
{
  return MEMORY[0x1E0C83C58]();
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x1E0C83C90]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

uint64_t mapped_memory_read()
{
  return MEMORY[0x1E0D1A590]();
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
  MEMORY[0x1E0DE7C30](dest, src, size, atomic, hasStrong);
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_rethrow(void)
{
  MEMORY[0x1E0DE7C98]();
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int rand(void)
{
  return MEMORY[0x1E0C84FB0]();
}

float sinf(float a1)
{
  float result;

  MEMORY[0x1E0C85420](a1);
  return result;
}

uint64_t snoise2()
{
  return MEMORY[0x1E0D7D398]();
}

uint64_t srdnoise3()
{
  return MEMORY[0x1E0D7D3A0]();
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1E0C85A98](*(_QWORD *)&target_task, address, size);
}

